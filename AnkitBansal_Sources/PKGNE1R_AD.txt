// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKGNE1R
// ?Date: 14.08.2025 Time: 02:49:22
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification changes
DO;

//?E00144 Add classification to process
//?06/11/2008 SLM
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(LCL.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


//?USER: Initialize key screen

CASE;

// IF PAR.DF Defect Code EQ WRK.Blank USR
IF PAR.DF_Defect_Code = WRK.Blank_USR;

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Program_mode = 'ADD';

ENDIF;

//?USER: Initialize detail screen (new record)

// DTL.RS Record Status = CND.Active
DTL.RS_Record_Status = 'A';

//?USER: Initialize detail screen (existing record)

// DTL.Condition Name 1 USR = Condition name of DB1.DF Defect Type
DTL.Condition_Name_1_USR = RTVCND(DB1.DF_Defect_Type);

// DTL.Record Status Desc Usr = Condition name of DB1.RS Record Status
DTL.Record_Status_Desc_Usr = RTVCND(DB1.RS_Record_Status);

// DTL.Text 5                USR = Condition name of DB1.DF Scale Weight Required
DTL.Text_5_USR = RTVCND(DB1.DF_Scale_Weight_Required);

// Call program Val Commodity Market  XF.
CALL PROGRAM(Val Commodity Market  XF) ('PDG1XFR');
PARAMETER(DTL.DF_Commodity_Market);
PARAMETER(DTL.Condition_Name_2_USR);
PARAMETER(LCL.Invalid_Y_N_USR);

// Call program Val Commodity Group   XF.
CALL PROGRAM(Val Commodity Group   XF) ('PDG2XFR');
PARAMETER(DTL.DF_Commodity_Group);
PARAMETER(DTL.Condition_Name_3_USR);
PARAMETER(LCL.Invalid_Y_N_USR);

// Call program Val Market Date Method UP.
CALL PROGRAM(Val Market Date Method UP) ('PDZUXFR');
PARAMETER(PGM.*Return_code);
PARAMETER(PAR.CC_Company_Number);
PARAMETER(DTL.DF_Market_Date_Method);
PARAMETER(DTL.Market_Date_Method_Desc);
PARAMETER('H');

// DTL.Class Description Usr = Condition name of DB1.DF Classification Defs
DTL.Class_Description_Usr = RTVCND(DB1.DF_Classification_Defs);

//?USER: Validate detail screen fields

// DTL.Record Status Desc Usr = Condition name of DTL.RS Record Status
DTL.Record_Status_Desc_Usr = RTVCND(DTL.RS_Record_Status);

// DTL.Condition Name 1 USR = Condition name of DTL.DF Defect Type
DTL.Condition_Name_1_USR = RTVCND(DTL.DF_Defect_Type);

// DTL.Text 5                USR = Condition name of DTL.DF Scale Weight Required
DTL.Text_5_USR = RTVCND(DTL.DF_Scale_Weight_Required);

//?Prompt
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

//?Commodity Market
CASE;

// IF PGM.*Cursor field <IS> DTL.DF Commodity Market
IF PGM.*Cursor_field = DTL.DF_Commodity_Market;

// Call program Sel Commodity Market  XF.
CALL PROGRAM(Sel Commodity Market  XF) ('PDEDSRR');
PARAMETER(DTL.DF_Commodity_Market);

ENDIF;

//?Commodity Group
CASE;

// IF PGM.*Cursor field <IS> DTL.DF Commodity Group
IF PGM.*Cursor_field = DTL.DF_Commodity_Group;

// Call program Sel Commodity Group   XF.
CALL PROGRAM(Sel Commodity Group   XF) ('PDECSRR');
PARAMETER(DTL.DF_Commodity_Group);

ENDIF;

//?Market Date Method
CASE;

// IF PGM.*Cursor field <IS> DTL.DF Market Date Method
IF PGM.*Cursor_field = DTL.DF_Market_Date_Method;

// Call program Sel Market Date Method UP.
CALL PROGRAM(Sel Market Date Method UP) ('PDZWXFR');
PARAMETER(PGM.*Return_code);
PARAMETER(PAR.CC_Company_Number);
PARAMETER(DTL.DF_Market_Date_Method);
PARAMETER(DTL.Market_Date_Method_Desc);
PARAMETER('H');

ENDIF;

ENDIF;

//?Val:  Commodity Market
CASE;

// IF DTL.DF Commodity Market NE LCL.Blank USR
IF DTL.DF_Commodity_Market <> LCL.Blank_USR;

// Call program Val Commodity Market  XF.
CALL PROGRAM(Val Commodity Market  XF) ('PDG1XFR');
PARAMETER(DTL.DF_Commodity_Market);
PARAMETER(DTL.Condition_Name_2_USR);
PARAMETER(LCL.Invalid_Y_N_USR);

CASE;

// IF LCL.Invalid Y/N USR is Yes
IF LCL.Invalid_Y_N_USR = 'Y';

// Send error message - 'Commodity Market &1 is invalid.'
ERROR(PRK0482);
MSGPARM(DTL.DF_Commodity_Market);

ENDIF;

ENDIF;

//?Val:  Commodity Group
CASE;

// IF DTL.DF Commodity Group NE LCL.Blank USR
IF DTL.DF_Commodity_Group <> LCL.Blank_USR;

// Call program Val Commodity Group   XF.
CALL PROGRAM(Val Commodity Group   XF) ('PDG2XFR');
PARAMETER(DTL.DF_Commodity_Group);
PARAMETER(DTL.Condition_Name_3_USR);
PARAMETER(LCL.Invalid_Y_N_USR);

CASE;

// IF LCL.Invalid Y/N USR is Yes
IF LCL.Invalid_Y_N_USR = 'Y';

// Send error message - 'Commodity Group &1 is invalid.'
ERROR(PRK0483);
MSGPARM(DTL.DF_Commodity_Group);

ENDIF;

ENDIF;

//?Val:  Market Date Method
CASE;

// IF DTL.DF Market Date Method NE LCL.Blank USR
IF DTL.DF_Market_Date_Method <> LCL.Blank_USR;

// Call program Val Market Date Method UP.
CALL PROGRAM(Val Market Date Method UP) ('PDZUXFR');
PARAMETER(PGM.*Return_code);
PARAMETER(PAR.CC_Company_Number);
PARAMETER(DTL.DF_Market_Date_Method);
PARAMETER(DTL.Market_Date_Method_Desc);
PARAMETER('H');

CASE;

// IF DTL.Market Date Method Desc EQ WRK.Blank USR
IF DTL.Market_Date_Method_Desc = WRK.Blank_USR;

// Send error message - 'Invalid Market Date Method.'
ERROR(PRK0556);
MSGPARM(DTL.DF_Market_Date_Method);

ENDIF;

ENDIF;

// DTL.Class Description Usr = Condition name of DB1.DF Classification Defs
DTL.Class_Description_Usr = RTVCND(DB1.DF_Classification_Defs);

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Defect            CR) TYPE(CRTOBJ) FILE(PKA7REP)           AB1103497;
PARAMETER(DTL.DF_Defect_Code);
PARAMETER(DTL.DF_Description);
PARAMETER(DTL.DF_Defect_Type);
PARAMETER(DTL.DF_Scale_Weight_Required);
PARAMETER(DTL.DF_Classification_Defs);
PARAMETER(DTL.DF_Unused_Sts_2);
PARAMETER(DTL.DF_Unused_Sts_3);
PARAMETER(DTL.DF_Unused_Sts_4);
PARAMETER(DTL.DF_Commodity_Market);
PARAMETER(DTL.DF_Commodity_Group);
PARAMETER(DTL.DF_Market_Date_Method);
PARAMETER(DTL.DF_Market_Percent);
PARAMETER(DTL.DF_Unused_Price_1);
PARAMETER(DTL.DF_Unused_Price_2);
PARAMETER(DTL.DF_Unused_Price_3);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Defect            CH) TYPE(CHGOBJ) FILE(PKA7REP)           AB1103498;
PARAMETER(DTL.DF_Defect_Code);
PARAMETER(DTL.DF_Description);
PARAMETER(DTL.DF_Defect_Type);
PARAMETER(DTL.DF_Scale_Weight_Required);
PARAMETER(DTL.DF_Classification_Defs);
PARAMETER(DTL.DF_Unused_Sts_2);
PARAMETER(DTL.DF_Unused_Sts_3);
PARAMETER(DTL.DF_Unused_Sts_4);
PARAMETER(DTL.DF_Commodity_Market);
PARAMETER(DTL.DF_Commodity_Group);
PARAMETER(DTL.DF_Market_Date_Method);
PARAMETER(DTL.DF_Market_Percent);
PARAMETER(DTL.DF_Unused_Price_1);
PARAMETER(DTL.DF_Unused_Price_2);
PARAMETER(DTL.DF_Unused_Price_3);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


//?USER: Process command keys

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

RETURN;

ENDIF;

