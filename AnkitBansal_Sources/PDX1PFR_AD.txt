// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDX1PFR
// ?Date: 14.08.2025 Time: 12:04:47
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

//?USER: Record selection processing

//?Select by Company
CASE;

// IF PAR.Company Number is greater than zero
IF PAR.Company_Number > *ZERO;

// AND DB1.Company Number NE PAR.Company Number
AND DB1.Company_Number <> PAR.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

CASE;

// IF PAR.Record Status NE DB1.Record Status
IF PAR.Record_Status <> DB1.Record_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select by Financial Type
CASE;

// IF PAR.Financial Type is Detail Financials
IF PAR.Financial_Type = 'A'/'F'/'S';

// AND DB1.Financial Type NE PAR.Financial Type
AND DB1.Financial_Type <> PAR.Financial_Type;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

CASE;

// IF PAR.Record Status NE DB1.Record Status
IF PAR.Record_Status <> DB1.Record_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select by G/L Code Dr.
CASE;

// IF PAR.G/L Code Dr is Entered
IF PAR.G_L_Code_Dr <> *BLANK;

// AND DB1.G/L Code Dr NE PAR.G/L Code Dr
AND DB1.G_L_Code_Dr <> PAR.G_L_Code_Dr;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

CASE;

// IF PAR.Record Status NE DB1.Record Status
IF PAR.Record_Status <> DB1.Record_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select by G/L Code Cr.
CASE;

// IF PAR.G/L Code Cr is Entered
IF PAR.G_L_Code_Cr <> *BLANK;

// AND DB1.G/L Code Cr NE PAR.G/L Code Cr
AND DB1.G_L_Code_Cr <> PAR.G_L_Code_Cr;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

CASE;

// IF PAR.Record Status NE DB1.Record Status
IF PAR.Record_Status <> DB1.Record_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select by Record Status
CASE;

// IF PAR.Record Status is Valid Entries
IF PAR.Record_Status = 'A'/'D'/'I';

// AND DB1.Record Status NE PAR.Record Status
AND DB1.Record_Status <> PAR.Record_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

CASE;

// IF PAR.Record Status NE DB1.Record Status
IF PAR.Record_Status <> DB1.Record_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: On print of first page format

// 1PG.Company Number = PAR.Company Number
X1PG_Company_Number = PAR.Company_Number;

//?Company name
CASE;

// IF PAR.Company Number EQ WRK.ZERO
IF PAR.Company_Number = WRK.ZERO;

// 1PG.Company Name = CON.*BLANK
X1PG_Company_Name = *BLANK;

//?Company name
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// 1PG.Financial Type = PAR.Financial Type
X1PG_Financial_Type = PAR.Financial_Type;

// 1PG.USR Description - 15 = Condition name of 1PG.Financial Type
X1PG_USR_Description_15 = RTVCND(X1PG_Financial_Type);

// 1PG.G/L Code Dr = PAR.G/L Code Dr
X1PG_G_L_Code_Dr = PAR.G_L_Code_Dr;

// Call program Val G/L Act Cde -no co XF.
CALL PROGRAM(Val G/L Act Cde -no co XF) ('PKW1XFR');
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_G_L_Code_Dr);
PARAMETER(X1PG_USR_Description_40);
PARAMETER(WRK.G_L_Account_Id_USR);
PARAMETER(WRK.G_L_Account_Type_1_USR);
PARAMETER(WRK.G_L_Account_Type_2_USR);
PARAMETER(WRK.Record_Found_USR);

// 1PG.G/L Code Cr = PAR.G/L Code Cr
X1PG_G_L_Code_Cr = PAR.G_L_Code_Cr;

// Call program Val G/L Act Cde 2 HPE XF.
CALL PROGRAM(Val G/L Act Cde 2 HPE XF) ('PKVBXFR');
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_G_L_Code_Cr);
PARAMETER(X1PG_USR_Description_40_2);
PARAMETER(WRK.G_L_Account_Id_USR);
PARAMETER(WRK.G_L_Account_Type_1_USR);
PARAMETER(WRK.G_L_Account_Type_2_USR);
PARAMETER(WRK.Record_Found_USR);

// 1PG.Record Status = PAR.Record Status
X1PG_Record_Status = PAR.Record_Status;

// 1PG.Status Description = Condition name of 1PG.Record Status
X1PG_Status_Description = RTVCND(X1PG_Record_Status);

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

// SUPPRESSED PRINT Company Number header format

//?USER: On print of detail format

// CUR.USR Description - 15 = Condition name of CUR.Financial Type
CUR.USR_Description_15 = RTVCND(CUR.Financial_Type);

// Call program Val G/L Act Cde 2 HPE XF.
CALL PROGRAM(Val G/L Act Cde 2 HPE XF) ('PKVBXFR');
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.G_L_Code_Dr);
PARAMETER(CUR.USR_Description);
PARAMETER(WRK.G_L_Account_Id_USR);
PARAMETER(WRK.G_L_Account_Type_1_USR);
PARAMETER(WRK.G_L_Account_Type_2_USR);
PARAMETER(WRK.Record_Found_USR);

// 1PG.G/L Code Cr = PAR.G/L Code Cr
X1PG_G_L_Code_Cr = PAR.G_L_Code_Cr;

// Call program Val G/L Act Cde 2 HPE XF.
CALL PROGRAM(Val G/L Act Cde 2 HPE XF) ('PKVBXFR');
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.G_L_Code_Cr);
PARAMETER(CUR.USR_Description_New);
PARAMETER(WRK.G_L_Account_Id_USR);
PARAMETER(WRK.G_L_Account_Type_1_USR);
PARAMETER(WRK.G_L_Account_Type_2_USR);
PARAMETER(WRK.Record_Found_USR);

//?USER: Print required level totals

// SUPPRESSED PRINT Company Number totals format

