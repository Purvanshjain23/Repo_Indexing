// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMEZDFR
// ?Date: 14.08.2025 Time: 03:42:51
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// WRK.Company Number = PAR.Company Number
WRK.Company_Number = PAR.Company_Number;

// PGM.*Scan limit = CND.50000
PGM.*Scan_limit = 50000;

// WRK.From Date             USR = JOB.*Job date
WRK.From_Date_USR = JOB.*Job_date;

// WRK.To Date               USR = JOB.*Job date
WRK.To_Date_USR = JOB.*Job_date;

//?USER: Initialize subfile control

// CTL.Order Type - Sales = CND.Transfer Order
CTL.Order_Type_Sales = 'TR';

CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// CTL.Company Number = WRK.Company Number
CTL.Company_Number = WRK.Company_Number;

// CTL.To Date               USR = WRK.To Date               USR
CTL.To_Date_USR = WRK.To_Date_USR;

// CTL.From Date             USR = CTL.To Date               USR + CON.-7 *DAYS
CTL.From_Date_USR = DATEINCR(CTL.To_Date_USR '-7' 'DY' 1111111 'NONE' 'N' 1);

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

//?T11041 DN 07/26/17-Get Order Type Desc & Set Toggle Constant.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Order Type Desc.   RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1281766;
PARAMETER(CTL.Order_Type_Sales);
PARAMETER(CTL.Order_Type_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.Toggle USR = CND.Off
PAR.Toggle_USR = 'OFF';

// CTL.Text USR 15 = CON.***ALL***
CTL.Text_USR_15 = '***ALL***';

ENDIF;

ENDIF;

// WRK.From Date             USR = CTL.From Date             USR
WRK.From_Date_USR = CTL.From_Date_USR;

// WRK.To Date               USR = CTL.To Date               USR
WRK.To_Date_USR = CTL.To_Date_USR;

// WRK.USR Warehouse Code = CTL.USR Warehouse Code
WRK.USR_Warehouse_Code = CTL.USR_Warehouse_Code;

// WRK.Warehouse Code SavUsr = CTL.Warehouse Code SavUsr
WRK.Warehouse_Code_SavUsr = CTL.Warehouse_Code_SavUsr;

//?company number required  - if other selections not made
CASE;

// IF CTL.Company Number is Equal to zero
IF CTL.Company_Number = *ZERO;

CASE;

// IF CTL.Order Number is Greater then zero
IF CTL.Order_Number > *ZERO;

EXECUTE FUNCTION(Rtv Actual Ship/Co    RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2148581;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(LCL.Actual_Shipped_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF CTL.From Date             USR GT LCL.Actual Shipped Date
IF CTL.From_Date_USR > LCL.Actual_Shipped_Date;

// CTL.From Date             USR = LCL.Actual Shipped Date
CTL.From_Date_USR = LCL.Actual_Shipped_Date;

ENDIF;

// IF CTL.USR Warehouse Code is Not Blanks
IF CTL.USR_Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
PARAMETER(CTL.USR_Warehouse_Code);
PARAMETER(CTL.Company_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF CTL.Warehouse Code SavUsr is Not Blanks
IF CTL.Warehouse_Code_SavUsr <> *BLANK;

EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
PARAMETER(CTL.Warehouse_Code_SavUsr);
PARAMETER(CTL.Company_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid Company Number'
ERROR(USR1783);
MSGPARM(CTL.Company_Number);

ENDIF;

ENDIF;

//?from date required
CASE;

// IF CTL.From Date             USR is Not Entered
IF CTL.From_Date_USR = *ZERO;

// Send error message - 'Invalid Date'
ERROR(USR4268);
MSGPARM(CTL.From_Date_USR);

ENDIF;

//?to date required
CASE;

// IF CTL.To Date               USR is Not Entered
IF CTL.To_Date_USR = *ZERO;

// Send error message - 'Invalid Date'
ERROR(USR4268);
MSGPARM(CTL.To_Date_USR);

ENDIF;

//?USER: Initialize subfile record from DBF record

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

//?T11041 DN 07/26/17-Commented out, access path will now SEL 'TR' only.
//?company number required at the ctl
CASE;

// IF CTL.Company Number is Equal to zero
IF CTL.Company_Number = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

QUIT;

ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?** Only select matching company number records
CASE;

// IF DB1.Company Number NE CTL.Company Number
IF DB1.Company_Number <> CTL.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?Actual Shipped Date must be entered
CASE;

// IF DB1.Actual Shipped Date is not entered
IF DB1.Actual_Shipped_Date = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF CTL.From Date             USR is Entered
IF CTL.From_Date_USR <> *ZERO;

//?Actual Shipped Date must be WITH in Ranage
CASE;

// IF DB1.Actual Shipped Date LT CTL.From Date             USR
IF DB1.Actual_Shipped_Date < CTL.From_Date_USR;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?Actual Shipped Date must be WITH in Ranage
// IF DB1.Actual Shipped Date GT CTL.To Date               USR
IF DB1.Actual_Shipped_Date > CTL.To_Date_USR;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?Get From warehouse
// LCL.Order Sequence Number = CON.001
LCL.Order_Sequence_Number = 001;

// LCL.Order Secondary Line Seq = CON.001
LCL.Order_Secondary_Line_Seq = 001;

EXECUTE FUNCTION(RTV Whse and Reason    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1517511;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(LCL.Order_Sequence_Number);
PARAMETER(LCL.Order_Secondary_Line_Seq);
PARAMETER(RCD.USR_Warehouse_Code);
PARAMETER(RCD.Reason_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?C2748:  Changed RTV Warehouse Code RT to exclude Cancelled lines.
 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF *OTHERWISE
 IF *OTHERWISE;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


//?Get to warehouse
EXECUTE FUNCTION(Rtv Default WHS/OutWhs RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1937488;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(RCD.Warehouse_Code_SavUsr);
PARAMETER(NLL.Outside_Warehouse_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?** From Whs:  Only select if warehouse enter select on warehouse
CASE;

// IF CTL.USR Warehouse Code is Warehouse Code Blank
IF CTL.USR_Warehouse_Code = *BLANK;

// OR CTL.USR Warehouse Code EQ RCD.USR Warehouse Code
OR CTL.USR_Warehouse_Code = RCD.USR_Warehouse_Code;

//?** From Whs:  Only select if warehouse enter select on warehouse
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?** To Whs:  Only select if warehouse enter select on warehouse
CASE;

// IF CTL.Warehouse Code SavUsr is Warehouse Code Blank
IF CTL.Warehouse_Code_SavUsr = *BLANK;

// OR CTL.Warehouse Code SavUsr EQ RCD.Warehouse Code SavUsr
OR CTL.Warehouse_Code_SavUsr = RCD.Warehouse_Code_SavUsr;

//?** To Whs:  Only select if warehouse enter select on warehouse
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?T11041 DN 07/25/17-Get/Set EDI 943/944 Status Info.
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(RTV EDI 943/944 Sts    RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2139784;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.OHE_EDI_Error_Reasons);
PARAMETER(RCD.OHE_EDI_943_Action);
PARAMETER(RCD.OHE_EDI_944_Action);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Set EDI 943 Action Desc.
CASE;

// IF RCD.OHE EDI 943 Action is Blanks
IF RCD.OHE_EDI_943_Action = *BLANK;

// RCD.EDI 943 Action Dsc USR = CON.*BLANK
RCD.EDI_943_Action_Dsc_USR = *BLANK;

//?Set EDI 943 Action Desc.
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.EDI 943 Action Dsc USR = Condition name of RCD.OHE EDI 943 Action
RCD.EDI_943_Action_Dsc_USR = RTVCND(RCD.OHE_EDI_943_Action);

ENDIF;

//?Set EDI 944 Action Desc.
CASE;

// IF RCD.OHE EDI 944 Action is Blanks
IF RCD.OHE_EDI_944_Action = *BLANK;

// RCD.EDI 944 Action Dsc USR = CON.*BLANK
RCD.EDI_944_Action_Dsc_USR = *BLANK;

//?Set EDI 944 Action Desc.
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.EDI 944 Action Dsc USR = Condition name of RCD.OHE EDI 944 Action
RCD.EDI_944_Action_Dsc_USR = RTVCND(RCD.OHE_EDI_944_Action);

ENDIF;

CASE;

// IF LCL.OHE EDI Error Reasons is Blank
IF LCL.OHE_EDI_Error_Reasons = *BLANK;

// RCD.Condition Desc. 2  USR = CND.not entered
RCD.Condition_Desc_2_USR = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Condition Desc. 2  USR = Condition name of LCL.OHE EDI Error Reasons
RCD.Condition_Desc_2_USR = RTVCND(LCL.OHE_EDI_Error_Reasons);

ENDIF;

//?Display In Transit Orders if Toggle was Pressed.
CASE;

// IF PAR.Toggle USR is On
IF PAR.Toggle_USR = 'ON';

//?Select In Transit Orders Only.
CASE;

// IF RCD.OHE EDI 943 Action is Sent or Transit
IF RCD.OHE_EDI_943_Action = 'S'/'T';

// AND RCD.OHE EDI 944 Action is Blanks
AND ( RCD.OHE_EDI_944_Action = *BLANK;

// OR RCD.OHE EDI 944 Action is Rcv-Error
OR RCD.OHE_EDI_944_Action = 'E' );

//?also show ERROR  12/20/18
//?Select In Transit Orders Only.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?** Display the Warehouse and the Total Units Shipped so far
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

// WRK.USR Quantity = CON.*ZERO
WRK.USR_Quantity = *ZERO;

EXECUTE FUNCTION(RTV Tot Qty Shpd-ASD   RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1813041;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(1);
PARAMETER(1);
PARAMETER(WRK.USR_Quantity);
PARAMETER(CTL.From_Date_USR);
PARAMETER(CTL.To_Date_USR);
{
 //?USER: Initialize routine

 // PAR.USR Quantity = CON.*ZERO
 PAR.USR_Quantity = *ZERO;

 //?USER: Process Data record

 //?** Accum quantity shipped within requested dates
 CASE;

 // IF DB1.Actual Shipped Date GE PAR.From Date             USR
 IF DB1.Actual_Shipped_Date >= PAR.From_Date_USR;

 // AND DB1.Actual Shipped Date LE PAR.To Date               USR
 AND DB1.Actual_Shipped_Date <= PAR.To_Date_USR;

 // PAR.USR Quantity = PAR.USR Quantity + DB1.Quantity Shipped Total
 PAR.USR_Quantity = PAR.USR_Quantity + DB1.Quantity_Shipped_Total;

 ENDIF;

}


// RCD.Quantity Shipped Total = WRK.USR Quantity
RCD.Quantity_Shipped_Total = WRK.USR_Quantity;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

CASE;

// IF CTL.From Date             USR NE WRK.From Date             USR
IF CTL.From_Date_USR <> WRK.From_Date_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF CTL.To Date               USR NE WRK.To Date               USR
IF CTL.To_Date_USR <> WRK.To_Date_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF CTL.USR Warehouse Code NE WRK.USR Warehouse Code
IF CTL.USR_Warehouse_Code <> WRK.USR_Warehouse_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF CTL.Warehouse Code SavUsr NE WRK.Warehouse Code SavUsr
IF CTL.Warehouse_Code_SavUsr <> WRK.Warehouse_Code_SavUsr;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F10=Toggle In Transit-EDI - T11041 DN 07/25/17
CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

CASE;

// IF PAR.Toggle USR is Off
IF PAR.Toggle_USR = 'OFF';

//?Display In Transit Orders.
// PAR.Toggle USR = CND.On
PAR.Toggle_USR = 'ON';

// CTL.Text USR 15 = CON.**In Transit**
CTL.Text_USR_15 = '**In Transit**';

// IF *OTHERWISE
IF *OTHERWISE;

//?Display ALL Orders.
// PAR.Toggle USR = CND.Off
PAR.Toggle_USR = 'OFF';

// CTL.Text USR 15 = CON.***ALL***
CTL.Text_USR_15 = '***ALL***';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F20=Email Ship/Rcvd Diff EDI - T11041 DN 09/14/18
CASE;

// IF CTL.*CMD key is CF20
IF CTL.*CMD_key = '20';

//?Validate Required Fields and Email Report via SEQUEL.
CASE;

// IF CTL.Warehouse Code SavUsr is Blanks
IF CTL.Warehouse_Code_SavUsr = *BLANK;

// Send error message - 'Warehouse Code is required.'
ERROR(USR2015);
MSGPARM(CTL.Warehouse_Code_SavUsr);

//?Validate Required Fields and Email Report via SEQUEL.
// IF CTL.From Date             USR is Not Entered
IF CTL.From_Date_USR = *ZERO;

// OR CTL.To Date               USR is Not Entered
OR CTL.To_Date_USR = *ZERO;

// Send error message - 'A Date Range is Required.'
ERROR(USR2591);
MSGPARM(CTL.From_Date_USR);
MSGPARM(WRK.Prm_From_Date);
MSGPARM(CTL.To_Date_USR);

//?Validate Required Fields and Email Report via SEQUEL.
// IF CTL.Warehouse Code SavUsr is Not Blanks
IF CTL.Warehouse_Code_SavUsr <> *BLANK;

EXECUTE FUNCTION(Rtv WHS Interchg All  RT) TYPE(RTVOBJ) FILE(PNG0REP)           AC2138766;
PARAMETER(CTL.Warehouse_Code_SavUsr);
PARAMETER('WHSTFR');
PARAMETER(NLL.Class_Code);
PARAMETER(NLL.EDI_Trading_Partner_No);
PARAMETER(NLL.EDI_Whs_Duns_Number);
PARAMETER(LCL.Record_Status);
PARAMETER(NLL.Create_Date);
PARAMETER(NLL.Create_Time);
PARAMETER(NLL.Create_User);
PARAMETER(NLL.Create_Program);
PARAMETER(NLL.Change_Date);
PARAMETER(NLL.Change_Time);
PARAMETER(NLL.Change_User);
PARAMETER(NLL.Change_Program);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF NOT LCL.Record Status is Active
IF ! LCL.Record_Status = 'A';

// Send error message - 'EDI WHS Interchange not found/active for warehouse &1.'
ERROR(USR5013);
MSGPARM(CTL.Warehouse_Code_SavUsr);

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Select Ship/Rcvd Diff USR = CND.Blank
LCL.Select_Ship_Rcvd_Diff_USR = *BLANK;

// LCL.Email Address = CON.*BLANK
LCL.Email_Address = *BLANK;

//?S14071 DN 11/08/18-Replaced Prompt to Select Ship/Rcvd Diff Flag.
// Call program Pmt Email Ship/Rcvd DifPV.
CALL PROGRAM(Pmt Email Ship/Rcvd DifPV) ('PUKAPVR');
PARAMETER(LCL.Select_Ship_Rcvd_Diff_USR);
PARAMETER(LCL.Email_Address);

//?Export Data to Excel via SEQUEL.
CASE;

// IF LCL.Email Address is Entered
IF LCL.Email_Address <> *BLANK;

// AND LCL.Select Ship/Rcvd Diff USR is Yes & No
AND LCL.Select_Ship_Rcvd_Diff_USR = 'N'/'Y';

// LCL.From Date (alpha)     USR = CVTVAR(CTL.From Date             USR)
LCL.From_Date_alpha_USR = CVTVAR(CTL.From_Date_USR);

// LCL.To Date (alpha)       USR = CVTVAR(CTL.To Date               USR)
LCL.To_Date_alpha_USR = CVTVAR(CTL.To_Date_USR);

// Call program PRT Ship vs Rcvd Diff CL.
SBMJOB;
CALL PROGRAM(PRT Ship vs Rcvd Diff CL) ('PUJJUPC');
PARAMETER(LCL.From_Date_alpha_USR);
PARAMETER(LCL.To_Date_alpha_USR);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Warehouse_Code_SavUsr);
PARAMETER(LCL.Email_Address);
PARAMETER(LCL.Select_Ship_Rcvd_Diff_USR);
SBMJOBOVR JOB(PRTEDIRCDF);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

// Send information message - '&1'
MESSAGE(USR4976 *INFO);
MSGPARM('Job submitted.');

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?F22=Email DTL In-Transit EDI - T11041 DN 07/31/17
CASE;

// IF CTL.*CMD key is CF22
IF CTL.*CMD_key = '22';

//?Validate Required Fields and Email Report via SEQUEL.
CASE;

// IF CTL.Warehouse Code SavUsr is Blanks
IF CTL.Warehouse_Code_SavUsr = *BLANK;

// Send error message - 'Warehouse Code is required.'
ERROR(USR2015);
MSGPARM(CTL.Warehouse_Code_SavUsr);

//?Validate Required Fields and Email Report via SEQUEL.
// IF CTL.From Date             USR is Not Entered
IF CTL.From_Date_USR = *ZERO;

// OR CTL.To Date               USR is Not Entered
OR CTL.To_Date_USR = *ZERO;

// Send error message - 'A Date Range is Required.'
ERROR(USR2591);
MSGPARM(CTL.From_Date_USR);
MSGPARM(WRK.Prm_From_Date);
MSGPARM(CTL.To_Date_USR);

//?Validate Required Fields and Email Report via SEQUEL.
// IF CTL.Warehouse Code SavUsr is Not Blanks
IF CTL.Warehouse_Code_SavUsr <> *BLANK;

EXECUTE FUNCTION(Rtv WHS Interchg All  RT) TYPE(RTVOBJ) FILE(PNG0REP)           AC2138766;
PARAMETER(CTL.Warehouse_Code_SavUsr);
PARAMETER('WHSTFR');
PARAMETER(NLL.Class_Code);
PARAMETER(NLL.EDI_Trading_Partner_No);
PARAMETER(NLL.EDI_Whs_Duns_Number);
PARAMETER(LCL.Record_Status);
PARAMETER(NLL.Create_Date);
PARAMETER(NLL.Create_Time);
PARAMETER(NLL.Create_User);
PARAMETER(NLL.Create_Program);
PARAMETER(NLL.Change_Date);
PARAMETER(NLL.Change_Time);
PARAMETER(NLL.Change_User);
PARAMETER(NLL.Change_Program);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF NOT LCL.Record Status is Active
IF ! LCL.Record_Status = 'A';

// Send error message - 'EDI WHS Interchange not found/active for warehouse &1.'
ERROR(USR5013);
MSGPARM(CTL.Warehouse_Code_SavUsr);

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Email Address = CON.*BLANK
LCL.Email_Address = *BLANK;

// Call program Pmt Enter Email Addr  PV.
CALL PROGRAM(Pmt Enter Email Addr  PV) ('POWGPVR');
PARAMETER(LCL.Email_Address);

//?Export Data to Excel via SEQUEL.
CASE;

// IF LCL.Email Address is Entered
IF LCL.Email_Address <> *BLANK;

// LCL.From Date (alpha)     USR = CVTVAR(CTL.From Date             USR)
LCL.From_Date_alpha_USR = CVTVAR(CTL.From_Date_USR);

// LCL.To Date (alpha)       USR = CVTVAR(CTL.To Date               USR)
LCL.To_Date_alpha_USR = CVTVAR(CTL.To_Date_USR);

// Call program PRT In Transit Orders  CL.
SBMJOB;
CALL PROGRAM(PRT In Transit Orders  CL) ('PUDPUPC');
PARAMETER(LCL.From_Date_alpha_USR);
PARAMETER(LCL.To_Date_alpha_USR);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Warehouse_Code);
PARAMETER(CTL.Warehouse_Code_SavUsr);
PARAMETER(LCL.Email_Address);
SBMJOBOVR JOB(PRTEDIIXNT);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

// Send information message - '&1'
MESSAGE(USR4976 *INFO);
MSGPARM('Job submitted.');

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?F7 =show intransit items from last edi 846
CASE;

// IF CTL.*CMD key is CF07
IF CTL.*CMD_key = '07';

// Call program Dsp Last 846 Intranst DF.
CALL PROGRAM(Dsp Last 846 Intranst DF) ('PUJHDFR');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

CASE;

// IF RCD.*SFLSEL is *Order Inquiry
IF RCD.*SFLSEL = '5'/'5';

//?** F5 - Display Order Header
// Call program Dsp Order Header       PV.
CALL PROGRAM(Dsp Order Header       PV) ('OMB5PVR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(RCD.Date_of_Original_Entry);
PARAMETER(RCD.Requested_Delivery_Time);
PARAMETER(PAR.Application_Code);

// IF RCD.*SFLSEL is *Order Detail
IF RCD.*SFLSEL = '8'/'8';

// Call program DSP Ord Inquiry Detail DF.
CALL PROGRAM(DSP Ord Inquiry Detail DF) ('PDPZDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.Order_Sequence_Number);
PARAMETER(WRK.Order_Secondary_Line_Seq);
PARAMETER(PAR.Application_Code);

// IF RCD.*SFLSEL is 9
IF RCD.*SFLSEL = '9';

EXECUTE FUNCTION(Rtv WHS Interchg All  RT) TYPE(RTVOBJ) FILE(PNG0REP)           AC2138766;
PARAMETER(RCD.Warehouse_Code_SavUsr);
PARAMETER('WHSTFR');
PARAMETER(NLL.Class_Code);
PARAMETER(NLL.EDI_Trading_Partner_No);
PARAMETER(NLL.EDI_Whs_Duns_Number);
PARAMETER(LCL.Record_Status);
PARAMETER(NLL.Create_Date);
PARAMETER(NLL.Create_Time);
PARAMETER(NLL.Create_User);
PARAMETER(NLL.Create_Program);
PARAMETER(NLL.Change_Date);
PARAMETER(NLL.Change_Time);
PARAMETER(NLL.Change_User);
PARAMETER(NLL.Change_Program);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Display Screen or Throw Message if Ship To Whse not Setup for EDI.
CASE;

// IF LCL.Record Status is Active
IF LCL.Record_Status = 'A';

// Call program DSP Ship vs Rcvd Dtl  DF.
CALL PROGRAM(DSP Ship vs Rcvd Dtl  DF) ('PUDCDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Type_Sales);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Ship_To_Name);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(RCD.Order_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Header_Status);
PARAMETER(RCD.Credit_Hold);
PARAMETER(RCD.Production_Hold);
PARAMETER(RCD.New_Customer_Hold);
PARAMETER(RCD.Sales_Route_Code);
PARAMETER(PAR.Application_Code);
PARAMETER(RCD.USR_Warehouse_Code);
PARAMETER(RCD.Warehouse_Code_SavUsr);

//?Display Screen or Throw Message if Ship To Whse not Setup for EDI.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'EDI WHS Interchange not found/active for warehouse &1.'
ERROR(USR5013);
MSGPARM(RCD.Warehouse_Code_SavUsr);

ENDIF;

ENDIF;

//?Hidden option = T show 944 transactions
CASE;

// IF RCD.*SFLSEL is Test
IF RCD.*SFLSEL = 'T';

// LCL.Order Alpha = CVTVAR(RCD.Order Number)
LCL.Order_Alpha = CVTVAR(RCD.Order_Number);

// LCL.W1704 Depositor Order Nbr = LCL.Order Alpha
LCL.W1704_Depositor_Order_Nbr = LCL.Order_Alpha;

EXECUTE FUNCTION(Rtv Last for Order    RT) TYPE(RTVOBJ) FILE(ECP065)            AC2150575;
PARAMETER(LCL.EDI_SURROGATE_NUMBER);
PARAMETER(LCL.W1704_Depositor_Order_Nbr);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.W1704 Depositor Order Nbr EQ PAR.W1704 Depositor Order Nbr
 IF DB1.W1704_Depositor_Order_Nbr = PAR.W1704_Depositor_Order_Nbr;

 // PAR.EDI SURROGATE NUMBER = DB1.EDI SURROGATE NUMBER
 PAR.EDI_SURROGATE_NUMBER = DB1.EDI_SURROGATE_NUMBER;

 ENDIF;

}


CASE;

// IF LCL.EDI SURROGATE NUMBER is Entered
IF LCL.EDI_SURROGATE_NUMBER <> 0;

// Call program Dsp 944 Data Sent     DF.
CALL PROGRAM(Dsp 944 Data Sent     DF) ('PUHADFR');
PARAMETER(LCL.EDI_SURROGATE_NUMBER);

ENDIF;

ENDIF;

//?Option = X  - mark 944 so it wont be intransit
CASE;

// IF RCD.*SFLSEL is X - dont process
IF RCD.*SFLSEL = 'X';

CASE;

// IF RCD.OHE EDI 943 Action is Sent or Transit
IF RCD.OHE_EDI_943_Action = 'S'/'T';

// AND RCD.OHE EDI 944 Action is Blanks
AND ( RCD.OHE_EDI_944_Action = *BLANK;

// OR RCD.OHE EDI 944 Action is Rcv-Error
OR RCD.OHE_EDI_944_Action = 'E' );

EXECUTE FUNCTION(CHG OHE EDI 944 Action CH) TYPE(CHGOBJ) FILE(PMAMREP)          AC2139811;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(*BLANK);
PARAMETER('X');
{
 //?USER: Processing before Data update

 // DB1.Job Time = JOB.*Job time
 DB1.Job_Time = JOB.*Job_time;

 // DB1.Job Date = JOB.*Job date
 DB1.Job_Date = JOB.*Job_date;

 // DB1.Job Name = JOB.*PROGRAM
 DB1.Job_Name = JOB.*PROGRAM;

 // DB1.User Id = JOB.*USER
 DB1.User_Id = JOB.*USER;

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?Option = M  - make 943  - use for startup new 3pl/wms
CASE;

// IF RCD.*SFLSEL is Market Price
IF RCD.*SFLSEL = 'M';

// Call program Upd EDI WHS Stock Txfr XF.
CALL PROGRAM(Upd EDI WHS Stock Txfr XF) ('PUC5XFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('N');

//?mark action as NEW
EXECUTE FUNCTION(Rtv Chg to NEW Action RT) TYPE(RTVOBJ) FILE(ECP060)            AC2177782;
PARAMETER(RCD.Order_Number);
PARAMETER('1');
{
 //?USER: Process Data record

 CASE;

 // IF DB1.W0612 Action Code is Change
 IF DB1.W0612_Action_Code = '2';

 CASE;

 // IF DB1.EDI-Record Processed is Not Processed
 IF DB1.EDI_Record_Processed = 'N';

 EXECUTE FUNCTION(Chg WHS Stock Txfr HDR CH) TYPE(CHGOBJ) FILE(ECP060)           AC2138757;
 PARAMETER(DB1.EDI_SURROGATE_NUMBER);
 PARAMETER(DB1.TRADE_PARTNER_CODE);
 PARAMETER(DB1.EDI_Record_Processed);
 PARAMETER(DB1.W0601_Reporting_Code);
 PARAMETER(DB1.W0602_Depositor_Order_Nbr);
 PARAMETER(DB1.W0603_Shipment_Date);
 PARAMETER(DB1.W0604_Shipment_Num_BOL);
 PARAMETER(DB1.W0606_Customer_PO);
 PARAMETER(DB1.W0611_Transaction_Type);
 PARAMETER(PAR.W0612_Action_Code);
 PARAMETER(DB1.W0301_Quantity_Shipped);
 PARAMETER(DB1.W0302_Weight_Shipped);
 PARAMETER(DB1.W0303_Unit_of_Measure);
 PARAMETER(DB1.G6201_Date_Qualifier);
 PARAMETER(DB1.G6202_Req_Delivery_Date);
 PARAMETER(DB1.W2701_Transportation_Type);
 PARAMETER(DB1.W2702_SCAC_Carrier_Code);
 PARAMETER(DB1.W0304_Number_of_Pallets);
 PARAMETER(DB1.W0305_Unit_of_Measurement);
 PARAMETER(DB1.W0306_Number_of_Spacers);
 PARAMETER(DB1.W0307_Unit_of_Measurement);
 PARAMETER(DB1.W2703_Carrier_Name);
 PARAMETER(DB1.W2704_Shipment_Method);
 ENDIF;

 ENDIF;

}


ENDIF;

//?USER: Process command keys

CASE;

// IF CTL.*CMD key is CF23
IF CTL.*CMD_key = '23';

// PAR.PRT Hold Output Sts = CND.*NO
PAR.PRT_Hold_Output_Sts = *NO;

// PAR.PRT Save Output Sts = CND.*NO
PAR.PRT_Save_Output_Sts = *NO;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Night Queue = CND.Not entered
PAR.PRT_Night_Queue = *BLANK;

// PAR.System Value Numeric = CON.1
PAR.System_Value_Numeric = 1;

// PAR.PRT Description = CON.Shipped Whs Transfer Rpt
PAR.PRT_Description = 'Shipped Whs Transfer Rpt';

// Call program SBM Prt Shpd Whs Xfr RpCL.
CALL PROGRAM(SBM Prt Shpd Whs Xfr RpCL) ('PMEEUPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.PRT_Description);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.From_Date_USR);
PARAMETER(CTL.To_Date_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(CTL.USR_Warehouse_Code);
PARAMETER(CTL.Order_Type_Sales);
PARAMETER(CTL.Warehouse_Code_SavUsr);

ENDIF;

