// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPORXFR
// ?Date: 14.08.2025 Time: 03:41:27
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?1. Change the Post Warehouse Sts to P
//?R9083 02/05/17 DN-Modify to Also RST by Grouping/WE Date.
//?S010245 03/22/24 JM-START-Use PPOOXFR which has reference to sales
//?history. This will calculate unshipped inventory accurately.
EXECUTE FUNCTION(Rtv Prior Sunday      RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1410775;
PARAMETER(PAR.ISC_Warehouse_Company);
PARAMETER(PAR.Week_End_Date);
PARAMETER(PAR.Date_Sun_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Date Sun USR = DB1.Post to G/L Date
 PAR.Date_Sun_USR = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(Rtv -0- Shipmnt Final RT) TYPE(RTVOBJ) FILE(PPBSCPP)           AC1744735;
PARAMETER(PAR.ISC_Week_Ending_Date);
PARAMETER(PAR.ISC_Warehouse_Company);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Inventory Stock   CH) TYPE(CHGOBJ) FILE(PPBSCPP)           AC1738128;
 PARAMETER(DB1.ISC_Week_Ending_Date);
 PARAMETER(DB1.ISC_Warehouse_Company);
 PARAMETER(DB1.ISC_Warehouse_Code);
 PARAMETER(DB1.ISC_Item_Code);
 PARAMETER(DB1.ISC_Warehouse_Type);
 PARAMETER(DB1.ISC_Item_Cmdty_Price_Grp);
 PARAMETER(DB1.ISC_Item_Dft_Cmdty_Mkt_Bs);
 PARAMETER(DB1.ISC_Item_Type);
 PARAMETER(DB1.ISC_Item_Market_Overage);
 PARAMETER(DB1.ISC_Item_Structure_Type);
 PARAMETER(DB1.ISC_Item_Structure_Group);
 PARAMETER(DB1.ISC_Item_Structure_Class);
 PARAMETER(DB1.ISC_Item_GL_Sub_Code);
 PARAMETER(DB1.ISC_Item_UOM_Pricing);
 PARAMETER(DB1.ISC_Begin_Inv_Final_Qty);
 PARAMETER(DB1.ISC_Begin_Inv_Final_Lbs);
 PARAMETER(DB1.ISC_Begin_Inv_Adjust_Qty);
 PARAMETER(DB1.ISC_Begin_Inv_Adjust_Lbs);
 PARAMETER(DB1.ISC_Begin_Inv_Qty);
 PARAMETER(DB1.ISC_Begin_Inv_Lbs);
 PARAMETER(DB1.ISC_Floor_Production_Qty);
 PARAMETER(DB1.ISC_Floor_Production_Lbs);
 PARAMETER(DB1.ISC_Floor_Prod_Adj_Qty);
 PARAMETER(DB1.ISC_Floor_Prod_Adj_Lbs);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.ISC_Inventory_Shipmnt_Qty);
 PARAMETER(DB1.ISC_Inventory_Shipmnt_Lbs);
 PARAMETER(DB1.ISC_Ord_Dtl_Shipment_Qty);
 PARAMETER(DB1.ISC_Ord_Dtl_Shipment_Lbs);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.ISC_Inventory_Txfr_Qty);
 PARAMETER(DB1.ISC_Inventory_Txfr_Lbs);
 PARAMETER(DB1.ISC_Misc_Invntry_Adj_Qty);
 PARAMETER(DB1.ISC_Misc_Invntry_Adj_Lbs);
 PARAMETER(DB1.ISC_Ending_Inventory_Qty);
 PARAMETER(DB1.ISC_Ending_Inventory_Lbs);
 PARAMETER(DB1.ISC_End_Inv_User_Id);
 PARAMETER(DB1.ISC_End_Inv_Date);
 PARAMETER(DB1.ISC_End_Inv_Time);
 PARAMETER(DB1.ISC_Sun_Ship_Inv_Adj_Qty);
 PARAMETER(DB1.ISC_Sun_Ship_Inv_Adj_Lbs);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.ISC_End_Inv_Partial_Qty);
 PARAMETER(DB1.ISC_End_Inv_Partial_Lbs);
 PARAMETER(DB1.ISC_Ending_Inv_Adj_Qty);
 PARAMETER(DB1.ISC_Ending_Inv_Adj_Lbs);
 PARAMETER(DB1.ISC_End_Inv_Adj_Comment);
 PARAMETER(DB1.ISC_Ending_Inv_Adj_User);
 PARAMETER(DB1.ISC_Ending_Inv_Adj_Date);
 PARAMETER(DB1.ISC_Ending_Inv_Adj_Time);
 PARAMETER(DB1.ISC_Ending_Inv_Final_Qty);
 PARAMETER(DB1.ISC_Ending_Inv_Final_Lbs);
 PARAMETER(DB1.ISC_Warehouse_Price_UOM);
 PARAMETER(DB1.ISC_Warehouse_Price_Ovrrd);
 PARAMETER(DB1.ISC_Post_Balance_Sts);
 PARAMETER(DB1.ISC_Post_Warehouse_Sts);
 PARAMETER(*ZERO);
 PARAMETER(DB1.ISC_Unused_Lbs_1);
 PARAMETER(0);
 PARAMETER(*ZERO);
 PARAMETER(DB1.ISC_Valuation_Grouping);
 PARAMETER(DB1.ISC_Unused_Date_1);
 PARAMETER(DB1.ISC_Unused_Sts_2);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

  // Compute:Ending Inv Fin Qt
  DB1.ISC_Ending_Inv_Final_Qty = ( ( ( DB1.ISC_Ending_Inventory_Qty
  + DB1.ISC_Ending_Inv_Adj_Qty ) + DB1.ISC_Sun_Ship_Inv_Adj_Qty )
  + DB1.ISC_Unsh_Ship_Inv_Adj_Qty ) + DB1.ISC_End_Inv_Partial_Qty;

  // Compute:Ending Inv Fin Lb
  DB1.ISC_Ending_Inv_Final_Lbs = ( ( ( DB1.ISC_Ending_Inventory_Lbs
  + DB1.ISC_Ending_Inv_Adj_Lbs ) + DB1.ISC_Sun_Ship_Inv_Adj_Lbs )
  + DB1.ISC_Unsh_Ship_Inv_Adj_Lbs ) + DB1.ISC_End_Inv_Partial_Lbs;

  // Comp: sales prod qty
  DB1.ISC_Sales_Production_Qty = ( DB1.ISC_Ending_Inv_Final_Qty
  + DB1.ISC_Shipment_Final_Qty ) - DB1.ISC_Begin_Inv_Final_Qty;

  // Comp: sales prod lbs
  DB1.ISC_Sales_Production_Lbs = ( DB1.ISC_Ending_Inv_Final_Lbs
  + DB1.ISC_Shipment_Final_Lbs ) - DB1.ISC_Begin_Inv_Final_Lbs;

 }

}


EXECUTE FUNCTION(Exc Sales Hst Shp Bal RT) TYPE(RTVOBJ) FILE(OMHSTPP)           AC1739038;
PARAMETER(PAR.ISC_Warehouse_Company);
PARAMETER(PAR.Date_Sun_USR);
PARAMETER('S');
PARAMETER(PAR.Date_Sun_USR);
PARAMETER(PAR.Week_End_Date);
PARAMETER('N');
PARAMETER('Y');
PARAMETER(PAR.ISC_Week_Ending_Date);
PARAMETER(PAR.ISC_Valuation_Grouping);
{
 //?USER: Initialize routine

 //?***** Change Log and comments
 DO;

 //?RMC E2247 11/05/12  Employee Meat Sales were never excl, and they are
 //?  and have been non-exempt, so we are going to remove this code chking
 //?   the Empl meat sale flg here.
 //?INV010 - Using the specs from the Bld Sls Hist Dwnld, update the new
 //?  Inventory Stock Closing file: shipments qty, lbs, fob amt, and adj
 //?LJB E00350 02/26/2009  Exclude Employee Meat Sales from the calcs
 //?RMC 02/28/07 Accum TF Exempt Lbs,Net & output to ISC fields
 //?RMC 12/19/06 Accum Commission Amount to output to ISC Commission Amount
 //?RMC 1/12/06  Dont add SBD Accrual back into Fob Gross. The original
 //?  FOB Gross Calc has been changed in PDRGXFR to include the SBD Accrual
 //?RMC 1/09/06  Added SBD ACcrual back into Fob Gross
 //?RMC 1/6/6 Added Company as input/restrict to LF
 //?RMC 1/5/6 Add SBD Marketing Accrual back into Fob Gross Amt
 ENDDO;

 //?***************************
 // LCL.First Time Flag = CND.Yes
 LCL.First_Time_Flag = 'Y';

 // WRK.Record Found USR = CND.Record Not Found
 WRK.Record_Found_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Actual Shipped Date GE PAR.From Date             USR
 IF DB1.Actual_Shipped_Date >= PAR.From_Date_USR;

 // AND DB1.Actual Shipped Date LE PAR.To Date               USR
 AND DB1.Actual_Shipped_Date <= PAR.To_Date_USR;

 //?Item code or Whse break --  Calc FOB and write record
 CASE;

 // IF DB1.Shipped Item Code NE LCL.USR Item Code
 IF DB1.Shipped_Item_Code <> LCL.USR_Item_Code;

 // OR DB1.Warehouse Code NE LCL.Warehouse Code
 OR DB1.Warehouse_Code <> LCL.Warehouse_Code;

 //?Update if not 1st time for the break
 CASE;

 // IF LCL.First Time Flag is NO
 IF LCL.First_Time_Flag = 'N';

 CASE;

 // IF LCL.Weight Billed is Not equal zero
 IF LCL.Weight_Billed <> *ZERO;

 // Compute: FOB price/cwt
 LCL.FOB_Price_CWT = ( LCL.FOB_Gross_Amount / LCL.Weight_Billed ) / 100;

 ENDIF;

 //?R9083 05/09/17 DN-Added IVG as Input Parm.
 EXECUTE FUNCTION(Rtv Chg Shipmnt Final RT) TYPE(RTVOBJ) FILE(PPBSCPP)           AC1739041;
 PARAMETER(PAR.ISC_Week_Ending_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(LCL.USR_Item_Code);
 PARAMETER(LCL.Quantity_Billed);
 PARAMETER(LCL.Weight_Billed);
 PARAMETER(LCL.FOB_Gross_Amount);
 PARAMETER(LCL.ISC_Commission_Amount);
 PARAMETER(LCL.ISC_TF_Exempt_NPR_Dollars);
 PARAMETER(LCL.ISC_TF_Exempt_Pounds);
 PARAMETER(PAR.ISC_Valuation_Grouping);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Rtv Inv Stock Closing RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC1738283;
  PARAMETER(PAR.ISC_Item_Code);
  PARAMETER(WRK.Description_Line_One);
  PARAMETER(WRK.ISC_Item_Structure_Class);
  PARAMETER(WRK.ISC_Item_Structure_Group);
  PARAMETER(WRK.ISC_Item_Structure_Type);
  PARAMETER(WRK.ISC_Item_Dft_Cmdty_Mkt_Bs);
  PARAMETER(WRK.ISC_Item_Type);
  PARAMETER(WRK.ISC_Item_Cmdty_Price_Grp);
  PARAMETER(WRK.ISC_Item_GL_Sub_Code);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Inv Stock Closing RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1738284;
  PARAMETER(PAR.ISC_Warehouse_Company);
  PARAMETER(PAR.ISC_Item_Code);
  PARAMETER(WRK.ISC_Item_UOM_Pricing);
  PARAMETER(WRK.ISC_Item_Market_Overage);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
  PARAMETER(PAR.ISC_Warehouse_Code);
  PARAMETER(WRK.ISC_Warehouse_Type);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // WRK.ISC Post Balance Sts = CND.Posted
  WRK.ISC_Post_Balance_Sts = 'P';

  // WRK.ISC Post Warehouse Sts = CND.Open
  WRK.ISC_Post_Warehouse_Sts = 'O';

  // WRK.ISC Unsh/Ship Inv Adj Qty = CON.*ZERO - PAR.ISC Shipment Final Qty
  WRK.ISC_Unsh_Ship_Inv_Adj_Qty = *ZERO - PAR.ISC_Shipment_Final_Qty;

  // WRK.ISC Unsh/Ship Inv Adj Lbs = CON.*ZERO - PAR.ISC Shipment Final Lbs
  WRK.ISC_Unsh_Ship_Inv_Adj_Lbs = *ZERO - PAR.ISC_Shipment_Final_Lbs;

  //?R9083 05/09/17 DN-Populate ISC Valuation Grouping.
  EXECUTE FUNCTION(Crt Inventory Stock   CR) TYPE(CRTOBJ) FILE(PPBSCPP)           AC1738127;
  PARAMETER(PAR.ISC_Week_Ending_Date);
  PARAMETER(PAR.ISC_Warehouse_Company);
  PARAMETER(PAR.ISC_Warehouse_Code);
  PARAMETER(PAR.ISC_Item_Code);
  PARAMETER(WRK.ISC_Warehouse_Type);
  PARAMETER(WRK.ISC_Item_Cmdty_Price_Grp);
  PARAMETER(WRK.ISC_Item_Dft_Cmdty_Mkt_Bs);
  PARAMETER(WRK.ISC_Item_Type);
  PARAMETER(WRK.ISC_Item_Market_Overage);
  PARAMETER(WRK.ISC_Item_Structure_Type);
  PARAMETER(WRK.ISC_Item_Structure_Group);
  PARAMETER(WRK.ISC_Item_Structure_Class);
  PARAMETER(WRK.ISC_Item_GL_Sub_Code);
  PARAMETER(WRK.ISC_Item_UOM_Pricing);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.ISC_Shipment_Final_Qty);
  PARAMETER(PAR.ISC_Shipment_Final_Lbs);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.ISC_Shipment_Final_Qty);
  PARAMETER(PAR.ISC_Shipment_Final_Lbs);
  PARAMETER(PAR.ISC_FOB_Gross_Amount);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.ISC_Unsh_Ship_Inv_Adj_Qty);
  PARAMETER(WRK.ISC_Unsh_Ship_Inv_Adj_Lbs);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.Blank_for_4_USR);
  PARAMETER(WRK.ISC_Post_Balance_Sts);
  PARAMETER(WRK.ISC_Post_Warehouse_Sts);
  PARAMETER(PAR.ISC_Commission_Amount);
  PARAMETER(*ZERO);
  PARAMETER(PAR.ISC_TF_Exempt_NPR_Dollars);
  PARAMETER(PAR.ISC_TF_Exempt_Pounds);
  PARAMETER(PAR.ISC_Valuation_Grouping);
  PARAMETER(*ZERO);
  PARAMETER(WRK.ISC_Unused_Sts_2);
  PARAMETER('A');
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set RECORD STATUS field. ***
    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

   // Compute:Ending Inv Fin Qt
   DB1.ISC_Ending_Inv_Final_Qty = ( ( ( DB1.ISC_Ending_Inventory_Qty
   + DB1.ISC_Ending_Inv_Adj_Qty ) + DB1.ISC_Sun_Ship_Inv_Adj_Qty )
   + DB1.ISC_Unsh_Ship_Inv_Adj_Qty ) + DB1.ISC_End_Inv_Partial_Qty;

   // Compute:Ending Inv Fin Lb
   DB1.ISC_Ending_Inv_Final_Lbs = ( ( ( DB1.ISC_Ending_Inventory_Lbs
   + DB1.ISC_Ending_Inv_Adj_Lbs ) + DB1.ISC_Sun_Ship_Inv_Adj_Lbs )
   + DB1.ISC_Unsh_Ship_Inv_Adj_Lbs ) + DB1.ISC_End_Inv_Partial_Lbs;

  }

  //?USER: Process Data record

  // WRK.ISC FOB Gross Amount = PAR.ISC FOB Gross Amount + DB1.ISC FOB Gross Amount
  WRK.ISC_FOB_Gross_Amount = PAR.ISC_FOB_Gross_Amount + DB1.ISC_FOB_Gross_Amount;

  // WRK.ISC Commission Amount = PAR.ISC Commission Amount + DB1.ISC Commission Amount
  WRK.ISC_Commission_Amount = PAR.ISC_Commission_Amount + DB1.ISC_Commission_Amount;

  // WRK.ISC TF Exempt Lbs. = PAR.ISC TF Exempt Lbs. + DB1.ISC TF Exempt Lbs.
  WRK.ISC_TF_Exempt_Pounds = PAR.ISC_TF_Exempt_Pounds + DB1.ISC_TF_Exempt_Pounds;

  // WRK.ISC TF Exempt NPR $ = PAR.ISC TF Exempt NPR $ + DB1.ISC TF Exempt NPR $
  WRK.ISC_TF_Exempt_NPR_Dollars = PAR.ISC_TF_Exempt_NPR_Dollars
  + DB1.ISC_TF_Exempt_NPR_Dollars;

  // WRK.ISC Shipment Final Lbs = PAR.ISC Shipment Final Lbs + DB1.ISC Shipment Final Lbs
  WRK.ISC_Shipment_Final_Lbs = PAR.ISC_Shipment_Final_Lbs + DB1.ISC_Shipment_Final_Lbs;

  // WRK.ISC Shipment Final Qty = PAR.ISC Shipment Final Qty + DB1.ISC Shipment Final Qty
  WRK.ISC_Shipment_Final_Qty = PAR.ISC_Shipment_Final_Qty + DB1.ISC_Shipment_Final_Qty;

  // WRK.ISC Unsh/Ship Inv Adj Qty = DB1.ISC Ord Dtl Shipment Qty - WRK.ISC Shipment Final Qty
  WRK.ISC_Unsh_Ship_Inv_Adj_Qty = DB1.ISC_Ord_Dtl_Shipment_Qty
  - WRK.ISC_Shipment_Final_Qty;

  // WRK.ISC Unsh/Ship Inv Adj Lbs = DB1.ISC Ord Dtl Shipment Lbs - WRK.ISC Shipment Final Lbs
  WRK.ISC_Unsh_Ship_Inv_Adj_Lbs = DB1.ISC_Ord_Dtl_Shipment_Lbs
  - WRK.ISC_Shipment_Final_Lbs;

  // Comp: sales prod qty
  WRK.ISC_Sales_Production_Qty = ( DB1.ISC_Ending_Inv_Final_Qty
  + WRK.ISC_Shipment_Final_Qty ) - DB1.ISC_Begin_Inv_Final_Qty;

  // Comp: sales prod lbs
  WRK.ISC_Sales_Production_Lbs = ( DB1.ISC_Ending_Inv_Final_Lbs
  + WRK.ISC_Shipment_Final_Lbs ) - DB1.ISC_Begin_Inv_Final_Lbs;

  CASE;

  // IF DB1.ISC Post Balance Sts is Posted
  IF DB1.ISC_Post_Balance_Sts = 'P';

  // WRK.ISC Post Balance Sts = CND.Repost
  WRK.ISC_Post_Balance_Sts = 'R';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.ISC Post Balance Sts = CND.Posted
  WRK.ISC_Post_Balance_Sts = 'P';

  ENDIF;

  EXECUTE FUNCTION(Chg Inventory Stock   CH) TYPE(CHGOBJ) FILE(PPBSCPP)           AC1738128;
  PARAMETER(DB1.ISC_Week_Ending_Date);
  PARAMETER(DB1.ISC_Warehouse_Company);
  PARAMETER(DB1.ISC_Warehouse_Code);
  PARAMETER(DB1.ISC_Item_Code);
  PARAMETER(DB1.ISC_Warehouse_Type);
  PARAMETER(DB1.ISC_Item_Cmdty_Price_Grp);
  PARAMETER(DB1.ISC_Item_Dft_Cmdty_Mkt_Bs);
  PARAMETER(DB1.ISC_Item_Type);
  PARAMETER(DB1.ISC_Item_Market_Overage);
  PARAMETER(DB1.ISC_Item_Structure_Type);
  PARAMETER(DB1.ISC_Item_Structure_Group);
  PARAMETER(DB1.ISC_Item_Structure_Class);
  PARAMETER(DB1.ISC_Item_GL_Sub_Code);
  PARAMETER(DB1.ISC_Item_UOM_Pricing);
  PARAMETER(DB1.ISC_Begin_Inv_Final_Qty);
  PARAMETER(DB1.ISC_Begin_Inv_Final_Lbs);
  PARAMETER(DB1.ISC_Begin_Inv_Adjust_Qty);
  PARAMETER(DB1.ISC_Begin_Inv_Adjust_Lbs);
  PARAMETER(DB1.ISC_Begin_Inv_Qty);
  PARAMETER(DB1.ISC_Begin_Inv_Lbs);
  PARAMETER(DB1.ISC_Floor_Production_Qty);
  PARAMETER(DB1.ISC_Floor_Production_Lbs);
  PARAMETER(DB1.ISC_Floor_Prod_Adj_Qty);
  PARAMETER(DB1.ISC_Floor_Prod_Adj_Lbs);
  PARAMETER(WRK.ISC_Sales_Production_Qty);
  PARAMETER(WRK.ISC_Sales_Production_Lbs);
  PARAMETER(DB1.ISC_Inventory_Shipmnt_Qty);
  PARAMETER(DB1.ISC_Inventory_Shipmnt_Lbs);
  PARAMETER(DB1.ISC_Ord_Dtl_Shipment_Qty);
  PARAMETER(DB1.ISC_Ord_Dtl_Shipment_Lbs);
  PARAMETER(WRK.ISC_Shipment_Final_Qty);
  PARAMETER(WRK.ISC_Shipment_Final_Lbs);
  PARAMETER(WRK.ISC_FOB_Gross_Amount);
  PARAMETER(DB1.ISC_Inventory_Txfr_Qty);
  PARAMETER(DB1.ISC_Inventory_Txfr_Lbs);
  PARAMETER(DB1.ISC_Misc_Invntry_Adj_Qty);
  PARAMETER(DB1.ISC_Misc_Invntry_Adj_Lbs);
  PARAMETER(DB1.ISC_Ending_Inventory_Qty);
  PARAMETER(DB1.ISC_Ending_Inventory_Lbs);
  PARAMETER(DB1.ISC_End_Inv_User_Id);
  PARAMETER(DB1.ISC_End_Inv_Date);
  PARAMETER(DB1.ISC_End_Inv_Time);
  PARAMETER(DB1.ISC_Sun_Ship_Inv_Adj_Qty);
  PARAMETER(DB1.ISC_Sun_Ship_Inv_Adj_Lbs);
  PARAMETER(WRK.ISC_Unsh_Ship_Inv_Adj_Qty);
  PARAMETER(WRK.ISC_Unsh_Ship_Inv_Adj_Lbs);
  PARAMETER(DB1.ISC_End_Inv_Partial_Qty);
  PARAMETER(DB1.ISC_End_Inv_Partial_Lbs);
  PARAMETER(DB1.ISC_Ending_Inv_Adj_Qty);
  PARAMETER(DB1.ISC_Ending_Inv_Adj_Lbs);
  PARAMETER(DB1.ISC_End_Inv_Adj_Comment);
  PARAMETER(DB1.ISC_Ending_Inv_Adj_User);
  PARAMETER(DB1.ISC_Ending_Inv_Adj_Date);
  PARAMETER(DB1.ISC_Ending_Inv_Adj_Time);
  PARAMETER(DB1.ISC_Ending_Inv_Final_Qty);
  PARAMETER(DB1.ISC_Ending_Inv_Final_Lbs);
  PARAMETER(DB1.ISC_Warehouse_Price_UOM);
  PARAMETER(DB1.ISC_Warehouse_Price_Ovrrd);
  PARAMETER(WRK.ISC_Post_Balance_Sts);
  PARAMETER(DB1.ISC_Post_Warehouse_Sts);
  PARAMETER(WRK.ISC_Commission_Amount);
  PARAMETER(DB1.ISC_Unused_Lbs_1);
  PARAMETER(WRK.ISC_TF_Exempt_NPR_Dollars);
  PARAMETER(WRK.ISC_TF_Exempt_Pounds);
  PARAMETER(DB1.ISC_Valuation_Grouping);
  PARAMETER(DB1.ISC_Unused_Date_1);
  PARAMETER(DB1.ISC_Unused_Sts_2);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

   // Compute:Ending Inv Fin Qt
   DB1.ISC_Ending_Inv_Final_Qty = ( ( ( DB1.ISC_Ending_Inventory_Qty
   + DB1.ISC_Ending_Inv_Adj_Qty ) + DB1.ISC_Sun_Ship_Inv_Adj_Qty )
   + DB1.ISC_Unsh_Ship_Inv_Adj_Qty ) + DB1.ISC_End_Inv_Partial_Qty;

   // Compute:Ending Inv Fin Lb
   DB1.ISC_Ending_Inv_Final_Lbs = ( ( ( DB1.ISC_Ending_Inventory_Lbs
   + DB1.ISC_Ending_Inv_Adj_Lbs ) + DB1.ISC_Sun_Ship_Inv_Adj_Lbs )
   + DB1.ISC_Unsh_Ship_Inv_Adj_Lbs ) + DB1.ISC_End_Inv_Partial_Lbs;

   // Comp: sales prod qty
   DB1.ISC_Sales_Production_Qty = ( DB1.ISC_Ending_Inv_Final_Qty
   + DB1.ISC_Shipment_Final_Qty ) - DB1.ISC_Begin_Inv_Final_Qty;

   // Comp: sales prod lbs
   DB1.ISC_Sales_Production_Lbs = ( DB1.ISC_Ending_Inv_Final_Lbs
   + DB1.ISC_Shipment_Final_Lbs ) - DB1.ISC_Begin_Inv_Final_Lbs;

  }

 }

 ENDIF;

 // LCL.First Time Flag = CND.NO
 LCL.First_Time_Flag = 'N';

 // LCL.USR Item Code = DB1.Shipped Item Code
 LCL.USR_Item_Code = DB1.Shipped_Item_Code;

 // LCL.Warehouse Code = DB1.Warehouse Code
 LCL.Warehouse_Code = DB1.Warehouse_Code;

 // LCL.Actual Shipped Date = DB1.Actual Shipped Date
 LCL.Actual_Shipped_Date = DB1.Actual_Shipped_Date;

 // LCL.Commodity Market Price = DB1.Commodity Market Price
 LCL.Commodity_Market_Price = DB1.Commodity_Market_Price;

 // LCL.FOB Gross Amount = CON.*ZERO
 LCL.FOB_Gross_Amount = *ZERO;

 // LCL.ISC Commission Amount = CON.*ZERO
 LCL.ISC_Commission_Amount = *ZERO;

 // LCL.ISC TF Exempt Lbs. = CON.*ZERO
 LCL.ISC_TF_Exempt_Pounds = *ZERO;

 // LCL.ISC TF Exempt NPR $ = CON.*ZERO
 LCL.ISC_TF_Exempt_NPR_Dollars = *ZERO;

 // LCL.Weight Billed = CON.*ZERO
 LCL.Weight_Billed = *ZERO;

 // LCL.Quantity Billed = CON.*ZERO
 LCL.Quantity_Billed = *ZERO;

 // WRK.Record Found USR = CND.Record Not Found
 WRK.Record_Found_USR = 'N';

 ENDIF;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(PAR.Billing_Activity_Type);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Print Realization  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1387825;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Shipped_Item_Code);
 PARAMETER(WRK.Default_Commod_Mark_basis);
 PARAMETER(PAR.Print_on_Realization_Rpt);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Exclude CM/DM
 CASE;

 // IF PAR.Billing Activity Type is Credit or Debit Memo
 IF PAR.Billing_Activity_Type = '2'/'3';

 // AND PAR.USR Sales Realiz. Flag is None
 AND PAR.USR_Sales_Realiz_Flag = 'N';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?CM/DM Only
 CASE;

 // IF PAR.USR Sales Realiz. Flag is CM/DM Only
 IF PAR.USR_Sales_Realiz_Flag = 'O';

 // AND PAR.Billing Activity Type is Invoice or Transfer
 AND PAR.Billing_Activity_Type = '1'/'4';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?Include All Products?
 CASE;

 // IF PAR.USR Active Flag is Record Not Found
 IF PAR.USR_Active_Flag = 'N';

 // AND PAR.Print on Realization Rpt is No
 AND PAR.Print_on_Realization_Rpt = 'N';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?Record Selected
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 //?FOB amount and weight
 CASE;

 // IF PAR.Billing Activity Type is Invoice
 IF PAR.Billing_Activity_Type = '1';

 CASE;

 // IF DB1.Affect Sales Doll Status is no
 IF DB1.Affect_Sales_Doll_Status = 'N';

 // LCL.FOB Gross Amount      USR = CON.*ZERO
 LCL.FOB_Gross_Amount_USR = *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.FOB Gross Amount      USR = DB1.FOB Gross Amount
 LCL.FOB_Gross_Amount_USR = DB1.FOB_Gross_Amount;

 ENDIF;

 CASE;

 // IF DB1.Affect Sales Pnds Status is no
 IF DB1.Affect_Sales_Pnds_Status = 'N';

 // LCL.USR Weight Billed 11.2  7 = CON.*ZERO
 LCL.USR_Weight_Billed_11_2_7 = *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.USR Weight Billed 11.2  7 = DB1.Weight Billed
 LCL.USR_Weight_Billed_11_2_7 = DB1.Weight_Billed;

 ENDIF;

 //?FOB amount and weight
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Credit or Debit Memo
 CASE;

 // IF PAR.USR Sales Realiz. Flag is Process by Flags
 IF PAR.USR_Sales_Realiz_Flag = 'P';

 CASE;

 // IF DB1.Affect Sales Doll Status is no
 IF DB1.Affect_Sales_Doll_Status = 'N';

 // LCL.FOB Gross Amount      USR = CON.*ZERO
 LCL.FOB_Gross_Amount_USR = *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.FOB Gross Amount      USR = DB1.FOB Gross Amount
 LCL.FOB_Gross_Amount_USR = DB1.FOB_Gross_Amount;

 ENDIF;

 CASE;

 // IF DB1.Affect Sales Pnds Status is no
 IF DB1.Affect_Sales_Pnds_Status = 'N';

 // LCL.USR Weight Billed 11.2  7 = CON.*ZERO
 LCL.USR_Weight_Billed_11_2_7 = *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.USR Weight Billed 11.2  7 = DB1.Weight Billed
 LCL.USR_Weight_Billed_11_2_7 = DB1.Weight_Billed;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.USR Sales Realiz. Flag is All
 IF PAR.USR_Sales_Realiz_Flag = 'A';

 // OR PAR.USR Sales Realiz. Flag is CM/DM Only
 OR PAR.USR_Sales_Realiz_Flag = 'O';

 CASE;

 // IF DB1.Affect Sales Doll Status is no
 IF DB1.Affect_Sales_Doll_Status = 'N';

 // AND DB1.Affect Sales Pnds Status is yes
 AND DB1.Affect_Sales_Pnds_Status = 'Y';

 // LCL.FOB Gross Amount      USR = CON.*ZERO
 LCL.FOB_Gross_Amount_USR = *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.FOB Gross Amount      USR = DB1.FOB Gross Amount
 LCL.FOB_Gross_Amount_USR = DB1.FOB_Gross_Amount;

 ENDIF;

 CASE;

 // IF DB1.Affect Sales Pnds Status is no
 IF DB1.Affect_Sales_Pnds_Status = 'N';

 // AND DB1.Affect Sales Doll Status is yes
 AND DB1.Affect_Sales_Doll_Status = 'Y';

 // LCL.USR Weight Billed 11.2  7 = CON.*ZERO
 LCL.USR_Weight_Billed_11_2_7 = *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.USR Weight Billed 11.2  7 = DB1.Weight Billed
 LCL.USR_Weight_Billed_11_2_7 = DB1.Weight_Billed;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?reverse sign if credit memo and positive
 CASE;

 // IF PAR.Billing Activity Type is Credit Memo
 IF PAR.Billing_Activity_Type = '2';

 // AND LCL.USR Weight Billed 11.2  7 is GT Zero
 AND LCL.USR_Weight_Billed_11_2_7 > 0;

 // LCL.USR Weight Billed 11.2  7 = CON.*ZERO - LCL.USR Weight Billed 11.2  7
 LCL.USR_Weight_Billed_11_2_7 = *ZERO - LCL.USR_Weight_Billed_11_2_7;

 ENDIF;

 // LCL.FOB Gross Amount = LCL.FOB Gross Amount + LCL.FOB Gross Amount      USR
 LCL.FOB_Gross_Amount = LCL.FOB_Gross_Amount + LCL.FOB_Gross_Amount_USR;

 // LCL.Weight Billed = LCL.Weight Billed + LCL.USR Weight Billed 11.2  7
 LCL.Weight_Billed = LCL.Weight_Billed + LCL.USR_Weight_Billed_11_2_7;

 // LCL.Quantity Billed = LCL.Quantity Billed + DB1.Quantity Billed
 LCL.Quantity_Billed = LCL.Quantity_Billed + DB1.Quantity_Billed;

 // LCL.ISC Commission Amount = LCL.ISC Commission Amount + DB1.Commission Amount
 LCL.ISC_Commission_Amount = LCL.ISC_Commission_Amount + DB1.Commission_Amount;

 //?RMC 02/28/07 New -- Accum TF Exempt lbs and net$
 CASE;

 // IF DB1.Order TF Exempt Code is Not Exempt
 IF DB1.Order_TF_Exempt_Code = 'NE';

 //?RMC 02/28/07 New -- Accum TF Exempt lbs and net$
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.ISC TF Exempt Lbs. = LCL.ISC TF Exempt Lbs. + LCL.USR Weight Billed 11.2  7
 LCL.ISC_TF_Exempt_Pounds = LCL.ISC_TF_Exempt_Pounds + LCL.USR_Weight_Billed_11_2_7;

 CASE;

 // IF LCL.FOB Gross Amount      USR is Not Zero
 IF LCL.FOB_Gross_Amount_USR <> *ZERO;

 // Compute: TF Exempt NPR
 LCL.ISC_TF_Exempt_NPR_Dollars = LCL.ISC_TF_Exempt_NPR_Dollars + (
 LCL.FOB_Gross_Amount_USR - DB1.Commission_Amount );

 ENDIF;

 ENDIF;

 // WRK.Record Found USR = CND.Record Found
 WRK.Record_Found_USR = 'Y';

 ENDIF;

 ENDIF;

 //?USER: Exit processing

 //?Last record
 CASE;

 // IF WRK.Record Found USR is Record Found
 IF WRK.Record_Found_USR = 'Y';

 CASE;

 // IF LCL.First Time Flag is NO
 IF LCL.First_Time_Flag = 'N';

 CASE;

 // IF LCL.Weight Billed is Not equal zero
 IF LCL.Weight_Billed <> *ZERO;

 // Compute: FOB price/cwt
 LCL.FOB_Price_CWT = ( LCL.FOB_Gross_Amount / LCL.Weight_Billed ) / 100;

 ENDIF;

 //?R9083 05/09/17 DN-Added IVG as Input Parm.
 EXECUTE FUNCTION(Rtv Chg Shipmnt Final RT) TYPE(RTVOBJ) FILE(PPBSCPP)           AC1739041;
 PARAMETER(PAR.ISC_Week_Ending_Date);
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(LCL.USR_Item_Code);
 PARAMETER(LCL.Quantity_Billed);
 PARAMETER(LCL.Weight_Billed);
 PARAMETER(LCL.FOB_Gross_Amount);
 PARAMETER(LCL.ISC_Commission_Amount);
 PARAMETER(LCL.ISC_TF_Exempt_NPR_Dollars);
 PARAMETER(LCL.ISC_TF_Exempt_Pounds);
 PARAMETER(PAR.ISC_Valuation_Grouping);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Rtv Inv Stock Closing RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC1738283;
  PARAMETER(PAR.ISC_Item_Code);
  PARAMETER(WRK.Description_Line_One);
  PARAMETER(WRK.ISC_Item_Structure_Class);
  PARAMETER(WRK.ISC_Item_Structure_Group);
  PARAMETER(WRK.ISC_Item_Structure_Type);
  PARAMETER(WRK.ISC_Item_Dft_Cmdty_Mkt_Bs);
  PARAMETER(WRK.ISC_Item_Type);
  PARAMETER(WRK.ISC_Item_Cmdty_Price_Grp);
  PARAMETER(WRK.ISC_Item_GL_Sub_Code);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Inv Stock Closing RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1738284;
  PARAMETER(PAR.ISC_Warehouse_Company);
  PARAMETER(PAR.ISC_Item_Code);
  PARAMETER(WRK.ISC_Item_UOM_Pricing);
  PARAMETER(WRK.ISC_Item_Market_Overage);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
  PARAMETER(PAR.ISC_Warehouse_Code);
  PARAMETER(WRK.ISC_Warehouse_Type);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // WRK.ISC Post Balance Sts = CND.Posted
  WRK.ISC_Post_Balance_Sts = 'P';

  // WRK.ISC Post Warehouse Sts = CND.Open
  WRK.ISC_Post_Warehouse_Sts = 'O';

  // WRK.ISC Unsh/Ship Inv Adj Qty = CON.*ZERO - PAR.ISC Shipment Final Qty
  WRK.ISC_Unsh_Ship_Inv_Adj_Qty = *ZERO - PAR.ISC_Shipment_Final_Qty;

  // WRK.ISC Unsh/Ship Inv Adj Lbs = CON.*ZERO - PAR.ISC Shipment Final Lbs
  WRK.ISC_Unsh_Ship_Inv_Adj_Lbs = *ZERO - PAR.ISC_Shipment_Final_Lbs;

  //?R9083 05/09/17 DN-Populate ISC Valuation Grouping.
  EXECUTE FUNCTION(Crt Inventory Stock   CR) TYPE(CRTOBJ) FILE(PPBSCPP)           AC1738127;
  PARAMETER(PAR.ISC_Week_Ending_Date);
  PARAMETER(PAR.ISC_Warehouse_Company);
  PARAMETER(PAR.ISC_Warehouse_Code);
  PARAMETER(PAR.ISC_Item_Code);
  PARAMETER(WRK.ISC_Warehouse_Type);
  PARAMETER(WRK.ISC_Item_Cmdty_Price_Grp);
  PARAMETER(WRK.ISC_Item_Dft_Cmdty_Mkt_Bs);
  PARAMETER(WRK.ISC_Item_Type);
  PARAMETER(WRK.ISC_Item_Market_Overage);
  PARAMETER(WRK.ISC_Item_Structure_Type);
  PARAMETER(WRK.ISC_Item_Structure_Group);
  PARAMETER(WRK.ISC_Item_Structure_Class);
  PARAMETER(WRK.ISC_Item_GL_Sub_Code);
  PARAMETER(WRK.ISC_Item_UOM_Pricing);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.ISC_Shipment_Final_Qty);
  PARAMETER(PAR.ISC_Shipment_Final_Lbs);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.ISC_Shipment_Final_Qty);
  PARAMETER(PAR.ISC_Shipment_Final_Lbs);
  PARAMETER(PAR.ISC_FOB_Gross_Amount);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.ISC_Unsh_Ship_Inv_Adj_Qty);
  PARAMETER(WRK.ISC_Unsh_Ship_Inv_Adj_Lbs);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.Blank_for_4_USR);
  PARAMETER(WRK.ISC_Post_Balance_Sts);
  PARAMETER(WRK.ISC_Post_Warehouse_Sts);
  PARAMETER(PAR.ISC_Commission_Amount);
  PARAMETER(*ZERO);
  PARAMETER(PAR.ISC_TF_Exempt_NPR_Dollars);
  PARAMETER(PAR.ISC_TF_Exempt_Pounds);
  PARAMETER(PAR.ISC_Valuation_Grouping);
  PARAMETER(*ZERO);
  PARAMETER(WRK.ISC_Unused_Sts_2);
  PARAMETER('A');
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set RECORD STATUS field. ***
    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

   // Compute:Ending Inv Fin Qt
   DB1.ISC_Ending_Inv_Final_Qty = ( ( ( DB1.ISC_Ending_Inventory_Qty
   + DB1.ISC_Ending_Inv_Adj_Qty ) + DB1.ISC_Sun_Ship_Inv_Adj_Qty )
   + DB1.ISC_Unsh_Ship_Inv_Adj_Qty ) + DB1.ISC_End_Inv_Partial_Qty;

   // Compute:Ending Inv Fin Lb
   DB1.ISC_Ending_Inv_Final_Lbs = ( ( ( DB1.ISC_Ending_Inventory_Lbs
   + DB1.ISC_Ending_Inv_Adj_Lbs ) + DB1.ISC_Sun_Ship_Inv_Adj_Lbs )
   + DB1.ISC_Unsh_Ship_Inv_Adj_Lbs ) + DB1.ISC_End_Inv_Partial_Lbs;

  }

  //?USER: Process Data record

  // WRK.ISC FOB Gross Amount = PAR.ISC FOB Gross Amount + DB1.ISC FOB Gross Amount
  WRK.ISC_FOB_Gross_Amount = PAR.ISC_FOB_Gross_Amount + DB1.ISC_FOB_Gross_Amount;

  // WRK.ISC Commission Amount = PAR.ISC Commission Amount + DB1.ISC Commission Amount
  WRK.ISC_Commission_Amount = PAR.ISC_Commission_Amount + DB1.ISC_Commission_Amount;

  // WRK.ISC TF Exempt Lbs. = PAR.ISC TF Exempt Lbs. + DB1.ISC TF Exempt Lbs.
  WRK.ISC_TF_Exempt_Pounds = PAR.ISC_TF_Exempt_Pounds + DB1.ISC_TF_Exempt_Pounds;

  // WRK.ISC TF Exempt NPR $ = PAR.ISC TF Exempt NPR $ + DB1.ISC TF Exempt NPR $
  WRK.ISC_TF_Exempt_NPR_Dollars = PAR.ISC_TF_Exempt_NPR_Dollars
  + DB1.ISC_TF_Exempt_NPR_Dollars;

  // WRK.ISC Shipment Final Lbs = PAR.ISC Shipment Final Lbs + DB1.ISC Shipment Final Lbs
  WRK.ISC_Shipment_Final_Lbs = PAR.ISC_Shipment_Final_Lbs + DB1.ISC_Shipment_Final_Lbs;

  // WRK.ISC Shipment Final Qty = PAR.ISC Shipment Final Qty + DB1.ISC Shipment Final Qty
  WRK.ISC_Shipment_Final_Qty = PAR.ISC_Shipment_Final_Qty + DB1.ISC_Shipment_Final_Qty;

  // WRK.ISC Unsh/Ship Inv Adj Qty = DB1.ISC Ord Dtl Shipment Qty - WRK.ISC Shipment Final Qty
  WRK.ISC_Unsh_Ship_Inv_Adj_Qty = DB1.ISC_Ord_Dtl_Shipment_Qty
  - WRK.ISC_Shipment_Final_Qty;

  // WRK.ISC Unsh/Ship Inv Adj Lbs = DB1.ISC Ord Dtl Shipment Lbs - WRK.ISC Shipment Final Lbs
  WRK.ISC_Unsh_Ship_Inv_Adj_Lbs = DB1.ISC_Ord_Dtl_Shipment_Lbs
  - WRK.ISC_Shipment_Final_Lbs;

  // Comp: sales prod qty
  WRK.ISC_Sales_Production_Qty = ( DB1.ISC_Ending_Inv_Final_Qty
  + WRK.ISC_Shipment_Final_Qty ) - DB1.ISC_Begin_Inv_Final_Qty;

  // Comp: sales prod lbs
  WRK.ISC_Sales_Production_Lbs = ( DB1.ISC_Ending_Inv_Final_Lbs
  + WRK.ISC_Shipment_Final_Lbs ) - DB1.ISC_Begin_Inv_Final_Lbs;

  CASE;

  // IF DB1.ISC Post Balance Sts is Posted
  IF DB1.ISC_Post_Balance_Sts = 'P';

  // WRK.ISC Post Balance Sts = CND.Repost
  WRK.ISC_Post_Balance_Sts = 'R';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.ISC Post Balance Sts = CND.Posted
  WRK.ISC_Post_Balance_Sts = 'P';

  ENDIF;

  EXECUTE FUNCTION(Chg Inventory Stock   CH) TYPE(CHGOBJ) FILE(PPBSCPP)           AC1738128;
  PARAMETER(DB1.ISC_Week_Ending_Date);
  PARAMETER(DB1.ISC_Warehouse_Company);
  PARAMETER(DB1.ISC_Warehouse_Code);
  PARAMETER(DB1.ISC_Item_Code);
  PARAMETER(DB1.ISC_Warehouse_Type);
  PARAMETER(DB1.ISC_Item_Cmdty_Price_Grp);
  PARAMETER(DB1.ISC_Item_Dft_Cmdty_Mkt_Bs);
  PARAMETER(DB1.ISC_Item_Type);
  PARAMETER(DB1.ISC_Item_Market_Overage);
  PARAMETER(DB1.ISC_Item_Structure_Type);
  PARAMETER(DB1.ISC_Item_Structure_Group);
  PARAMETER(DB1.ISC_Item_Structure_Class);
  PARAMETER(DB1.ISC_Item_GL_Sub_Code);
  PARAMETER(DB1.ISC_Item_UOM_Pricing);
  PARAMETER(DB1.ISC_Begin_Inv_Final_Qty);
  PARAMETER(DB1.ISC_Begin_Inv_Final_Lbs);
  PARAMETER(DB1.ISC_Begin_Inv_Adjust_Qty);
  PARAMETER(DB1.ISC_Begin_Inv_Adjust_Lbs);
  PARAMETER(DB1.ISC_Begin_Inv_Qty);
  PARAMETER(DB1.ISC_Begin_Inv_Lbs);
  PARAMETER(DB1.ISC_Floor_Production_Qty);
  PARAMETER(DB1.ISC_Floor_Production_Lbs);
  PARAMETER(DB1.ISC_Floor_Prod_Adj_Qty);
  PARAMETER(DB1.ISC_Floor_Prod_Adj_Lbs);
  PARAMETER(WRK.ISC_Sales_Production_Qty);
  PARAMETER(WRK.ISC_Sales_Production_Lbs);
  PARAMETER(DB1.ISC_Inventory_Shipmnt_Qty);
  PARAMETER(DB1.ISC_Inventory_Shipmnt_Lbs);
  PARAMETER(DB1.ISC_Ord_Dtl_Shipment_Qty);
  PARAMETER(DB1.ISC_Ord_Dtl_Shipment_Lbs);
  PARAMETER(WRK.ISC_Shipment_Final_Qty);
  PARAMETER(WRK.ISC_Shipment_Final_Lbs);
  PARAMETER(WRK.ISC_FOB_Gross_Amount);
  PARAMETER(DB1.ISC_Inventory_Txfr_Qty);
  PARAMETER(DB1.ISC_Inventory_Txfr_Lbs);
  PARAMETER(DB1.ISC_Misc_Invntry_Adj_Qty);
  PARAMETER(DB1.ISC_Misc_Invntry_Adj_Lbs);
  PARAMETER(DB1.ISC_Ending_Inventory_Qty);
  PARAMETER(DB1.ISC_Ending_Inventory_Lbs);
  PARAMETER(DB1.ISC_End_Inv_User_Id);
  PARAMETER(DB1.ISC_End_Inv_Date);
  PARAMETER(DB1.ISC_End_Inv_Time);
  PARAMETER(DB1.ISC_Sun_Ship_Inv_Adj_Qty);
  PARAMETER(DB1.ISC_Sun_Ship_Inv_Adj_Lbs);
  PARAMETER(WRK.ISC_Unsh_Ship_Inv_Adj_Qty);
  PARAMETER(WRK.ISC_Unsh_Ship_Inv_Adj_Lbs);
  PARAMETER(DB1.ISC_End_Inv_Partial_Qty);
  PARAMETER(DB1.ISC_End_Inv_Partial_Lbs);
  PARAMETER(DB1.ISC_Ending_Inv_Adj_Qty);
  PARAMETER(DB1.ISC_Ending_Inv_Adj_Lbs);
  PARAMETER(DB1.ISC_End_Inv_Adj_Comment);
  PARAMETER(DB1.ISC_Ending_Inv_Adj_User);
  PARAMETER(DB1.ISC_Ending_Inv_Adj_Date);
  PARAMETER(DB1.ISC_Ending_Inv_Adj_Time);
  PARAMETER(DB1.ISC_Ending_Inv_Final_Qty);
  PARAMETER(DB1.ISC_Ending_Inv_Final_Lbs);
  PARAMETER(DB1.ISC_Warehouse_Price_UOM);
  PARAMETER(DB1.ISC_Warehouse_Price_Ovrrd);
  PARAMETER(WRK.ISC_Post_Balance_Sts);
  PARAMETER(DB1.ISC_Post_Warehouse_Sts);
  PARAMETER(WRK.ISC_Commission_Amount);
  PARAMETER(DB1.ISC_Unused_Lbs_1);
  PARAMETER(WRK.ISC_TF_Exempt_NPR_Dollars);
  PARAMETER(WRK.ISC_TF_Exempt_Pounds);
  PARAMETER(DB1.ISC_Valuation_Grouping);
  PARAMETER(DB1.ISC_Unused_Date_1);
  PARAMETER(DB1.ISC_Unused_Sts_2);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

   // Compute:Ending Inv Fin Qt
   DB1.ISC_Ending_Inv_Final_Qty = ( ( ( DB1.ISC_Ending_Inventory_Qty
   + DB1.ISC_Ending_Inv_Adj_Qty ) + DB1.ISC_Sun_Ship_Inv_Adj_Qty )
   + DB1.ISC_Unsh_Ship_Inv_Adj_Qty ) + DB1.ISC_End_Inv_Partial_Qty;

   // Compute:Ending Inv Fin Lb
   DB1.ISC_Ending_Inv_Final_Lbs = ( ( ( DB1.ISC_Ending_Inventory_Lbs
   + DB1.ISC_Ending_Inv_Adj_Lbs ) + DB1.ISC_Sun_Ship_Inv_Adj_Lbs )
   + DB1.ISC_Unsh_Ship_Inv_Adj_Lbs ) + DB1.ISC_End_Inv_Partial_Lbs;

   // Comp: sales prod qty
   DB1.ISC_Sales_Production_Qty = ( DB1.ISC_Ending_Inv_Final_Qty
   + DB1.ISC_Shipment_Final_Qty ) - DB1.ISC_Begin_Inv_Final_Qty;

   // Comp: sales prod lbs
   DB1.ISC_Sales_Production_Lbs = ( DB1.ISC_Ending_Inv_Final_Lbs
   + DB1.ISC_Shipment_Final_Lbs ) - DB1.ISC_Begin_Inv_Final_Lbs;

  }

 }

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Chg Post Sts      RT2) TYPE(RTVOBJ) FILE(PPBSCPP)          AC2225545;
PARAMETER(PAR.ISC_Week_Ending_Date);
PARAMETER(PAR.ISC_Warehouse_Company);
PARAMETER('P');
{
 //?USER: Process Data record

 CASE;

 // IF DB1.ISC Post Balance Sts is Open
 IF DB1.ISC_Post_Balance_Sts = 'O';

 //?RMC 06/01/06 *note ..db1.isc shipment final will be -0-, still need
 //?   to calc the diff between order dtl shipped and sales hist shipped
 // WRK.ISC Unsh/Ship Inv Adj Qty = DB1.ISC Ord Dtl Shipment Qty - DB1.ISC Shipment Final Qty
 WRK.ISC_Unsh_Ship_Inv_Adj_Qty = DB1.ISC_Ord_Dtl_Shipment_Qty
 - DB1.ISC_Shipment_Final_Qty;

 // WRK.ISC Unsh/Ship Inv Adj Lbs = DB1.ISC Ord Dtl Shipment Lbs - DB1.ISC Shipment Final Lbs
 WRK.ISC_Unsh_Ship_Inv_Adj_Lbs = DB1.ISC_Ord_Dtl_Shipment_Lbs
 - DB1.ISC_Shipment_Final_Lbs;

 // Comp: sales prod qty
 WRK.ISC_Sales_Production_Qty = ( DB1.ISC_Ending_Inv_Final_Qty
 + DB1.ISC_Shipment_Final_Qty ) - DB1.ISC_Begin_Inv_Final_Qty;

 // Comp: sales prod lbs
 WRK.ISC_Sales_Production_Lbs = ( DB1.ISC_Ending_Inv_Final_Lbs
 + DB1.ISC_Shipment_Final_Lbs ) - DB1.ISC_Begin_Inv_Final_Lbs;

 EXECUTE FUNCTION(Chg Inventory Stock   CH) TYPE(CHGOBJ) FILE(PPBSCPP)           AC1738128;
 PARAMETER(DB1.ISC_Week_Ending_Date);
 PARAMETER(DB1.ISC_Warehouse_Company);
 PARAMETER(DB1.ISC_Warehouse_Code);
 PARAMETER(DB1.ISC_Item_Code);
 PARAMETER(DB1.ISC_Warehouse_Type);
 PARAMETER(DB1.ISC_Item_Cmdty_Price_Grp);
 PARAMETER(DB1.ISC_Item_Dft_Cmdty_Mkt_Bs);
 PARAMETER(DB1.ISC_Item_Type);
 PARAMETER(DB1.ISC_Item_Market_Overage);
 PARAMETER(DB1.ISC_Item_Structure_Type);
 PARAMETER(DB1.ISC_Item_Structure_Group);
 PARAMETER(DB1.ISC_Item_Structure_Class);
 PARAMETER(DB1.ISC_Item_GL_Sub_Code);
 PARAMETER(DB1.ISC_Item_UOM_Pricing);
 PARAMETER(DB1.ISC_Begin_Inv_Final_Qty);
 PARAMETER(DB1.ISC_Begin_Inv_Final_Lbs);
 PARAMETER(DB1.ISC_Begin_Inv_Adjust_Qty);
 PARAMETER(DB1.ISC_Begin_Inv_Adjust_Lbs);
 PARAMETER(DB1.ISC_Begin_Inv_Qty);
 PARAMETER(DB1.ISC_Begin_Inv_Lbs);
 PARAMETER(DB1.ISC_Floor_Production_Qty);
 PARAMETER(DB1.ISC_Floor_Production_Lbs);
 PARAMETER(DB1.ISC_Floor_Prod_Adj_Qty);
 PARAMETER(DB1.ISC_Floor_Prod_Adj_Lbs);
 PARAMETER(WRK.ISC_Sales_Production_Qty);
 PARAMETER(WRK.ISC_Sales_Production_Lbs);
 PARAMETER(DB1.ISC_Inventory_Shipmnt_Qty);
 PARAMETER(DB1.ISC_Inventory_Shipmnt_Lbs);
 PARAMETER(DB1.ISC_Ord_Dtl_Shipment_Qty);
 PARAMETER(DB1.ISC_Ord_Dtl_Shipment_Lbs);
 PARAMETER(DB1.ISC_Shipment_Final_Qty);
 PARAMETER(DB1.ISC_Shipment_Final_Lbs);
 PARAMETER(DB1.ISC_FOB_Gross_Amount);
 PARAMETER(DB1.ISC_Inventory_Txfr_Qty);
 PARAMETER(DB1.ISC_Inventory_Txfr_Lbs);
 PARAMETER(DB1.ISC_Misc_Invntry_Adj_Qty);
 PARAMETER(DB1.ISC_Misc_Invntry_Adj_Lbs);
 PARAMETER(DB1.ISC_Ending_Inventory_Qty);
 PARAMETER(DB1.ISC_Ending_Inventory_Lbs);
 PARAMETER(DB1.ISC_End_Inv_User_Id);
 PARAMETER(DB1.ISC_End_Inv_Date);
 PARAMETER(DB1.ISC_End_Inv_Time);
 PARAMETER(DB1.ISC_Sun_Ship_Inv_Adj_Qty);
 PARAMETER(DB1.ISC_Sun_Ship_Inv_Adj_Lbs);
 PARAMETER(WRK.ISC_Unsh_Ship_Inv_Adj_Qty);
 PARAMETER(WRK.ISC_Unsh_Ship_Inv_Adj_Lbs);
 PARAMETER(DB1.ISC_End_Inv_Partial_Qty);
 PARAMETER(DB1.ISC_End_Inv_Partial_Lbs);
 PARAMETER(DB1.ISC_Ending_Inv_Adj_Qty);
 PARAMETER(DB1.ISC_Ending_Inv_Adj_Lbs);
 PARAMETER(DB1.ISC_End_Inv_Adj_Comment);
 PARAMETER(DB1.ISC_Ending_Inv_Adj_User);
 PARAMETER(DB1.ISC_Ending_Inv_Adj_Date);
 PARAMETER(DB1.ISC_Ending_Inv_Adj_Time);
 PARAMETER(DB1.ISC_Ending_Inv_Final_Qty);
 PARAMETER(DB1.ISC_Ending_Inv_Final_Lbs);
 PARAMETER(DB1.ISC_Warehouse_Price_UOM);
 PARAMETER(DB1.ISC_Warehouse_Price_Ovrrd);
 PARAMETER('P');
 PARAMETER(DB1.ISC_Post_Warehouse_Sts);
 PARAMETER(DB1.ISC_Commission_Amount);
 PARAMETER(DB1.ISC_Unused_Lbs_1);
 PARAMETER(DB1.ISC_TF_Exempt_NPR_Dollars);
 PARAMETER(DB1.ISC_TF_Exempt_Pounds);
 PARAMETER(DB1.ISC_Valuation_Grouping);
 PARAMETER(DB1.ISC_Unused_Date_1);
 PARAMETER(DB1.ISC_Unused_Sts_2);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

  // Compute:Ending Inv Fin Qt
  DB1.ISC_Ending_Inv_Final_Qty = ( ( ( DB1.ISC_Ending_Inventory_Qty
  + DB1.ISC_Ending_Inv_Adj_Qty ) + DB1.ISC_Sun_Ship_Inv_Adj_Qty )
  + DB1.ISC_Unsh_Ship_Inv_Adj_Qty ) + DB1.ISC_End_Inv_Partial_Qty;

  // Compute:Ending Inv Fin Lb
  DB1.ISC_Ending_Inv_Final_Lbs = ( ( ( DB1.ISC_Ending_Inventory_Lbs
  + DB1.ISC_Ending_Inv_Adj_Lbs ) + DB1.ISC_Sun_Ship_Inv_Adj_Lbs )
  + DB1.ISC_Unsh_Ship_Inv_Adj_Lbs ) + DB1.ISC_End_Inv_Partial_Lbs;

  // Comp: sales prod qty
  DB1.ISC_Sales_Production_Qty = ( DB1.ISC_Ending_Inv_Final_Qty
  + DB1.ISC_Shipment_Final_Qty ) - DB1.ISC_Begin_Inv_Final_Qty;

  // Comp: sales prod lbs
  DB1.ISC_Sales_Production_Lbs = ( DB1.ISC_Ending_Inv_Final_Lbs
  + DB1.ISC_Shipment_Final_Lbs ) - DB1.ISC_Begin_Inv_Final_Lbs;

 }

 // IF DB1.ISC Post Balance Sts is Posted
 IF DB1.ISC_Post_Balance_Sts = 'P';

 // OR DB1.ISC Post Balance Sts is Repost
 OR DB1.ISC_Post_Balance_Sts = 'R';

 //?RMC 7/21/16  Do for repost too incase they do it multiple times
 // WRK.ISC Unsh/Ship Inv Adj Qty = DB1.ISC Ord Dtl Shipment Qty - DB1.ISC Shipment Final Qty
 WRK.ISC_Unsh_Ship_Inv_Adj_Qty = DB1.ISC_Ord_Dtl_Shipment_Qty
 - DB1.ISC_Shipment_Final_Qty;

 // WRK.ISC Unsh/Ship Inv Adj Lbs = DB1.ISC Ord Dtl Shipment Lbs - DB1.ISC Shipment Final Lbs
 WRK.ISC_Unsh_Ship_Inv_Adj_Lbs = DB1.ISC_Ord_Dtl_Shipment_Lbs
 - DB1.ISC_Shipment_Final_Lbs;

 // Comp: sales prod qty
 WRK.ISC_Sales_Production_Qty = ( DB1.ISC_Ending_Inv_Final_Qty
 + DB1.ISC_Shipment_Final_Qty ) - DB1.ISC_Begin_Inv_Final_Qty;

 // Comp: sales prod lbs
 WRK.ISC_Sales_Production_Lbs = ( DB1.ISC_Ending_Inv_Final_Lbs
 + DB1.ISC_Shipment_Final_Lbs ) - DB1.ISC_Begin_Inv_Final_Lbs;

 EXECUTE FUNCTION(Chg Inventory Stock   CH) TYPE(CHGOBJ) FILE(PPBSCPP)           AC1738128;
 PARAMETER(DB1.ISC_Week_Ending_Date);
 PARAMETER(DB1.ISC_Warehouse_Company);
 PARAMETER(DB1.ISC_Warehouse_Code);
 PARAMETER(DB1.ISC_Item_Code);
 PARAMETER(DB1.ISC_Warehouse_Type);
 PARAMETER(DB1.ISC_Item_Cmdty_Price_Grp);
 PARAMETER(DB1.ISC_Item_Dft_Cmdty_Mkt_Bs);
 PARAMETER(DB1.ISC_Item_Type);
 PARAMETER(DB1.ISC_Item_Market_Overage);
 PARAMETER(DB1.ISC_Item_Structure_Type);
 PARAMETER(DB1.ISC_Item_Structure_Group);
 PARAMETER(DB1.ISC_Item_Structure_Class);
 PARAMETER(DB1.ISC_Item_GL_Sub_Code);
 PARAMETER(DB1.ISC_Item_UOM_Pricing);
 PARAMETER(DB1.ISC_Begin_Inv_Final_Qty);
 PARAMETER(DB1.ISC_Begin_Inv_Final_Lbs);
 PARAMETER(DB1.ISC_Begin_Inv_Adjust_Qty);
 PARAMETER(DB1.ISC_Begin_Inv_Adjust_Lbs);
 PARAMETER(DB1.ISC_Begin_Inv_Qty);
 PARAMETER(DB1.ISC_Begin_Inv_Lbs);
 PARAMETER(DB1.ISC_Floor_Production_Qty);
 PARAMETER(DB1.ISC_Floor_Production_Lbs);
 PARAMETER(DB1.ISC_Floor_Prod_Adj_Qty);
 PARAMETER(DB1.ISC_Floor_Prod_Adj_Lbs);
 PARAMETER(WRK.ISC_Sales_Production_Qty);
 PARAMETER(WRK.ISC_Sales_Production_Lbs);
 PARAMETER(DB1.ISC_Inventory_Shipmnt_Qty);
 PARAMETER(DB1.ISC_Inventory_Shipmnt_Lbs);
 PARAMETER(DB1.ISC_Ord_Dtl_Shipment_Qty);
 PARAMETER(DB1.ISC_Ord_Dtl_Shipment_Lbs);
 PARAMETER(DB1.ISC_Shipment_Final_Qty);
 PARAMETER(DB1.ISC_Shipment_Final_Lbs);
 PARAMETER(DB1.ISC_FOB_Gross_Amount);
 PARAMETER(DB1.ISC_Inventory_Txfr_Qty);
 PARAMETER(DB1.ISC_Inventory_Txfr_Lbs);
 PARAMETER(DB1.ISC_Misc_Invntry_Adj_Qty);
 PARAMETER(DB1.ISC_Misc_Invntry_Adj_Lbs);
 PARAMETER(DB1.ISC_Ending_Inventory_Qty);
 PARAMETER(DB1.ISC_Ending_Inventory_Lbs);
 PARAMETER(DB1.ISC_End_Inv_User_Id);
 PARAMETER(DB1.ISC_End_Inv_Date);
 PARAMETER(DB1.ISC_End_Inv_Time);
 PARAMETER(DB1.ISC_Sun_Ship_Inv_Adj_Qty);
 PARAMETER(DB1.ISC_Sun_Ship_Inv_Adj_Lbs);
 PARAMETER(WRK.ISC_Unsh_Ship_Inv_Adj_Qty);
 PARAMETER(WRK.ISC_Unsh_Ship_Inv_Adj_Lbs);
 PARAMETER(DB1.ISC_End_Inv_Partial_Qty);
 PARAMETER(DB1.ISC_End_Inv_Partial_Lbs);
 PARAMETER(DB1.ISC_Ending_Inv_Adj_Qty);
 PARAMETER(DB1.ISC_Ending_Inv_Adj_Lbs);
 PARAMETER(DB1.ISC_End_Inv_Adj_Comment);
 PARAMETER(DB1.ISC_Ending_Inv_Adj_User);
 PARAMETER(DB1.ISC_Ending_Inv_Adj_Date);
 PARAMETER(DB1.ISC_Ending_Inv_Adj_Time);
 PARAMETER(DB1.ISC_Ending_Inv_Final_Qty);
 PARAMETER(DB1.ISC_Ending_Inv_Final_Lbs);
 PARAMETER(DB1.ISC_Warehouse_Price_UOM);
 PARAMETER(DB1.ISC_Warehouse_Price_Ovrrd);
 PARAMETER(DB1.ISC_Post_Balance_Sts);
 PARAMETER(DB1.ISC_Post_Warehouse_Sts);
 PARAMETER(DB1.ISC_Commission_Amount);
 PARAMETER(DB1.ISC_Unused_Lbs_1);
 PARAMETER(DB1.ISC_TF_Exempt_NPR_Dollars);
 PARAMETER(DB1.ISC_TF_Exempt_Pounds);
 PARAMETER(DB1.ISC_Valuation_Grouping);
 PARAMETER(DB1.ISC_Unused_Date_1);
 PARAMETER(DB1.ISC_Unused_Sts_2);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

  // Compute:Ending Inv Fin Qt
  DB1.ISC_Ending_Inv_Final_Qty = ( ( ( DB1.ISC_Ending_Inventory_Qty
  + DB1.ISC_Ending_Inv_Adj_Qty ) + DB1.ISC_Sun_Ship_Inv_Adj_Qty )
  + DB1.ISC_Unsh_Ship_Inv_Adj_Qty ) + DB1.ISC_End_Inv_Partial_Qty;

  // Compute:Ending Inv Fin Lb
  DB1.ISC_Ending_Inv_Final_Lbs = ( ( ( DB1.ISC_Ending_Inventory_Lbs
  + DB1.ISC_Ending_Inv_Adj_Lbs ) + DB1.ISC_Sun_Ship_Inv_Adj_Lbs )
  + DB1.ISC_Unsh_Ship_Inv_Adj_Lbs ) + DB1.ISC_End_Inv_Partial_Lbs;

  // Comp: sales prod qty
  DB1.ISC_Sales_Production_Qty = ( DB1.ISC_Ending_Inv_Final_Qty
  + DB1.ISC_Shipment_Final_Qty ) - DB1.ISC_Begin_Inv_Final_Qty;

  // Comp: sales prod lbs
  DB1.ISC_Sales_Production_Lbs = ( DB1.ISC_Ending_Inv_Final_Lbs
  + DB1.ISC_Shipment_Final_Lbs ) - DB1.ISC_Begin_Inv_Final_Lbs;

 }

 ENDIF;

}


//?S010245 04/17/24 JM-Fix defect to change ISC Post Warehouse Sts to
//?Posted/Reposted.
EXECUTE FUNCTION(Rtv Chg Post WarehouseSts) TYPE(RTVOBJ) FILE(PPBSCPP)          AC2225543;
PARAMETER(PAR.ISC_Valuation_Grouping);
PARAMETER(PAR.ISC_Week_Ending_Date);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.ISC Post Warehouse Sts is Open
 IF DB1.ISC_Post_Warehouse_Sts = 'O';

 EXECUTE FUNCTION(Chg Inventory Stock   CH) TYPE(CHGOBJ) FILE(PPBSCPP)           AC1738128;
 PARAMETER(DB1.ISC_Week_Ending_Date);
 PARAMETER(DB1.ISC_Warehouse_Company);
 PARAMETER(DB1.ISC_Warehouse_Code);
 PARAMETER(DB1.ISC_Item_Code);
 PARAMETER(DB1.ISC_Warehouse_Type);
 PARAMETER(DB1.ISC_Item_Cmdty_Price_Grp);
 PARAMETER(DB1.ISC_Item_Dft_Cmdty_Mkt_Bs);
 PARAMETER(DB1.ISC_Item_Type);
 PARAMETER(DB1.ISC_Item_Market_Overage);
 PARAMETER(DB1.ISC_Item_Structure_Type);
 PARAMETER(DB1.ISC_Item_Structure_Group);
 PARAMETER(DB1.ISC_Item_Structure_Class);
 PARAMETER(DB1.ISC_Item_GL_Sub_Code);
 PARAMETER(DB1.ISC_Item_UOM_Pricing);
 PARAMETER(DB1.ISC_Begin_Inv_Final_Qty);
 PARAMETER(DB1.ISC_Begin_Inv_Final_Lbs);
 PARAMETER(DB1.ISC_Begin_Inv_Adjust_Qty);
 PARAMETER(DB1.ISC_Begin_Inv_Adjust_Lbs);
 PARAMETER(DB1.ISC_Begin_Inv_Qty);
 PARAMETER(DB1.ISC_Begin_Inv_Lbs);
 PARAMETER(DB1.ISC_Floor_Production_Qty);
 PARAMETER(DB1.ISC_Floor_Production_Lbs);
 PARAMETER(DB1.ISC_Floor_Prod_Adj_Qty);
 PARAMETER(DB1.ISC_Floor_Prod_Adj_Lbs);
 PARAMETER(DB1.ISC_Sales_Production_Qty);
 PARAMETER(DB1.ISC_Sales_Production_Lbs);
 PARAMETER(DB1.ISC_Inventory_Shipmnt_Qty);
 PARAMETER(DB1.ISC_Inventory_Shipmnt_Lbs);
 PARAMETER(DB1.ISC_Ord_Dtl_Shipment_Qty);
 PARAMETER(DB1.ISC_Ord_Dtl_Shipment_Lbs);
 PARAMETER(DB1.ISC_Shipment_Final_Qty);
 PARAMETER(DB1.ISC_Shipment_Final_Lbs);
 PARAMETER(DB1.ISC_FOB_Gross_Amount);
 PARAMETER(DB1.ISC_Inventory_Txfr_Qty);
 PARAMETER(DB1.ISC_Inventory_Txfr_Lbs);
 PARAMETER(DB1.ISC_Misc_Invntry_Adj_Qty);
 PARAMETER(DB1.ISC_Misc_Invntry_Adj_Lbs);
 PARAMETER(DB1.ISC_Ending_Inventory_Qty);
 PARAMETER(DB1.ISC_Ending_Inventory_Lbs);
 PARAMETER(DB1.ISC_End_Inv_User_Id);
 PARAMETER(DB1.ISC_End_Inv_Date);
 PARAMETER(DB1.ISC_End_Inv_Time);
 PARAMETER(DB1.ISC_Sun_Ship_Inv_Adj_Qty);
 PARAMETER(DB1.ISC_Sun_Ship_Inv_Adj_Lbs);
 PARAMETER(DB1.ISC_Unsh_Ship_Inv_Adj_Qty);
 PARAMETER(DB1.ISC_Unsh_Ship_Inv_Adj_Lbs);
 PARAMETER(DB1.ISC_End_Inv_Partial_Qty);
 PARAMETER(DB1.ISC_End_Inv_Partial_Lbs);
 PARAMETER(DB1.ISC_Ending_Inv_Adj_Qty);
 PARAMETER(DB1.ISC_Ending_Inv_Adj_Lbs);
 PARAMETER(DB1.ISC_End_Inv_Adj_Comment);
 PARAMETER(DB1.ISC_Ending_Inv_Adj_User);
 PARAMETER(DB1.ISC_Ending_Inv_Adj_Date);
 PARAMETER(DB1.ISC_Ending_Inv_Adj_Time);
 PARAMETER(DB1.ISC_Ending_Inv_Final_Qty);
 PARAMETER(DB1.ISC_Ending_Inv_Final_Lbs);
 PARAMETER(DB1.ISC_Warehouse_Price_UOM);
 PARAMETER(DB1.ISC_Warehouse_Price_Ovrrd);
 PARAMETER(DB1.ISC_Post_Balance_Sts);
 PARAMETER('P');
 PARAMETER(DB1.ISC_Commission_Amount);
 PARAMETER(DB1.ISC_Unused_Lbs_1);
 PARAMETER(DB1.ISC_TF_Exempt_NPR_Dollars);
 PARAMETER(DB1.ISC_TF_Exempt_Pounds);
 PARAMETER(DB1.ISC_Valuation_Grouping);
 PARAMETER(DB1.ISC_Unused_Date_1);
 PARAMETER(DB1.ISC_Unused_Sts_2);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

  // Compute:Ending Inv Fin Qt
  DB1.ISC_Ending_Inv_Final_Qty = ( ( ( DB1.ISC_Ending_Inventory_Qty
  + DB1.ISC_Ending_Inv_Adj_Qty ) + DB1.ISC_Sun_Ship_Inv_Adj_Qty )
  + DB1.ISC_Unsh_Ship_Inv_Adj_Qty ) + DB1.ISC_End_Inv_Partial_Qty;

  // Compute:Ending Inv Fin Lb
  DB1.ISC_Ending_Inv_Final_Lbs = ( ( ( DB1.ISC_Ending_Inventory_Lbs
  + DB1.ISC_Ending_Inv_Adj_Lbs ) + DB1.ISC_Sun_Ship_Inv_Adj_Lbs )
  + DB1.ISC_Unsh_Ship_Inv_Adj_Lbs ) + DB1.ISC_End_Inv_Partial_Lbs;

  // Comp: sales prod qty
  DB1.ISC_Sales_Production_Qty = ( DB1.ISC_Ending_Inv_Final_Qty
  + DB1.ISC_Shipment_Final_Qty ) - DB1.ISC_Begin_Inv_Final_Qty;

  // Comp: sales prod lbs
  DB1.ISC_Sales_Production_Lbs = ( DB1.ISC_Ending_Inv_Final_Lbs
  + DB1.ISC_Shipment_Final_Lbs ) - DB1.ISC_Begin_Inv_Final_Lbs;

 }

 // IF DB1.ISC Post Warehouse Sts is Posted or Reposted
 IF DB1.ISC_Post_Warehouse_Sts = 'P'/'R';

 EXECUTE FUNCTION(Chg Inventory Stock   CH) TYPE(CHGOBJ) FILE(PPBSCPP)           AC1738128;
 PARAMETER(DB1.ISC_Week_Ending_Date);
 PARAMETER(DB1.ISC_Warehouse_Company);
 PARAMETER(DB1.ISC_Warehouse_Code);
 PARAMETER(DB1.ISC_Item_Code);
 PARAMETER(DB1.ISC_Warehouse_Type);
 PARAMETER(DB1.ISC_Item_Cmdty_Price_Grp);
 PARAMETER(DB1.ISC_Item_Dft_Cmdty_Mkt_Bs);
 PARAMETER(DB1.ISC_Item_Type);
 PARAMETER(DB1.ISC_Item_Market_Overage);
 PARAMETER(DB1.ISC_Item_Structure_Type);
 PARAMETER(DB1.ISC_Item_Structure_Group);
 PARAMETER(DB1.ISC_Item_Structure_Class);
 PARAMETER(DB1.ISC_Item_GL_Sub_Code);
 PARAMETER(DB1.ISC_Item_UOM_Pricing);
 PARAMETER(DB1.ISC_Begin_Inv_Final_Qty);
 PARAMETER(DB1.ISC_Begin_Inv_Final_Lbs);
 PARAMETER(DB1.ISC_Begin_Inv_Adjust_Qty);
 PARAMETER(DB1.ISC_Begin_Inv_Adjust_Lbs);
 PARAMETER(DB1.ISC_Begin_Inv_Qty);
 PARAMETER(DB1.ISC_Begin_Inv_Lbs);
 PARAMETER(DB1.ISC_Floor_Production_Qty);
 PARAMETER(DB1.ISC_Floor_Production_Lbs);
 PARAMETER(DB1.ISC_Floor_Prod_Adj_Qty);
 PARAMETER(DB1.ISC_Floor_Prod_Adj_Lbs);
 PARAMETER(DB1.ISC_Sales_Production_Qty);
 PARAMETER(DB1.ISC_Sales_Production_Lbs);
 PARAMETER(DB1.ISC_Inventory_Shipmnt_Qty);
 PARAMETER(DB1.ISC_Inventory_Shipmnt_Lbs);
 PARAMETER(DB1.ISC_Ord_Dtl_Shipment_Qty);
 PARAMETER(DB1.ISC_Ord_Dtl_Shipment_Lbs);
 PARAMETER(DB1.ISC_Shipment_Final_Qty);
 PARAMETER(DB1.ISC_Shipment_Final_Lbs);
 PARAMETER(DB1.ISC_FOB_Gross_Amount);
 PARAMETER(DB1.ISC_Inventory_Txfr_Qty);
 PARAMETER(DB1.ISC_Inventory_Txfr_Lbs);
 PARAMETER(DB1.ISC_Misc_Invntry_Adj_Qty);
 PARAMETER(DB1.ISC_Misc_Invntry_Adj_Lbs);
 PARAMETER(DB1.ISC_Ending_Inventory_Qty);
 PARAMETER(DB1.ISC_Ending_Inventory_Lbs);
 PARAMETER(DB1.ISC_End_Inv_User_Id);
 PARAMETER(DB1.ISC_End_Inv_Date);
 PARAMETER(DB1.ISC_End_Inv_Time);
 PARAMETER(DB1.ISC_Sun_Ship_Inv_Adj_Qty);
 PARAMETER(DB1.ISC_Sun_Ship_Inv_Adj_Lbs);
 PARAMETER(DB1.ISC_Unsh_Ship_Inv_Adj_Qty);
 PARAMETER(DB1.ISC_Unsh_Ship_Inv_Adj_Lbs);
 PARAMETER(DB1.ISC_End_Inv_Partial_Qty);
 PARAMETER(DB1.ISC_End_Inv_Partial_Lbs);
 PARAMETER(DB1.ISC_Ending_Inv_Adj_Qty);
 PARAMETER(DB1.ISC_Ending_Inv_Adj_Lbs);
 PARAMETER(DB1.ISC_End_Inv_Adj_Comment);
 PARAMETER(DB1.ISC_Ending_Inv_Adj_User);
 PARAMETER(DB1.ISC_Ending_Inv_Adj_Date);
 PARAMETER(DB1.ISC_Ending_Inv_Adj_Time);
 PARAMETER(DB1.ISC_Ending_Inv_Final_Qty);
 PARAMETER(DB1.ISC_Ending_Inv_Final_Lbs);
 PARAMETER(DB1.ISC_Warehouse_Price_UOM);
 PARAMETER(DB1.ISC_Warehouse_Price_Ovrrd);
 PARAMETER(DB1.ISC_Post_Balance_Sts);
 PARAMETER('R');
 PARAMETER(DB1.ISC_Commission_Amount);
 PARAMETER(DB1.ISC_Unused_Lbs_1);
 PARAMETER(DB1.ISC_TF_Exempt_NPR_Dollars);
 PARAMETER(DB1.ISC_TF_Exempt_Pounds);
 PARAMETER(DB1.ISC_Valuation_Grouping);
 PARAMETER(DB1.ISC_Unused_Date_1);
 PARAMETER(DB1.ISC_Unused_Sts_2);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

  // Compute:Ending Inv Fin Qt
  DB1.ISC_Ending_Inv_Final_Qty = ( ( ( DB1.ISC_Ending_Inventory_Qty
  + DB1.ISC_Ending_Inv_Adj_Qty ) + DB1.ISC_Sun_Ship_Inv_Adj_Qty )
  + DB1.ISC_Unsh_Ship_Inv_Adj_Qty ) + DB1.ISC_End_Inv_Partial_Qty;

  // Compute:Ending Inv Fin Lb
  DB1.ISC_Ending_Inv_Final_Lbs = ( ( ( DB1.ISC_Ending_Inventory_Lbs
  + DB1.ISC_Ending_Inv_Adj_Lbs ) + DB1.ISC_Sun_Ship_Inv_Adj_Lbs )
  + DB1.ISC_Unsh_Ship_Inv_Adj_Lbs ) + DB1.ISC_End_Inv_Partial_Lbs;

  // Comp: sales prod qty
  DB1.ISC_Sales_Production_Qty = ( DB1.ISC_Ending_Inv_Final_Qty
  + DB1.ISC_Shipment_Final_Qty ) - DB1.ISC_Begin_Inv_Final_Qty;

  // Comp: sales prod lbs
  DB1.ISC_Sales_Production_Lbs = ( DB1.ISC_Ending_Inv_Final_Lbs
  + DB1.ISC_Shipment_Final_Lbs ) - DB1.ISC_Begin_Inv_Final_Lbs;

 }

 ENDIF;

}


//?S010245 03/22/24 JM-END
//?2. Send email to plant (nathon ) that Warehouse Prices have been posted
EXECUTE FUNCTION(VAL Set Int. Acc EXTNL IF) TYPE(EXCINTFUN)                     AC1277374;
PARAMETER('I/C');
PARAMETER(LCL.Company_Number);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(NLL.Allow_Multi_Company);
PARAMETER(NLL.Default_Printer);
PARAMETER(NLL.Salesperson_Code);
PARAMETER(NLL.Name);
PARAMETER(NLL.System_Value_Alpha);
PARAMETER(NLL.Access_Denied_Y_N);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Appl EXTERNAL IF) TYPE(EXCINTFUN)                     AC1277611;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(WRK.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 PARAMETER(WRK.Access_Denied_Y_N);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // PAR.Access Denied (Y/N) = CND.yes
  PAR.Access_Denied_Y_N = 'Y';

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  //?User Profile Record Not found
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Access Denied (Y/N) = CND.no
  PAR.Access_Denied_Y_N = 'N';

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // PAR.Access Denied (Y/N) = CND.no
  PAR.Access_Denied_Y_N = 'N';

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Access Denied (Y/N) = CND.yes
  PAR.Access_Denied_Y_N = 'Y';

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Use User Profile Control company if entered,get whse if the appl got one
  CASE;

  // IF LCL.Company Number is greater than zero
  IF LCL.Company_Number > *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  EXECUTE FUNCTION(RTV Prod Whse for Co  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1757887;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Shipping_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF DB1.Record Status is Active
   IF DB1.Record_Status = 'A';

   CASE;

   // IF DB1.Production Warehouse Code is Warehouse Code not Blank
   IF DB1.Production_Warehouse_Code <> *BLANK;

   // PAR.Warehouse Code = DB1.Production Warehouse Code
   PAR.Warehouse_Code = DB1.Production_Warehouse_Code;

   QUIT;

   ENDIF;

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 // PAR.Company Number = WRK.Company Number
 PAR.Company_Number = WRK.Company_Number;

 // PAR.Access Denied (Y/N) = WRK.Access Denied (Y/N)
 PAR.Access_Denied_Y_N = WRK.Access_Denied_Y_N;

 //?If access denied is no, rtv co. name
 CASE;

 // IF WRK.Access Denied (Y/N) is no
 IF WRK.Access_Denied_Y_N = 'N';

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(WRK.Company_Number);
 PARAMETER(PAR.Name);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 EXECUTE FUNCTION(RTV Screen Heading     RT) TYPE(EXCINTFUN)                     AC1277375;
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.System_Value_Alpha);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function DSP Center Text Str 40 US.
  EXECUTE FUNCTION(DSP Center Text Str 40 US) TYPE(EXCUSRSRC) ('PDA0UFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C                     MOVE 'N'       FLAG    1        FLAG
   C           UX        DOWGT0
   C           FLAG      ANDEQ'N'
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     MOVE 'Y'       FLAG
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   *** ADDED FOR HPE, THERE HEADER FOOTER IS OFF   MEA 042494
   C                     SUB  1         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // PAR.System Value Alpha = WRK.USR Description 40   2
  PAR.System_Value_Alpha = WRK.USR_Description_40_2;

 }

}


EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(LCL.Company_Number);
PARAMETER('PRKWHSPST');
PARAMETER(WRK.DL_List_ID);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?R9083 02/05/17 DN-Modify to Include Grouping Description in Message.
// Retrieve message - 'Warehouse prices have been posted for group &2 week &1. Calc Inventory & Prod
LCL.Office_Message_USR_6 = RTVMSG(USR3562);
PARAMETER(PAR.ISC_Week_Ending_Date);
PARAMETER(PAR.ISC_Valuation_Grouping);

// Call program SND Pager Msg (MPLUS) UP.
CALL PROGRAM(SND Pager Msg (MPLUS) UP) ('POMSUPC');
PARAMETER(WRK.DL_List_ID);
PARAMETER(LCL.Office_Message_USR_6);

