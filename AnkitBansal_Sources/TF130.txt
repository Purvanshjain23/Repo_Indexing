      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      Triumph Foods
      * PROGRAM:     TF130
      * TITLE:       Invoice: Revise Charge Code
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     03/02/05
      *
      *
      * FUNCTION: Uses an edit record format to add/change/delete records.
      *
      *           This program is called from TF430-Work with Charge Codes.
      *
      *           We populate the User-Controlled field with Y=Yes for all records
      *           created thru this program.
      *
      *           So, if I.S. wants to create/tweak Charge Code records that are
      *           not User-Controlled. They can use DBU to change the User-Control
      *           value to Yes, change the record thru this function, use DBU to
      *           set the User-Controlled value back to Yes.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 09/28/07  LeAnne Ramsey
      *           Removed edit that said:
      *           "In the GL Accounts File, this Company/GL Code is for
      *            the OMS system--Not TFS."
      /eject
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Ftfd130    cf   e             workstn infds(iofeed)
      *
      *
     Fcaabrel1  if   e           k disk
      *    Company name and address
      *
      *
     Ftfp005    uf a e           k disk
      *    Charge codes
      *
      *
     Ftfp006    if   e           k disk
      *    System modules
      *
      *
     Ftfl021a   if   e           k disk
      *   Invoice charges
      *
      *
     Ftfp098    if   e           k disk
      *    Charge frequencies
      *
      /eject
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D create          c                   'CREATE'
     D revise          c                   'REVISE'
     D delete          c                   'DELETE'
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
     D update          c                   'UPDATE'
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D rtncd           s              2
     D action          s                   like(mode)
     D maxmsg          s              2  0  inz(20)
      *
      *
      * Control fields
      *
     D usedfl          s              1    inz('N')
     D userfl          s              1    inz('N')
      *
      *
      * Parms
      *
     D xxcono          s                   like(d1cono)
     D xxalphcono      s              3
      *
     D xxglcd          s                   like(d1gldbcd)
     D xxglcdds        s                   like(d1gldbcdds)
      *
     D xxstatus        s              1
     D xxsystem        s              3
      *
     D xxynfl          s                   like(d1aist)
     D xxaist          s                   like(d1aist)
      *
     D xxcfqcd         s                   like(d1cfqcd)
     D xxcfqds         s                   like(d1cfqds)
      *
     D xxsmcd          s                   like(d1smcd)
     D xxsmds          s                   like(d1smds)
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /eject
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     update        $upd1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /eject
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * If incoming mode is REVISE or DELETE, then retrieve the database
      * record.  Do not lock the record.  Typically, in DELETE mode, these
      * values will not be displayed. However, if there is an error on the
      * delete action, the panel will be displayed with messages.
      *
     C                   select
     C                   when      mode = create                                WH create
     C                   z-add     0             d1cono
     C                   move      *blank        d1conm
     C                   move      *blank        d1cccd
     C                   move      *blank        d1ccds
     C                   move      *blank        d1gldbcd
     C                   move      *blank        d1gldbcdds
     C                   move      *blank        d1glcrcd
     C                   move      *blank        d1glcrcdds
     C                   move      *blank        d1cfqcd
     C                   move      *blank        d1cfqds
     C                   move      *blank        d1infl
     C                   move      *blank        d1smcd
     C                   move      *blank        d1smds
     C                   move      *blank        d1aist
      *
     C                   when      mode = revise or mode = delete               WH revise/delete
     C     d1cccd        chain(n)  tfp005                             92
     C                   if        *in92 = *on                                  If no hit
     C                   seton                                        62
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09008'
     C                   endif
     C                   else
      *
     C                   move      ccccds        d1ccds
     C                   z-add     cccono        d1cono
     C                   move      ccgldbcd      d1gldbcd
     C                   move      ccglcrcd      d1glcrcd
     C                   move      cccfqcd       d1cfqcd
     C                   move      ccinfl        d1infl
     C                   move      ccsmcd        d1smcd
     C                   move      ccaist        d1aist
      *
      * Retrieve descriptions
     C                   exsr      $desc
     C                   endif                                                  If no hit
      *
     C                   endsl
      *
      * If the user is deleting and there were no errors when retrieving the
      * record, go on to the update routine without displaying the screen.
      * Otherwise, display the screen.
      *
     C                   if        error = 0 and action = delete                If no error
     C                   eval      routne = update
     C                   else
     C                   eval      routne = scrn1
     C                   endif                                                  If no error
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Set indicators to control input/output fields and available
      * function keys.
     C                   exsr      $ind
      *
      *
      * Write screen 1 to CRT
      *
     C                   write     tf130k1
     C                   write     tf130ec
     C                   exfmt     tf130r1
      *
      * Clear messages
     C                   exsr      $clmsg
      *
      *
      * Reset action to be equal to the incoming mode.  This is required
      * in case the user took F11-Delete and got an error on the
      * deletion and now needs to be able to change the record and take
      * an action other than delete
      *
     C                   eval      action = mode
      *
      * Get user's input and set routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      rtncd = '03'
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4=prompt
     C                   exsr      $f4s1
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   eval      routne = set1
      *
     C                   when      *in11 = *on or mode = delete                 F11-delete
     C                   eval      action = delete
     C                   eval      routne = update
      *
     C                   when      *in12 = *on                                  F12-previous
     C                   eval      rtncd = '12'
     C                   eval      routne = exit
     C                   other
      *
      * User has pressed enter
      *
     C                   eval      routne = edit1
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Set indicators to control/protect screen fields
      *----------------------------------------------------------------
      *
     C     $ind          begsr
      *
     c                   select
     C                   when      mode = revise
     C                   seton                                        60
      *
     C                   when      mode = create
     C                   seton                                        61
      *
     C                   when      mode = delete
     C                   seton                                        62
     c                   endsl
      *
     C                   if        usedfl = yes or userfl = no
     C                   seton                                        63
     C                   endif
      *
     C                   select
     C                   when      userfl = no
     C                   seton                                        66
      *
     C                   when      usedfl = yes
     C                   seton                                        65
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Edit input fields for screen 1
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * *IN62 will be on if the record the user is trying to access has
      * been deleted by another user.  So, only perform the edits for the
      * fields on the screen if the indicator is off
      *
     C                   if        *in62 = *off                                 If here
      *
      *
      * If creating a new record, validate:
      *   1) charge code
      *
     C                   if        action = create                              If create
     C                   exsr      $cccd
     C                   endif                                                  If create
      *
      * Always validate:
      *   1) Charge code description
      *   2) Company number
      *   3) GL debit code
      *   4) GL credit code
      *   5) Active/inactive status
      *
     C                   exsr      $ccds
     C                   exsr      $cono
     C                   exsr      $gldbcd
     C                   exsr      $glcrcd
     C                   exsr      $aist
      *
      * If the Charge Code has not yet been used on any Invoice Charge
      * or the user-controlled flag is NO, validate:
      *  1) Charge frequency code
      *  2) Include in invoice total flag
      *  3) System module
      *
      *  NOTE: We do not validate the User-Controlled Flag because
      *        the flag is always output only in this program.
      *
     C                   if        usedfl = yes or userfl = no
     C                   else
     C                   exsr      $cfqcd
     C                   exsr      $infl
     C                   exsr      $smcd
     C                   endif
      *
     C                   endif                                                  If here
      *
      * If there are no errors, attempt the write/update; otherwise,
      * redisplay the screen.  If a record has been deleted out from
      * under the user (*IN62 is ON), then the error message will be
      * issued in the update subroutine.  So, always perform this code.
      *
     C                   if        error = 0
     C                   exsr      $upd1
     C                   else
     C                   eval      routne = scrn1
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Charge Code  (in create mode only)
      *---------------------------------------------------------------
      *
     C     $cccd         begsr
      *
     C                   select
     C                   when      d1cccd = *blank
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09001'     mgid(e)
     C                   endif
     C                   other
      *
     C                   if        *in30 = *off                                 If good comp
     C     d1cccd        chain(n)  tfp005                             92
     C                   if        *in92 = *off                                 If already exists
     C                   seton                                        3031
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08021'     mgid(e)
     C                   endif
     C                   endif                                                  If already exists
     C                   endif                                                  If good comp
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate Charge Code Description
      *----------------------------------------------------------------
      *
     C     $ccds         begsr
      *
     C                   if        d1ccds = *blank
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Company Number
      *---------------------------------------------------------------
      *
     C     $cono         begsr
      *
     C                   move      *blank        d1conm
      *
     C                   select
     C                   when      d1cono = 0
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09001'     mgid(e)
     C                   endif
      *
     C                   when      d1cono < 0
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   endif
     C                   other
      *
     C     d1cono        chain     caabrel1                           92
     C                   if        *in92 = *off                                 If hit
     C                   move      abadtx        d1conm
     C                   else
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08020'     mgid(e)
     C                   clear                   mgw
     C                   move      d1cono        xxalphcono
     C                   movea     xxalphcono    mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If hit
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate GL Debit Code
      *----------------------------------------------------------------
      *
     C     $gldbcd       begsr
      *
     C                   move      *blank        d1gldbcdds
      *
     C                   select
     C                   when      d1gldbcd = *blank
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
     C                   other
      *
     C                   call      'TF805'
     C                   parm      d1cono        xxcono
     C                   parm      d1gldbcd      xxglcd
     C     d1gldbcdds    parm      *blank        xxglcdds
     C                   parm      *blank        xxsystem
     C                   parm      *blank        xxstatus
      *
     C                   if        xxglcdds = *blank                            If no hit
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08022'
     C                   endif
     C                   else
      *
     C                   if        xxstatus <> 'A'
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08024'
     C                   endif
     C                   endif
     C                   endif                                                  If no hit
      *
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate GL Credit Code
      *----------------------------------------------------------------
      *
      * Validations:
      *   1) required
      *   2) Company/GL Code must exist in GL Accounts file
      *       1) GL Accounts 'record status' must be active
      *       2) The 'System Reference' must be 'TFS'
      *   3) Credit GL code cannot be the same as the Debit GL code
      *
     C     $glcrcd       begsr
      *
     C                   move      *blank        d1glcrcdds
      *
     C                   select
     C                   when      d1glcrcd = *blank
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
     C                   other
      *
     C                   call      'TF805'
     C                   parm      d1cono        xxcono
     C                   parm      d1glcrcd      xxglcd
     C     d1glcrcdds    parm      *blank        xxglcdds
     C                   parm      *blank        xxsystem
     C                   parm      *blank        xxstatus
      *
     C                   if        xxglcdds = *blank                            If no hit
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08022'
     C                   endif
     C                   else
      *
     C                   if        xxstatus <> 'A'
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08024'
     C                   endif
     C                   endif
     C                   endif                                                  If no hit
      *
     C                   if        d1glcrcd = d1gldbcd
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08025'
     C                   endif
     C                   endif
      *
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate Charge Frequency Code
      *----------------------------------------------------------------
      *
     C     $cfqcd        begsr
      *
     C                   move      *blank        d1cfqds
      *
     C                   select
     C                   when      d1cfqcd = *blank
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
     C                   other
      *
     C     d1cfqcd       chain     tfp098                             92
     C                   if        *in92 = *off                                 If hit
     C                   move      cfcfqds       d1cfqds
     C                   else
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08018'     mgid(e)
     C                   clear                   mgw
     C                   movea     d1cfqcd       mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If hit
      *
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Include in Invoice Total Flag
      *---------------------------------------------------------------
      *
     C     $infl         begsr
      *
     C                   if        d1infl <> yes and d1infl <> no
     C                   seton                                        37
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09106'
     C                   endif
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate System Module
      *---------------------------------------------------------------
      *
     C     $smcd         begsr
      *
     C                   move      *blank        d1smds
      *
     C                   select
     C                   when      d1smcd = *blank
     C                   seton                                        38
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
     C                   other
      *
     C     d1smcd        chain     tfp006                             92
     C                   if        *in92 = *off                                 If hit
     C                   move      smsmds        d1smds
     C                   else
     C                   seton                                        38
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08019'     mgid(e)
     C                   clear                   mgw
     C                   movea     d1smcd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If hit
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Active/Inactive Status
      *---------------------------------------------------------------
      *
     C     $aist         begsr
      *
     C                   select
     C                   when      d1aist = *blank
     C                   seton                                        39
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
     C
     C                   when      d1aist <> 'A' and d1aist <> 'I'
     C                   seton                                        39
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09105'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * F4 prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
     C                   select
      *
      * GL Code--Debit
      *
     C                   when      fld = 'D1GLDBCD'
     C                   seton                                        53
      *
     C                   if        d1cono = 0
     C                   call      'TF511'
     C                   parm      d1cono        xxcono
     C                   parm      *blank        xxglcd
     C                   parm      *blank        xxglcdds
     C                   else
     C                   call      'TF510'
     C                   parm      d1cono        xxcono
     C                   parm      *blank        xxglcd
     C                   parm      *blank        xxglcdds
     C                   endif
      *
     C                   if        xxglcd <> *blank
     C                   move      xxglcd        d1gldbcd
     C                   move      xxglcdds      d1gldbcdds
     C                   endif
      *
      *
      * GL Code--Credit
      *
     C                   when      fld = 'D1GLCRCD'
     C                   seton                                        54
      *
     C                   if        d1cono = 0
     C                   call      'TF511'
     C                   parm      d1cono        xxcono
     C                   parm      *blank        xxglcd
     C                   parm      *blank        xxglcdds
     C                   else
     C                   call      'TF510'
     C                   parm      d1cono        xxcono
     C                   parm      *blank        xxglcd
     C                   parm      *blank        xxglcdds
     C                   endif
      *
     C                   if        xxglcd <> *blank
     C                   move      xxglcd        d1glcrcd
     C                   move      xxglcdds      d1glcrcdds
     C                   endif
      *
      * Charge frequency code
      *
     C                   when      fld = 'D1CFQCD' and
     C                             usedfl = no and
     C                             userfl = yes
     C                   seton                                        55
     C                   call      'TF508'
     C                   parm      *blank        xxcfqcd
     C                   parm      *blank        xxcfqds
      *
     C                   if        xxcfqcd <> *blank
     C                   move      xxcfqcd       d1cfqcd
     C                   move      xxcfqds       d1cfqds
     C                   endif
      *
      * Include in invoice total flag
      *
     C                   when      fld = 'D1INFL' and
     C                             usedfl = no and
     C                             userfl = yes
     C                   seton                                        57
     C                   call      'HP522'
     C                   parm      *blank        xxynfl
      *
     C                   if        xxynfl <> *blank
     C                   move      xxynfl        d1infl
     C                   endif
      *
      * System module
     C                   when      fld = 'D1SMCD' and
     C                             usedfl = no and
     C                             userfl = yes
     C                   seton                                        58
     C                   call      'TF509'
     C                   parm      *blank        xxsmcd
     C                   parm      *blank        xxsmds
      *
     C                   if        xxsmcd <> *blank
     C                   move      xxsmcd        d1smcd
     C                   move      xxsmds        d1smds
     C                   endif
      *
      * Active/inactive status
      *
     C                   when      fld = 'D1AIST'
     C                   seton                                        59
     C                   call      'HP512'
     C                   parm      *blank        xxaist
      *
     C                   if        xxaist <> *blank
     C                   move      xxaist        d1aist
     C                   endif
     C                   other
      *
      * F4 not valid for this field...issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error                                        013
     C                   movel     'HS09011'     mgid(e)
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Write/update/delete record in database file
      *----------------------------------------------------------------
      *
     C     $upd1         begsr
      *
      * If deleting, perform deletion integrity checks.
      *
     C                   if        action = delete
     C                   exsr      $dltck
     C                   endif
      *
      * If user action is revising or deleting, determine that the
      * record he is accessing still exists prior to attempting to
      * update.  Lock the record for update.
      *
     C                   if        error = 0 and                                If OK
     C                             (action = delete or action = revise)
     C     d1cccd        chain     tfp005                             92
     C                   if        *in92 = *on                                  If not found
     C                   seton                                        62
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09008'
     C                   endif
     C                   endif                                                  If not found
     C                   endif                                                  If OK
      *
      *
      * If there are no errors, delete, revise or create the record.
      *
     C                   if        error = 0                                    If no error
      *
     c                   select
     C                   when      action = delete
     C                   delete    ccrec
     C                   other
      *
      * Move DSPF fields to database file fields
      *
     C                   z-add     d1cono        cccono
     C                   move      d1cccd        cccccd
     C                   move      d1ccds        ccccds
     C                   move      d1gldbcd      ccgldbcd
     C                   move      d1glcrcd      ccglcrcd
     C                   move      d1cfqcd       cccfqcd
     C                   move      d1infl        ccinfl
     C                   move      d1smcd        ccsmcd
     C                   move      d1aist        ccaist
      *
     C                   if        action = create
     C                   move      yes           ccucfl
     C                   write     ccrec
     C                   else
     C                   update    ccrec
     C                   endif                                                  If create
     C                   endsl
     C                   endif                                                  If no error
      *
      * Always redisplay when:
      *     1) there are errors
      *     2) you are creating records
      *
     C                   select
     C                   when      error > 0
     C                   movel     scrn1         routne
      *
     C                   when      mode = create
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09040'
     C                   eval      routne = set1
     C                   movel     set1          routne
     C                   other
      *
     C                   eval      rtncd = '00'
     C                   movel     exit          routne
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Deletion integrity checks
      *---------------------------------------------------------------
      *
      * You cannot delete a Charge Code record if it:
      *  1) Is not User-Controlled
      *  2) Has already been used on a Invoice Charges record
      *
     C     $dltck        begsr
      *
     C                   if        d1ucfl = no                                  If not user
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08016'
     C                   endif
     C                   else
      *
     C     d1cccd        chain     tfl021a                            92
     C                   if        *in92 = *off                                 If used
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08015'
     C                   endif
     C                   endif                                                  If used
     C                   endif                                                  If not user
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Set on last record indicator and end job
      *----------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        lr
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Retrieve descriptions
      *---------------------------------------------------------------
      *
     C     $desc         begsr
      *
      * Company name
      *
     C     d1cono        chain     caabrel1                           92
     C                   if        *in92 = *off
     C                   move      abadtx        d1conm
     C                   endif
      *
      *
      * GL debit code description
      *
     C                   call      'TF805'
     C                   parm      d1cono        xxcono
     C                   parm      d1gldbcd      xxglcd
     C     d1gldbcdds    parm      *blank        xxglcdds
     C                   parm      *blank        xxsystem
     C                   parm      *blank        xxstatus
      *
      *
      * GL credit code description
      *
     C                   call      'TF805'
     C                   parm      d1cono        xxcono
     C                   parm      d1glcrcd      xxglcd
     C     d1glcrcdds    parm      *blank        xxglcdds
     C                   parm      *blank        xxsystem
     C                   parm      *blank        xxstatus
      *
      *
      * System module description
      *
     C     d1smcd        chain     tfp006                             92
     C                   if        *in92 = *off
     C                   move      smsmds        d1smds
     C                   endif
      *
      * Charge frequency description
      *
     C     d1cfqcd       chain     tfp098                             92
     C                   if        *in92 = *off
     C                   move      cfcfqds       d1cfqds
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Key lists
      *  None
      *
      * Parm Lists
      *
     C     *entry        plist
     C     d1mode        parm                    mode
     C                   parm                    d1cccd
     C                   parm                    d1ucfl
     C                   parm                    rtncd
      *
     C                   movel     mode          action
      *
      *
      * Some fields are protected and you cannot delete a Charge Code
      * record:
      *        if it has already been used in the Invoice Charges file or
      *        the charge code is not User-Controlled
      *
     C     d1cccd        chain     tfl021a                            92
     C                   if        *in92 = *off
     C                   move      yes           usedfl
     C                   endif
      *
     C                   if        d1ucfl = yes or mode = create
     C                   move      yes           userfl
     C                   else
     C                   move      no            userfl
     C                   endif
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /eject
