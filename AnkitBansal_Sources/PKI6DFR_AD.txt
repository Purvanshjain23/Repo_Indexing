// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKI6DFR
// ?Date: 14.08.2025 Time: 02:51:22
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?E3814 JJH 10/07/15 - Recompile because PS Premises ID added to
//?  Producer Site. - No logic changes.
//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//?  length from 5 to 7.
ENDDO;

// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


//?USER: Initialize subfile control

EXECUTE FUNCTION(Producer Name         DRV) TYPE(DRVFLD)                        AB1100361;
PARAMETER(CTL.Producer_Name_DRV);
PARAMETER(CTL.PD_Producer_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.Producer_Name_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// *MO.VE             1183529*Bu = ilt. in functions
CTL.Company_Number_USR = PAR.BOH_Company_Number;

// *MO.VE             1183529*Bu = ilt. in functions
CTL.Oms_Name = PAR.Oms_Name;

EXECUTE FUNCTION(Rtv Source Type       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1141829;
PARAMETER(PAR.SR_Source_Code);
PARAMETER(WRK.SR_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// *RT.VCND           1182898*Bu = Condition name of ilt. in functions
CTL.SR_Type_Desc = RTVCND(WRK.SR_Type);

//?USER: Initialize subfile record from DBF record

// *RT.VCND           1182898*Bu = Condition name of ilt. in functions
RCD.Producer_Pay_Desc_Sel_USR = RTVCND(RCD.TH_Payment_Sts);

// *MO.VE             1183529*Bu = ilt. in functions
WRK.TH_Head_Received = *ZERO;

// *MO.VE             1183529*Bu = ilt. in functions
WRK.TH_Live_Wgt = *ZERO;

// *MO.VE             1183529*Bu = ilt. in functions
WRK.TH_Shipped_Weight = *ZERO;

EXECUTE FUNCTION(Rtv Head Rcv/Wgt IncHO RT) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1178368;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(WRK.TH_Head_Received);
PARAMETER(WRK.TH_Live_Wgt);
PARAMETER(WRK.TH_Shipped_Weight);
{
 //?USER: Processing if Data record not found

 // PAR.Head Total USR = PAR.Head Total USR + CON.*ZERO
 PAR.Head_Total_USR = PAR.Head_Total_USR + *ZERO;

 // PAR.Weight Tot USR = PAR.Weight Tot USR + CON.*ZERO
 PAR.Weight_Tot_USR = PAR.Weight_Tot_USR + *ZERO;

 // PAR.Ship Wgt Tot Usr = PAR.Ship Wgt Tot Usr + CON.*ZERO
 PAR.Ship_Wgt_Tot_Usr = PAR.Ship_Wgt_Tot_Usr + *ZERO;

 //?USER: Process Data record

 // PAR.Head Total USR = PAR.Head Total USR + DB1.TH Head Received
 PAR.Head_Total_USR = PAR.Head_Total_USR + DB1.TH_Head_Received;

 // PAR.Weight Tot USR = PAR.Weight Tot USR + DB1.TH Live Wgt
 PAR.Weight_Tot_USR = PAR.Weight_Tot_USR + DB1.TH_Live_Wgt;

 // PAR.Ship Wgt Tot Usr = PAR.Ship Wgt Tot Usr + DB1.TH Shipped Weight
 PAR.Ship_Wgt_Tot_Usr = PAR.Ship_Wgt_Tot_Usr + DB1.TH_Shipped_Weight;

}


// *MO.VE             1183529*Bu = ilt. in functions
RCD.TH_Head_Received = WRK.TH_Head_Received;

// *MO.VE             1183529*Bu = ilt. in functions
RCD.TH_Live_Wgt = WRK.TH_Live_Wgt;

// *MO.VE             1183529*Bu = ilt. in functions
RCD.TH_Shipped_Weight = WRK.TH_Shipped_Weight;

//?USER: Process subfile control (Pre-confirm)

//?Validate F14
CASE;

// IF CTL.*CMD key is Review Check
IF CTL.*CMD_key = '14';

// AND WRK.SR Type is Internal
AND WRK.SR_Type = 'I';

// Send error message - 'F14 not allowed for Internal producer.'
ERROR(PRK0510);

QUIT;

ENDIF;

//?F14=Review Check
CASE;

// IF CTL.*CMD key is Review Check
IF CTL.*CMD_key = '14';

//?Read the kill dates for the marked ttts.
//?(1) If kill dates differ - @Status (*Yes/*No) will be set to *NO.
//?(2) Marked tattoos must have a live price - else @Status priced = N
//?(3) Marked payments must be found - else @Status Marked = N
EXECUTE FUNCTION(Rtv Kill Dates for PrdRT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1144845;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(WRK.@Status_YES_NO);
PARAMETER(WRK.@Status_Priced_USR);
PARAMETER(WRK.@Status_Marked_Pymnt_USR);
{
 //?USER: Initialize routine

 // *MO.VE             1183529*Bu = ilt. in functions
 WRK.Date_USR = *ZERO;

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.@Status_YES_NO = *YES;

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.@Status_Priced_USR = 'Y';

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.@Status_Marked_Pymnt_USR = 'Y';

 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.@Status_Marked_Pymnt_USR = 'N';

 //?USER: Process Data record

 //?Kill date must be the same for the producer's marked tattoos
 CASE;

 // IF WRK.Date USR EQ WRK.Zero USR
 IF WRK.Date_USR = WRK.Zero_USR;

 // *MO.VE             1183529*Bu = ilt. in functions
 WRK.Date_USR = DB1.TH_Kill_Date;

 //?Kill date must be the same for the producer's marked tattoos
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF WRK.Date USR NE DB1.TH Kill Date
 IF WRK.Date_USR <> DB1.TH_Kill_Date;

 // AND DB1.TH Held Over Record is Not Yes
 AND DB1.TH_Held_Over_Record = *BLANK/'N';

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.@Status_YES_NO = *NO;

 ENDIF;

 ENDIF;

 //?All marked tattoos must have a live price
 CASE;

 // IF DB1.TH Live Purchase Price is Zeros
 IF DB1.TH_Live_Purchase_Price = *ZERO;

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.@Status_Priced_USR = 'N';

 ENDIF;

}


CASE;

// IF WRK.@Status (*YES/*NO ) is *Yes
IF WRK.@Status_YES_NO = *YES;

// AND WRK.@Status Priced        USR is Tattoo is priced
AND WRK.@Status_Priced_USR = 'Y';

// AND WRK.@Status Marked Pymnt  USR is Marked payment found
AND WRK.@Status_Marked_Pymnt_USR = 'Y';

//?Check Processing
// Call program Zzz Prdcr Live Chks   XF.
CALL PROGRAM(Zzz Prdcr Live Chks   XF) ('PKQ9XFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(WRK.VCH_Header_Number);
PARAMETER(WRK.VCH_Batch_Number);
PARAMETER(WRK.@Status_Yes_No);

// Call program Zzz Voucher-Producer  ET.
CALL PROGRAM(Zzz Voucher-Producer  ET) ('PKRFETR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(WRK.VCH_Batch_Number);
PARAMETER(WRK.VCH_Header_Number);
PARAMETER(PAR.Oms_System_Value_Alpha);

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF WRK.@Status (*YES/*NO ) is *No
IF WRK.@Status_YES_NO = *NO;

// Send error message - 'Cannot Process Request.  Tattoos must have the same kill date.'
ERROR(PRK0406);

ENDIF;

CASE;

// IF WRK.@Status Priced        USR is Tattoo is not priced
IF WRK.@Status_Priced_USR = 'N';

// Send error message - 'Cannot Process Request.  All marked tattoos must have a live price.'
ERROR(PRK0419);

ENDIF;

CASE;

// IF WRK.@Status Marked Pymnt  USR is Marked payment not found
IF WRK.@Status_Marked_Pymnt_USR = 'N';

// Send error message - 'No records have been marked for payment.'
ERROR(PRK0394);

ENDIF;

ENDIF;

ENDIF;

//?F13=Edit Prdcr Std D/A
CASE;

// IF CTL.*CMD key is CF13
IF CTL.*CMD_key = '13';

// Call program Edt Producer D/A      EF.
CALL PROGRAM(Edt Producer D/A      EF) ('PKD1EFR');
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.Oms_System_Value_Alpha);

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F15=Edt Prdcr Std Split
CASE;

// IF CTL.*CMD key is CF15
IF CTL.*CMD_key = '15';

// Call program Edt Prod/Prod Split   ET.
CALL PROGRAM(Edt Prod/Prod Split   ET) ('PKFOETR');
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(WRK.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?Validate 1=mark and 9=unmark options
CASE;

// IF RCD.*SFLSEL is Mark for Payment
IF RCD.*SFLSEL = '1'/'1';

// OR RCD.*SFLSEL is Unmark for Payment
OR RCD.*SFLSEL = '9'/'9';

CASE;

// IF WRK.SR Type is Internal
IF WRK.SR_Type = 'I';

// Send error message - 'Option not allowed for Internal producer.'
ERROR(PRK0511);

QUIT;

ENDIF;

ENDIF;

//?2=Edit live price
CASE;

// IF RCD.*SFLSEL is Edt Live Price
IF RCD.*SFLSEL = '2'/'2';

// Call program Edt Live Price        E1.
CALL PROGRAM(Edt Live Price        E1) ('PKGBE1R');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Options 1=mark, 7=Reset, 9=unmark
CASE;

// IF RCD.*SFLSEL is Mark for Payment
IF RCD.*SFLSEL = '1'/'1';

EXECUTE FUNCTION(Rtv/Chg Paymnt Sts-ML  RT) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1145717;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER('ML');
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Pay Sts           CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1156796;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(PAR.TH_Payment_Sts);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

  EXECUTE FUNCTION(Chg/Crt Tatto/Spc Flds IF) TYPE(EXCINTFUN)                     AB1189848;
  PARAMETER(DB1.TH_Payment_Sts);
  PARAMETER(DB1.TH_Payment_Type);
  {
   //?Execute internal function

   EXECUTE FUNCTION(HPE056 Payment Type) TYPE(EXCINTFUN)                           AB1189849;
   {
    //?Execute internal function

    //?1/10/96  HPE056   Allow payment type to be update based on
    //?                  what the payment status is at the time this
    //?                  tattoo is being updated
   }

   //?Function Description:  If there are any fields that need to be
   //?Changed/Created during the Change functions or Create function
   //?Presently: Payment Type
   //?Add this routine to all of the change objects and create object
   //?that update the Payment Type
   CASE;

   // IF PAR.TH Payment Sts is Live anything
   IF PAR.TH_Payment_Sts = 'ML'/'PL'/'NL'/'SL'/'IL';

   // PAR.TH Payment Type = CND.Live
   PAR.TH_Payment_Type = 'L';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.TH Payment Type = CND.Carcass Merit
   PAR.TH_Payment_Type = 'C';

   ENDIF;

  }

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Options 1=mark, 7=Reset, 9=unmark
// IF RCD.*SFLSEL is *Option 7 request
IF RCD.*SFLSEL = '7'/'7';

//?Reset Payment Type
EXECUTE FUNCTION(Rtv BOH Payment Sts   RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1143354;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(WRK.BOH_Payment_Type);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.BOH_Payment_Type = WRK.Blank_USR;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.BOH Payment Type is Carcass Merit
IF WRK.BOH_Payment_Type = 'C';

//?Populate Payment Status
CASE;

// IF RCD.TH Source Type is Internal
IF RCD.TH_Source_Type = 'I';

// WRK.TH Payment Sts = CND.Sl Int Carc
WRK.TH_Payment_Sts = 'IC';

//?Populate Payment Status
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.TH Payment Sts = CND.Sl Carcass Merit
WRK.TH_Payment_Sts = 'SC';

ENDIF;

EXECUTE FUNCTION(Rtv/Chg Reset Payment  RT) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1191465;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(WRK.Blank_USR);
PARAMETER(*ZERO);
PARAMETER('R');
PARAMETER(WRK.TH_Payment_Sts);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Reset Payment     CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1156799;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(PAR.TH_Live_Purchase_UOM);
 PARAMETER(PAR.TH_Live_Purchase_Price);
 PARAMETER(PAR.TH_Calc_Net_Sts);
 PARAMETER(PAR.TH_Payment_Sts);
 {
  //?USER: Processing before Data read

  EXECUTE FUNCTION(HPE056 Payment Type) TYPE(EXCINTFUN)                           AB1189849;
  {
   //?Execute internal function

   //?1/10/96  HPE056   Allow payment type to be update based on
   //?                  what the payment status is at the time this
   //?                  tattoo is being updated
  }

  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

  EXECUTE FUNCTION(Chg/Crt Tatto/Spc Flds IF) TYPE(EXCINTFUN)                     AB1189848;
  PARAMETER(DB1.TH_Payment_Sts);
  PARAMETER(DB1.TH_Payment_Type);
  {
   //?Execute internal function

   EXECUTE FUNCTION(HPE056 Payment Type) TYPE(EXCINTFUN)                           AB1189849;
   {
    //?Execute internal function

    //?1/10/96  HPE056   Allow payment type to be update based on
    //?                  what the payment status is at the time this
    //?                  tattoo is being updated
   }

   //?Function Description:  If there are any fields that need to be
   //?Changed/Created during the Change functions or Create function
   //?Presently: Payment Type
   //?Add this routine to all of the change objects and create object
   //?that update the Payment Type
   CASE;

   // IF PAR.TH Payment Sts is Live anything
   IF PAR.TH_Payment_Sts = 'ML'/'PL'/'NL'/'SL'/'IL';

   // PAR.TH Payment Type = CND.Live
   PAR.TH_Payment_Type = 'L';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.TH Payment Type = CND.Carcass Merit
   PAR.TH_Payment_Type = 'C';

   ENDIF;

  }

  CASE;

  // IF DB1.TH Payment Sts is Live anything
  IF DB1.TH_Payment_Sts = 'ML'/'PL'/'NL'/'SL'/'IL';

  // WRK.Tattoo Action Usr = CND.Carcass Merit to Live Pay
  WRK.Tattoo_Action_Usr = 'CL';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Tattoo Action Usr = CND.Live Pay to Carcass Merit
  WRK.Tattoo_Action_Usr = 'LC';

  ENDIF;

  // Call program Crt Tattoo Action Comm XF.
  CALL PROGRAM(Crt Tattoo Action Comm XF) ('PKV4XFR');
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('LC');
  PARAMETER(WRK.Tattoo_Nbr_Alpha_Usr);

 }

}


ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Options 1=mark, 7=Reset, 9=unmark
// IF RCD.*SFLSEL is Unmark for Payment
IF RCD.*SFLSEL = '9'/'9';

EXECUTE FUNCTION(Rtv/Chg Paymnt Sts-ML  RT) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1145717;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER('SL');
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Pay Sts           CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1156796;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(PAR.TH_Payment_Sts);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

  EXECUTE FUNCTION(Chg/Crt Tatto/Spc Flds IF) TYPE(EXCINTFUN)                     AB1189848;
  PARAMETER(DB1.TH_Payment_Sts);
  PARAMETER(DB1.TH_Payment_Type);
  {
   //?Execute internal function

   EXECUTE FUNCTION(HPE056 Payment Type) TYPE(EXCINTFUN)                           AB1189849;
   {
    //?Execute internal function

    //?1/10/96  HPE056   Allow payment type to be update based on
    //?                  what the payment status is at the time this
    //?                  tattoo is being updated
   }

   //?Function Description:  If there are any fields that need to be
   //?Changed/Created during the Change functions or Create function
   //?Presently: Payment Type
   //?Add this routine to all of the change objects and create object
   //?that update the Payment Type
   CASE;

   // IF PAR.TH Payment Sts is Live anything
   IF PAR.TH_Payment_Sts = 'ML'/'PL'/'NL'/'SL'/'IL';

   // PAR.TH Payment Type = CND.Live
   PAR.TH_Payment_Type = 'L';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.TH Payment Type = CND.Carcass Merit
   PAR.TH_Payment_Type = 'C';

   ENDIF;

  }

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?tattoo header comments
CASE;

// IF RCD.*SFLSEL is *Option 10 (Reusable)
IF RCD.*SFLSEL = '10';

// Call program Edt Tattoo Comment    EF.
CALL PROGRAM(Edt Tattoo Comment    EF) ('PKIVEFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER('U');
PARAMETER(PAR.Oms_System_Value_Alpha);

ENDIF;

