// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKOWPVR
// ?Date: 14.08.2025 Time: 02:52:21
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

// PAR.First Time Flag Usr = CND.Yes
PAR.First_Time_Flag_Usr = 'Y';

// PAR.PRT Night Queue Run Sts = CND.No
PAR.PRT_Night_Queue_Run_Sts = 'N';

//?USER: Load screen

//?First Time processing
CASE;

// IF PAR.First Time Flag Usr is Yes
IF PAR.First_Time_Flag_Usr = 'Y';

// PAR.First Time Flag Usr = CND.No
PAR.First_Time_Flag_Usr = 'N';

// DTL.LTN Company Number = PAR.CC Company Number
DTL.LTN_Company_Number = PAR.CC_Company_Number;

ENDIF;

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(DTL.LTN_Company_Number);
PARAMETER(DTL.Company_Recipient_Name);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


//?Source Type description
CASE;

// IF DTL.LTN Source Type NE WRK.Blank USR
IF DTL.LTN_Source_Type <> WRK.Blank_USR;

// DTL.SR Description = Condition name of DTL.LTN Source Type
DTL.SR_Description = RTVCND(DTL.LTN_Source_Type);

//?Source Type description
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.SR Description = CON.*BLANK
DTL.SR_Description = *BLANK;

ENDIF;

//?Loss Reason description
CASE;

// IF DTL.LR Reason Code NE WRK.Zero USR
IF DTL.LR_Reason_Code <> WRK.Zero_USR;

EXECUTE FUNCTION(Rtv Loss Reason       RT) TYPE(RTVOBJ) FILE(PKBRREP)           AB1138270;
PARAMETER(DTL.LR_Reason_Code);
PARAMETER(DTL.LR_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Loss Reason description
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.LR Description = CON.*BLANK
DTL.LR_Description = *BLANK;

ENDIF;

//?Producer name
CASE;

// IF DTL.PD Producer Code NE WRK.Blank USR
IF DTL.PD_Producer_Code <> WRK.Blank_USR;

EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PD_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Producer name
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.PD Name = CON.*BLANK
DTL.PD_Name = *BLANK;

ENDIF;

//?Location name
CASE;

// IF DTL.PL Location Code NE WRK.Blank USR
IF DTL.PL_Location_Code <> WRK.Blank_USR;

EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.PL_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Location name
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.PL Name = CON.*BLANK
DTL.PL_Name = *BLANK;

ENDIF;

//?USER: Validate fields

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(DTL.LTN_Company_Number);
PARAMETER(DTL.Company_Recipient_Name);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


//?Error
CASE;

// IF WRK.Invalid Y/N USR is Yes
IF WRK.Invalid_Y_N_USR = 'Y';

// Send error message - 'Company not found.'
ERROR(PRK0162);

ENDIF;

//?Val From and To Date
CASE;

// IF DTL.Date From USR GT DTL.Date To   USR
IF DTL.Date_From_USR > DTL.Date_To_USR;

// Send error message - 'From date must be less than or equal to the to date.'
ERROR(PRK0472);

ENDIF;

//?Select Producer
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.PD Producer Code
AND PGM.*Cursor_field = DTL.PD_Producer_Code;

// Call program Sel Producer          SR.
CALL PROGRAM(Sel Producer          SR) ('PKA1SRR');
PARAMETER(DTL.PD_Producer_Code);

ENDIF;

//?Select Location
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.PL Location Code
AND PGM.*Cursor_field = DTL.PL_Location_Code;

// Call program Sel Producer Loc      SR.
CALL PROGRAM(Sel Producer Loc      SR) ('PKKMSRR');
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);

ENDIF;

//?Validate producer code
CASE;

// IF DTL.PD Producer Code NE WRK.Blank USR
IF DTL.PD_Producer_Code <> WRK.Blank_USR;

EXECUTE FUNCTION(Val Prod Existance    RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1176016;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PD_Name);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// Send error message - 'Producer not found.'
ERROR(PRK0009);

ENDIF;

ENDIF;

//?Validate location code
CASE;

// IF DTL.PL Location Code NE WRK.Blank USR
IF DTL.PL_Location_Code <> WRK.Blank_USR;

EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.PL_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Producer Location not found.'
ERROR(PRK0015);

ENDIF;

ENDIF;

//?CALC: Screen function fields

//?Source Type description
CASE;

// IF DTL.LTN Source Type NE WRK.Blank USR
IF DTL.LTN_Source_Type <> WRK.Blank_USR;

// DTL.SR Description = Condition name of DTL.LTN Source Type
DTL.SR_Description = RTVCND(DTL.LTN_Source_Type);

//?Source Type description
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.SR Description = CON.*BLANK
DTL.SR_Description = *BLANK;

ENDIF;

//?Loss Reason description
CASE;

// IF DTL.LR Reason Code NE WRK.Zero USR
IF DTL.LR_Reason_Code <> WRK.Zero_USR;

EXECUTE FUNCTION(Rtv Loss Reason       RT) TYPE(RTVOBJ) FILE(PKBRREP)           AB1138270;
PARAMETER(DTL.LR_Reason_Code);
PARAMETER(DTL.LR_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Loss Reason description
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.LR Description = CON.*BLANK
DTL.LR_Description = *BLANK;

ENDIF;

//?Producer name
CASE;

// IF DTL.PD Producer Code NE WRK.Blank USR
IF DTL.PD_Producer_Code <> WRK.Blank_USR;

EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PD_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Producer name
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.PD Name = CON.*BLANK
DTL.PD_Name = *BLANK;

ENDIF;

//?Location name
CASE;

// IF DTL.PL Location Code NE WRK.Blank USR
IF DTL.PL_Location_Code <> WRK.Blank_USR;

CASE;

// IF DTL.PD Producer Code EQ WRK.Blank USR
IF DTL.PD_Producer_Code = WRK.Blank_USR;

// Send error message - 'Producer and Location are required.'
ERROR(PRK0749);
MSGPARM(DTL.PD_Producer_Code);
MSGPARM(DTL.PL_Location_Code);
MSGPARM(WRK.Txt_Field_Not_Needed);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.PL_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Location name
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.PL Name = CON.*BLANK
DTL.PL_Name = *BLANK;

ENDIF;

//?USER: User defined action

// Call program Pmt Print Options     XF.
CALL PROGRAM(Pmt Print Options     XF) ('PDG0PVR');
PARAMETER('Condemned Report');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('HPE');

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// WRK.Company Number Alpha Usr = CVTVAR(DTL.LTN Company Number)
WRK.Company_Number_Alpha_Usr = CVTVAR(DTL.LTN_Company_Number);

// WRK.Date Alpha USR = CVTVAR(DTL.Date From USR)
WRK.Date_Alpha_USR = CVTVAR(DTL.Date_From_USR);

// WRK.Date Alpha Usr 2 = CVTVAR(DTL.Date To   USR)
WRK.Date_Alpha_Usr_2 = CVTVAR(DTL.Date_To_USR);

// WRK.Reason Code Alpha 3 Usr = CVTVAR(DTL.LR Reason Code)
WRK.Reason_Code_Alpha_3_Usr = CVTVAR(DTL.LR_Reason_Code);

// Execute command - 'SBM Prt Producer Merit Report'
EXECUTE COMMAND(PRK0833);
PARAMETER(WRK.Company_Number_Alpha_Usr);
PARAMETER(WRK.Date_Alpha_USR);
PARAMETER(WRK.Date_Alpha_Usr_2);
PARAMETER(DTL.LTN_Source_Type);
PARAMETER(DTL.LTN_Shift);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(WRK.Reason_Code_Alpha_3_Usr);

ENDIF;

