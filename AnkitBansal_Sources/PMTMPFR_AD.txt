// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMTMPFR
// ?Date: 14.08.2025 Time: 12:05:44
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('A/R');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.Print (Yes/No) USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

EXECUTE FUNCTION(Rtv Plant Co/City St  IF) TYPE(EXCINTFUN)                      AC1874790;
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.USR_Company_Number_1);
PARAMETER(LCL.USR_Company_Number_2);
PARAMETER(LCL.USR_Company_Number_3);
PARAMETER(LCL.USR_Company_Number_4);
PARAMETER(LCL.USR_Company_Number_5);
PARAMETER(LCL.USR_City_1);
PARAMETER(LCL.USR_City_2);
PARAMETER(LCL.USR_City_3);
PARAMETER(LCL.USR_City_4);
PARAMETER(LCL.USR_City_5);
PARAMETER(LCL.State_1_USR);
PARAMETER(LCL.State_2_USR);
PARAMETER(LCL.State_3_USR);
PARAMETER(LCL.State_4_USR);
PARAMETER(LCL.State_5_USR);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Plant Cos all     RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1809261;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.USR_Company_Number_1);
 PARAMETER(PAR.USR_Company_Number_3);
 PARAMETER(PAR.USR_Company_Number_2);
 PARAMETER(PAR.USR_Company_Number_4);
 PARAMETER(PAR.USR_Company_Number_5);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF PAR.USR Company Number 1 is Equal to zero
  IF PAR.USR_Company_Number_1 = *ZERO;

  // PAR.USR Company Number 1 = DB1.Company Number
  PAR.USR_Company_Number_1 = DB1.Company_Number;

  // IF PAR.USR Company Number 2 is Equal to zero
  IF PAR.USR_Company_Number_2 = *ZERO;

  // PAR.USR Company Number 2 = DB1.Company Number
  PAR.USR_Company_Number_2 = DB1.Company_Number;

  // IF PAR.USR Company Number 3 is Equal to zero
  IF PAR.USR_Company_Number_3 = *ZERO;

  // PAR.USR Company Number 3 = DB1.Company Number
  PAR.USR_Company_Number_3 = DB1.Company_Number;

  // IF PAR.USR Company Number 4 is Equal to zero
  IF PAR.USR_Company_Number_4 = *ZERO;

  // PAR.USR Company Number 4 = DB1.Company Number
  PAR.USR_Company_Number_4 = DB1.Company_Number;

  // IF PAR.USR Company Number 5 is Equal to zero
  IF PAR.USR_Company_Number_5 = *ZERO;

  // PAR.USR Company Number 5 = DB1.Company Number
  PAR.USR_Company_Number_5 = DB1.Company_Number;

  ENDIF;

 }

 //?Company 1
 CASE;

 // IF PAR.USR Company Number 1 is not equal to zero
 IF PAR.USR_Company_Number_1 <> *ZERO;

 EXECUTE FUNCTION(RTV Company Address    RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1113470;
 PARAMETER(PAR.USR_Company_Number_1);
 PARAMETER(NLL.Name);
 PARAMETER(NLL.Address_Line_1);
 PARAMETER(NLL.Address_Line_2);
 PARAMETER(NLL.Address_Line_3);
 PARAMETER(PAR.USR_City_1);
 PARAMETER(NLL.Zip_Postal_Code);
 PARAMETER(PAR.State_1_USR);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?Company 2
 CASE;

 // IF PAR.USR Company Number 2 is not equal to zero
 IF PAR.USR_Company_Number_2 <> *ZERO;

 EXECUTE FUNCTION(RTV Company Address    RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1113470;
 PARAMETER(PAR.USR_Company_Number_2);
 PARAMETER(NLL.Name);
 PARAMETER(NLL.Address_Line_1);
 PARAMETER(NLL.Address_Line_2);
 PARAMETER(NLL.Address_Line_3);
 PARAMETER(PAR.USR_City_2);
 PARAMETER(NLL.Zip_Postal_Code);
 PARAMETER(PAR.State_2_USR);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?Company 3
 CASE;

 // IF PAR.USR Company Number 3 is not equal to zero
 IF PAR.USR_Company_Number_3 <> *ZERO;

 EXECUTE FUNCTION(RTV Company Address    RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1113470;
 PARAMETER(PAR.USR_Company_Number_3);
 PARAMETER(NLL.Name);
 PARAMETER(NLL.Address_Line_1);
 PARAMETER(NLL.Address_Line_2);
 PARAMETER(NLL.Address_Line_3);
 PARAMETER(PAR.USR_City_3);
 PARAMETER(NLL.Zip_Postal_Code);
 PARAMETER(PAR.State_3_USR);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?Company 4
 CASE;

 // IF PAR.USR Company Number 4 is not equal to zero
 IF PAR.USR_Company_Number_4 <> *ZERO;

 EXECUTE FUNCTION(RTV Company Address    RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1113470;
 PARAMETER(PAR.USR_Company_Number_4);
 PARAMETER(NLL.Name);
 PARAMETER(NLL.Address_Line_1);
 PARAMETER(NLL.Address_Line_2);
 PARAMETER(NLL.Address_Line_3);
 PARAMETER(PAR.USR_City_4);
 PARAMETER(NLL.Zip_Postal_Code);
 PARAMETER(PAR.State_4_USR);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?Company 5
 CASE;

 // IF PAR.USR Company Number 5 is not equal to zero
 IF PAR.USR_Company_Number_5 <> *ZERO;

 EXECUTE FUNCTION(RTV Company Address    RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1113470;
 PARAMETER(PAR.USR_Company_Number_5);
 PARAMETER(NLL.Name);
 PARAMETER(NLL.Address_Line_1);
 PARAMETER(NLL.Address_Line_2);
 PARAMETER(NLL.Address_Line_3);
 PARAMETER(PAR.USR_City_5);
 PARAMETER(NLL.Zip_Postal_Code);
 PARAMETER(PAR.State_5_USR);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

}


//?USER: Record selection processing

//?RMC 8/9/6 pass/use record sts from Customer file
CASE;

// IF PAR.Record Status is Valid Entries
IF PAR.Record_Status = 'A'/'D'/'I';

EXECUTE FUNCTION(RTV Record Sts         RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1680719;
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?** Skip not = par
CASE;

// IF WRK.Record Status NE PAR.Record Status
IF WRK.Record_Status <> PAR.Record_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** Skip Company # if passed in and no match
CASE;

// IF PAR.Company Number is not equal to zero
IF PAR.Company_Number <> *ZERO;

CASE;

// IF DB1.Company Number NE PAR.Company Number
IF DB1.Company_Number <> PAR.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** Skip Salesperson if passed in and no match   07/27/2006 LJB
CASE;

// IF PAR.Salesperson Code 1 is entered
IF PAR.Salesperson_Code_1 <> *BLANK;

CASE;

// IF DB1.Sales Route Code NE PAR.Salesperson Code 1
IF DB1.Sales_Route_Code <> PAR.Salesperson_Code_1;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Process top of page

// TOP.Record Status = PAR.Record Status
TOP_Record_Status = PAR.Record_Status;

CASE;

// IF TOP.Record Status is Valid Entries
IF TOP_Record_Status = 'A'/'D'/'I';

// TOP.Condition Desc. 1  USR = Condition name of TOP.Record Status
TOP_Condition_Desc_1_USR = RTVCND(TOP_Record_Status);

// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Condition Desc. 1  USR = CON.*ALL
TOP_Condition_Desc_1_USR = *ALL;

ENDIF;

//?** Print Salesperson # and Name if passed in  07/27/2006 LJB
//?** Retrieve salesperson name if salesperson code is passed in
CASE;

// IF PAR.Salesperson Code 1 is not entered
IF PAR.Salesperson_Code_1 = *BLANK;

// TOP.Salesperson Name = CON.*ALL
TOP_Salesperson_Name = *ALL;

//?** Retrieve salesperson name if salesperson code is passed in
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Salesperson Code 1 = PAR.Salesperson Code 1
TOP_Salesperson_Code_1 = PAR.Salesperson_Code_1;

EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
PARAMETER(TOP_Salesperson_Code_1);
PARAMETER(TOP_Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?** Retrieve Company Name if Company# is passed in
CASE;

// IF PAR.Company Number is Equal to zero
IF PAR.Company_Number = *ZERO;

// TOP.Company Name DRV = CON.*ALL
TOP_Company_Name_DRV = *ALL;

//?** Retrieve Company Name if Company# is passed in
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Company Number = PAR.Company Number
TOP_Company_Number = PAR.Company_Number;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(TOP_Company_Name_DRV);
PARAMETER(PAR.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


ENDIF;

// PAR.Output Only 1 USR = CND.no
PAR.Output_Only_1_USR = 'N';

// PAR.Output Only 2 USR = CND.no
PAR.Output_Only_2_USR = 'N';

// TOP.USR Company Number 1 = LCL.USR Company Number 1
TOP_USR_Company_Number_1 = LCL.USR_Company_Number_1;

// TOP.USR Company Number 2 = LCL.USR Company Number 2
TOP_USR_Company_Number_2 = LCL.USR_Company_Number_2;

// TOP.Company Number     041405 = TOP.USR Company Number 1
TOP_Company_Number_041405 = TOP_USR_Company_Number_1;

// TOP.Company Number     041743 = TOP.USR Company Number 2
TOP_Company_Number_041743 = TOP_USR_Company_Number_2;

//?USER: Print required level headings

// SUPPRESSED PRINT Ship To Customer header format

// SUPPRESSED PRINT Company Number header format

//?USER: On print of detail format

//?** Condition selection criteria not to print after 1st page
// WRK.Print (Yes/No) USR = CND.No
WRK.Print_Yes_No_USR = 'N';

CASE;

// IF CUR.Company Number EQ LCL.USR Company Number 1
IF CUR.Company_Number = LCL.USR_Company_Number_1;

// NXT.Absorbed Freight Rate = CUR.Absorbed Freight Rate
NXT.Absorbed_Freight_Rate_CWT = CUR.Absorbed_Freight_Rate_CWT;

// NXT.Number 5,0           USR1 = CUR.Mileage To Customer
NXT.Number_50_USR1 = CUR.Mileage_To_Customer;

// PAR.Default 1 USR = CUR.Default Shipping Co Sts
PAR.Default_1_USR = CUR.Default_Shipping_Co_Sts;

// IF CUR.Company Number EQ LCL.USR Company Number 2
IF CUR.Company_Number = LCL.USR_Company_Number_2;

// NXT.Usr Abs Freight Rate = CUR.Absorbed Freight Rate
NXT.Usr_Abs_Freight_Rate = CUR.Absorbed_Freight_Rate_CWT;

// NXT.Number 5,0           USR2 = CUR.Mileage To Customer
NXT.Number_50_USR2 = CUR.Mileage_To_Customer;

// PAR.Default 2 USR = CUR.Default Shipping Co Sts
PAR.Default_2_USR = CUR.Default_Shipping_Co_Sts;

ENDIF;

//?USER: Print required level totals

// SUPPRESSED PRINT Company Number totals format

CASE;

IF NEW Ship_To_Customer;
EXECUTE FUNCTION(RTV Cust Name/Addr     RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1129143;
PARAMETER(CUR.Ship_To_Customer);
PARAMETER(CUR.Customer_Name);
PARAMETER(WRK.Address_Line_1);
PARAMETER(WRK.Address_Line_2);
PARAMETER(WRK.Address_Line_3);
PARAMETER(CUR.City);
PARAMETER(CUR.State_Code);
PARAMETER(CUR.Zip_Postal_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Company 1 Miles
CASE;

// IF CUR.Number 5,0           USR1 is Zero
IF CUR.Number_50_USR1 = *ZERO;

EXECUTE FUNCTION(RTV Miles Between      IF) TYPE(EXCINTFUN)                     AC1453987;
PARAMETER(LCL.USR_City_1);
PARAMETER(LCL.State_1_USR);
PARAMETER(CUR.City);
PARAMETER(CUR.State_Code);
PARAMETER(PAR.Number_50_USR1);
{
 //?Execute internal function

 // PAR.Miles to next stop = CON.*ZERO
 PAR.Miles_to_next_stop = *ZERO;

 //?ensure cities are all caps, no punctuation
 //?usr city is From City; Ship to City is To city
 // Execute function CVT Str to Upper Alpha US.
 EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
 PARAMETER(PAR.From_City);
 PARAMETER(PAR.USR_City);
 {
  PDWEUFR:  PGM PARM(&STRIN &STROUT)

  CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
 }

 // Execute function CVT Str to Upper Alpha US.
 EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
 PARAMETER(PAR.To_City);
 PARAMETER(PAR.Ship_To_City);
 {
  PDWEUFR:  PGM PARM(&STRIN &STROUT)

  CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
 }

 //?** Rtv miles, if none, then reverse the order of cities and check again
 EXECUTE FUNCTION(RTV Miles Between      RT) TYPE(RTVOBJ) FILE(PDLFREP)          AC1453986;
 PARAMETER(PAR.USR_City);
 PARAMETER(PAR.From_State);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.To_State_State_Code);
 PARAMETER(PAR.Miles_to_next_stop);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 EXECUTE FUNCTION(RTV Miles Between      RT) TYPE(RTVOBJ) FILE(PDLFREP)          AC1453986;
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.To_State_State_Code);
 PARAMETER(PAR.USR_City);
 PARAMETER(PAR.From_State);
 PARAMETER(PAR.Miles_to_next_stop);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 ENDIF;

 ENDIF;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Number 5,0           USR1 = PAR.Number 5,0           USR1
CUR.Number_50_USR1 = PAR.Number_50_USR1;

ENDIF;

ENDIF;

//?Company 2 Miles
CASE;

// IF CUR.Number 5,0           USR2 is Zero
IF CUR.Number_50_USR2 = *ZERO;

EXECUTE FUNCTION(RTV Miles Between      IF) TYPE(EXCINTFUN)                     AC1453987;
PARAMETER(LCL.USR_City_2);
PARAMETER(LCL.State_2_USR);
PARAMETER(CUR.City);
PARAMETER(CUR.State_Code);
PARAMETER(PAR.Number_50_USR2);
{
 //?Execute internal function

 // PAR.Miles to next stop = CON.*ZERO
 PAR.Miles_to_next_stop = *ZERO;

 //?ensure cities are all caps, no punctuation
 //?usr city is From City; Ship to City is To city
 // Execute function CVT Str to Upper Alpha US.
 EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
 PARAMETER(PAR.From_City);
 PARAMETER(PAR.USR_City);
 {
  PDWEUFR:  PGM PARM(&STRIN &STROUT)

  CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
 }

 // Execute function CVT Str to Upper Alpha US.
 EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
 PARAMETER(PAR.To_City);
 PARAMETER(PAR.Ship_To_City);
 {
  PDWEUFR:  PGM PARM(&STRIN &STROUT)

  CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
 }

 //?** Rtv miles, if none, then reverse the order of cities and check again
 EXECUTE FUNCTION(RTV Miles Between      RT) TYPE(RTVOBJ) FILE(PDLFREP)          AC1453986;
 PARAMETER(PAR.USR_City);
 PARAMETER(PAR.From_State);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.To_State_State_Code);
 PARAMETER(PAR.Miles_to_next_stop);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 EXECUTE FUNCTION(RTV Miles Between      RT) TYPE(RTVOBJ) FILE(PDLFREP)          AC1453986;
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.To_State_State_Code);
 PARAMETER(PAR.USR_City);
 PARAMETER(PAR.From_State);
 PARAMETER(PAR.Miles_to_next_stop);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 ENDIF;

 ENDIF;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Number 5,0           USR2 = PAR.Number 5,0           USR2
CUR.Number_50_USR2 = PAR.Number_50_USR2;

ENDIF;

ENDIF;

//?Default Company
CASE;

// IF PAR.Default 1 USR is Yes
IF PAR.Default_1_USR = 'Y';

// CUR.Default Company Usr = LCL.USR Company Number 1
CUR.Default_Company_Usr = LCL.USR_Company_Number_1;

//?Default Company
// IF PAR.Default 2 USR is Yes
IF PAR.Default_2_USR = 'Y';

// CUR.Default Company Usr = LCL.USR Company Number 2
CUR.Default_Company_Usr = LCL.USR_Company_Number_2;

ENDIF;

//?EXCEPTION
CASE;

// IF CUR.Number 5,0           USR1 is Not Zero
IF ( CUR.Number_50_USR1 <> *ZERO;

// AND CUR.Number 5,0           USR2 is Not Zero
AND CUR.Number_50_USR2 <> *ZERO );

// AND CUR.Number 5,0           USR1 NE CUR.Number 5,0           USR2
AND CUR.Number_50_USR1 <> CUR.Number_50_USR2;

CASE;

// IF CUR.Number 5,0           USR1 LT CUR.Number 5,0           USR2
IF CUR.Number_50_USR1 < CUR.Number_50_USR2;

CASE;

// IF CUR.Default Company Usr NE LCL.USR Company Number 1
IF CUR.Default_Company_Usr <> LCL.USR_Company_Number_1;

// CUR.Text 1 Length USR = CON.*
CUR.Text_1_Length_USR = *;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Text 1 Length USR = CON.*BLANK
CUR.Text_1_Length_USR = *BLANK;

ENDIF;

// IF CUR.Number 5,0           USR1 GT CUR.Number 5,0           USR2
IF CUR.Number_50_USR1 > CUR.Number_50_USR2;

CASE;

// IF CUR.Default Company Usr NE LCL.USR Company Number 2
IF CUR.Default_Company_Usr <> LCL.USR_Company_Number_2;

// CUR.Text 1 Length USR = CON.*
CUR.Text_1_Length_USR = *;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Text 1 Length USR = CON.*BLANK
CUR.Text_1_Length_USR = *BLANK;

ENDIF;

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV SR Desc,person     RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1270657;
PARAMETER(CUR.Sales_Route_Code);
PARAMETER(LCL.Sales_Route_Description);
PARAMETER(NLL.Salesperson_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Crt MrgnMgt Trns Info CR) TYPE(CRTOBJ) FILE(PMDSCPP)           AC1875795;
PARAMETER(CUR.Ship_To_Customer);
PARAMETER(CUR.Customer_Name);
PARAMETER(CUR.City);
PARAMETER(CUR.State_Code);
PARAMETER(CUR.Zip_Postal_Code);
PARAMETER(CUR.Sales_Route_Code);
PARAMETER(LCL.Sales_Route_Description);
PARAMETER(LCL.USR_Company_Number_1);
PARAMETER(LCL.USR_Company_Number_2);
PARAMETER(CUR.Absorbed_Freight_Rate_CWT);
PARAMETER(CUR.Usr_Abs_Freight_Rate);
PARAMETER(CUR.Number_50_USR1);
PARAMETER(CUR.Number_50_USR2);
PARAMETER(CUR.Default_Company_Usr);
PARAMETER(CUR.Text_1_Length_USR);

// Print Ship To Customer totals format
PRINT Ship To Customer totals format;

ENDIF;

