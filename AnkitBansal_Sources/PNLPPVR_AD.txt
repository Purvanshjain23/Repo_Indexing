// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNLPPVR
// ?Date: 14.08.2025 Time: 03:45:31
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification history
DO;

//?** 12/21/2022 EL 103904 A/R Write Off Report changes (allow ONE Customer)
//?** 03/31/2017 LJB E009707  Select active Adjustment Type, add
//?        3 company code select fields, add Print or Email and
//?        email address, add Invoice Suffix selection (6)
//?        Remove A/R Cust name, this functionality doesn't work
//?** 06/22/2016 JBB E5262 - Charge Backs and Rebills project
//?        Change report title from Write-Off to Adjustment Type
//?** 08/24/2016 JBB E5262 - Charge Backs and Rebills project
//?        Calling a different select record for Adjustment Type that
//?        includes Rebills.
ENDDO;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.Company Number Pass   USR = PAR.Company Number
PAR.Company_Number_Pass_USR = PAR.Company_Number;

//?USER: Load screen

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(PAR.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Company Number = PAR.Company Number
DTL.Company_Number = PAR.Company_Number;

// DTL.Company Number CDE = PAR.Company Number
DTL.Company_Number_CDE = PAR.Company_Number;

// DTL.Report Type = CND.Print Report
DTL.Report_Type = 'P';

// DTL.Invoice Suffix = CND.Charge Backs
DTL.Invoice_Suffix = 'CB';

// DTL.Invoice Suffix 2 = CND.Credit Memos
DTL.Invoice_Suffix_2 = 'CM';

// DTL.Invoice Suffix 3 = CND.Debit Memos
DTL.Invoice_Suffix_3 = 'DM';

// DTL.Invoice Suffix 4 = CND.Invoices
DTL.Invoice_Suffix_4 = 'IN';

// DTL.Invoice Suffix 5 = CND.On Account Cash
DTL.Invoice_Suffix_5 = 'OA';

// DTL.Invoice/Memo Suffix = CND.Rebill
DTL.Invoice_Memo_Suffix = 'RB';

//?USER: Validate fields

//?Process F4
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

//?F4 on A/R Customer Number
CASE;

// IF PGM.*Cursor field <IS> DTL.USR Customer Number  CD7
IF PGM.*Cursor_field = DTL.USR_Customer_Number_CD7;

// Call program SEL A/R Customer       SR.
CALL PROGRAM(SEL A/R Customer       SR) ('PDXESRR');
PARAMETER(DTL.USR_Customer_Number_CD7);

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(DTL.USR_Customer_Number_CD7);
PARAMETER(DTL.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Company Numbers                         E009707
DO;

//?F4 on 1st Company Number
CASE;

// IF PGM.*Cursor field <IS> DTL.Company Number CDE
IF PGM.*Cursor_field = DTL.Company_Number_CDE;

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(DTL.Company_Number_CDE);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

ENDIF;

ENDIF;

//?F4 on 2nd Company Number
CASE;

// IF PGM.*Cursor field <IS> DTL.USR Company Number 2
IF PGM.*Cursor_field = DTL.USR_Company_Number_2;

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(DTL.USR_Company_Number_2);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

ENDIF;

ENDIF;

//?F4 on 3rd Company Number
CASE;

// IF PGM.*Cursor field <IS> DTL.USR Company Number 3
IF PGM.*Cursor_field = DTL.USR_Company_Number_3;

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(DTL.USR_Company_Number_3);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

ENDIF;

ENDIF;

ENDDO;

//?Process F4 on Adjustment Types
DO;

//?F4 on Adjustment Type 1
CASE;

// IF PGM.*Cursor field <IS> DTL.USR Adjustment Type 1
IF PGM.*Cursor_field = DTL.USR_Adjustment_Type_1;

// Call program SEL Adj Type 360 Actv  SR.
CALL PROGRAM(SEL Adj Type 360 Actv  SR) ('PUBYSRR');
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.USR_Adjustment_Type_1);
PARAMETER(DTL.Description_1_usr);

ENDIF;

//?F4 on Adjustment Type 2
CASE;

// IF PGM.*Cursor field <IS> DTL.USR Adjustment Type 2
IF PGM.*Cursor_field = DTL.USR_Adjustment_Type_2;

// Call program SEL Adj Type 360 Actv  SR.
CALL PROGRAM(SEL Adj Type 360 Actv  SR) ('PUBYSRR');
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.USR_Adjustment_Type_2);
PARAMETER(DTL.Description_2_usr);

ENDIF;

//?F4 on Adjustment Type 3
CASE;

// IF PGM.*Cursor field <IS> DTL.USR Adjustment Type 3
IF PGM.*Cursor_field = DTL.USR_Adjustment_Type_3;

// Call program SEL Adj Type 360 Actv  SR.
CALL PROGRAM(SEL Adj Type 360 Actv  SR) ('PUBYSRR');
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.USR_Adjustment_Type_3);
PARAMETER(DTL.Description_3_usr);

ENDIF;

//?F4 on Adjustment Type 4
CASE;

// IF PGM.*Cursor field <IS> DTL.USR Adjustment Type 4
IF PGM.*Cursor_field = DTL.USR_Adjustment_Type_4;

// Call program SEL Adj Type 360 Actv  SR.
CALL PROGRAM(SEL Adj Type 360 Actv  SR) ('PUBYSRR');
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.USR_Adjustment_Type_4);
PARAMETER(DTL.Description_4_usr);

ENDIF;

//?F4 on Adjustment Type 5
CASE;

// IF PGM.*Cursor field <IS> DTL.USR Adjustment Type 5
IF PGM.*Cursor_field = DTL.USR_Adjustment_Type_5;

// Call program SEL Adj Type 360 Actv  SR.
CALL PROGRAM(SEL Adj Type 360 Actv  SR) ('PUBYSRR');
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.USR_Adjustment_Type_5);
PARAMETER(DTL.Description_5_usr);

ENDIF;

//?F4 on Adjustment Type 6
CASE;

// IF PGM.*Cursor field <IS> DTL.USR Adjustment Type 6
IF PGM.*Cursor_field = DTL.USR_Adjustment_Type_6;

// Call program SEL Adj Type 360 Actv  SR.
CALL PROGRAM(SEL Adj Type 360 Actv  SR) ('PUBYSRR');
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.USR_Adjustment_Type_6);
PARAMETER(DTL.Description_6_usr);

ENDIF;

//?F4 on Adjustment Type 7
CASE;

// IF PGM.*Cursor field <IS> DTL.USR Adjustment Type 7
IF PGM.*Cursor_field = DTL.USR_Adjustment_Type_7;

// Call program SEL Adj Type 360 Actv  SR.
CALL PROGRAM(SEL Adj Type 360 Actv  SR) ('PUBYSRR');
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.USR_Adjustment_Type_7);
PARAMETER(DTL.Description_7_usr);

ENDIF;

//?F4 on Adjustment Type 8
CASE;

// IF PGM.*Cursor field <IS> DTL.USR Adjustment Type 8
IF PGM.*Cursor_field = DTL.USR_Adjustment_Type_8;

// Call program SEL Adj Type 360 Actv  SR.
CALL PROGRAM(SEL Adj Type 360 Actv  SR) ('PUBYSRR');
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.USR_Adjustment_Type_8);
PARAMETER(DTL.Description_8_usr);

ENDIF;

//?F4 on Adjustment Type 9
CASE;

// IF PGM.*Cursor field <IS> DTL.USR Adjustment Type 9
IF PGM.*Cursor_field = DTL.USR_Adjustment_Type_9;

// Call program SEL Adj Type 360 Actv  SR.
CALL PROGRAM(SEL Adj Type 360 Actv  SR) ('PUBYSRR');
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.USR_Adjustment_Type_9);
PARAMETER(DTL.Description_9_usr);

ENDIF;

//?F4 on Adjustment Type 10
CASE;

// IF PGM.*Cursor field <IS> DTL.USR Adjustment Type 10
IF PGM.*Cursor_field = DTL.USR_Adjustment_Type_10;

// Call program SEL Adj Type 360 Actv  SR.
CALL PROGRAM(SEL Adj Type 360 Actv  SR) ('PUBYSRR');
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.USR_Adjustment_Type_10);
PARAMETER(DTL.Description_10_usr);

ENDIF;

ENDDO;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Email address must be entered if Report Type = Email  E009707
CASE;

// IF DTL.Report Type is Email Report
IF DTL.Report_Type = 'E';

CASE;

// IF DTL.Email Address is Blank
IF DTL.Email_Address = *BLANK;

// Send error message - 'Email address cannot be left blank. Enter a valid email address.'
ERROR(USR3670);
MSGPARM(DTL.Email_Address);

ENDIF;

ENDIF;

//?CALC: Screen function fields

CASE;

// IF DTL.Company Number CDE is Equal to zero
IF DTL.Company_Number_CDE = *ZERO;

// DTL.Name = CON.*ALL
DTL.Name = *ALL;

ENDIF;

//?USER: Validate relations

//?** Clear screen constants
DO;

// DTL.Name = CON.*BLANK
DTL.Name = *BLANK;

// DTL.Customer Name = CON.*BLANK
DTL.Customer_Name = *BLANK;

// DTL.Description 1 usr = CON.*BLANK
DTL.Description_1_usr = *BLANK;

// DTL.Description 2 usr = CON.*BLANK
DTL.Description_2_usr = *BLANK;

// DTL.Description 3 usr = CON.*BLANK
DTL.Description_3_usr = *BLANK;

// DTL.Description 4 usr = CON.*BLANK
DTL.Description_4_usr = *BLANK;

// DTL.Description 5 usr = CON.*BLANK
DTL.Description_5_usr = *BLANK;

// DTL.Description 6 usr = CON.*BLANK
DTL.Description_6_usr = *BLANK;

// DTL.Description 7 usr = CON.*BLANK
DTL.Description_7_usr = *BLANK;

// DTL.Description 8 usr = CON.*BLANK
DTL.Description_8_usr = *BLANK;

// DTL.Description 9 usr = CON.*BLANK
DTL.Description_9_usr = *BLANK;

// DTL.Description 10 usr = CON.*BLANK
DTL.Description_10_usr = *BLANK;

ENDDO;

// LCL.@Text 1 = SUBSTRING(DTL.USR Adjustment Type 1,CON.1,CON.1)
LCL.@Text_1 = SUBSTRING(DTL.USR_Adjustment_Type_1:1:1);

// LCL.Byte = SUBSTRING(DTL.USR Adjustment Type 1,CON.2,CON.1)
LCL.Byte = SUBSTRING(DTL.USR_Adjustment_Type_1:2:1);

//?Pass all Adj Type Codes that match if 'Begins With' condition
CASE;

// IF LCL.@Text 1 is Entered
IF LCL.@Text_1 <> *BLANK;

// AND LCL.Byte is Blank
AND LCL.Byte = *BLANK;

//?Default company to Guymon if "Begins With" condition
CASE;

// IF LCL.@Text 1 is Entered
IF LCL.@Text_1 <> *BLANK;

// LCL.Company Number = CND.Guymon
LCL.Company_Number = 360;

//?Default company to Guymon if "Begins With" condition
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Company Number = DTL.Company Number
LCL.Company_Number = DTL.Company_Number;

ENDIF;

EXECUTE FUNCTION(RTV Begins With AT's   IF) TYPE(EXCINTFUN)                     AC2135134;
PARAMETER(LCL.Company_Number);
PARAMETER(DTL.USR_Adjustment_Type_1);
PARAMETER(LCL.@Text_1);
PARAMETER(DTL.USR_Adjustment_Type_1);
PARAMETER(DTL.USR_Adjustment_Type_2);
PARAMETER(DTL.USR_Adjustment_Type_3);
PARAMETER(DTL.USR_Adjustment_Type_4);
PARAMETER(DTL.USR_Adjustment_Type_5);
PARAMETER(DTL.USR_Adjustment_Type_6);
PARAMETER(DTL.USR_Adjustment_Type_7);
PARAMETER(DTL.USR_Adjustment_Type_8);
PARAMETER(DTL.USR_Adjustment_Type_9);
PARAMETER(DTL.USR_Adjustment_Type_10);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV Begins With AT's   RT) TYPE(RTVOBJ) FILE(PDJ3CPP)          AC2135090;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Adjustment_Type_Code);
 PARAMETER(PAR.Text_1_Length_USR);
 PARAMETER(PAR.USR_Text_1_3a);
 PARAMETER(PAR.USR_Text_2_3a);
 PARAMETER(PAR.USR_Text_3_3a);
 PARAMETER(PAR.USR_Text_4_3a);
 PARAMETER(PAR.USR_Text_5_3a);
 PARAMETER(PAR.USR_Text_6_3a);
 PARAMETER(PAR.USR_Text_7_3a);
 PARAMETER(PAR.USR_Text_8_3a);
 PARAMETER(PAR.USR_Text_9_3a);
 PARAMETER(PAR.USR_Text_10_3a);
 {
  //?USER: Initialize routine

  // PAR.USR Text 1  3a = CND.Blank
  PAR.USR_Text_1_3a = *BLANK;

  //?USER: Process Data record

  // LCL.First Letter 1 USR = SUBSTRING(DB1.Adjustment Type Code,CON.1,CON.1)
  LCL.First_Letter_1_USR = SUBSTRING(DB1.Adjustment_Type_Code:1:1);

  CASE;

  // IF LCL.First Letter 1 USR EQ PAR.Text 1 Length USR
  IF LCL.First_Letter_1_USR = PAR.Text_1_Length_USR;

  //?Save up to 10 Adjustment Types that begin with passed in letter
  CASE;

  // IF PAR.USR Text 1  3a is Blank
  IF PAR.USR_Text_1_3a = *BLANK;

  // PAR.USR Text 1  3a = DB1.Adjustment Type Code
  PAR.USR_Text_1_3a = DB1.Adjustment_Type_Code;

  //?Save up to 10 Adjustment Types that begin with passed in letter
  // IF PAR.USR Text 2  3a is Blank
  IF PAR.USR_Text_2_3a = *BLANK;

  // PAR.USR Text 2  3a = DB1.Adjustment Type Code
  PAR.USR_Text_2_3a = DB1.Adjustment_Type_Code;

  //?Save up to 10 Adjustment Types that begin with passed in letter
  // IF PAR.USR Text 3  3a is Blank
  IF PAR.USR_Text_3_3a = *BLANK;

  // PAR.USR Text 3  3a = DB1.Adjustment Type Code
  PAR.USR_Text_3_3a = DB1.Adjustment_Type_Code;

  //?Save up to 10 Adjustment Types that begin with passed in letter
  // IF PAR.USR Text 4  3a is Blank
  IF PAR.USR_Text_4_3a = *BLANK;

  // PAR.USR Text 4  3a = DB1.Adjustment Type Code
  PAR.USR_Text_4_3a = DB1.Adjustment_Type_Code;

  //?Save up to 10 Adjustment Types that begin with passed in letter
  // IF PAR.USR Text 5  3a is Blank
  IF PAR.USR_Text_5_3a = *BLANK;

  // PAR.USR Text 5  3a = DB1.Adjustment Type Code
  PAR.USR_Text_5_3a = DB1.Adjustment_Type_Code;

  //?Save up to 10 Adjustment Types that begin with passed in letter
  // IF PAR.USR Text 6  3a is Blank
  IF PAR.USR_Text_6_3a = *BLANK;

  // PAR.USR Text 6  3a = DB1.Adjustment Type Code
  PAR.USR_Text_6_3a = DB1.Adjustment_Type_Code;

  //?Save up to 10 Adjustment Types that begin with passed in letter
  // IF PAR.USR Text 7  3a is Blank
  IF PAR.USR_Text_7_3a = *BLANK;

  // PAR.USR Text 7  3a = DB1.Adjustment Type Code
  PAR.USR_Text_7_3a = DB1.Adjustment_Type_Code;

  //?Save up to 10 Adjustment Types that begin with passed in letter
  // IF PAR.USR Text 8  3a is Blank
  IF PAR.USR_Text_8_3a = *BLANK;

  // PAR.USR Text 8  3a = DB1.Adjustment Type Code
  PAR.USR_Text_8_3a = DB1.Adjustment_Type_Code;

  //?Save up to 10 Adjustment Types that begin with passed in letter
  // IF PAR.USR Text 9  3a is Blank
  IF PAR.USR_Text_9_3a = *BLANK;

  // PAR.USR Text 9  3a = DB1.Adjustment Type Code
  PAR.USR_Text_9_3a = DB1.Adjustment_Type_Code;

  //?Save up to 10 Adjustment Types that begin with passed in letter
  // IF PAR.USR Text 10 3a is Blank
  IF PAR.USR_Text_10_3a = *BLANK;

  // PAR.USR Text 10 3a = DB1.Adjustment Type Code
  PAR.USR_Text_10_3a = DB1.Adjustment_Type_Code;

  ENDIF;

  ENDIF;

 }

}


ENDIF;

//?Validate companies if entered
DO;

//?Validate 1st company number if entered
CASE;

// IF DTL.Company Number CDE is not equal to zero
IF DTL.Company_Number_CDE <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Company Number not found'
ERROR(USR0163);

ENDIF;

//?Validate 1st company number if entered
//?Validate 2nd company number if entered                E009707
// IF DTL.USR Company Number 2 is not equal to zero
IF DTL.USR_Company_Number_2 <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.USR_Company_Number_2);
PARAMETER(LCL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Company not found.'
ERROR(USR2831);
MSGPARM(DTL.USR_Company_Number_2);

ENDIF;

ENDIF;

//?Validate 3rd company number if entered                E009707
CASE;

// IF DTL.USR Company Number 3 is not equal to zero
IF DTL.USR_Company_Number_3 <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.USR_Company_Number_3);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Company not found.'
ERROR(USR2831);
MSGPARM(DTL.USR_Company_Number_3);

ENDIF;

ENDIF;

//?Select for all companies if company codes = zeros     E009707
CASE;

// IF DTL.Company Number CDE is Equal to zero
IF DTL.Company_Number_CDE = *ZERO;

// AND DTL.USR Company Number 1 is Equal to zero
AND DTL.USR_Company_Number_1 = *ZERO;

// AND DTL.USR Company Number 3 is Equal to zero
AND DTL.USR_Company_Number_3 = *ZERO;

// DTL.Name = CON.*ALL
DTL.Name = *ALL;

ENDIF;

ENDDO;

//?Validate From Date
CASE;

// IF DTL.USR From Date is not equal zero
IF DTL.USR_From_Date <> *ZERO;

EXECUTE FUNCTION(RTV Calendar           RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1102049;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.USR_From_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.Calendar not found
 PGM.*Return_code = 'USR0018';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Validate From Date
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Date entered is not found in the Calendar file'
ERROR(USR0567);
MSGPARM(DTL.USR_From_Date);

ENDIF;

//?Validate Through Date
CASE;

// IF DTL.USR Through Date is not equal zero
IF DTL.USR_Through_Date <> *ZERO;

EXECUTE FUNCTION(RTV Calendar           RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1102049;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.USR_Through_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.Calendar not found
 PGM.*Return_code = 'USR0018';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Validate Through Date
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Date entered is not found in the Calendar file'
ERROR(USR0567);
MSGPARM(DTL.USR_Through_Date);

ENDIF;

//?If from date gt through date, error message
CASE;

// IF DTL.USR From Date GT DTL.USR Through Date
IF DTL.USR_From_Date > DTL.USR_Through_Date;

// Send error message - 'From date exceeds to date.  Please re-enter.'
ERROR(USR0319);
MSGPARM(DTL.USR_From_Date);

ENDIF;

//?Validate customer if entered
CASE;

// IF DTL.USR Customer Number  CD7 is Entered
IF DTL.USR_Customer_Number_CD7 <> *ZERO;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(DTL.USR_Customer_Number_CD7);
PARAMETER(WRK.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Customer is not found.'
ERROR(USR0525);
MSGPARM(DTL.USR_Customer_Number_CD7);

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Customer Name = WRK.Customer Name
DTL.Customer_Name = WRK.Customer_Name;

ENDIF;

ENDIF;

//?** Validate Adj Type, if entered                      E009707
DO;

//?Default company to 1st Co on the screen, else default to Guymon
CASE;

// IF DTL.Company Number CDE is not equal to zero
IF DTL.Company_Number_CDE <> *ZERO;

// LCL.Company Number = DTL.Company Number CDE
LCL.Company_Number = DTL.Company_Number_CDE;

//?Default company to 1st Co on the screen, else default to Guymon
// IF DTL.USR Company Number 2 is not equal to zero
IF DTL.USR_Company_Number_2 <> *ZERO;

// LCL.Company Number = DTL.USR Company Number 2
LCL.Company_Number = DTL.USR_Company_Number_2;

//?Default company to 1st Co on the screen, else default to Guymon
// IF DTL.USR Company Number 3 is not equal to zero
IF DTL.USR_Company_Number_3 <> *ZERO;

// LCL.Company Number = DTL.USR Company Number 3
LCL.Company_Number = DTL.USR_Company_Number_3;

//?Default company to 1st Co on the screen, else default to Guymon
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Company Number = CND.Guymon
LCL.Company_Number = 360;

ENDIF;

//?Adjustment Type 1
CASE;

// IF DTL.USR Adjustment Type 1 is Entered
IF DTL.USR_Adjustment_Type_1 <> *BLANK;

EXECUTE FUNCTION(RTV A/R Adjustment TypeRT) TYPE(RTVOBJ) FILE(PDJ3CPP)          AC2122193;
PARAMETER(LCL.Company_Number);
PARAMETER(DTL.USR_Adjustment_Type_1);
PARAMETER(LCL.Adjustment_Description);
PARAMETER(LCL.Effect_on_Account);
PARAMETER(LCL.G_L_ID_Code_JDE);
PARAMETER(LCL.Adjustment_Limit_Amount);
PARAMETER(LCL.Cash_Adj);
PARAMETER(LCL.User_Enter_G_L_Status);
PARAMETER(LCL.System_Control);
PARAMETER(LCL.EDI_Status_1);
PARAMETER(LCL.EDI_Status_2);
PARAMETER(LCL.EDI_Status_3);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?* Error if excluded or mistyped adjustment type
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Adjustment Type is invalid for this operation.'
ERROR(USR2263);
MSGPARM(DTL.USR_Adjustment_Type_1);

ENDIF;

ENDIF;

//?Adjustment Type 2
CASE;

// IF DTL.USR Adjustment Type 2 is Entered
IF DTL.USR_Adjustment_Type_2 <> *BLANK;

EXECUTE FUNCTION(RTV A/R Adjustment TypeRT) TYPE(RTVOBJ) FILE(PDJ3CPP)          AC2122193;
PARAMETER(LCL.Company_Number);
PARAMETER(DTL.USR_Adjustment_Type_2);
PARAMETER(LCL.Adjustment_Description);
PARAMETER(NLL.Effect_on_Account);
PARAMETER(NLL.G_L_ID_Code_JDE);
PARAMETER(NLL.Adjustment_Limit_Amount);
PARAMETER(NLL.Cash_Adj);
PARAMETER(NLL.User_Enter_G_L_Status);
PARAMETER(NLL.System_Control);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?* Error if excluded or mistyped adjustment type
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Adjustment Type is invalid for this operation.'
ERROR(USR2263);
MSGPARM(DTL.USR_Adjustment_Type_2);

ENDIF;

ENDIF;

//?Adjustment Type 3
CASE;

// IF DTL.USR Adjustment Type 3 is Entered
IF DTL.USR_Adjustment_Type_3 <> *BLANK;

EXECUTE FUNCTION(RTV A/R Adjustment TypeRT) TYPE(RTVOBJ) FILE(PDJ3CPP)          AC2122193;
PARAMETER(LCL.Company_Number);
PARAMETER(DTL.USR_Adjustment_Type_3);
PARAMETER(NLL.Adjustment_Description);
PARAMETER(NLL.Effect_on_Account);
PARAMETER(NLL.G_L_ID_Code_JDE);
PARAMETER(NLL.Adjustment_Limit_Amount);
PARAMETER(NLL.Cash_Adj);
PARAMETER(NLL.User_Enter_G_L_Status);
PARAMETER(NLL.System_Control);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?* Error if excluded or mistyped adjustment type
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Adjustment Type is invalid for this operation.'
ERROR(USR2263);
MSGPARM(DTL.USR_Adjustment_Type_3);

ENDIF;

ENDIF;

//?Adjustment Type 4
CASE;

// IF DTL.USR Adjustment Type 4 is Entered
IF DTL.USR_Adjustment_Type_4 <> *BLANK;

EXECUTE FUNCTION(RTV A/R Adjustment TypeRT) TYPE(RTVOBJ) FILE(PDJ3CPP)          AC2122193;
PARAMETER(LCL.Company_Number);
PARAMETER(DTL.USR_Adjustment_Type_4);
PARAMETER(NLL.Adjustment_Description);
PARAMETER(NLL.Effect_on_Account);
PARAMETER(NLL.G_L_ID_Code_JDE);
PARAMETER(NLL.Adjustment_Limit_Amount);
PARAMETER(NLL.Cash_Adj);
PARAMETER(NLL.User_Enter_G_L_Status);
PARAMETER(NLL.System_Control);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?* Error if excluded or mistyped adjustment type
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Adjustment Type is invalid for this operation.'
ERROR(USR2263);
MSGPARM(DTL.USR_Adjustment_Type_4);

ENDIF;

ENDIF;

//?Adjustment Type 5
CASE;

// IF DTL.USR Adjustment Type 5 is Entered
IF DTL.USR_Adjustment_Type_5 <> *BLANK;

EXECUTE FUNCTION(RTV A/R Adjustment TypeRT) TYPE(RTVOBJ) FILE(PDJ3CPP)          AC2122193;
PARAMETER(LCL.Company_Number);
PARAMETER(DTL.USR_Adjustment_Type_5);
PARAMETER(NLL.Adjustment_Description);
PARAMETER(NLL.Effect_on_Account);
PARAMETER(NLL.G_L_ID_Code_JDE);
PARAMETER(NLL.Adjustment_Limit_Amount);
PARAMETER(NLL.Cash_Adj);
PARAMETER(NLL.User_Enter_G_L_Status);
PARAMETER(NLL.System_Control);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?* Error if excluded or mistyped adjustment type
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Adjustment Type is invalid for this operation.'
ERROR(USR2263);
MSGPARM(DTL.USR_Adjustment_Type_5);

ENDIF;

ENDIF;

//?Adjustment Type 6
CASE;

// IF DTL.USR Adjustment Type 6 is Entered
IF DTL.USR_Adjustment_Type_6 <> *BLANK;

EXECUTE FUNCTION(RTV A/R Adjustment TypeRT) TYPE(RTVOBJ) FILE(PDJ3CPP)          AC2122193;
PARAMETER(LCL.Company_Number);
PARAMETER(DTL.USR_Adjustment_Type_6);
PARAMETER(NLL.Adjustment_Description);
PARAMETER(NLL.Effect_on_Account);
PARAMETER(NLL.G_L_ID_Code_JDE);
PARAMETER(NLL.Adjustment_Limit_Amount);
PARAMETER(NLL.Cash_Adj);
PARAMETER(NLL.User_Enter_G_L_Status);
PARAMETER(NLL.System_Control);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?* Error if excluded or mistyped adjustment type
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Adjustment Type is invalid for this operation.'
ERROR(USR2263);
MSGPARM(DTL.USR_Adjustment_Type_6);

ENDIF;

ENDIF;

//?Adjustment Type 7
CASE;

// IF DTL.USR Adjustment Type 7 is Entered
IF DTL.USR_Adjustment_Type_7 <> *BLANK;

EXECUTE FUNCTION(RTV A/R Adjustment TypeRT) TYPE(RTVOBJ) FILE(PDJ3CPP)          AC2122193;
PARAMETER(LCL.Company_Number);
PARAMETER(DTL.USR_Adjustment_Type_7);
PARAMETER(NLL.Adjustment_Description);
PARAMETER(NLL.Effect_on_Account);
PARAMETER(NLL.G_L_ID_Code_JDE);
PARAMETER(NLL.Adjustment_Limit_Amount);
PARAMETER(NLL.Cash_Adj);
PARAMETER(NLL.User_Enter_G_L_Status);
PARAMETER(NLL.System_Control);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?* Error if excluded or mistyped adjustment type
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Adjustment Type is invalid for this operation.'
ERROR(USR2263);
MSGPARM(DTL.USR_Adjustment_Type_7);

ENDIF;

ENDIF;

//?Adjustment Type 8
CASE;

// IF DTL.USR Adjustment Type 8 is Entered
IF DTL.USR_Adjustment_Type_8 <> *BLANK;

EXECUTE FUNCTION(RTV A/R Adjustment TypeRT) TYPE(RTVOBJ) FILE(PDJ3CPP)          AC2122193;
PARAMETER(LCL.Company_Number);
PARAMETER(DTL.USR_Adjustment_Type_8);
PARAMETER(NLL.Adjustment_Description);
PARAMETER(NLL.Effect_on_Account);
PARAMETER(NLL.G_L_ID_Code_JDE);
PARAMETER(NLL.Adjustment_Limit_Amount);
PARAMETER(NLL.Cash_Adj);
PARAMETER(NLL.User_Enter_G_L_Status);
PARAMETER(NLL.System_Control);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?* Error if excluded or mistyped adjustment type
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Adjustment Type is invalid for this operation.'
ERROR(USR2263);
MSGPARM(DTL.USR_Adjustment_Type_8);

ENDIF;

ENDIF;

//?Adjustment Type 9
CASE;

// IF DTL.USR Adjustment Type 9 is Entered
IF DTL.USR_Adjustment_Type_9 <> *BLANK;

EXECUTE FUNCTION(RTV A/R Adjustment TypeRT) TYPE(RTVOBJ) FILE(PDJ3CPP)          AC2122193;
PARAMETER(LCL.Company_Number);
PARAMETER(DTL.USR_Adjustment_Type_9);
PARAMETER(NLL.Adjustment_Description);
PARAMETER(NLL.Effect_on_Account);
PARAMETER(NLL.G_L_ID_Code_JDE);
PARAMETER(NLL.Adjustment_Limit_Amount);
PARAMETER(NLL.Cash_Adj);
PARAMETER(NLL.User_Enter_G_L_Status);
PARAMETER(NLL.System_Control);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?* Error if excluded or mistyped adjustment type
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Adjustment Type is invalid for this operation.'
ERROR(USR2263);
MSGPARM(DTL.USR_Adjustment_Type_9);

ENDIF;

ENDIF;

//?Adjustment Type 10
CASE;

// IF DTL.USR Adjustment Type 10 is Entered
IF DTL.USR_Adjustment_Type_10 <> *BLANK;

EXECUTE FUNCTION(RTV A/R Adjustment TypeRT) TYPE(RTVOBJ) FILE(PDJ3CPP)          AC2122193;
PARAMETER(LCL.Company_Number);
PARAMETER(DTL.USR_Adjustment_Type_10);
PARAMETER(NLL.Adjustment_Description);
PARAMETER(NLL.Effect_on_Account);
PARAMETER(NLL.G_L_ID_Code_JDE);
PARAMETER(NLL.Adjustment_Limit_Amount);
PARAMETER(NLL.Cash_Adj);
PARAMETER(NLL.User_Enter_G_L_Status);
PARAMETER(NLL.System_Control);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?* Error if excluded or mistyped adjustment type
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Adjustment Type is invalid for this operation.'
ERROR(USR2263);
MSGPARM(DTL.USR_Adjustment_Type_10);

ENDIF;

ENDIF;

ENDDO;

//?USER: User defined action

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Number of Copies = CND.One
PAR.PRT_Number_of_Copies = 1;

// PAR.PRT Hold Output Sts = CND.*YES
PAR.PRT_Hold_Output_Sts = *YES;

// PAR.PRT Save Output Sts = CND.*NO
PAR.PRT_Save_Output_Sts = *NO;

// PAR.PRT Description = CON.A/R WRITE-OFF REPORT
PAR.PRT_Description = 'A/R WRITE-OFF REPORT';

// PAR.PRT Printer Device = PAR.Default Printer
PAR.PRT_Printer_Device = PAR.Default_Printer;

// PAR.PRT Number of Copies = CND.One
PAR.PRT_Number_of_Copies = 1;

//?** Pass for 1 or all companies, or for multiple selection E009707
CASE;

// IF DTL.Company Number CDE is Equal to zero
IF DTL.Company_Number_CDE = *ZERO;

//?** Pass "A" to the print program so it selects all companies
// PAR.Report Type USR = CND.Select All Companies
PAR.Report_Type_USR = 'A';

//?** Pass for 1 or all companies, or for multiple selection E009707
// IF DTL.USR Company Number 2 is greater than zero
IF DTL.USR_Company_Number_2 > *ZERO;

//?** Pass "M" to the print program so selects MULTI cmpnies   E009707
// PAR.Report Type USR = CND.Multiple Companies
PAR.Report_Type_USR = 'M';

//?** Pass for 1 or all companies, or for multiple selection E009707
// IF *OTHERWISE
IF *OTHERWISE;

//?** Pass "C" to the print program so selects 1 company
// PAR.Report Type USR = CND.Select by Customer
PAR.Report_Type_USR = 'C';

ENDIF;

//?Only prompt for printer file instr if not email       e009707
CASE;

// IF DTL.Report Type is Print Report
IF DTL.Report_Type = 'P';

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER(PAR.PRT_Description);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);
PARAMETER(*MISSING);
PARAMETER(1);

ENDIF;

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.System Value Numeric = PAR.PRT Number of Copies
PAR.System_Value_Numeric = PAR.PRT_Number_of_Copies;

MOVE *ALL (To: PAR From: DTL);

//?Submit job for Print
// PAR.Company Number Pass   USR = DTL.Company Number CDE
PAR.Company_Number_Pass_USR = DTL.Company_Number_CDE;

// PAR.Company Number Pass2  USR = DTL.USR Company Number 2
PAR.Company_Number_Pass2_USR = DTL.USR_Company_Number_2;

// PAR.Company Number Pass3  USR = DTL.USR Company Number 3
PAR.Company_Number_Pass3_USR = DTL.USR_Company_Number_3;

// PAR.Date 1          PASS  USR = DTL.USR From Date
PAR.Date_1_PASS_USR = DTL.USR_From_Date;

// PAR.Date 2          PASS  USR = DTL.USR Through Date
PAR.Date_2_PASS_USR = DTL.USR_Through_Date;

//?Customer number is not being passed here, I don't know why
// PAR.Customer Number Pass  USR = DTL.USR Customer Number  CD7
PAR.Customer_Number_Pass_USR = DTL.USR_Customer_Number_CD7;

// Call program CLP Bld WF/Prt Rpt     CL.
CALL PROGRAM(CLP Bld WF/Prt Rpt     CL) ('PNLQUPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(PAR.PRT_Description);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Customer_Number_Pass_USR);
PARAMETER(PAR.Date_1_PASS_USR);
PARAMETER(PAR.Date_2_PASS_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(PAR.Report_Type_USR);
PARAMETER(DTL.Customer_Name);
PARAMETER(DTL.USR_Adjustment_Type_1);
PARAMETER(DTL.USR_Adjustment_Type_2);
PARAMETER(DTL.USR_Adjustment_Type_3);
PARAMETER(DTL.USR_Adjustment_Type_4);
PARAMETER(DTL.USR_Adjustment_Type_5);
PARAMETER(DTL.USR_Adjustment_Type_6);
PARAMETER(DTL.USR_Adjustment_Type_7);
PARAMETER(DTL.USR_Adjustment_Type_8);
PARAMETER(DTL.USR_Adjustment_Type_9);
PARAMETER(DTL.USR_Adjustment_Type_10);
PARAMETER(PAR.Company_Number_Pass2_USR);
PARAMETER(PAR.Company_Number_Pass3_USR);
PARAMETER(DTL.Invoice_Suffix);
PARAMETER(DTL.Invoice_Suffix_2);
PARAMETER(DTL.Invoice_Suffix_3);
PARAMETER(DTL.Invoice_Suffix_4);
PARAMETER(DTL.Invoice_Suffix_5);
PARAMETER(DTL.Invoice_Memo_Suffix);
PARAMETER(DTL.Report_Type);
PARAMETER(DTL.Email_Address);

ENDIF;

// Send information message - 'The report has been submitted.'
MESSAGE(USR2720 *INFO);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

