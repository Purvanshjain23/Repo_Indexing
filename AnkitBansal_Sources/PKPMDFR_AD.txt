// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKPMDFR
// ?Date: 14.08.2025 Time: 02:50:06
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//?                      length from 5 to 7.
ENDDO;

// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


//?USER: Initialize subfile control

EXECUTE FUNCTION(Name Producer DRV) TYPE(DRVFLD)                                AB1110026;
PARAMETER(CTL.Name_Producer_DRV);
PARAMETER(CTL.PD_Producer_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.Name_Producer_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Name Producer Loc DRV) TYPE(DRVFLD)                            AB1110027;
PARAMETER(CTL.Name_Producer_Loc_DRV);
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PL_Location_Code);
 PARAMETER(PAR.Name_Producer_Loc_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Initialize subfile record from DBF record

EXECUTE FUNCTION(RTV Chk Loss for ERR  RT) TYPE(RTVOBJ) FILE(PKB6CPP)           AB1136268;
PARAMETER(DB1.LTN_Company_Number);
PARAMETER(DB1.LTN_Kill_Date);
PARAMETER(DB1.LTN_Tattoo_Number);
PARAMETER(DB1.BOH_Buy_Order_Number);
PARAMETER(DB1.BOL_Load_Number);
PARAMETER(DB1.LTN_Record_Number);
PARAMETER('L');
PARAMETER(RCD.Error_Type_1_Usr);
PARAMETER(RCD.Error_Type_2_Usr);
PARAMETER(RCD.Error_Type_3_Usr);
PARAMETER(RCD.Error_Type_4_Usr);
PARAMETER(RCD.Error_Type_5_Usr);
PARAMETER(RCD.Error_Type_Found);
{
 //?USER: Initialize routine

 // PAR.Error Type 1 Usr = CND.No
 PAR.Error_Type_1_Usr = 'N';

 // PAR.Error Type 2 Usr = CND.No
 PAR.Error_Type_2_Usr = 'N';

 // PAR.Error Type 3 Usr = CND.No
 PAR.Error_Type_3_Usr = 'N';

 // PAR.Error Type 4 Usr = CND.No
 PAR.Error_Type_4_Usr = 'N';

 // PAR.Error Type Found = CND.No
 PAR.Error_Type_Found = 'N';

 //?USER: Process Data record

 //?Check for Type of Error to Send back Flag
 CASE;

 // IF DB1.KV Error Code is Loss Weight Error
 IF DB1.KV_Error_Code = 'WGT';

 // PAR.Error Type 1 Usr = CND.Critical Error
 PAR.Error_Type_1_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 //?Check for Type of Error to Send back Flag
 // IF DB1.KV Error Code is Loss Extent Error
 IF DB1.KV_Error_Code = 'EXT';

 // PAR.Error Type 2 Usr = CND.Critical Error
 PAR.Error_Type_2_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 //?Check for Type of Error to Send back Flag
 // IF DB1.KV Error Code is Loss Reason Error
 IF DB1.KV_Error_Code = 'RSN';

 // PAR.Error Type 3 Usr = CND.Critical Error
 PAR.Error_Type_3_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 //?Check for Type of Error to Send back Flag
 // IF DB1.KV Error Code is Loss Type Error
 IF DB1.KV_Error_Code = 'LST';

 // PAR.Error Type 4 Usr = CND.Critical Error
 PAR.Error_Type_4_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 //?Check for Type of Error to Send back Flag
 // IF DB1.KV Error Code is Loss Trim Location
 IF DB1.KV_Error_Code = 'LOC';

 // PAR.Error Type 5 Usr = CND.Critical Error
 PAR.Error_Type_5_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 ENDIF;

}


//?CALC: Subfile control function fields

EXECUTE FUNCTION(Name Producer DRV) TYPE(DRVFLD)                                AB1110026;
PARAMETER(CTL.Name_Producer_DRV);
PARAMETER(CTL.PD_Producer_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.Name_Producer_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Name Producer Loc DRV) TYPE(DRVFLD)                            AB1110027;
PARAMETER(CTL.Name_Producer_Loc_DRV);
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PL_Location_Code);
 PARAMETER(PAR.Name_Producer_Loc_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Process subfile record (Pre-confirm)

//?Check for subfsel only in certain conditions
CASE;

// IF RCD.LTN Error Sts is Balance
IF RCD.LTN_Error_Sts = 'B';

CASE;

// IF RCD.*SFLSEL is Edit
IF RCD.*SFLSEL = '2'/'2';

// Send error message - 'Record is in Balance, User is not allowed to change record'
ERROR(PRK0290);
MSGPARM(RCD.*SFLSEL);

QUIT;

ENDIF;

ENDIF;

CASE;

// IF RCD.*SFLSEL is Display Error
IF RCD.*SFLSEL = '5'/'5';

// Call program Dsp Error             DF.
CALL PROGRAM(Dsp Error             DF) ('PKEUDFR');
PARAMETER(RCD.LTN_Company_Number);
PARAMETER(RCD.LTN_Kill_Date);
PARAMETER(RCD.LTN_Tattoo_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.LTN_Record_Number);
PARAMETER('L');

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF RCD.*SFLSEL is Edit
IF RCD.*SFLSEL = '2'/'2';

// Call program Zzz Loss Trans        E1.
CALL PROGRAM(Zzz Loss Trans        E1) ('PKVNE1R');
PARAMETER(RCD.LTN_Company_Number);
PARAMETER(RCD.LTN_Kill_Date);
PARAMETER(RCD.LTN_Record_Number);
PARAMETER(PAR.Oms_System_Value_Alpha);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

// IF RCD.*SFLSEL is *Option 7 request
IF RCD.*SFLSEL = '7'/'7';

//?Override Error
CASE;

// IF RCD.LTN Error Sts is Error
IF RCD.LTN_Error_Sts = 'E';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'No Error To Override, select another option'
ERROR(PRK0407);

QUIT;

ENDIF;

// IF RCD.*SFLSEL is *option 9 request
IF RCD.*SFLSEL = '9'/'9';

//?Remove Override Error
// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Defer_confirm = 'N';

ENDIF;

//?USER: Process subfile record (Post-confirm)

// WRK.Re-Cal Totals/Avg Usr = CND.No
WRK.Re_Cal_Totals_Avg_Usr = 'N';

CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

EXECUTE FUNCTION(Chg Loss Transaction  CH) TYPE(CHGOBJ) FILE(PKBSCPP)           AB1102906;
PARAMETER(RCD.LTN_Company_Number);
PARAMETER(RCD.LTN_Kill_Date);
PARAMETER(RCD.LTN_Record_Number);
PARAMETER(RCD.LTN_Tattoo_Number);
PARAMETER(RCD.LTN_Shift);
PARAMETER(RCD.LTN_Wgt);
PARAMETER(RCD.LTN_Extent);
PARAMETER(RCD.LTN_Trim_Location);
PARAMETER(RCD.LTN_Error_Sts);
PARAMETER(RCD.LTN_Record_Created_Status);
PARAMETER(RCD.LTN_User_Error_Override);
PARAMETER(*MISSING);
PARAMETER(RCD.LT_Type_Code);
PARAMETER(RCD.LR_Reason_Code);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
PARAMETER('D');
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
PARAMETER(RCD.RU_Date);
PARAMETER(RCD.RU_Time);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

 //?USER: Processing after Data update

 EXECUTE FUNCTION(Upd Head Condemn      RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1227599;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Head Condemned    RT) TYPE(RTVOBJ) FILE(PKBSCPP)           AB1227600;
  PARAMETER(02);
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(PAR.TH_Head_Condemned);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.TH Head Condemned = PAR.TH Head Condemned + CON.1
   PAR.TH_Head_Condemned = PAR.TH_Head_Condemned + 1;

  }

  EXECUTE FUNCTION(Chg Head Condemned    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1227604;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(PAR.TH_Head_Condemned);
  PARAMETER('E');
  {
   //?USER: Processing after Data update

   EXECUTE FUNCTION(Upd Head Condemned    RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1227617;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(DB1.TH_Head_Condemned);
   {
    //?USER: Process Data record

    // LCL.Net Head Usr = DB1.TD Pen Head - DB1.TD Yard Dead
    LCL.Net_Head_Usr = DB1.TD_Pen_Head - DB1.TD_Yard_Dead;

    // Call program Rtv Stress Pens Only  XF.
    CALL PROGRAM(Rtv Stress Pens Only  XF) ('PLPJXFR');
    PARAMETER(DB1.Pen_Company_Number);
    PARAMETER(DB1.Pen_Number);
    PARAMETER(LCL.Stress_Market_Type);

    //?Stress pen is now defined at the pen ext instead of ST1
    CASE;

    // IF LCL.Stress/Market Type is Stress
    IF LCL.Stress_Market_Type = 'S';

    // IF LCL.Net Head Usr is *Zeros
    IF LCL.Net_Head_Usr = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(Upd Head Condemned    RT) TYPE(RTVOBJ) FILE(PKDYCPP)           AB1227618;
    PARAMETER(DB1.BOH_Company_Number);
    PARAMETER(DB1.BOH_Buy_Order_Number);
    PARAMETER(DB1.BOL_Load_Number);
    PARAMETER(DB1.TH_Tattoo_Number);
    PARAMETER(DB1.TH_Kill_Date);
    PARAMETER(DB1.TD_Sequence_Number);
    PARAMETER(PAR.TH_Head_Condemned);
    {
     //?USER: Processing if Data record not found

     EXECUTE FUNCTION(Crt Tattoo Detail Ext  CR) TYPE(CRTOBJ) FILE(PKDYCPP)          AB1196901;
     PARAMETER(PAR.BOH_Company_Number);
     PARAMETER(PAR.BOH_Buy_Order_Number);
     PARAMETER(PAR.BOL_Load_Number);
     PARAMETER(PAR.TH_Tattoo_Number);
     PARAMETER(PAR.TH_Kill_Date);
     PARAMETER(PAR.TD_Sequence_Number);
     PARAMETER('N');
     PARAMETER(*ZERO);
     PARAMETER(PAR.TDE_Head_Condemned);
     PARAMETER(*ZERO);
     PARAMETER('N');
     PARAMETER('N');
     PARAMETER(PAR.RS_User_Changed);
     PARAMETER(PAR.RS_Date_Changed);
     PARAMETER(PAR.RS_Time_Changed);
     PARAMETER(PAR.RS_Record_Status);
     PARAMETER(PAR.RS_Job);
     PARAMETER(PAR.RS_Program);
     PARAMETER(PAR.RS_User_Added);
     PARAMETER(PAR.RS_Date_Added);
     PARAMETER(PAR.RS_Time_Added);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
      PARAMETER(DB1.RS_Record_Status);
      PARAMETER(DB1.RS_Job);
      PARAMETER(DB1.RS_Program);
      PARAMETER(DB1.RS_User_Added);
      PARAMETER(DB1.RS_Date_Added);
      PARAMETER(DB1.RS_Time_Added);
      {
       //?Execute internal function

       // PAR.RS Record Status = CND.Active
       PAR.RS_Record_Status = 'A';

       // PAR.RS User Added = JOB.*USER
       PAR.RS_User_Added = JOB.*USER;

       // PAR.RS Date Added = JOB.*Job date
       PAR.RS_Date_Added = JOB.*Job_date;

       // PAR.RS Time Added = JOB.*Job time
       PAR.RS_Time_Added = JOB.*Job_time;

       // PAR.RS Program = JOB.*PROGRAM
       PAR.RS_Program = JOB.*PROGRAM;

       // PAR.RS Job = JOB.*JOB
       PAR.RS_Job = JOB.*JOB;

      }

     }

     //?USER: Process Data record

     EXECUTE FUNCTION(Chg Head Condemned    CH) TYPE(CHGOBJ) FILE(PKDYCPP)           AB1227625;
     PARAMETER(DB1.BOH_Company_Number);
     PARAMETER(DB1.BOH_Buy_Order_Number);
     PARAMETER(DB1.BOL_Load_Number);
     PARAMETER(DB1.TH_Tattoo_Number);
     PARAMETER(DB1.TH_Kill_Date);
     PARAMETER(DB1.TD_Sequence_Number);
     PARAMETER(PAR.TDE_Head_Condemned);
    }

    QUIT;

    ENDIF;

   }

  }

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// WRK.Re-Cal Totals/Avg Usr = CND.Yes
WRK.Re_Cal_Totals_Avg_Usr = 'Y';

// IF RCD.*SFLSEL is *Option 7 request
IF RCD.*SFLSEL = '7'/'7';

//?User override
// RCD.LTN User Error Override = CND.Yes
RCD.LTN_User_Error_Override = 'Y';

EXECUTE FUNCTION(Chg Loss Transaction  CH) TYPE(CHGOBJ) FILE(PKBSCPP)           AB1102906;
PARAMETER(RCD.LTN_Company_Number);
PARAMETER(RCD.LTN_Kill_Date);
PARAMETER(RCD.LTN_Record_Number);
PARAMETER(RCD.LTN_Tattoo_Number);
PARAMETER(RCD.LTN_Shift);
PARAMETER(RCD.LTN_Wgt);
PARAMETER(RCD.LTN_Extent);
PARAMETER(RCD.LTN_Trim_Location);
PARAMETER(RCD.LTN_Error_Sts);
PARAMETER(RCD.LTN_Record_Created_Status);
PARAMETER(RCD.LTN_User_Error_Override);
PARAMETER(*MISSING);
PARAMETER(RCD.LT_Type_Code);
PARAMETER(RCD.LR_Reason_Code);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
PARAMETER(RCD.RU_Date);
PARAMETER(RCD.RU_Time);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

 //?USER: Processing after Data update

 EXECUTE FUNCTION(Upd Head Condemn      RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1227599;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Head Condemned    RT) TYPE(RTVOBJ) FILE(PKBSCPP)           AB1227600;
  PARAMETER(02);
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(PAR.TH_Head_Condemned);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.TH Head Condemned = PAR.TH Head Condemned + CON.1
   PAR.TH_Head_Condemned = PAR.TH_Head_Condemned + 1;

  }

  EXECUTE FUNCTION(Chg Head Condemned    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1227604;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(PAR.TH_Head_Condemned);
  PARAMETER('E');
  {
   //?USER: Processing after Data update

   EXECUTE FUNCTION(Upd Head Condemned    RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1227617;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(DB1.TH_Head_Condemned);
   {
    //?USER: Process Data record

    // LCL.Net Head Usr = DB1.TD Pen Head - DB1.TD Yard Dead
    LCL.Net_Head_Usr = DB1.TD_Pen_Head - DB1.TD_Yard_Dead;

    // Call program Rtv Stress Pens Only  XF.
    CALL PROGRAM(Rtv Stress Pens Only  XF) ('PLPJXFR');
    PARAMETER(DB1.Pen_Company_Number);
    PARAMETER(DB1.Pen_Number);
    PARAMETER(LCL.Stress_Market_Type);

    //?Stress pen is now defined at the pen ext instead of ST1
    CASE;

    // IF LCL.Stress/Market Type is Stress
    IF LCL.Stress_Market_Type = 'S';

    // IF LCL.Net Head Usr is *Zeros
    IF LCL.Net_Head_Usr = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(Upd Head Condemned    RT) TYPE(RTVOBJ) FILE(PKDYCPP)           AB1227618;
    PARAMETER(DB1.BOH_Company_Number);
    PARAMETER(DB1.BOH_Buy_Order_Number);
    PARAMETER(DB1.BOL_Load_Number);
    PARAMETER(DB1.TH_Tattoo_Number);
    PARAMETER(DB1.TH_Kill_Date);
    PARAMETER(DB1.TD_Sequence_Number);
    PARAMETER(PAR.TH_Head_Condemned);
    {
     //?USER: Processing if Data record not found

     EXECUTE FUNCTION(Crt Tattoo Detail Ext  CR) TYPE(CRTOBJ) FILE(PKDYCPP)          AB1196901;
     PARAMETER(PAR.BOH_Company_Number);
     PARAMETER(PAR.BOH_Buy_Order_Number);
     PARAMETER(PAR.BOL_Load_Number);
     PARAMETER(PAR.TH_Tattoo_Number);
     PARAMETER(PAR.TH_Kill_Date);
     PARAMETER(PAR.TD_Sequence_Number);
     PARAMETER('N');
     PARAMETER(*ZERO);
     PARAMETER(PAR.TDE_Head_Condemned);
     PARAMETER(*ZERO);
     PARAMETER('N');
     PARAMETER('N');
     PARAMETER(PAR.RS_User_Changed);
     PARAMETER(PAR.RS_Date_Changed);
     PARAMETER(PAR.RS_Time_Changed);
     PARAMETER(PAR.RS_Record_Status);
     PARAMETER(PAR.RS_Job);
     PARAMETER(PAR.RS_Program);
     PARAMETER(PAR.RS_User_Added);
     PARAMETER(PAR.RS_Date_Added);
     PARAMETER(PAR.RS_Time_Added);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
      PARAMETER(DB1.RS_Record_Status);
      PARAMETER(DB1.RS_Job);
      PARAMETER(DB1.RS_Program);
      PARAMETER(DB1.RS_User_Added);
      PARAMETER(DB1.RS_Date_Added);
      PARAMETER(DB1.RS_Time_Added);
      {
       //?Execute internal function

       // PAR.RS Record Status = CND.Active
       PAR.RS_Record_Status = 'A';

       // PAR.RS User Added = JOB.*USER
       PAR.RS_User_Added = JOB.*USER;

       // PAR.RS Date Added = JOB.*Job date
       PAR.RS_Date_Added = JOB.*Job_date;

       // PAR.RS Time Added = JOB.*Job time
       PAR.RS_Time_Added = JOB.*Job_time;

       // PAR.RS Program = JOB.*PROGRAM
       PAR.RS_Program = JOB.*PROGRAM;

       // PAR.RS Job = JOB.*JOB
       PAR.RS_Job = JOB.*JOB;

      }

     }

     //?USER: Process Data record

     EXECUTE FUNCTION(Chg Head Condemned    CH) TYPE(CHGOBJ) FILE(PKDYCPP)           AB1227625;
     PARAMETER(DB1.BOH_Company_Number);
     PARAMETER(DB1.BOH_Buy_Order_Number);
     PARAMETER(DB1.BOL_Load_Number);
     PARAMETER(DB1.TH_Tattoo_Number);
     PARAMETER(DB1.TH_Kill_Date);
     PARAMETER(DB1.TD_Sequence_Number);
     PARAMETER(PAR.TDE_Head_Condemned);
    }

    QUIT;

    ENDIF;

   }

  }

 }

}


EXECUTE FUNCTION(Dlt TTo Loss Rec ERR  RT) TYPE(RTVOBJ) FILE(PKB6CPP)           AB1144454;
PARAMETER(RCD.LTN_Company_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.LTN_Tattoo_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.LTN_Record_Number);
PARAMETER('L');
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Delete Kill Validation) TYPE(DLTOBJ) FILE(PKB6CPP)             AB1104583;
 PARAMETER(DB1.KV_Company_Number);
 PARAMETER(DB1.KV_Kill_Date);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.KV_Record_Number);
 PARAMETER(DB1.KV_Record_Type);
 PARAMETER(DB1.KV_Error_Code);
}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF RCD.*SFLSEL is *option 9 request
IF RCD.*SFLSEL = '9'/'9';

//?User remove override
// RCD.LTN User Error Override = WRK.Blank USR
RCD.LTN_User_Error_Override = WRK.Blank_USR;

EXECUTE FUNCTION(Chg Loss Transaction  CH) TYPE(CHGOBJ) FILE(PKBSCPP)           AB1102906;
PARAMETER(RCD.LTN_Company_Number);
PARAMETER(RCD.LTN_Kill_Date);
PARAMETER(RCD.LTN_Record_Number);
PARAMETER(RCD.LTN_Tattoo_Number);
PARAMETER(RCD.LTN_Shift);
PARAMETER(RCD.LTN_Wgt);
PARAMETER(RCD.LTN_Extent);
PARAMETER(RCD.LTN_Trim_Location);
PARAMETER(RCD.LTN_Error_Sts);
PARAMETER(RCD.LTN_Record_Created_Status);
PARAMETER(RCD.LTN_User_Error_Override);
PARAMETER(*MISSING);
PARAMETER(RCD.LT_Type_Code);
PARAMETER(RCD.LR_Reason_Code);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
PARAMETER(RCD.RU_Date);
PARAMETER(RCD.RU_Time);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

 //?USER: Processing after Data update

 EXECUTE FUNCTION(Upd Head Condemn      RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1227599;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Head Condemned    RT) TYPE(RTVOBJ) FILE(PKBSCPP)           AB1227600;
  PARAMETER(02);
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(PAR.TH_Head_Condemned);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.TH Head Condemned = PAR.TH Head Condemned + CON.1
   PAR.TH_Head_Condemned = PAR.TH_Head_Condemned + 1;

  }

  EXECUTE FUNCTION(Chg Head Condemned    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1227604;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(PAR.TH_Head_Condemned);
  PARAMETER('E');
  {
   //?USER: Processing after Data update

   EXECUTE FUNCTION(Upd Head Condemned    RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1227617;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(DB1.TH_Head_Condemned);
   {
    //?USER: Process Data record

    // LCL.Net Head Usr = DB1.TD Pen Head - DB1.TD Yard Dead
    LCL.Net_Head_Usr = DB1.TD_Pen_Head - DB1.TD_Yard_Dead;

    // Call program Rtv Stress Pens Only  XF.
    CALL PROGRAM(Rtv Stress Pens Only  XF) ('PLPJXFR');
    PARAMETER(DB1.Pen_Company_Number);
    PARAMETER(DB1.Pen_Number);
    PARAMETER(LCL.Stress_Market_Type);

    //?Stress pen is now defined at the pen ext instead of ST1
    CASE;

    // IF LCL.Stress/Market Type is Stress
    IF LCL.Stress_Market_Type = 'S';

    // IF LCL.Net Head Usr is *Zeros
    IF LCL.Net_Head_Usr = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(Upd Head Condemned    RT) TYPE(RTVOBJ) FILE(PKDYCPP)           AB1227618;
    PARAMETER(DB1.BOH_Company_Number);
    PARAMETER(DB1.BOH_Buy_Order_Number);
    PARAMETER(DB1.BOL_Load_Number);
    PARAMETER(DB1.TH_Tattoo_Number);
    PARAMETER(DB1.TH_Kill_Date);
    PARAMETER(DB1.TD_Sequence_Number);
    PARAMETER(PAR.TH_Head_Condemned);
    {
     //?USER: Processing if Data record not found

     EXECUTE FUNCTION(Crt Tattoo Detail Ext  CR) TYPE(CRTOBJ) FILE(PKDYCPP)          AB1196901;
     PARAMETER(PAR.BOH_Company_Number);
     PARAMETER(PAR.BOH_Buy_Order_Number);
     PARAMETER(PAR.BOL_Load_Number);
     PARAMETER(PAR.TH_Tattoo_Number);
     PARAMETER(PAR.TH_Kill_Date);
     PARAMETER(PAR.TD_Sequence_Number);
     PARAMETER('N');
     PARAMETER(*ZERO);
     PARAMETER(PAR.TDE_Head_Condemned);
     PARAMETER(*ZERO);
     PARAMETER('N');
     PARAMETER('N');
     PARAMETER(PAR.RS_User_Changed);
     PARAMETER(PAR.RS_Date_Changed);
     PARAMETER(PAR.RS_Time_Changed);
     PARAMETER(PAR.RS_Record_Status);
     PARAMETER(PAR.RS_Job);
     PARAMETER(PAR.RS_Program);
     PARAMETER(PAR.RS_User_Added);
     PARAMETER(PAR.RS_Date_Added);
     PARAMETER(PAR.RS_Time_Added);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
      PARAMETER(DB1.RS_Record_Status);
      PARAMETER(DB1.RS_Job);
      PARAMETER(DB1.RS_Program);
      PARAMETER(DB1.RS_User_Added);
      PARAMETER(DB1.RS_Date_Added);
      PARAMETER(DB1.RS_Time_Added);
      {
       //?Execute internal function

       // PAR.RS Record Status = CND.Active
       PAR.RS_Record_Status = 'A';

       // PAR.RS User Added = JOB.*USER
       PAR.RS_User_Added = JOB.*USER;

       // PAR.RS Date Added = JOB.*Job date
       PAR.RS_Date_Added = JOB.*Job_date;

       // PAR.RS Time Added = JOB.*Job time
       PAR.RS_Time_Added = JOB.*Job_time;

       // PAR.RS Program = JOB.*PROGRAM
       PAR.RS_Program = JOB.*PROGRAM;

       // PAR.RS Job = JOB.*JOB
       PAR.RS_Job = JOB.*JOB;

      }

     }

     //?USER: Process Data record

     EXECUTE FUNCTION(Chg Head Condemned    CH) TYPE(CHGOBJ) FILE(PKDYCPP)           AB1227625;
     PARAMETER(DB1.BOH_Company_Number);
     PARAMETER(DB1.BOH_Buy_Order_Number);
     PARAMETER(DB1.BOL_Load_Number);
     PARAMETER(DB1.TH_Tattoo_Number);
     PARAMETER(DB1.TH_Kill_Date);
     PARAMETER(DB1.TD_Sequence_Number);
     PARAMETER(PAR.TDE_Head_Condemned);
    }

    QUIT;

    ENDIF;

   }

  }

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// WRK.Re-Cal Totals/Avg Usr = CND.Yes
WRK.Re_Cal_Totals_Avg_Usr = 'Y';

ENDIF;

//?USER: Final processing (Post-confirm)

CASE;

// IF WRK.Re-Cal Totals/Avg Usr is Yes
IF WRK.Re_Cal_Totals_Avg_Usr = 'Y';

// WRK.Requested by User to Bal = CND.No
WRK.Requested_by_User_to_Bal = 'N';

// Call program Bal Tattoo W/Kill Edt  XF.
CALL PROGRAM(Bal Tattoo W/Kill Edt  XF) ('PKLHXFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER('E');
PARAMETER(CTL.TH_Schedule_Kill_Shift);
PARAMETER(WRK.Requested_by_User_to_Bal);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(*BLANK);

// WRK.Requested by User to Bal = CND.No
WRK.Requested_by_User_to_Bal = 'N';

// WRK.Re-Cal Totals/Avg Usr = CND.No
WRK.Re_Cal_Totals_Avg_Usr = 'N';

ENDIF;

//?USER: Exit program processing

// WRK.Requested by User to Bal = CND.No
WRK.Requested_by_User_to_Bal = 'N';

// Call program Bal Tattoo W/Kill Edt  XF.
CALL PROGRAM(Bal Tattoo W/Kill Edt  XF) ('PKLHXFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER('E');
PARAMETER(CTL.TH_Schedule_Kill_Shift);
PARAMETER(WRK.Requested_by_User_to_Bal);
PARAMETER(CTL.Oms_System_Value_Alpha);
PARAMETER(*BLANK);

// WRK.Requested by User to Bal = CND.No
WRK.Requested_by_User_to_Bal = 'N';

