// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PUYNE1R
// ?Date: 14.08.2025 Time: 03:51:43
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Center HdgRP4IF) TYPE(EXCINTFUN)                     AC2213822;
PARAMETER('C/S');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen HeadingsRP4 IF) TYPE(EXCINTFUN)                     AC2213823;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40RP4U.
  EXECUTE FUNCTION(CLC Center Txt Str 40RP4U) TYPE(EXCUSRSRC) ('PUYYUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   D UCT             S              1    DIM(40)                              CENTER TABLE
   C                   MOVEA     #IDSC4        UCT                            LOAD ARRAY
   C                   Z-ADD     40            UX                2 0          SET COUNTER
   C     UX            DOWGT     0
   C     UCT(UX)       IFEQ      ' '
   C                   SUB       1             UX
   C                   ELSE
   C                   Z-ADD     UX            UXH               2 0
   C                   Z-ADD     0             UX
   C                   END
   C                   END
   C     40            SUB       UXH           UX
   C     UX            DIV       2             UX
   C     UX            IFGT      0
   C                   MOVE      *BLANKS       UCT
   C                   MOVEA     #IDSC4        UCT(UX)
   C                   END
   C                   MOVEA     UCT           #ODE40                         LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co HeadRP4U.
  EXECUTE FUNCTION(MOV Appl Desc-Co HeadRP4U) TYPE(EXCUSRSRC) ('PUYZUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                   MOVE      #IDE40        ##CMP            40
  }

 }

}


//?Force program into add mode if no whse present
CASE;

// IF PAR.Warehouse Code is Warehouse Code Blank
IF PAR.Warehouse_Code = *BLANK;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

ENDIF;

//?USER: Initialize key screen

// KEY.Company Number = PAR.Company Number
KEY.Company_Number = PAR.Company_Number;

// KEY.Item Code = PAR.Item Code
KEY.Item_Code = PAR.Item_Code;

// KEY.Warehouse Code = PAR.Warehouse Code
KEY.Warehouse_Code = PAR.Warehouse_Code;

// KEY.Inventory Item Type = PAR.Inventory Item Type
KEY.Inventory_Item_Type = PAR.Inventory_Item_Type;

//?USER: Validate key screen

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Desc/Sts          RT) TYPE(RTVOBJ) FILE(CABZREP)           AC2009445;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Item_Code);
PARAMETER(KEY.Item_Description);
PARAMETER(NLL.Description_Line_Two);
PARAMETER(NLL.UOM_Primary);
PARAMETER(NLL.UOM_Second);
PARAMETER(NLL.UOM_Third);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Acct&Ship Co & Dsc RT) TYPE(RTVOBJ) FILE(CAADREP)          AC2184891;
PARAMETER(KEY.Warehouse_Code);
PARAMETER(KEY.USR_Warehouse_description);
PARAMETER(LCL.Shipping_Company);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If Accounting/Shipping Not Equal to Co Then Show Error.
CASE;

// IF LCL.Accounting Company EQ KEY.Company Number
IF LCL.Accounting_Company = KEY.Company_Number;

// OR LCL.Shipping Company EQ KEY.Company Number
OR LCL.Shipping_Company = KEY.Company_Number;

//?If Accounting/Shipping Not Equal to Co Then Show Error.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid Company/Warehouse combination.'
ERROR(USR5188);
MSGPARM(KEY.Warehouse_Code);
MSGPARM(KEY.Company_Number);

QUIT;

ENDIF;

//?S16592 DN 05/22/20-New COPACK Logic for ALL Companies.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Item Str Type     RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC2118069;
PARAMETER(KEY.Item_Code);
PARAMETER(LCL.Item_Structure_Type_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Item Structure Type Code is COPACK
IF LCL.Item_Structure_Type_Code = 900;

EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(LCL.Accounting_Company);
PARAMETER('COPACK');
PARAMETER(LCL.Allow_COPACK_Items_Whs_AC);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Allow to Assign COPACK if Yes Else Send Error Message.
CASE;

// IF LCL.Allow COPACK Items Whs AC is No
IF LCL.Allow_COPACK_Items_Whs_AC = 'N';

// Send error message - 'Not allowed to assign Copack Items to Company &1.'
ERROR(USR4897);
MSGPARM(LCL.Accounting_Company);

QUIT;

ENDIF;

ENDIF;

ENDIF;

// KEY.Inventory Item Type Dsc U = Condition name of KEY.Inventory Item Type
KEY.Inventory_Item_Type_Dsc_U = RTVCND(KEY.Inventory_Item_Type);

//?USER: Initialize detail screen (new record)

EXECUTE FUNCTION(Rtv Item desc/Vendor # RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1123545;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Item_Code);
PARAMETER(DTL.Item_Description);
PARAMETER(NLL.Vendor_Item_Default);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(KEY.Company_Number);
PARAMETER(DTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(KEY.Warehouse_Code);
PARAMETER(DTL.USR_Warehouse_description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(Rtv Item desc/Vendor # RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1123545;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Item_Description);
PARAMETER(NLL.Vendor_Item_Default);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.USR_Warehouse_description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


// DTL.Inventory Item Type Dsc U = Condition name of DTL.Inventory Item Type
DTL.Inventory_Item_Type_Dsc_U = RTVCND(DTL.Inventory_Item_Type);

//?CALC: Detail screen function fields

EXECUTE FUNCTION(Record Status Desc DRV) TYPE(DRVFLD)                           AC1880188;
PARAMETER(DTL.Record_Status_Desc_DRV);
PARAMETER(DTL.Record_Status);
{
 //?Calculate derived field

 // PAR.Record Status Desc DRV = Condition name of PAR.Record Status
 PAR.Record_Status_Desc_DRV = RTVCND(PAR.Record_Status);

}


EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Create DBF record

EXECUTE FUNCTION(Crt WIM Item Balance  CR) TYPE(CRTOBJ) FILE(PUCGCPP)           AC2209097;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Inventory_Item_Type);
PARAMETER(DTL.On_Hand_Weight_Summary);
PARAMETER(DTL.On_Hand_UOM1_Summary);
PARAMETER(DTL.In_Transit_Weight_Summary);
PARAMETER(DTL.In_Transit_UOM1_Summary);
PARAMETER(DTL.Qty_Available_to_Sell);
PARAMETER(DTL.On_Hold_Weight_Summary);
PARAMETER(DTL.On_Hold_UOM1_Summary);
PARAMETER(DTL.Available_Weight_Summary);
PARAMETER(DTL.Available_UOM1_Summary);
PARAMETER(DTL.Item_Structure_Class_Code);
PARAMETER(DTL.Item_Structure_Group_Code);
PARAMETER(DTL.Item_Structure_Type_Code);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Update_Date_Timestamp);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Crt Time Stamp DDL IF) TYPE(EXCINTFUN)                     AC2212929;
 PARAMETER(DB1.Create_Date_Timestamp);
 PARAMETER(DB1.Create_User_ID);
 PARAMETER(DB1.Create_Program_Name);
 PARAMETER(DB1.Update_User_Id);
 PARAMETER(DB1.Update_Program_Name);
 {
  //?Execute internal function

  //?*** Set CREATE Time Stamp Info.
  // PAR.Create Date Timestamp = JOB.*System timestamp
  PAR.Create_Date_Timestamp = JOB.*System_timestamp;

  // PAR.Create User ID = JOB.*USER
  PAR.Create_User_ID = JOB.*USER;

  // PAR.Create Program Name = JOB.*PROGRAM
  PAR.Create_Program_Name = JOB.*PROGRAM;

  //?*** Set CHANGE Time Stamp Info.
  //?Cannot set Update Date TS here, will error.
  // PAR.Update User Id = CON.*BLANK
  PAR.Update_User_Id = *BLANK;

  // PAR.Update Program Name = CON.*BLANK
  PAR.Update_Program_Name = *BLANK;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg WIM Item Balance  CH) TYPE(CHGOBJ) FILE(PUCGCPP)           AC2209098;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Inventory_Item_Type);
PARAMETER(DTL.On_Hand_Weight_Summary);
PARAMETER(DTL.On_Hand_UOM1_Summary);
PARAMETER(DTL.In_Transit_Weight_Summary);
PARAMETER(DTL.In_Transit_UOM1_Summary);
PARAMETER(DTL.Qty_Available_to_Sell);
PARAMETER(DTL.On_Hold_Weight_Summary);
PARAMETER(DTL.On_Hold_UOM1_Summary);
PARAMETER(DTL.Available_Weight_Summary);
PARAMETER(DTL.Available_UOM1_Summary);
PARAMETER(DTL.Item_Structure_Class_Code);
PARAMETER(DTL.Item_Structure_Group_Code);
PARAMETER(DTL.Item_Structure_Type_Code);
PARAMETER(DTL.Record_Status);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Time Stamp DDL IF) TYPE(EXCINTFUN)                     AC2212930;
 PARAMETER(DB1.Update_Date_Timestamp);
 PARAMETER(DB1.Update_User_Id);
 PARAMETER(DB1.Update_Program_Name);
 {
  //?Execute internal function

  //?*** Set CHANGE Time Stamp Info.
  // PAR.Update Date Timestamp = JOB.*System timestamp
  PAR.Update_Date_Timestamp = JOB.*System_timestamp;

  // PAR.Update User Id = JOB.*USER
  PAR.Update_User_Id = JOB.*USER;

  // PAR.Update Program Name = JOB.*PROGRAM
  PAR.Update_Program_Name = JOB.*PROGRAM;

 }

}


