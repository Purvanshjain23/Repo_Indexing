// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPK3E1R
// ?Date: 14.08.2025 Time: 03:41:00
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?*** Setup Security & Company Title ***
// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

// PAR.Load ID = CON.*ZERO
PAR.Load_ID = *ZERO;

//?** Default Claim Co# to security Co# if multi-co = No   2/22/06 LJB
CASE;

// IF PAR.Allow Multi-Company is no
IF PAR.Allow_Multi_Company = 'N';

// PAR.Claim Company Number = PAR.Company Number
PAR.Claim_Company_Number = PAR.Company_Number;

ENDIF;

ENDIF;

// WRK.Claim Company Number = PAR.Claim Company Number
WRK.Claim_Company_Number = PAR.Claim_Company_Number;

// WRK.Claim Order Number = PAR.Claim Order Number
WRK.Claim_Order_Number = PAR.Claim_Order_Number;

// WRK.One Time Selection = CND.NO
WRK.One_Time_Selection = 'N';

//?USER: Initialize key screen

CASE;

// IF PAR.Claim Number is Zero
IF PAR.Claim_Number = *ZERO;

// KEY.Claim Number = CON.1000
KEY.Claim_Number = 1000;

ENDIF;

//?USER: Initialize detail screen (new record)

// DTL.Product Inspection Avail = CND.No
DTL.Product_Inspection_Avail = 'N';

// DTL.Rep Inspection Required = CND.No
DTL.Rep_Inspection_Required = 'N';

// DTL.Resolve Claim by Date = JOB.*Job date + CON.10 *DAYS
DTL.Resolve_Claim_by_Date = DATEINCR(JOB.*Job_date 10 'DY' 1111111 'NONE' 'N' 1);

// DTL.Claim Entry Date = JOB.*Job date
DTL.Claim_Entry_Date = JOB.*Job_date;

// DTL.Claim Called in by Date = JOB.*Job date
DTL.Claim_Called_in_by_Date = JOB.*Job_date;

// DTL.Claim Entry Time = JOB.*Job time
DTL.Claim_Entry_Time = JOB.*Job_time;

// DTL.Claim Entry User = JOB.*USER
DTL.Claim_Entry_User = JOB.*USER;

// DTL.Claim Status = CND.New
DTL.Claim_Status = 'N';

//?** If multi-co# = No, fill in dtl co# & protect   2/22/2006 LJB
CASE;

// IF PAR.Allow Multi-Company is no
IF PAR.Allow_Multi_Company = 'N';

// DTL.Claim Company Number = PAR.Company Number
DTL.Claim_Company_Number = PAR.Company_Number;

ENDIF;

//?Get Load ID.
DO;

EXECUTE FUNCTION(RTV Claim Order Info   RT) TYPE(RTVOBJ) FILE(OMHSTPP)          AC1524891;
PARAMETER(DTL.Claim_Company_Number);
PARAMETER(DTL.Claim_Order_Number);
PARAMETER(DTL.Claim_Ship_to_Customer);
PARAMETER(DTL.Claim_Customer_Name);
PARAMETER(DTL.Customer_Purchase_Order_#);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(WRK.Unused_Parm_Date_USR);
PARAMETER(DTL.Invoice_Number);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(WRK.Unused_Parm_Date_USR);
PARAMETER(DTL.Load_ID);
PARAMETER(WRK.Unused_Parm_Text_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(PAR.Salesperson_to_Rvw_Claim);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// DTL.Load ID = PAR.Load ID
DTL.Load_ID = PAR.Load_ID;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Claim Order Info   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1525060;
PARAMETER(DTL.Claim_Company_Number);
PARAMETER(DTL.Claim_Order_Number);
PARAMETER(DTL.Claim_Ship_to_Customer);
PARAMETER(DTL.Claim_Customer_Name);
PARAMETER(DTL.Customer_Purchase_Order_#);
PARAMETER(WRK.Unused_Parm_Date_USR);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Invoice_Number);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(WRK.Unused_Parm_Date_USR);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(WRK.Unused_Parm_Text_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 EXECUTE FUNCTION(RTV Whse/Non Cancelled RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428700;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?C2748:  Changed RTV Warehouse Code RT to exclude Cancelled lines.
  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

  ENDIF;

 }

 EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(PAR.Salesperson_to_Rvw_Claim);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// DTL.Load ID = PAR.Load ID
DTL.Load_ID = PAR.Load_ID;

ENDIF;

ENDDO;

// DTL.@text 30 = CONCAT(CON.Invoice . . . . . . . . .,CON. . . . . .,CON.*ZERO)
DTL.@text_30 = 'Invoice . . . . . . . . .' + ' . . . . .' (0);

// WRK.One Time Selection = CND.Yes
WRK.One_Time_Selection = 'Y';

//?E3387 JJH 09/08/14 - Add ACR Shipping Method
EXECUTE FUNCTION(Rtv Shipping Method   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1848045;
PARAMETER(DTL.Claim_Company_Number);
PARAMETER(DTL.Claim_Order_Number);
PARAMETER(DTL.AC_Shipping_Method);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(ACR Shipping Method DRV) TYPE(DRVFLD)                          AC2098708;
PARAMETER(DTL.ACR_Shipping_Method_DRV);
PARAMETER(DTL.AC_Shipping_Method);
{
 //?Calculate derived field

 // PAR.ACR Shipping Method DRV = Condition name of PAR.ACR Shipping Method
 PAR.ACR_Shipping_Method_DRV = RTVCND(PAR.ACR_Shipping_Method);

}


//?USER: Initialize detail screen (existing record)

// DTL.Claim Status Desc     USR = Condition name of DTL.Claim Status
DTL.Claim_Status_Desc_USR = RTVCND(DTL.Claim_Status);

// DTL.@text 30 = CONCAT(CON.Invoice . . . . . . . . .,CON. . . . . .,CON.*ZERO)
DTL.@text_30 = 'Invoice . . . . . . . . .' + ' . . . . .' (0);

//?Get Load ID.
DO;

EXECUTE FUNCTION(RTV Claim Order Info   RT) TYPE(RTVOBJ) FILE(OMHSTPP)          AC1524891;
PARAMETER(DTL.Claim_Company_Number);
PARAMETER(DTL.Claim_Order_Number);
PARAMETER(DTL.Claim_Ship_to_Customer);
PARAMETER(DTL.Claim_Customer_Name);
PARAMETER(DTL.Customer_Purchase_Order_#);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(WRK.Unused_Parm_Date_USR);
PARAMETER(DTL.Invoice_Number);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(WRK.Unused_Parm_Date_USR);
PARAMETER(DTL.Load_ID);
PARAMETER(WRK.Unused_Parm_Text_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(PAR.Salesperson_to_Rvw_Claim);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// DTL.Load ID = PAR.Load ID
DTL.Load_ID = PAR.Load_ID;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Claim Order Info   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1525060;
PARAMETER(DTL.Claim_Company_Number);
PARAMETER(DTL.Claim_Order_Number);
PARAMETER(DTL.Claim_Ship_to_Customer);
PARAMETER(DTL.Claim_Customer_Name);
PARAMETER(DTL.Customer_Purchase_Order_#);
PARAMETER(WRK.Unused_Parm_Date_USR);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Invoice_Number);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(WRK.Unused_Parm_Date_USR);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(WRK.Unused_Parm_Text_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 EXECUTE FUNCTION(RTV Whse/Non Cancelled RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428700;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?C2748:  Changed RTV Warehouse Code RT to exclude Cancelled lines.
  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

  ENDIF;

 }

 EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(PAR.Salesperson_to_Rvw_Claim);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// DTL.Load ID = PAR.Load ID
DTL.Load_ID = PAR.Load_ID;

ENDIF;

ENDDO;

CASE;

// IF DB1.Actual Delivery Date is Zero
IF DB1.Actual_Delivery_Date = *ZERO;

//?Get Actual Delivery Date and validate that the order is valid
DO;

EXECUTE FUNCTION(RTV Req Dlvry Dt/ValOrRT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1741571;
PARAMETER(DTL.Claim_Company_Number);
PARAMETER(DTL.Claim_Order_Number);
PARAMETER(DTL.Actual_Delivery_Date);
PARAMETER(WRK.Unused_Parm_CD70_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CND);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


ENDDO;

// IF *OTHERWISE
IF *OTHERWISE;

//?Use work fields on Act Del Date and validate that the order is good
DO;

EXECUTE FUNCTION(RTV Req Dlvry Dt/ValOrRT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1741571;
PARAMETER(DTL.Claim_Company_Number);
PARAMETER(DTL.Claim_Order_Number);
PARAMETER(WRK.Unused_Parm_Date_USR);
PARAMETER(WRK.Unused_Parm_CD70_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CND);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


ENDDO;

ENDIF;

CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Order is not Found'
ERROR(USR3458);
MSGPARM(DTL.Claim_Company_Number);
MSGPARM(DTL.Claim_Order_Number);

ENDIF;

EXECUTE FUNCTION(RTV Salesperson NmeOnlyRT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1739999;
PARAMETER(DTL.Salesperson_to_Rvw_Claim);
PARAMETER(DTL.Description_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Salesperson not found.'
ERROR(USR0039);
MSGPARM(PAR.Salesperson_Code);

ENDIF;

//?E3387 JJH 09/08/14 - Add ACR Shipping Method
EXECUTE FUNCTION(Rtv Shipping Method   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1848045;
PARAMETER(DTL.Claim_Company_Number);
PARAMETER(DTL.Claim_Order_Number);
PARAMETER(DTL.AC_Shipping_Method);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(ACR Shipping Method DRV) TYPE(DRVFLD)                          AC2098708;
PARAMETER(DTL.ACR_Shipping_Method_DRV);
PARAMETER(DTL.AC_Shipping_Method);
{
 //?Calculate derived field

 // PAR.ACR Shipping Method DRV = Condition name of PAR.ACR Shipping Method
 PAR.ACR_Shipping_Method_DRV = RTVCND(PAR.ACR_Shipping_Method);

}


//?T10560 DN 05/18/17-Added FPR ID.
// DTL.FPR ID USR = DB1.FPR ID
DTL.FPR_ID_USR = DB1.FPR_ID;

//?USER: Process key screen request

RETURN;

//?USER: Validate detail screen fields

//?if no then we could be in add mode or changed mode
//?when the user selects the enter key and the create is performed
//?this status field will be updated with Y and later on usage
// WRK.Record was Added = CND.No
WRK.Record_was_Added = *BLANK;

//?F4=Select the order
CASE;

// IF DTL.*CMD key is CF04
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Claim Order Number
AND PGM.*Cursor_field = DTL.Claim_Order_Number;

// Call program SEL Order/Load Id/Invo SR.
CALL PROGRAM(SEL Order/Load Id/Invo SR) ('PBBHSRR');
PARAMETER(DTL.Claim_Company_Number);
PARAMETER(DTL.Claim_Order_Number);
PARAMETER(DTL.Customer_Purchase_Order_#);
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.AC_Shipping_Method);
PARAMETER(DTL.Invoice_Number);

ENDIF;

//?*******************************************************************
//?E4453 JJH 12/10/15 - Use Billing Activity Type 1=Invoice & 3=DM
EXECUTE FUNCTION(RTV Bill Type, Event   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1366339;
PARAMETER(DTL.Claim_Company_Number);
PARAMETER(DTL.Claim_Order_Number);
PARAMETER(NLL.Event_Code);
PARAMETER(LCL.Billing_Activity_Type);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Billing Activity Type is Invoice or Debit Memo
IF LCL.Billing_Activity_Type = '3'/'1';

//?Allow Claim to be assigned to Order
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Claim Order Number &1 is not Billing Activity Type - Invoice or DM.'
ERROR(USR4890);
MSGPARM(DTL.Claim_Order_Number);

ENDIF;

//?*******************************************************************
//?Verify the Order No and Co is on another claim ..One Time only
DO;

CASE;

// IF DTL.Claim Company Number NE WRK.Claim Company Number
IF DTL.Claim_Company_Number <> WRK.Claim_Company_Number;

// OR DTL.Claim Order Number NE WRK.Claim Order Number
OR DTL.Claim_Order_Number <> WRK.Claim_Order_Number;

// OR WRK.One Time Selection is Yes
OR WRK.One_Time_Selection = 'Y';

// WRK.One Time Selection = CND.NO
WRK.One_Time_Selection = 'N';

// LCL.Claim is Warning Err Usr = CND.blank
LCL.Claim_is_Warning_Err_Usr = *BLANK;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// Call program VAL Order# Not Found  XF.
CALL PROGRAM(VAL Order# Not Found  XF) ('PPOBXFR');
PARAMETER(DTL.Claim_Number);
PARAMETER(DTL.Claim_Company_Number);
PARAMETER(DTL.Claim_Order_Number);
PARAMETER(LCL.Claim_is_Warning_Err_Usr);
PARAMETER(PGM.*Return_code);

CASE;

// IF LCL.Claim is Warning Err Usr is yes
IF LCL.Claim_is_Warning_Err_Usr = 'Y';

// Send information message - 'Order is on another claim'
MESSAGE(USR3459 *INFO);

ENDIF;

// WRK.Claim Company Number = DTL.Claim Company Number
WRK.Claim_Company_Number = DTL.Claim_Company_Number;

// WRK.Claim Order Number = DTL.Claim Order Number
WRK.Claim_Order_Number = DTL.Claim_Order_Number;

ENDIF;

ENDDO;

CASE;

// IF DTL.Actual Delivery Date is Zero
IF DTL.Actual_Delivery_Date = *ZERO;

//?Get Actual Delivery Date and validate that the order is valid
DO;

EXECUTE FUNCTION(RTV Req Dlvry Dt/ValOrRT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1741571;
PARAMETER(DTL.Claim_Company_Number);
PARAMETER(DTL.Claim_Order_Number);
PARAMETER(DTL.Actual_Delivery_Date);
PARAMETER(WRK.Unused_Parm_CD70_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CND);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


ENDDO;

// IF *OTHERWISE
IF *OTHERWISE;

//?validate order number only.
DO;

EXECUTE FUNCTION(RTV Req Dlvry Dt/ValOrRT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1741571;
PARAMETER(DTL.Claim_Company_Number);
PARAMETER(DTL.Claim_Order_Number);
PARAMETER(WRK.Unused_Parm_Date_USR);
PARAMETER(WRK.Unused_Parm_CD70_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CND);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


ENDDO;

ENDIF;

CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Order is not Found'
ERROR(USR3458);
MSGPARM(DTL.Claim_Company_Number);
MSGPARM(DTL.Claim_Order_Number);

ENDIF;

CASE;

// IF DTL.Claim Company Number EQ PAR.Claim Company Number
IF DTL.Claim_Company_Number = PAR.Claim_Company_Number;

// AND DTL.Claim Order Number EQ PAR.Claim Order Number
AND DTL.Claim_Order_Number = PAR.Claim_Order_Number;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Claim Company Number = DTL.Claim Company Number
PAR.Claim_Company_Number = DTL.Claim_Company_Number;

// PAR.Claim Order Number = DTL.Claim Order Number
PAR.Claim_Order_Number = DTL.Claim_Order_Number;

//?Get Actual Delivery Date.
DO;

EXECUTE FUNCTION(RTV Requested Dlvry dt RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1506764;
PARAMETER(DTL.Claim_Company_Number);
PARAMETER(DTL.Claim_Order_Number);
PARAMETER(DTL.Actual_Delivery_Date);
PARAMETER(WRK.Unused_Parm_CD70_USR);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDDO;

ENDIF;

CASE;

// IF DTL.Claim Called in by is Customer
IF DTL.Claim_Called_in_by = 'C';

// IF DTL.Claim Called in by is Plant
IF DTL.Claim_Called_in_by = 'P';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Claim Called in by is *Blank
IF DTL.Claim_Called_in_by = *BLANK;

// Send error message - 'Claim Call in By Required'
ERROR(USR4482);
MSGPARM(DTL.Claim_Called_in_by);

ENDIF;

CASE;

// IF DTL.Claim Called in by Desc is Blank
IF DTL.Claim_Called_in_by_Desc = *BLANK;

// Send error message - 'Claim Called in by description is required.'
ERROR(USR3527);
MSGPARM(DTL.Claim_Called_in_by);

ENDIF;

ENDIF;

//?Get SALESPERSON AND LOAD ID
DO;

EXECUTE FUNCTION(RTV Claim Order Info   RT) TYPE(RTVOBJ) FILE(OMHSTPP)          AC1524891;
PARAMETER(DTL.Claim_Company_Number);
PARAMETER(DTL.Claim_Order_Number);
PARAMETER(DTL.Claim_Ship_to_Customer);
PARAMETER(DTL.Claim_Customer_Name);
PARAMETER(DTL.Customer_Purchase_Order_#);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(WRK.Unused_Parm_Date_USR);
PARAMETER(WRK.Unused_Parm_CD7_USR);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(WRK.Unused_Parm_Date_USR);
PARAMETER(DTL.Load_ID);
PARAMETER(LCL.Salesperson_to_Rvw_Claim);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(PAR.Salesperson_to_Rvw_Claim);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 QUIT;

}


CASE;

// IF LCL.Salesperson to Rvw Claim NE WRK.BLANK
IF LCL.Salesperson_to_Rvw_Claim <> WRK.BLANK;

// PAR.Load ID = DTL.Load ID
PAR.Load_ID = DTL.Load_ID;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Claim Order Info   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1525060;
PARAMETER(DTL.Claim_Company_Number);
PARAMETER(DTL.Claim_Order_Number);
PARAMETER(DTL.Claim_Ship_to_Customer);
PARAMETER(DTL.Claim_Customer_Name);
PARAMETER(DTL.Customer_Purchase_Order_#);
PARAMETER(WRK.Unused_Parm_Date_USR);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(DTL.Load_ID);
PARAMETER(WRK.Unused_Parm_CD7_USR);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(WRK.Unused_Parm_Date_USR);
PARAMETER(LCL.Salesperson_to_Rvw_Claim);
PARAMETER(WRK.Unused_Parm_Text_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 EXECUTE FUNCTION(RTV Whse/Non Cancelled RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428700;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?C2748:  Changed RTV Warehouse Code RT to exclude Cancelled lines.
  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

  ENDIF;

 }

 EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(PAR.Salesperson_to_Rvw_Claim);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// PAR.Load ID = DTL.Load ID
PAR.Load_ID = DTL.Load_ID;

ENDIF;

CASE;

// IF DTL.Salesperson to Rvw Claim is not entered
IF DTL.Salesperson_to_Rvw_Claim = *BLANK;

// DTL.Salesperson to Rvw Claim = LCL.Salesperson to Rvw Claim
DTL.Salesperson_to_Rvw_Claim = LCL.Salesperson_to_Rvw_Claim;

ENDIF;

EXECUTE FUNCTION(RTV Salesperson NmeOnlyRT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1739999;
PARAMETER(DTL.Salesperson_to_Rvw_Claim);
PARAMETER(DTL.Description_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Salesperson not found.'
ERROR(USR0039);
MSGPARM(PAR.Salesperson_Code);

ENDIF;

ENDDO;

//?F14=Display Dispatch/Tracer
CASE;

// IF DTL.*CMD key is CF14
IF DTL.*CMD_key = '14';

// Call program DSP Dispatch/Tracer    DF.
CALL PROGRAM(DSP Dispatch/Tracer    DF) ('PDT3DFR');
PARAMETER(PAR.Load_ID);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Validate "Product Avail Inspect" & "Desc".
CASE;

// IF DTL.Product Inspection Avail is Yes
IF DTL.Product_Inspection_Avail = 'Y';

// AND DTL.Product Inspection Desc is Blank
AND DTL.Product_Inspection_Desc = *BLANK;

// Send error message - 'Description is Required.'
ERROR(USR2753);
MSGPARM(DTL.Product_Inspection_Desc);

ENDIF;

//?Validate "Rep Req for Inspection" & "Desc".
CASE;

// IF DTL.Rep Inspection Required is Yes
IF DTL.Rep_Inspection_Required = 'Y';

// AND DTL.Rep Inspection Req Desc is Blank
AND DTL.Rep_Inspection_Req_Desc = *BLANK;

// Send error message - 'Description is Required.'
ERROR(USR2753);
MSGPARM(DTL.Rep_Inspection_Req_Desc);

ENDIF;

//?CALC: Detail screen function fields

CASE;

// IF DTL.Claim Called in by is Customer
IF DTL.Claim_Called_in_by = 'C';

// AND DTL.Claim Called in by Desc is Blank
AND DTL.Claim_Called_in_by_Desc = *BLANK;

// DTL.Claim Called in by Desc = DTL.Claim Contact Name
DTL.Claim_Called_in_by_Desc = DTL.Claim_Contact_Name;

// IF DTL.Claim Called in by is Plant
IF DTL.Claim_Called_in_by = 'P';

// AND DTL.Claim Called in by Desc is Blank
AND DTL.Claim_Called_in_by_Desc = *BLANK;

// DTL.Claim Called in by Desc = CND.Accounting
DTL.Claim_Called_in_by_Desc = 'Accounting';

ENDIF;

//?E3387 JJH 09/08/14 - Add ACR Shipping Method
EXECUTE FUNCTION(ACR Shipping Method DRV) TYPE(DRVFLD)                          AC2098708;
PARAMETER(DTL.ACR_Shipping_Method_DRV);
PARAMETER(DTL.AC_Shipping_Method);
{
 //?Calculate derived field

 // PAR.ACR Shipping Method DRV = Condition name of PAR.ACR Shipping Method
 PAR.ACR_Shipping_Method_DRV = RTVCND(PAR.ACR_Shipping_Method);

}


//?USER: Validate detail screen relations

//?T10560 DN 05/18/17-Update FPR ID.
// DTL.FPR ID = DTL.FPR ID USR
DTL.FPR_ID = DTL.FPR_ID_USR;

//?USER: Create DBF record

EXECUTE FUNCTION(CRT A/R Claim         IF) TYPE(EXCINTFUN) FILE(PDMKCPP)        AC1725774;
PARAMETER(PAR.Claim_Number);
PARAMETER(DTL.Salesperson_to_Rvw_Claim);
PARAMETER(DTL.Claim_Company_Number);
PARAMETER(DTL.Claim_Order_Number);
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Claim_Ship_to_Customer);
PARAMETER(DTL.Claim_Customer_Name);
PARAMETER(DTL.Claim_Type);
PARAMETER(DTL.Claim_Status);
PARAMETER(DTL.Claim_Amount);
PARAMETER(DTL.Claim_Net_Loss);
PARAMETER(DTL.Claim_Approved_Amount);
PARAMETER(DTL.Claim_Contact_Name);
PARAMETER(DTL.Product_Inspection_Avail);
PARAMETER(DTL.Product_Inspection_Desc);
PARAMETER(DTL.Rep_Inspection_Required);
PARAMETER(DTL.Rep_Inspection_Req_Desc);
PARAMETER(DTL.Lab_Fee_Involved);
PARAMETER(DTL.Lab_Fee);
PARAMETER(DTL.Driver_Name);
PARAMETER(DTL.Lab_Name);
PARAMETER(DTL.Resolve_Claim_by_Date);
PARAMETER(DTL.Actual_Delivery_Date);
PARAMETER(DTL.Claim_Called_in_by);
PARAMETER(DTL.Claim_Called_in_by_Desc);
PARAMETER(DTL.Claim_Called_in_by_Date);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
PARAMETER(JOB.*USER);
PARAMETER(DTL.Resale_Ship_to_Customer);
PARAMETER(DTL.Resale_Purchase_Order_Nbr);
PARAMETER(DTL.Sales_Approved_Date);
PARAMETER(DTL.Sales_Approved_Time);
PARAMETER(DTL.Sales_Approved_User);
PARAMETER(DTL.Approved_Denied_Date);
PARAMETER(DTL.Approved_Denied_Time);
PARAMETER(DTL.Approved_Denied_User);
PARAMETER(DTL.Memo_Created);
PARAMETER(DTL.Memo_Created_Date);
PARAMETER(DTL.Memo_Created_Time);
PARAMETER(DTL.Memo_Created_User);
PARAMETER(DTL.Claim_Resolution_Explan);
PARAMETER(DTL.Approved_Net_Loss);
PARAMETER(DTL.Total_Expense_Amount);
PARAMETER(DTL.Memo_Post_Date);
PARAMETER(DTL.Memo_Post_Time);
PARAMETER(DTL.TFS_Batch_Number);
PARAMETER('O');
PARAMETER(DTL.Avg_TF_Responsibility_Pct);
PARAMETER(DTL.Avg_SBF_ResponsibilityPct);
PARAMETER(DTL.STF_Responsibility_Pct);
PARAMETER(DTL.FPR_ID);
PARAMETER(DTL.AC_Unused_Value_2);
PARAMETER(DTL.AC_Unused_Value_3);
PARAMETER(DTL.AC_Unused_Value_4);
PARAMETER(DTL.Claim_Prod_Affect_Commsn);
PARAMETER(DTL.ARC_Unused_Status_1);
PARAMETER(DTL.ARC_Unused_Status_2);
PARAMETER(DTL.AC_Shipping_Method);
PARAMETER(DTL.AC_Full_Return_to_Plant);
PARAMETER(DTL.AC_Unused_Pct_1);
PARAMETER(DTL.AC_Unused_Pct_2);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
PARAMETER(DTL.Claim_Reference_#_USR);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV Next A/R Claim #   RT) TYPE(RTVOBJ) FILE(PDMKCPP)          AC1524774;
 PARAMETER(PAR.Claim_Number);
 {
  //?USER: Initialize routine

  //?*** Initialize all Parameters. ***
  // PAR.Claim Number = CON.*ZERO
  PAR.Claim_Number = *ZERO;

  // PAR.Claim Number Saved USR = CON.*ZERO
  PAR.Claim_Number_Saved_USR = *ZERO;

  // PAR.Claim Number Previous USR = CON.*ZERO
  PAR.Claim_Number_Previous_USR = *ZERO;

  // PAR.Claim Number Next USR = CON.*ZERO
  PAR.Claim_Number_Next_USR = *ZERO;

  // PAR.Number of Days = CON.*ZERO
  PAR.Number_of_Days = *ZERO;

  // PAR.Stop = CND.No
  PAR.Stop = 'N';

  //?USER: Processing if Data record not found

  // PAR.Claim Number = CON.8000
  PAR.Claim_Number = 8000;

  //?USER: Process Data record

  //?Save Last Claim Number in file.
  DO;

  CASE;

  // IF PAR.Claim Number Saved USR is Zero
  IF PAR.Claim_Number_Saved_USR = *ZERO;

  // PAR.Claim Number Saved USR = DB1.Claim Number
  PAR.Claim_Number_Saved_USR = DB1.Claim_Number;

  ENDIF;

  ENDDO;

  //?Reset output claim number by adding 1 to last used claim number.
  DO;

  // PAR.Claim Number = PAR.Claim Number Saved USR + CON.1
  PAR.Claim_Number = PAR.Claim_Number_Saved_USR + 1;

  ENDDO;

  // PAR.Number of Days = JOB.*Job date - DB1.Claim Entry Date *DAYS
  PAR.Number_of_Days = DURATION(JOB.*Job_date DB1.Claim_Entry_Date 'DY' 1111111 'NONE' 'N'
  1);

  CASE;

  // IF PAR.Number of Days is > 14
  IF PAR.Number_of_Days > 14;

  //?Stop the search.
  DO;

  // PAR.Stop = CND.Yes
  PAR.Stop = 'Y';

  ENDDO;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Look for missing claim numbers.
  DO;

  CASE;

  // IF PAR.Claim Number Previous USR is Not Zero
  IF PAR.Claim_Number_Previous_USR <> *ZERO;

  // PAR.Claim Number Next USR = PAR.Claim Number Previous USR - CON.1
  PAR.Claim_Number_Next_USR = PAR.Claim_Number_Previous_USR - 1;

  CASE;

  // IF PAR.Claim Number Next USR NE DB1.Claim Number
  IF PAR.Claim_Number_Next_USR <> DB1.Claim_Number;

  // PAR.Claim Number = PAR.Claim Number Next USR
  PAR.Claim_Number = PAR.Claim_Number_Next_USR;

  // PAR.Stop = CND.Yes
  PAR.Stop = 'Y';

  ENDIF;

  ENDIF;

  // PAR.Claim Number Previous USR = DB1.Claim Number
  PAR.Claim_Number_Previous_USR = DB1.Claim_Number;

  ENDDO;

  ENDIF;

  //?Stop RTVOBJ if Stop Flag is set to Yes.
  CASE;

  // IF PAR.Stop is Yes
  IF PAR.Stop = 'Y';

  QUIT;

  ENDIF;

 }

 EXECUTE FUNCTION(CRT A/R Claim          CR) TYPE(CRTOBJ) FILE(PDMKCPP)          AC1523473;
 PARAMETER(PAR.Claim_Number);
 PARAMETER(PAR.Salesperson_to_Rvw_Claim);
 PARAMETER(PAR.Claim_Company_Number);
 PARAMETER(PAR.Claim_Order_Number);
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Claim_Ship_to_Customer);
 PARAMETER(PAR.Claim_Customer_Name);
 PARAMETER(PAR.Claim_Type);
 PARAMETER(PAR.Claim_Status);
 PARAMETER(PAR.Claim_Amount);
 PARAMETER(PAR.Claim_Net_Loss);
 PARAMETER(PAR.Claim_Approved_Amount);
 PARAMETER(PAR.Claim_Contact_Name);
 PARAMETER(PAR.Product_Inspection_Avail);
 PARAMETER(PAR.Product_Inspection_Desc);
 PARAMETER(PAR.Rep_Inspection_Required);
 PARAMETER(PAR.Rep_Inspection_Req_Desc);
 PARAMETER(PAR.Lab_Fee_Involved);
 PARAMETER(PAR.Lab_Fee);
 PARAMETER(PAR.Driver_Name);
 PARAMETER(PAR.Lab_Name);
 PARAMETER(PAR.Resolve_Claim_by_Date);
 PARAMETER(PAR.Actual_Delivery_Date);
 PARAMETER(PAR.Claim_Called_in_by);
 PARAMETER(PAR.Claim_Called_in_by_Desc);
 PARAMETER(PAR.Claim_Called_in_by_Date);
 PARAMETER(PAR.Claim_Entry_Date);
 PARAMETER(PAR.Claim_Entry_Time);
 PARAMETER(PAR.Claim_Entry_User);
 PARAMETER(PAR.Resale_Ship_to_Customer);
 PARAMETER(PAR.Resale_Purchase_Order_Nbr);
 PARAMETER(PAR.Sales_Approved_Date);
 PARAMETER(PAR.Sales_Approved_Time);
 PARAMETER(PAR.Sales_Approved_User);
 PARAMETER(PAR.Approved_Denied_Date);
 PARAMETER(PAR.Approved_Denied_Time);
 PARAMETER(PAR.Approved_Denied_User);
 PARAMETER(PAR.Memo_Created);
 PARAMETER(PAR.Memo_Created_Date);
 PARAMETER(PAR.Memo_Created_Time);
 PARAMETER(PAR.Memo_Created_User);
 PARAMETER(PAR.Claim_Resolution_Explan);
 PARAMETER(PAR.Approved_Net_Loss);
 PARAMETER(PAR.Total_Expense_Amount);
 PARAMETER(PAR.Memo_Post_Date);
 PARAMETER(PAR.Memo_Post_Time);
 PARAMETER(PAR.TFS_Batch_Number);
 PARAMETER('O');
 PARAMETER(PAR.Avg_TF_Responsibility_Pct);
 PARAMETER(PAR.Avg_SBF_ResponsibilityPct);
 PARAMETER(PAR.STF_Responsibility_Pct);
 PARAMETER(PAR.FPR_ID);
 PARAMETER(PAR.AC_Unused_Value_2);
 PARAMETER(PAR.AC_Unused_Value_3);
 PARAMETER(PAR.AC_Unused_Value_4);
 PARAMETER(PAR.Claim_Prod_Affect_Commsn);
 PARAMETER(PAR.ARC_Unused_Status_1);
 PARAMETER(PAR.ARC_Unused_Status_2);
 PARAMETER(PAR.AC_Shipping_Method);
 PARAMETER(PAR.AC_Full_Return_to_Plant);
 PARAMETER(PAR.AC_Unused_Pct_1);
 PARAMETER(PAR.AC_Unused_Pct_2);
 {
  //?USER: Processing before Data update

  // DB1.TFS Process Status = CND.Open
  DB1.TFS_Process_Status = 'O';

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

 }

 // WRK.Claim Reference # USR = CON.90000000
 WRK.Claim_Reference_#_USR = 90000000;

 // PAR.Claim Reference # USR = WRK.Claim Reference # USR + PAR.Claim Number
 PAR.Claim_Reference_#_USR = WRK.Claim_Reference_#_USR + PAR.Claim_Number;

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG A/R Claim          CH) TYPE(CHGOBJ) FILE(PDMKCPP)          AC1523474;
PARAMETER(DTL.Claim_Number);
PARAMETER(DTL.Salesperson_to_Rvw_Claim);
PARAMETER(DTL.Claim_Company_Number);
PARAMETER(DTL.Claim_Order_Number);
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Claim_Ship_to_Customer);
PARAMETER(DTL.Claim_Customer_Name);
PARAMETER(DTL.Claim_Type);
PARAMETER(DTL.Claim_Status);
PARAMETER(DTL.Claim_Amount);
PARAMETER(DTL.Claim_Net_Loss);
PARAMETER(DTL.Claim_Approved_Amount);
PARAMETER(DTL.Claim_Contact_Name);
PARAMETER(DTL.Product_Inspection_Avail);
PARAMETER(DTL.Product_Inspection_Desc);
PARAMETER(DTL.Rep_Inspection_Required);
PARAMETER(DTL.Rep_Inspection_Req_Desc);
PARAMETER(DTL.Lab_Fee_Involved);
PARAMETER(DTL.Lab_Fee);
PARAMETER(DTL.Driver_Name);
PARAMETER(DTL.Lab_Name);
PARAMETER(DTL.Resolve_Claim_by_Date);
PARAMETER(DTL.Actual_Delivery_Date);
PARAMETER(DTL.Claim_Called_in_by);
PARAMETER(DTL.Claim_Called_in_by_Desc);
PARAMETER(DTL.Claim_Called_in_by_Date);
PARAMETER(DTL.Claim_Entry_Date);
PARAMETER(DTL.Claim_Entry_Time);
PARAMETER(DTL.Claim_Entry_User);
PARAMETER(DTL.Resale_Ship_to_Customer);
PARAMETER(DTL.Resale_Purchase_Order_Nbr);
PARAMETER(DTL.Sales_Approved_Date);
PARAMETER(DTL.Sales_Approved_Time);
PARAMETER(DTL.Sales_Approved_User);
PARAMETER(DTL.Approved_Denied_Date);
PARAMETER(DTL.Approved_Denied_Time);
PARAMETER(DTL.Approved_Denied_User);
PARAMETER(DTL.Memo_Created);
PARAMETER(DTL.Memo_Created_Date);
PARAMETER(DTL.Memo_Created_Time);
PARAMETER(DTL.Memo_Created_User);
PARAMETER(DTL.Claim_Resolution_Explan);
PARAMETER(DTL.Approved_Net_Loss);
PARAMETER(DTL.Total_Expense_Amount);
PARAMETER(DTL.Memo_Post_Date);
PARAMETER(DTL.Memo_Post_Time);
PARAMETER(DTL.TFS_Batch_Number);
PARAMETER(DTL.TFS_Process_Status);
PARAMETER(DTL.Avg_TF_Responsibility_Pct);
PARAMETER(DTL.Avg_SBF_ResponsibilityPct);
PARAMETER(DTL.STF_Responsibility_Pct);
PARAMETER(DTL.FPR_ID);
PARAMETER(DTL.AC_Unused_Value_2);
PARAMETER(DTL.AC_Unused_Value_3);
PARAMETER(DTL.AC_Unused_Value_4);
PARAMETER(DTL.Claim_Prod_Affect_Commsn);
PARAMETER(DTL.ARC_Unused_Status_1);
PARAMETER(DTL.ARC_Unused_Status_2);
PARAMETER(DTL.AC_Shipping_Method);
PARAMETER(DTL.AC_Full_Return_to_Plant);
PARAMETER(DTL.AC_Unused_Pct_1);
PARAMETER(DTL.AC_Unused_Pct_2);
{
 //?USER: Processing before Data update

 CASE;

 // IF PAR.Claim Amount is less than zero
 IF PAR.Claim_Amount < *ZERO;

 // DB1.Claim Type = CND.Credit Memo
 DB1.Claim_Type = 'CM';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // DB1.Claim Type = CND.Debit Memo
 DB1.Claim_Type = 'DM';

 ENDIF;

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

}


//?USER: Process command keys

//?F8=NEXT
CASE;

// IF DTL.*CMD key is SUBMIT/NEXT
IF DTL.*CMD_key = '08';

//?E3387 JJH 09/10/14 - Update Shipping Method in A/R Claim
EXECUTE FUNCTION(CHG Shipping Method   CH) TYPE(CHGOBJ) FILE(PDMKCPP)           AC2099169;
PARAMETER(DTL.Claim_Number);
PARAMETER(DTL.AC_Shipping_Method);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

}


CASE;

// IF PAR.Clm Program USR is Create Resale Only
IF PAR.Clm_Program_USR = 'CRO';

// PAR.Clm Program USR = CND.Work With Resale
PAR.Clm_Program_USR = 'WWR';

// IF PAR.Clm Program USR is Create Claim
IF PAR.Clm_Program_USR = 'CCL';

// PAR.Clm Program USR = CND.Get OrderProd/ClaimProd
PAR.Clm_Program_USR = 'GOP';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Clm Program USR = CND.Edit Claim Product
PAR.Clm_Program_USR = 'ECP';

ENDIF;

RETURN;

//?F8=NEXT
// IF DTL.*CMD key is BACK
IF DTL.*CMD_key = '07';

// PAR.Clm Program USR = CND.Exit
PAR.Clm_Program_USR = 'EXT';

RETURN;

ENDIF;

//?USER: Exit program processing

CASE;

// IF KEY.*CMD key is CF03
IF KEY.*CMD_key = '03';

// PAR.Clm Program USR = CND.Exit
PAR.Clm_Program_USR = 'EXT';

RETURN;

ENDIF;

