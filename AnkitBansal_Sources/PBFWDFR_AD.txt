// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBFWDFR
// ?Date: 14.08.2025 Time: 03:47:48
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize subfile control

CASE;

// IF CTL.MPR Identification Num EQ WRK.BLANK
IF CTL.MPR_Identification_Num = WRK.BLANK;

// AND CTL.Order Number is Equal to zeros
AND CTL.Order_Number = *ZERO;

CASE;

// IF WRK.Company Number is Guymon
IF WRK.Company_Number = 360;

// CTL.MPR Identification Num = CND.Guymon
CTL.MPR_Identification_Num = 13597;

// IF WRK.Company Number is St. Joseph
IF WRK.Company_Number = 960;

// CTL.MPR Identification Num = CND.Triumph
CTL.MPR_Identification_Num = 31965;

// IF WRK.Company Number is Seaboard Triumph Foods
IF WRK.Company_Number = 440;

// CTL.MPR Identification Num = CND.Seaboard Triumph
CTL.MPR_Identification_Num = 46071;

ENDIF;

// CTL.MPR Reporting Date = JOB.*Job date
CTL.MPR_Reporting_Date = JOB.*Job_date;

ENDIF;

// CTL.Condition Desc. 1  USR = Condition name of CTL.MPR Identification Num
CTL.Condition_Desc_1_USR = RTVCND(CTL.MPR_Identification_Num);

CASE;

// IF CTL.Order Number is Greater then zero
IF CTL.Order_Number > *ZERO;

// CTL.MPR Lot Identification = CVTVAR(CTL.Order Number)
CTL.MPR_Lot_Identification = CVTVAR(CTL.Order_Number);

EXECUTE FUNCTION(Rtv Orders Rpt Date   RT) TYPE(RTVOBJ) FILE(PBAOCPP)           AC2064395;
PARAMETER(CTL.MPR_Identification_Num);
PARAMETER(CTL.MPR_Reporting_Date);
PARAMETER(CTL.MPR_Reporting_Time);
PARAMETER(CTL.MPR_Lot_Identification);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// IF *OTHERWISE
IF *OTHERWISE;

// CTL.MPR Lot Identification = CND.not entered
CTL.MPR_Lot_Identification = *BLANK;

ENDIF;

//?USER: Initialize subfile record from DBF record

//?Sel Plant Id
CASE;

// IF RCD.MPR Identification Num NE CTL.MPR Identification Num
IF RCD.MPR_Identification_Num <> CTL.MPR_Identification_Num;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Sel Date
CASE;

// IF RCD.MPR Reporting Date NE CTL.MPR Reporting Date
IF RCD.MPR_Reporting_Date <> CTL.MPR_Reporting_Date;

// AND CTL.MPR Reporting Date GT WRK.ZERO
AND CTL.MPR_Reporting_Date > WRK.ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// LCL.Order Number Alpha = SUBSTRING(DB1.MPR Lot Identification,CON.1,CON.7)
LCL.Order_Number_Alpha = SUBSTRING(DB1.MPR_Lot_Identification:1:7);

// RCD.Order Number = CVTVAR(LCL.Order Number Alpha)
RCD.Order_Number = CVTVAR(LCL.Order_Number_Alpha);

CASE;

// IF RCD.MPR Identification Num is Guymon
IF RCD.MPR_Identification_Num = '13597';

// RCD.Company Number = CND.Guymon
RCD.Company_Number = 360;

// IF RCD.MPR Identification Num is Triumph
IF RCD.MPR_Identification_Num = '31965';

// RCD.Company Number = CND.St. Joseph
RCD.Company_Number = 960;

// IF RCD.MPR Identification Num is Seaboard Triumph
IF RCD.MPR_Identification_Num = '46071';

// RCD.Company Number = CND.Sioux City
RCD.Company_Number = 440;

ENDIF;

EXECUTE FUNCTION(RTV Company for Ord   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2074443;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Process subfile record (Pre-confirm)

//?5=Dsp Order Inq
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

// Call program DSP Ord Inquiry Detail DF.
CALL PROGRAM(DSP Ord Inquiry Detail DF) ('PDPZDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.Order_Sequence_Number);
PARAMETER(LCL.Order_Secondary_Line_Seq);
PARAMETER(PAR.Application_Code);

ENDIF;

//?6=Print Audit Log
CASE;

// IF RCD.*SFLSEL is *Print
IF RCD.*SFLSEL = '6'/'6';

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Print MPR Audit Log');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('OMS');
PARAMETER(*MISSING);
PARAMETER(1);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Prt Audit Data f/Ord  XF.
SBMJOB;
CALL PROGRAM(Prt Audit Data f/Ord  XF) ('PBF2XFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(RCD.MPR_Identification_Num);
PARAMETER(RCD.MPR_Reporting_Date);
PARAMETER(RCD.MPR_Reporting_Time);
PARAMETER(RCD.MPR_Lot_Identification);
SBMJOBOVR JOB(MPRAUDIT);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

ENDIF;

//?7=Dsp MPR Dtl
CASE;

// IF RCD.*SFLSEL is Option 7
IF RCD.*SFLSEL = '7'/'7';

// Call program Dsp MPR Wholesale Dtl DR.
CALL PROGRAM(Dsp MPR Wholesale Dtl DR) ('PBF8D1R');
PARAMETER(RCD.MPR_Identification_Num);
PARAMETER(RCD.MPR_Reporting_Date);
PARAMETER(RCD.MPR_Reporting_Time);
PARAMETER(RCD.MPR_Lot_Identification);
PARAMETER(RCD.MPR_Item_Code);

ENDIF;

//?USER: Process command keys

CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

// Call program Dsp MPR FOB Omaha Rt  DF.
CALL PROGRAM(Dsp MPR FOB Omaha Rt  DF) ('PBHCDFR');

ENDIF;

CASE;

// IF CTL.*CMD key is CF11
IF CTL.*CMD_key = '11';

// Call program DSP MPR Mls/Omaha Err DF.
CALL PROGRAM(DSP MPR Mls/Omaha Err DF) ('PBHDDFR');

ENDIF;

//?F21=email mpr audit per day
CASE;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

// Execute command - 'EXECUTE SQL SCRIPT'
EXECUTE COMMAND(USR4590);

ENDIF;

