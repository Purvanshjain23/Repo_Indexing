// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMF3XFR
// ?Date: 14.08.2025 Time: 03:43:01
// ?------------------------------------------------------------------------------------------------

//?Execute user function

// Call program Vry Trk Departure Val  XF.
CALL PROGRAM(Vry Trk Departure Val  XF) ('PMHOXFR');
PARAMETER(PAR.Company_Number);
PARAMETER('INVTRKDPTR');
PARAMETER(LCL.Truck_Departure_Valid_Usr);

// Call program Rtv Alpha Value       XF.
CALL PROGRAM(Rtv Alpha Value       XF) ('POMTXFR');
PARAMETER(PAR.Company_Number);
PARAMETER('INVBOLCOMP');
PARAMETER(LCL.BOL_Completed_Req_STS);

// Call program Vry Fees & Payments PrcXF.
CALL PROGRAM(Vry Fees & Payments PrcXF) ('PMHPXFR');
PARAMETER(PAR.Company_Number);
PARAMETER('FEEPAYPROC');
PARAMETER(LCL.Fees_Payments_Prc_Usr);

// PAR.Print Pre-Inv/Exception = WRK.BLANK
PAR.Print_Pre_Inv_Exception = WRK.BLANK;

// PAR.Update Exception Status = WRK.BLANK
PAR.Update_Exception_Status = WRK.BLANK;

// PAR.Load Status = WRK.BLANK
PAR.Load_Status = WRK.BLANK;

// PAR.USR Check Y/N Status = CND.blank
PAR.USR_Check_Y_N_Status = *BLANK;

//?** The usr actual ship date = asd entered on the screen
//?** Put DB1.ASD into the usr date shipped work field
// PAR.USR Date Shipped = PAR.Actual Shipped Date
PAR.USR_Date_Shipped = PAR.Actual_Shipped_Date;

// PAR.Order Status = CND.*Blank
PAR.Order_Status = *BLANK;

//?** Retrieve load status, departure date, & departure time
CASE;

// IF PAR.Load ID NE WRK.ZERO
IF PAR.Load_ID <> WRK.ZERO;

//?05/23/16 RMC E4119 remove live with tpm check
EXECUTE FUNCTION(RTV LdSts/DptDtTM/BOL RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1851987;
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Load_Status);
PARAMETER(PAR.BOL_Complete_Date);
PARAMETER(PAR.BOL_Complete_Time);
PARAMETER(PAR.Truck_Departure_Date);
PARAMETER(PAR.Truck_Departure_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?** Match load to passed in load id
CASE;

// IF PAR.Load ID USR NE WRK.ZERO
IF PAR.Load_ID_USR <> WRK.ZERO;

//?Select for print
CASE;

// IF PAR.Load ID EQ PAR.Load ID USR
IF PAR.Load_ID = PAR.Load_ID_USR;

//?Select for print
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.*Record selected = CND.*NO
PAR.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** Match order number to passed in order number
CASE;

// IF PAR.USR Order Number NE WRK.ZERO
IF PAR.USR_Order_Number <> WRK.ZERO;

//?Select for print
CASE;

// IF PAR.Order Number EQ PAR.USR Order Number
IF PAR.Order_Number = PAR.USR_Order_Number;

//?Select for print
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.*Record selected = CND.*NO
PAR.*Record_selected = 'N';

ENDIF;

ENDIF;

// LCL.Date Out = JOB.*Job date + CON.7 *DAYS
LCL.Date_Out = DATEINCR(JOB.*Job_date 7 'DY' 1111111 'NONE' 'N' 1);

//?** Match ship date to passed in ship date
CASE;

// IF PAR.USR Actual Shipped Date NE WRK.ZERO
IF PAR.USR_Actual_Shipped_Date <> WRK.ZERO;

//?Select for print
CASE;

// IF PAR.USR Date Shipped LE PAR.USR Actual Shipped Date
IF PAR.USR_Date_Shipped <= PAR.USR_Actual_Shipped_Date;

// OR PAR.USR Date Shipped GT LCL.Date Out
OR PAR.USR_Date_Shipped > LCL.Date_Out;

//?check for future date error too
//?Select for print
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.*Record selected = CND.*NO
PAR.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** Customer Type should be IC or all except IC
CASE;

// IF PAR.*Record selected is *YES
IF PAR.*Record_selected = 'Y';

EXECUTE FUNCTION(Rtv Co/Customer Type) TYPE(RTVOBJ) FILE(CAEOREP)               AC1758338;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(WRK.Type_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 // PAR.Type Code = CON.*BLANK
 PAR.Type_Code = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


//?** Only select if the customer is third party or inter-company
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// PAR.*Record selected = CND.*NO
PAR.*Record_selected = 'N';

//?** Only select if the customer is third party or inter-company
// IF PAR.Process Cust Types Usr is Inter-Co Customer's
IF PAR.Process_Cust_Types_Usr = 'IC';

//?** Match records for Inter-Company customers
CASE;

// IF WRK.Type Code is Inter Company
IF WRK.Type_Code = 'IC';

//?** Match records for Inter-Company customers
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.*Record selected = CND.*NO
PAR.*Record_selected = 'N';

ENDIF;

//?** Only select if the customer is third party or inter-company
// IF PAR.Process Cust Types Usr is 3rd Party Customer(s)
IF PAR.Process_Cust_Types_Usr = 'TP';

//?** Match records for Third Party customers
CASE;

// IF WRK.Type Code is 3rd Party Customer
IF WRK.Type_Code <> 'IC';

//?** Match records for Third Party customers
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.*Record selected = CND.*NO
PAR.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?** Check price status
CASE;

// IF PAR.*Record selected is *YES
IF PAR.*Record_selected = 'Y';

//?** Flag to print on exception report if there are errors
CASE;

// IF PAR.Price Status is Priced
IF PAR.Price_Status = 'P';

// AND PAR.Price Audit is Manually/Auto Price Audit
AND PAR.Price_Audit = 'A'/'M';

// AND PAR.Load ID EQ WRK.ZERO
AND ( PAR.Load_ID = WRK.ZERO;

// OR PAR.Load Status is Shipped
OR PAR.Load_Status = 'S' );

// PAR.Print Pre-Inv/Exception = CND.Print on Pre-Invoice Reg
PAR.Print_Pre_Inv_Exception = 'P';

//?** Flag to print on exception report if there are errors
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Print Pre-Inv/Exception = CND.Print on Exception
PAR.Print_Pre_Inv_Exception = 'E';

ENDIF;

ENDIF;

//?** If record has been selected check Billing Activity Type
CASE;

// IF PAR.*Record selected is *YES
IF PAR.*Record_selected = 'Y';

//?Billing Activity Type must equal to PAR
CASE;

// IF PAR.Billing Activity Type EQ PAR.USR Billing Activty Type
IF PAR.Billing_Activity_Type = PAR.USR_Billing_Activty_Type;

//?VAL:  Invoice or Memo
CASE;

// IF PAR.Billing Activity Type is Invoice
IF PAR.Billing_Activity_Type = '1';

//?** Records must be 'R' Confirmed and Event Code must be '04'
CASE;

// IF PAR.Header Status is Confirmed
IF PAR.Header_Status = 'R';

// AND PAR.Event Code is 04 Shipped
AND PAR.Event_Code = '04';

//?** Records must be 'R' Confirmed and Event Code must be '04'
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.*Record selected = CND.*NO
PAR.*Record_selected = 'N';

ENDIF;

//?VAL:  Invoice or Memo
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Header Status is Available
IF PAR.Header_Status = 'A';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.*Record selected = CND.*NO
PAR.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Billing Activity Type must equal to PAR
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.*Record selected = CND.*NO
PAR.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** Check Order Detail for errors
CASE;

// IF PAR.*Record selected is *YES
IF PAR.*Record_selected = 'Y';

// PAR.Projected Market Price = CON.*ZERO
PAR.Projected_Market_Price = *ZERO;

// PAR.Default Commod Mark basis = CON.*BLANK
PAR.Default_Commod_Mark_basis = *BLANK;

// PAR.Commodity Price Group = CON.*BLANK
PAR.Commodity_Price_Group = *BLANK;

//?R12926 DN 04/24/18-At Order level, get Absorbed Freight Rate from OH.
EXECUTE FUNCTION(Rtv Absorbed Frt Rate RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2149231;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Any Pricing Errors RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1405399;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Billing_Activity_Type);
PARAMETER(PAR.Update_Exception_Status);
PARAMETER(PAR.Manual_Prc_Err_Sts_USR);
PARAMETER(PAR.Projected_Market_Price);
PARAMETER(PAR.Average_Ship_Wgt_Err_USR);
PARAMETER(PAR.InterCo_Price_Err_USR);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Default_Commod_Mark_basis);
PARAMETER(PAR.Market_Overage);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(PAR.Price_Overage_Override);
PARAMETER(PAR.Item_Code_USR);
PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?assume that there will be no pricing errors
 // PAR.Update Exception Status = CND.no
 PAR.Update_Exception_Status = 'N';

 //?this amount is the tolerance for extension problems
 // PAR.USR Work Amount 1 = CON..02
 PAR.USR_Work_Amount_1 = .02;

 // PAR.Manual Prc Err Sts USR = CND.no
 PAR.Manual_Prc_Err_Sts_USR = 'N';

 // PAR.Average Ship Wgt Err USR = CND.no
 PAR.Average_Ship_Wgt_Err_USR = 'N';

 // PAR.InterCo UnPriced Err USR = CND.No
 PAR.InterCo_Price_Err_USR = 'N';

 // LCL.First Time Flag = CND.Yes
 LCL.First_Time_Flag = 'Y';

 // Call program Rtv Plant Co/Org      XF.
 CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Plant_Company_Sts);
 PARAMETER(LCL.Company_Organization);

 //?** 12/15/2005 LJB - Programming change made
 //?** No error if Avg Weight exception has been overridden by Sales
 //?USER: Process Data record

 //?7/31/00   Dont edit if Quantity Shipped Total is 0.
 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 // AND DB1.Quantity Shipped Total is not equal zero
 AND DB1.Quantity_Shipped_Total <> *ZERO;

 // PAR.USR Weight Confirmed = CON.*ZERO
 PAR.USR_Weight_Confirmed = *ZERO;

 // PAR.USR Differential = CON.*ZERO
 PAR.USR_Differential = *ZERO;

 //?R12926 DN 04/24/18-At Order level, use Absorbed Freight Rate from OH.
 EXECUTE FUNCTION(RTV AbsFrtRt/Type Cde  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1582615;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(PAR.Type_Code);
 PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Val Manual Price      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1581694;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.Description_Line_One);
 PARAMETER(LCL.Default_Commod_Mark_basis);
 PARAMETER(LCL.Market_Overage);
 PARAMETER(LCL.Standard_Overage_Underage);
 PARAMETER(LCL.Commodity_Price_Group);
 PARAMETER(LCL.Std_Weight_Head_Var_Ren);
 PARAMETER(LCL.Primal_Group_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Val:  Manual Price
 DO;

 //?Validate Manual Pricing
 CASE;

 // IF DB1.Price Method Code is Extended
 IF DB1.Price_Method_Code = 'EXT';

 //?Validate Manual Pricing
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Val Unit Price        IF) TYPE(EXCINTFUN)                      AC1576576;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Unit_Price);
 //?08/28/07 PKD Replaced with Clc OrdDtl Ext Amt    XF
 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.USR_Weight_Confirmed);
 PARAMETER(DB1.U_M_Base_Price);
 PARAMETER(DB1.Quantity_Shipped_Total);
 PARAMETER(DB1.Weight_Shipped_Total);
 PARAMETER(DB1.Unit_Price);

 // PAR.USR Differential = DB1.Extended Amount - PAR.USR Weight Confirmed
 PAR.USR_Differential = DB1.Extended_Amount - PAR.USR_Weight_Confirmed;

 //?Ensure that difference is positive
 CASE;

 // IF PAR.USR Differential LT WRK.ZERO
 IF PAR.USR_Differential < WRK.ZERO;

 // PAR.USR Differential = CON.*ZERO - PAR.USR Differential
 PAR.USR_Differential = *ZERO - PAR.USR_Differential;

 ENDIF;

 //?Set flag and exit if find a pricing error
 CASE;

 // IF PAR.USR Differential GT PAR.USR Work Amount 1
 IF PAR.USR_Differential > PAR.USR_Work_Amount_1;

 // PAR.Update Exception Status = CND.yes
 PAR.Update_Exception_Status = 'Y';

 // PAR.Price Overage Override = PAR.USR Differential
 PAR.Price_Overage_Override = PAR.USR_Differential;

 QUIT;

 ENDIF;

 CASE;

 // IF PAR.USR Billing Activty Type is Invoice
 IF PAR.USR_Billing_Activty_Type = '1';

 //?Price Method = Manual
 CASE;

 // IF DB1.Price Method Code is Manual
 IF DB1.Price_Method_Code = 'MAN';

 EXECUTE FUNCTION(Rtv Exc Man Prc Excep RT) TYPE(RTVOBJ) FILE(CABZREP)           AC2050219;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.Item_Exc_Man_Prc_Excp);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Primal Group Code is NE Samples or Cut Loss
 IF LCL.Primal_Group_Code <> 'UNID';

 // AND PAR.Type Code is 3rd Party Customer
 AND PAR.Type_Code <> 'IC';

 // AND DB1.U/M - Base Price is Not Cases
 AND DB1.U_M_Base_Price <> 'CS';

 // AND LCL.Item Exc Man Prc Excp is NE YES
 AND LCL.Item_Exc_Man_Prc_Excp <> 'YES';

 //?RMC 10/31/18 Removed par.type n= promo/samples - we want them to be priced
 //?   normally,  from above CASE stmt
 //?R12926 DN 04/24/18-At Order level, use Absorbed Freight Rate from OH.
 EXECUTE FUNCTION(VAL Manual Price Range IF) TYPE(EXCINTFUN)                     AC1414607;
 PARAMETER(DB1.Company_Number);
 PARAMETER(LCL.Default_Commod_Mark_basis);
 PARAMETER(DB1.Price_Overage_Override);
 PARAMETER(LCL.Commodity_Price_Group);
 PARAMETER(LCL.Projected_Market_Price);
 PARAMETER(LCL.Default_Commod_Mark_basis);
 PARAMETER(LCL.Market_Overage);
 PARAMETER(WRK.Error_Status_3);
 PARAMETER(LCL.Minimum_Price_USR);
 PARAMETER(LCL.Maximum_Price_USR);
 PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
 {
  //?Execute internal function

  //?*---------------------------------------------------------------*
  //?Documentation:
  //?This internal function will determine if a manual price entered
  //?on an order detail line is within the Manual Pricing Acceptance
  //?Percentage from the Company Control file. If it does not fall
  //?within the percentage range then the market price will be used.
  //?If no market price is found then it is a manual price error
  //?*---------------------------------------------------------------*
  // PAR.Projected Market Price = CON.*ZERO
  PAR.Projected_Market_Price = *ZERO;

  // PAR.Minimum Price   USR = CON.*ZERO
  PAR.Minimum_Price_USR = *ZERO;

  // PAR.Maximum Price  USR = CON.*ZERO
  PAR.Maximum_Price_USR = *ZERO;

  // PAR.Error Status  3 = CND.Yes
  PAR.Error_Status_3 = 'Y';

  EXECUTE FUNCTION(RTV Manual Price Accpt RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1414604;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Manual_Price_Accept_Prcnt);
  PARAMETER(PAR.CoPk_FdSrv_ManPrc_Acpt_PT);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Food Service and Co-Pack Items
  CASE;

  // IF PAR.Default Commod Mark basis is Food Service
  IF PAR.Default_Commod_Mark_basis = 'FSV';

  // OR PAR.Default Commod Mark basis is Co-Pack
  OR PAR.Default_Commod_Mark_basis = 'CPK';

  // PAR.Manual Price Accept Prcnt = PAR.CoPk/FdSrv ManPrc Acpt%
  PAR.Manual_Price_Accept_Prcnt = PAR.CoPk_FdSrv_ManPrc_Acpt_PT;

  ENDIF;

  EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
  PARAMETER(PAR.Commodity_Market_Code);
  PARAMETER(PAR.Commodity_Price_Group);
  PARAMETER(9999999);
  PARAMETER(PAR.Projected_Market_Price);
  PARAMETER(WRK.USR_Date_Priced);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.Commodity Market Price = DB1.Commodity Market Price
   PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

   // PAR.USR Date Priced = DB1.Market Price Date
   PAR.USR_Date_Priced = DB1.Market_Price_Date;

   QUIT;

  }

  // Projected Market Price
  PAR.Projected_Market_Price = ( PAR.Projected_Market_Price
  + PAR.Standard_Overage_Underage ) + ( PAR.Absorbed_Freight_Rate_CWT / 100 'H' );

  //?If a market price is found for co/cust market code default
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // Minimum price allowed
  PAR.Minimum_Price_USR = ( 1 - ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) )
  * PAR.Projected_Market_Price 'H';

  // Maximum price allowed
  PAR.Maximum_Price_USR = ( ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) + 1 )
  * PAR.Projected_Market_Price 'H';

  //?If the Price Override is within the range then error status is no
  CASE;

  // IF PAR.Price Overage Override GE PAR.Minimum Price   USR
  IF PAR.Price_Overage_Override >= PAR.Minimum_Price_USR;

  // AND PAR.Price Overage Override LE PAR.Maximum Price  USR
  AND PAR.Price_Overage_Override <= PAR.Maximum_Price_USR;

  // PAR.Error Status  3 = CND.No
  PAR.Error_Status_3 = 'N';

  ENDIF;

  //?If a market price is found for co/cust market code default
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?If no price for co/cust market code then use co/item market code
  EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
  PARAMETER(PAR.Default_Commod_Mark_basis);
  PARAMETER(PAR.Commodity_Price_Group);
  PARAMETER(9999999);
  PARAMETER(PAR.Projected_Market_Price);
  PARAMETER(WRK.USR_Date_Priced);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.Commodity Market Price = DB1.Commodity Market Price
   PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

   // PAR.USR Date Priced = DB1.Market Price Date
   PAR.USR_Date_Priced = DB1.Market_Price_Date;

   QUIT;

  }

  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // Minimum price allowed
  PAR.Minimum_Price_USR = ( PAR.Manual_Price_Accept_Prcnt / 100 'H' )
  * PAR.Projected_Market_Price 'H';

  // Maximum price allowed
  PAR.Maximum_Price_USR = ( ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) + 1 )
  * PAR.Projected_Market_Price 'H';

  //?If the Price Override is within the range then error status is no
  CASE;

  // IF PAR.Price Overage Override GE PAR.Minimum Price   USR
  IF PAR.Price_Overage_Override >= PAR.Minimum_Price_USR;

  // AND PAR.Price Overage Override LE PAR.Maximum Price  USR
  AND PAR.Price_Overage_Override <= PAR.Maximum_Price_USR;

  // PAR.Error Status  3 = CND.No
  PAR.Error_Status_3 = 'N';

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Projected Market Price = CON.*ZERO
  PAR.Projected_Market_Price = *ZERO;

  ENDIF;

  ENDIF;

 }

 //?ERROR = Y
 CASE;

 // IF WRK.Error Status  3 is Yes
 IF WRK.Error_Status_3 = 'Y';

 EXECUTE FUNCTION(Rtv Order Dtl Exc Val RT) TYPE(RTVOBJ) FILE(POA8REP)           AC1622600;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER('MP');
 PARAMETER(LCL.Initials_of_Salesperson);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?Check for Price Exception override by Sales       5/8/01
 CASE;

 // IF LCL.Initials of Salesperson is Not Entered
 IF LCL.Initials_of_Salesperson = *BLANK;

 //?First Time
 CASE;

 // IF LCL.First Time Flag is Yes
 IF LCL.First_Time_Flag = 'Y';

 // LCL.First Time Flag = CND.NO
 LCL.First_Time_Flag = 'N';

 // PAR.Item Code USR = DB1.Item Code
 PAR.Item_Code_USR = DB1.Item_Code;

 //?R12926 DN 04/24/18-Commented out. Use parm AFR passed in from OH.
 // PAR.Default Commod Mark basis = LCL.Default Commod Mark basis
 PAR.Default_Commod_Mark_basis = LCL.Default_Commod_Mark_basis;

 // PAR.Commodity Price Group = LCL.Commodity Price Group
 PAR.Commodity_Price_Group = LCL.Commodity_Price_Group;

 // PAR.Projected Market Price = LCL.Projected Market Price
 PAR.Projected_Market_Price = LCL.Projected_Market_Price;

 // PAR.Market Overage = LCL.Market Overage
 PAR.Market_Overage = LCL.Market_Overage;

 // PAR.Standard Overage/Underage = LCL.Standard Overage/Underage
 PAR.Standard_Overage_Underage = LCL.Standard_Overage_Underage;

 // PAR.Price Overage Override = DB1.Price Overage Override
 PAR.Price_Overage_Override = DB1.Price_Overage_Override;

 // Market Price only
 PAR.Projected_Market_Price = ( PAR.Projected_Market_Price - (
 PAR.Absorbed_Freight_Rate_CWT / 100 'H' ) ) - PAR.Market_Overage;

 ENDIF;

 // PAR.Manual Prc Err Sts USR = CND.yes
 PAR.Manual_Prc_Err_Sts_USR = 'Y';

 ENDIF;

 //?ERROR = Y
 // IF *OTHERWISE
 IF *OTHERWISE;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDDO;

 //?VAL: Average Shipped Weight       (min/max wt exceeded)
 CASE;

 // IF PAR.USR Billing Activty Type is Invoice
 IF PAR.USR_Billing_Activty_Type = '1';

 //?Validate weight
 CASE;

 // IF LCL.Primal Group Code is NE Samples or Cut Loss
 IF LCL.Primal_Group_Code <> 'UNID';

 // AND PAR.Type Code is Not Promotional/Samples
 AND PAR.Type_Code <> 'PS';

 // LCL.Weight Display 1 = DB1.Weight Shipped Total / DB1.Quantity Shipped Total *Rounded
 LCL.Weight_Display_1 = DB1.Weight_Shipped_Total / DB1.Quantity_Shipped_Total 'H';

 //?10/22/08 PKD Changed to add a tolerance to the Min/Max
 EXECUTE FUNCTION(Rtv Mn/Mx/Cls Pricing IF) TYPE(EXCINTFUN)                      AC1904646;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Catch_Weight_Status);
 PARAMETER(LCL.Minimum_Weight_Per_Case);
 PARAMETER(LCL.Maximum_Weight_Per_Case);
 PARAMETER(LCL.Item_Structure_Class_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Mn/Mx/Cls Pricing RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1681876;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Unit_Weight);
  PARAMETER(PAR.Catch_Weight_Status);
  PARAMETER(LCL.Minimum_Weight_Per_Case);
  PARAMETER(LCL.Maximum_Weight_Per_Case);
  PARAMETER(PAR.Item_Structure_Class_Code);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1510877;
  PARAMETER('AVGSHPWGT');
  PARAMETER(LCL.Percent_7_4_USR);
  {
   //?USER: Process Data record

   // PAR.System Value Numeric = DB1.System Value Numeric
   PAR.System_Value_Numeric = DB1.System_Value_Numeric;

   QUIT;

  }

  CASE;

  // IF LCL.Percent 7.4 USR is not entered
  IF LCL.Percent_7_4_USR = *ZERO;

  // LCL.Weight Adjust = CON.*ZERO
  LCL.Weight_Adjust = *ZERO;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Weight Adjust
  LCL.Weight_Adjust = LCL.Unit_Weight * ( LCL.Percent_7_4_USR / 100 'H' ) 'H';

  ENDIF;

  // PAR.Minimum Weight Per Case = LCL.Minimum Weight Per Case - LCL.Weight Adjust
  PAR.Minimum_Weight_Per_Case = LCL.Minimum_Weight_Per_Case - LCL.Weight_Adjust;

  // PAR.Maximum Weight Per Case = LCL.Maximum Weight Per Case + LCL.Weight Adjust
  PAR.Maximum_Weight_Per_Case = LCL.Maximum_Weight_Per_Case + LCL.Weight_Adjust;

 }

 //?08/29/05 PKD Only check on Catch Weight Items.
 //?Catch weight
 CASE;

 // IF PAR.Catch Weight Status is yes
 IF PAR.Catch_Weight_Status = 'Y';

 //?** 12/15/05 LJB - No error if Salesman overrides out of range weight
 //?1/02/04  Dont do if Pumped per kevin                 RMC
 CASE;

 // IF LCL.Item Structure Class Code is Not Pumped
 IF LCL.Item_Structure_Class_Code <> 900;

 CASE;

 // IF LCL.Weight Display 1 LT LCL.Minimum Weight Per Case
 IF LCL.Weight_Display_1 < LCL.Minimum_Weight_Per_Case;

 // OR LCL.Weight Display 1 GT LCL.Maximum Weight Per Case
 OR LCL.Weight_Display_1 > LCL.Maximum_Weight_Per_Case;

 //?** No error if Avg Weight exception has been overridden by Sales
 EXECUTE FUNCTION(Rtv Order Dtl Exc Val RT) TYPE(RTVOBJ) FILE(POA8REP)           AC1622600;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER('AW');
 PARAMETER(LCL.Initials_of_Salesperson);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?** Check for Average Weight Exception Override by Sales
 CASE;

 // IF LCL.Initials of Salesperson is Not Entered
 IF LCL.Initials_of_Salesperson = *BLANK;

 // PAR.Item Code = DB1.Item Code
 PAR.Item_Code = DB1.Item_Code;

 // PAR.Average Ship Wgt Err USR = CND.yes
 PAR.Average_Ship_Wgt_Err_USR = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?VAL:  Inter-Company
 CASE;

 // IF PAR.Type Code is Inter Company
 IF PAR.Type_Code = 'IC';

 CASE;

 // IF DB1.Price Overage Override is Equal zero
 IF DB1.Price_Overage_Override = *ZERO;

 // PAR.Item Code = DB1.Item Code
 PAR.Item_Code = DB1.Item_Code;

 // PAR.InterCo Price Err USR = CND.Yes
 PAR.InterCo_Price_Err_USR = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

}


//?** Extension errors found
CASE;

// IF PAR.Update Exception Status is yes
IF PAR.Update_Exception_Status = 'Y';

// PAR.Print Pre-Inv/Exception = CND.Print on Exception
PAR.Print_Pre_Inv_Exception = 'E';

ENDIF;

//?** Manual price is not within range
CASE;

// IF PAR.Manual Prc Err Sts USR is yes
IF PAR.Manual_Prc_Err_Sts_USR = 'Y';

// PAR.Print Pre-Inv/Exception = CND.Print on Exception
PAR.Print_Pre_Inv_Exception = 'E';

ENDIF;

//?** Average Ship Weight Error
CASE;

// IF PAR.Average Ship Wgt Err USR is yes
IF PAR.Average_Ship_Wgt_Err_USR = 'Y';

// PAR.Print Pre-Inv/Exception = CND.Print on Exception
PAR.Print_Pre_Inv_Exception = 'E';

ENDIF;

//?** InterCompany Price Error
CASE;

// IF PAR.InterCo Price Err USR is Yes
IF PAR.InterCo_Price_Err_USR = 'Y';

// PAR.Print Pre-Inv/Exception = CND.Print on Exception
PAR.Print_Pre_Inv_Exception = 'E';

ENDIF;

ENDIF;

CASE;

// IF PAR.Load ID NE WRK.ZERO
IF PAR.Load_ID <> WRK.ZERO;

EXECUTE FUNCTION(Rtv Bypass DDt Sts    RT) TYPE(RTVOBJ) FILE(CAEOREP)           AC2007943;
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(LCL.Bypass_DDt_Delay_w_Invcng);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?** Truck Departure validation - modify for bypass customers 12/2/2010
CASE;

// IF LCL.Truck Departure Valid Usr is No
IF LCL.Truck_Departure_Valid_Usr = 'N';

//?Do not validate departure date or time information at all
//?** Truck Departure validation - modify for bypass customers 12/2/2010
// IF LCL.Bypass DDt/Delay w/Invcng is Yes
IF LCL.Bypass_DDt_Delay_w_Invcng = 'Y';

//?Do not validate departure date or time information at all
//?** Truck Departure validation - modify for bypass customers 12/2/2010
// IF *OTHERWISE
IF *OTHERWISE;

//?** Validate departure date and time against job date
CASE;

// IF PAR.Billing Activity Type is Invoice
IF ( PAR.Billing_Activity_Type = '1';

// OR PAR.Billing Activity Type is Warehouse Transfer
OR PAR.Billing_Activity_Type = '4' );

//?RMC 02/12/07 Added check for Billing Actv=4 for Whse Txfr
//?RMC 06/14/07 del check for AND Prepaid from preceding CASE stmt
//?** Error if departure date or time are not entered
CASE;

// IF PAR.Truck Departure Date is not entered
IF PAR.Truck_Departure_Date = *ZERO;

// OR PAR.Truck Departure Time is Not Entered
OR PAR.Truck_Departure_Time = *ZERO;

// PAR.Departure Sts USR = CND.Truck has not departed
PAR.Departure_Sts_USR = 'N';

// PAR.Print Pre-Inv/Exception = CND.Print on Exception
PAR.Print_Pre_Inv_Exception = 'E';

//?** Error if departure date or time are not entered
// IF *OTHERWISE
IF *OTHERWISE;

//?** No error if depart date is before today (Job Date).
//?** Validation:  If departure date is today and the depart time
//?** is before 6am and the depart time is less that 4 hours ago
//?** then there is a departure time error.
//?** Test depart date for valid date and time
CASE;

// IF PAR.Truck Departure Date EQ JOB.*Job date
IF PAR.Truck_Departure_Date = JOB.*Job_date;

//?** Check the departure time if it is before 6AM
CASE;

// IF PAR.Truck Departure Time is LE 060000
IF PAR.Truck_Departure_Time <= 060000;

//?** Retrieve the appropriate delay time from Company Values file
EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
PARAMETER(PAR.Company_Number);
PARAMETER('INVDELAY');
PARAMETER(PAR.System_Value_Numeric);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Calculate the how long since the truck left in hours
// PAR.Hour 1 USR = PAR.Truck Departure Time *HOURS
PAR.Hour_1_USR = TIMEDTLS(PAR.Truck_Departure_Time 'HR');

// PAR.Hour 2 usr = JOB.*Job time *HOURS
PAR.Hour_2_usr = TIMEDTLS(JOB.*Job_time 'HR');

// PAR.Hour 3 USR = PAR.Hour 2 usr - PAR.Hour 1 USR
PAR.Hour_3_USR = PAR.Hour_2_usr - PAR.Hour_1_USR;

//?** If time is less than 4 hours - to early to invoice
CASE;

// IF PAR.Hour 3 USR LT PAR.System Value Numeric
IF PAR.Hour_3_USR < PAR.System_Value_Numeric;

// PAR.Departure Sts USR = CND.Departed < ?hrs ago
PAR.Departure_Sts_USR = 'T';

// PAR.Print Pre-Inv/Exception = CND.Print on Exception
PAR.Print_Pre_Inv_Exception = 'E';

ENDIF;

//?** Check the departure time if it is before 6AM
// IF *OTHERWISE
IF *OTHERWISE;

//?RMC added this otherwise so lds shipped today wont be invoiced.
// PAR.Departure Sts USR = CND.Departed after 6:00am
PAR.Departure_Sts_USR = 'B';

// PAR.Print Pre-Inv/Exception = CND.Print on Exception
PAR.Print_Pre_Inv_Exception = 'E';

ENDIF;

//?** Test depart date for valid date and time
// IF *OTHERWISE
IF *OTHERWISE;

//?** Truck Departure date cannot be a future date (after today)
//?** Additional time test for current date departure
CASE;

// IF PAR.Truck Departure Date GT JOB.*Job date
IF PAR.Truck_Departure_Date > JOB.*Job_date;

// PAR.Departure Sts USR = CND.Departed Next Day
PAR.Departure_Sts_USR = 'D';

// PAR.Print Pre-Inv/Exception = CND.Print on Exception
PAR.Print_Pre_Inv_Exception = 'E';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?** BOL Completed Validation - modify for bypass customers 12/2/2010
CASE;

// IF LCL.BOL Completed Req STS is no
IF ( LCL.BOL_Completed_Req_STS = 'N';

// AND LCL.Bypass DDt/Delay w/Invcng is Not Yes
AND LCL.Bypass_DDt_Delay_w_Invcng = *BLANK/'N' );

// OR PAR.USR Order Number is Greater then zero
OR PAR.USR_Order_Number > *ZERO;

//?Do not validate load bol completed date and time information
//?or run invoicing for a specific Order.
//?If Bypass DDt/Delay w/Invcng is Yes, then a different delay time
//?is used for these customers. The otherwise section performs the
//?delay stuff.
//?** BOL Completed Validation - modify for bypass customers 12/2/2010
// IF *OTHERWISE
IF *OTHERWISE;

//?Use Load BOL Dt/Tm complete from Order Header         E004119
//?** Validate bol completed date and time against job date
CASE;

// IF PAR.Billing Activity Type is Invoice
IF ( PAR.Billing_Activity_Type = '1';

// OR PAR.Billing Activity Type is Warehouse Transfer
OR PAR.Billing_Activity_Type = '4' );

//?** Error if BOL Completed date or time are not entered
CASE;

// IF PAR.BOL Complete Date is not entered
IF PAR.BOL_Complete_Date = *ZERO;

// OR PAR.BOL Complete Time is Not Entered
OR PAR.BOL_Complete_Time = *ZERO;

// PAR.Departure Sts USR = CND.BOL Not Completed
PAR.Departure_Sts_USR = 'C';

// PAR.Print Pre-Inv/Exception = CND.Print on Exception
PAR.Print_Pre_Inv_Exception = 'E';

//?** Error if BOL Completed date or time are not entered
// IF *OTHERWISE
IF *OTHERWISE;

//?** Test BOL completed date for valid date and time
CASE;

// IF PAR.BOL Complete Date EQ JOB.*Job date
IF PAR.BOL_Complete_Date = JOB.*Job_date;

CASE;

// IF LCL.Bypass DDt/Delay w/Invcng is Yes
IF LCL.Bypass_DDt_Delay_w_Invcng = 'Y';

//?** Retrieve bypass delay time from Company Values (into LCL)
EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
PARAMETER(PAR.Company_Number);
PARAMETER('INVDELAYBY');
PARAMETER(LCL.System_Value_Numeric);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

//?** Retrieve the approp delay time from Company Values (into LCL)
EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
PARAMETER(PAR.Company_Number);
PARAMETER('INVDELAYMN');
PARAMETER(LCL.System_Value_Numeric);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?** Calculate the how long since the BOL Printed in Minutes
// PAR.Hour 1 USR = PAR.BOL Complete Time *HOURS
PAR.Hour_1_USR = TIMEDTLS(PAR.BOL_Complete_Time 'HR');

// PAR.Hour 2 usr = JOB.*Job time *HOURS
PAR.Hour_2_usr = TIMEDTLS(JOB.*Job_time 'HR');

// PAR.Hour 3 USR = PAR.Hour 2 usr - PAR.Hour 1 USR
PAR.Hour_3_USR = PAR.Hour_2_usr - PAR.Hour_1_USR;

//?** If time is less than the delay - too early to invoice
CASE;

// IF PAR.Hour 3 USR is *EQ Zero
IF PAR.Hour_3_USR = *ZERO;

// PAR.Hour 1 USR = PAR.BOL Complete Time *MINUTES
PAR.Hour_1_USR = TIMEDTLS(PAR.BOL_Complete_Time 'MN');

// PAR.Hour 2 usr = JOB.*Job time *MINUTES
PAR.Hour_2_usr = TIMEDTLS(JOB.*Job_time 'MN');

// PAR.Hour 3 USR = PAR.Hour 2 usr - PAR.Hour 1 USR
PAR.Hour_3_USR = PAR.Hour_2_usr - PAR.Hour_1_USR;

CASE;

// IF PAR.Hour 3 USR LT LCL.System Value Numeric
IF PAR.Hour_3_USR < LCL.System_Value_Numeric;

// PAR.Departure Sts USR = CND.BOL Completed <?Min ago
PAR.Departure_Sts_USR = 'P';

// PAR.Print Pre-Inv/Exception = CND.Print on Exception
PAR.Print_Pre_Inv_Exception = 'E';

ENDIF;

ENDIF;

//?** If time is less than the delay - too early to invoice
CASE;

// IF PAR.Hour 3 USR is EQ 1
IF PAR.Hour_3_USR = 1;

// PAR.Hour 1 USR = PAR.BOL Complete Time *MINUTES
PAR.Hour_1_USR = TIMEDTLS(PAR.BOL_Complete_Time 'MN');

// PAR.Hour 2 usr = JOB.*Job time *MINUTES
PAR.Hour_2_usr = TIMEDTLS(JOB.*Job_time 'MN');

// PAR.Hour 2 usr = PAR.Hour 2 usr + CON.60
PAR.Hour_2_usr = PAR.Hour_2_usr + 60;

// PAR.Hour 3 USR = PAR.Hour 2 usr - PAR.Hour 1 USR
PAR.Hour_3_USR = PAR.Hour_2_usr - PAR.Hour_1_USR;

CASE;

// IF PAR.Hour 3 USR LT LCL.System Value Numeric
IF PAR.Hour_3_USR < LCL.System_Value_Numeric;

// PAR.Departure Sts USR = CND.BOL Completed <?Min ago
PAR.Departure_Sts_USR = 'P';

// PAR.Print Pre-Inv/Exception = CND.Print on Exception
PAR.Print_Pre_Inv_Exception = 'E';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?** fees & payment and closed revenue week
CASE;

// IF LCL.Fees & Payments Prc Usr is No
IF LCL.Fees_Payments_Prc_Usr = 'N';

//?** fees & payment and closed revenue week
// IF *OTHERWISE
IF *OTHERWISE;

//?** Determine if DB1.Actual Ship Date is in an Open Revenue Week   LJB
CASE;

// IF PAR.*Record selected is *YES
IF PAR.*Record_selected = 'Y';

//?** TF812 requires the date in CCYYMMDD format.
EXECUTE FUNCTION(CNV cyymmdd to yyyymmdd) TYPE(EXCINTFUN)                       AC1732965;
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER(WRK.Date_Out_80_USR);
{
 //?Execute internal function

 // LCL.Year Code = PAR.Date In  (7,0) USR *YEAR
 LCL.Year_Code = DATEDTLS(PAR.Date_In_70_USR 'YR' 1111111 'NONE' 'N' 1);

 // LCL.Month NBR USR = PAR.Date In  (7,0) USR *MONTH
 LCL.Month_NBR_USR = DATEDTLS(PAR.Date_In_70_USR 'MO' 1111111 'NONE' 'N' 1);

 // LCL.Day of Month USR = PAR.Date In  (7,0) USR *DAY OF MONTH
 LCL.Day_of_Month_USR = DATEDTLS(PAR.Date_In_70_USR 'DM' 1111111 'NONE' 'N' 1);

 // PAR.Year Alpha (YYYY) USR = CVTVAR(LCL.Year Code)
 PAR.Year_Alpha_YYYY_USR = CVTVAR(LCL.Year_Code);

 // PAR.Month (Char) USR = CVTVAR(LCL.Month NBR USR)
 PAR.Month_Char_USR = CVTVAR(LCL.Month_NBR_USR);

 // PAR.Day   (Char) USR = CVTVAR(LCL.Day of Month USR)
 PAR.Day_Char_USR = CVTVAR(LCL.Day_of_Month_USR);

 // PAR.Date (Char-8) USR = CONCAT(PAR.Year Alpha (YYYY) USR,PAR.Month (Char) USR,CON.*ZERO)
 PAR.Date_Char_8_USR = PAR.Year_Alpha_YYYY_USR + PAR.Month_Char_USR (*ZERO);

 // PAR.Date (Char-8) USR = CONCAT(PAR.Date (Char-8) USR,PAR.Day   (Char) USR,CON.*ZERO)
 PAR.Date_Char_8_USR = PAR.Date_Char_8_USR + PAR.Day_Char_USR (*ZERO);

 // PAR.Date Out (8,0) USR = CVTVAR(PAR.Date (Char-8) USR)
 PAR.Date_Out_80_USR = CVTVAR(PAR.Date_Char_8_USR);

}


// PAR.USR Check Y/N Status = CND.no
PAR.USR_Check_Y_N_Status = 'N';

// Call program VRY Dte is Closed Rev UP.
CALL PROGRAM(VRY Dte is Closed Rev UP) ('TF812');
PARAMETER(WRK.Date_Out_80_USR);
PARAMETER(PAR.USR_Check_Y_N_Status);

//?** If the Status flag = "N" then the Revenue Week is still open
//?** If it is "Y" then the Revenue Week is Closed.
//?** Posting to a closed Revenue Week is not allowed.  04/20/2006 LJB
//?** If Actual Ship Date is in a Closed Revenue Week, put on error rpt
CASE;

// IF PAR.USR Check Y/N Status is yes
IF PAR.USR_Check_Y_N_Status = 'Y';

// AND PAR.Order Type - Sales is Regular Order
AND PAR.Order_Type_Sales = 'OR';

// PAR.Print Pre-Inv/Exception = CND.Print on Exception
PAR.Print_Pre_Inv_Exception = 'E';

ENDIF;

ENDIF;

ENDIF;

//?Future ship date -> Select for print
CASE;

// IF PAR.USR Date Shipped GT LCL.Date Out
IF PAR.USR_Date_Shipped > LCL.Date_Out;

// PAR.USR Check Y/N Status = CND.yes
PAR.USR_Check_Y_N_Status = 'Y';

// PAR.Print Pre-Inv/Exception = CND.Print on Exception
PAR.Print_Pre_Inv_Exception = 'E';

ENDIF;

//?2014-09-10 PKD/SAZ Do not invoice if 855/866 is required prior
//?                   to invoicing.
CASE;

// IF PAR.Billing Activity Type is Invoice
IF PAR.Billing_Activity_Type = '1';

// Call program VAL 855/865-Invoicing XF.
CALL PROGRAM(VAL 855/865-Invoicing XF) ('PBPFXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.Customer_Purchase_Order_#);
PARAMETER(PAR.D_EDI_INV_PROC_FLAG);
PARAMETER(PAR.GTIN_Error_Sts_USR);
PARAMETER(PAR.GTIN_Error_Item_Code_USR);

CASE;

// IF PAR.D-EDI INV PROC FLAG is Not Yes
IF PAR.D_EDI_INV_PROC_FLAG = 'N'/*BLANK;

// OR PAR.GTIN Error Sts USR is Error
OR PAR.GTIN_Error_Sts_USR = 'E';

// PAR.Print Pre-Inv/Exception = CND.Print on Exception
PAR.Print_Pre_Inv_Exception = 'E';

ENDIF;

ENDIF;

