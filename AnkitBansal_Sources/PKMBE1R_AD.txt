// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKMBE1R
// ?Date: 14.08.2025 Time: 02:51:24
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?E4006 JJH 03/09/15 - Modified the "Crt Tattoo Scl Ticket CR"
//? function to update the "Current Pen Head" in the "Pen" file when
//? a new transaction is entered on the "Edit Scale Ticket" function.
//?E4154 JJH 07/28/15 - Pen and Tattoo Scale Ticket Modifications
//?- In summary, Manual addtions, changes, or deletions of Un-Printed
//?  Tattoo Scale Tickets will only update the Tattoo Scale Tickets.
//?  The Pen file will be updated when the Tattoo Scale Tickets are
//?  printed.
//?- Commented out logic in the Crt Tattoo Scl Ticket CR that updates
//?  the Pen when Manual Tattoo Scale Tickets are created.
//?- Commented out logic in the Chg Tattoo Scl Ticket IF that updates
//?  the Pen when changes are made to the Tattoo Scale Ticket. This
//?  includes quantity changes and movements of Tattoo Scale Tickets
//?  to another Pen.
//?- New logic to determine if Pen Max Capacity Exceeded
//?H16853 ISE 01/23/21 - Increased the length from 5 to 7 and corrected the
//?                      alignment of Buy Order Number field.
ENDDO;

// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


//?USER: Initialize key screen

CASE;

// IF KEY.TST Sequence Number EQ WRK.Zero USR
IF KEY.TST_Sequence_Number = WRK.Zero_USR;

EXECUTE FUNCTION(Rtv Last Seq Nbr      RT) TYPE(RTVOBJ) FILE(PKB3CPP)           AB1128234;
PARAMETER(KEY.BOH_Company_Number);
PARAMETER(KEY.BOH_Buy_Order_Number);
PARAMETER(KEY.BOL_Load_Number);
PARAMETER(KEY.TH_Tattoo_Number);
PARAMETER(KEY.TH_Kill_Date);
PARAMETER(KEY.TST_Sequence_Number);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.TST_Sequence_Number = *ZERO;

 //?USER: Process Data record

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.TST_Sequence_Number = DB1.TST_Sequence_Number;

 QUIT;

}


// KEY.TST Sequence Number = KEY.TST Sequence Number + CON.1
KEY.TST_Sequence_Number = KEY.TST_Sequence_Number + 1;

ENDIF;

//?USER: Initialize detail screen (new record)

// DTL.Pen Company Number = DTL.BOH Company Number
DTL.Pen_Company_Number = DTL.BOH_Company_Number;

EXECUTE FUNCTION(Rtv Hog Class Desc    RT) TYPE(RTVOBJ) FILE(PKA8REP)           AB1127790;
PARAMETER(DTL.HC_Class_Code);
PARAMETER(DTL.HC_Description);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.HC_Description = WRK.Blank_USR;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Hog Defect Desc   RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1127787;
PARAMETER(DTL.DF_Defect_Code);
PARAMETER(DTL.DF_Description);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.DF_Description = WRK.Blank_USR;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.TST Record Created Status = CND.Manual Record
DTL.TST_Record_Created_Status = 'M';

//?*---------------------------------------------------------*
//?* 08/30/00 PKP  Job Date/time were being defaulted on the screen.
//?*               This was resuling in inaccurate calculation of
//?*               Rest Time on the Rest Time Evaluation report.
// Call program Rtv System Date       UP.
CALL PROGRAM(Rtv System Date       UP) ('PKPSUPR');
PARAMETER(DTL.TST_Wgt_Date);

// Execute function Rtv Current Time      US.
EXECUTE FUNCTION(Rtv Current Time      US) TYPE(EXCUSRSRC) ('PKM1UFR');
PARAMETER(DTL.TST_Wgt_Time);
{
 C                     TIME           #OA1TM
}


// DTL.TST Wgt Hour = DTL.TST Wgt Time / CON.10000 *
DTL.TST_Wgt_Hour = DTL.TST_Wgt_Time / 10000;

//?*---------------------------------------------------------*
// DTL.Head Save USR = CON.*ZERO
DTL.Head_Save_USR = *ZERO;

// DTL.Weight Save USR = CON.*ZERO
DTL.Weight_Save_USR = *ZERO;

// DTL.Pen Number = PAR.Pen Number
DTL.Pen_Number = PAR.Pen_Number;

CASE;

// IF DTL.BOH Company Number is SBD Farms of Guymon, Ok
IF DTL.BOH_Company_Number = 360;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.HC Class Code is Qualified market
IF DTL.HC_Class_Code = 'QM';

ENDIF;

ENDIF;

//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(Rtv Hog Class Desc    RT) TYPE(RTVOBJ) FILE(PKA8REP)           AB1127790;
PARAMETER(DTL.HC_Class_Code);
PARAMETER(DTL.HC_Description);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.HC_Description = WRK.Blank_USR;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Hog Defect Desc   RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1127787;
PARAMETER(DTL.DF_Defect_Code);
PARAMETER(DTL.DF_Description);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.DF_Description = WRK.Blank_USR;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Pen Usr = DB1.Pen Number
DTL.Pen_Usr = DB1.Pen_Number;

// DTL.Head Save USR = DB1.TST Head
DTL.Head_Save_USR = DB1.TST_Head;

// DTL.Weight Save USR = DB1.TST Wgt
DTL.Weight_Save_USR = DB1.TST_Wgt;

//?USER: Validate detail screen relations

EXECUTE FUNCTION(Rtv Hog Class         RT) TYPE(RTVOBJ) FILE(PKA8REP)           AB1127629;
PARAMETER(DTL.HC_Class_Code);
PARAMETER(DTL.HC_Description);
PARAMETER(WRK.HC_Defect_Required);
PARAMETER(WRK.HC_Price_Required);
PARAMETER(WRK.HC_Resolution);
PARAMETER(WRK.HC_Qualification);
PARAMETER(WRK.HC_Class_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Hog Defect Desc   RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1127787;
PARAMETER(DTL.DF_Defect_Code);
PARAMETER(DTL.DF_Description);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.DF_Description = WRK.Blank_USR;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Sel Pen
CASE;

// IF PGM.*Cursor field <IS> DTL.Pen Number
IF PGM.*Cursor_field = DTL.Pen_Number;

// AND DTL.*CMD key is CF04
AND DTL.*CMD_key = '04';

// Call program Sel Pen Open/Hc Type  SR.
CALL PROGRAM(Sel Pen Open/Hc Type  SR) ('PKJWSRR');
PARAMETER(DTL.Pen_Company_Number);
PARAMETER(DTL.Pen_Number);
PARAMETER(WRK.HC_Class_Type);

ENDIF;

CASE;

// IF DTL.Pen Number is Pen Number is Empty
IF DTL.Pen_Number = *BLANK;

// Call program Sel Pen Open/Hc Type  SR.
CALL PROGRAM(Sel Pen Open/Hc Type  SR) ('PKJWSRR');
PARAMETER(DTL.Pen_Company_Number);
PARAMETER(DTL.Pen_Number);
PARAMETER(WRK.HC_Class_Type);

ENDIF;

EXECUTE FUNCTION(Rtv Val Pen,Type,Cap  RT) TYPE(RTVOBJ) FILE(PKA3REP)           AB1262045;
PARAMETER(DTL.Pen_Company_Number);
PARAMETER(DTL.Pen_Number);
PARAMETER(WRK.Pen_Maximun_Capacity);
PARAMETER(WRK.Pen_Current_Head);
PARAMETER(WRK.Pen_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Pen &1 must have an Open status.'
ERROR(PRK0361);
MSGPARM(DTL.Pen_Number);

ENDIF;

CASE;

// IF WRK.HC Class Type NE WRK.Pen Type
IF WRK.HC_Class_Type <> WRK.Pen_Type;

// Send error message - 'Pen &1 type &3 not the same as the tattoo class type &2.'
ERROR(PRK0606);
MSGPARM(DTL.Pen_Number);
MSGPARM(WRK.HC_Class_Type);
MSGPARM(WRK.Pen_Type);

ENDIF;

// Call program Rtv Stress Pens Only  XF.
CALL PROGRAM(Rtv Stress Pens Only  XF) ('PLPJXFR');
PARAMETER(DTL.Pen_Company_Number);
PARAMETER(DTL.Pen_Number);
PARAMETER(LCL.Stress_Market_Type);

//?12/21/01
// LCL.TH Head Received = CON.*ZERO
LCL.TH_Head_Received = *ZERO;

EXECUTE FUNCTION(RTV Head Rec/Live Wgt RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1172937;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(LCL.TH_Head_Received);
PARAMETER(LCL.TH_Avg_Live_Wgt);
{
 //?USER: Process Data record

 // PAR.TH Head Received = PAR.TH Head Received + DB1.TH Head Received
 PAR.TH_Head_Received = PAR.TH_Head_Received + DB1.TH_Head_Received;

 CASE;

 // IF DB1.TH Tattoo Number EQ PAR.TH Tattoo Number
 IF DB1.TH_Tattoo_Number = PAR.TH_Tattoo_Number;

 // PAR.TH Avg Live Wgt = DB1.TH Avg Live Wgt
 PAR.TH_Avg_Live_Wgt = DB1.TH_Avg_Live_Wgt;

 ENDIF;

}


CASE;

// IF DTL.HC Class Code is Resale
IF DTL.HC_Class_Code = 'RSL';

// OR DTL.HC Class Code is Qualified market
OR DTL.HC_Class_Code = 'QM';

//?If Stressed Pen, default Avg Wt for calc of TST Wgt    12/31/01
CASE;

// IF LCL.Stress/Market Type is Stress
IF LCL.Stress_Market_Type = 'S';

// AND DTL.TST Wgt is Zeros
AND DTL.TST_Wgt = *ZERO;

//?9/8/2010 slm Remove the hard code ST1
//?Add the new condition on stress/market type
// DTL.TST Wgt = DTL.TST Head * LCL.TH Avg Live Wgt *
DTL.TST_Wgt = DTL.TST_Head * LCL.TH_Avg_Live_Wgt;

ENDIF;

EXECUTE FUNCTION(Rtv Shipped Head      RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1226281;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(LCL.BOL_Shipped_Head);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Head Count = LCL.BOL Shipped Head * CON..10 *
LCL.Head_Count = LCL.BOL_Shipped_Head * .10;

// WRK.Head > Percent Max = LCL.BOL Shipped Head + LCL.Head Count
WRK.Head_Percent_Max = LCL.BOL_Shipped_Head + LCL.Head_Count;

// WRK.Head < Percent Min = LCL.BOL Shipped Head - LCL.Head Count
WRK.Head_Percent_Min = LCL.BOL_Shipped_Head - LCL.Head_Count;

// Compute: TST Head
LCL.TST_Head = ( LCL.TH_Head_Received + DTL.TST_Head ) - DTL.Head_Save_USR;

//?Validate TST Head v. BOL Shipped Head   12/21/01
CASE;

// IF LCL.TST Head GT WRK.Head > Percent Max
IF LCL.TST_Head > WRK.Head_Percent_Max;

// OR LCL.TST Head LT WRK.Head < Percent Min
OR LCL.TST_Head < WRK.Head_Percent_Min;

//?Warning message
// Send information message - 'Warning:  Head not within 10% of BOL Head of &1'
MESSAGE(PRK0995 *INFO);
MSGPARM(LCL.BOL_Shipped_Head);
MSGPARM(DTL.TST_Head);

ENDIF;

//?If Market, validate weight range.
CASE;

// IF DTL.HC Class Code is Qualified market
IF DTL.HC_Class_Code = 'QM';

//?Validate Wt in range for avg of 200-350 lbs
CASE;

// IF DTL.TST Wgt is Greater then Zero
IF DTL.TST_Wgt > *ZERO;

// AND DTL.TST Head is GT Zero
AND DTL.TST_Head > *ZERO;

// WRK.TH Avg Live Wgt = DTL.TST Wgt / DTL.TST Head *
WRK.TH_Avg_Live_Wgt = DTL.TST_Wgt / DTL.TST_Head;

CASE;

// IF WRK.TH Avg Live Wgt is Between 200 and 350
IF WRK.TH_Avg_Live_Wgt >= 200;
AND WRK.TH_Avg_Live_Wgt <= 350;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Scale Wgt out of range for avg of 200 - 350 lbs.'
ERROR(PRK0994);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Weight is required for External hogs.
CASE;

// IF DTL.TST Wgt is Zeros
IF DTL.TST_Wgt = *ZERO;

EXECUTE FUNCTION(Rtv Pay/Src/Cls/ClcWt RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1206963;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(WRK.TH_Recalc_Live_Wgt);
PARAMETER(WRK.TH_Source_Type);
PARAMETER(WRK.TH_Payment_Type);
PARAMETER(WRK.TH_Hog_Class_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.TH Source Type is External
IF WRK.TH_Source_Type = 'E';

//?PK0418 3/19/02 Wt required if Producer not being weighed on Truck Scl
EXECUTE FUNCTION(Rtv Trk Scl Weigh Sts RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1241888;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(LCL.PL_Truck_Scale_Wgh_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.PL Truck Scale Wgh Sts is Yes
IF LCL.PL_Truck_Scale_Wgh_Sts = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Weight is Required'
ERROR(PRK0362);
MSGPARM(DTL.TST_Wgt);

ENDIF;

ENDIF;

ENDIF;

//?E4154 JJH 07/28/15 - New logic to determine if Pen Max Capacity
//?  Exceeded.
CASE;

// IF DTL.TST Head is Not Zero
IF DTL.TST_Head <> *ZERO;

CASE;

// IF DTL.Pen Usr EQ DTL.Pen Number
IF DTL.Pen_Usr = DTL.Pen_Number;

// LCL.TST Head = DTL.TST Head - DTL.Head Save USR
LCL.TST_Head = DTL.TST_Head - DTL.Head_Save_USR;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.TST Head = DTL.TST Head
LCL.TST_Head = DTL.TST_Head;

ENDIF;

// Call program Clc Pen Max Capacity  XF.
CALL PROGRAM(Clc Pen Max Capacity  XF) ('PLXNXFR');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.Pen_Number);
PARAMETER(LCL.TST_Head);
PARAMETER(NLL.Pen_Tto_Scl_Tkt_Head_USR);
PARAMETER(LCL.Pen_Exceeds_Max_Cap_USR);

CASE;

// IF LCL.Pen Exceeds Max Cap USR is Yes
IF LCL.Pen_Exceeds_Max_Cap_USR = 'Y';

// Send error message - 'Pen &1 max capacity will be exceeded. Choose another pen.'
ERROR(PRK1124);
MSGPARM(DTL.Pen_Number);

ENDIF;

ENDIF;

// DTL.TST Wgt Hour = DTL.TST Wgt Time / CON.10000 *
DTL.TST_Wgt_Hour = DTL.TST_Wgt_Time / 10000;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Tattoo Scl Ticket CR) TYPE(CRTOBJ) FILE(PKB3CPP)           AB1214272;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.TST_Sequence_Number);
PARAMETER(DTL.TST_Head);
PARAMETER(DTL.TST_Wgt);
PARAMETER(DTL.TST_Wgt_Date);
PARAMETER(DTL.TST_Wgt_Time);
PARAMETER(DTL.TST_Wgt_Hour);
PARAMETER(DTL.TST_Last_Zero_Date);
PARAMETER(DTL.TST_Last_Zero_Time);
PARAMETER(DTL.TST_Record_Created_Status);
PARAMETER(DTL.Pen_Company_Number);
PARAMETER(DTL.Pen_Number);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

 //?E4154 JJH 07/28/15 - Comment out logic that updates the Pen when
 //?  a Manual Tattoo Scale Ticket is added.
 //?USER: Processing after Data update

 EXECUTE FUNCTION(Upd Trk Scl Weigh Sts RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1214077;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER('R');
 {
  //?USER: Process Data record

  CASE;

  // IF PAR.BOL Truck Scale Weigh Sts is Respread
  IF PAR.BOL_Truck_Scale_Weigh_Sts = 'R';

  // AND DB1.BOL Truck Scale Weigh Sts is Not Spread
  AND DB1.BOL_Truck_Scale_Weigh_Sts = 'I'/'N'/*BLANK/'O'/'R'/'A'/'C';

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Chg Trk Scl Weigh Sts CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1214078;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(PAR.BOL_Truck_Scale_Weigh_Sts);
  PARAMETER(DB1.BOL_Shipped_Head);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  ENDIF;

  CASE;

  // IF PAR.BOL Truck Scale Weigh Sts is Respread
  IF PAR.BOL_Truck_Scale_Weigh_Sts = 'R';

  EXECUTE FUNCTION(Upd Hdr/Bal Status    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1230832;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER('E');
  PARAMETER('E');
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.TH Hog Class Type is Not Resale
   IF DB1.TH_Hog_Class_Type = 'M'/'S';

   EXECUTE FUNCTION(Chg Hdr/Bal Status    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1230833;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(PAR.TH_Header_Error_Sts);
   PARAMETER(PAR.TH_Kill_Balancing_Sts);
   ENDIF;

  }

  ENDIF;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Tattoo Scl Ticket IF) TYPE(EXCINTFUN) FILE(PKB3CPP)        AB1324199;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.TST_Sequence_Number);
PARAMETER(DTL.TST_Head);
PARAMETER(DTL.TST_Wgt);
PARAMETER(DTL.TST_Wgt_Date);
PARAMETER(DTL.TST_Wgt_Time);
PARAMETER(DTL.TST_Wgt_Hour);
PARAMETER(DTL.TST_Last_Zero_Date);
PARAMETER(DTL.TST_Last_Zero_Time);
PARAMETER(DTL.TST_Record_Created_Status);
PARAMETER(DTL.Pen_Company_Number);
PARAMETER(DTL.Pen_Number);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
PARAMETER(DTL.Pen_Usr);
PARAMETER(DTL.Head_Save_USR);
{
 //?Execute internal function

 //?E4154 JJH 07/28/15 - Do not update the Pen file when changes
 //?  are made to Tattoo Scale Tickets.
 EXECUTE FUNCTION(Chg Tattoo Scl Ticket CH) TYPE(CHGOBJ) FILE(PKB3CPP)           AB1214269;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TST_Sequence_Number);
 PARAMETER(PAR.TST_Head);
 PARAMETER(PAR.TST_Wgt);
 PARAMETER(PAR.TST_Wgt_Date);
 PARAMETER(PAR.TST_Wgt_Time);
 PARAMETER(PAR.TST_Wgt_Hour);
 PARAMETER(PAR.TST_Last_Zero_Date);
 PARAMETER(PAR.TST_Last_Zero_Time);
 PARAMETER(PAR.TST_Record_Created_Status);
 PARAMETER(PAR.Pen_Company_Number);
 PARAMETER(PAR.Pen_Number);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing after Data read

  CASE;

  // IF PAR.TST Head NE DB1.TST Head
  IF PAR.TST_Head <> DB1.TST_Head;

  EXECUTE FUNCTION(Upd Trk Scl Weigh Sts RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1214077;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER('R');
  {
   //?USER: Process Data record

   CASE;

   // IF PAR.BOL Truck Scale Weigh Sts is Respread
   IF PAR.BOL_Truck_Scale_Weigh_Sts = 'R';

   // AND DB1.BOL Truck Scale Weigh Sts is Not Spread
   AND DB1.BOL_Truck_Scale_Weigh_Sts = 'I'/'N'/*BLANK/'O'/'R'/'A'/'C';

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg Trk Scl Weigh Sts CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1214078;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(PAR.BOL_Truck_Scale_Weigh_Sts);
   PARAMETER(DB1.BOL_Shipped_Head);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

   ENDIF;

   CASE;

   // IF PAR.BOL Truck Scale Weigh Sts is Respread
   IF PAR.BOL_Truck_Scale_Weigh_Sts = 'R';

   EXECUTE FUNCTION(Upd Hdr/Bal Status    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1230832;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER('E');
   PARAMETER('E');
   {
    //?USER: Process Data record

    CASE;

    // IF DB1.TH Hog Class Type is Not Resale
    IF DB1.TH_Hog_Class_Type = 'M'/'S';

    EXECUTE FUNCTION(Chg Hdr/Bal Status    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1230833;
    PARAMETER(DB1.BOH_Company_Number);
    PARAMETER(DB1.BOH_Buy_Order_Number);
    PARAMETER(DB1.BOL_Load_Number);
    PARAMETER(DB1.TH_Tattoo_Number);
    PARAMETER(DB1.TH_Kill_Date);
    PARAMETER(PAR.TH_Header_Error_Sts);
    PARAMETER(PAR.TH_Kill_Balancing_Sts);
    ENDIF;

   }

   ENDIF;

  }

  ENDIF;

  //?E4154 JJH 07/28/15 - Do not update the Pen file when changes
  //?  are made to Tattoo Scale Tickets.
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


//?USER: Process command keys

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

RETURN;

ENDIF;

//?USER: Exit program processing

// Call program Chg BOL/THDR Rec/Wgt  XF.
CALL PROGRAM(Chg BOL/THDR Rec/Wgt  XF) ('PKHFXFR');
PARAMETER(KEY.BOH_Company_Number);
PARAMETER(KEY.BOH_Buy_Order_Number);
PARAMETER(KEY.BOL_Load_Number);
PARAMETER(KEY.TH_Tattoo_Number);
PARAMETER(KEY.TH_Kill_Date);

