// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for ICP0XFR
// ?Date: 14.08.2025 Time: 03:26:25
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(Rtv Cancel Physical Ct RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1122341;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Cycle_Count_Code_IB);
PARAMETER(PAR.Transaction_Date_Code);
PARAMETER(1);
{
 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?  Validate Warehouse code match
 CASE;

 // IF PAR.Warehouse Code is Warehouse Code not Blank
 IF PAR.Warehouse_Code <> *BLANK;

 CASE;

 // IF PAR.Warehouse Code NE DB1.Warehouse Code
 IF PAR.Warehouse_Code <> DB1.Warehouse_Code;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 CASE;

 // IF PAR.Accounting Company Number is not equal to zero
 IF PAR.Company_Number <> *ZERO;

 QUIT;

 ENDIF;

 ENDIF;

 ENDIF;

 //?  Validate Cycle Count match
 CASE;

 // IF PAR.Cycle Count Code - IB is Entered
 IF PAR.Cycle_Count_Code_IB <> *BLANK;

 CASE;

 // IF PAR.Cycle Count Code - IB NE DB1.Cycle Count Code - IB
 IF PAR.Cycle_Count_Code_IB <> DB1.Cycle_Count_Code_IB;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 CASE;

 // IF PAR.Accounting Company Number is not equal to zero
 IF PAR.Company_Number <> *ZERO;

 CASE;

 // IF PAR.Warehouse Code is Warehouse Code not Blank
 IF PAR.Warehouse_Code <> *BLANK;

 QUIT;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 EXECUTE FUNCTION(Rtv Cancel Physical Ct RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1122310;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Transaction_Date_Code);
 PARAMETER(PAR.Shift_Number);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Physical Count Weight is Not equal zero
  IF DB1.Physical_Count_Weight <> *ZERO;

  // OR DB1.Physical Count Qty - U/M1 is not equal zero
  OR DB1.Physical_Count_Qty_UOM1 <> *ZERO;

  EXECUTE FUNCTION(Rtv Base Values        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1125011;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Description_Line_One);
  PARAMETER(PAR.Description_Line_Two);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Conversion_Factor_1);
  PARAMETER(PAR.Operation_Factor_1);
  PARAMETER(PAR.UOM_Second);
  PARAMETER(PAR.Conversion_Factor_2);
  PARAMETER(PAR.Operation_Factor_2);
  PARAMETER(PAR.UOM_Third);
  PARAMETER(PAR.UOM_Pricing);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Production_Date_Control);
  PARAMETER(PAR.Catch_Weight_Status);
  PARAMETER(WRK.Fresh_Chilling_Time);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Sequence No.  RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1304410;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER('A');
  PARAMETER('PC');
  PARAMETER(PAR.Transaction_Date_Code);
  PARAMETER(PAR.ITD_Sequence_Number);
  {
   //?USER: Processing if Data record not found

   // PAR.ITD Sequence Number = CON.1
   PAR.ITD_Sequence_Number = 1;

   //?USER: Process Data record

   // PAR.ITD Sequence Number = DB1.ITD Sequence Number + CON.1
   PAR.ITD_Sequence_Number = DB1.ITD_Sequence_Number + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt IC Trans. Detail   CR) TYPE(CRTOBJ) FILE(CAB7CPP)          AC1122298;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER('A');
  PARAMETER('PC');
  PARAMETER(PAR.Transaction_Date_Code);
  PARAMETER(PAR.ITD_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(DB1.Production_Date);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER('IC');
  PARAMETER('Physical clear');
  PARAMETER(DB1.Physical_Count_Qty_UOM1);
  PARAMETER(DB1.Physical_Count_Weight);
  PARAMETER(*ZERO);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER('Y');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Shift_Number);
  PARAMETER(DB1.Label_Date);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER('A');
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   //?USER: Processing after Data update

   // Call program Crt Export Rate Dtl   XF.
   CALL PROGRAM(Crt Export Rate Dtl   XF) ('POO5XFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Inventory_Trans_ID);
   PARAMETER(DB1.Inventory_Trans_Type);
   PARAMETER(DB1.Transaction_Date_Code);
   PARAMETER(DB1.Sequence_Number);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.UOM_Transaction);
   PARAMETER(DB1.Item_Transaction_Source);
   PARAMETER(DB1.Description);
   PARAMETER(DB1.Transaction_Quantity);
   PARAMETER(DB1.Transaction_Weight);
   PARAMETER(DB1.USR_Transaction_Unit_Cost);
   PARAMETER(DB1.UOM_Cost);
   PARAMETER(DB1.Extended_Amount);
   PARAMETER(DB1.Ticket_Number);
   PARAMETER(DB1.GL_Document_Number);
   PARAMETER(DB1.GL_Update_Status);
   PARAMETER(DB1.Reason_Code);
   PARAMETER(DB1.Reference_Number_Code);
   PARAMETER(DB1.Lot_ID);
   PARAMETER(DB1.Transfer_Batch_Number);
   PARAMETER(DB1.Transfer_Batch_Sequence);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(DB1.Employee_Badge_Number);
   PARAMETER(DB1.Production_Time);
   PARAMETER(DB1.Shift_Number);
   PARAMETER(DB1.Label_Date);
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.Job_Date);

  }

  ENDIF;

  EXECUTE FUNCTION(Chg Item Bal. Detail   CH) TYPE(CHGOBJ) FILE(CAB1REP)          AC1120963;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(DB1.Quantity_on_Hand_Weight);
  PARAMETER(DB1.Quantity_on_Hand_UOM1);
  PARAMETER(DB1.Quantity_on_Hand_UOM2);
  PARAMETER(DB1.Quantity_on_Hand_UOM3);
  PARAMETER(DB1.Quantity_In_Chill);
  PARAMETER(DB1.Weight_In_Chill);
  PARAMETER('N');
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.Unit_Cost_Per_Pound);
  PARAMETER(DB1.Last_Cost);
  PARAMETER(DB1.Value_of_On_Hand_Inventor);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.Job Name = JOB.*PROGRAM
   DB1.Job_Name = JOB.*PROGRAM;

  }

 }

 ENDIF;

}


