      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      Hog Production System
      * PROGRAM:     HP4718
      * TITLE:       Work With Order Requests
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     03/08/04
      *
      *
      * FUNCTION: This Work With displays the records in the Request Header file.
      *
      *           Restrictors:
      *                Include closed requests flag
      *
      *           Positioners:
      *                Work order number
      *
      *           Selectors:
      *                Farm site
      *                Request date
      *                Request status
      *
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 07/14/04  LeAnne Fedor
      *           Per Alice, Option 6=Print is now OK for any/all statuses.
      *           Prior to this change, you could only print for orders
      *           where the status was O=Open. When the status was not OPEN,
      *           we issued message HS04792.
      *
      *           Also, we now have 2 maintenance programs. When the order is ON HOLD,
      *           we call HP1717; otherwise, we call HP1718.
      *
      * 10/13/04  LeAnne Fedor
      *           Recompile only. Cost Per Unit Amount was changed from
      *           9,2 to 9,4.
      *
      * 03/23/05  LeAnne Fedor
      *           Added a new option: 8=Email to Cell & Production Manager.
      *
      * 04/27/05  LeAnne Fedor
      *           Temporarily "commented out" the e-mail to Cell Manager logic.
      *
      * 10/16/13  LeAnne Ramsey (E2831)
      *           Recompile only. Added field 'MTech Reference'.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhpd4718   cf   e             workstn
     F                                     sfile(hp4718s1:hdrrn1)
     F                                     infds(iofeed)
      *
      *
     Fhsp018    if   e           k disk
      *    Farm site
      *
      *
     Fhsl192a   if   e           k disk    infds(dbfeed)
      *    Request header
      *
      *
     Fhsl193d   if   e           k disk
      *
      *
      /eject
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D create          c                   'CREATE'
     D revise          c                   'REVISE'
     D delete          c                   'DELETE'
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      *
     D upper           c                   'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
     D lower           c                   'abcdefghijklmnopqrstuvwxyz'
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * Compile time array for SBMJOB used in QCMDEXC
      *---------------------------------------------------------------
     D cmd             s              1    dim(80) ctdata perrcd(80)
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
     D maxrrn          s              4  0
     D reset           s              1    inz('N')
     D norecs          s              1    inz('N')
     D count           s              2  0
     D wkflow          s                   like(idflow)
     D rtncd           s              2    inz('00')
     D svrrn1          s                   like(hdrrn1)
      *
      *
      *  Parms for use with QCMDEXC.  'LENGTH' is the length of the
      *  command that will be issued with QCMDEXC.  QCMDEXC requires
      *  the field containing length to be defined as 15 with 5 decimal
      *  positions.  The field 'CMDSBM' will hold the values of the
      *  submit job command when passed as a parm on the call to
      *  QCMDEXC.
      *
     D length          s             15  5 inz(80)
     D cmdsbm          s             80
      *
      *
      * Workfields required for subfile paging--see initialization
      * subroutine.
      *
     D wkplin          s              2  0
     D wkrlin          s              2  0
      *
      *
      * Control fields
      *
     D procfl          s              1
     D clinesfl        s              1
     D usedqtfl        s              1
      *
      *
      * Save fields for restrictors/positioners/selectors
      *
     D svynfl          s                   like(c1ynfl)
     D svwo            s                   like(c1wo)
     D svfscd          s                   like(c1fscd)
     D svfsnm          s                   like(c1fsnm)
     D svmdy           s                   like(c1mdy)
     D svrqscd         s                   like(c1rqscd)
      *
      *
      * Workfields
      *
     D wkname          s                   like(c1fsnm)
     D wkfsnm          s                   like(c1fsnm)
     D nbrchar         s              2  0
      *
      *
      * Workfields for date manipulation
      *
     D wkisodate       s               D   datfmt(*iso)
      *
      *
      * Parms
      *
     D xxaist          s              1
     D xxynfl          s                   like(c1ynfl)
      *
     D xxrqsn          s                   like(hdrqsn)
     D xxrqscd         s                   like(c1rqscd)
     D xxrqsds         s              8
      *
     D xxfscd          s                   like(c1fscd)
     D xxfsnm          s                   like(d1fsnm)
      *
     D xxjobq          s             10     inz('*JOBD     ')
     D xxnite          s              1     inz('N')
     D xxcopy          s              1  0
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      * Standard subfile option conversion
      *---------------------------------------------------------------
     D                 ds                  inz
     D d1opt                          2
     D   wkopt1                       1    overlay(d1opt)
     D   wkopt2                       1    overlay(d1opt:2)
      *
      *
      *---------------------------------------------------------------
      * Data areas
      *---------------------------------------------------------------
      *
      * (Note: This LDA layout is also used in HP4709 and HP3709CL--which also generate
      *        the On Hold Report for e-mailing. So, don't mess with the LDA in this
      *        program without reviewing these other two programs.
      *
     Dlda             uds                  dtaara(*lda)
     D  ldver                  1      1
     D  ldemail                2      2
     D  ldpbfl                 3      3
      *
     D  ldppcd                 4      8
     D  ldcmgcd                9     13
     D  ldpmgcd               14     18
     D  ldcell                19     20  0
     D  ldfscd                21     25  0
     D  ldwo                  26     35
      *
     D  ldppds                36     65
     D  ldcmgnm               66     90
     D  ldpmgnm               91    115
     D  ldfsnm               116    140
     D  ld1stemail           141    141
      *
     D  ldrqsn               142    148  0
      *
     D  ldoutu               401    410
     D  ldhold               411    411
     D  ldcopy               412    412  0
     D  ldoutq               413    422
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * Clear and fill the subfile
      *
     C                   exsr      $clr1
     C                   exsr      $frsh1
      *
      * Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * This subfile has Fold/Unfold capabilities.  The DDS uses the keywords
      * (SFLDROP, SFLFOLD) to determine whether the user is folded or unfolded
      * and to redisplay the screen in the same mode as when he last saw it.
      * Indicators 78 and 79 are assigned in the DDS to the keywords.
      *
     C                   setoff                                       7879
     C                   if        fold = '0'
     C                   seton                                        78
     C                   else
     C                   seton                                        79
     C                   endif
      *
      * Write screen 1 to crt
      *
     C                   write     hp4718k1
     C                   write     hp4718ec
     C                   exfmt     hp4718c1
      *
      * Save the value of the lowest subfile rrn on the screen for
      * later repositioning of the subfile
      *
     C                   eval      wkflow = idflow
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-EXIT
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
      *
     C                   if        fld = 'C1YNFL' and
     C                             c1ynfl <> svynfl
     C                   exsr      $ynfl
     C                   endif
      *
     C                   if        error = 0
     C                   exsr      $chksv
     C                   else
     C                   eval      routne = scrn1
     C                   endif
      *
     C                   when      *in05 = *on and                              F5-refresh
     C                             (c1ynfl = yes or c1ynfl = no)
     C                   eval      reset = yes
     C                   eval      routne = set1
      *
     C                   when      *in06 = *on                                  F6-create
     C                   exsr      $creat
     C                   eval      hdpag1 = wkflow
     C                   eval      reset = yes
     C                   eval      routne = set1
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                     API
     C                   eval      hdpag1 = wkflow
     C                   eval      routne = scrn1
      *
     C                   when      *in17 = *on                                  F17-print options
     C                   eval      routne = scrn1
     C                   call      'HP451'
     C                   parm                    sdpgm
     C     ldcopy        parm      ldcopy        xxcopy
     C                   parm                    ldhold
     C                   parm                    ldoutq
     C                   parm                    xxnite
     C                   parm                    xxjobq
      *
      *
      * Reposition the subfile if the user has changed any of the
      * restrictors or positioners or selectors in the control record.
      *
     C                   when      c1ynfl <> svynfl or                          Positioners,etc
     C                             c1wo   <> svwo   or
     C                             c1fscd <> svfscd or
     C                             c1fsnm <> svfsnm or
     C                             c1mdy <> svmdy or
     C                             c1rqscd <> svrqscd
      *
     C                   if        c1ynfl <> svynfl                                              nge
     C                   exsr      $ynfl
     C                   endif                                                                   nge
      *
     C                   if        error = 0
     C                   exsr      $chksv
     C                   else
     C                   eval      routne = scrn1
     C                   endif
      *
     C                   when      *in25 = *on                                  F25-rollup
     C                   exsr      $load1
     C                   other
      *
      * User has pressed enter
      *
     C                   if        norecs = yes                                 If empty sfl
     C                   eval      routne = set1
     C                   else
     C                   eval      routne = edit1
     C                   endif                                                  If empty sfl
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Save the control record positioners/selectors
      *----------------------------------------------------------------
      *
     C     $chksv        begsr
      *
     C                   eval      reset = no
     C                   eval      routne = set1
      *
     C                   move      c1ynfl        svynfl
     C                   move      c1wo          svwo
     C                   z-add     c1fscd        svfscd
     C                   z-add     c1mdy         svmdy
     C                   move      c1rqscd       svrqscd
      *
      *
      * Prepare to scan on Farm Site Name
      *  1) trim leading/trailing blanks
      *  2) find first non-blank position from right
      *
     C                   eval      c1fsnm = %trim(c1fsnm)
     C     ' '           checkr    c1fsnm        nbrchar
     C                   movel     c1fsnm        svfsnm
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Validate 'include closed budgets' flag
      *---------------------------------------------------------------
      *
     C     $ynfl         begsr
      *
     C                   if        c1ynfl <> yes and
     C                             c1ynfl <> no
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09106'
     C                   endif
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Edit input fields for screen 1
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * First, edit all the selections entered by the user in the
      * subfile option field to see that valid selections were input
      *
     C                   exsr      $edop1
      *
      * If there are no errors in the subfile option selectors entered
      * by the user, then execute the subroutine to reread and process
      * the records selected by the user.  After completing the
      * subroutine, set the routine to start over.
      *
     C                   if        error = 0                                    If no error
     C                   exsr      $proc1
      *
     C                   if        rtncd = '00'
     C                   eval      routne = set1
     C                   else
     C                   eval      hdpag1 = wkflow
     C                   eval      routne = scrn1
     C                   endif
      *
      * else there were errors in the subfile options entered,
      * so set to redisplay screen with errors to user
      *
     C                   else
     C                   eval      routne = scrn1
     C                   endif                                                  If no error
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Listing logic
      *---------------------------------------------------------------
      *
     C     $list         begsr
      *
      *
     C                   select
      * Print Pick List
     C                   when      d1opt = ' 6'
     C                   move      'P'           ldver
     C                   move      hdrqsn        ldrqsn
     C                   exsr      $ldaout
      *
      *                 Issue the standard request submission message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09003'
     C                   endif
      *
      * E-mailing:
      *           First submit Version 1-Email Cell Manager
      *           Then submit  Version 2-Email Production Manager
      *
     C                   when      d1opt = ' 8'
      *
     C                   move      yes           ldemail
     C                   move      yes           ldpbfl
     C                   move      d1wo          ldwo
     C                   z-add     0             ldrqsn
      * Version 1
      *
      *         To burst the report to e-mail to managers, we have to build the managers
      *         into the Esend "rules" file. We only need to build the "manager rules" the
      *         first time the user submits an 'E-mail'. So, we initialize the
      *         LDA value of "First E-mail" to yes in the initialization subroutine. Then,
      *         once the users "e-mail", we set the LDA flag field to NO so that the
      *         "manager rules" will not be built again as long as the user is on this
      *         screen.
      * 4/27/05: "Temporarily" commented out the "Cell Manager" version, until Misti and
      *          Stephen decide they want it reinstated.
     C****************** move      '1'           ldver
     C****************** exsr      $ldaout
     C****************** move      no            ld1stemail
      *
     C                   move      '2'           ldver
     C                   exsr      $ldaout
      *
      *          Issue the standard request submission message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09003'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Output LDA
      *---------------------------------------------------------------
      *
     C     $ldaout       begsr
      *
     C                   out       lda
      *
      * Move the 80-character compile time array 'CMD' to an
      * 80-character field for passing as a parm with QCMDEXC.
      *
     C                   movea     xxjobq        cmd(52)
     C                   movea     cmd           cmdsbm
     C                   call      'QCMDEXC'
     C                   parm                    cmdsbm
     C                   parm                    length
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Clear subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $clr1         begsr
      *
     C                   eval      svrrn1 = 0
      *
     C                   clear                   hp4718s1
     C                   seton                                        83        sflclr
     C                   write     hp4718c1
     C                   setoff                                       818283
      *                                                    81=sfldsp
      *                                                    82=sflend
      *                                                    83=sflclr
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Refresh/fill the subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $frsh1        begsr
      *
      * Set position in file
      *
     C     c1wo          setll     hsl192a
      *
      *
      * The field 'reset' is a flag field to indicate whether you are
      * attempting to reposition the user close to where he was in the
      * subfile.
      * The lowest subfile RRN on the screen from the DSPF feedback
      * area (IDFLOW) was retrieved earlier and put in WKFLOW.
      * Add to WKFLOW the number of lines on your subfile page or the
      * number less 1 to determine a subfile RRN to reposition to.
      *
     C                   if        reset = yes
     C                   eval      maxrrn = wkflow + wkrlin
     C                   else
      *
      * Don't try to reposition the user, just start the subfile over
      *
     C                   eval      maxrrn = wkplin
     C                   endif
      *
      * Load the subfile until you have the required number of records.
      * The number will depend on whether uou are repositioning the
      * subfile or not. Stop if you get to the end of the subfile.
      *
     C                   dou       svrrn1 >= maxrrn or *in82 = *on
     C                   exsr      $load1
     C                   enddo
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Load subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $load1        begsr
      *
     C                   eval      hdrrn1 = svrrn1
      *
      * Set the count of records on the subfile page to zero.
      *
     C                   z-add     0             count
      *
      * Fill the subfile until the end of the database file or
      * you have filled all the lines on the subfile page.
      *
     C                   setoff                                       82
     C                   dou       *in82 = *on or count >= wkplin               Do fill
      *
     C                   read      hsl192a                                82
     C                   if        *in82 = *off                                 If read
      *
     C                   if        c1ynfl = yes or                              If continue
     C                             (c1ynfl = no and qhrqscd <> 'C')
     C                   move      yes           procfl
      *
     C                   move      qhwo          d1wo
     C                   z-add     qhfscd        d1fscd
     C                   move      qhrqscd       d1rqscd
     C                   move      qhcom         d1com
     C                   z-add     qhrqsn        hdrqsn
      *
      *
      * Flip Date from CCYYMMDD to MMDDYY for display
      *
     C     *iso          test(d)                 qhrqdt                 92
     C                   if        *in92 = *off                                 If OK date
     C                   move      qhrqdt        wkisodate
     C     *mdy          move      wkisodate     d1mdy
     C                   endif                                                  If OK date
      *
      * Retrieve Farm Site Name
      *
     C     qhfscd        chain     hsp018                             92
     C                   if        *in92 = *off                                 If found
     C                   move      fsfsnm        d1fsnm
     C                   else
     C                   eval      d1fsnm = 'Unknown'
     C                   endif                                                  If found
      *
      * Only include records that match the user's selectors
      *
     C                   if        c1fsnm <> *blank
     C     lower:upper   xlate     c1fsnm        wkname
     C     lower:upper   xlate     d1fsnm        wkfsnm
     C     wkname:nbrcharscan      wkfsnm                                 92
     C                   if        *in92 = *off
     C                   move      no            procfl
     C                   endif
     C                   endif
      *
      *
     C                   if        c1fscd <> 0 and
     C                             c1fscd <> d1fscd
     C                   move      no            procfl
     C                   endif
      *
     C                   if        c1mdy  <> 0 and
     C                             c1mdy  <> d1mdy
     C                   move      no            procfl
     C                   endif
      *
      *
     C                   if        c1rqscd <> *blank and
     C                             c1rqscd <> d1rqscd
     C                   move      no            procfl
     C                   endif
      *
      *
     C                   if        procfl = yes                                 If process
     C                   add       1             count
     C                   add       1             hdrrn1
     C                   move      *blank        d1opt
     C                   write     hp4718s1
     C                   seton                                        81
      *
      * For positioning, place the subfile relative record number into
      * the sflrcdnbr field (hdpag1)
      *
     C                   eval      hdpag1 = hdrrn1
      *
     C                   endif                                                  If process
     C                   endif                                                  If continue
     C                   endif                                                  If read
     C                   enddo                                                  Do fill
      *
      * If no records were written to the subfile, then issue
      * the standard message 'No data to Display'.
      *
     C                   if        hdrrn1 = 0                                   If no recs
     C                   eval      norecs = yes
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09002'
     C                   endif
      *
     C                   else
     C                   eval      norecs = no
     C                   endif                                                  If no recs
      *
     C                   eval      svrrn1 = hdrrn1
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Call the create program when the user takes F6
      *---------------------------------------------------------------
      *
     C     $creat        begsr
      *
     C                   call      'HP1717'
     C                   parm      create        mode
     C                   parm      0             xxrqsn
     C                   parm                    rtncd
      *
     C                   endsr
      /EJECT
      *--------------------------------------------------------------------------------------
      * Read/edit changed subfile records for valid subfile options on screen 1
      *--------------------------------------------------------------------------------------
      *
     C     $edop1        begsr
      *
     C                   eval      error = 0
      *
      * Read all changed subfile records, editing for valid options
      *
     C                   setoff                                       80
     C                   dou       *in80 = *on                                  Do readc
     C                   readc     hp4718s1                               80
     C                   if        *in80 = *off                                 If rec read
      *
      * Set off error indicator for subfile option field
      *
     C                   setoff                                       30
      *
      * Convert option user entered to standard format. For example,
      * a ' 1', '01', and '1 ' must be standardized to ' 1'.
      *
     C                   if        wkopt2 = *blank                              If 2 = blank
     C                   eval      wkopt2 = wkopt1
     C                   eval      wkopt1 = *blank
     C                   endif                                                  If 2 = blank
      *
     C                   if        wkopt1 = *zero                               If 1 is zero
     C                   eval      wkopt1 = *blank
     C                   endif                                                  If 1 is zero
      *
      * Test for valid subfile option entry on all changed records
      *
     C                   if        d1opt <> ' 2' and                            If bad opt
     C                             d1opt <> ' 4' and
     C                             d1opt <> ' 5' and
     C                             d1opt <> ' 6' and
     C                             d1opt <> ' 8' and
     C                             d1opt <> '  '
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09006'
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If bad opt
      *
      * Revise
     C                   if        d1opt = ' 2'
     C                   exsr      $opt2
     C                   endif
      *
      * Delete request
     C                   if        d1opt = ' 4'
     C                   exsr      $opt4
     C                   endif
      *
      * E-mail request
     C                   if        d1opt = ' 8'
     C                   exsr      $opt8
     C                   endif
      *
      * Checks completed.
     C                   if        error = 0 and d1opt = *blank
     C                   setoff                                       85
     C                   else
     C                   seton                                        85
     C                   endif
      *
     C                   update    hp4718s1
     C                   setoff                                       8530
      *
     C                   endif                                                  If rec read
     C                   enddo                                                  Do readc
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------------------------------
      * Edits for Revising a Request
      *---------------------------------------------------------------------------------------
      *
      * You cannot revise a request that:
      *  1) has a status of Delete
      *
     C     $opt2         begsr
      *
     C                   select
     C                   when      d1rqscd = 'C'
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04770'
     C                   exsr      $err1
     C                   endif
      *
     C                   when      d1rqscd = 'D'
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04774'
     C                   exsr      $err1
     C                   endif
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------------------------------
      * Edits for Deleting a Request
      *---------------------------------------------------------------------------------------
      *
      * You cannot delete a request that:
      *  1) has a status of Completed
      *  2) had any 'completed' items
      *
     C     $opt4         begsr
      *
     C                   select
     C                   when      d1rqscd = 'H'
      *
     C                   when      d1rqscd = 'C'
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04770'
     C                   exsr      $err1
     C                   endif
      *
     C                   when      d1rqscd = 'D'
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04788'
     C                   exsr      $err1
     C                   endif
     C                   other
      *
      * Check for any 'C'ompleted lines on this request.
      * Check for any 'used' quantities on this request.
      *
     C                   move      no            clinesfl
     C                   move      no            usedqtfl
     C     hdrqsn        setll     hsl193d
      *
     C                   dou       *in91 = *on                                  Do detail lines
     C     hdrqsn        reade     hsl193d                                91
     C                   if        *in91 = *off                                 If not EOF
      *
     C                   if        qdrqscd = 'C'
     C                   move      yes           clinesfl
     C                   endif
      *
     C                   if        qdusqt <> 0
     C                   move      yes           usedqtfl
     C                   endif
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do detail lines
      *
      * If request has Completed lines.
      *
     C                   if        clinesfl = yes
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04771'
     C                   exsr      $err1
     C                   endif
     C                   endif
      *
      * If request has any lines with 'used' quantity.
      *
     C                   if        usedqtfl = yes
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04784'
     C                   exsr      $err1
     C                   endif
     C                   endif
      *
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------------------------------
      * Edits for E-mailing a Request
      *---------------------------------------------------------------------------------------
      *
      * To be valid for e-mailing, the request:
      *  1) must have a status of Hold
      *
     C     $opt8         begsr
      *
     C                   select
     C                   when      d1rqscd <> 'H'
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04803'
     C                   exsr      $err1
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------------------------------
      * Read subfile records and process user selections for screen 1
      *---------------------------------------------------------------------------------------
      *
     C     $proc1        begsr
      *
     C                   z-add     0             error
     C                   move      '00'          rtncd
      *
      * Read all the changed subfile records processing the subfile
      * selection
      *
     C                   setoff                                       80
     C                   dou       *in80 = *on                                  Do process
     C                   readc     hp4718s1                               80
     C                   if        *in80 = *off                                 If rec read
     C                   if        rtncd = '00'                                 If enter
      *
      * Option: Revise
     C                   select
     C                   when      d1opt = ' 2'
     C                   eval      reset = yes
      *
     C                   if        d1rqscd = 'H' or d1rqscd = 'E'
     C                   call      'HP1717'
     C                   parm      revise        mode
     C                   parm      hdrqsn        xxrqsn
     C                   parm                    rtncd
     C                   else
     C                   call      'HP1718'
     C                   parm      revise        mode
     C                   parm      hdrqsn        xxrqsn
     C                   parm                    rtncd
     C                   endif
      *
      * Option: Delete
     C                   when      d1opt = ' 4'
     C                   eval      reset = yes
      *
     C                   if        d1rqscd = 'H'
     C                   call      'HP1717'
     C                   parm      delete        mode
     C                   parm      hdrqsn        xxrqsn
     C                   parm                    rtncd
     C                   else
     C                   call      'HP3707'
     C                   parm                    hdrqsn
     C                   endif
      *
      *
      * Option: View
     C                   when      d1opt = ' 5'
     C                   eval      reset = yes
     C                   call      'HP7718'
     C                   parm                    hdrqsn
     C                   parm                    d1wo
     C                   parm                    d1fscd
     C                   parm                    d1fsnm
     C                   parm                    d1mdy
     C                   parm                    d1rqscd
     C                   parm                    d1com
      *
      * Option: Print
     C                   when      d1opt = ' 6'
     C                   eval      reset = yes
     C                   exsr      $list
      *
      * Option: E-mail
     C                   when      d1opt = ' 8'
     C                   eval      reset = yes
     C                   exsr      $list
     C                   endsl
      *
      * Upon returning from the called program,
      * clear the subfile option selected by the user and rewrite
      * the subfile record.
      *
     C                   eval      d1opt = *blank
     C                   setoff                                       85
     C                   else
     C                   seton                                        85
     C                   endif                                                  If enter
      *
     C                   update    hp4718s1
     C                   endif                                                  If rec read
      *
     C                   enddo                                                  Do process
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * F4 prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      * Include closed requests
      *
     C                   select
     C                   when      fld = 'C1YNFL'
     C                   call      'HP522'
     C                   parm                    xxynfl
     C                   seton                                        51
     C                   if        xxynfl <> *blank
     C                   movel     xxynfl        c1ynfl
     C                   endif
      *
      * Farm site
     C                   when      fld = 'C1FSCD'
     C                   call      'HP5040'
     C                   parm      ' '           xxaist
     C                   parm      0             xxfscd
     C                   parm      *blank        xxfsnm
     C                   seton                                        52
     C                   if        xxfscd <> 0
     C                   z-add     xxfscd        c1fscd
     C                   endif
      *
      * Request status
     C                   when      fld = 'C1RQSCD'
     C                   call      'HP5037'
     C                   parm      *blank        xxrqscd
     C                   parm      *blank        xxrqsds
     C                   seton                                        56
     C                   if        xxrqscd <> *blank
     C                   movel     xxrqscd       c1rqscd
     C                   endif
     C                   other
      *
      * F4 not valid for this field...issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error                                        013
     C                   movel     'HS09011'     mgid(e)
     C                   endif
      *
     C                   endsl
      *
     C                   endsr
      /EJECT
      *-----------------------------------------------------------------------------------
      * Set the subfile to redisplay at the first page that has errors on screen 1
      *-----------------------------------------------------------------------------------
      *
     C     $err1         begsr
      *
     C                   if        error = 1
     C                   eval      hdpag1 = hdrrn1
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Seton last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        lr
     C                   endsr
      *
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *   none
      *
      * Key lists
      *   None
      *
      * Default to 'no' the value for control field 'include closed budgets'
      *
     C                   move      no            c1ynfl
     C                   move      no            svynfl
      *
      * Initialize LDA fields
      *
     C                   move      yes           ld1stemail
     C                   move      *blank        ldver
     C                   move      *blank        ldemail
     C                   move      *blank        ldpbfl
     C                   z-add     0             ldfscd
     C                   z-add     0             ldcell
     C                   z-add     0             ldrqsn
     C                   move      *blank        ldwo
     C                   move      *blank        ldpmgcd
     C                   move      *blank        ldcmgcd
     C                   move      *blank        ldppcd
      *
     C                   move      *blank        ldfsnm
     C                   move      *blank        ldpmgnm
     C                   move      *blank        ldcmgnm
     C                   move      *blank        ldppds
      *
      *
     C                   move      no            ldhold
     C                   z-add     1             ldcopy
     C                   movel     ldoutu        ldoutq
      *
      *
      * To support F5-Refresh, logic requires the number of lines on
      * the subfile page and also the number of lines less 1.  By
      * setting these values up as constant work fields, the processing
      * logic can be standardized between programs.
      *
     C                   z-add     8             wkplin
     C     wkplin        sub       1             wkrlin
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
      *****************************************************************
      * COMPILE TIME ARRAY 'CMD' USED IN QCMDEXC
      *****************************************************************
** CMD table 'CMD' submits listing when F7 selected
SBMJOB CMD(CALL PGM(HP4718CL)) JOB(REQUEST  ) JOBQ(__________)
