// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBBRDFR
// ?Date: 14.08.2025 Time: 03:47:20
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

//?Traffic cannot change anything
// WRK.Generic Heading = CON.PORKTRAF
WRK.Generic_Heading = 'PORKTRAF';

// WRK.Generic Heading 1 = JOB.*USER
WRK.Generic_Heading_1 = JOB.*USER;

CASE;

// IF WRK.Generic Heading EQ WRK.Generic Heading 1
IF WRK.Generic_Heading = WRK.Generic_Heading_1;

// PAR.USR Output Only Status = CND.yes
PAR.USR_Output_Only_Status = 'Y';

ENDIF;

EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
PARAMETER(LCL.Company_Number);
PARAMETER('LPTDDTDIFF');
PARAMETER(PAR.USR_Hours_5_0);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize subfile control

CASE;

// IF PAR.Company Number is Equal to zero
IF PAR.Company_Number = *ZERO;

// CTL.Company Number = LCL.Company Number
CTL.Company_Number = LCL.Company_Number;

// CTL.Warehouse Code = LCL.Warehouse Code
CTL.Warehouse_Code = LCL.Warehouse_Code;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDIF;

CASE;

// IF CTL.LPT Load Plan Date is not entered
IF CTL.LPT_Load_Plan_Date = *ZERO;

// CTL.LPT Load Plan Date = JOB.*Job date
CTL.LPT_Load_Plan_Date = JOB.*Job_date;

ENDIF;

// PAR.Company Number = CTL.Company Number
PAR.Company_Number = CTL.Company_Number;

// PAR.Warehouse Code = CTL.Warehouse Code
PAR.Warehouse_Code = CTL.Warehouse_Code;

// PAR.LPT Load Plan Date = CTL.LPT Load Plan Date
PAR.LPT_Load_Plan_Date = CTL.LPT_Load_Plan_Date;

EXECUTE FUNCTION(VAL Shipp/Co Whs      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1779386;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Warehouse Description is equal to blank
IF LCL.Warehouse_Description = *BLANK;

// Send error message - 'Warehouse &1 cannot ship from Company &2'
ERROR(USR3362);
MSGPARM(CTL.Warehouse_Code);
MSGPARM(CTL.Company_Number);

// IF *OTHERWISE
IF *OTHERWISE;

//?Put the categories in the array in seq
EXECUTE FUNCTION(Rtv BLD Category Hdg  RT) TYPE(RTVOBJ) FILE(PBAEREP)           AC2033826;
PARAMETER(CTL.Company_Number);
PARAMETER(*ZERO);
PARAMETER(CTL.LPT_Category_1);
PARAMETER(CTL.LPT_Category_2);
PARAMETER(CTL.LPT_Category_3);
PARAMETER(CTL.LPT_Category_4);
PARAMETER(CTL.LPT_Category_5);
PARAMETER(CTL.LPT_Category_6);
PARAMETER(CTL.LPT_Category_7);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.LPC Display/Print Seq is one
 IF DB1.LPC_Display_Print_Seq = 1;

 // PAR.LPT Category 1 = DB1.LPC Category
 PAR.LPT_Category_1 = DB1.LPC_Category;

 // IF DB1.LPC Display/Print Seq is two
 IF DB1.LPC_Display_Print_Seq = 2;

 // PAR.LPT Category 2 = DB1.LPC Category
 PAR.LPT_Category_2 = DB1.LPC_Category;

 // IF DB1.LPC Display/Print Seq is three
 IF DB1.LPC_Display_Print_Seq = 3;

 // PAR.LPT Category 3 = DB1.LPC Category
 PAR.LPT_Category_3 = DB1.LPC_Category;

 // IF DB1.LPC Display/Print Seq is four
 IF DB1.LPC_Display_Print_Seq = 4;

 // PAR.LPT Category 4 = DB1.LPC Category
 PAR.LPT_Category_4 = DB1.LPC_Category;

 // IF DB1.LPC Display/Print Seq is five
 IF DB1.LPC_Display_Print_Seq = 5;

 // PAR.LPT Category 5 = DB1.LPC Category
 PAR.LPT_Category_5 = DB1.LPC_Category;

 // IF DB1.LPC Display/Print Seq is six
 IF DB1.LPC_Display_Print_Seq = 6;

 // PAR.LPT Category 6 = DB1.LPC Category
 PAR.LPT_Category_6 = DB1.LPC_Category;

 // IF DB1.LPC Display/Print Seq is seven
 IF DB1.LPC_Display_Print_Seq = 7;

 // PAR.LPT Category 7 = DB1.LPC Category
 PAR.LPT_Category_7 = DB1.LPC_Category;

 ENDIF;

}


//?Put the load counts in the heading
// CTL.Load Count 1 USR = CON.*ZERO
CTL.Load_Count_1_USR = *ZERO;

// CTL.Load Count 2 USR = CON.*ZERO
CTL.Load_Count_2_USR = *ZERO;

// CTL.Load Count 3 USR = CON.*ZERO
CTL.Load_Count_3_USR = *ZERO;

// CTL.Load Count 4 USR = CON.*ZERO
CTL.Load_Count_4_USR = *ZERO;

// CTL.Load Count 5 USR = CON.*ZERO
CTL.Load_Count_5_USR = *ZERO;

// CTL.Load Count 6 USR = CON.*ZERO
CTL.Load_Count_6_USR = *ZERO;

// CTL.Load Count 7 USR = CON.*ZERO
CTL.Load_Count_7_USR = *ZERO;

// Call program Zzz Gen Ld Pln Tm Sch XF.
CALL PROGRAM(Zzz Gen Ld Pln Tm Sch XF) ('PBBQXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.LPT_Load_Plan_Date);

EXECUTE FUNCTION(Rtv BLD Load# total   RT) TYPE(RTVOBJ) FILE(PBAFCPP)           AC2034163;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.LPT_Load_Plan_Date);
PARAMETER(CTL.LPT_Category_1);
PARAMETER(CTL.LPT_Category_2);
PARAMETER(CTL.LPT_Category_3);
PARAMETER(CTL.LPT_Category_4);
PARAMETER(CTL.LPT_Category_5);
PARAMETER(CTL.LPT_Category_6);
PARAMETER(CTL.LPT_Category_7);
PARAMETER(CTL.Load_Count_1_USR);
PARAMETER(CTL.Load_Count_2_USR);
PARAMETER(CTL.Load_Count_3_USR);
PARAMETER(CTL.Load_Count_4_USR);
PARAMETER(CTL.Load_Count_5_USR);
PARAMETER(CTL.Load_Count_6_USR);
PARAMETER(CTL.Load_Count_7_USR);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.LPC Category EQ PAR.LPT Category 1
 IF DB1.LPC_Category = PAR.LPT_Category_1;

 CASE;

 // IF DB1.LPT Load Id is GT Zero
 IF DB1.LPT_Load_Id > *ZERO;

 // PAR.Load Count 1 USR = PAR.Load Count 1 USR + CON.1
 PAR.Load_Count_1_USR = PAR.Load_Count_1_USR + 1;

 ENDIF;

 // IF DB1.LPC Category EQ PAR.LPT Category 2
 IF DB1.LPC_Category = PAR.LPT_Category_2;

 CASE;

 // IF DB1.LPT Load Id is NE Blank
 IF DB1.LPT_Load_Id <> *ZERO;

 // PAR.Load Count 2 USR = PAR.Load Count 2 USR + CON.1
 PAR.Load_Count_2_USR = PAR.Load_Count_2_USR + 1;

 ENDIF;

 // IF PAR.LPT Category 3 EQ DB1.LPC Category
 IF PAR.LPT_Category_3 = DB1.LPC_Category;

 CASE;

 // IF DB1.LPT Load Id is NE Blank
 IF DB1.LPT_Load_Id <> *ZERO;

 // PAR.Load Count 3 USR = PAR.Load Count 3 USR + CON.1
 PAR.Load_Count_3_USR = PAR.Load_Count_3_USR + 1;

 ENDIF;

 // IF PAR.LPT Category 4 EQ DB1.LPC Category
 IF PAR.LPT_Category_4 = DB1.LPC_Category;

 CASE;

 // IF DB1.LPT Load Id is NE Blank
 IF DB1.LPT_Load_Id <> *ZERO;

 // PAR.Load Count 4 USR = PAR.Load Count 4 USR + CON.1
 PAR.Load_Count_4_USR = PAR.Load_Count_4_USR + 1;

 ENDIF;

 // IF PAR.LPT Category 5 EQ DB1.LPC Category
 IF PAR.LPT_Category_5 = DB1.LPC_Category;

 CASE;

 // IF DB1.LPT Load Id is NE Blank
 IF DB1.LPT_Load_Id <> *ZERO;

 // PAR.Load Count 5 USR = PAR.Load Count 5 USR + CON.1
 PAR.Load_Count_5_USR = PAR.Load_Count_5_USR + 1;

 ENDIF;

 // IF PAR.LPT Category 6 EQ DB1.LPC Category
 IF PAR.LPT_Category_6 = DB1.LPC_Category;

 CASE;

 // IF DB1.LPT Load Id is NE Blank
 IF DB1.LPT_Load_Id <> *ZERO;

 // PAR.Load Count 6 USR = PAR.Load Count 6 USR + CON.1
 PAR.Load_Count_6_USR = PAR.Load_Count_6_USR + 1;

 ENDIF;

 // IF PAR.LPT Category 7 EQ DB1.LPC Category
 IF PAR.LPT_Category_7 = DB1.LPC_Category;

 CASE;

 // IF DB1.LPT Load Id is NE Blank
 IF DB1.LPT_Load_Id <> *ZERO;

 // PAR.Load Count 7 USR = PAR.Load Count 7 USR + CON.1
 PAR.Load_Count_7_USR = PAR.Load_Count_7_USR + 1;

 ENDIF;

 ENDIF;

}


ENDIF;

//?USER: Initialize subfile record from DBF record

CASE;

// IF RCD.LPT Load Plan Date NE CTL.LPT Load Plan Date
IF RCD.LPT_Load_Plan_Date <> CTL.LPT_Load_Plan_Date;

// OR RCD.Company Number NE CTL.Company Number
OR RCD.Company_Number <> CTL.Company_Number;

// OR RCD.Warehouse Code NE CTL.Warehouse Code
OR RCD.Warehouse_Code <> CTL.Warehouse_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Put the Load id in the array under the corr category
EXECUTE FUNCTION(Rtv BLD Array f/dsp   RT) TYPE(RTVOBJ) FILE(PBAFCPP)           AC2033812;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.LPT_Load_Plan_Date);
PARAMETER(RCD.LPT_Load_Plan_Time);
PARAMETER(CTL.LPT_Category_1);
PARAMETER(RCD.Load_Id_1);
PARAMETER(CTL.LPT_Category_2);
PARAMETER(RCD.Load_Id_2);
PARAMETER(CTL.LPT_Category_3);
PARAMETER(RCD.Load_Id_3);
PARAMETER(CTL.LPT_Category_4);
PARAMETER(RCD.Load_Id_4);
PARAMETER(CTL.LPT_Category_5);
PARAMETER(RCD.Load_Id_5);
PARAMETER(CTL.LPT_Category_6);
PARAMETER(RCD.Load_Id_6);
PARAMETER(CTL.LPT_Category_7);
PARAMETER(RCD.Load_Id_7);
PARAMETER(RCD.Carrier_Code_Usr_1);
PARAMETER(RCD.Carrier_Code_Usr_2);
PARAMETER(RCD.Carrier_Code_Usr_3);
PARAMETER(RCD.Carrier_Code_Usr_4);
PARAMETER(RCD.Carrier_Code_Usr_5);
PARAMETER(RCD.Carrier_Code_Usr_6);
PARAMETER(RCD.Carrier_Code_Usr_7);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.LPC Category EQ PAR.LPT Category 1
 IF DB1.LPC_Category = PAR.LPT_Category_1;

 // PAR.Load Id 1 = DB1.LPT Load Id
 PAR.Load_Id_1 = DB1.LPT_Load_Id;

 CASE;

 // IF PAR.Load Id 1 is NE Blank
 IF PAR.Load_Id_1 <> *ZERO;

 EXECUTE FUNCTION(RTV Carrier Code       RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1486426;
 PARAMETER(PAR.Load_Id_1);
 PARAMETER(PAR.Carrier_Code_Usr_1);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 // IF DB1.LPC Category EQ PAR.LPT Category 2
 IF DB1.LPC_Category = PAR.LPT_Category_2;

 // PAR.Load Id 2 = DB1.LPT Load Id
 PAR.Load_Id_2 = DB1.LPT_Load_Id;

 CASE;

 // IF PAR.Load Id 2 is NE Blank
 IF PAR.Load_Id_2 <> *ZERO;

 EXECUTE FUNCTION(RTV Carrier Code       RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1486426;
 PARAMETER(PAR.Load_Id_2);
 PARAMETER(PAR.Carrier_Code_Usr_2);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 // IF PAR.LPT Category 3 EQ DB1.LPC Category
 IF PAR.LPT_Category_3 = DB1.LPC_Category;

 // PAR.Load Id 3 = DB1.LPT Load Id
 PAR.Load_Id_3 = DB1.LPT_Load_Id;

 CASE;

 // IF PAR.Load Id 3 is NE Blank
 IF PAR.Load_Id_3 <> *ZERO;

 EXECUTE FUNCTION(RTV Carrier Code       RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1486426;
 PARAMETER(PAR.Load_Id_3);
 PARAMETER(PAR.Carrier_Code_Usr_3);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 // IF PAR.LPT Category 4 EQ DB1.LPC Category
 IF PAR.LPT_Category_4 = DB1.LPC_Category;

 // PAR.Load Id 4 = DB1.LPT Load Id
 PAR.Load_Id_4 = DB1.LPT_Load_Id;

 CASE;

 // IF PAR.Load Id 4 is NE Blank
 IF PAR.Load_Id_4 <> *ZERO;

 EXECUTE FUNCTION(RTV Carrier Code       RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1486426;
 PARAMETER(PAR.Load_Id_4);
 PARAMETER(PAR.Carrier_Code_Usr_4);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 // IF PAR.LPT Category 5 EQ DB1.LPC Category
 IF PAR.LPT_Category_5 = DB1.LPC_Category;

 // PAR.Load Id 5 = DB1.LPT Load Id
 PAR.Load_Id_5 = DB1.LPT_Load_Id;

 CASE;

 // IF PAR.Load Id 5 is NE Blank
 IF PAR.Load_Id_5 <> *ZERO;

 EXECUTE FUNCTION(RTV Carrier Code       RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1486426;
 PARAMETER(PAR.Load_Id_5);
 PARAMETER(PAR.Carrier_Code_Usr_5);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 // IF PAR.LPT Category 6 EQ DB1.LPC Category
 IF PAR.LPT_Category_6 = DB1.LPC_Category;

 // PAR.Load Id 6 = DB1.LPT Load Id
 PAR.Load_Id_6 = DB1.LPT_Load_Id;

 CASE;

 // IF PAR.Load Id 6 is NE Blank
 IF PAR.Load_Id_6 <> *ZERO;

 EXECUTE FUNCTION(RTV Carrier Code       RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1486426;
 PARAMETER(PAR.Load_Id_6);
 PARAMETER(PAR.Carrier_Code_Usr_6);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 // IF PAR.LPT Category 7 EQ DB1.LPC Category
 IF PAR.LPT_Category_7 = DB1.LPC_Category;

 // PAR.Load Id 7 = DB1.LPT Load Id
 PAR.Load_Id_7 = DB1.LPT_Load_Id;

 CASE;

 // IF PAR.Load Id 7 is NE Blank
 IF PAR.Load_Id_7 <> *ZERO;

 EXECUTE FUNCTION(RTV Carrier Code       RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1486426;
 PARAMETER(PAR.Load_Id_7);
 PARAMETER(PAR.Carrier_Code_Usr_7);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 ENDIF;

}


//?USER: Process subfile control (Pre-confirm)

//?F4=Prompt
CASE;

// IF CTL.*CMD key is CF04
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Company Number
IF PGM.*Cursor_field = CTL.Company_Number;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(CTL.Company_Number);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> CTL.Warehouse Code
IF PGM.*Cursor_field = CTL.Warehouse_Code;

// Call program SEL ShipCo/Warehouse   SR.
CALL PROGRAM(SEL ShipCo/Warehouse   SR) ('PPHQSRR');
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Company_Number);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> CTL.LPT Load Plan Date
IF PGM.*Cursor_field = CTL.LPT_Load_Plan_Date;

// Call program Zzz Load Plan Date    SL.
CALL PROGRAM(Zzz Load Plan Date    SL) ('PBBTSRR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.LPT_Load_Plan_Date);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

CASE;

// IF CTL.Company Number NE PAR.Company Number
IF CTL.Company_Number <> PAR.Company_Number;

// OR CTL.Warehouse Code NE PAR.Warehouse Code
OR CTL.Warehouse_Code <> PAR.Warehouse_Code;

// OR CTL.LPT Load Plan Date NE PAR.LPT Load Plan Date
OR CTL.LPT_Load_Plan_Date <> PAR.LPT_Load_Plan_Date;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F10=Inq
CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

// Call program DSP Ord Inq for Shppng DF.
CALL PROGRAM(DSP Ord Inq for Shppng DF) ('PDRBDFR');

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?F21=Email
CASE;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

// LCL.Number Value - 7 = CTL.LPT Load Plan Date
LCL.Number_Value_7 = CTL.LPT_Load_Plan_Date;

// Execute command - 'EXECUTE SQL VIEW'
EXECUTE COMMAND(USR4486);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Warehouse_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?F4=Load Id
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> RCD.Load Id 1
IF PGM.*Cursor_field = RCD.Load_Id_1;

// Call program Zzz Load ID by Whs     SR.
CALL PROGRAM(Zzz Load ID by Whs     SR) ('PBBUSRR');
PARAMETER(RCD.Load_Id_1);
PARAMETER(CTL.LPT_Load_Plan_Date);
PARAMETER(CTL.Warehouse_Code);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> RCD.Load Id 2
IF PGM.*Cursor_field = RCD.Load_Id_2;

// Call program Zzz Load ID by Whs     SR.
CALL PROGRAM(Zzz Load ID by Whs     SR) ('PBBUSRR');
PARAMETER(RCD.Load_Id_2);
PARAMETER(CTL.LPT_Load_Plan_Date);
PARAMETER(CTL.Warehouse_Code);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> RCD.Load Id 3
IF PGM.*Cursor_field = RCD.Load_Id_3;

// Call program Zzz Load ID by Whs     SR.
CALL PROGRAM(Zzz Load ID by Whs     SR) ('PBBUSRR');
PARAMETER(RCD.Load_Id_3);
PARAMETER(CTL.LPT_Load_Plan_Date);
PARAMETER(CTL.Warehouse_Code);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> RCD.Load Id 4
IF PGM.*Cursor_field = RCD.Load_Id_4;

// Call program Zzz Load ID by Whs     SR.
CALL PROGRAM(Zzz Load ID by Whs     SR) ('PBBUSRR');
PARAMETER(RCD.Load_Id_4);
PARAMETER(CTL.LPT_Load_Plan_Date);
PARAMETER(CTL.Warehouse_Code);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> RCD.Load Id 5
IF PGM.*Cursor_field = RCD.Load_Id_5;

// Call program Zzz Load ID by Whs     SR.
CALL PROGRAM(Zzz Load ID by Whs     SR) ('PBBUSRR');
PARAMETER(RCD.Load_Id_5);
PARAMETER(CTL.LPT_Load_Plan_Date);
PARAMETER(CTL.Warehouse_Code);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> RCD.Load Id 6
IF PGM.*Cursor_field = RCD.Load_Id_6;

// Call program Zzz Load ID by Whs     SR.
CALL PROGRAM(Zzz Load ID by Whs     SR) ('PBBUSRR');
PARAMETER(RCD.Load_Id_6);
PARAMETER(CTL.LPT_Load_Plan_Date);
PARAMETER(CTL.Warehouse_Code);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> RCD.Load Id 7
IF PGM.*Cursor_field = RCD.Load_Id_7;

// Call program Zzz Load ID by Whs     SR.
CALL PROGRAM(Zzz Load ID by Whs     SR) ('PBBUSRR');
PARAMETER(RCD.Load_Id_7);
PARAMETER(CTL.LPT_Load_Plan_Date);
PARAMETER(CTL.Warehouse_Code);

ENDIF;

ENDIF;

// LCL.Error Status = CND.no
LCL.Error_Status = 'N';

//?Validate Load Id 1
CASE;

// IF RCD.Load Id 1 is NE Blank
IF RCD.Load_Id_1 <> *ZERO;

EXECUTE FUNCTION(RTV LoadSts/Carrier    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1648402;
PARAMETER(RCD.Load_Id_1);
PARAMETER(LCL.Load_Status);
PARAMETER(RCD.Carrier_Code_Usr_1);
PARAMETER(LCL.Export_Status);
PARAMETER(LCL.Load_Acceptance_Flag);
PARAMETER(LCL.Deadline_Departure_Date);
PARAMETER(LCL.Deadline_Departure_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Load Status is Shipped or Invoiced
IF LCL.Load_Status = 'I'/'S';

// LCL.Condition Desc. 1  USR = Condition name of LCL.Load Status
LCL.Condition_Desc_1_USR = RTVCND(LCL.Load_Status);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

// Send error message - 'Load has status &1'
ERROR(USR4485);
MSGPARM(LCL.Condition_Desc_1_USR);
MSGPARM(RCD.Load_Id_1);

// IF LCL.Load Status is *Blank
IF LCL.Load_Status = *BLANK;

SET CURSOR;

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

// Send error message - 'Load Id is not found'
ERROR(USR2783);
MSGPARM(RCD.Load_Id_1);

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Time Entered = RCD.LPT Load Plan Time * CON.100 *
LCL.Time_Entered = RCD.LPT_Load_Plan_Time * 100;

//?Validate Load Plan Time earlier than DDT
CASE;

// IF RCD.LPT Load Plan Date EQ LCL.Deadline Departure Date
IF RCD.LPT_Load_Plan_Date = LCL.Deadline_Departure_Date;

//?Entered time must be at least N hours prior ddt
CASE;

// IF LCL.Deadline Departure Time GT LCL.Time Entered
IF LCL.Deadline_Departure_Time > LCL.Time_Entered;

// LCL.Hour 1 USR = LCL.Deadline Departure Time - LCL.Time Entered *HOURS
LCL.Hour_1_USR = TIMELAPSED(LCL.Deadline_Departure_Time LCL.Time_Entered 'HR');

CASE;

// IF LCL.Hour 1 USR LT PAR.USR Hours 5.0
IF LCL.Hour_1_USR < PAR.USR_Hours_5_0;

// Send error message - 'Time must be &1 hours before deadline departure time &3 &4'
ERROR(USR4499);
MSGPARM(PAR.USR_Hours_5_0);
MSGPARM(RCD.Load_Id_1);
MSGPARM(LCL.Deadline_Departure_Date);
MSGPARM(LCL.Deadline_Departure_Time);

ENDIF;

//?Entered time must be at least N hours prior ddt
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Time must be &1 hours before deadline departure time &3 &4'
ERROR(USR4499);
MSGPARM(PAR.USR_Hours_5_0);
MSGPARM(RCD.Load_Id_1);
MSGPARM(LCL.Deadline_Departure_Date);
MSGPARM(LCL.Deadline_Departure_Time);

ENDIF;

//?Validate Load Plan Time earlier than DDT
// IF RCD.LPT Load Plan Date GT LCL.Deadline Departure Date
IF RCD.LPT_Load_Plan_Date > LCL.Deadline_Departure_Date;

// Send error message - 'Time must be &1 hours before deadline departure time &3 &4'
ERROR(USR4499);
MSGPARM(PAR.USR_Hours_5_0);
MSGPARM(RCD.Load_Id_1);
MSGPARM(LCL.Deadline_Departure_Date);
MSGPARM(LCL.Deadline_Departure_Time);

//?Validate Load Plan Time earlier than DDT
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Days = LCL.Deadline Departure Date - CTL.LPT Load Plan Date *DAYS
LCL.Days = DURATION(LCL.Deadline_Departure_Date CTL.LPT_Load_Plan_Date 'DY' 1111111                +
'NONE' 'N' 1);

CASE;

// IF LCL.Days is gt 1 day
IF LCL.Days > 1;

//?ok
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Hour 1 USR = LCL.Deadline Departure Time - LCL.Time Entered *HOURS
LCL.Hour_1_USR = TIMELAPSED(LCL.Deadline_Departure_Time LCL.Time_Entered 'HR');

// LCL.Hour 1 USR = LCL.Hour 1 USR + CON.24
LCL.Hour_1_USR = LCL.Hour_1_USR + 24;

CASE;

// IF LCL.Hour 1 USR LT PAR.USR Hours 5.0
IF LCL.Hour_1_USR < PAR.USR_Hours_5_0;

// Send error message - 'Time must be &1 hours before deadline departure time &3 &4'
ERROR(USR4499);
MSGPARM(PAR.USR_Hours_5_0);
MSGPARM(RCD.Load_Id_1);
MSGPARM(LCL.Deadline_Departure_Date);
MSGPARM(LCL.Deadline_Departure_Time);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Validate Load Id 2
CASE;

// IF RCD.Load Id 2 is NE Blank
IF RCD.Load_Id_2 <> *ZERO;

EXECUTE FUNCTION(RTV LoadSts/Carrier    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1648402;
PARAMETER(RCD.Load_Id_2);
PARAMETER(LCL.Load_Status);
PARAMETER(RCD.Carrier_Code_Usr_2);
PARAMETER(LCL.Export_Status);
PARAMETER(LCL.Load_Acceptance_Flag);
PARAMETER(LCL.Deadline_Departure_Date);
PARAMETER(LCL.Deadline_Departure_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Load Status is Shipped or Invoiced
IF LCL.Load_Status = 'I'/'S';

// LCL.Condition Desc. 1  USR = Condition name of LCL.Load Status
LCL.Condition_Desc_1_USR = RTVCND(LCL.Load_Status);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

// Send error message - 'Load has status &1'
ERROR(USR4485);
MSGPARM(LCL.Condition_Desc_1_USR);
MSGPARM(RCD.Load_Id_2);

// IF LCL.Load Status is *Blank
IF LCL.Load_Status = *BLANK;

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

SET CURSOR;

// Send error message - 'Load Id is not found'
ERROR(USR2783);
MSGPARM(RCD.Load_Id_2);

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Time Entered = RCD.LPT Load Plan Time * CON.100 *
LCL.Time_Entered = RCD.LPT_Load_Plan_Time * 100;

//?Validate Load Plan Time earlier than DDT
CASE;

// IF RCD.LPT Load Plan Date EQ LCL.Deadline Departure Date
IF RCD.LPT_Load_Plan_Date = LCL.Deadline_Departure_Date;

//?Entered time must be at least N hours prior ddt
CASE;

// IF LCL.Deadline Departure Time GT LCL.Time Entered
IF LCL.Deadline_Departure_Time > LCL.Time_Entered;

// LCL.Hour 1 USR = LCL.Deadline Departure Time - LCL.Time Entered *HOURS
LCL.Hour_1_USR = TIMELAPSED(LCL.Deadline_Departure_Time LCL.Time_Entered 'HR');

CASE;

// IF LCL.Hour 1 USR LT PAR.USR Hours 5.0
IF LCL.Hour_1_USR < PAR.USR_Hours_5_0;

// Send error message - 'Time must be &1 hours before deadline departure time &3 &4'
ERROR(USR4499);
MSGPARM(PAR.USR_Hours_5_0);
MSGPARM(RCD.Load_Id_2);
MSGPARM(LCL.Deadline_Departure_Date);
MSGPARM(LCL.Deadline_Departure_Time);

ENDIF;

//?Entered time must be at least N hours prior ddt
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Time must be &1 hours before deadline departure time &3 &4'
ERROR(USR4499);
MSGPARM(PAR.USR_Hours_5_0);
MSGPARM(RCD.Load_Id_2);
MSGPARM(LCL.Deadline_Departure_Date);
MSGPARM(LCL.Deadline_Departure_Time);

ENDIF;

//?Validate Load Plan Time earlier than DDT
// IF RCD.LPT Load Plan Date GT LCL.Deadline Departure Date
IF RCD.LPT_Load_Plan_Date > LCL.Deadline_Departure_Date;

// Send error message - 'Time must be &1 hours before deadline departure time &3 &4'
ERROR(USR4499);
MSGPARM(PAR.USR_Hours_5_0);
MSGPARM(RCD.Load_Id_2);
MSGPARM(LCL.Deadline_Departure_Date);
MSGPARM(LCL.Deadline_Departure_Time);

//?Validate Load Plan Time earlier than DDT
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Days = LCL.Deadline Departure Date - CTL.LPT Load Plan Date *DAYS
LCL.Days = DURATION(LCL.Deadline_Departure_Date CTL.LPT_Load_Plan_Date 'DY' 1111111                +
'NONE' 'N' 1);

CASE;

// IF LCL.Days is gt 1 day
IF LCL.Days > 1;

//?ok
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Hour 1 USR = LCL.Deadline Departure Time - LCL.Time Entered *HOURS
LCL.Hour_1_USR = TIMELAPSED(LCL.Deadline_Departure_Time LCL.Time_Entered 'HR');

// LCL.Hour 1 USR = LCL.Hour 1 USR + CON.24
LCL.Hour_1_USR = LCL.Hour_1_USR + 24;

CASE;

// IF LCL.Hour 1 USR LT PAR.USR Hours 5.0
IF LCL.Hour_1_USR < PAR.USR_Hours_5_0;

// Send error message - 'Time must be &1 hours before deadline departure time &3 &4'
ERROR(USR4499);
MSGPARM(PAR.USR_Hours_5_0);
MSGPARM(RCD.Load_Id_2);
MSGPARM(LCL.Deadline_Departure_Date);
MSGPARM(LCL.Deadline_Departure_Time);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Validate Load Id 3
CASE;

// IF RCD.Load Id 3 is NE Blank
IF RCD.Load_Id_3 <> *ZERO;

EXECUTE FUNCTION(RTV LoadSts/Carrier    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1648402;
PARAMETER(RCD.Load_Id_3);
PARAMETER(LCL.Load_Status);
PARAMETER(RCD.Carrier_Code_Usr_3);
PARAMETER(LCL.Export_Status);
PARAMETER(LCL.Load_Acceptance_Flag);
PARAMETER(LCL.Deadline_Departure_Date);
PARAMETER(LCL.Deadline_Departure_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Load Status is Shipped or Invoiced
IF LCL.Load_Status = 'I'/'S';

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

// LCL.Condition Desc. 1  USR = Condition name of LCL.Load Status
LCL.Condition_Desc_1_USR = RTVCND(LCL.Load_Status);

// Send error message - 'Load has status &1'
ERROR(USR4485);
MSGPARM(LCL.Condition_Desc_1_USR);
MSGPARM(RCD.Load_Id_3);

// IF LCL.Load Status is *Blank
IF LCL.Load_Status = *BLANK;

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

SET CURSOR;

// Send error message - 'Load Id is not found'
ERROR(USR2783);
MSGPARM(RCD.Load_Id_3);

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Time Entered = RCD.LPT Load Plan Time * CON.100 *
LCL.Time_Entered = RCD.LPT_Load_Plan_Time * 100;

//?Validate Load Plan Time earlier than DDT
CASE;

// IF RCD.LPT Load Plan Date EQ LCL.Deadline Departure Date
IF RCD.LPT_Load_Plan_Date = LCL.Deadline_Departure_Date;

//?Entered time must be at least N hours prior ddt
CASE;

// IF LCL.Deadline Departure Time GT LCL.Time Entered
IF LCL.Deadline_Departure_Time > LCL.Time_Entered;

// LCL.Hour 1 USR = LCL.Deadline Departure Time - LCL.Time Entered *HOURS
LCL.Hour_1_USR = TIMELAPSED(LCL.Deadline_Departure_Time LCL.Time_Entered 'HR');

CASE;

// IF LCL.Hour 1 USR LT PAR.USR Hours 5.0
IF LCL.Hour_1_USR < PAR.USR_Hours_5_0;

// Send error message - 'Time must be &1 hours before deadline departure time &3 &4'
ERROR(USR4499);
MSGPARM(PAR.USR_Hours_5_0);
MSGPARM(RCD.Load_Id_3);
MSGPARM(LCL.Deadline_Departure_Date);
MSGPARM(LCL.Deadline_Departure_Time);

ENDIF;

//?Entered time must be at least N hours prior ddt
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Time must be &1 hours before deadline departure time &3 &4'
ERROR(USR4499);
MSGPARM(PAR.USR_Hours_5_0);
MSGPARM(RCD.Load_Id_3);
MSGPARM(LCL.Deadline_Departure_Date);
MSGPARM(LCL.Deadline_Departure_Time);

ENDIF;

//?Validate Load Plan Time earlier than DDT
// IF RCD.LPT Load Plan Date GT LCL.Deadline Departure Date
IF RCD.LPT_Load_Plan_Date > LCL.Deadline_Departure_Date;

// Send error message - 'Time must be &1 hours before deadline departure time &3 &4'
ERROR(USR4499);
MSGPARM(PAR.USR_Hours_5_0);
MSGPARM(RCD.Load_Id_3);
MSGPARM(LCL.Deadline_Departure_Date);
MSGPARM(LCL.Deadline_Departure_Time);

//?Validate Load Plan Time earlier than DDT
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Days = LCL.Deadline Departure Date - CTL.LPT Load Plan Date *DAYS
LCL.Days = DURATION(LCL.Deadline_Departure_Date CTL.LPT_Load_Plan_Date 'DY' 1111111                +
'NONE' 'N' 1);

CASE;

// IF LCL.Days is gt 1 day
IF LCL.Days > 1;

//?ok
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Hour 1 USR = LCL.Deadline Departure Time - LCL.Time Entered *HOURS
LCL.Hour_1_USR = TIMELAPSED(LCL.Deadline_Departure_Time LCL.Time_Entered 'HR');

// LCL.Hour 1 USR = LCL.Hour 1 USR + CON.24
LCL.Hour_1_USR = LCL.Hour_1_USR + 24;

CASE;

// IF LCL.Hour 1 USR LT PAR.USR Hours 5.0
IF LCL.Hour_1_USR < PAR.USR_Hours_5_0;

// Send error message - 'Time must be &1 hours before deadline departure time &3 &4'
ERROR(USR4499);
MSGPARM(PAR.USR_Hours_5_0);
MSGPARM(RCD.Load_Id_3);
MSGPARM(LCL.Deadline_Departure_Date);
MSGPARM(LCL.Deadline_Departure_Time);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Validate Load Id 4
CASE;

// IF RCD.Load Id 4 is NE Blank
IF RCD.Load_Id_4 <> *ZERO;

EXECUTE FUNCTION(RTV LoadSts/Carrier    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1648402;
PARAMETER(RCD.Load_Id_4);
PARAMETER(LCL.Load_Status);
PARAMETER(RCD.Carrier_Code_Usr_4);
PARAMETER(LCL.Export_Status);
PARAMETER(LCL.Load_Acceptance_Flag);
PARAMETER(LCL.Deadline_Departure_Date);
PARAMETER(LCL.Deadline_Departure_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Load Status is Shipped or Invoiced
IF LCL.Load_Status = 'I'/'S';

// LCL.Condition Desc. 1  USR = Condition name of LCL.Load Status
LCL.Condition_Desc_1_USR = RTVCND(LCL.Load_Status);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

// Send error message - 'Load has status &1'
ERROR(USR4485);
MSGPARM(LCL.Condition_Desc_1_USR);
MSGPARM(RCD.Load_Id_4);

// IF LCL.Load Status is *Blank
IF LCL.Load_Status = *BLANK;

SET CURSOR;

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

// Send error message - 'Load Id is not found'
ERROR(USR2783);
MSGPARM(RCD.Load_Id_4);

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Time Entered = RCD.LPT Load Plan Time * CON.100 *
LCL.Time_Entered = RCD.LPT_Load_Plan_Time * 100;

//?Validate Load Plan Time earlier than DDT
CASE;

// IF RCD.LPT Load Plan Date EQ LCL.Deadline Departure Date
IF RCD.LPT_Load_Plan_Date = LCL.Deadline_Departure_Date;

//?Entered time must be at least N hours prior ddt
CASE;

// IF LCL.Deadline Departure Time GT LCL.Time Entered
IF LCL.Deadline_Departure_Time > LCL.Time_Entered;

// LCL.Hour 1 USR = LCL.Deadline Departure Time - LCL.Time Entered *HOURS
LCL.Hour_1_USR = TIMELAPSED(LCL.Deadline_Departure_Time LCL.Time_Entered 'HR');

CASE;

// IF LCL.Hour 1 USR LT PAR.USR Hours 5.0
IF LCL.Hour_1_USR < PAR.USR_Hours_5_0;

// Send error message - 'Time must be &1 hours before deadline departure time &3 &4'
ERROR(USR4499);
MSGPARM(PAR.USR_Hours_5_0);
MSGPARM(RCD.Load_Id_4);
MSGPARM(LCL.Deadline_Departure_Date);
MSGPARM(LCL.Deadline_Departure_Time);

ENDIF;

//?Entered time must be at least N hours prior ddt
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Time must be &1 hours before deadline departure time &3 &4'
ERROR(USR4499);
MSGPARM(PAR.USR_Hours_5_0);
MSGPARM(RCD.Load_Id_4);
MSGPARM(LCL.Deadline_Departure_Date);
MSGPARM(LCL.Deadline_Departure_Time);

ENDIF;

//?Validate Load Plan Time earlier than DDT
// IF RCD.LPT Load Plan Date GT LCL.Deadline Departure Date
IF RCD.LPT_Load_Plan_Date > LCL.Deadline_Departure_Date;

// Send error message - 'Time must be &1 hours before deadline departure time &3 &4'
ERROR(USR4499);
MSGPARM(PAR.USR_Hours_5_0);
MSGPARM(RCD.Load_Id_4);
MSGPARM(LCL.Deadline_Departure_Date);
MSGPARM(LCL.Deadline_Departure_Time);

//?Validate Load Plan Time earlier than DDT
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Days = LCL.Deadline Departure Date - CTL.LPT Load Plan Date *DAYS
LCL.Days = DURATION(LCL.Deadline_Departure_Date CTL.LPT_Load_Plan_Date 'DY' 1111111                +
'NONE' 'N' 1);

CASE;

// IF LCL.Days is gt 1 day
IF LCL.Days > 1;

//?ok
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Hour 1 USR = LCL.Deadline Departure Time - LCL.Time Entered *HOURS
LCL.Hour_1_USR = TIMELAPSED(LCL.Deadline_Departure_Time LCL.Time_Entered 'HR');

// LCL.Hour 1 USR = LCL.Hour 1 USR + CON.24
LCL.Hour_1_USR = LCL.Hour_1_USR + 24;

CASE;

// IF LCL.Hour 1 USR LT PAR.USR Hours 5.0
IF LCL.Hour_1_USR < PAR.USR_Hours_5_0;

// Send error message - 'Time must be &1 hours before deadline departure time &3 &4'
ERROR(USR4499);
MSGPARM(PAR.USR_Hours_5_0);
MSGPARM(RCD.Load_Id_4);
MSGPARM(LCL.Deadline_Departure_Date);
MSGPARM(LCL.Deadline_Departure_Time);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Validate Load Id 5
CASE;

// IF RCD.Load Id 5 is NE Blank
IF RCD.Load_Id_5 <> *ZERO;

EXECUTE FUNCTION(RTV LoadSts/Carrier    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1648402;
PARAMETER(RCD.Load_Id_5);
PARAMETER(LCL.Load_Status);
PARAMETER(RCD.Carrier_Code_Usr_5);
PARAMETER(LCL.Export_Status);
PARAMETER(LCL.Load_Acceptance_Flag);
PARAMETER(LCL.Deadline_Departure_Date);
PARAMETER(LCL.Deadline_Departure_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Load Status is Shipped or Invoiced
IF LCL.Load_Status = 'I'/'S';

// LCL.Condition Desc. 1  USR = Condition name of LCL.Load Status
LCL.Condition_Desc_1_USR = RTVCND(LCL.Load_Status);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

// Send error message - 'Load has status &1'
ERROR(USR4485);
MSGPARM(LCL.Condition_Desc_1_USR);
MSGPARM(RCD.Load_Id_5);

// IF LCL.Load Status is *Blank
IF LCL.Load_Status = *BLANK;

SET CURSOR;

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

// Send error message - 'Load Id is not found'
ERROR(USR2783);
MSGPARM(RCD.Load_Id_5);

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Time Entered = RCD.LPT Load Plan Time * CON.100 *
LCL.Time_Entered = RCD.LPT_Load_Plan_Time * 100;

//?Validate Load Plan Time earlier than DDT
CASE;

// IF RCD.LPT Load Plan Date EQ LCL.Deadline Departure Date
IF RCD.LPT_Load_Plan_Date = LCL.Deadline_Departure_Date;

//?Entered time must be at least N hours prior ddt
CASE;

// IF LCL.Deadline Departure Time GT LCL.Time Entered
IF LCL.Deadline_Departure_Time > LCL.Time_Entered;

// LCL.Hour 1 USR = LCL.Deadline Departure Time - LCL.Time Entered *HOURS
LCL.Hour_1_USR = TIMELAPSED(LCL.Deadline_Departure_Time LCL.Time_Entered 'HR');

CASE;

// IF LCL.Hour 1 USR LT PAR.USR Hours 5.0
IF LCL.Hour_1_USR < PAR.USR_Hours_5_0;

// Send error message - 'Time must be &1 hours before deadline departure time &3 &4'
ERROR(USR4499);
MSGPARM(PAR.USR_Hours_5_0);
MSGPARM(RCD.Load_Id_5);
MSGPARM(LCL.Deadline_Departure_Date);
MSGPARM(LCL.Deadline_Departure_Time);

ENDIF;

//?Entered time must be at least N hours prior ddt
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Time must be &1 hours before deadline departure time &3 &4'
ERROR(USR4499);
MSGPARM(PAR.USR_Hours_5_0);
MSGPARM(RCD.Load_Id_5);
MSGPARM(LCL.Deadline_Departure_Date);
MSGPARM(LCL.Deadline_Departure_Time);

ENDIF;

//?Validate Load Plan Time earlier than DDT
// IF RCD.LPT Load Plan Date GT LCL.Deadline Departure Date
IF RCD.LPT_Load_Plan_Date > LCL.Deadline_Departure_Date;

// Send error message - 'Time must be &1 hours before deadline departure time &3 &4'
ERROR(USR4499);
MSGPARM(PAR.USR_Hours_5_0);
MSGPARM(RCD.Load_Id_5);
MSGPARM(LCL.Deadline_Departure_Date);
MSGPARM(LCL.Deadline_Departure_Time);

//?Validate Load Plan Time earlier than DDT
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Days = LCL.Deadline Departure Date - CTL.LPT Load Plan Date *DAYS
LCL.Days = DURATION(LCL.Deadline_Departure_Date CTL.LPT_Load_Plan_Date 'DY' 1111111                +
'NONE' 'N' 1);

CASE;

// IF LCL.Days is gt 1 day
IF LCL.Days > 1;

//?ok
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Hour 1 USR = LCL.Deadline Departure Time - LCL.Time Entered *HOURS
LCL.Hour_1_USR = TIMELAPSED(LCL.Deadline_Departure_Time LCL.Time_Entered 'HR');

// LCL.Hour 1 USR = LCL.Hour 1 USR + CON.24
LCL.Hour_1_USR = LCL.Hour_1_USR + 24;

CASE;

// IF LCL.Hour 1 USR LT PAR.USR Hours 5.0
IF LCL.Hour_1_USR < PAR.USR_Hours_5_0;

// Send error message - 'Time must be &1 hours before deadline departure time &3 &4'
ERROR(USR4499);
MSGPARM(PAR.USR_Hours_5_0);
MSGPARM(RCD.Load_Id_5);
MSGPARM(LCL.Deadline_Departure_Date);
MSGPARM(LCL.Deadline_Departure_Time);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Validate Load Id 6
CASE;

// IF RCD.Load Id 6 is NE Blank
IF RCD.Load_Id_6 <> *ZERO;

EXECUTE FUNCTION(RTV LoadSts/Carrier    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1648402;
PARAMETER(RCD.Load_Id_6);
PARAMETER(LCL.Load_Status);
PARAMETER(RCD.Carrier_Code_Usr_6);
PARAMETER(LCL.Export_Status);
PARAMETER(LCL.Load_Acceptance_Flag);
PARAMETER(LCL.Deadline_Departure_Date);
PARAMETER(LCL.Deadline_Departure_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Load Status is Shipped or Invoiced
IF LCL.Load_Status = 'I'/'S';

// LCL.Condition Desc. 1  USR = Condition name of LCL.Load Status
LCL.Condition_Desc_1_USR = RTVCND(LCL.Load_Status);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

// Send error message - 'Load has status &1'
ERROR(USR4485);
MSGPARM(LCL.Condition_Desc_1_USR);
MSGPARM(RCD.Load_Id_6);

// IF LCL.Load Status is *Blank
IF LCL.Load_Status = *BLANK;

SET CURSOR;

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

// Send error message - 'Load Id is not found'
ERROR(USR2783);
MSGPARM(RCD.Load_Id_6);

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Time Entered = RCD.LPT Load Plan Time * CON.100 *
LCL.Time_Entered = RCD.LPT_Load_Plan_Time * 100;

//?Validate Load Plan Time earlier than DDT
CASE;

// IF RCD.LPT Load Plan Date EQ LCL.Deadline Departure Date
IF RCD.LPT_Load_Plan_Date = LCL.Deadline_Departure_Date;

//?Entered time must be at least N hours prior ddt
CASE;

// IF LCL.Deadline Departure Time GT LCL.Time Entered
IF LCL.Deadline_Departure_Time > LCL.Time_Entered;

// LCL.Hour 1 USR = LCL.Deadline Departure Time - LCL.Time Entered *HOURS
LCL.Hour_1_USR = TIMELAPSED(LCL.Deadline_Departure_Time LCL.Time_Entered 'HR');

CASE;

// IF LCL.Hour 1 USR LT PAR.USR Hours 5.0
IF LCL.Hour_1_USR < PAR.USR_Hours_5_0;

// Send error message - 'Time must be &1 hours before deadline departure time &3 &4'
ERROR(USR4499);
MSGPARM(PAR.USR_Hours_5_0);
MSGPARM(RCD.Load_Id_6);
MSGPARM(LCL.Deadline_Departure_Date);
MSGPARM(LCL.Deadline_Departure_Time);

ENDIF;

//?Entered time must be at least N hours prior ddt
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Time must be &1 hours before deadline departure time &3 &4'
ERROR(USR4499);
MSGPARM(PAR.USR_Hours_5_0);
MSGPARM(RCD.Load_Id_6);
MSGPARM(LCL.Deadline_Departure_Date);
MSGPARM(LCL.Deadline_Departure_Time);

ENDIF;

//?Validate Load Plan Time earlier than DDT
// IF RCD.LPT Load Plan Date GT LCL.Deadline Departure Date
IF RCD.LPT_Load_Plan_Date > LCL.Deadline_Departure_Date;

// Send error message - 'Time must be &1 hours before deadline departure time &3 &4'
ERROR(USR4499);
MSGPARM(PAR.USR_Hours_5_0);
MSGPARM(RCD.Load_Id_6);
MSGPARM(LCL.Deadline_Departure_Date);
MSGPARM(LCL.Deadline_Departure_Time);

//?Validate Load Plan Time earlier than DDT
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Days = LCL.Deadline Departure Date - CTL.LPT Load Plan Date *DAYS
LCL.Days = DURATION(LCL.Deadline_Departure_Date CTL.LPT_Load_Plan_Date 'DY' 1111111                +
'NONE' 'N' 1);

CASE;

// IF LCL.Days is gt 1 day
IF LCL.Days > 1;

//?ok
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Hour 1 USR = LCL.Deadline Departure Time - LCL.Time Entered *HOURS
LCL.Hour_1_USR = TIMELAPSED(LCL.Deadline_Departure_Time LCL.Time_Entered 'HR');

// LCL.Hour 1 USR = LCL.Hour 1 USR + CON.24
LCL.Hour_1_USR = LCL.Hour_1_USR + 24;

CASE;

// IF LCL.Hour 1 USR LT PAR.USR Hours 5.0
IF LCL.Hour_1_USR < PAR.USR_Hours_5_0;

// Send error message - 'Time must be &1 hours before deadline departure time &3 &4'
ERROR(USR4499);
MSGPARM(PAR.USR_Hours_5_0);
MSGPARM(RCD.Load_Id_6);
MSGPARM(LCL.Deadline_Departure_Date);
MSGPARM(LCL.Deadline_Departure_Time);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Validate Load Id 7
CASE;

// IF RCD.Load Id 7 is NE Blank
IF RCD.Load_Id_7 <> *ZERO;

EXECUTE FUNCTION(RTV LoadSts/Carrier    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1648402;
PARAMETER(RCD.Load_Id_7);
PARAMETER(LCL.Load_Status);
PARAMETER(RCD.Carrier_Code_Usr_7);
PARAMETER(LCL.Export_Status);
PARAMETER(LCL.Load_Acceptance_Flag);
PARAMETER(LCL.Deadline_Departure_Date);
PARAMETER(LCL.Deadline_Departure_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Load Status is Shipped or Invoiced
IF LCL.Load_Status = 'I'/'S';

// LCL.Condition Desc. 1  USR = Condition name of LCL.Load Status
LCL.Condition_Desc_1_USR = RTVCND(LCL.Load_Status);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

// Send error message - 'Load has status &1'
ERROR(USR4485);
MSGPARM(LCL.Condition_Desc_1_USR);
MSGPARM(RCD.Load_Id_7);

// IF LCL.Load Status is *Blank
IF LCL.Load_Status = *BLANK;

SET CURSOR;

// Send error message - 'Load Id is not found'
ERROR(USR2783);
MSGPARM(RCD.Load_Id_7);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

// LCL.Condition Desc. 1  USR = CON.Error
LCL.Condition_Desc_1_USR = 'Error';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Time Entered = RCD.LPT Load Plan Time * CON.100 *
LCL.Time_Entered = RCD.LPT_Load_Plan_Time * 100;

//?Validate Load Plan Time earlier than DDT
CASE;

// IF RCD.LPT Load Plan Date EQ LCL.Deadline Departure Date
IF RCD.LPT_Load_Plan_Date = LCL.Deadline_Departure_Date;

//?Entered time must be at least N hours prior ddt
CASE;

// IF LCL.Deadline Departure Time GT LCL.Time Entered
IF LCL.Deadline_Departure_Time > LCL.Time_Entered;

// LCL.Hour 1 USR = LCL.Deadline Departure Time - LCL.Time Entered *HOURS
LCL.Hour_1_USR = TIMELAPSED(LCL.Deadline_Departure_Time LCL.Time_Entered 'HR');

CASE;

// IF LCL.Hour 1 USR LT PAR.USR Hours 5.0
IF LCL.Hour_1_USR < PAR.USR_Hours_5_0;

// Send error message - 'Time must be &1 hours before deadline departure time &3 &4'
ERROR(USR4499);
MSGPARM(PAR.USR_Hours_5_0);
MSGPARM(RCD.Load_Id_7);
MSGPARM(LCL.Deadline_Departure_Date);
MSGPARM(LCL.Deadline_Departure_Time);

ENDIF;

//?Entered time must be at least N hours prior ddt
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Time must be &1 hours before deadline departure time &3 &4'
ERROR(USR4499);
MSGPARM(PAR.USR_Hours_5_0);
MSGPARM(RCD.Load_Id_7);
MSGPARM(LCL.Deadline_Departure_Date);
MSGPARM(LCL.Deadline_Departure_Time);

ENDIF;

//?Validate Load Plan Time earlier than DDT
// IF RCD.LPT Load Plan Date GT LCL.Deadline Departure Date
IF RCD.LPT_Load_Plan_Date > LCL.Deadline_Departure_Date;

// Send error message - 'Time must be &1 hours before deadline departure time &3 &4'
ERROR(USR4499);
MSGPARM(PAR.USR_Hours_5_0);
MSGPARM(RCD.Load_Id_7);
MSGPARM(LCL.Deadline_Departure_Date);
MSGPARM(LCL.Deadline_Departure_Time);

//?Validate Load Plan Time earlier than DDT
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Days = LCL.Deadline Departure Date - CTL.LPT Load Plan Date *DAYS
LCL.Days = DURATION(LCL.Deadline_Departure_Date CTL.LPT_Load_Plan_Date 'DY' 1111111                +
'NONE' 'N' 1);

CASE;

// IF LCL.Days is gt 1 day
IF LCL.Days > 1;

//?ok
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Hour 1 USR = LCL.Deadline Departure Time - LCL.Time Entered *HOURS
LCL.Hour_1_USR = TIMELAPSED(LCL.Deadline_Departure_Time LCL.Time_Entered 'HR');

// LCL.Hour 1 USR = LCL.Hour 1 USR + CON.24
LCL.Hour_1_USR = LCL.Hour_1_USR + 24;

CASE;

// IF LCL.Hour 1 USR LT PAR.USR Hours 5.0
IF LCL.Hour_1_USR < PAR.USR_Hours_5_0;

// Send error message - 'Time must be &1 hours before deadline departure time &3 &4'
ERROR(USR4499);
MSGPARM(PAR.USR_Hours_5_0);
MSGPARM(RCD.Load_Id_7);
MSGPARM(LCL.Deadline_Departure_Date);
MSGPARM(LCL.Deadline_Departure_Time);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF LCL.Error Status is Not Yes
IF LCL.Error_Status = *BLANK/'N';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

EXECUTE FUNCTION(Rtv Chg Load Id       RT) TYPE(RTVOBJ) FILE(PBAFCPP)           AC2034088;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.LPT_Load_Plan_Date);
PARAMETER(CTL.LPT_Category_1);
PARAMETER(RCD.LPT_Load_Plan_Time);
PARAMETER(RCD.Load_Id_1);
{
 //?USER: Process Data record

 CASE;

 // IF PAR.LPT Load Id NE DB1.LPT Load Id
 IF PAR.LPT_Load_Id <> DB1.LPT_Load_Id;

 //?Undo orig load in this time slot if there was one
 CASE;

 // IF DB1.LPT Load Id is NE Blank
 IF DB1.LPT_Load_Id <> *ZERO;

 EXECUTE FUNCTION(CHG Load Plan DtTm    CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC2038777;
 PARAMETER(DB1.LPT_Load_Id);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 //?***
 EXECUTE FUNCTION(Chg Load Plan Tm Sch  CH) TYPE(CHGOBJ) FILE(PBAFCPP)           AC2033403;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.LPT_Load_Plan_Date);
 PARAMETER(DB1.LPC_Category);
 PARAMETER(DB1.LPT_Load_Plan_Time);
 PARAMETER(DB1.LPT_On_Yard_Time);
 PARAMETER(PAR.LPT_Load_Id);
 PARAMETER(DB1.LPT_Unused_Sts_2);
 PARAMETER(DB1.LPT_Unused_Text);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

 //?***
 //?Upd New Load Id with time slot
 CASE;

 // IF PAR.LPT Load Id is NE Blank
 IF PAR.LPT_Load_Id <> *ZERO;

 // LCL.LPT Load Plan Start Tm = PAR.LPT Load Plan Time * CON.100 *
 LCL.LPT_Load_Plan_Start_Tm = PAR.LPT_Load_Plan_Time * 100;

 EXECUTE FUNCTION(CHG Load Plan DtTm    CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC2038777;
 PARAMETER(PAR.LPT_Load_Id);
 PARAMETER(PAR.LPT_Load_Plan_Date);
 PARAMETER(LCL.LPT_Load_Plan_Start_Tm);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Chg Load Id       RT) TYPE(RTVOBJ) FILE(PBAFCPP)           AC2034088;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.LPT_Load_Plan_Date);
PARAMETER(CTL.LPT_Category_2);
PARAMETER(RCD.LPT_Load_Plan_Time);
PARAMETER(RCD.Load_Id_2);
{
 //?USER: Process Data record

 CASE;

 // IF PAR.LPT Load Id NE DB1.LPT Load Id
 IF PAR.LPT_Load_Id <> DB1.LPT_Load_Id;

 //?Undo orig load in this time slot if there was one
 CASE;

 // IF DB1.LPT Load Id is NE Blank
 IF DB1.LPT_Load_Id <> *ZERO;

 EXECUTE FUNCTION(CHG Load Plan DtTm    CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC2038777;
 PARAMETER(DB1.LPT_Load_Id);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 //?***
 EXECUTE FUNCTION(Chg Load Plan Tm Sch  CH) TYPE(CHGOBJ) FILE(PBAFCPP)           AC2033403;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.LPT_Load_Plan_Date);
 PARAMETER(DB1.LPC_Category);
 PARAMETER(DB1.LPT_Load_Plan_Time);
 PARAMETER(DB1.LPT_On_Yard_Time);
 PARAMETER(PAR.LPT_Load_Id);
 PARAMETER(DB1.LPT_Unused_Sts_2);
 PARAMETER(DB1.LPT_Unused_Text);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

 //?***
 //?Upd New Load Id with time slot
 CASE;

 // IF PAR.LPT Load Id is NE Blank
 IF PAR.LPT_Load_Id <> *ZERO;

 // LCL.LPT Load Plan Start Tm = PAR.LPT Load Plan Time * CON.100 *
 LCL.LPT_Load_Plan_Start_Tm = PAR.LPT_Load_Plan_Time * 100;

 EXECUTE FUNCTION(CHG Load Plan DtTm    CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC2038777;
 PARAMETER(PAR.LPT_Load_Id);
 PARAMETER(PAR.LPT_Load_Plan_Date);
 PARAMETER(LCL.LPT_Load_Plan_Start_Tm);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Chg Load Id       RT) TYPE(RTVOBJ) FILE(PBAFCPP)           AC2034088;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.LPT_Load_Plan_Date);
PARAMETER(CTL.LPT_Category_3);
PARAMETER(RCD.LPT_Load_Plan_Time);
PARAMETER(RCD.Load_Id_3);
{
 //?USER: Process Data record

 CASE;

 // IF PAR.LPT Load Id NE DB1.LPT Load Id
 IF PAR.LPT_Load_Id <> DB1.LPT_Load_Id;

 //?Undo orig load in this time slot if there was one
 CASE;

 // IF DB1.LPT Load Id is NE Blank
 IF DB1.LPT_Load_Id <> *ZERO;

 EXECUTE FUNCTION(CHG Load Plan DtTm    CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC2038777;
 PARAMETER(DB1.LPT_Load_Id);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 //?***
 EXECUTE FUNCTION(Chg Load Plan Tm Sch  CH) TYPE(CHGOBJ) FILE(PBAFCPP)           AC2033403;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.LPT_Load_Plan_Date);
 PARAMETER(DB1.LPC_Category);
 PARAMETER(DB1.LPT_Load_Plan_Time);
 PARAMETER(DB1.LPT_On_Yard_Time);
 PARAMETER(PAR.LPT_Load_Id);
 PARAMETER(DB1.LPT_Unused_Sts_2);
 PARAMETER(DB1.LPT_Unused_Text);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

 //?***
 //?Upd New Load Id with time slot
 CASE;

 // IF PAR.LPT Load Id is NE Blank
 IF PAR.LPT_Load_Id <> *ZERO;

 // LCL.LPT Load Plan Start Tm = PAR.LPT Load Plan Time * CON.100 *
 LCL.LPT_Load_Plan_Start_Tm = PAR.LPT_Load_Plan_Time * 100;

 EXECUTE FUNCTION(CHG Load Plan DtTm    CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC2038777;
 PARAMETER(PAR.LPT_Load_Id);
 PARAMETER(PAR.LPT_Load_Plan_Date);
 PARAMETER(LCL.LPT_Load_Plan_Start_Tm);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Chg Load Id       RT) TYPE(RTVOBJ) FILE(PBAFCPP)           AC2034088;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.LPT_Load_Plan_Date);
PARAMETER(CTL.LPT_Category_4);
PARAMETER(RCD.LPT_Load_Plan_Time);
PARAMETER(RCD.Load_Id_4);
{
 //?USER: Process Data record

 CASE;

 // IF PAR.LPT Load Id NE DB1.LPT Load Id
 IF PAR.LPT_Load_Id <> DB1.LPT_Load_Id;

 //?Undo orig load in this time slot if there was one
 CASE;

 // IF DB1.LPT Load Id is NE Blank
 IF DB1.LPT_Load_Id <> *ZERO;

 EXECUTE FUNCTION(CHG Load Plan DtTm    CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC2038777;
 PARAMETER(DB1.LPT_Load_Id);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 //?***
 EXECUTE FUNCTION(Chg Load Plan Tm Sch  CH) TYPE(CHGOBJ) FILE(PBAFCPP)           AC2033403;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.LPT_Load_Plan_Date);
 PARAMETER(DB1.LPC_Category);
 PARAMETER(DB1.LPT_Load_Plan_Time);
 PARAMETER(DB1.LPT_On_Yard_Time);
 PARAMETER(PAR.LPT_Load_Id);
 PARAMETER(DB1.LPT_Unused_Sts_2);
 PARAMETER(DB1.LPT_Unused_Text);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

 //?***
 //?Upd New Load Id with time slot
 CASE;

 // IF PAR.LPT Load Id is NE Blank
 IF PAR.LPT_Load_Id <> *ZERO;

 // LCL.LPT Load Plan Start Tm = PAR.LPT Load Plan Time * CON.100 *
 LCL.LPT_Load_Plan_Start_Tm = PAR.LPT_Load_Plan_Time * 100;

 EXECUTE FUNCTION(CHG Load Plan DtTm    CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC2038777;
 PARAMETER(PAR.LPT_Load_Id);
 PARAMETER(PAR.LPT_Load_Plan_Date);
 PARAMETER(LCL.LPT_Load_Plan_Start_Tm);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Chg Load Id       RT) TYPE(RTVOBJ) FILE(PBAFCPP)           AC2034088;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.LPT_Load_Plan_Date);
PARAMETER(CTL.LPT_Category_5);
PARAMETER(RCD.LPT_Load_Plan_Time);
PARAMETER(RCD.Load_Id_5);
{
 //?USER: Process Data record

 CASE;

 // IF PAR.LPT Load Id NE DB1.LPT Load Id
 IF PAR.LPT_Load_Id <> DB1.LPT_Load_Id;

 //?Undo orig load in this time slot if there was one
 CASE;

 // IF DB1.LPT Load Id is NE Blank
 IF DB1.LPT_Load_Id <> *ZERO;

 EXECUTE FUNCTION(CHG Load Plan DtTm    CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC2038777;
 PARAMETER(DB1.LPT_Load_Id);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 //?***
 EXECUTE FUNCTION(Chg Load Plan Tm Sch  CH) TYPE(CHGOBJ) FILE(PBAFCPP)           AC2033403;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.LPT_Load_Plan_Date);
 PARAMETER(DB1.LPC_Category);
 PARAMETER(DB1.LPT_Load_Plan_Time);
 PARAMETER(DB1.LPT_On_Yard_Time);
 PARAMETER(PAR.LPT_Load_Id);
 PARAMETER(DB1.LPT_Unused_Sts_2);
 PARAMETER(DB1.LPT_Unused_Text);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

 //?***
 //?Upd New Load Id with time slot
 CASE;

 // IF PAR.LPT Load Id is NE Blank
 IF PAR.LPT_Load_Id <> *ZERO;

 // LCL.LPT Load Plan Start Tm = PAR.LPT Load Plan Time * CON.100 *
 LCL.LPT_Load_Plan_Start_Tm = PAR.LPT_Load_Plan_Time * 100;

 EXECUTE FUNCTION(CHG Load Plan DtTm    CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC2038777;
 PARAMETER(PAR.LPT_Load_Id);
 PARAMETER(PAR.LPT_Load_Plan_Date);
 PARAMETER(LCL.LPT_Load_Plan_Start_Tm);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Chg Load Id       RT) TYPE(RTVOBJ) FILE(PBAFCPP)           AC2034088;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.LPT_Load_Plan_Date);
PARAMETER(CTL.LPT_Category_6);
PARAMETER(RCD.LPT_Load_Plan_Time);
PARAMETER(RCD.Load_Id_6);
{
 //?USER: Process Data record

 CASE;

 // IF PAR.LPT Load Id NE DB1.LPT Load Id
 IF PAR.LPT_Load_Id <> DB1.LPT_Load_Id;

 //?Undo orig load in this time slot if there was one
 CASE;

 // IF DB1.LPT Load Id is NE Blank
 IF DB1.LPT_Load_Id <> *ZERO;

 EXECUTE FUNCTION(CHG Load Plan DtTm    CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC2038777;
 PARAMETER(DB1.LPT_Load_Id);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 //?***
 EXECUTE FUNCTION(Chg Load Plan Tm Sch  CH) TYPE(CHGOBJ) FILE(PBAFCPP)           AC2033403;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.LPT_Load_Plan_Date);
 PARAMETER(DB1.LPC_Category);
 PARAMETER(DB1.LPT_Load_Plan_Time);
 PARAMETER(DB1.LPT_On_Yard_Time);
 PARAMETER(PAR.LPT_Load_Id);
 PARAMETER(DB1.LPT_Unused_Sts_2);
 PARAMETER(DB1.LPT_Unused_Text);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

 //?***
 //?Upd New Load Id with time slot
 CASE;

 // IF PAR.LPT Load Id is NE Blank
 IF PAR.LPT_Load_Id <> *ZERO;

 // LCL.LPT Load Plan Start Tm = PAR.LPT Load Plan Time * CON.100 *
 LCL.LPT_Load_Plan_Start_Tm = PAR.LPT_Load_Plan_Time * 100;

 EXECUTE FUNCTION(CHG Load Plan DtTm    CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC2038777;
 PARAMETER(PAR.LPT_Load_Id);
 PARAMETER(PAR.LPT_Load_Plan_Date);
 PARAMETER(LCL.LPT_Load_Plan_Start_Tm);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Chg Load Id       RT) TYPE(RTVOBJ) FILE(PBAFCPP)           AC2034088;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.LPT_Load_Plan_Date);
PARAMETER(CTL.LPT_Category_7);
PARAMETER(RCD.LPT_Load_Plan_Time);
PARAMETER(RCD.Load_Id_7);
{
 //?USER: Process Data record

 CASE;

 // IF PAR.LPT Load Id NE DB1.LPT Load Id
 IF PAR.LPT_Load_Id <> DB1.LPT_Load_Id;

 //?Undo orig load in this time slot if there was one
 CASE;

 // IF DB1.LPT Load Id is NE Blank
 IF DB1.LPT_Load_Id <> *ZERO;

 EXECUTE FUNCTION(CHG Load Plan DtTm    CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC2038777;
 PARAMETER(DB1.LPT_Load_Id);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 //?***
 EXECUTE FUNCTION(Chg Load Plan Tm Sch  CH) TYPE(CHGOBJ) FILE(PBAFCPP)           AC2033403;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.LPT_Load_Plan_Date);
 PARAMETER(DB1.LPC_Category);
 PARAMETER(DB1.LPT_Load_Plan_Time);
 PARAMETER(DB1.LPT_On_Yard_Time);
 PARAMETER(PAR.LPT_Load_Id);
 PARAMETER(DB1.LPT_Unused_Sts_2);
 PARAMETER(DB1.LPT_Unused_Text);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

 //?***
 //?Upd New Load Id with time slot
 CASE;

 // IF PAR.LPT Load Id is NE Blank
 IF PAR.LPT_Load_Id <> *ZERO;

 // LCL.LPT Load Plan Start Tm = PAR.LPT Load Plan Time * CON.100 *
 LCL.LPT_Load_Plan_Start_Tm = PAR.LPT_Load_Plan_Time * 100;

 EXECUTE FUNCTION(CHG Load Plan DtTm    CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC2038777;
 PARAMETER(PAR.LPT_Load_Id);
 PARAMETER(PAR.LPT_Load_Plan_Date);
 PARAMETER(LCL.LPT_Load_Plan_Start_Tm);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 ENDIF;

}


//?USER: Process subfile control (Post-confirm)

CASE;

// IF LCL.Error Status is Not Yes
IF LCL.Error_Status = *BLANK/'N';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

