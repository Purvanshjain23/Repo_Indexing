// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDDAPFR
// ?Date: 14.08.2025 Time: 12:03:42
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('C/S');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// PAR.USR Display 1 = CND.No
PAR.USR_Display_1 = 'N';

// WRK.First time flag 2     USR = CND.No
WRK.First_time_flag_2_USR = 'N';

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

// PAR.Market Amt / CWT      USR = CON.*ZERO
PAR.Market_Amt_CWT_USR = *ZERO;

//?USER: Process top of page

// TOP.Company Number = PAR.Company Number
TOP_Company_Number = PAR.Company_Number;

// TOP.Production Date = PAR.Production Date
TOP_Production_Date = PAR.Production_Date;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(TOP_Company_Number);
PARAMETER(TOP_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Hot Weight Total  RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1301933;
PARAMETER(TOP_Company_Number);
PARAMETER('S');
PARAMETER(TOP_Production_Date);
PARAMETER(WRK.Hot_Weight_Total);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// PAR.USR Display 1 = CND.Yes
PAR.USR_Display_1 = 'Y';

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
// Print Company Number header format
PRINT Company Number header format;

ENDIF;

CASE;

IF NEW Production_Date;
// SUPPRESSED PRINT Production Date header format

ENDIF;

CASE;

IF NEW Item_Structure_Group_Code;
// SUPPRESSED PRINT Item Structure Group Code header format

// WRK.First time flag 2     USR = CND.Yes
WRK.First_time_flag_2_USR = 'Y';

ENDIF;

CASE;

IF NEW Item_Structure_Class_Code;
// SUPPRESSED PRINT Item Structure Class Code header format

// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

ENDIF;

CASE;

IF NEW Item_Code;
// SUPPRESSED PRINT Item Code header format

ENDIF;

//?USER: Process after print of detail format

NXT.Weight_Scheduled_SUM = SUM(CUR.PS_Weight_Sched_Prod);

//?USER: Print required level totals

CASE;

IF NEW Item_Code;
//?Break in group - print heading
CASE;

// IF WRK.First time flag 2     USR is Yes
IF WRK.First_time_flag_2_USR = 'Y';

EXECUTE FUNCTION(Rtv Group Description  RT) TYPE(RTVOBJ) FILE(OME9REP)          AC1202656;
PARAMETER(CUR.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(CUR.Item_Structure_Group_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Break in class - print heading
CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

EXECUTE FUNCTION(Rtv Item Class Desc    RT) TYPE(RTVOBJ) FILE(OMFAREP)          AC1205440;
PARAMETER(CUR.Item_Structure_Class_Code);
PARAMETER(CUR.Item_Structure_Class_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// CUR.Transaction Wgt. Total = CON.*ZERO
CUR.Transaction_Wgt_Total = *ZERO;

// WRK.Extended Amount = CON.*ZERO
WRK.Extended_Amount = *ZERO;

EXECUTE FUNCTION(Rtv Trans Weight      RT) TYPE(RTVOBJ) FILE(CAB7CPP)           AC1378126;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Production_Date);
PARAMETER(WRK.Extended_Amount);
PARAMETER(CUR.Item_Structure_Class_Code);
PARAMETER(CUR.Item_Structure_Group_Code);
PARAMETER(CUR.Transaction_Wgt_Total);
{
 //?USER: Processing if Data record not found

 // PAR.Extended Amount = CON.*ZERO
 PAR.Extended_Amount = *ZERO;

 // PAR.Transaction Wgt. Total = CON.*ZERO
 PAR.Transaction_Wgt_Total = *ZERO;

 //?USER: Process Data record

 // PAR.Transaction Wgt. Total = PAR.Transaction Wgt. Total + DB1.Transaction Weight
 PAR.Transaction_Wgt_Total = PAR.Transaction_Wgt_Total + DB1.Transaction_Weight;

 // PAR.Extended Amount = PAR.Extended Amount + DB1.Extended Amount
 PAR.Extended_Amount = PAR.Extended_Amount + DB1.Extended_Amount;

}


//?Print if 'std wgt' or 'act wgt' exists for item on cut date
CASE;

// IF CUR.Transaction Wgt. Total is Equal to zero
IF CUR.Transaction_Wgt_Total = *ZERO;

// AND CUR.Weight Scheduled SUM is Equal to zero
AND CUR.Weight_Scheduled_SUM = *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

//?Print if 'std wgt' or 'act wgt' exists for item on cut date
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Desc,Group,Mkt,Whs RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1386175;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Description_Line_One);
PARAMETER(WRK.Commodity_Market_Code_USR);
PARAMETER(WRK.Market_Overage);
PARAMETER(WRK.Standard_Overage_Underage);
PARAMETER(WRK.Commodity_Price_Group);
PARAMETER(WRK.Default_Warehouse);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.USR Date Priced = CON.*ZERO
WRK.USR_Date_Priced = *ZERO;

//?Get prod cost per pound at end of cut date.
// WRK.Production Date = PAR.Production Date
WRK.Production_Date = PAR.Production_Date;

// WRK.Revaluation Eff. Date = CON.9999999
WRK.Revaluation_Eff_Date = 9999999;

// WRK.Revaluation Eff. Time = CON.999999
WRK.Revaluation_Eff_Time = 999999;

EXECUTE FUNCTION(RTV Cost/Dte/Tme/Rev   RT) TYPE(RTVOBJ) FILE(PDKZCPP)          AC1416061;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(WRK.Default_Warehouse);
PARAMETER(WRK.Revaluation_Eff_Date);
PARAMETER(WRK.Revaluation_Eff_Time);
PARAMETER(WRK.Unit_Cost_Per_Pound);
PARAMETER(WRK.Pricing_Date_Used);
PARAMETER(WRK.Revaluation_Cost_Type);
PARAMETER(WRK.Production_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Processing for Transaction weight <> 0
CASE;

// IF CUR.Transaction Wgt. Total is Not equal zero
IF CUR.Transaction_Wgt_Total <> *ZERO;

EXECUTE FUNCTION(Rtv Mkt Prc + Ovr CWT IF) TYPE(EXCINTFUN)                      AC1386862;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(WRK.Commodity_Market_Code_USR);
PARAMETER(WRK.Standard_Overage_Underage);
PARAMETER(WRK.Commodity_Price_Group);
PARAMETER(PAR.Production_Date);
PARAMETER(WRK.USR_Date_Priced);
PARAMETER(WRK.Market_Price_USR);
PARAMETER(WRK.Standard_Overage_USR);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER(PAR.Default_Commod_Mark_basis);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(PAR.Market_Price_Date);
 PARAMETER(PAR.Commodity_Market_Price);
 PARAMETER(PAR.USR_Date_Priced);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

 // Call program CLC Convert Price - CW XF.
 CALL PROGRAM(CLC Convert Price - CW XF) ('PDKUXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Commodity_Market_Price);
 PARAMETER(PAR.Market_Price_USR);

 //?Convert Std overage to U/M
 // Call program CLC Convert Price - CW XF.
 CALL PROGRAM(CLC Convert Price - CW XF) ('PDKUXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Standard_Overage_Underage);
 PARAMETER(PAR.Standard_Overage_USR);

}


//?Print '*' if market date ne prod. date
CASE;

// IF PAR.Production Date EQ WRK.USR Date Priced
IF PAR.Production_Date = WRK.USR_Date_Priced;

// WRK.USR Date Priced = CON.*ZERO
WRK.USR_Date_Priced = *ZERO;

ENDIF;

// CUR.Market Amt / CWT      USR = WRK.Market Price          USR + WRK.Standard Ove
CUR.Market_Amt_CWT_USR = WRK.Market_Price_USR + WRK.Standard_Overage_USR;

//?Compute Prod Cost Amount
// Synon (17,7) work field =       * Compute: Prod Cost Amt
PGM.*Synon_177_work_field = WRK.Unit_Cost_Per_Pound * CUR.Transaction_Wgt_Total 'H';

// CUR.Prod Cost Amt         USR = CON.1 * PGM.*Synon (17,7) work field *Rounded
CUR.Prod_Cost_Amt_USR = 1 * PGM.*Synon_177_work_field 'H';

// Compute: Prod CWT
CUR.Prod_Cost_CWT_USR = WRK.Unit_Cost_Per_Pound * 100 'H';

// Compute: Mkt Cost Amt
CUR.Extended_Amount = CUR.Market_Amt_CWT_USR * ( CUR.Transaction_Wgt_Total / 100 );

ENDIF;

// Compute: Variance Amt
CUR.Variance_amount_1_USR = ( CUR.Transaction_Wgt_Total - CUR.Weight_Scheduled_SUM )               +
* WRK.Unit_Cost_Per_Pound 'H';

// Compute: Mkt Variance Amt
CUR.Variance_Amount_2_USR = ( CUR.Transaction_Wgt_Total - CUR.Weight_Scheduled_SUM ) * (           +
CUR.Market_Amt_CWT_USR / 100 );

CASE;

// IF WRK.Hot Weight Total is Not equal zero
IF WRK.Hot_Weight_Total <> *ZERO;

// Compute: Std % H/WGT
CUR.USR_Work_Percent_5_2 = ( CUR.Weight_Scheduled_SUM / WRK.Hot_Weight_Total ) * 100;

ENDIF;

ENDIF;

// Print Item Code totals format
PRINT Item Code totals format;

NXT.Weight_Scheduled_SUM = SUM(CUR.Weight_Scheduled_SUM);

NXT.Transaction_Wgt_Ttl_SUM = SUM(CUR.Transaction_Wgt_Total);

NXT.Extended_amount_SUM = SUM(CUR.Extended_Amount);

NXT.Variance_amount = SUM(CUR.Variance_amount_1_USR);

NXT.Variance_Amount_2_SUM = SUM(CUR.Variance_Amount_2_USR);

NXT.Prod_Cost_Amt_SUM = SUM(CUR.Prod_Cost_Amt_USR);

//?Reset Break in Class flag if format was printed
CASE;

// IF PGM.*Print format is Do not print format
IF PGM.*Print_format = 'N';

//?Reset Break in Class flag if format was printed
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.First time flag 2     USR = CND.No
WRK.First_time_flag_2_USR = 'N';

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

ENDIF;

ENDIF;

CASE;

IF NEW Item_Structure_Class_Code;
//?Print total line if totals > 0
CASE;

// IF CUR.Weight Scheduled SUM is Equal to zero
IF CUR.Weight_Scheduled_SUM = *ZERO;

// AND CUR.Transaction Wgt. Ttl SUM EQ WRK.ZERO
AND CUR.Transaction_Wgt_Ttl_SUM = WRK.ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

//?Print total line if totals > 0
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CUR.Transaction Wgt. Ttl SUM NE WRK.ZERO
IF CUR.Transaction_Wgt_Ttl_SUM <> WRK.ZERO;

// Synon (17,5) work field =       * Compute: Prod CWT
PGM.*Synon_175_work_field = ( CUR.Prod_Cost_Amt_SUM / CUR.Transaction_Wgt_Ttl_SUM ) * 100;

// CUR.Prod Cost / CWT       USR = CON.1 * PGM.*Synon (17,5) work field *Rounded
CUR.Prod_Cost_CWT_USR = 1 * PGM.*Synon_175_work_field 'H';

// Compute: Mkt Amt /CWT
CUR.Market_Amt_CWT_USR = ( CUR.Extended_amount_SUM / CUR.Transaction_Wgt_Ttl_SUM ) * 100;

ENDIF;

CASE;

// IF WRK.Hot Weight Total is Not equal zero
IF WRK.Hot_Weight_Total <> *ZERO;

// Compute: Std % H/WGT
CUR.USR_Work_Percent_5_2 = ( CUR.Weight_Scheduled_SUM / WRK.Hot_Weight_Total ) * 100;

ENDIF;

ENDIF;

// Print Item Structure Class Code totals format
PRINT Item Structure Class Code totals format;

NXT.Weight_Scheduled_SUM = SUM(CUR.Weight_Scheduled_SUM);

NXT.Transaction_Wgt_Ttl_SUM = SUM(CUR.Transaction_Wgt_Ttl_SUM);

NXT.Extended_amount_SUM = SUM(CUR.Extended_amount_SUM);

NXT.Variance_amount = SUM(CUR.Variance_amount);

NXT.Prod_Cost_Amt_SUM = SUM(CUR.Prod_Cost_Amt_SUM);

NXT.Variance_Amount_2_SUM = SUM(CUR.Variance_Amount_2_SUM);

ENDIF;

CASE;

IF NEW Item_Structure_Group_Code;
//?Print total line if totals > 0
CASE;

// IF CUR.Weight Scheduled SUM is Equal to zero
IF CUR.Weight_Scheduled_SUM = *ZERO;

// AND CUR.Transaction Wgt. Ttl SUM EQ WRK.ZERO
AND CUR.Transaction_Wgt_Ttl_SUM = WRK.ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

//?Print total line if totals > 0
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CUR.Transaction Wgt. Ttl SUM NE WRK.ZERO
IF CUR.Transaction_Wgt_Ttl_SUM <> WRK.ZERO;

// Compute: Prod CWT
CUR.Prod_Cost_CWT_USR = ( CUR.Prod_Cost_Amt_SUM / CUR.Transaction_Wgt_Ttl_SUM ) * 100;

// Compute: Mkt Amt /CWT
CUR.Market_Amt_CWT_USR = ( CUR.Extended_amount_SUM / CUR.Transaction_Wgt_Ttl_SUM ) * 100;

ENDIF;

CASE;

// IF WRK.Hot Weight Total is Not equal zero
IF WRK.Hot_Weight_Total <> *ZERO;

// Compute: Std % H/WGT
CUR.USR_Work_Percent_5_2 = ( CUR.Weight_Scheduled_SUM / WRK.Hot_Weight_Total ) * 100;

ENDIF;

ENDIF;

// Print Item Structure Group Code totals format
PRINT Item Structure Group Code totals format;

//?Omit Variety and Rendering (groups 300,400) from Final Totals
CASE;

// IF CUR.PS Item Identification is FG *Omit Variety & Render
IF CUR.PS_Item_Id = 'FGB'/'FBC'/'FCV'/'FCC'/'FFB'/'FFC'/'FLS'/'FLC'/'FSC';

NXT.Transaction_Wgt_Ttl_SUM = SUM(CUR.Transaction_Wgt_Ttl_SUM);

NXT.Weight_Scheduled_SUM = SUM(CUR.Weight_Scheduled_SUM);

NXT.Extended_amount_SUM = SUM(CUR.Extended_amount_SUM);

NXT.Variance_amount = SUM(CUR.Variance_amount);

NXT.Prod_Cost_Amt_SUM = SUM(CUR.Prod_Cost_Amt_SUM);

NXT.Variance_Amount_2_SUM = SUM(CUR.Variance_Amount_2_SUM);

ENDIF;

ENDIF;

// SUPPRESSED PRINT Production Date totals format

// SUPPRESSED PRINT Company Number totals format

//?USER: On print of final totals format

CASE;

// IF CUR.Transaction Wgt. Ttl SUM NE WRK.ZERO
IF CUR.Transaction_Wgt_Ttl_SUM <> WRK.ZERO;

// Compute: Prod CWT
CUR.Prod_Cost_CWT_USR = ( CUR.Prod_Cost_Amt_SUM / CUR.Transaction_Wgt_Ttl_SUM ) * 100;

// Compute: Mkt Amt /CWT
CUR.Market_Amt_CWT_USR = ( CUR.Extended_amount_SUM / CUR.Transaction_Wgt_Ttl_SUM ) * 100;

ENDIF;

CASE;

// IF WRK.Hot Weight Total is Not equal zero
IF WRK.Hot_Weight_Total <> *ZERO;

// Compute: Std % H/WGT
CUR.USR_Work_Percent_5_2 = ( CUR.Weight_Scheduled_SUM / WRK.Hot_Weight_Total ) * 100;

ENDIF;

//?USER: Process after print of final totals format

// PAR.Market Amt / CWT      USR = CUR.Market Amt / CWT      USR
PAR.Market_Amt_CWT_USR = CUR.Market_Amt_CWT_USR;

