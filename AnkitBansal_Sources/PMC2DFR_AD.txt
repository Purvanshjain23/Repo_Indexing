// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMC2DFR
// ?Date: 14.08.2025 Time: 03:42:39
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.Application Code = CND.Accounts Receivable
PAR.Application_Code = 'A/R';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.System Value Numeric = CON.1
PAR.System_Value_Numeric = 1;

// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// Execute function SFL Fold/Drop  RPG    US.
EXECUTE FUNCTION(SFL Fold/Drop  RPG    US) TYPE(EXCUSRSRC) ('POBHUFU');
PARAMETER(12);
{
 ) find text=#SFLCTL
 ) insert
 A                                      SFLDROP(CF07)
 A* 07                                  SFLFOLD(CF07)
}


// PGM.*Scan limit = CND.999999
PGM.*Scan_limit = 999999;

//?USER: Initialize subfile control

CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDIF;

// PAR.PRT Printer Device = CON.*BLANK
PAR.PRT_Printer_Device = *BLANK;

//?** Company name is not needed - co# is now a column   03/16/06 LJB
SET CURSOR;

CASE;

// IF CTL.Order Number is Not equal to zeros
IF CTL.Order_Number <> *ZERO;

EXECUTE FUNCTION(RTV Cust Name Inv Date RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1467556;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Bill_to_Name);
PARAMETER(CTL.Invoice_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PAR.Bill to Name = DB1.Bill to Name
 PAR.Bill_to_Name = DB1.Bill_to_Name;

 // PAR.Invoice Date = DB1.Invoice Date
 PAR.Invoice_Date = DB1.Invoice_Date;

}


ENDIF;

CASE;

// IF CTL.Name 25A USR NE WRK.Blank for 30          USR
IF CTL.Name_25A_USR <> WRK.Blank_for_30_USR;

// Execute function CVT Str to Upper Alpha US.
EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
PARAMETER(CTL.Name_25A_USR);
PARAMETER(CTL.Name_25A_USR);
{
 PDWEUFR:  PGM PARM(&STRIN &STROUT)

 CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
}


// LCL.Name 25A USR = CTL.Name 25A USR
LCL.Name_25A_USR = CTL.Name_25A_USR;

ENDIF;

//?USER: Initialize subfile record from DBF record

//?Match company number
CASE;

// IF CTL.Company Number NE WRK.ZERO
IF CTL.Company_Number <> WRK.ZERO;

CASE;

// IF DB1.Company Number NE CTL.Company Number
IF DB1.Company_Number <> CTL.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Customer Name
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF CTL.Name 25A USR NE WRK.BLANK
IF CTL.Name_25A_USR <> WRK.BLANK;

// Call program CLC Call Qclscan       UP.
CALL PROGRAM(CLC Call Qclscan       UP) ('QCLSCAN');
PARAMETER(RCD.Bill_to_Name);
PARAMETER(30);
PARAMETER(1);
PARAMETER(CTL.Name_25A_USR);
PARAMETER(25);
PARAMETER(1);
PARAMETER(1);
PARAMETER(*BLANK);
PARAMETER(WRK.USR_Qclscan_Result);

CASE;

// IF WRK.USR Qclscan Result ? is Does contain
IF WRK.USR_Qclscan_Result > 0;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Exclude non-invoiced orders
CASE;

// IF DB1.Invoice Number EQ WRK.ZERO
IF DB1.Invoice_Number = WRK.ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// PAR.Status - Y or N = CND.blank
PAR.Status_Y_or_N = *BLANK;

//?* updated missing parm (don't know when it was added) e002016
EXECUTE FUNCTION(Rtv Fax Information   RT) TYPE(RTVOBJ) FILE(CAEOREP)           AC1612375;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(LCL.Fax_Invoice_Flag);
PARAMETER(RCD.Fax_Invoice_Fax_Number);
PARAMETER(RCD.Fax_Invoice_Contact_Name);
PARAMETER(NLL.Record_Status);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// Execute function SFL Fold/Drop  RPG 2  US.
EXECUTE FUNCTION(SFL Fold/Drop  RPG 2  US) TYPE(EXCUSRSRC) ('POBKUFR');
{
 C     MODE          IFEQ      '0'
 C                   SETON                                        89
 C                   ELSE
 C                   SETOFF                                       89
 C                   ENDIF
}


//?USER: Process subfile control (Pre-confirm)

CASE;

// IF CTL.Name 25A USR NE LCL.Name 25A USR
IF CTL.Name_25A_USR <> LCL.Name_25A_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?5=Reset order to re-invoice through invoice post
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

// Call program Upd TestD By Co/Ord   XF.
CALL PROGRAM(Upd TestD By Co/Ord   XF) ('PMC0XFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?8=edit aging
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

// Call program Sel Item f/Price ExcptSL.
CALL PROGRAM(Sel Item f/Price ExcptSL) ('POKJSRR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.Order_Sequence_Number);
PARAMETER(LCL.Order_Secondary_Line_Seq);
PARAMETER(LCL.Item_Code);
PARAMETER(LCL.Price_Overage_Override);
PARAMETER(LCL.Record_Selected_USR);

//?R12926 DN 05/02/18-Commented Out Update of AFR, No Longer Needed.
// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?11=Display Order Inquiry Detail
CASE;

// IF RCD.*SFLSEL is Option 11
IF RCD.*SFLSEL = '11';

// Call program DSP Ord Inquiry Detail DF.
CALL PROGRAM(DSP Ord Inquiry Detail DF) ('PDPZDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(NLL.Order_Sequence_Number);
PARAMETER(NLL.Order_Secondary_Line_Seq);
PARAMETER(PAR.Application_Code);

ENDIF;

//?12=Display Order Vs Ship
CASE;

// IF RCD.*SFLSEL is Option 12
IF RCD.*SFLSEL = '12';

// Call program DSP Order vs. Ship Dtl DF.
CALL PROGRAM(DSP Order vs. Ship Dtl DF) ('PDP7DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Type_Sales);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Ship_To_Name);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(RCD.Order_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Header_Status);
PARAMETER(RCD.Credit_Hold);
PARAMETER(RCD.Production_Hold);
PARAMETER(RCD.New_Customer_Hold);
PARAMETER(RCD.Sales_Route_Code);
PARAMETER(PAR.Application_Code);

ENDIF;

//?13=Work With Customer Accrual
CASE;

// IF RCD.*SFLSEL is Option 13
IF RCD.*SFLSEL = '13';

// Call program WW Cust Accruals      DF.
CALL PROGRAM(WW Cust Accruals      DF) ('POAXDFR');
PARAMETER(RCD.Ship_To_Customer);

ENDIF;

