// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBIWEFR
// ?Date: 14.08.2025 Time: 03:48:10
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?E3014 - RMC 10/07 BJ/Damon dont remember the rework sts need, so ** it
//?E3014 - Added PFS Download, Rework Req sts for items that HAVE to be
//?   reworked, and not just relabeled. (ie. dates on the bags, or branded)
EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('IDS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize subfile record (existing record)

//?Sel FZ Item Code
CASE;

// IF CTL.Frozen Item Code is Entered
IF CTL.Frozen_Item_Code <> *ZERO;

// AND CTL.Frozen Item Code NE RCD.Frozen Item Code
AND CTL.Frozen_Item_Code <> RCD.Frozen_Item_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Sel Key Sold 100% FZ
CASE;

// IF CTL.Key Sold 100% Frozen is Not Blank
IF CTL.Key_Sold_100_Pct_Frozen = 'N'/'Y';

// AND CTL.Key Sold 100% Frozen NE RCD.Key Sold 100% Frozen
AND CTL.Key_Sold_100_Pct_Frozen <> RCD.Key_Sold_100_Pct_Frozen;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Sel Sold 100% FZ
CASE;

// IF CTL.Frozen Sold 100% Frozen is Not Blank
IF CTL.Frozen_Sold_100_Pct_Froze = 'N'/'Y';

// AND CTL.Frozen Sold 100% Frozen NE RCD.Frozen Sold 100% Frozen
AND CTL.Frozen_Sold_100_Pct_Froze <> RCD.Frozen_Sold_100_Pct_Froze;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

EXECUTE FUNCTION(Rtv Item GS1 flds     RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC2083978;
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Item_Description_Line_1);
PARAMETER(NLL.Sold_100_Percent_Frozen);
PARAMETER(RCD.Record_Status_1_Usr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Item GS1 flds     RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC2083978;
PARAMETER(RCD.Frozen_Item_Code);
PARAMETER(RCD.Item_Description);
PARAMETER(NLL.Sold_100_Percent_Frozen);
PARAMETER(RCD.Record_Status_2_Usr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?FR Rcd sts 1
CASE;

// IF CTL.Record Status 1 Usr is Not Blanks
IF CTL.Record_Status_1_Usr = 'A'/'D'/'I';

// AND RCD.Record Status 1 Usr NE CTL.Record Status 1 Usr
AND RCD.Record_Status_1_Usr <> CTL.Record_Status_1_Usr;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?FZ Rcd sts 2
CASE;

// IF CTL.Record Status 2 Usr is Not Blanks
IF CTL.Record_Status_2_Usr = 'A'/'D'/'I';

// AND RCD.Record Status 2 Usr NE CTL.Record Status 2 Usr
AND RCD.Record_Status_2_Usr <> CTL.Record_Status_2_Usr;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// RCD.Item Code USR = RCD.Frozen Item Code
RCD.Item_Code_USR = RCD.Frozen_Item_Code;

//?USER: Validate subfile control

//?F4 = prompt item codes
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Item Code
IF PGM.*Cursor_field = CTL.Item_Code;

// Call program Sel Item Fr-Fz        SL.
CALL PROGRAM(Sel Item Fr-Fz        SL) ('PBLVSRR');
PARAMETER(CTL.Item_Code);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> CTL.Frozen Item Code
IF PGM.*Cursor_field = CTL.Frozen_Item_Code;

// Call program Zzz Item Fr-Fz per FZ SL.
CALL PROGRAM(Zzz Item Fr-Fz per FZ SL) ('PBLWSRR');
PARAMETER(CTL.Frozen_Item_Code);

ENDIF;

ENDIF;

CASE;

// IF CTL.Frozen Item Code NE LCL.Frozen Item Code
IF CTL.Frozen_Item_Code <> LCL.Frozen_Item_Code;

// LCL.Frozen Item Code = CTL.Frozen Item Code
LCL.Frozen_Item_Code = CTL.Frozen_Item_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF CTL.Key Sold 100% Frozen NE LCL.Key Sold 100% Frozen
IF CTL.Key_Sold_100_Pct_Frozen <> LCL.Key_Sold_100_Pct_Frozen;

// LCL.Key Sold 100% Frozen = CTL.Key Sold 100% Frozen
LCL.Key_Sold_100_Pct_Frozen = CTL.Key_Sold_100_Pct_Frozen;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF CTL.Frozen Sold 100% Frozen NE LCL.Frozen Sold 100% Frozen
IF CTL.Frozen_Sold_100_Pct_Froze <> LCL.Frozen_Sold_100_Pct_Froze;

// LCL.Frozen Sold 100% Frozen = CTL.Frozen Sold 100% Frozen
LCL.Frozen_Sold_100_Pct_Froze = CTL.Frozen_Sold_100_Pct_Froze;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF CTL.Record Status 1 Usr NE LCL.Record Status 1 Usr
IF CTL.Record_Status_1_Usr <> LCL.Record_Status_1_Usr;

// LCL.Record Status 1 Usr = CTL.Record Status 1 Usr
LCL.Record_Status_1_Usr = CTL.Record_Status_1_Usr;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF CTL.Record Status 2 Usr NE LCL.Record Status 2 Usr
IF CTL.Record_Status_2_Usr <> LCL.Record_Status_2_Usr;

// LCL.Record Status 2 Usr = CTL.Record Status 2 Usr
LCL.Record_Status_2_Usr = CTL.Record_Status_2_Usr;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Validate subfile record fields

CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> RCD.Frozen Item Code
IF PGM.*Cursor_field = RCD.Frozen_Item_Code;

// Call program SEL Item Default       SR.
CALL PROGRAM(SEL Item Default       SR) ('OMZ8SRR');
PARAMETER(RCD.Frozen_Item_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?ADD
CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

EXECUTE FUNCTION(Val Item Exists All    RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1563430;
PARAMETER(RCD.Item_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Item Default not found.'
ERROR(USR1160);
MSGPARM(RCD.Item_Code);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Item GS1 flds     RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC2083978;
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Item_Description_Line_1);
PARAMETER(RCD.Key_Sold_100_Pct_Frozen);
PARAMETER(RCD.Record_Status_1_Usr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF RCD.Key Sold 100% Frozen is yes
IF RCD.Key_Sold_100_Pct_Frozen = 'Y';

// Send error message - 'Item Invalid-it is sold 100% FZ'
ERROR(USR4740);
MSGPARM(RCD.Item_Code);

ENDIF;

ENDIF;

ENDIF;

//?Get FZ item info if it changed
//?Check for FZ item change
CASE;

// IF RCD.Frozen Item Code NE RCD.Item Code USR
IF RCD.Frozen_Item_Code <> RCD.Item_Code_USR;

//?Val item default
CASE;

// IF RCD.Frozen Item Code is Entered
IF RCD.Frozen_Item_Code <> *ZERO;

EXECUTE FUNCTION(Val Item Exists All    RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1563430;
PARAMETER(RCD.Frozen_Item_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Item Default not found.'
ERROR(USR1160);
MSGPARM(RCD.Frozen_Item_Code);

QUIT;

ENDIF;

ENDIF;

EXECUTE FUNCTION(Val Item Def Exists   RT) TYPE(RTVOBJ) FILE(PBA2REP)           AC2084161;
PARAMETER(RCD.Frozen_Item_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// Send error message - 'Item Fresh Frozen Master already exists.'
ERROR(USR4605);
MSGPARM(RCD.Frozen_Item_Code);

QUIT;

ENDIF;

EXECUTE FUNCTION(Val Item Def FZ ExistsRT) TYPE(RTVOBJ) FILE(PBA2REP)           AC2084226;
PARAMETER(RCD.Frozen_Item_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// Send error message - 'Item Fresh Frozen Master already exists.'
ERROR(USR4605);
MSGPARM(RCD.Frozen_Item_Code);

QUIT;

ENDIF;

EXECUTE FUNCTION(Rtv Item GS1 flds     RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC2083978;
PARAMETER(RCD.Frozen_Item_Code);
PARAMETER(RCD.Item_Description);
PARAMETER(RCD.Frozen_Sold_100_Pct_Froze);
PARAMETER(RCD.Record_Status_2_Usr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF RCD.Frozen Sold 100% Frozen is Not Yes
IF RCD.Frozen_Sold_100_Pct_Froze = *BLANK/'N';

// Send error message - 'Item Invalid-it is not sold 100% FZ'
ERROR(USR4741);
MSGPARM(RCD.Frozen_Item_Code);

QUIT;

ENDIF;

// RCD.Item Code USR = RCD.Frozen Item Code
RCD.Item_Code_USR = RCD.Frozen_Item_Code;

ENDIF;

//?1=Download to PFS
CASE;

// IF RCD.*SFLSEL is Option 1
IF RCD.*SFLSEL = '1'/'1';

// Call program Snd One Fr Fz Product XF.
CALL PROGRAM(Snd One Fr Fz Product XF) ('PBNEXFR');
PARAMETER(RCD.Item_Code);
PARAMETER('C');

ENDIF;

CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Item Default Ext  CR) TYPE(CRTOBJ) FILE(PBA2REP)           AC2067023;
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Key_Sold_100_Pct_Frozen);
PARAMETER(RCD.Frozen_Item_Code);
PARAMETER(RCD.Frozen_Sold_100_Pct_Froze);
PARAMETER(RCD.IG_GTIN);
PARAMETER(RCD.Rework_Required_Sts);
PARAMETER(RCD.IG_Unused_1_sts_2);
PARAMETER(RCD.IG_Unused_2_sts_3);
PARAMETER(RCD.IG_Unused_2_sts_4);
PARAMETER(RCD.IG_Unused_3_sts_5);
PARAMETER(RCD.IG_Unused_3_sts_6);
PARAMETER(RCD.IG_unused_text);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Create_Date);
PARAMETER(RCD.Create_Time);
PARAMETER(RCD.Create_User);
PARAMETER(RCD.Create_Program);
PARAMETER(RCD.Change_Date);
PARAMETER(RCD.Change_Time);
PARAMETER(RCD.Change_User);
PARAMETER(RCD.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  //?*** Set RECORD STATUS field. ***
  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  //?*** Set CREATE fields. ***
  // PAR.Create Date = JOB.*Job date
  PAR.Create_Date = JOB.*Job_date;

  // PAR.Create Time = JOB.*Job time
  PAR.Create_Time = JOB.*Job_time;

  // PAR.Create User = JOB.*USER
  PAR.Create_User = JOB.*USER;

  // PAR.Create Program = JOB.*PROGRAM
  PAR.Create_Program = JOB.*PROGRAM;

  //?*** Set CHANGE fields. ***
  // PAR.Change Date = CON.*ZERO
  PAR.Change_Date = *ZERO;

  // PAR.Change Time = CON.*ZERO
  PAR.Change_Time = *ZERO;

  // PAR.Change User = CON.*BLANK
  PAR.Change_User = *BLANK;

  // PAR.Change Program = CON.*BLANK
  PAR.Change_Program = *BLANK;

 }

 //?USER: Processing after Data update

 // Call program Snd One Fr Fz Product XF.
 CALL PROGRAM(Snd One Fr Fz Product XF) ('PBNEXFR');
 PARAMETER(DB1.Item_Code);
 PARAMETER('A');

}


//?USER: Delete DBF record

EXECUTE FUNCTION(Dlt Item Default Ext  DL) TYPE(DLTOBJ) FILE(PBA2REP)           AC2067025;
PARAMETER(RCD.Item_Code);
{
 //?USER: Processing before Data update

 // Call program Snd One Fr Fz Product XF.
 CALL PROGRAM(Snd One Fr Fz Product XF) ('PBNEXFR');
 PARAMETER(PAR.Item_Code);
 PARAMETER('D');

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Item Default Ext  CH) TYPE(CHGOBJ) FILE(PBA2REP)           AC2067024;
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Key_Sold_100_Pct_Frozen);
PARAMETER(RCD.Frozen_Item_Code);
PARAMETER(RCD.Frozen_Sold_100_Pct_Froze);
PARAMETER(RCD.IG_GTIN);
PARAMETER(RCD.Rework_Required_Sts);
PARAMETER(RCD.IG_Unused_1_sts_2);
PARAMETER(RCD.IG_Unused_2_sts_3);
PARAMETER(RCD.IG_Unused_2_sts_4);
PARAMETER(RCD.IG_Unused_3_sts_5);
PARAMETER(RCD.IG_Unused_3_sts_6);
PARAMETER(RCD.IG_unused_text);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Create_Date);
PARAMETER(RCD.Create_Time);
PARAMETER(RCD.Create_User);
PARAMETER(RCD.Create_Program);
PARAMETER(RCD.Change_Date);
PARAMETER(RCD.Change_Time);
PARAMETER(RCD.Change_User);
PARAMETER(RCD.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

 //?USER: Processing after Data update

 // Call program Snd One Fr Fz Product XF.
 CALL PROGRAM(Snd One Fr Fz Product XF) ('PBNEXFR');
 PARAMETER(DB1.Item_Code);
 PARAMETER('C');

}


//?USER: Process command keys

//?F18=PFS Download
CASE;

// IF CTL.*CMD key is CF18
IF CTL.*CMD_key = '18';

// Call program Zzz All Fr Fz Product XF.
CALL PROGRAM(Zzz All Fr Fz Product XF) ('PBNGXFR');
PARAMETER('C');
PARAMETER(*ZERO);

// Send information message - 'PFS Download has been created for processing.'
MESSAGE(USR4742 *INFO);

ENDIF;

//?F21= Email list
CASE;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

// Call program Pmt Enter Email Addr  PV.
CALL PROGRAM(Pmt Enter Email Addr  PV) ('POWGPVR');
PARAMETER(LCL.Email_Address);

CASE;

// IF LCL.Email Address is Entered
IF LCL.Email_Address <> *BLANK;

CASE;

// IF CTL.Key Sold 100% Frozen is blank
IF CTL.Key_Sold_100_Pct_Frozen = *BLANK;

// Execute command - 'EXECUTE SQL VIEW'
EXECUTE COMMAND(USR4691);
PARAMETER(LCL.Email_Address);
PARAMETER(CTL.Key_Sold_100_Pct_Frozen);

// IF *OTHERWISE
IF *OTHERWISE;

// Execute command - 'EXECUTE SQL VIEW'
EXECUTE COMMAND(USR4690);
PARAMETER(LCL.Email_Address);
PARAMETER(CTL.Key_Sold_100_Pct_Frozen);

ENDIF;

ENDIF;

ENDIF;

