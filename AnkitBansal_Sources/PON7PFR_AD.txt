// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PON7PFR
// ?Date: 14.08.2025 Time: 12:06:17
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.Email PO Error = CND.No
PAR.Email_PO_Error = 'N';

//?USER: On print of detail format

// CUR.Condition Name USR = Condition name of CUR.G5001-ORDER STATUS CODE
CUR.Condition_Name_USR = RTVCND(CUR.G5001_ORDER_STATUS_CODE);

// CUR.Condition Desc. 4  USR = Condition name of CUR.POH PO Purpose cde-OO
CUR.Condition_Desc_4_USR = RTVCND(CUR.POH_PO_Purpose_cde_OO);

EXECUTE FUNCTION(Rtv Address Info      RT) TYPE(RTVOBJ) FILE(ECP006)            AC1638104;
PARAMETER(CUR.ST02_TRANS_SET_CONTROL_NU);
PARAMETER(CUR.Ship_To_Name);
PARAMETER(CUR.Bill_to_Name);
PARAMETER(CUR.Vendor_Name);
PARAMETER(CUR.Ship_To_Address_Line_1);
PARAMETER(CUR.Bill_to_Address_Line_1);
PARAMETER(CUR.Remittance_Address_1);
PARAMETER(CUR.Ship_To_Address_Line_2);
PARAMETER(CUR.Bill_to_Address_Line_2);
PARAMETER(CUR.Remittance_Address_2);
PARAMETER(CUR.Bill_to_City);
PARAMETER(CUR.Bill_to_State_Code);
PARAMETER(CUR.Bill_to_Zip_Postal_Code);
PARAMETER(CUR.Ship_To_City);
PARAMETER(CUR.Ship_To_State_Code);
PARAMETER(CUR.Ship_To_Zip_Postal_Code);
PARAMETER(CUR.Remittance_City);
PARAMETER(CUR.Remittance_State);
PARAMETER(CUR.Remittance_Zip);
PARAMETER(LCL.EDI_Cust_Duns_Number);
PARAMETER(CUR.EDI_Billto_Duns_Number);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?3/6/08 SAZ added this code for the BS  Bill to ship to
 CASE;

 // IF DB1.N101-NAME TYPE CODE is Bill To/Ship To
 IF DB1.N101_NAME_TYPE_CODE = 'BS';

 // PAR.Bill to Name = DB1.N102-NAME
 PAR.Bill_to_Name = DB1.N102_NAME;

 // PAR.Bill to Address Line 1 = DB1.N301-ADD
 PAR.Bill_to_Address_Line_1 = DB1.N301_ADD;

 // PAR.Bill to Address Line 2 = DB1.N302-ADDRESS
 PAR.Bill_to_Address_Line_2 = DB1.N302_ADDRESS;

 // PAR.Bill to City = DB1.N401-CITY
 PAR.Bill_to_City = DB1.N401_CITY;

 // PAR.Bill to State Code = DB1.N402-CITY
 PAR.Bill_to_State_Code = DB1.N402_STATE;

 // PAR.Bill to Zip/Postal Code = DB1.N403-POSTAL CODE
 PAR.Bill_to_Zip_Postal_Code = DB1.N403_POSTAL_CODE;

 // PAR.EDI Billto Duns Number = DB1.N104-ID CODE
 PAR.EDI_Billto_Duns_Number = DB1.N104_ID_CODE;

 // PAR.Ship To Name = DB1.N102-NAME
 PAR.Ship_To_Name = DB1.N102_NAME;

 // PAR.Ship To Address Line 1 = DB1.N301-ADD
 PAR.Ship_To_Address_Line_1 = DB1.N301_ADD;

 // PAR.Ship To Address Line 2 = DB1.N302-ADDRESS
 PAR.Ship_To_Address_Line_2 = DB1.N302_ADDRESS;

 // PAR.Ship To City = DB1.N401-CITY
 PAR.Ship_To_City = DB1.N401_CITY;

 // PAR.Ship To State Code = DB1.N402-CITY
 PAR.Ship_To_State_Code = DB1.N402_STATE;

 // PAR.Ship To Zip/Postal Code = DB1.N403-POSTAL CODE
 PAR.Ship_To_Zip_Postal_Code = DB1.N403_POSTAL_CODE;

 // PAR.EDI Cust Duns Number = DB1.N104-ID CODE
 PAR.EDI_Cust_Duns_Number = DB1.N104_ID_CODE;

 // IF DB1.N101-NAME TYPE CODE is Bill To
 IF DB1.N101_NAME_TYPE_CODE = 'BT';

 // PAR.Bill to Name = DB1.N102-NAME
 PAR.Bill_to_Name = DB1.N102_NAME;

 // PAR.Bill to Address Line 1 = DB1.N301-ADD
 PAR.Bill_to_Address_Line_1 = DB1.N301_ADD;

 // PAR.Bill to Address Line 2 = DB1.N302-ADDRESS
 PAR.Bill_to_Address_Line_2 = DB1.N302_ADDRESS;

 // PAR.Bill to City = DB1.N401-CITY
 PAR.Bill_to_City = DB1.N401_CITY;

 // PAR.Bill to State Code = DB1.N402-CITY
 PAR.Bill_to_State_Code = DB1.N402_STATE;

 // PAR.Bill to Zip/Postal Code = DB1.N403-POSTAL CODE
 PAR.Bill_to_Zip_Postal_Code = DB1.N403_POSTAL_CODE;

 //?If Identifier = ZZ, some customers send a Foodservice ID instead
 //?of a DUNS.  So Blank the BT DUNS and retrieve it later.
 CASE;

 // IF DB1.N103-ID CODE QUALIFIER is ZZ
 IF DB1.N103_ID_CODE_QUALIFIER = 'ZZ';

 // PAR.EDI Billto Duns Number = CON.*BLANK
 PAR.EDI_Billto_Duns_Number = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.EDI Billto Duns Number = DB1.N104-ID CODE
 PAR.EDI_Billto_Duns_Number = DB1.N104_ID_CODE;

 ENDIF;

 // PAR.EDI Cust Duns Number = CON.*BLANK
 PAR.EDI_Cust_Duns_Number = *BLANK;

 // IF DB1.N101-NAME TYPE CODE is Ship To
 IF DB1.N101_NAME_TYPE_CODE = 'ST';

 // PAR.Ship To Name = DB1.N102-NAME
 PAR.Ship_To_Name = DB1.N102_NAME;

 // PAR.Ship To Address Line 1 = DB1.N301-ADD
 PAR.Ship_To_Address_Line_1 = DB1.N301_ADD;

 // PAR.Ship To Address Line 2 = DB1.N302-ADDRESS
 PAR.Ship_To_Address_Line_2 = DB1.N302_ADDRESS;

 // PAR.Ship To City = DB1.N401-CITY
 PAR.Ship_To_City = DB1.N401_CITY;

 // PAR.Ship To State Code = DB1.N402-CITY
 PAR.Ship_To_State_Code = DB1.N402_STATE;

 // PAR.Ship To Zip/Postal Code = DB1.N403-POSTAL CODE
 PAR.Ship_To_Zip_Postal_Code = DB1.N403_POSTAL_CODE;

 // PAR.EDI Cust Duns Number = DB1.N104-ID CODE
 PAR.EDI_Cust_Duns_Number = DB1.N104_ID_CODE;

 // IF DB1.N101-NAME TYPE CODE is WalMart Buyer
 IF DB1.N101_NAME_TYPE_CODE = 'BY';

 // PAR.Ship To Name = DB1.N102-NAME
 PAR.Ship_To_Name = DB1.N102_NAME;

 // PAR.Ship To Address Line 1 = DB1.N301-ADD
 PAR.Ship_To_Address_Line_1 = DB1.N301_ADD;

 // PAR.Ship To Address Line 2 = DB1.N302-ADDRESS
 PAR.Ship_To_Address_Line_2 = DB1.N302_ADDRESS;

 // PAR.Ship To City = DB1.N401-CITY
 PAR.Ship_To_City = DB1.N401_CITY;

 // PAR.Ship To State Code = DB1.N402-CITY
 PAR.Ship_To_State_Code = DB1.N402_STATE;

 // PAR.Ship To Zip/Postal Code = DB1.N403-POSTAL CODE
 PAR.Ship_To_Zip_Postal_Code = DB1.N403_POSTAL_CODE;

 // PAR.EDI Cust Duns Number = DB1.N104-ID CODE
 PAR.EDI_Cust_Duns_Number = DB1.N104_ID_CODE;

 // LCL.EDI Cust Duns Number = DB1.N104-ID CODE
 LCL.EDI_Cust_Duns_Number = DB1.N104_ID_CODE;

 EXECUTE FUNCTION(Rtv Sales Route       RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1638220;
 PARAMETER(LCL.EDI_Cust_Duns_Number);
 PARAMETER(LCL.Sales_Route_Code);
 PARAMETER(NLL.Sales_Route_Description);
 PARAMETER(LCL.Ship_To_Customer);
 PARAMETER(NLL.Special_Instructions_2);
 PARAMETER(NLL.Special_Instructions);
 PARAMETER(NLL.Salesperson_Name);
 PARAMETER(NLL.Email_Address);
 {
  //?USER: Process Data record

  // PAR.Ship To Customer = DB1.Ship To Customer
  PAR.Ship_To_Customer = DB1.Ship_To_Customer;

  EXECUTE FUNCTION(Rtv EDI Customer Info RT) TYPE(RTVOBJ) FILE(CAEOREP)           AC1638223;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(PAR.Sales_Route_Code);
  PARAMETER(PAR.Special_Instructions_2);
  PARAMETER(PAR.Special_Instructions);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  EXECUTE FUNCTION(RTV SR Desc,person     RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1270657;
  PARAMETER(PAR.Sales_Route_Code);
  PARAMETER(PAR.Sales_Route_Description);
  PARAMETER(LCL.Salesperson_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Email/EDI Sts 3    RT) TYPE(RTVOBJ) FILE(PDNFREP)          AC1644428;
  PARAMETER(LCL.Salesperson_Code);
  PARAMETER(PAR.Email_Address);
  PARAMETER(LCL.EDI_Status_3);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.EDI Status 3 is Blank
  IF LCL.EDI_Status_3 = *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV default Company    IF) TYPE(EXCINTFUN)                     AC1592222;
  PARAMETER(LCL.Company_Number);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
   PARAMETER(JOB.*USER);
   PARAMETER(PAR.User_Code_Model);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF PAR.User Code Model is equal to blank
   IF PAR.User_Code_Model = *BLANK;

   EXECUTE FUNCTION(RTV Appl. Default Co   RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143068;
   PARAMETER(JOB.*USER);
   PARAMETER('P/S');
   PARAMETER(PAR.Company_Number);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Appl. Default Co   RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143068;
   PARAMETER(PAR.User_Code_Model);
   PARAMETER('P/S');
   PARAMETER(PAR.Company_Number);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
  PARAMETER(LCL.Company_Number);
  PARAMETER('DFTPOEMAIL');
  PARAMETER(LCL.System_Value_Alpha);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.Email Address = LCL.System Value Alpha
  PAR.Email_Address = LCL.System_Value_Alpha;

  ENDIF;

  QUIT;

 }

 //?Wal-Mart Buyer = Y, they do not have a BT record.
 CASE;

 // IF LCL.Ship To Customer is not equal to zero
 IF LCL.Ship_To_Customer <> *ZERO;

 EXECUTE FUNCTION(RTV Cust Add,Ct-A/R CstRT) TYPE(RTVOBJ) FILE(CABBREP)          AC1470402;
 PARAMETER(LCL.Ship_To_Customer);
 PARAMETER(NLL.Customer_Name);
 PARAMETER(NLL.Address_Line_1);
 PARAMETER(NLL.Address_Line_2);
 PARAMETER(NLL.Address_Line_3);
 PARAMETER(NLL.City);
 PARAMETER(NLL.State_Code);
 PARAMETER(NLL.Zip_Postal_Code);
 PARAMETER(LCL.A_R_Customer);
 PARAMETER(NLL.Country_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Bill To TP & DUNS RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC2024373;
 PARAMETER(LCL.A_R_Customer);
 PARAMETER(NLL.EDI_Trading_Partner_No);
 PARAMETER(PAR.EDI_Billto_Duns_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.EDI Billto Duns Number = CON.*BLANK
 PAR.EDI_Billto_Duns_Number = *BLANK;

 ENDIF;

 // IF DB1.N101-NAME TYPE CODE is Vendor
 IF DB1.N101_NAME_TYPE_CODE = 'VN';

 // PAR.Vendor Name = DB1.N102-NAME
 PAR.Vendor_Name = DB1.N102_NAME;

 // PAR.Remittance Address 1 = DB1.N301-ADD
 PAR.Remittance_Address_1 = DB1.N301_ADD;

 // PAR.Remittance Address 2 = DB1.N302-ADDRESS
 PAR.Remittance_Address_2 = DB1.N302_ADDRESS;

 // PAR.Remittance City = DB1.N401-CITY
 PAR.Remittance_City = DB1.N401_CITY;

 // PAR.Remittance State = DB1.N402-CITY
 PAR.Remittance_State = DB1.N402_STATE;

 // PAR.Remittance Zip = DB1.N403-POSTAL CODE
 PAR.Remittance_Zip = DB1.N403_POSTAL_CODE;

 ENDIF;

 //?USER: Exit processing

 CASE;

 // IF PAR.Ship To Name is blanks
 IF PAR.Ship_To_Name = *BLANK;

 // PAR.Ship To Name = CON.Not Available
 PAR.Ship_To_Name = 'Not Available';

 // IF PAR.Bill to Name is blanks
 IF PAR.Bill_to_Name = *BLANK;

 // PAR.Bill to Name = CON.Not Available
 PAR.Bill_to_Name = 'Not Available';

 // IF PAR.Vendor Name is blanks
 IF PAR.Vendor_Name = *BLANK;

 // PAR.Vendor Name = CON.Not Available
 PAR.Vendor_Name = 'Not Available';

 ENDIF;

}


// CUR.N104-ID CODE = LCL.EDI Cust Duns Number
CUR.N104_ID_CODE = LCL.EDI_Cust_Duns_Number;

// PAR.Ship To Name = CUR.Ship To Name
PAR.Ship_To_Name = CUR.Ship_To_Name;

//?Save the ship to and bill to DUNS from the actual PO sent.
// LCL.EDI Shipto Duns Number = LCL.EDI Cust Duns Number
LCL.EDI_Shipto_Duns_Number = LCL.EDI_Cust_Duns_Number;

// CUR.EDI Shipto Duns Number = LCL.EDI Cust Duns Number
CUR.EDI_Shipto_Duns_Number = LCL.EDI_Cust_Duns_Number;

//?Move ship to duns to outbound parm
// PAR.EDI Shipto Duns Number = LCL.EDI Cust Duns Number
PAR.EDI_Shipto_Duns_Number = LCL.EDI_Cust_Duns_Number;

// LCL.EDI Billto Duns Number = CUR.EDI Billto Duns Number
LCL.EDI_Billto_Duns_Number = CUR.EDI_Billto_Duns_Number;

//?Shipping Method
CASE;

// IF CUR.G6601-SHIPMENT METHOD is Not Entered
IF CUR.G6601_SHIPMENT_METHOD = *BLANK;

// CUR.Condition Desc. 1  USR = CON.Not Available
CUR.Condition_Desc_1_USR = 'Not Available';

//?Shipping Method
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Condition Desc. 1  USR = Condition name of CUR.G6601-SHIPMENT METHOD
CUR.Condition_Desc_1_USR = RTVCND(CUR.G6601_SHIPMENT_METHOD);

ENDIF;

//?Pallets Exchange Code
CASE;

// IF CUR.G6603-PALLET EXCHANGE COD is Not Entered
IF CUR.G6603_PALLET_EXCHANGE_COD = *BLANK;

// CUR.Condition Desc. 2  USR = CON.Not Available
CUR.Condition_Desc_2_USR = 'Not Available';

//?Pallets Exchange Code
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Condition Desc. 2  USR = Condition name of CUR.G6603-PALLET EXCHANGE COD
CUR.Condition_Desc_2_USR = RTVCND(CUR.G6603_PALLET_EXCHANGE_COD);

ENDIF;

//?Unit Load Option
CASE;

// IF CUR.G6604-UNIT LOAD OPTION CO is Not Entered
IF CUR.G6604_UNIT_LOAD_OPTION_CO = *BLANK;

// CUR.Condition Desc. 3  USR = CON.Not Available
CUR.Condition_Desc_3_USR = 'Not Available';

//?Unit Load Option
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Condition Desc. 3  USR = Condition name of CUR.G6604-UNIT LOAD OPTION CO
CUR.Condition_Desc_3_USR = RTVCND(CUR.G6604_UNIT_LOAD_OPTION_CO);

ENDIF;

//?Get Sales Person email, ST cust nbr
//?03/22/21 DN R17040-Changed to Check EDI Trading Partner # matches.
//?   Passed in the EDI Trading Partner No. as parm.
EXECUTE FUNCTION(Rtv Sales Rte-1st ShToRT) TYPE(RTVOBJ) FILE(PDNEREP)           AC2159214;
PARAMETER(LCL.EDI_Cust_Duns_Number);
PARAMETER(CUR.EDI_Trading_Partner_No);
PARAMETER(CUR.Sales_Route_Code);
PARAMETER(CUR.Sales_Route_Description);
PARAMETER(CUR.Customer_Number_NBR);
PARAMETER(NXT.Special_Instructions_2);
PARAMETER(NXT.Special_Instructions);
PARAMETER(LCL.Salesperson_Name);
PARAMETER(LCL.Email_Address);
{
 //?USER: Process Data record

 //?get 1st ship to cust for the duns               RMC 10/23/18
 //?03/22/21 DN R17040-Old Logic. Commented Out & Moved/Changed Below.
 //?***NOTE: Any changes made here, should consider changes to
 //?         'Rtv EDI ST by EDI Duns RT - Customer EXT',
 //?         'PRT ST Cust by DUNS   PO - Customer EXT' &
 //?         'PRT BT Cust by DUNS   PO - Customer EXT' functions as
 //?         well. BOTH functions share the same Business Logic to get
 //?         the correct EDI Ship To Customer #. ***
 //?03/22/21 DN R17040-New Logic: Get 1st Active STC# by DUNS#/Trade Partner.
 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 EXECUTE FUNCTION(Rtv ShpTo Info/AR Cst RT) TYPE(RTVOBJ) FILE(CABBREP)           AC1522850;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(NLL.Customer_Name);
 PARAMETER(NLL.Address_Line_1);
 PARAMETER(NLL.Address_Line_2);
 PARAMETER(NLL.Address_Line_3);
 PARAMETER(NLL.City);
 PARAMETER(NLL.State_Code);
 PARAMETER(NLL.Zip_Postal_Code);
 PARAMETER(NLL.Telephone_Number_FF);
 PARAMETER(LCL.AR_Customer_Number);
 PARAMETER(NLL.Order_Entry_Hold);
 PARAMETER(LCL.Ship_To_Customer_Flag);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Must Be Use as Ship To Customer.
 CASE;

 // IF LCL.Ship To Customer Flag is Allow Use as Ship To Cust
 IF LCL.Ship_To_Customer_Flag = 'Y';

 EXECUTE FUNCTION(Rtv Trading Partner   RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC2195397;
 PARAMETER(LCL.AR_Customer_Number);
 PARAMETER(LCL.EDI_Trading_Partner_No);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Match by Trading Partner for Bill To Customer.
 CASE;

 // IF PAR.EDI Trading Partner No. EQ LCL.EDI Trading Partner No.
 IF PAR.EDI_Trading_Partner_No = LCL.EDI_Trading_Partner_No;

 // PAR.Ship To Customer = DB1.Ship To Customer
 PAR.Ship_To_Customer = DB1.Ship_To_Customer;

 EXECUTE FUNCTION(Rtv EDI Customer Info RT) TYPE(RTVOBJ) FILE(CAEOREP)           AC1638223;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(PAR.Sales_Route_Code);
 PARAMETER(PAR.Special_Instructions_2);
 PARAMETER(PAR.Special_Instructions);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 EXECUTE FUNCTION(RTV SR Desc,person     RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1270657;
 PARAMETER(PAR.Sales_Route_Code);
 PARAMETER(PAR.Sales_Route_Description);
 PARAMETER(LCL.Salesperson_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Email/EDI Sts 3    RT) TYPE(RTVOBJ) FILE(PDNFREP)          AC1644428;
 PARAMETER(LCL.Salesperson_Code);
 PARAMETER(PAR.Email_Address);
 PARAMETER(LCL.EDI_Status_3);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.EDI Status 3 is Blank
 IF LCL.EDI_Status_3 = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV default Company    IF) TYPE(EXCINTFUN)                     AC1592222;
 PARAMETER(LCL.Company_Number);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
  PARAMETER(JOB.*USER);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Default Co   RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143068;
  PARAMETER(JOB.*USER);
  PARAMETER('P/S');
  PARAMETER(PAR.Company_Number);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Default Co   RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143068;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER('P/S');
  PARAMETER(PAR.Company_Number);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

 }

 EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
 PARAMETER(LCL.Company_Number);
 PARAMETER('DFTPOEMAIL');
 PARAMETER(LCL.System_Value_Alpha);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.Email Address = LCL.System Value Alpha
 PAR.Email_Address = LCL.System_Value_Alpha;

 ENDIF;

 QUIT;

 ENDIF;

 ENDIF;

 ENDIF;

}


//?03/23/21 DN R17040-Save 'EDI Trading Partner No.' to LCL context.
// LCL.EDI Trading Partner No. = CUR.EDI Trading Partner No.
LCL.EDI_Trading_Partner_No = CUR.EDI_Trading_Partner_No;

CASE;

// IF CUR.Ship To Address Line 1 is Blank
IF CUR.Ship_To_Address_Line_1 = *BLANK;

EXECUTE FUNCTION(RTV Cust Add,Ct-A/R CstRT) TYPE(RTVOBJ) FILE(CABBREP)          AC1470402;
PARAMETER(CUR.Customer_Number_NBR);
PARAMETER(CUR.Ship_To_Name);
PARAMETER(CUR.Ship_To_Address_Line_1);
PARAMETER(CUR.Ship_To_Address_Line_2);
PARAMETER(NLL.Address_Line_3);
PARAMETER(CUR.Ship_To_City);
PARAMETER(CUR.Ship_To_State_Code);
PARAMETER(CUR.Ship_To_Zip_Postal_Code);
PARAMETER(LCL.A_R_Customer);
PARAMETER(NLL.Country_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

CASE;

// IF CUR.Bill to Address Line 1 is Blank
IF CUR.Bill_to_Address_Line_1 = *BLANK;

EXECUTE FUNCTION(RTV Customer A/R Cust  RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1210709;
PARAMETER(CUR.Customer_Number_NBR);
PARAMETER(LCL.A_R_Customer);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Cust Name/Addr     RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1129143;
PARAMETER(LCL.A_R_Customer);
PARAMETER(CUR.Bill_to_Name);
PARAMETER(CUR.Bill_to_Address_Line_1);
PARAMETER(CUR.Bill_to_Address_Line_2);
PARAMETER(NLL.Address_Line_3);
PARAMETER(CUR.Bill_to_City);
PARAMETER(CUR.Bill_to_State_Code);
PARAMETER(CUR.Bill_to_Zip_Postal_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?If email not found, put zeros on end of DUNS to get the BT DUNS
CASE;

// IF LCL.Email Address is Blank
IF LCL.Email_Address = *BLANK;

// LCL.CMS Duns = SUBSTRING(LCL.EDI Cust Duns Number,CON.1,CON.9)
LCL.CMS_Duns = SUBSTRING(LCL.EDI_Cust_Duns_Number:1:9);

// LCL.EDI Cust Duns Number = CONCAT(LCL.CMS Duns,CON.0000,CON.*ZERO)
LCL.EDI_Cust_Duns_Number = LCL.CMS_Duns + '0000' (*ZERO);

EXECUTE FUNCTION(Rtv Sales Route       RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1638220;
PARAMETER(LCL.EDI_Cust_Duns_Number);
PARAMETER(CUR.Sales_Route_Code);
PARAMETER(CUR.Sales_Route_Description);
PARAMETER(LCL.Customer_Number_NBR);
PARAMETER(NLL.Special_Instructions_2);
PARAMETER(NLL.Special_Instructions);
PARAMETER(LCL.Salesperson_Name);
PARAMETER(PAR.Email_Address);
{
 //?USER: Process Data record

 // PAR.Ship To Customer = DB1.Ship To Customer
 PAR.Ship_To_Customer = DB1.Ship_To_Customer;

 EXECUTE FUNCTION(Rtv EDI Customer Info RT) TYPE(RTVOBJ) FILE(CAEOREP)           AC1638223;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(PAR.Sales_Route_Code);
 PARAMETER(PAR.Special_Instructions_2);
 PARAMETER(PAR.Special_Instructions);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 EXECUTE FUNCTION(RTV SR Desc,person     RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1270657;
 PARAMETER(PAR.Sales_Route_Code);
 PARAMETER(PAR.Sales_Route_Description);
 PARAMETER(LCL.Salesperson_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Email/EDI Sts 3    RT) TYPE(RTVOBJ) FILE(PDNFREP)          AC1644428;
 PARAMETER(LCL.Salesperson_Code);
 PARAMETER(PAR.Email_Address);
 PARAMETER(LCL.EDI_Status_3);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.EDI Status 3 is Blank
 IF LCL.EDI_Status_3 = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV default Company    IF) TYPE(EXCINTFUN)                     AC1592222;
 PARAMETER(LCL.Company_Number);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
  PARAMETER(JOB.*USER);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Default Co   RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143068;
  PARAMETER(JOB.*USER);
  PARAMETER('P/S');
  PARAMETER(PAR.Company_Number);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Default Co   RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143068;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER('P/S');
  PARAMETER(PAR.Company_Number);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

 }

 EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
 PARAMETER(LCL.Company_Number);
 PARAMETER('DFTPOEMAIL');
 PARAMETER(LCL.System_Value_Alpha);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.Email Address = LCL.System Value Alpha
 PAR.Email_Address = LCL.System_Value_Alpha;

 ENDIF;

 QUIT;

}


//?If email not found, put zeros on end of DUNS to get the BT DUNS
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Email Address = LCL.Email Address
PAR.Email_Address = LCL.Email_Address;

ENDIF;

//?If BT Duns Blank, use ST cust and go get A/R cust then get BT DUNS
CASE;

// IF LCL.EDI Billto Duns Number EQ WRK.BLANK
IF LCL.EDI_Billto_Duns_Number = WRK.BLANK;

CASE;

// IF CUR.Customer Number       NBR is not equal 0
IF CUR.Customer_Number_NBR <> *ZERO;

EXECUTE FUNCTION(RTV Cust A/r,Sls Rte  RT) TYPE(RTVOBJ) FILE(CABBREP)           AC1680258;
PARAMETER(CUR.Customer_Number_NBR);
PARAMETER(NLL.Customer_Name);
PARAMETER(LCL.AR_Customer_Number);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Bill To TP & DUNS RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC2024373;
PARAMETER(LCL.AR_Customer_Number);
PARAMETER(NLL.EDI_Trading_Partner_No);
PARAMETER(CUR.EDI_Billto_Duns_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.EDI Billto Duns Number = CUR.EDI Billto Duns Number
LCL.EDI_Billto_Duns_Number = CUR.EDI_Billto_Duns_Number;

CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// LCL.EDI Billto Duns Number = WRK.BLANK
LCL.EDI_Billto_Duns_Number = WRK.BLANK;

ENDIF;

ENDIF;

ENDIF;

//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : Prt Purchase Order    PO
EXECUTE FUNCTION(Prt Purchase Order    PO) TYPE(PRTOBJ);
PARAMETER(CUR.ST02_TRANS_SET_CONTROL_NU);
PARAMETER(CUR.Customer_Number_NBR);
PARAMETER(CUR.EDI_Trading_Partner_No);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Process after print of detail format

CASE;

// IF DB1.G7601-QUANTITY ORDERED is Entered
IF DB1.G7601_QUANTITY_ORDERED <> *ZERO;

// NXT.G7601-QUANTITY ORDERED = CUR.G7601-QUANTITY ORDERED
NXT.G7601_QUANTITY_ORDERED = CUR.G7601_QUANTITY_ORDERED;

// IF *OTHERWISE
IF *OTHERWISE;

// NXT.G7601-QUANTITY ORDERED = PAR.G7601-QUANTITY ORDERED
NXT.G7601_QUANTITY_ORDERED = PAR.G7601_QUANTITY_ORDERED;

ENDIF;

//?PRTOBJ calls before print of final totals format

//?Embedded PRTOBJ : PRT PO SAC/G72 Al/Chg PO
EXECUTE FUNCTION(PRT PO SAC/G72 Al/Chg PO) TYPE(PRTOBJ);
PARAMETER(PAR.ST02_TRANS_SET_CONTROL_NU);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: On print of final totals format

MOVE *ALL (To: CUR From: PAR);

//?PRTOBJ calls after print of final totals format

//?Embedded PRTOBJ : PRT BT Cust by DUNS   PO
CASE;

// IF LCL.EDI Billto Duns Number EQ WRK.BLANK
IF LCL.EDI_Billto_Duns_Number = WRK.BLANK;

// LCL.EDI Billto Duns Number = CON.********************
LCL.EDI_Billto_Duns_Number = '********************';

ENDIF;

//?3/23/21 DN R17040-Passed in EDI Trading Partner No.
EXECUTE FUNCTION(PRT BT Cust by DUNS   PO) TYPE(PRTOBJ);
PARAMETER(LCL.EDI_Billto_Duns_Number);
PARAMETER(PAR.Email_PO_Error);
PARAMETER(LCL.EDI_Trading_Partner_No);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Embedded PRTOBJ : PRT ST Cust by DUNS   PO
CASE;

// IF LCL.EDI Shipto Duns Number is Not Found
IF LCL.EDI_Shipto_Duns_Number = *BLANK;

// LCL.EDI Shipto Duns Number = CON.********************
LCL.EDI_Shipto_Duns_Number = '********************';

ENDIF;

//?3/23/21 DN R17040-Passed in EDI Trading Partner No.
EXECUTE FUNCTION(PRT ST Cust by DUNS   PO) TYPE(PRTOBJ);
PARAMETER(LCL.EDI_Shipto_Duns_Number);
PARAMETER(PAR.Email_PO_Error);
PARAMETER(LCL.EDI_Trading_Partner_No);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Embedded PRTOBJ : PRT EDI PO Notes      PO
EXECUTE FUNCTION(PRT EDI PO Notes      PO) TYPE(PRTOBJ);
PARAMETER(PAR.ST02_TRANS_SET_CONTROL_NU);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


