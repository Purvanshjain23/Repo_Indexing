// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPLUE1R
// ?Date: 14.08.2025 Time: 03:41:08
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?*** Setup Security & Company Title ***
// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.Clm Program USR = CND.Edit Expense
PAR.Clm_Program_USR = 'EEX';

//?***** Change Log and Comments
DO;

//?** 02/27/2008 LJB E00094
//?** In the "USER: Change DBF record" and "USER: Create DBF record"
//?** add the function to email a claim notice to the St Joe distribution
//?** list of the claim with Change To Expense in the comments section
//?E3387 JJH 09/13/14 - Display Shipping Method
ENDDO;

//?USER: Initialize key screen

// KEY.Expense Code = PAR.Expense Code
KEY.Expense_Code = PAR.Expense_Code;

CASE;

// IF KEY.Sequence Number is zero
IF KEY.Sequence_Number = *ZERO;

// KEY.Sequence Number = CON.999
KEY.Sequence_Number = 999;

ENDIF;

//?USER: Initialize detail screen (new record)

// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

// DTL.Expense Status = CND.Pending Claim Expense
DTL.Expense_Status = 'P';

//?E3387 JJH 09/13/14 - Display Shipping Method
EXECUTE FUNCTION(Rtv Claim Ship Meth   RT) TYPE(RTVOBJ) FILE(PDMKCPP)           AC2099556;
PARAMETER(DB1.Claim_Number);
PARAMETER(DTL.AC_Shipping_Method);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize detail screen (existing record)

//?E3387 JJH 09/13/14 - Display Shipping Method
EXECUTE FUNCTION(Rtv Claim Ship Meth   RT) TYPE(RTVOBJ) FILE(PDMKCPP)           AC2099556;
PARAMETER(DB1.Claim_Number);
PARAMETER(DTL.AC_Shipping_Method);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(ACR Shipping Method DRV) TYPE(DRVFLD)                          AC2098708;
PARAMETER(DTL.ACR_Shipping_Method_DRV);
PARAMETER(DTL.AC_Shipping_Method);
{
 //?Calculate derived field

 // PAR.ACR Shipping Method DRV = Condition name of PAR.ACR Shipping Method
 PAR.ACR_Shipping_Method_DRV = RTVCND(PAR.ACR_Shipping_Method);

}


//?USER: Process key screen request

RETURN;

//?USER: Validate detail screen fields

// PAR.Expense Code = DTL.Expense Code
PAR.Expense_Code = DTL.Expense_Code;

CASE;

// IF DTL.Expense Status is Actual Claim Expense
IF DTL.Expense_Status = 'A';

CASE;

// IF DTL.Expense Amount is equal to zero
IF DTL.Expense_Amount = *ZERO;

// Send error message - 'Expense Amount Required, if Status = A (Actual)'
ERROR(USR3651);
MSGPARM(DTL.Expense_Amount);

ENDIF;

ENDIF;

//?CALC: Detail screen function fields

// DTL.Description Line One = Condition name of DTL.Expense Responsibility
DTL.Description_Line_One = RTVCND(DTL.Expense_Responsibility);

// DTL.Description. . . . . . . = Condition name of DTL.Expense Status
DTL.Description = RTVCND(DTL.Expense_Status);

// DTL.Description Line Two = Condition name of DTL.TFS Process Status
DTL.Description_Line_Two = RTVCND(DTL.TFS_Process_Status);

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(PAR.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(ACR Shipping Method DRV) TYPE(DRVFLD)                          AC2098708;
PARAMETER(DTL.ACR_Shipping_Method_DRV);
PARAMETER(DTL.AC_Shipping_Method);
{
 //?Calculate derived field

 // PAR.ACR Shipping Method DRV = Condition name of PAR.ACR Shipping Method
 PAR.ACR_Shipping_Method_DRV = RTVCND(PAR.ACR_Shipping_Method);

}


//?USER: Create DBF record

EXECUTE FUNCTION(Crt A/R Claim Exp     IF) TYPE(EXCINTFUN) FILE(PPA1CPP)        AC1726780;
PARAMETER(DTL.Claim_Number);
PARAMETER(DTL.Expense_Code);
PARAMETER(PAR.Sequence_Number);
PARAMETER(DTL.Expense_Responsibility);
PARAMETER(DTL.Expense_Amount);
PARAMETER(DTL.Expense_Status);
PARAMETER('O');
PARAMETER(DTL.TFS_Batch_Number);
PARAMETER(DTL.TFS_Claim_Expense_Amount);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
PARAMETER(PAR.Claim_Audit_Selection_Usr);
PARAMETER(PAR.Claim_Audit_Co_Value_Usr);
PARAMETER(PAR.Approval_Claim_Audit_Eml);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Next Seq #        RT) TYPE(RTVOBJ) FILE(PPA1CPP)           AC1726783;
 PARAMETER(PAR.Claim_Number);
 PARAMETER(PAR.Expense_Code);
 PARAMETER(PAR.Sequence_Number);
 {
  //?USER: Processing if Data record not found

  // PAR.Sequence Number = CON.1
  PAR.Sequence_Number = 1;

  //?USER: Process Data record

  // PAR.Sequence Number = DB1.Sequence Number + CON.1
  PAR.Sequence_Number = DB1.Sequence_Number + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt A/R Claim ExpSA   CR) TYPE(CRTOBJ) FILE(PPA1CPP)           AC1877452;
 PARAMETER(PAR.Claim_Number);
 PARAMETER(PAR.Expense_Code);
 PARAMETER(PAR.Sequence_Number);
 PARAMETER(PAR.Expense_Responsibility);
 PARAMETER(PAR.Expense_Amount);
 PARAMETER(PAR.Expense_Status);
 PARAMETER('O');
 PARAMETER(PAR.TFS_Batch_Number);
 PARAMETER(PAR.TFS_Claim_Expense_Amount);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Create_Date);
 PARAMETER(PAR.Create_Time);
 PARAMETER(PAR.Create_User);
 PARAMETER(PAR.Create_Program);
 PARAMETER(PAR.Change_Date);
 PARAMETER(PAR.Change_Time);
 PARAMETER(PAR.Change_User);
 PARAMETER(PAR.Change_Program);
 PARAMETER(PAR.Claim_Audit_Selection_Usr);
 PARAMETER(PAR.Claim_Audit_Co_Value_Usr);
 PARAMETER(PAR.Approval_Claim_Audit_Eml);
 {
  //?USER: Processing before Data update

  // DB1.TFS Process Status = CND.Open
  DB1.TFS_Process_Status = 'O';

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

  //?USER: Processing after Data update

  CASE;

  // IF PAR.Claim Audit Selection Usr is yes
  IF PAR.Claim_Audit_Selection_Usr = 'Y';

  //?System generated action notes
  //?Expense Created
  // Call program Crt A/R Claim ExpComSG XF.
  CALL PROGRAM(Crt A/R Claim ExpComSG XF) ('PMTNXFR');
  PARAMETER(PAR.Claim_Number);
  PARAMETER('Expense Created');
  PARAMETER('S');
  PARAMETER('CLMCHANGE');
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('CAR');

  ENDIF;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg A/R Claim ExpSA   CH) TYPE(CHGOBJ) FILE(PPA1CPP)           AC1877455;
PARAMETER(DTL.Claim_Number);
PARAMETER(DTL.Expense_Code);
PARAMETER(DTL.Sequence_Number);
PARAMETER(DTL.Expense_Responsibility);
PARAMETER(DTL.Expense_Amount);
PARAMETER(DTL.Expense_Status);
PARAMETER(DTL.TFS_Process_Status);
PARAMETER(DTL.TFS_Batch_Number);
PARAMETER(DTL.TFS_Claim_Expense_Amount);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
PARAMETER(PAR.Claim_Audit_Selection_Usr);
PARAMETER(PAR.Claim_Audit_Co_Value_Usr);
PARAMETER(PAR.Approval_Claim_Audit_Eml);
{
 //?USER: Processing before Data read

 //?***** Change Log and Comments
 DO;

 //?** 02/27/2008 LJB E00094
 //?** Prompt to email Change of Product notice to Triumph Foods
 //?** after database update. Email if "Yes"
 ENDDO;

 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

 //?USER: Processing after Data update

 CASE;

 // IF PAR.Claim Audit Selection Usr is yes
 IF PAR.Claim_Audit_Selection_Usr = 'Y';

 //?System generated action notes
 //?Expense Changed
 // Call program Crt A/R Claim ExpComSG XF.
 CALL PROGRAM(Crt A/R Claim ExpComSG XF) ('PMTNXFR');
 PARAMETER(PAR.Claim_Number);
 PARAMETER('Expense Changed');
 PARAMETER('S');
 PARAMETER('CLMCHANGE');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('CAR');

 ENDIF;

}


//?USER: Process command keys

//?F8=NEXT
CASE;

// IF DTL.*CMD key is SUBMIT/NEXT
IF DTL.*CMD_key = '08';

// PAR.Clm Program USR = CND.Edit Exp/Comment
PAR.Clm_Program_USR = 'EEC';

RETURN;

ENDIF;

//?F7=BACK
CASE;

// IF DTL.*CMD key is BACK
IF DTL.*CMD_key = '07';

// PAR.Expense Code = CON.*BLANK
PAR.Expense_Code = *BLANK;

// PAR.Sequence Number = CON.*ZERO
PAR.Sequence_Number = *ZERO;

// PAR.Clm Program USR = CND.Work With Expense
PAR.Clm_Program_USR = 'WWE';

RETURN;

ENDIF;

//?USER: Exit program processing

CASE;

// IF KEY.*CMD key is CF03
IF KEY.*CMD_key = '03';

// PAR.Clm Program USR = CND.Work With Expense
PAR.Clm_Program_USR = 'WWE';

RETURN;

ENDIF;

