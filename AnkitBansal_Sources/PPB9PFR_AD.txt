// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPB9PFR
// ?Date: 14.08.2025 Time: 12:06:28
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification History
//?08/09/02 SLM -- E-MAIL FROM BRET GETZEL correction to A & C bracker
EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

//?USER: Record selection processing

CASE;

// IF DB1.Invoice Date LT PAR.Date From             USR
IF DB1.Invoice_Date < PAR.Date_From_USR;

// OR DB1.Invoice Date GT PAR.Date To               USR
OR DB1.Invoice_Date > PAR.Date_To_USR;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF PAR.Ship To Customer is not equal to zero
IF PAR.Ship_To_Customer <> *ZERO;

// AND PAR.Ship To Customer NE DB1.Ship To Customer
AND PAR.Ship_To_Customer <> DB1.Ship_To_Customer;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF DB1.Load ID is Blank
IF DB1.Load_ID = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: On print of first page format

MOVE *ALL (To: 1PG From: PAR);

EXECUTE FUNCTION(Ship To Name          DRV) TYPE(DRVFLD)                        AC1573561;
PARAMETER(X1PG_Ship_To_Name_DRV);
PARAMETER(X1PG_Ship_To_Customer);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


CASE;

// IF PAR.Ship To Customer is equal to zero
IF PAR.Ship_To_Customer = *ZERO;

// 1PG.Ship To Name          DRV = CON.All
X1PG_Ship_To_Name_DRV = 'All';

ENDIF;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
// Print Company Number header format
PRINT Company Number header format;

ENDIF;

// SUPPRESSED PRINT Ship To Customer header format

CASE;

IF NEW Load_ID;
//?Sum number of stops for cust,from Load Dtl and Shipped Weight from Ord Dtl
EXECUTE FUNCTION(RTV Cust Bracket Stop RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1682174;
PARAMETER(DB1.Load_ID);
PARAMETER(LCL.Number_of_Orders_on_Stop);
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(LCL.Total_Weight_Ship_USR);
{
 //?USER: Initialize routine

 // LCL.Stop/Drop = CON.*ZERO
 LCL.Stop_Drop = 0;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Ship Cust,Bill Typ RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1393140;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Ship_To_Customer);
 PARAMETER(WRK.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Ship To Customer EQ PAR.Ship To Customer
 IF LCL.Ship_To_Customer = PAR.Ship_To_Customer;

 EXECUTE FUNCTION(Rtv Wgt Sched/Shpd    RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1632549;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Weight_Scheduled);
 PARAMETER(LCL.Weight_Shipped_Total);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Weight Scheduled = PAR.Weight Scheduled + DB1.Weight Scheduled
  PAR.Weight_Scheduled = PAR.Weight_Scheduled + DB1.Weight_Scheduled;

  // PAR.Weight Shipped Total = PAR.Weight Shipped Total + DB1.Weight Shipped Total
  PAR.Weight_Shipped_Total = PAR.Weight_Shipped_Total + DB1.Weight_Shipped_Total;

 }

 // PAR.Total Weight Ship    USR = PAR.Total Weight Ship    USR + LCL.Weight Shipped Total
 PAR.Total_Weight_Ship_USR = PAR.Total_Weight_Ship_USR + LCL.Weight_Shipped_Total;

 CASE;

 // IF DB1.Stop/Drop NE LCL.Stop/Drop
 IF DB1.Stop_Drop <> LCL.Stop_Drop;

 // PAR.Number of Orders on Stop = PAR.Number of Orders on Stop + CON.1
 PAR.Number_of_Orders_on_Stop = PAR.Number_of_Orders_on_Stop + 1;

 // LCL.Stop/Drop = DB1.Stop/Drop
 LCL.Stop_Drop = DB1.Stop_Drop;

 ENDIF;

 ENDIF;

}


// SUPPRESSED PRINT Load ID header format

ENDIF;

// SUPPRESSED PRINT Invoice Date header format

//?USER: Print required level totals

// SUPPRESSED PRINT Invoice Date totals format

// SUPPRESSED PRINT Load ID totals format

CASE;

IF NEW Ship_To_Customer;
// CUR.Total Weight Work = LCL.Total Weight Ship    USR
CUR.Total_Weight_Work = LCL.Total_Weight_Ship_USR;

// CUR.Count USR = LCL.Number of Orders on Stop
CUR.Count_USR = LCL.Number_of_Orders_on_Stop;

CASE;

// IF CUR.Count USR is GT 0
IF CUR.Count_USR > *ZERO;

// WRK.Weight 11.0 USR = CUR.Total Weight Work / CUR.Count USR *
WRK.Weight_11_0_USR = CUR.Total_Weight_Work / CUR.Count_USR;

//?08/09/04 SLM The A and C brackets on the Customer Bracket Report
//?             should be reversed.
//?             A customer should be the highest, and C should be the
//?             the lowest.
CASE;

// IF WRK.Weight 11.0 USR is Between 5 and 9,999
IF WRK.Weight_11_0_USR >= 5;
AND WRK.Weight_11_0_USR <= 9999;

// CUR.Text 1 Length USR = CON.C
CUR.Text_1_Length_USR = 'C';

// IF WRK.Weight 11.0 USR is Between 10000 19999
IF WRK.Weight_11_0_USR >= 10000;
AND WRK.Weight_11_0_USR <= 19999;

// CUR.Text 1 Length USR = CON.B
CUR.Text_1_Length_USR = 'B';

// IF WRK.Weight 11.0 USR is 20000 and above
IF WRK.Weight_11_0_USR >= 20000;

// CUR.Text 1 Length USR = CON.A
CUR.Text_1_Length_USR = 'A';

ENDIF;

ENDIF;

// Print Ship To Customer totals format
PRINT Ship To Customer totals format;

// LCL.Total Weight Ship    USR = CON.*ZERO
LCL.Total_Weight_Ship_USR = *ZERO;

// LCL.Number of Orders on Stop = CON.*ZERO
LCL.Number_of_Orders_on_Stop = *ZERO;

ENDIF;

// SUPPRESSED PRINT Company Number totals format

