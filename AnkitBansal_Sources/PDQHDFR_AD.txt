// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDQHDFR
// ?Date: 14.08.2025 Time: 03:35:48
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?***  Modification log ***
DO;

//?TPA071607 - Add check on Approve/Deny claim option to make sure
//?that Salesperson using the program is authorized to process claims
//?for the Salesperson they are working with. Validation will be
//?performed against the Sales Route Authority file.
ENDDO;

//?*** Setup Security & Company Title ***
// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_to_Rvw_Claim);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?TPA071607 - Save initial default Salesperson
// LCL.Salesperson Code 1 = PAR.Salesperson to Rvw Claim
LCL.Salesperson_Code_1 = PAR.Salesperson_to_Rvw_Claim;

//?*** Setup Security for Salesperson code ***
//?USER: Initialize subfile control

//?First time processing
CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

// CTL.Salesperson to Rvw Claim = PAR.Salesperson to Rvw Claim
CTL.Salesperson_to_Rvw_Claim = PAR.Salesperson_to_Rvw_Claim;

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

ENDIF;

EXECUTE FUNCTION(RTV Salesperson        RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1369411;
PARAMETER(CTL.Salesperson_to_Rvw_Claim);
PARAMETER(CTL.Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize subfile record from DBF record

CASE;

// IF DB1.Salesperson to Rvw Claim EQ CTL.Salesperson to Rvw Claim
IF DB1.Salesperson_to_Rvw_Claim = CTL.Salesperson_to_Rvw_Claim;

//?*** Select Record ***
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

EXECUTE FUNCTION(Chk DEV Priced Ord    RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1681538;
PARAMETER(PAR.Company_Number);
PARAMETER(DB1.Claim_Order_Number);
PARAMETER(RCD.Record_Found_OrdDtlUSR);
{
 //?USER: Initialize routine

 // PAR.Record Found -OrdDtlUSR = CND.Record Not Found
 PAR.Record_Found_OrdDtlUSR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 CASE;

 // IF DB1.Price Method Code is Deviated
 IF DB1.Price_Method_Code = 'DEV';

 // PAR.Record Found -OrdDtlUSR = CND.Record Found
 PAR.Record_Found_OrdDtlUSR = 'Y';

 QUIT;

 ENDIF;

 ENDIF;

}


//?USER: Process subfile control (Pre-confirm)

// PAR.Salesperson to Rvw Claim = CTL.Salesperson to Rvw Claim
PAR.Salesperson_to_Rvw_Claim = CTL.Salesperson_to_Rvw_Claim;

// CTL.Salesperson Name = CON.*BLANK
CTL.Salesperson_Name = *BLANK;

//?F4 Select salesperson
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Salesperson to Rvw Claim
IF PGM.*Cursor_field = CTL.Salesperson_to_Rvw_Claim;

// Call program SEL Salesperson All    SR.
CALL PROGRAM(SEL Salesperson All    SR) ('PDFASRR');
PARAMETER(CTL.Salesperson_to_Rvw_Claim);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?Validate salesperson if entered
CASE;

// IF CTL.Salesperson to Rvw Claim is entered
IF CTL.Salesperson_to_Rvw_Claim <> *BLANK;

EXECUTE FUNCTION(RTV Salesperson        RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1369411;
PARAMETER(CTL.Salesperson_to_Rvw_Claim);
PARAMETER(CTL.Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Salesperson not found.'
ERROR(USR0039);
MSGPARM(CTL.Salesperson_to_Rvw_Claim);

ENDIF;

ENDIF;

//?CALC: Subfile record function fields

//?*** load claim status description ***
// RCD.Claim Status Desc     USR = Condition name of RCD.Claim Status
RCD.Claim_Status_Desc_USR = RTVCND(RCD.Claim_Status);

//?USER: Process subfile record (Pre-confirm)

CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

// Call program Dsp Claim Detail       D1.
CALL PROGRAM(Dsp Claim Detail       D1) ('PPNVD1R');
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(RCD.Claim_Order_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Claim_Ship_to_Customer);
PARAMETER(RCD.Claim_Customer_Name);
PARAMETER(LCL.Return_Command_USR);
PARAMETER(LCL.Clm_Program_USR);

// IF RCD.*SFLSEL is *Resolve
IF RCD.*SFLSEL = '9'/'9'/'14';

EXECUTE FUNCTION(RTV Salesperson Type   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1205126;
PARAMETER(RCD.Salesperson_to_Rvw_Claim);
PARAMETER(LCL.Sales_Type_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?TPA071607 - Check that the Salesperson is authorized if different
//?from the Salesperson logged in.
//?Get Sales Route Code from Order Header TRG & call Validation PGM
CASE;

// IF RCD.Salesperson to Rvw Claim NE LCL.Salesperson Code 1
IF RCD.Salesperson_to_Rvw_Claim <> LCL.Salesperson_Code_1;

EXECUTE FUNCTION(RTV Sales Route/Desc   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1507292;
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(RCD.Claim_Order_Number);
PARAMETER(LCL.Sales_Route_Code);
PARAMETER(LCL.Sales_Route_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 //?Get sales route description
 CASE;

 // IF DB1.Sales Route Code NE WRK.BLANK
 IF DB1.Sales_Route_Code <> WRK.BLANK;

 EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1270614;
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(PAR.Sales_Route_Description);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Get sales route description
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Sales Route Description = CON.*BLANK
 PAR.Sales_Route_Description = *BLANK;

 ENDIF;

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


// Call program RTV Salesprsn Author.  XF.
CALL PROGRAM(RTV Salesprsn Author.  XF) ('PDNQXFR');
PARAMETER(LCL.Sales_Route_Code);
PARAMETER(LCL.Access_Denied_Y_N);
PARAMETER(LCL.Salesperson_Code_1);
PARAMETER('CL');

//?Get Sales Route Code from Order Header TRG & call Validation PGM
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Access Denied (Y/N) = CND.no
LCL.Access_Denied_Y_N = 'N';

ENDIF;

//?Access allowed call pgm, else send error message
CASE;

// IF LCL.Access Denied (Y/N) is no
IF LCL.Access_Denied_Y_N = 'N';

// Call program Dsp Approve/Deny Clm  DF.
CALL PROGRAM(Dsp Approve/Deny Clm  DF) ('PPABDFR');
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(RCD.Claim_Order_Number);
PARAMETER(RCD.Claim_Ship_to_Customer);
PARAMETER(RCD.Claim_Status);
PARAMETER(RCD.Claim_Amount);
PARAMETER(RCD.Claim_Resolution_Explan);
PARAMETER(PAR.Company_Number);
PARAMETER(RCD.Salesperson_to_Rvw_Claim);
PARAMETER(LCL.Sales_Type_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Access allowed call pgm, else send error message
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Access to Approve/Deny claims denied - not auth to work with Salesperson.'
ERROR(USR3752);
MSGPARM(RCD.*SFLSEL);

// PGM.*Reload subfile = CND.*NO
PGM.*Reload_subfile = 'N';

ENDIF;

ENDIF;

