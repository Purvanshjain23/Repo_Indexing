// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBS1XFR
// ?Date: 14.08.2025 Time: 03:49:17
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Convert PFS Change Date to YYYYMMDD
EXECUTE FUNCTION(Rtv System Date *CYMD IF) TYPE(EXCINTFUN)                      AC1952751;
PARAMETER(LCL.System_Date_USR);
{
 //?Execute internal function

 // LCL.*System timestamp = JOB.*System timestamp
 LCL.*System_timestamp = JOB.*System_timestamp;

 // LCL.Year USR = SUBSTRING(LCL.*System timestamp,CON.1,CON.4)
 LCL.Year_USR = SUBSTRING(LCL.*System_timestamp:1:4);

 // LCL.Month USR = SUBSTRING(LCL.*System timestamp,CON.6,CON.2)
 LCL.Month_USR = SUBSTRING(LCL.*System_timestamp:6:2);

 // LCL.Day USR = SUBSTRING(LCL.*System timestamp,CON.9,CON.2)
 LCL.Day_USR = SUBSTRING(LCL.*System_timestamp:9:2);

 // LCL.Date (Char-8) USR = CONCAT(LCL.Year USR,LCL.Month USR,CON.*ZERO)
 LCL.Date_Char_8_USR = LCL.Year_USR + LCL.Month_USR (*ZERO);

 // LCL.Date (Char-8) USR = CONCAT(LCL.Date (Char-8) USR,LCL.Day USR,CON.*ZERO)
 LCL.Date_Char_8_USR = LCL.Date_Char_8_USR + LCL.Day_USR (*ZERO);

 // LCL.DATE = CVTVAR(LCL.Date (Char-8) USR)
 LCL.DATE = CVTVAR(LCL.Date_Char_8_USR);

 EXECUTE FUNCTION(CVT *YYMD to *CYMD    IF) TYPE(EXCINTFUN)                      AC1929228;
 PARAMETER(PAR.System_Date_USR);
 PARAMETER(LCL.DATE);
 {
  //?Execute internal function

  //?** YEAR **
  // PAR.Year Code = PAR.DATE / CON.10000 *
  PAR.Year_Code = PAR.DATE / 10000;

  // PAR.Year  NBR USR = PAR.Year Code
  PAR.Year_NBR_USR = PAR.Year_Code;

  // PAR.Year  (Char) USR = CVTVAR(PAR.Year  NBR USR)
  PAR.Year_Char_USR = CVTVAR(PAR.Year_NBR_USR);

  //?** MONTH **
  // PAR.Month                 USR = PAR.DATE / CON.100 *
  PAR.Month_USR = PAR.DATE / 100;

  // PAR.Month (Char) USR = CVTVAR(PAR.Month                 USR)
  PAR.Month_Char_USR = CVTVAR(PAR.Month_USR);

  //?** DAY **
  // PAR.Day of Month USR = PAR.DATE
  PAR.Day_of_Month_USR = PAR.DATE;

  // PAR.Day   (Char) USR = CVTVAR(PAR.Day of Month USR)
  PAR.Day_Char_USR = CVTVAR(PAR.Day_of_Month_USR);

  //?CENTURY+YEAR
  CASE;

  // IF PAR.Year Code is Twentieth Century
  IF PAR.Year_Code <= 1999;

  // PAR.Date (Alpha) USR = CONCAT(CON.0,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '0' + PAR.Year_Char_USR (*ZERO);

  //?CENTURY+YEAR
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date (Alpha) USR = CONCAT(CON.1,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '1' + PAR.Year_Char_USR (*ZERO);

  ENDIF;

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Month (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Month_Char_USR (*ZERO);

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Day   (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date                  USR = CVTVAR(PAR.Date (Alpha) USR)
  PAR.Date_USR = CVTVAR(PAR.Date_Alpha_USR);

 }

}


EXECUTE FUNCTION(CNV cyymmdd to yyyymmdd) TYPE(EXCINTFUN)                       AC1732965;
PARAMETER(LCL.System_Date_USR);
PARAMETER(LCL.PFS_Batch_Date);
{
 //?Execute internal function

 // LCL.Year Code = PAR.Date In  (7,0) USR *YEAR
 LCL.Year_Code = DATEDTLS(PAR.Date_In_70_USR 'YR' 1111111 'NONE' 'N' 1);

 // LCL.Month NBR USR = PAR.Date In  (7,0) USR *MONTH
 LCL.Month_NBR_USR = DATEDTLS(PAR.Date_In_70_USR 'MO' 1111111 'NONE' 'N' 1);

 // LCL.Day of Month USR = PAR.Date In  (7,0) USR *DAY OF MONTH
 LCL.Day_of_Month_USR = DATEDTLS(PAR.Date_In_70_USR 'DM' 1111111 'NONE' 'N' 1);

 // PAR.Year Alpha (YYYY) USR = CVTVAR(LCL.Year Code)
 PAR.Year_Alpha_YYYY_USR = CVTVAR(LCL.Year_Code);

 // PAR.Month (Char) USR = CVTVAR(LCL.Month NBR USR)
 PAR.Month_Char_USR = CVTVAR(LCL.Month_NBR_USR);

 // PAR.Day   (Char) USR = CVTVAR(LCL.Day of Month USR)
 PAR.Day_Char_USR = CVTVAR(LCL.Day_of_Month_USR);

 // PAR.Date (Char-8) USR = CONCAT(PAR.Year Alpha (YYYY) USR,PAR.Month (Char) USR,CON.*ZERO)
 PAR.Date_Char_8_USR = PAR.Year_Alpha_YYYY_USR + PAR.Month_Char_USR (*ZERO);

 // PAR.Date (Char-8) USR = CONCAT(PAR.Date (Char-8) USR,PAR.Day   (Char) USR,CON.*ZERO)
 PAR.Date_Char_8_USR = PAR.Date_Char_8_USR + PAR.Day_Char_USR (*ZERO);

 // PAR.Date Out (8,0) USR = CVTVAR(PAR.Date (Char-8) USR)
 PAR.Date_Out_80_USR = CVTVAR(PAR.Date_Char_8_USR);

}


//?Initialize PFS Prod Sched Batch Dtl fields
// LCL.PFS Batch Time = JOB.*Job time
LCL.PFS_Batch_Time = JOB.*Job_time;

// LCL.PFS User ID = JOB.*USER
LCL.PFS_User_ID = JOB.*USER;

// LCL.PFS Baseline Schedule = CND.Baseline
LCL.PFS_Baseline_Schedule = 'B';

// LCL.PFS Record Status = CND.Add
LCL.PFS_Record_Status = 'A';

// LCL.PFS Process Status = CND.Not Processed
LCL.PFS_Process_Status = *ZERO;

// LCL.PFS Error Reason = CND.No Error
LCL.PFS_Error_Reason = *BLANK;

// LCL.PFS Create Date = LCL.PFS Batch Date
LCL.PFS_Create_Date = LCL.PFS_Batch_Date;

// LCL.PFS Create Time = LCL.PFS Batch Time
LCL.PFS_Create_Time = LCL.PFS_Batch_Time;

//?Create PFS Prod Sched Batch Hdr
EXECUTE FUNCTION(Crt PFS Prd Sch Bt Hd CR) TYPE(CRTOBJ) FILE(PBB2CPP)           AC2109262;
PARAMETER(PAR.PFS_Company_Number);
PARAMETER(LCL.PFS_Batch_Date);
PARAMETER(LCL.PFS_Batch_Time);
PARAMETER(LCL.PFS_User_ID);
PARAMETER(LCL.PFS_Baseline_Schedule);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.PFS_Record_Status);
PARAMETER(LCL.PFS_Process_Status);
PARAMETER(LCL.PFS_Error_Reason);
PARAMETER(LCL.PFS_Create_Date);
PARAMETER(LCL.PFS_Create_Time);
PARAMETER(*ZERO);
PARAMETER(*ZERO);

//?Create PFS Prod Sched Batch Sel records for all Company Items
// Call program Crt PFS Prd Sch Bt Sl XF.
CALL PROGRAM(Crt PFS Prd Sch Bt Sl XF) ('PBSCXFR');
PARAMETER(PAR.PFS_Company_Number);
PARAMETER(LCL.PFS_Batch_Date);
PARAMETER(LCL.PFS_Batch_Time);
PARAMETER(LCL.PFS_User_ID);
PARAMETER(LCL.PFS_Create_Date);

//?Convert PFS Change Date to YYYYMMDD
EXECUTE FUNCTION(Rtv System Date *CYMD IF) TYPE(EXCINTFUN)                      AC1952751;
PARAMETER(LCL.System_Date_USR);
{
 //?Execute internal function

 // LCL.*System timestamp = JOB.*System timestamp
 LCL.*System_timestamp = JOB.*System_timestamp;

 // LCL.Year USR = SUBSTRING(LCL.*System timestamp,CON.1,CON.4)
 LCL.Year_USR = SUBSTRING(LCL.*System_timestamp:1:4);

 // LCL.Month USR = SUBSTRING(LCL.*System timestamp,CON.6,CON.2)
 LCL.Month_USR = SUBSTRING(LCL.*System_timestamp:6:2);

 // LCL.Day USR = SUBSTRING(LCL.*System timestamp,CON.9,CON.2)
 LCL.Day_USR = SUBSTRING(LCL.*System_timestamp:9:2);

 // LCL.Date (Char-8) USR = CONCAT(LCL.Year USR,LCL.Month USR,CON.*ZERO)
 LCL.Date_Char_8_USR = LCL.Year_USR + LCL.Month_USR (*ZERO);

 // LCL.Date (Char-8) USR = CONCAT(LCL.Date (Char-8) USR,LCL.Day USR,CON.*ZERO)
 LCL.Date_Char_8_USR = LCL.Date_Char_8_USR + LCL.Day_USR (*ZERO);

 // LCL.DATE = CVTVAR(LCL.Date (Char-8) USR)
 LCL.DATE = CVTVAR(LCL.Date_Char_8_USR);

 EXECUTE FUNCTION(CVT *YYMD to *CYMD    IF) TYPE(EXCINTFUN)                      AC1929228;
 PARAMETER(PAR.System_Date_USR);
 PARAMETER(LCL.DATE);
 {
  //?Execute internal function

  //?** YEAR **
  // PAR.Year Code = PAR.DATE / CON.10000 *
  PAR.Year_Code = PAR.DATE / 10000;

  // PAR.Year  NBR USR = PAR.Year Code
  PAR.Year_NBR_USR = PAR.Year_Code;

  // PAR.Year  (Char) USR = CVTVAR(PAR.Year  NBR USR)
  PAR.Year_Char_USR = CVTVAR(PAR.Year_NBR_USR);

  //?** MONTH **
  // PAR.Month                 USR = PAR.DATE / CON.100 *
  PAR.Month_USR = PAR.DATE / 100;

  // PAR.Month (Char) USR = CVTVAR(PAR.Month                 USR)
  PAR.Month_Char_USR = CVTVAR(PAR.Month_USR);

  //?** DAY **
  // PAR.Day of Month USR = PAR.DATE
  PAR.Day_of_Month_USR = PAR.DATE;

  // PAR.Day   (Char) USR = CVTVAR(PAR.Day of Month USR)
  PAR.Day_Char_USR = CVTVAR(PAR.Day_of_Month_USR);

  //?CENTURY+YEAR
  CASE;

  // IF PAR.Year Code is Twentieth Century
  IF PAR.Year_Code <= 1999;

  // PAR.Date (Alpha) USR = CONCAT(CON.0,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '0' + PAR.Year_Char_USR (*ZERO);

  //?CENTURY+YEAR
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date (Alpha) USR = CONCAT(CON.1,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '1' + PAR.Year_Char_USR (*ZERO);

  ENDIF;

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Month (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Month_Char_USR (*ZERO);

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Day   (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date                  USR = CVTVAR(PAR.Date (Alpha) USR)
  PAR.Date_USR = CVTVAR(PAR.Date_Alpha_USR);

 }

}


EXECUTE FUNCTION(CNV cyymmdd to yyyymmdd) TYPE(EXCINTFUN)                       AC1732965;
PARAMETER(LCL.System_Date_USR);
PARAMETER(LCL.PFS_Change_Date);
{
 //?Execute internal function

 // LCL.Year Code = PAR.Date In  (7,0) USR *YEAR
 LCL.Year_Code = DATEDTLS(PAR.Date_In_70_USR 'YR' 1111111 'NONE' 'N' 1);

 // LCL.Month NBR USR = PAR.Date In  (7,0) USR *MONTH
 LCL.Month_NBR_USR = DATEDTLS(PAR.Date_In_70_USR 'MO' 1111111 'NONE' 'N' 1);

 // LCL.Day of Month USR = PAR.Date In  (7,0) USR *DAY OF MONTH
 LCL.Day_of_Month_USR = DATEDTLS(PAR.Date_In_70_USR 'DM' 1111111 'NONE' 'N' 1);

 // PAR.Year Alpha (YYYY) USR = CVTVAR(LCL.Year Code)
 PAR.Year_Alpha_YYYY_USR = CVTVAR(LCL.Year_Code);

 // PAR.Month (Char) USR = CVTVAR(LCL.Month NBR USR)
 PAR.Month_Char_USR = CVTVAR(LCL.Month_NBR_USR);

 // PAR.Day   (Char) USR = CVTVAR(LCL.Day of Month USR)
 PAR.Day_Char_USR = CVTVAR(LCL.Day_of_Month_USR);

 // PAR.Date (Char-8) USR = CONCAT(PAR.Year Alpha (YYYY) USR,PAR.Month (Char) USR,CON.*ZERO)
 PAR.Date_Char_8_USR = PAR.Year_Alpha_YYYY_USR + PAR.Month_Char_USR (*ZERO);

 // PAR.Date (Char-8) USR = CONCAT(PAR.Date (Char-8) USR,PAR.Day   (Char) USR,CON.*ZERO)
 PAR.Date_Char_8_USR = PAR.Date_Char_8_USR + PAR.Day_Char_USR (*ZERO);

 // PAR.Date Out (8,0) USR = CVTVAR(PAR.Date (Char-8) USR)
 PAR.Date_Out_80_USR = CVTVAR(PAR.Date_Char_8_USR);

}


//?Create PFS Prod Sched Batch Dtl
// Call program Snd PFS Prd Sch Bt Dt XF.
CALL PROGRAM(Snd PFS Prd Sch Bt Dt XF) ('PBSGXFR');
PARAMETER(PAR.PFS_Company_Number);
PARAMETER(LCL.PFS_Batch_Date);
PARAMETER(LCL.PFS_Batch_Time);
PARAMETER(LCL.PFS_User_ID);

//?Convert Numeric Fields to Alpha Fields
// LCL.PFS Company Number Alpha = CVTVAR(PAR.PFS Company Number)
LCL.PFS_Company_Number_Alpha = CVTVAR(PAR.PFS_Company_Number);

// LCL.PFS Batch Date Alpha = CVTVAR(LCL.PFS Batch Date)
LCL.PFS_Batch_Date_Alpha = CVTVAR(LCL.PFS_Batch_Date);

// LCL.PFS Batch Time Alpha = CVTVAR(LCL.PFS Batch Time)
LCL.PFS_Batch_Time_Alpha = CVTVAR(LCL.PFS_Batch_Time);

//?CPYF PBB1CPP to PBB1CPPGUY or PBB1CPPSTJ
// Call program IJS PFS Prd Sch Bt Dt CL.
CALL PROGRAM(IJS PFS Prd Sch Bt Dt CL) ('PBS3UPR');
PARAMETER(LCL.PFS_Company_Number_Alpha);
PARAMETER(LCL.PFS_Batch_Date_Alpha);
PARAMETER(LCL.PFS_Batch_Time_Alpha);
PARAMETER(LCL.PFS_User_ID);

//?Update PFS Prod Sched Batch Hdr
EXECUTE FUNCTION(Chg PFS Prd Sch Bt Hd RT) TYPE(RTVOBJ) FILE(PBB2CPP)           AC2111881;
PARAMETER(PAR.PFS_Company_Number);
PARAMETER(LCL.PFS_Batch_Date);
PARAMETER(LCL.PFS_Batch_Time);
PARAMETER(LCL.PFS_User_ID);
PARAMETER(LCL.PFS_Batch_Date);
PARAMETER(LCL.PFS_Batch_Time);
PARAMETER(9);
PARAMETER(LCL.PFS_Create_Date);
PARAMETER(LCL.PFS_Create_Time);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg PFS Prd Sch Bt Hd CH) TYPE(CHGOBJ) FILE(PBB2CPP)           AC2109263;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER(DB1.PFS_Batch_Date);
 PARAMETER(DB1.PFS_Batch_Time);
 PARAMETER(DB1.PFS_User_ID);
 PARAMETER(DB1.PFS_Baseline_Schedule);
 PARAMETER(PAR.PFS_Batch_Sent_Date);
 PARAMETER(PAR.PFS_Batch_Sent_Time);
 PARAMETER(DB1.PFS_Record_Status);
 PARAMETER(PAR.PFS_Process_Status);
 PARAMETER(DB1.PFS_Error_Reason);
 PARAMETER(DB1.PFS_Create_Date);
 PARAMETER(DB1.PFS_Create_Time);
 PARAMETER(PAR.PFS_Change_Date);
 PARAMETER(PAR.PFS_Change_Time);
}


//?R9441 JJH 03/01/17 - Create PFS Prod Sched Cgn
//?Create PFS Prod Sched Batch Cgn
EXECUTE FUNCTION(Crt PFS PrdSchBtCg Bs RT) TYPE(RTVOBJ) FILE(PBB1CPP)           AC2133306;
PARAMETER(PAR.PFS_Company_Number);
PARAMETER(LCL.PFS_Batch_Date);
PARAMETER(LCL.PFS_Batch_Time);
PARAMETER(LCL.PFS_User_ID);
{
 //?USER: Initialize routine

 //?The purpose of this RTVOBJ is to populate the PFS Prod Sched
 //?Batch Cgn file with every record from the PFS Prod Batch Dtl
 //?whenever the INVBUILDPS job runs.
 //?USER: Process Data record

 //?R15794 DN 11/19/19-Set New Fields.
 EXECUTE FUNCTION(Crt PFS Prd Sch Bt Dt Cg) TYPE(CRTOBJ) FILE(PBC3CPP)           AC2129356;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER(DB1.PFS_Batch_Date);
 PARAMETER(DB1.PFS_Batch_Time);
 PARAMETER(DB1.PFS_User_ID);
 PARAMETER(DB1.PFS_Batch_Seq);
 PARAMETER(DB1.PFS_Production_Date);
 PARAMETER(DB1.PFS_Item_Code);
 PARAMETER(DB1.PFS_Label_Type);
 PARAMETER(DB1.PFS_Order_Number);
 PARAMETER(DB1.PFS_Order_Line_Item_Nbr);
 PARAMETER(DB1.PFS_Order_Line_Sts);
 PARAMETER(DB1.PFS_Ordered_Qty);
 PARAMETER(DB1.PFS_Inventory_Alloc_Qty);
 PARAMETER(DB1.PFS_Fill_Qty_Prod);
 PARAMETER(DB1.PFS_Fill_Qty_Ship_Day_0);
 PARAMETER(DB1.PFS_Fill_Qty_Ship_Day_1);
 PARAMETER(DB1.PFS_Fill_Qty_Ship_Day_2);
 PARAMETER(DB1.PFS_Load_ID);
 PARAMETER(DB1.PFS_Loading_Sequence);
 PARAMETER(DB1.PFS_Scheduled_Ship_Date);
 PARAMETER(DB1.PFS_Load_Deadline_Date);
 PARAMETER(DB1.PFS_Load_Deadline_Time);
 PARAMETER(DB1.PFS_Item_Structure_Type);
 PARAMETER(DB1.PFS_Item_Structure_Group);
 PARAMETER(DB1.PFS_Item_Structure_Class);
 PARAMETER(DB1.PFS_Primary_UOM);
 PARAMETER(DB1.PFS_Fresh_Frozen);
 PARAMETER(DB1.PFS_Base_Converted);
 PARAMETER(DB1.PFS_Baseline_Schedule);
 PARAMETER(DB1.PFS_Palletize);
 PARAMETER(DB1.PFS_Pallet_Type);
 PARAMETER(DB1.PFS_Slip_Sheet);
 PARAMETER(DB1.PFS_Customer_Name);
 PARAMETER(DB1.PFS_Record_Status);
 PARAMETER(DB1.PFS_Process_Status);
 PARAMETER(DB1.PFS_Error_Reason);
 PARAMETER(DB1.PFS_Create_Date);
 PARAMETER(DB1.PFS_Create_Time);
 PARAMETER(DB1.PFS_Change_Date);
 PARAMETER(DB1.PFS_Change_Time);
}


//?R12915 DN 04/18/18-Send Email if 1st Baseline Prod Sched has been created.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Baseline Co/PrdDt RT) TYPE(RTVOBJ) FILE(PBB2CPP)           AC2132364;
PARAMETER(PAR.PFS_Company_Number);
PARAMETER(LCL.PFS_Batch_Date);
PARAMETER(LCL.PFS_Baseline_Schedule_Cnt);
{
 //?USER: Initialize routine

 // LCL.PFS Baseline Schedule Cnt = CON.*ZERO
 LCL.PFS_Baseline_Schedule_Cnt = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.PFS Baseline Schedule is Baseline
 IF DB1.PFS_Baseline_Schedule = 'B';

 // LCL.PFS Baseline Schedule Cnt = LCL.PFS Baseline Schedule Cnt + CON.1
 LCL.PFS_Baseline_Schedule_Cnt = LCL.PFS_Baseline_Schedule_Cnt + 1;

 ENDIF;

 //?USER: Exit processing

 // PAR.PFS Baseline Schedule Cnt = LCL.PFS Baseline Schedule Cnt
 PAR.PFS_Baseline_Schedule_Cnt = LCL.PFS_Baseline_Schedule_Cnt;

}


CASE;

// IF LCL.PFS Baseline Schedule Cnt is Equal (1)
IF LCL.PFS_Baseline_Schedule_Cnt = 1;

//?Format Email Subject & Message and Send Email.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Email Subject USR = CONCAT(CON.Co,LCL.PFS Company Number Alpha,CON.1)
LCL.Email_Subject_USR = 'Co' + LCL.PFS_Company_Number_Alpha (1);

// LCL.Email Subject USR = CONCAT(LCL.Email Subject USR,CON.Initial Baseline Product,CON.1)
LCL.Email_Subject_USR = LCL.Email_Subject_USR + 'Initial Baseline Product' (1);

// LCL.Email Subject USR = CONCAT(LCL.Email Subject USR,CON.ion Sched Created,CON.*ZERO)
LCL.Email_Subject_USR = LCL.Email_Subject_USR + 'ion Sched Created' (0);

// LCL.Email Message USR = CONCAT(CON.The initial Baseline Prod,CON.uction Schedule was creat,CON.*Z
LCL.Email_Message_USR = 'The initial Baseline Prod' + 'uction Schedule was creat' (0);

// LCL.Email Message USR = CONCAT(LCL.Email Message USR,CON.ed for Company,CON.*ZERO)
LCL.Email_Message_USR = LCL.Email_Message_USR + 'ed for Company' (0);

// LCL.Email Message USR = CONCAT(LCL.Email Message USR,LCL.PFS Company Number Alpha,CON.1)
LCL.Email_Message_USR = LCL.Email_Message_USR + LCL.PFS_Company_Number_Alpha (1);

// LCL.Email Message USR = CONCAT(LCL.Email Message USR,CON.on Batch Date/Time:,CON.1)
LCL.Email_Message_USR = LCL.Email_Message_USR + 'on Batch Date/Time:' (1);

//?Format Batch Date.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Month (Char) USR = SUBSTRING(LCL.PFS Batch Date Alpha,CON.5,CON.2)
LCL.Month_Char_USR = SUBSTRING(LCL.PFS_Batch_Date_Alpha:5:2);

// LCL.Day   (Char) USR = SUBSTRING(LCL.PFS Batch Date Alpha,CON.7,CON.2)
LCL.Day_Char_USR = SUBSTRING(LCL.PFS_Batch_Date_Alpha:7:2);

// LCL.Year Alpha (YYYY) USR = SUBSTRING(LCL.PFS Batch Date Alpha,CON.1,CON.4)
LCL.Year_Alpha_YYYY_USR = SUBSTRING(LCL.PFS_Batch_Date_Alpha:1:4);

// LCL.Date MM/DD/YYYY     USR = CONCAT(LCL.Month (Char) USR,CON./,CON.*ZERO)
LCL.Date_MM_DD_YYYY_USR = LCL.Month_Char_USR + '/' (*ZERO);

// LCL.Date MM/DD/YYYY     USR = CONCAT(LCL.Date MM/DD/YYYY     USR,LCL.Day   (Char) USR,CON.*ZERO)
LCL.Date_MM_DD_YYYY_USR = LCL.Date_MM_DD_YYYY_USR + LCL.Day_Char_USR (*ZERO);

// LCL.Date MM/DD/YYYY     USR = CONCAT(LCL.Date MM/DD/YYYY     USR,CON./,CON.*ZERO)
LCL.Date_MM_DD_YYYY_USR = LCL.Date_MM_DD_YYYY_USR + '/' (*ZERO);

// LCL.Date MM/DD/YYYY     USR = CONCAT(LCL.Date MM/DD/YYYY     USR,LCL.Year Alpha (YYYY) USR,CON.*Z
LCL.Date_MM_DD_YYYY_USR = LCL.Date_MM_DD_YYYY_USR + LCL.Year_Alpha_YYYY_USR (*ZERO);

ENDIF;

// LCL.Email Message USR = CONCAT(LCL.Email Message USR,LCL.Date MM/DD/YYYY     USR,CON.1)
LCL.Email_Message_USR = LCL.Email_Message_USR + LCL.Date_MM_DD_YYYY_USR (1);

// LCL.Email Message USR = CONCAT(LCL.Email Message USR,CON.at,CON.1)
LCL.Email_Message_USR = LCL.Email_Message_USR + 'at' (1);

//?Format Batch Time.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Hours  2A            USR = SUBSTRING(LCL.PFS Batch Time Alpha,CON.1,CON.2)
LCL.Hours_2A_USR = SUBSTRING(LCL.PFS_Batch_Time_Alpha:1:2);

// LCL.Minutes  2A          USR = SUBSTRING(LCL.PFS Batch Time Alpha,CON.3,CON.2)
LCL.Minutes_2A_USR = SUBSTRING(LCL.PFS_Batch_Time_Alpha:3:2);

// LCL.AS Time HH:MM = CONCAT(LCL.Hours  2A            USR,CON.:,CON.*ZERO)
LCL.AS_Time_HHMM = LCL.Hours_2A_USR + ':' (*ZERO);

// LCL.AS Time HH:MM = CONCAT(LCL.AS Time HH:MM,LCL.Minutes  2A          USR,CON.*ZERO)
LCL.AS_Time_HHMM = LCL.AS_Time_HHMM + LCL.Minutes_2A_USR (*ZERO);

ENDIF;

// LCL.Email Message USR = CONCAT(LCL.Email Message USR,LCL.AS Time HH:MM,CON.1)
LCL.Email_Message_USR = LCL.Email_Message_USR + LCL.AS_Time_HHMM (1);

// LCL.Email Message USR = CONCAT(LCL.Email Message USR,CON..,CON.*ZERO)
LCL.Email_Message_USR = LCL.Email_Message_USR + '.' (0);

EXECUTE FUNCTION(Exc ESNDMAIL Generic  IF) TYPE(EXCINTFUN)                      AC2144041;
PARAMETER(PAR.PFS_Company_Number);
PARAMETER('PSBASELINE');
PARAMETER(LCL.Email_Subject_USR);
PARAMETER(LCL.Email_Message_USR);
{
 //?Execute internal function

 //?Execute ESNDMAIL to Send Email Message.
 EXECUTE FUNCTION(RTV Alpha Value 2     RT) TYPE(RTVOBJ) FILE(PDKMREP)           AC2134765;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Value_Code);
 PARAMETER(LCL.Email_Address);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Email Address is Entered
 IF LCL.Email_Address <> *BLANK;

 // Call program Exc ESNDMAIL Generic  CL.
 CALL PROGRAM(Exc ESNDMAIL Generic  CL) ('PUE8UPC');
 PARAMETER(LCL.Email_Address);
 PARAMETER(PAR.Email_Subject_USR);
 PARAMETER(PAR.Email_Message_USR);

 ENDIF;

}


ENDIF;

ENDIF;

ENDIF;

