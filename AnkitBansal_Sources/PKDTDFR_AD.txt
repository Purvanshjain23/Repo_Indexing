// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKDTDFR
// ?Date: 14.08.2025 Time: 02:49:03
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(HPE048) TYPE(EXCINTFUN)                                        AB1190146;
{
 //?Execute internal function

 //?Nppc by Origin State Report
}


EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(LCL.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

// PAR.PRT Night Queue Run Sts = CND.No
PAR.PRT_Night_Queue_Run_Sts = 'N';

//?E10370 slm 6/08/17 - Cross Reference of the two plants
//?TF will use this and STF will display this and Guy will not use
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(LCL.CC_Company_Number);
PARAMETER('HPEXREFPLT');
PARAMETER(WRK.XrefPlanttoPlant_usr);

//?E3580 CGL 11/11/14 - M3 Vendor interfaces changes
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(LCL.CC_Company_Number);
PARAMETER('M3VEND');
PARAMETER(PAR.Live_with_M3_USR);

//?T8163 DN  01/16/17 - Get M3 Division #.
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(LCL.CC_Company_Number);
PARAMETER('M3HPEDIV');
PARAMETER(PAR.M3_Supplier_Division);

//?R17061 DN 04/20/21 - Get JDE 'E1LIVE' Flag.
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(LCL.CC_Company_Number);
PARAMETER('E1LIVE');
PARAMETER(LCL.JDE_Live_with_E1_USR);

//?12/14/2020 JBB WHD72204 - Need access to addl options WW Producer
// Call program Ext Appl Allowed      XF.
CALL PROGRAM(Ext Appl Allowed      XF) ('PUJWXFR');
PARAMETER(JOB.*USER);
PARAMETER('HPEEDT');
PARAMETER(LCL.Return_Code_USR);

//?Set Authorization Y/N Flag based on return code
CASE;

// IF LCL.Return Code USR is *Normal
IF LCL.Return_Code_USR = *BLANK;

// LCL.HPE Edit Authorization = CND.Yes
LCL.HPE_Edit_Authorization = 'Y';

//?Set Authorization Y/N Flag based on return code
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.HPE Edit Authorization = CND.No
LCL.HPE_Edit_Authorization = 'N';

ENDIF;

//?USER: Initialize subfile control

CASE;

// IF WRK.First Time Flag Usr EQ WRK.Blank USR
IF WRK.First_Time_Flag_Usr = WRK.Blank_USR;

// CTL.RS Record Status = CND.Active
CTL.RS_Record_Status = 'A';

// WRK.Display Print Prompt  Usr = CND.Prompt is to be displayed
WRK.Display_Print_Prompt_Usr = 'Y';

// WRK.First Time Flag Usr = CND.Yes
WRK.First_Time_Flag_Usr = 'Y';

//?R10690 JJH 06/07/17 - F8=Dsp Blank SupplierID/ALL
//?R17061 DN 4/21/21-Renamed 'Supplier' to 'Vendor'.
// LCL.Dsp Blank Vendor USR = CND.No
LCL.Dsp_Blank_Vendor_USR = 'N';

//?R17061 DN 04/20/21-Renamed 'Supplier ID' to 'Vendor'.
// CTL.Text 25 #1 Usr = CON.**ALL Vendor**
CTL.Text_25_#1_Usr = '**ALL Vendor**';

ENDIF;

// WRK.Insurance flag USR = CTL.Insurance flag USR
WRK.Insurance_flag_USR = CTL.Insurance_flag_USR;

// WRK.Subsidiary Flag Usr = CTL.Subsidiary Flag Usr
WRK.Subsidiary_Flag_Usr = CTL.Subsidiary_Flag_Usr;

// LCL.HPS Automation Y/N Usr = CTL.HPS Automation Y/N Usr
LCL.HPS_Automation_Y_N_Usr = CTL.HPS_Automation_Y_N_Usr;

//?USER: Initialize subfile record from DBF record

//?R10690 JJH 06/07/17 - Logic no longer required
//?E10812 SLM 11/28/17 - Retrieve hps Automation
//?S16226 DN 03/02/20-Get Both HPS Automation & Live Repayment Flags.
EXECUTE FUNCTION(Rtv HPS Auto/Live Repy RT) TYPE(RTVOBJ) FILE(PLAOREP)          AB1353757;
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.HPS_Automation_Y_N);
PARAMETER(RCD.Live_Repayment_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?PUT into the screen 1 position HPS Autom
CASE;

// IF RCD.HPS Automation (Y/N) is Yes
IF RCD.HPS_Automation_Y_N = 'Y';

// RCD.HPS Automation Y/N Usr = CND.Y
RCD.HPS_Automation_Y_N_Usr = 'Y';

//?PUT into the screen 1 position HPS Autom
// IF RCD.HPS Automation (Y/N) is No
IF RCD.HPS_Automation_Y_N = 'N';

// RCD.HPS Automation Y/N Usr = CND.N
RCD.HPS_Automation_Y_N_Usr = 'N';

//?PUT into the screen 1 position HPS Autom
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.HPS Automation Y/N Usr = CND.BLANK
RCD.HPS_Automation_Y_N_Usr = *BLANK;

ENDIF;

//?12/03/2018  JBB Record selection process for Y, N, or blank
//?HPS Automation selection
CASE;

// IF CTL.HPS Automation Y/N Usr is BLANK
IF CTL.HPS_Automation_Y_N_Usr = *BLANK;

//?Select all records
//?HPS Automation selection
// IF *OTHERWISE
IF *OTHERWISE;

//?Select HPE Automation records = user's selection
CASE;

// IF CTL.HPS Automation Y/N Usr EQ RCD.HPS Automation Y/N Usr
IF CTL.HPS_Automation_Y_N_Usr = RCD.HPS_Automation_Y_N_Usr;

//?Select record
//?Select HPE Automation records = user's selection
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?S16226 DN 03/02/20-Live Repayment Selection.
CASE;

// IF CTL.Live Repayment USR is Blank
IF CTL.Live_Repayment_USR = *BLANK;

// OR CTL.Live Repayment USR EQ RCD.Live Repayment USR
OR CTL.Live_Repayment_USR = RCD.Live_Repayment_USR;

//?S16226 DN 03/02/20-Live Repayment Selection.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?R10690 JJH 06/07/17 - Retrieve M3 Supplier ID
EXECUTE FUNCTION(Rtv Producer EXT2     RT) TYPE(RTVOBJ) FILE(PLB4REP)           AB1322079;
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.M3_Supplier_ID);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?R17061 DN 04/20/21-Commented Out M3 Supplier ID.
//?R17061 DN 04/21/21-Set JDE / M3 Prefix Based on 'E1LIVE' Flag.
CASE;

// IF LCL.JDE Live with E1 USR is Yes
IF LCL.JDE_Live_with_E1_USR = 'Y';

// CTL.JDE/M3 Prefix USR = CON.JDE
CTL.JDE_M3_Prefix_USR = 'JDE';

// RCD.Vendor Number USR = CON.*BLANK
RCD.Vendor_Number_USR = *BLANK;

//?Remove Leading Zero for JDE Vendor #.
CASE;

// IF RCD.PD VND Address Number is Not zero
IF RCD.PD_VND_Address_Number <> *ZERO;

// RCD.Vendor Number USR = CVTVAR(RCD.PD VND Address Number)
RCD.Vendor_Number_USR = CVTVAR(RCD.PD_VND_Address_Number);

// PAR.Vendor Number USR = RCD.Vendor Number USR
PAR.Vendor_Number_USR = RCD.Vendor_Number_USR;

// LCL.Count USR = CON.*ZERO
LCL.Count_USR = *ZERO;

// LCL.Text Usr 1 = CON.0
LCL.Text_Usr_1 = 0;

//?Substring in the Value Without the Leading Zeros.
// DOW LCL.Text Usr 1 is Zero
DOW LCL.Text_Usr_1 = '0';

// LCL.Count USR = LCL.Count USR + CON.1
LCL.Count_USR = LCL.Count_USR + 1;

// LCL.Text Usr 1 = SUBSTRING(PAR.Vendor Number USR,LCL.Count USR,CON.1)
LCL.Text_Usr_1 = SUBSTRING(PAR.Vendor_Number_USR:LCL.Count_USR:1);

CASE;

// IF LCL.Text Usr 1 is Not Zero
IF LCL.Text_Usr_1 <> '0';

// LCL.For Length USR = CON.9 - LCL.Count USR
LCL.For_Length_USR = 9 - LCL.Count_USR;

// PAR.Vendor Number USR = SUBSTRING(PAR.Vendor Number USR,LCL.Count USR,LCL.For Length USR)
PAR.Vendor_Number_USR = SUBSTRING(PAR.Vendor_Number_USR:LCL.Count_USR:LCL.For_Length_USR);

// RCD.Vendor Number USR = PAR.Vendor Number USR
RCD.Vendor_Number_USR = PAR.Vendor_Number_USR;

ENDIF;

ENDDO;

ENDIF;

//?R17061 DN 04/21/21-Set JDE / M3 Prefix Based on 'E1LIVE' Flag.
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.JDE/M3 Prefix USR = CON.M3
CTL.JDE_M3_Prefix_USR = 'M3';

// RCD.Vendor Number USR = RCD.M3 Supplier ID
RCD.Vendor_Number_USR = RCD.M3_Supplier_ID;

ENDIF;

//?R17061 DN 04/21/21-Select By Vendor.
CASE;

// IF CTL.Vendor Number USR is Not Entered
IF CTL.Vendor_Number_USR = *BLANK;

//?R17061 DN 04/21/21-Select By Vendor.
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.Vendor Number USR NE RCD.Vendor Number USR
IF CTL.Vendor_Number_USR <> RCD.Vendor_Number_USR;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?R17061 DN 04/21/21-Changed Logic for F8.
//?If F8 Pressed Then Select Blank/ALL Vendor.   R17061 DN 04/21/21
CASE;

// IF LCL.Dsp Blank Vendor USR is Yes
IF LCL.Dsp_Blank_Vendor_USR = 'Y';

// CTL.Vendor Number USR = CND.Not Entered
CTL.Vendor_Number_USR = *BLANK;

CASE;

// IF RCD.Vendor Number USR is Not Entered
IF RCD.Vendor_Number_USR = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?R10690 JJH 06/07/17 - Display Producer Address
EXECUTE FUNCTION(Rtv Producer Address  RT) TYPE(RTVOBJ) FILE(PWAGREP)           AB1336095;
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(NLL.Address_Number);
PARAMETER(NLL.Pass_Name);
PARAMETER(RCD.Producer_Address_1_USR);
PARAMETER(RCD.Producer_Address_2_USR);
PARAMETER(NLL.Address_3);
PARAMETER(RCD.Producer_City_USR);
PARAMETER(RCD.Producer_State_USR);
PARAMETER(RCD.Producer_Zip_10_USR);
PARAMETER(RCD.Producer_Area_Code_USR);
PARAMETER(RCD.Producer_Phone_Number_USR);
PARAMETER(NLL.Fax_Area_Code_#);
PARAMETER(NLL.Fax_Telephone);
PARAMETER(NLL.Fax_Attn_1);
PARAMETER(NLL.Fax_Area_Code_#_2);
PARAMETER(NLL.Fax_Telephone_2);
PARAMETER(NLL.Fax_Attn_2);
PARAMETER(NLL.Vendor_1099);
PARAMETER(NLL.Vendor_Tax_Id);
PARAMETER(RCD.Country_Code_Usr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?*************************************************************************
// Call program Rtv/Chk Prdcr for Ins XF.
CALL PROGRAM(Rtv/Chk Prdcr for Ins XF) ('PKGDXFR');
PARAMETER(DB1.PD_Producer_Code);
PARAMETER(RCD.Insurance_flag_USR);
PARAMETER(LCL.CC_Company_Number);

//?Insurance Flag
CASE;

// IF CTL.Insurance flag USR NE WRK.Blank USR
IF CTL.Insurance_flag_USR <> WRK.Blank_USR;

CASE;

// IF RCD.Insurance flag USR EQ CTL.Insurance flag USR
IF RCD.Insurance_flag_USR = CTL.Insurance_flag_USR;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Subsidary Flag
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(Rtv Prodsubsidiary    RT) TYPE(RTVOBJ) FILE(PLA8REP)           AB1291363;
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.Subsidiary_Flag_Usr);
{
 //?USER: Initialize routine

 // PAR.Subsidiary Flag Usr = CND.No
 PAR.Subsidiary_Flag_Usr = 'N';

 //?USER: Process Data record

 // PAR.Subsidiary Flag Usr = CND.Yes
 PAR.Subsidiary_Flag_Usr = 'Y';

 QUIT;

}


CASE;

// IF CTL.Subsidiary Flag Usr NE WRK.Blank USR
IF CTL.Subsidiary_Flag_Usr <> WRK.Blank_USR;

CASE;

// IF RCD.Subsidiary Flag Usr EQ CTL.Subsidiary Flag Usr
IF RCD.Subsidiary_Flag_Usr = CTL.Subsidiary_Flag_Usr;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?F4=Prompt on Source
CASE;

// IF CTL.*CMD key is CF04
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.SR Source Code
AND PGM.*Cursor_field = CTL.SR_Source_Code;

// CTL.SR Source Code = WRK.Blank USR
CTL.SR_Source_Code = WRK.Blank_USR;

// Call program Sel Source            SR.
CALL PROGRAM(Sel Source            SR) ('PKDRSRR');
PARAMETER(CTL.SR_Source_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

//?F4=Prompt on Buyer
CASE;

// IF CTL.*CMD key is CF04
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.HB Buyer Code
AND PGM.*Cursor_field = CTL.HB_Buyer_Code;

// CTL.HB Buyer Code = WRK.Blank USR
CTL.HB_Buyer_Code = WRK.Blank_USR;

// Call program Sel Hog Buyer         SR.
CALL PROGRAM(Sel Hog Buyer         SR) ('PKD3SRR');
PARAMETER(CTL.HB_Buyer_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

//?R17061 DN 04/21/21-Allow M3 Vendor Prompt Only if E1LIVE=N.
//?F4=Prompt on M3 Supp                          R17061 DN 04/21/21
CASE;

// IF CTL.*CMD key is CF04
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Vendor Number USR
AND PGM.*Cursor_field = CTL.Vendor_Number_USR;

// AND LCL.JDE Live with E1 USR is No
AND LCL.JDE_Live_with_E1_USR = 'N';

// WRK.M3 Supplier Name = CON.*BLANK
WRK.M3_Supplier_Name = *BLANK;

//?T8163 DN  01/16/17 - Set M3 Supplier Group as Producer.
// LCL.M3 Supplier Group = CND.Producers
LCL.M3_Supplier_Group = 'ZHP';

// Call program Sel M3 Suplr Same Div/Grp.
CALL PROGRAM(Sel M3 Suplr Same Div/Grp) ('PLX1SRR');
PARAMETER(CTL.Vendor_Number_USR);
PARAMETER(WRK.M3_Supplier_Name);
PARAMETER(WRK.M3_Address_Line_1);
PARAMETER(WRK.M3_Address_Line_2);
PARAMETER(WRK.M3_Address_Line_3);
PARAMETER(WRK.M3_Address_Line_4);
PARAMETER(WRK.M3_City);
PARAMETER(WRK.M3_State);
PARAMETER(WRK.M3_Postal_Code);
PARAMETER(WRK.M3_Telephone_No_1);
PARAMETER(WRK.M3_Telephone_No_2);
PARAMETER(WRK.M3_Fax_Telephone);
PARAMETER(WRK.M3_Supplier_Tax_ID);
PARAMETER(WRK.M3_Country_Code);
PARAMETER(LCL.M3_Supplier_Group);
PARAMETER(PAR.M3_Supplier_Division);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

//?F6=Create
CASE;

// IF CTL.*CMD key is CF06
IF CTL.*CMD_key = '06';

// CTL.PD Producer Code = WRK.Blank USR
CTL.PD_Producer_Code = WRK.Blank_USR;

// Call program Edt Producer          E1.
CALL PROGRAM(Edt Producer          E1) ('PKDXE1R');
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(PAR.Oms_System_Value_Alpha);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

//?R10690 JJH 06/07/17 - F8=Dsp Blank Vendor/ALL
//?F8=Dsp Blank Vendor/ALL
CASE;

// IF CTL.*CMD key is CF08
IF CTL.*CMD_key = '08';

//?New.                                           R17061 DN 4/21/21
CASE;

// IF LCL.Dsp Blank Vendor USR is No
IF LCL.Dsp_Blank_Vendor_USR = 'N';

// LCL.Dsp Blank Vendor USR = CND.Yes
LCL.Dsp_Blank_Vendor_USR = 'Y';

// CTL.Text 25 #1 Usr = CON.**Blank Vendor**
CTL.Text_25_#1_Usr = '**Blank Vendor**';

//?New.                                           R17061 DN 4/21/21
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Dsp Blank Vendor USR = CND.No
LCL.Dsp_Blank_Vendor_USR = 'N';

// CTL.Text 25 #1 Usr = CON.**ALL Vendor**
CTL.Text_25_#1_Usr = '**ALL Vendor**';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?E14322 JJH 01/05/18 - Add F10=WW Producer Trading Partner
//?F10=Edit Producer Trading Partner  (if authorized)
CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

//?New Authority logic
CASE;

// IF LCL.HPE Edit Authorization is Yes
IF LCL.HPE_Edit_Authorization = 'Y';

// Call program Edt Producer Trade PtnEF.
CALL PROGRAM(Edt Producer Trade PtnEF) ('PLWAEFR');

//?New Authority logic
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'User is not authorized to command key &1.  Contact I/T.'
ERROR(PRK1562);
MSGPARM('F10');

ENDIF;

ENDIF;

//?F21=Print List
CASE;

// IF CTL.*CMD key is Print List
IF CTL.*CMD_key = '21';

// Call program Pmt Print Options     XF.
CALL PROGRAM(Pmt Print Options     XF) ('PDG0PVR');
PARAMETER('Print Producer List');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('P/S');

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Execute command - 'SBM Prt Producer List'
EXECUTE COMMAND(PRK0306);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(CTL.RS_Record_Status);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(CTL.SR_Source_Code);
PARAMETER(CTL.HB_Buyer_Code);

ENDIF;

// WRK.Display Print Prompt  Usr = CND.Prompt is to be displayed
WRK.Display_Print_Prompt_Usr = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

//?R17061 DN 04/21/21-Reload When Vendor Changes.
//?New.                                          R17061 DN 04/21/21
CASE;

// IF CTL.Vendor Number USR NE LCL.Vendor Number USR
IF CTL.Vendor_Number_USR <> LCL.Vendor_Number_USR;

// LCL.Vendor Number USR = CTL.Vendor Number USR
LCL.Vendor_Number_USR = CTL.Vendor_Number_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF CTL.Insurance flag USR NE WRK.Insurance flag USR
IF CTL.Insurance_flag_USR <> WRK.Insurance_flag_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?E14180 JBB 12/03/2018 - Prompt and select for HPS Automation flag
//?If HPS Automation flag changes value, reload subfile
CASE;

// IF CTL.HPS Automation Y/N Usr NE LCL.HPS Automation Y/N Usr
IF CTL.HPS_Automation_Y_N_Usr <> LCL.HPS_Automation_Y_N_Usr;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?S16226 DN 03/02/20-Reload Subfile When Live Repayment Selector Changed.
CASE;

// IF CTL.Live Repayment USR NE LCL.Live Repayment USR
IF CTL.Live_Repayment_USR <> LCL.Live_Repayment_USR;

// LCL.Live Repayment USR = CTL.Live Repayment USR
LCL.Live_Repayment_USR = CTL.Live_Repayment_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?R17061 DN 04/20/21-Changed Opt 2 to Check E1LIVE Flag.
//?2=Edit                                        R17061 DN 04/23/21
CASE;

// IF RCD.*SFLSEL is *Revise request
IF RCD.*SFLSEL = '2'/'2';

//?If E1LIVE = Y, Then Call PWLXE1R to Display JDE E1 Info.
CASE;

// IF LCL.JDE Live with E1 USR is Yes
IF LCL.JDE_Live_with_E1_USR = 'Y';

// Call program Edt Producer JDE E1   ER.
CALL PROGRAM(Edt Producer JDE E1   ER) ('PWLXE1R');
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(PAR.Oms_System_Value_Alpha);

//?If E1LIVE = Y, Then Call PWLXE1R to Display JDE E1 Info.
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Edt Producer          E1.
CALL PROGRAM(Edt Producer          E1) ('PKDXE1R');
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(PAR.Oms_System_Value_Alpha);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?R17061 DN 04/30/21-Changed Opt 5 to Check E1LIVE Flag.
//?5=Display
CASE;

// IF RCD.*SFLSEL is *WW/Display request
IF RCD.*SFLSEL = '5'/'5';

//?If E1LIVE = Y, Then Call PWLXE1R to Display JDE E1 Info.
CASE;

// IF LCL.JDE Live with E1 USR is Yes
IF LCL.JDE_Live_with_E1_USR = 'Y';

// Call program Dsp Producer JDE E1   DR.
CALL PROGRAM(Dsp Producer JDE E1   DR) ('PWMOD1R');
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(PAR.Oms_System_Value_Alpha);

//?If E1LIVE = Y, Then Call PWLXE1R to Display JDE E1 Info.
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Dsp Producer          DR.
CALL PROGRAM(Dsp Producer          DR) ('PKDYD1R');
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(PAR.Oms_System_Value_Alpha);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?**********************************************************************
//?R10690 JJH 06/14/17 - Temporaily disable 4=Delete
//?**********************************************************************
//?R10690 JJH 06/27/17 - Enable 4=Delete
//?4=Delete
CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

EXECUTE FUNCTION(Chk Loc for Prdcr dlt RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1163091;
PARAMETER(RCD.PD_Producer_Code);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = 999;

 // Send error message - 'Producer location is using the record.  Delete option not allowed.'
 ERROR(PRK0548);

 QUIT;

}


EXECUTE FUNCTION(Rtv Prdcr Rels/PrdCnt RT) TYPE(RTVOBJ) FILE(PKAPCPP)           AB1119752;
PARAMETER(RCD.PD_Producer_Code);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = 999;

 // Send error message - 'Producer Contract is using the producer.  Delete option is not allowed.'
 ERROR(PRK0549);

 QUIT;

}


EXECUTE FUNCTION(Rtv Prdcr Rels/VchHdr RT) TYPE(RTVOBJ) FILE(PKBKCPP)           AB1119914;
PARAMETER(RCD.PD_Producer_Code);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = 999;

 // Send error message - 'Voucher is using the record.  Delete is not allowed.'
 ERROR(PRK0550);

 QUIT;

}


EXECUTE FUNCTION(Rtv Prdcr Rels/Prdcr  RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1119751;
PARAMETER(RCD.PD_Producer_Code);
{
 //?USER: Process Data record

 // PGM.*Return code = CND.Record Found
 PGM.*Return_code = 999;

 QUIT;

}


EXECUTE FUNCTION(Chk Prdcr for Delete  RT) TYPE(RTVOBJ) FILE(PKBFREP)           AB1163103;
PARAMETER(RCD.PD_Producer_Code);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = 999;

 // Send error message - 'Producer split exists for the record.  Delete not allowed.'
 ERROR(PRK0552);

 QUIT;

}


EXECUTE FUNCTION(Rtv Prdcr Rels/CHKSPL RT) TYPE(RTVOBJ) FILE(PKCACPP)           AB1119703;
PARAMETER(RCD.PD_Producer_Code);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = 999;

 // Send error message - 'Voucher split is using the record.  Delete is not allowed.'
 ERROR(PRK0551);

 QUIT;

}


EXECUTE FUNCTION(Chk PRdcr for delete  RT) TYPE(RTVOBJ) FILE(PKCZCPP)           AB1163107;
PARAMETER(RCD.PD_Producer_Code);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = 999;

 // Send error message - 'Carcass Summary data exists for record.  Delete not allowed.'
 ERROR(PRK0553);

 QUIT;

}


EXECUTE FUNCTION(Chg Prdcr for delete  RT) TYPE(RTVOBJ) FILE(PKC2CPP)           AB1163111;
PARAMETER(RCD.PD_Producer_Code);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = *BLANK;

 // Send error message - 'Carcass Summary data exists for record.  Delete not allowed.'
 ERROR(PRK0553);

 QUIT;

}


EXECUTE FUNCTION(Chk Prdcr for delete   RT) TYPE(RTVOBJ) FILE(PKC5CPP)          AB1163114;
PARAMETER(RCD.PD_Producer_Code);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = *BLANK;

 // Send error message - 'Carcass Summary data exists for record.  Delete not allowed.'
 ERROR(PRK0553);

 QUIT;

}


EXECUTE FUNCTION(Chk Prdcr for delete  RT) TYPE(RTVOBJ) FILE(PKC0CPP)           AB1163117;
PARAMETER(RCD.PD_Producer_Code);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = 999;

 // Send error message - 'Carcass Summary data exists for record.  Delete not allowed.'
 ERROR(PRK0553);

 QUIT;

}


EXECUTE FUNCTION(Chk Prdcr for delete  RT) TYPE(RTVOBJ) FILE(PKDACPP)           AB1163126;
PARAMETER(RCD.PD_Producer_Code);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = 999;

 // Send error message - 'Hog Population Rpt Hdr is using the record. Delete is invalid.'
 ERROR(PRK0527);

 QUIT;

}


EXECUTE FUNCTION(Chk Prdcr for delete) TYPE(RTVOBJ) FILE(PKCGCPP)               AB1163152;
PARAMETER(RCD.PD_Producer_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 // PGM.*Return code = CND.Record Found
 PGM.*Return_code = 999;

 // Send error message - 'Producer History is using the record.  Delete is not allowed.'
 ERROR(PRK0554);

 QUIT;

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

//?6=Print
CASE;

// IF RCD.*SFLSEL is *Print request
IF RCD.*SFLSEL = '6'/'6';

//?Print Options Prompt
CASE;

// IF WRK.Display Print Prompt  Usr is Prompt is to be displayed
IF WRK.Display_Print_Prompt_Usr = 'Y';

// Call program Pmt Print Options     XF.
CALL PROGRAM(Pmt Print Options     XF) ('PDG0PVR');
PARAMETER('Print Producer');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('P/S');

// WRK.Display Print Prompt  Usr = CND.Do not display prompt
WRK.Display_Print_Prompt_Usr = 'N';

ENDIF;

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Execute command - 'SBM Prt Producer'
EXECUTE COMMAND(PRK0307);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(PAR.Oms_System_Value_Alpha);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?7=WW Producer Location
CASE;

// IF RCD.*SFLSEL is *Option 7 request
IF RCD.*SFLSEL = '7'/'7';

// Call program WW Prdctn Location    DF.
CALL PROGRAM(WW Prdctn Location    DF) ('PKGTDFR');
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(LCL.CC_Company_Number);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?8=WW Producer Subsidary
CASE;

// IF RCD.*SFLSEL is *Option 8 request
IF RCD.*SFLSEL = '8'/'8';

// Call program WW ProdSubsidiary     DF.
CALL PROGRAM(WW ProdSubsidiary     DF) ('PLM0DFR');
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(RCD.PD_Name);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?9=Edit Producer Comments
CASE;

// IF RCD.*SFLSEL is *option 9 request
IF RCD.*SFLSEL = '9'/'9';

// Call program Edt Producer Comment  EF.
CALL PROGRAM(Edt Producer Comment  EF) ('PKD7EFR');
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PD_Name);
PARAMETER(RCD.PD_VND_Address_Number);
PARAMETER(RCD.PD_EDI_Trading_Partner_#);
PARAMETER(RCD.Producer_Address_1_USR);
PARAMETER(RCD.Producer_Address_2_USR);
PARAMETER(RCD.Producer_City_USR);
PARAMETER(RCD.Producer_State_USR);
PARAMETER(RCD.Producer_Zip_10_USR);
PARAMETER(RCD.Producer_Area_Code_USR);
PARAMETER(RCD.Producer_Phone_Number_USR);
PARAMETER(PAR.Oms_System_Value_Alpha);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?10=Edit Producer Split
CASE;

// IF RCD.*SFLSEL is *Option 10 (Reusable)
IF RCD.*SFLSEL = '10';

// Call program Edt Prod/Prod Split   ET.
CALL PROGRAM(Edt Prod/Prod Split   ET) ('PKFOETR');
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?**********************************************************************
//?12=Edit Producer D/A
CASE;

// IF RCD.*SFLSEL is *Option 12 (Reusable)
IF RCD.*SFLSEL = '12';

// LCL.PSDP Company Number = LCL.CC Company Number
LCL.PSDP_Company_Number = LCL.CC_Company_Number;

//?Change pgm to pass 1st company and 2 co can be loaded inside
// Call program Edt Producer D/A      EF.
CALL PROGRAM(Edt Producer D/A      EF) ('PKD1EFR');
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(LCL.PSDP_Company_Number);
PARAMETER(PAR.Oms_System_Value_Alpha);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?**********************************************************************
//?13=Web Access
CASE;

// IF RCD.*SFLSEL is *Option 13 (Reusable)
IF RCD.*SFLSEL = '13';

// Call program Edt Web Access        ER.
CALL PROGRAM(Edt Web Access        ER) ('PLD1E1R');
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PD_Name);

// RCD.*SFLSEL = CND.*Reset to blanks
RCD.*SFLSEL = *BLANK;

ENDIF;

//?E11445 JJH 08/10/17 - Pass in SR Source Code to WW Producer Site
//?14=Work With Sites
CASE;

// IF RCD.*SFLSEL is *Option 14 (Resuable)
IF RCD.*SFLSEL = '14';

// Call program WW Producer Site      DF.
CALL PROGRAM(WW Producer Site      DF) ('PLGNDFR');
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(RCD.SR_Source_Code);

// RCD.*SFLSEL = CND.*Reset to blanks
RCD.*SFLSEL = *BLANK;

ENDIF;

//?15=Assign Payee
CASE;

// IF RCD.*SFLSEL is *Option 15 (Resuable)
IF RCD.*SFLSEL = '15';

// Call program Edt Alt Prod Payee    ER.
CALL PROGRAM(Edt Alt Prod Payee    ER) ('PLO5E1R');
PARAMETER(RCD.PD_Producer_Code);

// RCD.*SFLSEL = CND.*Reset to blanks
RCD.*SFLSEL = *BLANK;

ENDIF;

//?16=Dsp Alt Producer Payee
CASE;

// IF RCD.*SFLSEL is *Option 16 (Reusable)
IF RCD.*SFLSEL = '16';

// Call program Dsp Alt Prod Payee    DF.
CALL PROGRAM(Dsp Alt Prod Payee    DF) ('PLO6DFR');
PARAMETER(RCD.PD_Producer_Code);

// RCD.*SFLSEL = CND.*Reset to blanks
RCD.*SFLSEL = *BLANK;

ENDIF;

//?17=Edt TF Prod/STF Prod
CASE;

// IF RCD.*SFLSEL is *Option 17 (Resuable)
IF RCD.*SFLSEL = '17';

CASE;

// IF WRK.XrefPlanttoPlant  usr is Plant is allowed "From"
IF WRK.XrefPlanttoPlant_usr = 'FROM';

// Call program Edt Producer Sent To  EF.
CALL PROGRAM(Edt Producer Sent To  EF) ('PWB7EFR');

// IF WRK.XrefPlanttoPlant  usr is Plant is allowed "To"
IF WRK.XrefPlanttoPlant_usr = 'TO';

// Call program Dsp Producer Sent To  DF.
CALL PROGRAM(Dsp Producer Sent To  DF) ('PWB8DFR');

ENDIF;

// RCD.*SFLSEL = CND.*Reset to blanks
RCD.*SFLSEL = *BLANK;

ENDIF;

//?18=Edit Producer Ext
CASE;

// IF JOB.*USER is PorkISTesting
IF JOB.*USER = 'PRKTEST'/'ISPPATE'/'ISSMASO'/'ISRCENT'/'ISPURVAP'/'ISROSEM'/'ISSHARONZ'            +
/'ISSZURN'/'ISJHIGH'/'ISJBADE'/'ISJAMESB'/'ISDNGUY'/'ISDANNYN'/'PRKTESTGU'/'PRKTESTST'             +
/'PRKTESTTF'/'TPMTEST'/'TFTST961'/'ISSUSANM'/'ISJULIUSH'/'ISBGUTI'/'ISBARBG'/'ISBBARK'             +
/'ISNFOY'/'ISNATHANF'/'ISDREDD'/'ISABANS';

//?18=Producer Configurations
CASE;

// IF RCD.*SFLSEL is *Option 18
IF RCD.*SFLSEL = '18';

// Call program Zzz Producer SelCnfg  ER.
CALL PROGRAM(Zzz Producer SelCnfg  ER) ('PWFEE1R');
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PD_Name);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?E14322 JJH 01/04/19 - Add option to all IT to update EDI Trading #
//?20=Edit EDI Trading #  (if authorized)
CASE;

// IF RCD.*SFLSEL is *Option 20
IF RCD.*SFLSEL = '20';

//?New Authority logic for option 20
CASE;

// IF LCL.HPE Edit Authorization is Yes
IF LCL.HPE_Edit_Authorization = 'Y';

// Call program Edt Producer EDI #    E1.
CALL PROGRAM(Edt Producer EDI #    E1) ('PWHZE1R');
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(CTL.Oms_System_Value_Alpha);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?New Authority logic for option 20
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'User is not authorized to subfile option &1.  Contact I/T.'
ERROR(PRK1563);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?E14322 JJH 01/04/19 - Add option to Create Object Links for BrickFTP
//?21=Edit EDI Trading #  (if authorized)
CASE;

// IF RCD.*SFLSEL is *Option 21
IF RCD.*SFLSEL = '21';

//?New Authority logic for option 21
CASE;

// IF LCL.HPE Edit Authorization is Yes
IF LCL.HPE_Edit_Authorization = 'Y';

//?Create object link for BrickFTP
CASE;

// IF RCD.PD EDI Trading Partner # is Zero
IF RCD.PD_EDI_Trading_Partner_# = *ZERO;

// Send error message - 'The EDI # must be assigned.'
ERROR(PRK1522);
MSGPARM(RCD.PD_EDI_Trading_Partner_#);

//?Create object link for BrickFTP
// IF *OTHERWISE
IF *OTHERWISE;

//?Add Leading 0 to 5-digit PD EDI Trading Partner #
// LCL.PD EDI Trading Partner #5 = RCD.PD EDI Trading Partner #
LCL.PD_EDI_Trading_Partner_#5 = RCD.PD_EDI_Trading_Partner_#;

// LCL.PD EDI Trade Ptn Alpha5 = CVTVAR(LCL.PD EDI Trading Partner #5)
LCL.PD_EDI_Trade_Ptn_Alpha5 = CVTVAR(LCL.PD_EDI_Trading_Partner_#5);

// LCL.PD EDI Trade Ptn Alpha6 = CONCAT(CON.0,LCL.PD EDI Trade Ptn Alpha5,CND.*None)
LCL.PD_EDI_Trade_Ptn_Alpha6 = '0' + LCL.PD_EDI_Trade_Ptn_Alpha5 (*ZERO);

// Call program Ext Obj Link BrickFTP XF.
CALL PROGRAM(Ext Obj Link BrickFTP XF) ('PWH7XFR');
PARAMETER(LCL.PD_EDI_Trade_Ptn_Alpha6);

ENDIF;

//?New Authority logic for option 21
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'User is not authorized to subfile option &1.  Contact I/T.'
ERROR(PRK1563);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?USER: Final processing (Pre-confirm)

// WRK.Display Print Prompt  Usr = CND.Prompt is to be displayed
WRK.Display_Print_Prompt_Usr = 'Y';

//?USER: Process subfile record (Post-confirm)

CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

//?Susan Blakey * out to allow move to production
//?do not allow user to delete producer until 7/9/2017 is installed
EXECUTE FUNCTION(Rtv/Dlt Producer D/A  RT) TYPE(RTVOBJ) FILE(PKBEREP)           AB1114483;
PARAMETER(RCD.PD_Producer_Code);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Dlt Producer D/A      DO) TYPE(DLTOBJ) FILE(PKBEREP)           AB1104707;
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PSDP_Company_Number);
 PARAMETER(DB1.DED_D_A_Code);
}


EXECUTE FUNCTION(Dlt Producer          DO) TYPE(DLTOBJ) FILE(PKACREP)           AB1101533;
PARAMETER(RCD.PD_Producer_Code);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv/Dlt Prod Comment  RT) TYPE(RTVOBJ) FILE(PKAEREP)           AB1105512;
 PARAMETER(PAR.PD_Producer_Code);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Delete Producer Comment) TYPE(DLTOBJ) FILE(PKAEREP)            AB1104864;
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.PDC_Comment_Line);
 }

}


//?R10690 JJH 06/07/17 - Delete Producer Address
EXECUTE FUNCTION(Dlt Producer Address  DR) TYPE(DLTOBJ) FILE(PWAGREP)           AB1335162;
PARAMETER(RCD.PD_Producer_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

