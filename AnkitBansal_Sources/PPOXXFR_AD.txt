// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPOXXFR
// ?Date: 14.08.2025 Time: 03:41:28
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?----------------------------------------------------------------
//?Create 8 Mil Series Codes for all existing WP Codes.
//?Reference the new 8 Mil Series Code in the Finished Good
//?WIP Item Code.
EXECUTE FUNCTION(Cvt WP Itms to 8 Mil  RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC1740089;
{
 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 MOVE *ALL (To: PAR From: CON);

 //?SEL:  Item Type Code = WP
 CASE;

 // IF DB1.Item Type Code is Work in Process
 IF DB1.Item_Type_Code = 'WP';

 //?SEL:  Item Type Code = WP
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?SEL:  Item Code
 CASE;

 // IF DB1.Item Code is GE 8000000
 IF DB1.Item_Code >= 8000000;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?Process Record
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // PAR.Item Code USR = DB1.Item Code + CON.8000000
 PAR.Item_Code_USR = DB1.Item_Code + 8000000;

 EXECUTE FUNCTION(Cvt Crt FG WIPs       RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC1739367;
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Item_Code_USR);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Crt Item Default       CR) TYPE(CRTOBJ) FILE(OMBYREP)          AC1184294;
  PARAMETER(PAR.Item_Code_USR);
  PARAMETER(DB1.Description_Line_One);
  PARAMETER(DB1.Description_Line_Two);
  PARAMETER(DB1.Item_Label_Line_1);
  PARAMETER(DB1.Item_Label_Line_2);
  PARAMETER(DB1.Item_Label_Line_3);
  PARAMETER(DB1.Item_Label_Line_4);
  PARAMETER(DB1.UOM_Primary_Dft);
  PARAMETER(DB1.Conversion_Factor_1);
  PARAMETER(DB1.Operation_Factor_1);
  PARAMETER(DB1.UOM_Second_Dft);
  PARAMETER(DB1.Conversion_Factor_2);
  PARAMETER(DB1.Operation_Factor_2);
  PARAMETER(DB1.UOM_Third_Dft);
  PARAMETER(DB1.UOM_Pricing_Dft);
  PARAMETER(DB1.Unit_Weight);
  PARAMETER(DB1.Quality_Level);
  PARAMETER(DB1.Item_Level);
  PARAMETER(DB1.Production_Date_Control);
  PARAMETER(DB1.Catch_Weight_Status);
  PARAMETER(DB1.Minimum_Weight_Per_Case);
  PARAMETER(DB1.Maximum_Weight_Per_Case);
  PARAMETER(DB1.Number_Cases_On_A_Pallet);
  PARAMETER(DB1.Vendor_item_Default_Dft);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(DB1.Default_Commod_Mark_basis);
  PARAMETER(DB1.Transportation_Temp);
  PARAMETER(DB1.Item_Type_Code);
  PARAMETER(DB1.Package_Type_Code);
  PARAMETER(DB1.Fresh_Chilling_Time);
  PARAMETER(DB1.Base_Conv_Loss_Item);
  PARAMETER(DB1.Variety_Rendered_Cut);
  PARAMETER(DB1.Frozen_Make_to_Order_Sts);
  PARAMETER(DB1.Credit_Item_Status);
  PARAMETER(DB1.Std_Weight_Head_Var_Ren);
  PARAMETER(DB1.Pieces_Per_Head);
  PARAMETER(DB1.Commodity_Price_Group);
  PARAMETER(DB1.Pallet_Tare_Weight);
  PARAMETER(DB1.Misc_Tare_Weight);
  PARAMETER(DB1.Production_Lead_Days);
  PARAMETER(DB1.Packaging_Code);
  PARAMETER(DB1.Item_Market_Code);
  PARAMETER(DB1.TF_Co_Ownership_Sts);
  PARAMETER(DB1.Agrimetrics_group);
  PARAMETER(DB1.Agrimetrics_pack);
  PARAMETER(DB1.Agrimetrics_grade);
  PARAMETER(DB1.PA_Base_Avail_Rpt_Include);
  PARAMETER(DB1.PM_Pounds_per_Hour);
  PARAMETER(DB1.Item_Frt_Overage_Prc_UOM);
  PARAMETER(DB1.Packages_per_case);
  PARAMETER(DB1.Use_Freeze_Sell_By_Days);
  PARAMETER(DB1.PM_Batch_Size);
  PARAMETER(DB1.Package_Level_size);
  PARAMETER(DB1.Partial_Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(DB1.WIP_Reject_Code);
  PARAMETER(DB1.Std_Costing_Unit_Weight);
  PARAMETER(DB1.FP_Std_Green_Weight);
  PARAMETER(DB1.PM_Std_LBS_Man_Per_Hour);
  PARAMETER(DB1.PM_Raw_Meat_LBS_Per_Hour);
  PARAMETER(DB1.PM_Formula_LBS_Per_Hour);
  PARAMETER(DB1.PM_Finished_LBS_Per_Hour);
  PARAMETER(DB1.SH_Unused_was_broker);
  PARAMETER(DB1.PM_Raw_Material_Type_Code);
  PARAMETER(DB1.Seconds_Item);
  PARAMETER(DB1.Print_on_Realization_Rpt);
  PARAMETER(DB1.Unit_Weight_Change_Sts);
  PARAMETER(DB1.Maximum_Audit_Value);
  PARAMETER(DB1.Minimum_Audit_Value);
  PARAMETER(DB1.Market_Overage);
  PARAMETER(DB1.Standard_Overage_Underage);
  PARAMETER(DB1.Item_Pricing_Operation);
  PARAMETER(DB1.Item_Pricing_Constant);
  PARAMETER(DB1.Default_Warehouse);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Price_Method_Default);
  PARAMETER(DB1.Department_Code);
  PARAMETER(DB1.Group_for_Packaging);
  PARAMETER(DB1.Item_Category_Number_1);
  PARAMETER(DB1.Made_to_Order_Code);
  PARAMETER(DB1.Item_Category_Number_2);
  PARAMETER(DB1.Transportation_Equip_Type);
  PARAMETER(DB1.Item_Category_Number_3);
  PARAMETER(DB1.Item_Category_Code_3);
  PARAMETER(DB1.Item_Category_Number_4);
  PARAMETER(DB1.GL_Sub_Code);
  PARAMETER(DB1.Item_Category_Number_5);
  PARAMETER(DB1.Item_Structure_Sub_Class);
  PARAMETER(DB1.Item_Category_Number_6);
  PARAMETER(DB1.Item_Primal_Sched_Report);
  PARAMETER(DB1.Item_Category_Number_7);
  PARAMETER(DB1.Item_Exc_Man_Prc_Excp);
  PARAMETER(DB1.Item_Category_Number_8);
  PARAMETER(DB1.Item_Prod_Sched_Send_PFS);
  PARAMETER(DB1.Item_Category_Number_9);
  PARAMETER(DB1.Item_Category_Code_9);
  PARAMETER(DB1.Item_Category_Number_10);
  PARAMETER(DB1.Item_Category_Code_10);
  PARAMETER(DB1.PM_Line_Number);
  PARAMETER(DB1.Primal_Group_Code);
  PARAMETER(DB1.Piece_Count_Item);
  PARAMETER(DB1.Pieces_Per_Bag);
  PARAMETER(DB1.Bags_Per_Unit);
  PARAMETER(DB1.Export_Domestic);
  PARAMETER(DB1.Print_On_Schedule);
  PARAMETER(DB1.Fresh_Inv_Allocation_Seq);
  PARAMETER(DB1.Fresh_Sched_As_Ordered);
  PARAMETER(DB1.Frozen_Inv_Allocation_Seq);
  PARAMETER(DB1.Item_Meat_Cost_Group_Code);
  PARAMETER(DB1.UPC_Code_2);
  PARAMETER(DB1.Item_Target_Price);
  PARAMETER(DB1.Minimum_Piece_Weight);
  PARAMETER(DB1.Maximum_Piece_Weight);
  PARAMETER(DB1.Seaboard_Equivalent_Item);
  PARAMETER(DB1.Production_Qty_Per_Shift);
  PARAMETER(DB1.Scheduling_Position_Grade);
  PARAMETER(DB1.Sold_100_Percent_Frozen);
  PARAMETER(DB1.Maximum_Shifts);
  PARAMETER(DB1.Value_Added_Sts);
  PARAMETER(DB1.Label_Type);
  PARAMETER(DB1.Item_TF_Exempt_Code);
  PARAMETER(DB1.Item_TF_Classification);
  PARAMETER(DB1.Default_Workcenter);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time_1);
   PARAMETER(DB1.User_Id_1);
   PARAMETER(DB1.Job_Name_1);
   PARAMETER(DB1.Job_Date_1);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   //?USER: Processing after Data update

   //?E3313 JJH 08/27/14 - Create Item Default Extension
   //?R13981 DN 10/26/18 - Update Spanish Desc in Item Default Extsn.
   //?418 ISE 08/21/20 - Update Manufacturer code in Item Default Extsn.
   //?R17040 DN 02/23/21 - Update IDE Pallet Tiers & Blocks.
   //?DO2642 DN 06/01/22 - Update Spanish Desc 2 in Item Default Extsn.
   // Call program Rtv/Crt Itm Dflt Ext  XF.
   CALL PROGRAM(Rtv/Crt Itm Dflt Ext  XF) ('PBO6XFR');
   PARAMETER(DB1.Item_Code);
   PARAMETER(PAR.IDE_Forecast_in_DP);
   PARAMETER(PAR.IDE_Pallet_Tiers);
   PARAMETER(PAR.IDE_Pallet_Blocks);
   PARAMETER(PAR.Spanish_Description);
   PARAMETER(PAR.Spanish_Description_Line2);
   PARAMETER(PAR.IDE_Manufacturer_Nbr);
   PARAMETER(JOB.*PROGRAM);

  }

  EXECUTE FUNCTION(Cpy Item Code         RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1739375;
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Item_Code_USR);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(CRT Item/Add to AvlGrp CR) TYPE(CRTOBJ) FILE(CABZREP)          AC1120696;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Item_Code_USR);
   PARAMETER(DB1.Description_Line_One);
   PARAMETER(DB1.Description_Line_Two);
   PARAMETER(DB1.Item_Label_Line_1);
   PARAMETER(DB1.Item_Label_Line_2);
   PARAMETER(DB1.Item_Label_Line_3);
   PARAMETER(DB1.Item_Label_Line_4);
   PARAMETER(DB1.UOM_Primary);
   PARAMETER(DB1.Conversion_Factor_1);
   PARAMETER(DB1.Operation_Factor_1);
   PARAMETER(DB1.UOM_Second);
   PARAMETER(DB1.Conversion_Factor_2);
   PARAMETER(DB1.Operation_Factor_2);
   PARAMETER(DB1.UOM_Third);
   PARAMETER(DB1.UOM_Pricing);
   PARAMETER(DB1.Unit_Weight);
   PARAMETER(DB1.Quality_Level);
   PARAMETER(DB1.Item_Level);
   PARAMETER(DB1.Production_Date_Control);
   PARAMETER(DB1.Catch_Weight_Status);
   PARAMETER(DB1.Minimum_Weight_Per_Case);
   PARAMETER(DB1.Maximum_Weight_Per_Case);
   PARAMETER(DB1.Number_Cases_On_A_Pallet);
   PARAMETER(DB1.Vendor_Item_Default);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(DB1.Default_Commod_Mark_basis);
   PARAMETER(DB1.Transportation_Temp);
   PARAMETER(DB1.Item_Type_Code);
   PARAMETER(DB1.Package_Type_Code);
   PARAMETER(DB1.Maximum_Audit_Value);
   PARAMETER(DB1.Minimum_Audit_Value);
   PARAMETER(DB1.Market_Overage);
   PARAMETER(DB1.Standard_Overage_Underage);
   PARAMETER(DB1.Commodity_Price_Group);
   PARAMETER(DB1.Item_Pricing_Operation);
   PARAMETER(DB1.Item_Pricing_Constant);
   PARAMETER(DB1.Default_Warehouse);
   PARAMETER(DB1.Price_Method_Default);
   PARAMETER(DB1.Fresh_Chilling_Time);
   PARAMETER(DB1.Base_Conv_Loss_Item);
   PARAMETER(DB1.Variety_Rendered_Cut);
   PARAMETER(DB1.Frozen_Make_to_Order_Sts);
   PARAMETER(DB1.Credit_Item_Status);
   PARAMETER(DB1.Std_Weight_Head_Var_Ren);
   PARAMETER(DB1.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(DB1.Group_for_Packaging);
   PARAMETER(DB1.Item_Category_Number_1);
   PARAMETER(DB1.Made_to_Order_Code);
   PARAMETER(DB1.Item_Category_Number_2);
   PARAMETER(DB1.Transportation_Equip_Type);
   PARAMETER(DB1.Item_Category_Number_3);
   PARAMETER(DB1.Item_Category_Code_3);
   PARAMETER(DB1.Item_Category_Number_4);
   PARAMETER(DB1.GL_Sub_Code);
   PARAMETER(DB1.Item_Category_Number_5);
   PARAMETER(DB1.Item_Structure_Sub_Class);
   PARAMETER(DB1.Item_Category_Number_6);
   PARAMETER(DB1.Item_Primal_Sched_Report);
   PARAMETER(DB1.Item_Category_Number_7);
   PARAMETER(DB1.Item_Exc_Man_Prc_Excp);
   PARAMETER(DB1.Item_Category_Number_8);
   PARAMETER(DB1.Item_Prod_Sched_Send_PFS);
   PARAMETER(DB1.Item_Category_Number_9);
   PARAMETER(DB1.Item_Category_Code_9);
   PARAMETER(DB1.Item_Category_Number_10);
   PARAMETER(DB1.Item_Category_Code_10);
   PARAMETER(DB1.Pallet_Tare_Weight);
   PARAMETER(DB1.Misc_Tare_Weight);
   PARAMETER(DB1.Production_Lead_Days);
   PARAMETER(DB1.Packaging_Code);
   PARAMETER(DB1.Item_Market_Code);
   PARAMETER(DB1.TF_Co_Ownership_Sts);
   PARAMETER(DB1.Agrimetrics_group);
   PARAMETER(DB1.Agrimetrics_pack);
   PARAMETER(DB1.Agrimetrics_grade);
   PARAMETER(DB1.PA_Base_Avail_Rpt_Include);
   PARAMETER(DB1.PM_Pounds_per_Hour);
   PARAMETER(DB1.Item_Frt_Overage_Prc_UOM);
   PARAMETER(DB1.Packages_per_case);
   PARAMETER(DB1.Use_Freeze_Sell_By_Days);
   PARAMETER(DB1.PM_Batch_Size);
   PARAMETER(DB1.Package_Level_size);
   PARAMETER(DB1.Partial_Item_Code);
   PARAMETER(PAR.WIP_Item_Code);
   PARAMETER(DB1.WIP_Reject_Code);
   PARAMETER(DB1.Std_Costing_Unit_Weight);
   PARAMETER(DB1.FP_Std_Green_Weight);
   PARAMETER(DB1.PM_Std_LBS_Man_Per_Hour);
   PARAMETER(DB1.PM_Raw_Meat_LBS_Per_Hour);
   PARAMETER(DB1.PM_Formula_LBS_Per_Hour);
   PARAMETER(DB1.PM_Finished_LBS_Per_Hour);
   PARAMETER(DB1.SH_Unused_was_broker);
   PARAMETER(DB1.PM_Raw_Material_Type_Code);
   PARAMETER(DB1.PM_Line_Number);
   PARAMETER(DB1.Seconds_Item);
   PARAMETER(DB1.Print_on_Realization_Rpt);
   PARAMETER(DB1.Unit_Weight_Change_Sts);
   PARAMETER(DB1.Piece_Count_Item);
   PARAMETER(DB1.Pieces_Per_Bag);
   PARAMETER(DB1.Bags_Per_Unit);
   PARAMETER(DB1.Export_Domestic);
   PARAMETER(DB1.Print_On_Schedule);
   PARAMETER(DB1.Fresh_Inv_Allocation_Seq);
   PARAMETER(DB1.Fresh_Sched_As_Ordered);
   PARAMETER(DB1.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Item_Meat_Cost_Group_Code);
   PARAMETER(DB1.UPC_Code_2);
   PARAMETER(DB1.Item_Target_Price);
   PARAMETER(DB1.Minimum_Piece_Weight);
   PARAMETER(DB1.Maximum_Piece_Weight);
   PARAMETER(DB1.Seaboard_Equivalent_Item);
   PARAMETER(DB1.Production_Qty_Per_Shift);
   PARAMETER(DB1.Scheduling_Position_Grade);
   PARAMETER(DB1.Sold_100_Percent_Frozen);
   PARAMETER(DB1.Maximum_Shifts);
   PARAMETER(DB1.Value_Added_Sts);
   PARAMETER(DB1.Label_Type);
   PARAMETER(DB1.Item_TF_Exempt_Code);
   PARAMETER(DB1.Item_TF_Classification);
   PARAMETER(DB1.Default_Workcenter);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER(DB1.Record_Status);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    //?USER: Processing after Data update

    CASE;

    // IF DB1.Item Type Code is Finished Goods
    IF DB1.Item_Type_Code = 'FG';

    EXECUTE FUNCTION(CRT Co Item/Avail Grp  CR) TYPE(CRTOBJ) FILE(PDKLREP)          AC1380738;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER('ALL');
    PARAMETER(*ZERO);
    PARAMETER(DB1.EDI_Status_1);
    PARAMETER(DB1.EDI_Status_2);
    PARAMETER(DB1.EDI_Status_3);
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
     PARAMETER(DB1.Record_Status);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Record Status = CND.Active
      PAR.Record_Status = 'A';

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    // IF DB1.Item Type Code is Work in Process
    IF DB1.Item_Type_Code = 'WP';

    EXECUTE FUNCTION(CRT Co Item/Avail Grp  CR) TYPE(CRTOBJ) FILE(PDKLREP)          AC1380738;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER('WIP');
    PARAMETER(*ZERO);
    PARAMETER(DB1.EDI_Status_1);
    PARAMETER(DB1.EDI_Status_2);
    PARAMETER(DB1.EDI_Status_3);
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
     PARAMETER(DB1.Record_Status);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Record Status = CND.Active
      PAR.Record_Status = 'A';

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

    //?06/17/09 PKD FP1054 Create Company Item EXT & Upd PLAN PRODUCTION STS
    // Call program Rtv Plant Co/Org      XF.
    CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
    PARAMETER(DB1.Company_Number);
    PARAMETER(LCL.Plant_Company_Sts);
    PARAMETER(LCL.Company_Organization);

    //?LCL. Plant Production Sts
    CASE;

    // IF LCL.Company Organization is Not Seaboard
    IF LCL.Company_Organization = 'D'/'H';

    // OR DB1.Item Type Code is Not Finished Good
    OR DB1.Item_Type_Code <> 'FG';

    // LCL.Plan Production Sts = CND.No
    LCL.Plan_Production_Sts = 'N';

    // LCL.Allocation Method = CND.Forward - ASAP
    LCL.Allocation_Method = 'F';

    //?LCL. Plant Production Sts
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.Plan Production Sts = CND.Yes
    LCL.Plan_Production_Sts = *BLANK;

    ENDIF;

    EXECUTE FUNCTION(Crt Company Item Ext  CR) TYPE(CRTOBJ) FILE(PMFDREP)           AC1926035;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(LCL.Produce_on_Sunday_Sts);
    PARAMETER(LCL.Produce_on_Monday_Sts);
    PARAMETER(LCL.Produce_on_Tuesday_Sts);
    PARAMETER(LCL.Produce_on_Wednesday_Sts);
    PARAMETER(LCL.Produce_on_Thursday_Sts);
    PARAMETER(LCL.Produce_on_Friday_Sts);
    PARAMETER(LCL.Produce_on_Saturday_Sts);
    PARAMETER(LCL.Plan_Production_Sts);
    PARAMETER(LCL.Allocation_Method);
    PARAMETER(LCL.Adjust_Credit_Pieces);
    PARAMETER(LCL.CIE_Use_Age_Days_over_Max);
    PARAMETER(LCL.CIE_MPR_Report_to_USDA);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(DB1.Record_Status);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
     PARAMETER(DB1.Record_Status);
     PARAMETER(DB1.Create_Date);
     PARAMETER(DB1.Create_Time);
     PARAMETER(DB1.Create_User);
     PARAMETER(DB1.Create_Program);
     PARAMETER(DB1.Change_Date);
     PARAMETER(DB1.Change_Time);
     PARAMETER(DB1.Change_User);
     PARAMETER(DB1.Change_Program);
     {
      //?Execute internal function

      //?*** Set RECORD STATUS field. ***
      // PAR.Record Status = CND.Active
      PAR.Record_Status = 'A';

      //?*** Set CREATE fields. ***
      // PAR.Create Date = JOB.*Job date
      PAR.Create_Date = JOB.*Job_date;

      // PAR.Create Time = JOB.*Job time
      PAR.Create_Time = JOB.*Job_time;

      // PAR.Create User = JOB.*USER
      PAR.Create_User = JOB.*USER;

      // PAR.Create Program = JOB.*PROGRAM
      PAR.Create_Program = JOB.*PROGRAM;

      //?*** Set CHANGE fields. ***
      // PAR.Change Date = CON.*ZERO
      PAR.Change_Date = *ZERO;

      // PAR.Change Time = CON.*ZERO
      PAR.Change_Time = *ZERO;

      // PAR.Change User = CON.*BLANK
      PAR.Change_User = *BLANK;

      // PAR.Change Program = CON.*BLANK
      PAR.Change_Program = *BLANK;

     }

    }

    // Send information message - 'Company &1 for Item &2 was created'
    MESSAGE(USR3361 *INFO);
    MSGPARM(DB1.Company_Number);
    MSGPARM(DB1.Item_Code);

   }

   EXECUTE FUNCTION(Cpy Item Balance      RT) TYPE(RTVOBJ) FILE(CAB0REP)           AC1739374;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(PAR.Item_Code_USR);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(Crt Item Balance       CR) TYPE(CRTOBJ) FILE(CAB0REP)          AC1119976;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Item_Code_USR);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Unit_Cost_Per_Pound);
    PARAMETER(DB1.Last_Cost);
    PARAMETER(DB1.Cost_per_Primary_UOM);
    PARAMETER(DB1.Cost_per_Pricing_UOM);
    PARAMETER(DB1.Revaluation_Cost);
    PARAMETER(DB1.Revaluation_Eff_Date);
    PARAMETER(DB1.Revaluation_Cost_Type);
    PARAMETER(DB1.Last_Revaluation_Cost);
    PARAMETER(DB1.Last_Revaluation_Eff_Date);
    PARAMETER(DB1.On_Hand_Weight_Summary);
    PARAMETER(DB1.On_Hand_UOM1_Summary);
    PARAMETER(DB1.On_Hand_UOM2_Summary);
    PARAMETER(DB1.On_Hand_UOM3_Summary);
    PARAMETER(DB1.Quantity_In_Chill);
    PARAMETER(DB1.Weight_In_Chill);
    PARAMETER(DB1.Quantity_Scheduled_UOM1);
    PARAMETER(DB1.Quantity_on_Sales_Order);
    PARAMETER(DB1.Quantity_on_Purch_Order);
    PARAMETER(DB1.Quantity_on_Transfer);
    PARAMETER(DB1.Quantity_Avail_To_Sell);
    PARAMETER(DB1.Cycle_Count_Code_IB);
    PARAMETER(DB1.Date_of_Last_Order);
    PARAMETER(DB1.Date_of_Last_Shipment);
    PARAMETER(DB1.Value_of_On_Hand_Inventor);
    PARAMETER(DB1.Inventory_Planning_Type);
    PARAMETER(DB1.Safety_Allowance_Percent);
    PARAMETER(DB1.Safety_Allowance_Quantity);
    PARAMETER(DB1.Stock_Out_Date);
    PARAMETER(DB1.Buyer_Code);
    PARAMETER(DB1.Lead_Time_Last);
    PARAMETER(DB1.Lead_Time_Date_Last);
    PARAMETER(DB1.Lead_Time_Next_to_Last);
    PARAMETER(DB1.Lead_Time_Date_Next_Lst);
    PARAMETER(DB1.Lead_Time_Exception);
    PARAMETER(DB1.Usage_Qty_per_Cycle);
    PARAMETER(DB1.Usage_Weight_per_Cycle);
    PARAMETER(DB1.Inventory_Management);
    PARAMETER(DB1.Minimum_Quantity);
    PARAMETER(DB1.Maximum_Quantity);
    PARAMETER(DB1.Last_Physical_Count);
    PARAMETER(DB1.Requisition_Mode);
    PARAMETER(DB1.Cost_Update_Pending);
    PARAMETER(DB1.Post_GL_Status);
    PARAMETER(DB1.Vendor_Item_Whse_Default);
    PARAMETER(DB1.Item_Structure_Class_Code);
    PARAMETER(DB1.Item_Structure_Group_Code);
    PARAMETER(DB1.Item_Structure_Type_Code);
    PARAMETER(DB1.EDI_Status_1);
    PARAMETER(DB1.EDI_Status_2);
    PARAMETER(DB1.EDI_Status_3);
    PARAMETER(DB1.Record_Status);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

   }

  }

  EXECUTE FUNCTION(Cpy Bill of Materials  RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1361733;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Item_Code_USR);
  PARAMETER(LCL.BOM_Type_Usr);
  {
   //?USER: Process Data record

   CASE;

   // IF PAR.BOM Type Usr EQ DB1.BOM Type
   IF PAR.BOM_Type_Usr = DB1.BOM_Type;

   // OR PAR.BOM Type Usr EQ WRK.BLANK
   OR PAR.BOM_Type_Usr = WRK.BLANK;

   //?Delete bom type = supplies, if that's the only type being copied
   CASE;

   // IF PAR.BOM Type Usr is Supplies
   IF PAR.BOM_Type_Usr = 'S';

   EXECUTE FUNCTION(RTV/DLT for Copy      RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1604169;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Item_Code_Detail);
   {
    //?USER: Process Data record

    CASE;

    // IF DB1.BOM Type is Supplies
    IF DB1.BOM_Type = 'S';

    EXECUTE FUNCTION(DLT Item BOM           DL) TYPE(DLTOBJ) FILE(PDIOREP)          AC1261543;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Component_Item_Code);
    ENDIF;

   }

   ENDIF;

   //?If item code and component code are equal then
   //?create a record with the item code and the component = par item
   //?other wise create record with par item and db1 component
   CASE;

   // IF DB1.Item Code EQ DB1.Component Item Code
   IF DB1.Item_Code = DB1.Component_Item_Code;

   EXECUTE FUNCTION(CRT Item BOM           CR) TYPE(CRTOBJ) FILE(PDIOREP)          AC1261541;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Item_Code_Detail);
   PARAMETER(PAR.Item_Code_Detail);
   PARAMETER(DB1.BOM_Type);
   PARAMETER(DB1.Sales_Yield);
   PARAMETER(DB1.Production_Yield);
   PARAMETER(DB1.Packaging_Quantity);
   PARAMETER(DB1.UOM_Primary_Dft);
   PARAMETER(DB1.Upd_Standard_Production);
   PARAMETER(DB1.Consume_Priority);
   PARAMETER(DB1.Consume_Priority_Percent);
   PARAMETER(DB1.BOM_Pumped_Percent);
   PARAMETER(DB1.BOM_Meat_Cost_ConsumedPCT);
   PARAMETER(DB1.BOM_Off_Line_Yield_Pct);
   PARAMETER(DB1.BOM_Multi_RM_Option);
   PARAMETER(DB1.BOM_Group_Prod_Yield);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER(DB1.Record_Status);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?DLY029 RMC 06/06/07 Crt New item bom for existing item/companies
   EXECUTE FUNCTION(Rtv BOM - Copy funct  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1827243;
   PARAMETER(PAR.Item_Code_Detail);
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Item_Code_Detail);
   PARAMETER(DB1.BOM_Type);
   PARAMETER(DB1.Sales_Yield);
   PARAMETER(DB1.Production_Yield);
   PARAMETER(DB1.Packaging_Quantity);
   PARAMETER(DB1.UOM_Primary_Dft);
   PARAMETER(DB1.Upd_Standard_Production);
   PARAMETER(DB1.Consume_Priority);
   PARAMETER(DB1.Consume_Priority_Percent);
   PARAMETER(DB1.BOM_Pumped_Percent);
   PARAMETER(DB1.BOM_Meat_Cost_ConsumedPCT);
   PARAMETER(DB1.BOM_Off_Line_Yield_Pct);
   PARAMETER(DB1.BOM_Multi_RM_Option);
   PARAMETER(DB1.BOM_Group_Prod_Yield);
   PARAMETER(DB1.Record_Status);
   {
    //?USER: Process Data record

    CASE;

    // IF DB1.Company Number NE PAR.Company Number
    IF DB1.Company_Number <> PAR.Company_Number;

    EXECUTE FUNCTION(Rtv Plant Co Status   RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1761084;
    PARAMETER(DB1.Company_Number);
    PARAMETER(WRK.Plant_Company_Sts);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF WRK.Plant Company Sts is Plant Company
    IF WRK.Plant_Company_Sts = 'P';

    EXECUTE FUNCTION(CRT Item BOM           CR) TYPE(CRTOBJ) FILE(PDIOREP)          AC1261541;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Component_Item_Code);
    PARAMETER(PAR.BOM_Type);
    PARAMETER(PAR.Sales_Yield);
    PARAMETER(PAR.Production_Yield);
    PARAMETER(PAR.Packaging_Quantity);
    PARAMETER(PAR.UOM_Primary_Dft);
    PARAMETER(PAR.Upd_Standard_Production);
    PARAMETER(PAR.Consume_Priority);
    PARAMETER(PAR.Consume_Priority_Percent);
    PARAMETER(PAR.BOM_Pumped_Percent);
    PARAMETER(PAR.BOM_Meat_Cost_ConsumedPCT);
    PARAMETER(PAR.BOM_Off_Line_Yield_Pct);
    PARAMETER(PAR.BOM_Multi_RM_Option);
    PARAMETER(PAR.BOM_Group_Prod_Yield);
    PARAMETER(DB1.EDI_Status_1);
    PARAMETER(DB1.EDI_Status_2);
    PARAMETER(DB1.EDI_Status_3);
    PARAMETER(DB1.Record_Status);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
     PARAMETER(DB1.Record_Status);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Record Status = CND.Active
      PAR.Record_Status = 'A';

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

    ENDIF;

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(CRT Item BOM           CR) TYPE(CRTOBJ) FILE(PDIOREP)          AC1261541;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Item_Code_Detail);
   PARAMETER(DB1.Component_Item_Code);
   PARAMETER(DB1.BOM_Type);
   PARAMETER(DB1.Sales_Yield);
   PARAMETER(DB1.Production_Yield);
   PARAMETER(DB1.Packaging_Quantity);
   PARAMETER(DB1.UOM_Primary_Dft);
   PARAMETER(DB1.Upd_Standard_Production);
   PARAMETER(DB1.Consume_Priority);
   PARAMETER(DB1.Consume_Priority_Percent);
   PARAMETER(DB1.BOM_Pumped_Percent);
   PARAMETER(DB1.BOM_Meat_Cost_ConsumedPCT);
   PARAMETER(DB1.BOM_Off_Line_Yield_Pct);
   PARAMETER(DB1.BOM_Multi_RM_Option);
   PARAMETER(DB1.BOM_Group_Prod_Yield);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER(DB1.Record_Status);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?DLY029 RMC 06/06/07 Crt New item bom for existing item/companies
   EXECUTE FUNCTION(Rtv BOM - Copy funct  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1827243;
   PARAMETER(PAR.Item_Code_Detail);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Component_Item_Code);
   PARAMETER(DB1.BOM_Type);
   PARAMETER(DB1.Sales_Yield);
   PARAMETER(DB1.Production_Yield);
   PARAMETER(DB1.Packaging_Quantity);
   PARAMETER(DB1.UOM_Primary_Dft);
   PARAMETER(DB1.Upd_Standard_Production);
   PARAMETER(DB1.Consume_Priority);
   PARAMETER(DB1.Consume_Priority_Percent);
   PARAMETER(DB1.BOM_Pumped_Percent);
   PARAMETER(DB1.BOM_Meat_Cost_ConsumedPCT);
   PARAMETER(DB1.BOM_Off_Line_Yield_Pct);
   PARAMETER(DB1.BOM_Multi_RM_Option);
   PARAMETER(DB1.BOM_Group_Prod_Yield);
   PARAMETER(DB1.Record_Status);
   {
    //?USER: Process Data record

    CASE;

    // IF DB1.Company Number NE PAR.Company Number
    IF DB1.Company_Number <> PAR.Company_Number;

    EXECUTE FUNCTION(Rtv Plant Co Status   RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1761084;
    PARAMETER(DB1.Company_Number);
    PARAMETER(WRK.Plant_Company_Sts);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF WRK.Plant Company Sts is Plant Company
    IF WRK.Plant_Company_Sts = 'P';

    EXECUTE FUNCTION(CRT Item BOM           CR) TYPE(CRTOBJ) FILE(PDIOREP)          AC1261541;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Component_Item_Code);
    PARAMETER(PAR.BOM_Type);
    PARAMETER(PAR.Sales_Yield);
    PARAMETER(PAR.Production_Yield);
    PARAMETER(PAR.Packaging_Quantity);
    PARAMETER(PAR.UOM_Primary_Dft);
    PARAMETER(PAR.Upd_Standard_Production);
    PARAMETER(PAR.Consume_Priority);
    PARAMETER(PAR.Consume_Priority_Percent);
    PARAMETER(PAR.BOM_Pumped_Percent);
    PARAMETER(PAR.BOM_Meat_Cost_ConsumedPCT);
    PARAMETER(PAR.BOM_Off_Line_Yield_Pct);
    PARAMETER(PAR.BOM_Multi_RM_Option);
    PARAMETER(PAR.BOM_Group_Prod_Yield);
    PARAMETER(DB1.EDI_Status_1);
    PARAMETER(DB1.EDI_Status_2);
    PARAMETER(DB1.EDI_Status_3);
    PARAMETER(DB1.Record_Status);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
     PARAMETER(DB1.Record_Status);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Record Status = CND.Active
      PAR.Record_Status = 'A';

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

    ENDIF;

   }

   ENDIF;

   ENDIF;

  }

 }

 EXECUTE FUNCTION(Cvt FG WP Item Code   RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC1740102;
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Item_Code_USR);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg WIP Item Code     CH) TYPE(CHGOBJ) FILE(OMBYREP)           AC1740105;
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Item_Code_USR);
  {
   //?USER: Processing after Data update

   EXECUTE FUNCTION(Chg WIP Item Code     RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1740106;
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.WIP_Item_Code);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(Chg WIP Item Code     CH) TYPE(CHGOBJ) FILE(CABZREP)           AC1740107;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(PAR.WIP_Item_Code);
   }

  }

 }

 ENDIF;

}


//?----------------------------------------------------------------
//?Create 9 Mil Series Item Codes for all Finished Goods codes that
//?has a WIP Item Code.
EXECUTE FUNCTION(Cvt Prc WIP FGs       RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC1739364;
PARAMETER(PAR.WIP_Item_Code);
PARAMETER(PAR.Item_Code);
{
 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 MOVE *ALL (To: PAR From: CON);

 //?SEL:  PAR.WIP Code
 CASE;

 // IF PAR.WIP Item Code is Entered
 IF PAR.WIP_Item_Code <> *ZERO;

 CASE;

 // IF DB1.WIP Item Code NE PAR.WIP Item Code
 IF DB1.WIP_Item_Code <> PAR.WIP_Item_Code;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?SEL:  PAR.WIP Code
 // IF *OTHERWISE
 IF *OTHERWISE;

 ENDIF;

 //?SEL:  Item Code
 CASE;

 // IF PAR.Item Code is Entered
 IF PAR.Item_Code <> *ZERO;

 CASE;

 // IF DB1.Item Code NE PAR.Item Code
 IF DB1.Item_Code <> PAR.Item_Code;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?SEL:  Item Type Code
 CASE;

 // IF DB1.Item Type Code is Finished Goods
 IF DB1.Item_Type_Code = 'FG';

 //?SEL:  Item Type Code
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?Process Record
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF DB1.WIP Item Code is Entered
 IF DB1.WIP_Item_Code <> *ZERO;

 // PAR.Item Code USR = DB1.Item Code + CON.9000000
 PAR.Item_Code_USR = DB1.Item_Code + 9000000;

 EXECUTE FUNCTION(Cvt Crt FG WIPs       RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC1739367;
 PARAMETER(DB1.WIP_Item_Code);
 PARAMETER(PAR.Item_Code_USR);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Crt Item Default       CR) TYPE(CRTOBJ) FILE(OMBYREP)          AC1184294;
  PARAMETER(PAR.Item_Code_USR);
  PARAMETER(DB1.Description_Line_One);
  PARAMETER(DB1.Description_Line_Two);
  PARAMETER(DB1.Item_Label_Line_1);
  PARAMETER(DB1.Item_Label_Line_2);
  PARAMETER(DB1.Item_Label_Line_3);
  PARAMETER(DB1.Item_Label_Line_4);
  PARAMETER(DB1.UOM_Primary_Dft);
  PARAMETER(DB1.Conversion_Factor_1);
  PARAMETER(DB1.Operation_Factor_1);
  PARAMETER(DB1.UOM_Second_Dft);
  PARAMETER(DB1.Conversion_Factor_2);
  PARAMETER(DB1.Operation_Factor_2);
  PARAMETER(DB1.UOM_Third_Dft);
  PARAMETER(DB1.UOM_Pricing_Dft);
  PARAMETER(DB1.Unit_Weight);
  PARAMETER(DB1.Quality_Level);
  PARAMETER(DB1.Item_Level);
  PARAMETER(DB1.Production_Date_Control);
  PARAMETER(DB1.Catch_Weight_Status);
  PARAMETER(DB1.Minimum_Weight_Per_Case);
  PARAMETER(DB1.Maximum_Weight_Per_Case);
  PARAMETER(DB1.Number_Cases_On_A_Pallet);
  PARAMETER(DB1.Vendor_item_Default_Dft);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(DB1.Default_Commod_Mark_basis);
  PARAMETER(DB1.Transportation_Temp);
  PARAMETER(DB1.Item_Type_Code);
  PARAMETER(DB1.Package_Type_Code);
  PARAMETER(DB1.Fresh_Chilling_Time);
  PARAMETER(DB1.Base_Conv_Loss_Item);
  PARAMETER(DB1.Variety_Rendered_Cut);
  PARAMETER(DB1.Frozen_Make_to_Order_Sts);
  PARAMETER(DB1.Credit_Item_Status);
  PARAMETER(DB1.Std_Weight_Head_Var_Ren);
  PARAMETER(DB1.Pieces_Per_Head);
  PARAMETER(DB1.Commodity_Price_Group);
  PARAMETER(DB1.Pallet_Tare_Weight);
  PARAMETER(DB1.Misc_Tare_Weight);
  PARAMETER(DB1.Production_Lead_Days);
  PARAMETER(DB1.Packaging_Code);
  PARAMETER(DB1.Item_Market_Code);
  PARAMETER(DB1.TF_Co_Ownership_Sts);
  PARAMETER(DB1.Agrimetrics_group);
  PARAMETER(DB1.Agrimetrics_pack);
  PARAMETER(DB1.Agrimetrics_grade);
  PARAMETER(DB1.PA_Base_Avail_Rpt_Include);
  PARAMETER(DB1.PM_Pounds_per_Hour);
  PARAMETER(DB1.Item_Frt_Overage_Prc_UOM);
  PARAMETER(DB1.Packages_per_case);
  PARAMETER(DB1.Use_Freeze_Sell_By_Days);
  PARAMETER(DB1.PM_Batch_Size);
  PARAMETER(DB1.Package_Level_size);
  PARAMETER(DB1.Partial_Item_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(DB1.WIP_Reject_Code);
  PARAMETER(DB1.Std_Costing_Unit_Weight);
  PARAMETER(DB1.FP_Std_Green_Weight);
  PARAMETER(DB1.PM_Std_LBS_Man_Per_Hour);
  PARAMETER(DB1.PM_Raw_Meat_LBS_Per_Hour);
  PARAMETER(DB1.PM_Formula_LBS_Per_Hour);
  PARAMETER(DB1.PM_Finished_LBS_Per_Hour);
  PARAMETER(DB1.SH_Unused_was_broker);
  PARAMETER(DB1.PM_Raw_Material_Type_Code);
  PARAMETER(DB1.Seconds_Item);
  PARAMETER(DB1.Print_on_Realization_Rpt);
  PARAMETER(DB1.Unit_Weight_Change_Sts);
  PARAMETER(DB1.Maximum_Audit_Value);
  PARAMETER(DB1.Minimum_Audit_Value);
  PARAMETER(DB1.Market_Overage);
  PARAMETER(DB1.Standard_Overage_Underage);
  PARAMETER(DB1.Item_Pricing_Operation);
  PARAMETER(DB1.Item_Pricing_Constant);
  PARAMETER(DB1.Default_Warehouse);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Price_Method_Default);
  PARAMETER(DB1.Department_Code);
  PARAMETER(DB1.Group_for_Packaging);
  PARAMETER(DB1.Item_Category_Number_1);
  PARAMETER(DB1.Made_to_Order_Code);
  PARAMETER(DB1.Item_Category_Number_2);
  PARAMETER(DB1.Transportation_Equip_Type);
  PARAMETER(DB1.Item_Category_Number_3);
  PARAMETER(DB1.Item_Category_Code_3);
  PARAMETER(DB1.Item_Category_Number_4);
  PARAMETER(DB1.GL_Sub_Code);
  PARAMETER(DB1.Item_Category_Number_5);
  PARAMETER(DB1.Item_Structure_Sub_Class);
  PARAMETER(DB1.Item_Category_Number_6);
  PARAMETER(DB1.Item_Primal_Sched_Report);
  PARAMETER(DB1.Item_Category_Number_7);
  PARAMETER(DB1.Item_Exc_Man_Prc_Excp);
  PARAMETER(DB1.Item_Category_Number_8);
  PARAMETER(DB1.Item_Prod_Sched_Send_PFS);
  PARAMETER(DB1.Item_Category_Number_9);
  PARAMETER(DB1.Item_Category_Code_9);
  PARAMETER(DB1.Item_Category_Number_10);
  PARAMETER(DB1.Item_Category_Code_10);
  PARAMETER(DB1.PM_Line_Number);
  PARAMETER(DB1.Primal_Group_Code);
  PARAMETER(DB1.Piece_Count_Item);
  PARAMETER(DB1.Pieces_Per_Bag);
  PARAMETER(DB1.Bags_Per_Unit);
  PARAMETER(DB1.Export_Domestic);
  PARAMETER(DB1.Print_On_Schedule);
  PARAMETER(DB1.Fresh_Inv_Allocation_Seq);
  PARAMETER(DB1.Fresh_Sched_As_Ordered);
  PARAMETER(DB1.Frozen_Inv_Allocation_Seq);
  PARAMETER(DB1.Item_Meat_Cost_Group_Code);
  PARAMETER(DB1.UPC_Code_2);
  PARAMETER(DB1.Item_Target_Price);
  PARAMETER(DB1.Minimum_Piece_Weight);
  PARAMETER(DB1.Maximum_Piece_Weight);
  PARAMETER(DB1.Seaboard_Equivalent_Item);
  PARAMETER(DB1.Production_Qty_Per_Shift);
  PARAMETER(DB1.Scheduling_Position_Grade);
  PARAMETER(DB1.Sold_100_Percent_Frozen);
  PARAMETER(DB1.Maximum_Shifts);
  PARAMETER(DB1.Value_Added_Sts);
  PARAMETER(DB1.Label_Type);
  PARAMETER(DB1.Item_TF_Exempt_Code);
  PARAMETER(DB1.Item_TF_Classification);
  PARAMETER(DB1.Default_Workcenter);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time_1);
   PARAMETER(DB1.User_Id_1);
   PARAMETER(DB1.Job_Name_1);
   PARAMETER(DB1.Job_Date_1);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   //?USER: Processing after Data update

   //?E3313 JJH 08/27/14 - Create Item Default Extension
   //?R13981 DN 10/26/18 - Update Spanish Desc in Item Default Extsn.
   //?418 ISE 08/21/20 - Update Manufacturer code in Item Default Extsn.
   //?R17040 DN 02/23/21 - Update IDE Pallet Tiers & Blocks.
   //?DO2642 DN 06/01/22 - Update Spanish Desc 2 in Item Default Extsn.
   // Call program Rtv/Crt Itm Dflt Ext  XF.
   CALL PROGRAM(Rtv/Crt Itm Dflt Ext  XF) ('PBO6XFR');
   PARAMETER(DB1.Item_Code);
   PARAMETER(PAR.IDE_Forecast_in_DP);
   PARAMETER(PAR.IDE_Pallet_Tiers);
   PARAMETER(PAR.IDE_Pallet_Blocks);
   PARAMETER(PAR.Spanish_Description);
   PARAMETER(PAR.Spanish_Description_Line2);
   PARAMETER(PAR.IDE_Manufacturer_Nbr);
   PARAMETER(JOB.*PROGRAM);

  }

  EXECUTE FUNCTION(Cpy Item Code         RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1739375;
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Item_Code_USR);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(CRT Item/Add to AvlGrp CR) TYPE(CRTOBJ) FILE(CABZREP)          AC1120696;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Item_Code_USR);
   PARAMETER(DB1.Description_Line_One);
   PARAMETER(DB1.Description_Line_Two);
   PARAMETER(DB1.Item_Label_Line_1);
   PARAMETER(DB1.Item_Label_Line_2);
   PARAMETER(DB1.Item_Label_Line_3);
   PARAMETER(DB1.Item_Label_Line_4);
   PARAMETER(DB1.UOM_Primary);
   PARAMETER(DB1.Conversion_Factor_1);
   PARAMETER(DB1.Operation_Factor_1);
   PARAMETER(DB1.UOM_Second);
   PARAMETER(DB1.Conversion_Factor_2);
   PARAMETER(DB1.Operation_Factor_2);
   PARAMETER(DB1.UOM_Third);
   PARAMETER(DB1.UOM_Pricing);
   PARAMETER(DB1.Unit_Weight);
   PARAMETER(DB1.Quality_Level);
   PARAMETER(DB1.Item_Level);
   PARAMETER(DB1.Production_Date_Control);
   PARAMETER(DB1.Catch_Weight_Status);
   PARAMETER(DB1.Minimum_Weight_Per_Case);
   PARAMETER(DB1.Maximum_Weight_Per_Case);
   PARAMETER(DB1.Number_Cases_On_A_Pallet);
   PARAMETER(DB1.Vendor_Item_Default);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(DB1.Default_Commod_Mark_basis);
   PARAMETER(DB1.Transportation_Temp);
   PARAMETER(DB1.Item_Type_Code);
   PARAMETER(DB1.Package_Type_Code);
   PARAMETER(DB1.Maximum_Audit_Value);
   PARAMETER(DB1.Minimum_Audit_Value);
   PARAMETER(DB1.Market_Overage);
   PARAMETER(DB1.Standard_Overage_Underage);
   PARAMETER(DB1.Commodity_Price_Group);
   PARAMETER(DB1.Item_Pricing_Operation);
   PARAMETER(DB1.Item_Pricing_Constant);
   PARAMETER(DB1.Default_Warehouse);
   PARAMETER(DB1.Price_Method_Default);
   PARAMETER(DB1.Fresh_Chilling_Time);
   PARAMETER(DB1.Base_Conv_Loss_Item);
   PARAMETER(DB1.Variety_Rendered_Cut);
   PARAMETER(DB1.Frozen_Make_to_Order_Sts);
   PARAMETER(DB1.Credit_Item_Status);
   PARAMETER(DB1.Std_Weight_Head_Var_Ren);
   PARAMETER(DB1.Pieces_Per_Head);
   PARAMETER(DB1.Department_Code);
   PARAMETER(DB1.Group_for_Packaging);
   PARAMETER(DB1.Item_Category_Number_1);
   PARAMETER(DB1.Made_to_Order_Code);
   PARAMETER(DB1.Item_Category_Number_2);
   PARAMETER(DB1.Transportation_Equip_Type);
   PARAMETER(DB1.Item_Category_Number_3);
   PARAMETER(DB1.Item_Category_Code_3);
   PARAMETER(DB1.Item_Category_Number_4);
   PARAMETER(DB1.GL_Sub_Code);
   PARAMETER(DB1.Item_Category_Number_5);
   PARAMETER(DB1.Item_Structure_Sub_Class);
   PARAMETER(DB1.Item_Category_Number_6);
   PARAMETER(DB1.Item_Primal_Sched_Report);
   PARAMETER(DB1.Item_Category_Number_7);
   PARAMETER(DB1.Item_Exc_Man_Prc_Excp);
   PARAMETER(DB1.Item_Category_Number_8);
   PARAMETER(DB1.Item_Prod_Sched_Send_PFS);
   PARAMETER(DB1.Item_Category_Number_9);
   PARAMETER(DB1.Item_Category_Code_9);
   PARAMETER(DB1.Item_Category_Number_10);
   PARAMETER(DB1.Item_Category_Code_10);
   PARAMETER(DB1.Pallet_Tare_Weight);
   PARAMETER(DB1.Misc_Tare_Weight);
   PARAMETER(DB1.Production_Lead_Days);
   PARAMETER(DB1.Packaging_Code);
   PARAMETER(DB1.Item_Market_Code);
   PARAMETER(DB1.TF_Co_Ownership_Sts);
   PARAMETER(DB1.Agrimetrics_group);
   PARAMETER(DB1.Agrimetrics_pack);
   PARAMETER(DB1.Agrimetrics_grade);
   PARAMETER(DB1.PA_Base_Avail_Rpt_Include);
   PARAMETER(DB1.PM_Pounds_per_Hour);
   PARAMETER(DB1.Item_Frt_Overage_Prc_UOM);
   PARAMETER(DB1.Packages_per_case);
   PARAMETER(DB1.Use_Freeze_Sell_By_Days);
   PARAMETER(DB1.PM_Batch_Size);
   PARAMETER(DB1.Package_Level_size);
   PARAMETER(DB1.Partial_Item_Code);
   PARAMETER(PAR.WIP_Item_Code);
   PARAMETER(DB1.WIP_Reject_Code);
   PARAMETER(DB1.Std_Costing_Unit_Weight);
   PARAMETER(DB1.FP_Std_Green_Weight);
   PARAMETER(DB1.PM_Std_LBS_Man_Per_Hour);
   PARAMETER(DB1.PM_Raw_Meat_LBS_Per_Hour);
   PARAMETER(DB1.PM_Formula_LBS_Per_Hour);
   PARAMETER(DB1.PM_Finished_LBS_Per_Hour);
   PARAMETER(DB1.SH_Unused_was_broker);
   PARAMETER(DB1.PM_Raw_Material_Type_Code);
   PARAMETER(DB1.PM_Line_Number);
   PARAMETER(DB1.Seconds_Item);
   PARAMETER(DB1.Print_on_Realization_Rpt);
   PARAMETER(DB1.Unit_Weight_Change_Sts);
   PARAMETER(DB1.Piece_Count_Item);
   PARAMETER(DB1.Pieces_Per_Bag);
   PARAMETER(DB1.Bags_Per_Unit);
   PARAMETER(DB1.Export_Domestic);
   PARAMETER(DB1.Print_On_Schedule);
   PARAMETER(DB1.Fresh_Inv_Allocation_Seq);
   PARAMETER(DB1.Fresh_Sched_As_Ordered);
   PARAMETER(DB1.Frozen_Inv_Allocation_Seq);
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(DB1.Item_Meat_Cost_Group_Code);
   PARAMETER(DB1.UPC_Code_2);
   PARAMETER(DB1.Item_Target_Price);
   PARAMETER(DB1.Minimum_Piece_Weight);
   PARAMETER(DB1.Maximum_Piece_Weight);
   PARAMETER(DB1.Seaboard_Equivalent_Item);
   PARAMETER(DB1.Production_Qty_Per_Shift);
   PARAMETER(DB1.Scheduling_Position_Grade);
   PARAMETER(DB1.Sold_100_Percent_Frozen);
   PARAMETER(DB1.Maximum_Shifts);
   PARAMETER(DB1.Value_Added_Sts);
   PARAMETER(DB1.Label_Type);
   PARAMETER(DB1.Item_TF_Exempt_Code);
   PARAMETER(DB1.Item_TF_Classification);
   PARAMETER(DB1.Default_Workcenter);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER(DB1.Record_Status);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    //?USER: Processing after Data update

    CASE;

    // IF DB1.Item Type Code is Finished Goods
    IF DB1.Item_Type_Code = 'FG';

    EXECUTE FUNCTION(CRT Co Item/Avail Grp  CR) TYPE(CRTOBJ) FILE(PDKLREP)          AC1380738;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER('ALL');
    PARAMETER(*ZERO);
    PARAMETER(DB1.EDI_Status_1);
    PARAMETER(DB1.EDI_Status_2);
    PARAMETER(DB1.EDI_Status_3);
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
     PARAMETER(DB1.Record_Status);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Record Status = CND.Active
      PAR.Record_Status = 'A';

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    // IF DB1.Item Type Code is Work in Process
    IF DB1.Item_Type_Code = 'WP';

    EXECUTE FUNCTION(CRT Co Item/Avail Grp  CR) TYPE(CRTOBJ) FILE(PDKLREP)          AC1380738;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER('WIP');
    PARAMETER(*ZERO);
    PARAMETER(DB1.EDI_Status_1);
    PARAMETER(DB1.EDI_Status_2);
    PARAMETER(DB1.EDI_Status_3);
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
     PARAMETER(DB1.Record_Status);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Record Status = CND.Active
      PAR.Record_Status = 'A';

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

    //?06/17/09 PKD FP1054 Create Company Item EXT & Upd PLAN PRODUCTION STS
    // Call program Rtv Plant Co/Org      XF.
    CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
    PARAMETER(DB1.Company_Number);
    PARAMETER(LCL.Plant_Company_Sts);
    PARAMETER(LCL.Company_Organization);

    //?LCL. Plant Production Sts
    CASE;

    // IF LCL.Company Organization is Not Seaboard
    IF LCL.Company_Organization = 'D'/'H';

    // OR DB1.Item Type Code is Not Finished Good
    OR DB1.Item_Type_Code <> 'FG';

    // LCL.Plan Production Sts = CND.No
    LCL.Plan_Production_Sts = 'N';

    // LCL.Allocation Method = CND.Forward - ASAP
    LCL.Allocation_Method = 'F';

    //?LCL. Plant Production Sts
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.Plan Production Sts = CND.Yes
    LCL.Plan_Production_Sts = *BLANK;

    ENDIF;

    EXECUTE FUNCTION(Crt Company Item Ext  CR) TYPE(CRTOBJ) FILE(PMFDREP)           AC1926035;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(LCL.Produce_on_Sunday_Sts);
    PARAMETER(LCL.Produce_on_Monday_Sts);
    PARAMETER(LCL.Produce_on_Tuesday_Sts);
    PARAMETER(LCL.Produce_on_Wednesday_Sts);
    PARAMETER(LCL.Produce_on_Thursday_Sts);
    PARAMETER(LCL.Produce_on_Friday_Sts);
    PARAMETER(LCL.Produce_on_Saturday_Sts);
    PARAMETER(LCL.Plan_Production_Sts);
    PARAMETER(LCL.Allocation_Method);
    PARAMETER(LCL.Adjust_Credit_Pieces);
    PARAMETER(LCL.CIE_Use_Age_Days_over_Max);
    PARAMETER(LCL.CIE_MPR_Report_to_USDA);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(DB1.Record_Status);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
     PARAMETER(DB1.Record_Status);
     PARAMETER(DB1.Create_Date);
     PARAMETER(DB1.Create_Time);
     PARAMETER(DB1.Create_User);
     PARAMETER(DB1.Create_Program);
     PARAMETER(DB1.Change_Date);
     PARAMETER(DB1.Change_Time);
     PARAMETER(DB1.Change_User);
     PARAMETER(DB1.Change_Program);
     {
      //?Execute internal function

      //?*** Set RECORD STATUS field. ***
      // PAR.Record Status = CND.Active
      PAR.Record_Status = 'A';

      //?*** Set CREATE fields. ***
      // PAR.Create Date = JOB.*Job date
      PAR.Create_Date = JOB.*Job_date;

      // PAR.Create Time = JOB.*Job time
      PAR.Create_Time = JOB.*Job_time;

      // PAR.Create User = JOB.*USER
      PAR.Create_User = JOB.*USER;

      // PAR.Create Program = JOB.*PROGRAM
      PAR.Create_Program = JOB.*PROGRAM;

      //?*** Set CHANGE fields. ***
      // PAR.Change Date = CON.*ZERO
      PAR.Change_Date = *ZERO;

      // PAR.Change Time = CON.*ZERO
      PAR.Change_Time = *ZERO;

      // PAR.Change User = CON.*BLANK
      PAR.Change_User = *BLANK;

      // PAR.Change Program = CON.*BLANK
      PAR.Change_Program = *BLANK;

     }

    }

    // Send information message - 'Company &1 for Item &2 was created'
    MESSAGE(USR3361 *INFO);
    MSGPARM(DB1.Company_Number);
    MSGPARM(DB1.Item_Code);

   }

   EXECUTE FUNCTION(Cpy Item Balance      RT) TYPE(RTVOBJ) FILE(CAB0REP)           AC1739374;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(PAR.Item_Code_USR);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(Crt Item Balance       CR) TYPE(CRTOBJ) FILE(CAB0REP)          AC1119976;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Item_Code_USR);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Unit_Cost_Per_Pound);
    PARAMETER(DB1.Last_Cost);
    PARAMETER(DB1.Cost_per_Primary_UOM);
    PARAMETER(DB1.Cost_per_Pricing_UOM);
    PARAMETER(DB1.Revaluation_Cost);
    PARAMETER(DB1.Revaluation_Eff_Date);
    PARAMETER(DB1.Revaluation_Cost_Type);
    PARAMETER(DB1.Last_Revaluation_Cost);
    PARAMETER(DB1.Last_Revaluation_Eff_Date);
    PARAMETER(DB1.On_Hand_Weight_Summary);
    PARAMETER(DB1.On_Hand_UOM1_Summary);
    PARAMETER(DB1.On_Hand_UOM2_Summary);
    PARAMETER(DB1.On_Hand_UOM3_Summary);
    PARAMETER(DB1.Quantity_In_Chill);
    PARAMETER(DB1.Weight_In_Chill);
    PARAMETER(DB1.Quantity_Scheduled_UOM1);
    PARAMETER(DB1.Quantity_on_Sales_Order);
    PARAMETER(DB1.Quantity_on_Purch_Order);
    PARAMETER(DB1.Quantity_on_Transfer);
    PARAMETER(DB1.Quantity_Avail_To_Sell);
    PARAMETER(DB1.Cycle_Count_Code_IB);
    PARAMETER(DB1.Date_of_Last_Order);
    PARAMETER(DB1.Date_of_Last_Shipment);
    PARAMETER(DB1.Value_of_On_Hand_Inventor);
    PARAMETER(DB1.Inventory_Planning_Type);
    PARAMETER(DB1.Safety_Allowance_Percent);
    PARAMETER(DB1.Safety_Allowance_Quantity);
    PARAMETER(DB1.Stock_Out_Date);
    PARAMETER(DB1.Buyer_Code);
    PARAMETER(DB1.Lead_Time_Last);
    PARAMETER(DB1.Lead_Time_Date_Last);
    PARAMETER(DB1.Lead_Time_Next_to_Last);
    PARAMETER(DB1.Lead_Time_Date_Next_Lst);
    PARAMETER(DB1.Lead_Time_Exception);
    PARAMETER(DB1.Usage_Qty_per_Cycle);
    PARAMETER(DB1.Usage_Weight_per_Cycle);
    PARAMETER(DB1.Inventory_Management);
    PARAMETER(DB1.Minimum_Quantity);
    PARAMETER(DB1.Maximum_Quantity);
    PARAMETER(DB1.Last_Physical_Count);
    PARAMETER(DB1.Requisition_Mode);
    PARAMETER(DB1.Cost_Update_Pending);
    PARAMETER(DB1.Post_GL_Status);
    PARAMETER(DB1.Vendor_Item_Whse_Default);
    PARAMETER(DB1.Item_Structure_Class_Code);
    PARAMETER(DB1.Item_Structure_Group_Code);
    PARAMETER(DB1.Item_Structure_Type_Code);
    PARAMETER(DB1.EDI_Status_1);
    PARAMETER(DB1.EDI_Status_2);
    PARAMETER(DB1.EDI_Status_3);
    PARAMETER(DB1.Record_Status);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

   }

  }

  EXECUTE FUNCTION(Cpy Bill of Materials  RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1361733;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Item_Code_USR);
  PARAMETER(LCL.BOM_Type_Usr);
  {
   //?USER: Process Data record

   CASE;

   // IF PAR.BOM Type Usr EQ DB1.BOM Type
   IF PAR.BOM_Type_Usr = DB1.BOM_Type;

   // OR PAR.BOM Type Usr EQ WRK.BLANK
   OR PAR.BOM_Type_Usr = WRK.BLANK;

   //?Delete bom type = supplies, if that's the only type being copied
   CASE;

   // IF PAR.BOM Type Usr is Supplies
   IF PAR.BOM_Type_Usr = 'S';

   EXECUTE FUNCTION(RTV/DLT for Copy      RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1604169;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Item_Code_Detail);
   {
    //?USER: Process Data record

    CASE;

    // IF DB1.BOM Type is Supplies
    IF DB1.BOM_Type = 'S';

    EXECUTE FUNCTION(DLT Item BOM           DL) TYPE(DLTOBJ) FILE(PDIOREP)          AC1261543;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Component_Item_Code);
    ENDIF;

   }

   ENDIF;

   //?If item code and component code are equal then
   //?create a record with the item code and the component = par item
   //?other wise create record with par item and db1 component
   CASE;

   // IF DB1.Item Code EQ DB1.Component Item Code
   IF DB1.Item_Code = DB1.Component_Item_Code;

   EXECUTE FUNCTION(CRT Item BOM           CR) TYPE(CRTOBJ) FILE(PDIOREP)          AC1261541;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Item_Code_Detail);
   PARAMETER(PAR.Item_Code_Detail);
   PARAMETER(DB1.BOM_Type);
   PARAMETER(DB1.Sales_Yield);
   PARAMETER(DB1.Production_Yield);
   PARAMETER(DB1.Packaging_Quantity);
   PARAMETER(DB1.UOM_Primary_Dft);
   PARAMETER(DB1.Upd_Standard_Production);
   PARAMETER(DB1.Consume_Priority);
   PARAMETER(DB1.Consume_Priority_Percent);
   PARAMETER(DB1.BOM_Pumped_Percent);
   PARAMETER(DB1.BOM_Meat_Cost_ConsumedPCT);
   PARAMETER(DB1.BOM_Off_Line_Yield_Pct);
   PARAMETER(DB1.BOM_Multi_RM_Option);
   PARAMETER(DB1.BOM_Group_Prod_Yield);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER(DB1.Record_Status);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?DLY029 RMC 06/06/07 Crt New item bom for existing item/companies
   EXECUTE FUNCTION(Rtv BOM - Copy funct  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1827243;
   PARAMETER(PAR.Item_Code_Detail);
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Item_Code_Detail);
   PARAMETER(DB1.BOM_Type);
   PARAMETER(DB1.Sales_Yield);
   PARAMETER(DB1.Production_Yield);
   PARAMETER(DB1.Packaging_Quantity);
   PARAMETER(DB1.UOM_Primary_Dft);
   PARAMETER(DB1.Upd_Standard_Production);
   PARAMETER(DB1.Consume_Priority);
   PARAMETER(DB1.Consume_Priority_Percent);
   PARAMETER(DB1.BOM_Pumped_Percent);
   PARAMETER(DB1.BOM_Meat_Cost_ConsumedPCT);
   PARAMETER(DB1.BOM_Off_Line_Yield_Pct);
   PARAMETER(DB1.BOM_Multi_RM_Option);
   PARAMETER(DB1.BOM_Group_Prod_Yield);
   PARAMETER(DB1.Record_Status);
   {
    //?USER: Process Data record

    CASE;

    // IF DB1.Company Number NE PAR.Company Number
    IF DB1.Company_Number <> PAR.Company_Number;

    EXECUTE FUNCTION(Rtv Plant Co Status   RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1761084;
    PARAMETER(DB1.Company_Number);
    PARAMETER(WRK.Plant_Company_Sts);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF WRK.Plant Company Sts is Plant Company
    IF WRK.Plant_Company_Sts = 'P';

    EXECUTE FUNCTION(CRT Item BOM           CR) TYPE(CRTOBJ) FILE(PDIOREP)          AC1261541;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Component_Item_Code);
    PARAMETER(PAR.BOM_Type);
    PARAMETER(PAR.Sales_Yield);
    PARAMETER(PAR.Production_Yield);
    PARAMETER(PAR.Packaging_Quantity);
    PARAMETER(PAR.UOM_Primary_Dft);
    PARAMETER(PAR.Upd_Standard_Production);
    PARAMETER(PAR.Consume_Priority);
    PARAMETER(PAR.Consume_Priority_Percent);
    PARAMETER(PAR.BOM_Pumped_Percent);
    PARAMETER(PAR.BOM_Meat_Cost_ConsumedPCT);
    PARAMETER(PAR.BOM_Off_Line_Yield_Pct);
    PARAMETER(PAR.BOM_Multi_RM_Option);
    PARAMETER(PAR.BOM_Group_Prod_Yield);
    PARAMETER(DB1.EDI_Status_1);
    PARAMETER(DB1.EDI_Status_2);
    PARAMETER(DB1.EDI_Status_3);
    PARAMETER(DB1.Record_Status);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
     PARAMETER(DB1.Record_Status);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Record Status = CND.Active
      PAR.Record_Status = 'A';

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

    ENDIF;

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(CRT Item BOM           CR) TYPE(CRTOBJ) FILE(PDIOREP)          AC1261541;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Item_Code_Detail);
   PARAMETER(DB1.Component_Item_Code);
   PARAMETER(DB1.BOM_Type);
   PARAMETER(DB1.Sales_Yield);
   PARAMETER(DB1.Production_Yield);
   PARAMETER(DB1.Packaging_Quantity);
   PARAMETER(DB1.UOM_Primary_Dft);
   PARAMETER(DB1.Upd_Standard_Production);
   PARAMETER(DB1.Consume_Priority);
   PARAMETER(DB1.Consume_Priority_Percent);
   PARAMETER(DB1.BOM_Pumped_Percent);
   PARAMETER(DB1.BOM_Meat_Cost_ConsumedPCT);
   PARAMETER(DB1.BOM_Off_Line_Yield_Pct);
   PARAMETER(DB1.BOM_Multi_RM_Option);
   PARAMETER(DB1.BOM_Group_Prod_Yield);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER(DB1.Record_Status);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?DLY029 RMC 06/06/07 Crt New item bom for existing item/companies
   EXECUTE FUNCTION(Rtv BOM - Copy funct  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1827243;
   PARAMETER(PAR.Item_Code_Detail);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Component_Item_Code);
   PARAMETER(DB1.BOM_Type);
   PARAMETER(DB1.Sales_Yield);
   PARAMETER(DB1.Production_Yield);
   PARAMETER(DB1.Packaging_Quantity);
   PARAMETER(DB1.UOM_Primary_Dft);
   PARAMETER(DB1.Upd_Standard_Production);
   PARAMETER(DB1.Consume_Priority);
   PARAMETER(DB1.Consume_Priority_Percent);
   PARAMETER(DB1.BOM_Pumped_Percent);
   PARAMETER(DB1.BOM_Meat_Cost_ConsumedPCT);
   PARAMETER(DB1.BOM_Off_Line_Yield_Pct);
   PARAMETER(DB1.BOM_Multi_RM_Option);
   PARAMETER(DB1.BOM_Group_Prod_Yield);
   PARAMETER(DB1.Record_Status);
   {
    //?USER: Process Data record

    CASE;

    // IF DB1.Company Number NE PAR.Company Number
    IF DB1.Company_Number <> PAR.Company_Number;

    EXECUTE FUNCTION(Rtv Plant Co Status   RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1761084;
    PARAMETER(DB1.Company_Number);
    PARAMETER(WRK.Plant_Company_Sts);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF WRK.Plant Company Sts is Plant Company
    IF WRK.Plant_Company_Sts = 'P';

    EXECUTE FUNCTION(CRT Item BOM           CR) TYPE(CRTOBJ) FILE(PDIOREP)          AC1261541;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Component_Item_Code);
    PARAMETER(PAR.BOM_Type);
    PARAMETER(PAR.Sales_Yield);
    PARAMETER(PAR.Production_Yield);
    PARAMETER(PAR.Packaging_Quantity);
    PARAMETER(PAR.UOM_Primary_Dft);
    PARAMETER(PAR.Upd_Standard_Production);
    PARAMETER(PAR.Consume_Priority);
    PARAMETER(PAR.Consume_Priority_Percent);
    PARAMETER(PAR.BOM_Pumped_Percent);
    PARAMETER(PAR.BOM_Meat_Cost_ConsumedPCT);
    PARAMETER(PAR.BOM_Off_Line_Yield_Pct);
    PARAMETER(PAR.BOM_Multi_RM_Option);
    PARAMETER(PAR.BOM_Group_Prod_Yield);
    PARAMETER(DB1.EDI_Status_1);
    PARAMETER(DB1.EDI_Status_2);
    PARAMETER(DB1.EDI_Status_3);
    PARAMETER(DB1.Record_Status);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
     PARAMETER(DB1.Record_Status);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Record Status = CND.Active
      PAR.Record_Status = 'A';

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

    ENDIF;

   }

   ENDIF;

   ENDIF;

  }

 }

 ENDIF;

 ENDIF;

}


