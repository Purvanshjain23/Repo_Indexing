// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDTJPVR
// ?Date: 14.08.2025 Time: 03:29:50
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.PRT Printer Device = CON.*BLANK
PAR.PRT_Printer_Device = *BLANK;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.Company Number Pass   USR = PAR.Company Number
PAR.Company_Number_Pass_USR = PAR.Company_Number;

//?Set description
CASE;

// IF PAR.Invoice/Pre-Invoice is Invoice
IF PAR.Invoice_Pre_Invoice = 'I';

// PAR.PRT Description = CON.Print Invoices
PAR.PRT_Description = 'Print Invoices';

//?Set description
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.PRT Description = CON.Print Pre-Invoice Reg.
PAR.PRT_Description = 'Print Pre-Invoice Reg.';

ENDIF;

//?** Save par value of yes/no flag       1/25/2006 LJB
CASE;

// IF PAR.@Yes/No Flag is No
IF PAR.AAYes_No_Flag = 'N';

// WRK.Yes/No Selection      USR = CND.No
WRK.Yes_No_Selection_USR = 'N';

//?** Save par value of yes/no flag       1/25/2006 LJB
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Yes/No Selection      USR = CND.Yes
WRK.Yes_No_Selection_USR = 'Y';

ENDIF;

//?***** Change Log
DO;

//?05/23/16 RMC E4119 remove live with tpm check
//?*****
//?E4057 JJH 06/03/15 - Modify program to allow un-invoice processing
//?  of Credit and Debit Memos.
//?*****
//?** 01/25/2006 LJB
//?** Added a 2nd set of Print Pre-Invoice fields and made them
//?**  output only to simulate the 1st set under special
//?**  circumstances. This was needed because the first set are
//?**  already conditioned.
//?** If in-coming Yes/No flag is not *NO, or if the Invoice Flag
//?**  is "I" then don't display the 2nd set of Print Pre-Invoice
//?**  fields. If Invoice Flag = "P" and Yes/No flag is "Y" then
//?**  don't display the 2nd set of Print Pre-Invoice fields.
//?**  If Invoice Flag = "P" and Yes/No flag is "N" then
//?**  display the 2nd set of Print Pre-Invoice fields with "N" and
//?**  "Y" respectively and output only. Also, fill in the parms
//?**  that are passed to the print program so reports print properly.
//?*****
//?** 02/10/2006 LJB
//?** If the Yes/No Flag is "N", then the parms to pass to the
//?**   printer program should be "N" and "Y". Load the 2nd set
//?**   of parms into the 1st set of parms and pass to the print pgm.
//?*****
ENDDO;

//?USER: Load screen

CASE;

// IF PAR.Process Cust Types Usr is All Customers
IF PAR.Process_Cust_Types_Usr = 'BT';

// DTL.Customer Type Desc Usr = CON.*All Customers
DTL.Customer_Type_Desc_Usr = *All Customers;

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Customer Type Desc Usr = Condition name of PAR.Process Cust Types Usr
DTL.Customer_Type_Desc_Usr = RTVCND(PAR.Process_Cust_Types_Usr);

ENDIF;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(PAR.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Company Number = PAR.Company Number
DTL.Company_Number = PAR.Company_Number;

// DTL.Company Number CDE = PAR.Company Number
DTL.Company_Number_CDE = PAR.Company_Number;

//?hide selection to print pre-invc reg/except report, unless changed below
// PAR.USR Display field = CND.no
PAR.USR_Display_field = 'N';

//?** Fill in the 2nd set of Print Pre-Invoice fields. These won't
//?** display if the Yes/No flag is Yes.       1/25/2006 LJB
//?** Do not print the register, Do print the exception report
// DTL.Print (Yes/No) USR = CND.No
DTL.Print_Yes_No_USR = 'N';

// DTL.USR Print Detail = CND.yes
DTL.USR_Print_Detail = 'Y';

//?Fill Program Descriptions
CASE;

// IF PAR.Invoice/Pre-Invoice is Invoice
IF PAR.Invoice_Pre_Invoice = 'I';

//?This isn't used to print memos; for memos, only Pre-Invoice reg is used
// DTL.USR Program Description = CON.*** Print Invoices ***
DTL.USR_Program_Description = '*** Print Invoices ***';

// DTL.Description = CON.Sales Orders Only
DTL.Description = 'Sales Orders Only';

// DTL.@Credit/Debit Memo Text = CON.Actual Ship
DTL.@Credit_Debit_Memo_Text = 'Actual Ship';

//?** Set the display conditioning flag
// WRK.Yes/No Selection      USR = CND.Yes
WRK.Yes_No_Selection_USR = 'Y';

//?Fill Program Descriptions
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.USR Program Description = CON.*** Pre-Invoice Register
DTL.USR_Program_Description = '*** Pre-Invoice Register';

// DTL.USR Program Description = CONCAT(DTL.USR Program Description,CON.***,CON.1)
DTL.USR_Program_Description = DTL.USR_Program_Description + '***' (1);

//?** Only change the display flag if the Yes/No flag is Y,O,or ' '
CASE;

// IF PAR.@Yes/No Flag is Not *No
IF PAR.AAYes_No_Flag = *BLANK/'O'/'Y';

// PAR.USR Display field = CND.yes
PAR.USR_Display_field = 'Y';

ENDIF;

CASE;

// IF PAR.Billing Activity Type is Invoice
IF PAR.Billing_Activity_Type = '1';

// DTL.Description = CON.   Sales Orders Only
DTL.Description = 'Sales Orders Only';

// DTL.@Credit/Debit Memo Text = CON.Actual Ship
DTL.@Credit_Debit_Memo_Text = 'Actual Ship';

// IF PAR.Billing Activity Type is Credit Memo
IF PAR.Billing_Activity_Type = '2';

// DTL.Description = CON.   Credit Memos Only
DTL.Description = 'Credit Memos Only';

// DTL.@Credit/Debit Memo Text = CON.Transaction
DTL.@Credit_Debit_Memo_Text = 'Transaction';

// IF PAR.Billing Activity Type is Debit Memo
IF PAR.Billing_Activity_Type = '3';

// DTL.Description = CON.    Debit Memos Only
DTL.Description = 'Debit Memos Only';

// DTL.@Credit/Debit Memo Text = CON.Transaction
DTL.@Credit_Debit_Memo_Text = 'Transaction';

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Description = CON.Credit/Debit Memos Only
DTL.Description = 'Credit/Debit Memos Only';

// DTL.@Credit/Debit Memo Text = CON.Transaction
DTL.@Credit_Debit_Memo_Text = 'Transaction';

ENDIF;

ENDIF;

//?Default print pre-invoice register to Yes; will print this for memos, too
// DTL.USR Print Pre-Invc Reg = CND.yes
DTL.USR_Print_Pre_Invc_Reg = 'Y';

//?Don't print Pre-Invoice Exception if can't select it
CASE;

// IF PAR.USR Display field is yes
IF PAR.USR_Display_field = 'Y';

// DTL.USR Print Pre-Invc Except = CND.yes
DTL.USR_Print_Pre_Invc_Except = 'Y';

//?Don't print Pre-Invoice Exception if can't select it
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.USR Print Pre-Invc Except = CND.no
DTL.USR_Print_Pre_Invc_Except = 'N';

ENDIF;

//?** If the Yes/No Flag is "N", then the parms to pass to the
//?**   printer program should be "N" and "Y". Load the 2nd set
//?**   of parms into the parms to be passed.      02/10/2006 LJB
//?** Default display parms for Yes/No Flag = N        1/26/2006 LJB
CASE;

// IF PAR.@Yes/No Flag is No
IF PAR.AAYes_No_Flag = 'N';

// DTL.USR Print Pre-Invc Reg = DTL.Print (Yes/No) USR
DTL.USR_Print_Pre_Invc_Reg = DTL.Print_Yes_No_USR;

// DTL.USR Print Pre-Invc Except = DTL.USR Print Detail
DTL.USR_Print_Pre_Invc_Except = DTL.USR_Print_Detail;

ENDIF;

//?USER: Validate fields

// DTL.Company Number = DTL.Company Number CDE
DTL.Company_Number = DTL.Company_Number_CDE;

// DTL.Order Number = DTL.USR Next Order Number
DTL.Order_Number = DTL.USR_Next_Order_Number;

//?Process F4 on Company Number
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Company Number CDE
IF PGM.*Cursor_field = DTL.Company_Number_CDE;

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// Call program SEL Company by Number  SR.
CALL PROGRAM(SEL Company by Number  SR) ('CAAJSRR');
PARAMETER(DTL.Company_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

ENDIF;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Order Number
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR Next Order Number
AND PGM.*Cursor_field = DTL.USR_Next_Order_Number;

CASE;

// IF PAR.Invoice/Pre-Invoice is Invoice
IF PAR.Invoice_Pre_Invoice = 'I';

// Call program Zzz Ord Avail to Invc  SR.
CALL PROGRAM(Zzz Ord Avail to Invc  SR) ('PDDSSRR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program SEL Ord Avail PreInvRegSR.
CALL PROGRAM(SEL Ord Avail PreInvRegSR) ('PDDUSRR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(PAR.Billing_Activity_Type);

ENDIF;

// DTL.USR Next Order Number = DTL.Order Number
DTL.USR_Next_Order_Number = DTL.Order_Number;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Load ID
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Load ID
AND PGM.*Cursor_field = DTL.Load_ID;

CASE;

// IF PAR.Billing Activity Type is Credit or Debit Memo
IF PAR.Billing_Activity_Type = '2'/'3';

// OR PAR.Billing Activity Type EQ WRK.BLANK
OR PAR.Billing_Activity_Type = WRK.BLANK;

// Send error message - 'Select Load not Allowed for memo processing.'
ERROR(USR2316);
MSGPARM(DTL.Load_ID);

// IF PAR.Invoice/Pre-Invoice is Invoice
IF PAR.Invoice_Pre_Invoice = 'I';

// Call program SEL Shipped Load       SR.
CALL PROGRAM(SEL Shipped Load       SR) ('PDKWSRR');
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Company_Number_CDE);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program SEL Locked/Shippd Load SR.
CALL PROGRAM(SEL Locked/Shippd Load SR) ('PDJHSRR');
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Company_Number_CDE);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?report select required
CASE;

// IF DTL.USR Print Pre-Invc Reg is no
IF DTL.USR_Print_Pre_Invc_Reg = 'N';

// AND DTL.USR Print Pre-Invc Except is no
AND DTL.USR_Print_Pre_Invc_Except = 'N';

// Send error message - 'Report selection is required. Select one with a 'Y'.'
ERROR(USR2107);

ENDIF;

//?USER: Validate relations

// DTL.Name = CON.*BLANK
DTL.Name = *BLANK;

//?Validate company if entered
CASE;

// IF DTL.Company Number is not equal to zero
IF DTL.Company_Number_CDE <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Company Number not found'
ERROR(USR0163);

ENDIF;

ENDIF;

//?Only 1 of Load, Order or, Date can be entered
CASE;

// IF DTL.Load ID is GT Zero
IF DTL.Load_ID > *ZERO;

CASE;

// IF DTL.Order Number is Not equal to zeros
IF DTL.Order_Number <> *ZERO;

// OR DTL.Requested Ship Date is entered
OR DTL.Requested_Ship_Date <> *ZERO;

// Send error message - 'You may print by Load, by Order, or by Date. Select only one.'
ERROR(USR2052);

ENDIF;

//?Only 1 of Load, Order or, Date can be entered
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Order Number is Not equal to zeros
IF DTL.Order_Number <> *ZERO;

CASE;

// IF DTL.Load ID is GT Zero
IF DTL.Load_ID > *ZERO;

// OR DTL.Requested Ship Date is entered
OR DTL.Requested_Ship_Date <> *ZERO;

// Send error message - 'You may print by Load, by Order, or by Date. Select only one.'
ERROR(USR2052);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Requested Ship Date is entered
IF DTL.Requested_Ship_Date <> *ZERO;

CASE;

// IF DTL.Order Number is Not equal to zeros
IF DTL.Order_Number <> *ZERO;

// OR DTL.Load ID is GT Zero
OR DTL.Load_ID > *ZERO;

// Send error message - 'You may print by Load, by Order, or by Date. Select only one.'
ERROR(USR2052);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Validate Order Number
CASE;

// IF DTL.Order Number is Not equal to zeros
IF DTL.Order_Number <> *ZERO;

CASE;

// IF PAR.Invoice/Pre-Invoice is Invoice
IF PAR.Invoice_Pre_Invoice = 'I';

EXECUTE FUNCTION(RTV Ord Avail for Inv  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1379465;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 CASE;

 // IF DB1.Billing Activity Type is Not Invoice
 IF DB1.Billing_Activity_Type = '2'/'3'/'4';

 // OR DB1.Price Status is Unpriced
 OR DB1.Price_Status = 'U';

 // OR DB1.Order Type Print Status is Not Yes
 OR DB1.Order_Type_Print_Status = *BLANK/'N';

 // OR DB1.Header Status is Not confirmed
 OR DB1.Header_Status = 'L'/'A'/'X'/'C'/'E'/'H';

 // OR DB1.Actual Shipped Date is not entered
 OR DB1.Actual_Shipped_Date = *ZERO;

 // OR DB1.Event Code is Invoiced thru History
 OR DB1.Event_Code >= '06';
 AND DB1.Event_Code <= '07';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Load Plan Order is yes
 IF DB1.Load_Plan_Order = 'Y';

 EXECUTE FUNCTION(RTV Load Status        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1297640;
 PARAMETER(DB1.Load_ID);
 PARAMETER(WRK.Load_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.Load Status is Locked or Shipped
 IF WRK.Load_Status = 'L'/'S';

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 ENDIF;

 ENDIF;

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Ord Avail PreInvRegRT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1380431;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(PAR.Billing_Activity_Type);
{
 //?USER: Processing if Data record not found

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 //?USER: Process Data record

 //?changed edit criteria 1/31/96 - select only type being processed
 //?changed edit criteria 10/2/96 - don't chk Price Audit for memos
 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 CASE;

 // IF PAR.Billing Activity Type is Invoice
 IF PAR.Billing_Activity_Type = '1';

 //?Validate sales orders
 CASE;

 // IF DB1.Billing Activity Type is Invoice
 IF DB1.Billing_Activity_Type = '1';

 // AND DB1.Header Status is Confirmed
 AND DB1.Header_Status = 'R';

 // AND DB1.Event Code is 04 Shipped
 AND DB1.Event_Code = '04';

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 ENDIF;

 // IF PAR.Billing Activity Type EQ WRK.BLANK
 IF PAR.Billing_Activity_Type = WRK.BLANK;

 //?(select credit AND debit memos)
 //?Validate Credit/Debit memos
 CASE;

 // IF DB1.Billing Activity Type is Credit or Debit Memo
 IF DB1.Billing_Activity_Type = '2'/'3';

 // AND DB1.Header Status is Available
 AND DB1.Header_Status = 'A';

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?(select credit OR debit memos)
 //?Validate Credit or Debit memos
 CASE;

 // IF DB1.Billing Activity Type EQ PAR.Billing Activity Type
 IF DB1.Billing_Activity_Type = PAR.Billing_Activity_Type;

 // AND DB1.Header Status is Available
 AND DB1.Header_Status = 'A';

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 ENDIF;

 ENDIF;

}


ENDIF;

CASE;

// IF PGM.*Record selected is *NO
IF PGM.*Record_selected = 'N';

// Send error message - 'Order not Avail for Invoicing'
ERROR(USR2210);
MSGPARM(DTL.Order_Number);

ENDIF;

ENDIF;

//?Validate Load Number
CASE;

// IF DTL.Load ID NE WRK.ZERO
IF DTL.Load_ID <> WRK.ZERO;

//?05/23/16 RMC E4119 remove live with tpm check
EXECUTE FUNCTION(RTV Load Status        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1297640;
PARAMETER(DTL.Load_ID);
PARAMETER(WRK.Load_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

}


//?MEMO PROCESSING
CASE;

// IF PAR.Billing Activity Type is Credit or Debit Memo
IF PAR.Billing_Activity_Type = '2'/'3';

// OR PAR.Billing Activity Type EQ WRK.BLANK
OR PAR.Billing_Activity_Type = WRK.BLANK;

// Send error message - 'Select Load not Allowed for memo processing.'
ERROR(USR2316);
MSGPARM(DTL.Load_ID);

//?MEMO PROCESSING
// IF PAR.Invoice/Pre-Invoice is Invoice
IF PAR.Invoice_Pre_Invoice = 'I';

//?Load must be shipped
CASE;

// IF WRK.Load Status is Shipped
IF WRK.Load_Status = 'S';

//?Load must be shipped
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Load was not found or load is not shipped.'
ERROR(USR2315);
MSGPARM(DTL.Load_ID);

ENDIF;

//?MEMO PROCESSING
// IF *OTHERWISE
IF *OTHERWISE;

//?Load must be locked or shipped
CASE;

// IF WRK.Load Status is Locked or Shipped
IF WRK.Load_Status = 'L'/'S';

//?Load must be locked or shipped
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Load was not found or load is not locked/shipped.'
ERROR(USR1329);
MSGPARM(DTL.Load_ID);

ENDIF;

ENDIF;

ENDIF;

//?USER: User defined action

MOVE *ALL (To: PAR From: DTL);

//?Submit job for print
// PAR.Company Number Pass   USR = DTL.Company Number
PAR.Company_Number_Pass_USR = DTL.Company_Number_CDE;

// PAR.Order Number 1  PASS  USR = DTL.Load ID
PAR.Order_Number_1_PASS_USR = DTL.Load_ID;

// PAR.Order Number 2  PASS  USR = DTL.Order Number
PAR.Order_Number_2_PASS_USR = DTL.Order_Number;

// PAR.Thru Date Pass        USR = DTL.Requested Ship Date
PAR.Thru_Date_Pass_USR = DTL.Requested_Ship_Date;

// WRK.USR Active Flag = CND.Record Not Found
WRK.USR_Active_Flag = 'N';

//?Set CL program which prints
CASE;

// IF PAR.Invoice/Pre-Invoice is Invoice
IF PAR.Invoice_Pre_Invoice = 'I';

// PAR.PRT Description = CON.Invoice
PAR.PRT_Description = 'Invoice';

// PAR.Program name USR = CON.PDR4PCLP
PAR.Program_name_USR = 'PDR4PCLP';

//?Set CL program which prints
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.PRT Description = CON.Pre-Invoice
PAR.PRT_Description = 'Pre-Invoice';

// PAR.Program name USR = CON.PDULPCLP
PAR.Program_name_USR = 'PDULPCLP';

ENDIF;

// LCL.A/R Customer Num Pass USR = CON.*ZERO
LCL.A_R_Customer_Num_Pass_USR = *ZERO;

//?** Note: Program Name$ USR becomes JOBNME when it is received.
// LCL.Job Name CDE = JOB.*JOB
LCL.Job_Name_CDE = JOB.*JOB;

// LCL.Job Number USR = CVTVAR(JOB.*Job number)
LCL.Job_Number_USR = CVTVAR(JOB.*Job_number);

// Call program PRT Invc/Pre-Invc Reg  UP.
CALL PROGRAM(PRT Invc/Pre-Invc Reg  UP) ('PDTLUPR');
PARAMETER(PGM.*Return_code);
PARAMETER(PAR.Program_name_USR);
PARAMETER(PAR.Program_name_USR);
PARAMETER('OMS');
PARAMETER(PAR.Program_name_USR);
PARAMETER(LCL.Job_Number_USR);
PARAMETER(PAR.Billing_Activity_Type);
PARAMETER(PAR.PRT_Description);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Thru_Date_Pass_USR);
PARAMETER(PAR.Order_Number_1_PASS_USR);
PARAMETER(PAR.Order_Number_2_PASS_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(WRK.USR_Active_Flag);
PARAMETER(DTL.USR_Print_Pre_Invc_Reg);
PARAMETER(DTL.USR_Print_Pre_Invc_Except);
PARAMETER(PAR.Invoice_Pre_Invoice);
PARAMETER(LCL.A_R_Customer_Num_Pass_USR);
PARAMETER(PAR.Process_Cust_Types_Usr);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// Execute function SET Off Indics 99,35,36US.
EXECUTE FUNCTION(SET Off Indics 99,35,36US) TYPE(EXCUSRSRC) ('PDN7UFR');
{
 C                     SETOF                     99    SETOFF INDIC
 C                     SETOF                     35    SETOFF INDIC
 C                     SETOF                     36    SETOFF INDIC
}


ENDIF;

