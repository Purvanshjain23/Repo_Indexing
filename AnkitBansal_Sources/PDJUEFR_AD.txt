// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDJUEFR
// ?Date: 14.08.2025 Time: 03:34:56
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('I/C');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(Rtv Allow Multi-Whs   RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1512192;
PARAMETER(JOB.*USER);
PARAMETER(PAR.Allow_Multi_Warehouse);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// WRK.First time flag 2     USR = CND.Yes
WRK.First_time_flag_2_USR = 'Y';

// WRK.Record Created        USR = CND.No
WRK.Record_Created_USR = 'N';

//?***** Change Log and Comments
DO;

//?** 02/18/2009 LJB FP1127
//?** Remove the date restriction and allow any date to be entered
ENDDO;

//?USER: Initialize subfile header

//?First Time
CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

// CTL.Warehouse Code = PAR.Warehouse Code
CTL.Warehouse_Code = PAR.Warehouse_Code;

SET CURSOR;

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

ENDIF;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


//?CALC: Subfile control function fields

EXECUTE FUNCTION(Item Desc DRV) TYPE(DRVFLD)                                    AC1505592;
PARAMETER(CTL.Item_Desc_DRV);
PARAMETER(CTL.Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Desc_DRV);
 PARAMETER(WRK.Description_Line_Two);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Validate subfile control

//?Sel:  Item Code
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Item Code
IF PGM.*Cursor_field = CTL.Item_Code;

// Call program Sel Item Balance       SL.
CALL PROGRAM(Sel Item Balance       SL) ('ICOLSRR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(WRK.Cycle_Count_Code_IB);

ENDIF;

ENDIF;

//?Val:  Item Code
CASE;

// IF CTL.Item Code is Not Entered
IF CTL.Item_Code = *ZERO;

// Send error message - 'Item is required'
ERROR(USR2716);
MSGPARM(CTL.Item_Code);

//?Val:  Item Code
// IF CTL.Item Code is Entered
IF CTL.Item_Code <> *ZERO;

EXECUTE FUNCTION(Val Item Bal Exist    RT) TYPE(RTVOBJ) FILE(CAB0REP)           AC1428561;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// Send error message - 'Item Balance not found.'
ERROR(USR0328);
MSGPARM(CTL.Company_Number);
MSGPARM(CTL.Item_Code);
MSGPARM(CTL.Warehouse_Code);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Unit Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1298772;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(LCL.ILL_Unit_Weight);
PARAMETER(LCL.Quality_Level);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

ENDIF;

//?Val:  Production Date
CASE;

// IF CTL.Production Date EQ WRK.ZERO
IF CTL.Production_Date = WRK.ZERO;

// Send error message - 'Receive Date is required.'
ERROR(USR2702);
MSGPARM(CTL.Production_Date);

//?Val:  Production Date
//?Val:  Lot Number
// IF CTL.Lot Number EQ WRK.ZERO
IF CTL.Lot_Number = WRK.ZERO;

// Send error message - 'Lot Number is required.'
ERROR(USR2763);
MSGPARM(CTL.Lot_Number);

ENDIF;

//?USER: Validate subfile record fields

//?New Record
CASE;

// IF RCD.Location Code NE WRK.BLANK
IF RCD.Location_Code <> WRK.BLANK;

// RCD.Item Code = CTL.Item Code
RCD.Item_Code = CTL.Item_Code;

// RCD.Company Number = CTL.Company Number
RCD.Company_Number = CTL.Company_Number;

// RCD.Warehouse Code = CTL.Warehouse Code
RCD.Warehouse_Code = CTL.Warehouse_Code;

// RCD.Production Date = CTL.Production Date
RCD.Production_Date = CTL.Production_Date;

// RCD.Lot Number = CTL.Lot Number
RCD.Lot_Number = CTL.Lot_Number;

// RCD.Item Code = CTL.Item Code
RCD.Item_Code = CTL.Item_Code;

// RCD.ILL Status = CND.Available
RCD.ILL_Status = 'A';

CASE;

// IF RCD.Item Code is Pancreas
IF RCD.Item_Code = 93210;

// RCD.Location Level = CON.1
RCD.Location_Level = 1;

ENDIF;

EXECUTE FUNCTION(Val Item Exists        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1323881;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


//?Validate Item Code
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Item is not found'
ERROR(USR0461);
MSGPARM(CTL.Item_Code);

//?Validate Item Code
// IF *OTHERWISE
IF *OTHERWISE;

//?Create Item Balance Detail.
CASE;

// IF WRK.Record Created        USR is No
IF WRK.Record_Created_USR = 'N';

EXECUTE FUNCTION(VAL Item Bal Dtl Exist RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1477900;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Production_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Create Item Balance Detail record if one does not exist.
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(PAR.Item_Structure_Class_Code);
PARAMETER(PAR.Item_Structure_Group_Code);
PARAMETER(PAR.Item_Structure_Type_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Chilling Time     IF) TYPE(EXCINTFUN)                      AC1430022;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(CTL.Warehouse_Code);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Chill Time        RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1304403;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Fresh_Chilling_Time);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Whs Typ/FZNCHLTME IF) TYPE(EXCINTFUN)                      AC1423925;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.Warehouse_Type);
 PARAMETER(PAR.Fresh_Chilling_Time);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Warehouse_Type);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.Warehouse Type is Frozen
  IF PAR.Warehouse_Type = 'FZ';

  EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
  PARAMETER(PAR.Company_Number);
  PARAMETER('FZNCHLTME');
  PARAMETER(PAR.System_Value_Numeric);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.Fresh Chilling Time = PAR.System Value Numeric
  PAR.Fresh_Chilling_Time = PAR.System_Value_Numeric;

  ENDIF;

 }

}


// PAR.Chill Date  USR = CTL.Production Date + PAR.Fresh Chilling Time *DAYS
PAR.Chill_Date_USR = DATEINCR(CTL.Production_Date PAR.Fresh_Chilling_Time 'DY' 1111111             +
'NONE' 'N' 1);

EXECUTE FUNCTION(RTV Next/Eq Prod Date  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1455575;
PARAMETER(CTL.Company_Number);
PARAMETER(PAR.Chill_Date_USR);
PARAMETER(PAR.Label_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Production Day Status is yes
 IF DB1.Production_Day_Status = 'Y';

 // PAR.Production Date = DB1.Post to G/L Date
 PAR.Production_Date = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(Crt Item Bal. Detail   CR) TYPE(CRTOBJ) FILE(CAB1REP)          AC1120962;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('N');
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Label_Date);
PARAMETER(PAR.Item_Structure_Class_Code);
PARAMETER(PAR.Item_Structure_Group_Code);
PARAMETER(PAR.Item_Structure_Type_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER('A');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program RTV System Date/Time   UP.
 CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
 PARAMETER(DB1.Job_Date);
 PARAMETER(DB1.Job_Time);

}


ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Val Location Level
CASE;

// IF RCD.Location Level is 0 through 5
IF RCD.Location_Level >= 0;
AND RCD.Location_Level <= 5;

//?Val Location Level
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Level must be between 0 and 5.'
ERROR(USR3135);
MSGPARM(RCD.Location_Level);

ENDIF;

//?Val Hold Reason
CASE;

// IF RCD.ILL Status is Hold
IF RCD.ILL_Status = 'H';

// Send error message - 'Status Reason Code is required.'
ERROR(USR2672);
MSGPARM(RCD.Inv_Hold_Reason_Code);

ENDIF;

//?USER: Validate subfile record relations

//?Calculate Available Ship Date
CASE;

// IF RCD.Production Date is entered
IF RCD.Production_Date <> *ZERO;

// AND RCD.Location Code NE WRK.BLANK
AND RCD.Location_Code <> WRK.BLANK;

// AND RCD.ILL Avail Ship Date EQ WRK.ZERO
AND RCD.ILL_Avail_Ship_Date = WRK.ZERO;

EXECUTE FUNCTION(Clc Loc Avail Shp Dte IF) TYPE(EXCINTFUN)                      AC1510130;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Location_Code);
PARAMETER(RCD.ILL_Avail_Ship_Date);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Loc Type          RT) TYPE(RTVOBJ) FILE(PDL2REP)           AC1510129;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Location_Code);
 PARAMETER(PAR.WLT_Type_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Chill Time        RT) TYPE(RTVOBJ) FILE(PDL3REP)           AC1510134;
 PARAMETER(PAR.WLT_Type_Code);
 PARAMETER(PAR.WLT_Type_Chill_Time);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.ILL Avail Ship Date = PAR.Production Date + PAR.WLT Type Chill Time *DAYS
 PAR.ILL_Avail_Ship_Date = DATEINCR(PAR.Production_Date PAR.WLT_Type_Chill_Time 'DY'
 1111111 'NONE' 'N' 1);

}


ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Item Loc/Crt Trn  CR) TYPE(CRTOBJ) FILE(PDL5CPP)           AC1513774;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(RCD.Lot_Number);
PARAMETER(RCD.Location_Code);
PARAMETER(RCD.Location_Level);
PARAMETER(RCD.ILL_Item_Qty_On_Hand);
PARAMETER(LCL.ILL_Unit_Weight);
PARAMETER(RCD.ILL_Co_Packer_Lot_Num);
PARAMETER(RCD.ILL_Item_Wgt_On_Hand);
PARAMETER(RCD.ILL_Unused_Qty_3);
PARAMETER(RCD.ILL_Unused_Wgt_3);
PARAMETER(RCD.ILL_Avail_Ship_Date);
PARAMETER(CTL.ILL_Unused_Date_1);
PARAMETER(RCD.ILL_Unused_Date_2);
PARAMETER(RCD.ILL_Unused_Nbr_1);
PARAMETER(RCD.ILL_Customer_Code);
PARAMETER(RCD.ILL_Status);
PARAMETER(RCD.ILL_Unused_Sts_1);
PARAMETER(RCD.ILL_Unused_Sts_2);
PARAMETER(RCD.ILL_Unused_Sts_3);
PARAMETER(RCD.Inv_Hold_Reason_Code);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Job_Time);
PARAMETER(RCD.User_Id);
PARAMETER(RCD.Job_Name);
PARAMETER(RCD.Job_Date);
{
 //?USER: Processing before Data update

 //?***** Change log and comments
 DO;

 //?** 06/17/2009 PKD FP1054 Needed to create the Item Balance Detail
 //?** for the Scheduled Delivery Date for the SA1 Auto Locate.
 //?**
 //?** 03/04/2009 LJB FP1127
 //?** The lot number will contain the last 5 digits of the Load ID,
 //?** although this is optional and so could change
 //?** Production date is now the Scheduled Delivery Date
 //?*****
 //?** 02/18/2009 LJB FP1127
 //?** For External warehouses that are lot controlled and not
 //?** Carlisle controlled, the lot number will contain the last
 //?** 5 digits of the order number
 //?** Production date is "Job Date + 1 Day"
 ENDDO;

 EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 EXECUTE FUNCTION(VAL Item BalDtl Exist RT) TYPE(RTVOBJ) FILE(CAB1REP)           AC1943487;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(LCL.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Create Item Balance Detail record if one does not exist.
 CASE;

 // IF LCL.Record Found USR is Record Not Found
 IF LCL.Record_Found_USR = 'N';

 EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.Item_Structure_Class_Code);
 PARAMETER(LCL.Item_Structure_Group_Code);
 PARAMETER(LCL.Item_Structure_Type_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.Label Date = DB1.Production Date
 LCL.Label_Date = DB1.Production_Date;

 EXECUTE FUNCTION(Crt Item Bal. Detail   CR) TYPE(CRTOBJ) FILE(CAB1REP)          AC1120962;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('N');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Label_Date);
 PARAMETER(LCL.Item_Structure_Class_Code);
 PARAMETER(LCL.Item_Structure_Group_Code);
 PARAMETER(LCL.Item_Structure_Type_Code);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER('A');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program RTV System Date/Time   UP.
  CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
  PARAMETER(DB1.Job_Date);
  PARAMETER(DB1.Job_Time);

 }

 ENDIF;

 //?USER: Processing if Data record already exists

 EXECUTE FUNCTION(Upd Qty On-Hand       RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC1514476;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Lot_Number);
 PARAMETER(PAR.Location_Code);
 PARAMETER(PAR.Location_Level);
 PARAMETER(PAR.ILL_Item_Qty_On_Hand);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Clc Loc Avail Shp Dte IF) TYPE(EXCINTFUN)                      AC1510130;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.ILL_Avail_Ship_Date);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Loc Type          RT) TYPE(RTVOBJ) FILE(PDL2REP)           AC1510129;
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.WLT_Type_Code);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Chill Time        RT) TYPE(RTVOBJ) FILE(PDL3REP)           AC1510134;
   PARAMETER(PAR.WLT_Type_Code);
   PARAMETER(PAR.WLT_Type_Chill_Time);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // PAR.ILL Avail Ship Date = PAR.Production Date + PAR.WLT Type Chill Time *DAYS
   PAR.ILL_Avail_Ship_Date = DATEINCR(PAR.Production_Date PAR.WLT_Type_Chill_Time 'DY'
   1111111 'NONE' 'N' 1);

  }

  EXECUTE FUNCTION(RTV Unit Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1298772;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.ILL_Unit_Weight);
  PARAMETER(LCL.Quality_Level);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Crt Item Loc          CR) TYPE(CRTOBJ) FILE(PDL5CPP)           AC1505603;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Lot_Number);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.Location_Level);
  PARAMETER(PAR.Quantity_Loc_Trans_USR);
  PARAMETER(PAR.ILL_Unit_Weight);
  PARAMETER(PAR.ILL_Co_Packer_Lot_Num);
  PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
  PARAMETER(PAR.ILL_Unused_Qty_3);
  PARAMETER(PAR.ILL_Unused_Wgt_3);
  PARAMETER(PAR.ILL_Avail_Ship_Date);
  PARAMETER(PAR.ILL_Unused_Date_1);
  PARAMETER(PAR.ILL_Unused_Date_2);
  PARAMETER(PAR.ILL_Unused_Nbr_1);
  PARAMETER(PAR.ILL_Customer_Code);
  PARAMETER('A');
  PARAMETER(PAR.ILL_Unused_Sts_1);
  PARAMETER(PAR.ILL_Unused_Sts_2);
  PARAMETER(PAR.ILL_Unused_Sts_3);
  PARAMETER(PAR.Inv_Hold_Reason_Code);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // PAR.ILL Item Qty On-Hand = DB1.ILL Item Qty On-Hand + PAR.Quantity Loc Trans USR
  PAR.ILL_Item_Qty_On_Hand = DB1.ILL_Item_Qty_On_Hand + PAR.Quantity_Loc_Trans_USR;

  CASE;

  // IF PAR.ILL Item Qty On-Hand is GT Zero
  IF PAR.ILL_Item_Qty_On_Hand > *ZERO;

  EXECUTE FUNCTION(Chg Quantity On-Hand  CH) TYPE(CHGOBJ) FILE(PDL5CPP)           AC1512891;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Lot_Number);
  PARAMETER(DB1.Location_Code);
  PARAMETER(DB1.Location_Level);
  PARAMETER(PAR.ILL_Item_Qty_On_Hand);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Del Item Location     DL) TYPE(DLTOBJ) FILE(PDL5CPP)           AC1517026;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Lot_Number);
  PARAMETER(DB1.Location_Code);
  PARAMETER(DB1.Location_Level);
  EXECUTE FUNCTION(Del Item Balance Dtl  RT) TYPE(RTVOBJ) FILE(CAB1REP)           AC1544110;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Date);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Quantity on Hand - U/M1 is Equal to zero
   IF DB1.Quantity_on_Hand_UOM1 = *ZERO;

   EXECUTE FUNCTION(Del Item Balance Dtl  DL) TYPE(DLTOBJ) FILE(CAB1REP)           AC1544111;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Production_Date);
   ENDIF;

  }

  ENDIF;

 }

 EXECUTE FUNCTION(Crt Item Lot/Loc Trns IF) TYPE(EXCINTFUN)                      AC1510270;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER('R');
 PARAMETER(JOB.*Job_date);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.ILL_Item_Qty_On_Hand);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Lot_Number);
 PARAMETER(PAR.Location_Code);
 PARAMETER(PAR.Location_Level);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('P');
 PARAMETER(WRK.LTT_Unused_Sts_1);
 PARAMETER(WRK.LTT_Unused_Sts_2);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Seq #        RT) TYPE(RTVOBJ) FILE(PDL7CPP)           AC1510279;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.LLT_Transaction_Type);
  PARAMETER(PAR.LLT_Transaction_Date);
  PARAMETER(PAR.LLT_Sequence_Number);
  {
   //?USER: Processing if Data record not found

   // PAR.LLT Sequence # = CON.1
   PAR.LLT_Sequence_Number = 1;

   //?USER: Process Data record

   // PAR.LLT Sequence # = DB1.LLT Sequence # + CON.1
   PAR.LLT_Sequence_Number = DB1.LLT_Sequence_Number + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Item Lot/Loc Trns CR) TYPE(CRTOBJ) FILE(PDL7CPP)           AC1505285;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.LLT_Transaction_Type);
  PARAMETER(PAR.LLT_Transaction_Date);
  PARAMETER(PAR.LLT_Sequence_Number);
  PARAMETER(PAR.LLT_Production_Date);
  PARAMETER(PAR.LLT_Transaction_Qty);
  PARAMETER(PAR.LLT_Transaction_Wgt);
  PARAMETER(PAR.LLT_Lot_Number);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.LLT_Location_Level);
  PARAMETER(PAR.Transfer_Warehouse_Code);
  PARAMETER(PAR.LLT_Transfer_Lot_Number);
  PARAMETER(PAR.Transfer_Location_Code);
  PARAMETER(PAR.LLT_Transfer_Loc_Level);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.LLT_Status);
  PARAMETER(PAR.LTT_Unused_Sts_1);
  PARAMETER(PAR.LTT_Unused_Sts_2);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 //?USER: Processing after Data update

 EXECUTE FUNCTION(Crt Item Lot/Loc Trns IF) TYPE(EXCINTFUN)                      AC1510270;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER('R');
 PARAMETER(JOB.*Job_date);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.ILL_Item_Qty_On_Hand);
 PARAMETER(PAR.ILL_Unit_Weight);
 PARAMETER(PAR.Lot_Number);
 PARAMETER(PAR.Location_Code);
 PARAMETER(PAR.Location_Level);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('P');
 PARAMETER(WRK.LTT_Unused_Sts_1);
 PARAMETER(WRK.LTT_Unused_Sts_2);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Seq #        RT) TYPE(RTVOBJ) FILE(PDL7CPP)           AC1510279;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.LLT_Transaction_Type);
  PARAMETER(PAR.LLT_Transaction_Date);
  PARAMETER(PAR.LLT_Sequence_Number);
  {
   //?USER: Processing if Data record not found

   // PAR.LLT Sequence # = CON.1
   PAR.LLT_Sequence_Number = 1;

   //?USER: Process Data record

   // PAR.LLT Sequence # = DB1.LLT Sequence # + CON.1
   PAR.LLT_Sequence_Number = DB1.LLT_Sequence_Number + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Item Lot/Loc Trns CR) TYPE(CRTOBJ) FILE(PDL7CPP)           AC1505285;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.LLT_Transaction_Type);
  PARAMETER(PAR.LLT_Transaction_Date);
  PARAMETER(PAR.LLT_Sequence_Number);
  PARAMETER(PAR.LLT_Production_Date);
  PARAMETER(PAR.LLT_Transaction_Qty);
  PARAMETER(PAR.LLT_Transaction_Wgt);
  PARAMETER(PAR.LLT_Lot_Number);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.LLT_Location_Level);
  PARAMETER(PAR.Transfer_Warehouse_Code);
  PARAMETER(PAR.LLT_Transfer_Lot_Number);
  PARAMETER(PAR.Transfer_Location_Code);
  PARAMETER(PAR.LLT_Transfer_Loc_Level);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.LLT_Status);
  PARAMETER(PAR.LTT_Unused_Sts_1);
  PARAMETER(PAR.LTT_Unused_Sts_2);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

}


//?USER: Process command keys

//?F11=Display Lot/Location Transactions
CASE;

// IF CTL.*CMD key is CF11
IF CTL.*CMD_key = '11';

// LCL.*Initial call = CND.*YES
LCL.*Initial_call = 'Y';

// Call program Dsp Item Lot Locs     DF.
CALL PROGRAM(Dsp Item Lot Locs     DF) ('PDH2DFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(LCL.*Initial_call);

ENDIF;

//?F10=Next Item
CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

// CTL.Item Code = CON.*ZERO
CTL.Item_Code = *ZERO;

// CTL.Lot Number = CON.*ZERO
CTL.Lot_Number = *ZERO;

// WRK.First time flag 2     USR = CND.Yes
WRK.First_time_flag_2_USR = 'Y';

// WRK.Record Created        USR = CND.No
WRK.Record_Created_USR = 'N';

SET CURSOR;

// Execute function Clr Program Message Q  US.
EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
{
 * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
 C                     CALL 'Y2CLMSC'
 C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
 C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
 * RESET FIRST MESSAGE ONLY FLAG.
 C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

