// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNHWPFR
// ?Date: 14.08.2025 Time: 12:05:52
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('P/S');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


//?Modification History
//?FP1054 RMC 4/27/09 new report
//?USER: Record selection processing

//?Print on Schedule selection
CASE;

// IF PAR.Print On Schedule is yes
IF PAR.Print_On_Schedule = 'Y';

//?If item is marked as print on schedule "N"o then don't display
CASE;

// IF DB1.PS Print On Schedule is yes
IF DB1.PS_Print_On_Schedule = 'Y';

//?If item is marked as print on schedule "N"o then don't display
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Print on Schedule selection
// IF PAR.Print On Schedule is no
IF PAR.Print_On_Schedule = 'N';

//?If item is marked do not print on schedule select N only
CASE;

// IF DB1.PS Print On Schedule is no
IF DB1.PS_Print_On_Schedule = 'N';

//?If item is marked do not print on schedule select N only
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Print on Schedule selection
// IF *OTHERWISE
IF *OTHERWISE;

//?par print on schedule is no value,  so do not check
ENDIF;

// Call program Rtv Plan Prod Sts     XF.
CALL PROGRAM(Rtv Plan Prod Sts     XF) ('PNHKXFR');
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(LCL.Plan_Production_Sts);

CASE;

// IF LCL.Plan Production Sts is No
IF LCL.Plan_Production_Sts = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process top of page

MOVE *ALL (To: TOP From: PAR);

EXECUTE FUNCTION(Warehouse Desc DRV) TYPE(DRVFLD)                               AC1532477;
PARAMETER(TOP_Warehouse_Desc_DRV);
PARAMETER(DB1.PS_Production_Warehouse);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

}


CASE;

// IF PAR.Print On Schedule is blank
IF PAR.Print_On_Schedule = *BLANK;

// TOP.Condition Desc. 1  USR = CON.ALL
TOP_Condition_Desc_1_USR = 'ALL';

// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Condition Desc. 1  USR = Condition name of TOP.Print On Schedule
TOP_Condition_Desc_1_USR = RTVCND(TOP_Print_On_Schedule);

ENDIF;

CASE;

// IF PAR.Status Flag 1  Y/N is No
IF PAR.Status_Flag_1_Y_N = 'N';

// TOP.Text USR 20 = CON.AM Sched
TOP_Text_USR_20 = 'AM Sched';

// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Text USR 20 = CON.Prior Day
TOP_Text_USR_20 = 'Prior Day';

ENDIF;

//?USER: Print required level headings

// SUPPRESSED PRINT Production Type header format

// SUPPRESSED PRINT Production Date header format

// SUPPRESSED PRINT PS Production Warehouse header format

// SUPPRESSED PRINT Item Code header format

// SUPPRESSED PRINT Warehouse Code header format

//?USER: On print of detail format

EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(CUR.Description_Line_One);
PARAMETER(CUR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.Item_Structure_Class_Code);
PARAMETER(WRK.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(WRK.Item_Type_Code);
PARAMETER(WRK.Default_Warehouse);
PARAMETER(WRK.Fresh_Chilling_Time);
PARAMETER(WRK.Base_Conv_Loss_Item);
PARAMETER(WRK.Variety_Rendered_Cut);
PARAMETER(WRK.Credit_Item_Status);
PARAMETER(WRK.Std_Weight_Head_Var_Ren);
PARAMETER(WRK.Pieces_Per_Head);
PARAMETER(WRK.Department_Code);
PARAMETER(WRK.Group_for_Packaging);
PARAMETER(WRK.Seconds_Item);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(WRK.Export_Domestic);
PARAMETER(WRK.Print_On_Schedule);
PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
PARAMETER(WRK.Fresh_Sched_As_Ordered);
PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
PARAMETER(WRK.Primal_Group_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Weight Scheduled
CUR.PS_Weight_Sched_Prod = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )                   +
- DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

// Pieces Scheduled
CUR.PS_Pieces_Sched_Prod = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )                   +
- DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

//?Quantity Production
CASE;

// IF PAR.Piece Count Item is yes
IF PAR.Piece_Count_Item = 'Y';

// Quantity Production
CUR.Quantity_Scheduled_1_USR = CUR.PS_Pieces_Sched_Prod / ( PAR.Pieces_Per_Bag                     +
* PAR.Bags_Per_Unit );

//?Quantity Production
// IF *OTHERWISE
IF *OTHERWISE;

//?** If unit wt is zeros, set prod schedule to zeros    FP1235
CASE;

// IF PAR.Unit Weight is Not equal zero
IF PAR.Unit_Weight <> *ZERO;

// Quantity Production
CUR.Quantity_Scheduled_1_USR = CUR.PS_Weight_Sched_Prod / PAR.Unit_Weight;

//?** If unit wt is zeros, set prod schedule to zeros    FP1235
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Quantity Scheduled 1 USR = CON.*ZERO
CUR.Quantity_Scheduled_1_USR = *ZERO;

ENDIF;

ENDIF;

//?Retrieve AM Sched production for the day from the "X" rcd   OR
//?Retrieve PLANNED production for the day from the "P" rcd
CASE;

// IF PAR.Status Flag 1  Y/N is No
IF PAR.Status_Flag_1_Y_N = 'N';

EXECUTE FUNCTION(Rtv Pland Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1932826;
PARAMETER(CUR.Company_Number);
PARAMETER('X');
PARAMETER(CUR.Production_Date);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(LCL.PS_Avg_Piece_Wgt);
PARAMETER(LCL.Weight_Production_USR);
PARAMETER(LCL.Pieces_Production_USR);
PARAMETER(WRK.Fresh_Chilling_Time);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?Production = Standard + Prod Adj - Converted  - whse txfr
 //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
 CASE;

 // IF DB1.PS Lock Status is NOT LOCKED
 IF DB1.PS_Lock_Status = 'N';

 // Weight Production
 PAR.Weight_Production_USR = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
 - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

 // Pieces Production
 PAR.Pieces_Production_USR = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
 - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

 // Weight Available
 PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
 + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )                                     +
 - DB1.PS_Weight_Prod_Allocated;

 // Pieces Available
 PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
 + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )                                     +
 - DB1.PS_Pieces_Prod_Allocated;

 //?Weight Avail
 CASE;

 // IF PAR.ATS Weight Available USR is Less than zero
 IF PAR.ATS_Weight_Available_USR < *ZERO;

 // PAR.ATS Weight Available USR = CON.*ZERO
 PAR.ATS_Weight_Available_USR = *ZERO;

 // PAR.ATS Pieces Available USR = CON.*ZERO
 PAR.ATS_Pieces_Available_USR = *ZERO;

 ENDIF;

 // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
 PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

 ENDIF;

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Pland Production  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1932826;
PARAMETER(CUR.Company_Number);
PARAMETER('P');
PARAMETER(CUR.Production_Date);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(LCL.PS_Avg_Piece_Wgt);
PARAMETER(LCL.Weight_Production_USR);
PARAMETER(LCL.Pieces_Production_USR);
PARAMETER(WRK.Fresh_Chilling_Time);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?Production = Standard + Prod Adj - Converted  - whse txfr
 //?Prod Avail = Production + Ship Cut Adj + Ship Adj - Prod Alloc
 CASE;

 // IF DB1.PS Lock Status is NOT LOCKED
 IF DB1.PS_Lock_Status = 'N';

 // Weight Production
 PAR.Weight_Production_USR = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
 - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

 // Pieces Production
 PAR.Pieces_Production_USR = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
 - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

 // Weight Available
 PAR.ATS_Weight_Available_USR = ( ( PAR.Weight_Production_USR
 + PAR.PS_Weight_Ship_Cut_Adj ) + DB1.PS_Weight_Shipping_Adj )                                     +
 - DB1.PS_Weight_Prod_Allocated;

 // Pieces Available
 PAR.ATS_Pieces_Available_USR = ( ( PAR.Pieces_Production_USR
 + PAR.PS_Pieces_Ship_Cut_Adj ) + DB1.PS_Pieces_Shipping_Adj )                                     +
 - DB1.PS_Pieces_Prod_Allocated;

 //?Weight Avail
 CASE;

 // IF PAR.ATS Weight Available USR is Less than zero
 IF PAR.ATS_Weight_Available_USR < *ZERO;

 // PAR.ATS Weight Available USR = CON.*ZERO
 PAR.ATS_Weight_Available_USR = *ZERO;

 // PAR.ATS Pieces Available USR = CON.*ZERO
 PAR.ATS_Pieces_Available_USR = *ZERO;

 ENDIF;

 // PAR.PS Avg Piece Wgt = DB1.PS Avg Piece Wgt
 PAR.PS_Avg_Piece_Wgt = DB1.PS_Avg_Piece_Wgt;

 ENDIF;

}


ENDIF;

//?Quantity Production from PLANNED rcd
CASE;

// IF PAR.Piece Count Item is yes
IF PAR.Piece_Count_Item = 'Y';

// Quantity Production
CUR.Qty_Sched_To_Produce_USR = LCL.Pieces_Production_USR / ( PAR.Pieces_Per_Bag                    +
* PAR.Bags_Per_Unit );

//?Quantity Production from PLANNED rcd
// IF *OTHERWISE
IF *OTHERWISE;

//?** If unit wt is zeros, set prod schedule to zeros    FP1235
CASE;

// IF PAR.Unit Weight is Not equal zero
IF PAR.Unit_Weight <> *ZERO;

// Quantity Production
CUR.Qty_Sched_To_Produce_USR = LCL.Weight_Production_USR / PAR.Unit_Weight;

//?** If unit wt is zeros, set prod schedule to zeros    FP1235
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Qty Sched To Produce USR = CON.*ZERO
CUR.Qty_Sched_To_Produce_USR = *ZERO;

ENDIF;

ENDIF;

// CUR.Quantity 7.0 USR = CUR.Quantity Scheduled 1 USR - CUR.Qty Sched To Produce USR
CUR.Quantity_7_0_USR = CUR.Quantity_Scheduled_1_USR - CUR.Qty_Sched_To_Produce_USR;

CASE;

// IF PAR.Status Flag 10 Y/N is No
IF PAR.Status_Flag_10_Y_N = 'N';

//?If plan|Sched > 0
CASE;

// IF CUR.Qty Sched To Produce USR is Greater than Zero
IF CUR.Qty_Sched_To_Produce_USR > *ZERO;

// OR CUR.Quantity Scheduled 1 USR is Greater than Zero
OR CUR.Quantity_Scheduled_1_USR > *ZERO;

//?If plan|Sched > 0
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?If schedule var <> 0
CASE;

// IF CUR.Quantity 7.0 USR is NE Zero
IF CUR.Quantity_7_0_USR <> *ZERO;

//?If schedule var <> 0
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

ENDIF;

//?USER: Print required level totals

// SUPPRESSED PRINT Warehouse Code totals format

// SUPPRESSED PRINT Item Code totals format

// SUPPRESSED PRINT PS Production Warehouse totals format

// SUPPRESSED PRINT Production Date totals format

// SUPPRESSED PRINT Production Type totals format

