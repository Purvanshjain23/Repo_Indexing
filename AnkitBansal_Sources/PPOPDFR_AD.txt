// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPOPDFR
// ?Date: 14.08.2025 Time: 03:41:26
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.Application Code = CND.Inventory Management
PAR.Application_Code = 'I/C';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PGM.*Scan limit = CND.9999999
PGM.*Scan_limit = 9999999;

// PAR.ISC Week Ending Date = CND.eq 20991231
PAR.ISC_Week_Ending_Date = 20991231;

//?R9083 02/07/17 DN-Get Default Inventory Valuation Grouping.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.First time flag 2     USR = CND.Yes
PAR.First_time_flag_2_USR = 'Y';

EXECUTE FUNCTION(RTV Desc & Val Alpha  RT) TYPE(RTVOBJ) FILE(PDKMREP)           AC2131892;
PARAMETER(PAR.Company_Number);
PARAMETER('IVFGROUP');
PARAMETER(NLL.Description);
PARAMETER(LCL.ISC_Valuation_Grouping);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?R9083 02/09/17 DN-Added RST by ISC Valuation Grouping.
EXECUTE FUNCTION(Rtv Last Week in file RT) TYPE(RTVOBJ) FILE(PPBSCPP)           AC1742385;
PARAMETER(LCL.ISC_Valuation_Grouping);
PARAMETER(PAR.ISC_Week_Ending_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?Get the latest week ending date in the file
 // PAR.ISC Week Ending Date = DB1.ISC Week Ending Date
 PAR.ISC_Week_Ending_Date = DB1.ISC_Week_Ending_Date;

 QUIT;

}


//?USER: Initialize subfile control

CASE;

// IF CTL.ISC Week Ending Date is Not Entered
IF CTL.ISC_Week_Ending_Date = *ZERO;

// CTL.ISC Week Ending Date = PAR.ISC Week Ending Date
CTL.ISC_Week_Ending_Date = PAR.ISC_Week_Ending_Date;

// WRK.ISC Week Ending Date = PAR.ISC Week Ending Date
WRK.ISC_Week_Ending_Date = PAR.ISC_Week_Ending_Date;

ENDIF;

SET CURSOR;

CASE;

// IF PAR.First time flag 2     USR is Yes
IF PAR.First_time_flag_2_USR = 'Y';

// PAR.First time flag 2     USR = CND.No
PAR.First_time_flag_2_USR = 'N';

// CTL.ISC Warehouse Company = PAR.Company Number
CTL.ISC_Warehouse_Company = PAR.Company_Number;

// WRK.ISC Warehouse Company = PAR.Company Number
WRK.ISC_Warehouse_Company = PAR.Company_Number;

ENDIF;

//?R9083 02/07/17 DN-Set Inventory Valuation Grouping.
// LCL.ISC Warehouse Company = CTL.ISC Warehouse Company
LCL.ISC_Warehouse_Company = CTL.ISC_Warehouse_Company;

//?Default Grouping with User Company Default if Blanks.
CASE;

// IF LCL.ISC Warehouse Company is Equal to zero
IF LCL.ISC_Warehouse_Company = *ZERO;

CASE;

// IF CTL.ISC Warehouse Code is Blanks
IF CTL.ISC_Warehouse_Code = *BLANK;

// LCL.ISC Warehouse Company = PAR.Company Number
LCL.ISC_Warehouse_Company = PAR.Company_Number;

// IF *OTHERWISE
IF *OTHERWISE;

//?RMC S12531  get warehouses shipping company -- to get its grouping
EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
PARAMETER(CTL.ISC_Warehouse_Code);
PARAMETER(LCL.Shipping_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.ISC Warehouse Company = LCL.Shipping Company
LCL.ISC_Warehouse_Company = LCL.Shipping_Company;

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Desc & Val Alpha  RT) TYPE(RTVOBJ) FILE(PDKMREP)           AC2131892;
PARAMETER(LCL.ISC_Warehouse_Company);
PARAMETER('IVFGROUP');
PARAMETER(CTL.Inv_Valuation_Group_Desc);
PARAMETER(CTL.ISC_Valuation_Grouping);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize subfile record from DBF record

CASE;

// IF CTL.ISC Warehouse Company NE DB1.ISC Warehouse Company
IF CTL.ISC_Warehouse_Company <> DB1.ISC_Warehouse_Company;

// AND CTL.ISC Warehouse Company is not equal to zero
AND CTL.ISC_Warehouse_Company <> *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF CTL.ISC Week Ending Date NE DB1.ISC Week Ending Date
IF CTL.ISC_Week_Ending_Date <> DB1.ISC_Week_Ending_Date;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Sel Whse
CASE;

// IF CTL.ISC Warehouse Code is Warehouse Code not Blank
IF CTL.ISC_Warehouse_Code <> *BLANK;

CASE;

// IF CTL.ISC Warehouse Code NE DB1.ISC Warehouse Code
IF CTL.ISC_Warehouse_Code <> DB1.ISC_Warehouse_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?1ST TIME .. GET POST STS
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF CTL.ISC Post Warehouse Sts is *ALL values
IF CTL.ISC_Post_Warehouse_Sts = 'P'/'O'/'R';

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Condition Desc. 1  USR = Condition name of RCD.ISC Post Warehouse Sts
CTL.Condition_Desc_1_USR = RTVCND(RCD.ISC_Post_Warehouse_Sts);

// CTL.ISC Post Warehouse Sts = RCD.ISC Post Warehouse Sts
CTL.ISC_Post_Warehouse_Sts = RCD.ISC_Post_Warehouse_Sts;

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
PARAMETER(RCD.ISC_Item_Code);
PARAMETER(RCD.Description_Line_One);
PARAMETER(NLL.Description_Line_Two);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.ISC Week Ending Date = CTL.ISC Week Ending Date + CON.-7 *DAYS
LCL.ISC_Week_Ending_Date = DATEINCR(CTL.ISC_Week_Ending_Date '-7' 'DY' 1111111 'NONE'              +
'N' 1);

EXECUTE FUNCTION(Rtv Prior Week Whs PrcRt) TYPE(RTVOBJ) FILE(PPBSCPP)           AC1738771;
PARAMETER(LCL.ISC_Week_Ending_Date);
PARAMETER(RCD.ISC_Warehouse_Company);
PARAMETER(RCD.ISC_Warehouse_Code);
PARAMETER(RCD.ISC_Item_Code);
PARAMETER(LCL.ISC_Warehouse_Price_UOM);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// RCD.Price 3 USR  9.4 = LCL.ISC Warehouse Price /UOM
RCD.Price_3_USR_9_4 = LCL.ISC_Warehouse_Price_UOM;

//?R9083 02/04/17 DN-Added RST by IVF Valuation Grouping.
EXECUTE FUNCTION(Rtv Inv Value Method  RT) TYPE(RTVOBJ) FILE(PPBTCPP)           AC1738780;
PARAMETER(RCD.ISC_Valuation_Grouping);
PARAMETER(LCL.ISC_Week_Ending_Date);
PARAMETER(RCD.ISC_Item_Code);
PARAMETER(RCD.IVF_Inventory_Value_Mthd);
PARAMETER(LCL.IVF_Cur_Wk_Inv_Val_Prc_CW);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// RCD.Price 2 USR  9.4 = LCL.IVF Cur Wk Inv Val Prc/CW
RCD.Price_2_USR_9_4 = LCL.IVF_Cur_Wk_Inv_Val_Prc_CW;

//?Inv Value Method  (formula/market/sales)
CASE;

// IF RCD.IVF Inventory Value Mthd is *ALL values
IF RCD.IVF_Inventory_Value_Mthd = 'S'/'M'/'F';

//?Inv Value Method  (formula/market/sales)
// IF *OTHERWISE
IF *OTHERWISE;

//?Previous week's value method if this week's isnt entered yet.
//?R9083 02/04/17 DN-Added RST by IVF Valuation Grouping.
EXECUTE FUNCTION(Rtv Inv Value Method  RT) TYPE(RTVOBJ) FILE(PPBTCPP)           AC1738780;
PARAMETER(RCD.ISC_Valuation_Grouping);
PARAMETER(LCL.ISC_Week_Ending_Date);
PARAMETER(RCD.ISC_Item_Code);
PARAMETER(RCD.IVF_Inventory_Value_Mthd);
PARAMETER(WRK.IVF_Cur_Wk_Inv_Val_Prc_CW);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// RCD.Price 2 USR  9.4 = WRK.IVF Cur Wk Inv Val Prc/CW
RCD.Price_2_USR_9_4 = WRK.IVF_Cur_Wk_Inv_Val_Prc_CW;

ENDIF;

//?Whse price override flag default
CASE;

// IF RCD.ISC Warehouse Price Ovrrd is *ALL values
IF RCD.ISC_Warehouse_Price_Ovrrd = 'P'/'A'/'D';

// RCD.USR Warehouse Price Ovrrd = RCD.ISC Warehouse Price Ovrrd
RCD.USR_Warehouse_Price_Ovrrd = RCD.ISC_Warehouse_Price_Ovrrd;

CASE;

// IF RCD.USR Warehouse Price Ovrrd is Previous Week Value
IF RCD.USR_Warehouse_Price_Ovrrd = 'P';

// AND RCD.ISC Warehouse Price /UOM is Equal to Zero
AND RCD.ISC_Warehouse_Price_UOM = *ZERO;

//?move in last week's warehouse price
// RCD.Price 1 USR  9.4 = RCD.Price 3 USR  9.4
RCD.Price_1_USR_9_4 = RCD.Price_3_USR_9_4;

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Price 1 USR  9.4 = RCD.ISC Warehouse Price /UOM
RCD.Price_1_USR_9_4 = RCD.ISC_Warehouse_Price_UOM;

ENDIF;

//?Whse price override flag default
// IF *OTHERWISE
IF *OTHERWISE;

//?Default to "P"revious week price
// RCD.USR Warehouse Price Ovrrd = CND.Previous Week Value
RCD.USR_Warehouse_Price_Ovrrd = 'P';

// RCD.Price 1 USR  9.4 = RCD.Price 3 USR  9.4
RCD.Price_1_USR_9_4 = RCD.Price_3_USR_9_4;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

//?Select Warehouse Acctng co
CASE;

// IF PGM.*Cursor field <IS> CTL.ISC Warehouse Company
IF PGM.*Cursor_field = CTL.ISC_Warehouse_Company;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(CTL.ISC_Warehouse_Company);

ENDIF;

//?Select Whse
CASE;

// IF PGM.*Cursor field <IS> CTL.ISC Warehouse Code
IF PGM.*Cursor_field = CTL.ISC_Warehouse_Code;

CASE;

// IF CTL.ISC Warehouse Company is greater than zero
IF CTL.ISC_Warehouse_Company > *ZERO;

//?PK0040 RMC 12/7/6 Use Accounting Co Select for ISC file
// Call program SEL AcctCo/Warehouse   SR.
CALL PROGRAM(SEL AcctCo/Warehouse   SR) ('PMCQSRR');
PARAMETER(CTL.ISC_Warehouse_Code);
PARAMETER(CTL.ISC_Warehouse_Company);

// IF CTL.ISC Warehouse Type is *ALL values
IF CTL.ISC_Warehouse_Type = 'FR'/'FZ';

// Call program SEL Warehouse by Type  SR.
CALL PROGRAM(SEL Warehouse by Type  SR) ('PDZNSRR');
PARAMETER(CTL.ISC_Warehouse_Code);
PARAMETER(CTL.ISC_Warehouse_Type);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(CTL.ISC_Warehouse_Code);

ENDIF;

ENDIF;

ENDIF;

//?PK0040 RMC 12/7/06  Validate Whse & Acctng Co combo
CASE;

// IF CTL.ISC Warehouse Company is greater than zero
IF CTL.ISC_Warehouse_Company > *ZERO;

// AND CTL.ISC Warehouse Code is Warehouse Code not Blank
AND CTL.ISC_Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
PARAMETER(CTL.ISC_Warehouse_Code);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Accounting Company NE CTL.ISC Warehouse Company
IF LCL.Accounting_Company <> CTL.ISC_Warehouse_Company;

// Send error message - 'Warehouse &1 and Acctng Company &2 combo invalid.'
ERROR(USR3675);
MSGPARM(CTL.ISC_Warehouse_Code);
MSGPARM(CTL.ISC_Warehouse_Company);

ENDIF;

ENDIF;

CASE;

// IF CTL.ISC Week Ending Date NE WRK.ISC Week Ending Date
IF CTL.ISC_Week_Ending_Date <> WRK.ISC_Week_Ending_Date;

// WRK.ISC Week Ending Date = CTL.ISC Week Ending Date
WRK.ISC_Week_Ending_Date = CTL.ISC_Week_Ending_Date;

// CTL.ISC Post Warehouse Sts = WRK.Blank for 4           USR
CTL.ISC_Post_Warehouse_Sts = WRK.Blank_for_4_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF CTL.ISC Warehouse Code NE WRK.ISC Warehouse Code
IF CTL.ISC_Warehouse_Code <> WRK.ISC_Warehouse_Code;

// WRK.ISC Warehouse Code = CTL.ISC Warehouse Code
WRK.ISC_Warehouse_Code = CTL.ISC_Warehouse_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?R9083 02/27/17 DN-Reload Subfile When Acctng Company Change.
CASE;

// IF CTL.ISC Warehouse Company NE WRK.ISC Warehouse Company
IF CTL.ISC_Warehouse_Company <> WRK.ISC_Warehouse_Company;

// WRK.ISC Warehouse Company = CTL.ISC Warehouse Company
WRK.ISC_Warehouse_Company = CTL.ISC_Warehouse_Company;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F20=Post
CASE;

// IF CTL.*CMD key is CF20
IF CTL.*CMD_key = '20';

//?If posted, make sure inventory value file not posted yet
CASE;

// IF CTL.ISC Post Warehouse Sts is Posted
IF CTL.ISC_Post_Warehouse_Sts = 'P';

//?RMC Allow repost 05/30/07
// WRK.IVF Post Inventory Sts = CND.Open
WRK.IVF_Post_Inventory_Sts = 'O';

//?R9083 02/04/17 DN-Added RST by IVF Valuation Grouping.
EXECUTE FUNCTION(Rtv Post Inv Sts-1st  RT) TYPE(RTVOBJ) FILE(PPBTCPP)           AC1740674;
PARAMETER(CTL.ISC_Valuation_Grouping);
PARAMETER(CTL.ISC_Week_Ending_Date);
PARAMETER(WRK.IVF_Post_Inventory_Sts);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF WRK.IVF Post Inventory Sts is Posted or Reposted
IF WRK.IVF_Post_Inventory_Sts = 'P'/'R';

//?R9083 02/21/17 DN-Modified to Add Grouping to Message.
// Send error message - 'Invalid Option. Inventory Value File has been posted for group &2.'
ERROR(USR3614);
MSGPARM(WRK.*SFLSEL);
MSGPARM(CTL.ISC_Valuation_Grouping);

QUIT;

ENDIF;

ENDIF;

//?R9083 06/14/17 DN-Update date conversion due to Synon version difference.
// PAR.Week End Date = CTL.ISC Week Ending Date
PAR.Week_End_Date = CTL.ISC_Week_Ending_Date;

//?R9083 02/04/17 DN-Added ISC Valuation Grouping as parm to PPVTPVR.
// Call program Pmt Post Whse Prices  PV.
CALL PROGRAM(Pmt Post Whse Prices  PV) ('PPVTPVR');
PARAMETER(CTL.ISC_Week_Ending_Date);
PARAMETER(CTL.ISC_Valuation_Grouping);
PARAMETER('N');
PARAMETER(PAR.Post_Flag_USR);
PARAMETER(PAR.Week_End_Date);
PARAMETER(CTL.Inv_Valuation_Group_Desc);

CASE;

// IF PAR.Post Flag USR is Yes
IF PAR.Post_Flag_USR = 'Y';

// CTL.ISC Post Warehouse Sts = WRK.Blank for 4           USR
CTL.ISC_Post_Warehouse_Sts = WRK.Blank_for_4_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?R9083 02/23/17 DN-Modified to Add Grouping to Message.
// Send information message - 'Post warehouse prices for group &1 has completed.'
MESSAGE(USR3536 *INFO);
MSGPARM(CTL.ISC_Valuation_Grouping);

ENDIF;

ENDIF;

//?F21=Print List
CASE;

// IF CTL.*CMD key is *Print List
IF CTL.*CMD_key = '21';

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Warehouse Prices');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);
PARAMETER(*MISSING);
PARAMETER(1);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.System Value Numeric = PAR.PRT Number of Copies
PAR.System_Value_Numeric = PAR.PRT_Number_of_Copies;

// PAR.Company Number Pass   USR = CTL.ISC Warehouse Company
PAR.Company_Number_Pass_USR = CTL.ISC_Warehouse_Company;

// PAR.System Value Numeric = PAR.PRT Number of Copies
PAR.System_Value_Numeric = PAR.PRT_Number_of_Copies;

//?R9083 06/26/17 DN-Update date conversion due to Synon version difference.
// LCL.Date Out (8,0) USR = CTL.ISC Week Ending Date
LCL.Date_Out_80_USR = CTL.ISC_Week_Ending_Date;

// WRK.Date (Char-8) USR = CVTVAR(LCL.Date Out (8,0) USR)
WRK.Date_Char_8_USR = CVTVAR(LCL.Date_Out_80_USR);

// WRK.APR             PASS  USR = CTL.ISC End Inv Final Lbs
WRK.APR_PASS_USR = CTL.ISC_Ending_Inv_Final_Lbs;

//?R9083 02/13/17 DN-Added ISC Valuation Grouping & Desc as Input Parm.
// Call program Prt Warehouse Prices  UP.
SBMJOB;
CALL PROGRAM(Prt Warehouse Prices  UP) ('PPP3UPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(CTL.ISC_Warehouse_Code);
PARAMETER(WRK.Date_Char_8_USR);
PARAMETER('N');
PARAMETER(WRK.APR_PASS_USR);
PARAMETER(WRK.Email_Address);
PARAMETER(CTL.ISC_Valuation_Grouping);
PARAMETER(CTL.Inv_Valuation_Group_Desc);
SBMJOBOVR JOB(PRT_WHSPRC);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

CASE;

// IF RCD.USR Warehouse Price Ovrrd is Add new value
IF RCD.USR_Warehouse_Price_Ovrrd = 'A';

// AND RCD.Price 1 USR  9.4 is Equal to Zero
AND RCD.Price_1_USR_9_4 = *ZERO;

// Send error message - 'Enter Curr Wk Price for Add New Value.'
ERROR(USR3553);
MSGPARM(RCD.Price_1_USR_9_4);

// IF RCD.USR Warehouse Price Ovrrd is Delete the value
IF RCD.USR_Warehouse_Price_Ovrrd = 'D';

// AND RCD.Price 1 USR  9.4 is Entered
AND RCD.Price_1_USR_9_4 <> *ZERO;

// Send error message - 'Curr Wk Price not valid for Deleted Value.'
ERROR(USR3554);
MSGPARM(RCD.Price_1_USR_9_4);

// IF *OTHERWISE
IF *OTHERWISE;

//?Change the File Manually
// RCD.ISC Warehouse Price Ovrrd = RCD.USR Warehouse Price Ovrrd
RCD.ISC_Warehouse_Price_Ovrrd = RCD.USR_Warehouse_Price_Ovrrd;

// RCD.ISC Warehouse Price /UOM = RCD.Price 1 USR  9.4
RCD.ISC_Warehouse_Price_UOM = RCD.Price_1_USR_9_4;

EXECUTE FUNCTION(Chg Inventory Stock   CH) TYPE(CHGOBJ) FILE(PPBSCPP)           AC1738128;
PARAMETER(RCD.ISC_Week_Ending_Date);
PARAMETER(RCD.ISC_Warehouse_Company);
PARAMETER(RCD.ISC_Warehouse_Code);
PARAMETER(RCD.ISC_Item_Code);
PARAMETER(RCD.ISC_Warehouse_Type);
PARAMETER(RCD.ISC_Item_Cmdty_Price_Grp);
PARAMETER(RCD.ISC_Item_Dft_Cmdty_Mkt_Bs);
PARAMETER(RCD.ISC_Item_Type);
PARAMETER(RCD.ISC_Item_Market_Overage);
PARAMETER(RCD.ISC_Item_Structure_Type);
PARAMETER(RCD.ISC_Item_Structure_Group);
PARAMETER(RCD.ISC_Item_Structure_Class);
PARAMETER(RCD.ISC_Item_GL_Sub_Code);
PARAMETER(RCD.ISC_Item_UOM_Pricing);
PARAMETER(RCD.ISC_Begin_Inv_Final_Qty);
PARAMETER(RCD.ISC_Begin_Inv_Final_Lbs);
PARAMETER(RCD.ISC_Begin_Inv_Adjust_Qty);
PARAMETER(RCD.ISC_Begin_Inv_Adjust_Lbs);
PARAMETER(RCD.ISC_Begin_Inv_Qty);
PARAMETER(RCD.ISC_Begin_Inv_Lbs);
PARAMETER(RCD.ISC_Floor_Production_Qty);
PARAMETER(RCD.ISC_Floor_Production_Lbs);
PARAMETER(RCD.ISC_Floor_Prod_Adj_Qty);
PARAMETER(RCD.ISC_Floor_Prod_Adj_Lbs);
PARAMETER(RCD.ISC_Sales_Production_Qty);
PARAMETER(RCD.ISC_Sales_Production_Lbs);
PARAMETER(RCD.ISC_Inventory_Shipmnt_Qty);
PARAMETER(RCD.ISC_Inventory_Shipmnt_Lbs);
PARAMETER(RCD.ISC_Ord_Dtl_Shipment_Qty);
PARAMETER(RCD.ISC_Ord_Dtl_Shipment_Lbs);
PARAMETER(RCD.ISC_Shipment_Final_Qty);
PARAMETER(RCD.ISC_Shipment_Final_Lbs);
PARAMETER(RCD.ISC_FOB_Gross_Amount);
PARAMETER(RCD.ISC_Inventory_Txfr_Qty);
PARAMETER(RCD.ISC_Inventory_Txfr_Lbs);
PARAMETER(RCD.ISC_Misc_Invntry_Adj_Qty);
PARAMETER(RCD.ISC_Misc_Invntry_Adj_Lbs);
PARAMETER(RCD.ISC_Ending_Inventory_Qty);
PARAMETER(RCD.ISC_Ending_Inventory_Lbs);
PARAMETER(RCD.ISC_End_Inv_User_Id);
PARAMETER(RCD.ISC_End_Inv_Date);
PARAMETER(RCD.ISC_End_Inv_Time);
PARAMETER(RCD.ISC_Sun_Ship_Inv_Adj_Qty);
PARAMETER(RCD.ISC_Sun_Ship_Inv_Adj_Lbs);
PARAMETER(RCD.ISC_Unsh_Ship_Inv_Adj_Qty);
PARAMETER(RCD.ISC_Unsh_Ship_Inv_Adj_Lbs);
PARAMETER(RCD.ISC_End_Inv_Partial_Qty);
PARAMETER(RCD.ISC_End_Inv_Partial_Lbs);
PARAMETER(RCD.ISC_Ending_Inv_Adj_Qty);
PARAMETER(RCD.ISC_Ending_Inv_Adj_Lbs);
PARAMETER(RCD.ISC_End_Inv_Adj_Comment);
PARAMETER(RCD.ISC_Ending_Inv_Adj_User);
PARAMETER(RCD.ISC_Ending_Inv_Adj_Date);
PARAMETER(RCD.ISC_Ending_Inv_Adj_Time);
PARAMETER(RCD.ISC_Ending_Inv_Final_Qty);
PARAMETER(RCD.ISC_Ending_Inv_Final_Lbs);
PARAMETER(RCD.ISC_Warehouse_Price_UOM);
PARAMETER(RCD.ISC_Warehouse_Price_Ovrrd);
PARAMETER(RCD.ISC_Post_Balance_Sts);
PARAMETER(RCD.ISC_Post_Warehouse_Sts);
PARAMETER(RCD.ISC_Commission_Amount);
PARAMETER(RCD.ISC_Unused_Lbs_1);
PARAMETER(RCD.ISC_TF_Exempt_NPR_Dollars);
PARAMETER(RCD.ISC_TF_Exempt_Pounds);
PARAMETER(RCD.ISC_Valuation_Grouping);
PARAMETER(RCD.ISC_Unused_Date_1);
PARAMETER(RCD.ISC_Unused_Sts_2);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Create_Date);
PARAMETER(RCD.Create_Time);
PARAMETER(RCD.Create_User);
PARAMETER(RCD.Create_Program);
PARAMETER(RCD.Change_Date);
PARAMETER(RCD.Change_Time);
PARAMETER(RCD.Change_User);
PARAMETER(RCD.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

 // Compute:Ending Inv Fin Qt
 DB1.ISC_Ending_Inv_Final_Qty = ( ( ( DB1.ISC_Ending_Inventory_Qty
 + DB1.ISC_Ending_Inv_Adj_Qty ) + DB1.ISC_Sun_Ship_Inv_Adj_Qty )                                   +
 + DB1.ISC_Unsh_Ship_Inv_Adj_Qty ) + DB1.ISC_End_Inv_Partial_Qty;

 // Compute:Ending Inv Fin Lb
 DB1.ISC_Ending_Inv_Final_Lbs = ( ( ( DB1.ISC_Ending_Inventory_Lbs
 + DB1.ISC_Ending_Inv_Adj_Lbs ) + DB1.ISC_Sun_Ship_Inv_Adj_Lbs )                                   +
 + DB1.ISC_Unsh_Ship_Inv_Adj_Lbs ) + DB1.ISC_End_Inv_Partial_Lbs;

 // Comp: sales prod qty
 DB1.ISC_Sales_Production_Qty = ( DB1.ISC_Ending_Inv_Final_Qty
 + DB1.ISC_Shipment_Final_Qty ) - DB1.ISC_Begin_Inv_Final_Qty;

 // Comp: sales prod lbs
 DB1.ISC_Sales_Production_Lbs = ( DB1.ISC_Ending_Inv_Final_Lbs
 + DB1.ISC_Shipment_Final_Lbs ) - DB1.ISC_Begin_Inv_Final_Lbs;

}


SET CURSOR;

ENDIF;

//?5=Display
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

// CTL.ISC Item Code = RCD.ISC Item Code
CTL.ISC_Item_Code = RCD.ISC_Item_Code;

// Call program Dsp Stock Closing  2  DR.
CALL PROGRAM(Dsp Stock Closing  2  DR) ('PPPAD2R');
PARAMETER(RCD.ISC_Week_Ending_Date);
PARAMETER(RCD.ISC_Warehouse_Company);
PARAMETER(RCD.ISC_Warehouse_Code);
PARAMETER(RCD.ISC_Item_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?6=Print
CASE;

// IF RCD.*SFLSEL is *Print
IF RCD.*SFLSEL = '6'/'6';

//?R9083 02/13/17 DN-Added Company Require If Opt 6=Print is Selected.
CASE;

// IF CTL.ISC Warehouse Company is Equal to zero
IF CTL.ISC_Warehouse_Company = *ZERO;

// Send error message - 'Company Number is required.'
ERROR(USR2183);
MSGPARM(CTL.ISC_Warehouse_Company);

QUIT;

ENDIF;

// CTL.ISC Item Code = RCD.ISC Item Code
CTL.ISC_Item_Code = RCD.ISC_Item_Code;

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Inv Warehouse Price');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);
PARAMETER(*MISSING);
PARAMETER(1);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.System Value Numeric = PAR.PRT Number of Copies
PAR.System_Value_Numeric = PAR.PRT_Number_of_Copies;

// PAR.Company Number Pass   USR = RCD.ISC Warehouse Company
PAR.Company_Number_Pass_USR = RCD.ISC_Warehouse_Company;

// PAR.Item Code PASS        USR = RCD.ISC Item Code
PAR.Item_Code_PASS_USR = RCD.ISC_Item_Code;

// PAR.System Value Numeric = PAR.PRT Number of Copies
PAR.System_Value_Numeric = PAR.PRT_Number_of_Copies;

//?R9083 06/26/17 DN-Update date conversion due to Synon version difference.
// LCL.Date Out (8,0) USR = CTL.ISC Week Ending Date
LCL.Date_Out_80_USR = CTL.ISC_Week_Ending_Date;

// WRK.Date (Char-8) USR = CVTVAR(LCL.Date Out (8,0) USR)
WRK.Date_Char_8_USR = CVTVAR(LCL.Date_Out_80_USR);

// Call program Zzz Warehouse Prc-1 ItUP.
SBMJOB;
CALL PROGRAM(Zzz Warehouse Prc-1 ItUP) ('PPP8UPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(RCD.ISC_Warehouse_Code);
PARAMETER(PAR.Item_Code_PASS_USR);
PARAMETER(WRK.Date_Char_8_USR);
SBMJOBOVR JOB(PRT_WHSPRC);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

