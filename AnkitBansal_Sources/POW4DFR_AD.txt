// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POW4DFR
// ?Date: 14.08.2025 Time: 03:39:26
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(Set Access            IF) TYPE(EXCINTFUN)                      AC1667888;
PARAMETER(PAR.User_Department);
PARAMETER(PAR.User_Access);
PARAMETER(PAR.Output_Production_USR);
PARAMETER(PAR.Output_Begin_Inv_USR);
PARAMETER(PAR.Output_Not_Used_USR);
PARAMETER(PAR.Output_Partial_Prod_USR);
PARAMETER(PAR.Output_Head_Cut_Wgt_USR);
PARAMETER(PAR.Output_Conv_Start_Wgt);
PARAMETER(PAR.Output_Comment_USR);
PARAMETER(PAR.Add_Partial_USR);
PARAMETER(PAR.Calculate_Yield_USR);
PARAMETER(PAR.Publish_Yield_USR);
{
 //?Execute internal function

 //?** Accounting has all access **
 // PAR.Output Production USR = CND.no
 PAR.Output_Production_USR = 'N';

 // PAR.Output Begin Inv USR = CND.no
 PAR.Output_Begin_Inv_USR = 'N';

 // PAR.Output Not Used USR = CND.no
 PAR.Output_Not_Used_USR = 'N';

 // PAR.Output Partial Prod USR = CND.no
 PAR.Output_Partial_Prod_USR = 'N';

 // PAR.Output Head Cut/Wgt USR = CND.no
 PAR.Output_Head_Cut_Wgt_USR = 'N';

 // PAR.Output Conv Start Wgt = CND.no
 PAR.Output_Conv_Start_Wgt = 'N';

 // PAR.Output Comment USR = CND.no
 PAR.Output_Comment_USR = 'N';

 // PAR.Add Partial USR = CND.yes
 PAR.Add_Partial_USR = 'Y';

 // PAR.Calculate Yield USR = CND.yes
 PAR.Calculate_Yield_USR = 'Y';

 // PAR.Publish Yield USR = CND.yes
 PAR.Publish_Yield_USR = 'Y';

 CASE;

 // IF PAR.User Department is Production
 IF PAR.User_Department = 'PR';

 // PAR.Output Production USR = CND.yes
 PAR.Output_Production_USR = 'Y';

 // PAR.Output Begin Inv USR = CND.yes
 PAR.Output_Begin_Inv_USR = 'Y';

 // PAR.Output Partial Prod USR = CND.yes
 PAR.Output_Partial_Prod_USR = 'Y';

 // PAR.Output Conv Start Wgt = CND.yes
 PAR.Output_Conv_Start_Wgt = 'Y';

 //?* Cannot enter Head Cut/Cold Weight *
 // PAR.Output Head Cut/Wgt USR = CND.yes
 PAR.Output_Head_Cut_Wgt_USR = 'Y';

 // IF PAR.User Department is Main Break
 IF PAR.User_Department = 'MB';

 // PAR.Output Production USR = CND.yes
 PAR.Output_Production_USR = 'Y';

 // PAR.Output Begin Inv USR = CND.yes
 PAR.Output_Begin_Inv_USR = 'Y';

 // PAR.Output Partial Prod USR = CND.yes
 PAR.Output_Partial_Prod_USR = 'Y';

 // PAR.Output Conv Start Wgt = CND.yes
 PAR.Output_Conv_Start_Wgt = 'Y';

 // IF PAR.User Department is Converting
 IF PAR.User_Department = 'CV';

 // PAR.Output Production USR = CND.yes
 PAR.Output_Production_USR = 'Y';

 // PAR.Output Begin Inv USR = CND.yes
 PAR.Output_Begin_Inv_USR = 'Y';

 // PAR.Output Not Used USR = CND.yes
 PAR.Output_Not_Used_USR = 'Y';

 // PAR.Output Partial Prod USR = CND.yes
 PAR.Output_Partial_Prod_USR = 'Y';

 // PAR.Output Head Cut/Wgt USR = CND.yes
 PAR.Output_Head_Cut_Wgt_USR = 'Y';

 // PAR.Output Comment USR = CND.yes
 PAR.Output_Comment_USR = 'Y';

 // PAR.Add Partial USR = CND.no
 PAR.Add_Partial_USR = 'N';

 // PAR.Calculate Yield USR = CND.no
 PAR.Calculate_Yield_USR = 'N';

 // PAR.Publish Yield USR = CND.no
 PAR.Publish_Yield_USR = 'N';

 // IF PAR.User Department is Product Manager
 IF PAR.User_Department = 'PM';

 // PAR.Output Production USR = CND.yes
 PAR.Output_Production_USR = 'Y';

 // PAR.Output Begin Inv USR = CND.yes
 PAR.Output_Begin_Inv_USR = 'Y';

 // PAR.Output Not Used USR = CND.yes
 PAR.Output_Not_Used_USR = 'Y';

 // PAR.Output Partial Prod USR = CND.yes
 PAR.Output_Partial_Prod_USR = 'Y';

 // PAR.Output Head Cut/Wgt USR = CND.yes
 PAR.Output_Head_Cut_Wgt_USR = 'Y';

 // PAR.Output Conv Start Wgt = CND.yes
 PAR.Output_Conv_Start_Wgt = 'Y';

 // PAR.Output Comment USR = CND.yes
 PAR.Output_Comment_USR = 'Y';

 // PAR.Add Partial USR = CND.no
 PAR.Add_Partial_USR = 'N';

 // PAR.Calculate Yield USR = CND.no
 PAR.Calculate_Yield_USR = 'N';

 // PAR.Publish Yield USR = CND.no
 PAR.Publish_Yield_USR = 'N';

 ENDIF;

}


//?USER: Initialize subfile control

// CTL.Production Date = PAR.Production Date
CTL.Production_Date = PAR.Production_Date;

// CTL.Production Shift = PAR.Production Shift
CTL.Production_Shift = PAR.Production_Shift;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(CTL.Company_Name_DRV);
PARAMETER(CTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Department Desc DRV) TYPE(DRVFLD)                              AC1666904;
PARAMETER(CTL.Department_Desc_DRV);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Entry_Department_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Prod Dept Name    RT) TYPE(RTVOBJ) FILE(PDI5REP)           AC1286709;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Department_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Production Line Desc DRV) TYPE(DRVFLD)                         AC1666905;
PARAMETER(CTL.Production_Line_Desc_DRV);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Entry_Department_Code);
PARAMETER(CTL.Entry_Prod_Line_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Prod Line Desc    RT) TYPE(RTVOBJ) FILE(POCMREP)           AC1666906;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Production_Line_Code);
 PARAMETER(PAR.Production_Line_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


CASE;

// IF CTL.Entry Prod Line Code is Skinless
IF CTL.Entry_Prod_Line_Code = 'SKINLS';

// WRK.USR Display 1 = CND.Yes
WRK.USR_Display_1 = 'Y';

SET CURSOR;

EXECUTE FUNCTION(Rtv Start Pieces      RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1688775;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Entry_Department_Code);
PARAMETER(CTL.Entry_Prod_Line_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER(CTL.Start_Pieces);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Display 1 = CND.No
WRK.USR_Display_1 = 'N';

ENDIF;

//?USER: Initialize subfile record from DBF record

EXECUTE FUNCTION(Rtv Comp Info w/o deptRT) TYPE(RTVOBJ) FILE(POCZREP)           AC1685599;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Yld_Component_Code);
PARAMETER(LCL.PLYC_Type);
PARAMETER(WRK.PLYC_Percent_of_Weight);
PARAMETER(WRK.PLYC_Comment);
PARAMETER(WRK.Credit_Item_Inc_Exc_Sts);
PARAMETER(WRK.Type_Inc_Exc_Sts);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(WRK.Group_Inc_Exc_Sts);
PARAMETER(WRK.Item_Structure_Group_Code);
PARAMETER(WRK.Class_Inc_Exc_Sts);
PARAMETER(WRK.Item_Structure_Class_Code);
PARAMETER(WRK.YC_Required_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.PLYC Type is Start Weight Entry
IF LCL.PLYC_Type = 'SW';

EXECUTE FUNCTION(Rtv Start Weight      RT) TYPE(RTVOBJ) FILE(POCZREP)           AC1669974;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Yld_Component_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER(RCD.Start_Weight);
PARAMETER(RCD.YC_Required_Sts);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Start Weight      RT) TYPE(RTVOBJ) FILE(POC0CPP)           AC1669975;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Production_Shift);
 PARAMETER(DB1.Yld_Component_Code);
 PARAMETER(PAR.YDL_Yld_Comp_Weight);
 {
  //?USER: Process Data record

  // PAR.YDL Yld Comp Weight = PAR.YDL Yld Comp Weight + DB1.YDL Yld Comp Weight
  PAR.YDL_Yld_Comp_Weight = PAR.YDL_Yld_Comp_Weight + DB1.YDL_Yld_Comp_Weight;

  CASE;

  // IF DB1.Yld Component Code is Loin Conversion Weight
  IF DB1.Yld_Component_Code = 'LOINCNV';

  CASE;

  // IF DB1.YDL Yld Mix Percent is not equal to zeros
  IF DB1.YDL_Yld_Mix_Percent <> *ZERO;

  // PAR.YDL Yld Comp Weight =       *
  PAR.YDL_Yld_Comp_Weight = PAR.YDL_Yld_Comp_Weight * .8 'H';

  ENDIF;

  ENDIF;

 }

 // PAR.YC Required Sts = DB1.YC Required Sts
 PAR.YC_Required_Sts = DB1.YC_Required_Sts;

}


// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?F5=Refresh
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

CASE;

// IF RCD.YC Required Sts is yes
IF RCD.YC_Required_Sts = 'Y';

CASE;

// IF RCD.Start Weight is Less than zero
IF RCD.Start_Weight < *ZERO;

// Send error message - 'Weight cannot be negative.'
ERROR(USR1951);
MSGPARM(RCD.Start_Weight);

// IF RCD.Start Weight is Equal to zero
IF RCD.Start_Weight = *ZERO;

// Send error message - 'Weight is required.'
ERROR(USR3268);
MSGPARM(RCD.Start_Weight);

ENDIF;

ENDIF;

EXECUTE FUNCTION(Upd Start Weight      RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1678961;
PARAMETER(RCD.Company_Number);
PARAMETER(CTL.Entry_Department_Code);
PARAMETER(CTL.Entry_Prod_Line_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER(RCD.Start_Weight);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(Crt Start Weight      CR) TYPE(CRTOBJ) FILE(POCSCPP)           AC1678963;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Production_Line_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Production_Shift);
 PARAMETER(PAR.Start_Weight);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Ending_Weight);
 PARAMETER(PAR.Converting_Start_Weight);
 PARAMETER(PAR.Converting_End_Weight);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Total_Line_Weight);
 PARAMETER(PAR.Production_Standard_Yld);
 PARAMETER(PAR.Actual_Yield);
 PARAMETER(PAR.Yield_Variance);
 PARAMETER(PAR.Weight_Variance);
 PARAMETER(PAR.YDL_Comment);
 PARAMETER(PAR.YDL_Post_Status);
 PARAMETER(PAR.YDL_Process_Status);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Job_Time);
 PARAMETER(PAR.User_Id);
 PARAMETER(PAR.Job_Name);
 PARAMETER(PAR.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Start Weight      CH) TYPE(CHGOBJ) FILE(POCSCPP)           AC1678964;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(PAR.Start_Weight);
 PARAMETER(DB1.Start_Pieces);
 PARAMETER(DB1.Pct_Pieces_Converted);
 {
  //?USER: Processing after Data read

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


EXECUTE FUNCTION(Chg Start Weight      RT) TYPE(RTVOBJ) FILE(POCZREP)           AC1669973;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Yld_Component_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER(RCD.Start_Weight);
PARAMETER('SW');
{
 //?USER: Process Data record

 CASE;

 // IF PAR.PLYC Type EQ DB1.PLYC Type
 IF PAR.PLYC_Type = DB1.PLYC_Type;

 EXECUTE FUNCTION(Chg Yld Daily Wgt     RT) TYPE(RTVOBJ) FILE(POC0CPP)           AC1669642;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Production_Shift);
 PARAMETER(DB1.Yld_Component_Code);
 PARAMETER(PAR.YDL_Yld_Comp_Weight);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Yld Daily Yld Cmp CR) TYPE(CRTOBJ) FILE(POC0CPP)           AC1669587;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(PAR.Yld_Component_Code);
  PARAMETER(PAR.YDL_Yld_Comp_Weight);
  PARAMETER(PAR.YDL_Yld_Mix_Percent);
  PARAMETER(PAR.YDL_Yld_Standard_Pct);
  PARAMETER(PAR.YDL_Yld_Weight_Diff);
  PARAMETER(WRK.YDL_Component_Group);
  PARAMETER(WRK.YDL_Unused_Sts_1);
  PARAMETER(WRK.YDL_Unused_Sts_2);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Component Info    RT) TYPE(RTVOBJ) FILE(POCZREP)           AC1669682;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Department_Code);
  PARAMETER(DB1.Production_Line_Code);
  PARAMETER(DB1.Yld_Component_Code);
  PARAMETER(WRK.PLYC_Type);
  PARAMETER(LCL.PLYC_Percent_of_Weight);
  PARAMETER(WRK.PLYC_Comment);
  PARAMETER(WRK.Credit_Item_Inc_Exc_Sts);
  PARAMETER(WRK.Type_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Type_Code);
  PARAMETER(WRK.Group_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Group_Code);
  PARAMETER(WRK.Class_Inc_Exc_Sts);
  PARAMETER(WRK.Item_Structure_Class_Code);
  PARAMETER(WRK.YC_Required_Sts);
  PARAMETER(WRK.YC_Component_Group);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.PLYC Percent of Weight is Greater than zero
  IF LCL.PLYC_Percent_of_Weight > *ZERO;

  // LCL.YDL Yld Comp Weight
  LCL.YDL_Yld_Comp_Weight = PAR.YDL_Yld_Comp_Weight * ( LCL.PLYC_Percent_of_Weight / 100
  'H' ) 'H';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.YDL Yld Comp Weight = PAR.YDL Yld Comp Weight
  LCL.YDL_Yld_Comp_Weight = PAR.YDL_Yld_Comp_Weight;

  ENDIF;

  EXECUTE FUNCTION(Chg Yld Daily Wgt     CH) TYPE(CHGOBJ) FILE(POC0CPP)           AC1669643;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Department_Code);
  PARAMETER(DB1.Production_Line_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Production_Shift);
  PARAMETER(DB1.Yld_Component_Code);
  PARAMETER(LCL.YDL_Yld_Comp_Weight);
  PARAMETER(DB1.YDL_Component_Group);
  PARAMETER(DB1.YDL_Unused_Sts_1);
  PARAMETER(DB1.YDL_Unused_Sts_2);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 ENDIF;

}


//?USER: Process command keys

CASE;

// IF CTL.*CMD key is SUBMIT/NEXT
IF CTL.*CMD_key = '08';

CASE;

// IF CTL.Entry Prod Line Code is Skinless
IF CTL.Entry_Prod_Line_Code = 'SKINLS';

// AND CTL.Start Pieces is NE Zeros
AND CTL.Start_Pieces <> *ZERO;

EXECUTE FUNCTION(Upd Start Pieces      RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1688767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Entry_Department_Code);
PARAMETER(CTL.Entry_Prod_Line_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER(CTL.Start_Pieces);
{
 //?USER: Process Data record

 CASE;

 // IF PAR.Start Pieces is NE Zeros
 IF PAR.Start_Pieces <> *ZERO;

 CASE;

 // IF DB1.Hogs Cut is Not zero
 IF DB1.Hogs_Cut <> *ZERO;

 // LCL.Head Cut = DB1.Hogs Cut
 LCL.Head_Cut = DB1.Hogs_Cut;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Head Cut/Cold Wgt RT) TYPE(RTVOBJ) FILE(POCRCPP)           AC1665520;
 PARAMETER(DB1.Company_Number);
 PARAMETER('CUT');
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(LCL.Head_Cut);
 PARAMETER(NLL.Cold_Weight);
 PARAMETER(NLL.Avg_Cold_Weight);
 PARAMETER(NLL.Start_Weight);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 CASE;

 // IF LCL.Head Cut is GT Zero
 IF LCL.Head_Cut > *ZERO;

 // COMPUTE: SKINNING PCT
 LCL.Pct_Pieces_Converted = ( PAR.Start_Pieces / ( LCL.Head_Cut * 2 ) * 'H' ) * 100;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Chg Start Weight      CH) TYPE(CHGOBJ) FILE(POCSCPP)           AC1678964;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(DB1.Start_Weight);
 PARAMETER(PAR.Start_Pieces);
 PARAMETER(LCL.Pct_Pieces_Converted);
 {
  //?USER: Processing after Data read

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


ENDIF;

// PAR.Yld Program USR = CND.Exit
PAR.Yld_Program_USR = 'EX';

RETURN;

ENDIF;

//?USER: Exit program processing

CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

// PAR.Yld Program USR = CND.Exit
PAR.Yld_Program_USR = 'EX';

RETURN;

ENDIF;

