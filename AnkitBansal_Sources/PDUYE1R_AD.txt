// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDUYE1R
// ?Date: 14.08.2025 Time: 03:30:04
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.Access Denied (Y/N) = CND.yes
PAR.Access_Denied_Y_N = 'Y';

// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

//?***** Change Log and Comments
DO;

//?***********************
//?RMC 08/04/22 W105515- ITC postings:use the same exempt code used when
//?     creating the other a/r dtl entries. it needs to be the same.
//?     instead of from the customer. exempt prod was getting posted per
//?     the customer's exempt sts which are mostly all NE
//?***********************
//?RMC 04/19/22 W94990 - FOR E1LIVE -- DO EXTRA INTER CO ENTRIES IN EXIT
//?     THE INTER CO FOR 440 SPR TO 960 OA WERENT GETTING CREATED
//?  so Uncomment what was commented in the exit processing
//?RMC 07/28/21 SDN440 - FOR E1LIVE
//?   Changed company 362 to 320; ONLY CREATE THE EXIT PROGRAMMING
//?    FOR M3. DONT NEED TO MAKE THEM FOR E1 JDE
//?RMC 04/13/21 SDN440 - FOR E1LIVE or M3Live
//?   Changed PWBYXFR to get live with M3 and use cgl code from either table
//?***********************
//?RMC 06/19/19 S15141 - CREATE 362 (DIV 491) ENTRIES WHEN 440 CB IS
//?   APPLIED TO 960 CM. When create Marketing Svs entries for 440
//?added OR with company numbers switched. (wasnt getting the 490 entries!)
//?***********************
//?01/17/2018 RMC get tf exempt from ar header ext for CB/RB
//?***********************
//?RMC 10/26/17 S11954 - CREATE 362 (DIV 491) ENTRIES WHEN 440 OA IS
//?   APPLIED TO 960 INVOICE... (ENTRIES 5 AND 6. ENTRY 6 BALANCES ENTRY 5)
//?***********************
//?RMC 05/11/17  E9064 - new coding for 440  OA
//?***********************
//?JBB 02/28/17  E9064 - Add company 440 processing
//?***********************
//?JBB 08/22/16  E5262 - Fix Duplicate Charge Back Explanations
//?- Recompile for a change on access paths ARBDCPLG and ARBDCPLR.
//?***********************
//?JBB 07/13/16  E6458 - Fix Duplicate Charge Back Explanations
//?- When creating the A/R Detail record for the Charge Back, write
//?  the Charge Back Reference Number to the Unused Date 3 field.
//?***********************
//?RMC 02/25/15  E3977 get Orig Inv for CB if blank
//?** 02/18/2010 LJB E000512  Add new parm to VAL JDE Account
//?** Nos. UP, retrieve and recompile
//?RMC 07/22/09  S00877 RTV Check invc exists to chk Invoice without company
//?SLM 04/26/08  Remove getting TF Exempt from the Order Header
//?  replace it with the 1st sales history rec value.
//?  TFS040  Change to the rtv on customer ext
//?SLM 04/09/08  E00193 Inter Company only for Organization of SBD
//?  TFS040 Also change to the rtv on customer ext
//?  03/28/06   par.usr company number has the OA company number
//?  since it may be diff than the appld Invoice company number
//?RMC 12/23/05   get g/l posting code
//?RMC 05/05/05   Write records with a -0- deposit time
//?RMC 03/17/05  Display the lesser of the Amout to Apply and the
//?  Remaining Bal Due as the transaction amt
ENDDO;

//?***********************
//?USER: Initialize key screen

// KEY.Company Number = PAR.Company Number
KEY.Company_Number = PAR.Company_Number;

// KEY.Invoice Number = PAR.Invoice Number
KEY.Invoice_Number = PAR.Invoice_Number;

// KEY.Invoice Suffix = PAR.Invoice Suffix
KEY.Invoice_Suffix = PAR.Invoice_Suffix;

// KEY.Sequence Number = PAR.Sequence Number
KEY.Sequence_Number = PAR.Sequence_Number;

//?USER: Initialize detail screen (new record)

CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

// DTL.Adjustment Type Code = CND.Spread
DTL.Adjustment_Type_Code = 'SPR';

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

ENDIF;

EXECUTE FUNCTION(RTV A/R Check Number   RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1353517;
PARAMETER(PAR.USR_Company_Number);
PARAMETER(PAR.USR_Invoice_Number);
PARAMETER(PAR.USR_Invoice_Suffix);
PARAMETER(DTL.A_R_Check_Number);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Remaining Balance Due = PAR.Transaction Amount
DTL.Remaining_Balance_Due = PAR.Transaction_Amount;

//?Use the lesser of the Invoice $ remaining and the Amt to Apply
CASE;

// IF DTL.Remaining Balance Due LE DTL.USR Remaining Balance
IF DTL.Remaining_Balance_Due <= DTL.USR_Remaining_Balance;

//?Invoice $ Remaining
// DTL.Transaction Amount = DTL.Remaining Balance Due
DTL.Transaction_Amount = DTL.Remaining_Balance_Due;

//?Use the lesser of the Invoice $ remaining and the Amt to Apply
// IF *OTHERWISE
IF *OTHERWISE;

//?Amount to Apply
// DTL.Transaction Amount = DTL.USR Remaining Balance
DTL.Transaction_Amount = DTL.USR_Remaining_Balance;

ENDIF;

//?04/29/2008 slm correction use the sales history instead OrdHeader
//?02/17/2014 RMC dft CB to NE
//?01/17/2018 RMC get tf exempt from ar header ext for CB/RB
CASE;

// IF PAR.Invoice Suffix is Charge Backs and Rebills
IF PAR.Invoice_Suffix = 'CB'/'RB';

EXECUTE FUNCTION(Rtv Orig Order/Inv    RT) TYPE(RTVOBJ) FILE(PBC0CPP)           AC2146735;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Invoice_Number);
PARAMETER(PAR.Invoice_Suffix);
PARAMETER(LCL.Attach_to_Invoice_Number);
PARAMETER(LCL.Attach_to_Order_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV TF AR Exempt f/ordRT) TYPE(RTVOBJ) FILE(OMHSTPP)           AC2146736;
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Attach_to_Order_Number);
PARAMETER(DTL.A_R_TF_Exempt_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// IF *OTHERWISE
IF *OTHERWISE;

// Call program Rtv TF Exempt By Inv  XF.
CALL PROGRAM(Rtv TF Exempt By Inv  XF) ('PMUJXFR');
PARAMETER(PAR.Invoice_Number);
PARAMETER(DTL.A_R_TF_Exempt_Code);

ENDIF;

// LCL.A/R TF Exempt Code = DTL.A/R TF Exempt Code
LCL.A_R_TF_Exempt_Code = DTL.A_R_TF_Exempt_Code;

CASE;

// IF PAR.A/R Orig Inv for CB is Equal to zero
IF PAR.A_R_Orig_Inv_for_CB = *ZERO;

// AND PAR.Invoice Suffix is Charge Backs
AND PAR.Invoice_Suffix = 'CB';

EXECUTE FUNCTION(RTV CB Orig Inv Nbr  RT) TYPE(RTVOBJ) FILE(ARBDCPP)            AC2082675;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Invoice_Number);
PARAMETER(PAR.Invoice_Suffix);
PARAMETER(LCL.Original_Inv_for_CB);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.A/R Orig Inv for CB = LCL.Original Inv for CB
DTL.A_R_Orig_Inv_for_CB = LCL.Original_Inv_for_CB;

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.A/R Orig Inv for CB = PAR.A/R Orig Inv for CB
DTL.A_R_Orig_Inv_for_CB = PAR.A_R_Orig_Inv_for_CB;

ENDIF;

//?USER: Validate detail screen fields

// PAR.Error Status = CND.no
PAR.Error_Status = 'N';

CASE;

// IF DTL.*CMD key is CF13
IF DTL.*CMD_key = '13';

// PAR.Company Number Alpha = CVTVAR(DTL.Company Number)
PAR.Company_Number_Alpha = CVTVAR(DTL.Company_Number);

// Call program SEL Chart of Accounts  UP.
CALL PROGRAM(SEL Chart of Accounts  UP) ('ARACTSEL');
PARAMETER(PAR.Company_Number_Alpha);
PARAMETER(DTL.Cost_Center);
PARAMETER(DTL.Object_Account);
PARAMETER(DTL.Subsidiary);
PARAMETER(DTL.G_L_ID_Code_JDE);
PARAMETER(DTL.G_L_Account_Description);
PARAMETER(WRK.Error_Return_text);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

EXECUTE FUNCTION(RTV Adj Limits         RT) TYPE(RTVOBJ) FILE(PDJ3CPP)          AC1334715;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Adjustment_Type_Code);
PARAMETER(DTL.Adjustment_Description);
PARAMETER(DTL.Effect_on_Account);
PARAMETER(DTL.G_L_ID_Code_JDE);
PARAMETER(PAR.Adjustment_Limit_Amount);
PARAMETER(DTL.Cash_Adj);
PARAMETER(PAR.User_Enter_G_L_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(PAR.Company_Number);
PARAMETER(DTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Check Active Adj   RT) TYPE(RTVOBJ) FILE(PDJ3CPP)          AC1399560;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Adjustment_Type_Code);
PARAMETER(WRK.System_Control);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

}


//?Adjustment Code N/F
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'AR Adjustment Type not found.'
ERROR(USR2041);
MSGPARM(DTL.Adjustment_Type_Code);

// PAR.Error Status = CND.yes
PAR.Error_Status = 'Y';

ENDIF;

//?Transaction amount greater than adjustment limit
CASE;

// IF DTL.Transaction Amount GT PAR.Adjustment Limit Amount
IF DTL.Transaction_Amount > PAR.Adjustment_Limit_Amount;

// AND PAR.Adjustment Limit Amount is Greater than zero
AND PAR.Adjustment_Limit_Amount > *ZERO;

// Send error message - 'Adj. > Adj. Limit Amount'
ERROR(USR2066);
MSGPARM(DTL.Transaction_Amount);

// PAR.Error Status = CND.yes
PAR.Error_Status = 'Y';

ENDIF;

//?Cash adjustment type is not allowed
CASE;

// IF DTL.Cash/Adj is Cash Adjustment
IF DTL.Cash_Adj = 'CSH';

// Send error message - 'Cash must be applied thru a bank deposit record not thru the adjustment pro
ERROR(USR2156);
MSGPARM(DTL.Adjustment_Type_Code);

// PAR.Error Status = CND.yes
PAR.Error_Status = 'Y';

ENDIF;

//?Rebill adjustment type is not allowed
CASE;

// IF DTL.Adjustment Type Code is Rebill
IF DTL.Adjustment_Type_Code = 'RB';

// Send error message - 'Rebill Adjustment Type Code is not allowed on this screen.'
ERROR(USR4954);
MSGPARM(DTL.Adjustment_Type_Code);

// PAR.Error Status = CND.yes
PAR.Error_Status = 'Y';

ENDIF;

//?Check for Invalid adjustment types
CASE;

// IF DTL.Adjustment Type Code is A/R Entry by Customer
IF DTL.Adjustment_Type_Code = 'ARC';

// OR DTL.Adjustment Type Code is A/R Miscellaneous Acct
OR DTL.Adjustment_Type_Code = 'ARM';

// OR DTL.Adjustment Type Code is ACM Apply Credit Memo
OR DTL.Adjustment_Type_Code = 'ACM';

// OR DTL.Adjustment Type Code is CRM Credit Memo
OR DTL.Adjustment_Type_Code = 'CRM';

// OR DTL.Adjustment Type Code is DBM Debit Memo
OR DTL.Adjustment_Type_Code = 'DBM';

// OR DTL.Adjustment Type Code is INV Invoice
OR DTL.Adjustment_Type_Code = 'INV';

// OR DTL.Adjustment Type Code is OA On Account Cash
OR DTL.Adjustment_Type_Code = 'OA';

// Send error message - 'Adjustment Type is invalid for this operation.'
ERROR(USR2263);
MSGPARM(DTL.Adjustment_Type_Code);

// PAR.Error Status = CND.yes
PAR.Error_Status = 'Y';

ENDIF;

//?User Defined G/L Code
CASE;

// IF PAR.User Enter G/L Status is yes
IF PAR.User_Enter_G_L_Status = 'Y';

CASE;

// IF DTL.Cost Center. . . . . . . is Not Entered
IF DTL.Cost_Center = *BLANK;

// AND DTL.Object Account . . . . . is Not Entered
AND DTL.Object_Account = *BLANK;

// AND DTL.Subsidiary . . . . . . . is Not Entered
AND DTL.Subsidiary = *BLANK;

// Send error message - 'G/L Account Must be entered.'
ERROR(USR2051);
MSGPARM(DTL.Cost_Center);
MSGPARM(DTL.Object_Account);
MSGPARM(DTL.Subsidiary);

// PAR.Error Status = CND.yes
PAR.Error_Status = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Cost Center. . . . . . . is Select Inquiry
IF DTL.Cost_Center = '?';

// PAR.Company Number Alpha = CVTVAR(PAR.Company Number)
PAR.Company_Number_Alpha = CVTVAR(PAR.Company_Number);

// Call program SEL Chart of Accounts  UP.
CALL PROGRAM(SEL Chart of Accounts  UP) ('ARACTSEL');
PARAMETER(PAR.Company_Number_Alpha);
PARAMETER(DTL.Cost_Center);
PARAMETER(DTL.Object_Account);
PARAMETER(DTL.Subsidiary);
PARAMETER(DTL.G_L_ID_Code_JDE);
PARAMETER(DTL.G_L_Account_Description);
PARAMETER(WRK.Error_Return_text);

ENDIF;

// PAR.Company Number Alpha = CVTVAR(PAR.Company Number)
PAR.Company_Number_Alpha = CVTVAR(PAR.Company_Number);

// Call program VAL JDE Account No.s   UP.
CALL PROGRAM(VAL JDE Account No.s   UP) ('ARACTEDT');
PARAMETER(PAR.Company_Number_Alpha);
PARAMETER(DTL.Cost_Center);
PARAMETER(DTL.Object_Account);
PARAMETER(DTL.Subsidiary);
PARAMETER(DTL.G_L_ID_Code_JDE);
PARAMETER(WRK.JDE_Posting_Edit_Code_USR);
PARAMETER(DTL.G_L_Account_Description);
PARAMETER(WRK.Error_Return_text);

CASE;

// IF WRK.Error Return text is Error Return
IF WRK.Error_Return_text = 'ERR';

// Send error message - 'G/L Account Code is in Error'
ERROR(USR2070);
MSGPARM(WRK.G_L_Alpha_Code);

// PAR.Error Status = CND.yes
PAR.Error_Status = 'Y';

ENDIF;

ENDIF;

//?User Defined G/L Code
// IF *OTHERWISE
IF *OTHERWISE;

// Call program VAL Acct ID JDE-8 dgt  UP.
CALL PROGRAM(VAL Acct ID JDE-8 dgt  UP) ('ARACTRET');
PARAMETER(DTL.G_L_ID_Code_JDE);
PARAMETER(WRK.Cost_Center);
PARAMETER(WRK.Object_Account);
PARAMETER(WRK.Subsidiary);
PARAMETER(DTL.G_L_Account_Description);
PARAMETER(DTL.G_L_Posting_Company);
PARAMETER(WRK.JDE_Posting_Edit_Code_USR);
PARAMETER(WRK.Error_Return_text);

ENDIF;

//?*** PK0333 ***
//?Chargeback adjustment codes
CASE;

// IF DTL.Adjustment Type Code is Chargeback
IF ( DTL.Adjustment_Type_Code = 'CB';

// OR DTL.Adjustment Type Code is Accrual Chargeback
OR DTL.Adjustment_Type_Code = 'ACB' );

// AND DTL.USR Reference number is Equal to zero
AND DTL.USR_Reference_number = *ZERO;

// Send error message - 'CB Ref.# must be entered.'
ERROR(USR2119);
MSGPARM(DTL.USR_Reference_number);

// PAR.Error Status = CND.yes
PAR.Error_Status = 'Y';

ENDIF;

//?*** PK0333 ***
//?Check CB number for duplicate invoice number
CASE;

// IF DTL.Adjustment Type Code is Chargeback
IF ( DTL.Adjustment_Type_Code = 'CB';

// OR DTL.Adjustment Type Code is Accrual Chargeback
OR DTL.Adjustment_Type_Code = 'ACB' );

// AND DTL.USR Reference number is Not equal to zero
AND DTL.USR_Reference_number <> *ZERO;

EXECUTE FUNCTION(RTV Check invc exists  RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1263564;
PARAMETER(DTL.USR_Reference_number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// Send error message - 'Chargeback Ref.# already exists.'
ERROR(USR2272);
MSGPARM(DTL.USR_Reference_number);

// PAR.Error Status = CND.yes
PAR.Error_Status = 'Y';

ENDIF;

ENDIF;

//?*** 12/10/01  Prevent over-spreading and over-applying  ***
//?OVER-Spread an Amount to Apply
CASE;

// IF DTL.Transaction Amount GT DTL.USR Remaining Balance
IF DTL.Transaction_Amount > DTL.USR_Remaining_Balance;

// Send error message - 'Trans Amount greater than Amount to Apply.'
ERROR(USR3120);
MSGPARM(DTL.Transaction_Amount);

// PAR.Error Status = CND.yes
PAR.Error_Status = 'Y';

ENDIF;

EXECUTE FUNCTION(RTV Remaining/Open Inv RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1514841;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Invoice_Number);
PARAMETER(DTL.Invoice_Suffix);
PARAMETER(WRK.Remaining_Balance_Due);
PARAMETER(WRK.AR_Customer_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?OVER Apply to an Invoice
CASE;

// IF DTL.Transaction Amount GT WRK.Remaining Balance Due
IF DTL.Transaction_Amount > WRK.Remaining_Balance_Due;

// Send error message - 'Trans Amount greater than Remaining Balance Due for Invoice.'
ERROR(USR3121);
MSGPARM(DTL.Transaction_Amount);

// PAR.Error Status = CND.yes
PAR.Error_Status = 'Y';

ENDIF;

//?**************
// PAR.USR Reference number = DTL.USR Reference number
PAR.USR_Reference_number = DTL.USR_Reference_number;

// WRK.Transaction Amount = DTL.Transaction Amount
WRK.Transaction_Amount = DTL.Transaction_Amount;

// WRK.Adjustment Type Code = DTL.Adjustment Type Code
WRK.Adjustment_Type_Code = DTL.Adjustment_Type_Code;

// WRK.Bank Code = DTL.Bank Code
WRK.Bank_Code = DTL.Bank_Code;

// WRK.Deposit Date = WRK.Deposit Date
WRK.Deposit_Date = WRK.Deposit_Date;

//?**************
//?RMC 12/23/05 get g/l posting company
// Call program VAL Acct ID JDE-8 dgt  UP.
CALL PROGRAM(VAL Acct ID JDE-8 dgt  UP) ('ARACTRET');
PARAMETER(DTL.G_L_ID_Code_JDE);
PARAMETER(NLL.Cost_Center);
PARAMETER(NLL.Object_Account);
PARAMETER(NLL.Subsidiary);
PARAMETER(NLL.Description);
PARAMETER(DTL.G_L_Posting_Company);
PARAMETER(WRK.JDE_Posting_Edit_Code_USR);
PARAMETER(WRK.Error_Return_text);

//?**************
//?JBB 07/11/16 E6458 - Add Original Invoice Sequence Number to
//?    A/R Detail record for the Charge Back
// LCL.A/R Orig Seq for CB = DTL.Sequence Number
LCL.A_R_Orig_Seq_for_CB = DTL.Sequence_Number;

//?USER: Create DBF record

EXECUTE FUNCTION(CRT A/R Detail Appl    CR) TYPE(CRTOBJ) FILE(ARBECPP)          AC1338635;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Invoice_Number);
PARAMETER(DTL.Invoice_Suffix);
PARAMETER(DTL.Sequence_Number);
PARAMETER(DTL.Adjustment_Type_Code);
PARAMETER(DTL.Transaction_Amount);
PARAMETER(DTL.A_R_Check_Number);
PARAMETER(DTL.Explanation);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_date);
PARAMETER(*ZERO);
PARAMETER(DTL.G_L_Post_Date);
PARAMETER(DTL.Bank_Code);
PARAMETER(DTL.GL_Document_Number);
PARAMETER(DTL.Cash_Adj);
PARAMETER('E');
PARAMETER(JOB.*PROGRAM);
PARAMETER(DTL.Effect_on_Account);
PARAMETER(DTL.G_L_Posting_Company);
PARAMETER(DTL.G_L_ID_Code_JDE);
PARAMETER('Y');
PARAMETER(DTL.A_R_TF_Exempt_Code);
PARAMETER(DTL.A_R_Dtl_UnUsed_Sts_1_1);
PARAMETER(DTL.A_R_Dtl_UnUsed_Sts_2_1);
PARAMETER(DTL.A_R_Dtl_UnUsed_Sts_3_1);
PARAMETER(DTL.A_R_Dtl_UnUsed_Sts_4_2);
PARAMETER(DTL.A_R_Dtl_UnUsed_Sts_5_2);
PARAMETER(DTL.TFS_Adj_Week_Ending_Date);
PARAMETER(DTL.A_R_Orig_Inv_for_CB);
PARAMETER(DTL.USR_Reference_number);
PARAMETER(DTL.A_R_Dtl_UnUsed_Date_4);
PARAMETER(DTL.A_R_Dtl_UnUsed_Date_5);
PARAMETER(DTL.G_L_Sub_Ledger_Code);
PARAMETER(DTL.A_R_Dtl_UnUsed_AMT_2);
PARAMETER(DTL.A_R_Dtl_UnUsed_AMT_3);
PARAMETER(DTL.A_R_Dtl_UnUsed_AMT_4);
PARAMETER(DTL.A_R_Dtl_UnUsed_AMT_5);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.Access_Denied_Y_N);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing after Data update

 // PAR.Access Denied (Y/N) = CND.no
 PAR.Access_Denied_Y_N = 'N';

}


//?USER: Process command keys

CASE;

// IF PAR.Access Denied (Y/N) is no
IF PAR.Access_Denied_Y_N = 'N';

EXECUTE FUNCTION(CRT A/R OA/CM Trans    RT) TYPE(RTVOBJ) FILE(PDNHCPP)          AC1576449;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Invoice_Number);
PARAMETER(DTL.Invoice_Suffix);
PARAMETER(PAR.USR_Invoice_Number);
PARAMETER(PAR.USR_Invoice_Suffix);
PARAMETER(DTL.Transaction_Amount);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(CRT A/R OA/CM Trans    CR) TYPE(CRTOBJ) FILE(PDNHCPP)          AC1576402;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Invoice_Number);
 PARAMETER(PAR.Invoice_Suffix);
 PARAMETER(PAR.Reference_Number);
 PARAMETER(PAR.Reference_Suffix);
 PARAMETER(PAR.Transaction_Amount);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

 }

 //?USER: Process Data record

 // PAR.USR amount 1  11.2 = DB1.Transaction Amount + PAR.Transaction Amount
 PAR.USR_amount_1_11_2 = DB1.Transaction_Amount + PAR.Transaction_Amount;

 EXECUTE FUNCTION(CHG A/R OA/CM Trans    CH) TYPE(CHGOBJ) FILE(PDNHCPP)          AC1576403;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Reference_Number);
 PARAMETER(DB1.Reference_Suffix);
 PARAMETER(PAR.USR_amount_1_11_2);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

}


EXECUTE FUNCTION(CRT A/R OA/CM Trans    RT) TYPE(RTVOBJ) FILE(PDNHCPP)          AC1576449;
PARAMETER(PAR.USR_Company_Number);
PARAMETER(PAR.USR_Invoice_Number);
PARAMETER(PAR.USR_Invoice_Suffix);
PARAMETER(DTL.Invoice_Number);
PARAMETER(DTL.Invoice_Suffix);
PARAMETER(DTL.Transaction_Amount);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(CRT A/R OA/CM Trans    CR) TYPE(CRTOBJ) FILE(PDNHCPP)          AC1576402;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Invoice_Number);
 PARAMETER(PAR.Invoice_Suffix);
 PARAMETER(PAR.Reference_Number);
 PARAMETER(PAR.Reference_Suffix);
 PARAMETER(PAR.Transaction_Amount);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

 }

 //?USER: Process Data record

 // PAR.USR amount 1  11.2 = DB1.Transaction Amount + PAR.Transaction Amount
 PAR.USR_amount_1_11_2 = DB1.Transaction_Amount + PAR.Transaction_Amount;

 EXECUTE FUNCTION(CHG A/R OA/CM Trans    CH) TYPE(CHGOBJ) FILE(PDNHCPP)          AC1576403;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Reference_Number);
 PARAMETER(DB1.Reference_Suffix);
 PARAMETER(PAR.USR_amount_1_11_2);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

}


ENDIF;

//?USER: Exit program processing

//?There was an error condition in the detail
CASE;

// IF PAR.Error Status is yes
IF PAR.Error_Status = 'Y';

// PAR.Access Denied (Y/N) = CND.yes
PAR.Access_Denied_Y_N = 'Y';

ENDIF;

//?Adjustment record has been added from and to transactions need to update
CASE;

// IF PAR.Access Denied (Y/N) is no
IF PAR.Access_Denied_Y_N = 'N';

//?Determine Customer Number
CASE;

// IF PAR.USR A/R Customer Number is not equal to zero
IF PAR.USR_A_R_Customer_Number <> *ZERO;

// WRK.A/R Customer Number = PAR.USR A/R Customer Number
WRK.AR_Customer_Number = PAR.USR_A_R_Customer_Number;

//?Determine Customer Number
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.A/R Customer Number = PAR.A/R Customer Number
WRK.AR_Customer_Number = PAR.AR_Customer_Number;

ENDIF;

EXECUTE FUNCTION(RTV Chg Apply Header   RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1345503;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Invoice_Number);
PARAMETER(PAR.Invoice_Suffix);
PARAMETER(WRK.Transaction_Amount);
PARAMETER(PAR.AR_Customer_Number);
{
 //?USER: Process Data record

 // PAR.USR Amount Applied = PAR.Amount Paid + DB1.Amount Paid
 PAR.USR_Amount_Applied = PAR.Amount_Paid + DB1.Amount_Paid;

 // PAR.USR Cash Appl Amount = PAR.USR Amount Applied + DB1.Adjustment Amount
 PAR.USR_Cash_Appl_Amount = PAR.USR_Amount_Applied + DB1.Adjustment_Amount;

 // PAR.USR Remaining Balance = DB1.Transaction Amount - PAR.USR Cash Appl Amount
 PAR.USR_Remaining_Balance = DB1.Transaction_Amount - PAR.USR_Cash_Appl_Amount;

 //?The calculation for days to pay removed 6/13/96 per ARS026
 //?       Document number AR26DSN.DOC has the documented project detail
 //?   I decided to put this back in with call 1723
 //?Paid in full date
 CASE;

 // IF PAR.USR Remaining Balance is Zero
 IF PAR.USR_Remaining_Balance = *ZERO;

 // WRK.Paid in Full Date = JOB.*Job date
 WRK.Paid_in_Full_Date = JOB.*Job_date;

 EXECUTE FUNCTION(CLC Days Paid          IF) TYPE(EXCINTFUN)                     AC1351456;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Transaction_Date_Code);
 PARAMETER(DB1.Last_Payment_Date);
 PARAMETER(PAR.Days_to_Pay);
 {
  //?Execute internal function

  //?  Transaction Date (Invoice Date) will be used instead of Due Date.
  //?     PER Request ARS038
  //?  The Paid in Full Date has been Changed to the Deposit Date
  //?     Which is the Last Payment Date
  // PAR.Number of Days = PAR.Last Payment Date - PAR.Transaction Date Code *DAYS
  PAR.Number_of_Days = DURATION(PAR.Last_Payment_Date PAR.Transaction_Date_Code 'DY'
  1111111 'NONE' 'N' 1);

  //?Handle Negative Days to Pay
  CASE;

  // IF PAR.Number of Days is Less Than Zero
  IF PAR.Number_of_Days < *ZERO;

  // PAR.Days to Pay = CND.equal to zero
  PAR.Days_to_Pay = *ZERO;

  //?Handle Negative Days to Pay
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Days to Pay = PAR.Number of Days
  PAR.Days_to_Pay = PAR.Number_of_Days;

  ENDIF;

 }

 //?Days to Pay is Negative
 CASE;

 // IF PAR.Days to Pay is less than zero
 IF PAR.Days_to_Pay < *ZERO;

 // PAR.Days to Pay = CND.equal to zero
 PAR.Days_to_Pay = *ZERO;

 ENDIF;

 //?Paid in full date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Days to Pay = CND.equal to zero
 PAR.Days_to_Pay = *ZERO;

 // WRK.Paid in Full Date = CND.not entered
 WRK.Paid_in_Full_Date = *ZERO;

 ENDIF;

 EXECUTE FUNCTION(CHG for Apply Credit   CH) TYPE(CHGOBJ) FILE(ARBDCPP)          AC1339595;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(PAR.USR_Amount_Applied);
 PARAMETER(PAR.USR_Remaining_Balance);
 PARAMETER(DB1.Last_Payment_Date);
 PARAMETER(WRK.Paid_in_Full_Date);
 PARAMETER(PAR.Days_to_Pay);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


// PAR.USR Amount Applied = WRK.Transaction Amount
PAR.USR_Amount_Applied = WRK.Transaction_Amount;

//?*** PK0333 ***
//?Add Chargeback Header Record
CASE;

// IF WRK.Adjustment Type Code is Chargeback
IF WRK.Adjustment_Type_Code = 'CB';

// OR WRK.Adjustment Type Code is Accrual Chargeback
OR WRK.Adjustment_Type_Code = 'ACB';

EXECUTE FUNCTION(RTV Add Chargeback Hd. RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1343147;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Invoice_Number);
PARAMETER(KEY.Invoice_Suffix);
PARAMETER(WRK.Adjustment_Type_Code);
PARAMETER(PAR.Transaction_Amount);
PARAMETER(WRK.Bank_Code);
PARAMETER(PAR.USR_Reference_number);
PARAMETER(WRK.Deposit_Date);
PARAMETER(KEY.Sequence_Number);
{
 //?USER: Process Data record

 CASE;

 // IF PAR.Deposit Date is not entered
 IF PAR.Deposit_Date = *ZERO;

 // WRK.Deposit Date = JOB.*Job date
 WRK.Deposit_Date = JOB.*Job_date;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Deposit Date = PAR.Deposit Date
 WRK.Deposit_Date = PAR.Deposit_Date;

 ENDIF;

 //?*** PK0333 ***  changed to use par.adjustment type code instead of
 //?cnd.chargeback
 // LCL.Original Inv for CB = PAR.Invoice Number
 LCL.Original_Inv_for_CB = PAR.Invoice_Number;

 EXECUTE FUNCTION(CRT A/R Header         CR) TYPE(CRTOBJ) FILE(ARBDCPP)          AC1341687;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.USR_Invoice_Number);
 PARAMETER('CB');
 PARAMETER(PAR.Adjustment_Type_Code);
 PARAMETER(WRK.Transaction_Amount);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Transaction_Amount);
 PARAMETER('E');
 PARAMETER('O');
 PARAMETER(PAR.Bank_Code);
 PARAMETER(*ZERO);
 PARAMETER(DB1.Order_Number_Ref);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Salesperson_Code);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(WRK.Deposit_Date);
 PARAMETER(WRK.Deposit_Date);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Original_Inv_for_CB);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.A_R_Check_Number);
 PARAMETER(*ZERO);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

  // DB1.Job Name = JOB.*JOB
  DB1.Job_Name = JOB.*JOB;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  //?USER: Processing after Data update

  //?E6933 DN  08/12/16 - Create A/R Header Ext record.
  // Call program Crt A/R Header Ext    XF.
  CALL PROGRAM(Crt A/R Header Ext    XF) ('PBX3XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Remaining_Balance_Due);
  PARAMETER(DB1.Order_Number_Ref);
  PARAMETER(DB1.Original_Inv_for_CB);

 }

}


ENDIF;

//?       Create Reversing entry for CM A/R account
//?Read with par.usr company number  instead of par.company number
EXECUTE FUNCTION(RTV Change Adj Amt     RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1339353;
PARAMETER(PAR.USR_Company_Number);
PARAMETER(PAR.USR_Invoice_Number);
PARAMETER(PAR.USR_Invoice_Suffix);
PARAMETER(WRK.Transaction_Amount);
{
 //?USER: Process Data record

 // PAR.USR Amount Applied = DB1.Amount Paid + PAR.Transaction Amount
 PAR.USR_Amount_Applied = DB1.Amount_Paid + PAR.Transaction_Amount;

 // PAR.USR Adjustments Total = DB1.Adjustment Amount + PAR.USR Amount Applied
 PAR.USR_Adjustments_Total = DB1.Adjustment_Amount + PAR.USR_Amount_Applied;

 // WRK.Remaining Balance Due = DB1.Transaction Amount - PAR.USR Adjustments Total
 WRK.Remaining_Balance_Due = DB1.Transaction_Amount - PAR.USR_Adjustments_Total;

 CASE;

 // IF WRK.Remaining Balance Due is equal to zero
 IF WRK.Remaining_Balance_Due = *ZERO;

 // WRK.Paid in Full Date = JOB.*Job date
 WRK.Paid_in_Full_Date = JOB.*Job_date;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Paid in Full Date = CON.*ZERO
 WRK.Paid_in_Full_Date = *ZERO;

 ENDIF;

 EXECUTE FUNCTION(CHG Adj Amount field   CH) TYPE(CHGOBJ) FILE(ARBDCPP)          AC1339354;
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Transaction_Amount);
 PARAMETER(DB1.Adjustment_Amount);
 PARAMETER(PAR.USR_Amount_Applied);
 PARAMETER(WRK.Remaining_Balance_Due);
 PARAMETER(WRK.Paid_in_Full_Date);
 PARAMETER(DB1.Days_to_Pay);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


// WRK.Transaction Amount = CON.*ZERO - WRK.Transaction Amount
WRK.Transaction_Amount = *ZERO - WRK.Transaction_Amount;

EXECUTE FUNCTION(RTV G/L Code           RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1348132;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(WRK.G_L_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PAR.G/L Code = DB1.G/L Code
 PAR.G_L_Code = DB1.G_L_Code;

}


//?If Co/Customer does not exist
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// WRK.G/L Code = CND.*Blanks
WRK.G_L_Code = *blanks;

ENDIF;

// Call program Val G/L Act Cde 2 HPE XF.
CALL PROGRAM(Val G/L Act Cde 2 HPE XF) ('PKVBXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.G_L_Code);
PARAMETER(WRK.G_L_Code_Desc_USR);
PARAMETER(WRK.G_L_ID_Code_JDE);
PARAMETER(WRK.G_L_Account_Type_1_USR);
PARAMETER(WRK.G_L_Account_Type_2_USR);
PARAMETER(WRK.Record_Found_USR);

// Call program VAL Acct ID JDE-8 dgt  UP.
CALL PROGRAM(VAL Acct ID JDE-8 dgt  UP) ('ARACTRET');
PARAMETER(WRK.G_L_ID_Code_JDE);
PARAMETER(NLL.Cost_Center);
PARAMETER(NLL.Object_Account);
PARAMETER(NLL.Subsidiary);
PARAMETER(NLL.Description);
PARAMETER(WRK.G_L_Posting_Company);
PARAMETER(NLL.JDE_Posting_Edit_Code_USR);
PARAMETER(NLL.Error_Return_text);

EXECUTE FUNCTION(RTV Next Seq. No.      RT) TYPE(RTVOBJ) FILE(ARBECPP)          AC1336580;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Invoice_Number);
PARAMETER(PAR.Invoice_Suffix);
PARAMETER(WRK.Sequence_Number);
{
 //?USER: Processing if Data record not found

 // PAR.Sequence Number = CON.1
 PAR.Sequence_Number = 1;

 //?USER: Process Data record

 // PAR.Sequence Number = DB1.Sequence Number
 PAR.Sequence_Number = DB1.Sequence_Number;

 //?USER: Exit processing

 // PAR.Sequence Number = PAR.Sequence Number + CON.1
 PAR.Sequence_Number = PAR.Sequence_Number + 1;

}


EXECUTE FUNCTION(CRT Reverse Entry Dtl  CR) TYPE(CRTOBJ) FILE(ARBECPP)          AC1339352;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Invoice_Number);
PARAMETER(PAR.Invoice_Suffix);
PARAMETER(WRK.Sequence_Number);
PARAMETER('ARC');
PARAMETER(WRK.Transaction_Amount);
PARAMETER(*BLANK);
PARAMETER('Credit A/R');
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_date);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER('ADJ');
PARAMETER('E');
PARAMETER(JOB.*PROGRAM);
PARAMETER(PAR.Effect_on_Account);
PARAMETER(WRK.G_L_Posting_Company);
PARAMETER(WRK.G_L_ID_Code_JDE);
PARAMETER('Y');
PARAMETER(LCL.A_R_TF_Exempt_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(PAR.A_R_Orig_Inv_for_CB);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.EDI_Status_1);
PARAMETER(WRK.EDI_Status_2);
PARAMETER(WRK.EDI_Status_3);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

//?slm 04/09/2008 ONLY allo Intr Company if org is Seaboard
//?Inter Company transaction
// LCL.Company Number = PAR.Company Number
LCL.Company_Number = PAR.Company_Number;

// Call program RTV Co. Dflt Int All,O XF.
CALL PROGRAM(RTV Co. Dflt Int All,O XF) ('PMRMXFR');
PARAMETER(LCL.Company_Number);
PARAMETER(NLL.Shipping_Method_Dft);
PARAMETER(NLL.Load_Type_Dft);
PARAMETER(NLL.LTL_Flag_Dft);
PARAMETER(NLL.Export_Status_Dft);
PARAMETER(NLL.Shrink_Wrap_Dft);
PARAMETER(NLL.Departure_Time_DFT);
PARAMETER(NLL.Export_Code_Dft);
PARAMETER(NLL.Allow_Mult_Whse_to_Order);
PARAMETER(NLL.Allow_Multi_Export_On_Ord);
PARAMETER(NLL.Slip_Sheet_Dft);
PARAMETER(NLL.Palletize_Dft);
PARAMETER(LCL.Company_Organization);

//?8/8/21 ONLY MAKE THE OFFSETTING ENTRIES IN HERE IR M3 = LIVE/PARALLEL
EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(LCL.Company_Number);
PARAMETER('M3LIVE');
PARAMETER(LCL.Live_with_M3);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?New for applying an OA or CM to a diff company   3/28/06
CASE;

// IF PAR.Access Denied (Y/N) is no
IF PAR.Access_Denied_Y_N = 'N';

// AND WRK.Adjustment Type Code is Spread
AND WRK.Adjustment_Type_Code = 'SPR';

// AND PAR.USR Invoice Suffix is CM or OA
AND PAR.USR_Invoice_Suffix = 'CM'/'OA';

// AND LCL.Company Organization is Seaboard
AND LCL.Company_Organization = 'S';

CASE;

// IF PAR.USR Company Number NE PAR.Company Number
IF PAR.USR_Company_Number <> PAR.Company_Number;

//?***************************************************
//?****  Create Trans for Old company/customer    ****
//?SLM 04/09/2008 - create new function to send back the exempt code
//?if not found then NE will be sent back, or invalid then NE will be sent
//?back
//?RMC 8/4/22 use the same A/R TF exempt code used when writing the other dtl
// WRK.Transaction Amount = CON.*ZERO - WRK.Transaction Amount
WRK.Transaction_Amount = 0 - WRK.Transaction_Amount;

EXECUTE FUNCTION(RTV G/L Code           RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1348132;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(WRK.G_L_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PAR.G/L Code = DB1.G/L Code
 PAR.G_L_Code = DB1.G_L_Code;

}


//?If Co/Customer does not exist
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// WRK.G/L Code = CND.*Blanks
WRK.G_L_Code = *blanks;

ENDIF;

// Call program Val G/L Act Cde 2 HPE XF.
CALL PROGRAM(Val G/L Act Cde 2 HPE XF) ('PKVBXFR');
PARAMETER(PAR.USR_Company_Number);
PARAMETER(WRK.G_L_Code);
PARAMETER(WRK.G_L_Code_Desc_USR);
PARAMETER(WRK.G_L_ID_Code_JDE);
PARAMETER(WRK.G_L_Account_Type_1_USR);
PARAMETER(WRK.G_L_Account_Type_2_USR);
PARAMETER(WRK.Record_Found_USR);

// Call program VAL Acct ID JDE-8 dgt  UP.
CALL PROGRAM(VAL Acct ID JDE-8 dgt  UP) ('ARACTRET');
PARAMETER(WRK.G_L_ID_Code_JDE);
PARAMETER(NLL.Cost_Center);
PARAMETER(NLL.Object_Account);
PARAMETER(NLL.Subsidiary);
PARAMETER(NLL.Description);
PARAMETER(WRK.G_L_Posting_Company);
PARAMETER(NLL.JDE_Posting_Edit_Code_USR);
PARAMETER(NLL.Error_Return_text);

// WRK.Sequence Number = CON.*ZERO
WRK.Sequence_Number = 0;

EXECUTE FUNCTION(RTV Next Seq. No.      RT) TYPE(RTVOBJ) FILE(ARBECPP)          AC1336580;
PARAMETER(PAR.USR_Company_Number);
PARAMETER(PAR.USR_Invoice_Number);
PARAMETER(PAR.USR_Invoice_Suffix);
PARAMETER(WRK.Sequence_Number);
{
 //?USER: Processing if Data record not found

 // PAR.Sequence Number = CON.1
 PAR.Sequence_Number = 1;

 //?USER: Process Data record

 // PAR.Sequence Number = DB1.Sequence Number
 PAR.Sequence_Number = DB1.Sequence_Number;

 //?USER: Exit processing

 // PAR.Sequence Number = PAR.Sequence Number + CON.1
 PAR.Sequence_Number = PAR.Sequence_Number + 1;

}


//?Inter Company
//?# 1
EXECUTE FUNCTION(CRT Reverse Entry Dtl  CR) TYPE(CRTOBJ) FILE(ARBECPP)          AC1339352;
PARAMETER(PAR.USR_Company_Number);
PARAMETER(PAR.USR_Invoice_Number);
PARAMETER(PAR.USR_Invoice_Suffix);
PARAMETER(WRK.Sequence_Number);
PARAMETER('ITC');
PARAMETER(WRK.Transaction_Amount);
PARAMETER(*BLANK);
PARAMETER('Debit A/R Account');
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_date);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER('ADJ');
PARAMETER('E');
PARAMETER(JOB.*PROGRAM);
PARAMETER(*BLANK);
PARAMETER(WRK.G_L_Posting_Company);
PARAMETER(WRK.G_L_ID_Code_JDE);
PARAMETER('Y');
PARAMETER(LCL.A_R_TF_Exempt_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.EDI_Status_1);
PARAMETER(WRK.EDI_Status_2);
PARAMETER(WRK.EDI_Status_3);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?       Create Reversing entry for CM A/R account
// WRK.Transaction Amount = CON.*ZERO - WRK.Transaction Amount
WRK.Transaction_Amount = *ZERO - WRK.Transaction_Amount;

//?If 360 chg to 960:  Credit 320.3830.101   : 320.OFFAR320
//?If 960 chg to 360:  Credit 960.1830.101   : 960.OFFAR960
//?If 360 chg to 440:  Credit 320.3830.105   : 320.OFFARSTF
//?If 960 chg to 440:  Credit 320.3830.105   : 320.OFFARSTF
//?If 440 chg to 360:  Credit 440.1830.105   : 440.OFFAR440
//?If 440 chg to 960:  Credit 320.3830.101   : 320.OFFAR320  same as above
CASE;

// IF PAR.USR Company Number is Guymon
IF PAR.USR_Company_Number = 360;

// WRK.G/L Posting Company = CON.320
WRK.G_L_Posting_Company = 320;

//?added 6.26.19
CASE;

// IF PAR.Company Number is NE Seaboard Triumph
IF PAR.Company_Number <> 440;

// LCL.MCR CGL Code = CND.OFFAR320
LCL.MCR_CGL_Code = 'OFFAR320';

//?added 6.26.19
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.MCR CGL Code = CND.OFFARSTF
LCL.MCR_CGL_Code = 'OFFARSTF';

ENDIF;

// Call program Exc Rtv M3 Dim f/CGL   XF.
CALL PROGRAM(Exc Rtv M3 Dim f/CGL   XF) ('PWBYXFR');
PARAMETER(WRK.G_L_Posting_Company);
PARAMETER(LCL.MCR_CGL_Code);
PARAMETER(LCL.MCR_GL_Acct_ID);

// WRK.G/L ID Code JDE = LCL.MCR GL Acct ID
WRK.G_L_ID_Code_JDE = LCL.MCR_GL_Acct_ID;

// IF PAR.USR Company Number is St. Joseph
IF PAR.USR_Company_Number = 960;

// WRK.G/L Posting Company = CON.960
WRK.G_L_Posting_Company = 960;

//?change OFFAR960 TO BACK TO  GL ID 02502562
// WRK.G/L ID Code JDE = CON.OFFAR960
WRK.G_L_ID_Code_JDE = 'OFFAR960';

// Call program Exc Rtv M3 Dim f/CGL   XF.
CALL PROGRAM(Exc Rtv M3 Dim f/CGL   XF) ('PWBYXFR');
PARAMETER(WRK.G_L_Posting_Company);
PARAMETER(WRK.G_L_ID_Code_JDE);
PARAMETER(LCL.MCR_GL_Acct_ID);

// WRK.G/L ID Code JDE = LCL.MCR GL Acct ID
WRK.G_L_ID_Code_JDE = LCL.MCR_GL_Acct_ID;

// IF PAR.USR Company Number is Sioux City
IF PAR.USR_Company_Number = 440;

// WRK.G/L Posting Company = CON.440
WRK.G_L_Posting_Company = 440;

// WRK.G/L ID Code JDE = CON.OFFAR440
WRK.G_L_ID_Code_JDE = 'OFFAR440';

// Call program Exc Rtv M3 Dim f/CGL   XF.
CALL PROGRAM(Exc Rtv M3 Dim f/CGL   XF) ('PWBYXFR');
PARAMETER(WRK.G_L_Posting_Company);
PARAMETER(WRK.G_L_ID_Code_JDE);
PARAMETER(LCL.MCR_GL_Acct_ID);

// WRK.G/L ID Code JDE = LCL.MCR GL Acct ID
WRK.G_L_ID_Code_JDE = LCL.MCR_GL_Acct_ID;

ENDIF;

// WRK.Sequence Number = CON.*ZERO
WRK.Sequence_Number = 0;

EXECUTE FUNCTION(RTV Next Seq. No.      RT) TYPE(RTVOBJ) FILE(ARBECPP)          AC1336580;
PARAMETER(PAR.USR_Company_Number);
PARAMETER(PAR.USR_Invoice_Number);
PARAMETER(PAR.USR_Invoice_Suffix);
PARAMETER(WRK.Sequence_Number);
{
 //?USER: Processing if Data record not found

 // PAR.Sequence Number = CON.1
 PAR.Sequence_Number = 1;

 //?USER: Process Data record

 // PAR.Sequence Number = DB1.Sequence Number
 PAR.Sequence_Number = DB1.Sequence_Number;

 //?USER: Exit processing

 // PAR.Sequence Number = PAR.Sequence Number + CON.1
 PAR.Sequence_Number = PAR.Sequence_Number + 1;

}


//?Inter Company
//?# 2
EXECUTE FUNCTION(CRT Reverse Entry Dtl  CR) TYPE(CRTOBJ) FILE(ARBECPP)          AC1339352;
PARAMETER(PAR.USR_Company_Number);
PARAMETER(PAR.USR_Invoice_Number);
PARAMETER(PAR.USR_Invoice_Suffix);
PARAMETER(WRK.Sequence_Number);
PARAMETER('ITC');
PARAMETER(WRK.Transaction_Amount);
PARAMETER(*BLANK);
PARAMETER('Credit Inter Co');
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_date);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER('ADJ');
PARAMETER('E');
PARAMETER(JOB.*PROGRAM);
PARAMETER(*BLANK);
PARAMETER(WRK.G_L_Posting_Company);
PARAMETER(WRK.G_L_ID_Code_JDE);
PARAMETER('Y');
PARAMETER(LCL.A_R_TF_Exempt_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.EDI_Status_1);
PARAMETER(WRK.EDI_Status_2);
PARAMETER(WRK.EDI_Status_3);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?***************************************************
//?***************************************************
//?****  Create Trans for New company/customer    ****
// WRK.Transaction Amount = CON.*ZERO - WRK.Transaction Amount
WRK.Transaction_Amount = *ZERO - WRK.Transaction_Amount;

//?RMC 8/4/22 use the same A/R TF exempt code used when writing the other dtl
//?If 360 chg to 960:  Debit  320.3830.101   : 320.OFFAR320
//?If 960 chg to 360:  Debit  960.1830.101   : 960.OFFAR960
//?If 360 chg to 440:  Debit  320.3830.105   : 320.OFFARSTF
//?If 960 chg to 440:  Debit  320.3830.105   : 320.OFFARSTF
//?If 440 chg to 360:  Debit  440.1830.105   : 440.OFFAR440
//?If 440 chg to 960:  Debit  320.3830.101   : 320.OFFAR320
CASE;

// IF PAR.Company Number is Guymon
IF PAR.Company_Number = 360;

// WRK.G/L Posting Company = CON.320
WRK.G_L_Posting_Company = 320;

CASE;

// IF PAR.Company Number is Guymon
IF PAR.Company_Number = 360;

// AND PAR.USR Company Number is Seaboard Triumph Foods
AND PAR.USR_Company_Number = 440;

// Call program Exc Rtv M3 Dim f/CGL   XF.
CALL PROGRAM(Exc Rtv M3 Dim f/CGL   XF) ('PWBYXFR');
PARAMETER(WRK.G_L_Posting_Company);
PARAMETER('OFFARSTF');
PARAMETER(LCL.MCR_GL_Acct_ID);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Exc Rtv M3 Dim f/CGL   XF.
CALL PROGRAM(Exc Rtv M3 Dim f/CGL   XF) ('PWBYXFR');
PARAMETER(WRK.G_L_Posting_Company);
PARAMETER('OFFAR320');
PARAMETER(LCL.MCR_GL_Acct_ID);

ENDIF;

// WRK.G/L ID Code JDE = LCL.MCR GL Acct ID
WRK.G_L_ID_Code_JDE = LCL.MCR_GL_Acct_ID;

// IF PAR.Company Number is St. Joseph
IF PAR.Company_Number = 960;

// WRK.G/L Posting Company = CON.960
WRK.G_L_Posting_Company = 960;

// Call program Exc Rtv M3 Dim f/CGL   XF.
CALL PROGRAM(Exc Rtv M3 Dim f/CGL   XF) ('PWBYXFR');
PARAMETER(WRK.G_L_Posting_Company);
PARAMETER('OFFAR960');
PARAMETER(LCL.MCR_GL_Acct_ID);

// WRK.G/L ID Code JDE = LCL.MCR GL Acct ID
WRK.G_L_ID_Code_JDE = LCL.MCR_GL_Acct_ID;

// IF PAR.Company Number is Seaboard Triumph Foods
IF PAR.Company_Number = 440;

// WRK.G/L Posting Company = CON.440
WRK.G_L_Posting_Company = 440;

// Call program Exc Rtv M3 Dim f/CGL   XF.
CALL PROGRAM(Exc Rtv M3 Dim f/CGL   XF) ('PWBYXFR');
PARAMETER(WRK.G_L_Posting_Company);
PARAMETER('OFFAR440');
PARAMETER(LCL.MCR_GL_Acct_ID);

// WRK.G/L ID Code JDE = LCL.MCR GL Acct ID
WRK.G_L_ID_Code_JDE = LCL.MCR_GL_Acct_ID;

ENDIF;

// WRK.Sequence Number = CON.*ZERO
WRK.Sequence_Number = 0;

EXECUTE FUNCTION(RTV Next Seq. No.      RT) TYPE(RTVOBJ) FILE(ARBECPP)          AC1336580;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.USR_Invoice_Number);
PARAMETER(PAR.USR_Invoice_Suffix);
PARAMETER(WRK.Sequence_Number);
{
 //?USER: Processing if Data record not found

 // PAR.Sequence Number = CON.1
 PAR.Sequence_Number = 1;

 //?USER: Process Data record

 // PAR.Sequence Number = DB1.Sequence Number
 PAR.Sequence_Number = DB1.Sequence_Number;

 //?USER: Exit processing

 // PAR.Sequence Number = PAR.Sequence Number + CON.1
 PAR.Sequence_Number = PAR.Sequence_Number + 1;

}


//?Inter Company
//?# 3
EXECUTE FUNCTION(CRT Reverse Entry Dtl  CR) TYPE(CRTOBJ) FILE(ARBECPP)          AC1339352;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.USR_Invoice_Number);
PARAMETER(PAR.USR_Invoice_Suffix);
PARAMETER(WRK.Sequence_Number);
PARAMETER('ITC');
PARAMETER(WRK.Transaction_Amount);
PARAMETER(*BLANK);
PARAMETER('Debit Inter Co');
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_date);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER('ADJ');
PARAMETER('E');
PARAMETER(JOB.*PROGRAM);
PARAMETER(*BLANK);
PARAMETER(WRK.G_L_Posting_Company);
PARAMETER(WRK.G_L_ID_Code_JDE);
PARAMETER('Y');
PARAMETER(LCL.A_R_TF_Exempt_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.EDI_Status_1);
PARAMETER(WRK.EDI_Status_2);
PARAMETER(WRK.EDI_Status_3);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?       Create Reversing entry for CM A/R account
// WRK.Transaction Amount = CON.*ZERO - WRK.Transaction Amount
WRK.Transaction_Amount = *ZERO - WRK.Transaction_Amount;

EXECUTE FUNCTION(RTV G/L Code           RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1348132;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(WRK.G_L_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PAR.G/L Code = DB1.G/L Code
 PAR.G_L_Code = DB1.G_L_Code;

}


//?If Co/Customer does not exist
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// WRK.G/L Code = CND.*Blanks
WRK.G_L_Code = *blanks;

ENDIF;

// Call program Val G/L Act Cde 2 HPE XF.
CALL PROGRAM(Val G/L Act Cde 2 HPE XF) ('PKVBXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.G_L_Code);
PARAMETER(WRK.G_L_Code_Desc_USR);
PARAMETER(WRK.G_L_ID_Code_JDE);
PARAMETER(WRK.G_L_Account_Type_1_USR);
PARAMETER(WRK.G_L_Account_Type_2_USR);
PARAMETER(WRK.Record_Found_USR);

// Call program VAL Acct ID JDE-8 dgt  UP.
CALL PROGRAM(VAL Acct ID JDE-8 dgt  UP) ('ARACTRET');
PARAMETER(WRK.G_L_ID_Code_JDE);
PARAMETER(NLL.Cost_Center);
PARAMETER(NLL.Object_Account);
PARAMETER(NLL.Subsidiary);
PARAMETER(NLL.Description);
PARAMETER(WRK.G_L_Posting_Company);
PARAMETER(NLL.JDE_Posting_Edit_Code_USR);
PARAMETER(NLL.Error_Return_text);

// WRK.Sequence Number = CON.*ZERO
WRK.Sequence_Number = 0;

EXECUTE FUNCTION(RTV Next Seq. No.      RT) TYPE(RTVOBJ) FILE(ARBECPP)          AC1336580;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.USR_Invoice_Number);
PARAMETER(PAR.USR_Invoice_Suffix);
PARAMETER(WRK.Sequence_Number);
{
 //?USER: Processing if Data record not found

 // PAR.Sequence Number = CON.1
 PAR.Sequence_Number = 1;

 //?USER: Process Data record

 // PAR.Sequence Number = DB1.Sequence Number
 PAR.Sequence_Number = DB1.Sequence_Number;

 //?USER: Exit processing

 // PAR.Sequence Number = PAR.Sequence Number + CON.1
 PAR.Sequence_Number = PAR.Sequence_Number + 1;

}


//?Inter Company
//?# 4
EXECUTE FUNCTION(CRT Reverse Entry Dtl  CR) TYPE(CRTOBJ) FILE(ARBECPP)          AC1339352;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.USR_Invoice_Number);
PARAMETER(PAR.USR_Invoice_Suffix);
PARAMETER(WRK.Sequence_Number);
PARAMETER('ITC');
PARAMETER(WRK.Transaction_Amount);
PARAMETER(*BLANK);
PARAMETER('Credit A/R Account');
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_date);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER('ADJ');
PARAMETER('E');
PARAMETER(JOB.*PROGRAM);
PARAMETER(*BLANK);
PARAMETER(WRK.G_L_Posting_Company);
PARAMETER(WRK.G_L_ID_Code_JDE);
PARAMETER('Y');
PARAMETER(LCL.A_R_TF_Exempt_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.EDI_Status_1);
PARAMETER(WRK.EDI_Status_2);
PARAMETER(WRK.EDI_Status_3);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?*****************
//?RMC NEW 10.26.17 to create Marketing Svs entries for 440 apply to 960
//?*****************
//?4/19/22 DO FOR 440 SPREAD TO 960 FOR E1 TOO
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?440 CM -- 960 in/cm/...
CASE;

// IF PAR.USR Company Number is Sioux City
IF PAR.USR_Company_Number = 440;

// AND PAR.Company Number is St. Joseph
AND PAR.Company_Number = 960;

//?RMC 6/20/19 made new CASE Below with companies switched
//?RMC 6/23/19 switch the accts below to the 2nd set
//?RMC 7/28/21 SDN440 change 362 to 320
//?If 440 chg to 960:  Credit 320.3830.101   : 320.OFFAR320
//?   Balance entry : Debit   320.3830.105   : 320.OFFARSTF
// WRK.G/L Posting Company = CON.960
WRK.G_L_Posting_Company = 960;

// Call program Exc Rtv M3 Dim f/CGL   XF.
CALL PROGRAM(Exc Rtv M3 Dim f/CGL   XF) ('PWBYXFR');
PARAMETER(WRK.G_L_Posting_Company);
PARAMETER('OFFAR320');
PARAMETER(LCL.MCR_GL_Acct_ID);

// WRK.G/L ID Code JDE = LCL.MCR GL Acct ID
WRK.G_L_ID_Code_JDE = LCL.MCR_GL_Acct_ID;

// WRK.Sequence Number = CON.*ZERO
WRK.Sequence_Number = 0;

EXECUTE FUNCTION(RTV Next Seq. No.      RT) TYPE(RTVOBJ) FILE(ARBECPP)          AC1336580;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.USR_Invoice_Number);
PARAMETER(PAR.USR_Invoice_Suffix);
PARAMETER(WRK.Sequence_Number);
{
 //?USER: Processing if Data record not found

 // PAR.Sequence Number = CON.1
 PAR.Sequence_Number = 1;

 //?USER: Process Data record

 // PAR.Sequence Number = DB1.Sequence Number
 PAR.Sequence_Number = DB1.Sequence_Number;

 //?USER: Exit processing

 // PAR.Sequence Number = PAR.Sequence Number + CON.1
 PAR.Sequence_Number = PAR.Sequence_Number + 1;

}


//?Inter Company
//?# 5
// WRK.G/L Posting Company = CON.320
WRK.G_L_Posting_Company = 320;

EXECUTE FUNCTION(CRT Reverse Entry Dtl  CR) TYPE(CRTOBJ) FILE(ARBECPP)          AC1339352;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.USR_Invoice_Number);
PARAMETER(PAR.USR_Invoice_Suffix);
PARAMETER(WRK.Sequence_Number);
PARAMETER('ITC');
PARAMETER(WRK.Transaction_Amount);
PARAMETER(*BLANK);
PARAMETER('Credit Inter Co');
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_date);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER('ADJ');
PARAMETER('E');
PARAMETER(JOB.*PROGRAM);
PARAMETER(*BLANK);
PARAMETER(WRK.G_L_Posting_Company);
PARAMETER(WRK.G_L_ID_Code_JDE);
PARAMETER('Y');
PARAMETER(LCL.A_R_TF_Exempt_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.EDI_Status_1);
PARAMETER(WRK.EDI_Status_2);
PARAMETER(WRK.EDI_Status_3);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// Call program Exc Rtv M3 Dim f/CGL   XF.
CALL PROGRAM(Exc Rtv M3 Dim f/CGL   XF) ('PWBYXFR');
PARAMETER(WRK.G_L_Posting_Company);
PARAMETER('OFFARSTF');
PARAMETER(LCL.MCR_GL_Acct_ID);

// WRK.G/L ID Code JDE = LCL.MCR GL Acct ID
WRK.G_L_ID_Code_JDE = LCL.MCR_GL_Acct_ID;

// WRK.Transaction Amount = CON.*ZERO - WRK.Transaction Amount
WRK.Transaction_Amount = *ZERO - WRK.Transaction_Amount;

// WRK.Sequence Number = CON.*ZERO
WRK.Sequence_Number = 0;

EXECUTE FUNCTION(RTV Next Seq. No.      RT) TYPE(RTVOBJ) FILE(ARBECPP)          AC1336580;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.USR_Invoice_Number);
PARAMETER(PAR.USR_Invoice_Suffix);
PARAMETER(WRK.Sequence_Number);
{
 //?USER: Processing if Data record not found

 // PAR.Sequence Number = CON.1
 PAR.Sequence_Number = 1;

 //?USER: Process Data record

 // PAR.Sequence Number = DB1.Sequence Number
 PAR.Sequence_Number = DB1.Sequence_Number;

 //?USER: Exit processing

 // PAR.Sequence Number = PAR.Sequence Number + CON.1
 PAR.Sequence_Number = PAR.Sequence_Number + 1;

}


//?Inter Company
//?# 6
EXECUTE FUNCTION(CRT Reverse Entry Dtl  CR) TYPE(CRTOBJ) FILE(ARBECPP)          AC1339352;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.USR_Invoice_Number);
PARAMETER(PAR.USR_Invoice_Suffix);
PARAMETER(WRK.Sequence_Number);
PARAMETER('ITC');
PARAMETER(WRK.Transaction_Amount);
PARAMETER(*BLANK);
PARAMETER('Debit Inter Co');
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_date);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER('ADJ');
PARAMETER('E');
PARAMETER(JOB.*PROGRAM);
PARAMETER(*BLANK);
PARAMETER(WRK.G_L_Posting_Company);
PARAMETER(WRK.G_L_ID_Code_JDE);
PARAMETER('Y');
PARAMETER(LCL.A_R_TF_Exempt_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.EDI_Status_1);
PARAMETER(WRK.EDI_Status_2);
PARAMETER(WRK.EDI_Status_3);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

//?960 CM -- 440 in/cm/...
CASE;

// IF PAR.USR Company Number is St. Joseph
IF PAR.USR_Company_Number = 960;

// AND PAR.Company Number is Sioux City
AND PAR.Company_Number = 440;

//?RMC 6/20/19 made new CASE with companies switched
//?RMC 6/23/19 switch the accts below to the 2nd set
//?RMC 7/28/21 SDN440 change 362 to 320
//?If 440 chg to 960: Debit   320.3830.101   : 320.OFFAR320
//?   Balance entry : Credit  320.3830.105   : 320.OFFARSTF
// WRK.G/L Posting Company = CON.960
WRK.G_L_Posting_Company = 960;

// Call program Exc Rtv M3 Dim f/CGL   XF.
CALL PROGRAM(Exc Rtv M3 Dim f/CGL   XF) ('PWBYXFR');
PARAMETER(WRK.G_L_Posting_Company);
PARAMETER('OFFARSTF');
PARAMETER(LCL.MCR_GL_Acct_ID);

// WRK.G/L ID Code JDE = LCL.MCR GL Acct ID
WRK.G_L_ID_Code_JDE = LCL.MCR_GL_Acct_ID;

// WRK.Sequence Number = CON.*ZERO
WRK.Sequence_Number = 0;

EXECUTE FUNCTION(RTV Next Seq. No.      RT) TYPE(RTVOBJ) FILE(ARBECPP)          AC1336580;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.USR_Invoice_Number);
PARAMETER(PAR.USR_Invoice_Suffix);
PARAMETER(WRK.Sequence_Number);
{
 //?USER: Processing if Data record not found

 // PAR.Sequence Number = CON.1
 PAR.Sequence_Number = 1;

 //?USER: Process Data record

 // PAR.Sequence Number = DB1.Sequence Number
 PAR.Sequence_Number = DB1.Sequence_Number;

 //?USER: Exit processing

 // PAR.Sequence Number = PAR.Sequence Number + CON.1
 PAR.Sequence_Number = PAR.Sequence_Number + 1;

}


//?Inter Company
//?# 5
// WRK.G/L Posting Company = CON.320
WRK.G_L_Posting_Company = 320;

EXECUTE FUNCTION(CRT Reverse Entry Dtl  CR) TYPE(CRTOBJ) FILE(ARBECPP)          AC1339352;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.USR_Invoice_Number);
PARAMETER(PAR.USR_Invoice_Suffix);
PARAMETER(WRK.Sequence_Number);
PARAMETER('ITC');
PARAMETER(WRK.Transaction_Amount);
PARAMETER(*BLANK);
PARAMETER('Credit Inter Co');
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_date);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER('ADJ');
PARAMETER('E');
PARAMETER(JOB.*PROGRAM);
PARAMETER(*BLANK);
PARAMETER(WRK.G_L_Posting_Company);
PARAMETER(WRK.G_L_ID_Code_JDE);
PARAMETER('Y');
PARAMETER(LCL.A_R_TF_Exempt_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.EDI_Status_1);
PARAMETER(WRK.EDI_Status_2);
PARAMETER(WRK.EDI_Status_3);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// Call program Exc Rtv M3 Dim f/CGL   XF.
CALL PROGRAM(Exc Rtv M3 Dim f/CGL   XF) ('PWBYXFR');
PARAMETER(WRK.G_L_Posting_Company);
PARAMETER('OFFAR320');
PARAMETER(LCL.MCR_GL_Acct_ID);

// WRK.G/L ID Code JDE = LCL.MCR GL Acct ID
WRK.G_L_ID_Code_JDE = LCL.MCR_GL_Acct_ID;

// WRK.Transaction Amount = CON.*ZERO - WRK.Transaction Amount
WRK.Transaction_Amount = *ZERO - WRK.Transaction_Amount;

// WRK.Sequence Number = CON.*ZERO
WRK.Sequence_Number = 0;

EXECUTE FUNCTION(RTV Next Seq. No.      RT) TYPE(RTVOBJ) FILE(ARBECPP)          AC1336580;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.USR_Invoice_Number);
PARAMETER(PAR.USR_Invoice_Suffix);
PARAMETER(WRK.Sequence_Number);
{
 //?USER: Processing if Data record not found

 // PAR.Sequence Number = CON.1
 PAR.Sequence_Number = 1;

 //?USER: Process Data record

 // PAR.Sequence Number = DB1.Sequence Number
 PAR.Sequence_Number = DB1.Sequence_Number;

 //?USER: Exit processing

 // PAR.Sequence Number = PAR.Sequence Number + CON.1
 PAR.Sequence_Number = PAR.Sequence_Number + 1;

}


//?Inter Company
//?# 6
EXECUTE FUNCTION(CRT Reverse Entry Dtl  CR) TYPE(CRTOBJ) FILE(ARBECPP)          AC1339352;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.USR_Invoice_Number);
PARAMETER(PAR.USR_Invoice_Suffix);
PARAMETER(WRK.Sequence_Number);
PARAMETER('ITC');
PARAMETER(WRK.Transaction_Amount);
PARAMETER(*BLANK);
PARAMETER('Debit Inter Co');
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_date);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER('ADJ');
PARAMETER('E');
PARAMETER(JOB.*PROGRAM);
PARAMETER(*BLANK);
PARAMETER(WRK.G_L_Posting_Company);
PARAMETER(WRK.G_L_ID_Code_JDE);
PARAMETER('Y');
PARAMETER(LCL.A_R_TF_Exempt_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.EDI_Status_1);
PARAMETER(WRK.EDI_Status_2);
PARAMETER(WRK.EDI_Status_3);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

ENDIF;

ENDIF;

ENDIF;

