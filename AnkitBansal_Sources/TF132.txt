      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      Trimump Foods
      * PROGRAM:     TF132
      * TITLE:       Invoice: Revise Invoice Charge
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     03/09/05
      *
      *
      * FUNCTION: Uses an edit record format to add/change/delete records.
      *
      *           This program is called from TF432-Work with Invoice Charges.
      *
      *           We populate the System-Generated Flag with N=No for all records
      *           created thru this program.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      /eject
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Ftfd132    cf   e             workstn infds(iofeed)
      *
      *
     Fcaabrel1  if   e           k disk
      *    Company name and address
      *
      *
     Ftfp005    if   e           k disk    prefix(p1)
      *    Charge codes
      *
      *
     Ftfp006    if   e           k disk
      *    System modules
      *
      *
     Ftfp020    if   e           k disk
      *    Invoice header
      *
      *
     Ftfj021b   if   e           k disk
      *   Invoice charges + Charge codes
      *
      *
     Ftfp021    uf a e           k disk    rename(icrec:icrec2) prefix(p2)
      *   Invoice charges
      *
      *
     Ftfp097    if   e           k disk
      *    Status
      *
      *
     Ftfp098    if   e           k disk
      *    Charge frequencies
      *
      /eject
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D create          c                   'CREATE'
     D revise          c                   'REVISE'
     D delete          c                   'DELETE'
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
     D update          c                   'UPDATE'
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D rtncd           s              2
     D action          s                   like(mode)
     D maxmsg          s              2  0  inz(20)
      *
      *
      * Control fields
      *
     D userfl          s              1    inz('N')
      *
      *
      * Workfields for date manipulation
      *
     D wkisodate       s               d   datfmt(*iso)
      *
      *
      * Parms
      *
     D xxicsn          s                   like(icicsn)
      *
     D xxaist          s                   like(ccaist)
     D xxucfl          s                   like(ccucfl)
      *
     D xxcccd          s                   like(cccccd)
     D xxccds          s                   like(ccccds)
      *
     D xxcono          s                   like(cccono)
     D xxglcd          s                   like(ccgldbcd)
     D xxglcdds        s             25
      *
     D xxstatus        s                   like(ststcd)
     D xxsystem        s              3
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /eject
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     update        $upd1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /eject
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * If incoming mode is REVISE or DELETE, then retrieve the database
      * record.  Do not lock the record.  Typically, in DELETE mode, these
      * values will not be displayed. However, if there is an error on the
      * delete action, the panel will be displayed with messages.
      *
     C                   select
     C                   when      mode = create                                WH create
     C                   move      yes           userfl
     C                   move      *blank        d1cccd
     C                   move      *blank        d1ccds
     C                   z-add     0             d1icdtmdy
     C                   z-add     0             d1icam
     C                   z-add     0             d1unit
     C                   move      *blank        d1iccom
     C                   move      *blank        d1sysfl
     C                   move      *blank        d1stds
      *
     C                   z-add     0             d1insn
     C                   z-add     0             d1indtmdy
     C                   z-add     0             d1dudtmdy
      *
     C                   exsr      $clear
      *
     C                   when      mode = revise or mode = delete               WH revise/delete
     C     d1icsn        chain     tfj021b                            92
     C                   if        *in92 = *on                                  If no hit
     C                   seton                                        62
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09008'
     C                   endif
     C                   else
      *
     C                   move      iccccd        d1cccd
     C                   move      icsysfl       d1sysfl
     C                   z-add     icicam        d1icam
     C                   z-add     icunit        d1unit
     C                   move      iciccom       d1iccom
     C                   z-add     icinsn        d1insn
     C                   move      icinfl        d1infl
     C                   move      icsmcd        d1smcd
      *
     C                   move      ccccds        d1ccds
     C                   move      cccccd        d1cccd2
     C                   z-add     cccono        d1cono
     C                   move      ccgldbcd      d1gldbcd
     C                   move      ccglcrcd      d1glcrcd
     C                   move      cccfqcd       d1cfqcd
     C                   move      ccucfl        d1ucfl
     C                   move      ccaist        d1aist
      *
      * Set a control flag depending on whether the Charge Code is
      * "user-controlled" or not.
      *
     C                   if        ccucfl = yes
     C                   move      yes           userfl
     C                   else
     C                   move      no            userfl
     C                   endif
      *
      * Flip Invoice Charge Date from CCYYMMDD to MMDDYY for display
      *
     C     *iso          test(d)                 icicdt                 92
     C                   if        *in92 = *off                                 If OK date
     C                   move      icicdt        wkisodate
     C     *mdy          move      wkisodate     d1icdtmdy
     C                   endif                                                  If OK date
      *
      * Retrieve descriptions
      *
     C                   exsr      $desc
      *
      * Retrieve Invoice dates for display
      *
     C                   if        d1insn <> 0
     C                   exsr      $invoice
     C                   endif
     C                   endif                                                  If no hit
      *
     C                   endsl
      *
      * If the user is deleting and there were no errors when retrieving the
      * record, go on to the update routine without displaying the screen.
      * Otherwise, display the screen.
      *
     C                   if        error = 0 and action = delete                If no error
     C                   eval      routne = update
     C                   else
     C                   eval      routne = scrn1
     C                   endif                                                  If no error
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Set indicators to control input/output fields and available
      * function keys.
     C                   exsr      $ind
      *
      *
      * Write screen 1 to CRT
      *
     C                   write     tf132k1
     C                   write     tf132ec
     C                   exfmt     tf132r1
      *
      * Clear messages
     C                   exsr      $clmsg
      *
      *
      * Reset action to be equal to the incoming mode.  This is required
      * in case the user took F11-Delete and got an error on the
      * deletion and now needs to be able to change the record and take
      * an action other than delete
      *
     C                   eval      action = mode
      *
      * Get user's input and set routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      rtncd = '03'
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4=prompt
     C                   exsr      $f4s1
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   eval      routne = set1
      *
     C                   when      *in11 = *on or mode = delete                 F11-delete
     C                   eval      action = delete
     C                   eval      routne = update
      *
     C                   when      *in12 = *on                                  F12-previous
     C                   eval      rtncd = '12'
     C                   eval      routne = exit
     C                   other
      *
      * User has pressed enter
      *
     C                   eval      routne = edit1
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Set indicators to control/protect screen fields
      *----------------------------------------------------------------
      *
     C     $ind          begsr
      *
     c                   select
     C                   when      mode = revise
     C                   seton                                        60
      *
     C                   when      mode = create
     C                   seton                                        61
      *
     C                   when      mode = delete
     C                   seton                                        62
     c                   endsl
      *
     C                   if        userfl = no
     C                   seton                                        63
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Edit input fields for screen 1
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * *IN62 will be on if the record the user is trying to access has
      * been deleted by another user.  So, only perform the edits for the
      * fields on the screen if the indicator is off
      *
     C                   if        *in62 = *off                                 If here
      *
      * Validate everything when:
      *   1) You are creating
      *   2) You are revising a Charge Invoice that has a Charge Code with a
      *      User-Controlled Flag of YES
      * Otherwise:
      *    Validate nothing since the "Comment" field (which is not required)
      *    is the only field not protected.
      *
     C                   if        mode = create or
     C                             (mode = revise and userfl = yes)
     C                   exsr      $icdtmdy
     C                   exsr      $icam
     C                   exsr      $cccd
     C                   endif
      *
     C                   endif                                                  If here
      *
      * If there are no errors, attempt the write/update; otherwise,
      * redisplay the screen.  If a record has been deleted out from
      * under the user (*IN62 is ON), then the error message will be
      * issued in the update subroutine.  So, always perform this code.
      *
     C                   if        error = 0
     C                   exsr      $upd1
     C                   else
     C                   eval      routne = scrn1
     C                   endif
      *
     C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * Validate Invoice Charge date
      *------------------------------------------------------------------------------------
      *
     C     $icdtmdy      begsr
      *
     C                   select
     C                   when      d1icdtmdy = 0
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
      *
     C                   when      d1icdtmdy < 0
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 d1icdtmdy              92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   endif                                                  If bad date
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Invoice Charge Amount
      *---------------------------------------------------------------
      *
      * Validations:
      *   1) Cannot be zero
      *
     C     $icam         begsr
      *
     C                   if        d1icam = 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09001'     mgid(e)
     C                   endif
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Charge Code
      *---------------------------------------------------------------
      *
      * Validations:
      *    1) Must be valid in Charge Code master
      *    2) Must be an 'Active' code
      *    3) Must be a 'User-Controlled' code
      *
     C     $cccd         begsr
      *
     C                   move      *blank        d1ccds
      *
     C                   select
     C                   when      d1cccd = *blank
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09001'     mgid(e)
     C                   endif
     C                   other
      *
     C     d1cccd        chain     tfp005                             92
     C                   if        *in92 = *on                                  If no hit
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08029'     mgid(e)
     C                   movea     d1cccd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   else
      *
     C                   move      p1ccccds      d1ccds
      *
      * Charge Code must be Active
      *
     C                   if        p1ccaist <> 'A'
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08030'     mgid(e)
     C                   movea     d1cccd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif
      *
      * Charge Code must be User-Controlled
      *
     C                   if        p1ccucfl <> yes
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08031'     mgid(e)
     C                   movea     d1cccd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif
      *
     C                   endif                                                  If no hit
     C                   endsl
      *
      * If there are errors on the Charge Code, clear all the Charge Code
      * output only fields at the bottom of the screen. If the Charge
      * Code is valid, populate those fields.
      *
     C                   if        *in33 = *on
     C                   exsr      $clear
     C                   else
     C                   move      p1cccccd      d1cccd2
     C                   move      p1ccccds      d1ccds
     C                   z-add     p1cccono      d1cono
     C                   move      p1ccgldbcd    d1gldbcd
     C                   move      p1ccglcrcd    d1glcrcd
     C                   move      p1cccfqcd     d1cfqcd
     C                   move      p1ccucfl      d1ucfl
     C                   move      p1ccinfl      d1infl
     C                   move      p1ccsmcd      d1smcd
     C                   move      p1ccaist      d1aist
     C                   exsr      $desc
     C                   endif
      *
     C                   endsr
      /eject
      *--------------------------------------------------------------------------
      * Clear all the Charge Code fields displayed at the bottom of the screen
      *--------------------------------------------------------------------------
      *
     C     $clear        begsr
      *
     C                   move      *blank        d1cccd2
     C                   move      *blank        d1ccds
     C                   z-add     0             d1cono
     C                   move      *blank        d1conm
     C                   move      *blank        d1gldbcd
     C                   move      *blank        d1gldbcdds
     C                   move      *blank        d1glcrcd
     C                   move      *blank        d1glcrcdds
     C                   move      *blank        d1cfqcd
     C                   move      *blank        d1cfqds
     C                   move      *blank        d1ucfl
     C                   move      *blank        d1infl
     C                   move      *blank        d1smcd
     C                   move      *blank        d1smds
     C                   move      *blank        d1aist
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * F4 prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      * Charge code
     C                   select
     C                   when      fld = 'D1CCCD' and userfl = yes
     C                   call      'TF513'
     C                   parm      'A'           xxaist
     C                   parm      'Y'           xxucfl
     C                   parm      *blank        xxcccd
     C                   parm      *blank        xxccds
     C                   seton                                        53
     C                   if        xxcccd <> *blank
     C                   move      xxcccd        d1cccd
     C                   endif
     C                   other
      *
      * F4 not valid for this field...issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error                                        013
     C                   movel     'HS09011'     mgid(e)
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Write/update/delete record in database file
      *----------------------------------------------------------------
      *
     C     $upd1         begsr
      *
      * If deleting, perform deletion integrity checks.
      *
     C                   if        action = delete
     C                   exsr      $dltck
     C                   endif
      *
      * If user action is revising or deleting, determine that the
      * record he is accessing still exists prior to attempting to
      * update.  Lock the record for update.
      *
     C                   if        error = 0 and                                If OK
     C                             (action = delete or action = revise)
     C     d1icsn        chain     tfp021                             92
     C                   if        *in92 = *on                                  If not found
     C                   seton                                        62
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09008'
     C                   endif
     C                   endif                                                  If not found
     C                   endif                                                  If OK
      *
      *
      * If there are no errors, delete, revise or create the record.
      *
     C                   if        error = 0                                    If no error
      *
     c                   select
     C                   when      action = delete
     C                   delete    icrec2
     C                   other
      *
      * Move DSPF fields to database file fields
      *
     C                   move      d1cccd        p2iccccd
     C                   move      d1infl        p2icinfl
     C                   move      d1smcd        p2icsmcd
     C                   z-add     d1icam        p2icicam
     C                   z-add     d1unit        p2icunit
     C                   move      d1iccom       p2iciccom
      *
      * Flip date from mmddyy to ccyymmdd using the 'date format' field
      * to add the century values.
      *
     C     *mdy          move      d1icdtmdy     wkisodate
     C                   move      wkisodate     p2icicdt
      *
     C                   if        action = create
     C                   exsr      $defaults
     C                   write     icrec2
     C                   else
     C                   update    icrec2
     C                   endif                                                  If create
     C                   endsl
     C                   endif                                                  If no error
      *
      * Always redisplay when:
      *     1) there are errors
      *     2) you are creating records
      *
     C                   select
     C                   when      error > 0
     C                   movel     scrn1         routne
      *
     C                   when      mode = create
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09040'
     C                   eval      routne = set1
     C                   movel     set1          routne
     C                   other
      *
     C                   eval      rtncd = '00'
     C                   movel     exit          routne
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Set defaults when creating a new record
      *---------------------------------------------------------------
      *
     C     $defaults     begsr
      *
      * Set the System-generated Flag to NO
      * Set the Invoice Status to Open
      *
     C                   move      no            p2icsysfl
     C                   move      'O'           p2icinstcd
      *
      * Get the next system-assigned 'Invoice Charge Number'.
      *
     C                   call      'TF807'
     C     p2icicsn      parm      0             xxicsn
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Deletion integrity checks
      *---------------------------------------------------------------
      *
      * You cannot delete an Invoice Charge record if it:
      *  1) Has a Charge Code that is not User-Controlled
      *
      * But, we have inactiviated the Delete Function key when the Charge Code
      * is not User-Controlled; so, you really don't have to check anything if
      * the check above continues to be the only check.
      *
     C     $dltck        begsr
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Set on last record indicator and end job
      *----------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        lr
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Retrieve descriptions
      *---------------------------------------------------------------
      *
     C     $desc         begsr
      *
      * Invoice status
      *
     C     icinstcd      chain     tfp097                             92
     C                   if        *in92 = *off
     C                   move      ststds        d1stds
     C                   endif
      *
      * Company name
      *
     C     d1cono        chain     caabrel1                           92
     C                   if        *in92 = *off
     C                   move      abadtx        d1conm
     C                   endif
      *
      * GL debit code description
      *
     C                   call      'TF805'
     C                   parm      d1cono        xxcono
     C                   parm      d1gldbcd      xxglcd
     C     d1gldbcdds    parm      *blank        xxglcdds
     C                   parm      *blank        xxsystem
     C                   parm      *blank        xxstatus
      *
      *
      * GL credit code description
      *
     C                   call      'TF805'
     C                   parm      d1cono        xxcono
     C                   parm      d1glcrcd      xxglcd
     C     d1glcrcdds    parm      *blank        xxglcdds
     C                   parm      *blank        xxsystem
     C                   parm      *blank        xxstatus
      *
      *
      * System module
      *
     C     d1smcd        chain     tfp006                             92
     C                   if        *in92 = *off
     C                   move      smsmds        d1smds
     C                   endif
      *
      * Charge frequency
      *
     C     d1cfqcd       chain     tfp098                             92
     C                   if        *in92 = *off
     C                   move      cfcfqds       d1cfqds
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Retrieve Invoice Header info
      *---------------------------------------------------------------
      *
     C     $invoice      begsr
      *
     C     d1insn        chain     tfp020                             92
     C                   if        *in92 = *off
      *
      * Flip Invoice Date from CCYYMMDD to MMDDYY for display
      *
     C                   if        ihindt <> 0
     C     *iso          test(d)                 ihindt                 92
     C                   if        *in92 = *off                                 If OK date
     C                   move      ihindt        wkisodate
     C     *mdy          move      wkisodate     d1indtmdy
     C                   endif                                                  If OK date
     C                   endif
      *
      * Flip Due Date from CCYYMMDD to MMDDYY for display
      *
     C                   if        ihdudt <> 0
     C     *iso          test(d)                 ihdudt                 92
     C                   if        *in92 = *off                                 If OK date
     C                   move      ihdudt        wkisodate
     C     *mdy          move      wkisodate     d1dudtmdy
     C                   endif                                                  If OK date
     C                   endif
      *
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Key lists
      *  None
      *
      * Parm Lists
      *
     C     *entry        plist
     C     d1mode        parm                    mode
     C                   parm                    d1icsn
     C                   parm                    rtncd
      *
     C                   movel     mode          action
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /eject
