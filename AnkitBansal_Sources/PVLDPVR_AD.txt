// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PVLDPVR
// ?Date: 14.08.2025 Time: 03:52:26
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?***** Change Log and comments
DO;

//?*****
//?07/22/2025 JM WI642_1
//?** Validate order and simulate shipping using this screen,
//?** it will be similar to order shipped from Carlisle.
ENDDO;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.Allow_Multi_Company);
PARAMETER(LCL.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Load screen

// DTL.Company Number = CON.360
DTL.Company_Number = 360;

//?USER: Validate fields

//?Validate company
CASE;

// IF DTL.Company Number is greater than zero
IF DTL.Company_Number > *ZERO;

EXECUTE FUNCTION(Val Company Number    RT) TYPE(RTVOBJ) FILE(CAABREP)           AC1343408;
PARAMETER(DTL.Company_Number);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'Company not found.'
ERROR(USR2831);
MSGPARM(DTL.Company_Number);

QUIT;

ENDIF;

ENDIF;

//?Validate Order
CASE;

// IF DTL.Order Number is Greater then zero
IF DTL.Order_Number > *ZERO;

EXECUTE FUNCTION(Val Order Hdr Exists   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1316396;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Order Number is not found'
ERROR(USR1362);
MSGPARM(DTL.Order_Number);

QUIT;

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV All Fields         RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1571206;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(NLL.Order_Type_Sales);
PARAMETER(NLL.AR_Customer_Number);
PARAMETER(NLL.Ship_To_Customer);
PARAMETER(NLL.Ship_To_Name);
PARAMETER(NLL.Ship_To_Address_Line_1);
PARAMETER(NLL.Ship_To_Address_Line_2);
PARAMETER(NLL.Ship_To_Address_Line_3);
PARAMETER(NLL.Ship_To_City);
PARAMETER(NLL.Ship_To_State_Code);
PARAMETER(NLL.Ship_To_Zip_Postal_Code);
PARAMETER(NLL.Bill_to_Customer);
PARAMETER(NLL.Bill_to_Name);
PARAMETER(NLL.Bill_to_Address_Line_1);
PARAMETER(NLL.Bill_to_Address_Line_2);
PARAMETER(NLL.Bill_to_Address_Line_3);
PARAMETER(NLL.Bill_to_City);
PARAMETER(NLL.Bill_to_State_Code);
PARAMETER(NLL.Bill_to_Zip_Postal_Code);
PARAMETER(NLL.Customer_Purchase_Order_#);
PARAMETER(NLL.Order_Date);
PARAMETER(NLL.Requested_Ship_Date);
PARAMETER(LCL.Actual_Shipped_Date);
PARAMETER(NLL.Cancel_Date);
PARAMETER(NLL.Terms_Code);
PARAMETER(NLL.Special_Instructions);
PARAMETER(NLL.Special_Instructions_2);
PARAMETER(NLL.Carrier_Code);
PARAMETER(NLL.Comment_Print_Acknowledge);
PARAMETER(NLL.Comment_Print_Inv_Cr_Memo);
PARAMETER(NLL.Comment_Print_Pick_Slip);
PARAMETER(NLL.Comment_Print_Ship_Doc);
PARAMETER(NLL.Reason_Code);
PARAMETER(NLL.Order_in_Use);
PARAMETER(LCL.Header_Status);
PARAMETER(NLL.Header_Status_Last);
PARAMETER(NLL.Order_Type_Print_Status);
PARAMETER(LCL.Scheduled_Ship_Date);
PARAMETER(NLL.User_Original_Entry);
PARAMETER(NLL.Date_of_Original_Entry);
PARAMETER(NLL.Order_Value_Total);
PARAMETER(NLL.Order_Weight_Total);
PARAMETER(NLL.Credit_Hold);
PARAMETER(NLL.Production_Hold);
PARAMETER(NLL.New_Customer_Hold);
PARAMETER(NLL.Requested_Delivery_Date);
PARAMETER(NLL.Requested_Delivery_Time);
PARAMETER(NLL.Accounts_Receiv_Ent_1);
PARAMETER(NLL.Accounts_Receiv_Ent_2);
PARAMETER(LCL.Load_ID);
PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
PARAMETER(NLL.Rated_Freight);
PARAMETER(NLL.LTL_Flag);
PARAMETER(NLL.Price_Audit);
PARAMETER(NLL.Price_Status);
PARAMETER(NLL.Shipping_Method);
PARAMETER(NLL.Export_Status);
PARAMETER(NLL.Palletize);
PARAMETER(NLL.Shrink_Wrap);
PARAMETER(NLL.Slip_Sheet);
PARAMETER(NLL.Age_Code);
PARAMETER(NLL.Reefer_Temperature);
PARAMETER(NLL.Load_Type);
PARAMETER(NLL.Attach_to_Invoice_Number);
PARAMETER(NLL.Load_Plan_Order);
PARAMETER(NLL.Print_Pick_Slip);
PARAMETER(NLL.Resell_Reference_Number);
PARAMETER(NLL.Special_Comment_1);
PARAMETER(NLL.Special_Comment_2);
PARAMETER(NLL.Affect_Auto_Accruals);
PARAMETER(NLL.Sales_Route_Code);
PARAMETER(NLL.Manager_Level_Code);
PARAMETER(NLL.VP_Level_Code);
PARAMETER(NLL.Attach_to_Order_Number);
PARAMETER(NLL.Reason_for_Price_Audit);
PARAMETER(NLL.Invoice_Number);
PARAMETER(NLL.Invoice_Suffix);
PARAMETER(NLL.Invoice_Date);
PARAMETER(NLL.Event_Code);
PARAMETER(NLL.Trans_Contol_AS400_Plant);
PARAMETER(NLL.Modified_Flag);
PARAMETER(NLL.A_R_order_Value_Total);
PARAMETER(NLL.Billing_Activity_Type);
PARAMETER(LCL.Block_Order_Flag);
PARAMETER(NLL.Order_Certification_Flag);
PARAMETER(NLL.Invoice_Order_Value_Tot);
PARAMETER(NLL.Process_Sts_for_3C);
PARAMETER(NLL.Order_Conf_Fax_Sts);
PARAMETER(NLL.Manifest_Fax_Sts);
PARAMETER(NLL.Invoice_Fax_Sts);
PARAMETER(NLL.Transfer_in_Storage_Ind);
PARAMETER(NLL.Email_Cust_On_Order_Ship);
PARAMETER(NLL.Order_Emailed);
PARAMETER(NLL.Export_Docs_Go_w_Driver);
PARAMETER(NLL.Shipping_Temp_Code_C_F);
PARAMETER(NLL.Broker_Order_Status);
PARAMETER(NLL.Air_Freight_Order);
PARAMETER(NLL.Order_Requires_Review);
PARAMETER(NLL.OH_Load_Plan_Ready);
PARAMETER(NLL.Export_USDA_Approved);
PARAMETER(NLL.HPB_Ship_to_Warehouse);
PARAMETER(NLL.OH_TF_Exempt_Code);
PARAMETER(NLL.OH_Appt_Confirmation_Dt);
PARAMETER(NLL.JPN_Invoice_Issuance_Date);
PARAMETER(NLL.Load_Actual_Shipped_Date);
PARAMETER(NLL.Load_BOL_Complete_Date);
PARAMETER(NLL.Load_Truck_Departure_Date);
PARAMETER(NLL.Maximum_Gross_Weight);
PARAMETER(NLL.Time_of_Original_Entry);
PARAMETER(NLL.OH_Appt_Confirmation_Tm);
PARAMETER(NLL.Load_BOL_Complete_Time);
PARAMETER(NLL.Load_Truck_Departure_Time);
PARAMETER(NLL.Act_Frt_Reference_Amount);
PARAMETER(NLL.Act_Non_Ref_Frt_Amount);
PARAMETER(NLL.OH_Fuel_Surcharge_Amount);
PARAMETER(NLL.OH_Total_Non_Ref_Frt_Amt);
PARAMETER(NLL.OH_Total_Ref_Frt_Amt);
PARAMETER(NLL.Claim_Number);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(NLL.Job_Time);
PARAMETER(NLL.User_Id);
PARAMETER(NLL.Job_Name);
PARAMETER(NLL.Job_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV 1st Whse/Country   RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1426676;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(1);
PARAMETER(1);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.Country_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Show error if block order
CASE;

// IF LCL.Block Order Flag is Firm Order
IF LCL.Block_Order_Flag = 'F';

//?Show error if block order
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Block order can not be shipped.'
ERROR(USR5557);

QUIT;

ENDIF;

//?Validate warehouse is Live with Carlisle
CASE;

// IF LCL.Warehouse Code is Not Blanks
IF LCL.Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(Rtv EDI 856 ASN Info RT) TYPE(RTVOBJ) FILE(CAADREP)            AC2234972;
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.Warehouse_Location);
PARAMETER(LCL.WHS_Live_with_Carlisle);
PARAMETER(NLL.WHS_PFS_Interface);
PARAMETER(NLL.Crt_856_ASN_for_3PL_Whse);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Warehouse Location is Internal (Plant)
IF LCL.Warehouse_Location = 'I';

// AND LCL.WHS Live with Carlisle is Yes
AND LCL.WHS_Live_with_Carlisle = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse is Not Live with Carlisle.'
ERROR(USR5556);

QUIT;

ENDIF;

ENDIF;

//?Show error if order can not be shipped
CASE;

// IF LCL.Header Status is Not Conf/Comp (PFS)
IF LCL.Header_Status = 'L'/'A'/'E'/'H';

//?Show error if order can not be shipped
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Order can not be shipped'
ERROR(USR5555);
MSGPARM(DTL.Company_Number);
MSGPARM(DTL.Order_Number);

QUIT;

ENDIF;

//?Validate Scheduled Ship Date
CASE;

// IF LCL.Scheduled Ship Date is not entered
IF LCL.Scheduled_Ship_Date = *ZERO;

// Send error message - 'Scheduled Ship Date is required when orders are assigned to load.'
ERROR(USR2230);
MSGPARM(LCL.Scheduled_Ship_Date);

ENDIF;

//?Validate Actual Shipped Date
CASE;

// IF LCL.Actual Shipped Date is not entered
IF LCL.Actual_Shipped_Date = *ZERO;

// Send error message - 'Please update actual ship date in order.'
ERROR(USR5554);

ENDIF;

//?Show error if load id is zero
CASE;

// IF LCL.Load ID is Blank
IF LCL.Load_ID = *ZERO;

// Send error message - 'Load Id is not found'
ERROR(USR2783);
MSGPARM(LCL.Load_ID);

ENDIF;

EXECUTE FUNCTION(RTV Manifest Detail PFSRT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2244452;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(LCL.USR_Return_Code);
{
 //?USER: Initialize routine

 // PAR.USR Return Code = CND.Does Not Exist
 PAR.USR_Return_Code = 'N';

 //?USER: Process Data record

 EXECUTE FUNCTION(PFS Rtv Total Shipped RT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC1735994;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(LCL.Quantity_Shipped_Total);
 PARAMETER(LCL.Weight_Shipped_Total);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Quantity Shipped Total = PAR.Quantity Shipped Total + DB1.Case Quantity
  PAR.Quantity_Shipped_Total = PAR.Quantity_Shipped_Total + DB1.Case_Quantity;

  // PAR.Weight Shipped Total = PAR.Weight Shipped Total + DB1.Case Weight
  PAR.Weight_Shipped_Total = PAR.Weight_Shipped_Total + DB1.Case_Weight;

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // PAR.USR Return Code = CND.Exists
 PAR.USR_Return_Code = 'E';

 QUIT;

 ENDIF;

}


//?Show error if manifest detail is not found
CASE;

// IF LCL.USR Return Code is Does Not Exist
IF LCL.USR_Return_Code = 'N';

// Send error message - 'Manifest Detail not found.'
ERROR(USR1196);

QUIT;

ENDIF;

//?USER: User defined action

// LCL.Access Denied (Y/N) = CND.no
LCL.Access_Denied_Y_N = 'N';

// Call program ADD Ready to Confirm  XL.
SBMJOB;
CALL PROGRAM(ADD Ready to Confirm  XL) ('PNTKXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(LCL.Actual_Shipped_Date);
PARAMETER(LCL.Access_Denied_Y_N);
PARAMETER(LCL.Scheduled_Ship_Date);
SBMJOBOVR JOB(SHIPPFSORD);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBOVR LOG(4;
SBMJOBOVR 0;
SBMJOBOVR *SECLVL);
SBMJOBOVR LOGCLPGM(*YES);
SBMJOBEND;

// Send information message - 'Job &1 has been submitted to job queue &2.'
MESSAGE(USR2685 *INFO);
MSGPARM('SHIPPFSORD');
MSGPARM(LCL.Jobq);

