// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKHJXFR
// ?Date: 14.08.2025 Time: 02:49:35
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modifications and Comments
DO;

//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//?  length from 5 to 7.
ENDDO;

//?Delete all error transaction for this company/kill date/tattoo
EXECUTE FUNCTION(Dlt All Error's       RT) TYPE(RTVOBJ) FILE(PKB6CPP)           AB1125417;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Delete Kill Validation) TYPE(DLTOBJ) FILE(PKB6CPP)             AB1104583;
 PARAMETER(DB1.KV_Company_Number);
 PARAMETER(DB1.KV_Kill_Date);
 PARAMETER(DB1.KV_TATTOO_NUMBER);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.KV_Record_Number);
 PARAMETER(DB1.KV_Record_Type);
 PARAMETER(DB1.KV_Error_Code);
}


// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

//?Zero/blank/status fields for Tattoo Header to Zero/Blank/N
DO;

//?Zero fields/blanks fields and set null on status fields
// WRK.TH Head Condemned = CON.*ZERO
WRK.TH_Head_Condemned = *ZERO;

// WRK.TH Head Killed = CON.*ZERO
WRK.TH_Head_Killed = *ZERO;

// WRK.TH Head Adds = CON.*ZERO
WRK.TH_Head_Adds = *ZERO;

// WRK.TH Head Deletes = CON.*ZERO
WRK.TH_Head_Excluded = *ZERO;

// WRK.TH Head Analyzed = CON.*ZERO
WRK.TH_Head_Accepted = *ZERO;

// WRK.TH Hot Wgt = CON.*ZERO
WRK.TH_Hot_Wgt = *ZERO;

// WRK.TH Tot Loin Eye Depth = CON.*ZERO
WRK.TH_Tot_Loin_Eye_Depth = *ZERO;

// WRK.TH Tot Backfat Inches = CON.*ZERO
WRK.TH_Tot_Backfat_Inches = *ZERO;

// WRK.TH Tot Light Reflectance = CON.*ZERO
WRK.TH_Tot_Light_Reflectance = *ZERO;

// WRK.TH Avg Hot Wgt = CON.*ZERO
WRK.TH_Avg_Hot_Wgt = *ZERO;

// WRK.TH Avg Light Reflectance = CON.*ZERO
WRK.TH_Avg_Light_Reflectance = *ZERO;

// WRK.TH Avg Lean Percent = CON.*ZERO
WRK.TH_Avg_Lean_Percent = *ZERO;

// WRK.TH Avg Loin Eye Depth = CON.*ZERO
WRK.TH_Avg_Loin_Eye_Depth = *ZERO;

// WRK.TH Avg Backfat = CON.*ZERO
WRK.TH_Avg_Backfat = *ZERO;

// WRK.TH Actual Yield % = CON.*ZERO
WRK.TH_Actual_Yield = *ZERO;

// WRK.TH Adj Live Wgt = CON.*ZERO
WRK.TH_Adj_Live_Wgt = *ZERO;

//?Set Status fields to begining value
// WRK.TH Header Error Sts = CND.No Header Error
WRK.TH_Header_Error_Sts = *BLANK;

// WRK.TH Detail Error Sts = CND.No
WRK.TH_Detail_Error_Sts = 'N';

// WRK.TH Kill Balancing Sts = CND.Not Balanced Record
WRK.TH_Kill_Balancing_Sts = *BLANK;

CASE;

// IF PAR.Requested by User to Bal is Yes
IF PAR.Requested_by_User_to_Bal = 'Y';

// WRK.TH Bal to Kill Gen = CND.User Requested Generated
WRK.TH_Bal_to_Kill_Gen = 'U';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.TH Kill Balancing Sts = CND.Not Balanced Record
WRK.TH_Kill_Balancing_Sts = *BLANK;

ENDIF;

// WRK.THP Process Code = CON.SLG
WRK.THP_Process_Code = 'SLG';

ENDDO;

//?Tattoo Header Accumulate/Validate Loss Transaction
DO;

EXECUTE FUNCTION(Rtv Bal/Tattoo Hdr    RT) TYPE(RTVOBJ) FILE(PKBSCPP)           AB1125412;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(WRK.TH_Head_Condemned);
PARAMETER(PAR.TH_Avg_Live_Wgt);
PARAMETER(WRK.TH_Detail_Error_Sts);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.LT Type Code is Carcass Loss
 IF DB1.LT_Type_Code = 02;

 // AND DB1.LTN Wgt is Zeros
 AND DB1.LTN_Wgt = *ZERO;

 // WRK.LTN Wgt = PAR.TH Avg Live Wgt
 WRK.LTN_Wgt = PAR.TH_Avg_Live_Wgt;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.LTN Wgt = DB1.LTN Wgt
 WRK.LTN_Wgt = DB1.LTN_Wgt;

 ENDIF;

 // Call program Val Loss Trans        XF.
 CALL PROGRAM(Val Loss Trans        XF) ('PKPJXFR');
 PARAMETER(DB1.LTN_Company_Number);
 PARAMETER(DB1.LTN_Kill_Date);
 PARAMETER(DB1.LTN_Record_Number);
 PARAMETER(DB1.LTN_Tattoo_Number);
 PARAMETER(DB1.LTN_Shift);
 PARAMETER(WRK.LTN_Wgt);
 PARAMETER(DB1.LTN_Extent);
 PARAMETER(DB1.LTN_Trim_Location);
 PARAMETER(WRK.LTN_Error_Sts);
 PARAMETER(DB1.LTN_Record_Created_Status);
 PARAMETER(DB1.LTN_User_Error_Override);
 PARAMETER(DB1.LTN_Source_Type);
 PARAMETER(DB1.LT_Type_Code);
 PARAMETER(DB1.LR_Reason_Code);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 PARAMETER(DB1.RU_Date);
 PARAMETER(DB1.RU_Time);
 PARAMETER(PAR.TH_Head_Condemned);
 PARAMETER(WRK.Loss_Error_1_Usr);
 PARAMETER(WRK.Loss_Error_2_Usr);
 PARAMETER(WRK.Loss_Error_3_Usr);
 PARAMETER(WRK.Loss_Error_4_Usr);
 PARAMETER(WRK.Loss_Error_5_Usr);
 PARAMETER(PAR.TH_Detail_Error_Sts);

 EXECUTE FUNCTION(Chg Loss Transaction  CH) TYPE(CHGOBJ) FILE(PKBSCPP)           AB1102906;
 PARAMETER(DB1.LTN_Company_Number);
 PARAMETER(DB1.LTN_Kill_Date);
 PARAMETER(DB1.LTN_Record_Number);
 PARAMETER(DB1.LTN_Tattoo_Number);
 PARAMETER(DB1.LTN_Shift);
 PARAMETER(WRK.LTN_Wgt);
 PARAMETER(DB1.LTN_Extent);
 PARAMETER(DB1.LTN_Trim_Location);
 PARAMETER(WRK.LTN_Error_Sts);
 PARAMETER(DB1.LTN_Record_Created_Status);
 PARAMETER(DB1.LTN_User_Error_Override);
 PARAMETER(DB1.LTN_Source_Type);
 PARAMETER(DB1.LT_Type_Code);
 PARAMETER(DB1.LR_Reason_Code);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 PARAMETER(DB1.RU_Date);
 PARAMETER(DB1.RU_Time);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(Upd Head Condemn      RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1227599;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Rtv Head Condemned    RT) TYPE(RTVOBJ) FILE(PKBSCPP)           AB1227600;
   PARAMETER(02);
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(PAR.TH_Head_Condemned);
   {
    //?USER: Initialize routine

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    // PAR.TH Head Condemned = PAR.TH Head Condemned + CON.1
    PAR.TH_Head_Condemned = PAR.TH_Head_Condemned + 1;

   }

   EXECUTE FUNCTION(Chg Head Condemned    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1227604;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(PAR.TH_Head_Condemned);
   PARAMETER('E');
   {
    //?USER: Processing after Data update

    EXECUTE FUNCTION(Upd Head Condemned    RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1227617;
    PARAMETER(DB1.BOH_Company_Number);
    PARAMETER(DB1.BOH_Buy_Order_Number);
    PARAMETER(DB1.BOL_Load_Number);
    PARAMETER(DB1.TH_Tattoo_Number);
    PARAMETER(DB1.TH_Kill_Date);
    PARAMETER(DB1.TH_Head_Condemned);
    {
     //?USER: Process Data record

     // LCL.Net Head Usr = DB1.TD Pen Head - DB1.TD Yard Dead
     LCL.Net_Head_Usr = DB1.TD_Pen_Head - DB1.TD_Yard_Dead;

     // Call program Rtv Stress Pens Only  XF.
     CALL PROGRAM(Rtv Stress Pens Only  XF) ('PLPJXFR');
     PARAMETER(DB1.Pen_Company_Number);
     PARAMETER(DB1.Pen_Number);
     PARAMETER(LCL.Stress_Market_Type);

     //?Stress pen is now defined at the pen ext instead of ST1
     CASE;

     // IF LCL.Stress/Market Type is Stress
     IF LCL.Stress_Market_Type = 'S';

     // IF LCL.Net Head Usr is *Zeros
     IF LCL.Net_Head_Usr = *ZERO;

     // IF *OTHERWISE
     IF *OTHERWISE;

     EXECUTE FUNCTION(Upd Head Condemned    RT) TYPE(RTVOBJ) FILE(PKDYCPP)           AB1227618;
     PARAMETER(DB1.BOH_Company_Number);
     PARAMETER(DB1.BOH_Buy_Order_Number);
     PARAMETER(DB1.BOL_Load_Number);
     PARAMETER(DB1.TH_Tattoo_Number);
     PARAMETER(DB1.TH_Kill_Date);
     PARAMETER(DB1.TD_Sequence_Number);
     PARAMETER(PAR.TH_Head_Condemned);
     {
      //?USER: Processing if Data record not found

      EXECUTE FUNCTION(Crt Tattoo Detail Ext  CR) TYPE(CRTOBJ) FILE(PKDYCPP)          AB1196901;
      PARAMETER(PAR.BOH_Company_Number);
      PARAMETER(PAR.BOH_Buy_Order_Number);
      PARAMETER(PAR.BOL_Load_Number);
      PARAMETER(PAR.TH_Tattoo_Number);
      PARAMETER(PAR.TH_Kill_Date);
      PARAMETER(PAR.TD_Sequence_Number);
      PARAMETER('N');
      PARAMETER(*ZERO);
      PARAMETER(PAR.TDE_Head_Condemned);
      PARAMETER(*ZERO);
      PARAMETER('N');
      PARAMETER('N');
      PARAMETER(PAR.RS_User_Changed);
      PARAMETER(PAR.RS_Date_Changed);
      PARAMETER(PAR.RS_Time_Changed);
      PARAMETER(PAR.RS_Record_Status);
      PARAMETER(PAR.RS_Job);
      PARAMETER(PAR.RS_Program);
      PARAMETER(PAR.RS_User_Added);
      PARAMETER(PAR.RS_Date_Added);
      PARAMETER(PAR.RS_Time_Added);
      {
       //?USER: Processing before Data update

       EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
       PARAMETER(DB1.RS_Record_Status);
       PARAMETER(DB1.RS_Job);
       PARAMETER(DB1.RS_Program);
       PARAMETER(DB1.RS_User_Added);
       PARAMETER(DB1.RS_Date_Added);
       PARAMETER(DB1.RS_Time_Added);
       {
        //?Execute internal function

        // PAR.RS Record Status = CND.Active
        PAR.RS_Record_Status = 'A';

        // PAR.RS User Added = JOB.*USER
        PAR.RS_User_Added = JOB.*USER;

        // PAR.RS Date Added = JOB.*Job date
        PAR.RS_Date_Added = JOB.*Job_date;

        // PAR.RS Time Added = JOB.*Job time
        PAR.RS_Time_Added = JOB.*Job_time;

        // PAR.RS Program = JOB.*PROGRAM
        PAR.RS_Program = JOB.*PROGRAM;

        // PAR.RS Job = JOB.*JOB
        PAR.RS_Job = JOB.*JOB;

       }

      }

      //?USER: Process Data record

      EXECUTE FUNCTION(Chg Head Condemned    CH) TYPE(CHGOBJ) FILE(PKDYCPP)           AB1227625;
      PARAMETER(DB1.BOH_Company_Number);
      PARAMETER(DB1.BOH_Buy_Order_Number);
      PARAMETER(DB1.BOL_Load_Number);
      PARAMETER(DB1.TH_Tattoo_Number);
      PARAMETER(DB1.TH_Kill_Date);
      PARAMETER(DB1.TD_Sequence_Number);
      PARAMETER(PAR.TDE_Head_Condemned);
     }

     QUIT;

     ENDIF;

    }

   }

  }

 }

}


ENDDO;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// WRK.Net Head Usr = PAR.TH Head Received - PAR.TH Yard Deads
WRK.Net_Head_Usr = PAR.TH_Head_Received - PAR.TH_Yard_Deads;

// WRK.Net Head Usr = WRK.Net Head Usr - WRK.TH Head Condemned
WRK.Net_Head_Usr = WRK.Net_Head_Usr - WRK.TH_Head_Condemned;

// WRK.Net Head Adjusted Usr = WRK.TH Head Condemned + PAR.TH Yard Deads
WRK.Net_Head_Adjusted_Usr = WRK.TH_Head_Condemned + PAR.TH_Yard_Deads;

//?Tattoo Header Accumulate/Validate Evaluation Records
DO;

// WRK.Hot Wgt/Lean % Accum Usr = CON.*ZERO
WRK.Hot_Wgt_Lean_Accum_Usr = *ZERO;

// WRK.Hot Wgt/Backf Accum Usr = CON.*ZERO
WRK.Hot_Wgt_Backf_Accum_Usr = *ZERO;

// WRK.Hot Wgt/Loine Accum Usr = CON.*ZERO
WRK.Hot_Wgt_Loine_Accum_Usr = *ZERO;

// WRK.Hot Wgt/LghtR Accum Usr = CON.*ZERO
WRK.Hot_Wgt_LghtR_Accum_Usr = *ZERO;

EXECUTE FUNCTION(Rtv Bal/Kill Inform    RT) TYPE(RTVOBJ) FILE(PKBVCPP)          AB1125400;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(WRK.TH_Head_Killed);
PARAMETER(WRK.TH_Head_Adds);
PARAMETER(WRK.TH_Head_Accepted);
PARAMETER(WRK.TH_Hot_Wgt);
PARAMETER(WRK.TH_Tot_Loin_Eye_Depth);
PARAMETER(WRK.TH_Tot_Backfat_Inches);
PARAMETER(WRK.TH_Tot_Light_Reflectance);
PARAMETER(WRK.TH_Header_Error_Sts);
PARAMETER(WRK.TH_Detail_Error_Sts);
PARAMETER(WRK.TH_Kill_Balancing_Sts);
PARAMETER(WRK.TH_Head_Excluded);
PARAMETER(PAR.Carcass_Dbw_Min);
PARAMETER(PAR.Carcass_Dbw_Max);
PARAMETER(PAR.Carcass_Lgt_Min);
PARAMETER(PAR.Carcass_Lgt_Max);
PARAMETER(PAR.Lean_High_Min);
PARAMETER(PAR.Lean_High_Max);
PARAMETER(PAR.Lean_Low_Min);
PARAMETER(PAR.Lean_Low_Max);
PARAMETER(PAR.High_Yield_Min);
PARAMETER(PAR.High_Yield_Max);
PARAMETER(PAR.Low_Yield_Min);
PARAMETER(PAR.Low_Yield_Max);
PARAMETER(PAR.Head_Percent_Min);
PARAMETER(PAR.Head_Percent_Max);
PARAMETER(PAR.Head_Percent_Min);
PARAMETER(PAR.Head_Percent_Max);
PARAMETER(PAR.BackFat_High_Min);
PARAMETER(PAR.BackFat_High_Max);
PARAMETER(PAR.BackFat_Low_Min);
PARAMETER(PAR.Backfat_Low_Max);
PARAMETER(PAR.LoinEye_High_Min);
PARAMETER(PAR.LoinEye_High_Max);
PARAMETER(PAR.LoinEye_Low_Min);
PARAMETER(PAR.LoinEye_Low_Max);
PARAMETER(WRK.Hot_Wgt_Lean_Accum_Usr);
PARAMETER(WRK.Hot_Wgt_Backf_Accum_Usr);
PARAMETER(WRK.Hot_Wgt_Loine_Accum_Usr);
PARAMETER(WRK.Hot_Wgt_LghtR_Accum_Usr);
PARAMETER(WRK.Net_Head_Usr);
{
 //?USER: Processing if Data record not found

 CASE;

 // IF PAR.Net Head Usr is *Zeros
 IF PAR.Net_Head_Usr = *ZERO;

 //?Net head is zeros if there are no transaction then this is ok
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.TH Header Error Sts = CND.No Kill Information
 PAR.TH_Header_Error_Sts = 'K';

 // PAR.TH Kill Balancing Sts = CND.Error
 PAR.TH_Kill_Balancing_Sts = 'E';

 EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(999999);
 PARAMETER('H');
 PARAMETER('HNE');
 PARAMETER('Header No Evaluation Recs');
 PARAMETER(*BLANKS);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(JOB.*JOB);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 {
  //?USER: Processing before Data update

  CASE;

  // IF PAR.KV Error Description is Entered
  IF PAR.KV_Error_Description <> *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
  PARAMETER(PAR.KV_Error_Code);
  PARAMETER(DB1.KV_Error_Description);
  {
   //?USER: Process Data record

   // PAR.EV Description = DB1.EV Description
   PAR.EV_Description = DB1.EV_Description;

  }

  ENDIF;

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

 //?USER: Process Data record

 // WRK.ET Error Sts = CND.Balance
 WRK.ET_Error_Sts = 'B';

 // WRK.ET Lean Percent NPPC = DB1.ET Lean Percent NPPC
 WRK.ET_Lean_Percent_NPPC = DB1.ET_Lean_Percent_NPPC;

 // WRK.ET Lean Percent FOM = DB1.ET Lean Percent FOM
 WRK.ET_Lean_Percent_FOM = DB1.ET_Lean_Percent_FOM;

 // WRK.ET Backfat Thickness MM = DB1.ET Backfat Thickness MM
 WRK.ET_Backfat_Thickness_MM = DB1.ET_Backfat_Thickness_MM;

 // WRK.ET Loineye Depth MM = DB1.ET Loineye Depth MM
 WRK.ET_Loineye_Depth_MM = DB1.ET_Loineye_Depth_MM;

 // WRK.ET Light Reflectance MM = DB1.ET Light Reflectance MM
 WRK.ET_Light_Reflectance_MM = DB1.ET_Light_Reflectance_MM;

 //?LEAN % FOM
 // WRK.Calculate All Usr = CND.No
 WRK.Calculate_All_Usr = 'N';

 // Call program Clc Inch to MM/Lean%FOM.
 CALL PROGRAM(Clc Inch to MM/Lean%FOM) ('PKINMMLP');
 PARAMETER(*ZERO);
 PARAMETER(DB1.ET_Backfat_Thickness_Inch);
 PARAMETER(DB1.ET_Loin_Eye_Depth_Inches);
 PARAMETER(DB1.ET_Light_Reflectance);
 PARAMETER(WRK.ET_Backfat_Thickness_MM);
 PARAMETER(WRK.ET_Loineye_Depth_MM);
 PARAMETER(WRK.ET_Light_Reflectance_MM);
 PARAMETER(WRK.ET_Lean_Percent_FOM);
 PARAMETER(WRK.Calculate_All_Usr);

 CASE;

 // IF DB1.ET Record Add/Del Sts is Add Rec and Create Record
 IF DB1.ET_Record_Add_Del_Sts = 'A'/*BLANK/'O';

 //?COMPUTE LEAN % Morrison Hot Scale
 DO;

 //?Calculate Lean % per Pork Rules
 //?Backfat/loin are in inches
 //?2.827
 //?+ (0.469 * Carcass Weight)
 //?- (0.7271657 * Backfat MM)
 //?+ (0.3867718 * Loin Eye MM)
 //?-----------------------------
 //?/ Carcass Weight
 //?* 100
 // WRK.Lean % Fld 1 Usr = CON.1 * CON.2.827 *
 WRK.Lean_Fld_1_Usr = 1 * 2.827;

 // WRK.Lean % Fld 2 Usr = CON.1 * CON.0.469 *
 WRK.Lean_Fld_2_Usr = 1 * 0.469;

 // WRK.Lean % Fld 3 Usr = CON.0.7271657
 WRK.Lean_Fld_3_Usr = 0.7271657;

 // WRK.Lean % Fld 4 Usr = CON.0.3867718
 WRK.Lean_Fld_4_Usr = 0.3867718;

 CASE;

 // IF DB1.ET Hot Wgt NE WRK.Zero USR
 IF DB1.ET_Hot_Wgt <> WRK.Zero_USR;

 // LEAN % COMPUTE
 WRK.Lean_Fld_5_Usr = ( ( ( ( WRK.Lean_Fld_1_Usr + ( WRK.Lean_Fld_2_Usr * DB1.ET_Hot_Wgt )
 ) - ( WRK.Lean_Fld_3_Usr * DB1.ET_Backfat_Thickness_MM ) ) + ( WRK.Lean_Fld_4_Usr                 +
 * DB1.ET_Loineye_Depth_MM ) ) / DB1.ET_Hot_Wgt ) * 100;

 ENDIF;

 // WRK.ET Lean Percent NPPC = WRK.Lean % Fld 5 Usr * CON.1 *Rounded
 WRK.ET_Lean_Percent_NPPC = WRK.Lean_Fld_5_Usr * 1 'H';

 ENDDO;

 //?VALIDATE RECORD
 CASE;

 // IF DB1.ET User Error Override is Yes
 IF DB1.ET_User_Error_Override = 'Y';

 //?VALIDATE RECORD
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Validate, unless user override error
 //?Validate transaction for min max rules
 DO;

 //?Validate Hot Weight
 CASE;

 // IF DB1.ET Hot Wgt LE PAR.Carcass Lgt Max
 IF DB1.ET_Hot_Wgt <= PAR.Carcass_Lgt_Max;

 //?Carcass Light Weight Error
 // WRK.KV Error Code = CON.CLT
 WRK.KV_Error_Code = 'CLT';

 // WRK.ET Error Sts = CND.Error
 WRK.ET_Error_Sts = 'E';

 // PAR.TH Detail Error Sts = CND.Yes
 PAR.TH_Detail_Error_Sts = 'Y';

 // PAR.TH Kill Balancing Sts = CND.Error
 PAR.TH_Kill_Balancing_Sts = 'E';

 EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
 PARAMETER(DB1.ET_Company_Number);
 PARAMETER(DB1.ET_Kill_Date);
 PARAMETER(DB1.ET_Tattoo_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.ET_Scale_Sequence_Number);
 PARAMETER('E');
 PARAMETER(WRK.KV_Error_Code);
 PARAMETER(WRK.KV_Error_Description);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  CASE;

  // IF PAR.KV Error Description is Entered
  IF PAR.KV_Error_Description <> *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
  PARAMETER(PAR.KV_Error_Code);
  PARAMETER(DB1.KV_Error_Description);
  {
   //?USER: Process Data record

   // PAR.EV Description = DB1.EV Description
   PAR.EV_Description = DB1.EV_Description;

  }

  ENDIF;

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 //?Validate Hot Weight
 // IF DB1.ET Hot Wgt GE PAR.Carcass Dbw Min
 IF DB1.ET_Hot_Wgt >= PAR.Carcass_Dbw_Min;

 //?Carcass Double Weight Error
 // WRK.KV Error Code = CON.CDB
 WRK.KV_Error_Code = 'CDB';

 // WRK.ET Error Sts = CND.Error
 WRK.ET_Error_Sts = 'E';

 // PAR.TH Detail Error Sts = CND.Yes
 PAR.TH_Detail_Error_Sts = 'Y';

 // PAR.TH Kill Balancing Sts = CND.Error
 PAR.TH_Kill_Balancing_Sts = 'E';

 EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
 PARAMETER(DB1.ET_Company_Number);
 PARAMETER(DB1.ET_Kill_Date);
 PARAMETER(DB1.ET_Tattoo_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.ET_Scale_Sequence_Number);
 PARAMETER('E');
 PARAMETER(WRK.KV_Error_Code);
 PARAMETER(WRK.KV_Error_Description);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  CASE;

  // IF PAR.KV Error Description is Entered
  IF PAR.KV_Error_Description <> *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
  PARAMETER(PAR.KV_Error_Code);
  PARAMETER(DB1.KV_Error_Description);
  {
   //?USER: Process Data record

   // PAR.EV Description = DB1.EV Description
   PAR.EV_Description = DB1.EV_Description;

  }

  ENDIF;

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

 //?Validate Backfat
 CASE;

 // IF DB1.ET Backfat Thickness Inch LE PAR.Backfat Low Max
 IF DB1.ET_Backfat_Thickness_Inch <= PAR.Backfat_Low_Max;

 //?backfat to low  Error
 // WRK.KV Error Code = CON.BLW
 WRK.KV_Error_Code = 'BLW';

 // WRK.ET Error Sts = CND.Error
 WRK.ET_Error_Sts = 'E';

 // PAR.TH Detail Error Sts = CND.Yes
 PAR.TH_Detail_Error_Sts = 'Y';

 // PAR.TH Kill Balancing Sts = CND.Error
 PAR.TH_Kill_Balancing_Sts = 'E';

 EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
 PARAMETER(DB1.ET_Company_Number);
 PARAMETER(DB1.ET_Kill_Date);
 PARAMETER(DB1.ET_Tattoo_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.ET_Scale_Sequence_Number);
 PARAMETER('E');
 PARAMETER(WRK.KV_Error_Code);
 PARAMETER(WRK.KV_Error_Description);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  CASE;

  // IF PAR.KV Error Description is Entered
  IF PAR.KV_Error_Description <> *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
  PARAMETER(PAR.KV_Error_Code);
  PARAMETER(DB1.KV_Error_Description);
  {
   //?USER: Process Data record

   // PAR.EV Description = DB1.EV Description
   PAR.EV_Description = DB1.EV_Description;

  }

  ENDIF;

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 //?Validate Backfat
 // IF DB1.ET Backfat Thickness Inch GE PAR.BackFat High Min
 IF DB1.ET_Backfat_Thickness_Inch >= PAR.BackFat_High_Min;

 //?backfat high error
 // WRK.KV Error Code = CON.BHI
 WRK.KV_Error_Code = 'BHI';

 // WRK.ET Error Sts = CND.Error
 WRK.ET_Error_Sts = 'E';

 // PAR.TH Detail Error Sts = CND.Yes
 PAR.TH_Detail_Error_Sts = 'Y';

 // PAR.TH Kill Balancing Sts = CND.Error
 PAR.TH_Kill_Balancing_Sts = 'E';

 EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
 PARAMETER(DB1.ET_Company_Number);
 PARAMETER(DB1.ET_Kill_Date);
 PARAMETER(DB1.ET_Tattoo_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.ET_Scale_Sequence_Number);
 PARAMETER('E');
 PARAMETER(WRK.KV_Error_Code);
 PARAMETER(WRK.KV_Error_Description);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  CASE;

  // IF PAR.KV Error Description is Entered
  IF PAR.KV_Error_Description <> *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
  PARAMETER(PAR.KV_Error_Code);
  PARAMETER(DB1.KV_Error_Description);
  {
   //?USER: Process Data record

   // PAR.EV Description = DB1.EV Description
   PAR.EV_Description = DB1.EV_Description;

  }

  ENDIF;

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

 //?Validate Loineye
 CASE;

 // IF DB1.ET Loin-Eye Depth Inches LE PAR.LoinEye Low Max
 IF DB1.ET_Loin_Eye_Depth_Inches <= PAR.LoinEye_Low_Max;

 //?Loin eye  Light Error
 // WRK.KV Error Code = CON.LLW
 WRK.KV_Error_Code = 'LLW';

 // WRK.ET Error Sts = CND.Error
 WRK.ET_Error_Sts = 'E';

 // PAR.TH Detail Error Sts = CND.Yes
 PAR.TH_Detail_Error_Sts = 'Y';

 // PAR.TH Kill Balancing Sts = CND.Error
 PAR.TH_Kill_Balancing_Sts = 'E';

 EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
 PARAMETER(DB1.ET_Company_Number);
 PARAMETER(DB1.ET_Kill_Date);
 PARAMETER(DB1.ET_Tattoo_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.ET_Scale_Sequence_Number);
 PARAMETER('E');
 PARAMETER(WRK.KV_Error_Code);
 PARAMETER(WRK.KV_Error_Description);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  CASE;

  // IF PAR.KV Error Description is Entered
  IF PAR.KV_Error_Description <> *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
  PARAMETER(PAR.KV_Error_Code);
  PARAMETER(DB1.KV_Error_Description);
  {
   //?USER: Process Data record

   // PAR.EV Description = DB1.EV Description
   PAR.EV_Description = DB1.EV_Description;

  }

  ENDIF;

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 //?Validate Loineye
 // IF DB1.ET Loin-Eye Depth Inches GE PAR.LoinEye High Min
 IF DB1.ET_Loin_Eye_Depth_Inches >= PAR.LoinEye_High_Min;

 //?Loin eye  High Error
 // WRK.KV Error Code = CON.LHI
 WRK.KV_Error_Code = 'LHI';

 // WRK.ET Error Sts = CND.Error
 WRK.ET_Error_Sts = 'E';

 // PAR.TH Detail Error Sts = CND.Yes
 PAR.TH_Detail_Error_Sts = 'Y';

 // PAR.TH Kill Balancing Sts = CND.Error
 PAR.TH_Kill_Balancing_Sts = 'E';

 EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
 PARAMETER(DB1.ET_Company_Number);
 PARAMETER(DB1.ET_Kill_Date);
 PARAMETER(DB1.ET_Tattoo_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.ET_Scale_Sequence_Number);
 PARAMETER('E');
 PARAMETER(WRK.KV_Error_Code);
 PARAMETER(WRK.KV_Error_Description);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  CASE;

  // IF PAR.KV Error Description is Entered
  IF PAR.KV_Error_Description <> *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
  PARAMETER(PAR.KV_Error_Code);
  PARAMETER(DB1.KV_Error_Description);
  {
   //?USER: Process Data record

   // PAR.EV Description = DB1.EV Description
   PAR.EV_Description = DB1.EV_Description;

  }

  ENDIF;

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

 //?Validate  % Lean
 CASE;

 // IF WRK.ET Lean Percent LE PAR.%Lean Low Max
 IF WRK.ET_Lean_Percent_NPPC <= PAR.Lean_Low_Max;

 //?% Lean low  Error
 // WRK.KV Error Code = CON.PLL
 WRK.KV_Error_Code = 'PLL';

 // PAR.TH Detail Error Sts = CND.Yes
 PAR.TH_Detail_Error_Sts = 'Y';

 // PAR.TH Kill Balancing Sts = CND.Error
 PAR.TH_Kill_Balancing_Sts = 'E';

 // WRK.ET Error Sts = CND.Error
 WRK.ET_Error_Sts = 'E';

 EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
 PARAMETER(DB1.ET_Company_Number);
 PARAMETER(DB1.ET_Kill_Date);
 PARAMETER(DB1.ET_Tattoo_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.ET_Scale_Sequence_Number);
 PARAMETER('E');
 PARAMETER(WRK.KV_Error_Code);
 PARAMETER(WRK.KV_Error_Description);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  CASE;

  // IF PAR.KV Error Description is Entered
  IF PAR.KV_Error_Description <> *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
  PARAMETER(PAR.KV_Error_Code);
  PARAMETER(DB1.KV_Error_Description);
  {
   //?USER: Process Data record

   // PAR.EV Description = DB1.EV Description
   PAR.EV_Description = DB1.EV_Description;

  }

  ENDIF;

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 //?Validate  % Lean
 // IF WRK.ET Lean Percent GE PAR.%Lean High Min
 IF WRK.ET_Lean_Percent_NPPC >= PAR.Lean_High_Min;

 //?% Lean High Error
 // WRK.KV Error Code = CON.PLH
 WRK.KV_Error_Code = 'PLH';

 // PAR.TH Detail Error Sts = CND.Yes
 PAR.TH_Detail_Error_Sts = 'Y';

 // PAR.TH Kill Balancing Sts = CND.Error
 PAR.TH_Kill_Balancing_Sts = 'E';

 // WRK.ET Error Sts = CND.Error
 WRK.ET_Error_Sts = 'E';

 EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
 PARAMETER(DB1.ET_Company_Number);
 PARAMETER(DB1.ET_Kill_Date);
 PARAMETER(DB1.ET_Tattoo_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.ET_Scale_Sequence_Number);
 PARAMETER('E');
 PARAMETER(WRK.KV_Error_Code);
 PARAMETER(WRK.KV_Error_Description);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  CASE;

  // IF PAR.KV Error Description is Entered
  IF PAR.KV_Error_Description <> *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
  PARAMETER(PAR.KV_Error_Code);
  PARAMETER(DB1.KV_Error_Description);
  {
   //?USER: Process Data record

   // PAR.EV Description = DB1.EV Description
   PAR.EV_Description = DB1.EV_Description;

  }

  ENDIF;

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

 ENDDO;

 ENDIF;

 CASE;

 // IF WRK.ET Error Sts is Balance
 IF WRK.ET_Error_Sts = 'B';

 // PAR.TH Head Analyzed = PAR.TH Head Analyzed + CON.1
 PAR.TH_Head_Accepted = PAR.TH_Head_Accepted + 1;

 //?Accumulate Add record
 CASE;

 // IF DB1.ET Record Add/Del Sts is Add
 IF DB1.ET_Record_Add_Del_Sts = 'A';

 // PAR.TH Head Adds = PAR.TH Head Adds + CON.1
 PAR.TH_Head_Adds = PAR.TH_Head_Adds + 1;

 ENDIF;

 //?Special Note:  Accumulate totals
 //?Accumulate Totals
 DO;

 //?Accumulate totals
 // PAR.TH Head Killed = CON.1 + PAR.TH Head Killed
 PAR.TH_Head_Killed = 1 + PAR.TH_Head_Killed;

 // PAR.TH Tot Loin Eye Depth = PAR.TH Tot Loin Eye Depth + DB1.ET Loin-Eye Depth In
 PAR.TH_Tot_Loin_Eye_Depth = PAR.TH_Tot_Loin_Eye_Depth + DB1.ET_Loin_Eye_Depth_Inches;

 // PAR.TH Tot Backfat Inches = PAR.TH Tot Backfat Inches + DB1.ET Backfat Thickness
 PAR.TH_Tot_Backfat_Inches = PAR.TH_Tot_Backfat_Inches + DB1.ET_Backfat_Thickness_Inch;

 // PAR.TH Tot Light Reflectance = PAR.TH Tot Light Reflectance + DB1.ET Light Refle
 PAR.TH_Tot_Light_Reflectance = PAR.TH_Tot_Light_Reflectance + DB1.ET_Light_Reflectance;

 // PAR.TH Hot Wgt = PAR.TH Hot Wgt + DB1.ET Hot Wgt
 PAR.TH_Hot_Wgt = PAR.TH_Hot_Wgt + DB1.ET_Hot_Wgt;

 //?Weighted accumulated Lean%
 // WRK.Hot Wgt/Weight Ext Usr = WRK.ET Lean Percent * DB1.ET Hot Wgt *
 WRK.Hot_Wgt_Weight_Ext_Usr = WRK.ET_Lean_Percent_NPPC * DB1.ET_Hot_Wgt;

 // PAR.Hot Wgt/Lean % Accum Usr = WRK.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/Lean % A
 PAR.Hot_Wgt_Lean_Accum_Usr = WRK.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_Lean_Accum_Usr;

 //?Weighted accumulated Backfat
 // WRK.Hot Wgt/Weight Ext Usr = DB1.ET Backfat Thickness Inch * DB1.ET Hot Wgt *
 WRK.Hot_Wgt_Weight_Ext_Usr = DB1.ET_Backfat_Thickness_Inch * DB1.ET_Hot_Wgt;

 // PAR.Hot Wgt/Backf Accum Usr = WRK.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/Backf Acc
 PAR.Hot_Wgt_Backf_Accum_Usr = WRK.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_Backf_Accum_Usr;

 //?Weighted accumulated Loin Eye
 // WRK.Hot Wgt/Weight Ext Usr = DB1.ET Loin-Eye Depth Inches * DB1.ET Hot Wgt *
 WRK.Hot_Wgt_Weight_Ext_Usr = DB1.ET_Loin_Eye_Depth_Inches * DB1.ET_Hot_Wgt;

 // PAR.Hot Wgt/Loine Accum Usr = WRK.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/Loine Acc
 PAR.Hot_Wgt_Loine_Accum_Usr = WRK.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_Loine_Accum_Usr;

 //?Weighted accumulated Light Refl
 // WRK.Hot Wgt/Weight Ext Usr = DB1.ET Light Reflectance * DB1.ET Hot Wgt *
 WRK.Hot_Wgt_Weight_Ext_Usr = DB1.ET_Light_Reflectance * DB1.ET_Hot_Wgt;

 // PAR.Hot Wgt/LghtR Accum Usr = WRK.Hot Wgt/Weight Ext Usr + PAR.Hot Wgt/LghtR Acc
 PAR.Hot_Wgt_LghtR_Accum_Usr = WRK.Hot_Wgt_Weight_Ext_Usr + PAR.Hot_Wgt_LghtR_Accum_Usr;

 ENDDO;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.TH Head Analyzed = PAR.TH Head Analyzed + CON.1
 PAR.TH_Head_Accepted = PAR.TH_Head_Accepted + 1;

 //?Accumulate Delete record
 CASE;

 // IF DB1.ET Record Add/Del Sts is Delete
 IF DB1.ET_Record_Add_Del_Sts = 'D';

 // PAR.TH Head Deletes = PAR.TH Head Deletes + CON.1
 PAR.TH_Head_Excluded = PAR.TH_Head_Excluded + 1;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Chg Eval Transac      CH) TYPE(CHGOBJ) FILE(PKBVCPP)           AB1102932;
 PARAMETER(DB1.ET_Company_Number);
 PARAMETER(DB1.ET_Kill_Date);
 PARAMETER(DB1.ET_Scale_Sequence_Number);
 PARAMETER(DB1.ET_Carcass_Number);
 PARAMETER(DB1.ET_Carcass_Number_Insert);
 PARAMETER(DB1.ET_Tattoo_Number);
 PARAMETER(DB1.ET_Lot);
 PARAMETER(DB1.ET_Shift);
 PARAMETER(DB1.ET_Hot_Wgt);
 PARAMETER(DB1.ET_Backfat_Thickness_Inch);
 PARAMETER(DB1.ET_Loin_Eye_Depth_Inches);
 PARAMETER(WRK.ET_Lean_Percent_NPPC);
 PARAMETER(WRK.ET_Backfat_Thickness_MM);
 PARAMETER(WRK.ET_Loineye_Depth_MM);
 PARAMETER(WRK.ET_Light_Reflectance_MM);
 PARAMETER(WRK.ET_Lean_Percent_FOM);
 PARAMETER(DB1.ET_Light_Reflectance);
 PARAMETER(DB1.ET_Trim_Area);
 PARAMETER(DB1.ET_Carcass_Sex);
 PARAMETER(WRK.ET_Error_Sts);
 PARAMETER(DB1.ET_Record_Add_Del_Sts);
 PARAMETER(DB1.ET_Record_Created_W_Avg);
 PARAMETER(DB1.ET_Record_Created_Status);
 PARAMETER(DB1.ET_User_Error_Override);
 PARAMETER(DB1.ET_Adjust_Add_Type);
 PARAMETER(DB1.ET_Broken_Back_Sts);
 PARAMETER(DB1.ET_Adjust_Add_Source);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 PARAMETER(DB1.RU_Date);
 PARAMETER(DB1.RU_Time);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


ENDDO;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// WRK.Head Percent Usr = CON.*ZERO
WRK.Head_Percent_Usr = *ZERO;

//?Calculate Head %
CASE;

// IF WRK.Net Head Usr is Not Zero
IF WRK.Net_Head_Usr <> *ZERO;

// Cal Head Percent
WRK.Head_Percent_Usr = ( WRK.TH_Head_Killed / WRK.Net_Head_Usr ) * 100;

ENDIF;

//?Calculate Tattoo Header Averages/yield
DO;

//?Calculate Adj Live Weight
CASE;

// IF PAR.TH Head Received EQ WRK.Net Head Usr
IF PAR.TH_Head_Received = WRK.Net_Head_Usr;

// WRK.TH Adj Live Wgt = PAR.TH Live Wgt
WRK.TH_Adj_Live_Wgt = PAR.TH_Live_Wgt;

//?Calculate Adj Live Weight
// IF WRK.Net Head Usr EQ WRK.Zero USR
IF WRK.Net_Head_Usr = WRK.Zero_USR;

// WRK.TH Adj Live Wgt = CON.*ZERO
WRK.TH_Adj_Live_Wgt = *ZERO;

//?Calculate Adj Live Weight
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.*Synon (15,2) work field = WRK.Net Head Adjusted Usr * PAR.TH Avg Live Wgt *
WRK.*Synon_152_work_field = WRK.Net_Head_Adjusted_Usr * PAR.TH_Avg_Live_Wgt;

// WRK.TH Adj Live Wgt = PAR.TH Live Wgt - WRK.*Synon (15,2) work field
WRK.TH_Adj_Live_Wgt = PAR.TH_Live_Wgt - WRK.*Synon_152_work_field;

ENDIF;

//?Calculate Adj Actual Yield
DO;

CASE;

// IF WRK.TH Adj Live Wgt NE WRK.Zero USR
IF WRK.TH_Adj_Live_Wgt <> WRK.Zero_USR;

//?actual yield percent: hot w / live wgt * 100
// Adj Actual Yield
WRK.TH_Adj_Actual_Yield = ( PAR.TH_Hot_Wgt / WRK.TH_Adj_Live_Wgt ) * 100;

ENDIF;

ENDDO;

//?Calculate Hot Weight
CASE;

// IF WRK.TH Head Killed NE WRK.Zero USR
IF WRK.TH_Head_Killed <> WRK.Zero_USR;

//?Accumulated totals div by head killed
// WRK.TH Avg Hot Wgt = WRK.TH Hot Wgt / WRK.TH Head Killed *
WRK.TH_Avg_Hot_Wgt = WRK.TH_Hot_Wgt / WRK.TH_Head_Killed;

//?Calculate Hot Weight
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.TH Avg Hot Wgt = CON.*ZERO
WRK.TH_Avg_Hot_Wgt = *ZERO;

ENDIF;

//?Weighted Adverages
CASE;

// IF WRK.TH Hot Wgt NE WRK.Zero USR
IF WRK.TH_Hot_Wgt <> WRK.Zero_USR;

//?Weighted average
// WRK.TH Avg Lean Percent = WRK.Hot Wgt/Lean % Accum Usr / WRK.TH Hot Wgt *
WRK.TH_Avg_Lean_Percent = WRK.Hot_Wgt_Lean_Accum_Usr / WRK.TH_Hot_Wgt;

// WRK.TH Avg Backfat = WRK.Hot Wgt/Backf Accum Usr / WRK.TH Hot Wgt *
WRK.TH_Avg_Backfat = WRK.Hot_Wgt_Backf_Accum_Usr / WRK.TH_Hot_Wgt;

// WRK.TH Avg Loin Eye Depth = WRK.Hot Wgt/Loine Accum Usr / WRK.TH Hot Wgt *
WRK.TH_Avg_Loin_Eye_Depth = WRK.Hot_Wgt_Loine_Accum_Usr / WRK.TH_Hot_Wgt;

// WRK.TH Avg Light Reflectance = WRK.Hot Wgt/LghtR Accum Usr / WRK.TH Hot Wgt *
WRK.TH_Avg_Light_Reflectance = WRK.Hot_Wgt_LghtR_Accum_Usr / WRK.TH_Hot_Wgt;

//?Weighted Adverages
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.TH Avg Lean Percent = CON.*ZERO
WRK.TH_Avg_Lean_Percent = *ZERO;

// WRK.TH Avg Backfat = CON.*ZERO
WRK.TH_Avg_Backfat = *ZERO;

// WRK.TH Avg Loin Eye Depth = CON.*ZERO
WRK.TH_Avg_Loin_Eye_Depth = *ZERO;

// WRK.TH Avg Light Reflectance = CON.*ZERO
WRK.TH_Avg_Light_Reflectance = *ZERO;

ENDIF;

//?Actual Yield Percent
CASE;

// IF PAR.TH Live Wgt NE WRK.Zero USR
IF PAR.TH_Live_Wgt <> WRK.Zero_USR;

//?actual yield percent: hot w / live wgt * 100
// TH Actual Yield Percent
WRK.TH_Actual_Yield = ( WRK.TH_Hot_Wgt / PAR.TH_Live_Wgt ) * 100;

//?Actual Yield Percent
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.TH Actual Yield % = CON.*ZERO
WRK.TH_Actual_Yield = *ZERO;

ENDIF;

ENDDO;

//?Validate tattoo header
CASE;

// IF WRK.Net Head Usr is *Zeros
IF WRK.Net_Head_Usr = *ZERO;

//?Validate tattoo header
// IF *OTHERWISE
IF *OTHERWISE;

//?Validate tattoo header
DO;

DO;

CASE;

// IF WRK.Head Percent Usr GT PAR.Head > Percent Min
IF WRK.Head_Percent_Usr > PAR.Head_Percent_Min;

//?head killed > Percent Error
// WRK.KV Error Code = CON.HHP
WRK.KV_Error_Code = 'HHP';

// WRK.TH Header Error Sts = CND.Header Error
WRK.TH_Header_Error_Sts = 'E';

// WRK.TH Kill Balancing Sts = CND.Error
WRK.TH_Kill_Balancing_Sts = 'E';

EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(999999);
PARAMETER('H');
PARAMETER(WRK.KV_Error_Code);
PARAMETER(WRK.KV_Error_Description);
PARAMETER(WRK.RS_User_Changed);
PARAMETER(WRK.RS_Date_Changed);
PARAMETER(WRK.RS_Time_Changed);
PARAMETER(WRK.RS_Record_Status);
PARAMETER(WRK.RS_Job);
PARAMETER(WRK.RS_Program);
PARAMETER(WRK.RS_User_Added);
PARAMETER(WRK.RS_Date_Added);
PARAMETER(WRK.RS_Time_Added);
{
 //?USER: Processing before Data update

 CASE;

 // IF PAR.KV Error Description is Entered
 IF PAR.KV_Error_Description <> *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
 PARAMETER(PAR.KV_Error_Code);
 PARAMETER(DB1.KV_Error_Description);
 {
  //?USER: Process Data record

  // PAR.EV Description = DB1.EV Description
  PAR.EV_Description = DB1.EV_Description;

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


// IF WRK.Head Percent Usr LE PAR.Head < Percent Max
IF WRK.Head_Percent_Usr <= PAR.Head_Percent_Max;

//?head killed < Percent Error
// WRK.KV Error Code = CON.HLP
WRK.KV_Error_Code = 'HLP';

// WRK.TH Header Error Sts = CND.Header Error
WRK.TH_Header_Error_Sts = 'E';

// WRK.TH Kill Balancing Sts = CND.Error
WRK.TH_Kill_Balancing_Sts = 'E';

EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(999999);
PARAMETER('H');
PARAMETER(WRK.KV_Error_Code);
PARAMETER(WRK.KV_Error_Description);
PARAMETER(WRK.RS_User_Changed);
PARAMETER(WRK.RS_Date_Changed);
PARAMETER(WRK.RS_Time_Changed);
PARAMETER(WRK.RS_Record_Status);
PARAMETER(WRK.RS_Job);
PARAMETER(WRK.RS_Program);
PARAMETER(WRK.RS_User_Added);
PARAMETER(WRK.RS_Date_Added);
PARAMETER(WRK.RS_Time_Added);
{
 //?USER: Processing before Data update

 CASE;

 // IF PAR.KV Error Description is Entered
 IF PAR.KV_Error_Description <> *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
 PARAMETER(PAR.KV_Error_Code);
 PARAMETER(DB1.KV_Error_Description);
 {
  //?USER: Process Data record

  // PAR.EV Description = DB1.EV Description
  PAR.EV_Description = DB1.EV_Description;

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


ENDIF;

CASE;

// IF PAR.TH User Error Override is Yes
IF PAR.TH_User_Error_Override = 'Y';

// OR PAR.TH Live Wgt is Zeros
OR ( PAR.TH_Live_Wgt = *ZERO;

// AND PAR.TH Source Type is Internal
AND PAR.TH_Source_Type = 'I' );

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF WRK.TH Actual Yield Percent GT PAR.High Yield Min
IF WRK.TH_Actual_Yield > PAR.High_Yield_Min;

//?High Yield
// WRK.KV Error Code = CON.YHI
WRK.KV_Error_Code = 'YHI';

// WRK.TH Header Error Sts = CND.Header Error
WRK.TH_Header_Error_Sts = 'E';

// WRK.TH Kill Balancing Sts = CND.Error
WRK.TH_Kill_Balancing_Sts = 'E';

EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(999999);
PARAMETER('H');
PARAMETER(WRK.KV_Error_Code);
PARAMETER(WRK.KV_Error_Description);
PARAMETER(WRK.RS_User_Changed);
PARAMETER(WRK.RS_Date_Changed);
PARAMETER(WRK.RS_Time_Changed);
PARAMETER(WRK.RS_Record_Status);
PARAMETER(WRK.RS_Job);
PARAMETER(WRK.RS_Program);
PARAMETER(WRK.RS_User_Added);
PARAMETER(WRK.RS_Date_Added);
PARAMETER(WRK.RS_Time_Added);
{
 //?USER: Processing before Data update

 CASE;

 // IF PAR.KV Error Description is Entered
 IF PAR.KV_Error_Description <> *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
 PARAMETER(PAR.KV_Error_Code);
 PARAMETER(DB1.KV_Error_Description);
 {
  //?USER: Process Data record

  // PAR.EV Description = DB1.EV Description
  PAR.EV_Description = DB1.EV_Description;

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


// IF WRK.TH Actual Yield Percent LE PAR.Low Yield Max
IF WRK.TH_Actual_Yield <= PAR.Low_Yield_Max;

//?Low Yield
// WRK.KV Error Code = CON.YLW
WRK.KV_Error_Code = 'YLW';

// WRK.TH Header Error Sts = CND.Header Error
WRK.TH_Header_Error_Sts = 'E';

// WRK.TH Kill Balancing Sts = CND.Error
WRK.TH_Kill_Balancing_Sts = 'E';

EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(999999);
PARAMETER('H');
PARAMETER(WRK.KV_Error_Code);
PARAMETER(WRK.KV_Error_Description);
PARAMETER(WRK.RS_User_Changed);
PARAMETER(WRK.RS_Date_Changed);
PARAMETER(WRK.RS_Time_Changed);
PARAMETER(WRK.RS_Record_Status);
PARAMETER(WRK.RS_Job);
PARAMETER(WRK.RS_Program);
PARAMETER(WRK.RS_User_Added);
PARAMETER(WRK.RS_Date_Added);
PARAMETER(WRK.RS_Time_Added);
{
 //?USER: Processing before Data update

 CASE;

 // IF PAR.KV Error Description is Entered
 IF PAR.KV_Error_Description <> *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
 PARAMETER(PAR.KV_Error_Code);
 PARAMETER(DB1.KV_Error_Description);
 {
  //?USER: Process Data record

  // PAR.EV Description = DB1.EV Description
  PAR.EV_Description = DB1.EV_Description;

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


ENDIF;

ENDIF;

ENDDO;

ENDDO;

ENDIF;

//?balance flags, user balance, system balance
CASE;

// IF PAR.Requested by User to Bal is Yes
IF PAR.Requested_by_User_to_Bal = 'Y';

// WRK.TH Kill Balancing Sts = CND.Balance
WRK.TH_Kill_Balancing_Sts = 'B';

CASE;

// IF WRK.TH Head Killed LT WRK.Net Head Usr
IF WRK.TH_Head_Killed < WRK.Net_Head_Usr;

// WRK.TH Bal to Kill Gen = CND.User Requested Generated
WRK.TH_Bal_to_Kill_Gen = 'U';

ENDIF;

//?balance flags, user balance, system balance
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF WRK.TH Kill Balancing Sts is Error
IF WRK.TH_Kill_Balancing_Sts = 'E';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF WRK.TH Head Killed is *Zeros
IF WRK.TH_Head_Killed = *ZERO;

// WRK.TH Kill Balancing Sts = CND.Balance
WRK.TH_Kill_Balancing_Sts = 'B';

// IF WRK.TH Head Killed EQ WRK.Net Head Usr
IF WRK.TH_Head_Killed = WRK.Net_Head_Usr;

// WRK.TH Kill Balancing Sts = CND.Balance
WRK.TH_Kill_Balancing_Sts = 'B';

// IF WRK.TH Head Killed GT WRK.Net Head Usr
IF WRK.TH_Head_Killed > WRK.Net_Head_Usr;

// WRK.TH Kill Balancing Sts = CND.Error
WRK.TH_Kill_Balancing_Sts = 'E';

ENDIF;

ENDIF;

ENDIF;

// PAR.TH Header Error Sts = WRK.TH Header Error Sts
PAR.TH_Header_Error_Sts = WRK.TH_Header_Error_Sts;

// PAR.TH Detail Error Sts = WRK.TH Detail Error Sts
PAR.TH_Detail_Error_Sts = WRK.TH_Detail_Error_Sts;

// PAR.TH Kill Balancing Sts = WRK.TH Kill Balancing Sts
PAR.TH_Kill_Balancing_Sts = WRK.TH_Kill_Balancing_Sts;

// PAR.TH Bal to Kill Gen = WRK.TH Bal to Kill Gen
PAR.TH_Bal_to_Kill_Gen = WRK.TH_Bal_to_Kill_Gen;

//?** OLD: Chg Tattoo Header   CH * Tattoo Header ** (PKP)
EXECUTE FUNCTION(Chg Val Kill Trans    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1190805;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TH_Recalc_Live_Wgt_Yld);
PARAMETER(WRK.TH_Head_Condemned);
PARAMETER(WRK.TH_Head_Killed);
PARAMETER(WRK.TH_Head_Adds);
PARAMETER(WRK.TH_Head_Accepted);
PARAMETER(WRK.TH_Adj_Live_Wgt);
PARAMETER(WRK.TH_Hot_Wgt);
PARAMETER(WRK.TH_Tot_Loin_Eye_Depth);
PARAMETER(WRK.TH_Tot_Backfat_Inches);
PARAMETER(WRK.TH_Tot_Light_Reflectance);
PARAMETER(WRK.TH_Avg_Hot_Wgt);
PARAMETER(WRK.TH_Avg_Light_Reflectance);
PARAMETER(WRK.TH_Avg_Lean_Percent);
PARAMETER(WRK.TH_Avg_Loin_Eye_Depth);
PARAMETER(WRK.TH_Avg_Backfat);
PARAMETER(WRK.TH_Actual_Yield);
PARAMETER(WRK.TH_Adj_Actual_Yield);
PARAMETER(WRK.TH_Fixed_Cost_Amount);
PARAMETER(WRK.TH_Header_Error_Sts);
PARAMETER(WRK.TH_Detail_Error_Sts);
PARAMETER(WRK.TH_Kill_Balancing_Sts);
PARAMETER(WRK.TH_Bal_to_Kill_Gen);
PARAMETER(*ZERO);
PARAMETER(WRK.TH_Head_Excluded);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.TH_PHA_Add_Type);
PARAMETER(LCL.TH_PHA_Average_Type);
PARAMETER(LCL.TH_PHA_Add_Reason);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


//?Added 8/7/98 -- call c4841  (rmc)
//?If Internal, and balanced change the TD Ext complete status to Yes
CASE;

// IF WRK.TH Kill Balancing Sts is Balance
IF WRK.TH_Kill_Balancing_Sts = 'B';

// AND PAR.TH Tattoo Number is Internals
AND PAR.TH_Tattoo_Number >= 7000;
AND PAR.TH_Tattoo_Number <= 7999;

EXECUTE FUNCTION(RtvChg Td Cmpl Sts     RT) TYPE(RTVOBJ) FILE(PKDYCPP)          AB1211238;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER('Y');
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Tattoo Detail Ext  CH) TYPE(CHGOBJ) FILE(PKDYCPP)          AB1196902;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TD_Sequence_Number);
 PARAMETER(PAR.Completed_Status);
 PARAMETER(DB1.Hot_Head);
 PARAMETER(DB1.TDE_Head_Condemned);
 PARAMETER(DB1.Head_2);
 PARAMETER(DB1.Status_1);
 PARAMETER(DB1.Status_2);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing after Data read

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


ENDIF;

