// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POWOPFR
// ?Date: 14.08.2025 Time: 12:06:25
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

//?USER: Record selection processing

EXECUTE FUNCTION(RTV Bill Type, Event   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1366339;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(WRK.Event_Code);
PARAMETER(WRK.Billing_Activity_Type);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.Billing Activity Type is Credit or Debit Memo
IF WRK.Billing_Activity_Type = '2'/'3';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

//?Actual Freight Paid = Zero
CASE;

// IF PAR.USR Confirm Status (Y/N) is Yes
IF PAR.USR_Confirm_Status_Y_N = 'Y';

// AND DB1.Actual Freight Amount is Not Paid
AND DB1.Actual_Freight_Amount = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Check Sales route selection
CASE;

// IF PAR.Sales Route Code is entered
IF PAR.Sales_Route_Code <> *BLANK;

// AND PAR.Sales Route Code NE DB1.Sales Route Code
AND PAR.Sales_Route_Code <> DB1.Sales_Route_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?PK0412 2/11/02 Per selection, Exclude if Carr Paid, or Collect Truck
CASE;

// IF PAR.Exclude if Carr Paid STS is Yes
IF PAR.Exclude_if_Carr_Paid_STS = 'Y';

// OR PAR.Exclude Shp Mth is CT STS is Yes
OR PAR.Exclude_Shp_Mth_is_CT_STS = 'Y';

EXECUTE FUNCTION(RTV Ship Meth/Carr Pay RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1642160;
PARAMETER(DB1.Load_ID);
PARAMETER(LCL.Load_Carrier_Pay_Amt);
PARAMETER(LCL.Shipping_Method);
PARAMETER(LCL.LH_Carrier_Payment_Sts);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?04/21/04 PKD Using Carrier Paid Status instead of Amount.
//?Exclude if Carrier Payment has been made
CASE;

// IF PAR.Exclude if Carr Paid STS is Yes
IF PAR.Exclude_if_Carr_Paid_STS = 'Y';

CASE;

// IF LCL.LH Carrier Payment Sts is Paid
IF LCL.LH_Carrier_Payment_Sts = 'P';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Exclude Carrier truck
CASE;

// IF PAR.Exclude Shp Mth is CT STS is Yes
IF PAR.Exclude_Shp_Mth_is_CT_STS = 'Y';

CASE;

// IF LCL.Shipping Method is Collect Truck
IF LCL.Shipping_Method = 'CT';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?USER: Process top of page

MOVE *ALL (To: TOP From: PAR);

CASE;

// IF PAR.Company Number is Equal to zero
IF PAR.Company_Number = *ZERO;

// TOP.Company Name = CON.*All
TOP_Company_Name = *All;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Company Name Only  RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1100959;
PARAMETER(TOP_Company_Number);
PARAMETER(TOP_Company_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(TOP_Parent_Customer);
PARAMETER(TOP_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(TOP_Ship_To_Customer);
PARAMETER(TOP_Ship_To_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.Sales Route Code is entered
IF PAR.Sales_Route_Code <> *BLANK;

EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1270614;
PARAMETER(TOP_Sales_Route_Code);
PARAMETER(TOP_Condition_Desc_2_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Condition Desc. 2  USR = CON.*ALL
TOP_Condition_Desc_2_USR = *ALL;

ENDIF;

// TOP.USR From Date = PAR.USR From Date
TOP_USR_From_Date = PAR.USR_From_Date;

// TOP.USR To Date = PAR.USR To Date
TOP_USR_To_Date = PAR.USR_To_Date;

// TOP.USR Description - 15 = CON.SALES ROUTE
TOP_USR_Description_15 = 'SALES ROUTE';

// TOP.USR Confirm Status (Y/N) = PAR.USR Confirm Status (Y/N)
TOP_USR_Confirm_Status_Y_N = PAR.USR_Confirm_Status_Y_N;

// TOP.Condition Desc. 1  USR = Condition name of PAR.USR Summary/Detail or Tot
TOP_Condition_Desc_1_USR = RTVCND(PAR.USR_Summary_Detail_or_Tot);

//?USER: On print of first page format

MOVE *ALL (To: 1PG From: PAR);

EXECUTE FUNCTION(RTV Company Name Only  RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1100959;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Company_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(X1PG_Parent_Customer);
PARAMETER(X1PG_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(X1PG_Ship_To_Customer);
PARAMETER(X1PG_Ship_To_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.Sales Route Code is entered
IF PAR.Sales_Route_Code <> *BLANK;

EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1270614;
PARAMETER(X1PG_Sales_Route_Code);
PARAMETER(X1PG_Condition_Desc_2_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Condition Desc. 2  USR = CON.*ALL
X1PG_Condition_Desc_2_USR = *ALL;

ENDIF;

// 1PG.USR From Date = PAR.USR From Date
X1PG_USR_From_Date = PAR.USR_From_Date;

// 1PG.USR To Date = PAR.USR To Date
X1PG_USR_To_Date = PAR.USR_To_Date;

// 1PG.USR Description - 15 = CON.Sales Route
1PG.USR Description - 15 = 'Sales Route';

// 1PG.USR Confirm Status (Y/N) = PAR.USR Confirm Status (Y/N)
X1PG_USR_Confirm_Status_Y_N = PAR.USR_Confirm_Status_Y_N;

// 1PG.Condition Desc. 1  USR = Condition name of PAR.USR Summary/Detail or Tot
X1PG_Condition_Desc_1_USR = RTVCND(PAR.USR_Summary_Detail_or_Tot);

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

CASE;

IF NEW Sales_Route_Code;
EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1270614;
PARAMETER(CUR.Sales_Route_Code);
PARAMETER(CUR.Condition_Desc_2_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Print Sales Route Code header format
PRINT Sales Route Code header format;

ENDIF;

CASE;

IF NEW Ship_To_Customer;
// SUPPRESSED PRINT Ship To Customer header format

ENDIF;

// SUPPRESSED PRINT Order Number header format

// SUPPRESSED PRINT Accounting Company Number header format

//?USER: On print of detail format

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

// WRK.USR Weight = WRK.USR Weight + DB1.Weight Billed
WRK.USR_Weight = WRK.USR_Weight + DB1.Weight_Billed;

// WRK.USR Billing Dtl Net Dol 2 = WRK.USR Billing Dtl Net Dol 2 + DB1.Absorbed Freight Amount
WRK.USR_Billing_Dtl_Net_Dol_2 = WRK.USR_Billing_Dtl_Net_Dol_2                                      +
+ DB1.Absorbed_Freight_Amount;

// WRK.USR Billing Dtl Net Dol 3 = WRK.USR Billing Dtl Net Dol 3 + DB1.Actual Freight Amount
WRK.USR_Billing_Dtl_Net_Dol_3 = WRK.USR_Billing_Dtl_Net_Dol_3                                      +
+ DB1.Actual_Freight_Amount;

// WRK.USR Billing Dtl Net Dol 5 = WRK.USR Billing Dtl Net Dol 5 + DB1.Rated Freight
WRK.USR_Billing_Dtl_Net_Dol_5 = WRK.USR_Billing_Dtl_Net_Dol_5 + DB1.Rated_Freight;

//?USER: Print required level totals

// SUPPRESSED PRINT Accounting Company Number totals format

CASE;

IF NEW Order_Number;
// CUR.Weight 11.1 USR = WRK.USR Weight
CUR.Weight_11_1_USR = WRK.USR_Weight;

// CUR.USR Billing Dtl Net Dol 2 = WRK.USR Billing Dtl Net Dol 2
CUR.USR_Billing_Dtl_Net_Dol_2 = WRK.USR_Billing_Dtl_Net_Dol_2;

// CUR.USR Billing Dtl Net Dol 3 = WRK.USR Billing Dtl Net Dol 3
CUR.USR_Billing_Dtl_Net_Dol_3 = WRK.USR_Billing_Dtl_Net_Dol_3;

// CUR.USR Billing Dtl Net Dol 4 = CUR.USR Billing Dtl Net Dol 2 - CUR.USR Billing Dtl Net Dol 3
CUR.USR_Billing_Dtl_Net_Dol_4 = CUR.USR_Billing_Dtl_Net_Dol_2                                      +
- CUR.USR_Billing_Dtl_Net_Dol_3;

// CUR.USR Billing Dtl Net Dol 5 = WRK.USR Billing Dtl Net Dol 5
CUR.USR_Billing_Dtl_Net_Dol_5 = WRK.USR_Billing_Dtl_Net_Dol_5;

//?Calculate Freight Rates
CASE;

// IF CUR.Weight 11.1 USR is Greater than Zero
IF CUR.Weight_11_1_USR > *ZERO;

// WRK.USR Work Percent 7/6 = CUR.USR Billing Dtl Net Dol 2 / CUR.Weight 11.1 USR *
WRK.USR_Work_Percent_7_6 = CUR.USR_Billing_Dtl_Net_Dol_2 / CUR.Weight_11_1_USR;

// CUR.USR Work Percent 5.2 = WRK.USR Work Percent 7/6 * CON.100 *Rounded
CUR.USR_Work_Percent_5_2 = WRK.USR_Work_Percent_7_6 * 100 'H';

// WRK.USR Work Percent 7/6 = CUR.USR Billing Dtl Net Dol 3 / CUR.Weight 11.1 USR *
WRK.USR_Work_Percent_7_6 = CUR.USR_Billing_Dtl_Net_Dol_3 / CUR.Weight_11_1_USR;

// CUR.USR Freight Cost = WRK.USR Work Percent 7/6 * CON.100 *Rounded
CUR.USR_Freight_Cost = WRK.USR_Work_Percent_7_6 * 100 'H';

// WRK.USR Work Percent 7/6 = CUR.USR Billing Dtl Net Dol 5 / CUR.Weight 11.1 USR *
WRK.USR_Work_Percent_7_6 = CUR.USR_Billing_Dtl_Net_Dol_5 / CUR.Weight_11_1_USR;

// CUR.Freight Cost Work = WRK.USR Work Percent 7/6 * CON.100 *Rounded
CUR.Freight_Cost_Work = WRK.USR_Work_Percent_7_6 * 100 'H';

ENDIF;

CASE;

// IF PAR.USR Summary/Detail or Tot is Summary
IF PAR.USR_Summary_Detail_or_Tot = 'S';

// OR CUR.USR Billing Dtl Net Dol 4 is Greater than Zero
OR CUR.USR_Billing_Dtl_Net_Dol_4 >= *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

// Print Order Number totals format
PRINT Order Number totals format;

CASE;

// IF CUR.USR Billing Dtl Net Dol 4 is Less Than Zeros
IF CUR.USR_Billing_Dtl_Net_Dol_4 < *ZERO;

// NXT.Weight 11.1 USR = NXT.Weight 11.1 USR + CUR.Weight 11.1 USR
NXT.Weight_11_1_USR = NXT.Weight_11_1_USR + CUR.Weight_11_1_USR;

// NXT.USR Billing Dtl Net Dol 2 = NXT.USR Billing Dtl Net Dol 2 + CUR.USR Billing Dtl Net Dol 2
NXT.USR_Billing_Dtl_Net_Dol_2 = NXT.USR_Billing_Dtl_Net_Dol_2                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_2;

// NXT.USR Billing Dtl Net Dol 3 = NXT.USR Billing Dtl Net Dol 3 + CUR.USR Billing
NXT.USR_Billing_Dtl_Net_Dol_3 = NXT.USR_Billing_Dtl_Net_Dol_3                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_3;

// NXT.USR Billing Dtl Net Dol 4 = NXT.USR Billing Dtl Net Dol 4 + CUR.USR Billing
NXT.USR_Billing_Dtl_Net_Dol_4 = NXT.USR_Billing_Dtl_Net_Dol_4                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_4;

// NXT.USR Billing Dtl Net Dol 5 = NXT.USR Billing Dtl Net Dol 5 + CUR.USR Billing
NXT.USR_Billing_Dtl_Net_Dol_5 = NXT.USR_Billing_Dtl_Net_Dol_5                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_5;

ENDIF;

// WRK.USR Weight = CON.*ZERO
WRK.USR_Weight = *ZERO;

// WRK.USR Billing Dtl Net Dol 2 = CON.*ZERO
WRK.USR_Billing_Dtl_Net_Dol_2 = *ZERO;

// WRK.USR Billing Dtl Net Dol 3 = CON.*ZERO
WRK.USR_Billing_Dtl_Net_Dol_3 = *ZERO;

// WRK.USR Billing Dtl Net Dol 5 = CON.*ZERO
WRK.USR_Billing_Dtl_Net_Dol_5 = *ZERO;

ENDIF;

CASE;

IF NEW Ship_To_Customer;
//?Calculate Freight Rates
CASE;

// IF CUR.Weight 11.1 USR is Greater than Zero
IF CUR.Weight_11_1_USR > *ZERO;

// WRK.USR Work Percent 7/6 = CUR.USR Billing Dtl Net Dol 2 / CUR.Weight 11.1 USR *
WRK.USR_Work_Percent_7_6 = CUR.USR_Billing_Dtl_Net_Dol_2 / CUR.Weight_11_1_USR;

// CUR.USR Work Percent 5.2 = WRK.USR Work Percent 7/6 * CON.100 *Rounded
CUR.USR_Work_Percent_5_2 = WRK.USR_Work_Percent_7_6 * 100 'H';

// WRK.USR Work Percent 7/6 = CUR.USR Billing Dtl Net Dol 3 / CUR.Weight 11.1 USR *
WRK.USR_Work_Percent_7_6 = CUR.USR_Billing_Dtl_Net_Dol_3 / CUR.Weight_11_1_USR;

// CUR.USR Freight Cost = WRK.USR Work Percent 7/6 * CON.100 *Rounded
CUR.USR_Freight_Cost = WRK.USR_Work_Percent_7_6 * 100 'H';

// WRK.USR Work Percent 7/6 = CUR.USR Billing Dtl Net Dol 5 / CUR.Weight 11.1 USR *
WRK.USR_Work_Percent_7_6 = CUR.USR_Billing_Dtl_Net_Dol_5 / CUR.Weight_11_1_USR;

// CUR.Freight Cost Work = WRK.USR Work Percent 7/6 * CON.100 *Rounded
CUR.Freight_Cost_Work = WRK.USR_Work_Percent_7_6 * 100 'H';

ENDIF;

CASE;

// IF CUR.USR Billing Dtl Net Dol 4 is Greater than Zero
IF CUR.USR_Billing_Dtl_Net_Dol_4 >= *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

// Print Ship To Customer totals format
PRINT Ship To Customer totals format;

CASE;

// IF CUR.USR Billing Dtl Net Dol 4 is Less Than Zeros
IF CUR.USR_Billing_Dtl_Net_Dol_4 < *ZERO;

// NXT.Weight 11.1 USR = NXT.Weight 11.1 USR + CUR.Weight 11.1 USR
NXT.Weight_11_1_USR = NXT.Weight_11_1_USR + CUR.Weight_11_1_USR;

// NXT.USR Billing Dtl Net Dol 2 = NXT.USR Billing Dtl Net Dol 2 + CUR.USR Billing Dtl Net Dol 2
NXT.USR_Billing_Dtl_Net_Dol_2 = NXT.USR_Billing_Dtl_Net_Dol_2                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_2;

// NXT.USR Billing Dtl Net Dol 3 = NXT.USR Billing Dtl Net Dol 3 + CUR.USR Billing Dtl Net Dol 3
NXT.USR_Billing_Dtl_Net_Dol_3 = NXT.USR_Billing_Dtl_Net_Dol_3                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_3;

// NXT.USR Billing Dtl Net Dol 4 = NXT.USR Billing Dtl Net Dol 4 + CUR.USR Billing Dtl Net Dol 4
NXT.USR_Billing_Dtl_Net_Dol_4 = NXT.USR_Billing_Dtl_Net_Dol_4                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_4;

// NXT.USR Billing Dtl Net Dol 5 = NXT.USR Billing Dtl Net Dol 5 + CUR.USR Billing Dtl Net Dol 5
NXT.USR_Billing_Dtl_Net_Dol_5 = NXT.USR_Billing_Dtl_Net_Dol_5                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_5;

ENDIF;

ENDIF;

CASE;

IF NEW Sales_Route_Code;
// WRK.USR Work Field 3A = CVTVAR(CUR.Company Number)
WRK.USR_Work_Field_3A = CVTVAR(CUR.Company_Number);

// WRK.USR Hold Description = WRK.USR Work Field 7A
WRK.USR_Hold_Description = WRK.USR_Work_Field_7A;

// Execute function CLC Remove LeadZeros 30US.
EXECUTE FUNCTION(CLC Remove LeadZeros 30US) TYPE(EXCUSRSRC) ('OMNHUFR');
PARAMETER(WRK.USR_Hold_Description);
PARAMETER(WRK.USR_Description);
{
 E                    AR1        30  1               ARRAY 1
 E                    AR2        30  1               ARRAY 2
 C                     MOVEAWUCUNA    AR1              LOAD ARRAY
 C                     Z-ADD1         X       20       SET COUNTER
 C                     Z-ADD1         Y       20       SET COUNTER
 C                     MOVE 'N'       STOP    1        FLAG
 C           X         DOWLT31
 C           AR1,X     IFEQ '0'
 C           STOP      ANDEQ'N'
 C                     ADD  1         X
 C                     ELSE
 C                     MOVE AR1,X     AR2,Y
 C                     ADD  1         Y
 C                     ADD  1         X
 C                     MOVE 'Y'       STOP
 C                     END
 C                     END
 C                     MOVEAAR2       WUJNNA           LOAD OUTPUT
}


//?Calculate freight rates
CASE;

// IF CUR.Weight 11.1 USR is Greater than Zero
IF CUR.Weight_11_1_USR > *ZERO;

// WRK.USR Work Percent 7/6 = CUR.USR Billing Dtl Net Dol 2 / CUR.Weight 11.1 USR *
WRK.USR_Work_Percent_7_6 = CUR.USR_Billing_Dtl_Net_Dol_2 / CUR.Weight_11_1_USR;

// CUR.USR Work Percent 5.2 = WRK.USR Work Percent 7/6 * CON.100 *Rounded
CUR.USR_Work_Percent_5_2 = WRK.USR_Work_Percent_7_6 * 100 'H';

// WRK.USR Work Percent 7/6 = CUR.USR Billing Dtl Net Dol 3 / CUR.Weight 11.1 USR *
WRK.USR_Work_Percent_7_6 = CUR.USR_Billing_Dtl_Net_Dol_3 / CUR.Weight_11_1_USR;

// CUR.USR Freight Cost = WRK.USR Work Percent 7/6 * CON.100 *Rounded
CUR.USR_Freight_Cost = WRK.USR_Work_Percent_7_6 * 100 'H';

// WRK.USR Work Percent 7/6 = CUR.USR Billing Dtl Net Dol 5 / CUR.Weight 11.1 USR *
WRK.USR_Work_Percent_7_6 = CUR.USR_Billing_Dtl_Net_Dol_5 / CUR.Weight_11_1_USR;

// CUR.Freight Cost Work = WRK.USR Work Percent 7/6 * CON.100 *Rounded
CUR.Freight_Cost_Work = WRK.USR_Work_Percent_7_6 * 100 'H';

ENDIF;

CASE;

// IF CUR.USR Billing Dtl Net Dol 4 is Greater than Zero
IF CUR.USR_Billing_Dtl_Net_Dol_4 >= *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

// Print Sales Route Code totals format
PRINT Sales Route Code totals format;

CASE;

// IF CUR.USR Billing Dtl Net Dol 4 is Less Than Zeros
IF CUR.USR_Billing_Dtl_Net_Dol_4 < *ZERO;

// NXT.Weight 11.1 USR = NXT.Weight 11.1 USR + CUR.Weight 11.1 USR
NXT.Weight_11_1_USR = NXT.Weight_11_1_USR + CUR.Weight_11_1_USR;

// NXT.USR Billing Dtl Net Dol 2 = NXT.USR Billing Dtl Net Dol 2 + CUR.USR Billing Dtl Net Dol 2
NXT.USR_Billing_Dtl_Net_Dol_2 = NXT.USR_Billing_Dtl_Net_Dol_2                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_2;

// NXT.USR Billing Dtl Net Dol 3 = NXT.USR Billing Dtl Net Dol 3 + CUR.USR Billing Dtl Net Dol 3
NXT.USR_Billing_Dtl_Net_Dol_3 = NXT.USR_Billing_Dtl_Net_Dol_3                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_3;

// NXT.USR Billing Dtl Net Dol 4 = NXT.USR Billing Dtl Net Dol 4 + CUR.USR Billing Dtl Net Dol 4
NXT.USR_Billing_Dtl_Net_Dol_4 = NXT.USR_Billing_Dtl_Net_Dol_4                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_4;

// NXT.USR Billing Dtl Net Dol 5 = NXT.USR Billing Dtl Net Dol 5 + CUR.USR Billing Dtl Net Dol 5
NXT.USR_Billing_Dtl_Net_Dol_5 = NXT.USR_Billing_Dtl_Net_Dol_5                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_5;

ENDIF;

ENDIF;

//?USER: On print of final totals format

//?Calculate Freight Rates
CASE;

// IF CUR.Weight 11.1 USR is Greater than Zero
IF CUR.Weight_11_1_USR > *ZERO;

// WRK.USR Work Percent 7/6 = CUR.USR Billing Dtl Net Dol 2 / CUR.Weight 11.1 USR *
WRK.USR_Work_Percent_7_6 = CUR.USR_Billing_Dtl_Net_Dol_2 / CUR.Weight_11_1_USR;

// CUR.USR Work Percent 5.2 = WRK.USR Work Percent 7/6 * CON.100 *Rounded
CUR.USR_Work_Percent_5_2 = WRK.USR_Work_Percent_7_6 * 100 'H';

// WRK.USR Work Percent 7/6 = CUR.USR Billing Dtl Net Dol 3 / CUR.Weight 11.1 USR *
WRK.USR_Work_Percent_7_6 = CUR.USR_Billing_Dtl_Net_Dol_3 / CUR.Weight_11_1_USR;

// CUR.USR Freight Cost = WRK.USR Work Percent 7/6 * CON.100 *Rounded
CUR.USR_Freight_Cost = WRK.USR_Work_Percent_7_6 * 100 'H';

// WRK.USR Work Percent 7/6 = CUR.USR Billing Dtl Net Dol 5 / CUR.Weight 11.1 USR *
WRK.USR_Work_Percent_7_6 = CUR.USR_Billing_Dtl_Net_Dol_5 / CUR.Weight_11_1_USR;

// CUR.Freight Cost Work = WRK.USR Work Percent 7/6 * CON.100 *Rounded
CUR.Freight_Cost_Work = WRK.USR_Work_Percent_7_6 * 100 'H';

ENDIF;

