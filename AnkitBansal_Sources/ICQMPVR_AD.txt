// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for ICQMPVR
// ?Date: 14.08.2025 Time: 03:26:30
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('I/C');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?WI517 DN 10/12/23-Setup Eradani's Environment Libraries.
// Call program Upd Setup Eradani Libs CL.
CALL PROGRAM(Upd Setup Eradani Libs CL) ('PVBFUPC');

//?USER: Load screen

SET CURSOR;

// DTL.Condition Desc. 1  USR = Condition name of PAR.Inventory Trans. ID
DTL.Condition_Desc_1_USR = RTVCND(PAR.Inventory_Trans_ID);

// DTL.Transaction Date Code = JOB.*Job date
DTL.Transaction_Date_Code = JOB.*Job_date;

CASE;

// IF PAR.First Time Flag EQ WRK.BLANK
IF PAR.First_Time_Flag = WRK.BLANK;

// DTL.Accounting Company Number = PAR.Accounting Company Number
DTL.Company_Number = PAR.Company_Number;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDIF;

EXECUTE FUNCTION(RTV Company Name Only  RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1100959;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.USR_Company_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Validate fields

//?Select company number
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Accounting Company Number
IF PGM.*Cursor_field = DTL.Company_Number;

// Call program ZZZ Company by Alpha   SR.
CALL PROGRAM(ZZZ Company by Alpha   SR) ('CAAMSRR');
PARAMETER(DTL.Company_Number);

ENDIF;

ENDIF;

//?Select Transaction Type
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Inv. Trans. Type  USR
IF PGM.*Cursor_field = DTL.Inv_Trans_Type_USR;

//?Select Adjustments
CASE;

// IF PAR.Inventory Trans. ID is Adjustment
IF PAR.Inventory_Trans_ID = 'A';

CASE;

// IF PAR.Trans Contol AS400/Plant is Plant
IF PAR.Trans_Contol_AS400_Plant = 'P';

// Execute function Sel Cnd by Surrogate # US.
EXECUTE FUNCTION(Sel Cnd by Surrogate # US) TYPE(EXCUSRSRC) ('PDMIUFR');
PARAMETER(1410035);
PARAMETER(DTL.Inv_Trans_Type_USR);
{
 C                     CALL 'CAVLLSR'              90  *
 C                     PARM           W0RTN   7
 C                     PARM #ISRNM    Y2LSNO  70
 C           #BHKTX    PARM #BHKTX    W0EXVL 20        TRANSACTION TYPE
}


// IF *OTHERWISE
IF *OTHERWISE;

// Execute function Sel Cnd by Surrogate # US.
EXECUTE FUNCTION(Sel Cnd by Surrogate # US) TYPE(EXCUSRSRC) ('PDMIUFR');
PARAMETER(1306909);
PARAMETER(DTL.Inv_Trans_Type_USR);
{
 C                     CALL 'CAVLLSR'              90  *
 C                     PARM           W0RTN   7
 C                     PARM #ISRNM    Y2LSNO  70
 C           #BHKTX    PARM #BHKTX    W0EXVL 20        TRANSACTION TYPE
}


ENDIF;

ENDIF;

//?Select Issues
CASE;

// IF PAR.Inventory Trans. ID is Issue
IF PAR.Inventory_Trans_ID = 'I';

// Execute function Sel Cnd by Surrogate # US.
EXECUTE FUNCTION(Sel Cnd by Surrogate # US) TYPE(EXCUSRSRC) ('PDMIUFR');
PARAMETER(1306910);
PARAMETER(DTL.Inv_Trans_Type_USR);
{
 C                     CALL 'CAVLLSR'              90  *
 C                     PARM           W0RTN   7
 C                     PARM #ISRNM    Y2LSNO  70
 C           #BHKTX    PARM #BHKTX    W0EXVL 20        TRANSACTION TYPE
}


ENDIF;

//?Select Receipts
CASE;

// IF PAR.Inventory Trans. ID is Receipt
IF PAR.Inventory_Trans_ID = 'R';

// Execute function Sel Cnd by Surrogate # US.
EXECUTE FUNCTION(Sel Cnd by Surrogate # US) TYPE(EXCUSRSRC) ('PDMIUFR');
PARAMETER(1306911);
PARAMETER(DTL.Inv_Trans_Type_USR);
{
 C                     CALL 'CAVLLSR'              90  *
 C                     PARM           W0RTN   7
 C                     PARM #ISRNM    Y2LSNO  70
 C           #BHKTX    PARM #BHKTX    W0EXVL 20        TRANSACTION TYPE
}


ENDIF;

//?Select Transfers
CASE;

// IF PAR.Inventory Trans. ID is Transfer
IF PAR.Inventory_Trans_ID = 'T';

// Execute function Sel Cnd by Surrogate # US.
EXECUTE FUNCTION(Sel Cnd by Surrogate # US) TYPE(EXCUSRSRC) ('PDMIUFR');
PARAMETER(1306912);
PARAMETER(DTL.Inv_Trans_Type_USR);
{
 C                     CALL 'CAVLLSR'              90  *
 C                     PARM           W0RTN   7
 C                     PARM #ISRNM    Y2LSNO  70
 C           #BHKTX    PARM #BHKTX    W0EXVL 20        TRANSACTION TYPE
}


ENDIF;

ENDIF;

ENDIF;

//?Move user screen field to detail (Screen field is used for select)
// DTL.Inventory Trans. Type = DTL.Inv. Trans. Type  USR
DTL.Inventory_Trans_Type = DTL.Inv_Trans_Type_USR;

EXECUTE FUNCTION(RTV Company Name Only  RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1100959;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.USR_Company_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Check for valid company number
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Check for valid company number
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Company Number not found'
ERROR(USR0163);

ENDIF;

// DTL.USR Condition Description = Condition name of DTL.Inventory Trans. Type
DTL.USR_Condition_Description = RTVCND(DTL.Inventory_Trans_Type);

//?S13514 DN 07/31/18-Validate Transaction Date Code.
CASE;

// IF DTL.Transaction Date Code is entered
IF DTL.Transaction_Date_Code <> *ZERO;

EXECUTE FUNCTION(Val Date In Not < 2yrs IF) TYPE(EXCINTFUN)                     AC2157322;
PARAMETER(DTL.Transaction_Date_Code);
PARAMETER('T');
PARAMETER(LCL.Generic_Message_80_USR);
{
 //?Execute internal function

 //?Date In must be >= Jan 1 (2 yrs ago) and <= Current Date.
 //?Initialize.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Generic Message 80 USR = CON.*BLANK
 PAR.Generic_Message_80_USR = *BLANK;

 //?Set 'Date In' Text.
 CASE;

 // IF PAR.Date In Type USR is Transaction Date
 IF PAR.Date_In_Type_USR = 'T';

 // LCL.Text USR 15 = CON.Transaction
 LCL.Text_USR_15 = 'Transaction';

 //?Set 'Date In' Text.
 // IF PAR.Date In Type USR is Production Date
 IF PAR.Date_In_Type_USR = 'P';

 // LCL.Text USR 15 = CON.Production
 LCL.Text_USR_15 = 'Production';

 //?Set 'Date In' Text.
 // IF PAR.Date In Type USR is Label Date
 IF PAR.Date_In_Type_USR = 'L';

 // LCL.Text USR 15 = CON.Label
 LCL.Text_USR_15 = 'Label';

 ENDIF;

 ENDIF;

 //?Get System Date & Set Date 2 Years Back on Jan 1.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv System Date *CYMD IF) TYPE(EXCINTFUN)                      AC1952751;
 PARAMETER(LCL.System_Date_USR);
 {
  //?Execute internal function

  // LCL.*System timestamp = JOB.*System timestamp
  LCL.*System_timestamp = JOB.*System_timestamp;

  // LCL.Year USR = SUBSTRING(LCL.*System timestamp,CON.1,CON.4)
  LCL.Year_USR = SUBSTRING(LCL.*System_timestamp:1:4);

  // LCL.Month USR = SUBSTRING(LCL.*System timestamp,CON.6,CON.2)
  LCL.Month_USR = SUBSTRING(LCL.*System_timestamp:6:2);

  // LCL.Day USR = SUBSTRING(LCL.*System timestamp,CON.9,CON.2)
  LCL.Day_USR = SUBSTRING(LCL.*System_timestamp:9:2);

  // LCL.Date (Char-8) USR = CONCAT(LCL.Year USR,LCL.Month USR,CON.*ZERO)
  LCL.Date_Char_8_USR = LCL.Year_USR + LCL.Month_USR (*ZERO);

  // LCL.Date (Char-8) USR = CONCAT(LCL.Date (Char-8) USR,LCL.Day USR,CON.*ZERO)
  LCL.Date_Char_8_USR = LCL.Date_Char_8_USR + LCL.Day_USR (*ZERO);

  // LCL.DATE = CVTVAR(LCL.Date (Char-8) USR)
  LCL.DATE = CVTVAR(LCL.Date_Char_8_USR);

  EXECUTE FUNCTION(CVT *YYMD to *CYMD    IF) TYPE(EXCINTFUN)                      AC1929228;
  PARAMETER(PAR.System_Date_USR);
  PARAMETER(LCL.DATE);
  {
   //?Execute internal function

   //?** YEAR **
   // PAR.Year Code = PAR.DATE / CON.10000 *
   PAR.Year_Code = PAR.DATE / 10000;

   // PAR.Year  NBR USR = PAR.Year Code
   PAR.Year_NBR_USR = PAR.Year_Code;

   // PAR.Year  (Char) USR = CVTVAR(PAR.Year  NBR USR)
   PAR.Year_Char_USR = CVTVAR(PAR.Year_NBR_USR);

   //?** MONTH **
   // PAR.Month                 USR = PAR.DATE / CON.100 *
   PAR.Month_USR = PAR.DATE / 100;

   // PAR.Month (Char) USR = CVTVAR(PAR.Month                 USR)
   PAR.Month_Char_USR = CVTVAR(PAR.Month_USR);

   //?** DAY **
   // PAR.Day of Month USR = PAR.DATE
   PAR.Day_of_Month_USR = PAR.DATE;

   // PAR.Day   (Char) USR = CVTVAR(PAR.Day of Month USR)
   PAR.Day_Char_USR = CVTVAR(PAR.Day_of_Month_USR);

   //?CENTURY+YEAR
   CASE;

   // IF PAR.Year Code is Twentieth Century
   IF PAR.Year_Code <= 1999;

   // PAR.Date (Alpha) USR = CONCAT(CON.0,PAR.Year  (Char) USR,CON.*ZERO)
   PAR.Date_Alpha_USR = '0' + PAR.Year_Char_USR (*ZERO);

   //?CENTURY+YEAR
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Date (Alpha) USR = CONCAT(CON.1,PAR.Year  (Char) USR,CON.*ZERO)
   PAR.Date_Alpha_USR = '1' + PAR.Year_Char_USR (*ZERO);

   ENDIF;

   // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Month (Char) USR,CON.*ZERO)
   PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Month_Char_USR (*ZERO);

   // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Day   (Char) USR,CON.*ZERO)
   PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Day_Char_USR (*ZERO);

   // PAR.Date                  USR = CVTVAR(PAR.Date (Alpha) USR)
   PAR.Date_USR = CVTVAR(PAR.Date_Alpha_USR);

  }

 }

 // LCL.Transaction Date D8# USR = LCL.System Date USR
 LCL.Transaction_Date_D8#_USR = LCL.System_Date_USR;

 //?** YEAR ** (Go Back 2 Years)
 // LCL.Year Code = LCL.Transaction Date D8# USR / CON.10000 *
 LCL.Year_Code = LCL.Transaction_Date_D8#_USR / 10000;

 // LCL.Year Code = LCL.Year Code - CON.2
 LCL.Year_Code = LCL.Year_Code - 2;

 // LCL.Year Alpha (YYYY) USR = CVTVAR(LCL.Year Code)
 LCL.Year_Alpha_YYYY_USR = CVTVAR(LCL.Year_Code);

 // LCL.Year  NBR USR = LCL.Year Code
 LCL.Year_NBR_USR = LCL.Year_Code;

 // LCL.Year  (Char) USR = CVTVAR(LCL.Year  NBR USR)
 LCL.Year_Char_USR = CVTVAR(LCL.Year_NBR_USR);

 //?** MONTH ** (Default to Jan)
 // LCL.Month (Char) USR = CON.01
 LCL.Month_Char_USR = 01;

 //?** DAY ** (Default to 01)
 // LCL.Day   (Char) USR = CON.01
 LCL.Day_Char_USR = 01;

 //?** Convert Date to CYYMMDD Format **
 // LCL.Date (Char-8) USR = CONCAT(LCL.Year Alpha (YYYY) USR,LCL.Month (Char) USR,CON.*ZERO)
 LCL.Date_Char_8_USR = LCL.Year_Alpha_YYYY_USR + LCL.Month_Char_USR (*ZERO);

 // LCL.Date (Char-8) USR = CONCAT(LCL.Date (Char-8) USR,LCL.Day   (Char) USR,CON.*ZERO)
 LCL.Date_Char_8_USR = LCL.Date_Char_8_USR + LCL.Day_Char_USR (*ZERO);

 //?** Convert Date to CYYMMDD Format **
 //?CENTURY+YEAR
 CASE;

 // IF LCL.Year Code is Twentieth Century
 IF LCL.Year_Code <= 1999;

 // LCL.Date (Alpha) USR = CONCAT(CON.0,LCL.Year  (Char) USR,CON.*ZERO)
 LCL.Date_Alpha_USR = '0' + LCL.Year_Char_USR (*ZERO);

 //?CENTURY+YEAR
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Date (Alpha) USR = CONCAT(CON.1,LCL.Year  (Char) USR,CON.*ZERO)
 LCL.Date_Alpha_USR = '1' + LCL.Year_Char_USR (*ZERO);

 ENDIF;

 // LCL.Date (Alpha) USR = CONCAT(LCL.Date (Alpha) USR,LCL.Month (Char) USR,CON.*ZERO)
 LCL.Date_Alpha_USR = LCL.Date_Alpha_USR + LCL.Month_Char_USR (*ZERO);

 // LCL.Date (Alpha) USR = CONCAT(LCL.Date (Alpha) USR,LCL.Day   (Char) USR,CON.*ZERO)
 LCL.Date_Alpha_USR = LCL.Date_Alpha_USR + LCL.Day_Char_USR (*ZERO);

 // LCL.Date                  USR = CVTVAR(LCL.Date (Alpha) USR)
 LCL.Date_USR = CVTVAR(LCL.Date_Alpha_USR);

 ENDIF;

 //?Send Error Message.
 CASE;

 // IF PAR.Date In  (7,0) USR GT LCL.System Date USR
 IF PAR.Date_In_70_USR > LCL.System_Date_USR;

 //?Cannot be a future date.
 // PAR.Generic Message 80 USR = CONCAT(LCL.Text USR 15,CON.Date cannot be a future,CON.1)
 PAR.Generic_Message_80_USR = LCL.Text_USR_15 + 'Date cannot be a future' (1);

 // PAR.Generic Message 80 USR = CONCAT(PAR.Generic Message 80 USR,CON.date.,CON.1)
 PAR.Generic_Message_80_USR = PAR.Generic_Message_80_USR + 'date.' (1);

 //?Send Error Message.
 // IF PAR.Date In  (7,0) USR LT LCL.Date                  USR
 IF PAR.Date_In_70_USR < LCL.Date_USR;

 //?Cannot be older than last 2 years ago.
 // PAR.Generic Message 80 USR = CONCAT(LCL.Text USR 15,CON.Date cannot be prior to,CON.1)
 PAR.Generic_Message_80_USR = LCL.Text_USR_15 + 'Date cannot be prior to' (1);

 // PAR.Generic Message 80 USR = CONCAT(PAR.Generic Message 80 USR,LCL.Date (Char-8) USR,CON.1)
 PAR.Generic_Message_80_USR = PAR.Generic_Message_80_USR + LCL.Date_Char_8_USR (1);

 // PAR.Generic Message 80 USR = CONCAT(PAR.Generic Message 80 USR,CON..,CON.*ZERO)
 PAR.Generic_Message_80_USR = PAR.Generic_Message_80_USR + '.' (*ZERO);

 ENDIF;

}


CASE;

// IF LCL.Generic Message 80 USR is Entered
IF LCL.Generic_Message_80_USR <> *BLANK;

// Send error message - '&1'
ERROR(USR5086);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(DTL.Transaction_Date_Code);

QUIT;

ENDIF;

//?S13514 DN 07/31/18-Validate Transaction Date Code.
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Transaction Date Code = JOB.*Job date
DTL.Transaction_Date_Code = JOB.*Job_date;

ENDIF;

//?USER: Validate relations

CASE;

// IF PAR.Trans Contol AS400/Plant is Plant
IF PAR.Trans_Contol_AS400_Plant = 'P';

//?Error if NOT AccuSort Transaction
CASE;

// IF DTL.Inventory Trans. Type is Trans Entry AccuSort Trx
IF DTL.Inventory_Trans_Type = 'SA';

//?Error if NOT AccuSort Transaction
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.@Narrative 20 = Condition name of DTL.Inventory Trans. Type
WRK.@Narrative_20 = RTVCND(DTL.Inventory_Trans_Type);

// Send error message - 'Not authorized for function &1'
ERROR(USR1775);
MSGPARM(WRK.@Narrative_20);
MSGPARM(DTL.Inventory_Trans_Type);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?Error IF AccuSort Transaction
CASE;

// IF DTL.Inventory Trans. Type is Trans Entry AccuSort Trx
IF DTL.Inventory_Trans_Type = 'SA';

// WRK.@Narrative 20 = Condition name of DTL.Inventory Trans. Type
WRK.@Narrative_20 = RTVCND(DTL.Inventory_Trans_Type);

// Send error message - 'Not authorized for function &1'
ERROR(USR1775);
MSGPARM(WRK.@Narrative_20);
MSGPARM(DTL.Inventory_Trans_Type);

ENDIF;

ENDIF;

//?Validate adjustment transaction types
CASE;

// IF PAR.Inventory Trans. ID is Adjustment
IF PAR.Inventory_Trans_ID = 'A';

CASE;

// IF PAR.Trans Contol AS400/Plant is Plant
IF PAR.Trans_Contol_AS400_Plant = 'P';

//?Only AccuSort special transactions allowed
CASE;

// IF DTL.Inventory Trans. Type is Trans Entry AccuSort Trx
IF DTL.Inventory_Trans_Type = 'SA';

//?Only AccuSort special transactions allowed
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid transaction type for &1'
ERROR(USR1932);
MSGPARM(DTL.Condition_Desc_1_USR);
MSGPARM(DTL.Inv_Trans_Type_USR);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?AccuSort Special transactions not allowed
CASE;

// IF DTL.Inventory Trans. Type is Trans Entry Adjustments
IF DTL.Inventory_Trans_Type = 'A';

//?AccuSort Special transactions not allowed
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid transaction type for &1'
ERROR(USR1932);
MSGPARM(DTL.Condition_Desc_1_USR);
MSGPARM(DTL.Inv_Trans_Type_USR);

ENDIF;

ENDIF;

ENDIF;

//?Validate issue transaction types
CASE;

// IF PAR.Inventory Trans. ID is Issue
IF PAR.Inventory_Trans_ID = 'I';

CASE;

// IF DTL.Inventory Trans. Type is Trans Entry Issues
IF DTL.Inventory_Trans_Type = 'I'/'RW';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid transaction type for &1'
ERROR(USR1932);
MSGPARM(DTL.Condition_Desc_1_USR);
MSGPARM(DTL.Inv_Trans_Type_USR);

ENDIF;

ENDIF;

//?Validate receipt transaction types
CASE;

// IF PAR.Inventory Trans. ID is Receipt
IF PAR.Inventory_Trans_ID = 'R';

CASE;

// IF DTL.Inventory Trans. Type is Trans Entry Receipts
IF DTL.Inventory_Trans_Type = 'R'/'S'/'RR';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid transaction type for &1'
ERROR(USR1932);
MSGPARM(DTL.Condition_Desc_1_USR);
MSGPARM(DTL.Inv_Trans_Type_USR);

ENDIF;

ENDIF;

//?Validate transfer transaction types
CASE;

// IF PAR.Inventory Trans. ID is Transfer
IF PAR.Inventory_Trans_ID = 'T';

CASE;

// IF DTL.Inventory Trans. Type is Trans Entry Transfers
IF DTL.Inventory_Trans_Type = 'TW';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid transaction type for &1'
ERROR(USR1932);
MSGPARM(DTL.Condition_Desc_1_USR);
MSGPARM(DTL.Inv_Trans_Type_USR);

ENDIF;

ENDIF;

//?USER: User defined action

//?Call trans entry programs according to the transaction ID & Type
CASE;

// IF PAR.Inventory Trans. ID is Receipt
IF PAR.Inventory_Trans_ID = 'R';

//?Receipts
CASE;

// IF DTL.Inventory Trans. Type is Trans Entry Receipts
IF DTL.Inventory_Trans_Type = 'R'/'S'/'RR';

// Call program Edt Enter Rcpts/Strup  PV.
CALL PROGRAM(Edt Enter Rcpts/Strup  PV) ('ICQLPVR');
PARAMETER(PAR.Warehouse_Code);
PARAMETER(DTL.Company_Number);
PARAMETER(PAR.Inventory_Trans_ID);
PARAMETER(DTL.Inventory_Trans_Type);
PARAMETER(DTL.Transaction_Date_Code);
PARAMETER(DTL.USR_Condition_Description);
PARAMETER(DTL.USR_Company_Name);

ENDIF;

//?Call trans entry programs according to the transaction ID & Type
// IF PAR.Inventory Trans. ID is Adjustment
IF PAR.Inventory_Trans_ID = 'A';

//?Adjustment Qty, SA Trans
CASE;

// IF DTL.Inventory Trans. Type is Adjustment Quantity
IF DTL.Inventory_Trans_Type = 'A';

// OR DTL.Inventory Trans. Type is Special AccuSort Adjust
OR DTL.Inventory_Trans_Type = 'SA';

// Call program Edt Enter Issue/Adjust PV.
CALL PROGRAM(Edt Enter Issue/Adjust PV) ('ICQ3PVR');
PARAMETER(PAR.Warehouse_Code);
PARAMETER(DTL.Company_Number);
PARAMETER(PAR.Inventory_Trans_ID);
PARAMETER(DTL.Inventory_Trans_Type);
PARAMETER(DTL.Transaction_Date_Code);
PARAMETER(DTL.USR_Condition_Description);
PARAMETER(DTL.USR_Company_Name);

ENDIF;

//?Call trans entry programs according to the transaction ID & Type
// IF PAR.Inventory Trans. ID is Issue
IF PAR.Inventory_Trans_ID = 'I';

//?Issues
CASE;

// IF DTL.Inventory Trans. Type is Trans Entry Issues
IF DTL.Inventory_Trans_Type = 'I'/'RW';

// Call program Edt Enter Issue/Adjust PV.
CALL PROGRAM(Edt Enter Issue/Adjust PV) ('ICQ3PVR');
PARAMETER(PAR.Warehouse_Code);
PARAMETER(DTL.Company_Number);
PARAMETER(PAR.Inventory_Trans_ID);
PARAMETER(DTL.Inventory_Trans_Type);
PARAMETER(DTL.Transaction_Date_Code);
PARAMETER(DTL.USR_Condition_Description);
PARAMETER(DTL.USR_Company_Name);

ENDIF;

//?Call trans entry programs according to the transaction ID & Type
// IF PAR.Inventory Trans. ID is Transfer
IF PAR.Inventory_Trans_ID = 'T';

//?Transfers
CASE;

// IF DTL.Inventory Trans. Type is Transfer Warehouse
IF DTL.Inventory_Trans_Type = 'TW';

// Call program Edt Enter Transfer Trn PV.
CALL PROGRAM(Edt Enter Transfer Trn PV) ('OMHDPVR');
PARAMETER(PAR.Warehouse_Code);
PARAMETER(DTL.Company_Number);
PARAMETER(PAR.Inventory_Trans_ID);
PARAMETER(DTL.Inventory_Trans_Type);
PARAMETER(DTL.Transaction_Date_Code);
PARAMETER(DTL.USR_Condition_Description);
PARAMETER(DTL.USR_Company_Name);
PARAMETER(PAR.Printed_Status);

CASE;

// IF PAR.Printed Status is yes
IF PAR.Printed_Status = 'Y';

// Send information message - 'Bill of Lading was printed.'
MESSAGE(USR1972 *INFO);

ENDIF;

ENDIF;

ENDIF;

