      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      Hog Production System
      * PROGRAM:     HP5045
      * TITLE:       Select BGF Farm Site--Active/Inactive Options
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     05/04/04
      *
      *
      * FUNCTION: This is a select function window display of the records in the
      *           Farm Site master file---BGF farms only.
      *
      *           A record is selected by positioning the cursor on the line
      *           and pressing enter.
      *
      *           Restrictors:
      *              active/inactive status (optional)
      *
      *           Positioners:
      *              farm site code
      *
      *           Selectors:
      *              farm site name
      *              production type
      *              type of farm
      *              cell
      *              active/inactive status
      *
      *
      * NOTE:    This is a pop-up window program.  Please note that in window
      *          programs the record format containing the window definition
      *          must be written first.  So, we write the error message subfile
      *          control record first followed by the command line record format.
      *          This is opposite of the non-window programs.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 10/16/13  LeAnne Ramsey (E2831)
      *           Recompile only. Added field 'MTech Reference'.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhpd5045   cf   e             workstn
     F                                     sfile(hp5045s1:hdrrn1)
     F                                     infds(iofeed)
      *
     Fhsp018    if   e           k disk
      *    Farm site
      *
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      *
     D upper           c                   'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
     D lower           c                   'abcdefghijklmnopqrstuvwxyz'
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
     D maxrrn          s              4  0
     D norecs          s              1    inz('N')
     D reset           s              1    inz('N')
     D count           s              2  0
      *
      *
      * Workfields required for subfile paging--see initialization
      * subroutine.
      *
     D wkplin          s              2  0
     D wkrlin          s              2  0
     D wkflow          s                   like(idflow)
      *
      *
      * Control fields
      *
     D length          s              2  0
     D procfl          s              1
      *
     D svfscd          s                   like(c1fscd)
     D svfsnm          s                   like(c1fsnm)
     D svptcd          s                   like(c1ptcd)
     D svtfcd          s                   like(c1tfcd)
     D svcell          s                   like(c1cell)
     D svaist          s                   like(c1aist)
      *
      *
      *
      * Workfields
      *
     D wkname          s                   like(c1fsnm)
     D wkfsnm          s                   like(c1fsnm)
      *
      *
      * Parm fields
      *
     D xxfscd          s                   like(d1fscd)
     D xxfsnm          s                   like(d1fsnm)
      *
     D xxtfcd          s                   like(d1tfcd)
     D xxtfds          s             25
      *
     D xxptcd          s                   like(d1ptcd)
     D xxptds          s             10
      *
     D xxinaist        s                   like(d1aist)
     D xxaist          s                   like(d1aist)
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *---------------------------------------------------------------
      * Set environment for screen 1
      *---------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * Clear/fill the subfile
      *
     C                   exsr      $clr1
     C                   exsr      $frsh1
      *
      * Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Perform operator I/O for screen 1
      *---------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to crt
      *
     C                   write     hp5045ec
     C                   write     hp5045k1
     C                   exfmt     hp5045c1
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in12 = *on                                  F12-previous
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
     C                   exsr      $chksv
      *
      * Reposition the subfile if the user has changed any of the
      * positioners or selectors in the control record.
      *
     C                   when      c1fscd <> svfscd or                          Positioners
     C                             c1fsnm <> svfsnm or
     C                             c1ptcd <> svptcd or
     C                             c1tfcd <> svtfcd or
     C                             c1cell <> svcell or
     C                             c1aist <> svaist
     C                   exsr      $chksv
      *
     C                   when      *in25 = *on                                  F25-rollup
     C                   exsr      $load1
     C                   eval      routne = scrn1
     C                   other
      *
      * User has pressed enter
      *
     C                   if        norecs = yes                                 If empty sfl
     C                   eval      routne = set1
     C                   else
     C                   exsr      $proc1
     C                   endif                                                  If empty sfl
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * F4 prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
     C                   select
      * Production type
     C                   when      fld = 'C1PTCD'
     C                   call      'HP504'
     C                   parm      *blank        xxptcd
     C                   parm      *blank        xxptds
     C                   seton                                        52
     C                   if        xxptcd <> *blank
     C                   movel     xxptcd        c1ptcd
     C                   endif
      *
      * Type of farm
     C                   when      fld = 'C1TFCD'
     C                   call      'HP5018'
     C                   parm      *blank        xxtfcd
     C                   parm      *blank        xxtfds
     C                   seton                                        53
     C                   if        xxtfcd <> *blank
     C                   movel     xxtfcd        c1tfcd
     C                   endif
      *
      * Active/inactive status
      *
     C                   when      fld = 'C1AIST' and *in62 = *off
     C                   call      'HP512'
     C                   parm      *blank        xxaist
     C                   seton                                        54
     C                   if        xxaist <> *blank
     C                   movel     xxaist        c1aist
     C                   endif
     C                   other
      *
      * F4 not valid for this field...issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error                                        013
     C                   movel     'HS09011'     mgid(e)
     C                   endif
      *
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Process user's selection
      *----------------------------------------------------------------
      *
     C     $proc1        begsr
      *
      * If cursor location returned is the rrn of a record in the
      * subfile, chain to the subfile record and load the data into
      * the parms to return to the calling program.
      *
     C                   if        hdrrn <> 0
     C                   eval      hdrrn1 = hdrrn
     C     hdrrn1        chain     hp5045s1                           92
     C                   move      d1fscd        xxfscd
     C                   move      d1fsnm        xxfsnm
     C                   endif
      *
      * If the user selected a record, set the routine to exit.  If no record
      * was selected, redisplay the screen.
      *
     C                   if        xxfscd = 0
     c                   eval      routne = set1
     C                   else
     c                   eval      routne = exit
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Clear subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $clr1         begsr
      *
     C                   clear                   hp5045s1
     C                   seton                                        83        sflclr
     C                   write     hp5045c1
     C                   setoff                                       818283
      *                                                    81=sfldsp
      *                                                    82=sflend
      *                                                    83=sflclr
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Refresh/fill the subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $frsh1        begsr
      *
      * Set position in file
      *
     C     c1fscd        setll     hsp018
      *
      * The lowest subfile RRN on the screen from the DSPF feedback area (IDFLOW)
      * was retrieved earlier and put in WKFLOW. Add to WKFLOW the number of lines
      * on your subfile page or the number less 1 to determine a subfile RRN to
      * reposition to. RESET is a flag field to indicate whether you are attempting
      * to reposition the user close to where he was in the subfile. If RESET is
      * 'NO' don't reposition--just start over.
      *
     C                   if        reset = yes
     C     wkflow        add       wkrlin        maxrrn
     C                   else
     C                   z-add     wkplin        maxrrn
     C                   endif
      *
      * Load the subfile until you have the required number of records.
      * The number will depend on whether uou are repositioning the
      * subfile or not. Stop if you get to the end of the subfile.
      *
     C                   dou       hdrrn1 >= maxrrn or *in82 = *on
     C                   exsr      $load1
     C                   enddo
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Save the control record positioners/selectors
      *----------------------------------------------------------------
      *                                                                        z
     C     $chksv        begsr
      *
     C                   eval      routne = set1
     C                   eval      reset = no
      *
     C                   z-add     c1fscd        svfscd
     C                   move      c1ptcd        svptcd
     C                   move      c1tfcd        svtfcd
     C                   z-add     c1cell        svcell
     C                   move      c1aist        svaist
      *
      *
      * Prepare to scan on farm name
      *  1) trim leading/trailing blanks
      *  2) find first non-blank position from right
      *
     C                   eval      c1fsnm = %trim(c1fsnm)
     C     ' '           checkr    c1fsnm        length
     C                   movel     c1fsnm        svfsnm
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Load subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $load1        begsr
      *
      * Set the count of records on the subfile page to zero.
      *
     C                   z-add     0             count
      *
      * Fill the subfile until the end of the database file or
      * you have filled all the lines on the subfile page.
      *
     C                   setoff                                       82
     C                   dou       *in82 = *on or count >= wkplin               Do fill
      *
     C                   read      hsp018                                 82
     C                   if        *in82 = *off and                             If read
     C                             fsppcd = 'BGF  ' and
     C                             (xxinaist = *blank or xxinaist = fsaist)
      *
     C                   move      yes           procfl
      *
      * Only include records that match the user's selectors
      *
     C                   if        c1fsnm <> *blank
     C     lower:upper   xlate     c1fsnm        wkname
     C     lower:upper   xlate     fsfsnm        wkfsnm
     C     wkname:length scan      wkfsnm                                 92
     C                   if        *in92 = *off
     C                   move      no            procfl
     C                   endif
     C                   endif
      *
      * Production type
     C                   if        c1ptcd <> *blank and
     C                             c1ptcd <> fsptcd
     C                   move      no            procfl
     C                   endif
      *
      * Type of farm
     C                   if        c1tfcd <> *blank and
     C                             c1tfcd <> fstfcd
     C                   move      no            procfl
     C                   endif
      * Cell
     C                   if        c1cell <> 0 and
     C                             c1cell <> fscell
     C                   move      no            procfl
     C                   endif
      *
      * Status
     C                   if        c1aist  <> *blank and c1aist <> fsaist
     C                   move      no            procfl
     C                   endif
      *
     C                   if        procfl = yes                                 If process
      *
     C                   add       1             count
     C                   add       1             hdrrn1
     C                   z-add     fsfscd        d1fscd
     C                   move      fsfsnm        d1fsnm
     C                   move      fsptcd        d1ptcd
     C                   move      fstfcd        d1tfcd
     C                   z-add     fscell        d1cell
     C                   move      fsaist        d1aist
     C                   write     hp5045s1
     C                   seton                                        81
      *
      * For positioning, place the subfile relative record number into the
      * sflrcdnbr field (HDPAG1)
      *
     C                   z-add     hdrrn1        hdpag1
     C                   endif                                                  If process
     C                   endif                                                  If read
     C                   enddo                                                  Do fill
      *
      * If no records were written to the subfile, then issue
      * the standard message 'No data to Display'.
      *
     C                   if        hdrrn1 = 0                                   If no recs
     C                   eval      norecs = yes
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09002'
     C                   endif
      *
     C                   else
     C                   eval      norecs = no
     C                   endif                                                  If no recs
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * End job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      *
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Key lists
      *     None
      *
      * Parm lists
      *
     C     *entry        plist
     C                   parm                    xxinaist
     C                   parm                    xxfscd
     C                   parm                    xxfsnm
      *
      *
     C                   select
     C                   when      xxinaist = 'A'
     C                   eval      c1desc = '     (Active Status Only)     '
     C                   seton                                        62
      *
     C                   when      xxinaist = 'I'
     C                   eval      c1desc = '    (Inactive Status Only)    '
     C                   seton                                        62
      *
     C                   when      xxinaist = ' '
     C                   eval      c1desc = '(Both Active/Inactive Status)'
     C                   endsl
      *
      * To support subfile paging, logic requires the number of lines on
      * the subfile page.
      *
     C                   z-add     9             wkplin                         sflpag
     C     wkplin        sub       1             wkrlin
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
      * Execute required window format
      *
     C                   write     assume
      *
     C                   endsr
      /EJECT
