// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKFQXFR
// ?Date: 14.08.2025 Time: 02:51:34
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modifications and Comments
DO;

//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//?  length from 5 to 7.
ENDDO;

//?******  HPE053P - Added Dead head uom checks
//?******
// WRK.TOT ADDITION Usr = CON.*ZERO
WRK.TOT_ADDITION_Usr = *ZERO;

// WRK.TOT DEDUCTION Usr = CON.*ZERO
WRK.TOT_DEDUCTION_Usr = *ZERO;

//?Producer Totals Deduction/Add Tattoo Ded/Add
DO;

//?Accumulate totals of ded/add for this current kill date
//?  Dont include D/A with Dead head uom in D/A totals
// WRK.Exp Payed By Who Usr = CND.Producer
WRK.Exp_Payed_By_Who_Usr = 'P';

CASE;

// IF WRK.Exp Payed By Who Usr is Producer
IF WRK.Exp_Payed_By_Who_Usr = 'P';

EXECUTE FUNCTION(Rtv Ttto Hdr Ttl Pd/Sb RT) TYPE(RTVOBJ) FILE(PKCDCPP)          AB1193254;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(WRK.TOT_DEDUCTION_Usr);
PARAMETER(WRK.TOT_ADDITION_Usr);
PARAMETER(WRK.TH_Accrual_Amount);
PARAMETER('N');
PARAMETER(WRK.Exp_Payed_By_Who_Usr);
PARAMETER(WRK.Freight_Tot_Ded_Add_Exp);
{
 //?USER: Initialize routine

 EXECUTE FUNCTION(HPE063 Frt Exp/Accruals) TYPE(EXCINTFUN)                       AB1192166;
 {
  //?Execute internal function

  //?2/26/96  HPE063   Allow the expense for freight to be paid
  //?                  by either Seaboard(us) or the producer
  //?                  Allow the system to process accruals thru
  //?                  the General Ledger.
 }

 // PAR.TH Deduction Amt = CON.*ZERO
 PAR.TH_Deduction_Amt = *ZERO;

 // PAR.TH Additions Amt = CON.*ZERO
 PAR.TH_Additions_Amt = *ZERO;

 // PAR.TH Accrual Amount = CON.*ZERO
 PAR.TH_Accrual_Amount = *ZERO;

 // PAR.Freight Tot Ded/Add Exp = CON.*ZERO
 PAR.Freight_Tot_Ded_Add_Exp = *ZERO;

 //?USER: Processing if Data record not found

 // PAR.TH Additions Amt = CON.*ZERO
 PAR.TH_Additions_Amt = *ZERO;

 // PAR.TH Deduction Amt = CON.*ZERO
 PAR.TH_Deduction_Amt = *ZERO;

 // PAR.TH Accrual Amount = CON.*ZERO
 PAR.TH_Accrual_Amount = *ZERO;

 // PAR.Freight Tot Ded/Add Exp = CON.*ZERO
 PAR.Freight_Tot_Ded_Add_Exp = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF PAR.@Status Include Dead Hd is No, dont include Dead Hd
 IF PAR.@Status_Include_Dead_Hd = 'N';

 // AND DB1.THD UOM is Dead Head UOM
 AND DB1.THD_UOM = 'CH'/'DH'/'DY'/'YH'/'KH';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Process Producer Ded/Add only
 CASE;

 // IF PAR.Exp Payed By Who Usr is Producer
 IF PAR.Exp_Payed_By_Who_Usr = 'P';

 CASE;

 // IF DB1.THD Expense Paid by is Producer
 IF DB1.THD_Expense_Paid_by = 'P';

 //?Freight for the producer is included in ded/add totals
 //?There are no accruals for producer
 CASE;

 // IF DB1.THD Unit Amt Sign is Add
 IF DB1.THD_Unit_Amt_Sign = '+';

 // PAR.TH Additions Amt = PAR.TH Additions Amt + DB1.THD Ded/Add Amount
 PAR.TH_Additions_Amt = PAR.TH_Additions_Amt + DB1.THD_Ded_Add_Amount;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.TH Deduction Amt = PAR.TH Deduction Amt + DB1.THD Ded/Add Amount
 PAR.TH_Deduction_Amt = PAR.TH_Deduction_Amt + DB1.THD_Ded_Add_Amount;

 ENDIF;

 ENDIF;

 ENDIF;

 //?Process Seaboard Expense
 CASE;

 // IF PAR.Exp Payed By Who Usr is Seaboard
 IF PAR.Exp_Payed_By_Who_Usr = 'S';

 CASE;

 // IF DB1.THD Expense Paid by is Seaboard
 IF DB1.THD_Expense_Paid_by = 'S';

 CASE;

 // IF DB1.THD Expense Type is Freight
 IF DB1.THD_Expense_Type = 'F';

 //?Freight should only be a +
 CASE;

 // IF DB1.THD Unit Amt Sign is Add
 IF DB1.THD_Unit_Amt_Sign = '+';

 // PAR.Freight Tot Ded/Add Exp = PAR.Freight Tot Ded/Add Exp + DB1.THD Ded/Add Amou
 PAR.Freight_Tot_Ded_Add_Exp = PAR.Freight_Tot_Ded_Add_Exp + DB1.THD_Ded_Add_Amount;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Freight Tot Ded/Add Exp = PAR.Freight Tot Ded/Add Exp - DB1.THD Ded/Add Amou
 PAR.Freight_Tot_Ded_Add_Exp = PAR.Freight_Tot_Ded_Add_Exp - DB1.THD_Ded_Add_Amount;

 ENDIF;

 // IF DB1.THD Expense Type is Other
 IF DB1.THD_Expense_Type = 'O';

 CASE;

 // IF DB1.THD Unit Amt Sign is Add
 IF DB1.THD_Unit_Amt_Sign = '+';

 // PAR.TH Accrual Amount = PAR.TH Accrual Amount + DB1.THD Ded/Add Amount
 PAR.TH_Accrual_Amount = PAR.TH_Accrual_Amount + DB1.THD_Ded_Add_Amount;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.TH Accrual Amount = PAR.TH Accrual Amount - DB1.THD Ded/Add Amount
 PAR.TH_Accrual_Amount = PAR.TH_Accrual_Amount - DB1.THD_Ded_Add_Amount;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

}


CASE;

// IF PAR.TH Deduction Amt NE WRK.TOT DEDUCTION Usr
IF PAR.TH_Deduction_Amt <> WRK.TOT_DEDUCTION_Usr;

// WRK.tot Amt fld 2 Usr = CON.*ZERO
WRK.tot_Amt_fld_2_Usr = *ZERO;

//?Spread new total amoung the ded
EXECUTE FUNCTION(Rtv/Chg Tto Ddd Sbj    RT) TYPE(RTVOBJ) FILE(PKCDCPP)          AB1186336;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TH_Deduction_Amt);
PARAMETER(PAR.TH_Payment_Sts);
PARAMETER(WRK.TOT_DEDUCTION_Usr);
PARAMETER('Y');
PARAMETER(WRK.tot_Amt_fld_2_Usr);
PARAMETER(PAR.Tattoo_Number_New_User);
{
 //?USER: Initialize routine

 CASE;

 // IF PAR.First Time Flag Usr is Yes
 IF PAR.First_Time_Flag_Usr = 'Y';

 CASE;

 // IF PAR.TOT DEDUCTION Usr NE WRK.Zero USR
 IF PAR.TOT_DEDUCTION_Usr <> WRK.Zero_USR;

 // WRK.@Percent Fld Usr = PAR.TH Deduction Amt / PAR.TOT DEDUCTION Usr *Rounded
 WRK.@Percent_Fld_Usr = PAR.TH_Deduction_Amt / PAR.TOT_DEDUCTION_Usr 'H';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.@Percent Fld Usr = CON.*ZERO
 WRK.@Percent_Fld_Usr = *ZERO;

 ENDIF;

 ENDIF;

 //?USER: Process Data record

 //?Read D/As except those with Dead Head UOM
 CASE;

 // IF DB1.THD UOM is Dead Head UOM
 IF DB1.THD_UOM = 'CH'/'DH'/'DY'/'YH'/'KH';

 //?Read D/As except those with Dead Head UOM
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.First Time Flag Usr is Yes
 IF PAR.First_Time_Flag_Usr = 'Y';

 // WRK.THD Ded/Add Amount = DB1.THD Ded/Add Amount * WRK.@Percent Fld Usr *Rounded
 WRK.THD_Ded_Add_Amount = DB1.THD_Ded_Add_Amount * WRK.@Percent_Fld_Usr 'H';

 // PAR.tot Amt fld 2 Usr = PAR.tot Amt fld 2 Usr + WRK.THD Ded/Add Amount
 PAR.tot_Amt_fld_2_Usr = PAR.tot_Amt_fld_2_Usr + WRK.THD_Ded_Add_Amount;

 EXECUTE FUNCTION(Change Tattoo Deduction) TYPE(CHGOBJ) FILE(PKCDCPP)            AB1107818;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(WRK.THD_Ded_Add_Amount);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Transaction_Created);
 PARAMETER(DB1.THD_GL_Code);
 PARAMETER(DB1.THD_Contra_Gl_Code);
 PARAMETER(DB1.THD_Re_imbursement_Head);
 PARAMETER(DB1.THD_Payment_Sts);
 PARAMETER(DB1.THD_Expense_Paid_by);
 PARAMETER(DB1.THD_Expense_Type);
 PARAMETER(DB1.THD_Reserve_Account_Upd);
 PARAMETER(DB1.THD_Commission_Deduction);
 PARAMETER(DB1.THD_Deferred_Payment);
 PARAMETER(DB1.THD_Status_4);
 PARAMETER(DB1.THD_Status_5);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 // WRK.Tot Amt fld 1 usr = DB1.THD Ded/Add Amount - WRK.THD Ded/Add Amount
 WRK.Tot_Amt_fld_1_usr = DB1.THD_Ded_Add_Amount - WRK.THD_Ded_Add_Amount;

 CASE;

 // IF WRK.Tot Amt fld 1 usr is Not Zeros
 IF WRK.Tot_Amt_fld_1_usr <> *ZERO;

 EXECUTE FUNCTION(Rtv/Chg Tattoo D/A Pd Rt) TYPE(RTVOBJ) FILE(PKCDCPP)           AB1173206;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(PAR.Tattoo_Number_New_User);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(WRK.Tot_Amt_fld_1_usr);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Transaction_Created);
 PARAMETER(DB1.THD_GL_Code);
 PARAMETER(DB1.THD_Contra_Gl_Code);
 PARAMETER(DB1.THD_Re_imbursement_Head);
 PARAMETER(DB1.THD_Payment_Sts);
 PARAMETER(DB1.THD_Expense_Paid_by);
 PARAMETER(DB1.THD_Expense_Type);
 PARAMETER(DB1.THD_Commission_Deduction);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Create Tattoo Deduction) TYPE(CRTOBJ) FILE(PKCDCPP)            AB1107817;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.DED_D_A_Code);
  PARAMETER(PAR.THD_Unit_Amt);
  PARAMETER(PAR.THD_Ded_Add_Amount);
  PARAMETER(PAR.THD_Unit_Amt_Sign);
  PARAMETER(PAR.THD_UOM);
  PARAMETER(PAR.THD_Transaction_Created);
  PARAMETER(PAR.THD_GL_Code);
  PARAMETER(PAR.THD_Contra_Gl_Code);
  PARAMETER(PAR.THD_Re_imbursement_Head);
  PARAMETER(PAR.THD_Payment_Sts);
  PARAMETER(PAR.THD_Expense_Paid_by);
  PARAMETER(PAR.THD_Expense_Type);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Change Tattoo Deduction) TYPE(CHGOBJ) FILE(PKCDCPP)            AB1107818;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.DED_D_A_Code);
  PARAMETER(DB1.THD_Unit_Amt);
  PARAMETER(PAR.THD_Ded_Add_Amount);
  PARAMETER(DB1.THD_Unit_Amt_Sign);
  PARAMETER(DB1.THD_UOM);
  PARAMETER(DB1.THD_Transaction_Created);
  PARAMETER(DB1.THD_GL_Code);
  PARAMETER(DB1.THD_Contra_Gl_Code);
  PARAMETER(DB1.THD_Re_imbursement_Head);
  PARAMETER(DB1.THD_Payment_Sts);
  PARAMETER(DB1.THD_Expense_Paid_by);
  PARAMETER(DB1.THD_Expense_Type);
  PARAMETER(DB1.THD_Reserve_Account_Upd);
  PARAMETER(DB1.THD_Commission_Deduction);
  PARAMETER(DB1.THD_Deferred_Payment);
  PARAMETER(DB1.THD_Status_4);
  PARAMETER(DB1.THD_Status_5);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.First Time Flag Usr is No
 IF PAR.First_Time_Flag_Usr = 'N';

 CASE;

 // IF PAR.TH Deduction Amt GT PAR.tot Amt fld 2 Usr
 IF PAR.TH_Deduction_Amt > PAR.tot_Amt_fld_2_Usr;

 // WRK.THD Ded/Add Amount = PAR.TH Deduction Amt - PAR.tot Amt fld 2 Usr
 WRK.THD_Ded_Add_Amount = PAR.TH_Deduction_Amt - PAR.tot_Amt_fld_2_Usr;

 // WRK.THD Ded/Add Amount = WRK.THD Ded/Add Amount + DB1.THD Ded/Add Amount
 WRK.THD_Ded_Add_Amount = WRK.THD_Ded_Add_Amount + DB1.THD_Ded_Add_Amount;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.THD Ded/Add Amount = PAR.tot Amt fld 2 Usr - PAR.TH Deduction Amt
 WRK.THD_Ded_Add_Amount = PAR.tot_Amt_fld_2_Usr - PAR.TH_Deduction_Amt;

 // WRK.THD Ded/Add Amount = DB1.THD Ded/Add Amount - WRK.THD Ded/Add Amount
 WRK.THD_Ded_Add_Amount = DB1.THD_Ded_Add_Amount - WRK.THD_Ded_Add_Amount;

 ENDIF;

 EXECUTE FUNCTION(Change Tattoo Deduction) TYPE(CHGOBJ) FILE(PKCDCPP)            AB1107818;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(WRK.THD_Ded_Add_Amount);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Transaction_Created);
 PARAMETER(DB1.THD_GL_Code);
 PARAMETER(DB1.THD_Contra_Gl_Code);
 PARAMETER(DB1.THD_Re_imbursement_Head);
 PARAMETER(DB1.THD_Payment_Sts);
 PARAMETER(DB1.THD_Expense_Paid_by);
 PARAMETER(DB1.THD_Expense_Type);
 PARAMETER(DB1.THD_Reserve_Account_Upd);
 PARAMETER(DB1.THD_Commission_Deduction);
 PARAMETER(DB1.THD_Deferred_Payment);
 PARAMETER(DB1.THD_Status_4);
 PARAMETER(DB1.THD_Status_5);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 QUIT;

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(Rtv/Chg Tto Ddd Sbj    RT) TYPE(RTVOBJ) FILE(PKCDCPP)          AB1186336;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TH_Deduction_Amt);
PARAMETER(PAR.TH_Payment_Sts);
PARAMETER(WRK.TOT_DEDUCTION_Usr);
PARAMETER('N');
PARAMETER(WRK.tot_Amt_fld_2_Usr);
PARAMETER(PAR.Tattoo_Number_New_User);
{
 //?USER: Initialize routine

 CASE;

 // IF PAR.First Time Flag Usr is Yes
 IF PAR.First_Time_Flag_Usr = 'Y';

 CASE;

 // IF PAR.TOT DEDUCTION Usr NE WRK.Zero USR
 IF PAR.TOT_DEDUCTION_Usr <> WRK.Zero_USR;

 // WRK.@Percent Fld Usr = PAR.TH Deduction Amt / PAR.TOT DEDUCTION Usr *Rounded
 WRK.@Percent_Fld_Usr = PAR.TH_Deduction_Amt / PAR.TOT_DEDUCTION_Usr 'H';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.@Percent Fld Usr = CON.*ZERO
 WRK.@Percent_Fld_Usr = *ZERO;

 ENDIF;

 ENDIF;

 //?USER: Process Data record

 //?Read D/As except those with Dead Head UOM
 CASE;

 // IF DB1.THD UOM is Dead Head UOM
 IF DB1.THD_UOM = 'CH'/'DH'/'DY'/'YH'/'KH';

 //?Read D/As except those with Dead Head UOM
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.First Time Flag Usr is Yes
 IF PAR.First_Time_Flag_Usr = 'Y';

 // WRK.THD Ded/Add Amount = DB1.THD Ded/Add Amount * WRK.@Percent Fld Usr *Rounded
 WRK.THD_Ded_Add_Amount = DB1.THD_Ded_Add_Amount * WRK.@Percent_Fld_Usr 'H';

 // PAR.tot Amt fld 2 Usr = PAR.tot Amt fld 2 Usr + WRK.THD Ded/Add Amount
 PAR.tot_Amt_fld_2_Usr = PAR.tot_Amt_fld_2_Usr + WRK.THD_Ded_Add_Amount;

 EXECUTE FUNCTION(Change Tattoo Deduction) TYPE(CHGOBJ) FILE(PKCDCPP)            AB1107818;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(WRK.THD_Ded_Add_Amount);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Transaction_Created);
 PARAMETER(DB1.THD_GL_Code);
 PARAMETER(DB1.THD_Contra_Gl_Code);
 PARAMETER(DB1.THD_Re_imbursement_Head);
 PARAMETER(DB1.THD_Payment_Sts);
 PARAMETER(DB1.THD_Expense_Paid_by);
 PARAMETER(DB1.THD_Expense_Type);
 PARAMETER(DB1.THD_Reserve_Account_Upd);
 PARAMETER(DB1.THD_Commission_Deduction);
 PARAMETER(DB1.THD_Deferred_Payment);
 PARAMETER(DB1.THD_Status_4);
 PARAMETER(DB1.THD_Status_5);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 // WRK.Tot Amt fld 1 usr = DB1.THD Ded/Add Amount - WRK.THD Ded/Add Amount
 WRK.Tot_Amt_fld_1_usr = DB1.THD_Ded_Add_Amount - WRK.THD_Ded_Add_Amount;

 CASE;

 // IF WRK.Tot Amt fld 1 usr is Not Zeros
 IF WRK.Tot_Amt_fld_1_usr <> *ZERO;

 EXECUTE FUNCTION(Rtv/Chg Tattoo D/A Pd Rt) TYPE(RTVOBJ) FILE(PKCDCPP)           AB1173206;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(PAR.Tattoo_Number_New_User);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(WRK.Tot_Amt_fld_1_usr);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Transaction_Created);
 PARAMETER(DB1.THD_GL_Code);
 PARAMETER(DB1.THD_Contra_Gl_Code);
 PARAMETER(DB1.THD_Re_imbursement_Head);
 PARAMETER(DB1.THD_Payment_Sts);
 PARAMETER(DB1.THD_Expense_Paid_by);
 PARAMETER(DB1.THD_Expense_Type);
 PARAMETER(DB1.THD_Commission_Deduction);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Create Tattoo Deduction) TYPE(CRTOBJ) FILE(PKCDCPP)            AB1107817;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.DED_D_A_Code);
  PARAMETER(PAR.THD_Unit_Amt);
  PARAMETER(PAR.THD_Ded_Add_Amount);
  PARAMETER(PAR.THD_Unit_Amt_Sign);
  PARAMETER(PAR.THD_UOM);
  PARAMETER(PAR.THD_Transaction_Created);
  PARAMETER(PAR.THD_GL_Code);
  PARAMETER(PAR.THD_Contra_Gl_Code);
  PARAMETER(PAR.THD_Re_imbursement_Head);
  PARAMETER(PAR.THD_Payment_Sts);
  PARAMETER(PAR.THD_Expense_Paid_by);
  PARAMETER(PAR.THD_Expense_Type);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Change Tattoo Deduction) TYPE(CHGOBJ) FILE(PKCDCPP)            AB1107818;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.DED_D_A_Code);
  PARAMETER(DB1.THD_Unit_Amt);
  PARAMETER(PAR.THD_Ded_Add_Amount);
  PARAMETER(DB1.THD_Unit_Amt_Sign);
  PARAMETER(DB1.THD_UOM);
  PARAMETER(DB1.THD_Transaction_Created);
  PARAMETER(DB1.THD_GL_Code);
  PARAMETER(DB1.THD_Contra_Gl_Code);
  PARAMETER(DB1.THD_Re_imbursement_Head);
  PARAMETER(DB1.THD_Payment_Sts);
  PARAMETER(DB1.THD_Expense_Paid_by);
  PARAMETER(DB1.THD_Expense_Type);
  PARAMETER(DB1.THD_Reserve_Account_Upd);
  PARAMETER(DB1.THD_Commission_Deduction);
  PARAMETER(DB1.THD_Deferred_Payment);
  PARAMETER(DB1.THD_Status_4);
  PARAMETER(DB1.THD_Status_5);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.First Time Flag Usr is No
 IF PAR.First_Time_Flag_Usr = 'N';

 CASE;

 // IF PAR.TH Deduction Amt GT PAR.tot Amt fld 2 Usr
 IF PAR.TH_Deduction_Amt > PAR.tot_Amt_fld_2_Usr;

 // WRK.THD Ded/Add Amount = PAR.TH Deduction Amt - PAR.tot Amt fld 2 Usr
 WRK.THD_Ded_Add_Amount = PAR.TH_Deduction_Amt - PAR.tot_Amt_fld_2_Usr;

 // WRK.THD Ded/Add Amount = WRK.THD Ded/Add Amount + DB1.THD Ded/Add Amount
 WRK.THD_Ded_Add_Amount = WRK.THD_Ded_Add_Amount + DB1.THD_Ded_Add_Amount;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.THD Ded/Add Amount = PAR.tot Amt fld 2 Usr - PAR.TH Deduction Amt
 WRK.THD_Ded_Add_Amount = PAR.tot_Amt_fld_2_Usr - PAR.TH_Deduction_Amt;

 // WRK.THD Ded/Add Amount = DB1.THD Ded/Add Amount - WRK.THD Ded/Add Amount
 WRK.THD_Ded_Add_Amount = DB1.THD_Ded_Add_Amount - WRK.THD_Ded_Add_Amount;

 ENDIF;

 EXECUTE FUNCTION(Change Tattoo Deduction) TYPE(CHGOBJ) FILE(PKCDCPP)            AB1107818;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(WRK.THD_Ded_Add_Amount);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Transaction_Created);
 PARAMETER(DB1.THD_GL_Code);
 PARAMETER(DB1.THD_Contra_Gl_Code);
 PARAMETER(DB1.THD_Re_imbursement_Head);
 PARAMETER(DB1.THD_Payment_Sts);
 PARAMETER(DB1.THD_Expense_Paid_by);
 PARAMETER(DB1.THD_Expense_Type);
 PARAMETER(DB1.THD_Reserve_Account_Upd);
 PARAMETER(DB1.THD_Commission_Deduction);
 PARAMETER(DB1.THD_Deferred_Payment);
 PARAMETER(DB1.THD_Status_4);
 PARAMETER(DB1.THD_Status_5);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 QUIT;

 ENDIF;

 ENDIF;

}


ENDIF;

// WRK.tot Amt fld 2 Usr = CON.*ZERO
WRK.tot_Amt_fld_2_Usr = *ZERO;

CASE;

// IF PAR.TH Additions Amt NE WRK.TOT ADDITION Usr
IF PAR.TH_Additions_Amt <> WRK.TOT_ADDITION_Usr;

// WRK.tot Amt fld 2 Usr = CON.*ZERO
WRK.tot_Amt_fld_2_Usr = *ZERO;

//?Spread new total amoung the add
EXECUTE FUNCTION(Rtv/Chg Tto Dad Sbj    RT) TYPE(RTVOBJ) FILE(PKCDCPP)          AB1186337;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TH_Additions_Amt);
PARAMETER(PAR.TH_Payment_Sts);
PARAMETER(WRK.TOT_ADDITION_Usr);
PARAMETER('Y');
PARAMETER(WRK.tot_Amt_fld_2_Usr);
PARAMETER(PAR.Tattoo_Number_New_User);
{
 //?USER: Initialize routine

 CASE;

 // IF PAR.First Time Flag Usr is Yes
 IF PAR.First_Time_Flag_Usr = 'Y';

 CASE;

 // IF PAR.TOT ADDITION Usr NE WRK.Zero USR
 IF PAR.TOT_ADDITION_Usr <> WRK.Zero_USR;

 // WRK.Percent USR = PAR.TH Additions Amt / PAR.TOT ADDITION Usr *Rounded
 WRK.Percent_USR = PAR.TH_Additions_Amt / PAR.TOT_ADDITION_Usr 'H';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Percent USR = CON.*ZERO
 WRK.Percent_USR = *ZERO;

 ENDIF;

 ENDIF;

 //?USER: Process Data record

 CASE;

 // IF DB1.THD UOM is Dead Head UOM
 IF DB1.THD_UOM = 'CH'/'DH'/'DY'/'YH'/'KH';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.First Time Flag Usr is Yes
 IF PAR.First_Time_Flag_Usr = 'Y';

 // WRK.THD Ded/Add Amount = DB1.THD Ded/Add Amount * WRK.@Percent Fld Usr *Rounded
 WRK.THD_Ded_Add_Amount = DB1.THD_Ded_Add_Amount * WRK.@Percent_Fld_Usr 'H';

 // PAR.tot Amt fld 2 Usr = PAR.tot Amt fld 2 Usr + WRK.THD Ded/Add Amount
 PAR.tot_Amt_fld_2_Usr = PAR.tot_Amt_fld_2_Usr + WRK.THD_Ded_Add_Amount;

 EXECUTE FUNCTION(Change Tattoo Deduction) TYPE(CHGOBJ) FILE(PKCDCPP)            AB1107818;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(WRK.THD_Ded_Add_Amount);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Transaction_Created);
 PARAMETER(DB1.THD_GL_Code);
 PARAMETER(DB1.THD_Contra_Gl_Code);
 PARAMETER(DB1.THD_Re_imbursement_Head);
 PARAMETER(DB1.THD_Payment_Sts);
 PARAMETER(DB1.THD_Expense_Paid_by);
 PARAMETER(DB1.THD_Expense_Type);
 PARAMETER(DB1.THD_Reserve_Account_Upd);
 PARAMETER(DB1.THD_Commission_Deduction);
 PARAMETER(DB1.THD_Deferred_Payment);
 PARAMETER(DB1.THD_Status_4);
 PARAMETER(DB1.THD_Status_5);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 // WRK.Tot Amt fld 1 usr = DB1.THD Ded/Add Amount - WRK.THD Ded/Add Amount
 WRK.Tot_Amt_fld_1_usr = DB1.THD_Ded_Add_Amount - WRK.THD_Ded_Add_Amount;

 CASE;

 // IF WRK.Tot Amt fld 1 usr is Not Zeros
 IF WRK.Tot_Amt_fld_1_usr <> *ZERO;

 EXECUTE FUNCTION(Rtv/Chg Tattoo D/A Pd Rt) TYPE(RTVOBJ) FILE(PKCDCPP)           AB1173206;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(PAR.Tattoo_Number_New_User);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(WRK.Tot_Amt_fld_1_usr);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Transaction_Created);
 PARAMETER(DB1.THD_GL_Code);
 PARAMETER(DB1.THD_Contra_Gl_Code);
 PARAMETER(DB1.THD_Re_imbursement_Head);
 PARAMETER(DB1.THD_Payment_Sts);
 PARAMETER(DB1.THD_Expense_Paid_by);
 PARAMETER(DB1.THD_Expense_Type);
 PARAMETER(DB1.THD_Commission_Deduction);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Create Tattoo Deduction) TYPE(CRTOBJ) FILE(PKCDCPP)            AB1107817;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.DED_D_A_Code);
  PARAMETER(PAR.THD_Unit_Amt);
  PARAMETER(PAR.THD_Ded_Add_Amount);
  PARAMETER(PAR.THD_Unit_Amt_Sign);
  PARAMETER(PAR.THD_UOM);
  PARAMETER(PAR.THD_Transaction_Created);
  PARAMETER(PAR.THD_GL_Code);
  PARAMETER(PAR.THD_Contra_Gl_Code);
  PARAMETER(PAR.THD_Re_imbursement_Head);
  PARAMETER(PAR.THD_Payment_Sts);
  PARAMETER(PAR.THD_Expense_Paid_by);
  PARAMETER(PAR.THD_Expense_Type);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Change Tattoo Deduction) TYPE(CHGOBJ) FILE(PKCDCPP)            AB1107818;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.DED_D_A_Code);
  PARAMETER(DB1.THD_Unit_Amt);
  PARAMETER(PAR.THD_Ded_Add_Amount);
  PARAMETER(DB1.THD_Unit_Amt_Sign);
  PARAMETER(DB1.THD_UOM);
  PARAMETER(DB1.THD_Transaction_Created);
  PARAMETER(DB1.THD_GL_Code);
  PARAMETER(DB1.THD_Contra_Gl_Code);
  PARAMETER(DB1.THD_Re_imbursement_Head);
  PARAMETER(DB1.THD_Payment_Sts);
  PARAMETER(DB1.THD_Expense_Paid_by);
  PARAMETER(DB1.THD_Expense_Type);
  PARAMETER(DB1.THD_Reserve_Account_Upd);
  PARAMETER(DB1.THD_Commission_Deduction);
  PARAMETER(DB1.THD_Deferred_Payment);
  PARAMETER(DB1.THD_Status_4);
  PARAMETER(DB1.THD_Status_5);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.First Time Flag Usr is No
 IF PAR.First_Time_Flag_Usr = 'N';

 CASE;

 // IF PAR.TH Additions Amt GT PAR.tot Amt fld 2 Usr
 IF PAR.TH_Additions_Amt > PAR.tot_Amt_fld_2_Usr;

 // WRK.THD Ded/Add Amount = PAR.TOT ADDITION Usr - PAR.tot Amt fld 2 Usr
 WRK.THD_Ded_Add_Amount = PAR.TOT_ADDITION_Usr - PAR.tot_Amt_fld_2_Usr;

 // WRK.THD Ded/Add Amount = WRK.THD Ded/Add Amount + DB1.THD Ded/Add Amount
 WRK.THD_Ded_Add_Amount = WRK.THD_Ded_Add_Amount + DB1.THD_Ded_Add_Amount;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.THD Ded/Add Amount = PAR.tot Amt fld 2 Usr - PAR.TH Additions Amt
 WRK.THD_Ded_Add_Amount = PAR.tot_Amt_fld_2_Usr - PAR.TH_Additions_Amt;

 // WRK.THD Ded/Add Amount = DB1.THD Ded/Add Amount - WRK.THD Ded/Add Amount
 WRK.THD_Ded_Add_Amount = DB1.THD_Ded_Add_Amount - WRK.THD_Ded_Add_Amount;

 ENDIF;

 EXECUTE FUNCTION(Change Tattoo Deduction) TYPE(CHGOBJ) FILE(PKCDCPP)            AB1107818;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(WRK.THD_Ded_Add_Amount);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Transaction_Created);
 PARAMETER(DB1.THD_GL_Code);
 PARAMETER(DB1.THD_Contra_Gl_Code);
 PARAMETER(DB1.THD_Re_imbursement_Head);
 PARAMETER(DB1.THD_Payment_Sts);
 PARAMETER(DB1.THD_Expense_Paid_by);
 PARAMETER(DB1.THD_Expense_Type);
 PARAMETER(DB1.THD_Reserve_Account_Upd);
 PARAMETER(DB1.THD_Commission_Deduction);
 PARAMETER(DB1.THD_Deferred_Payment);
 PARAMETER(DB1.THD_Status_4);
 PARAMETER(DB1.THD_Status_5);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 QUIT;

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(Rtv/Chg Tto Dad Sbj    RT) TYPE(RTVOBJ) FILE(PKCDCPP)          AB1186337;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TH_Additions_Amt);
PARAMETER(PAR.TH_Payment_Sts);
PARAMETER(WRK.TOT_ADDITION_Usr);
PARAMETER('N');
PARAMETER(WRK.tot_Amt_fld_2_Usr);
PARAMETER(PAR.Tattoo_Number_New_User);
{
 //?USER: Initialize routine

 CASE;

 // IF PAR.First Time Flag Usr is Yes
 IF PAR.First_Time_Flag_Usr = 'Y';

 CASE;

 // IF PAR.TOT ADDITION Usr NE WRK.Zero USR
 IF PAR.TOT_ADDITION_Usr <> WRK.Zero_USR;

 // WRK.Percent USR = PAR.TH Additions Amt / PAR.TOT ADDITION Usr *Rounded
 WRK.Percent_USR = PAR.TH_Additions_Amt / PAR.TOT_ADDITION_Usr 'H';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Percent USR = CON.*ZERO
 WRK.Percent_USR = *ZERO;

 ENDIF;

 ENDIF;

 //?USER: Process Data record

 CASE;

 // IF DB1.THD UOM is Dead Head UOM
 IF DB1.THD_UOM = 'CH'/'DH'/'DY'/'YH'/'KH';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.First Time Flag Usr is Yes
 IF PAR.First_Time_Flag_Usr = 'Y';

 // WRK.THD Ded/Add Amount = DB1.THD Ded/Add Amount * WRK.@Percent Fld Usr *Rounded
 WRK.THD_Ded_Add_Amount = DB1.THD_Ded_Add_Amount * WRK.@Percent_Fld_Usr 'H';

 // PAR.tot Amt fld 2 Usr = PAR.tot Amt fld 2 Usr + WRK.THD Ded/Add Amount
 PAR.tot_Amt_fld_2_Usr = PAR.tot_Amt_fld_2_Usr + WRK.THD_Ded_Add_Amount;

 EXECUTE FUNCTION(Change Tattoo Deduction) TYPE(CHGOBJ) FILE(PKCDCPP)            AB1107818;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(WRK.THD_Ded_Add_Amount);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Transaction_Created);
 PARAMETER(DB1.THD_GL_Code);
 PARAMETER(DB1.THD_Contra_Gl_Code);
 PARAMETER(DB1.THD_Re_imbursement_Head);
 PARAMETER(DB1.THD_Payment_Sts);
 PARAMETER(DB1.THD_Expense_Paid_by);
 PARAMETER(DB1.THD_Expense_Type);
 PARAMETER(DB1.THD_Reserve_Account_Upd);
 PARAMETER(DB1.THD_Commission_Deduction);
 PARAMETER(DB1.THD_Deferred_Payment);
 PARAMETER(DB1.THD_Status_4);
 PARAMETER(DB1.THD_Status_5);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 // WRK.Tot Amt fld 1 usr = DB1.THD Ded/Add Amount - WRK.THD Ded/Add Amount
 WRK.Tot_Amt_fld_1_usr = DB1.THD_Ded_Add_Amount - WRK.THD_Ded_Add_Amount;

 CASE;

 // IF WRK.Tot Amt fld 1 usr is Not Zeros
 IF WRK.Tot_Amt_fld_1_usr <> *ZERO;

 EXECUTE FUNCTION(Rtv/Chg Tattoo D/A Pd Rt) TYPE(RTVOBJ) FILE(PKCDCPP)           AB1173206;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(PAR.Tattoo_Number_New_User);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(WRK.Tot_Amt_fld_1_usr);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Transaction_Created);
 PARAMETER(DB1.THD_GL_Code);
 PARAMETER(DB1.THD_Contra_Gl_Code);
 PARAMETER(DB1.THD_Re_imbursement_Head);
 PARAMETER(DB1.THD_Payment_Sts);
 PARAMETER(DB1.THD_Expense_Paid_by);
 PARAMETER(DB1.THD_Expense_Type);
 PARAMETER(DB1.THD_Commission_Deduction);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Create Tattoo Deduction) TYPE(CRTOBJ) FILE(PKCDCPP)            AB1107817;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.DED_D_A_Code);
  PARAMETER(PAR.THD_Unit_Amt);
  PARAMETER(PAR.THD_Ded_Add_Amount);
  PARAMETER(PAR.THD_Unit_Amt_Sign);
  PARAMETER(PAR.THD_UOM);
  PARAMETER(PAR.THD_Transaction_Created);
  PARAMETER(PAR.THD_GL_Code);
  PARAMETER(PAR.THD_Contra_Gl_Code);
  PARAMETER(PAR.THD_Re_imbursement_Head);
  PARAMETER(PAR.THD_Payment_Sts);
  PARAMETER(PAR.THD_Expense_Paid_by);
  PARAMETER(PAR.THD_Expense_Type);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Change Tattoo Deduction) TYPE(CHGOBJ) FILE(PKCDCPP)            AB1107818;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.DED_D_A_Code);
  PARAMETER(DB1.THD_Unit_Amt);
  PARAMETER(PAR.THD_Ded_Add_Amount);
  PARAMETER(DB1.THD_Unit_Amt_Sign);
  PARAMETER(DB1.THD_UOM);
  PARAMETER(DB1.THD_Transaction_Created);
  PARAMETER(DB1.THD_GL_Code);
  PARAMETER(DB1.THD_Contra_Gl_Code);
  PARAMETER(DB1.THD_Re_imbursement_Head);
  PARAMETER(DB1.THD_Payment_Sts);
  PARAMETER(DB1.THD_Expense_Paid_by);
  PARAMETER(DB1.THD_Expense_Type);
  PARAMETER(DB1.THD_Reserve_Account_Upd);
  PARAMETER(DB1.THD_Commission_Deduction);
  PARAMETER(DB1.THD_Deferred_Payment);
  PARAMETER(DB1.THD_Status_4);
  PARAMETER(DB1.THD_Status_5);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.First Time Flag Usr is No
 IF PAR.First_Time_Flag_Usr = 'N';

 CASE;

 // IF PAR.TH Additions Amt GT PAR.tot Amt fld 2 Usr
 IF PAR.TH_Additions_Amt > PAR.tot_Amt_fld_2_Usr;

 // WRK.THD Ded/Add Amount = PAR.TOT ADDITION Usr - PAR.tot Amt fld 2 Usr
 WRK.THD_Ded_Add_Amount = PAR.TOT_ADDITION_Usr - PAR.tot_Amt_fld_2_Usr;

 // WRK.THD Ded/Add Amount = WRK.THD Ded/Add Amount + DB1.THD Ded/Add Amount
 WRK.THD_Ded_Add_Amount = WRK.THD_Ded_Add_Amount + DB1.THD_Ded_Add_Amount;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.THD Ded/Add Amount = PAR.tot Amt fld 2 Usr - PAR.TH Additions Amt
 WRK.THD_Ded_Add_Amount = PAR.tot_Amt_fld_2_Usr - PAR.TH_Additions_Amt;

 // WRK.THD Ded/Add Amount = DB1.THD Ded/Add Amount - WRK.THD Ded/Add Amount
 WRK.THD_Ded_Add_Amount = DB1.THD_Ded_Add_Amount - WRK.THD_Ded_Add_Amount;

 ENDIF;

 EXECUTE FUNCTION(Change Tattoo Deduction) TYPE(CHGOBJ) FILE(PKCDCPP)            AB1107818;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(WRK.THD_Ded_Add_Amount);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Transaction_Created);
 PARAMETER(DB1.THD_GL_Code);
 PARAMETER(DB1.THD_Contra_Gl_Code);
 PARAMETER(DB1.THD_Re_imbursement_Head);
 PARAMETER(DB1.THD_Payment_Sts);
 PARAMETER(DB1.THD_Expense_Paid_by);
 PARAMETER(DB1.THD_Expense_Type);
 PARAMETER(DB1.THD_Reserve_Account_Upd);
 PARAMETER(DB1.THD_Commission_Deduction);
 PARAMETER(DB1.THD_Deferred_Payment);
 PARAMETER(DB1.THD_Status_4);
 PARAMETER(DB1.THD_Status_5);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 QUIT;

 ENDIF;

 ENDIF;

}


ENDIF;

//?Verify that ded/add for next kill date = totals from tattoo hdr
//?Accumulate totals of ded/add for this next kill date
// WRK.TOT ADDITION Usr = CON.*ZERO
WRK.TOT_ADDITION_Usr = *ZERO;

// WRK.TOT DEDUCTION Usr = CON.*ZERO
WRK.TOT_DEDUCTION_Usr = *ZERO;

// WRK.tot Amt fld 2 Usr = CON.*ZERO
WRK.tot_Amt_fld_2_Usr = *ZERO;

EXECUTE FUNCTION(RTV Tattoo Record     RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1111223;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(WRK.TH_Purchase_Date);
PARAMETER(WRK.TH_Group_Reference);
PARAMETER(WRK.TH_Live_Purchase_UOM);
PARAMETER(WRK.TH_Live_Purchase_Price);
PARAMETER(WRK.TH_Resale_UOM);
PARAMETER(WRK.TH_Recalc_Live_Wgt_Yld);
PARAMETER(WRK.TH_Pricing_Date);
PARAMETER(WRK.TH_Resale_Spread_Sts);
PARAMETER(WRK.TH_Dead_On_Arrival);
PARAMETER(WRK.TH_Head_Received);
PARAMETER(WRK.TH_Yard_Deads);
PARAMETER(WRK.TH_Held_Over);
PARAMETER(WRK.TH_Head_Condemned);
PARAMETER(WRK.TH_Head_Killed);
PARAMETER(WRK.TH_Head_Adds);
PARAMETER(WRK.TH_Head_Accepted);
PARAMETER(WRK.TH_Live_Wgt);
PARAMETER(WRK.TH_Hot_Wgt);
PARAMETER(WRK.TH_Tot_Loin_Eye_Depth);
PARAMETER(WRK.TH_Tot_Backfat_Inches);
PARAMETER(WRK.TH_Tot_Light_Reflectance);
PARAMETER(WRK.TH_Avg_Live_Wgt);
PARAMETER(WRK.TH_Avg_Hot_Wgt);
PARAMETER(WRK.TH_Avg_Light_Reflectance);
PARAMETER(WRK.TH_Avg_Lean_Percent);
PARAMETER(WRK.TH_Avg_Loin_Eye_Depth);
PARAMETER(WRK.TH_Avg_Backfat);
PARAMETER(WRK.TH_Std_Yield_Percent);
PARAMETER(WRK.TH_Actual_Yield);
PARAMETER(WRK.TH_Yield_Difference);
PARAMETER(WRK.TH_Recalc_Live_Wgt);
PARAMETER(WRK.TH_CM_Base_Mkt_Price);
PARAMETER(WRK.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(WRK.TH_CM_Sort_Discount_Amt);
PARAMETER(WRK.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(WRK.TH_CM_Base_Carcass_Value);
PARAMETER(WRK.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(WRK.TH_CM_Carcass_Gross_Amt);
PARAMETER(WRK.TH_Deduction_Amt);
PARAMETER(WRK.TH_Total_Net_WO_Adds);
PARAMETER(WRK.TH_Carcass_Net_Amt);
PARAMETER(WRK.TH_Additions_Amt);
PARAMETER(WRK.TH_Accrual_Amount);
PARAMETER(WRK.TH_Fixed_Cost_Amount);
PARAMETER(WRK.TH_Payment_Sts);
PARAMETER(WRK.TH_Header_Error_Sts);
PARAMETER(WRK.TH_Detail_Error_Sts);
PARAMETER(WRK.TH_Kill_Balancing_Sts);
PARAMETER(WRK.TH_Bal_to_Kill_Gen);
PARAMETER(WRK.TH_Commission_A_P_Voucher);
PARAMETER(WRK.TH_Voucher_Payment_Date);
PARAMETER(WRK.TH_User_Error_Override);
PARAMETER(WRK.TH_Held_Over_Record);
PARAMETER(WRK.TH_Sex);
PARAMETER(WRK.TH_Held_Ovr_Completed_Dte);
PARAMETER(WRK.TH_Commission_Paid_Date);
PARAMETER(WRK.TH_Actual_Check_Date);
PARAMETER(WRK.TH_Shipped_Weight);
PARAMETER(WRK.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(WRK.TH_FFLI);
PARAMETER(WRK.TH_Kill_Product_Value);
PARAMETER(WRK.TH_Cut_Product_Value);
PARAMETER(WRK.TH_Render_Product_Value);
PARAMETER(WRK.TH_Shift_Held_Over_Head);
PARAMETER(WRK.DF_Defect_Code);
PARAMETER(WRK.THP_Process_Code);
PARAMETER(WRK.HB_Buyer_Code);
PARAMETER(WRK.GN_Genetic_Code);
PARAMETER(WRK.HC_Class_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?  Include D/A with Dead head uom in D/A totals
EXECUTE FUNCTION(Rtv Ttto Hdr Ttl Pd/Sb RT) TYPE(RTVOBJ) FILE(PKCDCPP)          AB1193254;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(WRK.TOT_DEDUCTION_Usr);
PARAMETER(WRK.TOT_ADDITION_Usr);
PARAMETER(WRK.TH_Accrual_Amount);
PARAMETER('Y');
PARAMETER(WRK.Exp_Payed_By_Who_Usr);
PARAMETER(WRK.Freight_Tot_Ded_Add_Exp);
{
 //?USER: Initialize routine

 EXECUTE FUNCTION(HPE063 Frt Exp/Accruals) TYPE(EXCINTFUN)                       AB1192166;
 {
  //?Execute internal function

  //?2/26/96  HPE063   Allow the expense for freight to be paid
  //?                  by either Seaboard(us) or the producer
  //?                  Allow the system to process accruals thru
  //?                  the General Ledger.
 }

 // PAR.TH Deduction Amt = CON.*ZERO
 PAR.TH_Deduction_Amt = *ZERO;

 // PAR.TH Additions Amt = CON.*ZERO
 PAR.TH_Additions_Amt = *ZERO;

 // PAR.TH Accrual Amount = CON.*ZERO
 PAR.TH_Accrual_Amount = *ZERO;

 // PAR.Freight Tot Ded/Add Exp = CON.*ZERO
 PAR.Freight_Tot_Ded_Add_Exp = *ZERO;

 //?USER: Processing if Data record not found

 // PAR.TH Additions Amt = CON.*ZERO
 PAR.TH_Additions_Amt = *ZERO;

 // PAR.TH Deduction Amt = CON.*ZERO
 PAR.TH_Deduction_Amt = *ZERO;

 // PAR.TH Accrual Amount = CON.*ZERO
 PAR.TH_Accrual_Amount = *ZERO;

 // PAR.Freight Tot Ded/Add Exp = CON.*ZERO
 PAR.Freight_Tot_Ded_Add_Exp = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF PAR.@Status Include Dead Hd is No, dont include Dead Hd
 IF PAR.@Status_Include_Dead_Hd = 'N';

 // AND DB1.THD UOM is Dead Head UOM
 AND DB1.THD_UOM = 'CH'/'DH'/'DY'/'YH'/'KH';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Process Producer Ded/Add only
 CASE;

 // IF PAR.Exp Payed By Who Usr is Producer
 IF PAR.Exp_Payed_By_Who_Usr = 'P';

 CASE;

 // IF DB1.THD Expense Paid by is Producer
 IF DB1.THD_Expense_Paid_by = 'P';

 //?Freight for the producer is included in ded/add totals
 //?There are no accruals for producer
 CASE;

 // IF DB1.THD Unit Amt Sign is Add
 IF DB1.THD_Unit_Amt_Sign = '+';

 // PAR.TH Additions Amt = PAR.TH Additions Amt + DB1.THD Ded/Add Amount
 PAR.TH_Additions_Amt = PAR.TH_Additions_Amt + DB1.THD_Ded_Add_Amount;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.TH Deduction Amt = PAR.TH Deduction Amt + DB1.THD Ded/Add Amount
 PAR.TH_Deduction_Amt = PAR.TH_Deduction_Amt + DB1.THD_Ded_Add_Amount;

 ENDIF;

 ENDIF;

 ENDIF;

 //?Process Seaboard Expense
 CASE;

 // IF PAR.Exp Payed By Who Usr is Seaboard
 IF PAR.Exp_Payed_By_Who_Usr = 'S';

 CASE;

 // IF DB1.THD Expense Paid by is Seaboard
 IF DB1.THD_Expense_Paid_by = 'S';

 CASE;

 // IF DB1.THD Expense Type is Freight
 IF DB1.THD_Expense_Type = 'F';

 //?Freight should only be a +
 CASE;

 // IF DB1.THD Unit Amt Sign is Add
 IF DB1.THD_Unit_Amt_Sign = '+';

 // PAR.Freight Tot Ded/Add Exp = PAR.Freight Tot Ded/Add Exp + DB1.THD Ded/Add Amou
 PAR.Freight_Tot_Ded_Add_Exp = PAR.Freight_Tot_Ded_Add_Exp + DB1.THD_Ded_Add_Amount;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Freight Tot Ded/Add Exp = PAR.Freight Tot Ded/Add Exp - DB1.THD Ded/Add Amou
 PAR.Freight_Tot_Ded_Add_Exp = PAR.Freight_Tot_Ded_Add_Exp - DB1.THD_Ded_Add_Amount;

 ENDIF;

 // IF DB1.THD Expense Type is Other
 IF DB1.THD_Expense_Type = 'O';

 CASE;

 // IF DB1.THD Unit Amt Sign is Add
 IF DB1.THD_Unit_Amt_Sign = '+';

 // PAR.TH Accrual Amount = PAR.TH Accrual Amount + DB1.THD Ded/Add Amount
 PAR.TH_Accrual_Amount = PAR.TH_Accrual_Amount + DB1.THD_Ded_Add_Amount;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.TH Accrual Amount = PAR.TH Accrual Amount - DB1.THD Ded/Add Amount
 PAR.TH_Accrual_Amount = PAR.TH_Accrual_Amount - DB1.THD_Ded_Add_Amount;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

}


CASE;

// IF WRK.TH Deduction Amt NE WRK.TOT DEDUCTION Usr
IF WRK.TH_Deduction_Amt <> WRK.TOT_DEDUCTION_Usr;

//?Spread new total amoung the ded
EXECUTE FUNCTION(Rtv/chg Tto Ddd Adjrt  RT) TYPE(RTVOBJ) FILE(PKCDCPP)          AB1173269;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(WRK.TH_Deduction_Amt);
PARAMETER(WRK.TOT_DEDUCTION_Usr);
PARAMETER(*ZERO);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.THD Expense Paid by is Producer
 IF DB1.THD_Expense_Paid_by = 'P';

 CASE;

 // IF PAR.TH Deduction Amt GT PAR.TOT DEDUCTION Usr
 IF PAR.TH_Deduction_Amt > PAR.TOT_DEDUCTION_Usr;

 // WRK.THD Ded/Add Amount = PAR.TH Deduction Amt - PAR.TOT DEDUCTION Usr
 WRK.THD_Ded_Add_Amount = PAR.TH_Deduction_Amt - PAR.TOT_DEDUCTION_Usr;

 // WRK.THD Ded/Add Amount = WRK.THD Ded/Add Amount + DB1.THD Ded/Add Amount
 WRK.THD_Ded_Add_Amount = WRK.THD_Ded_Add_Amount + DB1.THD_Ded_Add_Amount;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.THD Ded/Add Amount = PAR.TOT DEDUCTION Usr - PAR.TH Deduction Amt
 WRK.THD_Ded_Add_Amount = PAR.TOT_DEDUCTION_Usr - PAR.TH_Deduction_Amt;

 // WRK.THD Ded/Add Amount = DB1.THD Ded/Add Amount - WRK.THD Ded/Add Amount
 WRK.THD_Ded_Add_Amount = DB1.THD_Ded_Add_Amount - WRK.THD_Ded_Add_Amount;

 ENDIF;

 EXECUTE FUNCTION(Change Tattoo Deduction) TYPE(CHGOBJ) FILE(PKCDCPP)            AB1107818;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(WRK.THD_Ded_Add_Amount);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Transaction_Created);
 PARAMETER(DB1.THD_GL_Code);
 PARAMETER(DB1.THD_Contra_Gl_Code);
 PARAMETER(DB1.THD_Re_imbursement_Head);
 PARAMETER(DB1.THD_Payment_Sts);
 PARAMETER(DB1.THD_Expense_Paid_by);
 PARAMETER(DB1.THD_Expense_Type);
 PARAMETER(DB1.THD_Reserve_Account_Upd);
 PARAMETER(DB1.THD_Commission_Deduction);
 PARAMETER(DB1.THD_Deferred_Payment);
 PARAMETER(DB1.THD_Status_4);
 PARAMETER(DB1.THD_Status_5);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 QUIT;

 ENDIF;

}


ENDIF;

// WRK.tot Amt fld 2 Usr = CON.*ZERO
WRK.tot_Amt_fld_2_Usr = *ZERO;

CASE;

// IF PAR.TH Additions Amt NE WRK.TOT ADDITION Usr
IF PAR.TH_Additions_Amt <> WRK.TOT_ADDITION_Usr;

//?Spread new total amoung the add
EXECUTE FUNCTION(Rtv/chg Tto Dad Adjrt  RT) TYPE(RTVOBJ) FILE(PKCDCPP)          AB1173268;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(WRK.TH_Additions_Amt);
PARAMETER(WRK.TOT_ADDITION_Usr);
PARAMETER(*ZERO);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.THD Expense Paid by is Producer
 IF DB1.THD_Expense_Paid_by = 'P';

 CASE;

 // IF PAR.TH Additions Amt GT PAR.TOT ADDITION Usr
 IF PAR.TH_Additions_Amt > PAR.TOT_ADDITION_Usr;

 // WRK.THD Ded/Add Amount = PAR.TH Additions Amt - PAR.TOT ADDITION Usr
 WRK.THD_Ded_Add_Amount = PAR.TH_Additions_Amt - PAR.TOT_ADDITION_Usr;

 // WRK.THD Ded/Add Amount = WRK.THD Ded/Add Amount + DB1.THD Ded/Add Amount
 WRK.THD_Ded_Add_Amount = WRK.THD_Ded_Add_Amount + DB1.THD_Ded_Add_Amount;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.THD Ded/Add Amount = PAR.TOT ADDITION Usr - PAR.TH Additions Amt
 WRK.THD_Ded_Add_Amount = PAR.TOT_ADDITION_Usr - PAR.TH_Additions_Amt;

 // WRK.THD Ded/Add Amount = DB1.THD Ded/Add Amount - WRK.THD Ded/Add Amount
 WRK.THD_Ded_Add_Amount = DB1.THD_Ded_Add_Amount - WRK.THD_Ded_Add_Amount;

 ENDIF;

 EXECUTE FUNCTION(Change Tattoo Deduction) TYPE(CHGOBJ) FILE(PKCDCPP)            AB1107818;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(WRK.THD_Ded_Add_Amount);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Transaction_Created);
 PARAMETER(DB1.THD_GL_Code);
 PARAMETER(DB1.THD_Contra_Gl_Code);
 PARAMETER(DB1.THD_Re_imbursement_Head);
 PARAMETER(DB1.THD_Payment_Sts);
 PARAMETER(DB1.THD_Expense_Paid_by);
 PARAMETER(DB1.THD_Expense_Type);
 PARAMETER(DB1.THD_Reserve_Account_Upd);
 PARAMETER(DB1.THD_Commission_Deduction);
 PARAMETER(DB1.THD_Deferred_Payment);
 PARAMETER(DB1.THD_Status_4);
 PARAMETER(DB1.THD_Status_5);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 QUIT;

 ENDIF;

}


ENDIF;

ENDIF;

ENDDO;

//?Seaboard Totals Deduction/Add Tattoo Ded/Add Accruals
DO;

//?Accumulate totals of ded/add for this current kill date
//?  Dont include D/A with Dead head uom in D/A totals
// WRK.Exp Payed By Who Usr = CND.Seaboard
WRK.Exp_Payed_By_Who_Usr = 'S';

CASE;

// IF WRK.Exp Payed By Who Usr is Seaboard
IF WRK.Exp_Payed_By_Who_Usr = 'S';

EXECUTE FUNCTION(Rtv Ttto Hdr Ttl Pd/Sb RT) TYPE(RTVOBJ) FILE(PKCDCPP)          AB1193254;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(WRK.TOT_DEDUCTION_Usr);
PARAMETER(WRK.TOT_ADDITION_Usr);
PARAMETER(WRK.TH_Accrual_Amount);
PARAMETER('N');
PARAMETER(WRK.Exp_Payed_By_Who_Usr);
PARAMETER(WRK.Freight_Tot_Ded_Add_Exp);
{
 //?USER: Initialize routine

 EXECUTE FUNCTION(HPE063 Frt Exp/Accruals) TYPE(EXCINTFUN)                       AB1192166;
 {
  //?Execute internal function

  //?2/26/96  HPE063   Allow the expense for freight to be paid
  //?                  by either Seaboard(us) or the producer
  //?                  Allow the system to process accruals thru
  //?                  the General Ledger.
 }

 // PAR.TH Deduction Amt = CON.*ZERO
 PAR.TH_Deduction_Amt = *ZERO;

 // PAR.TH Additions Amt = CON.*ZERO
 PAR.TH_Additions_Amt = *ZERO;

 // PAR.TH Accrual Amount = CON.*ZERO
 PAR.TH_Accrual_Amount = *ZERO;

 // PAR.Freight Tot Ded/Add Exp = CON.*ZERO
 PAR.Freight_Tot_Ded_Add_Exp = *ZERO;

 //?USER: Processing if Data record not found

 // PAR.TH Additions Amt = CON.*ZERO
 PAR.TH_Additions_Amt = *ZERO;

 // PAR.TH Deduction Amt = CON.*ZERO
 PAR.TH_Deduction_Amt = *ZERO;

 // PAR.TH Accrual Amount = CON.*ZERO
 PAR.TH_Accrual_Amount = *ZERO;

 // PAR.Freight Tot Ded/Add Exp = CON.*ZERO
 PAR.Freight_Tot_Ded_Add_Exp = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF PAR.@Status Include Dead Hd is No, dont include Dead Hd
 IF PAR.@Status_Include_Dead_Hd = 'N';

 // AND DB1.THD UOM is Dead Head UOM
 AND DB1.THD_UOM = 'CH'/'DH'/'DY'/'YH'/'KH';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Process Producer Ded/Add only
 CASE;

 // IF PAR.Exp Payed By Who Usr is Producer
 IF PAR.Exp_Payed_By_Who_Usr = 'P';

 CASE;

 // IF DB1.THD Expense Paid by is Producer
 IF DB1.THD_Expense_Paid_by = 'P';

 //?Freight for the producer is included in ded/add totals
 //?There are no accruals for producer
 CASE;

 // IF DB1.THD Unit Amt Sign is Add
 IF DB1.THD_Unit_Amt_Sign = '+';

 // PAR.TH Additions Amt = PAR.TH Additions Amt + DB1.THD Ded/Add Amount
 PAR.TH_Additions_Amt = PAR.TH_Additions_Amt + DB1.THD_Ded_Add_Amount;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.TH Deduction Amt = PAR.TH Deduction Amt + DB1.THD Ded/Add Amount
 PAR.TH_Deduction_Amt = PAR.TH_Deduction_Amt + DB1.THD_Ded_Add_Amount;

 ENDIF;

 ENDIF;

 ENDIF;

 //?Process Seaboard Expense
 CASE;

 // IF PAR.Exp Payed By Who Usr is Seaboard
 IF PAR.Exp_Payed_By_Who_Usr = 'S';

 CASE;

 // IF DB1.THD Expense Paid by is Seaboard
 IF DB1.THD_Expense_Paid_by = 'S';

 CASE;

 // IF DB1.THD Expense Type is Freight
 IF DB1.THD_Expense_Type = 'F';

 //?Freight should only be a +
 CASE;

 // IF DB1.THD Unit Amt Sign is Add
 IF DB1.THD_Unit_Amt_Sign = '+';

 // PAR.Freight Tot Ded/Add Exp = PAR.Freight Tot Ded/Add Exp + DB1.THD Ded/Add Amou
 PAR.Freight_Tot_Ded_Add_Exp = PAR.Freight_Tot_Ded_Add_Exp + DB1.THD_Ded_Add_Amount;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Freight Tot Ded/Add Exp = PAR.Freight Tot Ded/Add Exp - DB1.THD Ded/Add Amou
 PAR.Freight_Tot_Ded_Add_Exp = PAR.Freight_Tot_Ded_Add_Exp - DB1.THD_Ded_Add_Amount;

 ENDIF;

 // IF DB1.THD Expense Type is Other
 IF DB1.THD_Expense_Type = 'O';

 CASE;

 // IF DB1.THD Unit Amt Sign is Add
 IF DB1.THD_Unit_Amt_Sign = '+';

 // PAR.TH Accrual Amount = PAR.TH Accrual Amount + DB1.THD Ded/Add Amount
 PAR.TH_Accrual_Amount = PAR.TH_Accrual_Amount + DB1.THD_Ded_Add_Amount;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.TH Accrual Amount = PAR.TH Accrual Amount - DB1.THD Ded/Add Amount
 PAR.TH_Accrual_Amount = PAR.TH_Accrual_Amount - DB1.THD_Ded_Add_Amount;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

}


// WRK.Exp Amount Total F/A Usr = WRK.TH Accrual Amount
WRK.Exp_Amount_Total_F_A_Usr = WRK.TH_Accrual_Amount;

CASE;

// IF PAR.Th Accruals Amt Org Usr NE WRK.Exp Amount Total F/A Usr
IF PAR.Th_Accruals_Amt_Org_Usr <> WRK.Exp_Amount_Total_F_A_Usr;

// WRK.tot Amt fld 2 Usr = CON.*ZERO
WRK.tot_Amt_fld_2_Usr = *ZERO;

//?Spread new total amoung the ded
EXECUTE FUNCTION(Rtv/Chg Tto Dad Sbj SbRT) TYPE(RTVOBJ) FILE(PKCDCPP)           AB1193572;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TH_Payment_Sts);
PARAMETER(WRK.Exp_Amount_Total_F_A_Usr);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER('Y');
PARAMETER(WRK.tot_Amt_fld_2_Usr);
PARAMETER(PAR.Th_Accruals_Amt_Org_Usr);
{
 //?USER: Initialize routine

 CASE;

 // IF PAR.First Time Flag Usr is Yes
 IF PAR.First_Time_Flag_Usr = 'Y';

 CASE;

 // IF PAR.Exp Amount Total F/A Usr NE WRK.Zero USR
 IF PAR.Exp_Amount_Total_F_A_Usr <> WRK.Zero_USR;

 // WRK.@Percent Fld Usr = PAR.Th Accruals Amt Org Usr / PAR.Exp Amount Total F/A Us
 WRK.@Percent_Fld_Usr = PAR.Th_Accruals_Amt_Org_Usr / PAR.Exp_Amount_Total_F_A_Usr 'H';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.@Percent Fld Usr = CON.*ZERO
 WRK.@Percent_Fld_Usr = *ZERO;

 ENDIF;

 ENDIF;

 //?USER: Process Data record

 CASE;

 // IF DB1.THD Expense Paid by is Seaboard
 IF DB1.THD_Expense_Paid_by = 'S';

 //?Read D/As except those with Dead Head UOM
 CASE;

 // IF DB1.THD UOM is Dead Head UOM
 IF DB1.THD_UOM = 'CH'/'DH'/'DY'/'YH'/'KH';

 //?Read D/As except those with Dead Head UOM
 // IF DB1.THD Expense Type is Freight
 IF DB1.THD_Expense_Type = 'F';

 //?Read D/As except those with Dead Head UOM
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.First Time Flag Usr is Yes
 IF PAR.First_Time_Flag_Usr = 'Y';

 // WRK.THD Ded/Add Amount = DB1.THD Ded/Add Amount * WRK.@Percent Fld Usr *Rounded
 WRK.THD_Ded_Add_Amount = DB1.THD_Ded_Add_Amount * WRK.@Percent_Fld_Usr 'H';

 // PAR.tot Amt fld 2 Usr = PAR.tot Amt fld 2 Usr + WRK.THD Ded/Add Amount
 PAR.tot_Amt_fld_2_Usr = PAR.tot_Amt_fld_2_Usr + WRK.THD_Ded_Add_Amount;

 EXECUTE FUNCTION(Change Tattoo Deduction) TYPE(CHGOBJ) FILE(PKCDCPP)            AB1107818;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(WRK.THD_Ded_Add_Amount);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Transaction_Created);
 PARAMETER(DB1.THD_GL_Code);
 PARAMETER(DB1.THD_Contra_Gl_Code);
 PARAMETER(DB1.THD_Re_imbursement_Head);
 PARAMETER(DB1.THD_Payment_Sts);
 PARAMETER(DB1.THD_Expense_Paid_by);
 PARAMETER(DB1.THD_Expense_Type);
 PARAMETER(DB1.THD_Reserve_Account_Upd);
 PARAMETER(DB1.THD_Commission_Deduction);
 PARAMETER(DB1.THD_Deferred_Payment);
 PARAMETER(DB1.THD_Status_4);
 PARAMETER(DB1.THD_Status_5);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 // WRK.Tot Amt fld 1 usr = DB1.THD Ded/Add Amount - WRK.THD Ded/Add Amount
 WRK.Tot_Amt_fld_1_usr = DB1.THD_Ded_Add_Amount - WRK.THD_Ded_Add_Amount;

 CASE;

 // IF WRK.Tot Amt fld 1 usr is Not Zeros
 IF WRK.Tot_Amt_fld_1_usr <> *ZERO;

 EXECUTE FUNCTION(Rtv/Chg Tattoo D/A Pd Rt) TYPE(RTVOBJ) FILE(PKCDCPP)           AB1173206;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(PAR.Tattoo_Number_New_User);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(WRK.Tot_Amt_fld_1_usr);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Transaction_Created);
 PARAMETER(DB1.THD_GL_Code);
 PARAMETER(DB1.THD_Contra_Gl_Code);
 PARAMETER(DB1.THD_Re_imbursement_Head);
 PARAMETER(DB1.THD_Payment_Sts);
 PARAMETER(DB1.THD_Expense_Paid_by);
 PARAMETER(DB1.THD_Expense_Type);
 PARAMETER(DB1.THD_Commission_Deduction);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Create Tattoo Deduction) TYPE(CRTOBJ) FILE(PKCDCPP)            AB1107817;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.DED_D_A_Code);
  PARAMETER(PAR.THD_Unit_Amt);
  PARAMETER(PAR.THD_Ded_Add_Amount);
  PARAMETER(PAR.THD_Unit_Amt_Sign);
  PARAMETER(PAR.THD_UOM);
  PARAMETER(PAR.THD_Transaction_Created);
  PARAMETER(PAR.THD_GL_Code);
  PARAMETER(PAR.THD_Contra_Gl_Code);
  PARAMETER(PAR.THD_Re_imbursement_Head);
  PARAMETER(PAR.THD_Payment_Sts);
  PARAMETER(PAR.THD_Expense_Paid_by);
  PARAMETER(PAR.THD_Expense_Type);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Change Tattoo Deduction) TYPE(CHGOBJ) FILE(PKCDCPP)            AB1107818;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.DED_D_A_Code);
  PARAMETER(DB1.THD_Unit_Amt);
  PARAMETER(PAR.THD_Ded_Add_Amount);
  PARAMETER(DB1.THD_Unit_Amt_Sign);
  PARAMETER(DB1.THD_UOM);
  PARAMETER(DB1.THD_Transaction_Created);
  PARAMETER(DB1.THD_GL_Code);
  PARAMETER(DB1.THD_Contra_Gl_Code);
  PARAMETER(DB1.THD_Re_imbursement_Head);
  PARAMETER(DB1.THD_Payment_Sts);
  PARAMETER(DB1.THD_Expense_Paid_by);
  PARAMETER(DB1.THD_Expense_Type);
  PARAMETER(DB1.THD_Reserve_Account_Upd);
  PARAMETER(DB1.THD_Commission_Deduction);
  PARAMETER(DB1.THD_Deferred_Payment);
  PARAMETER(DB1.THD_Status_4);
  PARAMETER(DB1.THD_Status_5);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.First Time Flag Usr is No
 IF PAR.First_Time_Flag_Usr = 'N';

 CASE;

 // IF PAR.Th Accruals Amt Org Usr GT PAR.tot Amt fld 2 Usr
 IF PAR.Th_Accruals_Amt_Org_Usr > PAR.tot_Amt_fld_2_Usr;

 // WRK.THD Ded/Add Amount = PAR.Th Accruals Amt Org Usr - PAR.tot Amt fld 2 Usr
 WRK.THD_Ded_Add_Amount = PAR.Th_Accruals_Amt_Org_Usr - PAR.tot_Amt_fld_2_Usr;

 // WRK.THD Ded/Add Amount = WRK.THD Ded/Add Amount + DB1.THD Ded/Add Amount
 WRK.THD_Ded_Add_Amount = WRK.THD_Ded_Add_Amount + DB1.THD_Ded_Add_Amount;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.THD Ded/Add Amount = PAR.tot Amt fld 2 Usr - PAR.Th Accruals Amt Org Usr
 WRK.THD_Ded_Add_Amount = PAR.tot_Amt_fld_2_Usr - PAR.Th_Accruals_Amt_Org_Usr;

 // WRK.THD Ded/Add Amount = DB1.THD Ded/Add Amount - WRK.THD Ded/Add Amount
 WRK.THD_Ded_Add_Amount = DB1.THD_Ded_Add_Amount - WRK.THD_Ded_Add_Amount;

 ENDIF;

 EXECUTE FUNCTION(Change Tattoo Deduction) TYPE(CHGOBJ) FILE(PKCDCPP)            AB1107818;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(WRK.THD_Ded_Add_Amount);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Transaction_Created);
 PARAMETER(DB1.THD_GL_Code);
 PARAMETER(DB1.THD_Contra_Gl_Code);
 PARAMETER(DB1.THD_Re_imbursement_Head);
 PARAMETER(DB1.THD_Payment_Sts);
 PARAMETER(DB1.THD_Expense_Paid_by);
 PARAMETER(DB1.THD_Expense_Type);
 PARAMETER(DB1.THD_Reserve_Account_Upd);
 PARAMETER(DB1.THD_Commission_Deduction);
 PARAMETER(DB1.THD_Deferred_Payment);
 PARAMETER(DB1.THD_Status_4);
 PARAMETER(DB1.THD_Status_5);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 QUIT;

 ENDIF;

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(Rtv/Chg Tto Dad Sbj SbRT) TYPE(RTVOBJ) FILE(PKCDCPP)           AB1193572;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TH_Payment_Sts);
PARAMETER(WRK.Exp_Amount_Total_F_A_Usr);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER('N');
PARAMETER(WRK.tot_Amt_fld_2_Usr);
PARAMETER(PAR.Th_Accruals_Amt_Org_Usr);
{
 //?USER: Initialize routine

 CASE;

 // IF PAR.First Time Flag Usr is Yes
 IF PAR.First_Time_Flag_Usr = 'Y';

 CASE;

 // IF PAR.Exp Amount Total F/A Usr NE WRK.Zero USR
 IF PAR.Exp_Amount_Total_F_A_Usr <> WRK.Zero_USR;

 // WRK.@Percent Fld Usr = PAR.Th Accruals Amt Org Usr / PAR.Exp Amount Total F/A Us
 WRK.@Percent_Fld_Usr = PAR.Th_Accruals_Amt_Org_Usr / PAR.Exp_Amount_Total_F_A_Usr 'H';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.@Percent Fld Usr = CON.*ZERO
 WRK.@Percent_Fld_Usr = *ZERO;

 ENDIF;

 ENDIF;

 //?USER: Process Data record

 CASE;

 // IF DB1.THD Expense Paid by is Seaboard
 IF DB1.THD_Expense_Paid_by = 'S';

 //?Read D/As except those with Dead Head UOM
 CASE;

 // IF DB1.THD UOM is Dead Head UOM
 IF DB1.THD_UOM = 'CH'/'DH'/'DY'/'YH'/'KH';

 //?Read D/As except those with Dead Head UOM
 // IF DB1.THD Expense Type is Freight
 IF DB1.THD_Expense_Type = 'F';

 //?Read D/As except those with Dead Head UOM
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.First Time Flag Usr is Yes
 IF PAR.First_Time_Flag_Usr = 'Y';

 // WRK.THD Ded/Add Amount = DB1.THD Ded/Add Amount * WRK.@Percent Fld Usr *Rounded
 WRK.THD_Ded_Add_Amount = DB1.THD_Ded_Add_Amount * WRK.@Percent_Fld_Usr 'H';

 // PAR.tot Amt fld 2 Usr = PAR.tot Amt fld 2 Usr + WRK.THD Ded/Add Amount
 PAR.tot_Amt_fld_2_Usr = PAR.tot_Amt_fld_2_Usr + WRK.THD_Ded_Add_Amount;

 EXECUTE FUNCTION(Change Tattoo Deduction) TYPE(CHGOBJ) FILE(PKCDCPP)            AB1107818;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(WRK.THD_Ded_Add_Amount);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Transaction_Created);
 PARAMETER(DB1.THD_GL_Code);
 PARAMETER(DB1.THD_Contra_Gl_Code);
 PARAMETER(DB1.THD_Re_imbursement_Head);
 PARAMETER(DB1.THD_Payment_Sts);
 PARAMETER(DB1.THD_Expense_Paid_by);
 PARAMETER(DB1.THD_Expense_Type);
 PARAMETER(DB1.THD_Reserve_Account_Upd);
 PARAMETER(DB1.THD_Commission_Deduction);
 PARAMETER(DB1.THD_Deferred_Payment);
 PARAMETER(DB1.THD_Status_4);
 PARAMETER(DB1.THD_Status_5);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 // WRK.Tot Amt fld 1 usr = DB1.THD Ded/Add Amount - WRK.THD Ded/Add Amount
 WRK.Tot_Amt_fld_1_usr = DB1.THD_Ded_Add_Amount - WRK.THD_Ded_Add_Amount;

 CASE;

 // IF WRK.Tot Amt fld 1 usr is Not Zeros
 IF WRK.Tot_Amt_fld_1_usr <> *ZERO;

 EXECUTE FUNCTION(Rtv/Chg Tattoo D/A Pd Rt) TYPE(RTVOBJ) FILE(PKCDCPP)           AB1173206;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(PAR.Tattoo_Number_New_User);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(WRK.Tot_Amt_fld_1_usr);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Transaction_Created);
 PARAMETER(DB1.THD_GL_Code);
 PARAMETER(DB1.THD_Contra_Gl_Code);
 PARAMETER(DB1.THD_Re_imbursement_Head);
 PARAMETER(DB1.THD_Payment_Sts);
 PARAMETER(DB1.THD_Expense_Paid_by);
 PARAMETER(DB1.THD_Expense_Type);
 PARAMETER(DB1.THD_Commission_Deduction);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Create Tattoo Deduction) TYPE(CRTOBJ) FILE(PKCDCPP)            AB1107817;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.DED_D_A_Code);
  PARAMETER(PAR.THD_Unit_Amt);
  PARAMETER(PAR.THD_Ded_Add_Amount);
  PARAMETER(PAR.THD_Unit_Amt_Sign);
  PARAMETER(PAR.THD_UOM);
  PARAMETER(PAR.THD_Transaction_Created);
  PARAMETER(PAR.THD_GL_Code);
  PARAMETER(PAR.THD_Contra_Gl_Code);
  PARAMETER(PAR.THD_Re_imbursement_Head);
  PARAMETER(PAR.THD_Payment_Sts);
  PARAMETER(PAR.THD_Expense_Paid_by);
  PARAMETER(PAR.THD_Expense_Type);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Change Tattoo Deduction) TYPE(CHGOBJ) FILE(PKCDCPP)            AB1107818;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.DED_D_A_Code);
  PARAMETER(DB1.THD_Unit_Amt);
  PARAMETER(PAR.THD_Ded_Add_Amount);
  PARAMETER(DB1.THD_Unit_Amt_Sign);
  PARAMETER(DB1.THD_UOM);
  PARAMETER(DB1.THD_Transaction_Created);
  PARAMETER(DB1.THD_GL_Code);
  PARAMETER(DB1.THD_Contra_Gl_Code);
  PARAMETER(DB1.THD_Re_imbursement_Head);
  PARAMETER(DB1.THD_Payment_Sts);
  PARAMETER(DB1.THD_Expense_Paid_by);
  PARAMETER(DB1.THD_Expense_Type);
  PARAMETER(DB1.THD_Reserve_Account_Upd);
  PARAMETER(DB1.THD_Commission_Deduction);
  PARAMETER(DB1.THD_Deferred_Payment);
  PARAMETER(DB1.THD_Status_4);
  PARAMETER(DB1.THD_Status_5);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.First Time Flag Usr is No
 IF PAR.First_Time_Flag_Usr = 'N';

 CASE;

 // IF PAR.Th Accruals Amt Org Usr GT PAR.tot Amt fld 2 Usr
 IF PAR.Th_Accruals_Amt_Org_Usr > PAR.tot_Amt_fld_2_Usr;

 // WRK.THD Ded/Add Amount = PAR.Th Accruals Amt Org Usr - PAR.tot Amt fld 2 Usr
 WRK.THD_Ded_Add_Amount = PAR.Th_Accruals_Amt_Org_Usr - PAR.tot_Amt_fld_2_Usr;

 // WRK.THD Ded/Add Amount = WRK.THD Ded/Add Amount + DB1.THD Ded/Add Amount
 WRK.THD_Ded_Add_Amount = WRK.THD_Ded_Add_Amount + DB1.THD_Ded_Add_Amount;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.THD Ded/Add Amount = PAR.tot Amt fld 2 Usr - PAR.Th Accruals Amt Org Usr
 WRK.THD_Ded_Add_Amount = PAR.tot_Amt_fld_2_Usr - PAR.Th_Accruals_Amt_Org_Usr;

 // WRK.THD Ded/Add Amount = DB1.THD Ded/Add Amount - WRK.THD Ded/Add Amount
 WRK.THD_Ded_Add_Amount = DB1.THD_Ded_Add_Amount - WRK.THD_Ded_Add_Amount;

 ENDIF;

 EXECUTE FUNCTION(Change Tattoo Deduction) TYPE(CHGOBJ) FILE(PKCDCPP)            AB1107818;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(WRK.THD_Ded_Add_Amount);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Transaction_Created);
 PARAMETER(DB1.THD_GL_Code);
 PARAMETER(DB1.THD_Contra_Gl_Code);
 PARAMETER(DB1.THD_Re_imbursement_Head);
 PARAMETER(DB1.THD_Payment_Sts);
 PARAMETER(DB1.THD_Expense_Paid_by);
 PARAMETER(DB1.THD_Expense_Type);
 PARAMETER(DB1.THD_Reserve_Account_Upd);
 PARAMETER(DB1.THD_Commission_Deduction);
 PARAMETER(DB1.THD_Deferred_Payment);
 PARAMETER(DB1.THD_Status_4);
 PARAMETER(DB1.THD_Status_5);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 QUIT;

 ENDIF;

 ENDIF;

 ENDIF;

}


ENDIF;

// WRK.tot Amt fld 2 Usr = CON.*ZERO
WRK.tot_Amt_fld_2_Usr = *ZERO;

//?Verify that ded/add for next kill date = totals from tattoo hdr
//?Accumulate totals of ded/add for this next kill date
EXECUTE FUNCTION(RTV Tattoo Record     RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1111223;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(WRK.TH_Purchase_Date);
PARAMETER(WRK.TH_Group_Reference);
PARAMETER(WRK.TH_Live_Purchase_UOM);
PARAMETER(WRK.TH_Live_Purchase_Price);
PARAMETER(WRK.TH_Resale_UOM);
PARAMETER(WRK.TH_Recalc_Live_Wgt_Yld);
PARAMETER(WRK.TH_Pricing_Date);
PARAMETER(WRK.TH_Resale_Spread_Sts);
PARAMETER(WRK.TH_Dead_On_Arrival);
PARAMETER(WRK.TH_Head_Received);
PARAMETER(WRK.TH_Yard_Deads);
PARAMETER(WRK.TH_Held_Over);
PARAMETER(WRK.TH_Head_Condemned);
PARAMETER(WRK.TH_Head_Killed);
PARAMETER(WRK.TH_Head_Adds);
PARAMETER(WRK.TH_Head_Accepted);
PARAMETER(WRK.TH_Live_Wgt);
PARAMETER(WRK.TH_Hot_Wgt);
PARAMETER(WRK.TH_Tot_Loin_Eye_Depth);
PARAMETER(WRK.TH_Tot_Backfat_Inches);
PARAMETER(WRK.TH_Tot_Light_Reflectance);
PARAMETER(WRK.TH_Avg_Live_Wgt);
PARAMETER(WRK.TH_Avg_Hot_Wgt);
PARAMETER(WRK.TH_Avg_Light_Reflectance);
PARAMETER(WRK.TH_Avg_Lean_Percent);
PARAMETER(WRK.TH_Avg_Loin_Eye_Depth);
PARAMETER(WRK.TH_Avg_Backfat);
PARAMETER(WRK.TH_Std_Yield_Percent);
PARAMETER(WRK.TH_Actual_Yield);
PARAMETER(WRK.TH_Yield_Difference);
PARAMETER(WRK.TH_Recalc_Live_Wgt);
PARAMETER(WRK.TH_CM_Base_Mkt_Price);
PARAMETER(WRK.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(WRK.TH_CM_Sort_Discount_Amt);
PARAMETER(WRK.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(WRK.TH_CM_Base_Carcass_Value);
PARAMETER(WRK.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(WRK.TH_CM_Carcass_Gross_Amt);
PARAMETER(WRK.TH_Deduction_Amt);
PARAMETER(WRK.TH_Total_Net_WO_Adds);
PARAMETER(WRK.TH_Carcass_Net_Amt);
PARAMETER(WRK.TH_Additions_Amt);
PARAMETER(WRK.TH_Accrual_Amount);
PARAMETER(WRK.TH_Fixed_Cost_Amount);
PARAMETER(WRK.TH_Payment_Sts);
PARAMETER(WRK.TH_Header_Error_Sts);
PARAMETER(WRK.TH_Detail_Error_Sts);
PARAMETER(WRK.TH_Kill_Balancing_Sts);
PARAMETER(WRK.TH_Bal_to_Kill_Gen);
PARAMETER(WRK.TH_Commission_A_P_Voucher);
PARAMETER(WRK.TH_Voucher_Payment_Date);
PARAMETER(WRK.TH_User_Error_Override);
PARAMETER(WRK.TH_Held_Over_Record);
PARAMETER(WRK.TH_Sex);
PARAMETER(WRK.TH_Held_Ovr_Completed_Dte);
PARAMETER(WRK.TH_Commission_Paid_Date);
PARAMETER(WRK.TH_Actual_Check_Date);
PARAMETER(WRK.TH_Shipped_Weight);
PARAMETER(WRK.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(WRK.TH_FFLI);
PARAMETER(WRK.TH_Kill_Product_Value);
PARAMETER(WRK.TH_Cut_Product_Value);
PARAMETER(WRK.TH_Render_Product_Value);
PARAMETER(WRK.TH_Shift_Held_Over_Head);
PARAMETER(WRK.DF_Defect_Code);
PARAMETER(WRK.THP_Process_Code);
PARAMETER(WRK.HB_Buyer_Code);
PARAMETER(WRK.GN_Genetic_Code);
PARAMETER(WRK.HC_Class_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?  Include D/A with Dead head uom in D/A totals
EXECUTE FUNCTION(Rtv Ttto Hdr Ttl Pd/Sb RT) TYPE(RTVOBJ) FILE(PKCDCPP)          AB1193254;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(WRK.TOT_DEDUCTION_Usr);
PARAMETER(WRK.TOT_ADDITION_Usr);
PARAMETER(WRK.Exp_Paid_By_Amount_Usr);
PARAMETER('Y');
PARAMETER(WRK.Exp_Payed_By_Who_Usr);
PARAMETER(WRK.Freight_Tot_Ded_Add_Exp);
{
 //?USER: Initialize routine

 EXECUTE FUNCTION(HPE063 Frt Exp/Accruals) TYPE(EXCINTFUN)                       AB1192166;
 {
  //?Execute internal function

  //?2/26/96  HPE063   Allow the expense for freight to be paid
  //?                  by either Seaboard(us) or the producer
  //?                  Allow the system to process accruals thru
  //?                  the General Ledger.
 }

 // PAR.TH Deduction Amt = CON.*ZERO
 PAR.TH_Deduction_Amt = *ZERO;

 // PAR.TH Additions Amt = CON.*ZERO
 PAR.TH_Additions_Amt = *ZERO;

 // PAR.TH Accrual Amount = CON.*ZERO
 PAR.TH_Accrual_Amount = *ZERO;

 // PAR.Freight Tot Ded/Add Exp = CON.*ZERO
 PAR.Freight_Tot_Ded_Add_Exp = *ZERO;

 //?USER: Processing if Data record not found

 // PAR.TH Additions Amt = CON.*ZERO
 PAR.TH_Additions_Amt = *ZERO;

 // PAR.TH Deduction Amt = CON.*ZERO
 PAR.TH_Deduction_Amt = *ZERO;

 // PAR.TH Accrual Amount = CON.*ZERO
 PAR.TH_Accrual_Amount = *ZERO;

 // PAR.Freight Tot Ded/Add Exp = CON.*ZERO
 PAR.Freight_Tot_Ded_Add_Exp = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF PAR.@Status Include Dead Hd is No, dont include Dead Hd
 IF PAR.@Status_Include_Dead_Hd = 'N';

 // AND DB1.THD UOM is Dead Head UOM
 AND DB1.THD_UOM = 'CH'/'DH'/'DY'/'YH'/'KH';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Process Producer Ded/Add only
 CASE;

 // IF PAR.Exp Payed By Who Usr is Producer
 IF PAR.Exp_Payed_By_Who_Usr = 'P';

 CASE;

 // IF DB1.THD Expense Paid by is Producer
 IF DB1.THD_Expense_Paid_by = 'P';

 //?Freight for the producer is included in ded/add totals
 //?There are no accruals for producer
 CASE;

 // IF DB1.THD Unit Amt Sign is Add
 IF DB1.THD_Unit_Amt_Sign = '+';

 // PAR.TH Additions Amt = PAR.TH Additions Amt + DB1.THD Ded/Add Amount
 PAR.TH_Additions_Amt = PAR.TH_Additions_Amt + DB1.THD_Ded_Add_Amount;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.TH Deduction Amt = PAR.TH Deduction Amt + DB1.THD Ded/Add Amount
 PAR.TH_Deduction_Amt = PAR.TH_Deduction_Amt + DB1.THD_Ded_Add_Amount;

 ENDIF;

 ENDIF;

 ENDIF;

 //?Process Seaboard Expense
 CASE;

 // IF PAR.Exp Payed By Who Usr is Seaboard
 IF PAR.Exp_Payed_By_Who_Usr = 'S';

 CASE;

 // IF DB1.THD Expense Paid by is Seaboard
 IF DB1.THD_Expense_Paid_by = 'S';

 CASE;

 // IF DB1.THD Expense Type is Freight
 IF DB1.THD_Expense_Type = 'F';

 //?Freight should only be a +
 CASE;

 // IF DB1.THD Unit Amt Sign is Add
 IF DB1.THD_Unit_Amt_Sign = '+';

 // PAR.Freight Tot Ded/Add Exp = PAR.Freight Tot Ded/Add Exp + DB1.THD Ded/Add Amou
 PAR.Freight_Tot_Ded_Add_Exp = PAR.Freight_Tot_Ded_Add_Exp + DB1.THD_Ded_Add_Amount;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Freight Tot Ded/Add Exp = PAR.Freight Tot Ded/Add Exp - DB1.THD Ded/Add Amou
 PAR.Freight_Tot_Ded_Add_Exp = PAR.Freight_Tot_Ded_Add_Exp - DB1.THD_Ded_Add_Amount;

 ENDIF;

 // IF DB1.THD Expense Type is Other
 IF DB1.THD_Expense_Type = 'O';

 CASE;

 // IF DB1.THD Unit Amt Sign is Add
 IF DB1.THD_Unit_Amt_Sign = '+';

 // PAR.TH Accrual Amount = PAR.TH Accrual Amount + DB1.THD Ded/Add Amount
 PAR.TH_Accrual_Amount = PAR.TH_Accrual_Amount + DB1.THD_Ded_Add_Amount;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.TH Accrual Amount = PAR.TH Accrual Amount - DB1.THD Ded/Add Amount
 PAR.TH_Accrual_Amount = PAR.TH_Accrual_Amount - DB1.THD_Ded_Add_Amount;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

}


CASE;

// IF WRK.TH Accrual Amount NE WRK.Exp Amount Total F/A Usr
IF WRK.TH_Accrual_Amount <> WRK.Exp_Amount_Total_F_A_Usr;

//?Spread new total amoung the ded
EXECUTE FUNCTION(Rtv/Chg Tto DAd AdjSJ SB) TYPE(RTVOBJ) FILE(PKCDCPP)           AB1193764;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(WRK.Exp_Paid_By_Amount_Usr);
PARAMETER(WRK.TH_Accrual_Amount);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.THD Expense Paid by is Seaboard
 IF DB1.THD_Expense_Paid_by = 'S';

 CASE;

 // IF DB1.THD Expense Type is Freight
 IF DB1.THD_Expense_Type = 'F';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.TH Accrual Amount GT PAR.Exp Paid By Amount Usr
 IF PAR.TH_Accrual_Amount > PAR.Exp_Paid_By_Amount_Usr;

 // WRK.THD Ded/Add Amount = PAR.TH Accrual Amount - PAR.Exp Paid By Amount Usr
 WRK.THD_Ded_Add_Amount = PAR.TH_Accrual_Amount - PAR.Exp_Paid_By_Amount_Usr;

 // WRK.THD Ded/Add Amount = WRK.THD Ded/Add Amount + DB1.THD Ded/Add Amount
 WRK.THD_Ded_Add_Amount = WRK.THD_Ded_Add_Amount + DB1.THD_Ded_Add_Amount;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.THD Ded/Add Amount = PAR.Exp Paid By Amount Usr - PAR.TH Accrual Amount
 WRK.THD_Ded_Add_Amount = PAR.Exp_Paid_By_Amount_Usr - PAR.TH_Accrual_Amount;

 // WRK.THD Ded/Add Amount = DB1.THD Ded/Add Amount - WRK.THD Ded/Add Amount
 WRK.THD_Ded_Add_Amount = DB1.THD_Ded_Add_Amount - WRK.THD_Ded_Add_Amount;

 ENDIF;

 EXECUTE FUNCTION(Change Tattoo Deduction) TYPE(CHGOBJ) FILE(PKCDCPP)            AB1107818;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(WRK.THD_Ded_Add_Amount);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Transaction_Created);
 PARAMETER(DB1.THD_GL_Code);
 PARAMETER(DB1.THD_Contra_Gl_Code);
 PARAMETER(DB1.THD_Re_imbursement_Head);
 PARAMETER(DB1.THD_Payment_Sts);
 PARAMETER(DB1.THD_Expense_Paid_by);
 PARAMETER(DB1.THD_Expense_Type);
 PARAMETER(DB1.THD_Reserve_Account_Upd);
 PARAMETER(DB1.THD_Commission_Deduction);
 PARAMETER(DB1.THD_Deferred_Payment);
 PARAMETER(DB1.THD_Status_4);
 PARAMETER(DB1.THD_Status_5);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 QUIT;

 ENDIF;

 ENDIF;

}


ENDIF;

// WRK.tot Amt fld 2 Usr = CON.*ZERO
WRK.tot_Amt_fld_2_Usr = *ZERO;

//?Seaboard Totals for Freight
DO;

//?There is a 1 for 1 frt transaction
//?So what the total frt is for the current  = ded/add frt
//?If this frt is for the next then
//?   must = next kill ded/add
CASE;

// IF WRK.Exp Payed By Who Usr is Seaboard
IF WRK.Exp_Payed_By_Who_Usr = 'S';

//?Current Tattoo number update frt then update new tattoo number
EXECUTE FUNCTION(Rtv/Chg TTO DAd SB FrtSJ) TYPE(RTVOBJ) FILE(PKCDCPP)           AB1193786;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER('FRT');
PARAMETER(PAR.Freight_Cur_Amount_Usr);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(PAR.Freight_Nxt_Amount_Usr);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.THD Expense Paid by is Seaboard
 IF DB1.THD_Expense_Paid_by = 'S';

 EXECUTE FUNCTION(Change Tattoo Deduction) TYPE(CHGOBJ) FILE(PKCDCPP)            AB1107818;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(PAR.THD_Ded_Add_Amount);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Transaction_Created);
 PARAMETER(DB1.THD_GL_Code);
 PARAMETER(DB1.THD_Contra_Gl_Code);
 PARAMETER(DB1.THD_Re_imbursement_Head);
 PARAMETER(DB1.THD_Payment_Sts);
 PARAMETER(DB1.THD_Expense_Paid_by);
 PARAMETER(DB1.THD_Expense_Type);
 PARAMETER(DB1.THD_Reserve_Account_Upd);
 PARAMETER(DB1.THD_Commission_Deduction);
 PARAMETER(DB1.THD_Deferred_Payment);
 PARAMETER(DB1.THD_Status_4);
 PARAMETER(DB1.THD_Status_5);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 //?Change or Create the next record
 EXECUTE FUNCTION(Rtv/Chg Tto Dad NxRd  RT) TYPE(RTVOBJ) FILE(PKCDCPP)           AB1193783;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(PAR.Tattoo_Number_New_User);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(PAR.Freight_Nxt_Amount_Usr);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Transaction_Created);
 PARAMETER(DB1.THD_GL_Code);
 PARAMETER(DB1.THD_Contra_Gl_Code);
 PARAMETER(DB1.THD_Re_imbursement_Head);
 PARAMETER(DB1.THD_Payment_Sts);
 PARAMETER(DB1.THD_Expense_Paid_by);
 PARAMETER(DB1.THD_Expense_Type);
 PARAMETER(DB1.THD_Reserve_Account_Upd);
 PARAMETER(DB1.THD_Commission_Deduction);
 PARAMETER(DB1.THD_Deferred_Payment);
 PARAMETER(DB1.THD_Status_4);
 PARAMETER(DB1.THD_Status_5);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Create Tattoo Deduction) TYPE(CRTOBJ) FILE(PKCDCPP)            AB1107817;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.DED_D_A_Code);
  PARAMETER(PAR.THD_Unit_Amt);
  PARAMETER(PAR.THD_Ded_Add_Amount);
  PARAMETER(PAR.THD_Unit_Amt_Sign);
  PARAMETER(PAR.THD_UOM);
  PARAMETER(PAR.THD_Transaction_Created);
  PARAMETER(PAR.THD_GL_Code);
  PARAMETER(PAR.THD_Contra_Gl_Code);
  PARAMETER(PAR.THD_Re_imbursement_Head);
  PARAMETER(PAR.THD_Payment_Sts);
  PARAMETER(PAR.THD_Expense_Paid_by);
  PARAMETER(PAR.THD_Expense_Type);
  PARAMETER(PAR.THD_Reserve_Account_Upd);
  PARAMETER(PAR.THD_Commission_Deduction);
  PARAMETER(PAR.THD_Deferred_Payment);
  PARAMETER(PAR.THD_Status_4);
  PARAMETER(PAR.THD_Status_5);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(JOB.*JOB);
  PARAMETER(JOB.*PROGRAM);
  PARAMETER(JOB.*USER);
  PARAMETER(JOB.*Job_date);
  PARAMETER(JOB.*Job_time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Change Tattoo Deduction) TYPE(CHGOBJ) FILE(PKCDCPP)            AB1107818;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.DED_D_A_Code);
  PARAMETER(DB1.THD_Unit_Amt);
  PARAMETER(DB1.THD_Ded_Add_Amount);
  PARAMETER(DB1.THD_Unit_Amt_Sign);
  PARAMETER(DB1.THD_UOM);
  PARAMETER(DB1.THD_Transaction_Created);
  PARAMETER(DB1.THD_GL_Code);
  PARAMETER(DB1.THD_Contra_Gl_Code);
  PARAMETER(DB1.THD_Re_imbursement_Head);
  PARAMETER(DB1.THD_Payment_Sts);
  PARAMETER(DB1.THD_Expense_Paid_by);
  PARAMETER(DB1.THD_Expense_Type);
  PARAMETER(DB1.THD_Reserve_Account_Upd);
  PARAMETER(DB1.THD_Commission_Deduction);
  PARAMETER(DB1.THD_Deferred_Payment);
  PARAMETER(DB1.THD_Status_4);
  PARAMETER(DB1.THD_Status_5);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

}


ENDIF;

ENDDO;

ENDIF;

ENDDO;

