// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POSQPFR
// ?Date: 14.08.2025 Time: 12:06:23
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('P/S');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// LCL.Count USR = CON.*ZERO
LCL.Count_USR = *ZERO;

// LCL.Production Date = CON.*ZERO
LCL.Production_Date = *ZERO;

//?USER: Record selection processing

CASE;

// IF DB1.Production Date EQ JOB.*Job date
IF DB1.Production_Date = JOB.*Job_date;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF LCL.Count USR is Five
IF LCL.Count_USR = 5;

// Execute function SET End of File 'A'    US.
EXECUTE FUNCTION(SET End of File 'A'    US) TYPE(EXCUSRSRC) ('PDGOUFR');
{
 C                     MOVEL'1'       W0EOFA           END OF FILE 'B'
}


ENDIF;

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
// Print Company Number header format
PRINT Company Number header format;

ENDIF;

// SUPPRESSED PRINT Production Date header format

// SUPPRESSED PRINT Item Code header format

//?USER: On print of detail format

CASE;

// IF CUR.BoneIn/Boneless is Boneless
IF CUR.BoneIn_Boneless = 'BL';

// CUR.Boneless Pieces USR = CUR.Production Pieces
CUR.Boneless_Pieces_USR = CUR.Production_Pieces;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Boneless Pieces USR = CON.*ZERO
CUR.Boneless_Pieces_USR = *ZERO;

ENDIF;

CASE;

// IF CUR.Export/Domestic is Export
IF CUR.Export_Domestic = 'E';

// CUR.Export Pieces USR = CUR.Production Pieces
CUR.Export_Pieces_USR = CUR.Production_Pieces;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Export Pieces USR = CON.*ZERO
CUR.Export_Pieces_USR = *ZERO;

ENDIF;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

//?USER: Process after print of detail format

NXT.Pieces_SUM = SUM(CUR.Production_Pieces);

NXT.Boneless_Pieces_SUM = SUM(CUR.Boneless_Pieces_USR);

NXT.Export_Pieces_SUM = SUM(CUR.Export_Pieces_USR);

//?USER: Print required level totals

CASE;

IF NEW Item_Code;
// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

// Print Item Code totals format
PRINT Item Code totals format;

NXT.Boneless_Pieces_SUM = SUM(CUR.Boneless_Pieces_SUM);

NXT.Export_Pieces_SUM = SUM(CUR.Export_Pieces_SUM);

NXT.Pieces_SUM = SUM(CUR.Pieces_SUM);

ENDIF;

CASE;

IF NEW Production_Date;
CASE;

// IF CUR.Boneless Pieces SUM is EQ Zero
IF CUR.Boneless_Pieces_SUM = *ZERO;

// CUR.Pieces SUM = CON.*ZERO
CUR.Pieces_SUM = *ZERO;

ENDIF;

CASE;

// IF CUR.Export Pieces SUM is GT Zero
IF CUR.Export_Pieces_SUM > *ZERO;

// LCL.Count USR = LCL.Count USR + CON.1
LCL.Count_USR = LCL.Count_USR + 1;

// CUR.Boneless Pieces 2 USR = CUR.Boneless Pieces SUM
CUR.Boneless_Pieces_2_USR = CUR.Boneless_Pieces_SUM;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Boneless Pieces 2 USR = CON.*ZERO
CUR.Boneless_Pieces_2_USR = *ZERO;

ENDIF;

// Print Production Date totals format
PRINT Production Date totals format;

NXT.Pieces_SUM = SUM(CUR.Pieces_SUM);

NXT.Boneless_Pieces_SUM = SUM(CUR.Boneless_Pieces_SUM);

NXT.Export_Pieces_SUM = SUM(CUR.Export_Pieces_SUM);

NXT.Boneless_Pieces_2_SUM = SUM(CUR.Boneless_Pieces_2_USR);

ENDIF;

CASE;

IF NEW Company_Number;
CASE;

// IF CUR.Pieces SUM is GT Zero
IF CUR.Pieces_SUM > *ZERO;

// Boning Rate
CUR.Boning_Rate = ( CUR.Boneless_Pieces_SUM / CUR.Pieces_SUM 'H' ) * 100 'H';

ENDIF;

CASE;

// IF CUR.Boneless Pieces 2 SUM is GT Zero
IF CUR.Boneless_Pieces_2_SUM > *ZERO;

// Export Rate
CUR.Export_Pass_Rate = ( CUR.Export_Pieces_SUM / CUR.Boneless_Pieces_2_SUM 'H' ) * 100             +
'H';

ENDIF;

// Print Company Number totals format
PRINT Company Number totals format;

ENDIF;

