     h option(*SRCSTMT:*NODEBUGIO)
      ****************************************************************
      *
      * ENVIRONMENT: Pork Division
      * SYSTEM:      Resource Optimization
      * PROGRAM:     RO413
      * TITLE:       Specify Report
      * PROGRAMMER:  LeAnne Ramsey
      * CREATED:     01/22/07
      *
      *
      * FUNCTION: This Specify uses an edit record format to allow the user
      *           to specify options for generating the report.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 02/12/07  LeAnne Ramsey
      *           Flip/flopped Company/Date on the screen.
      *
      * 12/21/07  Alice Brownfield
      *           Minor changes when we combined the Credit item Meat Cost files with
      *           the Byproduct MIX processing files.
      *
      * 01/03/08  LeAnne Ramsey
      *           Originally this program submitted only 1 report: Meat Cost Report.
      *           Now, the user can select either:
      *                  Meat Cost Report
      *                  Ham Group Yield Breakdown Report
      *           Added logic to retrieve user's default output queue.
      *
      * 11/21/08  LeAnne Ramsey
      *           As part of synchronizing the LDAs between the TFS Margin Adjustment Close
      *           and the Meat Costing, we changed the LDA positions.
      *
      * 05/12/09  LeAnne Ramsey
      *           Added 'out LDA' in the Initialization Subroutine.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Frod413    cf   e             workstn infds(iofeed)
      *
      *
     Fombyrel1  if   e           k disk
      *  Item default
      *
      *
     Fpdllrel1  if   e           k disk
      *   Primal group
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  Compile time array for SBMJOB used in QCMDEXC
      *---------------------------------------------------------------
     D cmd             s              1    dim(80) ctdata perrcd(80)
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D maxmsg          s              2  0  inz(20)
      *
      *
      * Workfields for date manipulation
      *
     D wkisodate       s               d   datfmt(*iso)
     D wkmdydt         s               d   datfmt(*mdy)
     D wkdt            s              8  0
     D wkmdy           s              6  0
      *
      *
      * Parm fields
      *
      *
     D xxpgcd          s                   like(d1pgcd)
     D xxpgds          s                   like(d1pgds)
      *
     D xxdsfl          s                   like(d1dsfl)
     D xxdsds          s                   like(d1dsds)
      *
     D xxrpfl          s                   like(d1rpfl)
     D xxrpds          s                   like(d1rpds)
      *
     D xxalphitcd      s              7
     D xxitcd          s                   like(d1itcd)
     D xxitds          s                   like(d1itds)
      *
     D xxsatdt         s              8  0
     D xxdt            s              8  0
     D xxyr            s              4  0
     D xxpe            s              2  0
     D xxwk            s              2  0
     D xxwedt          s              8  0
      *
      *  Parms for use with QCMDEXC.  'LENGTH' is the length of the
      *  command that will be issued with QCMDEXC.  QCMDEXC requires
      *  the field containing length to be defined as 15 with 5 decimal
      *  positions.  The field 'CMDSBM' will hold the values of the
      *  submit job command when passed as a parm on the call to
      *  QCMDEXC.
      *
     D length          s             15  5 inz(80)
     D cmdsbm          s             80
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('ROMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      * Data areas
      *---------------------------------------------------------------
      *
      *---------------------------------------------------------------
      * Local data area.
      *---------------------------------------------------------------
      *
     Dlda             uds                  dtaara(*lda)
     D  ldpfcd                 1      1
     D  ldyr                   2      5  0
     D  ldwk                   6      7  0
      *
     D  ldwedt                29     36  0
     D  ldwemdy               44     49  0
      *
     D  ldcono                82     84  0
     D  ldrpfl               113    113
     D  lddsfl               135    135
      *
     D  lditcd               222    228  0
     D  lditds               229    258
     D  ldpgcd               259    264
     D  ldpgds               265    294
     D  ldplcd               299    304
      *
     D  ldoutq               401    410
     D  ldhold               411    414
     D  ldsave               415    418
     D  ldcopy               419    419  0
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
     C
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the error
      * message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to CRT.
      *
     C                   write     ro413k1
     C                   write     ro413ec
     C                   exfmt     ro413r1
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                       API
     C                   eval      routne = scrn1
      *
     C                   when      *in17 = *on                                  F17-print options
     C                   call      'RO890'
     C                   eval      routne = scrn1
     C                   other
      *
     C                   eval      routne = edit1
     C                   endsl
      *
      * Bring in the LDA to pick up any printer changes the user may
      * have made from called programs
      *
     C                   in        lda
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Edit screen 1 input fields
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * Validate required fields:
      *   1) company
      *   2) date
      *   3) report
      *   4) detail or summary
      *
     C                   exsr      $cono
     C                   exsr      $mdy
     C                   exsr      $rpfl
     C                   exsr      $dsfl
      *
      * Validate optional fields:
      *   1) primal group code
      *   2) production line code
      *   3) item code
      *
     C                   exsr      $pgcd
     C                   exsr      $plcd
     C                   exsr      $itcd
      *
      * If there are no errors, execute the subroutine to submit the report.
      *
     C                   if        error = 0 and *in08 = *on                    If no error
     C                   exsr      $proc1
     C                   endif                                                  If no error
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Validate 'From' Date
      *----------------------------------------------------------------
      *
      * Validations:
      *  1) required
      *  2) cannot be negative
      *  3) must be a valid date
      *
      *
     C     $mdy          begsr
      *
     C                   z-add     0             d1wemdy
     C                   z-add     0             d1yr
     C                   z-add     0             d1wk
     C                   z-add     0             xxwedt
      *
     C                   select
     C                   when      d1mdy = 0
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'RO09001'
     C                   endif
      *
     C                   when      d1mdy < 0
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'RO09000'
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 d1mdy                  92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'RO09004'
     C                   endif
     C                   else
      *
      * Flip the date from MMDDYY to CCYYMMDD and go find the 'week-ending date'
      * assocated with this date.
      *
     C     *mdy          move      d1mdy         wkisodate
     C                   move      wkisodate     wkdt
     C                   z-add     wkdt          xxwedt
     C                   exsr      $wedt
     C                   endif                                                  If bad date
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Retrieve Week-ending date
      *----------------------------------------------------------------
      *
     C     $wedt         begsr
      *
     C                   call      'RO811'
     C                   parm      wkdt          xxdt
     C                   parm      0             xxsatdt
     C                   parm      0             xxyr
     C                   parm      0             xxpe
     C                   parm      0             xxwk
      *
      * Get returned 'week-ending date' into MMDDYY format.
      *
     C     *iso          test(d)                 xxsatdt                92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'RO09229'
     C                   endif
     C                   else
      *
     C                   z-add     xxsatdt       ldwedt
     C     *iso          move      xxsatdt       wkmdydt
     C                   move      wkmdydt       wkmdy
     C                   z-add     wkmdy         d1wemdy
     C                   z-add     xxyr          d1yr
     C                   z-add     xxwk          d1wk
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Company
      *---------------------------------------------------------------
      *
     C     $cono         begsr
      *
     C                   select
     C                   when      d1cono = 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'RO09001'
     C                   endif
      *
     C                   when      d1cono < 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'RO09000'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate report
      *---------------------------------------------------------------
      *
     C     $rpfl         begsr
      *
     C                   move      *blank        d1rpds
      *
     C                   select
     C                   when      d1rpfl = 'M'
     C                   eval      d1rpds = 'Meat Cost'
     C                   movea     'MEATCOST'    cmd(36)
      *
     C                   when      d1rpfl = 'H'
     C                   eval      d1rpds = 'Ham Group Yield Breakdown'
     C                   movea     'HAMYIELD'    cmd(36)
     C                   other
      *
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'RO00131'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate detail/summary flag
      *---------------------------------------------------------------
      *
     C     $dsfl         begsr
      *
     C                   move      *blank        d1dsds
      *
     C                   select
      *  Invalid Report
     C                   when      *in36 = *on
      *
      *  Ham Yield Report
     C                   when      d1rpfl = 'H'
      *
      *  Meat Cost Report
     C                   when      d1dsfl = 'S'
     C                   movel(p)  'Summary'     d1dsds
      *
     C                   when      d1dsfl = 'D'
     C                   movel(p)  'Detail'      d1dsds
     C                   other
      *
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'RO09018'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------
      * Validate Primal Group Code
      *-------------------------------------------------------------------
      *
     C     $pgcd         begsr
      *
     C                   move      *blank        d1pgds
      *
     C                   select
     C                   when      d1pgcd = *blank
     C                   other
      *

      * Primal Group msut exist in the Primal Group master
      *
     C     d1pgcd        chain     pdllrel1                           92
     C                   if        *in92 = *off                                 If hit
     C                   move      llojna        d1pgds
     C                   else
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'RO00124'
     C                   movea     d1pgcd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If hit
     C                   endsl
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------
      * Validate Production Line
      *-------------------------------------------------------------------
      * 01/22/07: Need AMB input. There is no "Production Line" master. There is
      *           a Production Line file with unique key of: Company/Dept/Line
      *
     C     $plcd         begsr
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------
      * Validate Item
      *-------------------------------------------------------------------
      *
     C     $itcd         begsr
      *
     C                   move      *blank        d1itds
      *
     C                   select
     C                   when      d1itcd = 0
      *
     C                   when      d1itcd < 0
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'RO09001'
     C                   endif
     C                   other
      *
      * Item must exist in Item Default file
      *
     C     d1itcd        chain     ombyrel1                           92
     C                   if        *in92 = *off                                 If ok
     C                   move(p)   byavna        d1itds
      *
     C                   if        d1pgcd <> *blank and
     C                             *in34 = *off and
     C                             d1pgcd <> byxrcd
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'RO00125'
     C                   clear                   mgw
     C                   move      d1itcd        xxalphitcd
     C                   movea     xxalphitcd    mgw(1)
     C                   movea     d1pgcd        mgw(8)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif
      *
     C                   else
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'RO00107'
     C                   clear                   mgw
     C                   move      d1itcd        xxalphitcd
     C                   movea     xxalphitcd    mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If ok
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * F4 prompt on screen 1
      *----------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
     C                   select
      * Report
     C                   when      fld = 'D1RPFL'
     C                   call      'RO525'
     C                   parm      *blank        xxrpfl
     C                   parm      *blank        xxrpds
     C                   seton                                        56
     C                   if        xxrpfl <> *blank
     C                   move      xxrpfl        d1rpfl
     C                   move      xxrpds        d1rpds
     C                   endif
      * Detail/summary
     C                   when      fld = 'D1DSFL'
     C                   call      'RO507'
     C                   parm      *blank        xxdsfl
     C                   parm      *blank        xxdsds
     C                   seton                                        53
     C                   if        xxdsfl <> *blank
     C                   move      xxdsfl        d1dsfl
     C                   move      xxdsds        d1dsds
     C                   endif
      *
      * Primal group code
      *
     C                   when      fld = 'D1PGCD'
     C                   call      'RO505'
     C                   parm      *blank        xxpgcd
     C                   parm      *blank        xxpgds
     C                   seton                                        54
     C                   if        xxpgcd <> *blank
     C                   move      xxpgcd        d1pgcd
     C                   move      xxpgds        d1pgds
     C                   endif
      *
      * Item
     C                   when      fld = 'D1ITCD'
     C                   call      'RO504'
     C                   parm      0             xxitcd
     C                   parm      *blank        xxitds
     C                   seton                                        55
     C                   if        xxitcd <> 0
     C                   z-add     xxitcd        d1itcd
     C                   movel(p)  xxitds        d1itds
     C                   endif
     C                   other
      *
      * F4 not valid for this field, so issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'RO09011'
     C                   endif
      *
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Process user's request
      *---------------------------------------------------------------
      *
      * This subroutine is only executed if the user submits the listing
      *
     C     $proc1        begsr
      *
      * Move submission values into LDA
      *
     C                   move      'D'           ldpfcd
     C                   z-add     d1cono        ldcono
     C                   z-add     d1wemdy       ldwemdy
     C                   z-add     d1yr          ldyr
     C                   z-add     d1wk          ldwk
      *
     C                   move      d1rpfl        ldrpfl
     C                   move      d1dsfl        lddsfl
     C                   move      d1pgcd        ldpgcd
     C                   eval      ldpgds = d1pgds
     C                   move      d1plcd        ldplcd
     C                   z-add     d1itcd        lditcd
     C                   eval      lditds = d1itds
      *
      * Move the 80-character compile time array 'CMD' to an
      * 80-character field for passing as a parm with QCMDEXC.
      *
     C                   out       lda
      *
     C                   movea     cmd           cmdsbm
     C                   call      'QCMDEXC'
     C                   parm                    cmdsbm
     C                   parm                    length
      *
      * Issue the standard request submission message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'RO09003'
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Seton last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
     C                   parm                    d1cono
     C                   parm                    d1mdy
     C                   parm                    d1itcd
     C                   parm                    d1pgcd
     C                   parm                    d1plcd
      *
      * Key lists
      *    None
      *
      * Default in Meat Cost for the Report
      *
     C                   move      'M'           d1rpfl
      *
      * Retrieve/initialize "printer" fields in the LDA
      *
     C                   call      'RO891CL'
     C                   in        lda
      *
      * Initialize LDA fields
      *
     C                   z-add     0             ldcono
     C                   z-add     0             ldyr
     C                   z-add     0             ldwk
     C                   z-add     0             ldwedt
     C                   z-add     0             ldwemdy
     C                   z-add     0             lditcd
     C                   out       lda
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
      *****************************************************************
      * COMPILE TIME ARRAY 'CMD' USED IN QCMDEXC
      *****************************************************************
** CMD table 'CMD' submits listing when F8 selected
SBMJOB CMD(CALL PGM(RO413CL))  JOB(MEATCOST) JOBQ(*JOBD)
