// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMN6DFR
// ?Date: 14.08.2025 Time: 03:43:34
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('SHP');
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.Allow_Multi_Company);
PARAMETER(LCL.Default_Printer);
PARAMETER(LCL.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

//?S14912 DN 06/04/19-Check if User Profile is Allowed for Company Input.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
PARAMETER(JOB.*USER);
PARAMETER(LCL.User_Code_Model);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.User Code Model is equal to blank
IF LCL.User_Code_Model = *BLANK;

// LCL.User Profile Name = JOB.*USER
LCL.User_Profile_Name = JOB.*USER;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.User Profile Name = LCL.User Code Model
LCL.User_Profile_Name = LCL.User_Code_Model;

ENDIF;

EXECUTE FUNCTION(RTV for Existence     RT) TYPE(RTVOBJ) FILE(CADTREP)           AC2171404;
PARAMETER(LCL.User_Profile_Name);
PARAMETER('HPBMLT');

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// LCL.USR Input 1 = CND.Yes
LCL.USR_Input_1 = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.USR Input 1 = CND.No
LCL.USR_Input_1 = 'N';

ENDIF;

ENDIF;

//?USER: Initialize subfile control

//?First time - set Company
CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

//?R6965 rmc 8.17.16 get prod plant company number
EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
PARAMETER(LCL.Company_Number);
PARAMETER('HPBPLT');
PARAMETER(CTL.Company_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.Record Status = CND.Active
CTL.Record_Status = 'A';

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

//?S14912 DN 06/04/19-Save Original Company.
// PAR.Company Number = CTL.Company Number
PAR.Company_Number = CTL.Company_Number;

ENDIF;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(CTL.Company_Name_DRV);
PARAMETER(CTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(RTV ULSD Company      RT) TYPE(RTVOBJ) FILE(PMCAREP)           AC1961872;
PARAMETER(CTL.Company_Number);
PARAMETER(LCL.COA_Bio_diesel_Fuel_Code);
PARAMETER(CTL.COA_ULSD_Company_#);
PARAMETER(10999);
{
 //?USER: Process Data record

 // PAR.COA ULSD Company # = DB1.COA ULSD Company #
 PAR.COA_ULSD_Company_# = DB1.COA_ULSD_Company_#;

 QUIT;

}


//?S14912 DN 06/04/19-Validate Company if Input Capable Allowed.
CASE;

// IF LCL.USR Input 1 is Yes
IF LCL.USR_Input_1 = 'Y';

//?W104274 DN 07/20/22-Added Co 375 Validation.
//?**Hard Coding - Valid Companies are 361, 373 & 375.
CASE;

// IF CTL.Company Number is High Plains
IF CTL.Company_Number = 361;

// OR CTL.Company Number is St Joseph Biodiesel
OR CTL.Company_Number = 373;

// OR CTL.Company Number is Seaboard Energy Kansas
OR CTL.Company_Number = 375;

//?**Hard Coding - Valid Companies are 361, 373 & 375.
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Company Number = CTL.Company Number
PAR.Company_Number = CTL.Company_Number;

// LCL.Generic Message 80 USR = CONCAT(CON.Valid Companies are 361,,CON.373 and 375.,CON.1)
LCL.Generic_Message_80_USR = 'Valid Companies are 361,' + '373 and 375.' (1);

// Send error message - '&1'
ERROR(USR4977);
MSGPARM(LCL.Generic_Message_80_USR);

QUIT;

ENDIF;

ENDIF;

//?USER: Initialize subfile record from DBF record

CASE;

// IF RCD.Company Number NE CTL.Company Number
IF RCD.Company_Number <> CTL.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// RCD.Initials - USR = DB1.COA Open for Ship Inits
RCD.Initials_USR = DB1.COA_Open_for_Ship_Inits;

// RCD.Initials = DB1.COA Close from Ship Inits
RCD.Initials = DB1.COA_Close_from_Ship_Inits;

// RCD.Output Only 1 USR = CND.no
RCD.Output_Only_1_USR = 'N';

// RCD.Output Only 2 USR = CND.no
RCD.Output_Only_2_USR = 'N';

CASE;

// IF RCD.COA Batch Header Sts is Entered
IF RCD.COA_Batch_Header_Sts = 'E';

// RCD.Output Only 2 USR = CND.yes
RCD.Output_Only_2_USR = 'Y';

// IF RCD.COA Batch Header Sts is Open for shipping
IF RCD.COA_Batch_Header_Sts = 'O';

// RCD.Output Only 1 USR = CND.yes
RCD.Output_Only_1_USR = 'Y';

// IF RCD.COA Batch Header Sts is Closed from shipping
IF RCD.COA_Batch_Header_Sts = 'C';

// RCD.Output Only 1 USR = CND.yes
RCD.Output_Only_1_USR = 'Y';

// RCD.Output Only 2 USR = CND.yes
RCD.Output_Only_2_USR = 'Y';

ENDIF;

//?USER: Process subfile control (Pre-confirm)

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?S14912 DN 06/04/19-Validate Company if Input Capable Allowed.
CASE;

// IF LCL.USR Input 1 is Yes
IF LCL.USR_Input_1 = 'Y';

//?W104274 DN 07/20/22-Added Co 375 Validation.
//?**Hard Coding - Valid Companies are 361, 373 & 375.
CASE;

// IF CTL.Company Number is High Plains
IF CTL.Company_Number = 361;

// OR CTL.Company Number is St Joseph Biodiesel
OR CTL.Company_Number = 373;

// OR CTL.Company Number is Seaboard Energy Kansas
OR CTL.Company_Number = 375;

//?Reload if Company Number Changed.
CASE;

// IF PAR.Company Number NE CTL.Company Number
IF PAR.Company_Number <> CTL.Company_Number;

// PAR.Company Number = CTL.Company Number
PAR.Company_Number = CTL.Company_Number;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?**Hard Coding - Valid Companies are 361, 373 & 375.
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Company Number = CTL.Company Number
PAR.Company_Number = CTL.Company_Number;

// LCL.Generic Message 80 USR = CONCAT(CON.Valid Companies are 361,,CON.373 and 375.,CON.1)
LCL.Generic_Message_80_USR = 'Valid Companies are 361,' + '373 and 375.' (1);

// Send error message - '&1'
ERROR(USR4977);
MSGPARM(LCL.Generic_Message_80_USR);

QUIT;

ENDIF;

ENDIF;

//?F6 = Create - Call COA Batch Header edit record
CASE;

// IF CTL.*CMD key is *Create
IF CTL.*CMD_key = '06';

// LCL.COA Batch Number = CON.*ZERO
LCL.COA_Batch_Number = *ZERO;

// Call program Pmt Crt New Batch Whse PV.
CALL PROGRAM(Pmt Crt New Batch Whse PV) ('PMQKPVR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.COA_ULSD_Company_#);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?Option 2 - Edit the COA Batch Header record
CASE;

// IF RCD.*SFLSEL is Option 2
IF RCD.*SFLSEL = '2'/'2';

// Call program EDT COA Batch Header   E1.
CALL PROGRAM(EDT COA Batch Header   E1) ('PMN7E1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.COA_ULSD_Company_#);
PARAMETER(RCD.COA_Batch_Number);
PARAMETER(RCD.COA_Active_Whse_Tank);
PARAMETER(RCD.COA_Bio_diesel_Fuel_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Option 3 - Edit COA Batch Detail
CASE;

// IF RCD.*SFLSEL is Option 3
IF RCD.*SFLSEL = '3'/'3';

// Call program EDT COA Bat Det 1 line EF.
CALL PROGRAM(EDT COA Bat Det 1 line EF) ('PMOOEFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.COA_ULSD_Company_#);
PARAMETER(RCD.COA_Batch_Number);
PARAMETER(RCD.COA_Batch_Header_Sts);
PARAMETER(RCD.COA_Bio_diesel_Fuel_Code);
PARAMETER(RCD.COA_Active_Whse_Tank);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Option 4 - Purge
CASE;

// IF RCD.*SFLSEL is *Delete#1
IF RCD.*SFLSEL = '4';

EXECUTE FUNCTION(RTV Check Ord for Batch) TYPE(RTVOBJ) FILE(PMAMREP)            AC1851232;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.COA_Batch_Number);
PARAMETER(LCL.USR_Orders_on_Load);
PARAMETER(LCL.USR_Ship_Y_N);
{
 //?USER: Initialize routine

 // PAR.USR Orders on Load = CND.no
 PAR.USR_Orders_on_Load = 'N';

 // PAR.USR Ship Y/N = CND.no
 PAR.USR_Ship_Y_N = 'N';

 //?USER: Process Data record

 // PAR.USR Orders on Load = CND.yes
 PAR.USR_Orders_on_Load = 'Y';

 CASE;

 // IF DB1.OHE Ship Status is Shipped
 IF DB1.OHE_Ship_Status = 'S';

 // PAR.USR Ship Y/N = CND.yes
 PAR.USR_Ship_Y_N = 'Y';

 ENDIF;

}


CASE;

// IF LCL.USR Orders on Load is yes
IF LCL.USR_Orders_on_Load = 'Y';

// Send error message - 'Cannot Delete - Orders exist on the batch.'
ERROR(USR3838);
MSGPARM(PGM.*Record_selected);

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

ENDIF;

//?Option 5 - Display/Edit RINs per Batch
CASE;

// IF RCD.*SFLSEL is Option 5
IF RCD.*SFLSEL = '5'/'5';

// Call program Dsp RINS per Batch    DF.
CALL PROGRAM(Dsp RINS per Batch    DF) ('PMQLDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.COA_ULSD_Company_#);
PARAMETER(RCD.COA_Batch_Number);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Option 6 - Print COA
CASE;

// IF RCD.*SFLSEL is Option 6
IF RCD.*SFLSEL = '6'/'6';

//?Allow print only if all property values populated
CASE;

// IF RCD.COA Batch Properties Cmpl is No
IF RCD.COA_Batch_Properties_Cmpl = 'N';

// AND NOT RCD.COA Bio-diesel Fuel Code is R99.9
AND ! RCD.COA_Bio_diesel_Fuel_Code = 'R99.9';

// AND NOT RCD.COA Bio-diesel Fuel Code is Naphtha
AND ! RCD.COA_Bio_diesel_Fuel_Code = 'NAP';

//?W104274 DN 08/09/22-Do NOT error if Bio-Diesel Fuel Code is
//?'R99.9' or 'NAP' since these Tests will not be done.
// Send error message - 'COA batch may not be printed unless all property values are populated.'
ERROR(USR3826);
MSGPARM(RCD.*SFLSEL);

//?Allow print only if all property values populated
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.PRT Night Queue Run Sts = CND.no
LCL.PRT_Night_Queue_Run_Sts = 'N';

// Call program PMT Print Option  SHR  PV.
CALL PROGRAM(PMT Print Option  SHR  PV) ('PDG0PVR');
PARAMETER('Certificate of Analysis');
PARAMETER(LCL.PRT_Printer_Device);
PARAMETER(LCL.PRT_Hold_Output_Sts);
PARAMETER(LCL.PRT_Save_Output_Sts);
PARAMETER(LCL.PRT_Number_of_Copies);
PARAMETER(LCL.PRT_Night_Queue_Run_Sts);
PARAMETER(LCL.PRT_Night_Queue);
PARAMETER(LCL.Application_Code);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// Call program PRT COA Batch Detail   XF.
SBMJOB;
CALL PROGRAM(PRT COA Batch Detail   XF) ('PMOXXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.COA_ULSD_Company_#);
PARAMETER(RCD.COA_Batch_Number);
PARAMETER(LCL.PRT_Printer_Device);
PARAMETER(LCL.PRT_Hold_Output_Sts);
PARAMETER(LCL.PRT_Save_Output_Sts);
PARAMETER(LCL.PRT_Number_of_Copies);
SBMJOBOVR JOB(PRTCOA);
SBMJOBEND;

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

ENDIF;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Option 8 - Open for Shipping
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

//?Invalid for inactive batch
CASE;

// IF RCD.Record Status is Inactive
IF RCD.Record_Status = 'I';

// Send error message - 'Invalid option for inactive batch.'
ERROR(USR3841);
MSGPARM(RCD.*SFLSEL);

ENDIF;

//?Validate
CASE;

// IF RCD.COA Batch Header Sts is Entered
IF RCD.COA_Batch_Header_Sts = 'E';

CASE;

// IF RCD.COA Batch Properties Cmpl is No
IF RCD.COA_Batch_Properties_Cmpl = 'N';

// Send error message - 'All property values must be entered before the batch can be opened.'
ERROR(USR3831);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.RFS Feedstock Code 1 is Not entered
IF RCD.RFS_Feedstock_Code_1 = *BLANK;

// Send error message - 'Feedstock not entered. Use option 10 to enter.'
ERROR(USR4342);
MSGPARM(RCD.COA_Batch_Number);

// IF *OTHERWISE
IF *OTHERWISE;

//?Initials must be entered
CASE;

// IF RCD.Initials - USR is Entered
IF RCD.Initials_USR <> *BLANK;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

//?Initials must be entered
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Initials required when opening a batch.'
ERROR(USR3830);
MSGPARM(RCD.Initials_USR);

ENDIF;

ENDIF;

ENDIF;

//?Validate
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.COA Batch Header Sts is Open for shipping
IF RCD.COA_Batch_Header_Sts = 'O';

// Send error message - 'COA Batch Header already Open.'
ERROR(USR3839);
MSGPARM(RCD.*SFLSEL);

// IF RCD.COA Batch Header Sts is Closed from shipping
IF RCD.COA_Batch_Header_Sts = 'C';

//?Is there a batch already open from this whse? if yes, cant reopen
EXECUTE FUNCTION(RTV Check for Warehse  RT) TYPE(RTVOBJ) FILE(PMCCCPP)          AC1853275;
PARAMETER(RCD.Company_Number);
PARAMETER(LCL.COA_Batch_Number);
PARAMETER(RCD.COA_Active_Whse_Tank);
PARAMETER('E');
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 //?There should only ever be one record found, but quit just in case
 QUIT;

}


CASE;

// IF LCL.COA Batch Number is Greater than zero
IF LCL.COA_Batch_Number > *ZERO;

// Send error message - 'COA Batch &2 is open for the tank. Invalid option.'
ERROR(USR3840);
MSGPARM(RCD.*SFLSEL);
MSGPARM(LCL.COA_Batch_Number);

ENDIF;

EXECUTE FUNCTION(RTV Check for Warehse  RT) TYPE(RTVOBJ) FILE(PMCCCPP)          AC1853275;
PARAMETER(RCD.Company_Number);
PARAMETER(LCL.COA_Batch_Number);
PARAMETER(RCD.COA_Active_Whse_Tank);
PARAMETER('O');
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 //?There should only ever be one record found, but quit just in case
 QUIT;

}


CASE;

// IF LCL.COA Batch Number is Greater than zero
IF LCL.COA_Batch_Number > *ZERO;

// Send error message - 'COA Batch &2 is open for the tank. Invalid option.'
ERROR(USR3840);
MSGPARM(RCD.*SFLSEL);
MSGPARM(LCL.COA_Batch_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Option 9 - Close from Shipping
CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

CASE;

// IF RCD.COA Batch Header Sts is Open for shipping
IF RCD.COA_Batch_Header_Sts = 'O';

CASE;

// IF RCD.Initials is Entered
IF RCD.Initials <> *BLANK;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Initials required when closing a batch.'
ERROR(USR3825);
MSGPARM(RCD.Initials);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse must be Open for Shipping in order for it to be Closed.'
ERROR(USR3824);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?Option 10 - Edit Feedstock
CASE;

// IF RCD.*SFLSEL is Option 10
IF RCD.*SFLSEL = '10';

// Call program Edt Batch Feedstock   ER.
CALL PROGRAM(Edt Batch Feedstock   ER) ('PNSIE1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.COA_ULSD_Company_#);
PARAMETER(RCD.COA_Batch_Number);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Option 20 -  Email/Fax COA
CASE;

// IF RCD.*SFLSEL is Option 20
IF RCD.*SFLSEL = '20';

// Call program PMT Cust to Eml/Fax   PV.
CALL PROGRAM(PMT Cust to Eml/Fax   PV) ('PMSOPVR');
PARAMETER(RCD.Company_Number);
PARAMETER(LCL.Email_Address);
PARAMETER(LCL.Fax_Number);
PARAMETER(LCL.Company_Recipient_Name);
PARAMETER(**      COA       **);
PARAMETER(LCL.FAX_DTL_Status_1);

//?Email or Fax it
CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

//?Email or Fax it
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Order Number 1  PASS  USR = RCD.COA Batch Number
LCL.Order_Number_1_PASS_USR = RCD.COA_Batch_Number;

// LCL.Company Number Pass   USR = RCD.Company Number
LCL.Company_Number_Pass_USR = RCD.Company_Number;

CASE;

// IF LCL.Email Address is Entered
IF LCL.Email_Address <> *BLANK;

//?submit job to email COA
//?W104274 DN 08/19/22-Passed in COA Bio-diesel Fuel Code.
// Call program CLP ESNDMAIL COA-Eml  UP.
SBMJOB;
CALL PROGRAM(CLP ESNDMAIL COA-Eml  UP) ('PMT7UPC');
PARAMETER(*BLANK);
PARAMETER(LCL.Email_Address);
PARAMETER('COA');
PARAMETER('COA');
PARAMETER(LCL.Company_Number_Pass_USR);
PARAMETER(LCL.Order_Number_1_PASS_USR);
PARAMETER(LCL.FAX_DTL_Status_1);
PARAMETER(RCD.COA_ULSD_Company_#);
PARAMETER(RCD.COA_Bio_diesel_Fuel_Code);
SBMJOBOVR JOB(COAEMAIL);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

// IF LCL.Fax Number is Entered
IF LCL.Fax_Number <> *BLANK;

//?get fax cover sheet pgm - use bols
// LCL.CDD Type = CND.Fax
LCL.CDD_Type = 'FX';

// LCL.CDD Department Code = CND.Traffic
LCL.CDD_Department_Code = 'TRAFF';

// Call program RTV CDD for Overlays   XF.
CALL PROGRAM(RTV CDD for Overlays   XF) ('PMG9XFR');
PARAMETER(RCD.Company_Number);
PARAMETER(LCL.CDD_Type);
PARAMETER(LCL.CDD_Department_Code);
PARAMETER(LCL.CDD_Name_of_Overlay);
PARAMETER(LCL.CDD_Program_Name);
PARAMETER(LCL.CDD_Printer_File_Name);
PARAMETER(LCL.CDD_Additional_Object);
PARAMETER(LCL.CDD_Sender_Phone);
PARAMETER(LCL.CDD_Sender_Fax);
PARAMETER(LCL.Output_Queue);
PARAMETER(LCL.Hold_File);
PARAMETER(LCL.Save_File);
PARAMETER(LCL.Source_Drawer);
PARAMETER(LCL.Printer_Device_Type);
PARAMETER(LCL.Page_Length_2);
PARAMETER(LCL.Page_Width_2);
PARAMETER(LCL.Page_LPI);
PARAMETER(LCL.Page_CPI);
PARAMETER(LCL.Page_Overflow);
PARAMETER(LCL.Page_Rotation);
PARAMETER(LCL.CDD_Comment_1);
PARAMETER(LCL.CDD_Comment_2);
PARAMETER(LCL.CDD_Comment_3);
PARAMETER(LCL.CDD_Comment_4);
PARAMETER(LCL.CDD_Comment_5);
PARAMETER(LCL.Record_Status);

//?submit job to fax coa
// Call program CLP ESNDMAIL COA-Fax  UP.
SBMJOB;
CALL PROGRAM(CLP ESNDMAIL COA-Fax  UP) ('PMT8UPC');
PARAMETER(*BLANK);
PARAMETER(LCL.Fax_Number);
PARAMETER('COA');
PARAMETER(LCL.CDD_Name_of_Overlay);
PARAMETER(LCL.Company_Recipient_Name);
PARAMETER(*BLANK);
PARAMETER(LCL.Company_Number_Pass_USR);
PARAMETER(LCL.Order_Number_1_PASS_USR);
PARAMETER(LCL.FAX_DTL_Status_1);
PARAMETER(RCD.COA_ULSD_Company_#);
SBMJOBOVR JOB(COAEMAIL);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

ENDIF;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Post-confirm)

//?Option 4 - Purge
CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

EXECUTE FUNCTION(CHG Change Record      CH) TYPE(CHGOBJ) FILE(PMCCCPP)          AC1851634;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.COA_ULSD_Company_#);
PARAMETER(RCD.COA_Batch_Number);
PARAMETER(RCD.COA_Active_Whse_Tank);
PARAMETER(RCD.COA_Bio_diesel_Fuel_Code);
PARAMETER(RCD.COA_Date_Open_for_Ship);
PARAMETER(RCD.COA_Time_Open_for_Ship);
PARAMETER(RCD.COA_Open_for_Ship_Inits);
PARAMETER(RCD.COA_Date_Close_from_Ship);
PARAMETER(RCD.COA_Time_Close_from_Ship);
PARAMETER(RCD.COA_Close_from_Ship_Inits);
PARAMETER(RCD.COA_Gallons_Used);
PARAMETER(RCD.COA_Comment);
PARAMETER(RCD.COA_Batch_Production_Date);
PARAMETER(RCD.COA_Batch_Unused_Time);
PARAMETER(RCD.COA_Specification);
PARAMETER(RCD.COA_RFS_Program_ID);
PARAMETER('X');
PARAMETER(RCD.COA_Batch_Properties_Cmpl);
PARAMETER(RCD.COA_Batch_Int_Ext_Company);
PARAMETER(RCD.COA_Temperature_Loadout);
PARAMETER(RCD.COA_Batch_Volume);
PARAMETER(RCD.COA_Batch_Denaturant_Vol);
PARAMETER(RCD.COA_RFS_Renew_Fuel_Code);
PARAMETER(RCD.COA_RFS_Rnwbl_Feedstock);
PARAMETER(RCD.COA_Batch_RIN);
PARAMETER(RCD.COA_Batch_Export_Volume);
PARAMETER(RCD.COA_Last_RIN_EEEEEEEE);
PARAMETER(RCD.COA_Density_Loadout);
PARAMETER(RCD.COA_Density_Reference);
PARAMETER(RCD.COA_RIN_Equivalence_Valu#);
PARAMETER(RCD.COA_Batch_Unused_Date);
PARAMETER(RCD.RFS_Fuel_Code);
PARAMETER(RCD.RFS_Process_Code);
PARAMETER(RCD.RFS_Fuel_Category_Code);
PARAMETER(RCD.COA_RIN_Equivalence_Valu);
PARAMETER(RCD.COA_RIN_Quantity);
PARAMETER(RCD.COA_ULSD_Facility_#);
PARAMETER(RCD.COA_Co_Product_Code);
PARAMETER(RCD.COA_Co_Product_Comment);
PARAMETER(RCD.COA_Transaction_Comment);
PARAMETER(RCD.COA_BH_RFS_Version_Nbr);
PARAMETER(RCD.COA_BH_EMTS_Sts);
PARAMETER(RCD.COA_BH_EMTS_Date_Sent);
PARAMETER(RCD.COA_BH_EMTS_Time_Sent);
PARAMETER(RCD.COA_Reviewed_By);
PARAMETER(RCD.COA_BH_Equiv_Value_f_SEP);
PARAMETER(RCD.COA_BH_Yield_Percent);
PARAMETER(RCD.COA_BH_Unused_Cde);
PARAMETER(RCD.COA_Sample_Date);
PARAMETER(RCD.COA_Sample_Time);
PARAMETER(RCD.COA_LIMS_ID);
PARAMETER(RCD.RFS_Feedstock_Code_1);
PARAMETER(RCD.COA_BH_Feedstck_Volume_1);
PARAMETER(RCD.COA_BH_Feedstck_Measure_1);
PARAMETER(RCD.COA_BH_Feedstck_Biomass_1);
PARAMETER(RCD.COA_BH_Feedstck_Pct_Ord_1);
PARAMETER(RCD.COA_BH_Feedstck_comment_1);
PARAMETER(RCD.RFS_Feedstock_Code_2);
PARAMETER(RCD.COA_BH_Feedstck_Volume_2);
PARAMETER(RCD.COA_BH_Feedstck_Measure_2);
PARAMETER(RCD.COA_BH_Feedstck_Biomass_2);
PARAMETER(RCD.COA_BH_Feedstck_Pct_Ord_2);
PARAMETER(RCD.COA_BH_Feedstck_Comment_2);
PARAMETER(RCD.RFS_Feedstock_Code_3);
PARAMETER(RCD.COA_BH_Feedstck_Volume_3);
PARAMETER(RCD.COA_BH_Feedstck_Measure_3);
PARAMETER(RCD.COA_BH_Feedstck_Biomass_3);
PARAMETER(RCD.cOA_BH_Feedstck_Pct_Ord_3);
PARAMETER(RCD.COA_BH_Feedstck_Comment_3);
PARAMETER('I');
PARAMETER(RCD.Create_Date);
PARAMETER(RCD.Create_Time);
PARAMETER(RCD.Create_User);
PARAMETER(RCD.Create_Program);
PARAMETER(RCD.Change_Date);
PARAMETER(RCD.Change_Time);
PARAMETER(RCD.Change_User);
PARAMETER(RCD.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Option 8 - Open for Shipping
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

// RCD.COA Open for Ship Inits = RCD.Initials - USR
RCD.COA_Open_for_Ship_Inits = RCD.Initials_USR;

EXECUTE FUNCTION(RTV for Upd to Clo/Opn RT) TYPE(RTVOBJ) FILE(PMCCCPP)          AC1851631;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.COA_ULSD_Company_#);
PARAMETER(RCD.COA_Batch_Number);
PARAMETER(RCD.COA_Open_for_Ship_Inits);
PARAMETER(*BLANK);
PARAMETER('O');
{
 //?USER: Process Data record

 CASE;

 // IF PAR.COA Batch Header Sts is Open for shipping
 IF PAR.COA_Batch_Header_Sts = 'O';

 EXECUTE FUNCTION(CHG Change Record      CH) TYPE(CHGOBJ) FILE(PMCCCPP)          AC1851634;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.COA_ULSD_Company_#);
 PARAMETER(DB1.COA_Batch_Number);
 PARAMETER(DB1.COA_Active_Whse_Tank);
 PARAMETER(DB1.COA_Bio_diesel_Fuel_Code);
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 PARAMETER(PAR.COA_Open_for_Ship_Inits);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(DB1.COA_Gallons_Used);
 PARAMETER(DB1.COA_Comment);
 PARAMETER(DB1.COA_Batch_Production_Date);
 PARAMETER(DB1.COA_Batch_Unused_Time);
 PARAMETER(DB1.COA_Specification);
 PARAMETER(DB1.COA_RFS_Program_ID);
 PARAMETER(PAR.COA_Batch_Header_Sts);
 PARAMETER(DB1.COA_Batch_Properties_Cmpl);
 PARAMETER(DB1.COA_Batch_Int_Ext_Company);
 PARAMETER(DB1.COA_Temperature_Loadout);
 PARAMETER(DB1.COA_Batch_Volume);
 PARAMETER(DB1.COA_Batch_Denaturant_Vol);
 PARAMETER(DB1.COA_RFS_Renew_Fuel_Code);
 PARAMETER(DB1.COA_RFS_Rnwbl_Feedstock);
 PARAMETER(DB1.COA_Batch_RIN);
 PARAMETER(DB1.COA_Batch_Export_Volume);
 PARAMETER(DB1.COA_Last_RIN_EEEEEEEE);
 PARAMETER(DB1.COA_Density_Loadout);
 PARAMETER(DB1.COA_Density_Reference);
 PARAMETER(DB1.COA_RIN_Equivalence_Valu#);
 PARAMETER(DB1.COA_Batch_Unused_Date);
 PARAMETER(DB1.RFS_Fuel_Code);
 PARAMETER(DB1.RFS_Process_Code);
 PARAMETER(DB1.RFS_Fuel_Category_Code);
 PARAMETER(DB1.COA_RIN_Equivalence_Valu);
 PARAMETER(DB1.COA_RIN_Quantity);
 PARAMETER(DB1.COA_ULSD_Facility_#);
 PARAMETER(DB1.COA_Co_Product_Code);
 PARAMETER(DB1.COA_Co_Product_Comment);
 PARAMETER(DB1.COA_Transaction_Comment);
 PARAMETER(DB1.COA_BH_RFS_Version_Nbr);
 PARAMETER(DB1.COA_BH_EMTS_Sts);
 PARAMETER(DB1.COA_BH_EMTS_Date_Sent);
 PARAMETER(DB1.COA_BH_EMTS_Time_Sent);
 PARAMETER(DB1.COA_Reviewed_By);
 PARAMETER(DB1.COA_BH_Equiv_Value_f_SEP);
 PARAMETER(DB1.COA_BH_Yield_Percent);
 PARAMETER(DB1.COA_BH_Unused_Cde);
 PARAMETER(DB1.COA_Sample_Date);
 PARAMETER(DB1.COA_Sample_Time);
 PARAMETER(DB1.COA_LIMS_ID);
 PARAMETER(DB1.RFS_Feedstock_Code_1);
 PARAMETER(DB1.COA_BH_Feedstck_Volume_1);
 PARAMETER(DB1.COA_BH_Feedstck_Measure_1);
 PARAMETER(DB1.COA_BH_Feedstck_Biomass_1);
 PARAMETER(DB1.COA_BH_Feedstck_Pct_Ord_1);
 PARAMETER(DB1.COA_BH_Feedstck_comment_1);
 PARAMETER(DB1.RFS_Feedstock_Code_2);
 PARAMETER(DB1.COA_BH_Feedstck_Volume_2);
 PARAMETER(DB1.COA_BH_Feedstck_Measure_2);
 PARAMETER(DB1.COA_BH_Feedstck_Biomass_2);
 PARAMETER(DB1.COA_BH_Feedstck_Pct_Ord_2);
 PARAMETER(DB1.COA_BH_Feedstck_Comment_2);
 PARAMETER(DB1.RFS_Feedstock_Code_3);
 PARAMETER(DB1.COA_BH_Feedstck_Volume_3);
 PARAMETER(DB1.COA_BH_Feedstck_Measure_3);
 PARAMETER(DB1.COA_BH_Feedstck_Biomass_3);
 PARAMETER(DB1.cOA_BH_Feedstck_Pct_Ord_3);
 PARAMETER(DB1.COA_BH_Feedstck_Comment_3);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

 // IF PAR.COA Batch Header Sts is Closed from shipping
 IF PAR.COA_Batch_Header_Sts = 'C';

 EXECUTE FUNCTION(CHG Change Record      CH) TYPE(CHGOBJ) FILE(PMCCCPP)          AC1851634;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.COA_ULSD_Company_#);
 PARAMETER(DB1.COA_Batch_Number);
 PARAMETER(DB1.COA_Active_Whse_Tank);
 PARAMETER(DB1.COA_Bio_diesel_Fuel_Code);
 PARAMETER(DB1.COA_Date_Open_for_Ship);
 PARAMETER(DB1.COA_Time_Open_for_Ship);
 PARAMETER(DB1.COA_Open_for_Ship_Inits);
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 PARAMETER(PAR.COA_Close_from_Ship_Inits);
 PARAMETER(DB1.COA_Gallons_Used);
 PARAMETER(DB1.COA_Comment);
 PARAMETER(DB1.COA_Batch_Production_Date);
 PARAMETER(DB1.COA_Batch_Unused_Time);
 PARAMETER(DB1.COA_Specification);
 PARAMETER(DB1.COA_RFS_Program_ID);
 PARAMETER(PAR.COA_Batch_Header_Sts);
 PARAMETER(DB1.COA_Batch_Properties_Cmpl);
 PARAMETER(DB1.COA_Batch_Int_Ext_Company);
 PARAMETER(DB1.COA_Temperature_Loadout);
 PARAMETER(DB1.COA_Batch_Volume);
 PARAMETER(DB1.COA_Batch_Denaturant_Vol);
 PARAMETER(DB1.COA_RFS_Renew_Fuel_Code);
 PARAMETER(DB1.COA_RFS_Rnwbl_Feedstock);
 PARAMETER(DB1.COA_Batch_RIN);
 PARAMETER(DB1.COA_Batch_Export_Volume);
 PARAMETER(DB1.COA_Last_RIN_EEEEEEEE);
 PARAMETER(DB1.COA_Density_Loadout);
 PARAMETER(DB1.COA_Density_Reference);
 PARAMETER(DB1.COA_RIN_Equivalence_Valu#);
 PARAMETER(DB1.COA_Batch_Unused_Date);
 PARAMETER(DB1.RFS_Fuel_Code);
 PARAMETER(DB1.RFS_Process_Code);
 PARAMETER(DB1.RFS_Fuel_Category_Code);
 PARAMETER(DB1.COA_RIN_Equivalence_Valu);
 PARAMETER(DB1.COA_RIN_Quantity);
 PARAMETER(DB1.COA_ULSD_Facility_#);
 PARAMETER(DB1.COA_Co_Product_Code);
 PARAMETER(DB1.COA_Co_Product_Comment);
 PARAMETER(DB1.COA_Transaction_Comment);
 PARAMETER(DB1.COA_BH_RFS_Version_Nbr);
 PARAMETER(DB1.COA_BH_EMTS_Sts);
 PARAMETER(DB1.COA_BH_EMTS_Date_Sent);
 PARAMETER(DB1.COA_BH_EMTS_Time_Sent);
 PARAMETER(DB1.COA_Reviewed_By);
 PARAMETER(DB1.COA_BH_Equiv_Value_f_SEP);
 PARAMETER(DB1.COA_BH_Yield_Percent);
 PARAMETER(DB1.COA_BH_Unused_Cde);
 PARAMETER(DB1.COA_Sample_Date);
 PARAMETER(DB1.COA_Sample_Time);
 PARAMETER(DB1.COA_LIMS_ID);
 PARAMETER(DB1.RFS_Feedstock_Code_1);
 PARAMETER(DB1.COA_BH_Feedstck_Volume_1);
 PARAMETER(DB1.COA_BH_Feedstck_Measure_1);
 PARAMETER(DB1.COA_BH_Feedstck_Biomass_1);
 PARAMETER(DB1.COA_BH_Feedstck_Pct_Ord_1);
 PARAMETER(DB1.COA_BH_Feedstck_comment_1);
 PARAMETER(DB1.RFS_Feedstock_Code_2);
 PARAMETER(DB1.COA_BH_Feedstck_Volume_2);
 PARAMETER(DB1.COA_BH_Feedstck_Measure_2);
 PARAMETER(DB1.COA_BH_Feedstck_Biomass_2);
 PARAMETER(DB1.COA_BH_Feedstck_Pct_Ord_2);
 PARAMETER(DB1.COA_BH_Feedstck_Comment_2);
 PARAMETER(DB1.RFS_Feedstock_Code_3);
 PARAMETER(DB1.COA_BH_Feedstck_Volume_3);
 PARAMETER(DB1.COA_BH_Feedstck_Measure_3);
 PARAMETER(DB1.COA_BH_Feedstck_Biomass_3);
 PARAMETER(DB1.cOA_BH_Feedstck_Pct_Ord_3);
 PARAMETER(DB1.COA_BH_Feedstck_Comment_3);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Option 9 - Close from Shipping
CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

// RCD.COA Close from Ship Inits = RCD.Initials
RCD.COA_Close_from_Ship_Inits = RCD.Initials;

EXECUTE FUNCTION(RTV for Upd to Clo/Opn RT) TYPE(RTVOBJ) FILE(PMCCCPP)          AC1851631;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.COA_ULSD_Company_#);
PARAMETER(RCD.COA_Batch_Number);
PARAMETER(*BLANK);
PARAMETER(RCD.COA_Close_from_Ship_Inits);
PARAMETER('C');
{
 //?USER: Process Data record

 CASE;

 // IF PAR.COA Batch Header Sts is Open for shipping
 IF PAR.COA_Batch_Header_Sts = 'O';

 EXECUTE FUNCTION(CHG Change Record      CH) TYPE(CHGOBJ) FILE(PMCCCPP)          AC1851634;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.COA_ULSD_Company_#);
 PARAMETER(DB1.COA_Batch_Number);
 PARAMETER(DB1.COA_Active_Whse_Tank);
 PARAMETER(DB1.COA_Bio_diesel_Fuel_Code);
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 PARAMETER(PAR.COA_Open_for_Ship_Inits);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(DB1.COA_Gallons_Used);
 PARAMETER(DB1.COA_Comment);
 PARAMETER(DB1.COA_Batch_Production_Date);
 PARAMETER(DB1.COA_Batch_Unused_Time);
 PARAMETER(DB1.COA_Specification);
 PARAMETER(DB1.COA_RFS_Program_ID);
 PARAMETER(PAR.COA_Batch_Header_Sts);
 PARAMETER(DB1.COA_Batch_Properties_Cmpl);
 PARAMETER(DB1.COA_Batch_Int_Ext_Company);
 PARAMETER(DB1.COA_Temperature_Loadout);
 PARAMETER(DB1.COA_Batch_Volume);
 PARAMETER(DB1.COA_Batch_Denaturant_Vol);
 PARAMETER(DB1.COA_RFS_Renew_Fuel_Code);
 PARAMETER(DB1.COA_RFS_Rnwbl_Feedstock);
 PARAMETER(DB1.COA_Batch_RIN);
 PARAMETER(DB1.COA_Batch_Export_Volume);
 PARAMETER(DB1.COA_Last_RIN_EEEEEEEE);
 PARAMETER(DB1.COA_Density_Loadout);
 PARAMETER(DB1.COA_Density_Reference);
 PARAMETER(DB1.COA_RIN_Equivalence_Valu#);
 PARAMETER(DB1.COA_Batch_Unused_Date);
 PARAMETER(DB1.RFS_Fuel_Code);
 PARAMETER(DB1.RFS_Process_Code);
 PARAMETER(DB1.RFS_Fuel_Category_Code);
 PARAMETER(DB1.COA_RIN_Equivalence_Valu);
 PARAMETER(DB1.COA_RIN_Quantity);
 PARAMETER(DB1.COA_ULSD_Facility_#);
 PARAMETER(DB1.COA_Co_Product_Code);
 PARAMETER(DB1.COA_Co_Product_Comment);
 PARAMETER(DB1.COA_Transaction_Comment);
 PARAMETER(DB1.COA_BH_RFS_Version_Nbr);
 PARAMETER(DB1.COA_BH_EMTS_Sts);
 PARAMETER(DB1.COA_BH_EMTS_Date_Sent);
 PARAMETER(DB1.COA_BH_EMTS_Time_Sent);
 PARAMETER(DB1.COA_Reviewed_By);
 PARAMETER(DB1.COA_BH_Equiv_Value_f_SEP);
 PARAMETER(DB1.COA_BH_Yield_Percent);
 PARAMETER(DB1.COA_BH_Unused_Cde);
 PARAMETER(DB1.COA_Sample_Date);
 PARAMETER(DB1.COA_Sample_Time);
 PARAMETER(DB1.COA_LIMS_ID);
 PARAMETER(DB1.RFS_Feedstock_Code_1);
 PARAMETER(DB1.COA_BH_Feedstck_Volume_1);
 PARAMETER(DB1.COA_BH_Feedstck_Measure_1);
 PARAMETER(DB1.COA_BH_Feedstck_Biomass_1);
 PARAMETER(DB1.COA_BH_Feedstck_Pct_Ord_1);
 PARAMETER(DB1.COA_BH_Feedstck_comment_1);
 PARAMETER(DB1.RFS_Feedstock_Code_2);
 PARAMETER(DB1.COA_BH_Feedstck_Volume_2);
 PARAMETER(DB1.COA_BH_Feedstck_Measure_2);
 PARAMETER(DB1.COA_BH_Feedstck_Biomass_2);
 PARAMETER(DB1.COA_BH_Feedstck_Pct_Ord_2);
 PARAMETER(DB1.COA_BH_Feedstck_Comment_2);
 PARAMETER(DB1.RFS_Feedstock_Code_3);
 PARAMETER(DB1.COA_BH_Feedstck_Volume_3);
 PARAMETER(DB1.COA_BH_Feedstck_Measure_3);
 PARAMETER(DB1.COA_BH_Feedstck_Biomass_3);
 PARAMETER(DB1.cOA_BH_Feedstck_Pct_Ord_3);
 PARAMETER(DB1.COA_BH_Feedstck_Comment_3);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

 // IF PAR.COA Batch Header Sts is Closed from shipping
 IF PAR.COA_Batch_Header_Sts = 'C';

 EXECUTE FUNCTION(CHG Change Record      CH) TYPE(CHGOBJ) FILE(PMCCCPP)          AC1851634;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.COA_ULSD_Company_#);
 PARAMETER(DB1.COA_Batch_Number);
 PARAMETER(DB1.COA_Active_Whse_Tank);
 PARAMETER(DB1.COA_Bio_diesel_Fuel_Code);
 PARAMETER(DB1.COA_Date_Open_for_Ship);
 PARAMETER(DB1.COA_Time_Open_for_Ship);
 PARAMETER(DB1.COA_Open_for_Ship_Inits);
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 PARAMETER(PAR.COA_Close_from_Ship_Inits);
 PARAMETER(DB1.COA_Gallons_Used);
 PARAMETER(DB1.COA_Comment);
 PARAMETER(DB1.COA_Batch_Production_Date);
 PARAMETER(DB1.COA_Batch_Unused_Time);
 PARAMETER(DB1.COA_Specification);
 PARAMETER(DB1.COA_RFS_Program_ID);
 PARAMETER(PAR.COA_Batch_Header_Sts);
 PARAMETER(DB1.COA_Batch_Properties_Cmpl);
 PARAMETER(DB1.COA_Batch_Int_Ext_Company);
 PARAMETER(DB1.COA_Temperature_Loadout);
 PARAMETER(DB1.COA_Batch_Volume);
 PARAMETER(DB1.COA_Batch_Denaturant_Vol);
 PARAMETER(DB1.COA_RFS_Renew_Fuel_Code);
 PARAMETER(DB1.COA_RFS_Rnwbl_Feedstock);
 PARAMETER(DB1.COA_Batch_RIN);
 PARAMETER(DB1.COA_Batch_Export_Volume);
 PARAMETER(DB1.COA_Last_RIN_EEEEEEEE);
 PARAMETER(DB1.COA_Density_Loadout);
 PARAMETER(DB1.COA_Density_Reference);
 PARAMETER(DB1.COA_RIN_Equivalence_Valu#);
 PARAMETER(DB1.COA_Batch_Unused_Date);
 PARAMETER(DB1.RFS_Fuel_Code);
 PARAMETER(DB1.RFS_Process_Code);
 PARAMETER(DB1.RFS_Fuel_Category_Code);
 PARAMETER(DB1.COA_RIN_Equivalence_Valu);
 PARAMETER(DB1.COA_RIN_Quantity);
 PARAMETER(DB1.COA_ULSD_Facility_#);
 PARAMETER(DB1.COA_Co_Product_Code);
 PARAMETER(DB1.COA_Co_Product_Comment);
 PARAMETER(DB1.COA_Transaction_Comment);
 PARAMETER(DB1.COA_BH_RFS_Version_Nbr);
 PARAMETER(DB1.COA_BH_EMTS_Sts);
 PARAMETER(DB1.COA_BH_EMTS_Date_Sent);
 PARAMETER(DB1.COA_BH_EMTS_Time_Sent);
 PARAMETER(DB1.COA_Reviewed_By);
 PARAMETER(DB1.COA_BH_Equiv_Value_f_SEP);
 PARAMETER(DB1.COA_BH_Yield_Percent);
 PARAMETER(DB1.COA_BH_Unused_Cde);
 PARAMETER(DB1.COA_Sample_Date);
 PARAMETER(DB1.COA_Sample_Time);
 PARAMETER(DB1.COA_LIMS_ID);
 PARAMETER(DB1.RFS_Feedstock_Code_1);
 PARAMETER(DB1.COA_BH_Feedstck_Volume_1);
 PARAMETER(DB1.COA_BH_Feedstck_Measure_1);
 PARAMETER(DB1.COA_BH_Feedstck_Biomass_1);
 PARAMETER(DB1.COA_BH_Feedstck_Pct_Ord_1);
 PARAMETER(DB1.COA_BH_Feedstck_comment_1);
 PARAMETER(DB1.RFS_Feedstock_Code_2);
 PARAMETER(DB1.COA_BH_Feedstck_Volume_2);
 PARAMETER(DB1.COA_BH_Feedstck_Measure_2);
 PARAMETER(DB1.COA_BH_Feedstck_Biomass_2);
 PARAMETER(DB1.COA_BH_Feedstck_Pct_Ord_2);
 PARAMETER(DB1.COA_BH_Feedstck_Comment_2);
 PARAMETER(DB1.RFS_Feedstock_Code_3);
 PARAMETER(DB1.COA_BH_Feedstck_Volume_3);
 PARAMETER(DB1.COA_BH_Feedstck_Measure_3);
 PARAMETER(DB1.COA_BH_Feedstck_Biomass_3);
 PARAMETER(DB1.cOA_BH_Feedstck_Pct_Ord_3);
 PARAMETER(DB1.COA_BH_Feedstck_Comment_3);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

