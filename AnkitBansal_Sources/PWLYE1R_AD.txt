// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PWLYE1R
// ?Date: 14.08.2025 Time: 02:56:52
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?**NOTE: This program was cloned from PWC4E1R. Primary purpose is
//?        to show the JDE E1 info. Any changes to this function
//?        should consider changing PWC4E1R as well.
//?R17061 DN 04/27/21-Commented Out. Use RP4 Source.
// Execute function Mov ApplN to CompanyRP4US.
EXECUTE FUNCTION(Mov ApplN to CompanyRP4US) TYPE(EXCUSRSRC) ('PWIVUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                   movel     #IEVTX        ##CMP
}


//?R17061 DN 04/27/21-Commented Out. Use RP4 Source.
EXECUTE FUNCTION(Val Application/UserRP4IF) TYPE(EXCINTFUN)                     AB1350460;
PARAMETER(LCL.Oms_Warehouse_Code);
PARAMETER(LCL.BOH_Company_Number);
PARAMETER('HPE');
PARAMETER(LCL.Oms_SalesPerson_Code);
PARAMETER(LCL.Oms_Allow_Multi_Company);
PARAMETER(LCL.Oms_Default_Printer);
PARAMETER(LCL.Oms_Name);
PARAMETER(LCL.Oms_System_Value_Alpha);
PARAMETER(LCL.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to CompanyRP4US.
 EXECUTE FUNCTION(Mov ApplN to CompanyRP4US) TYPE(EXCUSRSRC) ('PWIVUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                   movel     #IEVTX        ##CMP
 }

 ENDIF;

}


// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(LCL.BOH_Company_Number);
PARAMETER('EDIUSER');
PARAMETER(LCL.User_Class_f_usrprf_USR);

CASE;

// IF LCL.User Class f/usrprf   USR is *USER
IF LCL.User_Class_f_usrprf_USR = *USER;

// LCL.EDI Allow Changes = CND.Yes
LCL.EDI_Allow_Changes = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.EDI Allow Changes = CND.No
LCL.EDI_Allow_Changes = 'N';

ENDIF;

// Call program Rtv Company Value Nbr XF.
CALL PROGRAM(Rtv Company Value Nbr XF) ('PDHGXFR');
PARAMETER(LCL.BOH_Company_Number);
PARAMETER('HPEEDIDEFU');
PARAMETER(LCL.System_Value_Numeric_USR);

CASE;

// IF LCL.System Value Numeric  USR is EDI Default number
IF LCL.System_Value_Numeric_USR > 1;

// PAR.PD EDI Trading Partner # = LCL.System Value Numeric  USR
PAR.PD_EDI_Trading_Partner_# = LCL.System_Value_Numeric_USR;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.PD EDI Trading Partner # = CVTVAR(CON.*BLANK)
PAR.PD_EDI_Trading_Partner_# = CVTVAR(*BLANK);

ENDIF;

//?E3580 CGL 11/11/14 - M3 Vendor interfaces changes
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(LCL.BOH_Company_Number);
PARAMETER('M3VEND');
PARAMETER(PAR.Live_with_M3_USR);

//?T8163 DN  01/16/17 - Get M3 Division #.
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(LCL.BOH_Company_Number);
PARAMETER('M3HPEDIV');
PARAMETER(PAR.M3_Supplier_Division);

//?SDN440 RMC 5/7/2021 GET E1 HPE SEARCH TYPE F/VENDOR
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(LCL.BOH_Company_Number);
PARAMETER('E1SRCHTYP');
PARAMETER(LCL.Search_Type_3A);

//?R17061 DN 07/23/21-Get Security Cost Center.
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(LCL.BOH_Company_Number);
PARAMETER('E1MCU');
PARAMETER(LCL.Business_Unit_Cost_Center);

//?USER: Initialize key screen

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

//?USER: Initialize detail screen (new record)

// DTL.PD Freight Exp Paid By = CND.Producer
DTL.PD_Freight_Exp_Paid_By = 'P';

// DTL.RS Record Status = CND.Active
DTL.RS_Record_Status = 'A';

// DTL.Vendor 1099 = CND.No
DTL.Vendor_1099 = 'N';

// DTL.Frt Exp Pay By Desc Usr = Condition name of DTL.PD Freight Exp Paid By
DTL.Frt_Exp_Pay_By_Desc_Usr = RTVCND(DTL.PD_Freight_Exp_Paid_By);

// DTL.PD EDI Trading Partner # = PAR.PD EDI Trading Partner #
DTL.PD_EDI_Trading_Partner_# = PAR.PD_EDI_Trading_Partner_#;

//?USER: Initialize detail screen (existing record)

//?E3580 CGL 11/11/14 - M3 Vendor interfaces changes
//?R10690 JJH 06/06/17 - Hide Code that is no longer valid
//?R10690 JJH 06/06/17 - Display Producer Address
// Call program Rtv Producer Address  XF.
CALL PROGRAM(Rtv Producer Address  XF) ('PWCZXFR');
PARAMETER(DB1.PD_Producer_Code);
PARAMETER(NLL.Address_Number);
PARAMETER(NLL.Pass_Name);
PARAMETER(DTL.Producer_Address_1_USR);
PARAMETER(DTL.Producer_Address_2_USR);
PARAMETER(DTL.Producer_Address_3_USR);
PARAMETER(DTL.Producer_City_USR);
PARAMETER(DTL.Producer_State_USR);
PARAMETER(DTL.Producer_Zip_10_USR);
PARAMETER(DTL.Producer_Area_Code_USR);
PARAMETER(DTL.Producer_Phone_Number_USR);
PARAMETER(DTL.Producer_Fax_Area_Cd_USR);
PARAMETER(DTL.Producer_Fax_Phone_#_USR);
PARAMETER(NLL.Fax_Attn_1);
PARAMETER(DTL.Fax_Area_Code_#);
PARAMETER(DTL.Fax_Telephone);
PARAMETER(NLL.Fax_Attn_2);
PARAMETER(NLL.Vendor_1099);
PARAMETER(NLL.Vendor_Tax_Id);
PARAMETER(DTL.Country_Code_Usr);

//?Fax Attn 1
CASE;

// IF DTL.Producer Fax Area Cd  USR is Not Blank
IF DTL.Producer_Fax_Area_Cd_USR <> *BLANK;

// OR DTL.Producer Fax Phone #  USR is Not Blank
OR DTL.Producer_Fax_Phone_#_USR <> *BLANK;

EXECUTE FUNCTION(Rtv Fax Detail        RT) TYPE(RTVOBJ) FILE(PKEAREP)           AB1206181;
PARAMETER('HPE');
PARAMETER(DTL.Producer_Fax_Area_Cd_USR);
PARAMETER(DTL.Producer_Fax_Phone_#_USR);
PARAMETER(DTL.Fax_Attn_1);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Fax Attn 2
CASE;

// IF DTL.Fax Area Code # is Not Blank
IF DTL.Fax_Area_Code_# <> *BLANK;

// OR DTL.Fax Telephone is Not Blank
OR DTL.Fax_Telephone <> *BLANK;

EXECUTE FUNCTION(Rtv Fax Detail        RT) TYPE(RTVOBJ) FILE(PKEAREP)           AB1206181;
PARAMETER('HPE');
PARAMETER(DTL.Fax_Area_Code_#);
PARAMETER(DTL.Fax_Telephone);
PARAMETER(DTL.Fax_Attn_2);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?R10690 JJH 06/06/17 - Display M3 Suppier Address
//?R17061 DN 08/11/21-Commented out 'Rtv Get M3 Supplier   IF' & moved below.
//?R17061 DN 08/11/21-Get M3 Supplier Info.
CASE;

// IF PAR.Live with M3   USR is Yes
IF PAR.Live_with_M3_USR = 'Y';

EXECUTE FUNCTION(Rtv Get M3 Supplier   IF) TYPE(EXCINTFUN)                      AB1322091;
PARAMETER(DB1.PD_Producer_Code);
PARAMETER(DTL.M3_Supplier_ID);
PARAMETER(DTL.M3_Supplier_Name);
PARAMETER(DTL.M3_Address_Line_1);
PARAMETER(DTL.M3_Address_Line_2);
PARAMETER(DTL.M3_Address_Line_3);
PARAMETER(DTL.M3_City);
PARAMETER(DTL.M3_State);
PARAMETER(DTL.M3_Postal_Code);
PARAMETER(DTL.M3_Telephone_No_1);
PARAMETER(DTL.M3_Telephone_No_2);
PARAMETER(DTL.M3_Fax_Telephone);
PARAMETER(NLL.M3_Supplier_Tax_ID);
PARAMETER(DTL.M3_Country_Code);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Producer EXT2     RT) TYPE(RTVOBJ) FILE(PLB4REP)           AB1322079;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.M3_Supplier_ID);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv M# Supplier       RT) TYPE(RTVOBJ) FILE(PLB2REP)           AB1322067;
 PARAMETER(PAR.M3_Supplier_ID);
 PARAMETER(PAR.M3_Supplier_Name);
 PARAMETER(PAR.M3_Address_Line_1);
 PARAMETER(PAR.M3_Address_Line_2);
 PARAMETER(PAR.M3_Address_Line_3);
 PARAMETER(PAR.M3_City);
 PARAMETER(PAR.M3_State);
 PARAMETER(PAR.M3_Postal_Code);
 PARAMETER(PAR.M3_Telephone_No_1);
 PARAMETER(PAR.M3_Telephone_No_2);
 PARAMETER(PAR.M3_Fax_Telephone);
 PARAMETER(PAR.M3_Supplier_Tax_ID);
 PARAMETER(PAR.M3_Country_Code);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?R17061 DN 08/11/21-Get M3 Supplier Info.
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Get M3 Supplier   IF) TYPE(EXCINTFUN)                      AB1322091;
PARAMETER(DB1.PD_Producer_Code);
PARAMETER(DTL.M3_Supplier_ID);
PARAMETER(NLL.M3_Supplier_Name);
PARAMETER(NLL.M3_Address_Line_1);
PARAMETER(NLL.M3_Address_Line_2);
PARAMETER(NLL.M3_Address_Line_3);
PARAMETER(NLL.M3_City);
PARAMETER(NLL.M3_State);
PARAMETER(NLL.M3_Postal_Code);
PARAMETER(NLL.M3_Telephone_No_1);
PARAMETER(NLL.M3_Telephone_No_2);
PARAMETER(NLL.M3_Fax_Telephone);
PARAMETER(NLL.M3_Supplier_Tax_ID);
PARAMETER(NLL.M3_Country_Code);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Producer EXT2     RT) TYPE(RTVOBJ) FILE(PLB4REP)           AB1322079;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.M3_Supplier_ID);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv M# Supplier       RT) TYPE(RTVOBJ) FILE(PLB2REP)           AB1322067;
 PARAMETER(PAR.M3_Supplier_ID);
 PARAMETER(PAR.M3_Supplier_Name);
 PARAMETER(PAR.M3_Address_Line_1);
 PARAMETER(PAR.M3_Address_Line_2);
 PARAMETER(PAR.M3_Address_Line_3);
 PARAMETER(PAR.M3_City);
 PARAMETER(PAR.M3_State);
 PARAMETER(PAR.M3_Postal_Code);
 PARAMETER(PAR.M3_Telephone_No_1);
 PARAMETER(PAR.M3_Telephone_No_2);
 PARAMETER(PAR.M3_Fax_Telephone);
 PARAMETER(PAR.M3_Supplier_Tax_ID);
 PARAMETER(PAR.M3_Country_Code);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


ENDIF;

//?R17061 DN 04/23/21-Get JDE E1 Info.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Rtv Vendor Addr/FaxE1 UP.
CALL PROGRAM(Rtv Vendor Addr/FaxE1 UP) ('VNDFAXRE1');
PARAMETER(WRK.Vendor_Return_Code_Usr);
PARAMETER(DB1.PD_VND_Address_Number);
PARAMETER(DTL.Pass_Name);
PARAMETER(DTL.Address_1);
PARAMETER(DTL.Address_2);
PARAMETER(DTL.Address_3);
PARAMETER(DTL.City);
PARAMETER(DTL.State);
PARAMETER(DTL.Zip);
PARAMETER(DTL.Area_Code);
PARAMETER(DTL.Telephone);
PARAMETER(DTL.Fax_Area_Code_#_1);
PARAMETER(DTL.Fax_Telephone_1);
PARAMETER(DTL.Fax_Area_Code_#_2);
PARAMETER(DTL.Fax_Telephone_2);
PARAMETER(DTL.Vendor_1099);
PARAMETER(DTL.Vendor_Tax_Id);
PARAMETER(DTL.Country_Code);
PARAMETER(NLL.Producer_Trucker_Sts_Usr);

CASE;

// IF WRK.Vendor Return Code Usr is Vendor Error
IF WRK.Vendor_Return_Code_Usr = 'ERR';

// DTL.Address 1 = CON.Not Found
DTL.Address_1 = 'Not Found';

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

ENDIF;

ENDIF;

//?R10690 JJH 06/06/17 - Initialization for Existing Producer fields
// PGM.*Program mode = CND.*CHANGE
PGM.*Program_mode = 'CHG';

// DTL.Record Status Desc Usr = Condition name of DB1.RS Record Status
DTL.Record_Status_Desc_Usr = RTVCND(DB1.RS_Record_Status);

// Call program Rtv Alt Prd Py Nm&Vn# XF.
CALL PROGRAM(Rtv Alt Prd Py Nm&Vn# XF) ('PLO7XFR');
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.Alt_Producer_Payee);
PARAMETER(DTL.Alt_Prod_Payee_Vnd_AddUsr);
PARAMETER(DTL.M3_Supplier_ID_Alt_Payee);

//?Validate PD EDI Trading Partner #
CASE;

// IF DB1.PD EDI Trading Partner # is Not zero
IF DB1.PD_EDI_Trading_Partner_# <> *ZERO;

EXECUTE FUNCTION(RTV Val Edi#          RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1277092;
PARAMETER(DB1.PD_EDI_Trading_Partner_#);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


ENDIF;

EXECUTE FUNCTION(Rtv Source Desc       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1124642;
PARAMETER(DB1.SR_Source_Code);
PARAMETER(DTL.SR_Description);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Hog Buyer Name    RT) TYPE(RTVOBJ) FILE(PKADREP)           AB1124643;
PARAMETER(DB1.HB_Buyer_Code);
PARAMETER(DTL.Name_USR);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
PARAMETER(DB1.Commission_Producer_Payee);
PARAMETER(DTL.Name_Producer_USR);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Frt Exp Pay By Desc Usr = Condition name of DTL.PD Freight Exp Paid By
DTL.Frt_Exp_Pay_By_Desc_Usr = RTVCND(DTL.PD_Freight_Exp_Paid_By);

EXECUTE FUNCTION(RTV MPR Prdcr Purch TpRT) TYPE(RTVOBJ) FILE(PKE3CPP)           AB1235599;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.MPR_Purchase_Type_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// DTL.Vendor 1099 = CND.No
DTL.Vendor_1099 = 'N';

EXECUTE FUNCTION(Rtv MPR Purch Desc    RT) TYPE(RTVOBJ) FILE(PKE2REP)           AB1235607;
PARAMETER(DTL.MPR_Purchase_Type_Code);
PARAMETER(DTL.MPR_Purchase_Type_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?12/03/2018 JBB E14180 - Retrieve HPS Automation flag
EXECUTE FUNCTION(Rtv HPS Automation    RT) TYPE(RTVOBJ) FILE(PLAOREP)           AB1342216;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.HPS_Automation_Y_N_Usr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Populate HPS Automation description
CASE;

// IF DTL.HPS Automation Y/N Usr is N
IF DTL.HPS_Automation_Y_N_Usr = 'N';

// DTL.Yes/No Text USR 3A = CON.No
DTL.Yes_No_Text_USR_3A = 'No';

//?Populate HPS Automation description
// IF DTL.HPS Automation Y/N Usr is Y
IF DTL.HPS_Automation_Y_N_Usr = 'Y';

// DTL.Yes/No Text USR 3A = CON.Yes
DTL.Yes_No_Text_USR_3A = 'Yes';

//?Populate HPS Automation description
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Yes/No Text USR 3A = CON.*BLANK
DTL.Yes_No_Text_USR_3A = *BLANK;

ENDIF;

//?USER: Validate detail screen fields

//?R10690 JJH 06/07/17 - Options no longer required
//?F15=M3 Supplier Nbr Search
CASE;

// IF DTL.*CMD key is CF15
IF DTL.*CMD_key = '15';

CASE;

// IF PAR.Live with M3   USR is Live or Parallel
IF PAR.Live_with_M3_USR = 'P'/'Y';

//?T8163 DN  01/16/17 - Set M3 Supplier Group as Producer.
// LCL.M3 Supplier Group = CND.Producers
LCL.M3_Supplier_Group = 'ZHP';

//?Live or Parallel
CASE;

// IF PAR.Live with M3   USR is Yes
IF PAR.Live_with_M3_USR = 'Y';

// Call program Sel M3 Suplr Same Div/Grp.
CALL PROGRAM(Sel M3 Suplr Same Div/Grp) ('PLX1SRR');
PARAMETER(DTL.M3_Supplier_ID);
PARAMETER(DTL.PD_Name);
PARAMETER(DTL.Producer_Address_1_USR);
PARAMETER(DTL.Producer_Address_2_USR);
PARAMETER(DTL.Producer_Address_3_USR);
PARAMETER(LCL.M3_Address_Line_4);
PARAMETER(DTL.Producer_City_USR);
PARAMETER(DTL.Producer_State_USR);
PARAMETER(DTL.Producer_Zip_10_USR);
PARAMETER(LCL.M3_Telephone_No_1);
PARAMETER(LCL.M3_Telephone_No_2);
PARAMETER(LCL.M3_Fax_Telephone);
PARAMETER(DTL.Vendor_Tax_Id);
PARAMETER(DTL.Country_Code_Usr);
PARAMETER(LCL.M3_Supplier_Group);
PARAMETER(PAR.M3_Supplier_Division);

// DTL.Producer Area Code    USR = SUBSTRING(LCL.M3 Telephone No 1,CON.1,CON.3)
DTL.Producer_Area_Code_USR = SUBSTRING(LCL.M3_Telephone_No_1:1:3);

// DTL.Producer Phone Number USR = SUBSTRING(LCL.M3 Telephone No 1,CON.5,CON.8)
DTL.Producer_Phone_Number_USR = SUBSTRING(LCL.M3_Telephone_No_1:5:8);

// DTL.Producer Fax Area Cd  USR = SUBSTRING(LCL.M3 Fax Telephone,CON.1,CON.3)
DTL.Producer_Fax_Area_Cd_USR = SUBSTRING(LCL.M3_Fax_Telephone:1:3);

// DTL.Producer Fax Phone #  USR = SUBSTRING(LCL.M3 Fax Telephone,CON.5,CON.8)
DTL.Producer_Fax_Phone_#_USR = SUBSTRING(LCL.M3_Fax_Telephone:5:8);

// DTL.Vendor 1099 = CND.No
DTL.Vendor_1099 = 'N';

//?Live or Parallel
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Sel M3 Suplr Same Div/Grp.
CALL PROGRAM(Sel M3 Suplr Same Div/Grp) ('PLX1SRR');
PARAMETER(DTL.M3_Supplier_ID);
PARAMETER(LCL.PD_Name);
PARAMETER(LCL.Producer_Address_1_USR);
PARAMETER(LCL.Producer_Address_2_USR);
PARAMETER(LCL.Producer_Address_3_USR);
PARAMETER(LCL.M3_Address_Line_4);
PARAMETER(LCL.Producer_City_USR);
PARAMETER(LCL.Producer_State_USR);
PARAMETER(LCL.Producer_Zip_10_USR);
PARAMETER(LCL.M3_Telephone_No_1);
PARAMETER(LCL.M3_Telephone_No_2);
PARAMETER(LCL.M3_Fax_Telephone);
PARAMETER(LCL.Vendor_Tax_Id);
PARAMETER(LCL.Country_Code_Usr);
PARAMETER(LCL.M3_Supplier_Group);
PARAMETER(PAR.M3_Supplier_Division);

ENDIF;

ENDIF;

ENDIF;

//?F4=Prompt   MPR Purchase Type Code
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.MPR Purchase Type Code
IF PGM.*Cursor_field = DTL.MPR_Purchase_Type_Code;

// LCL.MPR Purchase Type Code = CON.*ZERO
LCL.MPR_Purchase_Type_Code = *ZERO;

// Call program Sel MPR Purchase Type SR.
CALL PROGRAM(Sel MPR Purchase Type SR) ('PKV8SRR');
PARAMETER(LCL.MPR_Purchase_Type_Code);

CASE;

// IF LCL.MPR Purchase Type Code NE DTL.MPR Purchase Type Code
IF LCL.MPR_Purchase_Type_Code <> DTL.MPR_Purchase_Type_Code;

// AND LCL.MPR Purchase Type Code is Entered
AND LCL.MPR_Purchase_Type_Code > 0;

// DTL.MPR Purchase Type Code = LCL.MPR Purchase Type Code
DTL.MPR_Purchase_Type_Code = LCL.MPR_Purchase_Type_Code;

ENDIF;

ENDIF;

ENDIF;

//?R10690 JJH 06/07/17 - Add option
//?R17061 DN 04/26/21-Replaced M3 Supplier Prompt with JDE E1 Vendor Prompt.
//?F13=Select Vendor.                            R17061 DN 07/28/21
CASE;

// IF DTL.*CMD key is CF13
IF DTL.*CMD_key = '13';

//?Save Before Screen Values.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.PD VND Address Number = DTL.PD VND Address Number
PAR.PD_VND_Address_Number = DTL.PD_VND_Address_Number;

// PAR.Pass Name = DTL.Pass Name
PAR.Pass_Name = DTL.Pass_Name;

// PAR.Address 1 = DTL.Address 1
PAR.Address_1 = DTL.Address_1;

// PAR.Address 2 = DTL.Address 2
PAR.Address_2 = DTL.Address_2;

// PAR.Address 3 = DTL.Address 3
PAR.Address_3 = DTL.Address_3;

// PAR.City = DTL.City
PAR.City = DTL.City;

// PAR.State = DTL.State
PAR.State = DTL.State;

// PAR.Zip = DTL.Zip
PAR.Zip = DTL.Zip;

// PAR.Area Code = DTL.Area Code
PAR.Area_Code = DTL.Area_Code;

// PAR.Telephone = DTL.Telephone
PAR.Telephone = DTL.Telephone;

// PAR.Fax Area Code # = DTL.Fax Area Code # 1
PAR.Fax_Area_Code_# = DTL.Fax_Area_Code_#_1;

// PAR.Fax Telephone = DTL.Fax Telephone 1
PAR.Fax_Telephone = DTL.Fax_Telephone_1;

// PAR.Fax Area Code # 2 = DTL.Fax Area Code # 2
PAR.Fax_Area_Code_#_2 = DTL.Fax_Area_Code_#_2;

// PAR.Fax Telephone 2 = DTL.Fax Telephone 2
PAR.Fax_Telephone_2 = DTL.Fax_Telephone_2;

// PAR.Vendor 1099 = DTL.Vendor 1099
PAR.Vendor_1099 = DTL.Vendor_1099;

// PAR.Vendor Tax Id. = DTL.Vendor Tax Id.
PAR.Vendor_Tax_Id = DTL.Vendor_Tax_Id;

// PAR.Country Code = DTL.Country Code
PAR.Country_Code = DTL.Country_Code;

ENDIF;

//?TOOK OFF STS, ADDED SEARCH TYPE TO USE IN VNDFAXSE1
//?R17061 DN 08/02/21-Replaced VNDFAXSE1 with E1MUSRR Select Record.
// Call program Sel Vendor w/Name  E1 XF.
CALL PROGRAM(Sel Vendor w/Name  E1 XF) ('E1MVXFR');
PARAMETER(DTL.PD_VND_Address_Number);
PARAMETER(DTL.Pass_Name);
PARAMETER(DTL.Address_1);
PARAMETER(DTL.Address_2);
PARAMETER(DTL.Address_3);
PARAMETER(DTL.City);
PARAMETER(DTL.State);
PARAMETER(DTL.Zip);
PARAMETER(DTL.Area_Code);
PARAMETER(DTL.Telephone);
PARAMETER(DTL.Fax_Area_Code_#_1);
PARAMETER(DTL.Fax_Telephone_1);
PARAMETER(DTL.Fax_Area_Code_#_2);
PARAMETER(DTL.Fax_Telephone_2);
PARAMETER(DTL.Vendor_1099);
PARAMETER(DTL.Vendor_Tax_Id);
PARAMETER(DTL.Country_Code);
PARAMETER(LCL.Search_Type_3A);
PARAMETER(LCL.Business_Unit_Cost_Center);

//?Vendor Selected?
CASE;

// IF DTL.PD VND Address Number is Zero
IF DTL.PD_VND_Address_Number = *ZERO;

//?No Vendor Selected. Revert Before Screen Values.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.PD VND Address Number = PAR.PD VND Address Number
DTL.PD_VND_Address_Number = PAR.PD_VND_Address_Number;

// DTL.Pass Name = PAR.Pass Name
DTL.Pass_Name = PAR.Pass_Name;

// DTL.Address 1 = PAR.Address 1
DTL.Address_1 = PAR.Address_1;

// DTL.Address 2 = PAR.Address 2
DTL.Address_2 = PAR.Address_2;

// DTL.Address 3 = PAR.Address 3
DTL.Address_3 = PAR.Address_3;

// DTL.City = PAR.City
DTL.City = PAR.City;

// DTL.State = PAR.State
DTL.State = PAR.State;

// DTL.Zip = PAR.Zip
DTL.Zip = PAR.Zip;

// DTL.Area Code = PAR.Area Code
DTL.Area_Code = PAR.Area_Code;

// DTL.Telephone = PAR.Telephone
DTL.Telephone = PAR.Telephone;

// DTL.Fax Area Code # 1 = PAR.Fax Area Code #
DTL.Fax_Area_Code_#_1 = PAR.Fax_Area_Code_#;

// DTL.Fax Telephone 1 = PAR.Fax Telephone
DTL.Fax_Telephone_1 = PAR.Fax_Telephone;

// DTL.Fax Area Code # 2 = PAR.Fax Area Code # 2
DTL.Fax_Area_Code_#_2 = PAR.Fax_Area_Code_#_2;

// DTL.Fax Telephone 2 = PAR.Fax Telephone 2
DTL.Fax_Telephone_2 = PAR.Fax_Telephone_2;

// DTL.Vendor 1099 = PAR.Vendor 1099
DTL.Vendor_1099 = PAR.Vendor_1099;

// DTL.Vendor Tax Id. = PAR.Vendor Tax Id.
DTL.Vendor_Tax_Id = PAR.Vendor_Tax_Id;

// DTL.Country Code = PAR.Country Code
DTL.Country_Code = PAR.Country_Code;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Vendor Selected?
// IF *OTHERWISE
IF *OTHERWISE;

//?Vendor Changed, Proceed to Confirm.
CASE;

// IF DTL.PD VND Address Number NE PAR.PD VND Address Number
IF DTL.PD_VND_Address_Number <> PAR.PD_VND_Address_Number;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

ENDIF;

// DTL.Record Status Desc Usr = Condition name of DTL.RS Record Status
DTL.Record_Status_Desc_Usr = RTVCND(DTL.RS_Record_Status);

EXECUTE FUNCTION(Rtv Source Desc       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1124642;
PARAMETER(DTL.SR_Source_Code);
PARAMETER(DTL.SR_Description);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Hog Buyer Name    RT) TYPE(RTVOBJ) FILE(PKADREP)           AB1124643;
PARAMETER(DTL.HB_Buyer_Code);
PARAMETER(DTL.Name_USR);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
PARAMETER(DTL.Commission_Producer_Payee);
PARAMETER(DTL.Name_Producer_USR);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Rtv Alt Prd Py Nm&Vn# XF.
CALL PROGRAM(Rtv Alt Prd Py Nm&Vn# XF) ('PLO7XFR');
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.Alt_Producer_Payee);
PARAMETER(DTL.Alt_Prod_Payee_Vnd_AddUsr);
PARAMETER(DTL.M3_Supplier_ID_Alt_Payee);

//?R10690 JJH 06/07/17 - Validation of JDE Vendor no longer required
//?Validate MPR Purchase Type Code
CASE;

// IF DTL.MPR Purchase Type Code NE WRK.Zero USR
IF DTL.MPR_Purchase_Type_Code <> WRK.Zero_USR;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(Val MPR Purchase Type RT) TYPE(RTVOBJ) FILE(PKE2REP)           AB1235592;
PARAMETER(DTL.MPR_Purchase_Type_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'MPR Purchase Type not found.'
ERROR(PRK0965);
MSGPARM(DTL.MPR_Purchase_Type_Code);

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

ENDIF;

ENDIF;

//?Validate PD EDI Trading Partner #
CASE;

// IF LCL.EDI Allow Changes is Yes
IF LCL.EDI_Allow_Changes = 'Y';

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

CASE;

// IF DTL.PD EDI Trading Partner # is Not zero
IF DTL.PD_EDI_Trading_Partner_# <> *ZERO;

EXECUTE FUNCTION(RTV Val Edi#          RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1277092;
PARAMETER(DTL.PD_EDI_Trading_Partner_#);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

//?This number must exists on at least one producer for a user to change
//?or enter this number.
// Send error message - 'EDI# does not exists, the EDI# you are trying to enter has not been used in
ERROR(PRK1164);
MSGPARM(DTL.PD_EDI_Trading_Partner_#);

ENDIF;

ENDIF;

ENDIF;

//?R17061 DN 07/28/21-Do NOT Allow JDE Vendor for Input. Use F13.
//?       Commented Out Validation Logic.
//?CALC: Detail screen function fields

//?R10690 JJH 06/07/17 - No longer required, Adderss is now Input
//?USER: Validate detail screen relations

//?E11442 JJH 08/21 - Validation for M3 Supplier Division/Group
//?R17061 DN 04/27/21-Commented Out. No Longer Used.
//?USER: Create DBF record

EXECUTE FUNCTION(Crt Producer/Prd Addr IF) TYPE(EXCINTFUN) FILE(PKACREP)        AB1336043;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PD_Name);
PARAMETER(DTL.PD_Production_Capacity);
PARAMETER(DTL.PD_Std_Delv_Time);
PARAMETER(DTL.PD_Std_Truck_Size);
PARAMETER(DTL.PD_Freight_Exp_Paid_By);
PARAMETER(DTL.PD_Fax_Status);
PARAMETER(DTL.PD_VND_Address_Number);
PARAMETER(DTL.PD_EDI_Trading_Partner_#);
PARAMETER(DTL.PD_VND_Category);
PARAMETER(DTL.SR_Source_Code);
PARAMETER(DTL.HB_Buyer_Code);
PARAMETER(DTL.Commission_Producer_Payee);
PARAMETER(DTL.M3_Supplier_ID);
PARAMETER(DTL.PD_Name);
PARAMETER(DTL.Producer_Address_1_USR);
PARAMETER(DTL.Producer_Address_2_USR);
PARAMETER(DTL.Producer_Address_3_USR);
PARAMETER(DTL.Producer_City_USR);
PARAMETER(DTL.Producer_State_USR);
PARAMETER(DTL.Producer_Zip_10_USR);
PARAMETER(DTL.Producer_Area_Code_USR);
PARAMETER(DTL.Producer_Phone_Number_USR);
PARAMETER(DTL.Producer_Fax_Area_Cd_USR);
PARAMETER(DTL.Producer_Fax_Phone_#_USR);
PARAMETER(DTL.Fax_Attn_1);
PARAMETER(DTL.Fax_Area_Code_#);
PARAMETER(DTL.Fax_Telephone);
PARAMETER(DTL.Fax_Attn_2);
PARAMETER(DTL.Vendor_1099);
PARAMETER(*BLANK);
PARAMETER(DTL.Country_Code_Usr);
PARAMETER(DTL.MPR_Purchase_Type_Code);
{
 //?Execute internal function

 EXECUTE FUNCTION(Crt Producer          CT) TYPE(CRTOBJ) FILE(PKACREP)           AB1101531;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PD_Name);
 PARAMETER(PAR.PD_Production_Capacity);
 PARAMETER(PAR.PD_Std_Delv_Time);
 PARAMETER(PAR.PD_Std_Truck_Size);
 PARAMETER(PAR.PD_Freight_Exp_Paid_By);
 PARAMETER(PAR.PD_Fax_Status);
 PARAMETER(*ZERO);
 PARAMETER(PAR.PD_EDI_Trading_Partner_#);
 PARAMETER(PAR.PD_VND_Category);
 PARAMETER(PAR.SR_Source_Code);
 PARAMETER(PAR.HB_Buyer_Code);
 PARAMETER(PAR.Commission_Producer_Payee);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 EXECUTE FUNCTION(Crt Producer EXT2     CT) TYPE(CRTOBJ) FILE(PLB4REP)           AB1322068;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.M3_Supplier_ID);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 EXECUTE FUNCTION(Crt Producer Address  CR) TYPE(CRTOBJ) FILE(PWAGREP)           AB1335160;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Pass_Name);
 PARAMETER(PAR.Address_1);
 PARAMETER(PAR.Address_2);
 PARAMETER(PAR.Address_3);
 PARAMETER(PAR.City);
 PARAMETER(PAR.State);
 PARAMETER(PAR.Zip);
 PARAMETER(PAR.Area_Code);
 PARAMETER(PAR.Telephone);
 PARAMETER(PAR.Fax_Area_Code_#);
 PARAMETER(PAR.Fax_Telephone);
 PARAMETER(PAR.Fax_Attn_1);
 PARAMETER(PAR.Fax_Area_Code_#_2);
 PARAMETER(PAR.Fax_Telephone_2);
 PARAMETER(PAR.Fax_Attn_2);
 PARAMETER(PAR.Vendor_1099);
 PARAMETER(PAR.Vendor_Tax_Id);
 PARAMETER(PAR.Country_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp-Sys Dt  IF) TYPE(EXCINTFUN)                      AB1237005;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // Call program Rtv System Date & Tim UP.
   CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
   PARAMETER(PAR.RS_Date_Added);
   PARAMETER(PAR.RS_Time_Added);

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 //?Fax Attn 1
 CASE;

 // IF PAR.Fax Area Code # is Not Blank
 IF PAR.Fax_Area_Code_# <> *BLANK;

 // OR PAR.Fax Telephone is Not Blank
 OR PAR.Fax_Telephone <> *BLANK;

 EXECUTE FUNCTION(Upd Fax Detail        RT) TYPE(RTVOBJ) FILE(PKEAREP)           AB1206264;
 PARAMETER('HPE');
 PARAMETER(PAR.Fax_Area_Code_#);
 PARAMETER(PAR.Fax_Telephone);
 PARAMETER(PAR.Fax_Attn_1);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Create Fax Detail) TYPE(CRTOBJ) FILE(PKEAREP)                  AB1206170;
  PARAMETER(PAR.FD_Application_Code);
  PARAMETER(PAR.FD_Fax_Area_Code);
  PARAMETER(PAR.FD_Fax_Number);
  PARAMETER(PAR.FD_Fax_Attention);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER(PAR.RS_Record_Status);
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Change Fax Detail) TYPE(CHGOBJ) FILE(PKEAREP)                  AB1206171;
  PARAMETER(DB1.FD_Application_Code);
  PARAMETER(DB1.FD_Fax_Area_Code);
  PARAMETER(DB1.FD_Fax_Number);
  PARAMETER(PAR.FD_Fax_Attention);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 //?Fax Attn 2
 CASE;

 // IF PAR.Fax Area Code # 2 is Not Blank
 IF PAR.Fax_Area_Code_#_2 <> *BLANK;

 // OR PAR.Fax Telephone 2 is Not Blank
 OR PAR.Fax_Telephone_2 <> *BLANK;

 EXECUTE FUNCTION(Upd Fax Detail        RT) TYPE(RTVOBJ) FILE(PKEAREP)           AB1206264;
 PARAMETER('HPE');
 PARAMETER(PAR.Fax_Area_Code_#_2);
 PARAMETER(PAR.Fax_Telephone_2);
 PARAMETER(PAR.Fax_Attn_2);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Create Fax Detail) TYPE(CRTOBJ) FILE(PKEAREP)                  AB1206170;
  PARAMETER(PAR.FD_Application_Code);
  PARAMETER(PAR.FD_Fax_Area_Code);
  PARAMETER(PAR.FD_Fax_Number);
  PARAMETER(PAR.FD_Fax_Attention);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER(PAR.RS_Record_Status);
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Change Fax Detail) TYPE(CHGOBJ) FILE(PKEAREP)                  AB1206171;
  PARAMETER(DB1.FD_Application_Code);
  PARAMETER(DB1.FD_Fax_Area_Code);
  PARAMETER(DB1.FD_Fax_Number);
  PARAMETER(PAR.FD_Fax_Attention);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 //?MPR Producer Purchase Type
 CASE;

 // IF PAR.MPR Purchase Type Code is Entered
 IF PAR.MPR_Purchase_Type_Code > 0;

 EXECUTE FUNCTION(Rtv/Crt/Chg MPR PrPur RT) TYPE(RTVOBJ) FILE(PKE3CPP)           AB1235598;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.MPR_Purchase_Type_Code);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt MPR Prdcr Purch   CR) TYPE(CRTOBJ) FILE(PKE3CPP)           AB1235460;
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.MPR_Purchase_Type_Code);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  CASE;

  // IF PAR.MPR Purchase Type Code NE DB1.MPR Purchase Type Code
  IF PAR.MPR_Purchase_Type_Code <> DB1.MPR_Purchase_Type_Code;

  EXECUTE FUNCTION(Del MPR Prdcr Purch   DL) TYPE(DLTOBJ) FILE(PKE3CPP)           AB1235462;
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.MPR_Purchase_Type_Code);
  EXECUTE FUNCTION(Crt MPR Prdcr Purch   CR) TYPE(CRTOBJ) FILE(PKE3CPP)           AB1235460;
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.MPR_Purchase_Type_Code);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER('A');
  PARAMETER(PAR.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

 }

 ENDIF;

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Producer/Prd Addr IF) TYPE(EXCINTFUN) FILE(PKACREP)        AB1336164;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PD_Name);
PARAMETER(DTL.PD_Production_Capacity);
PARAMETER(DTL.PD_Std_Delv_Time);
PARAMETER(DTL.PD_Std_Truck_Size);
PARAMETER(DTL.PD_Freight_Exp_Paid_By);
PARAMETER(DTL.PD_Fax_Status);
PARAMETER(DTL.PD_VND_Address_Number);
PARAMETER(DTL.PD_EDI_Trading_Partner_#);
PARAMETER(DTL.PD_VND_Category);
PARAMETER(DTL.SR_Source_Code);
PARAMETER(DTL.HB_Buyer_Code);
PARAMETER(DTL.Commission_Producer_Payee);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.PD_VND_Address_Number);
PARAMETER(DTL.PD_Name);
PARAMETER(DTL.Producer_Address_1_USR);
PARAMETER(DTL.Producer_Address_2_USR);
PARAMETER(DTL.Producer_Address_3_USR);
PARAMETER(DTL.Producer_City_USR);
PARAMETER(DTL.Producer_State_USR);
PARAMETER(DTL.Producer_Zip_10_USR);
PARAMETER(DTL.Producer_Area_Code_USR);
PARAMETER(DTL.Producer_Phone_Number_USR);
PARAMETER(DTL.Producer_Fax_Area_Cd_USR);
PARAMETER(DTL.Producer_Fax_Phone_#_USR);
PARAMETER(DTL.Fax_Attn_1);
PARAMETER(DTL.Fax_Area_Code_#);
PARAMETER(DTL.Fax_Telephone);
PARAMETER(DTL.Fax_Attn_2);
PARAMETER(DTL.Vendor_1099);
PARAMETER(DTL.Vendor_Tax_Id);
PARAMETER(DTL.Country_Code_Usr);
PARAMETER(DTL.M3_Supplier_ID);
PARAMETER(DTL.MPR_Purchase_Type_Code);
{
 //?Execute internal function

 EXECUTE FUNCTION(Chg Producer          CH) TYPE(CHGOBJ) FILE(PKACREP)           AB1101532;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.Pass_Name);
 PARAMETER(PAR.PD_Production_Capacity);
 PARAMETER(PAR.PD_Std_Delv_Time);
 PARAMETER(PAR.PD_Std_Truck_Size);
 PARAMETER(PAR.PD_Freight_Exp_Paid_By);
 PARAMETER(PAR.PD_Fax_Status);
 PARAMETER(PAR.PD_VND_Address_Number);
 PARAMETER(PAR.PD_EDI_Trading_Partner_#);
 PARAMETER(PAR.PD_VND_Category);
 PARAMETER(PAR.SR_Source_Code);
 PARAMETER(PAR.HB_Buyer_Code);
 PARAMETER(PAR.Commission_Producer_Payee);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 EXECUTE FUNCTION(Chg Producer Address  CH) TYPE(CHGOBJ) FILE(PWAGREP)           AB1335161;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.Address_Number);
 PARAMETER(PAR.Pass_Name);
 PARAMETER(PAR.Address_1);
 PARAMETER(PAR.Address_2);
 PARAMETER(PAR.Address_3);
 PARAMETER(PAR.City);
 PARAMETER(PAR.State);
 PARAMETER(PAR.Zip);
 PARAMETER(PAR.Area_Code);
 PARAMETER(PAR.Telephone);
 PARAMETER(PAR.Fax_Area_Code_#);
 PARAMETER(PAR.Fax_Telephone);
 PARAMETER(PAR.Fax_Attn_1);
 PARAMETER(PAR.Fax_Area_Code_#_2);
 PARAMETER(PAR.Fax_Telephone_2);
 PARAMETER(PAR.Fax_Attn_2);
 PARAMETER(PAR.Vendor_1099);
 PARAMETER(PAR.Vendor_Tax_Id);
 PARAMETER(PAR.Country_Code);
 PARAMETER(PAR.RS_Record_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 EXECUTE FUNCTION(Chg Producer EXT2     CH) TYPE(CHGOBJ) FILE(PLB4REP)           AB1322069;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.M3_Supplier_ID);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Producer EXT2     CT) TYPE(CRTOBJ) FILE(PLB4REP)           AB1322068;
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.M3_Supplier_ID);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 //?Fax Attn 1
 CASE;

 // IF PAR.Fax Area Code # is Not Blank
 IF PAR.Fax_Area_Code_# <> *BLANK;

 // OR PAR.Fax Telephone is Not Blank
 OR PAR.Fax_Telephone <> *BLANK;

 EXECUTE FUNCTION(Upd Fax Detail        RT) TYPE(RTVOBJ) FILE(PKEAREP)           AB1206264;
 PARAMETER('HPE');
 PARAMETER(PAR.Fax_Area_Code_#);
 PARAMETER(PAR.Fax_Telephone);
 PARAMETER(PAR.Fax_Attn_1);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Create Fax Detail) TYPE(CRTOBJ) FILE(PKEAREP)                  AB1206170;
  PARAMETER(PAR.FD_Application_Code);
  PARAMETER(PAR.FD_Fax_Area_Code);
  PARAMETER(PAR.FD_Fax_Number);
  PARAMETER(PAR.FD_Fax_Attention);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER(PAR.RS_Record_Status);
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Change Fax Detail) TYPE(CHGOBJ) FILE(PKEAREP)                  AB1206171;
  PARAMETER(DB1.FD_Application_Code);
  PARAMETER(DB1.FD_Fax_Area_Code);
  PARAMETER(DB1.FD_Fax_Number);
  PARAMETER(PAR.FD_Fax_Attention);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 //?Fax Attn 2
 CASE;

 // IF PAR.Fax Area Code # 2 is Not Blank
 IF PAR.Fax_Area_Code_#_2 <> *BLANK;

 // OR PAR.Fax Telephone 2 is Not Blank
 OR PAR.Fax_Telephone_2 <> *BLANK;

 EXECUTE FUNCTION(Upd Fax Detail        RT) TYPE(RTVOBJ) FILE(PKEAREP)           AB1206264;
 PARAMETER('HPE');
 PARAMETER(PAR.Fax_Area_Code_#_2);
 PARAMETER(PAR.Fax_Telephone_2);
 PARAMETER(PAR.Fax_Attn_2);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Create Fax Detail) TYPE(CRTOBJ) FILE(PKEAREP)                  AB1206170;
  PARAMETER(PAR.FD_Application_Code);
  PARAMETER(PAR.FD_Fax_Area_Code);
  PARAMETER(PAR.FD_Fax_Number);
  PARAMETER(PAR.FD_Fax_Attention);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER(PAR.RS_Record_Status);
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Change Fax Detail) TYPE(CHGOBJ) FILE(PKEAREP)                  AB1206171;
  PARAMETER(DB1.FD_Application_Code);
  PARAMETER(DB1.FD_Fax_Area_Code);
  PARAMETER(DB1.FD_Fax_Number);
  PARAMETER(PAR.FD_Fax_Attention);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 //?MPR Producer Purchase Type
 CASE;

 // IF PAR.MPR Purchase Type Code is Entered
 IF PAR.MPR_Purchase_Type_Code > 0;

 EXECUTE FUNCTION(Rtv/Crt/Chg MPR PrPur RT) TYPE(RTVOBJ) FILE(PKE3CPP)           AB1235598;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.MPR_Purchase_Type_Code);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt MPR Prdcr Purch   CR) TYPE(CRTOBJ) FILE(PKE3CPP)           AB1235460;
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.MPR_Purchase_Type_Code);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  CASE;

  // IF PAR.MPR Purchase Type Code NE DB1.MPR Purchase Type Code
  IF PAR.MPR_Purchase_Type_Code <> DB1.MPR_Purchase_Type_Code;

  EXECUTE FUNCTION(Del MPR Prdcr Purch   DL) TYPE(DLTOBJ) FILE(PKE3CPP)           AB1235462;
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.MPR_Purchase_Type_Code);
  EXECUTE FUNCTION(Crt MPR Prdcr Purch   CR) TYPE(CRTOBJ) FILE(PKE3CPP)           AB1235460;
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.MPR_Purchase_Type_Code);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER('A');
  PARAMETER(PAR.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

 }

 ENDIF;

}


//?USER: Process command keys

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

RETURN;

ENDIF;

