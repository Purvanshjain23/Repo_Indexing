// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDTOXFR
// ?Date: 14.08.2025 Time: 03:29:52
// ?------------------------------------------------------------------------------------------------

//?Execute user function

// LCL.Job Name CDE = JOB.*JOB
LCL.Job_Name_CDE = JOB.*JOB;

// LCL.Job Number Cde = JOB.*Job number
LCL.Job_Number_Cde = JOB.*Job_number;

//?RMC 12/19/00 This print is run twice so dont delete the work rcd the 1stTm
EXECUTE FUNCTION(SEL Invoices to Print  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1334968;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Count_USR);
PARAMETER(PAR.Process_Cust_Types_Usr);
{
 //?USER: Initialize routine

 // PAR.Count USR = CON.*ZERO
 PAR.Count_USR = *ZERO;

 //?USER: Process Data record

 // PAR.Invoice Suffix = CND.Invoices
 PAR.Invoice_Suffix = 'IN';

 // PAR.Invoice Date = JOB.*Job date
 PAR.Invoice_Date = JOB.*Job_date;

 //?110405 slm Add logic to only select customers based on customer
 //?           type
 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 // Call program Sel Customer Type     XF.
 CALL PROGRAM(Sel Customer Type     XF) ('PPUOXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(LCL.Type_Code);
 PARAMETER(PAR.Process_Cust_Types_Usr);
 PARAMETER(PGM.*Record_selected);

 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF DB1.Billing Activity Type is Invoice
 IF DB1.Billing_Activity_Type = '1';

 //?Order is priced and Pre-Invc Reg printed
 CASE;

 // IF DB1.Price Status is Priced
 IF DB1.Price_Status = 'P';

 // AND DB1.Order Type Print Status is yes
 AND DB1.Order_Type_Print_Status = 'Y';

 //?Load Selected
 CASE;

 // IF PAR.Load ID is NE Blank
 IF PAR.Load_ID <> *ZERO;

 //?Print Invoice for order on the selected load
 CASE;

 // IF DB1.Load ID EQ PAR.Load ID
 IF DB1.Load_ID = PAR.Load_ID;

 // AND DB1.Actual Shipped Date is entered
 AND DB1.Actual_Shipped_Date <> *ZERO;

 EXECUTE FUNCTION(SEL Process Prt Invc   IF) TYPE(EXCINTFUN)                     AC1343794;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(PAR.Invoice_Number);
 PARAMETER(PAR.Invoice_Suffix);
 PARAMETER(PAR.Invoice_Date);
 PARAMETER('06');
 PARAMETER('N');
 PARAMETER(PAR.Count_USR);
 {
  //?Execute internal function

  //?2/18/05 PKD use company number 000
  EXECUTE FUNCTION(UPD Next Invoice Nbr   RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1323447;
  PARAMETER(*ZERO);
  PARAMETER(PAR.Invoice_Number);
  {
   //?USER: Process Data record

   //?2/18/05 PKD get invoice number from company 000
   EXECUTE FUNCTION(CHG Next Invoice Nbr   CH) TYPE(CHGOBJ) FILE(CAASREP)          AC1329962;
   PARAMETER(*ZERO);
   PARAMETER(PAR.Next_Invoice_Number);
   {
    //?USER: Processing before Data update

    //?Assumes Invoice numbers always automatically assigned
    // PGM.*Record Data Changed = CND.*YES
    PGM.*Record_Data_Changed = 'Y';

    // Call program Val Invoice Exists    XF.
    CALL PROGRAM(Val Invoice Exists    XF) ('PMQIXFR');
    PARAMETER(DB1.Next_Invoice_Number);
    PARAMETER(LCL.Record_Found_USR);

    // DOW LCL.Record Found USR is Record Found
    DOW LCL.Record_Found_USR = 'Y';

    // DB1.Next Invoice Number = DB1.Next Invoice Number + CON.1
    DB1.Next_Invoice_Number = DB1.Next_Invoice_Number + 1;

    // Call program Val Invoice Exists    XF.
    CALL PROGRAM(Val Invoice Exists    XF) ('PMQIXFR');
    PARAMETER(DB1.Next_Invoice_Number);
    PARAMETER(LCL.Record_Found_USR);

    ENDDO;

    // PAR.USR Next Invoice Number = DB1.Next Invoice Number
    PAR.USR_Next_Invoice_Number = DB1.Next_Invoice_Number;

    // DB1.Next Invoice Number = DB1.Next Invoice Number + CON.1
    DB1.Next_Invoice_Number = DB1.Next_Invoice_Number + 1;

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  EXECUTE FUNCTION(CHG Invoice #, Date    CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1335457;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Invoice_Number);
  PARAMETER(PAR.Invoice_Suffix);
  PARAMETER(PAR.Invoice_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // Call program TRG Order Hdr CHG Trig XT.
   CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Type_Sales);
   PARAMETER(DB1.AR_Customer_Number);
   PARAMETER(DB1.Ship_To_Customer);
   PARAMETER(DB1.Ship_To_Name);
   PARAMETER(DB1.Ship_To_Address_Line_1);
   PARAMETER(DB1.Ship_To_Address_Line_2);
   PARAMETER(DB1.Ship_To_Address_Line_3);
   PARAMETER(DB1.Ship_To_City);
   PARAMETER(DB1.Ship_To_State_Code);
   PARAMETER(DB1.Ship_To_Zip_Postal_Code);
   PARAMETER(DB1.Bill_to_Customer);
   PARAMETER(DB1.Bill_to_Name);
   PARAMETER(DB1.Bill_to_Address_Line_1);
   PARAMETER(DB1.Bill_to_Address_Line_2);
   PARAMETER(DB1.Bill_to_Address_Line_3);
   PARAMETER(DB1.Bill_to_City);
   PARAMETER(DB1.Bill_to_State_Code);
   PARAMETER(DB1.Bill_to_Zip_Postal_Code);
   PARAMETER(DB1.Customer_Purchase_Order_#);
   PARAMETER(DB1.Order_Date);
   PARAMETER(DB1.Requested_Ship_Date);
   PARAMETER(DB1.Actual_Shipped_Date);
   PARAMETER(DB1.Cancel_Date);
   PARAMETER(DB1.Terms_Code);
   PARAMETER(DB1.Special_Instructions);
   PARAMETER(DB1.Special_Instructions_2);
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Comment_Print_Acknowledge);
   PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
   PARAMETER(DB1.Comment_Print_Pick_Slip);
   PARAMETER(DB1.Comment_Print_Ship_Doc);
   PARAMETER(DB1.Reason_Code);
   PARAMETER(DB1.Order_in_Use);
   PARAMETER(DB1.Header_Status);
   PARAMETER(DB1.Header_Status_Last);
   PARAMETER(DB1.Order_Type_Print_Status);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.User_Original_Entry);
   PARAMETER(DB1.Date_of_Original_Entry);
   PARAMETER(DB1.Order_Value_Total);
   PARAMETER(DB1.Order_Weight_Total);
   PARAMETER(DB1.Credit_Hold);
   PARAMETER(DB1.Production_Hold);
   PARAMETER(DB1.New_Customer_Hold);
   PARAMETER(DB1.Requested_Delivery_Date);
   PARAMETER(DB1.Requested_Delivery_Time);
   PARAMETER(DB1.Accounts_Receiv_Ent_1);
   PARAMETER(DB1.Accounts_Receiv_Ent_2);
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
   PARAMETER(DB1.Rated_Freight);
   PARAMETER(DB1.LTL_Flag);
   PARAMETER(DB1.Price_Audit);
   PARAMETER(DB1.Price_Status);
   PARAMETER(DB1.Shipping_Method);
   PARAMETER(DB1.Export_Status);
   PARAMETER(DB1.Palletize);
   PARAMETER(DB1.Shrink_Wrap);
   PARAMETER(DB1.Slip_Sheet);
   PARAMETER(DB1.Age_Code);
   PARAMETER(DB1.Reefer_Temperature);
   PARAMETER(DB1.Load_Type);
   PARAMETER(DB1.Attach_to_Invoice_Number);
   PARAMETER(DB1.Load_Plan_Order);
   PARAMETER(DB1.Print_Pick_Slip);
   PARAMETER(DB1.Resell_Reference_Number);
   PARAMETER(DB1.Special_Comment_1);
   PARAMETER(DB1.Special_Comment_2);
   PARAMETER(DB1.Affect_Auto_Accruals);
   PARAMETER(DB1.Sales_Route_Code);
   PARAMETER(DB1.Manager_Level_Code);
   PARAMETER(DB1.VP_Level_Code);
   PARAMETER(DB1.Attach_to_Order_Number);
   PARAMETER(DB1.Reason_for_Price_Audit);
   PARAMETER(DB1.Invoice_Number);
   PARAMETER(DB1.Invoice_Suffix);
   PARAMETER(DB1.Invoice_Date);
   PARAMETER(DB1.Event_Code);
   PARAMETER(DB1.Trans_Contol_AS400_Plant);
   PARAMETER(DB1.Modified_Flag);
   PARAMETER(DB1.A_R_order_Value_Total);
   PARAMETER(DB1.Billing_Activity_Type);
   PARAMETER(DB1.Block_Order_Flag);
   PARAMETER(DB1.Order_Certification_Flag);
   PARAMETER(DB1.Invoice_Order_Value_Tot);
   PARAMETER(DB1.Process_Sts_for_3C);
   PARAMETER(DB1.Order_Conf_Fax_Sts);
   PARAMETER(DB1.Manifest_Fax_Sts);
   PARAMETER(DB1.Invoice_Fax_Sts);
   PARAMETER(DB1.Transfer_in_Storage_Ind);
   PARAMETER(DB1.Email_Cust_On_Order_Ship);
   PARAMETER(DB1.Order_Emailed);
   PARAMETER(DB1.Export_Docs_Go_w_Driver);
   PARAMETER(DB1.Shipping_Temp_Code_C_F);
   PARAMETER(DB1.Broker_Order_Status);
   PARAMETER(DB1.Air_Freight_Order);
   PARAMETER(DB1.Order_Requires_Review);
   PARAMETER(DB1.OH_Load_Plan_Ready);
   PARAMETER(DB1.Export_USDA_Approved);
   PARAMETER(DB1.HPB_Ship_to_Warehouse);
   PARAMETER(DB1.OH_TF_Exempt_Code);
   PARAMETER(DB1.OH_Appt_Confirmation_Dt);
   PARAMETER(DB1.JPN_Invoice_Issuance_Date);
   PARAMETER(DB1.Load_Actual_Shipped_Date);
   PARAMETER(DB1.Load_BOL_Complete_Date);
   PARAMETER(DB1.Load_Truck_Departure_Date);
   PARAMETER(DB1.Maximum_Gross_Weight);
   PARAMETER(DB1.Time_of_Original_Entry);
   PARAMETER(DB1.OH_Appt_Confirmation_Tm);
   PARAMETER(DB1.Load_BOL_Complete_Time);
   PARAMETER(DB1.Load_Truck_Departure_Time);
   PARAMETER(DB1.Act_Frt_Reference_Amount);
   PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
   PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
   PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
   PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
   PARAMETER(DB1.Claim_Number);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);

   //?USER: Processing after Data update

   //?E00196 10/3/12 RMC CAT2 calls regular pfs interface
   EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
   PARAMETER(DB1.Company_Number);
   PARAMETER('LDORDD');
   PARAMETER(LCL.PFS_AccuSort_Active);
   PARAMETER(LCL.PFS_Carlisle_Active);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.PFS Carlisle Active is Yes
   IF LCL.PFS_Carlisle_Active = 'Y';

   // Call program PFS Lock Load/Order   XF.
   CALL PROGRAM(PFS Lock Load/Order   XF) ('PPNLXFR');
   PARAMETER(DB1.Load_ID);

   ENDIF;

  }

  //?*----------------------------------------------------------------*
  //?P000198
  //?Retrieve Order information for creating Inv List Work & Combine Inv
  DO;

  EXECUTE FUNCTION(RTV Info for Invc Prt  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1324121;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Order_Type_Sales);
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER(LCL.Ship_To_Customer);
  PARAMETER(LCL.Ship_To_Name);
  PARAMETER(LCL.Ship_To_Address_Line_1);
  PARAMETER(LCL.Ship_To_Address_Line_2);
  PARAMETER(LCL.Ship_To_Address_Line_3);
  PARAMETER(LCL.Ship_To_City);
  PARAMETER(LCL.Ship_To_State_Code);
  PARAMETER(LCL.Ship_To_Zip_Postal_Code);
  PARAMETER(LCL.Bill_to_Customer);
  PARAMETER(LCL.Bill_to_Name);
  PARAMETER(LCL.Bill_to_Address_Line_1);
  PARAMETER(LCL.Bill_to_Address_Line_2);
  PARAMETER(LCL.Bill_to_Address_Line_3);
  PARAMETER(LCL.Bill_to_City);
  PARAMETER(LCL.Bill_to_State_Code);
  PARAMETER(LCL.Bill_to_Zip_Postal_Code);
  PARAMETER(LCL.Customer_Purchase_Order_#);
  PARAMETER(LCL.Order_Date);
  PARAMETER(LCL.Actual_Shipped_Date);
  PARAMETER(LCL.Terms_Code);
  PARAMETER(LCL.Carrier_Code);
  PARAMETER(LCL.Order_Value_Total);
  PARAMETER(LCL.Order_Weight_Total);
  PARAMETER(LCL.Load_ID);
  PARAMETER(LCL.Sales_Route_Code);
  PARAMETER(WRK.Invoice_Number);
  PARAMETER(LCL.Invoice_Date);
  PARAMETER(LCL.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV CDE 1st Fax only  IF) TYPE(EXCINTFUN)                      AC1981538;
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER('AR-INVOICE');
  PARAMETER(*ZERO);
  PARAMETER(WRK.CDE_Name);
  PARAMETER(WRK.CDE_Destination);
  {
   //?Execute internal function

   EXECUTE FUNCTION(RTV CDE 1st Fax only  RT) TYPE(RTVOBJ) FILE(PNF7REP)           AC1981532;
   PARAMETER(PAR.Ship_To_Customer);
   PARAMETER(PAR.Distribution_Code);
   PARAMETER(PAR.CDE_Sequence_Number);
   PARAMETER(PAR.CDE_Name);
   PARAMETER(PAR.CDE_Destination);
   {
    //?USER: Initialize routine

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    //?Return 1st active record with a fax number
    CASE;

    // IF DB1.CDE Destination Type is Fax
    IF DB1.CDE_Destination_Type = 'F';

    CASE;

    // IF DB1.Record Status is Active
    IF DB1.Record_Status = 'A';

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

    ENDIF;

    ENDIF;

   }

  }

  //?Set flag if faxing invoice                            P000198
  CASE;

  // IF WRK.CDE Name is Not Blank
  IF WRK.CDE_Name <> *BLANK;

  // LCL.Fax Invoice Flag = CND.Automatically Fax Invoice
  LCL.Fax_Invoice_Flag = 'Y';

  ENDIF;

  EXECUTE FUNCTION(RTV CDE 1st Eml only  RT) TYPE(RTVOBJ) FILE(PNF7REP)           AC1981686;
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER('AR-INVOICE');
  PARAMETER(*ZERO);
  PARAMETER(WRK.CDE_Name);
  PARAMETER(WRK.CDE_Destination);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   //?Return 1st active record with an email address
   CASE;

   // IF DB1.CDE Destination Type is Email
   IF DB1.CDE_Destination_Type = 'E';

   // OR DB1.CDE Destination Type is One Email/Invoice
   OR DB1.CDE_Destination_Type = 'O';

   //?R14851 4/15/19  RMC ADDED Type = O
   CASE;

   // IF DB1.Record Status is Active
   IF DB1.Record_Status = 'A';

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

   ENDIF;

   ENDIF;

  }

  //?Set flag if emailing invoice                          P000198
  CASE;

  // IF WRK.CDE Name is Not Blank
  IF WRK.CDE_Name <> *BLANK;

  //?** Set Fax Invoice Flag so the wf rec won't get deleted before
  //?** it gets faxed or invoiced.
  // LCL.Fax Invoice Flag = CND.Automatically Fax Invoice
  LCL.Fax_Invoice_Flag = 'Y';

  // LCL.Email Selection usr = CND.Email Selected
  LCL.Email_Selection_usr = 'E';

  ENDIF;

  EXECUTE FUNCTION(Rtv EDI/Prt Invoice   RT) TYPE(RTVOBJ) FILE(CABBREP)           AC1611523;
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER(LCL.EDI_Invoice_Sts);
  PARAMETER(LCL.Print_Invoice_Sts);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // Call program Rtv One Invoice /PO   XP.
  CALL PROGRAM(Rtv One Invoice /PO   XP) ('PMCOXFR');
  PARAMETER(LCL.Ship_To_Customer);
  PARAMETER(LCL.One_Invoice_Per_PO);

  //?credit memo
  CASE;

  // IF LCL.Billing Activity Type is Credit Memo
  IF LCL.Billing_Activity_Type = '2';

  // LCL.Order Value Total = CON.*ZERO - LCL.Order Value Total
  LCL.Order_Value_Total = *ZERO - LCL.Order_Value_Total;

  ENDIF;

  EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
  PARAMETER(PAR.Company_Number);
  PARAMETER(NLL.Plant_Company_Sts);
  PARAMETER(LCL.Company_Organization);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDDO;

  //?*----------------------------------------------------------------*
  // LCL.Job Name CDE = JOB.*JOB
  LCL.Job_Name_CDE = JOB.*JOB;

  // LCL.Job Number Cde = JOB.*Job number
  LCL.Job_Number_Cde = JOB.*Job_number;

  //?Create WF Inv/Memo Combo for combine invoices
  //?Print Invoice & crt WF Invoice List Work
  CASE;

  // IF LCL.Print Invoice Sts is no
  IF LCL.Print_Invoice_Sts = 'N';

  //?*** Print = N --> Crt Invoice List Work
  //?** Set fax invoice flag to Yes for fax/email program  P000198
  EXECUTE FUNCTION(CRT PD Invoice List Wk CR) TYPE(CRTOBJ) FILE(PDJ4CPP)          AC1339739;
  PARAMETER(JOB.*JOB);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Order_Value_Total);
  PARAMETER(LCL.Order_Weight_Total);
  PARAMETER(LCL.Ship_To_Name);
  PARAMETER(LCL.Bill_to_Name);
  PARAMETER('Y');
  PARAMETER(LCL.Ship_To_Customer);
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Invoice_Number);
  PARAMETER(PAR.Invoice_Suffix);
  {
   //?USER: Processing if Data record already exists

   // PGM.*Return code = CND.*Record already exists
   PGM.*Return_code = 'Y2U0003';

  }

  CASE;

  // IF LCL.One Invoice Per PO is Yes
  IF LCL.One_Invoice_Per_PO = 'Y';

  // AND LCL.Billing Activity Type is Invoice or Debit Memo
  AND LCL.Billing_Activity_Type = '3'/'1';

  // Call program CRT 1 WF Invoice/Cmb   XF.
  CALL PROGRAM(CRT 1 WF Invoice/Cmb   XF) ('PMCPXFR');
  PARAMETER(LCL.Job_Name_CDE);
  PARAMETER(LCL.Job_Number_Cde);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.One_Invoice_Per_PO);

  ENDIF;

  //?* Delete trailer if Seaboard & Print (not reprint)    E002966
  CASE;

  // IF LCL.Company Organization is Seaboard
  IF LCL.Company_Organization = 'S';

  CASE;

  // IF LCL.Billing Activity Type is Invoice
  IF LCL.Billing_Activity_Type = '1';

  EXECUTE FUNCTION(RTV Ld Id for Orders  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1912980;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Scheduled_Ship_Date);
  PARAMETER(LCL.Load_ID);
  PARAMETER(LCL.Load_Plan_Order);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // AND LCL.Load Plan Order is yes
  AND LCL.Load_Plan_Order = 'Y';

  EXECUTE FUNCTION(RTV Carrier & Trailer  RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC2038863;
  PARAMETER(LCL.Load_ID);
  PARAMETER(LCL.Trailer_Id);
  PARAMETER(LCL.Carrier_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV/DLT Assigned Trlr  RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC2086635;
  PARAMETER(LCL.Carrier_Code);
  PARAMETER(LCL.Trailer_Id);
  {
   //?USER: Processing if Data record not found

   //?* Not an error, may have been deleted from another order on load
   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   //?USER: Process Data record

   EXECUTE FUNCTION(DLT Trailer            DO) TYPE(DLTOBJ) FILE(PDLYREP)          AC1496470;
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Trailer_Id);
  }

  ENDIF;

  ENDIF;

  ENDIF;

  //?Print Invoice & crt WF Invoice List Work
  // IF LCL.One Invoice Per PO is Yes
  IF LCL.One_Invoice_Per_PO = 'Y';

  // AND LCL.Billing Activity Type is Invoice or Debit Memo
  AND LCL.Billing_Activity_Type = '3'/'1';

  //?12/06/2006 slm -- Do not print the org inv routine
  EXECUTE FUNCTION(CRT PD Invoice List Wk CR) TYPE(CRTOBJ) FILE(PDJ4CPP)          AC1339739;
  PARAMETER(JOB.*JOB);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Order_Value_Total);
  PARAMETER(LCL.Order_Weight_Total);
  PARAMETER(LCL.Ship_To_Name);
  PARAMETER(LCL.Bill_to_Name);
  PARAMETER('Y');
  PARAMETER(LCL.Ship_To_Customer);
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Invoice_Number);
  PARAMETER(PAR.Invoice_Suffix);
  {
   //?USER: Processing if Data record already exists

   // PGM.*Return code = CND.*Record already exists
   PGM.*Return_code = 'Y2U0003';

  }

  // Call program CRT 1 WF Invoice/Cmb   XF.
  CALL PROGRAM(CRT 1 WF Invoice/Cmb   XF) ('PMCPXFR');
  PARAMETER(LCL.Job_Name_CDE);
  PARAMETER(LCL.Job_Number_Cde);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.One_Invoice_Per_PO);

  //?* Delete trailer if Seaboard & Print (not reprint)    E002966
  CASE;

  // IF LCL.Company Organization is Seaboard
  IF LCL.Company_Organization = 'S';

  CASE;

  // IF LCL.Billing Activity Type is Invoice
  IF LCL.Billing_Activity_Type = '1';

  EXECUTE FUNCTION(RTV Ld Id for Orders  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1912980;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Scheduled_Ship_Date);
  PARAMETER(LCL.Load_ID);
  PARAMETER(LCL.Load_Plan_Order);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // AND LCL.Load Plan Order is yes
  AND LCL.Load_Plan_Order = 'Y';

  EXECUTE FUNCTION(RTV Carrier & Trailer  RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC2038863;
  PARAMETER(LCL.Load_ID);
  PARAMETER(LCL.Trailer_Id);
  PARAMETER(LCL.Carrier_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV/DLT Assigned Trlr  RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC2086635;
  PARAMETER(LCL.Carrier_Code);
  PARAMETER(LCL.Trailer_Id);
  {
   //?USER: Processing if Data record not found

   //?* Not an error, may have been deleted from another order on load
   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   //?USER: Process Data record

   EXECUTE FUNCTION(DLT Trailer            DO) TYPE(DLTOBJ) FILE(PDLYREP)          AC1496470;
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Trailer_Id);
  }

  ENDIF;

  ENDIF;

  ENDIF;

  //?Print Invoice & crt WF Invoice List Work
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?*** Print=Y --> Print Invoice. Print will create Invoice List Work
  //?If custom program then print the invoice custom program
  //?Department is INCST1
  // Call program RTV CDD for Overlays   XF.
  CALL PROGRAM(RTV CDD for Overlays   XF) ('PMG9XFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER('IN');
  PARAMETER('INCST1');
  PARAMETER(NLL.CDD_Name_of_Overlay);
  PARAMETER(LCL.CDD_Program_Name);
  PARAMETER(NLL.CDD_Printer_File_Name);
  PARAMETER(NLL.CDD_Additional_Object);
  PARAMETER(NLL.CDD_Sender_Phone);
  PARAMETER(NLL.CDD_Sender_Fax);
  PARAMETER(LCL.Output_Queue);
  PARAMETER(LCL.Hold_File);
  PARAMETER(LCL.Save_File);
  PARAMETER(LCL.Source_Drawer);
  PARAMETER(NLL.Printer_Device_Type);
  PARAMETER(NLL.Page_Length_2);
  PARAMETER(NLL.Page_Width_2);
  PARAMETER(NLL.Page_LPI);
  PARAMETER(NLL.Page_CPI);
  PARAMETER(NLL.Page_Overflow);
  PARAMETER(NLL.Page_Rotation);
  PARAMETER(NLL.CDD_Comment_1);
  PARAMETER(NLL.CDD_Comment_2);
  PARAMETER(NLL.CDD_Comment_3);
  PARAMETER(NLL.CDD_Comment_4);
  PARAMETER(NLL.CDD_Comment_5);
  PARAMETER(NLL.Record_Status);

  //?Print Invoice
  CASE;

  // IF LCL.CDD Program Name is Not entered
  IF LCL.CDD_Program_Name = *BLANK;

  // Call program PRT Inv/Memo 8LPI      PF.
  CALL PROGRAM(PRT Inv/Memo 8LPI      PF) ('PDR4PFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Printed_Status);

  //?Print Invoice
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?If Daily's or HPB
  CASE;

  // IF LCL.Company Organization is Daily's
  IF LCL.Company_Organization = 'D';

  //?This will be called three times Customer/Org/Office
  // Call program Zzz Inv/Memo 8LPI Dly  PF.
  CALL PROGRAM(Zzz Inv/Memo 8LPI Dly  PF) ('PMIVPFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Printed_Status);
  PARAMETER('CS');
  PARAMETER(LCL.Job_Name_CDE);

  // Call program Zzz Inv/Memo 8LPI Dly  PF.
  CALL PROGRAM(Zzz Inv/Memo 8LPI Dly  PF) ('PMIVPFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Printed_Status);
  PARAMETER('OF');
  PARAMETER(LCL.Job_Name_CDE);

  // Call program Zzz Inv/Memo 8LPI Dly  PF.
  CALL PROGRAM(Zzz Inv/Memo 8LPI Dly  PF) ('PMIVPFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Printed_Status);
  PARAMETER('OR');
  PARAMETER(LCL.Job_Name_CDE);

  //?If Daily's or HPB
  // IF LCL.Company Organization is High Plains Biodiesel
  IF LCL.Company_Organization = 'H';

  //?FP1110 7/21/08 RMC - Print HPB BOL if COA Batch# is on the Order
  // LCL.HPB COA Batch Number = CON.*ZERO
  LCL.HPB_COA_Batch_Number = *ZERO;

  EXECUTE FUNCTION(VAL OHE exsts for HPB RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC1892284;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.HPB_COA_Batch_Number);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.HPB COA Batch Number is Entered
  IF LCL.HPB_COA_Batch_Number > *ZERO;

  // AND LCL.Load ID is GT Zero
  AND LCL.Load_ID > *ZERO;

  // Call program PRT Bill of Lading-HPB PF.
  CALL PROGRAM(PRT Bill of Lading-HPB PF) ('PMO7PFR');
  PARAMETER(LCL.Load_ID);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Export_Status);

  ENDIF;

  // Call program PRT Inv/Memo 8LPI HPB  PF.
  CALL PROGRAM(PRT Inv/Memo 8LPI HPB  PF) ('PMRCPFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Printed_Status);

  ENDIF;

  ENDIF;

  //?* Delete trailer if Seaboard & Print (not reprint)    E002966
  CASE;

  // IF LCL.Company Organization is Seaboard
  IF LCL.Company_Organization = 'S';

  CASE;

  // IF LCL.Billing Activity Type is Invoice
  IF LCL.Billing_Activity_Type = '1';

  EXECUTE FUNCTION(RTV Ld Id for Orders  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1912980;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Scheduled_Ship_Date);
  PARAMETER(LCL.Load_ID);
  PARAMETER(LCL.Load_Plan_Order);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // AND LCL.Load Plan Order is yes
  AND LCL.Load_Plan_Order = 'Y';

  EXECUTE FUNCTION(RTV Carrier & Trailer  RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC2038863;
  PARAMETER(LCL.Load_ID);
  PARAMETER(LCL.Trailer_Id);
  PARAMETER(LCL.Carrier_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV/DLT Assigned Trlr  RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC2086635;
  PARAMETER(LCL.Carrier_Code);
  PARAMETER(LCL.Trailer_Id);
  {
   //?USER: Processing if Data record not found

   //?* Not an error, may have been deleted from another order on load
   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   //?USER: Process Data record

   EXECUTE FUNCTION(DLT Trailer            DO) TYPE(DLTOBJ) FILE(PDLYREP)          AC1496470;
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Trailer_Id);
  }

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  //?*----------------------------------------------------------------*
  EXECUTE FUNCTION(CRT Invoice Events     RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1346647;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Event_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Invoice_Number);
  PARAMETER(PAR.Invoice_Suffix);
  PARAMETER(PAR.Ship_To_Customer);
  {
   //?USER: Initialize routine

   // PAR.Event Number = CON.*ZERO
   PAR.Event_Number = *ZERO;

   EXECUTE FUNCTION(RTV Latest Event/Date  RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1280294;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Event_Number);
   PARAMETER(WRK.TXT_field_not_needed);
   PARAMETER(WRK.Numeric_Field_Not_Needed);
   PARAMETER(WRK.TXT_field_not_needed);
   PARAMETER(PAR.Ship_To_Customer);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(1);
   PARAMETER(PAR.Event_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(JOB.*Job_date);
   PARAMETER('Y');
   PARAMETER('N');
   PARAMETER('Y');
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?USER: Process Data record

   // PAR.Event Number = PAR.Event Number + CON.1
   PAR.Event_Number = PAR.Event_Number + 1;

   EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Event_Number);
   PARAMETER(PAR.Event_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Invoice_Memo_Number);
   PARAMETER(PAR.Invoice_Memo_Suffix);
   PARAMETER(JOB.*Job_date);
   PARAMETER('Y');
   PARAMETER('N');
   PARAMETER('N');
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Ship_To_Customer);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   QUIT;

  }

  EXECUTE FUNCTION(UPD Event: Hdr,O/S Dtl RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1335273;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Event_Code);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(UPD Event: Ship Detail RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1335289;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Event_Code);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(CHG Shipping Event     CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1325667;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Event_Code);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

   }

   EXECUTE FUNCTION(CHG Ord Event & Stat.  CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1306469;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Header_Status);
   PARAMETER(DB1.Header_Status_Last);
   PARAMETER(PAR.Event_Code);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // Call program TRG Order Hdr CHG Trig XT.
    CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Type_Sales);
    PARAMETER(DB1.AR_Customer_Number);
    PARAMETER(DB1.Ship_To_Customer);
    PARAMETER(DB1.Ship_To_Name);
    PARAMETER(DB1.Ship_To_Address_Line_1);
    PARAMETER(DB1.Ship_To_Address_Line_2);
    PARAMETER(DB1.Ship_To_Address_Line_3);
    PARAMETER(DB1.Ship_To_City);
    PARAMETER(DB1.Ship_To_State_Code);
    PARAMETER(DB1.Ship_To_Zip_Postal_Code);
    PARAMETER(DB1.Bill_to_Customer);
    PARAMETER(DB1.Bill_to_Name);
    PARAMETER(DB1.Bill_to_Address_Line_1);
    PARAMETER(DB1.Bill_to_Address_Line_2);
    PARAMETER(DB1.Bill_to_Address_Line_3);
    PARAMETER(DB1.Bill_to_City);
    PARAMETER(DB1.Bill_to_State_Code);
    PARAMETER(DB1.Bill_to_Zip_Postal_Code);
    PARAMETER(DB1.Customer_Purchase_Order_#);
    PARAMETER(DB1.Order_Date);
    PARAMETER(DB1.Requested_Ship_Date);
    PARAMETER(DB1.Actual_Shipped_Date);
    PARAMETER(DB1.Cancel_Date);
    PARAMETER(DB1.Terms_Code);
    PARAMETER(DB1.Special_Instructions);
    PARAMETER(DB1.Special_Instructions_2);
    PARAMETER(DB1.Carrier_Code);
    PARAMETER(DB1.Comment_Print_Acknowledge);
    PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
    PARAMETER(DB1.Comment_Print_Pick_Slip);
    PARAMETER(DB1.Comment_Print_Ship_Doc);
    PARAMETER(DB1.Reason_Code);
    PARAMETER(DB1.Order_in_Use);
    PARAMETER(DB1.Header_Status);
    PARAMETER(DB1.Header_Status_Last);
    PARAMETER(DB1.Order_Type_Print_Status);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.User_Original_Entry);
    PARAMETER(DB1.Date_of_Original_Entry);
    PARAMETER(DB1.Order_Value_Total);
    PARAMETER(DB1.Order_Weight_Total);
    PARAMETER(DB1.Credit_Hold);
    PARAMETER(DB1.Production_Hold);
    PARAMETER(DB1.New_Customer_Hold);
    PARAMETER(DB1.Requested_Delivery_Date);
    PARAMETER(DB1.Requested_Delivery_Time);
    PARAMETER(DB1.Accounts_Receiv_Ent_1);
    PARAMETER(DB1.Accounts_Receiv_Ent_2);
    PARAMETER(DB1.Load_ID);
    PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
    PARAMETER(DB1.Rated_Freight);
    PARAMETER(DB1.LTL_Flag);
    PARAMETER(DB1.Price_Audit);
    PARAMETER(DB1.Price_Status);
    PARAMETER(DB1.Shipping_Method);
    PARAMETER(DB1.Export_Status);
    PARAMETER(DB1.Palletize);
    PARAMETER(DB1.Shrink_Wrap);
    PARAMETER(DB1.Slip_Sheet);
    PARAMETER(DB1.Age_Code);
    PARAMETER(DB1.Reefer_Temperature);
    PARAMETER(DB1.Load_Type);
    PARAMETER(DB1.Attach_to_Invoice_Number);
    PARAMETER(DB1.Load_Plan_Order);
    PARAMETER(DB1.Print_Pick_Slip);
    PARAMETER(DB1.Resell_Reference_Number);
    PARAMETER(DB1.Special_Comment_1);
    PARAMETER(DB1.Special_Comment_2);
    PARAMETER(DB1.Affect_Auto_Accruals);
    PARAMETER(DB1.Sales_Route_Code);
    PARAMETER(DB1.Manager_Level_Code);
    PARAMETER(DB1.VP_Level_Code);
    PARAMETER(DB1.Attach_to_Order_Number);
    PARAMETER(DB1.Reason_for_Price_Audit);
    PARAMETER(DB1.Invoice_Number);
    PARAMETER(DB1.Invoice_Suffix);
    PARAMETER(DB1.Invoice_Date);
    PARAMETER(DB1.Event_Code);
    PARAMETER(DB1.Trans_Contol_AS400_Plant);
    PARAMETER(DB1.Modified_Flag);
    PARAMETER(DB1.A_R_order_Value_Total);
    PARAMETER(DB1.Billing_Activity_Type);
    PARAMETER(DB1.Block_Order_Flag);
    PARAMETER(DB1.Order_Certification_Flag);
    PARAMETER(DB1.Invoice_Order_Value_Tot);
    PARAMETER(DB1.Process_Sts_for_3C);
    PARAMETER(DB1.Order_Conf_Fax_Sts);
    PARAMETER(DB1.Manifest_Fax_Sts);
    PARAMETER(DB1.Invoice_Fax_Sts);
    PARAMETER(DB1.Transfer_in_Storage_Ind);
    PARAMETER(DB1.Email_Cust_On_Order_Ship);
    PARAMETER(DB1.Order_Emailed);
    PARAMETER(DB1.Export_Docs_Go_w_Driver);
    PARAMETER(DB1.Shipping_Temp_Code_C_F);
    PARAMETER(DB1.Broker_Order_Status);
    PARAMETER(DB1.Air_Freight_Order);
    PARAMETER(DB1.Order_Requires_Review);
    PARAMETER(DB1.OH_Load_Plan_Ready);
    PARAMETER(DB1.Export_USDA_Approved);
    PARAMETER(DB1.HPB_Ship_to_Warehouse);
    PARAMETER(DB1.OH_TF_Exempt_Code);
    PARAMETER(DB1.OH_Appt_Confirmation_Dt);
    PARAMETER(DB1.JPN_Invoice_Issuance_Date);
    PARAMETER(DB1.Load_Actual_Shipped_Date);
    PARAMETER(DB1.Load_BOL_Complete_Date);
    PARAMETER(DB1.Load_Truck_Departure_Date);
    PARAMETER(DB1.Maximum_Gross_Weight);
    PARAMETER(DB1.Time_of_Original_Entry);
    PARAMETER(DB1.OH_Appt_Confirmation_Tm);
    PARAMETER(DB1.Load_BOL_Complete_Time);
    PARAMETER(DB1.Load_Truck_Departure_Time);
    PARAMETER(DB1.Act_Frt_Reference_Amount);
    PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
    PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
    PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
    PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
    PARAMETER(DB1.Claim_Number);
    PARAMETER(DB1.EDI_Status_1);
    PARAMETER(DB1.EDI_Status_2);
    PARAMETER(DB1.EDI_Status_3);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);

   }

  }

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

 }

 ENDIF;

 ENDIF;

 //?Order Selected
 CASE;

 // IF PAR.Order Number is Not equal to zeros
 IF PAR.Order_Number <> *ZERO;

 //?Print Invoice for order selected
 CASE;

 // IF DB1.Actual Shipped Date is entered
 IF DB1.Actual_Shipped_Date <> *ZERO;

 // AND PAR.Order Number EQ DB1.Order Number
 AND PAR.Order_Number = DB1.Order_Number;

 EXECUTE FUNCTION(SEL Process Prt Invc   IF) TYPE(EXCINTFUN)                     AC1343794;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(PAR.Invoice_Number);
 PARAMETER(PAR.Invoice_Suffix);
 PARAMETER(PAR.Invoice_Date);
 PARAMETER('06');
 PARAMETER('N');
 PARAMETER(PAR.Count_USR);
 {
  //?Execute internal function

  //?2/18/05 PKD use company number 000
  EXECUTE FUNCTION(UPD Next Invoice Nbr   RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1323447;
  PARAMETER(*ZERO);
  PARAMETER(PAR.Invoice_Number);
  {
   //?USER: Process Data record

   //?2/18/05 PKD get invoice number from company 000
   EXECUTE FUNCTION(CHG Next Invoice Nbr   CH) TYPE(CHGOBJ) FILE(CAASREP)          AC1329962;
   PARAMETER(*ZERO);
   PARAMETER(PAR.Next_Invoice_Number);
   {
    //?USER: Processing before Data update

    //?Assumes Invoice numbers always automatically assigned
    // PGM.*Record Data Changed = CND.*YES
    PGM.*Record_Data_Changed = 'Y';

    // Call program Val Invoice Exists    XF.
    CALL PROGRAM(Val Invoice Exists    XF) ('PMQIXFR');
    PARAMETER(DB1.Next_Invoice_Number);
    PARAMETER(LCL.Record_Found_USR);

    // DOW LCL.Record Found USR is Record Found
    DOW LCL.Record_Found_USR = 'Y';

    // DB1.Next Invoice Number = DB1.Next Invoice Number + CON.1
    DB1.Next_Invoice_Number = DB1.Next_Invoice_Number + 1;

    // Call program Val Invoice Exists    XF.
    CALL PROGRAM(Val Invoice Exists    XF) ('PMQIXFR');
    PARAMETER(DB1.Next_Invoice_Number);
    PARAMETER(LCL.Record_Found_USR);

    ENDDO;

    // PAR.USR Next Invoice Number = DB1.Next Invoice Number
    PAR.USR_Next_Invoice_Number = DB1.Next_Invoice_Number;

    // DB1.Next Invoice Number = DB1.Next Invoice Number + CON.1
    DB1.Next_Invoice_Number = DB1.Next_Invoice_Number + 1;

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  EXECUTE FUNCTION(CHG Invoice #, Date    CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1335457;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Invoice_Number);
  PARAMETER(PAR.Invoice_Suffix);
  PARAMETER(PAR.Invoice_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // Call program TRG Order Hdr CHG Trig XT.
   CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Type_Sales);
   PARAMETER(DB1.AR_Customer_Number);
   PARAMETER(DB1.Ship_To_Customer);
   PARAMETER(DB1.Ship_To_Name);
   PARAMETER(DB1.Ship_To_Address_Line_1);
   PARAMETER(DB1.Ship_To_Address_Line_2);
   PARAMETER(DB1.Ship_To_Address_Line_3);
   PARAMETER(DB1.Ship_To_City);
   PARAMETER(DB1.Ship_To_State_Code);
   PARAMETER(DB1.Ship_To_Zip_Postal_Code);
   PARAMETER(DB1.Bill_to_Customer);
   PARAMETER(DB1.Bill_to_Name);
   PARAMETER(DB1.Bill_to_Address_Line_1);
   PARAMETER(DB1.Bill_to_Address_Line_2);
   PARAMETER(DB1.Bill_to_Address_Line_3);
   PARAMETER(DB1.Bill_to_City);
   PARAMETER(DB1.Bill_to_State_Code);
   PARAMETER(DB1.Bill_to_Zip_Postal_Code);
   PARAMETER(DB1.Customer_Purchase_Order_#);
   PARAMETER(DB1.Order_Date);
   PARAMETER(DB1.Requested_Ship_Date);
   PARAMETER(DB1.Actual_Shipped_Date);
   PARAMETER(DB1.Cancel_Date);
   PARAMETER(DB1.Terms_Code);
   PARAMETER(DB1.Special_Instructions);
   PARAMETER(DB1.Special_Instructions_2);
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Comment_Print_Acknowledge);
   PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
   PARAMETER(DB1.Comment_Print_Pick_Slip);
   PARAMETER(DB1.Comment_Print_Ship_Doc);
   PARAMETER(DB1.Reason_Code);
   PARAMETER(DB1.Order_in_Use);
   PARAMETER(DB1.Header_Status);
   PARAMETER(DB1.Header_Status_Last);
   PARAMETER(DB1.Order_Type_Print_Status);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.User_Original_Entry);
   PARAMETER(DB1.Date_of_Original_Entry);
   PARAMETER(DB1.Order_Value_Total);
   PARAMETER(DB1.Order_Weight_Total);
   PARAMETER(DB1.Credit_Hold);
   PARAMETER(DB1.Production_Hold);
   PARAMETER(DB1.New_Customer_Hold);
   PARAMETER(DB1.Requested_Delivery_Date);
   PARAMETER(DB1.Requested_Delivery_Time);
   PARAMETER(DB1.Accounts_Receiv_Ent_1);
   PARAMETER(DB1.Accounts_Receiv_Ent_2);
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
   PARAMETER(DB1.Rated_Freight);
   PARAMETER(DB1.LTL_Flag);
   PARAMETER(DB1.Price_Audit);
   PARAMETER(DB1.Price_Status);
   PARAMETER(DB1.Shipping_Method);
   PARAMETER(DB1.Export_Status);
   PARAMETER(DB1.Palletize);
   PARAMETER(DB1.Shrink_Wrap);
   PARAMETER(DB1.Slip_Sheet);
   PARAMETER(DB1.Age_Code);
   PARAMETER(DB1.Reefer_Temperature);
   PARAMETER(DB1.Load_Type);
   PARAMETER(DB1.Attach_to_Invoice_Number);
   PARAMETER(DB1.Load_Plan_Order);
   PARAMETER(DB1.Print_Pick_Slip);
   PARAMETER(DB1.Resell_Reference_Number);
   PARAMETER(DB1.Special_Comment_1);
   PARAMETER(DB1.Special_Comment_2);
   PARAMETER(DB1.Affect_Auto_Accruals);
   PARAMETER(DB1.Sales_Route_Code);
   PARAMETER(DB1.Manager_Level_Code);
   PARAMETER(DB1.VP_Level_Code);
   PARAMETER(DB1.Attach_to_Order_Number);
   PARAMETER(DB1.Reason_for_Price_Audit);
   PARAMETER(DB1.Invoice_Number);
   PARAMETER(DB1.Invoice_Suffix);
   PARAMETER(DB1.Invoice_Date);
   PARAMETER(DB1.Event_Code);
   PARAMETER(DB1.Trans_Contol_AS400_Plant);
   PARAMETER(DB1.Modified_Flag);
   PARAMETER(DB1.A_R_order_Value_Total);
   PARAMETER(DB1.Billing_Activity_Type);
   PARAMETER(DB1.Block_Order_Flag);
   PARAMETER(DB1.Order_Certification_Flag);
   PARAMETER(DB1.Invoice_Order_Value_Tot);
   PARAMETER(DB1.Process_Sts_for_3C);
   PARAMETER(DB1.Order_Conf_Fax_Sts);
   PARAMETER(DB1.Manifest_Fax_Sts);
   PARAMETER(DB1.Invoice_Fax_Sts);
   PARAMETER(DB1.Transfer_in_Storage_Ind);
   PARAMETER(DB1.Email_Cust_On_Order_Ship);
   PARAMETER(DB1.Order_Emailed);
   PARAMETER(DB1.Export_Docs_Go_w_Driver);
   PARAMETER(DB1.Shipping_Temp_Code_C_F);
   PARAMETER(DB1.Broker_Order_Status);
   PARAMETER(DB1.Air_Freight_Order);
   PARAMETER(DB1.Order_Requires_Review);
   PARAMETER(DB1.OH_Load_Plan_Ready);
   PARAMETER(DB1.Export_USDA_Approved);
   PARAMETER(DB1.HPB_Ship_to_Warehouse);
   PARAMETER(DB1.OH_TF_Exempt_Code);
   PARAMETER(DB1.OH_Appt_Confirmation_Dt);
   PARAMETER(DB1.JPN_Invoice_Issuance_Date);
   PARAMETER(DB1.Load_Actual_Shipped_Date);
   PARAMETER(DB1.Load_BOL_Complete_Date);
   PARAMETER(DB1.Load_Truck_Departure_Date);
   PARAMETER(DB1.Maximum_Gross_Weight);
   PARAMETER(DB1.Time_of_Original_Entry);
   PARAMETER(DB1.OH_Appt_Confirmation_Tm);
   PARAMETER(DB1.Load_BOL_Complete_Time);
   PARAMETER(DB1.Load_Truck_Departure_Time);
   PARAMETER(DB1.Act_Frt_Reference_Amount);
   PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
   PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
   PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
   PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
   PARAMETER(DB1.Claim_Number);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);

   //?USER: Processing after Data update

   //?E00196 10/3/12 RMC CAT2 calls regular pfs interface
   EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
   PARAMETER(DB1.Company_Number);
   PARAMETER('LDORDD');
   PARAMETER(LCL.PFS_AccuSort_Active);
   PARAMETER(LCL.PFS_Carlisle_Active);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.PFS Carlisle Active is Yes
   IF LCL.PFS_Carlisle_Active = 'Y';

   // Call program PFS Lock Load/Order   XF.
   CALL PROGRAM(PFS Lock Load/Order   XF) ('PPNLXFR');
   PARAMETER(DB1.Load_ID);

   ENDIF;

  }

  //?*----------------------------------------------------------------*
  //?P000198
  //?Retrieve Order information for creating Inv List Work & Combine Inv
  DO;

  EXECUTE FUNCTION(RTV Info for Invc Prt  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1324121;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Order_Type_Sales);
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER(LCL.Ship_To_Customer);
  PARAMETER(LCL.Ship_To_Name);
  PARAMETER(LCL.Ship_To_Address_Line_1);
  PARAMETER(LCL.Ship_To_Address_Line_2);
  PARAMETER(LCL.Ship_To_Address_Line_3);
  PARAMETER(LCL.Ship_To_City);
  PARAMETER(LCL.Ship_To_State_Code);
  PARAMETER(LCL.Ship_To_Zip_Postal_Code);
  PARAMETER(LCL.Bill_to_Customer);
  PARAMETER(LCL.Bill_to_Name);
  PARAMETER(LCL.Bill_to_Address_Line_1);
  PARAMETER(LCL.Bill_to_Address_Line_2);
  PARAMETER(LCL.Bill_to_Address_Line_3);
  PARAMETER(LCL.Bill_to_City);
  PARAMETER(LCL.Bill_to_State_Code);
  PARAMETER(LCL.Bill_to_Zip_Postal_Code);
  PARAMETER(LCL.Customer_Purchase_Order_#);
  PARAMETER(LCL.Order_Date);
  PARAMETER(LCL.Actual_Shipped_Date);
  PARAMETER(LCL.Terms_Code);
  PARAMETER(LCL.Carrier_Code);
  PARAMETER(LCL.Order_Value_Total);
  PARAMETER(LCL.Order_Weight_Total);
  PARAMETER(LCL.Load_ID);
  PARAMETER(LCL.Sales_Route_Code);
  PARAMETER(WRK.Invoice_Number);
  PARAMETER(LCL.Invoice_Date);
  PARAMETER(LCL.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV CDE 1st Fax only  IF) TYPE(EXCINTFUN)                      AC1981538;
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER('AR-INVOICE');
  PARAMETER(*ZERO);
  PARAMETER(WRK.CDE_Name);
  PARAMETER(WRK.CDE_Destination);
  {
   //?Execute internal function

   EXECUTE FUNCTION(RTV CDE 1st Fax only  RT) TYPE(RTVOBJ) FILE(PNF7REP)           AC1981532;
   PARAMETER(PAR.Ship_To_Customer);
   PARAMETER(PAR.Distribution_Code);
   PARAMETER(PAR.CDE_Sequence_Number);
   PARAMETER(PAR.CDE_Name);
   PARAMETER(PAR.CDE_Destination);
   {
    //?USER: Initialize routine

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    //?Return 1st active record with a fax number
    CASE;

    // IF DB1.CDE Destination Type is Fax
    IF DB1.CDE_Destination_Type = 'F';

    CASE;

    // IF DB1.Record Status is Active
    IF DB1.Record_Status = 'A';

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

    ENDIF;

    ENDIF;

   }

  }

  //?Set flag if faxing invoice                            P000198
  CASE;

  // IF WRK.CDE Name is Not Blank
  IF WRK.CDE_Name <> *BLANK;

  // LCL.Fax Invoice Flag = CND.Automatically Fax Invoice
  LCL.Fax_Invoice_Flag = 'Y';

  ENDIF;

  EXECUTE FUNCTION(RTV CDE 1st Eml only  RT) TYPE(RTVOBJ) FILE(PNF7REP)           AC1981686;
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER('AR-INVOICE');
  PARAMETER(*ZERO);
  PARAMETER(WRK.CDE_Name);
  PARAMETER(WRK.CDE_Destination);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   //?Return 1st active record with an email address
   CASE;

   // IF DB1.CDE Destination Type is Email
   IF DB1.CDE_Destination_Type = 'E';

   // OR DB1.CDE Destination Type is One Email/Invoice
   OR DB1.CDE_Destination_Type = 'O';

   //?R14851 4/15/19  RMC ADDED Type = O
   CASE;

   // IF DB1.Record Status is Active
   IF DB1.Record_Status = 'A';

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

   ENDIF;

   ENDIF;

  }

  //?Set flag if emailing invoice                          P000198
  CASE;

  // IF WRK.CDE Name is Not Blank
  IF WRK.CDE_Name <> *BLANK;

  //?** Set Fax Invoice Flag so the wf rec won't get deleted before
  //?** it gets faxed or invoiced.
  // LCL.Fax Invoice Flag = CND.Automatically Fax Invoice
  LCL.Fax_Invoice_Flag = 'Y';

  // LCL.Email Selection usr = CND.Email Selected
  LCL.Email_Selection_usr = 'E';

  ENDIF;

  EXECUTE FUNCTION(Rtv EDI/Prt Invoice   RT) TYPE(RTVOBJ) FILE(CABBREP)           AC1611523;
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER(LCL.EDI_Invoice_Sts);
  PARAMETER(LCL.Print_Invoice_Sts);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // Call program Rtv One Invoice /PO   XP.
  CALL PROGRAM(Rtv One Invoice /PO   XP) ('PMCOXFR');
  PARAMETER(LCL.Ship_To_Customer);
  PARAMETER(LCL.One_Invoice_Per_PO);

  //?credit memo
  CASE;

  // IF LCL.Billing Activity Type is Credit Memo
  IF LCL.Billing_Activity_Type = '2';

  // LCL.Order Value Total = CON.*ZERO - LCL.Order Value Total
  LCL.Order_Value_Total = *ZERO - LCL.Order_Value_Total;

  ENDIF;

  EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
  PARAMETER(PAR.Company_Number);
  PARAMETER(NLL.Plant_Company_Sts);
  PARAMETER(LCL.Company_Organization);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDDO;

  //?*----------------------------------------------------------------*
  // LCL.Job Name CDE = JOB.*JOB
  LCL.Job_Name_CDE = JOB.*JOB;

  // LCL.Job Number Cde = JOB.*Job number
  LCL.Job_Number_Cde = JOB.*Job_number;

  //?Create WF Inv/Memo Combo for combine invoices
  //?Print Invoice & crt WF Invoice List Work
  CASE;

  // IF LCL.Print Invoice Sts is no
  IF LCL.Print_Invoice_Sts = 'N';

  //?*** Print = N --> Crt Invoice List Work
  //?** Set fax invoice flag to Yes for fax/email program  P000198
  EXECUTE FUNCTION(CRT PD Invoice List Wk CR) TYPE(CRTOBJ) FILE(PDJ4CPP)          AC1339739;
  PARAMETER(JOB.*JOB);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Order_Value_Total);
  PARAMETER(LCL.Order_Weight_Total);
  PARAMETER(LCL.Ship_To_Name);
  PARAMETER(LCL.Bill_to_Name);
  PARAMETER('Y');
  PARAMETER(LCL.Ship_To_Customer);
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Invoice_Number);
  PARAMETER(PAR.Invoice_Suffix);
  {
   //?USER: Processing if Data record already exists

   // PGM.*Return code = CND.*Record already exists
   PGM.*Return_code = 'Y2U0003';

  }

  CASE;

  // IF LCL.One Invoice Per PO is Yes
  IF LCL.One_Invoice_Per_PO = 'Y';

  // AND LCL.Billing Activity Type is Invoice or Debit Memo
  AND LCL.Billing_Activity_Type = '3'/'1';

  // Call program CRT 1 WF Invoice/Cmb   XF.
  CALL PROGRAM(CRT 1 WF Invoice/Cmb   XF) ('PMCPXFR');
  PARAMETER(LCL.Job_Name_CDE);
  PARAMETER(LCL.Job_Number_Cde);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.One_Invoice_Per_PO);

  ENDIF;

  //?* Delete trailer if Seaboard & Print (not reprint)    E002966
  CASE;

  // IF LCL.Company Organization is Seaboard
  IF LCL.Company_Organization = 'S';

  CASE;

  // IF LCL.Billing Activity Type is Invoice
  IF LCL.Billing_Activity_Type = '1';

  EXECUTE FUNCTION(RTV Ld Id for Orders  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1912980;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Scheduled_Ship_Date);
  PARAMETER(LCL.Load_ID);
  PARAMETER(LCL.Load_Plan_Order);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // AND LCL.Load Plan Order is yes
  AND LCL.Load_Plan_Order = 'Y';

  EXECUTE FUNCTION(RTV Carrier & Trailer  RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC2038863;
  PARAMETER(LCL.Load_ID);
  PARAMETER(LCL.Trailer_Id);
  PARAMETER(LCL.Carrier_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV/DLT Assigned Trlr  RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC2086635;
  PARAMETER(LCL.Carrier_Code);
  PARAMETER(LCL.Trailer_Id);
  {
   //?USER: Processing if Data record not found

   //?* Not an error, may have been deleted from another order on load
   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   //?USER: Process Data record

   EXECUTE FUNCTION(DLT Trailer            DO) TYPE(DLTOBJ) FILE(PDLYREP)          AC1496470;
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Trailer_Id);
  }

  ENDIF;

  ENDIF;

  ENDIF;

  //?Print Invoice & crt WF Invoice List Work
  // IF LCL.One Invoice Per PO is Yes
  IF LCL.One_Invoice_Per_PO = 'Y';

  // AND LCL.Billing Activity Type is Invoice or Debit Memo
  AND LCL.Billing_Activity_Type = '3'/'1';

  //?12/06/2006 slm -- Do not print the org inv routine
  EXECUTE FUNCTION(CRT PD Invoice List Wk CR) TYPE(CRTOBJ) FILE(PDJ4CPP)          AC1339739;
  PARAMETER(JOB.*JOB);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Order_Value_Total);
  PARAMETER(LCL.Order_Weight_Total);
  PARAMETER(LCL.Ship_To_Name);
  PARAMETER(LCL.Bill_to_Name);
  PARAMETER('Y');
  PARAMETER(LCL.Ship_To_Customer);
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Invoice_Number);
  PARAMETER(PAR.Invoice_Suffix);
  {
   //?USER: Processing if Data record already exists

   // PGM.*Return code = CND.*Record already exists
   PGM.*Return_code = 'Y2U0003';

  }

  // Call program CRT 1 WF Invoice/Cmb   XF.
  CALL PROGRAM(CRT 1 WF Invoice/Cmb   XF) ('PMCPXFR');
  PARAMETER(LCL.Job_Name_CDE);
  PARAMETER(LCL.Job_Number_Cde);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.One_Invoice_Per_PO);

  //?* Delete trailer if Seaboard & Print (not reprint)    E002966
  CASE;

  // IF LCL.Company Organization is Seaboard
  IF LCL.Company_Organization = 'S';

  CASE;

  // IF LCL.Billing Activity Type is Invoice
  IF LCL.Billing_Activity_Type = '1';

  EXECUTE FUNCTION(RTV Ld Id for Orders  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1912980;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Scheduled_Ship_Date);
  PARAMETER(LCL.Load_ID);
  PARAMETER(LCL.Load_Plan_Order);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // AND LCL.Load Plan Order is yes
  AND LCL.Load_Plan_Order = 'Y';

  EXECUTE FUNCTION(RTV Carrier & Trailer  RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC2038863;
  PARAMETER(LCL.Load_ID);
  PARAMETER(LCL.Trailer_Id);
  PARAMETER(LCL.Carrier_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV/DLT Assigned Trlr  RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC2086635;
  PARAMETER(LCL.Carrier_Code);
  PARAMETER(LCL.Trailer_Id);
  {
   //?USER: Processing if Data record not found

   //?* Not an error, may have been deleted from another order on load
   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   //?USER: Process Data record

   EXECUTE FUNCTION(DLT Trailer            DO) TYPE(DLTOBJ) FILE(PDLYREP)          AC1496470;
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Trailer_Id);
  }

  ENDIF;

  ENDIF;

  ENDIF;

  //?Print Invoice & crt WF Invoice List Work
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?*** Print=Y --> Print Invoice. Print will create Invoice List Work
  //?If custom program then print the invoice custom program
  //?Department is INCST1
  // Call program RTV CDD for Overlays   XF.
  CALL PROGRAM(RTV CDD for Overlays   XF) ('PMG9XFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER('IN');
  PARAMETER('INCST1');
  PARAMETER(NLL.CDD_Name_of_Overlay);
  PARAMETER(LCL.CDD_Program_Name);
  PARAMETER(NLL.CDD_Printer_File_Name);
  PARAMETER(NLL.CDD_Additional_Object);
  PARAMETER(NLL.CDD_Sender_Phone);
  PARAMETER(NLL.CDD_Sender_Fax);
  PARAMETER(LCL.Output_Queue);
  PARAMETER(LCL.Hold_File);
  PARAMETER(LCL.Save_File);
  PARAMETER(LCL.Source_Drawer);
  PARAMETER(NLL.Printer_Device_Type);
  PARAMETER(NLL.Page_Length_2);
  PARAMETER(NLL.Page_Width_2);
  PARAMETER(NLL.Page_LPI);
  PARAMETER(NLL.Page_CPI);
  PARAMETER(NLL.Page_Overflow);
  PARAMETER(NLL.Page_Rotation);
  PARAMETER(NLL.CDD_Comment_1);
  PARAMETER(NLL.CDD_Comment_2);
  PARAMETER(NLL.CDD_Comment_3);
  PARAMETER(NLL.CDD_Comment_4);
  PARAMETER(NLL.CDD_Comment_5);
  PARAMETER(NLL.Record_Status);

  //?Print Invoice
  CASE;

  // IF LCL.CDD Program Name is Not entered
  IF LCL.CDD_Program_Name = *BLANK;

  // Call program PRT Inv/Memo 8LPI      PF.
  CALL PROGRAM(PRT Inv/Memo 8LPI      PF) ('PDR4PFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Printed_Status);

  //?Print Invoice
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?If Daily's or HPB
  CASE;

  // IF LCL.Company Organization is Daily's
  IF LCL.Company_Organization = 'D';

  //?This will be called three times Customer/Org/Office
  // Call program Zzz Inv/Memo 8LPI Dly  PF.
  CALL PROGRAM(Zzz Inv/Memo 8LPI Dly  PF) ('PMIVPFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Printed_Status);
  PARAMETER('CS');
  PARAMETER(LCL.Job_Name_CDE);

  // Call program Zzz Inv/Memo 8LPI Dly  PF.
  CALL PROGRAM(Zzz Inv/Memo 8LPI Dly  PF) ('PMIVPFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Printed_Status);
  PARAMETER('OF');
  PARAMETER(LCL.Job_Name_CDE);

  // Call program Zzz Inv/Memo 8LPI Dly  PF.
  CALL PROGRAM(Zzz Inv/Memo 8LPI Dly  PF) ('PMIVPFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Printed_Status);
  PARAMETER('OR');
  PARAMETER(LCL.Job_Name_CDE);

  //?If Daily's or HPB
  // IF LCL.Company Organization is High Plains Biodiesel
  IF LCL.Company_Organization = 'H';

  //?FP1110 7/21/08 RMC - Print HPB BOL if COA Batch# is on the Order
  // LCL.HPB COA Batch Number = CON.*ZERO
  LCL.HPB_COA_Batch_Number = *ZERO;

  EXECUTE FUNCTION(VAL OHE exsts for HPB RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC1892284;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.HPB_COA_Batch_Number);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.HPB COA Batch Number is Entered
  IF LCL.HPB_COA_Batch_Number > *ZERO;

  // AND LCL.Load ID is GT Zero
  AND LCL.Load_ID > *ZERO;

  // Call program PRT Bill of Lading-HPB PF.
  CALL PROGRAM(PRT Bill of Lading-HPB PF) ('PMO7PFR');
  PARAMETER(LCL.Load_ID);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Export_Status);

  ENDIF;

  // Call program PRT Inv/Memo 8LPI HPB  PF.
  CALL PROGRAM(PRT Inv/Memo 8LPI HPB  PF) ('PMRCPFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Printed_Status);

  ENDIF;

  ENDIF;

  //?* Delete trailer if Seaboard & Print (not reprint)    E002966
  CASE;

  // IF LCL.Company Organization is Seaboard
  IF LCL.Company_Organization = 'S';

  CASE;

  // IF LCL.Billing Activity Type is Invoice
  IF LCL.Billing_Activity_Type = '1';

  EXECUTE FUNCTION(RTV Ld Id for Orders  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1912980;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Scheduled_Ship_Date);
  PARAMETER(LCL.Load_ID);
  PARAMETER(LCL.Load_Plan_Order);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // AND LCL.Load Plan Order is yes
  AND LCL.Load_Plan_Order = 'Y';

  EXECUTE FUNCTION(RTV Carrier & Trailer  RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC2038863;
  PARAMETER(LCL.Load_ID);
  PARAMETER(LCL.Trailer_Id);
  PARAMETER(LCL.Carrier_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV/DLT Assigned Trlr  RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC2086635;
  PARAMETER(LCL.Carrier_Code);
  PARAMETER(LCL.Trailer_Id);
  {
   //?USER: Processing if Data record not found

   //?* Not an error, may have been deleted from another order on load
   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   //?USER: Process Data record

   EXECUTE FUNCTION(DLT Trailer            DO) TYPE(DLTOBJ) FILE(PDLYREP)          AC1496470;
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Trailer_Id);
  }

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  //?*----------------------------------------------------------------*
  EXECUTE FUNCTION(CRT Invoice Events     RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1346647;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Event_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Invoice_Number);
  PARAMETER(PAR.Invoice_Suffix);
  PARAMETER(PAR.Ship_To_Customer);
  {
   //?USER: Initialize routine

   // PAR.Event Number = CON.*ZERO
   PAR.Event_Number = *ZERO;

   EXECUTE FUNCTION(RTV Latest Event/Date  RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1280294;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Event_Number);
   PARAMETER(WRK.TXT_field_not_needed);
   PARAMETER(WRK.Numeric_Field_Not_Needed);
   PARAMETER(WRK.TXT_field_not_needed);
   PARAMETER(PAR.Ship_To_Customer);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(1);
   PARAMETER(PAR.Event_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(JOB.*Job_date);
   PARAMETER('Y');
   PARAMETER('N');
   PARAMETER('Y');
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?USER: Process Data record

   // PAR.Event Number = PAR.Event Number + CON.1
   PAR.Event_Number = PAR.Event_Number + 1;

   EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Event_Number);
   PARAMETER(PAR.Event_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Invoice_Memo_Number);
   PARAMETER(PAR.Invoice_Memo_Suffix);
   PARAMETER(JOB.*Job_date);
   PARAMETER('Y');
   PARAMETER('N');
   PARAMETER('N');
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Ship_To_Customer);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   QUIT;

  }

  EXECUTE FUNCTION(UPD Event: Hdr,O/S Dtl RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1335273;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Event_Code);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(UPD Event: Ship Detail RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1335289;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Event_Code);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(CHG Shipping Event     CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1325667;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Event_Code);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

   }

   EXECUTE FUNCTION(CHG Ord Event & Stat.  CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1306469;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Header_Status);
   PARAMETER(DB1.Header_Status_Last);
   PARAMETER(PAR.Event_Code);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // Call program TRG Order Hdr CHG Trig XT.
    CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Type_Sales);
    PARAMETER(DB1.AR_Customer_Number);
    PARAMETER(DB1.Ship_To_Customer);
    PARAMETER(DB1.Ship_To_Name);
    PARAMETER(DB1.Ship_To_Address_Line_1);
    PARAMETER(DB1.Ship_To_Address_Line_2);
    PARAMETER(DB1.Ship_To_Address_Line_3);
    PARAMETER(DB1.Ship_To_City);
    PARAMETER(DB1.Ship_To_State_Code);
    PARAMETER(DB1.Ship_To_Zip_Postal_Code);
    PARAMETER(DB1.Bill_to_Customer);
    PARAMETER(DB1.Bill_to_Name);
    PARAMETER(DB1.Bill_to_Address_Line_1);
    PARAMETER(DB1.Bill_to_Address_Line_2);
    PARAMETER(DB1.Bill_to_Address_Line_3);
    PARAMETER(DB1.Bill_to_City);
    PARAMETER(DB1.Bill_to_State_Code);
    PARAMETER(DB1.Bill_to_Zip_Postal_Code);
    PARAMETER(DB1.Customer_Purchase_Order_#);
    PARAMETER(DB1.Order_Date);
    PARAMETER(DB1.Requested_Ship_Date);
    PARAMETER(DB1.Actual_Shipped_Date);
    PARAMETER(DB1.Cancel_Date);
    PARAMETER(DB1.Terms_Code);
    PARAMETER(DB1.Special_Instructions);
    PARAMETER(DB1.Special_Instructions_2);
    PARAMETER(DB1.Carrier_Code);
    PARAMETER(DB1.Comment_Print_Acknowledge);
    PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
    PARAMETER(DB1.Comment_Print_Pick_Slip);
    PARAMETER(DB1.Comment_Print_Ship_Doc);
    PARAMETER(DB1.Reason_Code);
    PARAMETER(DB1.Order_in_Use);
    PARAMETER(DB1.Header_Status);
    PARAMETER(DB1.Header_Status_Last);
    PARAMETER(DB1.Order_Type_Print_Status);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.User_Original_Entry);
    PARAMETER(DB1.Date_of_Original_Entry);
    PARAMETER(DB1.Order_Value_Total);
    PARAMETER(DB1.Order_Weight_Total);
    PARAMETER(DB1.Credit_Hold);
    PARAMETER(DB1.Production_Hold);
    PARAMETER(DB1.New_Customer_Hold);
    PARAMETER(DB1.Requested_Delivery_Date);
    PARAMETER(DB1.Requested_Delivery_Time);
    PARAMETER(DB1.Accounts_Receiv_Ent_1);
    PARAMETER(DB1.Accounts_Receiv_Ent_2);
    PARAMETER(DB1.Load_ID);
    PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
    PARAMETER(DB1.Rated_Freight);
    PARAMETER(DB1.LTL_Flag);
    PARAMETER(DB1.Price_Audit);
    PARAMETER(DB1.Price_Status);
    PARAMETER(DB1.Shipping_Method);
    PARAMETER(DB1.Export_Status);
    PARAMETER(DB1.Palletize);
    PARAMETER(DB1.Shrink_Wrap);
    PARAMETER(DB1.Slip_Sheet);
    PARAMETER(DB1.Age_Code);
    PARAMETER(DB1.Reefer_Temperature);
    PARAMETER(DB1.Load_Type);
    PARAMETER(DB1.Attach_to_Invoice_Number);
    PARAMETER(DB1.Load_Plan_Order);
    PARAMETER(DB1.Print_Pick_Slip);
    PARAMETER(DB1.Resell_Reference_Number);
    PARAMETER(DB1.Special_Comment_1);
    PARAMETER(DB1.Special_Comment_2);
    PARAMETER(DB1.Affect_Auto_Accruals);
    PARAMETER(DB1.Sales_Route_Code);
    PARAMETER(DB1.Manager_Level_Code);
    PARAMETER(DB1.VP_Level_Code);
    PARAMETER(DB1.Attach_to_Order_Number);
    PARAMETER(DB1.Reason_for_Price_Audit);
    PARAMETER(DB1.Invoice_Number);
    PARAMETER(DB1.Invoice_Suffix);
    PARAMETER(DB1.Invoice_Date);
    PARAMETER(DB1.Event_Code);
    PARAMETER(DB1.Trans_Contol_AS400_Plant);
    PARAMETER(DB1.Modified_Flag);
    PARAMETER(DB1.A_R_order_Value_Total);
    PARAMETER(DB1.Billing_Activity_Type);
    PARAMETER(DB1.Block_Order_Flag);
    PARAMETER(DB1.Order_Certification_Flag);
    PARAMETER(DB1.Invoice_Order_Value_Tot);
    PARAMETER(DB1.Process_Sts_for_3C);
    PARAMETER(DB1.Order_Conf_Fax_Sts);
    PARAMETER(DB1.Manifest_Fax_Sts);
    PARAMETER(DB1.Invoice_Fax_Sts);
    PARAMETER(DB1.Transfer_in_Storage_Ind);
    PARAMETER(DB1.Email_Cust_On_Order_Ship);
    PARAMETER(DB1.Order_Emailed);
    PARAMETER(DB1.Export_Docs_Go_w_Driver);
    PARAMETER(DB1.Shipping_Temp_Code_C_F);
    PARAMETER(DB1.Broker_Order_Status);
    PARAMETER(DB1.Air_Freight_Order);
    PARAMETER(DB1.Order_Requires_Review);
    PARAMETER(DB1.OH_Load_Plan_Ready);
    PARAMETER(DB1.Export_USDA_Approved);
    PARAMETER(DB1.HPB_Ship_to_Warehouse);
    PARAMETER(DB1.OH_TF_Exempt_Code);
    PARAMETER(DB1.OH_Appt_Confirmation_Dt);
    PARAMETER(DB1.JPN_Invoice_Issuance_Date);
    PARAMETER(DB1.Load_Actual_Shipped_Date);
    PARAMETER(DB1.Load_BOL_Complete_Date);
    PARAMETER(DB1.Load_Truck_Departure_Date);
    PARAMETER(DB1.Maximum_Gross_Weight);
    PARAMETER(DB1.Time_of_Original_Entry);
    PARAMETER(DB1.OH_Appt_Confirmation_Tm);
    PARAMETER(DB1.Load_BOL_Complete_Time);
    PARAMETER(DB1.Load_Truck_Departure_Time);
    PARAMETER(DB1.Act_Frt_Reference_Amount);
    PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
    PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
    PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
    PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
    PARAMETER(DB1.Claim_Number);
    PARAMETER(DB1.EDI_Status_1);
    PARAMETER(DB1.EDI_Status_2);
    PARAMETER(DB1.EDI_Status_3);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);

   }

  }

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

 }

 ENDIF;

 ENDIF;

 //?Actual Shipped Date Selected
 CASE;

 // IF PAR.Order Number is Equal to zeros
 IF PAR.Order_Number = *ZERO;

 // AND PAR.Load ID is Blank
 AND PAR.Load_ID = *ZERO;

 CASE;

 // IF PAR.Actual Shipped Date is not entered
 IF PAR.Actual_Shipped_Date = *ZERO;

 EXECUTE FUNCTION(SEL Process Prt Invc   IF) TYPE(EXCINTFUN)                     AC1343794;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(PAR.Invoice_Number);
 PARAMETER(PAR.Invoice_Suffix);
 PARAMETER(PAR.Invoice_Date);
 PARAMETER('06');
 PARAMETER('N');
 PARAMETER(PAR.Count_USR);
 {
  //?Execute internal function

  //?2/18/05 PKD use company number 000
  EXECUTE FUNCTION(UPD Next Invoice Nbr   RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1323447;
  PARAMETER(*ZERO);
  PARAMETER(PAR.Invoice_Number);
  {
   //?USER: Process Data record

   //?2/18/05 PKD get invoice number from company 000
   EXECUTE FUNCTION(CHG Next Invoice Nbr   CH) TYPE(CHGOBJ) FILE(CAASREP)          AC1329962;
   PARAMETER(*ZERO);
   PARAMETER(PAR.Next_Invoice_Number);
   {
    //?USER: Processing before Data update

    //?Assumes Invoice numbers always automatically assigned
    // PGM.*Record Data Changed = CND.*YES
    PGM.*Record_Data_Changed = 'Y';

    // Call program Val Invoice Exists    XF.
    CALL PROGRAM(Val Invoice Exists    XF) ('PMQIXFR');
    PARAMETER(DB1.Next_Invoice_Number);
    PARAMETER(LCL.Record_Found_USR);

    // DOW LCL.Record Found USR is Record Found
    DOW LCL.Record_Found_USR = 'Y';

    // DB1.Next Invoice Number = DB1.Next Invoice Number + CON.1
    DB1.Next_Invoice_Number = DB1.Next_Invoice_Number + 1;

    // Call program Val Invoice Exists    XF.
    CALL PROGRAM(Val Invoice Exists    XF) ('PMQIXFR');
    PARAMETER(DB1.Next_Invoice_Number);
    PARAMETER(LCL.Record_Found_USR);

    ENDDO;

    // PAR.USR Next Invoice Number = DB1.Next Invoice Number
    PAR.USR_Next_Invoice_Number = DB1.Next_Invoice_Number;

    // DB1.Next Invoice Number = DB1.Next Invoice Number + CON.1
    DB1.Next_Invoice_Number = DB1.Next_Invoice_Number + 1;

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  EXECUTE FUNCTION(CHG Invoice #, Date    CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1335457;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Invoice_Number);
  PARAMETER(PAR.Invoice_Suffix);
  PARAMETER(PAR.Invoice_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // Call program TRG Order Hdr CHG Trig XT.
   CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Type_Sales);
   PARAMETER(DB1.AR_Customer_Number);
   PARAMETER(DB1.Ship_To_Customer);
   PARAMETER(DB1.Ship_To_Name);
   PARAMETER(DB1.Ship_To_Address_Line_1);
   PARAMETER(DB1.Ship_To_Address_Line_2);
   PARAMETER(DB1.Ship_To_Address_Line_3);
   PARAMETER(DB1.Ship_To_City);
   PARAMETER(DB1.Ship_To_State_Code);
   PARAMETER(DB1.Ship_To_Zip_Postal_Code);
   PARAMETER(DB1.Bill_to_Customer);
   PARAMETER(DB1.Bill_to_Name);
   PARAMETER(DB1.Bill_to_Address_Line_1);
   PARAMETER(DB1.Bill_to_Address_Line_2);
   PARAMETER(DB1.Bill_to_Address_Line_3);
   PARAMETER(DB1.Bill_to_City);
   PARAMETER(DB1.Bill_to_State_Code);
   PARAMETER(DB1.Bill_to_Zip_Postal_Code);
   PARAMETER(DB1.Customer_Purchase_Order_#);
   PARAMETER(DB1.Order_Date);
   PARAMETER(DB1.Requested_Ship_Date);
   PARAMETER(DB1.Actual_Shipped_Date);
   PARAMETER(DB1.Cancel_Date);
   PARAMETER(DB1.Terms_Code);
   PARAMETER(DB1.Special_Instructions);
   PARAMETER(DB1.Special_Instructions_2);
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Comment_Print_Acknowledge);
   PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
   PARAMETER(DB1.Comment_Print_Pick_Slip);
   PARAMETER(DB1.Comment_Print_Ship_Doc);
   PARAMETER(DB1.Reason_Code);
   PARAMETER(DB1.Order_in_Use);
   PARAMETER(DB1.Header_Status);
   PARAMETER(DB1.Header_Status_Last);
   PARAMETER(DB1.Order_Type_Print_Status);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.User_Original_Entry);
   PARAMETER(DB1.Date_of_Original_Entry);
   PARAMETER(DB1.Order_Value_Total);
   PARAMETER(DB1.Order_Weight_Total);
   PARAMETER(DB1.Credit_Hold);
   PARAMETER(DB1.Production_Hold);
   PARAMETER(DB1.New_Customer_Hold);
   PARAMETER(DB1.Requested_Delivery_Date);
   PARAMETER(DB1.Requested_Delivery_Time);
   PARAMETER(DB1.Accounts_Receiv_Ent_1);
   PARAMETER(DB1.Accounts_Receiv_Ent_2);
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
   PARAMETER(DB1.Rated_Freight);
   PARAMETER(DB1.LTL_Flag);
   PARAMETER(DB1.Price_Audit);
   PARAMETER(DB1.Price_Status);
   PARAMETER(DB1.Shipping_Method);
   PARAMETER(DB1.Export_Status);
   PARAMETER(DB1.Palletize);
   PARAMETER(DB1.Shrink_Wrap);
   PARAMETER(DB1.Slip_Sheet);
   PARAMETER(DB1.Age_Code);
   PARAMETER(DB1.Reefer_Temperature);
   PARAMETER(DB1.Load_Type);
   PARAMETER(DB1.Attach_to_Invoice_Number);
   PARAMETER(DB1.Load_Plan_Order);
   PARAMETER(DB1.Print_Pick_Slip);
   PARAMETER(DB1.Resell_Reference_Number);
   PARAMETER(DB1.Special_Comment_1);
   PARAMETER(DB1.Special_Comment_2);
   PARAMETER(DB1.Affect_Auto_Accruals);
   PARAMETER(DB1.Sales_Route_Code);
   PARAMETER(DB1.Manager_Level_Code);
   PARAMETER(DB1.VP_Level_Code);
   PARAMETER(DB1.Attach_to_Order_Number);
   PARAMETER(DB1.Reason_for_Price_Audit);
   PARAMETER(DB1.Invoice_Number);
   PARAMETER(DB1.Invoice_Suffix);
   PARAMETER(DB1.Invoice_Date);
   PARAMETER(DB1.Event_Code);
   PARAMETER(DB1.Trans_Contol_AS400_Plant);
   PARAMETER(DB1.Modified_Flag);
   PARAMETER(DB1.A_R_order_Value_Total);
   PARAMETER(DB1.Billing_Activity_Type);
   PARAMETER(DB1.Block_Order_Flag);
   PARAMETER(DB1.Order_Certification_Flag);
   PARAMETER(DB1.Invoice_Order_Value_Tot);
   PARAMETER(DB1.Process_Sts_for_3C);
   PARAMETER(DB1.Order_Conf_Fax_Sts);
   PARAMETER(DB1.Manifest_Fax_Sts);
   PARAMETER(DB1.Invoice_Fax_Sts);
   PARAMETER(DB1.Transfer_in_Storage_Ind);
   PARAMETER(DB1.Email_Cust_On_Order_Ship);
   PARAMETER(DB1.Order_Emailed);
   PARAMETER(DB1.Export_Docs_Go_w_Driver);
   PARAMETER(DB1.Shipping_Temp_Code_C_F);
   PARAMETER(DB1.Broker_Order_Status);
   PARAMETER(DB1.Air_Freight_Order);
   PARAMETER(DB1.Order_Requires_Review);
   PARAMETER(DB1.OH_Load_Plan_Ready);
   PARAMETER(DB1.Export_USDA_Approved);
   PARAMETER(DB1.HPB_Ship_to_Warehouse);
   PARAMETER(DB1.OH_TF_Exempt_Code);
   PARAMETER(DB1.OH_Appt_Confirmation_Dt);
   PARAMETER(DB1.JPN_Invoice_Issuance_Date);
   PARAMETER(DB1.Load_Actual_Shipped_Date);
   PARAMETER(DB1.Load_BOL_Complete_Date);
   PARAMETER(DB1.Load_Truck_Departure_Date);
   PARAMETER(DB1.Maximum_Gross_Weight);
   PARAMETER(DB1.Time_of_Original_Entry);
   PARAMETER(DB1.OH_Appt_Confirmation_Tm);
   PARAMETER(DB1.Load_BOL_Complete_Time);
   PARAMETER(DB1.Load_Truck_Departure_Time);
   PARAMETER(DB1.Act_Frt_Reference_Amount);
   PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
   PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
   PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
   PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
   PARAMETER(DB1.Claim_Number);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);

   //?USER: Processing after Data update

   //?E00196 10/3/12 RMC CAT2 calls regular pfs interface
   EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
   PARAMETER(DB1.Company_Number);
   PARAMETER('LDORDD');
   PARAMETER(LCL.PFS_AccuSort_Active);
   PARAMETER(LCL.PFS_Carlisle_Active);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.PFS Carlisle Active is Yes
   IF LCL.PFS_Carlisle_Active = 'Y';

   // Call program PFS Lock Load/Order   XF.
   CALL PROGRAM(PFS Lock Load/Order   XF) ('PPNLXFR');
   PARAMETER(DB1.Load_ID);

   ENDIF;

  }

  //?*----------------------------------------------------------------*
  //?P000198
  //?Retrieve Order information for creating Inv List Work & Combine Inv
  DO;

  EXECUTE FUNCTION(RTV Info for Invc Prt  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1324121;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Order_Type_Sales);
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER(LCL.Ship_To_Customer);
  PARAMETER(LCL.Ship_To_Name);
  PARAMETER(LCL.Ship_To_Address_Line_1);
  PARAMETER(LCL.Ship_To_Address_Line_2);
  PARAMETER(LCL.Ship_To_Address_Line_3);
  PARAMETER(LCL.Ship_To_City);
  PARAMETER(LCL.Ship_To_State_Code);
  PARAMETER(LCL.Ship_To_Zip_Postal_Code);
  PARAMETER(LCL.Bill_to_Customer);
  PARAMETER(LCL.Bill_to_Name);
  PARAMETER(LCL.Bill_to_Address_Line_1);
  PARAMETER(LCL.Bill_to_Address_Line_2);
  PARAMETER(LCL.Bill_to_Address_Line_3);
  PARAMETER(LCL.Bill_to_City);
  PARAMETER(LCL.Bill_to_State_Code);
  PARAMETER(LCL.Bill_to_Zip_Postal_Code);
  PARAMETER(LCL.Customer_Purchase_Order_#);
  PARAMETER(LCL.Order_Date);
  PARAMETER(LCL.Actual_Shipped_Date);
  PARAMETER(LCL.Terms_Code);
  PARAMETER(LCL.Carrier_Code);
  PARAMETER(LCL.Order_Value_Total);
  PARAMETER(LCL.Order_Weight_Total);
  PARAMETER(LCL.Load_ID);
  PARAMETER(LCL.Sales_Route_Code);
  PARAMETER(WRK.Invoice_Number);
  PARAMETER(LCL.Invoice_Date);
  PARAMETER(LCL.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV CDE 1st Fax only  IF) TYPE(EXCINTFUN)                      AC1981538;
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER('AR-INVOICE');
  PARAMETER(*ZERO);
  PARAMETER(WRK.CDE_Name);
  PARAMETER(WRK.CDE_Destination);
  {
   //?Execute internal function

   EXECUTE FUNCTION(RTV CDE 1st Fax only  RT) TYPE(RTVOBJ) FILE(PNF7REP)           AC1981532;
   PARAMETER(PAR.Ship_To_Customer);
   PARAMETER(PAR.Distribution_Code);
   PARAMETER(PAR.CDE_Sequence_Number);
   PARAMETER(PAR.CDE_Name);
   PARAMETER(PAR.CDE_Destination);
   {
    //?USER: Initialize routine

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    //?Return 1st active record with a fax number
    CASE;

    // IF DB1.CDE Destination Type is Fax
    IF DB1.CDE_Destination_Type = 'F';

    CASE;

    // IF DB1.Record Status is Active
    IF DB1.Record_Status = 'A';

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

    ENDIF;

    ENDIF;

   }

  }

  //?Set flag if faxing invoice                            P000198
  CASE;

  // IF WRK.CDE Name is Not Blank
  IF WRK.CDE_Name <> *BLANK;

  // LCL.Fax Invoice Flag = CND.Automatically Fax Invoice
  LCL.Fax_Invoice_Flag = 'Y';

  ENDIF;

  EXECUTE FUNCTION(RTV CDE 1st Eml only  RT) TYPE(RTVOBJ) FILE(PNF7REP)           AC1981686;
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER('AR-INVOICE');
  PARAMETER(*ZERO);
  PARAMETER(WRK.CDE_Name);
  PARAMETER(WRK.CDE_Destination);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   //?Return 1st active record with an email address
   CASE;

   // IF DB1.CDE Destination Type is Email
   IF DB1.CDE_Destination_Type = 'E';

   // OR DB1.CDE Destination Type is One Email/Invoice
   OR DB1.CDE_Destination_Type = 'O';

   //?R14851 4/15/19  RMC ADDED Type = O
   CASE;

   // IF DB1.Record Status is Active
   IF DB1.Record_Status = 'A';

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

   ENDIF;

   ENDIF;

  }

  //?Set flag if emailing invoice                          P000198
  CASE;

  // IF WRK.CDE Name is Not Blank
  IF WRK.CDE_Name <> *BLANK;

  //?** Set Fax Invoice Flag so the wf rec won't get deleted before
  //?** it gets faxed or invoiced.
  // LCL.Fax Invoice Flag = CND.Automatically Fax Invoice
  LCL.Fax_Invoice_Flag = 'Y';

  // LCL.Email Selection usr = CND.Email Selected
  LCL.Email_Selection_usr = 'E';

  ENDIF;

  EXECUTE FUNCTION(Rtv EDI/Prt Invoice   RT) TYPE(RTVOBJ) FILE(CABBREP)           AC1611523;
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER(LCL.EDI_Invoice_Sts);
  PARAMETER(LCL.Print_Invoice_Sts);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // Call program Rtv One Invoice /PO   XP.
  CALL PROGRAM(Rtv One Invoice /PO   XP) ('PMCOXFR');
  PARAMETER(LCL.Ship_To_Customer);
  PARAMETER(LCL.One_Invoice_Per_PO);

  //?credit memo
  CASE;

  // IF LCL.Billing Activity Type is Credit Memo
  IF LCL.Billing_Activity_Type = '2';

  // LCL.Order Value Total = CON.*ZERO - LCL.Order Value Total
  LCL.Order_Value_Total = *ZERO - LCL.Order_Value_Total;

  ENDIF;

  EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
  PARAMETER(PAR.Company_Number);
  PARAMETER(NLL.Plant_Company_Sts);
  PARAMETER(LCL.Company_Organization);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDDO;

  //?*----------------------------------------------------------------*
  // LCL.Job Name CDE = JOB.*JOB
  LCL.Job_Name_CDE = JOB.*JOB;

  // LCL.Job Number Cde = JOB.*Job number
  LCL.Job_Number_Cde = JOB.*Job_number;

  //?Create WF Inv/Memo Combo for combine invoices
  //?Print Invoice & crt WF Invoice List Work
  CASE;

  // IF LCL.Print Invoice Sts is no
  IF LCL.Print_Invoice_Sts = 'N';

  //?*** Print = N --> Crt Invoice List Work
  //?** Set fax invoice flag to Yes for fax/email program  P000198
  EXECUTE FUNCTION(CRT PD Invoice List Wk CR) TYPE(CRTOBJ) FILE(PDJ4CPP)          AC1339739;
  PARAMETER(JOB.*JOB);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Order_Value_Total);
  PARAMETER(LCL.Order_Weight_Total);
  PARAMETER(LCL.Ship_To_Name);
  PARAMETER(LCL.Bill_to_Name);
  PARAMETER('Y');
  PARAMETER(LCL.Ship_To_Customer);
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Invoice_Number);
  PARAMETER(PAR.Invoice_Suffix);
  {
   //?USER: Processing if Data record already exists

   // PGM.*Return code = CND.*Record already exists
   PGM.*Return_code = 'Y2U0003';

  }

  CASE;

  // IF LCL.One Invoice Per PO is Yes
  IF LCL.One_Invoice_Per_PO = 'Y';

  // AND LCL.Billing Activity Type is Invoice or Debit Memo
  AND LCL.Billing_Activity_Type = '3'/'1';

  // Call program CRT 1 WF Invoice/Cmb   XF.
  CALL PROGRAM(CRT 1 WF Invoice/Cmb   XF) ('PMCPXFR');
  PARAMETER(LCL.Job_Name_CDE);
  PARAMETER(LCL.Job_Number_Cde);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.One_Invoice_Per_PO);

  ENDIF;

  //?* Delete trailer if Seaboard & Print (not reprint)    E002966
  CASE;

  // IF LCL.Company Organization is Seaboard
  IF LCL.Company_Organization = 'S';

  CASE;

  // IF LCL.Billing Activity Type is Invoice
  IF LCL.Billing_Activity_Type = '1';

  EXECUTE FUNCTION(RTV Ld Id for Orders  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1912980;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Scheduled_Ship_Date);
  PARAMETER(LCL.Load_ID);
  PARAMETER(LCL.Load_Plan_Order);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // AND LCL.Load Plan Order is yes
  AND LCL.Load_Plan_Order = 'Y';

  EXECUTE FUNCTION(RTV Carrier & Trailer  RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC2038863;
  PARAMETER(LCL.Load_ID);
  PARAMETER(LCL.Trailer_Id);
  PARAMETER(LCL.Carrier_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV/DLT Assigned Trlr  RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC2086635;
  PARAMETER(LCL.Carrier_Code);
  PARAMETER(LCL.Trailer_Id);
  {
   //?USER: Processing if Data record not found

   //?* Not an error, may have been deleted from another order on load
   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   //?USER: Process Data record

   EXECUTE FUNCTION(DLT Trailer            DO) TYPE(DLTOBJ) FILE(PDLYREP)          AC1496470;
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Trailer_Id);
  }

  ENDIF;

  ENDIF;

  ENDIF;

  //?Print Invoice & crt WF Invoice List Work
  // IF LCL.One Invoice Per PO is Yes
  IF LCL.One_Invoice_Per_PO = 'Y';

  // AND LCL.Billing Activity Type is Invoice or Debit Memo
  AND LCL.Billing_Activity_Type = '3'/'1';

  //?12/06/2006 slm -- Do not print the org inv routine
  EXECUTE FUNCTION(CRT PD Invoice List Wk CR) TYPE(CRTOBJ) FILE(PDJ4CPP)          AC1339739;
  PARAMETER(JOB.*JOB);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Order_Value_Total);
  PARAMETER(LCL.Order_Weight_Total);
  PARAMETER(LCL.Ship_To_Name);
  PARAMETER(LCL.Bill_to_Name);
  PARAMETER('Y');
  PARAMETER(LCL.Ship_To_Customer);
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Invoice_Number);
  PARAMETER(PAR.Invoice_Suffix);
  {
   //?USER: Processing if Data record already exists

   // PGM.*Return code = CND.*Record already exists
   PGM.*Return_code = 'Y2U0003';

  }

  // Call program CRT 1 WF Invoice/Cmb   XF.
  CALL PROGRAM(CRT 1 WF Invoice/Cmb   XF) ('PMCPXFR');
  PARAMETER(LCL.Job_Name_CDE);
  PARAMETER(LCL.Job_Number_Cde);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.One_Invoice_Per_PO);

  //?* Delete trailer if Seaboard & Print (not reprint)    E002966
  CASE;

  // IF LCL.Company Organization is Seaboard
  IF LCL.Company_Organization = 'S';

  CASE;

  // IF LCL.Billing Activity Type is Invoice
  IF LCL.Billing_Activity_Type = '1';

  EXECUTE FUNCTION(RTV Ld Id for Orders  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1912980;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Scheduled_Ship_Date);
  PARAMETER(LCL.Load_ID);
  PARAMETER(LCL.Load_Plan_Order);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // AND LCL.Load Plan Order is yes
  AND LCL.Load_Plan_Order = 'Y';

  EXECUTE FUNCTION(RTV Carrier & Trailer  RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC2038863;
  PARAMETER(LCL.Load_ID);
  PARAMETER(LCL.Trailer_Id);
  PARAMETER(LCL.Carrier_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV/DLT Assigned Trlr  RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC2086635;
  PARAMETER(LCL.Carrier_Code);
  PARAMETER(LCL.Trailer_Id);
  {
   //?USER: Processing if Data record not found

   //?* Not an error, may have been deleted from another order on load
   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   //?USER: Process Data record

   EXECUTE FUNCTION(DLT Trailer            DO) TYPE(DLTOBJ) FILE(PDLYREP)          AC1496470;
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Trailer_Id);
  }

  ENDIF;

  ENDIF;

  ENDIF;

  //?Print Invoice & crt WF Invoice List Work
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?*** Print=Y --> Print Invoice. Print will create Invoice List Work
  //?If custom program then print the invoice custom program
  //?Department is INCST1
  // Call program RTV CDD for Overlays   XF.
  CALL PROGRAM(RTV CDD for Overlays   XF) ('PMG9XFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER('IN');
  PARAMETER('INCST1');
  PARAMETER(NLL.CDD_Name_of_Overlay);
  PARAMETER(LCL.CDD_Program_Name);
  PARAMETER(NLL.CDD_Printer_File_Name);
  PARAMETER(NLL.CDD_Additional_Object);
  PARAMETER(NLL.CDD_Sender_Phone);
  PARAMETER(NLL.CDD_Sender_Fax);
  PARAMETER(LCL.Output_Queue);
  PARAMETER(LCL.Hold_File);
  PARAMETER(LCL.Save_File);
  PARAMETER(LCL.Source_Drawer);
  PARAMETER(NLL.Printer_Device_Type);
  PARAMETER(NLL.Page_Length_2);
  PARAMETER(NLL.Page_Width_2);
  PARAMETER(NLL.Page_LPI);
  PARAMETER(NLL.Page_CPI);
  PARAMETER(NLL.Page_Overflow);
  PARAMETER(NLL.Page_Rotation);
  PARAMETER(NLL.CDD_Comment_1);
  PARAMETER(NLL.CDD_Comment_2);
  PARAMETER(NLL.CDD_Comment_3);
  PARAMETER(NLL.CDD_Comment_4);
  PARAMETER(NLL.CDD_Comment_5);
  PARAMETER(NLL.Record_Status);

  //?Print Invoice
  CASE;

  // IF LCL.CDD Program Name is Not entered
  IF LCL.CDD_Program_Name = *BLANK;

  // Call program PRT Inv/Memo 8LPI      PF.
  CALL PROGRAM(PRT Inv/Memo 8LPI      PF) ('PDR4PFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Printed_Status);

  //?Print Invoice
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?If Daily's or HPB
  CASE;

  // IF LCL.Company Organization is Daily's
  IF LCL.Company_Organization = 'D';

  //?This will be called three times Customer/Org/Office
  // Call program Zzz Inv/Memo 8LPI Dly  PF.
  CALL PROGRAM(Zzz Inv/Memo 8LPI Dly  PF) ('PMIVPFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Printed_Status);
  PARAMETER('CS');
  PARAMETER(LCL.Job_Name_CDE);

  // Call program Zzz Inv/Memo 8LPI Dly  PF.
  CALL PROGRAM(Zzz Inv/Memo 8LPI Dly  PF) ('PMIVPFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Printed_Status);
  PARAMETER('OF');
  PARAMETER(LCL.Job_Name_CDE);

  // Call program Zzz Inv/Memo 8LPI Dly  PF.
  CALL PROGRAM(Zzz Inv/Memo 8LPI Dly  PF) ('PMIVPFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Printed_Status);
  PARAMETER('OR');
  PARAMETER(LCL.Job_Name_CDE);

  //?If Daily's or HPB
  // IF LCL.Company Organization is High Plains Biodiesel
  IF LCL.Company_Organization = 'H';

  //?FP1110 7/21/08 RMC - Print HPB BOL if COA Batch# is on the Order
  // LCL.HPB COA Batch Number = CON.*ZERO
  LCL.HPB_COA_Batch_Number = *ZERO;

  EXECUTE FUNCTION(VAL OHE exsts for HPB RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC1892284;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.HPB_COA_Batch_Number);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.HPB COA Batch Number is Entered
  IF LCL.HPB_COA_Batch_Number > *ZERO;

  // AND LCL.Load ID is GT Zero
  AND LCL.Load_ID > *ZERO;

  // Call program PRT Bill of Lading-HPB PF.
  CALL PROGRAM(PRT Bill of Lading-HPB PF) ('PMO7PFR');
  PARAMETER(LCL.Load_ID);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Export_Status);

  ENDIF;

  // Call program PRT Inv/Memo 8LPI HPB  PF.
  CALL PROGRAM(PRT Inv/Memo 8LPI HPB  PF) ('PMRCPFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Printed_Status);

  ENDIF;

  ENDIF;

  //?* Delete trailer if Seaboard & Print (not reprint)    E002966
  CASE;

  // IF LCL.Company Organization is Seaboard
  IF LCL.Company_Organization = 'S';

  CASE;

  // IF LCL.Billing Activity Type is Invoice
  IF LCL.Billing_Activity_Type = '1';

  EXECUTE FUNCTION(RTV Ld Id for Orders  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1912980;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Scheduled_Ship_Date);
  PARAMETER(LCL.Load_ID);
  PARAMETER(LCL.Load_Plan_Order);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // AND LCL.Load Plan Order is yes
  AND LCL.Load_Plan_Order = 'Y';

  EXECUTE FUNCTION(RTV Carrier & Trailer  RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC2038863;
  PARAMETER(LCL.Load_ID);
  PARAMETER(LCL.Trailer_Id);
  PARAMETER(LCL.Carrier_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV/DLT Assigned Trlr  RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC2086635;
  PARAMETER(LCL.Carrier_Code);
  PARAMETER(LCL.Trailer_Id);
  {
   //?USER: Processing if Data record not found

   //?* Not an error, may have been deleted from another order on load
   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   //?USER: Process Data record

   EXECUTE FUNCTION(DLT Trailer            DO) TYPE(DLTOBJ) FILE(PDLYREP)          AC1496470;
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Trailer_Id);
  }

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  //?*----------------------------------------------------------------*
  EXECUTE FUNCTION(CRT Invoice Events     RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1346647;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Event_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Invoice_Number);
  PARAMETER(PAR.Invoice_Suffix);
  PARAMETER(PAR.Ship_To_Customer);
  {
   //?USER: Initialize routine

   // PAR.Event Number = CON.*ZERO
   PAR.Event_Number = *ZERO;

   EXECUTE FUNCTION(RTV Latest Event/Date  RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1280294;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Event_Number);
   PARAMETER(WRK.TXT_field_not_needed);
   PARAMETER(WRK.Numeric_Field_Not_Needed);
   PARAMETER(WRK.TXT_field_not_needed);
   PARAMETER(PAR.Ship_To_Customer);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(1);
   PARAMETER(PAR.Event_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(JOB.*Job_date);
   PARAMETER('Y');
   PARAMETER('N');
   PARAMETER('Y');
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?USER: Process Data record

   // PAR.Event Number = PAR.Event Number + CON.1
   PAR.Event_Number = PAR.Event_Number + 1;

   EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Event_Number);
   PARAMETER(PAR.Event_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Invoice_Memo_Number);
   PARAMETER(PAR.Invoice_Memo_Suffix);
   PARAMETER(JOB.*Job_date);
   PARAMETER('Y');
   PARAMETER('N');
   PARAMETER('N');
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Ship_To_Customer);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   QUIT;

  }

  EXECUTE FUNCTION(UPD Event: Hdr,O/S Dtl RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1335273;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Event_Code);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(UPD Event: Ship Detail RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1335289;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Event_Code);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(CHG Shipping Event     CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1325667;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Event_Code);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

   }

   EXECUTE FUNCTION(CHG Ord Event & Stat.  CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1306469;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Header_Status);
   PARAMETER(DB1.Header_Status_Last);
   PARAMETER(PAR.Event_Code);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // Call program TRG Order Hdr CHG Trig XT.
    CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Type_Sales);
    PARAMETER(DB1.AR_Customer_Number);
    PARAMETER(DB1.Ship_To_Customer);
    PARAMETER(DB1.Ship_To_Name);
    PARAMETER(DB1.Ship_To_Address_Line_1);
    PARAMETER(DB1.Ship_To_Address_Line_2);
    PARAMETER(DB1.Ship_To_Address_Line_3);
    PARAMETER(DB1.Ship_To_City);
    PARAMETER(DB1.Ship_To_State_Code);
    PARAMETER(DB1.Ship_To_Zip_Postal_Code);
    PARAMETER(DB1.Bill_to_Customer);
    PARAMETER(DB1.Bill_to_Name);
    PARAMETER(DB1.Bill_to_Address_Line_1);
    PARAMETER(DB1.Bill_to_Address_Line_2);
    PARAMETER(DB1.Bill_to_Address_Line_3);
    PARAMETER(DB1.Bill_to_City);
    PARAMETER(DB1.Bill_to_State_Code);
    PARAMETER(DB1.Bill_to_Zip_Postal_Code);
    PARAMETER(DB1.Customer_Purchase_Order_#);
    PARAMETER(DB1.Order_Date);
    PARAMETER(DB1.Requested_Ship_Date);
    PARAMETER(DB1.Actual_Shipped_Date);
    PARAMETER(DB1.Cancel_Date);
    PARAMETER(DB1.Terms_Code);
    PARAMETER(DB1.Special_Instructions);
    PARAMETER(DB1.Special_Instructions_2);
    PARAMETER(DB1.Carrier_Code);
    PARAMETER(DB1.Comment_Print_Acknowledge);
    PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
    PARAMETER(DB1.Comment_Print_Pick_Slip);
    PARAMETER(DB1.Comment_Print_Ship_Doc);
    PARAMETER(DB1.Reason_Code);
    PARAMETER(DB1.Order_in_Use);
    PARAMETER(DB1.Header_Status);
    PARAMETER(DB1.Header_Status_Last);
    PARAMETER(DB1.Order_Type_Print_Status);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.User_Original_Entry);
    PARAMETER(DB1.Date_of_Original_Entry);
    PARAMETER(DB1.Order_Value_Total);
    PARAMETER(DB1.Order_Weight_Total);
    PARAMETER(DB1.Credit_Hold);
    PARAMETER(DB1.Production_Hold);
    PARAMETER(DB1.New_Customer_Hold);
    PARAMETER(DB1.Requested_Delivery_Date);
    PARAMETER(DB1.Requested_Delivery_Time);
    PARAMETER(DB1.Accounts_Receiv_Ent_1);
    PARAMETER(DB1.Accounts_Receiv_Ent_2);
    PARAMETER(DB1.Load_ID);
    PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
    PARAMETER(DB1.Rated_Freight);
    PARAMETER(DB1.LTL_Flag);
    PARAMETER(DB1.Price_Audit);
    PARAMETER(DB1.Price_Status);
    PARAMETER(DB1.Shipping_Method);
    PARAMETER(DB1.Export_Status);
    PARAMETER(DB1.Palletize);
    PARAMETER(DB1.Shrink_Wrap);
    PARAMETER(DB1.Slip_Sheet);
    PARAMETER(DB1.Age_Code);
    PARAMETER(DB1.Reefer_Temperature);
    PARAMETER(DB1.Load_Type);
    PARAMETER(DB1.Attach_to_Invoice_Number);
    PARAMETER(DB1.Load_Plan_Order);
    PARAMETER(DB1.Print_Pick_Slip);
    PARAMETER(DB1.Resell_Reference_Number);
    PARAMETER(DB1.Special_Comment_1);
    PARAMETER(DB1.Special_Comment_2);
    PARAMETER(DB1.Affect_Auto_Accruals);
    PARAMETER(DB1.Sales_Route_Code);
    PARAMETER(DB1.Manager_Level_Code);
    PARAMETER(DB1.VP_Level_Code);
    PARAMETER(DB1.Attach_to_Order_Number);
    PARAMETER(DB1.Reason_for_Price_Audit);
    PARAMETER(DB1.Invoice_Number);
    PARAMETER(DB1.Invoice_Suffix);
    PARAMETER(DB1.Invoice_Date);
    PARAMETER(DB1.Event_Code);
    PARAMETER(DB1.Trans_Contol_AS400_Plant);
    PARAMETER(DB1.Modified_Flag);
    PARAMETER(DB1.A_R_order_Value_Total);
    PARAMETER(DB1.Billing_Activity_Type);
    PARAMETER(DB1.Block_Order_Flag);
    PARAMETER(DB1.Order_Certification_Flag);
    PARAMETER(DB1.Invoice_Order_Value_Tot);
    PARAMETER(DB1.Process_Sts_for_3C);
    PARAMETER(DB1.Order_Conf_Fax_Sts);
    PARAMETER(DB1.Manifest_Fax_Sts);
    PARAMETER(DB1.Invoice_Fax_Sts);
    PARAMETER(DB1.Transfer_in_Storage_Ind);
    PARAMETER(DB1.Email_Cust_On_Order_Ship);
    PARAMETER(DB1.Order_Emailed);
    PARAMETER(DB1.Export_Docs_Go_w_Driver);
    PARAMETER(DB1.Shipping_Temp_Code_C_F);
    PARAMETER(DB1.Broker_Order_Status);
    PARAMETER(DB1.Air_Freight_Order);
    PARAMETER(DB1.Order_Requires_Review);
    PARAMETER(DB1.OH_Load_Plan_Ready);
    PARAMETER(DB1.Export_USDA_Approved);
    PARAMETER(DB1.HPB_Ship_to_Warehouse);
    PARAMETER(DB1.OH_TF_Exempt_Code);
    PARAMETER(DB1.OH_Appt_Confirmation_Dt);
    PARAMETER(DB1.JPN_Invoice_Issuance_Date);
    PARAMETER(DB1.Load_Actual_Shipped_Date);
    PARAMETER(DB1.Load_BOL_Complete_Date);
    PARAMETER(DB1.Load_Truck_Departure_Date);
    PARAMETER(DB1.Maximum_Gross_Weight);
    PARAMETER(DB1.Time_of_Original_Entry);
    PARAMETER(DB1.OH_Appt_Confirmation_Tm);
    PARAMETER(DB1.Load_BOL_Complete_Time);
    PARAMETER(DB1.Load_Truck_Departure_Time);
    PARAMETER(DB1.Act_Frt_Reference_Amount);
    PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
    PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
    PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
    PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
    PARAMETER(DB1.Claim_Number);
    PARAMETER(DB1.EDI_Status_1);
    PARAMETER(DB1.EDI_Status_2);
    PARAMETER(DB1.EDI_Status_3);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);

   }

  }

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Print Invoice for order with Actual Ship Date LE selected ship date
 CASE;

 // IF DB1.Actual Shipped Date LE PAR.Actual Shipped Date
 IF DB1.Actual_Shipped_Date <= PAR.Actual_Shipped_Date;

 // AND DB1.Actual Shipped Date is entered
 AND DB1.Actual_Shipped_Date <> *ZERO;

 EXECUTE FUNCTION(SEL Process Prt Invc   IF) TYPE(EXCINTFUN)                     AC1343794;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(PAR.Invoice_Number);
 PARAMETER(PAR.Invoice_Suffix);
 PARAMETER(PAR.Invoice_Date);
 PARAMETER('06');
 PARAMETER('N');
 PARAMETER(PAR.Count_USR);
 {
  //?Execute internal function

  //?2/18/05 PKD use company number 000
  EXECUTE FUNCTION(UPD Next Invoice Nbr   RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1323447;
  PARAMETER(*ZERO);
  PARAMETER(PAR.Invoice_Number);
  {
   //?USER: Process Data record

   //?2/18/05 PKD get invoice number from company 000
   EXECUTE FUNCTION(CHG Next Invoice Nbr   CH) TYPE(CHGOBJ) FILE(CAASREP)          AC1329962;
   PARAMETER(*ZERO);
   PARAMETER(PAR.Next_Invoice_Number);
   {
    //?USER: Processing before Data update

    //?Assumes Invoice numbers always automatically assigned
    // PGM.*Record Data Changed = CND.*YES
    PGM.*Record_Data_Changed = 'Y';

    // Call program Val Invoice Exists    XF.
    CALL PROGRAM(Val Invoice Exists    XF) ('PMQIXFR');
    PARAMETER(DB1.Next_Invoice_Number);
    PARAMETER(LCL.Record_Found_USR);

    // DOW LCL.Record Found USR is Record Found
    DOW LCL.Record_Found_USR = 'Y';

    // DB1.Next Invoice Number = DB1.Next Invoice Number + CON.1
    DB1.Next_Invoice_Number = DB1.Next_Invoice_Number + 1;

    // Call program Val Invoice Exists    XF.
    CALL PROGRAM(Val Invoice Exists    XF) ('PMQIXFR');
    PARAMETER(DB1.Next_Invoice_Number);
    PARAMETER(LCL.Record_Found_USR);

    ENDDO;

    // PAR.USR Next Invoice Number = DB1.Next Invoice Number
    PAR.USR_Next_Invoice_Number = DB1.Next_Invoice_Number;

    // DB1.Next Invoice Number = DB1.Next Invoice Number + CON.1
    DB1.Next_Invoice_Number = DB1.Next_Invoice_Number + 1;

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  EXECUTE FUNCTION(CHG Invoice #, Date    CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1335457;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Invoice_Number);
  PARAMETER(PAR.Invoice_Suffix);
  PARAMETER(PAR.Invoice_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // Call program TRG Order Hdr CHG Trig XT.
   CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Type_Sales);
   PARAMETER(DB1.AR_Customer_Number);
   PARAMETER(DB1.Ship_To_Customer);
   PARAMETER(DB1.Ship_To_Name);
   PARAMETER(DB1.Ship_To_Address_Line_1);
   PARAMETER(DB1.Ship_To_Address_Line_2);
   PARAMETER(DB1.Ship_To_Address_Line_3);
   PARAMETER(DB1.Ship_To_City);
   PARAMETER(DB1.Ship_To_State_Code);
   PARAMETER(DB1.Ship_To_Zip_Postal_Code);
   PARAMETER(DB1.Bill_to_Customer);
   PARAMETER(DB1.Bill_to_Name);
   PARAMETER(DB1.Bill_to_Address_Line_1);
   PARAMETER(DB1.Bill_to_Address_Line_2);
   PARAMETER(DB1.Bill_to_Address_Line_3);
   PARAMETER(DB1.Bill_to_City);
   PARAMETER(DB1.Bill_to_State_Code);
   PARAMETER(DB1.Bill_to_Zip_Postal_Code);
   PARAMETER(DB1.Customer_Purchase_Order_#);
   PARAMETER(DB1.Order_Date);
   PARAMETER(DB1.Requested_Ship_Date);
   PARAMETER(DB1.Actual_Shipped_Date);
   PARAMETER(DB1.Cancel_Date);
   PARAMETER(DB1.Terms_Code);
   PARAMETER(DB1.Special_Instructions);
   PARAMETER(DB1.Special_Instructions_2);
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Comment_Print_Acknowledge);
   PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
   PARAMETER(DB1.Comment_Print_Pick_Slip);
   PARAMETER(DB1.Comment_Print_Ship_Doc);
   PARAMETER(DB1.Reason_Code);
   PARAMETER(DB1.Order_in_Use);
   PARAMETER(DB1.Header_Status);
   PARAMETER(DB1.Header_Status_Last);
   PARAMETER(DB1.Order_Type_Print_Status);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.User_Original_Entry);
   PARAMETER(DB1.Date_of_Original_Entry);
   PARAMETER(DB1.Order_Value_Total);
   PARAMETER(DB1.Order_Weight_Total);
   PARAMETER(DB1.Credit_Hold);
   PARAMETER(DB1.Production_Hold);
   PARAMETER(DB1.New_Customer_Hold);
   PARAMETER(DB1.Requested_Delivery_Date);
   PARAMETER(DB1.Requested_Delivery_Time);
   PARAMETER(DB1.Accounts_Receiv_Ent_1);
   PARAMETER(DB1.Accounts_Receiv_Ent_2);
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
   PARAMETER(DB1.Rated_Freight);
   PARAMETER(DB1.LTL_Flag);
   PARAMETER(DB1.Price_Audit);
   PARAMETER(DB1.Price_Status);
   PARAMETER(DB1.Shipping_Method);
   PARAMETER(DB1.Export_Status);
   PARAMETER(DB1.Palletize);
   PARAMETER(DB1.Shrink_Wrap);
   PARAMETER(DB1.Slip_Sheet);
   PARAMETER(DB1.Age_Code);
   PARAMETER(DB1.Reefer_Temperature);
   PARAMETER(DB1.Load_Type);
   PARAMETER(DB1.Attach_to_Invoice_Number);
   PARAMETER(DB1.Load_Plan_Order);
   PARAMETER(DB1.Print_Pick_Slip);
   PARAMETER(DB1.Resell_Reference_Number);
   PARAMETER(DB1.Special_Comment_1);
   PARAMETER(DB1.Special_Comment_2);
   PARAMETER(DB1.Affect_Auto_Accruals);
   PARAMETER(DB1.Sales_Route_Code);
   PARAMETER(DB1.Manager_Level_Code);
   PARAMETER(DB1.VP_Level_Code);
   PARAMETER(DB1.Attach_to_Order_Number);
   PARAMETER(DB1.Reason_for_Price_Audit);
   PARAMETER(DB1.Invoice_Number);
   PARAMETER(DB1.Invoice_Suffix);
   PARAMETER(DB1.Invoice_Date);
   PARAMETER(DB1.Event_Code);
   PARAMETER(DB1.Trans_Contol_AS400_Plant);
   PARAMETER(DB1.Modified_Flag);
   PARAMETER(DB1.A_R_order_Value_Total);
   PARAMETER(DB1.Billing_Activity_Type);
   PARAMETER(DB1.Block_Order_Flag);
   PARAMETER(DB1.Order_Certification_Flag);
   PARAMETER(DB1.Invoice_Order_Value_Tot);
   PARAMETER(DB1.Process_Sts_for_3C);
   PARAMETER(DB1.Order_Conf_Fax_Sts);
   PARAMETER(DB1.Manifest_Fax_Sts);
   PARAMETER(DB1.Invoice_Fax_Sts);
   PARAMETER(DB1.Transfer_in_Storage_Ind);
   PARAMETER(DB1.Email_Cust_On_Order_Ship);
   PARAMETER(DB1.Order_Emailed);
   PARAMETER(DB1.Export_Docs_Go_w_Driver);
   PARAMETER(DB1.Shipping_Temp_Code_C_F);
   PARAMETER(DB1.Broker_Order_Status);
   PARAMETER(DB1.Air_Freight_Order);
   PARAMETER(DB1.Order_Requires_Review);
   PARAMETER(DB1.OH_Load_Plan_Ready);
   PARAMETER(DB1.Export_USDA_Approved);
   PARAMETER(DB1.HPB_Ship_to_Warehouse);
   PARAMETER(DB1.OH_TF_Exempt_Code);
   PARAMETER(DB1.OH_Appt_Confirmation_Dt);
   PARAMETER(DB1.JPN_Invoice_Issuance_Date);
   PARAMETER(DB1.Load_Actual_Shipped_Date);
   PARAMETER(DB1.Load_BOL_Complete_Date);
   PARAMETER(DB1.Load_Truck_Departure_Date);
   PARAMETER(DB1.Maximum_Gross_Weight);
   PARAMETER(DB1.Time_of_Original_Entry);
   PARAMETER(DB1.OH_Appt_Confirmation_Tm);
   PARAMETER(DB1.Load_BOL_Complete_Time);
   PARAMETER(DB1.Load_Truck_Departure_Time);
   PARAMETER(DB1.Act_Frt_Reference_Amount);
   PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
   PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
   PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
   PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
   PARAMETER(DB1.Claim_Number);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);

   //?USER: Processing after Data update

   //?E00196 10/3/12 RMC CAT2 calls regular pfs interface
   EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
   PARAMETER(DB1.Company_Number);
   PARAMETER('LDORDD');
   PARAMETER(LCL.PFS_AccuSort_Active);
   PARAMETER(LCL.PFS_Carlisle_Active);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.PFS Carlisle Active is Yes
   IF LCL.PFS_Carlisle_Active = 'Y';

   // Call program PFS Lock Load/Order   XF.
   CALL PROGRAM(PFS Lock Load/Order   XF) ('PPNLXFR');
   PARAMETER(DB1.Load_ID);

   ENDIF;

  }

  //?*----------------------------------------------------------------*
  //?P000198
  //?Retrieve Order information for creating Inv List Work & Combine Inv
  DO;

  EXECUTE FUNCTION(RTV Info for Invc Prt  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1324121;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Order_Type_Sales);
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER(LCL.Ship_To_Customer);
  PARAMETER(LCL.Ship_To_Name);
  PARAMETER(LCL.Ship_To_Address_Line_1);
  PARAMETER(LCL.Ship_To_Address_Line_2);
  PARAMETER(LCL.Ship_To_Address_Line_3);
  PARAMETER(LCL.Ship_To_City);
  PARAMETER(LCL.Ship_To_State_Code);
  PARAMETER(LCL.Ship_To_Zip_Postal_Code);
  PARAMETER(LCL.Bill_to_Customer);
  PARAMETER(LCL.Bill_to_Name);
  PARAMETER(LCL.Bill_to_Address_Line_1);
  PARAMETER(LCL.Bill_to_Address_Line_2);
  PARAMETER(LCL.Bill_to_Address_Line_3);
  PARAMETER(LCL.Bill_to_City);
  PARAMETER(LCL.Bill_to_State_Code);
  PARAMETER(LCL.Bill_to_Zip_Postal_Code);
  PARAMETER(LCL.Customer_Purchase_Order_#);
  PARAMETER(LCL.Order_Date);
  PARAMETER(LCL.Actual_Shipped_Date);
  PARAMETER(LCL.Terms_Code);
  PARAMETER(LCL.Carrier_Code);
  PARAMETER(LCL.Order_Value_Total);
  PARAMETER(LCL.Order_Weight_Total);
  PARAMETER(LCL.Load_ID);
  PARAMETER(LCL.Sales_Route_Code);
  PARAMETER(WRK.Invoice_Number);
  PARAMETER(LCL.Invoice_Date);
  PARAMETER(LCL.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV CDE 1st Fax only  IF) TYPE(EXCINTFUN)                      AC1981538;
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER('AR-INVOICE');
  PARAMETER(*ZERO);
  PARAMETER(WRK.CDE_Name);
  PARAMETER(WRK.CDE_Destination);
  {
   //?Execute internal function

   EXECUTE FUNCTION(RTV CDE 1st Fax only  RT) TYPE(RTVOBJ) FILE(PNF7REP)           AC1981532;
   PARAMETER(PAR.Ship_To_Customer);
   PARAMETER(PAR.Distribution_Code);
   PARAMETER(PAR.CDE_Sequence_Number);
   PARAMETER(PAR.CDE_Name);
   PARAMETER(PAR.CDE_Destination);
   {
    //?USER: Initialize routine

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    //?Return 1st active record with a fax number
    CASE;

    // IF DB1.CDE Destination Type is Fax
    IF DB1.CDE_Destination_Type = 'F';

    CASE;

    // IF DB1.Record Status is Active
    IF DB1.Record_Status = 'A';

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

    ENDIF;

    ENDIF;

   }

  }

  //?Set flag if faxing invoice                            P000198
  CASE;

  // IF WRK.CDE Name is Not Blank
  IF WRK.CDE_Name <> *BLANK;

  // LCL.Fax Invoice Flag = CND.Automatically Fax Invoice
  LCL.Fax_Invoice_Flag = 'Y';

  ENDIF;

  EXECUTE FUNCTION(RTV CDE 1st Eml only  RT) TYPE(RTVOBJ) FILE(PNF7REP)           AC1981686;
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER('AR-INVOICE');
  PARAMETER(*ZERO);
  PARAMETER(WRK.CDE_Name);
  PARAMETER(WRK.CDE_Destination);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   //?Return 1st active record with an email address
   CASE;

   // IF DB1.CDE Destination Type is Email
   IF DB1.CDE_Destination_Type = 'E';

   // OR DB1.CDE Destination Type is One Email/Invoice
   OR DB1.CDE_Destination_Type = 'O';

   //?R14851 4/15/19  RMC ADDED Type = O
   CASE;

   // IF DB1.Record Status is Active
   IF DB1.Record_Status = 'A';

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

   ENDIF;

   ENDIF;

  }

  //?Set flag if emailing invoice                          P000198
  CASE;

  // IF WRK.CDE Name is Not Blank
  IF WRK.CDE_Name <> *BLANK;

  //?** Set Fax Invoice Flag so the wf rec won't get deleted before
  //?** it gets faxed or invoiced.
  // LCL.Fax Invoice Flag = CND.Automatically Fax Invoice
  LCL.Fax_Invoice_Flag = 'Y';

  // LCL.Email Selection usr = CND.Email Selected
  LCL.Email_Selection_usr = 'E';

  ENDIF;

  EXECUTE FUNCTION(Rtv EDI/Prt Invoice   RT) TYPE(RTVOBJ) FILE(CABBREP)           AC1611523;
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER(LCL.EDI_Invoice_Sts);
  PARAMETER(LCL.Print_Invoice_Sts);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // Call program Rtv One Invoice /PO   XP.
  CALL PROGRAM(Rtv One Invoice /PO   XP) ('PMCOXFR');
  PARAMETER(LCL.Ship_To_Customer);
  PARAMETER(LCL.One_Invoice_Per_PO);

  //?credit memo
  CASE;

  // IF LCL.Billing Activity Type is Credit Memo
  IF LCL.Billing_Activity_Type = '2';

  // LCL.Order Value Total = CON.*ZERO - LCL.Order Value Total
  LCL.Order_Value_Total = *ZERO - LCL.Order_Value_Total;

  ENDIF;

  EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
  PARAMETER(PAR.Company_Number);
  PARAMETER(NLL.Plant_Company_Sts);
  PARAMETER(LCL.Company_Organization);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDDO;

  //?*----------------------------------------------------------------*
  // LCL.Job Name CDE = JOB.*JOB
  LCL.Job_Name_CDE = JOB.*JOB;

  // LCL.Job Number Cde = JOB.*Job number
  LCL.Job_Number_Cde = JOB.*Job_number;

  //?Create WF Inv/Memo Combo for combine invoices
  //?Print Invoice & crt WF Invoice List Work
  CASE;

  // IF LCL.Print Invoice Sts is no
  IF LCL.Print_Invoice_Sts = 'N';

  //?*** Print = N --> Crt Invoice List Work
  //?** Set fax invoice flag to Yes for fax/email program  P000198
  EXECUTE FUNCTION(CRT PD Invoice List Wk CR) TYPE(CRTOBJ) FILE(PDJ4CPP)          AC1339739;
  PARAMETER(JOB.*JOB);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Order_Value_Total);
  PARAMETER(LCL.Order_Weight_Total);
  PARAMETER(LCL.Ship_To_Name);
  PARAMETER(LCL.Bill_to_Name);
  PARAMETER('Y');
  PARAMETER(LCL.Ship_To_Customer);
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Invoice_Number);
  PARAMETER(PAR.Invoice_Suffix);
  {
   //?USER: Processing if Data record already exists

   // PGM.*Return code = CND.*Record already exists
   PGM.*Return_code = 'Y2U0003';

  }

  CASE;

  // IF LCL.One Invoice Per PO is Yes
  IF LCL.One_Invoice_Per_PO = 'Y';

  // AND LCL.Billing Activity Type is Invoice or Debit Memo
  AND LCL.Billing_Activity_Type = '3'/'1';

  // Call program CRT 1 WF Invoice/Cmb   XF.
  CALL PROGRAM(CRT 1 WF Invoice/Cmb   XF) ('PMCPXFR');
  PARAMETER(LCL.Job_Name_CDE);
  PARAMETER(LCL.Job_Number_Cde);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.One_Invoice_Per_PO);

  ENDIF;

  //?* Delete trailer if Seaboard & Print (not reprint)    E002966
  CASE;

  // IF LCL.Company Organization is Seaboard
  IF LCL.Company_Organization = 'S';

  CASE;

  // IF LCL.Billing Activity Type is Invoice
  IF LCL.Billing_Activity_Type = '1';

  EXECUTE FUNCTION(RTV Ld Id for Orders  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1912980;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Scheduled_Ship_Date);
  PARAMETER(LCL.Load_ID);
  PARAMETER(LCL.Load_Plan_Order);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // AND LCL.Load Plan Order is yes
  AND LCL.Load_Plan_Order = 'Y';

  EXECUTE FUNCTION(RTV Carrier & Trailer  RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC2038863;
  PARAMETER(LCL.Load_ID);
  PARAMETER(LCL.Trailer_Id);
  PARAMETER(LCL.Carrier_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV/DLT Assigned Trlr  RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC2086635;
  PARAMETER(LCL.Carrier_Code);
  PARAMETER(LCL.Trailer_Id);
  {
   //?USER: Processing if Data record not found

   //?* Not an error, may have been deleted from another order on load
   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   //?USER: Process Data record

   EXECUTE FUNCTION(DLT Trailer            DO) TYPE(DLTOBJ) FILE(PDLYREP)          AC1496470;
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Trailer_Id);
  }

  ENDIF;

  ENDIF;

  ENDIF;

  //?Print Invoice & crt WF Invoice List Work
  // IF LCL.One Invoice Per PO is Yes
  IF LCL.One_Invoice_Per_PO = 'Y';

  // AND LCL.Billing Activity Type is Invoice or Debit Memo
  AND LCL.Billing_Activity_Type = '3'/'1';

  //?12/06/2006 slm -- Do not print the org inv routine
  EXECUTE FUNCTION(CRT PD Invoice List Wk CR) TYPE(CRTOBJ) FILE(PDJ4CPP)          AC1339739;
  PARAMETER(JOB.*JOB);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Order_Value_Total);
  PARAMETER(LCL.Order_Weight_Total);
  PARAMETER(LCL.Ship_To_Name);
  PARAMETER(LCL.Bill_to_Name);
  PARAMETER('Y');
  PARAMETER(LCL.Ship_To_Customer);
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Invoice_Number);
  PARAMETER(PAR.Invoice_Suffix);
  {
   //?USER: Processing if Data record already exists

   // PGM.*Return code = CND.*Record already exists
   PGM.*Return_code = 'Y2U0003';

  }

  // Call program CRT 1 WF Invoice/Cmb   XF.
  CALL PROGRAM(CRT 1 WF Invoice/Cmb   XF) ('PMCPXFR');
  PARAMETER(LCL.Job_Name_CDE);
  PARAMETER(LCL.Job_Number_Cde);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.One_Invoice_Per_PO);

  //?* Delete trailer if Seaboard & Print (not reprint)    E002966
  CASE;

  // IF LCL.Company Organization is Seaboard
  IF LCL.Company_Organization = 'S';

  CASE;

  // IF LCL.Billing Activity Type is Invoice
  IF LCL.Billing_Activity_Type = '1';

  EXECUTE FUNCTION(RTV Ld Id for Orders  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1912980;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Scheduled_Ship_Date);
  PARAMETER(LCL.Load_ID);
  PARAMETER(LCL.Load_Plan_Order);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // AND LCL.Load Plan Order is yes
  AND LCL.Load_Plan_Order = 'Y';

  EXECUTE FUNCTION(RTV Carrier & Trailer  RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC2038863;
  PARAMETER(LCL.Load_ID);
  PARAMETER(LCL.Trailer_Id);
  PARAMETER(LCL.Carrier_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV/DLT Assigned Trlr  RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC2086635;
  PARAMETER(LCL.Carrier_Code);
  PARAMETER(LCL.Trailer_Id);
  {
   //?USER: Processing if Data record not found

   //?* Not an error, may have been deleted from another order on load
   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   //?USER: Process Data record

   EXECUTE FUNCTION(DLT Trailer            DO) TYPE(DLTOBJ) FILE(PDLYREP)          AC1496470;
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Trailer_Id);
  }

  ENDIF;

  ENDIF;

  ENDIF;

  //?Print Invoice & crt WF Invoice List Work
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?*** Print=Y --> Print Invoice. Print will create Invoice List Work
  //?If custom program then print the invoice custom program
  //?Department is INCST1
  // Call program RTV CDD for Overlays   XF.
  CALL PROGRAM(RTV CDD for Overlays   XF) ('PMG9XFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER('IN');
  PARAMETER('INCST1');
  PARAMETER(NLL.CDD_Name_of_Overlay);
  PARAMETER(LCL.CDD_Program_Name);
  PARAMETER(NLL.CDD_Printer_File_Name);
  PARAMETER(NLL.CDD_Additional_Object);
  PARAMETER(NLL.CDD_Sender_Phone);
  PARAMETER(NLL.CDD_Sender_Fax);
  PARAMETER(LCL.Output_Queue);
  PARAMETER(LCL.Hold_File);
  PARAMETER(LCL.Save_File);
  PARAMETER(LCL.Source_Drawer);
  PARAMETER(NLL.Printer_Device_Type);
  PARAMETER(NLL.Page_Length_2);
  PARAMETER(NLL.Page_Width_2);
  PARAMETER(NLL.Page_LPI);
  PARAMETER(NLL.Page_CPI);
  PARAMETER(NLL.Page_Overflow);
  PARAMETER(NLL.Page_Rotation);
  PARAMETER(NLL.CDD_Comment_1);
  PARAMETER(NLL.CDD_Comment_2);
  PARAMETER(NLL.CDD_Comment_3);
  PARAMETER(NLL.CDD_Comment_4);
  PARAMETER(NLL.CDD_Comment_5);
  PARAMETER(NLL.Record_Status);

  //?Print Invoice
  CASE;

  // IF LCL.CDD Program Name is Not entered
  IF LCL.CDD_Program_Name = *BLANK;

  // Call program PRT Inv/Memo 8LPI      PF.
  CALL PROGRAM(PRT Inv/Memo 8LPI      PF) ('PDR4PFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Printed_Status);

  //?Print Invoice
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?If Daily's or HPB
  CASE;

  // IF LCL.Company Organization is Daily's
  IF LCL.Company_Organization = 'D';

  //?This will be called three times Customer/Org/Office
  // Call program Zzz Inv/Memo 8LPI Dly  PF.
  CALL PROGRAM(Zzz Inv/Memo 8LPI Dly  PF) ('PMIVPFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Printed_Status);
  PARAMETER('CS');
  PARAMETER(LCL.Job_Name_CDE);

  // Call program Zzz Inv/Memo 8LPI Dly  PF.
  CALL PROGRAM(Zzz Inv/Memo 8LPI Dly  PF) ('PMIVPFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Printed_Status);
  PARAMETER('OF');
  PARAMETER(LCL.Job_Name_CDE);

  // Call program Zzz Inv/Memo 8LPI Dly  PF.
  CALL PROGRAM(Zzz Inv/Memo 8LPI Dly  PF) ('PMIVPFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Printed_Status);
  PARAMETER('OR');
  PARAMETER(LCL.Job_Name_CDE);

  //?If Daily's or HPB
  // IF LCL.Company Organization is High Plains Biodiesel
  IF LCL.Company_Organization = 'H';

  //?FP1110 7/21/08 RMC - Print HPB BOL if COA Batch# is on the Order
  // LCL.HPB COA Batch Number = CON.*ZERO
  LCL.HPB_COA_Batch_Number = *ZERO;

  EXECUTE FUNCTION(VAL OHE exsts for HPB RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC1892284;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.HPB_COA_Batch_Number);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.HPB COA Batch Number is Entered
  IF LCL.HPB_COA_Batch_Number > *ZERO;

  // AND LCL.Load ID is GT Zero
  AND LCL.Load_ID > *ZERO;

  // Call program PRT Bill of Lading-HPB PF.
  CALL PROGRAM(PRT Bill of Lading-HPB PF) ('PMO7PFR');
  PARAMETER(LCL.Load_ID);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Export_Status);

  ENDIF;

  // Call program PRT Inv/Memo 8LPI HPB  PF.
  CALL PROGRAM(PRT Inv/Memo 8LPI HPB  PF) ('PMRCPFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Printed_Status);

  ENDIF;

  ENDIF;

  //?* Delete trailer if Seaboard & Print (not reprint)    E002966
  CASE;

  // IF LCL.Company Organization is Seaboard
  IF LCL.Company_Organization = 'S';

  CASE;

  // IF LCL.Billing Activity Type is Invoice
  IF LCL.Billing_Activity_Type = '1';

  EXECUTE FUNCTION(RTV Ld Id for Orders  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1912980;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Scheduled_Ship_Date);
  PARAMETER(LCL.Load_ID);
  PARAMETER(LCL.Load_Plan_Order);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // AND LCL.Load Plan Order is yes
  AND LCL.Load_Plan_Order = 'Y';

  EXECUTE FUNCTION(RTV Carrier & Trailer  RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC2038863;
  PARAMETER(LCL.Load_ID);
  PARAMETER(LCL.Trailer_Id);
  PARAMETER(LCL.Carrier_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV/DLT Assigned Trlr  RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC2086635;
  PARAMETER(LCL.Carrier_Code);
  PARAMETER(LCL.Trailer_Id);
  {
   //?USER: Processing if Data record not found

   //?* Not an error, may have been deleted from another order on load
   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   //?USER: Process Data record

   EXECUTE FUNCTION(DLT Trailer            DO) TYPE(DLTOBJ) FILE(PDLYREP)          AC1496470;
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Trailer_Id);
  }

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  //?*----------------------------------------------------------------*
  EXECUTE FUNCTION(CRT Invoice Events     RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1346647;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Event_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Invoice_Number);
  PARAMETER(PAR.Invoice_Suffix);
  PARAMETER(PAR.Ship_To_Customer);
  {
   //?USER: Initialize routine

   // PAR.Event Number = CON.*ZERO
   PAR.Event_Number = *ZERO;

   EXECUTE FUNCTION(RTV Latest Event/Date  RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1280294;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Event_Number);
   PARAMETER(WRK.TXT_field_not_needed);
   PARAMETER(WRK.Numeric_Field_Not_Needed);
   PARAMETER(WRK.TXT_field_not_needed);
   PARAMETER(PAR.Ship_To_Customer);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(1);
   PARAMETER(PAR.Event_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(JOB.*Job_date);
   PARAMETER('Y');
   PARAMETER('N');
   PARAMETER('Y');
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?USER: Process Data record

   // PAR.Event Number = PAR.Event Number + CON.1
   PAR.Event_Number = PAR.Event_Number + 1;

   EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Event_Number);
   PARAMETER(PAR.Event_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Invoice_Memo_Number);
   PARAMETER(PAR.Invoice_Memo_Suffix);
   PARAMETER(JOB.*Job_date);
   PARAMETER('Y');
   PARAMETER('N');
   PARAMETER('N');
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Ship_To_Customer);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   QUIT;

  }

  EXECUTE FUNCTION(UPD Event: Hdr,O/S Dtl RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1335273;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Event_Code);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(UPD Event: Ship Detail RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1335289;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Event_Code);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(CHG Shipping Event     CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1325667;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Event_Code);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

   }

   EXECUTE FUNCTION(CHG Ord Event & Stat.  CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1306469;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Header_Status);
   PARAMETER(DB1.Header_Status_Last);
   PARAMETER(PAR.Event_Code);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // Call program TRG Order Hdr CHG Trig XT.
    CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Type_Sales);
    PARAMETER(DB1.AR_Customer_Number);
    PARAMETER(DB1.Ship_To_Customer);
    PARAMETER(DB1.Ship_To_Name);
    PARAMETER(DB1.Ship_To_Address_Line_1);
    PARAMETER(DB1.Ship_To_Address_Line_2);
    PARAMETER(DB1.Ship_To_Address_Line_3);
    PARAMETER(DB1.Ship_To_City);
    PARAMETER(DB1.Ship_To_State_Code);
    PARAMETER(DB1.Ship_To_Zip_Postal_Code);
    PARAMETER(DB1.Bill_to_Customer);
    PARAMETER(DB1.Bill_to_Name);
    PARAMETER(DB1.Bill_to_Address_Line_1);
    PARAMETER(DB1.Bill_to_Address_Line_2);
    PARAMETER(DB1.Bill_to_Address_Line_3);
    PARAMETER(DB1.Bill_to_City);
    PARAMETER(DB1.Bill_to_State_Code);
    PARAMETER(DB1.Bill_to_Zip_Postal_Code);
    PARAMETER(DB1.Customer_Purchase_Order_#);
    PARAMETER(DB1.Order_Date);
    PARAMETER(DB1.Requested_Ship_Date);
    PARAMETER(DB1.Actual_Shipped_Date);
    PARAMETER(DB1.Cancel_Date);
    PARAMETER(DB1.Terms_Code);
    PARAMETER(DB1.Special_Instructions);
    PARAMETER(DB1.Special_Instructions_2);
    PARAMETER(DB1.Carrier_Code);
    PARAMETER(DB1.Comment_Print_Acknowledge);
    PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
    PARAMETER(DB1.Comment_Print_Pick_Slip);
    PARAMETER(DB1.Comment_Print_Ship_Doc);
    PARAMETER(DB1.Reason_Code);
    PARAMETER(DB1.Order_in_Use);
    PARAMETER(DB1.Header_Status);
    PARAMETER(DB1.Header_Status_Last);
    PARAMETER(DB1.Order_Type_Print_Status);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.User_Original_Entry);
    PARAMETER(DB1.Date_of_Original_Entry);
    PARAMETER(DB1.Order_Value_Total);
    PARAMETER(DB1.Order_Weight_Total);
    PARAMETER(DB1.Credit_Hold);
    PARAMETER(DB1.Production_Hold);
    PARAMETER(DB1.New_Customer_Hold);
    PARAMETER(DB1.Requested_Delivery_Date);
    PARAMETER(DB1.Requested_Delivery_Time);
    PARAMETER(DB1.Accounts_Receiv_Ent_1);
    PARAMETER(DB1.Accounts_Receiv_Ent_2);
    PARAMETER(DB1.Load_ID);
    PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
    PARAMETER(DB1.Rated_Freight);
    PARAMETER(DB1.LTL_Flag);
    PARAMETER(DB1.Price_Audit);
    PARAMETER(DB1.Price_Status);
    PARAMETER(DB1.Shipping_Method);
    PARAMETER(DB1.Export_Status);
    PARAMETER(DB1.Palletize);
    PARAMETER(DB1.Shrink_Wrap);
    PARAMETER(DB1.Slip_Sheet);
    PARAMETER(DB1.Age_Code);
    PARAMETER(DB1.Reefer_Temperature);
    PARAMETER(DB1.Load_Type);
    PARAMETER(DB1.Attach_to_Invoice_Number);
    PARAMETER(DB1.Load_Plan_Order);
    PARAMETER(DB1.Print_Pick_Slip);
    PARAMETER(DB1.Resell_Reference_Number);
    PARAMETER(DB1.Special_Comment_1);
    PARAMETER(DB1.Special_Comment_2);
    PARAMETER(DB1.Affect_Auto_Accruals);
    PARAMETER(DB1.Sales_Route_Code);
    PARAMETER(DB1.Manager_Level_Code);
    PARAMETER(DB1.VP_Level_Code);
    PARAMETER(DB1.Attach_to_Order_Number);
    PARAMETER(DB1.Reason_for_Price_Audit);
    PARAMETER(DB1.Invoice_Number);
    PARAMETER(DB1.Invoice_Suffix);
    PARAMETER(DB1.Invoice_Date);
    PARAMETER(DB1.Event_Code);
    PARAMETER(DB1.Trans_Contol_AS400_Plant);
    PARAMETER(DB1.Modified_Flag);
    PARAMETER(DB1.A_R_order_Value_Total);
    PARAMETER(DB1.Billing_Activity_Type);
    PARAMETER(DB1.Block_Order_Flag);
    PARAMETER(DB1.Order_Certification_Flag);
    PARAMETER(DB1.Invoice_Order_Value_Tot);
    PARAMETER(DB1.Process_Sts_for_3C);
    PARAMETER(DB1.Order_Conf_Fax_Sts);
    PARAMETER(DB1.Manifest_Fax_Sts);
    PARAMETER(DB1.Invoice_Fax_Sts);
    PARAMETER(DB1.Transfer_in_Storage_Ind);
    PARAMETER(DB1.Email_Cust_On_Order_Ship);
    PARAMETER(DB1.Order_Emailed);
    PARAMETER(DB1.Export_Docs_Go_w_Driver);
    PARAMETER(DB1.Shipping_Temp_Code_C_F);
    PARAMETER(DB1.Broker_Order_Status);
    PARAMETER(DB1.Air_Freight_Order);
    PARAMETER(DB1.Order_Requires_Review);
    PARAMETER(DB1.OH_Load_Plan_Ready);
    PARAMETER(DB1.Export_USDA_Approved);
    PARAMETER(DB1.HPB_Ship_to_Warehouse);
    PARAMETER(DB1.OH_TF_Exempt_Code);
    PARAMETER(DB1.OH_Appt_Confirmation_Dt);
    PARAMETER(DB1.JPN_Invoice_Issuance_Date);
    PARAMETER(DB1.Load_Actual_Shipped_Date);
    PARAMETER(DB1.Load_BOL_Complete_Date);
    PARAMETER(DB1.Load_Truck_Departure_Date);
    PARAMETER(DB1.Maximum_Gross_Weight);
    PARAMETER(DB1.Time_of_Original_Entry);
    PARAMETER(DB1.OH_Appt_Confirmation_Tm);
    PARAMETER(DB1.Load_BOL_Complete_Time);
    PARAMETER(DB1.Load_Truck_Departure_Time);
    PARAMETER(DB1.Act_Frt_Reference_Amount);
    PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
    PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
    PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
    PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
    PARAMETER(DB1.Claim_Number);
    PARAMETER(DB1.EDI_Status_1);
    PARAMETER(DB1.EDI_Status_2);
    PARAMETER(DB1.EDI_Status_3);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);

   }

  }

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

}


//?04/03/2012 LJB E002016  Set reprint flag = Reprint(Form) for Combos
EXECUTE FUNCTION(SEL Inv to Prnt& Post  RT) TYPE(RTVOBJ) FILE(PMAFCPP)          AC1802083;
PARAMETER(LCL.Job_Name_CDE);
PARAMETER(LCL.Job_Number_Cde);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Count_USR);
PARAMETER(PAR.Process_Cust_Types_Usr);
PARAMETER(PAR.Status_Y_or_N);
PARAMETER('Y');
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // LCL.Break = CND.No
 LCL.Break = 'N';

 CASE;

 // IF DB1.One Invoice Per PO is Yes
 IF DB1.One_Invoice_Per_PO = 'Y';

 // AND DB1.WF Inv/Comb Billing Type is Invoice or Debit Memo
 AND DB1.WF_Inv_Comb_Billing_Type = '3'/'1';

 //?This process is already restricting by Job and company
 //?CHG:  Actual Shipped Date/Ship To Customer/Customer PO
 CASE;

 // IF LCL.Actual Shipped Date NE DB1.Actual Shipped Date
 IF LCL.Actual_Shipped_Date <> DB1.Actual_Shipped_Date;

 // LCL.Break = CND.Yes
 LCL.Break = 'Y';

 //?CHG:  Actual Shipped Date/Ship To Customer/Customer PO
 // IF LCL.Ship To Customer NE DB1.Ship To Customer
 IF LCL.Ship_To_Customer <> DB1.Ship_To_Customer;

 // LCL.Break = CND.Yes
 LCL.Break = 'Y';

 //?CHG:  Actual Shipped Date/Ship To Customer/Customer PO
 // IF LCL.Customer Purchase Order # NE DB1.Customer Purchase Order #
 IF LCL.Customer_Purchase_Order_# <> DB1.Customer_Purchase_Order_#;

 // LCL.Break = CND.Yes
 LCL.Break = 'Y';

 ENDIF;

 //?Break logic print the combine invoice on the first one
 CASE;

 // IF LCL.Break is Yes
 IF LCL.Break = 'Y';

 //?* establish first logic break, only select print of combine invoice
 //?when the ship to and customer po number changes
 //?** Depending on option, format for Form or No Form    E002016
 CASE;

 // IF PAR.Reprint Status USR is Reprint
 IF PAR.Reprint_Status_USR = 'R';

 // Call program PRT Inv/Fast FaxCMB 6LPPF.
 CALL PROGRAM(PRT Inv/Fast FaxCMB 6LPPF) ('PMCKPFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(LCL.Status_Y_or_N);
 PARAMETER(DB1.Job_Name_CDE);
 PARAMETER(DB1.Job_Number_Cde);

 //?** Depending on option, format for Form or No Form    E002016
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program PRT Inv/Memo 8LPI CB   PF.
 CALL PROGRAM(PRT Inv/Memo 8LPI CB   PF) ('PMCJPFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(PAR.Status_Y_or_N);
 PARAMETER(DB1.Job_Name_CDE);
 PARAMETER(DB1.Job_Number_Cde);

 //?Dlt trailer for Invoiced order, Seaboard only         E002966
 CASE;

 // IF DB1.WF Inv/Comb Billing Type is Invoice
 IF DB1.WF_Inv_Comb_Billing_Type = '1';

 EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
 PARAMETER(DB1.Company_Number);
 PARAMETER(NLL.Plant_Company_Sts);
 PARAMETER(LCL.Company_Organization);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Company Organization is Seaboard
 IF LCL.Company_Organization = 'S';

 EXECUTE FUNCTION(RTV Ld Id for Orders  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1912980;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(NLL.Scheduled_Ship_Date);
 PARAMETER(LCL.Load_ID);
 PARAMETER(LCL.Load_Plan_Order);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // AND LCL.Load Plan Order is yes
 AND LCL.Load_Plan_Order = 'Y';

 EXECUTE FUNCTION(RTV Carrier & Trailer  RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC2038863;
 PARAMETER(LCL.Load_ID);
 PARAMETER(LCL.Trailer_Id);
 PARAMETER(LCL.Carrier_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?* Not an error if no trailer                          E002966
 EXECUTE FUNCTION(RTV/DLT Assigned Trlr  RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC2086635;
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(LCL.Trailer_Id);
 {
  //?USER: Processing if Data record not found

  //?* Not an error, may have been deleted from another order on load
  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(DLT Trailer            DO) TYPE(DLTOBJ) FILE(PDLYREP)          AC1496470;
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Trailer_Id);
 }

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 // LCL.Ship To Customer = DB1.Ship To Customer
 LCL.Ship_To_Customer = DB1.Ship_To_Customer;

 // LCL.Customer Purchase Order # = DB1.Customer Purchase Order #
 LCL.Customer_Purchase_Order_# = DB1.Customer_Purchase_Order_#;

 // LCL.Actual Shipped Date = DB1.Actual Shipped Date
 LCL.Actual_Shipped_Date = DB1.Actual_Shipped_Date;

 ENDIF;

 ENDIF;

}


// Call program PRT Invoice Trans. Reg PF.
CALL PROGRAM(PRT Invoice Trans. Reg PF) ('PDUWPFR');
PARAMETER(JOB.*JOB);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Billing_Activity_Type);
PARAMETER('N');
PARAMETER(PAR.Process_Cust_Types_Usr);

