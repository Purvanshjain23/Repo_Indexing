// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPFNDFR
// ?Date: 14.08.2025 Time: 03:40:13
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Important note
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?All calls to this program must be done through:
//?     Item Default - EXT WW Co Item & Item Dft
//?Otherwise when users try to toggle between Item Default and
//?  Company Item they will get a recursive program call error
ENDIF;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('C/S');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
PARAMETER(JOB.*USER);
PARAMETER(LCL.User_Code_Model);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Printer Device = CON.*BLANK
PAR.PRT_Printer_Device = *BLANK;

// PGM.*Scan limit = CND.9999999
PGM.*Scan_limit = 9999999;

//?USER: Initialize subfile control

CASE;

// IF PAR.First Time Flag EQ WRK.BLANK
IF PAR.First_Time_Flag = WRK.BLANK;

// CTL.Record Status = CND.Active
CTL.Record_Status = 'A';

// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// CTL.Sel Value 1 USR = CND.All Value
CTL.Sel_Value_1_USR = *BLANK;

ENDIF;

//?USER: Initialize subfile record from DBF record

EXECUTE FUNCTION(RTV Assign Co Flag     RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1701172;
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Company_Assigned_Usr);
{
 //?USER: Initialize routine

 // LCL.Count Records        USR = CON.*ZERO
 LCL.Count_Records_USR = *ZERO;

 //?USER: Process Data record

 //?01/27/06 PKD Remove hard coding of Guymon & St. Joseph
 // LCL.Count Records        USR = LCL.Count Records        USR + CON.1
 LCL.Count_Records_USR = LCL.Count_Records_USR + 1;

 // PAR.Company Assigned Usr = CVTVAR(DB1.Company Number)
 PAR.Company_Assigned_Usr = CVTVAR(DB1.Company_Number);

 CASE;

 // IF LCL.Count Records        USR is GT 1
 IF LCL.Count_Records_USR > 1;

 // PAR.Company Assigned Usr = CON.All
 PAR.Company_Assigned_Usr = 'All';

 QUIT;

 ENDIF;

}


CASE;

// IF CTL.Sel Value 1 USR is Select
IF CTL.Sel_Value_1_USR = 'X';

CASE;

// IF RCD.Partial Item Code is Not Entered
IF RCD.Partial_Item_Code = *ZERO;

// AND RCD.WIP Item Code is Not Entered
AND RCD.WIP_Item_Code = *ZERO;

// AND RCD.WIP Reject Code is Not Entered
AND RCD.WIP_Reject_Code = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?E3787 JJH 08/03/15 - Filter for Send on PFS Prod Schedule
//?Record Selection for Send on PFS Prod Schedule.
CASE;

// IF CTL.Item Prd Schd Snd PFS USR is Yes
IF CTL.Item_Prd_Schd_Snd_PFS_USR = 'Y';

CASE;

// IF RCD.Item Prod Sched Send PFS is Yes
IF RCD.Item_Prod_Sched_Send_PFS = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Record Selection for Send on PFS Prod Schedule.
// IF CTL.Item Prd Schd Snd PFS USR is No
IF CTL.Item_Prd_Schd_Snd_PFS_USR = 'N';

CASE;

// IF RCD.Item Prod Sched Send PFS is No
IF RCD.Item_Prod_Sched_Send_PFS = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?E3787 JJH 08/03/15 - Filter for Include on Prod Schedule
//?SNDERRMSG if Include on Prod Sched Not EQ Y,N or Blank.
CASE;

// IF CTL.Item Prd Schd Snd PFS USR is *ALL values
IF CTL.Item_Prd_Schd_Snd_PFS_USR = 'Y'/'N'/*BLANK;

//?SNDERRMSG if Include on Prod Sched Not EQ Y,N or Blank.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Incl on Prod Schedule must be Y or N.'
ERROR(USR4812);
MSGPARM(CTL.Item_Prd_Schd_Snd_PFS_USR);

ENDIF;

//?F5=Refresh
CASE;

// IF CTL.*CMD key is CF05
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Create new Item
CASE;

// IF CTL.*CMD key is *Create
IF CTL.*CMD_key = '06';

// CTL.Item Code = CON.*ZERO
CTL.Item_Code = *ZERO;

// Call program Edt Item Default      E3.
CALL PROGRAM(Edt Item Default      E3) ('PPFRE3R');
PARAMETER('N');
PARAMETER(CTL.Item_Code);
PARAMETER(*ZERO);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F7=Edit Meat Cost Group
CASE;

// IF CTL.*CMD key is CF07
IF CTL.*CMD_key = '07';

// Call program Edt Meat Cost Group   EF.
CALL PROGRAM(Edt Meat Cost Group   EF) ('PBAGEFR');

ENDIF;

//?F8=Create Co-Packer
CASE;

// IF CTL.*CMD key is CF08
IF CTL.*CMD_key = '08';

// CTL.Item Code = CON.*ZERO
CTL.Item_Code = *ZERO;

// Call program Edt Item Default      E3.
CALL PROGRAM(Edt Item Default      E3) ('PPFRE3R');
PARAMETER('Y');
PARAMETER(CTL.Item_Code);
PARAMETER(*ZERO);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F9=Edt FR-FZ Table
CASE;

// IF CTL.*CMD key is CF09
IF CTL.*CMD_key = '09';

// Call program Edt FR/FZ Item Codes  EF.
CALL PROGRAM(Edt FR/FZ Item Codes  EF) ('PBIWEFR');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Process Print Listing request
CASE;

// IF CTL.*CMD key is *Print List
IF CTL.*CMD_key = '21';

// Call program PMT Print Option  SHR  PV.
CALL PROGRAM(PMT Print Option  SHR  PV) ('PDG0PVR');
PARAMETER('Item Default Listing');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('IDS');

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// Execute command - 'PS Prt Cutout Dist Items'
EXECUTE COMMAND(USR2181);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('PDNPPFR');
PARAMETER('PDNPPFR$');
PARAMETER('IDS');
PARAMETER(CTL.Catch_Weight_Status);
PARAMETER(CTL.Item_Structure_Class_Code);
PARAMETER(CTL.Item_Type_Code);
PARAMETER(CTL.Base_Conv_Loss_Item);
PARAMETER(CTL.Variety_Rendered_Cut);
PARAMETER(CTL.Frozen_Make_to_Order_Sts);
PARAMETER(CTL.Credit_Item_Status);
PARAMETER(CTL.Seconds_Item);
PARAMETER(CTL.Record_Status);
PARAMETER('ITMDFTLST');

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?WW Company Item
CASE;

// IF CTL.*CMD key is CF22
IF CTL.*CMD_key = '22';

// PAR.Item Code Txt = CVTVAR(CTL.Item Code)
PAR.Item_Code_Txt = CVTVAR(CTL.Item_Code);

// PAR.USR Item Display Screen = CND.Company Item from ID
PAR.USR_Item_Display_Screen = 3;

RETURN;

ENDIF;

//?F10=Partial/WIP/Reject Only
CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

CASE;

// IF CTL.Sel Value 1 USR is Select
IF CTL.Sel_Value_1_USR = 'X';

// CTL.Sel Value 1 USR = CND.Select
CTL.Sel_Value_1_USR = 'X';

// IF CTL.Sel Value 1 USR is All Value
IF CTL.Sel_Value_1_USR = *BLANK;

// CTL.Sel Value 1 USR = CND.Select
CTL.Sel_Value_1_USR = 'X';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?E3313 JJH 09/03/14 - Add F12=GTIN
//?F12=GTIN
CASE;

// IF CTL.*CMD key is CF12
IF CTL.*CMD_key = '12';

// Call program Dsp Item Default Ext  DF.
CALL PROGRAM(Dsp Item Default Ext  DF) ('PBO5DFR');

ENDIF;

//?122905 SLM Add the F23=Item Structure List Prompt -realign the WW
//?           try to keep the ww item default and the ww item default dsp
//?           similar
//?Item Structure List Prompt
CASE;

// IF CTL.*CMD key is CF23
IF CTL.*CMD_key = '23';

// LCL.Item Code Txt = CVTVAR(CTL.Item Code)
LCL.Item_Code_Txt = CVTVAR(CTL.Item_Code);

// Call program Prt Item Str/Itms-Pass PV.
CALL PROGRAM(Prt Item Str/Itms-Pass PV) ('PPVAPVR');
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Catch_Weight_Status);
PARAMETER(CTL.Item_Structure_Class_Code);
PARAMETER(CTL.Item_Structure_Group_Code);
PARAMETER(CTL.Item_Structure_Type_Code);
PARAMETER(CTL.Item_Type_Code);
PARAMETER(CTL.Base_Conv_Loss_Item);
PARAMETER(CTL.Credit_Item_Status);
PARAMETER(CTL.Partial_Item_Code);
PARAMETER(CTL.WIP_Item_Code);
PARAMETER(CTL.WIP_Reject_Code);
PARAMETER(CTL.Print_on_Realization_Rpt);
PARAMETER(CTL.Pieces_Per_Bag);
PARAMETER(CTL.Bags_Per_Unit);
PARAMETER(CTL.Record_Status);

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?2 - Process item change request
CASE;

// IF RCD.*SFLSEL is *Change
IF RCD.*SFLSEL = '2';

// CTL.Item Code = RCD.Item Code
CTL.Item_Code = RCD.Item_Code;

CASE;

// IF RCD.Item Structure Type Code is EQ 900
IF RCD.Item_Structure_Type_Code = 900;

// LCL.Co-Packer Item Req    Usr = CND.yes
LCL.Co_Packer_Item_Req_Usr = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Co-Packer Item Req    Usr = CND.no
LCL.Co_Packer_Item_Req_Usr = 'N';

ENDIF;

// Call program Edt Item Default      E3.
CALL PROGRAM(Edt Item Default      E3) ('PPFRE3R');
PARAMETER(LCL.Co_Packer_Item_Req_Usr);
PARAMETER(RCD.Item_Code);
PARAMETER(*ZERO);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?3 - Process Item copy request
CASE;

// IF RCD.*SFLSEL is *Copy
IF RCD.*SFLSEL = '3';

// Call program Cpy Item Default      PV.
CALL PROGRAM(Cpy Item Default      PV) ('PPFSPVR');
PARAMETER(RCD.Item_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?4 - Validate delete request
CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4';

// LCL.Record Found - ItmBom Usr = CND.Blanks
LCL.Record_Found_ItmBom_Usr = *BLANK;

// LCL.Company Number CDE = CON.*ZERO
LCL.Company_Number_CDE = *ZERO;

// Call program Val Item Bom Rltnshps XF.
CALL PROGRAM(Val Item Bom Rltnshps XF) ('PNJ9XFR');
PARAMETER(LCL.Company_Number_CDE);
PARAMETER(RCD.Item_Code);
PARAMETER(LCL.Record_Found_ItmBom_Usr);

CASE;

// IF LCL.Record Found - ItmBom Usr is Record Found
IF LCL.Record_Found_ItmBom_Usr = 'Y';

// Send error message - 'InActive/Delete Item Not allow due to other BOM relationships - verify Wher
ERROR(USR4174);
MSGPARM(RCD.Item_Code);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Item Delete       IF) TYPE(EXCINTFUN)                      AC1497599;
PARAMETER(RCD.Item_Code);
PARAMETER(PAR.Record_Found_OrdDtlUSR);
PARAMETER(PAR.Record_Found_ItmBal_USR);
{
 //?Execute internal function

 EXECUTE FUNCTION(Val Item Delete       RT) TYPE(RTVOBJ) FILE(CAABREP)           AC1497602;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Record_Found_OrdDtlUSR);
 PARAMETER(PAR.Record_Found_ItmBal_USR);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Val Item Delete       RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1497617;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Record_Found_OrdDtlUSR);
  {
   //?USER: Processing if Data record not found

   // PAR.Record Found -OrdDtlUSR = CND.Record Not Found
   PAR.Record_Found_OrdDtlUSR = 'N';

   //?USER: Process Data record

   // PAR.Record Found -OrdDtlUSR = CND.Record Found
   PAR.Record_Found_OrdDtlUSR = 'Y';

   QUIT;

  }

  CASE;

  // IF PAR.Record Found -OrdDtlUSR is Record Found
  IF PAR.Record_Found_OrdDtlUSR = 'Y';

  // Send error message - 'Open Orders exists for Item &1.  The Item may not be deleted.'
  ERROR(USR2614);
  MSGPARM(PAR.Item_Code);

  ENDIF;

  EXECUTE FUNCTION(Val Item Delete       RT) TYPE(RTVOBJ) FILE(CAB0REP)           AC1497622;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Record_Found_ItmBal_USR);
  {
   //?USER: Initialize routine

   // PAR.Record Found -ItmBal USR = CND.Record Not Found
   PAR.Record_Found_ItmBal_USR = 'N';

   //?USER: Process Data record

   CASE;

   // IF DB1.On Hand Weight Summary is Greater than zero
   IF DB1.On_Hand_Weight_Summary > *ZERO;

   // OR DB1.On Hand U/M1 Summary is Greater than zero
   OR DB1.On_Hand_UOM1_Summary > *ZERO;

   // PAR.Record Found -ItmBal USR = CND.Record Found
   PAR.Record_Found_ItmBal_USR = 'Y';

   ENDIF;

  }

  CASE;

  // IF PAR.Record Found -OrdDtlUSR is Record Found
  IF PAR.Record_Found_OrdDtlUSR = 'Y';

  // Send error message - 'Inventory exists for Item &1.  The Item may not be deleted.'
  ERROR(USR2615);
  MSGPARM(PAR.Item_Code);

  ENDIF;

 }

}


CASE;

// IF PAR.Record Found -OrdDtlUSR is Record Not Found
IF PAR.Record_Found_OrdDtlUSR = 'N';

// AND PAR.Record Found -ItmBal USR is Record Not Found
AND PAR.Record_Found_ItmBal_USR = 'N';

// Send information message - 'Delete pending.  Confirm Y or N.'
MESSAGE(USR0597 *INFO);

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

ENDIF;

ENDIF;

//?5 - ** Display Item Default -  12/12/2005 LJB
CASE;

// IF RCD.*SFLSEL is Option 5
IF RCD.*SFLSEL = '5'/'5';

// CTL.Item Code = RCD.Item Code
CTL.Item_Code = RCD.Item_Code;

CASE;

// IF RCD.Item Structure Type Code is EQ 900
IF RCD.Item_Structure_Type_Code = 900;

// LCL.Co-Packer Item Req    Usr = CND.yes
LCL.Co_Packer_Item_Req_Usr = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Co-Packer Item Req    Usr = CND.no
LCL.Co_Packer_Item_Req_Usr = 'N';

ENDIF;

// Call program Dsp Item Default      D3.
CALL PROGRAM(Dsp Item Default      D3) ('PPJKD3R');
PARAMETER(LCL.Co_Packer_Item_Req_Usr);
PARAMETER(RCD.Item_Code);
PARAMETER(*ZERO);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?7 - WW Company Item
CASE;

// IF RCD.*SFLSEL is *7
IF RCD.*SFLSEL = '7';

// CTL.Item Code = RCD.Item Code
CTL.Item_Code = RCD.Item_Code;

// LCL.Item Code Txt = CVTVAR(CTL.Item Code)
LCL.Item_Code_Txt = CVTVAR(CTL.Item_Code);

// Call program WW Company Item       DF.
CALL PROGRAM(WW Company Item       DF) ('PPFLDFR');
PARAMETER(LCL.Item_Code_Txt);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?8 - Assign Company to Item
CASE;

// IF RCD.*SFLSEL is *8
IF RCD.*SFLSEL = '8';

// CTL.Item Code = RCD.Item Code
CTL.Item_Code = RCD.Item_Code;

// Call program Crt Assign Co/Item     DF.
CALL PROGRAM(Crt Assign Co/Item     DF) ('PPFPDFR');
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Description_Line_One);
PARAMETER(RCD.Description_Line_Two);
PARAMETER(RCD.Item_Label_Line_1);
PARAMETER(RCD.Item_Label_Line_2);
PARAMETER(RCD.Item_Label_Line_3);
PARAMETER(RCD.Item_Label_Line_4);
PARAMETER(RCD.UOM_Primary_Dft);
PARAMETER(RCD.Conversion_Factor_1);
PARAMETER(RCD.Operation_Factor_1);
PARAMETER(RCD.UOM_Second_Dft);
PARAMETER(RCD.Conversion_Factor_2);
PARAMETER(RCD.Operation_Factor_2);
PARAMETER(RCD.UOM_Third_Dft);
PARAMETER(RCD.UOM_Pricing_Dft);
PARAMETER(RCD.Unit_Weight);
PARAMETER(RCD.Quality_Level);
PARAMETER(RCD.Item_Level);
PARAMETER(RCD.Production_Date_Control);
PARAMETER(RCD.Catch_Weight_Status);
PARAMETER(RCD.Minimum_Weight_Per_Case);
PARAMETER(RCD.Maximum_Weight_Per_Case);
PARAMETER(RCD.Number_Cases_On_A_Pallet);
PARAMETER(RCD.Vendor_item_Default_Dft);
PARAMETER(RCD.Item_Structure_Class_Code);
PARAMETER(RCD.Item_Structure_Group_Code);
PARAMETER(RCD.Item_Structure_Type_Code);
PARAMETER(RCD.Default_Commod_Mark_basis);
PARAMETER(RCD.Transportation_Temp);
PARAMETER(RCD.Item_Type_Code);
PARAMETER(RCD.Package_Type_Code);
PARAMETER(RCD.Fresh_Chilling_Time);
PARAMETER(RCD.Base_Conv_Loss_Item);
PARAMETER(RCD.Variety_Rendered_Cut);
PARAMETER(RCD.Frozen_Make_to_Order_Sts);
PARAMETER(RCD.Credit_Item_Status);
PARAMETER(RCD.Std_Weight_Head_Var_Ren);
PARAMETER(RCD.Pieces_Per_Head);
PARAMETER(RCD.Commodity_Price_Group);
PARAMETER(RCD.Pallet_Tare_Weight);
PARAMETER(RCD.Misc_Tare_Weight);
PARAMETER(RCD.Production_Lead_Days);
PARAMETER(RCD.Packaging_Code);
PARAMETER(RCD.Item_Market_Code);
PARAMETER(RCD.TF_Co_Ownership_Sts);
PARAMETER(RCD.Agrimetrics_group);
PARAMETER(RCD.Agrimetrics_pack);
PARAMETER(RCD.Agrimetrics_grade);
PARAMETER(RCD.PA_Base_Avail_Rpt_Include);
PARAMETER(RCD.PM_Pounds_per_Hour);
PARAMETER(RCD.Item_Frt_Overage_Prc_UOM);
PARAMETER(RCD.Packages_per_case);
PARAMETER(RCD.Use_Freeze_Sell_By_Days);
PARAMETER(RCD.PM_Batch_Size);
PARAMETER(RCD.Package_Level_size);
PARAMETER(RCD.Partial_Item_Code);
PARAMETER(RCD.WIP_Item_Code);
PARAMETER(RCD.WIP_Reject_Code);
PARAMETER(RCD.Std_Costing_Unit_Weight);
PARAMETER(RCD.FP_Std_Green_Weight);
PARAMETER(RCD.PM_Std_LBS_Man_Per_Hour);
PARAMETER(RCD.PM_Raw_Meat_LBS_Per_Hour);
PARAMETER(RCD.PM_Formula_LBS_Per_Hour);
PARAMETER(RCD.PM_Finished_LBS_Per_Hour);
PARAMETER(RCD.SH_Unused_was_broker);
PARAMETER(RCD.PM_Raw_Material_Type_Code);
PARAMETER(RCD.Seconds_Item);
PARAMETER(RCD.Print_on_Realization_Rpt);
PARAMETER(RCD.Unit_Weight_Change_Sts);
PARAMETER(RCD.Maximum_Audit_Value);
PARAMETER(RCD.Minimum_Audit_Value);
PARAMETER(RCD.Market_Overage);
PARAMETER(RCD.Standard_Overage_Underage);
PARAMETER(RCD.Item_Pricing_Operation);
PARAMETER(RCD.Item_Pricing_Constant);
PARAMETER(RCD.Default_Warehouse);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Price_Method_Default);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Group_for_Packaging);
PARAMETER(RCD.Item_Category_Number_1);
PARAMETER(RCD.Made_to_Order_Code);
PARAMETER(RCD.Item_Category_Number_2);
PARAMETER(RCD.Transportation_Equip_Type);
PARAMETER(RCD.Item_Category_Number_3);
PARAMETER(RCD.Item_Category_Code_3);
PARAMETER(RCD.Item_Category_Number_4);
PARAMETER(RCD.GL_Sub_Code);
PARAMETER(RCD.Item_Category_Number_5);
PARAMETER(RCD.Item_Structure_Sub_Class);
PARAMETER(RCD.Item_Category_Number_6);
PARAMETER(RCD.Item_Primal_Sched_Report);
PARAMETER(RCD.Item_Category_Number_7);
PARAMETER(RCD.Item_Exc_Man_Prc_Excp);
PARAMETER(RCD.Item_Category_Number_8);
PARAMETER(RCD.Item_Prod_Sched_Send_PFS);
PARAMETER(RCD.Item_Category_Number_9);
PARAMETER(RCD.Item_Category_Code_9);
PARAMETER(RCD.Item_Category_Number_10);
PARAMETER(RCD.Item_Category_Code_10);
PARAMETER(RCD.PM_Line_Number);
PARAMETER(RCD.Primal_Group_Code);
PARAMETER(RCD.Piece_Count_Item);
PARAMETER(RCD.Pieces_Per_Bag);
PARAMETER(RCD.Bags_Per_Unit);
PARAMETER(RCD.Export_Domestic);
PARAMETER(RCD.Print_On_Schedule);
PARAMETER(RCD.Fresh_Inv_Allocation_Seq);
PARAMETER(RCD.Fresh_Sched_As_Ordered);
PARAMETER(RCD.Frozen_Inv_Allocation_Seq);
PARAMETER(RCD.Item_Meat_Cost_Group_Code);
PARAMETER(RCD.UPC_Code_2);
PARAMETER(RCD.Item_Target_Price);
PARAMETER(RCD.Minimum_Piece_Weight);
PARAMETER(RCD.Maximum_Piece_Weight);
PARAMETER(RCD.Seaboard_Equivalent_Item);
PARAMETER(RCD.Production_Qty_Per_Shift);
PARAMETER(RCD.Scheduling_Position_Grade);
PARAMETER(RCD.Sold_100_Percent_Frozen);
PARAMETER(RCD.Maximum_Shifts);
PARAMETER(RCD.Value_Added_Sts);
PARAMETER(RCD.Label_Type);
PARAMETER(RCD.Item_TF_Exempt_Code);
PARAMETER(RCD.Item_TF_Classification);
PARAMETER(RCD.Default_Workcenter);
PARAMETER(RCD.Record_Status);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?11/06/06 PKD/SLM Used for editing or displaying the BOM.
//?        Moved the initilize of Company Number for option 9 & 10
//?        to outside of option 9 & 10.
//?R9547 DN 03/10/17-Commented out & moved opt 9 & 10 to PPFLDFR screen.
//?      Commented out 'BOM:  Init Company Number'.
//?11  Edit Item Group for TP Sales
CASE;

// IF RCD.*SFLSEL is Option 11
IF RCD.*SFLSEL = '11';

CASE;

// IF RCD.Item Type Code is Packaging and Supplies
IF RCD.Item_Type_Code = 'PS';

//?8/02/01   PK0224  Dont allow for packaging/supplies
// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Item Code = RCD.Item Code
CTL.Item_Code = RCD.Item_Code;

// Call program Edt Itm Groups TP Sls EF.
CALL PROGRAM(Edt Itm Groups TP Sls EF) ('PMS2EFR');
PARAMETER(RCD.Item_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?17  Dsp Consumned Items with all companies
CASE;

// IF RCD.*SFLSEL is Option 17
IF RCD.*SFLSEL = '17';

// CTL.Item Code = RCD.Item Code
CTL.Item_Code = RCD.Item_Code;

// Call program Dsp Component Usage   DF.
CALL PROGRAM(Dsp Component Usage   DF) ('PNKHDFR');
PARAMETER(RCD.Item_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?Secret option 77
CASE;

// IF RCD.*SFLSEL is Option 77
IF RCD.*SFLSEL = '77';

// Call program ZzzCvt WIP/Crt FG WIP XF.
CALL PROGRAM(ZzzCvt WIP/Crt FG WIP XF) ('PPOXXFR');
PARAMETER(RCD.WIP_Item_Code);
PARAMETER(*ZERO);

ENDIF;

//?USER: Process subfile record (Post-confirm)

//?Process delete request
CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4';

EXECUTE FUNCTION(Chg Status to Purge    CH) TYPE(CHGOBJ) FILE(OMBYREP)          AC1294039;
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Package_Type_Code);
PARAMETER(RCD.Misc_Tare_Weight);
PARAMETER(RCD.Seconds_Item);
PARAMETER(RCD.Print_on_Realization_Rpt);
PARAMETER(RCD.Unit_Weight_Change_Sts);
PARAMETER('D');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time_1);
 PARAMETER(DB1.User_Id_1);
 PARAMETER(DB1.Job_Name_1);
 PARAMETER(DB1.Job_Date_1);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing after Data update

 //?Update Company Item Record Status and AccuSort files
 EXECUTE FUNCTION(Chg Record Status     RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1482261;
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Record_Status);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Record Status     CH) TYPE(CHGOBJ) FILE(CABZREP)           AC1482262;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Record_Status);
  //?For Accu-Sort/Plant Floor Files
  // PAR.AS Add/Change/Delete = CND.Delete
  PAR.AS_Add_Change_Delete = 'D';

  // Call program PFS One Prod/Box Rec  XF.
  CALL PROGRAM(PFS One Prod/Box Rec  XF) ('PDK1XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Description_Line_One);
  PARAMETER(DB1.Item_Label_Line_1);
  PARAMETER(DB1.Item_Label_Line_2);
  PARAMETER(DB1.Item_Label_Line_3);
  PARAMETER(DB1.Unit_Weight);
  PARAMETER(DB1.Catch_Weight_Status);
  PARAMETER(DB1.Minimum_Weight_Per_Case);
  PARAMETER(DB1.Maximum_Weight_Per_Case);
  PARAMETER(DB1.Number_Cases_On_A_Pallet);
  PARAMETER(DB1.Item_Type_Code);
  PARAMETER(DB1.Package_Type_Code);
  PARAMETER(DB1.Default_Warehouse);
  PARAMETER(DB1.Fresh_Chilling_Time);
  PARAMETER(DB1.Misc_Tare_Weight);
  PARAMETER(PAR.AS_Add_Change_Delete);

 }

 //?E3313 JJH 08/28/14 - Update Item Default Extension - Record Status
 // Call program Chg Itm Dft Ext Sts   XF.
 CALL PROGRAM(Chg Itm Dft Ext Sts   XF) ('PBO7XFR');
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.IDE_Forecast_in_DP);
 PARAMETER('D');
 PARAMETER(JOB.*PROGRAM);

 //?E3313 RMC 2/28/22 change packaging bom too
 // Call program Rtv Chg Pckg BOM RcdStXF.
 CALL PROGRAM(Rtv Chg Pckg BOM RcdStXF) ('PUV2XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Record_Status);

}


// Execute function Clr Program Message Q  US.
EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
{
 * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
 C                     CALL 'Y2CLMSC'
 C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
 C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
 * RESET FIRST MESSAGE ONLY FLAG.
 C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
}


// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Exit program processing

//?If exit (F3) requested, set loop to exit
CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

//?Set next screen
CASE;

// IF PAR.USR Item Display Screen is Item Default from CI
IF PAR.USR_Item_Display_Screen = '4';

//?Called from the Company Item screen, allow return
// PAR.USR Item Display Screen = CND.Company Item
PAR.USR_Item_Display_Screen = 1;

//?Set next screen
// IF PAR.USR Item Display Screen is Item Default
IF PAR.USR_Item_Display_Screen = '2';

// PAR.USR Item Display Screen = CND.Exit
PAR.USR_Item_Display_Screen = 9;

ENDIF;

ENDIF;

