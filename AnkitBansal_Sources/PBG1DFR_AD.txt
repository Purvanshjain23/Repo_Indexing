// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBG1DFR
// ?Date: 14.08.2025 Time: 03:47:56
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// CTL.TPM Record Status = CND.ACTIVE
CTL.TPM_Record_Status = 'A';

//?USER: Initialize subfile control

//?First time specs
CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// CTL.TPM Facility Type = PAR.TPM Facility Type
CTL.TPM_Facility_Type = PAR.TPM_Facility_Type;

// WRK.TPM Facility Type = PAR.TPM Facility Type
WRK.TPM_Facility_Type = PAR.TPM_Facility_Type;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDIF;

//?USER: Initialize subfile record from DBF record

// WRK.*Record selected = CND.Blanks
WRK.*Record_selected = *BLANK;

//?** Select matching Facility Type, if entered, else all
CASE;

// IF DB1.TPM Facility Type NE CTL.TPM Facility Type
IF DB1.TPM_Facility_Type <> CTL.TPM_Facility_Type;

// AND CTL.TPM Facility Type NE WRK.Blank for 12          USR
AND CTL.TPM_Facility_Type <> WRK.Blank_for_12_USR;

// WRK.*Record selected = CND.*NO
WRK.*Record_selected = 'N';

//?** Select matching Facility Type, if entered, else all
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.*Record selected = CND.*YES
WRK.*Record_selected = 'Y';

ENDIF;

//?** If Location Code is entered, only select matching
CASE;

// IF CTL.TPM Location Code is ENTERED
IF CTL.TPM_Location_Code <> *BLANK;

CASE;

// IF DB1.TPM Location Code NE CTL.TPM Location Code
IF DB1.TPM_Location_Code <> CTL.TPM_Location_Code;

// WRK.*Record selected = CND.*NO
WRK.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** Display records if selected
CASE;

// IF WRK.*Record selected is *NO
IF WRK.*Record_selected = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?** Display records if selected
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?F4=Prompt for Location Code
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.TPM Facility Type
IF PGM.*Cursor_field = CTL.TPM_Facility_Type;

// OR PGM.*Cursor field <IS> CTL.TPM Location Code
OR PGM.*Cursor_field = CTL.TPM_Location_Code;

// Call program SEL TPM Location Code  SL.
CALL PROGRAM(SEL TPM Location Code  SL) ('PBFASRR');
PARAMETER(CTL.TPM_Facility_Type);
PARAMETER(CTL.TPM_Location_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?Reload display if Facility Type changes
CASE;

// IF CTL.TPM Facility Type NE WRK.TPM Facility Type
IF CTL.TPM_Facility_Type <> WRK.TPM_Facility_Type;

// AND CTL.TPM Facility Type NE WRK.Blank for 12          USR
AND CTL.TPM_Facility_Type <> WRK.Blank_for_12_USR;

// WRK.TPM Facility Type = CTL.TPM Facility Type
WRK.TPM_Facility_Type = CTL.TPM_Facility_Type;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

//?*Display WAREHOUSE
CASE;

// IF RCD.TPM Facility Type is Warehouse
IF RCD.TPM_Facility_Type = 'WAREHOUSE';

// Call program Zzz TPM Loc Mstr-WHSE  DR.
CALL PROGRAM(Zzz TPM Loc Mstr-WHSE  DR) ('PBFRD1R');
PARAMETER(RCD.TPM_Facility_Type);
PARAMETER(RCD.TPM_Location_Code);

ENDIF;

//?*Display CUSTOMER
CASE;

// IF RCD.TPM Facility Type is Ship To Customer
IF RCD.TPM_Facility_Type = 'CUSTOMER';

// Call program DSP TPM Loc Mstr-CUST  DR.
CALL PROGRAM(DSP TPM Loc Mstr-CUST  DR) ('PBFQD1R');
PARAMETER(RCD.TPM_Facility_Type);
PARAMETER(RCD.TPM_Location_Code);
PARAMETER(*ZERO);

ENDIF;

//?*Display TRANSLOADER, TERMINAL, RAILYARD
CASE;

// IF RCD.TPM Facility Type is Transloader
IF RCD.TPM_Facility_Type = 'TRANSLOADER';

// OR RCD.TPM Facility Type is Terminal
OR RCD.TPM_Facility_Type = 'TERMINAL';

// OR RCD.TPM Facility Type is Railyard
OR RCD.TPM_Facility_Type = 'RAILYARD';

// Call program Zzz TPM Loc Mstr-SHIPL DR.
CALL PROGRAM(Zzz TPM Loc Mstr-SHIPL DR) ('PBGJD1R');
PARAMETER(RCD.TPM_Facility_Type);
PARAMETER(RCD.TPM_Location_Code);

ENDIF;

ENDIF;

//?USER: Process command keys

//?Command Key Functions
CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

RETURN;

//?Command Key Functions
// IF CTL.*CMD key is *Print List
IF CTL.*CMD_key = '21';

CASE;

// IF CTL.TPM Facility Type is Blanks
IF CTL.TPM_Facility_Type = *BLANK;

// Send error message - 'Facility Type is required.'
ERROR(USR4550);
MSGPARM(CTL.TPM_Facility_Type);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program SBM TPM Loc Master-Sbm CL.
CALL PROGRAM(SBM TPM Loc Master-Sbm CL) ('PBFTUPC');
PARAMETER('Print Location Master');
PARAMETER(LCL.PRT_Printer_Device);
PARAMETER(LCL.PRT_Hold_Output_Sts);
PARAMETER(LCL.PRT_Save_Output_Sts);
PARAMETER(LCL.PRT_Night_Queue_Run_Sts);
PARAMETER(LCL.PRT_Night_Queue);
PARAMETER('PBFSPFR');
PARAMETER(PAR.Application_Code);
PARAMETER(1);
PARAMETER(CTL.TPM_Facility_Type);

// Send information message - 'The report has been submitted.'
MESSAGE(USR2720 *INFO);

ENDIF;

ENDIF;

