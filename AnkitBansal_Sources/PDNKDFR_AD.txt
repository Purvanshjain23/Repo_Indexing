// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDNKDFR
// ?Date: 14.08.2025 Time: 03:28:53
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?E1892 RMC 1/12/12 customer price header - sel active
EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.USR Record Updated = CND.no
PAR.USR_Record_Updated = 'N';

//?*** Delete Records from Qtemp
EXECUTE FUNCTION(DEL Ship Formula Work  RT) TYPE(RTVOBJ) FILE(PDJKCPP)          AC1310855;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DLT Ship Dtl Form Work DL) TYPE(DLTOBJ) FILE(PDJKCPP)          AC1310856;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Pricing_Sequence_Number);
}


EXECUTE FUNCTION(DEL Shp Dtl Price Wrk  RT) TYPE(RTVOBJ) FILE(PDIMCPP)          AC1310852;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DLT Ship Dtl Price Wrk DL) TYPE(DLTOBJ) FILE(PDIMCPP)          AC1310854;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
}


EXECUTE FUNCTION(CPY Ship PRC t/Qtmp    RT) TYPE(RTVOBJ) FILE(PDIMCPP)          AC1314897;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(CRT Ship Dtl Price QtmpCR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1310882;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(DB1.Price_Detail_Sequence);
 PARAMETER(DB1.Componant_Price);
 PARAMETER(DB1.PD_Status);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


EXECUTE FUNCTION(CPY Shp Dtl Form T/QtmpRT) TYPE(RTVOBJ) FILE(PDJKCPP)          AC1314898;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(CRT Temporary Record   CR) TYPE(CRTOBJ) FILE(PDJKCPP)          AC1310921;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Pricing_Sequence_Number);
 PARAMETER(DB1.Sales_Yield);
 PARAMETER(DB1.Market_Value);
 PARAMETER(DB1.Credit_Value);
 PARAMETER(DB1.PD_Status);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


// CTL.Price Status = PAR.Price Status
CTL.Price_Status = PAR.Price_Status;

// WRK.Price Status Last = PAR.Price Status
WRK.Price_Status_Last = PAR.Price_Status;

// WRK.Unit Price Last = PAR.Unit Price
WRK.Unit_Price_Last = PAR.Unit_Price;

// WRK.Extended Amount Last = PAR.Extended Amount
WRK.Extended_Amount_Last = PAR.Extended_Amount;

//?USER: Initialize subfile control

// CTL.Pricing Date Used = PAR.Pricing Date Used
CTL.Pricing_Date_Used = PAR.Pricing_Date_Used;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.USR Desc. 10 = Condition name of CTL.Price Audit
CTL.USR_Desc_10 = RTVCND(CTL.Price_Audit);

// CTL.USR Description - 15 = Condition name of CTL.Price Status
CTL.USR_Description_15 = RTVCND(CTL.Price_Status);

EXECUTE FUNCTION(RTV Commod. Mkts Desc  RT) TYPE(RTVOBJ) FILE(OMFYREP)          AC1277934;
PARAMETER(CTL.Commodity_Market_Code_USR);
PARAMETER(CTL.Commodity_Market_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.Ship To Name = PAR.Ship To Name
CTL.Ship_To_Name = PAR.Ship_To_Name;

// CTL.Scheduled Ship Date USR = PAR.Scheduled Ship Date
CTL.Scheduled_Ship_Date_USR = PAR.Scheduled_Ship_Date;

// CTL.Ship To City = PAR.Ship To City
CTL.Ship_To_City = PAR.Ship_To_City;

// CTL.Ship To State Code = PAR.Ship To State Code
CTL.Ship_To_State_Code = PAR.Ship_To_State_Code;

// CTL.Customer Purchase Order # = PAR.Customer Purchase Order #
CTL.Customer_Purchase_Order_# = PAR.Customer_Purchase_Order_#;

// CTL.OD Market Begin Date = PAR.OD Market Begin Date
CTL.OD_Market_Begin_Date = PAR.OD_Market_Begin_Date;

// CTL.OD Market Ending Date = PAR.OD Market Ending Date
CTL.OD_Market_Ending_Date = PAR.OD_Market_Ending_Date;

//?Load User Function Screen fields
// CTL.Price Overage Overrid USR = CTL.Price Overage Override
CTL.Price_Overage_Overrid_USR = CTL.Price_Overage_Override;

// CTL.Price Method Code USR = CTL.Price Method Code
CTL.Price_Method_Code_USR = CTL.Price_Method_Code;

// CTL.Date Method Code USR = CTL.Date Method Code
CTL.Date_Method_Code_USR = CTL.Date_Method_Code;

// CTL.Contract Number USR = CTL.Contract Number
CTL.Contract_Number_USR = CTL.Contract_Number;

// CTL.Market Pricing Date USR = CTL.Market Pricing Date
CTL.Market_Pricing_Date_USR = CTL.Market_Pricing_Date;

// CTL.Commodity Market Code USR = CTL.Commodity Market Code
CTL.Commodity_Market_Code_USR = CTL.Commodity_Market_Code;

// CTL.Price Audit = PAR.Price Audit
CTL.Price_Audit = PAR.Price_Audit;

// CTL.Price Code USR = CTL.Price Code
CTL.Price_Code_USR = CTL.Price_Code;

EXECUTE FUNCTION(VAL Ship Detail Seq    RT) TYPE(RTVOBJ) FILE(PDIMCPP)          AC1369712;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Recalculate Control Prices using files
// Call program CLC Pricing using File XF.
CALL PROGRAM(CLC Pricing using File XF) ('PDOJXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
PARAMETER(CTL.Price_Detail_Sequence);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Price_Method_Code);
PARAMETER(CTL.U_M_Ordered);
PARAMETER(CTL.Unit_Price);
PARAMETER(CTL.Unit_Price_Credit);
PARAMETER(CTL.Unit_Price_Ordered_U_M);
PARAMETER(**);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program CLC Price Item         XF.
CALL PROGRAM(CLC Price Item         XF) ('PDG9XFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Price_Method_Code);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Actual_Shipped_Date);
PARAMETER(**);
PARAMETER(CTL.OD_Ceiling_Price);
PARAMETER(CTL.OD_Market_Begin_Date);
PARAMETER(CTL.OD_Market_Ending_Date);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Requested_Delivery_Date);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
PARAMETER(WRK.Error_Return);
PARAMETER('S');

// PAR.USR Update Flag = CND.Yes
PAR.USR_Update_Flag = 'Y';

ENDIF;

//?Added -Purva 4/30/99
//?R12926 DN 04/30/18-At Order level, get Absorbed Freight Rate from OH.
EXECUTE FUNCTION(RTV AbsFrtRt/Type Cde  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1582615;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(LCL.Type_Code);
PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Absorbed Frt Rate RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2149231;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
PARAMETER(CTL.Company_Number);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Gate Price        RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2064251;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Gate_Final_Price);
PARAMETER(NLL.OD_Gate_Final_Price_Adj);
PARAMETER(CTL.OD_Weighted_Avg_Price);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Order Gate Price is Not Zeros
 IF DB1.Order_Gate_Final_Price <> *ZERO;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


//?Recalculate Price Order U/M & Extended
EXECUTE FUNCTION(CLC Price,Ext,U/M1Prc  IF) TYPE(EXCINTFUN)                     AC1356112;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Detail_Line_Status);
PARAMETER(CTL.Extended_Amount);
PARAMETER(CTL.Price_Method_Code);
PARAMETER(CTL.Price_Overage_Override);
PARAMETER(CTL.Price_Status);
PARAMETER(CTL.Price_Audit);
PARAMETER(CTL.Quantity_Ordered);
PARAMETER(CTL.Weight_Ordered);
PARAMETER(CTL.Quantity_Scheduled);
PARAMETER(CTL.Weight_Scheduled);
PARAMETER(CTL.Quantity_Shipped_Total);
PARAMETER(CTL.Weight_Shipped_Total);
PARAMETER(CTL.Unit_Price);
PARAMETER(CTL.Unit_Price_Credit);
PARAMETER(CTL.Unit_Price_Ordered_U_M);
PARAMETER(CTL.Event_Code);
PARAMETER('PM');
PARAMETER(LCL.Type_Code);
PARAMETER(LCL.Company_Organization);
{
 //?Execute internal function

 //?*********************************************************************
 //?Calculate "Price Per Pound", "Extended Amount", "Primary U/M Price"
 //?*********************************************************************
 // PAR.Unit Weight = CON.*ZERO
 PAR.Unit_Weight = *ZERO;

 // PAR.U/M - Pricing = CND.Not Entered
 PAR.UOM_Pricing = *BLANK;

 // PAR.Catch Weight Status = CND.blank
 PAR.Catch_Weight_Status = *BLANK;

 //?Load Quantity Shipped Total field. c2742- do -0- shipped from ord
 CASE;

 // IF PAR.Quantity Shipped Total is Equal to zero
 IF PAR.Quantity_Shipped_Total = *ZERO;

 // WRK.Quantity Shipped Total = CON.1
 WRK.Quantity_Shipped_Total = 1;

 //?Load Quantity Shipped Total field. c2742- do -0- shipped from ord
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Quantity Shipped Total = PAR.Quantity Shipped Total
 WRK.Quantity_Shipped_Total = PAR.Quantity_Shipped_Total;

 ENDIF;

 //?Set quantity and weight according to order status  c2742 -0- shped
 CASE;

 // IF PAR.Detail Line Status is Avail/Alloc/Enter/Hold
 IF PAR.Detail_Line_Status = 'L'/'A'/'E'/'H';

 // AND PAR.Event Code is Entered Thru 03 Picked
 AND PAR.Event_Code >= '01';
 AND PAR.Event_Code <= '03';

 //?RMC 6/17/09 FP1054 use qty/wgt ordered instead of sched
 // PAR.USR Quantity = PAR.Quantity Ordered
 PAR.USR_Quantity = PAR.Quantity_Ordered;

 // PAR.USR Weight = PAR.Weight Ordered
 PAR.USR_Weight = PAR.Weight_Ordered;

 //?Set quantity and weight according to order status  c2742 -0- shped
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Quantity = WRK.Quantity Shipped Total
 PAR.USR_Quantity = WRK.Quantity_Shipped_Total;

 // PAR.USR Weight = PAR.Weight Shipped Total
 PAR.USR_Weight = PAR.Weight_Shipped_Total;

 ENDIF;

 // Call program RTV For Price Extent   XF.
 CALL PROGRAM(RTV For Price Extent   XF) ('PDXRXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Catch_Weight_Status);
 PARAMETER(PAR.Primal_Group_Code);

 //?Check retrieve Unit Weight & C/W error
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // AND PAR.Catch Weight Status is Y/N Values
 AND PAR.Catch_Weight_Status = 'N'/'Y';

 // AND PAR.Unit Weight is Not equal zero
 AND PAR.Unit_Weight <> *ZERO;

 //?Check retrieve Unit Weight & C/W error
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute command - 'Send Price MSG to SEABOARD'
 EXECUTE COMMAND(USR2306);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Catch_Weight_Status);
 PARAMETER(*ZERO);

 ENDIF;

 CASE;

 // IF PAR.Price Method Code is Extended
 IF PAR.Price_Method_Code = 'EXT';

 // PAR.Extended Amount = PAR.Price Overage Override
 PAR.Extended_Amount = PAR.Price_Overage_Override;

 //?Calculate Unit Price for Extended
 CASE;

 // IF PAR.USR Weight is Not equal zero
 IF PAR.USR_Weight <> *ZERO;

 // PAR.Unit Price = PAR.Extended Amount / PAR.USR Weight *Rounded
 PAR.Unit_Price = PAR.Extended_Amount / PAR.USR_Weight 'H';

 ENDIF;

 //?Calculate Pricing U/M Price for Extended
 CASE;

 // IF PAR.USR Quantity is not equal zero
 IF PAR.USR_Quantity <> *ZERO;

 // PAR.Unit Price Ordered U/M = PAR.Extended Amount / PAR.USR Quantity *Rounded
 PAR.Unit_Price_Ordered_U_M = PAR.Extended_Amount / PAR.USR_Quantity 'H';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Extend price with unit price credit if not zeros
 CASE;

 // IF PAR.Detail Line Status is Avail/Alloc/Enter/Hold
 IF ( PAR.Detail_Line_Status = 'L'/'A'/'E'/'H';

 // AND PAR.Event Code is Entered Thru 03 Picked
 AND PAR.Event_Code >= '01';
 AND PAR.Event_Code <= '03';

 // AND PAR.Unit Price - Credit is Not Zeros
 AND PAR.Unit_Price_Credit <> *ZERO;

 // AND PAR.Price Audit is Not Manually Price Audit
 AND PAR.Price_Audit = 'A'/'N'/*BLANK;

 // AND PAR.Pricing Event Called From is No Price With Credit Pric
 AND PAR.Pricing_Event_Called_From = 'OE'/'PS'/'UWC'/'UWT' );

 //?07/07/08 PKD Replaced w/consideration for .01 manual price
 //?Extend Price using Price Overage Override or Unit Price-Credit
 CASE;

 // IF PAR.Price Method Code is Deviated
 IF PAR.Price_Method_Code = 'DEV';

 //?----- USE: Price Overage Override
 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Price_Overage_Override);

 //?Extend Price using Price Overage Override or Unit Price-Credit
 // IF PAR.Price Method Code is Manual
 IF PAR.Price_Method_Code = 'MAN';

 // AND PAR.Company Organization is High Plains Biodiesel
 AND PAR.Company_Organization = 'H';

 //?----- USE: Price Overage Override
 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Price_Overage_Override);

 //?Extend Price using Price Overage Override or Unit Price-Credit
 // IF PAR.Price Method Code is Manual
 IF PAR.Price_Method_Code = 'MAN';

 // AND PAR.Company Organization is Not HPB
 AND PAR.Company_Organization = 'D'/'S';

 //?----- USE: Price Overage Override OR Unit Price-Credit
 CASE;

 // IF PAR.Type Code is Inter Company
 IF PAR.Type_Code = 'IC';

 // OR PAR.Type Code is Is Promotional/Samples
 OR PAR.Type_Code = 'PS';

 // OR PAR.Primal Group Code is Samples or Cut Loss
 OR PAR.Primal_Group_Code = 'UNID';

 // OR PAR.Primal Group Code is Other
 OR PAR.Primal_Group_Code = 'OTHER';

 // OR PAR.Price Overage Override is GT .01
 OR PAR.Price_Overage_Override > .01;

 //?----- USE: Price Overage Override
 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Price_Overage_Override);

 //?----- USE: Price Overage Override OR Unit Price-Credit
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?----- USE: Unit Price-Credit
 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Unit_Price_Credit);

 ENDIF;

 //?Extend Price using Price Overage Override or Unit Price-Credit
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?---- USE: Unit Price-Credit
 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Unit_Price_Credit);

 ENDIF;

 //?Extend price with unit price credit if not zeros
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?08/28/07 PKD Replaced with Clc OrdDtl Ext Amt    XF
 //?04/28/10 PKD If Unit Price is zero, then use Unit Price-Credit.
 //?** Added Not .01 to force these orders to use Credit Chk Price.
 CASE;

 // IF PAR.Unit Price is Not Zeros
 IF PAR.Unit_Price <> *ZERO;

 // AND PAR.Unit Price is Not .01
 AND PAR.Unit_Price <> .01;

 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Unit_Price);

 //?Unit Price Ordered U/M
 CASE;

 // IF PAR.USR Quantity is not equal zero
 IF PAR.USR_Quantity <> *ZERO;

 // PAR.Unit Price Ordered U/M = PAR.Extended Amount / PAR.USR Quantity *Rounded
 PAR.Unit_Price_Ordered_U_M = PAR.Extended_Amount / PAR.USR_Quantity 'H';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Unit_Price_Credit);

 ENDIF;

 ENDIF;

 ENDIF;

 //?*********************************************************************
}


// Call program RTV Price Maint        XF.
CALL PROGRAM(RTV Price Maint        XF) ('PDP6XFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(PAR.Default_Commod_Mark_basis);
PARAMETER(PAR.Maximum_Audit_Value);
PARAMETER(PAR.Minimum_Audit_Value);
PARAMETER(PAR.Commodity_Price_Group);

// CTL.Absorbed Freight Rate CWT = LCL.Absorbed Freight Rate CWT
CTL.Absorbed_Freight_Rate_CWT = LCL.Absorbed_Freight_Rate_CWT;

//?Price Method = Manual
CASE;

// IF CTL.Price Method Code is Manual
IF CTL.Price_Method_Code = 'MAN';

EXECUTE FUNCTION(Val Manual Price      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1581694;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(LCL.Description_Line_One);
PARAMETER(LCL.Default_Commod_Mark_basis);
PARAMETER(LCL.Market_Overage);
PARAMETER(LCL.Standard_Overage_Underage);
PARAMETER(LCL.Commodity_Price_Group);
PARAMETER(LCL.Std_Weight_Head_Var_Ren);
PARAMETER(LCL.Primal_Group_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Primal Group Code is NE Samples or Cut Loss
IF LCL.Primal_Group_Code <> 'UNID';

// AND LCL.Type Code is Not Promotional/Samples
AND LCL.Type_Code <> 'PS';

EXECUTE FUNCTION(VAL Manual Price Range IF) TYPE(EXCINTFUN)                     AC1414607;
PARAMETER(CTL.Company_Number);
PARAMETER(PAR.Commodity_Market_Code);
PARAMETER(CTL.Price_Overage_Override);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(WRK.Projected_Market_Price);
PARAMETER(PAR.Default_Commod_Mark_basis);
PARAMETER(LCL.Market_Overage);
PARAMETER(WRK.Error_Status_3);
PARAMETER(LCL.Minimum_Price_USR);
PARAMETER(LCL.Maximum_Price_USR);
PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
{
 //?Execute internal function

 //?*---------------------------------------------------------------*
 //?Documentation:
 //?This internal function will determine if a manual price entered
 //?on an order detail line is within the Manual Pricing Acceptance
 //?Percentage from the Company Control file. If it does not fall
 //?within the percentage range then the market price will be used.
 //?If no market price is found then it is a manual price error
 //?*---------------------------------------------------------------*
 // PAR.Projected Market Price = CON.*ZERO
 PAR.Projected_Market_Price = *ZERO;

 // PAR.Minimum Price   USR = CON.*ZERO
 PAR.Minimum_Price_USR = *ZERO;

 // PAR.Maximum Price  USR = CON.*ZERO
 PAR.Maximum_Price_USR = *ZERO;

 // PAR.Error Status  3 = CND.Yes
 PAR.Error_Status_3 = 'Y';

 EXECUTE FUNCTION(RTV Manual Price Accpt RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1414604;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Manual_Price_Accept_Prcnt);
 PARAMETER(PAR.CoPk_FdSrv_ManPrc_Acpt_PT);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Food Service and Co-Pack Items
 CASE;

 // IF PAR.Default Commod Mark basis is Food Service
 IF PAR.Default_Commod_Mark_basis = 'FSV';

 // OR PAR.Default Commod Mark basis is Co-Pack
 OR PAR.Default_Commod_Mark_basis = 'CPK';

 // PAR.Manual Price Accept Prcnt = PAR.CoPk/FdSrv ManPrc Acpt%
 PAR.Manual_Price_Accept_Prcnt = PAR.CoPk_FdSrv_ManPrc_Acpt_PT;

 ENDIF;

 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(9999999);
 PARAMETER(PAR.Projected_Market_Price);
 PARAMETER(WRK.USR_Date_Priced);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

 // Projected Market Price
 PAR.Projected_Market_Price = ( PAR.Projected_Market_Price
 + PAR.Standard_Overage_Underage ) + ( PAR.Absorbed_Freight_Rate_CWT / 100 'H' );

 //?If a market price is found for co/cust market code default
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // Minimum price allowed
 PAR.Minimum_Price_USR = ( 1 - ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) )
 * PAR.Projected_Market_Price 'H';

 // Maximum price allowed
 PAR.Maximum_Price_USR = ( ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) + 1 )
 * PAR.Projected_Market_Price 'H';

 //?If the Price Override is within the range then error status is no
 CASE;

 // IF PAR.Price Overage Override GE PAR.Minimum Price   USR
 IF PAR.Price_Overage_Override >= PAR.Minimum_Price_USR;

 // AND PAR.Price Overage Override LE PAR.Maximum Price  USR
 AND PAR.Price_Overage_Override <= PAR.Maximum_Price_USR;

 // PAR.Error Status  3 = CND.No
 PAR.Error_Status_3 = 'N';

 ENDIF;

 //?If a market price is found for co/cust market code default
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?If no price for co/cust market code then use co/item market code
 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER(PAR.Default_Commod_Mark_basis);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(9999999);
 PARAMETER(PAR.Projected_Market_Price);
 PARAMETER(WRK.USR_Date_Priced);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // Minimum price allowed
 PAR.Minimum_Price_USR = ( PAR.Manual_Price_Accept_Prcnt / 100 'H' )
 * PAR.Projected_Market_Price 'H';

 // Maximum price allowed
 PAR.Maximum_Price_USR = ( ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) + 1 )
 * PAR.Projected_Market_Price 'H';

 //?If the Price Override is within the range then error status is no
 CASE;

 // IF PAR.Price Overage Override GE PAR.Minimum Price   USR
 IF PAR.Price_Overage_Override >= PAR.Minimum_Price_USR;

 // AND PAR.Price Overage Override LE PAR.Maximum Price  USR
 AND PAR.Price_Overage_Override <= PAR.Maximum_Price_USR;

 // PAR.Error Status  3 = CND.No
 PAR.Error_Status_3 = 'N';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Projected Market Price = CON.*ZERO
 PAR.Projected_Market_Price = *ZERO;

 ENDIF;

 ENDIF;

}


ENDIF;

CASE;

// IF WRK.Error Status  3 is Yes
IF WRK.Error_Status_3 = 'Y';

// Send information message - 'WARNING: Unit price is out of the price range tolerance (&2 - &3).'
MESSAGE(USR2374 *INFO);
MSGPARM(CTL.Unit_Price);
MSGPARM(LCL.Minimum_Price_USR);
MSGPARM(LCL.Maximum_Price_USR);

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Req Delv/Hdr Sts  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1598298;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(WRK.Header_Status);
PARAMETER(CTL.Requested_Delivery_Date);
PARAMETER(WRK.Requested_Delivery_Time);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If order has been shipped show qty shipped, otherwise show qty scheduled
CASE;

// IF WRK.Header Status is Confirmed & Complete
IF WRK.Header_Status = 'C'/'R';

// CTL.Field Description = CON.Qty Shipped  . :
CTL.Field_Description = 'Qty Shipped  . :';

//?If order has been shipped show qty shipped, otherwise show qty scheduled
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Field Description = CON.Qty Scheduled  :
CTL.Field_Description = 'Qty Scheduled  :';

// CTL.Quantity Shipped Total = PAR.Quantity Scheduled
CTL.Quantity_Shipped_Total = PAR.Quantity_Scheduled;

ENDIF;

//?PK0519 10/22/03
// LCL.USR Display 3 = CND.Yes
LCL.USR_Display_3 = 'Y';

CASE;

// IF CTL.Price Method Code USR is Deviated
IF CTL.Price_Method_Code_USR = 'DEV';

// LCL.USR Display 3 = CND.No
LCL.USR_Display_3 = 'N';

ENDIF;

//?USER: Initialize subfile record from DBF record

// PAR.USR Display field = CND.yes
PAR.USR_Display_field = 'Y';

//?This function will check to see if componant can be updated
EXECUTE FUNCTION(RTV Upd Flag Prc Dtl   IX) TYPE(EXCINTFUN)                     AC1314768;
PARAMETER(RCD.Price_Method_Componant);
PARAMETER(WRK.USR_Update_Flag);
{
 //?Execute internal function

 // PAR.USR Update Flag = CND.Yes
 PAR.USR_Update_Flag = 'Y';

 CASE;

 // IF PAR.Price Method Componant is FRMPRC
 IF PAR.Price_Method_Componant = 'FRMPRC';

 // OR PAR.Price Method Componant is MSCYLD
 OR PAR.Price_Method_Componant = 'MSCYLD';

 // OR PAR.Price Method Componant is STRITM
 OR PAR.Price_Method_Componant = 'STRITM';

 // OR PAR.Price Method Componant is SUBCRD
 OR PAR.Price_Method_Componant = 'SUBCRD';

 // OR PAR.Price Method Componant is TCRDVY
 OR PAR.Price_Method_Componant = 'TCRDVY';

 // OR PAR.Price Method Componant is TLCRDY
 OR PAR.Price_Method_Componant = 'TLCRDY';

 // OR PAR.Price Method Componant is TLCRDV
 OR PAR.Price_Method_Componant = 'TLCRDV';

 // PAR.USR Update Flag = CND.No
 PAR.USR_Update_Flag = *BLANK;

 ENDIF;

}


EXECUTE FUNCTION(RTV Price Meth Type    RT) TYPE(RTVOBJ) FILE(PDIHREP)          AC1268519;
PARAMETER(RCD.Company_Number);
PARAMETER(CTL.Price_Method_Code);
PARAMETER(WRK.Price_Method_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Set Usr Display Flag for Subfile select field
CASE;

// IF WRK.USR Update Flag is No
IF WRK.USR_Update_Flag = *BLANK;

// OR WRK.Price Method Type is Extended Pricing
OR WRK.Price_Method_Type = 'X';

// OR WRK.Price Method Type is Manual Pricing
OR WRK.Price_Method_Type = 'M';

// PAR.USR Display field = CND.no
PAR.USR_Display_field = 'N';

ENDIF;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(VAL Check Existence    RT) TYPE(RTVOBJ) FILE(PDIKREP)          AC1314692;
PARAMETER(RCD.Company_Number);
PARAMETER(CTL.Price_Method_Code);
PARAMETER(RCD.Price_Method_Componant);

//?Do not display record if not found in Price Method Detail File
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

CASE;

// IF DB1.Price Method Componant is TCRDVY
IF DB1.Price_Method_Componant = 'TCRDVY';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(PDIJREP)          AC1251625;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Price_Method_Componant);
PARAMETER(RCD.Price_Componant_Desc);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Do not display record if not found in Price Method Detail File
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// LCL.USR Value = DB1.Componant Price * CON.1 *Rounded
LCL.USR_Value = DB1.Componant_Price * 1 'H';

// RCD.Componant Price = LCL.USR Value
RCD.Componant_Price = LCL.USR_Value;

//?CALC: Subfile control function fields

//?Select Price Method
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Price Method Code USR
AND PGM.*Cursor_field = CTL.Price_Method_Code_USR;

// Call program SEL OMS System Only    SR.
CALL PROGRAM(SEL OMS System Only    SR) ('PDZSSRR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Price_Method_Code_USR);

ENDIF;

//?Select Date Method
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Date Method Code USR
AND PGM.*Cursor_field = CTL.Date_Method_Code_USR;

// Call program SEL OMS Mkt Date Only  SR.
CALL PROGRAM(SEL OMS Mkt Date Only  SR) ('PDZZSRR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Date_Method_Code_USR);
PARAMETER(WRK.Date_Method_Description);

ENDIF;

//?Select Contract
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Contract Number USR
AND PGM.*Cursor_field = CTL.Contract_Number_USR;

// Call program Zzz Item Contract Nbr  SR.
CALL PROGRAM(Zzz Item Contract Nbr  SR) ('PDOFSRR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Item_Code);
PARAMETER(WRK.Effective_Date);
PARAMETER(CTL.Contract_Number_USR);
PARAMETER(CTL.Price_Overage_Overrid_USR);
PARAMETER(WRK.Contract_Mkt_Price_Date);
PARAMETER(CTL.Date_Method_Code_USR);
PARAMETER(CTL.Price_Method_Code_USR);
PARAMETER(CTL.Commodity_Market_Code);

ENDIF;

//?Select Market
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Commodity Market Code USR
AND PGM.*Cursor_field = CTL.Commodity_Market_Code_USR;

// Call program SEL Commod. Mkts Actve SR.
CALL PROGRAM(SEL Commod. Mkts Actve SR) ('PDEDSRR');
PARAMETER(CTL.Commodity_Market_Code_USR);

ENDIF;

//?Select Price Code  PK0519 10/29/03
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Price Code USR
AND PGM.*Cursor_field = CTL.Price_Code_USR;

// LCL.Price Code = CON.*ZERO
LCL.Price_Code = *ZERO;

// Call program Sel Customer Prc Hdr  SL.
CALL PROGRAM(Sel Customer Prc Hdr  SL) ('POPOSRR');
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(LCL.Price_Code);

CASE;

// IF LCL.Price Code is Entered
IF LCL.Price_Code > *ZERO;

// CTL.Price Code USR = LCL.Price Code
CTL.Price_Code_USR = LCL.Price_Code;

ENDIF;

ENDIF;

//?Edit Pricing Control Fields
DO;

//?Retrieve Contract Defaults
CASE;

// IF CTL.Contract Number USR is Entered
IF CTL.Contract_Number_USR > *ZERO;

EXECUTE FUNCTION(RTV Contract Defaults  RT) TYPE(RTVOBJ) FILE(OPCIREP)          AC1277302;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Order_Desc_Line_One);
PARAMETER(CTL.Contract_Number_USR);
PARAMETER(CTL.Price_Overage_Overrid_USR);
PARAMETER(CTL.Market_Pricing_Date_USR);
PARAMETER(CTL.Date_Method_Code_USR);
PARAMETER(CTL.Price_Method_Code_USR);
PARAMETER(CTL.Commodity_Market_Code_USR);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.Contract Number USR = CTL.Contract Number USR
WRK.Contract_Number_USR = CTL.Contract_Number_USR;

ENDIF;

//?Validate price method code
CASE;

// IF CTL.Price Method Code USR NE WRK.BLANK
IF CTL.Price_Method_Code_USR <> WRK.BLANK;

// AND CTL.Price Method Code USR is NE Deviated
AND CTL.Price_Method_Code_USR <> 'DEV';

EXECUTE FUNCTION(VAL Price Meth Exists  RT) TYPE(RTVOBJ) FILE(PDIHREP)          AC1365282;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Price_Method_Code_USR);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER('O');
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Price Method invalid'
ERROR(USR1957);
MSGPARM(CTL.Price_Method_Code_USR);

ENDIF;

ENDIF;

//?Validate date method code
CASE;

// IF CTL.Date Method Code USR NE WRK.BLANK
IF CTL.Date_Method_Code_USR <> WRK.BLANK;

EXECUTE FUNCTION(VAL Date Method Exists RT) TYPE(RTVOBJ) FILE(PDIPREP)          AC1365305;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Date_Method_Code_USR);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER('O');
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Date Method is invalid.'
ERROR(USR2161);
MSGPARM(CTL.Date_Method_Code_USR);

ENDIF;

ENDIF;

//?Validate Commodity Market
CASE;

// IF CTL.Commodity Market Code USR NE WRK.BLANK
IF CTL.Commodity_Market_Code_USR <> WRK.BLANK;

EXECUTE FUNCTION(RTV Commod. Mkts Desc  RT) TYPE(RTVOBJ) FILE(OMFYREP)          AC1277934;
PARAMETER(CTL.Commodity_Market_Code_USR);
PARAMETER(WRK.Commodity_Market_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.Commodity Market Desc EQ WRK.BLANK
IF WRK.Commodity_Market_Desc = WRK.BLANK;

// Send error message - 'Commodity Market not found'
ERROR(USR2162);
MSGPARM(CTL.Commodity_Market_Code_USR);

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Commodity Market Desc = WRK.Commodity Market Desc
CTL.Commodity_Market_Desc = WRK.Commodity_Market_Desc;

ENDIF;

ENDIF;

EXECUTE FUNCTION(EDT Order Detail Edits IF) TYPE(EXCINTFUN)                     AC1425282;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Market_Pricing_Date_USR);
PARAMETER(CTL.Commodity_Market_Code_USR);
PARAMETER(CTL.Date_Method_Code_USR);
PARAMETER(CTL.Price_Method_Code_USR);
PARAMETER(CTL.Price_Overage_Overrid_USR);
PARAMETER(WRK.Contract_Number_USR);
PARAMETER(CTL.Requested_Ship_Date);
PARAMETER(CTL.Quantity_Shipped_Total);
PARAMETER(PAR.Cntrt_Enter_no_QT_Price);
PARAMETER(PAR.Cntrt_#_does_not_Exit);
PARAMETER(PAR.Qty_ordered_Contract);
PARAMETER(PAR.Contract_Expired);
PARAMETER(PAR.Price_Override_Required);
PARAMETER(PAR.Price_Method_QT_Cntrt_0);
PARAMETER(PAR.Prc_Code_FRM_or_MKT);
PARAMETER(PAR.Mkt_Pricing_Date_not_0);
PARAMETER(PAR.Mkt_Meth_and_Date_both);
PARAMETER(PAR.Price_Override_Req_EXT);
PARAMETER(PAR.Contract_Exists_for_Item);
PARAMETER(PAR.Price_Override_not_Allowd);
PARAMETER(CTL.Order_Date);
PARAMETER(WRK.Price_Method_Type);
{
 //?Execute internal function

 // PAR.Contract Exists for Item = CND.blank
 PAR.Contract_Exists_for_Item = *BLANK;

 // PAR.Cntrt Enter no QT Price = CND.blank
 PAR.Cntrt_Enter_no_QT_Price = *BLANK;

 // PAR.Cntrt.# does not Exit = CND.blank
 PAR.Cntrt_#_does_not_Exit = *BLANK;

 // PAR.Qty ordered > Contract = CND.blank
 PAR.Qty_ordered_Contract = *BLANK;

 // PAR.Contract Expired = CND.blank
 PAR.Contract_Expired = *BLANK;

 // PAR.Price Override Required = CND.blank
 PAR.Price_Override_Required = *BLANK;

 // PAR.Price Method QT & Cntrt 0 = CND.blank
 PAR.Price_Method_QT_Cntrt_0 = *BLANK;

 // PAR.Prc Code FRM or MKT = CND.blank
 PAR.Prc_Code_FRM_or_MKT = *BLANK;

 // PAR.Mkt Pricing Date not 0 = CND.blank
 PAR.Mkt_Pricing_Date_not_0 = *BLANK;

 // PAR.Mkt Meth. and Date both = CND.blank
 PAR.Mkt_Meth_and_Date_both = *BLANK;

 // PAR.Price Override Req. EXT = CND.blank
 PAR.Price_Override_Req_EXT = *BLANK;

 // PAR.Price Override not Allowd = CND.blank
 PAR.Price_Override_not_Allowd = *BLANK;

 //?Get Price Method Type
 EXECUTE FUNCTION(RTV Prc Mth Typ by Sys RT) TYPE(RTVOBJ) FILE(PDIHREP)          AC1365458;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Price_Method_Code);
 PARAMETER(PAR.Price_Method_Type);
 PARAMETER('O');
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Check if Contract exists for Item
 //?A Contract Exists for this customer and item.
 CASE;

 // IF PAR.Contract Number is Zero
 IF PAR.Contract_Number = *ZERO;

 EXECUTE FUNCTION(RTV Edt for Existing   RT) TYPE(RTVOBJ) FILE(OPCIREP)          AC1291147;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Order_Date);
 PARAMETER(PAR.Contract_Number);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  CASE;

  // IF PAR.Effective Date GE DB1.Effective Date
  IF PAR.Effective_Date >= DB1.Effective_Date;

  // AND PAR.Effective Date LE DB1.End Date Effective
  AND PAR.Effective_Date <= DB1.End_Date_Effective;

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

  ENDIF;

  // PAR.Contract Number = DB1.Contract Number
  PAR.Contract_Number = DB1.Contract_Number;

 }

 // WRK.Contract Number = PAR.Contract Number
 WRK.Contract_Number = PAR.Contract_Number;

 CASE;

 // IF PGM.*Return code is *Record already exists
 IF PGM.*Return_code = 'Y2U0003';

 // PAR.Contract Exists for Item = CND.yes
 PAR.Contract_Exists_for_Item = 'Y';

 ENDIF;

 ENDIF;

 //?Edit Contract Number
 CASE;

 // IF PAR.Contract Number is Entered
 IF PAR.Contract_Number > *ZERO;

 EXECUTE FUNCTION(RTV Val. Contract #    RT) TYPE(RTVOBJ) FILE(OPCIREP)          AC1267683;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Effective_Date);
 PARAMETER(PAR.End_Date_Effective);
 PARAMETER(PAR.Maximum_Quantity);
 PARAMETER(PAR.Quantity_Sold);
 PARAMETER(PAR.Contract_Number);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Set Contract Error Parms
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.Cntrt.# does not Exit = CND.yes
 PAR.Cntrt_#_does_not_Exit = 'Y';

 //?Set Contract Error Parms
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Total Quantity Ordered = PAR.Quantity Sold + PAR.Quantity Ordered
 WRK.Total_Quantity_Ordered = PAR.Quantity_Sold + PAR.Quantity_Ordered;

 CASE;

 // IF WRK.Total Quantity Ordered GT PAR.Maximum Quantity
 IF WRK.Total_Quantity_Ordered > PAR.Maximum_Quantity;

 // PAR.Qty ordered > Contract = CND.yes
 PAR.Qty_ordered_Contract = 'Y';

 ENDIF;

 CASE;

 // IF PAR.End Date Effective LE PAR.Order Date
 IF PAR.End_Date_Effective <= PAR.Order_Date;

 // PAR.Contract Expired = CND.yes
 PAR.Contract_Expired = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

 //?Validity Checking
 //?Price Override and Manual Price Method
 CASE;

 // IF PAR.Price Method Type is Manual Pricing
 IF PAR.Price_Method_Type = 'M';

 // AND PAR.Price Overage Override is Equal zero
 AND PAR.Price_Overage_Override = *ZERO;

 // PAR.Price Override Required = CND.yes
 PAR.Price_Override_Required = 'Y';

 ENDIF;

 //?Price override and EXT price method
 CASE;

 // IF PAR.Price Method Type is Extended Pricing
 IF PAR.Price_Method_Type = 'X';

 // AND PAR.Price Overage Override is Equal zero
 AND PAR.Price_Overage_Override = *ZERO;

 // PAR.Price Override Req. EXT = CND.yes
 PAR.Price_Override_Req_EXT = 'Y';

 ENDIF;

 //?FRM / MKT Checks
 CASE;

 // IF PAR.Price Method Type is Market or Formula
 IF PAR.Price_Method_Type = 'F'/'K';

 //?Market Code Must be entered
 CASE;

 // IF PAR.Commodity Market Code is Not Entered
 IF PAR.Commodity_Market_Code = *BLANK;

 // PAR.Prc Code FRM or MKT = CND.yes
 PAR.Prc_Code_FRM_or_MKT = 'Y';

 ENDIF;

 //?Market Price Date field not zero
 CASE;

 // IF PAR.Market Pricing Date is NE Zero
 IF PAR.Market_Pricing_Date <> *ZERO;

 // PAR.Mkt Pricing Date not 0 = CND.yes
 PAR.Mkt_Pricing_Date_not_0 = 'Y';

 ENDIF;

 CASE;

 // IF PAR.Price Overage Override is Not Zeros
 IF PAR.Price_Overage_Override <> *ZERO;

 // PAR.Price Override not Allowd = CND.yes
 PAR.Price_Override_not_Allowd = 'Y';

 ENDIF;

 ENDIF;

 //?MKT date Method entered and Mkt Price Date both entered.
 CASE;

 // IF PAR.Date Method Code is Entered
 IF PAR.Date_Method_Code <> *BLANK;

 // AND PAR.Market Pricing Date is NE Zero
 AND PAR.Market_Pricing_Date <> *ZERO;

 // PAR.Mkt Meth. and Date both = CND.yes
 PAR.Mkt_Meth_and_Date_both = 'Y';

 ENDIF;

}


//?Copy of edit that go in to program code
//?Contract exists for this item
CASE;

// IF PAR.Contract Exists for Item is yes
IF PAR.Contract_Exists_for_Item = 'Y';

// Send information message - 'Item &1 has Contract number &2 in effect.'
MESSAGE(USR1851 *INFO);
MSGPARM(CTL.Item_Code);
MSGPARM(WRK.Contract_Number);

ENDIF;

//?Contract not found
CASE;

// IF PAR.Cntrt.# does not Exit is yes
IF PAR.Cntrt_#_does_not_Exit = 'Y';

// Send error message - 'OPP Item Contract not found in contract file.'
ERROR(USR1803);
MSGPARM(CTL.Contract_Number);

ENDIF;

//?Quantity ordered exceeds contact quantity available
CASE;

// IF PAR.Qty ordered > Contract is yes
IF PAR.Qty_ordered_Contract = 'Y';

// Send information message - 'Quantity Ordered > Maximum quantity on Contract &2.'
MESSAGE(USR1806 *INFO);
MSGPARM(CTL.Quantity_Ordered);
MSGPARM(CTL.Contract_Number);

ENDIF;

//?Contract has passed expiration date
CASE;

// IF PAR.Contract Expired is yes
IF PAR.Contract_Expired = 'Y';

// AND CTL.Contract Number is Entered
AND CTL.Contract_Number > *ZERO;

// Send information message - 'Contract Effective date has expired for this item.'
MESSAGE(USR1810 *INFO);
MSGPARM(CTL.Contract_Number);

ENDIF;

//?Validity Checking error messages
//?Price Override required for MAN Price Code
CASE;

// IF PAR.Price Override Required is yes
IF PAR.Price_Override_Required = 'Y';

// Send error message - 'Price Override Req. W/MAN pricing method.'
ERROR(USR1772);
MSGPARM(CTL.Price_Method_Code);
MSGPARM(CTL.Price_Overage_Override);

ENDIF;

//?Price Override required when Price Method is EXT
CASE;

// IF PAR.Price Override Req. EXT is yes
IF PAR.Price_Override_Req_EXT = 'Y';

// Send error message - 'Price Override Req. w/EXT price method.'
ERROR(USR1774);
MSGPARM(CTL.Price_Method_Code);
MSGPARM(CTL.Price_Overage_Override);

ENDIF;

//?Price Override not allowed for FRM or MKT
CASE;

// IF PAR.Price Override not Allowd is yes
IF PAR.Price_Override_not_Allowd = 'Y';

// Send error message - 'Price Override not allowed with Price Method chosen'
ERROR(USR1807);
MSGPARM(CTL.Price_Overage_Overrid_USR);

ENDIF;

//?Market code must be entered with FRM or MKT price code
CASE;

// IF PAR.Prc Code FRM or MKT is yes
IF PAR.Prc_Code_FRM_or_MKT = 'Y';

// Send error message - 'Market Code must be entered for Price method chosen.'
ERROR(USR1750);
MSGPARM(CTL.Commodity_Market_Code_USR);

ENDIF;

//?Override is not allowed if Market or Formula Processing
CASE;

// IF WRK.Price Method Type is Market or Formula
IF WRK.Price_Method_Type = 'F'/'K';

// AND CTL.Price Overage Overrid USR is Not Zeros
AND CTL.Price_Overage_Overrid_USR <> *ZERO;

// Send error message - 'Price Override not allowed with Price Method chosen'
ERROR(USR1807);
MSGPARM(CTL.Price_Overage_Overrid_USR);

ENDIF;

//?Date method/Pricing Date
CASE;

// IF PAR.Mkt Meth. and Date both is yes
IF PAR.Mkt_Meth_and_Date_both = 'Y';

CASE;

// IF CTL.Date Method Code USR is Day Prior Ship
IF CTL.Date_Method_Code_USR = 'DPS';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Date Method and Market Price Date or Range are not allowed.'
ERROR(USR2097);
MSGPARM(CTL.Market_Pricing_Date);
MSGPARM(CTL.Date_Method_Code);

ENDIF;

ENDIF;

//?If price method is MKT then make sure price exists.
CASE;

// IF CTL.Price Method Code USR is Market
IF CTL.Price_Method_Code_USR = 'MKT';

EXECUTE FUNCTION(VAL Market Cd & Group  RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1414484;
PARAMETER(CTL.Commodity_Market_Code_USR);
PARAMETER(PAR.Commodity_Price_Group);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

//?Check Commodity market from company/item file
CASE;

// IF CTL.Commodity Market Code USR NE PAR.Default Commod Mark basis
IF CTL.Commodity_Market_Code_USR <> PAR.Default_Commod_Mark_basis;

EXECUTE FUNCTION(VAL Market Cd & Group  RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1414484;
PARAMETER(PAR.Default_Commod_Mark_basis);
PARAMETER(PAR.Commodity_Price_Group);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'No price can be found for market code &1 and group code &2.'
ERROR(USR2349);
MSGPARM(CTL.Commodity_Market_Code_USR);
MSGPARM(PAR.Commodity_Price_Group);

// IF *OTHERWISE
IF *OTHERWISE;

// Send information message - 'No price found for market &1 and group &2, so market &3 will be used.
MESSAGE(USR2350 *INFO);
MSGPARM(CTL.Commodity_Market_Code_USR);
MSGPARM(PAR.Commodity_Price_Group);
MSGPARM(PAR.Default_Commod_Mark_basis);

ENDIF;

//?Check Commodity market from company/item file
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'No price can be found for market code &1 and group code &2.'
ERROR(USR2349);
MSGPARM(CTL.Commodity_Market_Code_USR);
MSGPARM(PAR.Commodity_Price_Group);

ENDIF;

ENDIF;

ENDIF;

//?**************************************************************************
//?* OMS292 ---- Edit Manual Prices against commodity table.
//?*  The following logic was added so that all manual orders would
//?*  be verified against the OM Commodity Market Price Table.
//?*  John Tremper - 10/20/97
//?**************************************************************************
//?Editing all Manual Prices against the commodity table.
CASE;

// IF CTL.Price Method Code USR is Manual
IF CTL.Price_Method_Code_USR = 'MAN';

EXECUTE FUNCTION(Val Manual Price      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1581694;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(LCL.Description_Line_One);
PARAMETER(PAR.Default_Commod_Mark_basis);
PARAMETER(LCL.Market_Overage);
PARAMETER(LCL.Standard_Overage_Underage);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(LCL.Std_Weight_Head_Var_Ren);
PARAMETER(LCL.Primal_Group_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?R12926 DN 04/30/18-At Order level, get Absorbed Freight Rate from OH.
EXECUTE FUNCTION(RTV AbsFrtRt/Type Cde  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1582615;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(LCL.Type_Code);
PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Absorbed Frt Rate RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2149231;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Validate Manual Price
CASE;

// IF LCL.Primal Group Code is NE Samples or Cut Loss
IF LCL.Primal_Group_Code <> 'UNID';

// AND LCL.Type Code is Not Promotional/Samples
AND LCL.Type_Code <> 'PS';

EXECUTE FUNCTION(VAL Manual Price Range IF) TYPE(EXCINTFUN)                     AC1414607;
PARAMETER(CTL.Company_Number);
PARAMETER(PAR.Default_Commod_Mark_basis);
PARAMETER(CTL.Price_Overage_Overrid_USR);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(LCL.Projected_Market_Price);
PARAMETER(PAR.Default_Commod_Mark_basis);
PARAMETER(LCL.Market_Overage);
PARAMETER(WRK.Error_Status_3);
PARAMETER(LCL.Minimum_Price_USR);
PARAMETER(LCL.Maximum_Price_USR);
PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
{
 //?Execute internal function

 //?*---------------------------------------------------------------*
 //?Documentation:
 //?This internal function will determine if a manual price entered
 //?on an order detail line is within the Manual Pricing Acceptance
 //?Percentage from the Company Control file. If it does not fall
 //?within the percentage range then the market price will be used.
 //?If no market price is found then it is a manual price error
 //?*---------------------------------------------------------------*
 // PAR.Projected Market Price = CON.*ZERO
 PAR.Projected_Market_Price = *ZERO;

 // PAR.Minimum Price   USR = CON.*ZERO
 PAR.Minimum_Price_USR = *ZERO;

 // PAR.Maximum Price  USR = CON.*ZERO
 PAR.Maximum_Price_USR = *ZERO;

 // PAR.Error Status  3 = CND.Yes
 PAR.Error_Status_3 = 'Y';

 EXECUTE FUNCTION(RTV Manual Price Accpt RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1414604;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Manual_Price_Accept_Prcnt);
 PARAMETER(PAR.CoPk_FdSrv_ManPrc_Acpt_PT);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Food Service and Co-Pack Items
 CASE;

 // IF PAR.Default Commod Mark basis is Food Service
 IF PAR.Default_Commod_Mark_basis = 'FSV';

 // OR PAR.Default Commod Mark basis is Co-Pack
 OR PAR.Default_Commod_Mark_basis = 'CPK';

 // PAR.Manual Price Accept Prcnt = PAR.CoPk/FdSrv ManPrc Acpt%
 PAR.Manual_Price_Accept_Prcnt = PAR.CoPk_FdSrv_ManPrc_Acpt_PT;

 ENDIF;

 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(9999999);
 PARAMETER(PAR.Projected_Market_Price);
 PARAMETER(WRK.USR_Date_Priced);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

 // Projected Market Price
 PAR.Projected_Market_Price = ( PAR.Projected_Market_Price
 + PAR.Standard_Overage_Underage ) + ( PAR.Absorbed_Freight_Rate_CWT / 100 'H' );

 //?If a market price is found for co/cust market code default
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // Minimum price allowed
 PAR.Minimum_Price_USR = ( 1 - ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) )
 * PAR.Projected_Market_Price 'H';

 // Maximum price allowed
 PAR.Maximum_Price_USR = ( ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) + 1 )
 * PAR.Projected_Market_Price 'H';

 //?If the Price Override is within the range then error status is no
 CASE;

 // IF PAR.Price Overage Override GE PAR.Minimum Price   USR
 IF PAR.Price_Overage_Override >= PAR.Minimum_Price_USR;

 // AND PAR.Price Overage Override LE PAR.Maximum Price  USR
 AND PAR.Price_Overage_Override <= PAR.Maximum_Price_USR;

 // PAR.Error Status  3 = CND.No
 PAR.Error_Status_3 = 'N';

 ENDIF;

 //?If a market price is found for co/cust market code default
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?If no price for co/cust market code then use co/item market code
 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER(PAR.Default_Commod_Mark_basis);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(9999999);
 PARAMETER(PAR.Projected_Market_Price);
 PARAMETER(WRK.USR_Date_Priced);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // Minimum price allowed
 PAR.Minimum_Price_USR = ( PAR.Manual_Price_Accept_Prcnt / 100 'H' )
 * PAR.Projected_Market_Price 'H';

 // Maximum price allowed
 PAR.Maximum_Price_USR = ( ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) + 1 )
 * PAR.Projected_Market_Price 'H';

 //?If the Price Override is within the range then error status is no
 CASE;

 // IF PAR.Price Overage Override GE PAR.Minimum Price   USR
 IF PAR.Price_Overage_Override >= PAR.Minimum_Price_USR;

 // AND PAR.Price Overage Override LE PAR.Maximum Price  USR
 AND PAR.Price_Overage_Override <= PAR.Maximum_Price_USR;

 // PAR.Error Status  3 = CND.No
 PAR.Error_Status_3 = 'N';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Projected Market Price = CON.*ZERO
 PAR.Projected_Market_Price = *ZERO;

 ENDIF;

 ENDIF;

}


ENDIF;

CASE;

// IF WRK.@Error Return is Manual Price Error
IF WRK.@Error_Return = 'MPE';

// Send error message - 'Price is invalid.  Current Market Price is:  &1.'
ERROR(USR2580);
MSGPARM(WRK.Commodity_Market_Price);

// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

ENDIF;

//?Price Code I  - PK0519 10/20/03
CASE;

// IF CTL.Price Code USR is Not Entered
IF ( CTL.Price_Code_USR = *ZERO;

// AND CTL.Price Method Code USR is Deviated
AND CTL.Price_Method_Code_USR = 'DEV' );

// OR CTL.Price Code USR is Entered
OR ( CTL.Price_Code_USR > *ZERO;

// AND CTL.Price Method Code USR is NE Deviated
AND CTL.Price_Method_Code_USR <> 'DEV' );

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

// Send error message - 'Price Method and Price Code combination not valid.'
ERROR(USR3321);
MSGPARM(CTL.Price_Code_USR);
MSGPARM(CTL.Price_Method_Code_USR);

ENDIF;

//?Price Code II - PK0519 10/20/03
CASE;

// IF CTL.Price Code USR is Entered
IF CTL.Price_Code_USR > *ZERO;

EXECUTE FUNCTION(Rtv Cust Prc Str/End  RT) TYPE(RTVOBJ) FILE(POC6REP)           AC1677734;
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Price_Code_USR);
PARAMETER(LCL.Price_Start_Date);
PARAMETER(LCL.Price_End_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Price Start Date is Not Entered
IF LCL.Price_Start_Date = *ZERO;

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

// Send error message - 'Price Code &1 not found for customer or invalid date range.'
ERROR(USR3318);
MSGPARM(CTL.Price_Code_USR);

// IF *OTHERWISE
IF *OTHERWISE;

//?Val date range
CASE;

// IF PAR.Scheduled Ship Date LT LCL.Price Start Date
IF PAR.Scheduled_Ship_Date < LCL.Price_Start_Date;

// OR PAR.Scheduled Ship Date GT LCL.Price End Date
OR PAR.Scheduled_Ship_Date > LCL.Price_End_Date;

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

// Send error message - 'Price Code &1 not valid because of start/end dates.'
ERROR(USR3317);
MSGPARM(CTL.Price_Code_USR);

ENDIF;

EXECUTE FUNCTION(Rtv Max Wt and price  RT) TYPE(RTVOBJ) FILE(POC7REP)           AC1677837;
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Price_Code_USR);
PARAMETER(CTL.Item_Code);
PARAMETER(LCL.Maximum_Contract_Units);
PARAMETER(LCL.Customer_Price_UM_Prc);
PARAMETER(LCL.Commodity_Market_Code);
PARAMETER(LCL.Price_Method_Code);
PARAMETER(LCL.Date_Method_Code);
PARAMETER(LCL.Contract_Unit_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

// Send error message - 'Price Code &1 not found for Item &2'
ERROR(USR3319);
MSGPARM(CTL.Price_Code_USR);
MSGPARM(CTL.Item_Code);

// IF *OTHERWISE
IF *OTHERWISE;

//?Sum weights shipped/ordered for ship to /price code
EXECUTE FUNCTION(Clc Sum Ship/Ord Unit IF) TYPE(EXCINTFUN)                      AC1829994;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Commodity_Market_Code);
PARAMETER(CTL.Date_Method_Code);
PARAMETER(CTL.Price_Method_Code);
PARAMETER(CTL.Price_Overage_Overrid_USR);
PARAMETER(CTL.U_M_Base_Price);
PARAMETER(CTL.Quantity_Ordered);
PARAMETER(CTL.Unit_Weight_Ordered_U_M);
PARAMETER(CTL.Price_Code_USR);
PARAMETER(CTL.OD_Ceiling_Price);
PARAMETER(WRK.Error_Status);
PARAMETER(LCL.Price_Method_Type);
PARAMETER(LCL.PMH_Price_Type);
{
 //?Execute internal function

 // PAR.Error Status = CND.no
 PAR.Error_Status = 'N';

 // LCL.Weight Ordered = PAR.Quantity Ordered * PAR.Unit Weight Ordered U/M *
 LCL.Weight_Ordered = PAR.Quantity_Ordered * PAR.Unit_Weight_Ordered_U_M;

 // Call program CLC Sum Ship/Ord Unit XF.
 CALL PROGRAM(CLC Sum Ship/Ord Unit XF) ('PPA6XFR');
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Price_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Total_Weight_Ordered_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Total_Quantity_Ordered);

 // PAR.Total Weight Ordered USR = PAR.Total Weight Ordered USR + LCL.Weight Ordered
 PAR.Total_Weight_Ordered_USR = PAR.Total_Weight_Ordered_USR + LCL.Weight_Ordered;

 // PAR.Total Quantity Ordered = PAR.Total Quantity Ordered + PAR.Quantity Ordered
 PAR.Total_Quantity_Ordered = PAR.Total_Quantity_Ordered + PAR.Quantity_Ordered;

 //?5/13/10 SAZ P205-Add parm for Max Unit Type;rtv Contract Unit Type
 // Call program Rtv Cust Prc hdr/dtl  XF.
 CALL PROGRAM(Rtv Cust Prc hdr/dtl  XF) ('PPA7XFR');
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Price_Code);
 PARAMETER(WRK.Price_Start_Date);
 PARAMETER(WRK.Price_End_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Maximum_Contract_Units);
 PARAMETER(PAR.Customer_Price_UM_Prc);
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(LCL.Price_Method_Code);
 PARAMETER(PAR.Date_Method_Code);
 PARAMETER(PAR.Contract_Unit_Type);

 // PAR.Price Method Code = LCL.Price Method Code
 PAR.Price_Method_Code = LCL.Price_Method_Code;

 EXECUTE FUNCTION(RTV PrcMthTyp/PrcTyp  RT) TYPE(RTVOBJ) FILE(PDIHREP)           AC1997170;
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Price_Method_Code);
 PARAMETER(PAR.Price_Method_Type);
 PARAMETER(PAR.PMH_Price_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?5/13/10 SAZ P205-Use Contract Unit Type to check Qty or Weight-Lbs
 //?Use Contract Unit Type to check Qty or Weight-Lbs
 //?VAL: Total Weight and Quantity w/Maximum
 CASE;

 // IF PAR.Contract Unit Type is Weight-LB
 IF PAR.Contract_Unit_Type = 'W';

 CASE;

 // IF PAR.Total Weight Ordered USR GT PAR.Maximum Contract Units
 IF PAR.Total_Weight_Ordered_USR > PAR.Maximum_Contract_Units;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // LCL.Weight Allocated USR = PAR.Total Weight Ordered USR - PAR.Maximum Contract Units
 LCL.Weight_Allocated_USR = PAR.Total_Weight_Ordered_USR - PAR.Maximum_Contract_Units;

 // Send error message - 'Max Units &3 for Item &4/Price Code &1 exceeded by &2.'
 ERROR(USR3320);
 MSGPARM(PAR.Price_Code);
 MSGPARM(LCL.Weight_Allocated_USR);
 MSGPARM(PAR.Maximum_Contract_Units);
 MSGPARM(PAR.Item_Code);

 ENDIF;

 //?VAL: Total Weight and Quantity w/Maximum
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?If Contract Unit type = Quantity
 CASE;

 // IF PAR.Total Quantity Ordered GT PAR.Maximum Contract Units
 IF PAR.Total_Quantity_Ordered > PAR.Maximum_Contract_Units;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // LCL.Weight Allocated USR = PAR.Total Quantity Ordered - PAR.Maximum Contract Units
 LCL.Weight_Allocated_USR = PAR.Total_Quantity_Ordered - PAR.Maximum_Contract_Units;

 // Send error message - 'Max Units &3 for Item &4/Price Code &1 exceeded by &2.'
 ERROR(USR3320);
 MSGPARM(PAR.Price_Code);
 MSGPARM(LCL.Weight_Allocated_USR);
 MSGPARM(PAR.Maximum_Contract_Units);
 MSGPARM(PAR.Item_Code);

 ENDIF;

 ENDIF;

 //?Original code
 //?OUT: No Errors
 CASE;

 // IF PAR.Error Status is no
 IF PAR.Error_Status = 'N';

 // PAR.Price Overage Override = PAR.Customer Price /UM Prc
 PAR.Price_Overage_Override = PAR.Customer_Price_UM_Prc;

 CASE;

 // IF PAR.PMH Price Type is Invoice Price
 IF PAR.PMH_Price_Type = 'I';

 // PAR.Price Overage Override = PAR.Customer Price /UM Prc
 PAR.Price_Overage_Override = PAR.Customer_Price_UM_Prc;

 // PAR.OD Ceiling Price = CON.*ZERO
 PAR.OD_Ceiling_Price = *ZERO;

 // IF PAR.PMH Price Type is Ceiling Price
 IF PAR.PMH_Price_Type = 'C';

 // PAR.Price Overage Override = CON.*ZERO
 PAR.Price_Overage_Override = *ZERO;

 // PAR.OD Ceiling Price = PAR.Customer Price /UM Prc
 PAR.OD_Ceiling_Price = PAR.Customer_Price_UM_Prc;

 ENDIF;

 ENDIF;

}


ENDIF;

ENDIF;

ENDIF;

ENDDO;

//?USER: Process subfile control (Pre-confirm)

// WRK.USR Update Flag = CND.No
WRK.USR_Update_Flag = *BLANK;

//?7=Edit Price Details
CASE;

// IF CTL.*CMD key is CF07
IF CTL.*CMD_key = '07';

// Call program Edt OrdDtl Pricing    ER.
CALL PROGRAM(Edt OrdDtl Pricing    ER) ('PNQBE1R');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?If control fields are changed then Pricing will be recalced
CASE;

// IF CTL.Price Overage Overrid USR NE CTL.Price Overage Override
IF CTL.Price_Overage_Overrid_USR <> CTL.Price_Overage_Override;

// OR CTL.Price Method Code USR NE CTL.Price Method Code
OR CTL.Price_Method_Code_USR <> CTL.Price_Method_Code;

// OR CTL.Date Method Code USR NE CTL.Date Method Code
OR CTL.Date_Method_Code_USR <> CTL.Date_Method_Code;

// OR CTL.Market Pricing Date USR NE CTL.Market Pricing Date
OR CTL.Market_Pricing_Date_USR <> CTL.Market_Pricing_Date;

// OR CTL.Commodity Market Code USR NE CTL.Commodity Market Code
OR CTL.Commodity_Market_Code_USR <> CTL.Commodity_Market_Code;

// OR CTL.Contract Number USR NE CTL.Contract Number
OR CTL.Contract_Number_USR <> CTL.Contract_Number;

// OR PAR.USR Update Flag is Yes
OR PAR.USR_Update_Flag = 'Y';

// PAR.USR Update Flag = CND.No
PAR.USR_Update_Flag = *BLANK;

// Call program CLC Price Item         XF.
CALL PROGRAM(CLC Price Item         XF) ('PDG9XFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Price_Method_Code_USR);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Actual_Shipped_Date);
PARAMETER(**);
PARAMETER(CTL.OD_Ceiling_Price);
PARAMETER(CTL.OD_Market_Begin_Date);
PARAMETER(CTL.OD_Market_Ending_Date);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Requested_Delivery_Date);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(WRK.Error_Return);
PARAMETER('S');

//?Extend Order detail amount and determine Pricing U/M Price
EXECUTE FUNCTION(CLC Price,Ext,U/M1Prc  IF) TYPE(EXCINTFUN)                     AC1356112;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Detail_Line_Status);
PARAMETER(CTL.Extended_Amount);
PARAMETER(CTL.Price_Method_Code);
PARAMETER(CTL.Price_Overage_Override);
PARAMETER(CTL.Price_Status);
PARAMETER(CTL.Price_Audit);
PARAMETER(CTL.Quantity_Ordered);
PARAMETER(CTL.Weight_Ordered);
PARAMETER(CTL.Quantity_Scheduled);
PARAMETER(CTL.Weight_Scheduled);
PARAMETER(CTL.Quantity_Shipped_Total);
PARAMETER(CTL.Weight_Shipped_Total);
PARAMETER(CTL.Unit_Price);
PARAMETER(CTL.Unit_Price_Credit);
PARAMETER(CTL.Unit_Price_Ordered_U_M);
PARAMETER(CTL.Event_Code);
PARAMETER('PM');
PARAMETER(LCL.Type_Code);
PARAMETER(LCL.Company_Organization);
{
 //?Execute internal function

 //?*********************************************************************
 //?Calculate "Price Per Pound", "Extended Amount", "Primary U/M Price"
 //?*********************************************************************
 // PAR.Unit Weight = CON.*ZERO
 PAR.Unit_Weight = *ZERO;

 // PAR.U/M - Pricing = CND.Not Entered
 PAR.UOM_Pricing = *BLANK;

 // PAR.Catch Weight Status = CND.blank
 PAR.Catch_Weight_Status = *BLANK;

 //?Load Quantity Shipped Total field. c2742- do -0- shipped from ord
 CASE;

 // IF PAR.Quantity Shipped Total is Equal to zero
 IF PAR.Quantity_Shipped_Total = *ZERO;

 // WRK.Quantity Shipped Total = CON.1
 WRK.Quantity_Shipped_Total = 1;

 //?Load Quantity Shipped Total field. c2742- do -0- shipped from ord
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Quantity Shipped Total = PAR.Quantity Shipped Total
 WRK.Quantity_Shipped_Total = PAR.Quantity_Shipped_Total;

 ENDIF;

 //?Set quantity and weight according to order status  c2742 -0- shped
 CASE;

 // IF PAR.Detail Line Status is Avail/Alloc/Enter/Hold
 IF PAR.Detail_Line_Status = 'L'/'A'/'E'/'H';

 // AND PAR.Event Code is Entered Thru 03 Picked
 AND PAR.Event_Code >= '01';
 AND PAR.Event_Code <= '03';

 //?RMC 6/17/09 FP1054 use qty/wgt ordered instead of sched
 // PAR.USR Quantity = PAR.Quantity Ordered
 PAR.USR_Quantity = PAR.Quantity_Ordered;

 // PAR.USR Weight = PAR.Weight Ordered
 PAR.USR_Weight = PAR.Weight_Ordered;

 //?Set quantity and weight according to order status  c2742 -0- shped
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Quantity = WRK.Quantity Shipped Total
 PAR.USR_Quantity = WRK.Quantity_Shipped_Total;

 // PAR.USR Weight = PAR.Weight Shipped Total
 PAR.USR_Weight = PAR.Weight_Shipped_Total;

 ENDIF;

 // Call program RTV For Price Extent   XF.
 CALL PROGRAM(RTV For Price Extent   XF) ('PDXRXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Catch_Weight_Status);
 PARAMETER(PAR.Primal_Group_Code);

 //?Check retrieve Unit Weight & C/W error
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // AND PAR.Catch Weight Status is Y/N Values
 AND PAR.Catch_Weight_Status = 'N'/'Y';

 // AND PAR.Unit Weight is Not equal zero
 AND PAR.Unit_Weight <> *ZERO;

 //?Check retrieve Unit Weight & C/W error
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute command - 'Send Price MSG to SEABOARD'
 EXECUTE COMMAND(USR2306);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Catch_Weight_Status);
 PARAMETER(*ZERO);

 ENDIF;

 CASE;

 // IF PAR.Price Method Code is Extended
 IF PAR.Price_Method_Code = 'EXT';

 // PAR.Extended Amount = PAR.Price Overage Override
 PAR.Extended_Amount = PAR.Price_Overage_Override;

 //?Calculate Unit Price for Extended
 CASE;

 // IF PAR.USR Weight is Not equal zero
 IF PAR.USR_Weight <> *ZERO;

 // PAR.Unit Price = PAR.Extended Amount / PAR.USR Weight *Rounded
 PAR.Unit_Price = PAR.Extended_Amount / PAR.USR_Weight 'H';

 ENDIF;

 //?Calculate Pricing U/M Price for Extended
 CASE;

 // IF PAR.USR Quantity is not equal zero
 IF PAR.USR_Quantity <> *ZERO;

 // PAR.Unit Price Ordered U/M = PAR.Extended Amount / PAR.USR Quantity *Rounded
 PAR.Unit_Price_Ordered_U_M = PAR.Extended_Amount / PAR.USR_Quantity 'H';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Extend price with unit price credit if not zeros
 CASE;

 // IF PAR.Detail Line Status is Avail/Alloc/Enter/Hold
 IF ( PAR.Detail_Line_Status = 'L'/'A'/'E'/'H';

 // AND PAR.Event Code is Entered Thru 03 Picked
 AND PAR.Event_Code >= '01';
 AND PAR.Event_Code <= '03';

 // AND PAR.Unit Price - Credit is Not Zeros
 AND PAR.Unit_Price_Credit <> *ZERO;

 // AND PAR.Price Audit is Not Manually Price Audit
 AND PAR.Price_Audit = 'A'/'N'/*BLANK;

 // AND PAR.Pricing Event Called From is No Price With Credit Pric
 AND PAR.Pricing_Event_Called_From = 'OE'/'PS'/'UWC'/'UWT' );

 //?07/07/08 PKD Replaced w/consideration for .01 manual price
 //?Extend Price using Price Overage Override or Unit Price-Credit
 CASE;

 // IF PAR.Price Method Code is Deviated
 IF PAR.Price_Method_Code = 'DEV';

 //?----- USE: Price Overage Override
 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Price_Overage_Override);

 //?Extend Price using Price Overage Override or Unit Price-Credit
 // IF PAR.Price Method Code is Manual
 IF PAR.Price_Method_Code = 'MAN';

 // AND PAR.Company Organization is High Plains Biodiesel
 AND PAR.Company_Organization = 'H';

 //?----- USE: Price Overage Override
 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Price_Overage_Override);

 //?Extend Price using Price Overage Override or Unit Price-Credit
 // IF PAR.Price Method Code is Manual
 IF PAR.Price_Method_Code = 'MAN';

 // AND PAR.Company Organization is Not HPB
 AND PAR.Company_Organization = 'D'/'S';

 //?----- USE: Price Overage Override OR Unit Price-Credit
 CASE;

 // IF PAR.Type Code is Inter Company
 IF PAR.Type_Code = 'IC';

 // OR PAR.Type Code is Is Promotional/Samples
 OR PAR.Type_Code = 'PS';

 // OR PAR.Primal Group Code is Samples or Cut Loss
 OR PAR.Primal_Group_Code = 'UNID';

 // OR PAR.Primal Group Code is Other
 OR PAR.Primal_Group_Code = 'OTHER';

 // OR PAR.Price Overage Override is GT .01
 OR PAR.Price_Overage_Override > .01;

 //?----- USE: Price Overage Override
 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Price_Overage_Override);

 //?----- USE: Price Overage Override OR Unit Price-Credit
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?----- USE: Unit Price-Credit
 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Unit_Price_Credit);

 ENDIF;

 //?Extend Price using Price Overage Override or Unit Price-Credit
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?---- USE: Unit Price-Credit
 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Unit_Price_Credit);

 ENDIF;

 //?Extend price with unit price credit if not zeros
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?08/28/07 PKD Replaced with Clc OrdDtl Ext Amt    XF
 //?04/28/10 PKD If Unit Price is zero, then use Unit Price-Credit.
 //?** Added Not .01 to force these orders to use Credit Chk Price.
 CASE;

 // IF PAR.Unit Price is Not Zeros
 IF PAR.Unit_Price <> *ZERO;

 // AND PAR.Unit Price is Not .01
 AND PAR.Unit_Price <> .01;

 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Unit_Price);

 //?Unit Price Ordered U/M
 CASE;

 // IF PAR.USR Quantity is not equal zero
 IF PAR.USR_Quantity <> *ZERO;

 // PAR.Unit Price Ordered U/M = PAR.Extended Amount / PAR.USR Quantity *Rounded
 PAR.Unit_Price_Ordered_U_M = PAR.Extended_Amount / PAR.USR_Quantity 'H';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Unit_Price_Credit);

 ENDIF;

 ENDIF;

 ENDIF;

 //?*********************************************************************
}


// PAR.Price Status = CTL.Price Status
PAR.Price_Status = CTL.Price_Status;

//?Flag as Unpriced if a Pricing Error was Encountered
CASE;

// IF WRK.Error Return is All Entered Values
IF WRK.Error_Return = 'CFR'/'CID'/'CIF'/'CIO'/'QPE'/'EXT'/'XPE'/'FPE'/'IOM'/'IOV'/'MPE'            +
/'KPE'/'MKT'/'MSC'/'OVR'/'STR'/'SUB'/'TRC'/'WPA'/'RWB'/'ITERR'/'CRD'/'MSL'/'GAT';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// Send error message - 'Pricing Error was found. Return code was &1'
ERROR(USR1953);
MSGPARM(WRK.Error_Return);

QUIT;

//?Flag as Unpriced if a Pricing Error was Encountered
// IF *OTHERWISE
IF *OTHERWISE;

//?Move Usr Screen fields into Screen Control Fields
DO;

// CTL.Price Overage Override = CTL.Price Overage Overrid USR
CTL.Price_Overage_Override = CTL.Price_Overage_Overrid_USR;

// CTL.Price Method Code = CTL.Price Method Code USR
CTL.Price_Method_Code = CTL.Price_Method_Code_USR;

// CTL.Date Method Code = CTL.Date Method Code USR
CTL.Date_Method_Code = CTL.Date_Method_Code_USR;

// CTL.Market Pricing Date = CTL.Market Pricing Date USR
CTL.Market_Pricing_Date = CTL.Market_Pricing_Date_USR;

// CTL.Commodity Market Code = CTL.Commodity Market Code USR
CTL.Commodity_Market_Code = CTL.Commodity_Market_Code_USR;

// CTL.Contract Number = CTL.Contract Number USR
CTL.Contract_Number = CTL.Contract_Number_USR;

// CTL.Price Code = CTL.Price Code USR
CTL.Price_Code = CTL.Price_Code_USR;

ENDDO;

// Execute function SFL Execute SFL Subrou US.
EXECUTE FUNCTION(SFL Execute SFL Subrou US) TYPE(EXCUSRSRC) ('PDN8UFR');
{
 *
 * THIS CODE USED TO RELOAD SUBFILE IN PRICING DETAILS
 *
 C                     EXSR BAIZSF
}


// WRK.USR Update Flag = CND.Yes
WRK.USR_Update_Flag = 'Y';

ENDIF;

// Call program RTV Item Details       XF.
CALL PROGRAM(RTV Item Details       XF) ('PDKAXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.U_M_Ordered);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(CTL.U_M_Base_Price);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);

ENDIF;

//?Added the following -Purva 4/30/99
//?Price Method = Manual
CASE;

// IF CTL.Price Method Code is Manual
IF CTL.Price_Method_Code = 'MAN';

EXECUTE FUNCTION(Val Manual Price      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1581694;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(LCL.Description_Line_One);
PARAMETER(PAR.Default_Commod_Mark_basis);
PARAMETER(LCL.Market_Overage);
PARAMETER(LCL.Standard_Overage_Underage);
PARAMETER(LCL.Commodity_Price_Group);
PARAMETER(LCL.Std_Weight_Head_Var_Ren);
PARAMETER(LCL.Primal_Group_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?R12926 DN 04/30/18-At Order level, get Absorbed Freight Rate from OH.
EXECUTE FUNCTION(RTV AbsFrtRt/Type Cde  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1582615;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(LCL.Type_Code);
PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Absorbed Frt Rate RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2149231;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Primal Group Code is NE Samples or Cut Loss
IF LCL.Primal_Group_Code <> 'UNID';

// AND LCL.Type Code is Not Promotional/Samples
AND LCL.Type_Code <> 'PS';

EXECUTE FUNCTION(VAL Manual Price Range IF) TYPE(EXCINTFUN)                     AC1414607;
PARAMETER(CTL.Company_Number);
PARAMETER(PAR.Commodity_Market_Code);
PARAMETER(CTL.Price_Overage_Override);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(WRK.Projected_Market_Price);
PARAMETER(PAR.Default_Commod_Mark_basis);
PARAMETER(LCL.Standard_Overage_Underage);
PARAMETER(WRK.Error_Status_3);
PARAMETER(LCL.Minimum_Price_USR);
PARAMETER(LCL.Maximum_Price_USR);
PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
{
 //?Execute internal function

 //?*---------------------------------------------------------------*
 //?Documentation:
 //?This internal function will determine if a manual price entered
 //?on an order detail line is within the Manual Pricing Acceptance
 //?Percentage from the Company Control file. If it does not fall
 //?within the percentage range then the market price will be used.
 //?If no market price is found then it is a manual price error
 //?*---------------------------------------------------------------*
 // PAR.Projected Market Price = CON.*ZERO
 PAR.Projected_Market_Price = *ZERO;

 // PAR.Minimum Price   USR = CON.*ZERO
 PAR.Minimum_Price_USR = *ZERO;

 // PAR.Maximum Price  USR = CON.*ZERO
 PAR.Maximum_Price_USR = *ZERO;

 // PAR.Error Status  3 = CND.Yes
 PAR.Error_Status_3 = 'Y';

 EXECUTE FUNCTION(RTV Manual Price Accpt RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1414604;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Manual_Price_Accept_Prcnt);
 PARAMETER(PAR.CoPk_FdSrv_ManPrc_Acpt_PT);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Food Service and Co-Pack Items
 CASE;

 // IF PAR.Default Commod Mark basis is Food Service
 IF PAR.Default_Commod_Mark_basis = 'FSV';

 // OR PAR.Default Commod Mark basis is Co-Pack
 OR PAR.Default_Commod_Mark_basis = 'CPK';

 // PAR.Manual Price Accept Prcnt = PAR.CoPk/FdSrv ManPrc Acpt%
 PAR.Manual_Price_Accept_Prcnt = PAR.CoPk_FdSrv_ManPrc_Acpt_PT;

 ENDIF;

 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(9999999);
 PARAMETER(PAR.Projected_Market_Price);
 PARAMETER(WRK.USR_Date_Priced);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

 // Projected Market Price
 PAR.Projected_Market_Price = ( PAR.Projected_Market_Price
 + PAR.Standard_Overage_Underage ) + ( PAR.Absorbed_Freight_Rate_CWT / 100 'H' );

 //?If a market price is found for co/cust market code default
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // Minimum price allowed
 PAR.Minimum_Price_USR = ( 1 - ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) )
 * PAR.Projected_Market_Price 'H';

 // Maximum price allowed
 PAR.Maximum_Price_USR = ( ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) + 1 )
 * PAR.Projected_Market_Price 'H';

 //?If the Price Override is within the range then error status is no
 CASE;

 // IF PAR.Price Overage Override GE PAR.Minimum Price   USR
 IF PAR.Price_Overage_Override >= PAR.Minimum_Price_USR;

 // AND PAR.Price Overage Override LE PAR.Maximum Price  USR
 AND PAR.Price_Overage_Override <= PAR.Maximum_Price_USR;

 // PAR.Error Status  3 = CND.No
 PAR.Error_Status_3 = 'N';

 ENDIF;

 //?If a market price is found for co/cust market code default
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?If no price for co/cust market code then use co/item market code
 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER(PAR.Default_Commod_Mark_basis);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(9999999);
 PARAMETER(PAR.Projected_Market_Price);
 PARAMETER(WRK.USR_Date_Priced);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // Minimum price allowed
 PAR.Minimum_Price_USR = ( PAR.Manual_Price_Accept_Prcnt / 100 'H' )
 * PAR.Projected_Market_Price 'H';

 // Maximum price allowed
 PAR.Maximum_Price_USR = ( ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) + 1 )
 * PAR.Projected_Market_Price 'H';

 //?If the Price Override is within the range then error status is no
 CASE;

 // IF PAR.Price Overage Override GE PAR.Minimum Price   USR
 IF PAR.Price_Overage_Override >= PAR.Minimum_Price_USR;

 // AND PAR.Price Overage Override LE PAR.Maximum Price  USR
 AND PAR.Price_Overage_Override <= PAR.Maximum_Price_USR;

 // PAR.Error Status  3 = CND.No
 PAR.Error_Status_3 = 'N';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Projected Market Price = CON.*ZERO
 PAR.Projected_Market_Price = *ZERO;

 ENDIF;

 ENDIF;

}


ENDIF;

CASE;

// IF WRK.Error Status  3 is Yes
IF WRK.Error_Status_3 = 'Y';

// Send information message - 'WARNING: Unit price is out of the price range tolerance (&2 - &3).'
MESSAGE(USR2374 *INFO);
MSGPARM(CTL.Unit_Price);
MSGPARM(LCL.Minimum_Price_USR);
MSGPARM(LCL.Maximum_Price_USR);

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?Edit Price Componant Value
CASE;

// IF WRK.USR Update Flag is No
IF WRK.USR_Update_Flag = *BLANK;

CASE;

// IF RCD.*SFLSEL is *Change
IF RCD.*SFLSEL = '2';

// Call program Zzz Ship Price Detail  E1.
CALL PROGRAM(Zzz Ship Price Detail  E1) ('PDN9E1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Price_Detail_Sequence);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(RCD.Price_Componant_Desc);

// Call program CLC Pricing using File XF.
CALL PROGRAM(CLC Pricing using File XF) ('PDOJXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Price_Detail_Sequence);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Price_Method_Code);
PARAMETER(CTL.U_M_Ordered);
PARAMETER(CTL.Unit_Price);
PARAMETER(CTL.Unit_Price_Credit);
PARAMETER(CTL.Unit_Price_Ordered_U_M);
PARAMETER(**);

//?Reload Subfile user source
// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?USER: Process subfile control (Post-confirm)

//?Copy files from qtemp
EXECUTE FUNCTION(DEL Ship Detail Pricng RT) TYPE(RTVOBJ) FILE(PDIMCPP)          AC1299816;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DLT Ship Detail Pricng DL) TYPE(DLTOBJ) FILE(PDIMCPP)          AC1299817;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
}


EXECUTE FUNCTION(CPY Ship Prc f/Qtmp    RT) TYPE(RTVOBJ) FILE(PDIMCPP)          AC1310881;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(DB1.Price_Detail_Sequence);
 PARAMETER(DB1.Componant_Price);
 PARAMETER(DB1.PD_Status);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

  // DB1.Job Name = JOB.*JOB
  DB1.Job_Name = JOB.*JOB;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(DEL Ship Dtl Formula   RT) TYPE(RTVOBJ) FILE(PDJKCPP)          AC1300026;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DLT Ship Dtl Formula   DL) TYPE(DLTOBJ) FILE(PDJKCPP)          AC1300025;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Pricing_Sequence_Number);
}


EXECUTE FUNCTION(CPY Shp Dtl Form f/QtmpRT) TYPE(RTVOBJ) FILE(PDJKCPP)          AC1310884;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(CRT Ship Dtl Formula   CR) TYPE(CRTOBJ) FILE(PDJKCPP)          AC1296159;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Pricing_Sequence_Number);
 PARAMETER(DB1.Sales_Yield);
 PARAMETER(DB1.Market_Value);
 PARAMETER(DB1.Credit_Value);
 PARAMETER(DB1.PD_Status);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


// Call program CLC Pricing using File XF.
CALL PROGRAM(CLC Pricing using File XF) ('PDOJXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
PARAMETER(CTL.Price_Detail_Sequence);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Price_Method_Code);
PARAMETER(CTL.U_M_Ordered);
PARAMETER(CTL.Unit_Price);
PARAMETER(CTL.Unit_Price_Credit);
PARAMETER(CTL.Unit_Price_Ordered_U_M);
PARAMETER(02);

EXECUTE FUNCTION(CLC Price,Ext,U/M1Prc  IF) TYPE(EXCINTFUN)                     AC1356112;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Detail_Line_Status);
PARAMETER(CTL.Extended_Amount);
PARAMETER(CTL.Price_Method_Code);
PARAMETER(CTL.Price_Overage_Override);
PARAMETER(CTL.Price_Status);
PARAMETER(CTL.Price_Audit);
PARAMETER(CTL.Quantity_Ordered);
PARAMETER(CTL.Weight_Ordered);
PARAMETER(CTL.Quantity_Scheduled);
PARAMETER(CTL.Weight_Scheduled);
PARAMETER(CTL.Quantity_Shipped_Total);
PARAMETER(CTL.Weight_Shipped_Total);
PARAMETER(CTL.Unit_Price);
PARAMETER(CTL.Unit_Price_Credit);
PARAMETER(CTL.Unit_Price_Ordered_U_M);
PARAMETER(CTL.Event_Code);
PARAMETER('PM');
PARAMETER(LCL.Type_Code);
PARAMETER(LCL.Company_Organization);
{
 //?Execute internal function

 //?*********************************************************************
 //?Calculate "Price Per Pound", "Extended Amount", "Primary U/M Price"
 //?*********************************************************************
 // PAR.Unit Weight = CON.*ZERO
 PAR.Unit_Weight = *ZERO;

 // PAR.U/M - Pricing = CND.Not Entered
 PAR.UOM_Pricing = *BLANK;

 // PAR.Catch Weight Status = CND.blank
 PAR.Catch_Weight_Status = *BLANK;

 //?Load Quantity Shipped Total field. c2742- do -0- shipped from ord
 CASE;

 // IF PAR.Quantity Shipped Total is Equal to zero
 IF PAR.Quantity_Shipped_Total = *ZERO;

 // WRK.Quantity Shipped Total = CON.1
 WRK.Quantity_Shipped_Total = 1;

 //?Load Quantity Shipped Total field. c2742- do -0- shipped from ord
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Quantity Shipped Total = PAR.Quantity Shipped Total
 WRK.Quantity_Shipped_Total = PAR.Quantity_Shipped_Total;

 ENDIF;

 //?Set quantity and weight according to order status  c2742 -0- shped
 CASE;

 // IF PAR.Detail Line Status is Avail/Alloc/Enter/Hold
 IF PAR.Detail_Line_Status = 'L'/'A'/'E'/'H';

 // AND PAR.Event Code is Entered Thru 03 Picked
 AND PAR.Event_Code >= '01';
 AND PAR.Event_Code <= '03';

 //?RMC 6/17/09 FP1054 use qty/wgt ordered instead of sched
 // PAR.USR Quantity = PAR.Quantity Ordered
 PAR.USR_Quantity = PAR.Quantity_Ordered;

 // PAR.USR Weight = PAR.Weight Ordered
 PAR.USR_Weight = PAR.Weight_Ordered;

 //?Set quantity and weight according to order status  c2742 -0- shped
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Quantity = WRK.Quantity Shipped Total
 PAR.USR_Quantity = WRK.Quantity_Shipped_Total;

 // PAR.USR Weight = PAR.Weight Shipped Total
 PAR.USR_Weight = PAR.Weight_Shipped_Total;

 ENDIF;

 // Call program RTV For Price Extent   XF.
 CALL PROGRAM(RTV For Price Extent   XF) ('PDXRXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Catch_Weight_Status);
 PARAMETER(PAR.Primal_Group_Code);

 //?Check retrieve Unit Weight & C/W error
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // AND PAR.Catch Weight Status is Y/N Values
 AND PAR.Catch_Weight_Status = 'N'/'Y';

 // AND PAR.Unit Weight is Not equal zero
 AND PAR.Unit_Weight <> *ZERO;

 //?Check retrieve Unit Weight & C/W error
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute command - 'Send Price MSG to SEABOARD'
 EXECUTE COMMAND(USR2306);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Catch_Weight_Status);
 PARAMETER(*ZERO);

 ENDIF;

 CASE;

 // IF PAR.Price Method Code is Extended
 IF PAR.Price_Method_Code = 'EXT';

 // PAR.Extended Amount = PAR.Price Overage Override
 PAR.Extended_Amount = PAR.Price_Overage_Override;

 //?Calculate Unit Price for Extended
 CASE;

 // IF PAR.USR Weight is Not equal zero
 IF PAR.USR_Weight <> *ZERO;

 // PAR.Unit Price = PAR.Extended Amount / PAR.USR Weight *Rounded
 PAR.Unit_Price = PAR.Extended_Amount / PAR.USR_Weight 'H';

 ENDIF;

 //?Calculate Pricing U/M Price for Extended
 CASE;

 // IF PAR.USR Quantity is not equal zero
 IF PAR.USR_Quantity <> *ZERO;

 // PAR.Unit Price Ordered U/M = PAR.Extended Amount / PAR.USR Quantity *Rounded
 PAR.Unit_Price_Ordered_U_M = PAR.Extended_Amount / PAR.USR_Quantity 'H';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Extend price with unit price credit if not zeros
 CASE;

 // IF PAR.Detail Line Status is Avail/Alloc/Enter/Hold
 IF ( PAR.Detail_Line_Status = 'L'/'A'/'E'/'H';

 // AND PAR.Event Code is Entered Thru 03 Picked
 AND PAR.Event_Code >= '01';
 AND PAR.Event_Code <= '03';

 // AND PAR.Unit Price - Credit is Not Zeros
 AND PAR.Unit_Price_Credit <> *ZERO;

 // AND PAR.Price Audit is Not Manually Price Audit
 AND PAR.Price_Audit = 'A'/'N'/*BLANK;

 // AND PAR.Pricing Event Called From is No Price With Credit Pric
 AND PAR.Pricing_Event_Called_From = 'OE'/'PS'/'UWC'/'UWT' );

 //?07/07/08 PKD Replaced w/consideration for .01 manual price
 //?Extend Price using Price Overage Override or Unit Price-Credit
 CASE;

 // IF PAR.Price Method Code is Deviated
 IF PAR.Price_Method_Code = 'DEV';

 //?----- USE: Price Overage Override
 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Price_Overage_Override);

 //?Extend Price using Price Overage Override or Unit Price-Credit
 // IF PAR.Price Method Code is Manual
 IF PAR.Price_Method_Code = 'MAN';

 // AND PAR.Company Organization is High Plains Biodiesel
 AND PAR.Company_Organization = 'H';

 //?----- USE: Price Overage Override
 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Price_Overage_Override);

 //?Extend Price using Price Overage Override or Unit Price-Credit
 // IF PAR.Price Method Code is Manual
 IF PAR.Price_Method_Code = 'MAN';

 // AND PAR.Company Organization is Not HPB
 AND PAR.Company_Organization = 'D'/'S';

 //?----- USE: Price Overage Override OR Unit Price-Credit
 CASE;

 // IF PAR.Type Code is Inter Company
 IF PAR.Type_Code = 'IC';

 // OR PAR.Type Code is Is Promotional/Samples
 OR PAR.Type_Code = 'PS';

 // OR PAR.Primal Group Code is Samples or Cut Loss
 OR PAR.Primal_Group_Code = 'UNID';

 // OR PAR.Primal Group Code is Other
 OR PAR.Primal_Group_Code = 'OTHER';

 // OR PAR.Price Overage Override is GT .01
 OR PAR.Price_Overage_Override > .01;

 //?----- USE: Price Overage Override
 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Price_Overage_Override);

 //?----- USE: Price Overage Override OR Unit Price-Credit
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?----- USE: Unit Price-Credit
 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Unit_Price_Credit);

 ENDIF;

 //?Extend Price using Price Overage Override or Unit Price-Credit
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?---- USE: Unit Price-Credit
 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Unit_Price_Credit);

 ENDIF;

 //?Extend price with unit price credit if not zeros
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?08/28/07 PKD Replaced with Clc OrdDtl Ext Amt    XF
 //?04/28/10 PKD If Unit Price is zero, then use Unit Price-Credit.
 //?** Added Not .01 to force these orders to use Credit Chk Price.
 CASE;

 // IF PAR.Unit Price is Not Zeros
 IF PAR.Unit_Price <> *ZERO;

 // AND PAR.Unit Price is Not .01
 AND PAR.Unit_Price <> .01;

 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Unit_Price);

 //?Unit Price Ordered U/M
 CASE;

 // IF PAR.USR Quantity is not equal zero
 IF PAR.USR_Quantity <> *ZERO;

 // PAR.Unit Price Ordered U/M = PAR.Extended Amount / PAR.USR Quantity *Rounded
 PAR.Unit_Price_Ordered_U_M = PAR.Extended_Amount / PAR.USR_Quantity 'H';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Unit_Price_Credit);

 ENDIF;

 ENDIF;

 ENDIF;

 //?*********************************************************************
}


EXECUTE FUNCTION(CHG OM Price Maint     CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1202345;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
PARAMETER(CTL.Extended_Amount);
PARAMETER(CTL.Market_Pricing_Date);
PARAMETER(CTL.Commodity_Market_Code);
PARAMETER(CTL.Date_Method_Code);
PARAMETER(CTL.Price_Method_Code);
PARAMETER(CTL.Price_Overage_Override);
PARAMETER(CTL.Price_Status);
PARAMETER(WRK.Pricing_Date_Used);
PARAMETER(CTL.Unit_Price);
PARAMETER(CTL.Unit_Price_Ordered_U_M);
PARAMETER(PAR.Date_of_Original_Entry);
PARAMETER(CTL.Released_by_User_Sts_Y_N);
PARAMETER(CTL.OD_Price_Type);
PARAMETER(CTL.Price_Code);
PARAMETER(CTL.Order_Gate_Final_Price);
{
 //?USER: Processing after Data read

 //?E2247 RMC 10/03/12 Crt chg log if dtl has been sent to MPR USDA
 CASE;

 // IF DB1.OD MPR Sent to USDA Sts is yes
 IF DB1.OD_MPR_Sent_to_USDA_Sts = 'Y';

 //?If price type changes, then create type: ORDPRT
 CASE;

 // IF DB1.OD Price Type NE PAR.OD Price Type
 IF DB1.OD_Price_Type <> PAR.OD_Price_Type;

 //?change log prior has seq in pos 1-3, price type 5-7: '001 NEG     '
 // LCL.Text 3 Length USR = DB1.Order Sequence Number
 LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

 // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,DB1.OD Price Type,CON.1)
 LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + DB1.OD_Price_Type (1);

 // LCL.Change Log New Value = PAR.OD Price Type
 LCL.Change_Log_New_Value = PAR.OD_Price_Type;

 // Call program CRT Load/OrderChg n/ld XF.
 CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
 PARAMETER(*ZERO);
 PARAMETER('ORDPRT');
 PARAMETER('SLS');
 PARAMETER(LCL.Change_Log_Prior_Value);
 PARAMETER(LCL.Change_Log_New_Value);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);

 ENDIF;

 ENDIF;

 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(CHG Ord  Prt,Prc Sts   CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1341906;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER('N');
PARAMETER('U');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


//?If price status or unit price changes write to log
CASE;

// IF CTL.Price Status NE WRK.Price Status Last
IF CTL.Price_Status <> WRK.Price_Status_Last;

// OR CTL.Unit Price NE WRK.Unit Price Last
OR CTL.Unit_Price <> WRK.Unit_Price_Last;

EXECUTE FUNCTION(RTV Next Audit Seq #   RT) TYPE(RTVOBJ) FILE(PDK3CPP)          AC1429793;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
PARAMETER(999);
PARAMETER(WRK.USR_Sequence_Num_New_ATR);
{
 //?USER: Processing if Data record not found

 // PAR.USR Sequence Num. New ATR = CON.1
 PAR.USR_Sequence_Num_New_ATR = 1;

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PAR.USR Sequence Num. New ATR = DB1.Audit Sequence Number + CON.1
 PAR.USR_Sequence_Num_New_ATR = DB1.Audit_Sequence_Number + 1;

 QUIT;

}


EXECUTE FUNCTION(CRT Price Change Audit CR) TYPE(CRTOBJ) FILE(PDK3CPP)          AC1429780;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
PARAMETER(WRK.USR_Sequence_Num_New_ATR);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Detail_Line_Status);
PARAMETER(CTL.Detail_Line_Status);
PARAMETER(CTL.Extended_Amount);
PARAMETER(WRK.Extended_Amount_Last);
PARAMETER(CTL.Price_Status);
PARAMETER(WRK.Price_Status_Last);
PARAMETER(CTL.Price_Audit);
PARAMETER(CTL.Price_Audit_Reason_Code);
PARAMETER(CTL.Price_Audit);
PARAMETER(CTL.Price_Audit_Reason_Code);
PARAMETER(CTL.Unit_Price);
PARAMETER(WRK.Unit_Price_Last);
PARAMETER(CTL.Unit_Price_Credit);
PARAMETER(CTL.Unit_Price_Credit);
PARAMETER(CTL.Event_Code);
PARAMETER(CTL.Event_Code);
PARAMETER('PM');
PARAMETER(JOB.*PROGRAM);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

// Call program CLC Price/Price Audit  XF.
CALL PROGRAM(CLC Price/Price Audit  XF) ('PDPRXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
PARAMETER('PM');
PARAMETER(WRK.Unused_Parm_Value_USR);
PARAMETER(WRK.Order_Weight_Total);
PARAMETER(WRK.Production_Hold);
PARAMETER(*NO);

//?USER: Final processing (Post-confirm)

RETURN;

