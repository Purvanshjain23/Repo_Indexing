// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDHLXFR
// ?Date: 14.08.2025 Time: 03:31:55
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?FP1054 chg duration from 25 to 40 days -- lcl,*duration (factor)
//?Set Up Kill & Production Date / Kill & Production Date Ranges
DO;

EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
PARAMETER(JOB.*USER);
PARAMETER(PAR.User_Code_Model);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.User Code Model is equal to blank
IF PAR.User_Code_Model = *BLANK;

EXECUTE FUNCTION(RTV Appl. Default Co   RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143068;
PARAMETER(JOB.*USER);
PARAMETER('P/S');
PARAMETER(PAR.Company_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Appl. Default Co   RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143068;
PARAMETER(PAR.User_Code_Model);
PARAMETER('P/S');
PARAMETER(PAR.Company_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
PARAMETER(PAR.Company_Number);
PARAMETER('CURKILLDTE');
PARAMETER(PAR.System_Value_Numeric);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.Kill Date = PAR.System Value Numeric
PAR.Kill_Date = PAR.System_Value_Numeric;

EXECUTE FUNCTION(RTV Next Kill Date     RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1336433;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Kill_Date);
PARAMETER(PAR.Kill_Date_RGF);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Post to G/L Date EQ PAR.Post to G/L Date
 IF DB1.Post_to_G_L_Date = PAR.Post_to_G_L_Date;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Kill Day Status is yes
 IF DB1.Kill_Day_Status = 'Y';

 // PAR.Kill Date = DB1.Post to G/L Date
 PAR.Kill_Date = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

 ENDIF;

}


// LCL.*Duration (factor) = CON.40
LCL.*Duration_factor = 40;

EXECUTE FUNCTION(RTV KillDay Dte-Durtn  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1369299;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Kill_Date_RGF);
PARAMETER(LCL.*Duration_factor);
PARAMETER(PAR.Kill_Date_RGT);
{
 //?USER: Initialize routine

 // WRK.Count USR = CON.*ZERO
 WRK.Count_USR = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF WRK.Count USR EQ PAR.*Duration (factor)
 IF WRK.Count_USR = PAR.*Duration_factor;

 // PAR.*DATE = DB1.Post to G/L Date
 PAR.*DATE = DB1.Post_to_G_L_Date;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Prdctn Dt w/Kill  RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1299920;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Kill_Date);
PARAMETER(PAR.Production_Date);
{
 //?USER: Initialize routine

 // WRK.First Time Flag = CND.Yes
 WRK.First_Time_Flag = 'Y';

 //?USER: Process Data record

 CASE;

 // IF WRK.First Time Flag is Yes
 IF WRK.First_Time_Flag = 'Y';

 // WRK.First Time Flag = CND.NO
 WRK.First_Time_Flag = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Production Day Status is yes
 IF DB1.Production_Day_Status = 'Y';

 // PAR.Production Date = DB1.Post to G/L Date
 PAR.Production_Date = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

 ENDIF;

}


// PAR.Production Date RGF = PAR.Production Date
PAR.Production_Date_RGF = PAR.Production_Date;

// LCL.*Duration (factor) = CON.40
LCL.*Duration_factor = 40;

EXECUTE FUNCTION(Rtv PrdDay Dte -Durtn RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369297;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Production_Date_RGF);
PARAMETER(LCL.*Duration_factor);
PARAMETER(PAR.Production_Date_RGT);
{
 //?USER: Initialize routine

 // WRK.Count USR = CON.*ZERO
 WRK.Count_USR = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF WRK.Count USR EQ PAR.*Duration (factor)
 IF WRK.Count_USR = PAR.*Duration_factor;

 // PAR.*DATE = DB1.Post to G/L Date
 PAR.*DATE = DB1.Post_to_G_L_Date;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

}


ENDDO;

EXECUTE FUNCTION(Del Avail Audit       RT) TYPE(RTVOBJ) FILE(PDJWCPP)           AC1337866;
PARAMETER(PAR.Company_Number);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DLT Avail Audit        DL) TYPE(DLTOBJ) FILE(PDJWCPP)          AC1323641;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.PSAA_Audit_Date);
 PARAMETER(DB1.PSAA_Audit_Type);
 PARAMETER(DB1.PSAA_Audit_Sequence_Num);
}


EXECUTE FUNCTION(Rtv Kill/Prod Day Sts RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1461011;
PARAMETER(PAR.Company_Number);
PARAMETER(JOB.*Job_date);
PARAMETER(PAR.Kill_Day_Status);
PARAMETER(PAR.Production_Day_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Recalculate Weight Scheduled for Item with Unit Weight Changed.
EXECUTE FUNCTION(UPS ReClc Wgt Sched   RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1404314;
PARAMETER(PAR.Company_Number);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(UPS ReClc Wgt Sched   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425202;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Unit_Weight);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(LCL.Header_Status);
  PARAMETER(LCL.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Billing Activity Type is Invoice or Transfer
  IF LCL.Billing_Activity_Type = '1'/'4';

  // PAR.Weight Scheduled = DB1.Quantity Scheduled * PAR.Unit Weight *Rounded
  PAR.Weight_Scheduled = DB1.Quantity_Scheduled * PAR.Unit_Weight 'H';

  // PAR.Weight Ordered = DB1.Quantity Ordered * PAR.Unit Weight *Rounded
  PAR.Weight_Ordered = DB1.Quantity_Ordered * PAR.Unit_Weight 'H';

  // LCL.Pricing Event Called From = CND.Unit Weight Change
  LCL.Pricing_Event_Called_From = 'UWC';

  //?Set to event that will create tms order trigger - if gross wt is changing
  CASE;

  // IF DB1.Weight Ordered NE PAR.Weight Ordered
  IF DB1.Weight_Ordered <> PAR.Weight_Ordered;

  // LCL.Pricing Event Called From = CND.Unit Weight Change-TMS
  LCL.Pricing_Event_Called_From = 'UWT';

  ENDIF;

  EXECUTE FUNCTION(Chg Wgt Sched,Unit Wt CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1425210;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Weight_Ordered);
  PARAMETER(PAR.Weight_Scheduled);
  PARAMETER(PAR.Unit_Weight);
  {
   //?USER: Processing before Data update

   //?Calc Gross Weight from tares...    copied from Dsp Gross Wgt function
   DO;

   // Call program Rtv Tare Weight        XF.
   CALL PROGRAM(Rtv Tare Weight        XF) ('PBI3XFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Misc_Tare_Weight);

   //?WI464 get wt for order's pallet type
   // Call program RTV Itm BxID & Tares  XF.
   CALL PROGRAM(RTV Itm BxID & Tares  XF) ('PBI4XFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Box_Weight);
   PARAMETER(LCL.Number_Cases_On_A_Pallet);
   PARAMETER(LCL.Pallet_Tare_Weight);
   PARAMETER(LCL.Box_iD);
   PARAMETER(DB1.OD_Pallet_Type);

   // LCL.Total Tare USR = LCL.Box Weight + LCL.Misc Tare Weight
   LCL.Total_Tare_USR = LCL.Box_Weight + LCL.Misc_Tare_Weight;

   // Box + Misc Tare
   LCL.Weight_1_1_U = ( LCL.Box_Weight + LCL.Misc_Tare_Weight ) * DB1.Quantity_Ordered 'H';

   //?Pallet Tare
   CASE;

   // IF DB1.Palletize is yes
   IF DB1.Palletize = 'Y';

   CASE;

   // IF LCL.Number Cases On A Pallet is GT Zero
   IF LCL.Number_Cases_On_A_Pallet > *ZERO;

   // Pallet Weight
   LCL.Weight_1_2_U = ( DB1.Quantity_Ordered / LCL.Number_Cases_On_A_Pallet 'H' )
   * LCL.Pallet_Tare_Weight 'H';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Weight 1.2             .U = CON.*ZERO
   LCL.Weight_1_2_U = *ZERO;

   ENDIF;

   //?Pallet Tare
   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Weight 1.2             .U = CON.*ZERO
   LCL.Weight_1_2_U = *ZERO;

   ENDIF;

   // Estimated Gross
   DB1.OD_Estimated_Gross_Weight = ( DB1.Weight_Ordered + LCL.Weight_1_1_U )
   + LCL.Weight_1_2_U;

   //?E00196 RMC 8/24/12 chk pfs interface SHPTRN too
   ENDDO;

  }

  EXECUTE FUNCTION(UPS ReClc Wgt Sched   RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1404318;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(PAR.Unit_Weight);
  {
   //?USER: Process Data record

   // PAR.OD Weight Scheduled = DB1.OD Quantity Scheduled * PAR.Unit Weight *Rounded
   PAR.OD_Weight_Scheduled = DB1.OD_Qty_Cnsmd_Pieces_Sched * PAR.Unit_Weight 'H';

   EXECUTE FUNCTION(CHG Weight Scheduled   CH) TYPE(CHGOBJ) FILE(PDKNCPP)          AC1404319;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
   PARAMETER(PAR.OD_Weight_Scheduled);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  //?****    PDD012   ********
  // Call program EDT Post Open Orders   XF.
  CALL PROGRAM(EDT Post Open Orders   XF) ('PDHRXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(WRK.Unused_Parm_Value_USR);
  PARAMETER(WRK.Order_Weight_Total);
  PARAMETER(LCL.Pricing_Event_Called_From);

  EXECUTE FUNCTION(RTV Load ID            RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1384375;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Load_ID);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?RMC 02/05/07 do this only if there is a Load on the Order
  CASE;

  // IF WRK.Load ID is NE Blank
  IF WRK.Load_ID <> *ZERO;

  // Call program RTV UPD Ld Abs.Frt/Wgt XF.
  CALL PROGRAM(RTV UPD Ld Abs.Frt/Wgt XF) ('PDE0XFR');
  PARAMETER(WRK.Load_ID);
  PARAMETER(WRK.Total_Load_Order_Weight);
  PARAMETER(WRK.Total_Freight);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(Chg Unit Wgt Chg Sts  CH) TYPE(CHGOBJ) FILE(CABZREP)           AC1404316;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER('NO');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


//?Build Schedule
CASE;

// IF PAR.Kill Day Status is yes
IF PAR.Kill_Day_Status = 'Y';

// OR PAR.Production Day Status is yes
OR PAR.Production_Day_Status = 'Y';

// Call program Zzz Bld Sched/Plan    XF.
CALL PROGRAM(Zzz Bld Sched/Plan    XF) ('PDRQXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Kill_Date);
PARAMETER(PAR.Kill_Date_RGF);
PARAMETER(PAR.Kill_Date_RGT);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Production_Date_RGF);
PARAMETER(PAR.Production_Date_RGT);
PARAMETER('Y');
PARAMETER('N');
PARAMETER('JOBSCHED');

// Call program Zzz FRZTRMPROD To 'N'  XF.
CALL PROGRAM(Zzz FRZTRMPROD To 'N'  XF) ('PDC6XFR');
PARAMETER(PAR.Company_Number);

ENDIF;

// PAR.Production Date USR = PAR.Production Date + CON.-1 *DAYS
PAR.Production_Date_USR = DATEINCR(PAR.Production_Date '-1' 'DY' 1111111 'NONE' 'N' 1);

EXECUTE FUNCTION(Del One Time Prod Adj RT) TYPE(RTVOBJ) FILE(PDI9CPP)           AC1337089;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Production_Date_USR);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DLT Prod. Adjustment   DL) TYPE(DLTOBJ) FILE(PDI9CPP)          AC1261450;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Adjustment_Type);
 PARAMETER(DB1.PS_Adjustment_Number);
}


//?Roll Current Kill Date to Next Kill Date
CASE;

// IF PAR.Kill Day Status is yes
IF PAR.Kill_Day_Status = 'Y';

// Call program Zzz Upd Kill Dates    XF.
CALL PROGRAM(Zzz Upd Kill Dates    XF) ('PDTMXFR');

ENDIF;

