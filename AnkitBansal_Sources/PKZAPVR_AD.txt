// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKZAPVR
// ?Date: 14.08.2025 Time: 02:50:53
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?MODIFICATIONS
//?11/02/2020 ISE H16853 - CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


//?USER: Load screen

// Call program RTV Next Tattoo Nbrs  XF.
CALL PROGRAM(RTV Next Tattoo Nbrs  XF) ('PKY4XFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(LCL.HC_Class_Type);
PARAMETER(LCL.Tattoo_Number_USR);
PARAMETER(LCL.Company_Value_Code_USR);
PARAMETER(LCL.Creation_Point_of_Ttt_USR);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(LCL.Return_Code_USR);
PARAMETER(LCL.SR_Type);
PARAMETER(LCL.SBD_Top_Load_Sts);
PARAMETER(LCL.Tattoo_Type_USR);

EXECUTE FUNCTION(Rtv Hog Class Qualify RT) TYPE(RTVOBJ) FILE(PKA8REP)           AB1161899;
PARAMETER(DTL.HC_Class_Code);
PARAMETER(DTL.HC_Description);
PARAMETER('S');
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?USER: Process command keys

//?* User Defined * Prompts
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Pen Usr
IF PGM.*Cursor_field = DTL.Pen_Usr;

// Call program Sel Pen               SR.
CALL PROGRAM(Sel Pen               SR) ('PKJ0SRR');
PARAMETER(DTL.Pen_Company_Number);
PARAMETER(DTL.Pen_Usr);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

// IF PGM.*Cursor field <IS> DTL.Defect Code Usr
IF PGM.*Cursor_field = DTL.Defect_Code_Usr;

// Call program Sel Hog Defect        SR.
CALL PROGRAM(Sel Hog Defect        SR) ('PKCWSRR');
PARAMETER(DTL.Defect_Code_Usr);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

// IF PGM.*Cursor field <IS> DTL.HC Class Code
IF PGM.*Cursor_field = DTL.HC_Class_Code;

// Call program Sel Hog Classifctn    SR.
CALL PROGRAM(Sel Hog Classifctn    SR) ('PKC0SRR');
PARAMETER(DTL.HC_Class_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

ENDIF;

//?USER: Validate fields

//?The subject pen must have an open status.
EXECUTE FUNCTION(Rtv Val Pen-no parms  RT) TYPE(RTVOBJ) FILE(PKA3REP)           AB1118072;
PARAMETER(DTL.Pen_Company_Number);
PARAMETER(DTL.Pen_Usr);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Pen &1 invalid for Subjects.'
ERROR(PRK0229);
MSGPARM(DTL.Pen_Usr);

ENDIF;

//?Subject Head must be <= # head in TD but not 0.
CASE;

// IF DTL.Head Total USR GT PAR.TD Pen Head
IF DTL.Head_Total_USR > PAR.TD_Pen_Head;

// Send error message - 'Subject head cannot be greater than pen head.'
ERROR(PRK0230);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Head Total USR EQ WRK.Zero USR
IF DTL.Head_Total_USR = WRK.Zero_USR;

// Send error message - 'Subject head cannot be 0.'
ERROR(PRK0236);

ENDIF;

ENDIF;

//?Validate Hog Defect
CASE;

// IF DTL.Defect Code Usr NE WRK.Blank USR
IF DTL.Defect_Code_Usr <> WRK.Blank_USR;

EXECUTE FUNCTION(Rtv Hog Defect Desc   RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1127787;
PARAMETER(DTL.Defect_Code_Usr);
PARAMETER(DTL.DF_Description);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.DF_Description = WRK.Blank_USR;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Hog Defect not found.'
ERROR(PRK0073);

ENDIF;

ENDIF;

//?Validate Hog Classification code
CASE;

// IF DTL.HC Class Code EQ WRK.Blank USR
IF DTL.HC_Class_Code = WRK.Blank_USR;

// Send error message - 'Class is required for subject hogs.'
ERROR(PRK0366);

//?Validate Hog Classification code
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Hog Class         RT) TYPE(RTVOBJ) FILE(PKA8REP)           AB1127629;
PARAMETER(DTL.HC_Class_Code);
PARAMETER(WRK.HC_Description);
PARAMETER(WRK.HC_Defect_Required);
PARAMETER(WRK.HC_Price_Required);
PARAMETER(WRK.HC_Resolution);
PARAMETER(WRK.HC_Qualification);
PARAMETER(WRK.HC_Class_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.HC Class Type is Subject
IF WRK.HC_Class_Type = 'S';

CASE;

// IF WRK.HC Defect Required is Yes
IF WRK.HC_Defect_Required = 'Y';

CASE;

// IF DTL.Defect Code Usr EQ WRK.Blank USR
IF DTL.Defect_Code_Usr = WRK.Blank_USR;

// Send error message - 'Defect required for Class Code.'
ERROR(PRK0357);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Defect Code Usr NE WRK.Blank USR
IF DTL.Defect_Code_Usr <> WRK.Blank_USR;

// Send error message - 'Defect code &1 not allowed for Class Code.'
ERROR(PRK0356);
MSGPARM(DTL.Defect_Code_Usr);

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Class must be a Subject class type.'
ERROR(PRK0367);

ENDIF;

ENDIF;

//?USER: User defined action

//?Create New Subject tattoo and update original.
CASE;

// IF DTL.Head Total USR NE WRK.Zero USR
IF DTL.Head_Total_USR <> WRK.Zero_USR;

// WRK.TD Live Weight Org Usr = DTL.TD Live Wgt
WRK.TD_Live_Weight_Org_Usr = DTL.TD_Live_Wgt;

//?Subject To Tattoo #
// WRK.Tattoo Nbr Alpha Usr = CVTVAR(DTL.Tattoo Number New User)
WRK.Tattoo_Nbr_Alpha_Usr = CVTVAR(DTL.Tattoo_Number_New_User);

// Call program Crt Tattoo Action Comm XF.
CALL PROGRAM(Crt Tattoo Action Comm XF) ('PKV4XFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('ST');
PARAMETER(WRK.Tattoo_Nbr_Alpha_Usr);

// WRK.TD Live Wgt = PAR.TD Avg Live Wgt * DTL.Head Total USR *
WRK.TD_Live_Wgt = PAR.TD_Avg_Live_Wgt * DTL.Head_Total_USR;

//?Create Tattoo dtl with new tattoo, pen, head, live wgt
// Call program Crt Tattoo Dtl        XF.
CALL PROGRAM(Crt Tattoo Dtl        XF) ('PKZXXFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TD_Avg_Live_Wgt);
PARAMETER(PAR.TD_Gen_Bal_To_Kill);
PARAMETER(PAR.TD_Recs_Created_for_HO);
PARAMETER(PAR.TD_User_Status_2);
PARAMETER(PAR.TD_User_Status_3);
PARAMETER(PAR.TD_User_Date_1);
PARAMETER(PAR.TD_User_Date_2);
PARAMETER(PAR.TD_Drive_Date);
PARAMETER(PAR.Pen_Company_Number);
PARAMETER(DTL.Tattoo_Number_New_User);
PARAMETER(WRK.TD_Live_Wgt);
PARAMETER(DTL.Head_Total_USR);
PARAMETER(DTL.Pen_Usr);

//?Reduce hd rcvd by the subject head/Update org,
//?  AND Create new Subject Header
//?Try to use same routine for subject
EXECUTE FUNCTION(Rtv/Chg Hd Subject Rvd RT) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1141841;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(DTL.Head_Total_USR);
PARAMETER(DTL.HC_Class_Code);
PARAMETER(DTL.Defect_Code_Usr);
PARAMETER(DTL.Tattoo_Number_New_User);
{
 //?USER: Process Data record

 // WRK.TH Live Wgt Org Usr = DB1.TH Live Wgt
 WRK.TH_Live_Wgt_Org_Usr = DB1.TH_Live_Wgt;

 // WRK.TH Head Received = DB1.TH Head Received - PAR.Head Total USR
 WRK.TH_Head_Received = DB1.TH_Head_Received - PAR.Head_Total_USR;

 //?Subject live weight
 // WRK.Live Weight           USR = DB1.TH Avg Live Wgt * PAR.Head Total USR *
 WRK.Live_Weight_USR = DB1.TH_Avg_Live_Wgt * PAR.Head_Total_USR;

 //?Org net live weight
 // WRK.TH Live Wgt = WRK.TH Live Wgt Org Usr - WRK.Live Weight           USR
 WRK.TH_Live_Wgt = WRK.TH_Live_Wgt_Org_Usr - WRK.Live_Weight_USR;

 //?Load variables per the live uom for the recalc amts formula
 CASE;

 // IF DB1.TH Live Purchase UOM is Live Hundred Weight
 IF DB1.TH_Live_Purchase_UOM = 'LW';

 // WRK.Head/Wt Variable Old  USR = DB1.TH Live Wgt / CON.100 *
 WRK.Head_Wt_Variable_Old_USR = DB1.TH_Live_Wgt / 100;

 // WRK.Head/Wt Variable New  USR = WRK.TH Live Wgt / CON.100 *
 WRK.Head_Wt_Variable_New_USR = WRK.TH_Live_Wgt / 100;

 //?Load variables per the live uom for the recalc amts formula
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Head/Wt Variable Old  USR = DB1.TH Head Received
 WRK.Head_Wt_Variable_Old_USR = DB1.TH_Head_Received;

 // WRK.Head/Wt Variable New  USR = WRK.TH Head Received
 WRK.Head_Wt_Variable_New_USR = WRK.TH_Head_Received;

 ENDIF;

 //?Recalculate payment gross, ded, add, and net amounts
 CASE;

 // IF WRK.Head/Wt Variable Old  USR NE WRK.Zero USR
 IF WRK.Head_Wt_Variable_Old_USR <> WRK.Zero_USR;

 // WRK.*Synon (17,7) work field = DB1.TH Deduction Amt / WRK.Head/Wt Variable Old
 WRK.*Synon_177_work_field = DB1.TH_Deduction_Amt / WRK.Head_Wt_Variable_Old_USR;

 // WRK.TH Deduction Amt = WRK.*Synon (17,7) work field * WRK.Head/Wt Variable New
 WRK.TH_Deduction_Amt = WRK.*Synon_177_work_field * WRK.Head_Wt_Variable_New_USR 'H';

 // WRK.Hld Ovr Deduction amt USR = DB1.TH Deduction Amt - WRK.TH Deduction Amt
 WRK.Hld_Ovr_Deduction_amt_USR = DB1.TH_Deduction_Amt - WRK.TH_Deduction_Amt;

 // WRK.*Synon (17,7) work field = DB1.TH Total Net WO Adds / WRK.Head/Wt Variable O
 WRK.*Synon_177_work_field = DB1.TH_Total_Net_WO_Adds / WRK.Head_Wt_Variable_Old_USR;

 // WRK.TH Total Net WO Adds = WRK.*Synon (17,7) work field * WRK.Head/Wt Variable N
 WRK.TH_Total_Net_WO_Adds = WRK.*Synon_177_work_field * WRK.Head_Wt_Variable_New_USR 'H';

 // WRK.Hld Ovr Tt Net wo AddsUSR = DB1.TH Total Net WO Adds - WRK.TH Total Net WO A
 WRK.Hld_Ovr_Tt_Net_wo_AddsUSR = DB1.TH_Total_Net_WO_Adds - WRK.TH_Total_Net_WO_Adds;

 // WRK.*Synon (17,7) work field = DB1.TH Additions Amt / WRK.Head/Wt Variable Old
 WRK.*Synon_177_work_field = DB1.TH_Additions_Amt / WRK.Head_Wt_Variable_Old_USR;

 // WRK.TH Additions Amt = WRK.*Synon (17,7) work field * WRK.Head/Wt Variable New
 WRK.TH_Additions_Amt = WRK.*Synon_177_work_field * WRK.Head_Wt_Variable_New_USR 'H';

 // WRK.Hld Ovr Additions Amt USR = DB1.TH Additions Amt - WRK.TH Additions Amt
 WRK.Hld_Ovr_Additions_Amt_USR = DB1.TH_Additions_Amt - WRK.TH_Additions_Amt;

 // WRK.*Synon (17,7) work field = DB1.TH Payment Gross / WRK.Head/Wt Variable Old
 WRK.*Synon_177_work_field = DB1.TH_Payment_Gross / WRK.Head_Wt_Variable_Old_USR;

 // WRK.TH Payment Gross = WRK.*Synon (17,7) work field * WRK.Head/Wt Variable New
 WRK.TH_Payment_Gross = WRK.*Synon_177_work_field * WRK.Head_Wt_Variable_New_USR 'H';

 // WRK.Hld Ovr Paym Gross    USR = DB1.TH Payment Gross - WRK.TH Payment Gross
 WRK.Hld_Ovr_Paym_Gross_USR = DB1.TH_Payment_Gross - WRK.TH_Payment_Gross;

 // WRK.*Synon (17,7) work field = DB1.Th Payment Net Amt / WRK.Head/Wt Variable Old
 WRK.*Synon_177_work_field = DB1.Th_Payment_Net_Amt / WRK.Head_Wt_Variable_Old_USR;

 // WRK.Th Payment Net Amt = WRK.*Synon (17,7) work field * WRK.Head/Wt Variable New
 WRK.Th_Payment_Net_Amt = WRK.*Synon_177_work_field * WRK.Head_Wt_Variable_New_USR 'H';

 // WRK.Hld Ovr Paym Net Amt  USR = DB1.Th Payment Net Amt - WRK.Th Payment Net Amt
 WRK.Hld_Ovr_Paym_Net_Amt_USR = DB1.Th_Payment_Net_Amt - WRK.Th_Payment_Net_Amt;

 //?Freight Amount
 // WRK.*Synon (17,7) work field = DB1.TH Freight Amount / WRK.Head/Wt Variable Old
 WRK.*Synon_177_work_field = DB1.TH_Freight_Amount / WRK.Head_Wt_Variable_Old_USR;

 // WRK.TH Freight Amount = WRK.*Synon (17,7) work field * WRK.Head/Wt Variable New
 WRK.TH_Freight_Amount = WRK.*Synon_177_work_field * WRK.Head_Wt_Variable_New_USR 'H';

 // WRK.Hld Ovr Freight Amt   USR = DB1.TH Freight Amount - WRK.TH Freight Amount
 WRK.Hld_Ovr_Freight_Amt_USR = DB1.TH_Freight_Amount - WRK.TH_Freight_Amount;

 // WRK.*Synon (17,7) work field = DB1.TH Live Gross Amt / WRK.Head/Wt Variable Old
 WRK.*Synon_177_work_field = DB1.TH_Live_Gross_Amt / WRK.Head_Wt_Variable_Old_USR;

 // WRK.TH Live Gross Amt = WRK.*Synon (17,7) work field * WRK.Head/Wt Variable New
 WRK.TH_Live_Gross_Amt = WRK.*Synon_177_work_field * WRK.Head_Wt_Variable_New_USR 'H';

 // WRK.Hld Ovr Live Gross    USR = DB1.TH Live Gross Amt - WRK.TH Live Gross Amt
 WRK.Hld_Ovr_Live_Gross_USR = DB1.TH_Live_Gross_Amt - WRK.TH_Live_Gross_Amt;

 // WRK.*Synon (17,7) work field = DB1.TH LIve Net Amt / WRK.Head/Wt Variable Old  U
 WRK.*Synon_177_work_field = DB1.TH_LIve_Net_Amt / WRK.Head_Wt_Variable_Old_USR;

 // WRK.TH LIve Net Amt = WRK.*Synon (17,7) work field * WRK.Head/Wt Variable New  U
 WRK.TH_LIve_Net_Amt = WRK.*Synon_177_work_field * WRK.Head_Wt_Variable_New_USR 'H';

 // WRK.Hld Ovr Live Net Amt  USR = DB1.TH LIve Net Amt - WRK.TH LIve Net Amt
 WRK.Hld_Ovr_Live_Net_Amt_USR = DB1.TH_LIve_Net_Amt - WRK.TH_LIve_Net_Amt;

 //?Shipped Weight
 // WRK.*Synon (17,7) work field = DB1.TH Shipped Weight / WRK.Head/Wt Variable Old
 WRK.*Synon_177_work_field = DB1.TH_Shipped_Weight / WRK.Head_Wt_Variable_Old_USR;

 // WRK.TH Shipped Weight = WRK.*Synon (17,7) work field * WRK.Head/Wt Variable New
 WRK.TH_Shipped_Weight = WRK.*Synon_177_work_field * WRK.Head_Wt_Variable_New_USR 'H';

 // WRK.Hld Ovr Shipped Wght Usr = DB1.TH Shipped Weight - WRK.TH Shipped Weight
 WRK.Hld_Ovr_Shipped_Wght_Usr = DB1.TH_Shipped_Weight - WRK.TH_Shipped_Weight;

 //?Accrual Amount
 // WRK.*Synon (17,7) work field = DB1.TH Accrual Amount / WRK.Head/Wt Variable Old
 WRK.*Synon_177_work_field = DB1.TH_Accrual_Amount / WRK.Head_Wt_Variable_Old_USR;

 // WRK.TH Accrual Amount = WRK.*Synon (17,7) work field * WRK.Head/Wt Variable New
 WRK.TH_Accrual_Amount = WRK.*Synon_177_work_field * WRK.Head_Wt_Variable_New_USR 'H';

 // WRK.Hld Ovr Accrual Amt Usr = DB1.TH Accrual Amount - WRK.TH Accrual Amount
 WRK.Hld_Ovr_Accrual_Amt_Usr = DB1.TH_Accrual_Amount - WRK.TH_Accrual_Amount;

 ENDIF;

 //?** OLD:  Chg Tattoo Header   CH * Tattoo Header ** (PKP)
 // WRK.Th Accruals Amt Org Usr = WRK.TH Accrual Amount
 WRK.Th_Accruals_Amt_Org_Usr = WRK.TH_Accrual_Amount;

 // WRK.Freight Cur Amount Usr = WRK.TH Freight Amount
 WRK.Freight_Cur_Amount_Usr = WRK.TH_Freight_Amount;

 EXECUTE FUNCTION(Chg Hd Subject Rvd    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1190711;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.TH_Live_Gross_Amt);
 PARAMETER(WRK.TH_LIve_Net_Amt);
 PARAMETER(WRK.TH_Head_Received);
 PARAMETER(WRK.TH_Live_Wgt);
 PARAMETER(WRK.TH_Deduction_Amt);
 PARAMETER(WRK.TH_Total_Net_WO_Adds);
 PARAMETER(WRK.TH_Additions_Amt);
 PARAMETER(WRK.TH_Payment_Gross);
 PARAMETER(WRK.Th_Payment_Net_Amt);
 PARAMETER(WRK.TH_Freight_Amount);
 PARAMETER(WRK.TH_Accrual_Amount);
 PARAMETER(WRK.TH_Shipped_Weight);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 //?Change payment to sl if not already paid
 CASE;

 // IF DB1.TH Payment Sts is Paid
 IF DB1.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

 // WRK.TH Payment Sts = DB1.TH Payment Sts
 WRK.TH_Payment_Sts = DB1.TH_Payment_Sts;

 //?Change payment to sl if not already paid
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.TH Source Type is External
 IF DB1.TH_Source_Type = 'E';

 // WRK.TH Payment Sts = CND.Select Live
 WRK.TH_Payment_Sts = 'SL';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.TH Payment Sts = CND.Sl Int Live
 WRK.TH_Payment_Sts = 'IL';

 ENDIF;

 ENDIF;

 // WRK.Freight Nxt Amount Usr = WRK.Hld Ovr Freight Amt   USR
 WRK.Freight_Nxt_Amount_Usr = WRK.Hld_Ovr_Freight_Amt_USR;

 EXECUTE FUNCTION(Crt Tto Hdr Subj hogs CR) TYPE(CRTOBJ) FILE(PKA1CPP)           AB1118878;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(PAR.Tattoo_Number_New_User);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TH_Purchase_Date);
 PARAMETER(DB1.TH_Group_Reference);
 PARAMETER(DB1.TH_Live_Purchase_UOM);
 PARAMETER(DB1.TH_Live_Purchase_Price);
 PARAMETER(WRK.Hld_Ovr_Live_Gross_USR);
 PARAMETER(WRK.Hld_Ovr_Live_Net_Amt_USR);
 PARAMETER(DB1.TH_Resale_UOM);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Head_Total_USR);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Live_Weight_USR);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.TH_Avg_Live_Wgt);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.TH_Adj_Actual_Yield);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Hld_Ovr_Deduction_amt_USR);
 PARAMETER(WRK.Hld_Ovr_Tt_Net_wo_AddsUSR);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Hld_Ovr_Additions_Amt_USR);
 PARAMETER(WRK.Hld_Ovr_Paym_Gross_USR);
 PARAMETER(WRK.Hld_Ovr_Paym_Net_Amt_USR);
 PARAMETER(DB1.TH_AP_Voucher_Document#);
 PARAMETER(WRK.Hld_Ovr_Freight_Amt_USR);
 PARAMETER(WRK.Hld_Ovr_Accrual_Amt_Usr);
 PARAMETER(*ZERO);
 PARAMETER(DB1.TH_Calc_Net_Sts);
 PARAMETER(WRK.TH_Payment_Sts);
 PARAMETER(*BLANK);
 PARAMETER('N');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(DB1.TH_Commission_A_P_Voucher);
 PARAMETER(DB1.TH_Voucher_Payment_Date);
 PARAMETER('N');
 PARAMETER('N');
 PARAMETER(DB1.TH_Sex);
 PARAMETER(DB1.TH_Held_Ovr_Completed_Dte);
 PARAMETER(DB1.TH_Commission_Paid_Date);
 PARAMETER(DB1.TH_Actual_Check_Date);
 PARAMETER(WRK.Hld_Ovr_Shipped_Wght_Usr);
 PARAMETER(DB1.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.TH_CM_Bse_Mkt_Live_CWT);
 PARAMETER(DB1.TH_CM_Bse_Mkt_Carc_CWT);
 PARAMETER(DB1.TH_CM_Srt_Dsc_Live_CWT);
 PARAMETER(DB1.TH_CM_Srt_Dsc_Carc_CWT);
 PARAMETER(DB1.TH_CM_Yld_G_L_Live_CWT);
 PARAMETER(DB1.TH_CM_Yld_G_L_Carc_CWT);
 PARAMETER(DB1.TH_CM_Crc_Val_Live_CWT);
 PARAMETER(DB1.TH_CM_Crc_Val_Carc_CWT);
 PARAMETER(DB1.TH_CM_Lean_Prem_Live_CWT);
 PARAMETER(DB1.TH_CM_Lean_Prem_Carc_CWT);
 PARAMETER(DB1.TH_CM_Gross_Live_CWT);
 PARAMETER(DB1.TH_CM_Gross_Carc_CWT);
 PARAMETER(DB1.TH_Source_Type);
 PARAMETER(DB1.TH_Scale_Ticket_Sts);
 PARAMETER(DB1.TH_Payment_Type);
 PARAMETER(DB1.TH_HPS_Movement_Ref_#);
 PARAMETER(DB1.TH_Source_Code);
 PARAMETER(DB1.TH_Hog_Class_Type);
 PARAMETER(DB1.TH_Posted_to_HPS_Flag);
 PARAMETER(DB1.TH_Schedule_Kill_Shift);
 PARAMETER(DB1.TH_Shift_Held_Over);
 PARAMETER(DB1.TH_State);
 PARAMETER(DB1.TH_Unused_Code);
 PARAMETER(DB1.TH_Unused_Sts_2_Pos);
 PARAMETER(DB1.TH_Commission_Status);
 PARAMETER(DB1.TH_Paid_2_Week_Avg_Y_N);
 PARAMETER(DB1.TH_Unused_Sts_1_Pos_3);
 PARAMETER(DB1.TH_DOA_Weight);
 PARAMETER(DB1.TH_Avg_Lean_EXC_ADD);
 PARAMETER(DB1.TH_HPS_Farm_Site);
 PARAMETER(DB1.TH_Shift_Held_Over_Head);
 PARAMETER(DB1.TH_Sorting_Amount);
 PARAMETER(DB1.TH_Head_Identified);
 PARAMETER(DB1.TH_Percent_Identified);
 PARAMETER(DB1.TH_Percent_Accepted);
 PARAMETER(DB1.TH_Head_Adjusted_LN);
 PARAMETER(DB1.TH_PHA_Head_Adds);
 PARAMETER(DB1.TH_PHA_Add_Type);
 PARAMETER(DB1.TH_PHA_Average_Type);
 PARAMETER(DB1.TH_PHA_Add_Reason);
 PARAMETER(DB1.TH_PHA_Yield_Percent);
 PARAMETER(DB1.TH_PHA_Lean_Prm_Crc_CWT);
 PARAMETER(DB1.TH_VC_Gross_Value_HD);
 PARAMETER(DB1.TH_Excluded_Gross_Value);
 PARAMETER(DB1.TH_Avg_Lean);
 PARAMETER(DB1.TH_Broken_Back_Hd_Count);
 PARAMETER(DB1.TH_Hot_Scl_Upload_Time);
 PARAMETER(DB1.TH_Unused_Nbr_4);
 PARAMETER(DB1.TH_Excluded_Carc_Val);
 PARAMETER(DB1.TH_Excluded_Premium);
 PARAMETER(DB1.TH_Unused_Nbr_7);
 PARAMETER(DB1.TH_Unused_Nbr_8);
 PARAMETER(DB1.TH_Unused_Nbr_9);
 PARAMETER(DB1.TH_Unused_Nbr_10);
 PARAMETER(DB1.TH_Break_Even_Price_CWT);
 PARAMETER(DB1.TH_Meat_Value_Factor_Amt);
 PARAMETER(DB1.TH_Yld_Parm_Adj_Yield);
 PARAMETER(DB1.TH_PHA_Sort_Disc_Fctr);
 PARAMETER(DB1.TH_Avg_Loin_Eye_2_dec);
 PARAMETER(DB1.TH_Avg_Backfat_2_Dec);
 PARAMETER(DB1.TH_HITCH_Old_Pay_Net_Amt);
 PARAMETER(DB1.TH_MPR_Sort_Loss);
 PARAMETER(DB1.TH_Unused_Nbr_19);
 PARAMETER(DB1.TH_Unused_Nbr_20);
 PARAMETER(DB1.TH_Cold_Scl_Upload_Date);
 PARAMETER(DB1.TH_Cold_Scl_Upload_Time);
 PARAMETER(DB1.TH_Head_LFT);
 PARAMETER(DB1.TH_Head_EUT_KOA);
 PARAMETER(DB1.TH_Unused_Date_5);
 PARAMETER(DB1.TH_Unused_Sts_1);
 PARAMETER(DB1.TH_Unused_Sts_2);
 PARAMETER(DB1.TH_Unused_Sts_3);
 PARAMETER(DB1.TH_Unused_Sts_4);
 PARAMETER(DB1.TH_Unused_Sts_5);
 PARAMETER(DB1.TH_Unused_Sts_6);
 PARAMETER(DB1.TH_Unused_Sts_7);
 PARAMETER(DB1.TH_Unused_Sts_8);
 PARAMETER(PAR.DF_Defect_Code);
 PARAMETER(DB1.THP_Process_Code);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.HB_Buyer_Code);
 PARAMETER(DB1.GN_Genetic_Code);
 PARAMETER(PAR.HC_Class_Code);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(JOB.*JOB);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(HPE056 Payment Type) TYPE(EXCINTFUN)                           AB1189849;
  {
   //?Execute internal function

   //?1/10/96  HPE056   Allow payment type to be update based on
   //?                  what the payment status is at the time this
   //?                  tattoo is being updated
  }

  EXECUTE FUNCTION(HPE063 Frt Exp/Accruals) TYPE(EXCINTFUN)                       AB1192166;
  {
   //?Execute internal function

   //?2/26/96  HPE063   Allow the expense for freight to be paid
   //?                  by either Seaboard(us) or the producer
   //?                  Allow the system to process accruals thru
   //?                  the General Ledger.
  }

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

  EXECUTE FUNCTION(Rtv Hog Class Type    RT) TYPE(RTVOBJ) FILE(PKA8REP)           AB1144394;
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(WRK.HC_Description);
  PARAMETER(DB1.TH_Hog_Class_Type);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  EXECUTE FUNCTION(Chg/Crt Tatto/Spc Flds IF) TYPE(EXCINTFUN)                     AB1189848;
  PARAMETER(DB1.TH_Payment_Sts);
  PARAMETER(DB1.TH_Payment_Type);
  {
   //?Execute internal function

   EXECUTE FUNCTION(HPE056 Payment Type) TYPE(EXCINTFUN)                           AB1189849;
   {
    //?Execute internal function

    //?1/10/96  HPE056   Allow payment type to be update based on
    //?                  what the payment status is at the time this
    //?                  tattoo is being updated
   }

   //?Function Description:  If there are any fields that need to be
   //?Changed/Created during the Change functions or Create function
   //?Presently: Payment Type
   //?Add this routine to all of the change objects and create object
   //?that update the Payment Type
   CASE;

   // IF PAR.TH Payment Sts is Live anything
   IF PAR.TH_Payment_Sts = 'ML'/'PL'/'NL'/'SL'/'IL';

   // PAR.TH Payment Type = CND.Live
   PAR.TH_Payment_Type = 'L';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.TH Payment Type = CND.Carcass Merit
   PAR.TH_Payment_Type = 'C';

   ENDIF;

  }

 }

 //?Recalc TH D/As and calc new Subject TH D/As
 CASE;

 // IF DB1.TH Payment Sts is Paid Anything
 IF DB1.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

 // Call program Zzz D/A for Subj AfPd XF.
 CALL PROGRAM(Zzz D/A for Subj AfPd XF) ('PKFQXFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TH_Purchase_Date);
 PARAMETER(WRK.TH_Deduction_Amt);
 PARAMETER(WRK.TH_Additions_Amt);
 PARAMETER(DB1.TH_Payment_Sts);
 PARAMETER(PAR.Tattoo_Number_New_User);
 PARAMETER(WRK.Freight_Cur_Amount_Usr);
 PARAMETER(WRK.Freight_Nxt_Amount_Usr);
 PARAMETER(WRK.Th_Accruals_Amt_Org_Usr);

 ENDIF;

}


//?Recount Subject Pen Head and Chg the Pen
EXECUTE FUNCTION(Rtv Dtl hd/Chg Pen    RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1110385;
PARAMETER(DTL.Pen_Company_Number);
PARAMETER(DTL.Pen_Usr);
{
 //?USER: Initialize routine

 EXECUTE FUNCTION(Set Pen Totals to Zeros) TYPE(RTVOBJ) FILE(PKA3REP)            AB1110376;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.Pen_Number);
 PARAMETER(*ZERO);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Pen               CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1102758;
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(WRK.Blank_USR);
  PARAMETER(DB1.Pen_Maximun_Capacity);
  PARAMETER(*ZERO);
  PARAMETER(DB1.Pen_Current_Drive_Card_No);
  PARAMETER(DB1.Pen_Sts);
  PARAMETER(DB1.Pen_Drive_Sequence);
  PARAMETER(DB1.Pen_Type);
  PARAMETER(DB1.Pen_Adjustment);
  PARAMETER(WRK.Blank_USR);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 //?USER: Processing if Data record not found

 // WRK.Pen Description = CON.*BLANK
 WRK.Pen_Description = *BLANK;

 // WRK.GN Genetic Code = CON.*BLANK
 WRK.GN_Genetic_Code = *BLANK;

 EXECUTE FUNCTION(Chg Pen Genetics      CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1119678;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.Pen_Number);
 PARAMETER(WRK.Pen_Description);
 PARAMETER(WRK.GN_Genetic_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv/Chg Pen Totals    RT) TYPE(RTVOBJ) FILE(PKA3REP)           AB1110372;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.Pen_Number);
 PARAMETER(DB1.TD_Pen_Head);
 PARAMETER(DB1.TD_Yard_Dead);
 {
  //?USER: Process Data record

  // WRK.Pen Current Head = PAR.TD Pen Head + DB1.Pen Current Head
  WRK.Pen_Current_Head = PAR.TD_Pen_Head + DB1.Pen_Current_Head;

  // WRK.Pen Current Head = WRK.Pen Current Head - PAR.TD Yard Dead
  WRK.Pen_Current_Head = WRK.Pen_Current_Head - PAR.TD_Yard_Dead;

  EXECUTE FUNCTION(Chg Pen               CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1102758;
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(DB1.Pen_Description);
  PARAMETER(DB1.Pen_Maximun_Capacity);
  PARAMETER(WRK.Pen_Current_Head);
  PARAMETER(DB1.Pen_Current_Drive_Card_No);
  PARAMETER(DB1.Pen_Sts);
  PARAMETER(DB1.Pen_Drive_Sequence);
  PARAMETER(DB1.Pen_Type);
  PARAMETER(DB1.Pen_Adjustment);
  PARAMETER(DB1.GN_Genetic_Code);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 //?USER: Exit processing

 // WRK.Pen Description = CON.*BLANK
 WRK.Pen_Description = *BLANK;

 // WRK.GN Genetic Code = CON.*BLANK
 WRK.GN_Genetic_Code = *BLANK;

 EXECUTE FUNCTION(Rtv Pen GENETICS      RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1107816;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.Pen_Number);
 PARAMETER(WRK.Pen_Description);
 PARAMETER(WRK.GN_Genetic_Code);
 {
  //?USER: Processing if Data record not found

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Pen_Description = *BLANK;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.GN_Genetic_Code = *BLANK;

  //?USER: Process Data record

  CASE;

  // IF DB1.TDP Process Code is Drive Card Printed
  IF DB1.TDP_Process_Code = 'D';

  // OR DB1.TDP Process Code is Open
  OR DB1.TDP_Process_Code = 'O';

  EXECUTE FUNCTION(Rtv Tattoo GENETICS) TYPE(RTVOBJ) FILE(PKA1CPP)                AB1107783;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(WRK.Genetic_Code_USR);
  PARAMETER(WRK.Pen_Desc_USR);
  {
   //?USER: Processing if Data record not found

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.GN_Genetic_Code = *BLANK;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Pen_Description = *BLANK;

   //?USER: Process Data record

   // PAR.GN Genetic Code = DB1.GN Genetic Code
   PAR.GN_Genetic_Code = DB1.GN_Genetic_Code;

   EXECUTE FUNCTION(Rtv Genetic Record    RT) TYPE(RTVOBJ) FILE(PKAIREP)           AB1107738;
   PARAMETER(DB1.GN_Genetic_Code);
   PARAMETER(PAR.Pen_Description);
   {
    //?USER: Processing if Data record not found

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.GN_Description = *BLANK;

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

  }

  CASE;

  // IF PAR.GN Genetic Code is BLANKS
  IF PAR.GN_Genetic_Code = *BLANK;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.GN_Genetic_Code = WRK.Genetic_Code_USR;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Pen_Description = WRK.Pen_Desc_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF WRK.Genetic Code USR NE PAR.GN Genetic Code
  IF WRK.Genetic_Code_USR <> PAR.GN_Genetic_Code;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Pen_Description = 'MIXED';

  ENDIF;

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(Chg Pen Genetics      CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1119678;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.Pen_Number);
 PARAMETER(WRK.Pen_Description);
 PARAMETER(WRK.GN_Genetic_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


//?Reduce pen head & recal live wgt in original Ttt Dtl
// DTL.TD Pen Head = DTL.TD Pen Head - DTL.Head Total USR
DTL.TD_Pen_Head = DTL.TD_Pen_Head - DTL.Head_Total_USR;

// DTL.TD Live Wgt = WRK.TD Live Weight Org Usr - WRK.TD Live Wgt
DTL.TD_Live_Wgt = WRK.TD_Live_Weight_Org_Usr - WRK.TD_Live_Wgt;

EXECUTE FUNCTION(Rtv/Chg TttDtl hd,wgt RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1169865;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.TD_Sequence_Number);
PARAMETER(DTL.TD_Live_Wgt);
PARAMETER(DTL.TD_Pen_Head);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Tattoo Detail     CH) TYPE(CHGOBJ) FILE(PKA2CPP)           AB1101751;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TD_Sequence_Number);
 PARAMETER(PAR.TD_Live_Wgt);
 PARAMETER(PAR.TD_Pen_Head);
 PARAMETER(DB1.TD_Yard_Dead);
 PARAMETER(DB1.TD_Held_Over);
 PARAMETER(DB1.TD_Held_Over_Status);
 PARAMETER(DB1.TD_Drive_Time);
 PARAMETER(DB1.TD_Drive_Hour);
 PARAMETER(DB1.TD_Drive_Card_Number);
 PARAMETER(DB1.TD_Avg_Live_Wgt);
 PARAMETER(DB1.TD_Gen_Bal_To_Kill);
 PARAMETER(DB1.TD_Recs_Created_for_HO);
 PARAMETER(DB1.TD_User_Status_2);
 PARAMETER(DB1.TD_User_Status_3);
 PARAMETER(DB1.TD_User_Date_1);
 PARAMETER(DB1.TD_User_Date_2);
 PARAMETER(DB1.TD_Drive_Date);
 PARAMETER(DB1.Pen_Company_Number);
 PARAMETER(DB1.Pen_Number);
 PARAMETER(DB1.TDP_Process_Code);
 PARAMETER(DB1.Held_Over_Pen_Company_Num);
 PARAMETER(DB1.Held_Over_Pen_Number);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


//?Recount Original Pen Head and Chg the Pen
EXECUTE FUNCTION(Rtv Dtl hd/Chg Pen    RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1110385;
PARAMETER(PAR.Pen_Company_Number);
PARAMETER(PAR.Pen_Number);
{
 //?USER: Initialize routine

 EXECUTE FUNCTION(Set Pen Totals to Zeros) TYPE(RTVOBJ) FILE(PKA3REP)            AB1110376;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.Pen_Number);
 PARAMETER(*ZERO);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Pen               CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1102758;
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(WRK.Blank_USR);
  PARAMETER(DB1.Pen_Maximun_Capacity);
  PARAMETER(*ZERO);
  PARAMETER(DB1.Pen_Current_Drive_Card_No);
  PARAMETER(DB1.Pen_Sts);
  PARAMETER(DB1.Pen_Drive_Sequence);
  PARAMETER(DB1.Pen_Type);
  PARAMETER(DB1.Pen_Adjustment);
  PARAMETER(WRK.Blank_USR);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 //?USER: Processing if Data record not found

 // WRK.Pen Description = CON.*BLANK
 WRK.Pen_Description = *BLANK;

 // WRK.GN Genetic Code = CON.*BLANK
 WRK.GN_Genetic_Code = *BLANK;

 EXECUTE FUNCTION(Chg Pen Genetics      CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1119678;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.Pen_Number);
 PARAMETER(WRK.Pen_Description);
 PARAMETER(WRK.GN_Genetic_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv/Chg Pen Totals    RT) TYPE(RTVOBJ) FILE(PKA3REP)           AB1110372;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.Pen_Number);
 PARAMETER(DB1.TD_Pen_Head);
 PARAMETER(DB1.TD_Yard_Dead);
 {
  //?USER: Process Data record

  // WRK.Pen Current Head = PAR.TD Pen Head + DB1.Pen Current Head
  WRK.Pen_Current_Head = PAR.TD_Pen_Head + DB1.Pen_Current_Head;

  // WRK.Pen Current Head = WRK.Pen Current Head - PAR.TD Yard Dead
  WRK.Pen_Current_Head = WRK.Pen_Current_Head - PAR.TD_Yard_Dead;

  EXECUTE FUNCTION(Chg Pen               CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1102758;
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(DB1.Pen_Description);
  PARAMETER(DB1.Pen_Maximun_Capacity);
  PARAMETER(WRK.Pen_Current_Head);
  PARAMETER(DB1.Pen_Current_Drive_Card_No);
  PARAMETER(DB1.Pen_Sts);
  PARAMETER(DB1.Pen_Drive_Sequence);
  PARAMETER(DB1.Pen_Type);
  PARAMETER(DB1.Pen_Adjustment);
  PARAMETER(DB1.GN_Genetic_Code);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 //?USER: Exit processing

 // WRK.Pen Description = CON.*BLANK
 WRK.Pen_Description = *BLANK;

 // WRK.GN Genetic Code = CON.*BLANK
 WRK.GN_Genetic_Code = *BLANK;

 EXECUTE FUNCTION(Rtv Pen GENETICS      RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1107816;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.Pen_Number);
 PARAMETER(WRK.Pen_Description);
 PARAMETER(WRK.GN_Genetic_Code);
 {
  //?USER: Processing if Data record not found

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Pen_Description = *BLANK;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.GN_Genetic_Code = *BLANK;

  //?USER: Process Data record

  CASE;

  // IF DB1.TDP Process Code is Drive Card Printed
  IF DB1.TDP_Process_Code = 'D';

  // OR DB1.TDP Process Code is Open
  OR DB1.TDP_Process_Code = 'O';

  EXECUTE FUNCTION(Rtv Tattoo GENETICS) TYPE(RTVOBJ) FILE(PKA1CPP)                AB1107783;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(WRK.Genetic_Code_USR);
  PARAMETER(WRK.Pen_Desc_USR);
  {
   //?USER: Processing if Data record not found

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.GN_Genetic_Code = *BLANK;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Pen_Description = *BLANK;

   //?USER: Process Data record

   // PAR.GN Genetic Code = DB1.GN Genetic Code
   PAR.GN_Genetic_Code = DB1.GN_Genetic_Code;

   EXECUTE FUNCTION(Rtv Genetic Record    RT) TYPE(RTVOBJ) FILE(PKAIREP)           AB1107738;
   PARAMETER(DB1.GN_Genetic_Code);
   PARAMETER(PAR.Pen_Description);
   {
    //?USER: Processing if Data record not found

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.GN_Description = *BLANK;

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

  }

  CASE;

  // IF PAR.GN Genetic Code is BLANKS
  IF PAR.GN_Genetic_Code = *BLANK;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.GN_Genetic_Code = WRK.Genetic_Code_USR;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Pen_Description = WRK.Pen_Desc_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF WRK.Genetic Code USR NE PAR.GN Genetic Code
  IF WRK.Genetic_Code_USR <> PAR.GN_Genetic_Code;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Pen_Description = 'MIXED';

  ENDIF;

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(Chg Pen Genetics      CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1119678;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.Pen_Number);
 PARAMETER(WRK.Pen_Description);
 PARAMETER(WRK.GN_Genetic_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


//?Subject from Tattoo #
// WRK.Tattoo Nbr Alpha Usr = CVTVAR(PAR.TH Tattoo Number)
WRK.Tattoo_Nbr_Alpha_Usr = CVTVAR(PAR.TH_Tattoo_Number);

// Call program Crt Tattoo Action Comm XF.
CALL PROGRAM(Crt Tattoo Action Comm XF) ('PKV4XFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(DTL.Tattoo_Number_New_User);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('SF');
PARAMETER(WRK.Tattoo_Nbr_Alpha_Usr);

//?Update Last Tattoo number in OMS
// WRK.System Value Numeric  USR = DTL.Tattoo Number New User
WRK.System_Value_Numeric_USR = DTL.Tattoo_Number_New_User;

// Call program RTV/Chg Co Val Num    XF.
CALL PROGRAM(RTV/Chg Co Val Num    XF) ('PDHFXFR');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(WRK.Company_Value_Code_USR);
PARAMETER(WRK.System_Value_Numeric_USR);

ENDIF;

