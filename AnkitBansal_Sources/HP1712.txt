      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      Hog Production System
      * PROGRAM:     HP1712
      * TITLE:       Create an Inactive Budget for a Farm
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     02/25/04
      *
      *
      * FUNCTION: Uses an edit record format to create an Inactive budget for a Farm.
      *
      *           This program is called from HP4702-Work with Farm Budgets.
      *
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 10/13/04  LeAnne Fedor
      *           Recompile only. Cost Per Unit Amount was changed from
      *           9,2 to 9,4.
      *
      * 10/03/05  LeAnne Fedor
      *           Removed all/any logic that limited processing to Non-Zero
      *           Budgeted Quantities. The users now want to include items
      *           with budgeted quantities of zero.
      *
      * 10/15/13  LeAnne Ramsey (E2831)
      *           Recompile only. Added field 'MTech Reference'.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhpd1712   cf   e             workstn infds(iofeed)
      *
      *
     Fhsp018    if   e           k disk
      *    Farm sites
      *
      *
     Fhsp183    if   e           k disk
      *    Creation schedule
      *
      *
     Fhsp184    if   e           k disk
      *    Budget availability
      *
      *
     Fhsp185    if   e           k disk
      *    Budget template header
      *
      *
     Fhsl186c   if   e           k disk
      *    Budget template detail
      *
      *
     Fhsl187a   if   e           k disk
      *    Farm/budget templates
      *
      *
     Fhsl188g   if   e           k disk    rename(jhrec:jhrecg)
      *    Farm budget header
      *
      *
     Fhsp188    o    e           k disk
      *    Farm budget header
      *
      *
     Fhsp189    o    e           k disk
      *    Farm budget detail
      *
      /eject
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D create          c                   'CREATE'
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
     D update          c                   'UPDATE'
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D rtncd           s              2
     D maxmsg          s              2  0  inz(20)
      *
      *
      * Workfields
      *
     D wkcscd          s                   like(thcscd)
     D wkfcymd         s                   like(jhbfdt)
     D wktcymd         s                   like(jhbtdt)
      *
      *
      * Workfields for date manipulation
      *
     D wkcymdiso       s               d   datfmt(*iso)
     D wksysdt         s              8  0
      *
      *
      * Parm fields
      *
     D xxname          s              9
     D xxabbrev        s              4
      *
     D xxalphfbsn      s              7
      *
     D xxalphfscd      s              5
     D xxaist          s              1
     D xxfsnm          s                   like(d1fsnm)
     D xxfscd          s                   like(d1fscd)
      *
     D xxbtcd          s                   like(d1btcd)
     D xxbtds          s                   like(d1btds)
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *---------------------------------------------------------------------------------
      * Definition for external data area 'DAFBSN' for assigning the next budget number
      *---------------------------------------------------------------------------------
      *
     Dnextfbsn         s              7  0 dtaara(dafbsn)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      *
      * Write screen 1 to CRT
      *
     C                   write     hp1712k1
     C                   write     hp1712ec
     C                   exfmt     hp1712r1
      *
      * Clear messages
      *
     C                   exsr      $clmsg
      *
      *
      * Get user's input and set routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      rtncd = '03'
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4=prompt
     C                   exsr      $f4s1
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   eval      routne = set1
      *
     C                   when      *in09 = *on                                  F9-create
     C                   exsr      $edit1
     C                   if        error = 0
     C                   exsr      $create
     C                   endif
     C                   other
      *
      * User has pressed enter
      *
     C                   eval      routne = edit1
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Edit input fields for screen 1
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * Validate:
      *  1) Farm site
      *  2) Budget template
      *  3) Farm/template combination
      *
     C                   exsr      $fscd
     C                   exsr      $btcd
      *
     C                   if        *in35 = *off and *in36 = *off
     C                   exsr      $combo
     C                   endif
      *
      * Validate:
      *  1) From date
      *  2) To date
     C                   exsr      $fmdy
     C                   exsr      $tmdy
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Validate Farm Site
      *----------------------------------------------------------------
      *
      * Validations:
      *  1) required
      *  2) must exist in Farm Site master file
      *  3) must be active
      *
     C     $fscd         begsr
      *
     C                   move      *blank        d1fsnm
      *
     C                   select
     C                   when      d1fscd = 0
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
     C                   other
      *
     C     d1fscd        chain     hsp018                             92
     C                   if        *in92 = *on                                  If invalid
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS00131'
     C                   clear                   mgw
     C                   movel     d1fscd        xxalphfscd
     C                   movea     xxalphfscd    mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   else
      *
     C                   move      fsfsnm        d1fsnm
      *
      *
      * Farm site must be 'Active'
      *
     C                   if        fsaist <> 'A'                                If not active
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS04760'     mgid(e)
     C                   clear                   mgw
     C                   move      d1fscd        xxalphfscd
     C                   movea     xxalphfscd    mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If not active
      *
     C                   endif                                                  If invalid
     C                   endsl                                                  If invalid
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Validate Budget Template Code
      *----------------------------------------------------------------
      *
      * Validations:
      *  1) required
      *  2) must exist in Budget Template header file
      *  3) must be active
      *  4) must have Budget Items
      *  5) must have at least 1 item that has a non-zero quantity
      *
      *
     C     $btcd         begsr
      *
     C                   move      *blank        d1btds
     C                   move      *blank        d1csds
     C                   move      *blank        d1bads
     C                   z-add     0             d1btwk
     C                   move      *blank        wkcscd
      *
      * Eliminate leading spaces
      *
     C                   eval      d1btcd = %triml(d1btcd)
      *
     C                   select
     C                   when      d1btcd = *blank
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
     C                   other
      *
      * Template must exist in Budget Template header file
      *
     C     d1btcd        chain     hsp185                             92
     C                   if        *in92 = *on                                  If invalid
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04718'
     C                   clear                   mgw
     C                   movea     d1btcd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   else
      *
     C                   move      thcscd        wkcscd
     C                   move      thbtds        d1btds
     C                   z-add     thbtwk        d1btwk
     C                   exsr      $desc
      *
      * Template must be Active
      *
     C                   if        thaist = 'I'                                 If inactive
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04755'
     C                   clear                   mgw
     C                   movea     d1btcd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If inactive
      *
      * Template must have Budget Items
      *
     C     d1btcd        chain     hsl186c                            92
     C                   if        *in92 = *on                                  If no items
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04756'
     C                   clear                   mgw
     C                   movea     d1btcd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If no items
      *
     C                   endif                                                  If invalid
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Retrieve various descriptions to display
      *----------------------------------------------------------------
      *
     C     $desc         begsr
      *
      * Budget Availablity
      *
     C
     C     thbacd        chain     hsp184                             92
     C                   if        *in92 = *off
     C                   move      babads        d1bads
     C                   else
     C                   eval      d1bads = 'Unknown'
     C                   endif
      *
      * Creation Schedule
      *
     C     thcscd        chain     hsp183                             92
     C                   if        *in92 = *off
     C                   move      cscsds        d1csds
     C                   else
     C                   eval      d1csds = 'Unknown'
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      *  Combination edits for farm/template
      *---------------------------------------------------------------
      *
     C     $combo        begsr
      *
      * BGF farms are not allowed for Rotational templates
      *
     C                   if        thcscd = 'R' and                             If rotational
     C                             fsppcd = 'BGF  '
     C                   seton                                        3536
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS04761'     mgid(e)
     C                   endif
     C                   endif                                                  If rotational
      *
      * Farm must be linked to Template
      *
     C     key01         chain     hsl187a                            92
     C                   if        *in92 = *on                                  If not linked
     C                   seton                                        3536
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04758'
     C                   clear                   mgw
     C                   movel     d1fscd        xxalphfscd
     C                   movea     xxalphfscd    mgw(1)
     C                   movea     d1btcd        mgw(6)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If not linked
      *
      * You cannot already have an Inactive budget for this Farm/Template
      *
     C     key01         chain     hsl188g                            92
     C                   if        *in92 = *off                                 If already
     C                   seton                                        3536
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04759'
     C                   clear                   mgw
     C                   movel     jhfbsn        xxalphfbsn
     C                   movea     xxalphfbsn    mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If already
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Validate from date
      *----------------------------------------------------------------
      *
      * Validations:
      *  1) required
      *  2) cannot be negative
      *  3) must be a valid date
      *  4) must be a SUNDAY
      *
      *
     C     $fmdy         begsr
      *
     C                   select
     C                   when      d1fmdy = 0
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
      *
     C                   when      d1fmdy < 0
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 d1fmdy                 92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Flip the date from MMDDYY to CCYYMMDD.
      *
     C     *mdy          move      d1fmdy        wkcymdiso
     C                   move      wkcymdiso     wkfcymd
      *
      * Retrieve the 'day' of the week associated with the date. 'From' Date
      * must always be a SUNDAY.
      *
     C                   call      'HP8005'
     C                   parm                    wkfcymd
     C                   parm      *blank        xxname
     C                   parm      *blank        xxabbrev
      *
     C                   if        xxabbrev <> 'Sun'
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09074'
     C                   endif
     C                   endif
      *
     C                   endif                                                  If bad date
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Validate to date
      *----------------------------------------------------------------
      *
      *  1) required (except for Rotational)
      *  2) cannot be negative
      *  3) must be a valid date
      *  4) must be later than from date
      *  5) must be a future date
      *  6) must be a Saturday
      *
      *
     C     $tmdy         begsr
      *
     C                   z-add     0             wktcymd
      *
     C                   select
     C                   when      d1tmdy = 0 and wkcscd = 'R'
      *
     C                   when      d1tmdy = 0
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
      *
     C                   when      d1tmdy < 0
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 d1tmdy                 92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Flip the date from MMDDYY to CCYYMMDD.
      *
     C     *mdy          move      d1tmdy        wkcymdiso
     C                   move      wkcymdiso     wktcymd
     C                   endif                                                  If bad date
      *
      * Date must be a future date.
      *
     C                   if        wktcymd <> 0 and
     C                             wktcymd <= wksysdt
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04762'
     C                   endif
     C                   endif
      *
      *
      * Retrieve the 'day' of the week associated with the date. 'TO' Date
      * must always be a SATURDAY.
      *
     C                   call      'HP8005'
     C                   parm                    wktcymd
     C                   parm      *blank        xxname
     C                   parm      *blank        xxabbrev
      *
     C                   if        xxabbrev <> 'Sat'
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09075'
     C                   endif
     C                   endif
      *
     C                   endsl
      *
      * To date cannot be earlier than from date.
      *
     C                   if        *in33 = *off and
     C                             *in34 = *off and
     C                             wktcymd > 0 and
     C                             wktcymd < wkfcymd
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09009'
     C                   endif
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      *  F4 prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      * Farm site
     C                   select
     C                   when      fld = 'D1FSCD'
     C                   call      'HP5040'
     C                   parm      'A'           xxaist
     C                   parm      0             xxfscd
     C                   parm      *blank        xxfsnm
     C                   seton                                        56
     C                   if        xxfscd <> 0
     C                   z-add     xxfscd        d1fscd
     C                   move      xxfsnm        d1fsnm
     C                   endif
      *
      * Budget template
      *
     C                   when      fld = 'D1BTCD'
     C                   call      'HP5039'
     C                   parm      'A'           xxaist
     C                   parm      *blank        xxbtcd
     C                   parm      *blank        xxbtds
     C                   seton                                        55
     C                   if        xxbtcd <> *blank
     C                   move      xxbtcd        d1btcd
     C                   move      xxbtds        d1btds
     C                   endif
     C                   other
      *
      * F4 not valid for this field...issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error                                        013
     C                   movel     'HS09011'     mgid(e)
     C                   endif
      *
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Create the Farm Budget Header/Detail
      *----------------------------------------------------------------
      *
     C     $create       begsr
      *
      * Get the next system-assigned 'farm budget number' from the Data Area
      *
     C     *lock         in        nextfbsn
     C                   add       1             nextfbsn
     C                   eval      jhfbsn = nextfbsn
     C                   out       nextfbsn
      *
      * Populate the remaining Farm Budget Header fields and write the header
      * record.
     C                   z-add     d1fscd        jhfscd
     C                   move      d1btcd        jhbtcd
     C                   z-add     d1btwk        jhbtwk
     C                   z-add     wkfcymd       jhbfdt
     C                   z-add     wktcymd       jhbtdt
     C                   move      'I'           jhfbscd
      *
     C                   write     jhrec
      *
      * Now, read each Budget Item for the Template and write a Farm
      * Budget Detail record for each record read.
      *
      *
     C     d1btcd        setll     hsl186c
     C                   dou       *in91 = *on                                  Do items
     C     d1btcd        reade     hsl186c                                91
     C                   if        *in91 = *off                                 If not eof
      *
     C                   z-add     jhfbsn        jdfbsn
     C                   z-add     d1fscd        jdfscd
     C                   move      d1btcd        jdbtcd
     C                   move      tdbgit        jdbgit
     C                   z-add     tdbtqt        jdbgqt
     C                   z-add     0             jdcpuam
     C                   z-add     0             jdvol
     C                   z-add     0             jdfbam
      *
     C                   write     jdrec
     C                   endif                                                  If not eof
     C                   enddo                                                  Do items
      *
      * Set next routine
      *
     C                   eval      routne = exit
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Set on last record indicator and end job
      *----------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        lr
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm Lists
      *
     C     *entry        plist
     C                   parm                    rtncd
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    d1fscd
     C                   kfld                    d1btcd
      *
      * Get the system date into CCYYMMDD format.
      *
     C     *mdy          move      udate         wkcymdiso
     C                   move      wkcymdiso     wksysdt
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
