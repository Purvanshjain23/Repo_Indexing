// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDV4EFR
// ?Date: 14.08.2025 Time: 03:33:18
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?****----- Max of 50 files has been reached. Use XF's -----*
//?  journalled (CPF4328) and 'OPBFCPP in QTEMP not valid for operation.'
// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

// Call program VAL Set Inter. Access  XF.
CALL PROGRAM(VAL Set Inter. Access  XF) ('PDSKXFR');
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('OMS');

// PAR.USR First Time = CND.Yes
PAR.USR_First_Time = 'Y';

// PAR.USR Display field = CND.no
PAR.USR_Display_field = 'N';

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Printer Device = CND.Not entered
PAR.PRT_Printer_Device = *BLANK;

EXECUTE FUNCTION(RTV Appl Whs Restrict  RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1959551;
PARAMETER(JOB.*USER);
PARAMETER(LCL.Application_WHS_Restrict);

//?02/15/23 DN W110809-Initialize.
// LCL.Item Frsh/Frzn Mismatch = CND.No
LCL.Item_Frsh_Frzn_Mismatch = 'N';

//?USER: Initialize subfile header

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

//?01/27/22 DN W91799-Moved both XF Programs to 1st Time Processing.
//?First time
CASE;

// IF PAR.USR First Time is Yes
IF PAR.USR_First_Time = 'Y';

//?01/27/22 DN W91799-Copied Both XF From Init Subfile Hdr.
// Call program RTV Co. Dflt Int All,O XF.
CALL PROGRAM(RTV Co. Dflt Int All,O XF) ('PMRMXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Shipping_Method);
PARAMETER(PAR.Load_Type);
PARAMETER(CTL.LTL_Flag);
PARAMETER(PAR.Export_Status_Dft);
PARAMETER(CTL.Shrink_Wrap);
PARAMETER(NLL.Departure_Time_DFT);
PARAMETER(PAR.Country_Code);
PARAMETER(PAR.Allow_Mult_Whse_to_Order);
PARAMETER(PAR.Allow_Multi_Export_On_Ord);
PARAMETER(CTL.Slip_Sheet);
PARAMETER(CTL.Palletize);
PARAMETER(PAR.Company_Organization);

// Call program RTV Dflt Type for Co  XF.
CALL PROGRAM(RTV Dflt Type for Co  XF) ('POGOXFR');
PARAMETER(JOB.*USER);
PARAMETER('O/P');
PARAMETER(CTL.Company_Number);
PARAMETER(PAR.Order_Type_Sales);

// CTL.Header Status = CND.Entered
CTL.Header_Status = 'E';

// CTL.Load Plan Order = CND.yes
CTL.Load_Plan_Order = 'Y';

//?FP1110- RMC 01/14/08  DFT Print Pick Slip to No for HPB
CASE;

// IF PAR.Company Organization is High Plains Biodiesel
IF PAR.Company_Organization = 'H';

// CTL.Print Pick Slip = CND.no
CTL.Print_Pick_Slip = 'N';

//?FP1110- RMC 01/14/08  DFT Print Pick Slip to No for HPB
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Print Pick Slip = CND.yes
CTL.Print_Pick_Slip = 'Y';

ENDIF;

// CTL.Transfer in Storage Ind = CND.No
CTL.Transfer_in_Storage_Ind = 'N';

// CTL.Affect Auto Accruals = CND.Affect Auto Accruals
CTL.Affect_Auto_Accruals = 'Y';

// CTL.Event Code = CND.01 Order Entry
CTL.Event_Code = '01';

// CTL.Requested Delivery Date = JOB.*Job date
CTL.Requested_Delivery_Date = JOB.*Job_date;

//?10/26/18 DN S13992-Don't Default Requested Ship Date.
// CTL.Scheduled Ship Date = JOB.*Job date
CTL.Scheduled_Ship_Date = JOB.*Job_date;

// CTL.Order Date = JOB.*Job date
CTL.Order_Date = JOB.*Job_date;

// CTL.Date of Original Entry = JOB.*Job date
CTL.Date_of_Original_Entry = JOB.*Job_date;

// CTL.Time of Original Entry = JOB.*Job time
CTL.Time_of_Original_Entry = JOB.*Job_time;

// CTL.User Original Entry = JOB.*USER
CTL.User_Original_Entry = JOB.*USER;

// CTL.Order Type - Sales = PAR.Order Type - Sales
CTL.Order_Type_Sales = PAR.Order_Type_Sales;

// CTL.Load Type = PAR.Load Type
CTL.Load_Type = PAR.Load_Type;

//?E3323 8/15/14 Dft Spot  buy if not SBD
CASE;

// IF PAR.Company Organization is Seaboard
IF PAR.Company_Organization = 'S';

//?E3323 8/15/14 Dft Spot  buy if not SBD
// IF *OTHERWISE
IF *OTHERWISE;

//?06/12/21 DN W77844-Convert 'N' to 'T'urn.
// CTL.Spot Buy  (Y/N) = CND.Turn
CTL.Spot_Buy_Y_N = 'T';

// CTL.OHE Spot Buy = CND.Turn
CTL.OHE_Spot_Buy = 'T';

ENDIF;

// PAR.USR First Time = CND.No
PAR.USR_First_Time = 'N';

ENDIF;

//?** Wrap in an XF due to too many files          E00396
// Call program RTV Company Name       XF.
CALL PROGRAM(RTV Company Name       XF) ('PNH7XFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Company_Name);

// Call program Rtv Alpha Value       XF.
CALL PROGRAM(Rtv Alpha Value       XF) ('POMTXFR');
PARAMETER(CTL.Company_Number);
PARAMETER('ODPRCTYPRQ');
PARAMETER(PAR.OD_Price_Type_Req_STS_USR);

SET CURSOR;

//?USER: Initialize subfile record (existing record)

// PAR.USR Update Flag = CND.No
PAR.USR_Update_Flag = *BLANK;

// RCD.USR Item Code = DB1.Item Code
RCD.USR_Item_Code = DB1.Item_Code;

//?Quantity ordered
CASE;

// IF DB1.Order Secondary Line Seq is GT 1
IF DB1.Order_Secondary_Line_Seq > 1;

// RCD.Qty Ordered USR = DB1.Quantity to Substitute
RCD.Qty_Ordered_USR = DB1.Quantity_to_Substitute;

//?Quantity ordered
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Qty Ordered USR = DB1.Quantity Ordered
RCD.Qty_Ordered_USR = DB1.Quantity_Ordered;

ENDIF;

// RCD.Quantity 11.2 USR = RCD.Qty Ordered USR
RCD.Quantity_11_2_USR = RCD.Qty_Ordered_USR;

// RCD.USR Warehouse Code = DB1.Warehouse Code
RCD.USR_Warehouse_Code = DB1.Warehouse_Code;

// RCD.USR Display field = PAR.USR Display field
RCD.USR_Display_field = PAR.USR_Display_field;

// RCD.USR Quantity = DB1.Quantity Scheduled
RCD.USR_Quantity = DB1.Quantity_Scheduled;

// RCD.USR Weight = DB1.Weight Scheduled
RCD.USR_Weight = DB1.Weight_Scheduled;

//?Do not display deleted lines
CASE;

// IF DB1.Detail Line Status is Cancelled
IF DB1.Detail_Line_Status = 'X';

// RCD.USR Display field = CND.no
RCD.USR_Display_field = 'N';

ENDIF;

// RCD.USR Display 1 = CND.Yes
RCD.USR_Display_1 = 'Y';

//?If status is cancel or in chg mode or price & audit manual Item Output
CASE;

// IF RCD.Detail Line Status is Cancelled
IF RCD.Detail_Line_Status = 'X';

// OR PGM.*Program mode is *CHANGE
OR PGM.*Program_mode = 'CHG';

// OR DB1.Price Status is Priced
OR ( DB1.Price_Status = 'P';

// AND DB1.Price Audit is Manually Price Audited
AND DB1.Price_Audit = 'M' );

// RCD.USR Display 1 = CND.No
RCD.USR_Display_1 = 'N';

ENDIF;

// RCD.USR Display 2 = CND.Yes
RCD.USR_Display_2 = 'Y';

//?Priced & Audit Manually pricing fields will be output only
CASE;

// IF DB1.Price Status is Priced
IF DB1.Price_Status = 'P';

// AND DB1.Price Audit is Manually Price Audited
AND DB1.Price_Audit = 'M';

// RCD.USR Display 2 = CND.No
RCD.USR_Display_2 = 'N';

//?Priced & Audit Manually pricing fields will be output only
// IF DB1.Detail Line Status is Cancelled
IF DB1.Detail_Line_Status = 'X';

// RCD.USR Display 2 = CND.No
RCD.USR_Display_2 = 'N';

ENDIF;

//?PK0519  10/20/03 RMC
// RCD.USR Display 3 = CND.Yes
RCD.USR_Display_3 = 'Y';

//?Control:  Price Override
CASE;

// IF RCD.Price Method Code is Deviated
IF RCD.Price_Method_Code = 'DEV';

// OR RCD.USR Display 2 is No
OR RCD.USR_Display_2 = 'N';

// RCD.USR Display 3 = CND.No
RCD.USR_Display_3 = 'N';

ENDIF;

//?Export Doc go w/ Driver   3/24/04 RMC
CASE;

// IF CTL.Export Docs Go w/Driver is Blank
IF CTL.Export_Docs_Go_w_Driver = *BLANK;

// CTL.Export Docs Go w/Driver = CND.No
CTL.Export_Docs_Go_w_Driver = 'N';

ENDIF;

//?S00932  09/08/09 RMC
// RCD.USR Display 4 = CND.Yes
RCD.USR_Display_4 = 'Y';

//?FP1309  04/07/10 SLM
// RCD.USR Display 5 = CND.Yes
RCD.USR_Display_5 = 'Y';

//?Control:  ITEM AGE days
CASE;

// IF RCD.Detail Line Status is Cancelled
IF RCD.Detail_Line_Status = 'X';

// OR RCD.Override Age Dates StsUsr is Age Dates are Entered
OR RCD.Override_Age_Dates_StsUsr = 'O';

//?if line is cancelled do not have age days open
//?IF user has the PRODUCTION FROM dates entered then do not allow
//?age dates to be entered.
// RCD.USR Display 5 = CND.No
RCD.USR_Display_5 = 'N';

ENDIF;

//?FP1309 report how age is populated  by days or overridden by dates
CASE;

// IF DB1.Production Ovr AgeDte Fr is Entered
IF DB1.Production_Ovr_AgeDte_Fr <> *ZERO;

// RCD.Override Age Dates StsUsr = CND.Age Dates are Entered
RCD.Override_Age_Dates_StsUsr = 'O';

//?FP1309 report how age is populated  by days or overridden by dates
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Override Age Dates StsUsr = CND.No Override Age Dates
RCD.Override_Age_Dates_StsUsr = *BLANK;

ENDIF;

//?E3323 8/15/14 Default Spot buy if not SBD Org
CASE;

// IF PAR.Company Organization is Seaboard
IF PAR.Company_Organization = 'S';

//?E3323 8/15/14 Default Spot buy if not SBD Org
// IF *OTHERWISE
IF *OTHERWISE;

//?06/12/21 DN W77844-Convert 'N' to 'T'urn.
// CTL.Spot Buy  (Y/N) = CND.Turn
CTL.Spot_Buy_Y_N = 'T';

// CTL.OHE Spot Buy = CND.Turn
CTL.OHE_Spot_Buy = 'T';

//?01/15/21 DN R17029-Default OD Spot Buy.
// RCD.OD Spot Buy = CND.Turn
RCD.OD_Spot_Buy = 'T';

ENDIF;

// LCL.Country Code          USR = CTL.Country Code
LCL.Country_Code_USR = CTL.Country_Code;

//? 9/15/2021 JBB WI464 - Pallet Management
// RCD.Pallet Type NOREF = RCD.OD Pallet Type
RCD.Pallet_Type_NOREF = RCD.OD_Pallet_Type;

//?USER: Initialize subfile record (new record)

MOVE *ALL (To: RCD From: PAR);

//?** Wrap in an XF due to too many files          E00396
// Call program RTV Affect Fields      XF.
CALL PROGRAM(RTV Affect Fields      XF) ('PNH8XFR');
PARAMETER(CTL.Order_Type_Sales);
PARAMETER(RCD.Affect_Inventory_Status);
PARAMETER(RCD.Affect_Sales_Doll_Status);
PARAMETER(RCD.Affect_Sales_Pnds_Status);
PARAMETER(WRK.Affect_Brokerage_Default);

// RCD.Price Status = CND.Unpriced
RCD.Price_Status = 'U';

// RCD.Order Sequence Number = CON.*ZERO
RCD.Order_Sequence_Number = *ZERO;

// RCD.Date of Original Entry = JOB.*Job date
RCD.Date_of_Original_Entry = JOB.*Job_date;

// PAR.USR Update Flag = CND.No
PAR.USR_Update_Flag = *BLANK;

// RCD.USR Display field = CND.no
RCD.USR_Display_field = 'N';

// RCD.USR Display 4 = CND.No
RCD.USR_Display_4 = 'N';

// RCD.Event Code = PAR.Event Code
RCD.Event_Code = PAR.Event_Code;

// RCD.Order Secondary Line Seq = CON.1
RCD.Order_Secondary_Line_Seq = 1;

//?Export Doc go w/ Driver   3/24/04 RMC
CASE;

// IF CTL.Export Docs Go w/Driver is Blank
IF CTL.Export_Docs_Go_w_Driver = *BLANK;

// CTL.Export Docs Go w/Driver = CND.No
CTL.Export_Docs_Go_w_Driver = 'N';

ENDIF;

//?RMC 4/25/05 Added these to init the affect fields
// RCD.Affect Trade Fund = CND.yes
RCD.Affect_Trade_Fund = 'Y';

// RCD.Affect Pricing = CND.yes
RCD.Affect_Pricing = 'Y';

//?RMC 12/6/13 chg dft for affect comm to YES ALWAYS
// RCD.Affect Commission = CND.yes
RCD.Affect_Commission = 'Y';

//?clear screen fields
// RCD.Palletize = WRK.BLANK
RCD.Palletize = WRK.BLANK;

// RCD.Slip Sheet = WRK.BLANK
RCD.Slip_Sheet = WRK.BLANK;

// RCD.Commodity Market Code = CON.*BLANK
RCD.Commodity_Market_Code = *BLANK;

// RCD.Age Code = WRK.BLANK
RCD.Age_Code = WRK.BLANK;

// RCD.Item Age Days = CON.*ZERO
RCD.Item_Age_Days = *ZERO;

// RCD.Production Ovr AgeDte Fr = CON.*ZERO
RCD.Production_Ovr_AgeDte_Fr = *ZERO;

// RCD.Production Ovr AgeDte To = CON.*ZERO
RCD.Production_Ovr_AgeDte_To = *ZERO;

//?THE BELOW DOESNT WORK -- SO COMMENTING  rmc  5/01/18
//?E2438 Default Sales Channel for Sbd from salesperson, if blank (e2990)
CASE;

// IF PAR.Company Organization is Seaboard
IF PAR.Company_Organization = 'S';

// AND CTL.Type Code is EQ Blank
AND CTL.Type_Code = *BLANK;

// Call program Rtv Dft Sales Channel  XF.
CALL PROGRAM(Rtv Dft Sales Channel  XF) ('PBHPXFR');
PARAMETER(CTL.Salesperson_Code);
PARAMETER(LCL.SEC_Default_Sales_Channel);

// CTL.Type Code = LCL.SEC Default Sales Channel
CTL.Type_Code = LCL.SEC_Default_Sales_Channel;

ENDIF;

//?CALC: Subfile control function fields

//?Option Toggle
CASE;

// IF CTL.*CMD key is *Option Toggle
IF CTL.*CMD_key = '08';

//?Toggle show option field
CASE;

// IF PAR.USR Display field is yes
IF PAR.USR_Display_field = 'Y';

// PAR.USR Display field = CND.no
PAR.USR_Display_field = 'N';

//?Toggle show option field
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Display field = CND.yes
PAR.USR_Display_field = 'Y';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Re-read Subfile Record = CND.*YES
PGM.*Re_read_Subfile_Record = 1;

ENDIF;

//?Prompt Control fields
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Company Number
IF PGM.*Cursor_field = CTL.Company_Number;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(CTL.Company_Number);

// IF PGM.*Cursor field <IS> CTL.Ship To Customer
IF PGM.*Cursor_field = CTL.Ship_To_Customer;

// Call program SEL Cust/ShpTo Flag 'Y'SR.
CALL PROGRAM(SEL Cust/ShpTo Flag 'Y'SR) ('PDYSSRR');
PARAMETER(CTL.Ship_To_Customer);

// IF PGM.*Cursor field <IS> CTL.Order Type - Sales
IF PGM.*Cursor_field = CTL.Order_Type_Sales;

// Call program SEL Invoice Types      SR.
CALL PROGRAM(SEL Invoice Types      SR) ('PDGVSRR');
PARAMETER(CTL.Order_Type_Sales);

// IF PGM.*Cursor field <IS> CTL.Warehouse Code
IF PGM.*Cursor_field = CTL.Warehouse_Code;

CASE;

// IF LCL.Application WHS Restrict is yes
IF LCL.Application_WHS_Restrict = 'Y';

// Call program Sel User Appl Whs     SR.
CALL PROGRAM(Sel User Appl Whs     SR) ('PNMMSRR');
PARAMETER(JOB.*USER);
PARAMETER('O/P');
PARAMETER(CTL.Warehouse_Code);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(CTL.Warehouse_Code);

ENDIF;

// IF PGM.*Cursor field <IS> CTL.Salesperson Code
IF PGM.*Cursor_field = CTL.Salesperson_Code;

// Call program SEL Active Salesperson SR.
CALL PROGRAM(SEL Active Salesperson SR) ('CABYSRR');
PARAMETER(CTL.Salesperson_Code);

// IF PGM.*Cursor field <IS> CTL.Country Code
IF PGM.*Cursor_field = CTL.Country_Code;

// Call program SEL Country Active     SR.
CALL PROGRAM(SEL Country Active     SR) ('PDEGSRR');
PARAMETER(CTL.Country_Code);

// IF PGM.*Cursor field <IS> CTL.OHE Intended for ExportCC
IF PGM.*Cursor_field = CTL.OHE_Intended_for_ExportCC;

//?** Add prompt for "Intended for Export" country       E00157
// Call program SEL Country Active     SR.
CALL PROGRAM(SEL Country Active     SR) ('PDEGSRR');
PARAMETER(CTL.OHE_Intended_for_ExportCC);

ENDIF;

ENDIF;

//?USER: Validate subfile control

//?** Wrap in an XF due to too many files          E00396
// Call program RTV Order Types        XF.
CALL PROGRAM(RTV Order Types        XF) ('PNH9XFR');
PARAMETER(CTL.Order_Type_Sales);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(CTL.Billing_Activity_Type);
PARAMETER(PAR.Affect_Inventory_Status);
PARAMETER(PAR.Affect_Sales_Doll_Status);
PARAMETER(PAR.Affect_Sales_Pnds_Status);

//?** Wrap in an XF due to too many files          E00396
// Call program RTV OE Hold/ShipTo FlagXF.
CALL PROGRAM(RTV OE Hold/ShipTo FlagXF) ('PDNEXFR');
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(WRK.Order_Entry_Hold);
PARAMETER(WRK.Ship_To_Customer_Flag);

//?Order Entry Hold, not a ship to customer
CASE;

// IF WRK.Ship To Customer Flag is No Use as Ship to Cust
IF WRK.Ship_To_Customer_Flag = 'N';

// Send error message - 'Invalid Ship To entered - Ship to Customer Flag is 'N'o.'
ERROR(USR2482);
MSGPARM(CTL.Ship_To_Customer);

//?Order Entry Hold, not a ship to customer
// IF WRK.Order Entry Hold is New Order Hold
IF WRK.Order_Entry_Hold = 'Y';

// Send error message - 'Customer is held for new orders. Cannot process transaction.'
ERROR(USR1025);

ENDIF;

//?Select TYPE (HPB ONLY -- and SBD)
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Type Code
AND PGM.*Cursor_field = CTL.Type_Code;

// Call program SEL Type Codes         SR.
CALL PROGRAM(SEL Type Codes         SR) ('CABVSRR');
PARAMETER(CTL.Type_Code);

ENDIF;

//?Validate order type
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Validate order type
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Order type is invalid for &1'
ERROR(USR1895);
MSGPARM(WRK.Order_Type_Description);
MSGPARM(CTL.Order_Type_Sales);

ENDIF;

// Call program RTV Cust Ordering Dflt2XF.
CALL PROGRAM(RTV Cust Ordering Dflt2XF) ('PNS9XFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Terms_Code);
PARAMETER(LCL.Sales_Route_Code);
PARAMETER(CTL.Special_Instructions_2);
PARAMETER(CTL.Special_Instructions);
PARAMETER(NLL.Carrier_Code);
PARAMETER(PAR.P_O_Required_Flag);
PARAMETER(PAR.Requested_Delivery_Time);
PARAMETER(PAR.Type_Code);
PARAMETER(CTL.Absorbed_Freight_Rate_CWT);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.USR_Warehouse_Code);
PARAMETER(PAR.Outside_Warehouse_Flag);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(LCL.Ord_Ent_Default_Sls_Rte);
PARAMETER(LCL.Record_Found_USR);

//?E2438 Default Type Code for HPB - not for Foods
CASE;

// IF PAR.Company Organization is High Plains Biodiesel
IF PAR.Company_Organization = 'H';

// CTL.Type Code = PAR.Type Code
CTL.Type_Code = PAR.Type_Code;

ENDIF;

//?W77844 DN 06/12/21-Convert Old Spot Buy Flag Value to New Val: S, T, P
//?E3323 Validate Spot buy      W77844 DN 06/12/21-New Spot Buy Val.
CASE;

// IF CTL.Spot Buy  (Y/N) is Spot
IF CTL.Spot_Buy_Y_N = 'S';

// CTL.OHE Spot Buy = CND.Spot
CTL.OHE_Spot_Buy = 'S';

//?E3323 Validate Spot buy      W77844 DN 06/12/21-New Spot Buy Val.
// IF CTL.Spot Buy  (Y/N) is Turn
IF CTL.Spot_Buy_Y_N = 'T';

// CTL.OHE Spot Buy = CND.Turn
CTL.OHE_Spot_Buy = 'T';

//?E3323 Validate Spot buy      W77844 DN 06/12/21-New Spot Buy Val.
// IF CTL.Spot Buy  (Y/N) is Promo
IF CTL.Spot_Buy_Y_N = 'P';

// CTL.OHE Spot Buy = CND.Promo
CTL.OHE_Spot_Buy = 'P';

//?E3323 Validate Spot buy      W77844 DN 06/12/21-New Spot Buy Val.
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Company Organization is Seaboard
IF PAR.Company_Organization = 'S';

// CTL.OHE Spot Buy = CND.*Blank
CTL.OHE_Spot_Buy = *BLANK;

// Send error message - 'Spot Buy S/T/P required'
ERROR(USR4747);
MSGPARM(CTL.Spot_Buy_Y_N);

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.OHE Spot Buy = CND.Turn
CTL.OHE_Spot_Buy = 'T';

// CTL.Spot Buy  (Y/N) = CND.Turn
CTL.Spot_Buy_Y_N = 'T';

ENDIF;

ENDIF;

//?06/16/10 PKD Default Sales Route
CASE;

// IF CTL.Sales Route Code is not entered
IF CTL.Sales_Route_Code = *BLANK;

CASE;

// IF LCL.Ord Ent Default Sls Rte is Yes
IF LCL.Ord_Ent_Default_Sls_Rte = 'Y';

// CTL.Sales Route Code = LCL.Sales Route Code
CTL.Sales_Route_Code = LCL.Sales_Route_Code;

ENDIF;

ENDIF;

//?Validate Co/Cust exists
CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

CASE;

// IF CTL.Warehouse Code is Warehouse Code Blank
IF CTL.Warehouse_Code = *BLANK;

// CTL.Warehouse Code = WRK.USR Warehouse Code
CTL.Warehouse_Code = WRK.USR_Warehouse_Code;

ENDIF;

//?Validate Co/Cust exists
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Company Customer not found.'
ERROR(USR1007);
MSGPARM(CTL.Company_Number);

ENDIF;

// Call program Rtv Age Information   XF.
CALL PROGRAM(Rtv Age Information   XF) ('PNQCXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(WRK.Item_Age_Days_Fresh);
PARAMETER(WRK.Item_Age_Days_Frozen);

//?SLM 03/09/2006 Add the following if InterCo & Prc Method must be MAN
//?display inter-co or third party message
CASE;

// IF PAR.Type Code is Inter Company
IF PAR.Type_Code = 'IC';

// CTL.Customer Type Desc Usr = CON.* Internal Company *
CTL.Customer_Type_Desc_Usr = * Internal Company *;

//?display inter-co or third party message
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Customer Type Desc Usr = CON.* 3rd Party *
CTL.Customer_Type_Desc_Usr = * 3rd Party *;

ENDIF;

//?Validate Order type not debit credit memo
CASE;

// IF CTL.Billing Activity Type is Credit or Debit Memo
IF CTL.Billing_Activity_Type = '2'/'3';

// Send error message - 'Order type is invalid for &1'
ERROR(USR1895);
MSGPARM('Sales Orders');
MSGPARM(CTL.Order_Type_Sales);

//?Validate Order type not debit credit memo
// IF CTL.Billing Activity Type is Warehouse Transfer
IF CTL.Billing_Activity_Type = '4';

CASE;

// IF PAR.Outside Warehouse Flag is Not Yes
IF PAR.Outside_Warehouse_Flag = *BLANK/'N';

// Send error message - 'Order Type is a warehouse transfer, but customer is not an outside warehous
ERROR(USR0610);
MSGPARM(CTL.Order_Type_Sales);

ENDIF;

//?Validate Order type not debit credit memo
// IF CTL.Billing Activity Type is Invoice
IF CTL.Billing_Activity_Type = '1';

CASE;

// IF PAR.Outside Warehouse Flag is yes
IF PAR.Outside_Warehouse_Flag = 'Y';

// Send error message - 'Customer is an outside warehouse, but order type is not a warehouse transfe
ERROR(USR2259);
MSGPARM(CTL.Order_Type_Sales);

ENDIF;

ENDIF;

//?Populate salesperson if blank
CASE;

// IF CTL.Salesperson Code is not entered
IF CTL.Salesperson_Code = *BLANK;

// Call program RTV Salesman Code      XF.
CALL PROGRAM(RTV Salesman Code      XF) ('PNIAXFR');
PARAMETER(CTL.Sales_Route_Code);
PARAMETER(CTL.Salesperson_Code);

ENDIF;

//?** Wrap in an XF due to too many files          E00396
// Call program RTV Sls Route by Slsp  XF.
CALL PROGRAM(RTV Sls Route by Slsp  XF) ('PNH6XFR');
PARAMETER(CTL.Sales_Route_Code);
PARAMETER(CTL.Salesperson_Code);
PARAMETER(CTL.Manager_Level_Code);
PARAMETER(CTL.VP_Level_Code);

//?Sales route required
CASE;

// IF CTL.Sales Route Code EQ WRK.BLANK
IF CTL.Sales_Route_Code = WRK.BLANK;

// Send error message - 'Salesperson is not assigned a sales route'
ERROR(USR2029);
MSGPARM(CTL.Salesperson_Code);

ENDIF;

//?VP Level
CASE;

// IF CTL.VP Level Code EQ WRK.BLANK
IF CTL.VP_Level_Code = WRK.BLANK;

// Call program RTV Mgr Desc,VP Level  XF.
CALL PROGRAM(RTV Mgr Desc,VP Level  XF) ('PNIBXFR');
PARAMETER(CTL.Manager_Level_Code);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(CTL.VP_Level_Code);

ENDIF;

//?Fill Warehouse Control
CASE;

// IF CTL.Warehouse Code NE WRK.BLANK
IF CTL.Warehouse_Code <> WRK.BLANK;

// Call program RTV WhsTyp/Ctrl/LdTyp XF.
CALL PROGRAM(RTV WhsTyp/Ctrl/LdTyp XF) ('PNMRXFR');
PARAMETER(CTL.Warehouse_Code);
PARAMETER(WRK.Warehouse_Type);
PARAMETER(CTL.Trans_Contol_AS400_Plant);
PARAMETER(NLL.WHS_Default_Load_Type);

ENDIF;

//?Clear warehouse if multiple warehouses per order
CASE;

// IF PAR.Allow Mult Whse to Order is yes
IF PAR.Allow_Mult_Whse_to_Order = 'Y';

// CTL.Warehouse Code = CON.*BLANK
CTL.Warehouse_Code = *BLANK;

ENDIF;

//?Add mode processing
CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

//?Check for duplicate P.O #
CASE;

// IF CTL.Customer Purchase Order # NE WRK.BLANK
IF CTL.Customer_Purchase_Order_# <> WRK.BLANK;

// AND WRK.Update Exception Status is no
AND WRK.Update_Exception_Status = 'N';

EXECUTE FUNCTION(RTV Co,Cust,PO         RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1279297;
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Customer_Purchase_Order_#);

CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

//?informational message was getting lost; get error message 1st time, then
//?    allow update
// Send error message - 'PO Number is a duplicate on another open order header.  Press Enter/Cmd Key
ERROR(USR2439);
MSGPARM(CTL.Customer_Purchase_Order_#);

// WRK.Update Exception Status = CND.yes
WRK.Update_Exception_Status = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?Validate Requested Ship Date - cannot be zeros        E010904
CASE;

// IF CTL.Header Status is Entered
IF CTL.Header_Status = 'E';

CASE;

// IF CTL.Requested Ship Date is not entered
IF CTL.Requested_Ship_Date = *ZERO;

// Send error message - 'Date must be entered.'
ERROR(USR0231);
MSGPARM(CTL.Requested_Ship_Date);

ENDIF;

ENDIF;

//?Scheduled ship date = requested ship date if order sts is entered
CASE;

// IF CTL.Header Status is Entered
IF CTL.Header_Status = 'E';

// CTL.Scheduled Ship Date = CTL.Requested Ship Date
CTL.Scheduled_Ship_Date = CTL.Requested_Ship_Date;

ENDIF;

//?Requested Delivery Date = requested ship date         E010904
CASE;

// IF CTL.Header Status is Entered
IF CTL.Header_Status = 'E';

// CTL.Requested Delivery Date = CTL.Requested Ship Date
CTL.Requested_Delivery_Date = CTL.Requested_Ship_Date;

ENDIF;

//?Ship to and Bill to information + broker code logic 6/8/6 RMC *
CASE;

// IF CTL.Ship To Customer NE WRK.ZERO
IF CTL.Ship_To_Customer <> WRK.ZERO;

EXECUTE FUNCTION(RTV Cust Addr, A/R Cst RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1263804;
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Ship_To_Name);
PARAMETER(CTL.Ship_To_Address_Line_1);
PARAMETER(CTL.Ship_To_Address_Line_2);
PARAMETER(CTL.Ship_To_Address_Line_3);
PARAMETER(CTL.Ship_To_City);
PARAMETER(CTL.Ship_To_State_Code);
PARAMETER(CTL.Ship_To_Zip_Postal_Code);
PARAMETER(CTL.AR_Customer_Number);
PARAMETER(CTL.Email_Cust_On_Order_Ship);

// CTL.Bill to Customer = CTL.A/R Customer Number
CTL.Bill_to_Customer = CTL.AR_Customer_Number;

EXECUTE FUNCTION(RTV Cust Name/Addr     RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1129143;
PARAMETER(CTL.AR_Customer_Number);
PARAMETER(CTL.Bill_to_Name);
PARAMETER(CTL.Bill_to_Address_Line_1);
PARAMETER(CTL.Bill_to_Address_Line_2);
PARAMETER(CTL.Bill_to_Address_Line_3);
PARAMETER(CTL.Bill_to_City);
PARAMETER(CTL.Bill_to_State_Code);
PARAMETER(CTL.Bill_to_Zip_Postal_Code);

// Call program Rtv Cust Tf Exempt    XF.
CALL PROGRAM(Rtv Cust Tf Exempt    XF) ('PPSMXFR');
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Customer_TF_Exempt_Code);

ENDIF;

//?Populate warehouse code if blank
CASE;

// IF CTL.Warehouse Code is Warehouse Code Blank
IF CTL.Warehouse_Code = *BLANK;

//?Populate warehouse code
CASE;

// IF CTL.Billing Activity Type is Warehouse Transfer
IF CTL.Billing_Activity_Type = '4';

EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(CTL.Company_Number);
PARAMETER('WHSEXFER');
PARAMETER(CTL.Warehouse_Code);

//?Populate warehouse code
// IF CTL.Warehouse Code EQ WRK.BLANK
IF CTL.Warehouse_Code = WRK.BLANK;

// CTL.Warehouse Code = WRK.USR Warehouse Code
CTL.Warehouse_Code = WRK.USR_Warehouse_Code;

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Commod. Mkt, Whse  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1354050;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(PAR.Type_Code);
PARAMETER(WRK.Warehouse_Code_Transfer);
PARAMETER(PAR.Commodity_Market_Code);

// Call program RTV Whse Type,Control  XF.
CALL PROGRAM(RTV Whse Type,Control  XF) ('PNICXFR');
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.Warehouse_Type);
PARAMETER(NLL.Trans_Contol_AS400_Plant);
PARAMETER(LCL.WHS_Default_Load_Type);

//?rtv temp - Only update CTL temp if zeros              E002990
CASE;

// IF LCL.Warehouse Type NE PAR.Warehouse Type
IF LCL.Warehouse_Type <> PAR.Warehouse_Type;

CASE;

// IF CTL.Reefer Temperature is Not Entered
IF CTL.Reefer_Temperature = *ZERO;

// Call program RTV Shipping Temp      XF.
CALL PROGRAM(RTV Shipping Temp      XF) ('PDSSXFR');
PARAMETER(PAR.Warehouse_Type);
PARAMETER(CTL.Reefer_Temperature);
PARAMETER(CTL.Shipping_Temp_Code_C_F);

ENDIF;

ENDIF;

// LCL.Warehouse Type = PAR.Warehouse Type
LCL.Warehouse_Type = PAR.Warehouse_Type;

//?Populate export flag if blank
CASE;

// IF CTL.Export Status is blank
IF CTL.Export_Status = *BLANK;

//?Check Company/customer for EXport Type Code
CASE;

// IF CTL.Ship To Customer NE WRK.ZERO
IF CTL.Ship_To_Customer <> WRK.ZERO;

EXECUTE FUNCTION(RTV Type Code          RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1441836;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(PAR.Type_Code);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);

CASE;

// IF PAR.Type Code is Export
IF PAR.Type_Code = 'EX';

// CTL.Export Status = CND.yes
CTL.Export_Status = 'Y';

//?** Error if "Intended for Export" country code entered E00157
CASE;

// IF CTL.OHE Intended for ExportCC is Entered
IF CTL.OHE_Intended_for_ExportCC <> *BLANK;

// Send error message - 'Intended for Export country cannot be entered for an Export'
ERROR(USR4188);
MSGPARM(CTL.OHE_Intended_for_ExportCC);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Export Status = PAR.Export Status Dft
CTL.Export_Status = PAR.Export_Status_Dft;

ENDIF;

ENDIF;

ENDIF;

//?Populate delivery time if blank
CASE;

// IF CTL.Requested Delivery Time is Zero
IF CTL.Requested_Delivery_Time = *ZERO;

// CTL.Requested Delivery Time = PAR.Requested Delivery Time
CTL.Requested_Delivery_Time = PAR.Requested_Delivery_Time;

ENDIF;

//?Delivery time must be entered
CASE;

// IF CTL.Requested Delivery Time is Zero
IF CTL.Requested_Delivery_Time = *ZERO;

// Send error message - 'Delivery time must be entered.'
ERROR(USR2459);
MSGPARM(CTL.Requested_Delivery_Time);

//?Delivery time must be entered
// IF *OTHERWISE
IF *OTHERWISE;

//?Edit Delivery Time
CASE;

// IF CTL.Requested Delivery Time is GT 24 Hour Day
IF CTL.Requested_Delivery_Time > 2400;

// Send error message - 'Time Field GT 24 Hours.  Correct time and re-enter.'
ERROR(USR1712);
MSGPARM(CTL.Requested_Delivery_Time);

//?Edit Delivery Time
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Remainder= CTL.Requested Delivery Time\CON.100
WRK.USR_Remainder = MODULO(CTL.Requested_Delivery_Time 100 1);

CASE;

// IF WRK.USR Remainder is GT 59 Minutes
IF WRK.USR_Remainder > 59;

// Send error message - 'Time Field minutes GT 59.  Correct time and re-enter.'
ERROR(USR2175);
MSGPARM(CTL.Requested_Delivery_Time);

ENDIF;

ENDIF;

ENDIF;

//?Validate warehouse code
CASE;

// IF CTL.Warehouse Code EQ WRK.BLANK
IF CTL.Warehouse_Code = WRK.BLANK;

//?Error if 1 whse per order
CASE;

// IF PAR.Allow Mult Whse to Order is no
IF PAR.Allow_Mult_Whse_to_Order = 'N';

// Send error message - 'Value Required'
ERROR(USR1852);
MSGPARM(CTL.Warehouse_Code);

ENDIF;

//?Validate warehouse code
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Warehouse Exists   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1323885;
PARAMETER(CTL.Warehouse_Code);

//?Error if warehouse not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Warehouse Codes not found.'
ERROR(USR0007);
MSGPARM(CTL.Warehouse_Code);

//?Error if warehouse not found
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.Billing Activity Type is Warehouse Transfer
IF CTL.Billing_Activity_Type = '4';

//?Screen warehouse (from) = warehouse in co/cust file (to)
CASE;

// IF CTL.Warehouse Code EQ WRK.USR Warehouse Code
IF CTL.Warehouse_Code = WRK.USR_Warehouse_Code;

// Send error message - 'From and To warehouse must be different for transfer.'
ERROR(USR0433);
MSGPARM(CTL.Warehouse_Code);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?11/04/09 PKD E00519 Warehouse and Item Access by User
// Call program Val App Whs Itm Acs   XF.
CALL PROGRAM(Val App Whs Itm Acs   XF) ('PNMOXFR');
PARAMETER(JOB.*USER);
PARAMETER('O/P');
PARAMETER(CTL.Warehouse_Code);
PARAMETER(*ZERO);
PARAMETER(LCL.WHS_Item_Access_Sts_USR);

//?VAL: Warehouse Access
CASE;

// IF LCL.WHS/Item Access Sts USR is Access Denied
IF LCL.WHS_Item_Access_Sts_USR = 'D';

// Send error message - 'Access Denied to &1 for Warehouse &2.'
ERROR(USR2776);
MSGPARM(JOB.*USER);
MSGPARM(CTL.Warehouse_Code);

ENDIF;

//?Validate country code
CASE;

// IF CTL.Country Code NE WRK.BLANK
IF CTL.Country_Code <> WRK.BLANK;

//?** Error if export country and intended for export country E00157
CASE;

// IF CTL.OHE Intended for ExportCC is Entered
IF CTL.OHE_Intended_for_ExportCC <> *BLANK;

// Send error message - 'Intended for Export country cannot be entered for an Export'
ERROR(USR4188);
MSGPARM(CTL.OHE_Intended_for_ExportCC);

ENDIF;

//?WI464 DN 03/24/22-Validate Country Exist & Active.
EXECUTE FUNCTION(Val Country & Active   RT) TYPE(RTVOBJ) FILE(OME5REP)          AC2188228;
PARAMETER(CTL.Country_Code);
PARAMETER(LCL.Record_Status);

//?DO2416 DN 03/24/22-Check Return Code.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Throw Error Message if NOT Active.
CASE;

// IF NOT LCL.Record Status is Active
IF ! LCL.Record_Status = 'A';

// Send error message - 'Country &1 Inactive.'
ERROR(USR5198);
MSGPARM(CTL.Country_Code);

ENDIF;

//?DO2416 DN 03/24/22-Check Return Code.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Country Code not found.'
ERROR(USR2030);
MSGPARM(CTL.Country_Code);

ENDIF;

//? Delete orig country exp docs R13074
CASE;

// IF CTL.Country Code NE LCL.Country Code          USR
IF CTL.Country_Code <> LCL.Country_Code_USR;

// Call program Rtv & Dlt for CtryChg XF.
CALL PROGRAM(Rtv & Dlt for CtryChg XF) ('PNKJXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);

ENDIF;

// LCL.Country Code          USR = CTL.Country Code
LCL.Country_Code_USR = CTL.Country_Code;

//?Validate country code
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Country Code          USR = CTL.Country Code
LCL.Country_Code_USR = CTL.Country_Code;

//?Error if export status = Y
CASE;

// IF CTL.Export Status is yes
IF CTL.Export_Status = 'Y';

// Send error message - 'Export Code required when Export Status = Yes'
ERROR(USR2034);
MSGPARM(CTL.Country_Code);

ENDIF;

ENDIF;

//?Validate Type code (HPB and SBD)
CASE;

// IF PAR.Company Organization is High Plains Biodiesel
IF PAR.Company_Organization = 'H';

// OR PAR.Company Organization is Seaboard
OR PAR.Company_Organization = 'S';

//?Validate Type code (HPB and SBD)
CASE;

// IF CTL.Type Code is Entered
IF CTL.Type_Code <> *BLANK;

// Call program Val Type Codes         XF.
CALL PROGRAM(Val Type Codes         XF) ('PBAKXFR');
PARAMETER(CTL.Type_Code);
PARAMETER(WRK.Return_Code_Usr);

CASE;

// IF WRK.Return Code Usr is *Record does not exist
IF WRK.Return_Code_Usr = 'Y2U0005';

// Send error message - 'Type Code &1 Not Found'
ERROR(USR3388);
MSGPARM(CTL.Type_Code);

ENDIF;

//?Validate Type code (HPB and SBD)
// IF *OTHERWISE
IF *OTHERWISE;

//?Default for HPB Only  & sbd
CASE;

// IF PAR.Company Organization is High Plains Biodiesel
IF PAR.Company_Organization = 'H';

// CTL.Type Code = PAR.Type Code
CTL.Type_Code = PAR.Type_Code;

//?Default for HPB Only  & sbd
// IF PAR.Company Organization is Seaboard
IF PAR.Company_Organization = 'S';

CASE;

// IF CTL.Type Code is EQ Blank
IF CTL.Type_Code = *BLANK;

// Call program Rtv Dft Sales Channel  XF.
CALL PROGRAM(Rtv Dft Sales Channel  XF) ('PBHPXFR');
PARAMETER(CTL.Salesperson_Code);
PARAMETER(LCL.SEC_Default_Sales_Channel);

//?Only update Sales Channel for Japan if it is blanks   E002990
CASE;

// IF CTL.Type Code is Entered
IF CTL.Type_Code <> *BLANK;

// AND CTL.Country Code is Japan
AND CTL.Country_Code = 'JPN';

//?Only update Sales Channel for Japan if it is blanks   E002990
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Type Code = LCL.SEC Default Sales Channel
CTL.Type_Code = LCL.SEC_Default_Sales_Channel;

ENDIF;

ENDIF;

CASE;

// IF CTL.Type Code is EQ Blank
IF CTL.Type_Code = *BLANK;

// Send error message - 'Type Code &1 Not Found'
ERROR(USR3388);
MSGPARM(CTL.Type_Code);

ENDIF;

//?Default for HPB Only  & sbd
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Type Code &1 Not Found'
ERROR(USR3388);
MSGPARM(CTL.Type_Code);

ENDIF;

ENDIF;

ENDIF;

//?Validate Intended for Export                          E00157
CASE;

// IF CTL.OHE Intended for ExportCC is Entered
IF CTL.OHE_Intended_for_ExportCC <> *BLANK;

//?WI464 DN 03/24/22-Validate Country Exist & Active.
EXECUTE FUNCTION(Val Country & Active   RT) TYPE(RTVOBJ) FILE(OME5REP)          AC2188228;
PARAMETER(CTL.OHE_Intended_for_ExportCC);
PARAMETER(LCL.Record_Status);

//?DO2416 DN 03/24/22-Check Return Code.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Throw Error Message if NOT Active.
CASE;

// IF NOT LCL.Record Status is Active
IF ! LCL.Record_Status = 'A';

// Send error message - 'Country &1 Inactive.'
ERROR(USR5198);
MSGPARM(CTL.OHE_Intended_for_ExportCC);

ENDIF;

//?DO2416 DN 03/24/22-Check Return Code.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Country Code not found.'
ERROR(USR2030);
MSGPARM(CTL.OHE_Intended_for_ExportCC);

ENDIF;

//?** Error if export country and intended for export country E00157
CASE;

// IF CTL.Country Code is Entered
IF CTL.Country_Code <> *BLANK;

// Send error message - 'Country code cannot be entered if Intended For Export.'
ERROR(USR4189);
MSGPARM(CTL.Country_Code);

ENDIF;

ENDIF;

// CTL.Load Type Desc = Condition name of CTL.Load Type
CTL.Load_Type_Desc = RTVCND(CTL.Load_Type);

//?Validate load type  - add val to whses load type 12/9 C1200 RMC
CASE;

// IF CTL.Load Type is Blank
IF CTL.Load_Type = *BLANK;

// Send error message - 'Load Type cannnot be BLANK.'
ERROR(USR1813);
MSGPARM(CTL.Load_Type);

//?Validate load type  - add val to whses load type 12/9 C1200 RMC
//?Validate export status
// IF CTL.Export Status is blank
IF CTL.Export_Status = *BLANK;

// Send error message - 'Export status must be entered.'
ERROR(USR2460);
MSGPARM(CTL.Export_Status);

ENDIF;

//?Validate absorbed freight rate
CASE;

// IF CTL.Shipping Method is Buyers Truck
IF CTL.Shipping_Method = 'CR'/'CT';

// CTL.Absorbed Freight Rate CWT = CON.*ZERO
CTL.Absorbed_Freight_Rate_CWT = *ZERO;

ENDIF;

//?Validate item balances exist if change warehouse
CASE;

// IF CTL.Warehouse Code NE CTL.USR Warehouse Code
IF CTL.Warehouse_Code <> CTL.USR_Warehouse_Code;

// Call program VAL Itm Bals-Whs Chg   XF.
CALL PROGRAM(VAL Itm Bals-Whs Chg   XF) ('PDG3XFR');
PARAMETER(CTL.Company_Number);
PARAMETER(9999999);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(WRK.Error_Status);

CASE;

// IF WRK.Error Status is yes
IF WRK.Error_Status = 'Y';

// Send error message - 'Item Balance not found for some items in new warehouse.'
ERROR(USR2261);
MSGPARM(CTL.Warehouse_Code);

ENDIF;

ENDIF;

//?W91799 DN 01/27/22-Validate Shipping Method Cannot Be Blank.
CASE;

// IF CTL.Shipping Method EQ LCL.Blank 1 USR
IF CTL.Shipping_Method = LCL.Blank_1_USR;

// LCL.Generic Message 80 USR = CONCAT(CON.Shipping Method cannot be,CON.blank.,CON.1)
LCL.Generic_Message_80_USR = 'Shipping Method cannot be' + 'blank.' (1);

// Send error message - '&1'
ERROR(USR5085);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(CTL.Shipping_Method);

QUIT;

ENDIF;

//?USER: Validate subfile record fields

//?SLM 03/09/2006 Add the following if InterCo & Prc Method must be MAN
// WRK.Error Status  3 = CND.No
WRK.Error_Status_3 = 'N';

//?Set secondary line sequence
CASE;

// IF RCD.Order Secondary Line Seq is ZERO
IF RCD.Order_Secondary_Line_Seq = *ZERO;

// RCD.Order Secondary Line Seq = CON.1
RCD.Order_Secondary_Line_Seq = 1;

ENDIF;

//?Set new record fields
CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

// RCD.Detail Line Status = CND.Entered
RCD.Detail_Line_Status = 'E';

// RCD.Event Code = CND.01 Order Entry
RCD.Event_Code = '01';

//?Set new record fields
// IF *OTHERWISE
IF *OTHERWISE;

//?If MAN price method then hold price status
CASE;

// IF RCD.Price Method Code is Manual
IF RCD.Price_Method_Code = 'MAN';

// WRK.Price Status USR = RCD.Price Status
WRK.Price_Status_USR = RCD.Price_Status;

ENDIF;

ENDIF;

//?Fill in Palletize,Slip Sheet, Age Code
CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

//?Fill Palletize
CASE;

// IF RCD.Palletize EQ WRK.BLANK
IF RCD.Palletize = WRK.BLANK;

// RCD.Palletize = CTL.Palletize
RCD.Palletize = CTL.Palletize;

ENDIF;

//?Fill Slip Sheet
CASE;

// IF RCD.Slip Sheet EQ WRK.BLANK
IF RCD.Slip_Sheet = WRK.BLANK;

// RCD.Slip Sheet = CTL.Slip Sheet
RCD.Slip_Sheet = CTL.Slip_Sheet;

ENDIF;

ENDIF;

//?Seq #
CASE;

// IF RCD.Order Sequence Number is Equal to zero
IF RCD.Order_Sequence_Number = *ZERO;

// RCD.Order Sequence Number = WRK.Order Sequence Number + CON.1
RCD.Order_Sequence_Number = WRK.Order_Sequence_Number + 1;

// WRK.Order Sequence Number = RCD.Order Sequence Number
WRK.Order_Sequence_Number = RCD.Order_Sequence_Number;

ENDIF;

//?populate file quantity ordered/substitute field from screen
CASE;

// IF RCD.Order Secondary Line Seq is GT 1
IF RCD.Order_Secondary_Line_Seq > 1;

// RCD.Quantity to Substitute = RCD.Qty Ordered USR
RCD.Quantity_to_Substitute = RCD.Qty_Ordered_USR;

//?populate file quantity ordered/substitute field from screen
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Quantity Ordered = RCD.Qty Ordered USR
RCD.Quantity_Ordered = RCD.Qty_Ordered_USR;

ENDIF;

//?DEFAULT: Pallet Type
CASE;

// IF RCD.Palletize is yes
IF RCD.Palletize = 'Y';

//?If Pallet Type is blank, check Customer            9/16/21 WI464
CASE;

// IF RCD.Pallet Type NOREF is Not entered
IF RCD.Pallet_Type_NOREF = *BLANK;

// Call program Rtv Pallet Type/Desc  XF.
CALL PROGRAM(Rtv Pallet Type/Desc  XF) ('PUTPXFR');
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Pallet_Type_NOREF);
PARAMETER(NLL.PM_Description);
PARAMETER(NLL.Record_Found_USR);

//?If Pallet Type is still blank, default to #2 pallet
CASE;

// IF RCD.Pallet Type NOREF is Not entered
IF RCD.Pallet_Type_NOREF = *BLANK;

// RCD.Pallet Type NOREF = CON.02
RCD.Pallet_Type_NOREF = 02;

ENDIF;

ENDIF;

//?DEFAULT: Pallet Type
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.OD Pallet Type = CND.None
RCD.OD_Pallet_Type = *BLANK;

// RCD.Pallet Type NOREF = CON.*BLANK
RCD.Pallet_Type_NOREF = *BLANK;

ENDIF;

//?W77844 DN 06/12/21-Convert Old Spot Buy Flag Value to New Val: S, T, P
//?01/15/21 DN R17029-Dft Spot Buy to Upd in O.D. W77844 DN 06/12/21-New Val.
CASE;

// IF CTL.Spot Buy  (Y/N) is Spot
IF CTL.Spot_Buy_Y_N = 'S';

// RCD.OD Spot Buy = CND.Spot
RCD.OD_Spot_Buy = 'S';

//?01/15/21 DN R17029-Dft Spot Buy to Upd in O.D. W77844 DN 06/12/21-New Val.
// IF CTL.Spot Buy  (Y/N) is Turn
IF CTL.Spot_Buy_Y_N = 'T';

// RCD.OD Spot Buy = CND.Turn
RCD.OD_Spot_Buy = 'T';

//?01/15/21 DN R17029-Dft Spot Buy to Upd in O.D. W77844 DN 06/12/21-New Val.
// IF CTL.Spot Buy  (Y/N) is Promo
IF CTL.Spot_Buy_Y_N = 'P';

// RCD.OD Spot Buy = CND.Promo
RCD.OD_Spot_Buy = 'P';

//?01/15/21 DN R17029-Dft Spot Buy to Upd in O.D. W77844 DN 06/12/21-New Val.
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Company Organization is Seaboard
IF PAR.Company_Organization = 'S';

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.OD Spot Buy = CND.Turn
RCD.OD_Spot_Buy = 'T';

ENDIF;

ENDIF;

// RCD.Quantity 11.2 USR = RCD.Qty Ordered USR
RCD.Quantity_11_2_USR = RCD.Qty_Ordered_USR;

//?validations if not a delete
CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

//?validations if not a delete
// IF *OTHERWISE
IF *OTHERWISE;

//?Not a delete request continue validations.
DO;

//?Select on item
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> RCD.Item Code
AND PGM.*Cursor_field = RCD.Item_Code;

CASE;

// IF LCL.Application WHS Restrict is yes
IF LCL.Application_WHS_Restrict = 'Y';

// Call program SEL Actv FG by WHS    SR.
CALL PROGRAM(SEL Actv FG by WHS    SR) ('PNMQSRR');
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program SEL Actv Finished Good SR.
CALL PROGRAM(SEL Actv Finished Good SR) ('PDNHSRR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);

ENDIF;

ENDIF;

//?Select Price Code  PK0519 10/20/03
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> RCD.Price Code
AND PGM.*Cursor_field = RCD.Price_Code;

// LCL.Price Code = CON.*ZERO
LCL.Price_Code = *ZERO;

// Call program Sel Customer Prc Hdr  SL.
CALL PROGRAM(Sel Customer Prc Hdr  SL) ('POPOSRR');
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(LCL.Price_Code);

CASE;

// IF LCL.Price Code is Entered
IF LCL.Price_Code > *ZERO;

// RCD.Price Code = LCL.Price Code
RCD.Price_Code = LCL.Price_Code;

ENDIF;

ENDIF;

//?Select Pallet Type.                            9/15/21 BB WI464
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> RCD.Pallet Type NOREF
AND PGM.*Cursor_field = RCD.Pallet_Type_NOREF;

//?If Palletize flag is Yes, select Pallet Type
CASE;

// IF RCD.Palletize is yes
IF RCD.Palletize = 'Y';

// LCL.Pallet Type NOREF = CON.*BLANK
LCL.Pallet_Type_NOREF = *BLANK;

// Call program Sel Pallet Master     SR.
CALL PROGRAM(Sel Pallet Master     SR) ('PUTOSRR');
PARAMETER(LCL.Pallet_Type_NOREF);
PARAMETER('N');

// RCD.Pallet Type NOREF = LCL.Pallet Type NOREF
RCD.Pallet_Type_NOREF = LCL.Pallet_Type_NOREF;

// RCD.OD Pallet Type = LCL.Pallet Type NOREF
RCD.OD_Pallet_Type = LCL.Pallet_Type_NOREF;

//?If Palletize flag is Yes, select Pallet Type
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed when Palletize = N.'
ERROR(USR5218);
MSGPARM(RCD.Pallet_Type_NOREF);

ENDIF;

ENDIF;

//?Validate entered fields and load data to output record
//?Fields from Item Master Checking
//?02/15/23 DN W110809-Replaced PDC3XFR with PUX7XFR.
// Call program Rtv f/Copy Orders TemplXF.
CALL PROGRAM(Rtv f/Copy Orders TemplXF) ('PUX7XFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Order_Desc_Line_One);
PARAMETER(RCD.Order_Desc_Line_Two);
PARAMETER(RCD.U_M_Ordered);
PARAMETER(RCD.U_M_Base_Price);
PARAMETER(RCD.Unit_Weight_Ordered_U_M);
PARAMETER(RCD.Item_Level);
PARAMETER(RCD.Production_Date_Control);
PARAMETER(RCD.Catch_Weight_Status);
PARAMETER(RCD.Item_Structure_Class_Code);
PARAMETER(RCD.Item_Structure_Group_Code);
PARAMETER(RCD.Item_Structure_Type_Code);
PARAMETER(WRK.Default_Commod_Mark_basis);
PARAMETER(WRK.Transportation_Temp);
PARAMETER(WRK.Item_Type_Code);
PARAMETER(WRK.Commodity_Price_Group);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(WRK.Price_Method_Code);
PARAMETER(WRK.Fresh_Chilling_Time);
PARAMETER(WRK.Variety_Rendered_Cut);
PARAMETER(RCD.OD_Item_Target_Price);
PARAMETER(LCL.Sold_100_Percent_Frozen);
PARAMETER(WRK.Error_Status);

//?** Wrap in an XF due to too many files          E00396
// Call program Rtv Item Def/TFExp/CO XF.
CALL PROGRAM(Rtv Item Def/TFExp/CO XF) ('PNNCXFR');
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.TF_Co_Ownership_Sts);
PARAMETER(RCD.Ord_TF_Exempt_Code);

//?**
// Call program Rtv Plan Prod Sts     XF.
CALL PROGRAM(Rtv Plan Prod Sts     XF) ('PNHKXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.OD_Production_Plan_Sts);

CASE;

// IF CTL.Order Type - Sales is Transfer Order
IF CTL.Order_Type_Sales = 'TR';

// RCD.OD Production Plan Sts = CND.No
RCD.OD_Production_Plan_Sts = 'N';

ENDIF;

//?**
//?02/17/23 DN W110809-Changed to use CTL.Warehouse Code instead of RCD Ctxt.
EXECUTE FUNCTION(Rtv Whs Typ/FZNCHLTME IF) TYPE(EXCINTFUN)                      AC1423925;
PARAMETER(RCD.Company_Number);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(WRK.Warehouse_Type);
PARAMETER(WRK.Fresh_Chilling_Time);

//?Item Not found
CASE;

// IF WRK.Error Status is yes
IF WRK.Error_Status = 'Y';

// Send error message - 'Company Item not found.'
ERROR(USR0326);
MSGPARM(WRK.Company_Number);
MSGPARM(RCD.Item_Code);

ENDIF;

//?Default Warehouse
CASE;

// IF PAR.Allow Mult Whse to Order is yes
IF PAR.Allow_Mult_Whse_to_Order = 'Y';

//?Warehouse code from Item master
CASE;

// IF RCD.Warehouse Code is Warehouse Code Blank
IF RCD.Warehouse_Code = *BLANK;

// RCD.Warehouse Code = WRK.Warehouse Code
RCD.Warehouse_Code = WRK.Warehouse_Code;

ENDIF;

//?Default Warehouse
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.Warehouse Code EQ WRK.BLANK
IF RCD.Warehouse_Code = WRK.BLANK;

// RCD.Warehouse Code = CTL.Warehouse Code
RCD.Warehouse_Code = CTL.Warehouse_Code;

ENDIF;

ENDIF;

// Call program Val ItmBal.Unit Cst    XF.
CALL PROGRAM(Val ItmBal.Unit Cst    XF) ('PDMCXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(WRK.Unit_Cost_Per_Pound);
PARAMETER(WRK.Error_Status);

//?Error if no item balance or 0 unit cost
CASE;

// IF WRK.Error Status is yes
IF WRK.Error_Status = 'Y';

// Send error message - 'Item Balance not found.'
ERROR(USR0328);
MSGPARM(RCD.Company_Number);
MSGPARM(RCD.Item_Code);
MSGPARM(RCD.Warehouse_Code);

//?Error if no item balance or 0 unit cost
// IF WRK.Unit Cost Per Pound EQ WRK.ZERO
IF WRK.Unit_Cost_Per_Pound = WRK.ZERO;

// Send error message - 'Unit Cost for Warehouse &2 Cannot Be 0'
ERROR(USR2343);
MSGPARM(RCD.Item_Code);
MSGPARM(RCD.Warehouse_Code);

ENDIF;

//?Quantity is required.
CASE;

// IF RCD.Qty Ordered USR is Equal to Zero
IF RCD.Qty_Ordered_USR = *ZERO;

// Send error message - 'Value Required.'
ERROR(USR2625);
MSGPARM(RCD.Qty_Ordered_USR);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

ENDIF;

//?FP1309  INSERT validation on the item age day/from & to
//?Palletize is required.
CASE;

// IF RCD.Palletize is blank
IF RCD.Palletize = *BLANK;

// Send error message - 'Value Required.'
ERROR(USR2808);
MSGPARM(RCD.Palletize);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

ENDIF;

//?Slip Sheet is required.
CASE;

// IF RCD.Slip Sheet is blank
IF RCD.Slip_Sheet = *BLANK;

// Send error message - 'Value Required.'
ERROR(USR2808);
MSGPARM(RCD.Slip_Sheet);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

ENDIF;

//?Item must be FG
CASE;

// IF WRK.Item Type Code is Not Finished Good
IF WRK.Item_Type_Code <> 'FG';

// Send error message - 'Ordered Items must be Finished Goods.'
ERROR(USR1941);
MSGPARM(RCD.Item_Code);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

ENDIF;

//?Validate TO Whse's Item Balance (Transfers only)
CASE;

// IF CTL.Billing Activity Type is Warehouse Transfer
IF CTL.Billing_Activity_Type = '4';

// Call program Val ItmBal.Unit Cst    XF.
CALL PROGRAM(Val ItmBal.Unit Cst    XF) ('PDMCXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(WRK.Warehouse_Code_Transfer);
PARAMETER(WRK.Unit_Cost_Per_Pound);
PARAMETER(WRK.Error_Status);

//?Error if no item balance
CASE;

// IF WRK.Error Status is yes
IF WRK.Error_Status = 'Y';

// Send error message - 'Item Balance for "To" transfer warehouse not found'
ERROR(USR2340);
MSGPARM(RCD.Item_Code);
MSGPARM(RCD.Warehouse_Code);

//?Error if no item balance
// IF WRK.Unit Cost Per Pound EQ WRK.ZERO
IF WRK.Unit_Cost_Per_Pound = WRK.ZERO;

// Send error message - 'Unit Cost for Warehouse &2 Cannot Be 0'
ERROR(USR2343);
MSGPARM(RCD.Item_Code);
MSGPARM(WRK.Warehouse_Code_Transfer);

ENDIF;

ENDIF;

//?Regular order type and Bulk item
CASE;

// IF CTL.Load Type is Regular
IF CTL.Load_Type = 'R';

// AND WRK.Variety/Rendered/Cut is Rendered
AND WRK.Variety_Rendered_Cut = 'R';

// Send error message - 'Bulk items can not be on regular order type.'
ERROR(USR1881);
MSGPARM(RCD.Item_Code);

ENDIF;

//?Bulk Load type and non-bulk item
CASE;

// IF CTL.Load Type is Bulk
IF CTL.Load_Type = 'B';

// AND WRK.Variety/Rendered/Cut is Not Bulk Item
AND WRK.Variety_Rendered_Cut = 'C'/*BLANK/'V';

// Send error message - 'Only bulk items can be on a bulk order load type.'
ERROR(USR1882);
MSGPARM(RCD.Item_Code);

ENDIF;

//?04/10/07 Effective 04/23/07 representation of Age Code changes
//?         will be such that Age Code A will be 0 day for boxes
//?         and combos.  The labels on the cartons will not print
//?         a date that is offset by Sunday or Holiday.  Instead of
//?         Code Date, it will be the Pack Date.
//?FP1309 * OUT the default of age.
//?FP1309 * place what is the validation on the item age and from/to
EXECUTE FUNCTION(Val Age Information   IF) TYPE(EXCINTFUN)                      AC1984951;
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Scheduled_Ship_Date);
PARAMETER(CTL.Requested_Delivery_Date);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);
PARAMETER(WRK.Production_AgeDte_Fr);
PARAMETER(WRK.Production_AgeDte_To);
PARAMETER(WRK.Error_Status);
PARAMETER(PAR.Company_Organization);
PARAMETER('V');

//?Validate Ham Group.
DO;

//?5/11/07 PKD If an Item is belongs to a Ham Group, then a Group
//?            must be specified.
// Call program Val Item              XF.
CALL PROGRAM(Val Item              XF) ('PMG1XFR');
PARAMETER(RCD.Item_Code);
PARAMETER(LCL.Record_Found_USR);

//?REQ:  Ham Group
CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

CASE;

// IF RCD.Ham Group Number is Not Entered
IF RCD.Ham_Group_Number = *ZERO;

// Send error message - 'Ham Group is required for Item &1.'
ERROR(USR3717);
MSGPARM(RCD.Item_Code);

ENDIF;

ENDIF;

CASE;

// IF RCD.Ham Group Number is Entered
IF RCD.Ham_Group_Number <> *ZERO;

//?Check for Ham Group/Item. (only warning).
DO;

CASE;

// IF WRK.Error Status is no
IF WRK.Error_Status = 'N';

EXECUTE FUNCTION(Rtv Credit Item Sts   RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1326370;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(LCL.Credit_Item_Status);

CASE;

// IF LCL.Credit Item Status is yes
IF LCL.Credit_Item_Status = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(VAL Ham Group/Item     RT) TYPE(RTVOBJ) FILE(PDM1REP)          AC1568020;
PARAMETER(RCD.Ham_Group_Number);
PARAMETER(RCD.Item_Code);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Item not defined in ham group.'
ERROR(USR2876);
MSGPARM(RCD.Item_Code);
MSGPARM(RCD.Ham_Group_Number);

ENDIF;

ENDIF;

ENDIF;

ENDDO;

ENDIF;

ENDDO;

// RCD.Country Code = CTL.Country Code
RCD.Country_Code = CTL.Country_Code;

// Call program Val Manual Price      XF.
CALL PROGRAM(Val Manual Price      XF) ('POA5XFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(LCL.Description_Line_One);
PARAMETER(LCL.Default_Commod_Mark_basis);
PARAMETER(LCL.Market_Overage);
PARAMETER(LCL.Standard_Overage_Underage);
PARAMETER(LCL.Commodity_Price_Group);
PARAMETER(LCL.Std_Weight_Head_Var_Ren);
PARAMETER(LCL.Primal_Group_Code);

//?Validate: OD MPR Prc Ready to send                  e2540 4/08/13 RMC
CASE;

// IF RCD.OD MPR Prc Ready to Send is MPR Ready Sts
IF RCD.OD_MPR_Prc_Ready_to_Send = *BLANK/'X'/'N'/'Y';

CASE;

// IF RCD.OD MPR Prc Ready to Send is yes
IF RCD.OD_MPR_Prc_Ready_to_Send = 'Y';

CASE;

// IF RCD.Price Overage Override is GT .01
IF RCD.Price_Overage_Override > .01;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Cannot Send to MPR with price &1'
ERROR(USR4591);
MSGPARM(RCD.Price_Overage_Override);

ENDIF;

ENDIF;

//?Validate: OD MPR Prc Ready to send                  e2540 4/08/13 RMC
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.OD MPR Prc Ready to Send = CND.blank
RCD.OD_MPR_Prc_Ready_to_Send = *BLANK;

ENDIF;

EXECUTE FUNCTION(Edt OD Pricing Validt IF) TYPE(EXCINTFUN)                      AC1994988;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Market_Pricing_Date);
PARAMETER(RCD.Commodity_Market_Code);
PARAMETER(RCD.Date_Method_Code);
PARAMETER(RCD.Price_Method_Code);
PARAMETER(RCD.Price_Overage_Override);
PARAMETER(RCD.U_M_Base_Price);
PARAMETER(RCD.Quantity_Ordered);
PARAMETER(RCD.Weight_Ordered);
PARAMETER(RCD.Unit_Price_Credit);
PARAMETER(RCD.Unit_Weight_Ordered_U_M);
PARAMETER(CTL.Scheduled_Ship_Date);
PARAMETER(RCD.Price_Code);
PARAMETER(RCD.OD_Ceiling_Price);
PARAMETER(RCD.OD_Market_Begin_Date);
PARAMETER(RCD.OD_Market_Ending_Date);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(PAR.Type_Code);
PARAMETER(LCL.Default_Commod_Mark_basis);
PARAMETER(LCL.Market_Overage);
PARAMETER(LCL.Commodity_Price_Group);
PARAMETER(LCL.Primal_Group_Code);
PARAMETER(CTL.Absorbed_Freight_Rate_CWT);
PARAMETER(CTL.Billing_Activity_Type);
PARAMETER(RCD.USR_Display_4);
PARAMETER(WRK.Error_Status);

EXECUTE FUNCTION(EDT Order Detail Edits IF) TYPE(EXCINTFUN)                     AC1425282;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Market_Pricing_Date);
PARAMETER(RCD.Commodity_Market_Code);
PARAMETER(RCD.Date_Method_Code);
PARAMETER(RCD.Price_Method_Code);
PARAMETER(RCD.Price_Overage_Override);
PARAMETER(WRK.Contract_Number);
PARAMETER(RCD.Pricing_Date_Used);
PARAMETER(RCD.Quantity_11_2_USR);
PARAMETER(PAR.Cntrt_Enter_no_QT_Price);
PARAMETER(PAR.Cntrt_#_does_not_Exit);
PARAMETER(PAR.Qty_ordered_Contract);
PARAMETER(PAR.Contract_Expired);
PARAMETER(PAR.Price_Override_Required);
PARAMETER(PAR.Price_Method_QT_Cntrt_0);
PARAMETER(PAR.Prc_Code_FRM_or_MKT);
PARAMETER(PAR.Mkt_Pricing_Date_not_0);
PARAMETER(PAR.Mkt_Meth_and_Date_both);
PARAMETER(PAR.Price_Override_Req_EXT);
PARAMETER(PAR.Contract_Exists_for_Item);
PARAMETER(PAR.Price_Override_not_Allowd);
PARAMETER(JOB.*Job_date);
PARAMETER(PAR.Price_Method_Type);

//?** Wrap in an XF due to too many files          E00396
// Call program RTV Actv Descr, Ctrl   XF.
CALL PROGRAM(RTV Actv Descr, Ctrl   XF) ('PNH4XFR');
PARAMETER(RCD.Warehouse_Code);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Trans_Contol_AS400_Plant);

//?Error condition warehouse not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Warehouse Codes not found.'
ERROR(USR0007);
MSGPARM(RCD.Warehouse_Code);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

//?Error condition warehouse not found
// IF WRK.Trans Contol AS400/Plant NE CTL.Trans Contol AS400/Plant
IF WRK.Trans_Contol_AS400_Plant <> CTL.Trans_Contol_AS400_Plant;

// Send error message - 'Warehouse Control &2 not allowed on order with Plant/AS400 = &3.'
ERROR(USR1920);
MSGPARM(RCD.Warehouse_Code);
MSGPARM(WRK.Trans_Contol_AS400_Plant);
MSGPARM(CTL.Trans_Contol_AS400_Plant);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

ENDIF;

// RCD.Weight Ordered = RCD.Quantity Ordered * RCD.Unit Weight Ordered U/M *
RCD.Weight_Ordered = RCD.Quantity_Ordered * RCD.Unit_Weight_Ordered_U_M;

//?weight ordered
CASE;

// IF RCD.Order Secondary Line Seq is GT 1
IF RCD.Order_Secondary_Line_Seq > 1;

// RCD.Weight 11.2 USR = RCD.Quantity 11.2 USR * RCD.Unit Weight Ordered U/M *
RCD.Weight_11_2_USR = RCD.Quantity_11_2_USR * RCD.Unit_Weight_Ordered_U_M;

//?weight ordered
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Weight 11.2 USR = RCD.Weight Ordered
RCD.Weight_11_2_USR = RCD.Weight_Ordered;

ENDIF;

//?11/04/09 PKD E00519 Warehouse and Item Access by User
// Call program Val App Whs Itm Acs   XF.
CALL PROGRAM(Val App Whs Itm Acs   XF) ('PNMOXFR');
PARAMETER(JOB.*USER);
PARAMETER('O/P');
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Item_Code);
PARAMETER(LCL.WHS_Item_Access_Sts_USR);

//?VAL: Warhouse Item Acess
CASE;

// IF LCL.WHS/Item Access Sts USR is Access Denied
IF LCL.WHS_Item_Access_Sts_USR = 'D';

// Send error message - 'Access Denied to &2 for Item &1.'
ERROR(USR4202);
MSGPARM(RCD.Item_Code);
MSGPARM(JOB.*USER);

QUIT;

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

ENDIF;

// RCD.Requested Ship Date = CTL.Requested Ship Date
RCD.Requested_Ship_Date = CTL.Requested_Ship_Date;

// RCD.Scheduled Ship Date = CTL.Scheduled Ship Date
RCD.Scheduled_Ship_Date = CTL.Scheduled_Ship_Date;

// Call program Rtv Cust Tf Exempt    XF.
CALL PROGRAM(Rtv Cust Tf Exempt    XF) ('PPSMXFR');
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Customer_TF_Exempt_Code);

EXECUTE FUNCTION(Set/Val OH TF Exempt  IF) TYPE(EXCINTFUN)                      AC1960076;
PARAMETER(CTL.OH_TF_Exempt_Code);
PARAMETER(RCD.Ord_TF_Exempt_Code);
PARAMETER(RCD.Item_Code);
PARAMETER(WRK.Error_Status);
PARAMETER(CTL.Customer_TF_Exempt_Code);
PARAMETER(RCD.TF_Co_Ownership_Sts);

//?Item structure
CASE;

// IF WRK.Error Status is yes
IF WRK.Error_Status = 'Y';

//?Item structure
// IF *OTHERWISE
IF *OTHERWISE;

//?Validate Item Level
CASE;

// IF RCD.Item Level NE WRK.BLANK
IF RCD.Item_Level <> WRK.BLANK;

// Call program VAL Item Level Exists  XF.
CALL PROGRAM(VAL Item Level Exists  XF) ('PNH3XFR');
PARAMETER(RCD.Item_Level);

//?Error if not found
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Error if not found
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Item Level not found.'
ERROR(USR2076);
MSGPARM(RCD.Item_Code);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?VAL: Signal Demand Price Method Required
CASE;

// IF PAR.SD Price Mthd Req STS USR is yes
IF PAR.OD_Price_Type_Req_STS_USR = 'Y';

// AND RCD.OD SD Price Method is *NONE
AND RCD.OD_Price_Type = *BLANK;

// AND CTL.Order Type - Sales is Regular Order
AND CTL.Order_Type_Sales = 'OR';

// Send error message - 'Price Type Required.'
ERROR(USR3952);
MSGPARM(RCD.OD_Price_Type);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

ENDIF;

//?VAL: Pallet Type                               9/15/21 WI464
CASE;

// IF RCD.Palletize is yes
IF RCD.Palletize = 'Y';

//?If Pallet Type is blank, send error message
CASE;

// IF RCD.Pallet Type NOREF is Not entered
IF RCD.Pallet_Type_NOREF = *BLANK;

// Send error message - 'Pallet Type is required.'
ERROR(USR3954);
MSGPARM(RCD.Pallet_Type_NOREF);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

ENDIF;

ENDIF;

//?Validate: Pallet Type of 'PLT' only.           9/15/21 WI464
CASE;

// IF RCD.Pallet Type NOREF is Entered
IF RCD.Pallet_Type_NOREF <> *BLANK;

EXECUTE FUNCTION(Chk Pallet Typ Exists RT) TYPE(RTVOBJ) FILE(PUB6CPP)           AC2198492;
PARAMETER(RCD.Pallet_Type_NOREF);
PARAMETER(LCL.Record_Found_USR);

//?If Active Pallet Type not found, send error message
CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'Active Pallet Type not found.'
ERROR(USR5213);
MSGPARM(RCD.Pallet_Type_NOREF);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

ENDIF;

ENDIF;

//?02/15/23 DN W110809-Validate Item Sold 100% Frozen/Fresh.
CASE;

// IF RCD.Item Code is Entered
IF RCD.Item_Code <> *ZERO;

//?Send Warning Message if Mismatch.
CASE;

// IF WRK.Warehouse Type is Fresh
IF WRK.Warehouse_Type = 'FR';

// AND LCL.Sold 100 Percent Frozen is yes
AND LCL.Sold_100_Percent_Frozen = 'Y';

// Send error message - 'Item Invalid-it is sold 100% FZ'
ERROR(USR4740);
MSGPARM(RCD.Item_Code);

QUIT;

//?Send Warning Message if Mismatch.
// IF WRK.Warehouse Type is Frozen
IF WRK.Warehouse_Type = 'FZ';

// AND LCL.Sold 100 Percent Frozen is Not Yes
AND LCL.Sold_100_Percent_Frozen = *BLANK/'N';

//?Allow this since Order Entry logic allows to go through. Too
//?many exceptions.
// Send information message - 'Warning: Item &1 not sold 100% frozen.'
MESSAGE(USR5160 *INFO);
MSGPARM(RCD.Item_Code);

ENDIF;

ENDIF;

ENDDO;

ENDIF;

//?Processing when no error encountered
CASE;

// IF WRK.Error Status is yes
IF WRK.Error_Status = 'Y';

//?Processing when no error encountered
// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

//?Processing when no error encountered
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

//?USER: Validate subfile record relations

CASE;

// IF RCD.*SFLSEL is *Comments
IF RCD.*SFLSEL = '8'/'8';

// Call program EDT Detail Comments    EF.
CALL PROGRAM(EDT Detail Comments    EF) ('PDDWEFR');
PARAMETER(RCD.Company_Number);
PARAMETER(9999999);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Ship_To_Name);
PARAMETER(CTL.Requested_Ship_Date);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF RCD.*SFLSEL is *Change
IF RCD.*SFLSEL = '2';

// Call program Edt Age Information   E1.
CALL PROGRAM(Edt Age Information   E1) ('PNO3E1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER('N');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF RCD.*SFLSEL is Option 7
IF RCD.*SFLSEL = '7'/'7';

// Call program Edt OrdDtl Pricing    ER.
CALL PROGRAM(Edt OrdDtl Pricing    ER) ('PNQBE1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(CRT PD Order Detail    CR) TYPE(CRTOBJ) FILE(OPBGWKP)          AC1425283;
PARAMETER(CTL.Company_Number);
PARAMETER(9999999);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(RCD.Order_Group_Code);
PARAMETER(RCD.Detail_Line_Status);
PARAMETER(WRK.BLANK);
PARAMETER(RCD.Billing_Detail_Cost_Dol);
PARAMETER(RCD.Billing_Detail_Gross_Dol);
PARAMETER(RCD.Billing_Detail_Net_Dol);
PARAMETER(RCD.Quantity_to_Substitute);
PARAMETER(CTL.Comment_Print_Acknowledge);
PARAMETER(CTL.Comment_Print_Inv_Cr_Memo);
PARAMETER(CTL.Comment_Print_Pick_Slip);
PARAMETER(CTL.Comment_Print_Ship_Doc);
PARAMETER(RCD.Extended_Amount);
PARAMETER(RCD.Market_Pricing_Date);
PARAMETER(RCD.Commodity_Market_Code);
PARAMETER(RCD.Date_Method_Code);
PARAMETER(RCD.Price_Method_Code);
PARAMETER(RCD.Price_Overage_Override);
PARAMETER(RCD.Contract_Number);
PARAMETER(RCD.Price_Status);
PARAMETER(RCD.Pricing_Date_Used);
PARAMETER(RCD.U_M_Base_Price);
PARAMETER(RCD.U_M_Ordered);
PARAMETER(RCD.Work_Confirm_Status);
PARAMETER(RCD.Work_Over_Short_Status);
PARAMETER(RCD.OD_Production_Plan_Sts);
PARAMETER(RCD.Order_Desc_Line_One);
PARAMETER(RCD.Order_Desc_Line_Two);
PARAMETER(*BLANK);
PARAMETER(RCD.Palletize);
PARAMETER(RCD.Slip_Sheet);
PARAMETER(RCD.Catch_Weight_Status);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(RCD.Production_Date_Control);
PARAMETER(RCD.Rated_Freight);
PARAMETER(RCD.Quantity_Ordered);
PARAMETER(RCD.Weight_Ordered);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
PARAMETER(RCD.Quantity_Shipped_Total);
PARAMETER(RCD.Weight_Shipped_Total);
PARAMETER(RCD.Unit_Cost_Pricing_U_M);
PARAMETER(RCD.Unit_Cost_Per_Pound);
PARAMETER(RCD.Unit_Price);
PARAMETER(RCD.Unit_Price_Credit);
PARAMETER(RCD.Unit_Price_Ordered_U_M);
PARAMETER(RCD.Unit_Weight_Ordered_U_M);
PARAMETER(RCD.Tare_Weight_Total);
PARAMETER(CTL.Requested_Ship_Date);
PARAMETER(CTL.Scheduled_Ship_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(PAR.Affect_Inventory_Status);
PARAMETER(PAR.Affect_Sales_Doll_Status);
PARAMETER(PAR.Affect_Sales_Pnds_Status);
PARAMETER(RCD.Item_Structure_Type_Code);
PARAMETER(RCD.Item_Structure_Group_Code);
PARAMETER(RCD.Item_Structure_Class_Code);
PARAMETER(RCD.Item_Level);
PARAMETER(RCD.Quality_Level);
PARAMETER(RCD.Pricing_Product_Class_Rep);
PARAMETER(RCD.Season_Product_Class_Repo);
PARAMETER(RCD.Date_of_Original_Entry);
PARAMETER(JOB.*USER);
PARAMETER(RCD.Country_Code);
PARAMETER('01');
PARAMETER(RCD.Reason_Code);
PARAMETER(RCD.Sales_Route_Code);
PARAMETER(RCD.Modified_Flag);
PARAMETER(RCD.Substituted_Flag);
PARAMETER(RCD.OD_Schedule_Override_Sts);
PARAMETER(RCD.Invoice_Unit_Price);
PARAMETER(RCD.Invoice_Extended_Amt);
PARAMETER(RCD.Ham_Group_Number);
PARAMETER(RCD.OD_Adj_Type_Override);
PARAMETER(RCD.Affect_Trade_Fund);
PARAMETER(RCD.Affect_Commission);
PARAMETER(RCD.Affect_Pricing);
PARAMETER(RCD.Released_by_User_Sts_Y_N);
PARAMETER(RCD.Ord_TF_Exempt_Code);
PARAMETER(RCD.Pallet_Type_NOREF);
PARAMETER(RCD.Production_Warehouse);
PARAMETER(RCD.OD_Price_Type);
PARAMETER(RCD.Warehouse_Pallets_Loaded);
PARAMETER(RCD.Consumed_Item_Code);
PARAMETER(RCD.Deadline_Depart_Date_LH);
PARAMETER(RCD.OD_Price_Type_Ref_Num);
PARAMETER(RCD.OD_Firm_Date);
PARAMETER(RCD.Deadline_Depart_Time_LH);
PARAMETER(RCD.Price_Code);
PARAMETER(RCD.Maximum_Net_Weight);
PARAMETER(RCD.Substitution_Line_Number);
PARAMETER(RCD.Max_Qty_to_sched_per_day);
PARAMETER(RCD.Warehouse_Pallet_Tare);
PARAMETER(RCD.Warehouse_Avg_Pallet_Tare);
PARAMETER(RCD.OD_Item_Target_Price);
PARAMETER(RCD.OD_Estimated_Gross_Weight);
PARAMETER(RCD.OD_Maximum_Unit_Weight);
PARAMETER(RCD.Order_Gate_Final_Price);
PARAMETER(RCD.OD_Ceiling_Price);
PARAMETER(RCD.OD_Gate_Final_Price_Adj);
PARAMETER(RCD.OD_Weighted_Avg_Price);
PARAMETER(RCD.OD_Original_Ordered_Qty);
PARAMETER(RCD.OD_Cancel_Date);
PARAMETER(RCD.OD_Unused_Prc_7);
PARAMETER(RCD.OD_Unused_Prc_8);
PARAMETER(RCD.OD_MPR_Sent_to_USDA_Sts);
PARAMETER(RCD.OD_MPR_Prc_Ready_to_Send);
PARAMETER(RCD.OD_UnUsed_Price_Sts_3);
PARAMETER(RCD.Weight_Amount_Entered);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(RCD.OD_Spot_Buy);
PARAMETER(RCD.OD_Clm_Full_Return_to_Plt);
PARAMETER(RCD.Order_Line_Error_Type);
PARAMETER(RCD.OD_Market_Begin_Date);
PARAMETER(RCD.OD_Market_Ending_Date);
PARAMETER(RCD.OD_Atch_to_Ord_ActShpDte);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);

//?USER: Change DBF record

EXECUTE FUNCTION(CHG PD Order Detail    CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1425286;
PARAMETER(RCD.Company_Number);
PARAMETER(9999999);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Order_Group_Code);
PARAMETER(RCD.Detail_Line_Status);
PARAMETER(RCD.Detail_Line_Status_Last);
PARAMETER(RCD.Billing_Detail_Cost_Dol);
PARAMETER(RCD.Billing_Detail_Gross_Dol);
PARAMETER(RCD.Billing_Detail_Net_Dol);
PARAMETER(RCD.Quantity_to_Substitute);
PARAMETER(RCD.Comment_Print_Acknowledge);
PARAMETER(RCD.Comment_Print_Inv_Cr_Memo);
PARAMETER(RCD.Comment_Print_Pick_Slip);
PARAMETER(RCD.Comment_Print_Ship_Doc);
PARAMETER(RCD.Extended_Amount);
PARAMETER(RCD.Market_Pricing_Date);
PARAMETER(RCD.Commodity_Market_Code);
PARAMETER(RCD.Date_Method_Code);
PARAMETER(RCD.Price_Method_Code);
PARAMETER(RCD.Price_Overage_Override);
PARAMETER(RCD.Contract_Number);
PARAMETER(RCD.Price_Status);
PARAMETER(RCD.Pricing_Date_Used);
PARAMETER(RCD.U_M_Base_Price);
PARAMETER(RCD.U_M_Ordered);
PARAMETER(RCD.Work_Confirm_Status);
PARAMETER(RCD.Work_Over_Short_Status);
PARAMETER(RCD.OD_Production_Plan_Sts);
PARAMETER(RCD.Order_Desc_Line_One);
PARAMETER(RCD.Order_Desc_Line_Two);
PARAMETER(*BLANK);
PARAMETER(RCD.Palletize);
PARAMETER(RCD.Slip_Sheet);
PARAMETER(RCD.Catch_Weight_Status);
PARAMETER(RCD.Price_Audit);
PARAMETER(RCD.Price_Audit_Reason_Code);
PARAMETER(RCD.Production_Date_Control);
PARAMETER(RCD.Rated_Freight);
PARAMETER(RCD.Quantity_Ordered);
PARAMETER(RCD.Weight_Ordered);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
PARAMETER(RCD.Quantity_Shipped_Total);
PARAMETER(RCD.Weight_Shipped_Total);
PARAMETER(RCD.Unit_Cost_Pricing_U_M);
PARAMETER(RCD.Unit_Cost_Per_Pound);
PARAMETER(RCD.Unit_Price);
PARAMETER(RCD.Unit_Price_Credit);
PARAMETER(RCD.Unit_Price_Ordered_U_M);
PARAMETER(RCD.Unit_Weight_Ordered_U_M);
PARAMETER(RCD.Tare_Weight_Total);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Affect_Inventory_Status);
PARAMETER(RCD.Affect_Sales_Doll_Status);
PARAMETER(RCD.Affect_Sales_Pnds_Status);
PARAMETER(RCD.Item_Structure_Type_Code);
PARAMETER(RCD.Item_Structure_Group_Code);
PARAMETER(RCD.Item_Structure_Class_Code);
PARAMETER(RCD.Item_Level);
PARAMETER(RCD.Quality_Level);
PARAMETER(RCD.Pricing_Product_Class_Rep);
PARAMETER(RCD.Season_Product_Class_Repo);
PARAMETER(RCD.Date_of_Original_Entry);
PARAMETER(RCD.User_Profile_Name);
PARAMETER(RCD.Country_Code);
PARAMETER(RCD.Event_Code);
PARAMETER(RCD.Reason_Code);
PARAMETER(RCD.Sales_Route_Code);
PARAMETER(RCD.Modified_Flag);
PARAMETER(RCD.Substituted_Flag);
PARAMETER(RCD.OD_Schedule_Override_Sts);
PARAMETER(RCD.Invoice_Unit_Price);
PARAMETER(RCD.Invoice_Extended_Amt);
PARAMETER(RCD.Ham_Group_Number);
PARAMETER(RCD.OD_Adj_Type_Override);
PARAMETER(RCD.Affect_Trade_Fund);
PARAMETER(RCD.Affect_Commission);
PARAMETER(RCD.Affect_Pricing);
PARAMETER(RCD.Released_by_User_Sts_Y_N);
PARAMETER(RCD.Ord_TF_Exempt_Code);
PARAMETER(RCD.Pallet_Type_NOREF);
PARAMETER(RCD.Production_Warehouse);
PARAMETER(RCD.OD_Price_Type);
PARAMETER(RCD.Warehouse_Pallets_Loaded);
PARAMETER(RCD.Consumed_Item_Code);
PARAMETER(RCD.Deadline_Depart_Date_LH);
PARAMETER(RCD.OD_Price_Type_Ref_Num);
PARAMETER(RCD.OD_Firm_Date);
PARAMETER(RCD.Deadline_Depart_Time_LH);
PARAMETER(RCD.Price_Code);
PARAMETER(RCD.Maximum_Net_Weight);
PARAMETER(RCD.Substitution_Line_Number);
PARAMETER(RCD.Max_Qty_to_sched_per_day);
PARAMETER(RCD.Warehouse_Pallet_Tare);
PARAMETER(RCD.Warehouse_Avg_Pallet_Tare);
PARAMETER(RCD.OD_Item_Target_Price);
PARAMETER(RCD.OD_Estimated_Gross_Weight);
PARAMETER(RCD.OD_Maximum_Unit_Weight);
PARAMETER(RCD.Order_Gate_Final_Price);
PARAMETER(RCD.OD_Ceiling_Price);
PARAMETER(RCD.OD_Gate_Final_Price_Adj);
PARAMETER(RCD.OD_Weighted_Avg_Price);
PARAMETER(RCD.OD_Original_Ordered_Qty);
PARAMETER(RCD.OD_Cancel_Date);
PARAMETER(RCD.OD_Unused_Prc_7);
PARAMETER(RCD.OD_Unused_Prc_8);
PARAMETER(RCD.OD_MPR_Sent_to_USDA_Sts);
PARAMETER(RCD.OD_MPR_Prc_Ready_to_Send);
PARAMETER(RCD.OD_UnUsed_Price_Sts_3);
PARAMETER(RCD.Weight_Amount_Entered);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);
PARAMETER(RCD.OD_Spot_Buy);
PARAMETER(RCD.OD_Clm_Full_Return_to_Plt);
PARAMETER(RCD.Order_Line_Error_Type);
PARAMETER(RCD.OD_Market_Begin_Date);
PARAMETER(RCD.OD_Market_Ending_Date);
PARAMETER(RCD.OD_Atch_to_Ord_ActShpDte);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);

//?USER: Extra processing after DBF update

// PAR.USR Update Flag = CND.Yes
PAR.USR_Update_Flag = 'Y';

CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Delete line or change line status
CASE;

// IF RCD.Detail Line Status is Entered
IF RCD.Detail_Line_Status = 'E';

EXECUTE FUNCTION(DLT PD Order Detail    DL) TYPE(DLTOBJ) FILE(OPBGWKP)          AC1204566;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);

//?Delete line or change line status
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Detail Line Status Last = RCD.Detail Line Status
RCD.Detail_Line_Status_Last = RCD.Detail_Line_Status;

// RCD.Detail Line Status = CND.Cancelled
RCD.Detail_Line_Status = 'X';

EXECUTE FUNCTION(CHG Sts,Alloc          CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1425289;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Detail_Line_Status);
PARAMETER(RCD.Detail_Line_Status_Last);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);

//?Set substitutions
CASE;

// IF RCD.Substituted Flag is Substitutions Exist
IF RCD.Substituted_Flag = 'Y';

// WRK.Order Secondary Line Seq = RCD.Order Secondary Line Seq + CON.1
WRK.Order_Secondary_Line_Seq = RCD.Order_Secondary_Line_Seq + 1;

EXECUTE FUNCTION(DEL Substitutions/Line RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1441883;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(WRK.Order_Secondary_Line_Seq);

//?Set substitutions
// IF RCD.Order Secondary Line Seq is GT 1
IF RCD.Order_Secondary_Line_Seq > 1;

//?this is a substitution; check if there are any others
EXECUTE FUNCTION(RTV Substitutions      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1441770;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(*ZERO);
PARAMETER(WRK.Substitution_Flag);

//?Set substituted flag
CASE;

// IF WRK.Substitution Flag is yes
IF WRK.Substitution_Flag = 'Y';

// RCD.Substituted Flag = CND.Substitutions Exist
RCD.Substituted_Flag = 'Y';

//?Set substituted flag
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Substituted Flag = CND.No Substitutions Exist
RCD.Substituted_Flag = *BLANK;

ENDIF;

EXECUTE FUNCTION(CHG Substitution Flag  CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1440670;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(1);
PARAMETER(RCD.Substituted_Flag);

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(CHG Sts,Alloc          CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1425289;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Detail_Line_Status);
PARAMETER(RCD.Detail_Line_Status_Last);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process command keys

//?02/15/23 DN W110809-Use XF to Validate. Exceeded 50 Files Limitation.
// Call program Val Order Hdr Exists  XF.
CALL PROGRAM(Val Order Hdr Exists  XF) ('PUX8XFR');
PARAMETER(CTL.Company_Number);
PARAMETER(9999999);
PARAMETER(PGM.*Return_code);

//?Create or change order in Qtemp
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(Chg Order Header       CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1113751;
PARAMETER(CTL.Company_Number);
PARAMETER(9999999);
PARAMETER(CTL.Order_Type_Sales);
PARAMETER(CTL.AR_Customer_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Ship_To_Name);
PARAMETER(CTL.Ship_To_Address_Line_1);
PARAMETER(CTL.Ship_To_Address_Line_2);
PARAMETER(CTL.Ship_To_Address_Line_3);
PARAMETER(CTL.Ship_To_City);
PARAMETER(CTL.Ship_To_State_Code);
PARAMETER(CTL.Ship_To_Zip_Postal_Code);
PARAMETER(CTL.Bill_to_Customer);
PARAMETER(CTL.Bill_to_Name);
PARAMETER(CTL.Bill_to_Address_Line_1);
PARAMETER(CTL.Bill_to_Address_Line_2);
PARAMETER(CTL.Bill_to_Address_Line_3);
PARAMETER(CTL.Bill_to_City);
PARAMETER(CTL.Bill_to_State_Code);
PARAMETER(CTL.Bill_to_Zip_Postal_Code);
PARAMETER(CTL.Customer_Purchase_Order_#);
PARAMETER(CTL.Order_Date);
PARAMETER(CTL.Requested_Ship_Date);
PARAMETER(CTL.Actual_Shipped_Date);
PARAMETER(CTL.Cancel_Date);
PARAMETER(CTL.Terms_Code);
PARAMETER(CTL.Special_Instructions);
PARAMETER(CTL.Special_Instructions_2);
PARAMETER(CTL.Carrier_Code);
PARAMETER(CTL.Comment_Print_Acknowledge);
PARAMETER(CTL.Comment_Print_Inv_Cr_Memo);
PARAMETER(CTL.Comment_Print_Pick_Slip);
PARAMETER(CTL.Comment_Print_Ship_Doc);
PARAMETER(CTL.Reason_Code);
PARAMETER(CTL.Order_in_Use);
PARAMETER(CTL.Header_Status);
PARAMETER(CTL.Header_Status_Last);
PARAMETER('N');
PARAMETER(CTL.Scheduled_Ship_Date);
PARAMETER(CTL.User_Original_Entry);
PARAMETER(CTL.Date_of_Original_Entry);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('N');
PARAMETER('N');
PARAMETER('N');
PARAMETER(CTL.Requested_Delivery_Date);
PARAMETER(CTL.Requested_Delivery_Time);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(CTL.Absorbed_Freight_Rate_CWT);
PARAMETER(*ZERO);
PARAMETER(CTL.LTL_Flag);
PARAMETER(*BLANK);
PARAMETER('U');
PARAMETER(CTL.Shipping_Method);
PARAMETER(CTL.Export_Status);
PARAMETER(CTL.Palletize);
PARAMETER(CTL.Shrink_Wrap);
PARAMETER(CTL.Slip_Sheet);
PARAMETER(CTL.Age_Code);
PARAMETER(CTL.Reefer_Temperature);
PARAMETER(CTL.Load_Type);
PARAMETER(*ZERO);
PARAMETER(CTL.Load_Plan_Order);
PARAMETER(CTL.Print_Pick_Slip);
PARAMETER(*ZERO);
PARAMETER(CTL.Special_Comment_1);
PARAMETER(CTL.Special_Comment_2);
PARAMETER(CTL.Affect_Auto_Accruals);
PARAMETER(CTL.Sales_Route_Code);
PARAMETER(CTL.Manager_Level_Code);
PARAMETER(CTL.VP_Level_Code);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(CTL.Event_Code);
PARAMETER(CTL.Trans_Contol_AS400_Plant);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(CTL.Billing_Activity_Type);
PARAMETER('B');
PARAMETER(CTL.Order_Certification_Flag);
PARAMETER(*ZERO);
PARAMETER(WRK.Process_Sts_for_3C);
PARAMETER(WRK.Order_Conf_Fax_Sts);
PARAMETER(WRK.Manifest_Fax_Sts);
PARAMETER(WRK.Invoice_Fax_Sts);
PARAMETER(CTL.Transfer_in_Storage_Ind);
PARAMETER(CTL.Email_Cust_On_Order_Ship);
PARAMETER(WRK.Order_Emailed);
PARAMETER(CTL.Export_Docs_Go_w_Driver);
PARAMETER(CTL.Shipping_Temp_Code_C_F);
PARAMETER(CTL.Broker_Order_Status);
PARAMETER(WRK.Air_Freight_Order);
PARAMETER(WRK.Order_Requires_Review);
PARAMETER(WRK.OH_Load_Plan_Ready);
PARAMETER(WRK.Export_USDA_Approved);
PARAMETER(CTL.HPB_Ship_to_Warehouse);
PARAMETER(CTL.OH_TF_Exempt_Code);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(CTL.Time_of_Original_Entry);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);

//?Create or change order in Qtemp
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(CRT Order Header       CR) TYPE(CRTOBJ) FILE(OPBFCPP)          AC1113750;
PARAMETER(CTL.Company_Number);
PARAMETER(9999999);
PARAMETER(CTL.Order_Type_Sales);
PARAMETER(CTL.AR_Customer_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Ship_To_Name);
PARAMETER(CTL.Ship_To_Address_Line_1);
PARAMETER(CTL.Ship_To_Address_Line_2);
PARAMETER(CTL.Ship_To_Address_Line_3);
PARAMETER(CTL.Ship_To_City);
PARAMETER(CTL.Ship_To_State_Code);
PARAMETER(CTL.Ship_To_Zip_Postal_Code);
PARAMETER(CTL.Bill_to_Customer);
PARAMETER(CTL.Bill_to_Name);
PARAMETER(CTL.Bill_to_Address_Line_1);
PARAMETER(CTL.Bill_to_Address_Line_2);
PARAMETER(CTL.Bill_to_Address_Line_3);
PARAMETER(CTL.Bill_to_City);
PARAMETER(CTL.Bill_to_State_Code);
PARAMETER(CTL.Bill_to_Zip_Postal_Code);
PARAMETER(CTL.Customer_Purchase_Order_#);
PARAMETER(CTL.Order_Date);
PARAMETER(CTL.Requested_Ship_Date);
PARAMETER(CTL.Actual_Shipped_Date);
PARAMETER(CTL.Cancel_Date);
PARAMETER(CTL.Terms_Code);
PARAMETER(CTL.Special_Instructions);
PARAMETER(CTL.Special_Instructions_2);
PARAMETER(CTL.Carrier_Code);
PARAMETER(CTL.Comment_Print_Acknowledge);
PARAMETER(CTL.Comment_Print_Inv_Cr_Memo);
PARAMETER(CTL.Comment_Print_Pick_Slip);
PARAMETER(CTL.Comment_Print_Ship_Doc);
PARAMETER(CTL.Reason_Code);
PARAMETER(CTL.Order_in_Use);
PARAMETER(CTL.Header_Status);
PARAMETER(CTL.Header_Status_Last);
PARAMETER('N');
PARAMETER(CTL.Scheduled_Ship_Date);
PARAMETER(CTL.User_Original_Entry);
PARAMETER(CTL.Date_of_Original_Entry);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('N');
PARAMETER('N');
PARAMETER('N');
PARAMETER(CTL.Requested_Delivery_Date);
PARAMETER(CTL.Requested_Delivery_Time);
PARAMETER(*ZERO);
PARAMETER(CTL.Absorbed_Freight_Rate_CWT);
PARAMETER(*ZERO);
PARAMETER(CTL.LTL_Flag);
PARAMETER(*BLANK);
PARAMETER('U');
PARAMETER(CTL.Shipping_Method);
PARAMETER(CTL.Export_Status);
PARAMETER(CTL.Palletize);
PARAMETER(CTL.Shrink_Wrap);
PARAMETER(CTL.Slip_Sheet);
PARAMETER(CTL.Age_Code);
PARAMETER(CTL.Reefer_Temperature);
PARAMETER(CTL.Load_Type);
PARAMETER(*ZERO);
PARAMETER(CTL.Load_Plan_Order);
PARAMETER(CTL.Print_Pick_Slip);
PARAMETER(*ZERO);
PARAMETER(CTL.Special_Comment_1);
PARAMETER(CTL.Special_Comment_2);
PARAMETER(CTL.Affect_Auto_Accruals);
PARAMETER(CTL.Sales_Route_Code);
PARAMETER(CTL.Manager_Level_Code);
PARAMETER(CTL.VP_Level_Code);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(CTL.Event_Code);
PARAMETER(CTL.Trans_Contol_AS400_Plant);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(CTL.Billing_Activity_Type);
PARAMETER('B');
PARAMETER(CTL.Order_Certification_Flag);
PARAMETER(*ZERO);
PARAMETER(WRK.Process_Sts_for_3C);
PARAMETER(WRK.Order_Conf_Fax_Sts);
PARAMETER(WRK.Manifest_Fax_Sts);
PARAMETER(WRK.Invoice_Fax_Sts);
PARAMETER(CTL.Transfer_in_Storage_Ind);
PARAMETER(CTL.Email_Cust_On_Order_Ship);
PARAMETER(WRK.Order_Emailed);
PARAMETER(CTL.Export_Docs_Go_w_Driver);
PARAMETER(CTL.Shipping_Temp_Code_C_F);
PARAMETER(CTL.Broker_Order_Status);
PARAMETER(WRK.Air_Freight_Order);
PARAMETER(WRK.Order_Requires_Review);
PARAMETER(WRK.OH_Load_Plan_Ready);
PARAMETER(WRK.Export_USDA_Approved);
PARAMETER(CTL.HPB_Ship_to_Warehouse);
PARAMETER(CTL.OH_TF_Exempt_Code);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(CTL.Time_of_Original_Entry);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);

ENDIF;

//?Change warehouse and shipto cust if control changes  & 8/25 exempt code
CASE;

// IF CTL.Warehouse Code NE CTL.USR Warehouse Code
IF CTL.Warehouse_Code <> CTL.USR_Warehouse_Code;

// OR CTL.Ship To Customer NE CTL.USR Ship To Customer
OR CTL.Ship_To_Customer <> CTL.USR_Ship_To_Customer;

EXECUTE FUNCTION(RTV Chg Shipto & Whse  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1456022;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.OH_TF_Exempt_Code);

// CTL.USR Warehouse Code = CTL.Warehouse Code
CTL.USR_Warehouse_Code = CTL.Warehouse_Code;

// CTL.USR Ship To Customer = CTL.Ship To Customer
CTL.USR_Ship_To_Customer = CTL.Ship_To_Customer;

ENDIF;

//?F5=Clear screen for re-entry
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// CTL.Ship To Customer = CON.*ZERO
CTL.Ship_To_Customer = *ZERO;

// CTL.USR Ship To Customer = CON.*ZERO
CTL.USR_Ship_To_Customer = *ZERO;

// CTL.Warehouse Code = CON.*BLANK
CTL.Warehouse_Code = *BLANK;

// CTL.USR Warehouse Code = CON.*BLANK
CTL.USR_Warehouse_Code = *BLANK;

// CTL.Export Status = CND.blank
CTL.Export_Status = *BLANK;

// CTL.Country Code = CON.*BLANK
CTL.Country_Code = *BLANK;

// CTL.Salesperson Code = CON.*BLANK
CTL.Salesperson_Code = *BLANK;

// CTL.Sales Route Code = CON.*BLANK
CTL.Sales_Route_Code = *BLANK;

// CTL.Requested Delivery Time = CON.*ZERO
CTL.Requested_Delivery_Time = *ZERO;

// CTL.Customer Purchase Order # = CON.*BLANK
CTL.Customer_Purchase_Order_# = *BLANK;

EXECUTE FUNCTION(Chg Order Header       CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1113751;
PARAMETER(CTL.Company_Number);
PARAMETER(9999999);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER('N');
PARAMETER('E');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('N');
PARAMETER('N');
PARAMETER('N');
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER('CT');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER('A');
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER('Y');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER('P');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(1);
PARAMETER('B');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(WRK.Process_Sts_for_3C);
PARAMETER(WRK.Order_Conf_Fax_Sts);
PARAMETER(WRK.Manifest_Fax_Sts);
PARAMETER(WRK.Invoice_Fax_Sts);
PARAMETER('N');
PARAMETER(WRK.Email_Cust_On_Order_Ship);
PARAMETER(WRK.Order_Emailed);
PARAMETER(WRK.Export_Docs_Go_w_Driver);
PARAMETER(WRK.Shipping_Temp_Code_C_F);
PARAMETER(WRK.Broker_Order_Status);
PARAMETER(WRK.Air_Freight_Order);
PARAMETER(WRK.Order_Requires_Review);
PARAMETER(WRK.OH_Load_Plan_Ready);
PARAMETER(WRK.Export_USDA_Approved);
PARAMETER(WRK.HPB_Ship_to_Warehouse);
PARAMETER(WRK.OH_TF_Exempt_Code);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);

EXECUTE FUNCTION(DLT Ship/Detl for ord. RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1306735;
PARAMETER(CTL.Company_Number);
PARAMETER(9999999);
PARAMETER(*ZERO);
PARAMETER(*ZERO);

EXECUTE FUNCTION(DLT Shipping Fin       RT) TYPE(RTVOBJ) FILE(OMCRWKP)          AC1306738;
PARAMETER(RCD.Company_Number);
PARAMETER(9999999);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);

EXECUTE FUNCTION(DLT Dtl Comments/Order RT) TYPE(RTVOBJ) FILE(OPCPCPP)          AC1459402;
PARAMETER(CTL.Company_Number);
PARAMETER(9999999);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F6=Create Order -  if the Cust & Ord Dtl pass the exempt code test
CASE;

// IF CTL.*CMD key is *Create Order
IF CTL.*CMD_key = '06';

//?8/25 See if the cust and order dtls pass the exempt code validity test
// WRK.Error Flag            USR = WRK.Blank for 4           USR
WRK.Error_Flag_USR = WRK.Blank_for_4_USR;

// Call program Exc Calc Ord ExemptCd XF.
CALL PROGRAM(Exc Calc Ord ExemptCd XF) ('PPSLXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.OH_TF_Exempt_Code);
PARAMETER(WRK.Error_Flag_USR);
PARAMETER('Y');

CASE;

// IF WRK.Error Flag            USR is Yes
IF WRK.Error_Flag_USR = 'Y';

// Send error message - 'Tf Exempt error - cant mix exempt & non-exempt items for customer.'
ERROR(USR3588);
MSGPARM(WRK.Item_Code);

// IF CTL.Ship To Customer is equal to zero
IF CTL.Ship_To_Customer = *ZERO;

// Send error message - 'Customer Master not found.'
ERROR(USR0170);
MSGPARM(CTL.Ship_To_Customer);

// IF *OTHERWISE
IF *OTHERWISE;

//?Do the Original code to create the order
// Call program CPY Copy Order Templt  XF.
CALL PROGRAM(CPY Copy Order Templt  XF) ('PDWXXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(9999999);
PARAMETER(CTL.Order_Type_Sales);
PARAMETER(PAR.Next_Order_Number);
PARAMETER(CTL.OHE_Intended_for_ExportCC);
PARAMETER(CTL.Type_Code);
PARAMETER(CTL.OHE_Spot_Buy);

// PAR.Company Number Pass   USR = CTL.Company Number
PAR.Company_Number_Pass_USR = CTL.Company_Number;

// PAR.Customer Number Pass  USR = CTL.Ship To Customer
PAR.Customer_Number_Pass_USR = CTL.Ship_To_Customer;

// PAR.Order Number 1  PASS  USR = PAR.Next Order Number
PAR.Order_Number_1_PASS_USR = PAR.Next_Order_Number;

// Call program UPD Call Order Entry   UP.
CALL PROGRAM(UPD Call Order Entry   UP) ('PDW0UPC');
PARAMETER(WRK.Error_Status);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Customer_Number_Pass_USR);
PARAMETER(PAR.Order_Number_1_PASS_USR);
PARAMETER(WRK.Process_Control);

// Call program UPD Copy Order Array   XF.
CALL PROGRAM(UPD Copy Order Array   XF) ('PDW1XFR');
PARAMETER(CTL.Company_Number);
PARAMETER(PAR.Next_Order_Number);
PARAMETER('CR');
PARAMETER(WRK.Record_Found_USR);

ENDIF;

ENDIF;

//?F13=Shipping Instr
DO;

CASE;

// IF CTL.*CMD key is CF13
IF CTL.*CMD_key = '13';

// Call program EDT Shipping Inst.     EF.
CALL PROGRAM(EDT Shipping Inst.     EF) ('PDAEEFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(*ZERO);

ENDIF;

ENDDO;

//?F17=Export Doc
DO;

CASE;

// IF CTL.*CMD key is CF17
IF CTL.*CMD_key = '17';

CASE;

// IF CTL.Country Code is Entered
IF CTL.Country_Code <> *BLANK;

// AND CTL.Warehouse Code is Warehouse Code not Blank
AND CTL.Warehouse_Code <> *BLANK;

// Call program Edt Export Document   XF.
CALL PROGRAM(Edt Export Document   XF) ('POIRXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Country_Code);
PARAMETER(WRK.Next_Program_Name);
PARAMETER(CTL.Warehouse_Code);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Country & Whse not enterd'
ERROR(USR3353);
MSGPARM(CTL.Country_Code);
MSGPARM(CTL.Warehouse_Code);

ENDIF;

ENDIF;

ENDDO;

//?F19=Add Ham Group.
DO;

CASE;

// IF CTL.*CMD key is CF19
IF CTL.*CMD_key = '19';

// Call program PMT Enter Ham Group    PV.
CALL PROGRAM(PMT Enter Ham Group    PV) ('PDVXPVR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(WRK.Order_Sequence_Number);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Country_Code);
PARAMETER(WRK.Successful_Completion_USR);

CASE;

// IF WRK.Successful Completion USR is Yes
IF WRK.Successful_Completion_USR = 'Y';

// PGM.*Program mode = CND.*CHANGE
PGM.*Program_mode = 'CHG';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PAR.USR Display field = CND.yes
PAR.USR_Display_field = 'Y';

ENDIF;

ENDIF;

ENDDO;

//?F14=Display orders created
CASE;

// IF CTL.*CMD key is CF14
IF CTL.*CMD_key = '14';

// Call program DSP Copy Orders Crt    DF.
CALL PROGRAM(DSP Copy Orders Crt    DF) ('PDV5DFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Date_of_Original_Entry);
PARAMETER(CTL.User_Original_Entry);

ENDIF;

//?F21=Print Copy Orders Created.
CASE;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

// PAR.Company Number Pass   USR = CTL.Company Number
PAR.Company_Number_Pass_USR = CTL.Company_Number;

// PAR.From Date Pass        USR = CTL.Date of Original Entry
PAR.From_Date_Pass_USR = CTL.Date_of_Original_Entry;

// Call program PRT Copy Ords Created  UP.
CALL PROGRAM(PRT Copy Ords Created  UP) ('PDW8UPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('OMS');
PARAMETER('Copy Orders Created');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.From_Date_Pass_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(CTL.User_Original_Entry);

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Report has been printed.'
MESSAGE(USR2100 *INFO);

ENDIF;

ENDIF;

// WRK.Status - Y or N = CND.yes
WRK.Status_Y_or_N = 'Y';

//?USER: Exit program processing

//?Exit program
CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

// Call program UPD Copy Order Array   XF.
CALL PROGRAM(UPD Copy Order Array   XF) ('PDW1XFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER('DA');
PARAMETER(WRK.Record_Found_USR);

PGM.*Return_code = 'Y2U9999';

RETURN;

ENDIF;

