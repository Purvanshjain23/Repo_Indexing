// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMWPE1R
// ?Date: 14.08.2025 Time: 03:44:21
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(RTV Accrual Info-All   RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1825083;
PARAMETER(PAR.Accrual_Code);
PARAMETER(NLL.Accrual_Description);
PARAMETER(NLL.Automatic_Accrual_Y_N);
PARAMETER(NLL.Print_On_Invoice_Y_N);
PARAMETER(NLL.Rate_Usage);
PARAMETER(NLL.Add_on_Allowance);
PARAMETER(NLL.Accrual_Type);
PARAMETER(LCL.Sub_Ledger_Code);
PARAMETER(NLL.Reverse_Accrual_Code);
PARAMETER(NLL.UOM_Primary_Dft);
PARAMETER(NLL.G_L_Code_Dr);
PARAMETER(NLL.G_L_Code_Cr);
PARAMETER(NLL.G_L_Sub_Account_Code);
PARAMETER(NLL.Sales_History_Exp_Bucket);
PARAMETER(NLL.Post_to_G_L_Y_N);
PARAMETER(NLL.All_Products_Y_N);
PARAMETER(NLL.Accrual_Rate);
PARAMETER(NLL.Accrual_Rate_Type);
PARAMETER(NLL.Accrual_Detail_Search);
PARAMETER(NLL.Standard_Schedule_Y_N);
PARAMETER(NLL.Affect_Sales_Realz_Rpt);
PARAMETER(NLL.Affect_Invoice_Price);
PARAMETER(NLL.Invoice_Print_Type);
PARAMETER(NLL.Max_Accrual_Amount);
PARAMETER(NLL.Max_Accrual_Amount_Type);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize detail screen (new record)

MOVE *ALL (To: DTL From: PAR);

EXECUTE FUNCTION(Accrual Type DRV) TYPE(DRVFLD)                                 AC1891658;
PARAMETER(DTL.Accrual_Type_DRV);
PARAMETER(DTL.Accrual_Type);
{
 //?Calculate derived field

 // PAR.Accrual Type DRV = Condition name of PAR.Accrual Type
 PAR.Accrual_Type_DRV = RTVCND(PAR.Accrual_Type);

}


// DTL.AD All Customers = CND.yes
DTL.AD_All_Customers = 'Y';

// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

//?USER: Initialize detail screen (existing record)

// DTL.Accrual Description = PAR.Accrual Description
DTL.Accrual_Description = PAR.Accrual_Description;

// DTL.Accrual Type = PAR.Accrual Type
DTL.Accrual_Type = PAR.Accrual_Type;

EXECUTE FUNCTION(Accrual Type DRV) TYPE(DRVFLD)                                 AC1891658;
PARAMETER(DTL.Accrual_Type_DRV);
PARAMETER(DTL.Accrual_Type);
{
 //?Calculate derived field

 // PAR.Accrual Type DRV = Condition name of PAR.Accrual Type
 PAR.Accrual_Type_DRV = RTVCND(PAR.Accrual_Type);

}


//?OUTPUT: Period Begin Date
CASE;

// IF DB1.AD Period Beginning Date LE JOB.*Job date
IF DB1.AD_Period_Beginning_Date <= JOB.*Job_date;

// LCL.Output Only 1 USR = CND.yes
LCL.Output_Only_1_USR = 'Y';

//?OUTPUT: Period Begin Date
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Output Only 1 USR = CND.no
LCL.Output_Only_1_USR = 'N';

ENDIF;

//?OUTPUT: Period End Date
CASE;

// IF DB1.AD Period Ending Date LE JOB.*Job date
IF DB1.AD_Period_Ending_Date <= JOB.*Job_date;

// LCL.Output Only 2 USR = CND.yes
LCL.Output_Only_2_USR = 'Y';

//?OUTPUT: Period End Date
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Output Only 2 USR = CND.no
LCL.Output_Only_2_USR = 'N';

ENDIF;

//?OUTPUT: All Customer
CASE;

// IF LCL.Output Only 1 USR is yes
IF LCL.Output_Only_1_USR = 'Y';

// OR LCL.Output Only 2 USR is yes
OR LCL.Output_Only_2_USR = 'Y';

// LCL.Output Only 3 USR = CND.yes
LCL.Output_Only_3_USR = 'Y';

ENDIF;

// PAR.AD Period Beginning Date = DB1.AD Period Beginning Date
PAR.AD_Period_Beginning_Date = DB1.AD_Period_Beginning_Date;

// PAR.AD Period Ending Date = DB1.AD Period Ending Date
PAR.AD_Period_Ending_Date = DB1.AD_Period_Ending_Date;

//?USER: Validate detail screen fields

//?VAL: Period Begin/End Date
CASE;

// IF DTL.AD Period Ending Date LT DTL.AD Period Beginning Date
IF DTL.AD_Period_Ending_Date < DTL.AD_Period_Beginning_Date;

// Send error message - 'Beginning period must be less than or equal to the ending period'
ERROR(USR0128);

ENDIF;

//?VAL: Period Begin Date
CASE;

// IF DTL.AD Period Beginning Date NE PAR.AD Period Beginning Date
IF DTL.AD_Period_Beginning_Date <> PAR.AD_Period_Beginning_Date;

CASE;

// IF DTL.AD Period Beginning Date LE JOB.*Job date
IF DTL.AD_Period_Beginning_Date <= JOB.*Job_date;

// Send error message - 'Date must be after the current date.'
ERROR(USR4457);
MSGPARM(DTL.AD_Period_Beginning_Date);

ENDIF;

ENDIF;

//?VAL: Period End Date
CASE;

// IF DTL.AD Period Ending Date NE PAR.AD Period Ending Date
IF DTL.AD_Period_Ending_Date <> PAR.AD_Period_Ending_Date;

CASE;

// IF DTL.AD Period Ending Date LE JOB.*Job date
IF DTL.AD_Period_Ending_Date <= JOB.*Job_date;

// Send error message - 'Date must be after the current date.'
ERROR(USR4457);
MSGPARM(DTL.AD_Period_Ending_Date);

ENDIF;

ENDIF;

//?VAL: Sub Ledger Code
CASE;

// IF LCL.Sub Ledger Code is Accrual Product Program
IF LCL.Sub_Ledger_Code = 'P';

CASE;

// IF DTL.AD Sub Ledger is Not Entered
IF DTL.AD_Sub_Ledger = *ZERO;

// Send error message - 'Sub Ledger Required'
ERROR(USR4452);
MSGPARM(DTL.AD_Sub_Ledger);

ENDIF;

ENDIF;

//?CALC: Detail screen function fields

EXECUTE FUNCTION(Accrual Type DRV) TYPE(DRVFLD)                                 AC1891658;
PARAMETER(DTL.Accrual_Type_DRV);
PARAMETER(DTL.Accrual_Type);
{
 //?Calculate derived field

 // PAR.Accrual Type DRV = Condition name of PAR.Accrual Type
 PAR.Accrual_Type_DRV = RTVCND(PAR.Accrual_Type);

}


//?USER: Create DBF record

EXECUTE FUNCTION(Crt Product Program   CR) TYPE(CRTOBJ) FILE(PMD2REP)           AC1891530;
PARAMETER(DTL.Accrual_Code);
PARAMETER(DTL.AD_Program_Number);
PARAMETER(DTL.AD_Period_Beginning_Date);
PARAMETER(DTL.AD_Period_Ending_Date);
PARAMETER(DTL.AD_Sub_Ledger);
PARAMETER(DTL.AD_All_Customers);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  //?*** Set RECORD STATUS field. ***
  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  //?*** Set CREATE fields. ***
  // PAR.Create Date = JOB.*Job date
  PAR.Create_Date = JOB.*Job_date;

  // PAR.Create Time = JOB.*Job time
  PAR.Create_Time = JOB.*Job_time;

  // PAR.Create User = JOB.*USER
  PAR.Create_User = JOB.*USER;

  // PAR.Create Program = JOB.*PROGRAM
  PAR.Create_Program = JOB.*PROGRAM;

  //?*** Set CHANGE fields. ***
  // PAR.Change Date = CON.*ZERO
  PAR.Change_Date = *ZERO;

  // PAR.Change Time = CON.*ZERO
  PAR.Change_Time = *ZERO;

  // PAR.Change User = CON.*BLANK
  PAR.Change_User = *BLANK;

  // PAR.Change Program = CON.*BLANK
  PAR.Change_Program = *BLANK;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Product Program   CH) TYPE(CHGOBJ) FILE(PMD2REP)           AC1891531;
PARAMETER(DTL.Accrual_Code);
PARAMETER(DTL.AD_Program_Number);
PARAMETER(DTL.AD_Period_Beginning_Date);
PARAMETER(DTL.AD_Period_Ending_Date);
PARAMETER(DTL.AD_Sub_Ledger);
PARAMETER(DTL.AD_All_Customers);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

}


