// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBGGEFR
// ?Date: 14.08.2025 Time: 03:47:51
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize subfile header

CASE;

// IF PAR.TPM Facility Type GT WRK.Blank for 12          USR
IF PAR.TPM_Facility_Type > WRK.Blank_for_12_USR;

// CTL.TPM Facility Type = PAR.TPM Facility Type
CTL.TPM_Facility_Type = PAR.TPM_Facility_Type;

ENDIF;

//?USER: Initialize subfile record (existing record)

MOVE *ALL (To: RCD From: DB1);

EXECUTE FUNCTION(RTV Ship To by TPM Cde RT) TYPE(RTVOBJ) FILE(CABBREP)          AC2055362;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(LCL.Customer_Name);
PARAMETER(LCL.Address_Line_1);
PARAMETER(LCL.Address_Line_2);
PARAMETER(LCL.City);
PARAMETER(LCL.State_Code);
PARAMETER(LCL.Zip_Postal_Code);
PARAMETER(LCL.Telephone_Number_FF);
PARAMETER(LCL.Fax_Number_FF);
PARAMETER(RCD.TPM_Location_Code);
PARAMETER(LCL.Ship_To_Customer_Flag);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Select by Location Code
CASE;

// IF CTL.TPM Location Code is ENTERED
IF CTL.TPM_Location_Code <> *BLANK;

// AND DB1.TPM Location Code NE CTL.TPM Location Code
AND DB1.TPM_Location_Code <> CTL.TPM_Location_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Validate subfile record fields

//?2=Edit & enter multiple ship to's
CASE;

// IF RCD.*SFLSEL is *Edit
IF RCD.*SFLSEL = '2'/'2';

//?If Ship To Flag=Y, fill in Phone, Fax, Email if needed
CASE;

// IF LCL.Ship To Customer Flag is Allow Use as Ship To Cust
IF LCL.Ship_To_Customer_Flag = 'Y';

EXECUTE FUNCTION(RTV All fields) TYPE(RTVOBJ) FILE(CAEOREP)                     AC1478596;
PARAMETER(PAR.Company_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(NLL.Terms_Code);
PARAMETER(NLL.Sales_Route_Code);
PARAMETER(NLL.Special_Instructions_2);
PARAMETER(NLL.Special_Instructions);
PARAMETER(NLL.Carrier_Code);
PARAMETER(NLL.Broker);
PARAMETER(NLL.P_O_Required_Flag);
PARAMETER(NLL.Deliver_after_time);
PARAMETER(NLL.Deliver_before_time);
PARAMETER(NLL.Alt_Remittance_Flag);
PARAMETER(NLL.Type_Code);
PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
PARAMETER(NLL.Mileage_To_Customer);
PARAMETER(NLL.Co_Cust_Overage_Rate_CWT);
PARAMETER(NLL.Age_Code);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(NLL.Outside_Warehouse_Flag);
PARAMETER(NLL.Customer_Group_Code);
PARAMETER(NLL.Customer_Group_Code_2);
PARAMETER(NLL.G_L_Code);
PARAMETER(NLL.Commodity_Market_Code);
PARAMETER(LCL.Credit_Contact_Name);
PARAMETER(NLL.Credit_Contact_Telephone);
PARAMETER(NLL.Credit_Contact_Bus_Title);
PARAMETER(NLL.Credit_Contact_Fax_Number);
PARAMETER(NLL.Allow_Man_Qt_WO_Approval);
PARAMETER(NLL.Fax_Invoice_Flag);
PARAMETER(NLL.Fax_Invoice_Fax_Number);
PARAMETER(NLL.Fax_Invoice_Contact_Name);
PARAMETER(NLL.Distributor);
PARAMETER(NLL.Default_Shipping_Co_Sts);
PARAMETER(NLL.Ord_Ent_Default_Sls_Rte);
PARAMETER(NLL.Bypass_DDt_Delay_w_Invcng);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(NLL.Record_Status);
PARAMETER(NLL.Job_Time);
PARAMETER(NLL.User_Id);
PARAMETER(NLL.Job_Name);
PARAMETER(NLL.Job_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv All Values        RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1569834;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(LCL.Internet_Password);
PARAMETER(LCL.Email_Address);
PARAMETER(LCL.Email_User_ID);
PARAMETER(LCL.EDI_Trading_Partner_No);
PARAMETER(LCL.EDI_Cust_Duns_Number);
PARAMETER(LCL.EDI_Warehouse_Store_No);
PARAMETER(LCL.State_Tax_ID);
PARAMETER(LCL.Cust_Shipping_Temp_C_F);
PARAMETER(LCL.One_Invoice_Per_PO);
PARAMETER(LCL.EDI_Advanced_Ship_Notice);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Fill in any blank fields, if possible
CASE;

// IF RCD.TPM Zip Code is Blanks
IF RCD.TPM_Zip_Code = *BLANK;

// RCD.TPM Region/State Code = LCL.State Code
RCD.TPM_Region_State_Code = LCL.State_Code;

//?Fill in any blank fields, if possible
// IF RCD.TPM Voice Phone is Blanks
IF RCD.TPM_Voice_Phone = *BLANK;

// RCD.TPM Voice Phone = LCL.Telephone Number FF
RCD.TPM_Voice_Phone = LCL.Telephone_Number_FF;

//?Fill in any blank fields, if possible
// IF RCD.TPM Fax Phone is Blanks
IF RCD.TPM_Fax_Phone = *BLANK;

// RCD.TPM Fax Phone = LCL.Fax Number FF
RCD.TPM_Fax_Phone = LCL.Fax_Number_FF;

//?Fill in any blank fields, if possible
// IF RCD.Email Address Long 1 is Blanks
IF RCD.Email_Address_Long_1 = *BLANK;

// RCD.Email Address Long 1 = LCL.Email Address
RCD.Email_Address_Long_1 = LCL.Email_Address;

//?Fill in any blank fields, if possible
// IF RCD.TPM Contact is Blanks
IF RCD.TPM_Contact = *BLANK;

// RCD.TPM Contact = LCL.Credit Contact Name
RCD.TPM_Contact = LCL.Credit_Contact_Name;

ENDIF;

// Call program EDT TPM Loc Mstr-CUST  ER.
CALL PROGRAM(EDT TPM Loc Mstr-CUST  ER) ('PBFJE1R');
PARAMETER(RCD.TPM_Facility_Type);
PARAMETER(RCD.TPM_Location_Code);
PARAMETER(RCD.TPM_Country_Code);
PARAMETER(RCD.TPM_Region_State_Code);
PARAMETER(RCD.TPM_City);
PARAMETER(RCD.TPM_Sub_Region_County);
PARAMETER(RCD.TPM_Zip_Code);
PARAMETER(RCD.TPM_Name);
PARAMETER(RCD.TPM_Address_1);
PARAMETER(RCD.TPM_Address_2);
PARAMETER(RCD.TPM_Contact);
PARAMETER(RCD.TPM_Voice_Phone);
PARAMETER(RCD.TPM_Fax_Phone);
PARAMETER(RCD.Email_Address_Long_1);
PARAMETER(RCD.TPM_Record_Status);
PARAMETER(RCD.Ship_To_Customer);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(CHG TPM Loc & Customer CH) TYPE(CHGOBJ) FILE(PBAPREP)          AC2055418;
PARAMETER(RCD.TPM_Facility_Type);
PARAMETER(RCD.TPM_Location_Code);
PARAMETER(RCD.Effective_Date);
PARAMETER(RCD.Cancellation_Date);
PARAMETER(RCD.TPM_Country_Code);
PARAMETER(RCD.TPM_Region_State_Code);
PARAMETER(RCD.TPM_City);
PARAMETER(RCD.TPM_Sub_Region_County);
PARAMETER(RCD.TPM_Zip_Code);
PARAMETER(RCD.TPM_Name);
PARAMETER(RCD.TPM_Address_1);
PARAMETER(RCD.TPM_Address_2);
PARAMETER(RCD.TPM_Contact);
PARAMETER(RCD.TPM_Voice_Phone);
PARAMETER(RCD.TPM_Fax_Phone);
PARAMETER(RCD.Email_Address_Long_1);
PARAMETER(RCD.Email_Address_Long_2);
PARAMETER(RCD.TPM_Record_Status);
PARAMETER(RCD.TPM_Process_Status);
PARAMETER(RCD.TPM_Error_Reason);
PARAMETER(RCD.TPM_Create_Date);
PARAMETER(RCD.TPM_Create_Time);
PARAMETER(RCD.TPM_Change_Date);
PARAMETER(RCD.TPM_Change_Time);
PARAMETER(RCD.Ship_To_Customer);
{
 //?USER: Processing before Data read

 //?***** Changes and Comments
 DO;

 //?This updates the Customer file with the TPM Location Code.
 //?Select 2 will allow adding additional Customers to this Loc Code.
 ENDDO;

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Processing before Data update

 EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
 PARAMETER(DB1.TPM_Change_Time);
 PARAMETER(NLL.User_Id);
 PARAMETER(NLL.Job_Name);
 PARAMETER(DB1.TPM_Change_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing after Data update

 EXECUTE FUNCTION(RTV Ship To-All Flds  RT) TYPE(RTVOBJ) FILE(CABBREP)           AC2052413;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(LCL.Customer_Name);
 PARAMETER(LCL.Address_Line_1);
 PARAMETER(LCL.Address_Line_2);
 PARAMETER(LCL.Address_Line_3);
 PARAMETER(LCL.City);
 PARAMETER(LCL.State_Code);
 PARAMETER(LCL.County_Code);
 PARAMETER(LCL.Zip_Postal_Code);
 PARAMETER(LCL.Telephone_Number_FF);
 PARAMETER(LCL.Fax_Number_FF);
 PARAMETER(LCL.Alpha_Search);
 PARAMETER(LCL.Federal_Tax_Id);
 PARAMETER(LCL.New_Customer_Status);
 PARAMETER(LCL.SIC_Number);
 PARAMETER(LCL.D_B_Number);
 PARAMETER(LCL.D_B_Rating);
 PARAMETER(LCL.Date_of_D_B_Rating);
 PARAMETER(LCL.Credit_Line_Expire_Date);
 PARAMETER(LCL.AR_Customer_Number);
 PARAMETER(LCL.Parent_Customer);
 PARAMETER(LCL.Credit_Check_AR_Customer);
 PARAMETER(LCL.Credit_Check_Parent_Cust);
 PARAMETER(LCL.Country_Code);
 PARAMETER(LCL.EDI_Invoice_Sts);
 PARAMETER(LCL.Order_Entry_Hold);
 PARAMETER(LCL.Parent_Credit_Limit);
 PARAMETER(LCL.AR_Credit_Limit);
 PARAMETER(LCL.Order_Entry_Hold_Date);
 PARAMETER(LCL.Ship_To_Customer_Flag);
 PARAMETER(LCL.Field_vs_In_House_flag);
 PARAMETER(LCL.Email_When_Order_Shipped);
 PARAMETER(LCL.Print_Invoice_Sts);
 PARAMETER(LCL.Item_Reference_Status);
 PARAMETER(LCL.Statement_Print_Frequency);
 PARAMETER(LCL.EDI_Status_1);
 PARAMETER(LCL.EDI_Status_2);
 PARAMETER(LCL.EDI_Status_3);
 PARAMETER(LCL.Record_Status);
 {
  //?USER: Processing if Data record not found

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Record selected = CND.*YES
  PGM.*Record_selected = 'Y';

 }

 EXECUTE FUNCTION(CHG Customer           CH) TYPE(CHGOBJ) FILE(CABBREP)          AC1107938;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(LCL.Customer_Name);
 PARAMETER(LCL.Address_Line_1);
 PARAMETER(LCL.Address_Line_2);
 PARAMETER(LCL.Address_Line_3);
 PARAMETER(LCL.City);
 PARAMETER(LCL.State_Code);
 PARAMETER(LCL.County_Code);
 PARAMETER(LCL.Zip_Postal_Code);
 PARAMETER(LCL.Telephone_Number_FF);
 PARAMETER(LCL.Fax_Number_FF);
 PARAMETER(PAR.TPM_Location_Code);
 PARAMETER(LCL.Federal_Tax_Id);
 PARAMETER(LCL.New_Customer_Status);
 PARAMETER(LCL.SIC_Number);
 PARAMETER(LCL.D_B_Number);
 PARAMETER(LCL.D_B_Rating);
 PARAMETER(LCL.Date_of_D_B_Rating);
 PARAMETER(LCL.AR_Customer_Number);
 PARAMETER(LCL.Parent_Customer);
 PARAMETER(LCL.Credit_Check_AR_Customer);
 PARAMETER(LCL.Credit_Check_Parent_Cust);
 PARAMETER(LCL.Country_Code);
 PARAMETER(LCL.EDI_Invoice_Sts);
 PARAMETER(LCL.Order_Entry_Hold);
 PARAMETER(LCL.Parent_Credit_Limit);
 PARAMETER(LCL.AR_Credit_Limit);
 PARAMETER(LCL.Order_Entry_Hold_Date);
 PARAMETER(LCL.Ship_To_Customer_Flag);
 PARAMETER(LCL.Field_vs_In_House_flag);
 PARAMETER(LCL.Email_When_Order_Shipped);
 PARAMETER(LCL.Print_Invoice_Sts);
 PARAMETER(LCL.Item_Reference_Status);
 PARAMETER(LCL.Statement_Print_Frequency);
 PARAMETER(LCL.EDI_Status_1);
 PARAMETER(LCL.EDI_Status_2);
 PARAMETER(LCL.EDI_Status_3);
 PARAMETER(LCL.Record_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


//?USER: Process command keys

CASE;

// IF CTL.*CMD key is *Reload
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

