// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBSDDFR
// ?Date: 14.08.2025 Time: 03:49:12
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?E3787 JJH 05/06/15 - New PFS Product and PFS Prod Schedule
//?- This function is used to display the Item Structure Type and
//?  Item Structure Groups that were selected for a PFS Production
//?  Schedule Batch that has already been sent.
//?- Uses Access Path Co/Typ/Grp/Cls/Itm SEL
//?  Record Status = Active
//?  Item Type Code = Finished Good or Work in Progress
//?  Item Code < 8000000
//?  Item Prd Sched Send PFS = Yes
ENDDO;

// PGM.*Scan limit = CND.9999999
PGM.*Scan_limit = 9999999;

// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

// LCL.Display Flag 1 USR = CND.no
LCL.Display_Flag_1_USR = 'N';

// Execute function SFL Fold/Drop  RPG    US.
EXECUTE FUNCTION(SFL Fold/Drop  RPG    US) TYPE(EXCUSRSRC) ('POBHUFU');
PARAMETER(15);
{
 ) find text=#SFLCTL
 ) insert
 A                                      SFLDROP(CF07)
 A* 07                                  SFLFOLD(CF07)
}


EXECUTE FUNCTION(Rtv System Date *CYMD IF) TYPE(EXCINTFUN)                      AC1952751;
PARAMETER(LCL.System_Date_USR);
{
 //?Execute internal function

 // LCL.*System timestamp = JOB.*System timestamp
 LCL.*System_timestamp = JOB.*System_timestamp;

 // LCL.Year USR = SUBSTRING(LCL.*System timestamp,CON.1,CON.4)
 LCL.Year_USR = SUBSTRING(LCL.*System_timestamp:1:4);

 // LCL.Month USR = SUBSTRING(LCL.*System timestamp,CON.6,CON.2)
 LCL.Month_USR = SUBSTRING(LCL.*System_timestamp:6:2);

 // LCL.Day USR = SUBSTRING(LCL.*System timestamp,CON.9,CON.2)
 LCL.Day_USR = SUBSTRING(LCL.*System_timestamp:9:2);

 // LCL.Date (Char-8) USR = CONCAT(LCL.Year USR,LCL.Month USR,CON.*ZERO)
 LCL.Date_Char_8_USR = LCL.Year_USR + LCL.Month_USR (*ZERO);

 // LCL.Date (Char-8) USR = CONCAT(LCL.Date (Char-8) USR,LCL.Day USR,CON.*ZERO)
 LCL.Date_Char_8_USR = LCL.Date_Char_8_USR + LCL.Day_USR (*ZERO);

 // LCL.DATE = CVTVAR(LCL.Date (Char-8) USR)
 LCL.DATE = CVTVAR(LCL.Date_Char_8_USR);

 EXECUTE FUNCTION(CVT *YYMD to *CYMD    IF) TYPE(EXCINTFUN)                      AC1929228;
 PARAMETER(PAR.System_Date_USR);
 PARAMETER(LCL.DATE);
 {
  //?Execute internal function

  //?** YEAR **
  // PAR.Year Code = PAR.DATE / CON.10000 *
  PAR.Year_Code = PAR.DATE / 10000;

  // PAR.Year  NBR USR = PAR.Year Code
  PAR.Year_NBR_USR = PAR.Year_Code;

  // PAR.Year  (Char) USR = CVTVAR(PAR.Year  NBR USR)
  PAR.Year_Char_USR = CVTVAR(PAR.Year_NBR_USR);

  //?** MONTH **
  // PAR.Month                 USR = PAR.DATE / CON.100 *
  PAR.Month_USR = PAR.DATE / 100;

  // PAR.Month (Char) USR = CVTVAR(PAR.Month                 USR)
  PAR.Month_Char_USR = CVTVAR(PAR.Month_USR);

  //?** DAY **
  // PAR.Day of Month USR = PAR.DATE
  PAR.Day_of_Month_USR = PAR.DATE;

  // PAR.Day   (Char) USR = CVTVAR(PAR.Day of Month USR)
  PAR.Day_Char_USR = CVTVAR(PAR.Day_of_Month_USR);

  //?CENTURY+YEAR
  CASE;

  // IF PAR.Year Code is Twentieth Century
  IF PAR.Year_Code <= 1999;

  // PAR.Date (Alpha) USR = CONCAT(CON.0,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '0' + PAR.Year_Char_USR (*ZERO);

  //?CENTURY+YEAR
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date (Alpha) USR = CONCAT(CON.1,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '1' + PAR.Year_Char_USR (*ZERO);

  ENDIF;

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Month (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Month_Char_USR (*ZERO);

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Day   (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date                  USR = CVTVAR(PAR.Date (Alpha) USR)
  PAR.Date_USR = CVTVAR(PAR.Date_Alpha_USR);

 }

}


EXECUTE FUNCTION(CNV cyymmdd to yyyymmdd) TYPE(EXCINTFUN)                       AC1732965;
PARAMETER(LCL.System_Date_USR);
PARAMETER(LCL.PFS_Create_Date);
{
 //?Execute internal function

 // LCL.Year Code = PAR.Date In  (7,0) USR *YEAR
 LCL.Year_Code = DATEDTLS(PAR.Date_In_70_USR 'YR' 1111111 'NONE' 'N' 1);

 // LCL.Month NBR USR = PAR.Date In  (7,0) USR *MONTH
 LCL.Month_NBR_USR = DATEDTLS(PAR.Date_In_70_USR 'MO' 1111111 'NONE' 'N' 1);

 // LCL.Day of Month USR = PAR.Date In  (7,0) USR *DAY OF MONTH
 LCL.Day_of_Month_USR = DATEDTLS(PAR.Date_In_70_USR 'DM' 1111111 'NONE' 'N' 1);

 // PAR.Year Alpha (YYYY) USR = CVTVAR(LCL.Year Code)
 PAR.Year_Alpha_YYYY_USR = CVTVAR(LCL.Year_Code);

 // PAR.Month (Char) USR = CVTVAR(LCL.Month NBR USR)
 PAR.Month_Char_USR = CVTVAR(LCL.Month_NBR_USR);

 // PAR.Day   (Char) USR = CVTVAR(LCL.Day of Month USR)
 PAR.Day_Char_USR = CVTVAR(LCL.Day_of_Month_USR);

 // PAR.Date (Char-8) USR = CONCAT(PAR.Year Alpha (YYYY) USR,PAR.Month (Char) USR,CON.*ZERO)
 PAR.Date_Char_8_USR = PAR.Year_Alpha_YYYY_USR + PAR.Month_Char_USR (*ZERO);

 // PAR.Date (Char-8) USR = CONCAT(PAR.Date (Char-8) USR,PAR.Day   (Char) USR,CON.*ZERO)
 PAR.Date_Char_8_USR = PAR.Date_Char_8_USR + PAR.Day_Char_USR (*ZERO);

 // PAR.Date Out (8,0) USR = CVTVAR(PAR.Date (Char-8) USR)
 PAR.Date_Out_80_USR = CVTVAR(PAR.Date_Char_8_USR);

}


EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('P/S');
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.Allow_Multi_Company);
PARAMETER(LCL.Default_Printer);
PARAMETER(LCL.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize subfile control

CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

CASE;

// IF PAR.PFS Baseline Schedule is Baseline
IF PAR.PFS_Baseline_Schedule = 'B';

// CTL.PFS Baseline Schedule = CND.Baseline
CTL.PFS_Baseline_Schedule = 'B';

// IF PAR.PFS Baseline Schedule is Not Baseline
IF PAR.PFS_Baseline_Schedule = *BLANK;

// CTL.PFS Baseline Schedule USR = CND.No
CTL.PFS_Baseline_Schedule_USR = 'N';

ENDIF;

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

ENDIF;

// LCL.Item Structure Type Code = CON.*ZERO
LCL.Item_Structure_Type_Code = *ZERO;

// LCL.Item Structure Group Code = CON.*ZERO
LCL.Item_Structure_Group_Code = *ZERO;

// LCL.Item Structure Class Code = CON.*ZERO
LCL.Item_Structure_Class_Code = *ZERO;

// LCL.Item Code = CTL.Item Code
LCL.Item_Code = CTL.Item_Code;

// CTL.Company Number = PAR.PFS Company Number
CTL.Company_Number = PAR.PFS_Company_Number;

// CTL.PFS Batch Date = PAR.PFS Batch Date
CTL.PFS_Batch_Date = PAR.PFS_Batch_Date;

// CTL.PFS Batch Time = PAR.PFS Batch Time
CTL.PFS_Batch_Time = PAR.PFS_Batch_Time;

// CTL.PFS User ID = PAR.PFS User ID
CTL.PFS_User_ID = PAR.PFS_User_ID;

// CTL.Text USR 12 = Condition name of CTL.PFS Baseline Schedule USR
CTL.Text_USR_12 = RTVCND(CTL.PFS_Baseline_Schedule_USR);

//?USER: Initialize subfile record from DBF record

//?Record Selection = No if Record Status NE Active, and NE FG/WP
CASE;

// IF RCD.Record Status is Active
IF RCD.Record_Status = 'A';

// AND RCD.Item Type Code is FG/WP
AND RCD.Item_Type_Code = 'FG'/'WP';

// AND RCD.Item Code is LT 8000000
AND RCD.Item_Code < 8000000;

//?Record Selection = No if Record Status NE Active, and NE FG/WP
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL:  Company Number
CASE;

// IF RCD.Company Number NE CTL.Company Number
IF RCD.Company_Number <> CTL.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL:  Item Type Code
CASE;

// IF RCD.Item Type Code is Not FG/WP
IF RCD.Item_Type_Code = *BLANK/'PS'/'RM'/'EX';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// RCD.Display Flag = CND.No
RCD.Display_Flag = 'N';

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?NEW:  Item Structure Type Code
CASE;

// IF LCL.Item Structure Group Code NE RCD.Item Structure Group Code
IF LCL.Item_Structure_Group_Code <> RCD.Item_Structure_Group_Code;

// LCL.Item Structure Group Code = RCD.Item Structure Group Code
LCL.Item_Structure_Group_Code = RCD.Item_Structure_Group_Code;

// RCD.Display Flag = CND.Yes
RCD.Display_Flag = 'Y';

ENDIF;

//?NEW:  Item Structure Group Code
CASE;

// IF LCL.Item Structure Type Code NE RCD.Item Structure Type Code
IF LCL.Item_Structure_Type_Code <> RCD.Item_Structure_Type_Code;

// LCL.Item Structure Type Code = RCD.Item Structure Type Code
LCL.Item_Structure_Type_Code = RCD.Item_Structure_Type_Code;

// RCD.Display Flag = CND.Yes
RCD.Display_Flag = 'Y';

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv Seq for Company   RT) TYPE(RTVOBJ) FILE(POCNREP)           AC1753557;
PARAMETER(LCL.Item_Structure_Type_Code);
PARAMETER(LCL.Item_Structure_Group_Code);
PARAMETER(LCL.Item_Structure_Class_Code);
PARAMETER(RCD.Sequence_Number);
PARAMETER(RCD.Company_Number);
{
 //?USER: Processing if Data record not found

 // PAR.Sequence Number = CON.1
 PAR.Sequence_Number = 1;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?SEL:  Record
CASE;

// IF RCD.Display Flag is No
IF RCD.Display_Flag = 'N';

// AND LCL.Display Flag 1 USR is no
AND LCL.Display_Flag_1_USR = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?SEL:  Record
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Type Description   RT) TYPE(RTVOBJ) FILE(OME8REP)          AC1229616;
PARAMETER(RCD.Item_Structure_Type_Code);
PARAMETER(RCD.Item_Structure_Type_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Group Desc) TYPE(RTVOBJ) FILE(OME9REP)                     AC1663396;
PARAMETER(RCD.Item_Structure_Group_Code);
PARAMETER(RCD.Item_Structure_Group_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// Execute function SFL Fold/Drop  RPG 2  US.
EXECUTE FUNCTION(SFL Fold/Drop  RPG 2  US) TYPE(EXCUSRSRC) ('POBKUFR');
{
 C     MODE          IFEQ      '0'
 C                   SETON                                        89
 C                   ELSE
 C                   SETOFF                                       89
 C                   ENDIF
}


//?Set PFS Fresh/Frozen to FR/FZ
CASE;

// IF DB1.Sold 100% Frozen is yes
IF DB1.Sold_100_Percent_Frozen = 'Y';

// RCD.PFS Fresh/Frozen = CND.Frozen
RCD.PFS_Fresh_Frozen = 'FZ';

//?Set PFS Fresh/Frozen to FR/FZ
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.PFS Fresh/Frozen = CND.Fresh
RCD.PFS_Fresh_Frozen = 'FR';

ENDIF;

EXECUTE FUNCTION(Ext PFS Prd Sch Bt SL RT) TYPE(RTVOBJ) FILE(PBB3CPP)           AC2110066;
PARAMETER(PAR.PFS_Company_Number);
PARAMETER(CTL.PFS_Batch_Date);
PARAMETER(CTL.PFS_Batch_Time);
PARAMETER(CTL.PFS_User_ID);
PARAMETER(RCD.Item_Structure_Type_Code);
PARAMETER(RCD.Item_Structure_Group_Code);

//?Selected USR = Selected if PFS Prod Schd Batch Sel record exists.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// RCD.Selected USR = CND.Selected
RCD.Selected_USR = '**';

//?Selected USR = Selected if PFS Prod Schd Batch Sel record exists.
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Selected USR = CND.Not Selected
RCD.Selected_USR = *BLANK;

ENDIF;

//?Selected USR = No if Item Prod Sched Send PFS = No
CASE;

// IF RCD.Selected USR is Selected
IF RCD.Selected_USR = **;

// AND LCL.Display Flag 1 USR is yes
AND LCL.Display_Flag_1_USR = 'Y';

// AND RCD.Item Prod Sched Send PFS is No
AND RCD.Item_Prod_Sched_Send_PFS = 'N';

// RCD.Selected USR = CND.Not Selected
RCD.Selected_USR = *BLANK;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?F7=Display Items
CASE;

// IF CTL.*CMD key is CF07
IF CTL.*CMD_key = '07';

CASE;

// IF LCL.Display Flag 1 USR is no
IF LCL.Display_Flag_1_USR = 'N';

// LCL.Display Flag 1 USR = CND.yes
LCL.Display_Flag_1_USR = 'Y';

// IF LCL.Display Flag 1 USR is yes
IF LCL.Display_Flag_1_USR = 'Y';

// LCL.Display Flag 1 USR = CND.no
LCL.Display_Flag_1_USR = 'N';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

