// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PUU9DFR
// ?Date: 14.08.2025 Time: 03:51:29
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.USR Display field = CND.no
PAR.USR_Display_field = 'N';

// CTL.Text USR 4 = CON.ONLY
CTL.Text_USR_4 = 'ONLY';

//?USER: Initialize subfile control

// LCL.Ship From Warehouse = CTL.Ship From Warehouse
LCL.Ship_From_Warehouse = CTL.Ship_From_Warehouse;

// LCL.Header Status = CTL.Header Status
LCL.Header_Status = CTL.Header_Status;

// LCL.Load ID = CTL.Load ID
LCL.Load_ID = CTL.Load_ID;

// LCL.Customer Purchase Order # = CTL.Customer Purchase Order #
LCL.Customer_Purchase_Order_# = CTL.Customer_Purchase_Order_#;

// LCL.Load Status = CTL.Load Status
LCL.Load_Status = CTL.Load_Status;

// LCL.Scheduled Ship Date = CTL.Scheduled Ship Date
LCL.Scheduled_Ship_Date = CTL.Scheduled_Ship_Date;

// LCL.Actual Shipped Date = CTL.Actual Shipped Date
LCL.Actual_Shipped_Date = CTL.Actual_Shipped_Date;

// LCL.Invoice Date = CTL.Invoice Date
LCL.Invoice_Date = CTL.Invoice_Date;

// LCL.Ship To Customer = CTL.Ship To Customer
LCL.Ship_To_Customer = CTL.Ship_To_Customer;

// LCL.Ship To Name (15A) USR = CTL.Ship To Name (15A) USR
LCL.Ship_To_Name_15A_USR = CTL.Ship_To_Name_15A_USR;

// LCL.Rental Pallet no-ref = CTL.Rental Pallet no-ref
LCL.Rental_Pallet_no_ref = CTL.Rental_Pallet_no_ref;

// LCL.EDI ASN Status = CTL.EDI ASN Status
LCL.EDI_ASN_Status = CTL.EDI_ASN_Status;

//?USER: Initialize subfile record from DBF record

// Call program Rtv OH Rental Pallet  XF.
CALL PROGRAM(Rtv OH Rental Pallet  XF) ('PUVAXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Pallet_Type_1);
PARAMETER(RCD.Pallet_Qty_1);
PARAMETER(RCD.Pallet_Type_2);
PARAMETER(RCD.Pallet_Qty_2);
PARAMETER(RCD.Pallet_Type_3);
PARAMETER(RCD.Pallet_Qty_3);
PARAMETER(RCD.Pallet_Type_4);
PARAMETER(RCD.Pallet_Qty_4);
PARAMETER(RCD.EDI_ASN_Status);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Rental_Pallet);
PARAMETER(RCD.Rental_Pallet_Qty);

//?Select Only Loads with Rental Pallets
CASE;

// IF RCD.Rental Pallet is Blank
IF RCD.Rental_Pallet = *BLANK;

// AND PAR.USR Display field is no
AND PAR.USR_Display_field = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?Select Only Loads with Rental Pallets
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV All Fields         RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1571206;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Type_Sales);
PARAMETER(LCL.AR_Customer_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Ship_To_Name);
PARAMETER(LCL.Ship_To_Address_Line_1);
PARAMETER(LCL.Ship_To_Address_Line_2);
PARAMETER(LCL.Ship_To_Address_Line_3);
PARAMETER(LCL.Ship_To_City);
PARAMETER(LCL.Ship_To_State_Code);
PARAMETER(LCL.Ship_To_Zip_Postal_Code);
PARAMETER(LCL.Bill_to_Customer);
PARAMETER(LCL.Bill_to_Name);
PARAMETER(LCL.Bill_to_Address_Line_1);
PARAMETER(LCL.Bill_to_Address_Line_2);
PARAMETER(LCL.Bill_to_Address_Line_3);
PARAMETER(LCL.Bill_to_City);
PARAMETER(LCL.Bill_to_State_Code);
PARAMETER(LCL.Bill_to_Zip_Postal_Code);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(LCL.Order_Date);
PARAMETER(LCL.Requested_Ship_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(LCL.Cancel_Date);
PARAMETER(LCL.Terms_Code);
PARAMETER(LCL.Special_Instructions);
PARAMETER(LCL.Special_Instructions_2);
PARAMETER(LCL.Carrier_Code);
PARAMETER(LCL.Comment_Print_Acknowledge);
PARAMETER(LCL.Comment_Print_Inv_Cr_Memo);
PARAMETER(LCL.Comment_Print_Pick_Slip);
PARAMETER(LCL.Comment_Print_Ship_Doc);
PARAMETER(LCL.Reason_Code);
PARAMETER(LCL.Order_in_Use);
PARAMETER(RCD.Header_Status);
PARAMETER(LCL.Header_Status_Last);
PARAMETER(LCL.Order_Type_Print_Status);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(LCL.User_Original_Entry);
PARAMETER(LCL.Date_of_Original_Entry);
PARAMETER(LCL.Order_Value_Total);
PARAMETER(LCL.Order_Weight_Total);
PARAMETER(LCL.Credit_Hold);
PARAMETER(LCL.Production_Hold);
PARAMETER(LCL.New_Customer_Hold);
PARAMETER(LCL.Requested_Delivery_Date);
PARAMETER(LCL.Requested_Delivery_Time);
PARAMETER(LCL.Accounts_Receiv_Ent_1);
PARAMETER(LCL.Accounts_Receiv_Ent_2);
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
PARAMETER(LCL.Rated_Freight);
PARAMETER(LCL.LTL_Flag);
PARAMETER(LCL.Price_Audit);
PARAMETER(LCL.Price_Status);
PARAMETER(LCL.Shipping_Method);
PARAMETER(LCL.Export_Status);
PARAMETER(LCL.Palletize);
PARAMETER(LCL.Shrink_Wrap);
PARAMETER(LCL.Slip_Sheet);
PARAMETER(LCL.Age_Code);
PARAMETER(LCL.Reefer_Temperature);
PARAMETER(LCL.Load_Type);
PARAMETER(LCL.Attach_to_Invoice_Number);
PARAMETER(LCL.Load_Plan_Order);
PARAMETER(LCL.Print_Pick_Slip);
PARAMETER(LCL.Resell_Reference_Number);
PARAMETER(LCL.Special_Comment_1);
PARAMETER(LCL.Special_Comment_2);
PARAMETER(LCL.Affect_Auto_Accruals);
PARAMETER(LCL.Sales_Route_Code);
PARAMETER(LCL.Manager_Level_Code);
PARAMETER(LCL.VP_Level_Code);
PARAMETER(LCL.Attach_to_Order_Number);
PARAMETER(LCL.Reason_for_Price_Audit);
PARAMETER(LCL.Invoice_Number);
PARAMETER(LCL.Invoice_Suffix);
PARAMETER(RCD.Invoice_Date);
PARAMETER(LCL.Event_Code);
PARAMETER(LCL.Trans_Contol_AS400_Plant);
PARAMETER(LCL.Modified_Flag);
PARAMETER(LCL.A_R_order_Value_Total);
PARAMETER(LCL.Billing_Activity_Type);
PARAMETER(LCL.Block_Order_Flag);
PARAMETER(LCL.Order_Certification_Flag);
PARAMETER(LCL.Invoice_Order_Value_Tot);
PARAMETER(LCL.Process_Sts_for_3C);
PARAMETER(LCL.Order_Conf_Fax_Sts);
PARAMETER(LCL.Manifest_Fax_Sts);
PARAMETER(LCL.Invoice_Fax_Sts);
PARAMETER(LCL.Transfer_in_Storage_Ind);
PARAMETER(LCL.Email_Cust_On_Order_Ship);
PARAMETER(LCL.Order_Emailed);
PARAMETER(LCL.Export_Docs_Go_w_Driver);
PARAMETER(LCL.Shipping_Temp_Code_C_F);
PARAMETER(LCL.Broker_Order_Status);
PARAMETER(LCL.Air_Freight_Order);
PARAMETER(LCL.Order_Requires_Review);
PARAMETER(LCL.OH_Load_Plan_Ready);
PARAMETER(LCL.Export_USDA_Approved);
PARAMETER(LCL.HPB_Ship_to_Warehouse);
PARAMETER(LCL.OH_TF_Exempt_Code);
PARAMETER(LCL.OH_Appt_Confirmation_Dt);
PARAMETER(LCL.JPN_Invoice_Issuance_Date);
PARAMETER(LCL.Load_Actual_Shipped_Date);
PARAMETER(LCL.Load_BOL_Complete_Date);
PARAMETER(LCL.Load_Truck_Departure_Date);
PARAMETER(LCL.Maximum_Gross_Weight);
PARAMETER(LCL.Time_of_Original_Entry);
PARAMETER(LCL.OH_Appt_Confirmation_Tm);
PARAMETER(LCL.Load_BOL_Complete_Time);
PARAMETER(LCL.Load_Truck_Departure_Time);
PARAMETER(LCL.Act_Frt_Reference_Amount);
PARAMETER(LCL.Act_Non_Ref_Frt_Amount);
PARAMETER(LCL.OH_Fuel_Surcharge_Amount);
PARAMETER(LCL.OH_Total_Non_Ref_Frt_Amt);
PARAMETER(LCL.OH_Total_Ref_Frt_Amt);
PARAMETER(LCL.Claim_Number);
PARAMETER(LCL.EDI_Status_1);
PARAMETER(LCL.EDI_Status_2);
PARAMETER(LCL.EDI_Status_3);
PARAMETER(LCL.Job_Time);
PARAMETER(LCL.User_Id);
PARAMETER(LCL.Job_Name);
PARAMETER(LCL.Job_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv All fields        RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC2202538;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(NLL.Stop_Drop_Sequence_Number);
PARAMETER(NLL.Shipping_Line);
PARAMETER(NLL.Port_Delv_Terminal);
PARAMETER(NLL.OHE_City);
PARAMETER(NLL.OHE_Vessel_Airline);
PARAMETER(NLL.OHE_Voyage_Flight);
PARAMETER(NLL.OHE_Booking_Number);
PARAMETER(NLL.OHE_Discharge_Port_Airprt);
PARAMETER(NLL.OHE_Sail_Flight_Date);
PARAMETER(NLL.OHE_Port_Cut_Date);
PARAMETER(NLL.OHE_Arrival_Date);
PARAMETER(NLL.OHE_Late_Delivery_Code);
PARAMETER(NLL.OHE_Ship_Status);
PARAMETER(NLL.OHE_Container_Number);
PARAMETER(NLL.OHE_Comment_1);
PARAMETER(NLL.OHE_Comment_2);
PARAMETER(NLL.OHE_Unused_Number_1_11_0);
PARAMETER(NLL.OHE_Unused_Number_2_11_0);
PARAMETER(NLL.OHE_Unused_Number_3_11_0);
PARAMETER(NLL.OHE_Unused_Number_4_11_0);
PARAMETER(NLL.OHE_HPB_RIN_Equiv_Value);
PARAMETER(NLL.OHE_HPB_RIN_Price);
PARAMETER(NLL.Transload_Terminal_Fees);
PARAMETER(NLL.OHE_Est_Arrv_at_Dest_Date);
PARAMETER(NLL.OHE_Backhaul_ETA_RtrnDate);
PARAMETER(NLL.OHE_Port_Pier_Paid_Date);
PARAMETER(NLL.OHE_Actual_Ship_Date);
PARAMETER(NLL.OHE_Carrier_SCAC_Code);
PARAMETER(NLL.OHE_Spot_Buy);
PARAMETER(NLL.OHE_PO_ACK_Flag);
PARAMETER(NLL.OHE_Override_Type_Code);
PARAMETER(NLL.OHE_Backhaul_Status);
PARAMETER(NLL.OHE_Backhaul_ETA_AM_PM);
PARAMETER(NLL.OHE_Load_Haul_Type);
PARAMETER(NLL.OHE_Backhaul_Carrier_Code);
PARAMETER(NLL.OHE_Bookings_Confirmed);
PARAMETER(NLL.OHE_EDI_Error_Reasons);
PARAMETER(RCD.OHE_EDI_Error_Reasons_2);
PARAMETER(NLL.HPB_COA_Batch_Number);
PARAMETER(NLL.Delivery_P_O_Number);
PARAMETER(NLL.OHE_Intended_for_ExportCC);
PARAMETER(NLL.OHE_EDI_943_Action);
PARAMETER(NLL.OHE_EDI_944_Action);
PARAMETER(NLL.OHE_EDI_940_Action);
PARAMETER(NLL.OHE_EDI_945_Action);
PARAMETER(RCD.OHE_EDI_856_Action);
PARAMETER(NLL.OHE_EDI_824_Action);
PARAMETER(NLL.OHE_Transload_Seal_Nbr);
PARAMETER(NLL.OHE_Abs_Rate_Override_Rsn);
PARAMETER(NLL.OHE_Appt_Confirmation_#);
PARAMETER(NLL.OHE_Backhaul_Container#);
PARAMETER(NLL.OHE_Backhaul_Chassis_#);
PARAMETER(NLL.OHE_Transload_Container#);
PARAMETER(NLL.OHE_Pier_Pass_Invoice);
PARAMETER(NLL.OHE_Carrier_Nm);
PARAMETER(NLL.OHE_Appt_Confirmation_Nm);
PARAMETER(NLL.OHE_Backhaul_Comment);
PARAMETER(NLL.Letter_of_Credit_Number);
PARAMETER(NLL.OHE_Backhaul_Return_to_Co);
PARAMETER(NLL.LD_Stop_Drop);
PARAMETER(NLL.OHE_Unused_Number_3_0);
PARAMETER(NLL.OHE_Pier_Pass_Fee_Amount);
PARAMETER(NLL.OHE_Port_Check_Fee_Amount);
PARAMETER(NLL.OHE_Port_Cut_Time);
PARAMETER(NLL.OHE_Backhaul_Truck_Number);
PARAMETER(NLL.OHE_Load_Sched_Seq_Num);
PARAMETER(NLL.Original_Appointment_Date);
PARAMETER(NLL.Original_Appointment_Time);
PARAMETER(NLL.OHE_PowerPro_Load#_Outbnd);
PARAMETER(NLL.OHE_PowerPro_Load#_Bckhl);
PARAMETER(NLL.OHE_Unused_Numeric_9_0_3);
PARAMETER(NLL.OHE_Orig_ABS_Freight_Rate);
PARAMETER(NLL.OHE_Genset_Number);
PARAMETER(NLL.OHE_Email_BOL_Sent);
PARAMETER(NLL.OHE_EDI_Order_Automated);
PARAMETER(NLL.OHE_EDI_601_Action);
PARAMETER(NLL.OHE_Unused_Status_4);
PARAMETER(NLL.OHE_Unused_Text_1);
PARAMETER(NLL.OHE_Unused_Text_2);
PARAMETER(NLL.OHE_Customer_Vendor_f_PO);
PARAMETER(NLL.OHE_EDI_824_AES_ITN_#);
PARAMETER(NLL.OHE_Unused_Text_5);
PARAMETER(NLL.OHE_Unused_Date_1);
PARAMETER(NLL.OHE_Unused_Date_2);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Record selection with *QUIT if record not selected.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Select Only Regular Orders 'OR'.
CASE;

// IF RCD.Order Type - Sales is Regular Order
IF RCD.Order_Type_Sales = 'OR';

//?Continue with record selection tests
//?Select Only Regular Orders 'OR'.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select Only Confirmed 'R' or Invoiced 'C' Orders.
CASE;

// IF RCD.Header Status is Confirmed & Complete
IF RCD.Header_Status = 'C'/'R';

//?Continue with record selection tests
//?Select Only Confirmed 'R' or Invoiced 'C' Orders.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Warehouse Must Be Live w/Carlisle and Whse is Internal.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV 1st Whse/Country   RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1426676;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(1);
PARAMETER(1);
PARAMETER(RCD.Ship_From_Warehouse);
PARAMETER(NLL.Country_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(Rtv Liv w/Carl,Locatn RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1790152;
PARAMETER(RCD.Ship_From_Warehouse);
PARAMETER(LCL.Warehouse_Location);
PARAMETER(LCL.WHS_Live_with_Carlisle);
PARAMETER(NLL.WHS_PFS_Interface);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Warehouse Location is Internal (Plant)
IF LCL.Warehouse_Location = 'I';

// AND LCL.WHS Live w/Carlisle is Yes
AND LCL.WHS_Live_with_Carlisle = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Get/Set EDI ASN Status Info.
CASE;

// IF RCD.EDI ASN Status is Sent
IF RCD.EDI_ASN_Status = 'S';

// RCD.EDI ASN Status Desc = CON.Sent
RCD.EDI_ASN_Status_Desc = 'Sent';

//?Get/Set EDI ASN Status Info.
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.EDI ASN Status Desc = CON.*BLANK
RCD.EDI_ASN_Status_Desc = *BLANK;

ENDIF;

//?Select by User Defined Selectors.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Select By Ship From Warehouse.
CASE;

// IF CTL.Ship From Warehouse is Blanks
IF CTL.Ship_From_Warehouse = *BLANK;

// OR CTL.Ship From Warehouse EQ RCD.Ship From Warehouse
OR CTL.Ship_From_Warehouse = RCD.Ship_From_Warehouse;

//?Select By Ship From Warehouse.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select By Header Status.
CASE;

// IF CTL.Header Status is *None
IF CTL.Header_Status = *BLANK;

// OR CTL.Header Status EQ RCD.Header Status
OR CTL.Header_Status = RCD.Header_Status;

//?Select By Header Status.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select By Ship to customer
CASE;

// IF CTL.Ship To Customer is equal to zero
IF CTL.Ship_To_Customer = *ZERO;

// OR CTL.Ship To Customer EQ RCD.Ship To Customer
OR CTL.Ship_To_Customer = RCD.Ship_To_Customer;

//?Select By Ship to customer
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select by Customer Name.                      R17040 DN 02/25/21
CASE;

// IF CTL.Ship To Name (15A) USR NE WRK.BLANK
IF CTL.Ship_To_Name_15A_USR <> WRK.BLANK;

// Execute function CVT Str to Upper Alpha US.
EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
PARAMETER(CTL.Ship_To_Name_15A_USR);
PARAMETER(CTL.Ship_To_Name_15A_USR);
{
 PDWEUFR:  PGM PARM(&STRIN &STROUT)

 CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
}


// Call program CLC Call Qclscan       UP.
CALL PROGRAM(CLC Call Qclscan       UP) ('QCLSCAN');
PARAMETER(RCD.Ship_To_Name);
PARAMETER(30);
PARAMETER(1);
PARAMETER(CTL.Ship_To_Name_15A_USR);
PARAMETER(15);
PARAMETER(1);
PARAMETER(1);
PARAMETER(*BLANK);
PARAMETER(WRK.USR_Qclscan_Result);

//?Test Customer Name search results
CASE;

// IF WRK.USR Qclscan Result ? is Does contain
IF WRK.USR_Qclscan_Result > 0;

//?Test Customer Name search results
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select By Load ID.
CASE;

// IF CTL.Load ID is Blank
IF CTL.Load_ID = *ZERO;

// OR CTL.Load ID EQ RCD.Load ID
OR CTL.Load_ID = RCD.Load_ID;

//?Select By Load ID.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select By Customer Purchase Order #
CASE;

// IF CTL.Customer Purchase Order # is Blank
IF CTL.Customer_Purchase_Order_# = *BLANK;

// OR CTL.Customer Purchase Order # EQ RCD.Customer Purchase Order #
OR CTL.Customer_Purchase_Order_# = RCD.Customer_Purchase_Order_#;

//?Select By Customer Purchase Order #
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select By Scheduled Ship Date.
CASE;

// IF CTL.Scheduled Ship Date is not entered
IF CTL.Scheduled_Ship_Date = *ZERO;

// OR CTL.Scheduled Ship Date EQ RCD.Scheduled Ship Date
OR CTL.Scheduled_Ship_Date = RCD.Scheduled_Ship_Date;

//?Select By Scheduled Ship Date.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select By Actual Shipped Date.
CASE;

// IF CTL.Actual Shipped Date is not entered
IF CTL.Actual_Shipped_Date = *ZERO;

// OR CTL.Actual Shipped Date EQ RCD.Actual Shipped Date
OR CTL.Actual_Shipped_Date = RCD.Actual_Shipped_Date;

//?Select By Actual Shipped Date.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select By Invoice Date.
CASE;

// IF CTL.Invoice Date is not entered
IF CTL.Invoice_Date = *ZERO;

// OR CTL.Invoice Date EQ RCD.Invoice Date
OR CTL.Invoice_Date = RCD.Invoice_Date;

//?Select By Invoice Date.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select By Load Status.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Load Status 2      RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC2141306;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Load_Status);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Select By Load Status.
CASE;

// IF CTL.Load Status is *Blank
IF CTL.Load_Status = *BLANK;

// OR CTL.Load Status EQ RCD.Load Status
OR CTL.Load_Status = RCD.Load_Status;

//?Select By Load Status.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select by Pallet Type                         WI464 JBB 10/05/21
CASE;

// IF CTL.Rental Pallet no-ref is Not entered
IF CTL.Rental_Pallet_no_ref = *BLANK;

// OR CTL.Rental Pallet no-ref EQ RCD.Rental Pallet
OR CTL.Rental_Pallet_no_ref = RCD.Rental_Pallet;

//?Select by Pallet Type                         WI464 JBB 10/05/21
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select By ASN Status.                         WI464 JBB 11/01/21
CASE;

// IF CTL.EDI ASN Status EQ LCL.EDI ASN Status
IF CTL.EDI_ASN_Status = LCL.EDI_ASN_Status;

// OR CTL.EDI ASN Status EQ RCD.EDI ASN Status
OR CTL.EDI_ASN_Status = RCD.EDI_ASN_Status;

//?Select By ASN Status.                         WI464 JBB 11/01/21
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?F4=Prompt
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

//?If prompting on Pallet Type
CASE;

// IF PGM.*Cursor field <IS> CTL.Rental Pallet no-ref
IF PGM.*Cursor_field = CTL.Rental_Pallet_no_ref;

// Call program Sel Pallet Master     SR.
CALL PROGRAM(Sel Pallet Master     SR) ('PUTOSRR');
PARAMETER(CTL.Rental_Pallet_no_ref);
PARAMETER('Y');

ENDIF;

ENDIF;

CASE;

// IF CTL.*CMD key is *Option Toggle
IF CTL.*CMD_key = '08';

//?Toggle display of all or rental only
DO;

CASE;

// IF PAR.USR Display field is yes
IF PAR.USR_Display_field = 'Y';

// PAR.USR Display field = CND.no
PAR.USR_Display_field = 'N';

// CTL.Text USR 4 = CON.ONLY
CTL.Text_USR_4 = 'ONLY';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Display field = CND.yes
PAR.USR_Display_field = 'Y';

// CTL.Text USR 4 = CON.ALL
CTL.Text_USR_4 = 'ALL';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDDO;

ENDIF;

//?Validate that entered Pallet Type is a Rental pallet
CASE;

// IF NOT CTL.Header Status is *None
IF ! CTL.Header_Status = *BLANK;

EXECUTE FUNCTION(Rtv Pallet Master     RT) TYPE(RTVOBJ) FILE(PUB6CPP)           AC2198688;
PARAMETER(CTL.Rental_Pallet_no_ref);
PARAMETER(NLL.PM_Description);
PARAMETER(NLL.Misc_Tare_Weight);
PARAMETER(LCL.Rental_Y_N);
PARAMETER(NLL.Effective_Date);
PARAMETER(NLL.Product_ID_GTIN);
PARAMETER(NLL.Interchange_Code);
PARAMETER(NLL.Class_Code);
PARAMETER(NLL.EDI_Trading_Partner_No);
PARAMETER(NLL.EDI_Whs_Duns_Number);
PARAMETER(NLL.Contact_Name);
PARAMETER(NLL.ASN_Ready_Y_N);
PARAMETER(NLL.Status_1_Unused);
PARAMETER(NLL.Status_2_Unused);
PARAMETER(NLL.Text_75_Unused);
PARAMETER(NLL.Record_Status);
PARAMETER(NLL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


//?If Pallet is not a Rental, send error message
CASE;

// IF LCL.Rental (Y/N) is No
IF LCL.Rental_Y_N = 'N';

// Send error message - 'Pallet Type must be a rental pallet.'
ERROR(USR5222);
MSGPARM(CTL.Rental_Pallet_no_ref);

ENDIF;

ENDIF;

//?Reload subfile if any selection values change
CASE;

// IF CTL.Ship From Warehouse NE LCL.Ship From Warehouse
IF CTL.Ship_From_Warehouse <> LCL.Ship_From_Warehouse;

// OR CTL.Load ID NE LCL.Load ID
OR CTL.Load_ID <> LCL.Load_ID;

// OR CTL.Scheduled Ship Date NE LCL.Scheduled Ship Date
OR CTL.Scheduled_Ship_Date <> LCL.Scheduled_Ship_Date;

// OR CTL.Header Status NE LCL.Header Status
OR CTL.Header_Status <> LCL.Header_Status;

// OR CTL.Load Status NE LCL.Load Status
OR CTL.Load_Status <> LCL.Load_Status;

// OR CTL.Actual Shipped Date NE LCL.Actual Shipped Date
OR CTL.Actual_Shipped_Date <> LCL.Actual_Shipped_Date;

// OR CTL.Ship To Customer NE LCL.Ship To Customer
OR CTL.Ship_To_Customer <> LCL.Ship_To_Customer;

// OR CTL.Customer Purchase Order # NE LCL.Customer Purchase Order #
OR CTL.Customer_Purchase_Order_# <> LCL.Customer_Purchase_Order_#;

// OR CTL.Ship To Name (15A) USR NE LCL.Ship To Name (15A) USR
OR CTL.Ship_To_Name_15A_USR <> LCL.Ship_To_Name_15A_USR;

// OR CTL.EDI ASN Status NE LCL.EDI ASN Status
OR CTL.EDI_ASN_Status <> LCL.EDI_ASN_Status;

// OR CTL.Rental Pallet no-ref NE LCL.Rental Pallet no-ref
OR CTL.Rental_Pallet_no_ref <> LCL.Rental_Pallet_no_ref;

// OR CTL.Invoice Date NE LCL.Invoice Date
OR CTL.Invoice_Date <> LCL.Invoice_Date;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?Subfile Option Processing.
CASE;

// IF RCD.*SFLSEL is *Edit
IF RCD.*SFLSEL = '2'/'2';

//?WI464 DN 05/13/22-Get EDI ASN Status by Load/PO # & matching Order#.
CASE;

// IF RCD.Rental Pallet is Blank
IF RCD.Rental_Pallet = *BLANK;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv All for Ord/Ld    RT) TYPE(RTVOBJ) FILE(ECP042)            AC2200399;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.EDI_SURROGATE_NUMBER);
PARAMETER(LCL.TRADE_PARTNER_CODE);
PARAMETER(LCL.PRF01_Customer_PO);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // Call program Zzz %Scan for Order # EX.
 CALL PROGRAM(Zzz %Scan for Order # EX) ('PUWCXFR');
 PARAMETER(DB1.Orders_on_PO_TXT);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.Match_Found_USR);

 //?Order Number Found?
 CASE;

 // IF LCL.Match Found USR is Yes
 IF LCL.Match_Found_USR = 'Y';

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 ENDIF;

}


//?If record found, call Edit ASN Order screen
CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// Call program Zzz EDI ASN Order     ER.
CALL PROGRAM(Zzz EDI ASN Order     ER) ('PUULE1R');
PARAMETER(LCL.EDI_SURROGATE_NUMBER);
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.TRADE_PARTNER_CODE);
PARAMETER(LCL.PRF01_Customer_PO);

//?If record found, call Edit ASN Order screen
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'ASN Order not found.'
ERROR(USR5220);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?Subfile Option Processing.
// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

//?Display Order Inquiry.
CASE;

// IF RCD.Event Code is Shipped Thru 07 History
IF RCD.Event_Code >= '04';
AND RCD.Event_Code <= '07';

// Call program DSP Ord Inq Ship Dtl   DF.
CALL PROGRAM(DSP Ord Inq Ship Dtl   DF) ('PDP3DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(NLL.Order_Sequence_Number);
PARAMETER(PAR.Application_Code);

//?Display Order Inquiry.
// IF *OTHERWISE
IF *OTHERWISE;

// Call program DSP Ord Inquiry Detail DF.
CALL PROGRAM(DSP Ord Inquiry Detail DF) ('PDPZDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(NLL.Order_Sequence_Number);
PARAMETER(NLL.Order_Secondary_Line_Seq);
PARAMETER(PAR.Application_Code);

ENDIF;

// CTL.Order Number = RCD.Order Number
CTL.Order_Number = RCD.Order_Number;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Subfile Option Processing.
// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

// Call program DSP Order vs. Ship Dtl DF.
CALL PROGRAM(DSP Order vs. Ship Dtl DF) ('PDP7DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Type_Sales);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Ship_To_Name);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(RCD.Order_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Header_Status);
PARAMETER(RCD.Credit_Hold);
PARAMETER(RCD.Production_Hold);
PARAMETER(RCD.New_Customer_Hold);
PARAMETER(RCD.Sales_Route_Code);
PARAMETER(PAR.Application_Code);

// CTL.Order Number = RCD.Order Number
CTL.Order_Number = RCD.Order_Number;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Subfile Option Processing.
// IF RCD.*SFLSEL is Option 10
IF RCD.*SFLSEL = '10';

// Call program Edt OH Pallet Tbl Shp ER.
CALL PROGRAM(Edt OH Pallet Tbl Shp ER) ('PUTYE1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Subfile Option Processing.
// IF RCD.*SFLSEL is Option 16
IF RCD.*SFLSEL = '16';

// Call program Dsp Order Header       PV.
CALL PROGRAM(Dsp Order Header       PV) ('OMB5PVR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(RCD.Date_of_Original_Entry);
PARAMETER(RCD.Requested_Delivery_Time);
PARAMETER(PAR.Application_Code);

// CTL.Order Number = RCD.Order Number
CTL.Order_Number = RCD.Order_Number;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Subfile Option Processing.
// IF RCD.*SFLSEL is Option 17
IF RCD.*SFLSEL = '17';

CASE;

// IF RCD.Rental Pallet is Blank
IF RCD.Rental_Pallet = *BLANK;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

//?Send or Resend ASN
// Call program EXC EDI ASN by Load   XF.
CALL PROGRAM(EXC EDI ASN by Load   XF) ('PUUFXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.Rental_Pallet);
PARAMETER(LCL.Rental_Pallet_Qty);
PARAMETER('Y');
PARAMETER('Y');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?USER: Process command keys

//?F5=Refresh
CASE;

// IF CTL.*CMD key is *Reload
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

