// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDX4XFR
// ?Date: 14.08.2025 Time: 03:30:33
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?RMC 3/24/05 OMS036 Changes for the Deposit Time
EXECUTE FUNCTION(RTV Deposit Amounts    RT) TYPE(RTVOBJ) FILE(PDJ2CPP)          AC1334003;
PARAMETER(PAR.Bank_Code);
PARAMETER(PAR.Deposit_Date);
PARAMETER(PAR.Deposit_Time);
PARAMETER(PAR.Deposit_Amount);
PARAMETER(PAR.Total_Cash_Applied);
PARAMETER(PAR.Number_of_Deposit_Checks);
PARAMETER(PAR.Number_of_Applied_Checks);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.USR Remaining Balance = PAR.Deposit Amount - PAR.Total Cash Applied
PAR.USR_Remaining_Balance = PAR.Deposit_Amount - PAR.Total_Cash_Applied;

//?Write and update the A/R Detail
EXECUTE FUNCTION(CHG Post/Report        RT) TYPE(RTVOBJ) FILE(ARBECPP)          AC1341958;
PARAMETER(PAR.Deposit_Date);
PARAMETER(PAR.Deposit_Time);
PARAMETER(PAR.Bank_Code);
PARAMETER(PAR.A_R_Processing_Status);
PARAMETER(PAR.Status_Y_or_N);
{
 //?USER: Initialize routine

 // PAR.USR First Time = CND.Yes
 PAR.USR_First_Time = 'Y';

 //?USER: Process Data record

 //?A/R Detail Copy and Change A/R Processing Code
 //?Bank Cash G/L Code
 EXECUTE FUNCTION(RTV Bank G/L           RT) TYPE(RTVOBJ) FILE(CAEBREP)          AC1333234;
 PARAMETER(PAR.Bank_Code);
 PARAMETER(PAR.USR_Bank_G_L_Apha_ID);
 {
  //?USER: Process Data record

  // PAR.G/L Alpha Code = DB1.G/L Alpha Code
  PAR.G_L_Alpha_Code = DB1.G_L_Alpha_Code;

 }

 // Call program Val G/L Act Cde 2 HPE XF.
 CALL PROGRAM(Val G/L Act Cde 2 HPE XF) ('PKVBXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.USR_Bank_G_L_Apha_ID);
 PARAMETER(WRK.G_L_Code_Desc_USR);
 PARAMETER(PAR.Bank_G_L_ID_Code);
 PARAMETER(WRK.G_L_Account_Type_1_USR);
 PARAMETER(WRK.G_L_Account_Type_2_USR);
 PARAMETER(WRK.Record_Found_USR);

 //?Retrieve Info. stored on header written for each detail line
 EXECUTE FUNCTION(RTV Post/Report to G/L RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1342002;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(PAR.Order_Number_Ref);
 PARAMETER(PAR.Due_Date);
 PARAMETER(PAR.Last_Payment_Date);
 PARAMETER(PAR.AR_Customer_Number);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Create A/R Posting and Reporting File record for A/R Detail File
 EXECUTE FUNCTION(RTV Adj Limits         RT) TYPE(RTVOBJ) FILE(PDJ3CPP)          AC1334715;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Adjustment_Type_Code);
 PARAMETER(PAR.Adjustment_Description);
 PARAMETER(PAR.Effect_on_Account);
 PARAMETER(PAR.G_L_ID_Code_JDE);
 PARAMETER(PAR.Adjustment_Limit_Amount);
 PARAMETER(PAR.Cash_Adj);
 PARAMETER(PAR.User_Enter_G_L_Status);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Cash Adjustments and G/L Code
 CASE;

 // IF PAR.Cash/Adj is Cash Adjustment
 IF PAR.Cash_Adj = 'CSH';

 // PAR.G/L ID Code JDE = PAR.Bank G/L ID Code
 PAR.G_L_ID_Code_JDE = PAR.Bank_G_L_ID_Code;

 //?Cash Adjustments and G/L Code
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.G/L ID Code JDE = DB1.G/L ID Code JDE
 PAR.G_L_ID_Code_JDE = DB1.G_L_ID_Code_JDE;

 ENDIF;

 //?** New GMPEC parm added to ARACTRET. If "L" then subledger required e00512
 // Call program VAL Acct ID JDE-8 dgt  UP.
 CALL PROGRAM(VAL Acct ID JDE-8 dgt  UP) ('ARACTRET');
 PARAMETER(PAR.G_L_ID_Code_JDE);
 PARAMETER(NLL.Cost_Center);
 PARAMETER(NLL.Object_Account);
 PARAMETER(NLL.Subsidiary);
 PARAMETER(NLL.Description);
 PARAMETER(PAR.G_L_Posting_Company);
 PARAMETER(WRK.JDE_Posting_Edit_Code_USR);
 PARAMETER(WRK.Error_Return_text);

 //?** Default Sub Ledger code if GMPEC="L"               E000512
 CASE;

 // IF WRK.JDE Posting Edit Code USR is Ledger Required
 IF WRK.JDE_Posting_Edit_Code_USR = 'L';

 // WRK.G/L Sub-Ledger Code = DB1.G/L Sub-Ledger Code
 WRK.G_L_Sub_Ledger_Code = DB1.G_L_Sub_Ledger_Code;

 //?** Default Sub Ledger code if GMPEC="L"               E000512
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.G/L Sub-Ledger Code = CND.equal to zero
 WRK.G_L_Sub_Ledger_Code = *ZERO;

 ENDIF;

 EXECUTE FUNCTION(CRT Post/Report G/L    CR) TYPE(CRTOBJ) FILE(PDJ5CPP)          AC1341983;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Bank_Code);
 PARAMETER(PAR.Payment_Deposit_Date);
 PARAMETER(PAR.AR_Customer_Number);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Sequence_Number);
 PARAMETER(DB1.Adjustment_Type_Code);
 PARAMETER(DB1.Transaction_Amount);
 PARAMETER(DB1.A_R_Check_Number);
 PARAMETER(PAR.G_L_Posting_Company);
 PARAMETER(PAR.G_L_ID_Code_JDE);
 PARAMETER(PAR.Last_Payment_Date);
 PARAMETER(PAR.Due_Date);
 PARAMETER(PAR.Order_Number_Ref);
 PARAMETER(DB1.Effect_on_Account);
 PARAMETER(DB1.Explanation);
 PARAMETER(*BLANK);
 PARAMETER(PAR.A_R_Processing_Status);
 PARAMETER('D');
 PARAMETER(DB1.GL_Document_Number);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Bank_G_L_ID_Code);
 PARAMETER(WRK.G_L_Sub_Ledger_Code);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER('A');
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?Change A/R Processing Code to Either 'R'-Report or 'A'-Avail to Post
 CASE;

 // IF PAR.Status - Y or N is yes
 IF PAR.Status_Y_or_N = 'Y';

 EXECUTE FUNCTION(CHG Post/Report G/L    CH) TYPE(CHGOBJ) FILE(ARBECPP)          AC1341973;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Sequence_Number);
 PARAMETER(DB1.Deposit_Time);
 PARAMETER(PAR.A_R_Processing_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

}


//?* RMC OMS036 3/30/05 Read A/R Header OA to update the A/R Header
EXECUTE FUNCTION(RTV Post/Report Update RT) TYPE(RTVOBJ) FILE(PPA4CPP)          AC1728837;
PARAMETER(PAR.Bank_Code);
PARAMETER(PAR.Deposit_Date);
PARAMETER(PAR.Deposit_Time);
PARAMETER(PAR.A_R_Processing_Status);
PARAMETER(PAR.Status_Y_or_N);
{
 //?USER: Initialize routine

 //?** 02/23/2010 LJB E000512   Rtv Post Edit Code from JDE. If
 //?** = "L", retrieve G/L Sub Ledger Code from the A/R detail
 //?** else set to zeros
 //?USER: Process Data record

 //?RMC - OMS036 This was copied from the RTV over the A/R Header. We now
 //? need to read this to get the OA for the deposit date/time, then
 //?   update the a/r header           3/30/05
 //?-----------------------------------------------------
 //?The OA from the Header created on that Deposit Date with
 //?  the Deposit date the Same as the Due Date.  OA is only record type
 //?  from the AR Header that is used for the Bank Deposit Listing
 EXECUTE FUNCTION(RTV OA Cash Fields    RT) TYPE(RTVOBJ) FILE(ARBDCPP)           AC1728763;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(PAR.Adjustment_Type_Code);
 PARAMETER(PAR.Transaction_Amount);
 PARAMETER(PAR.Adjustment_Amount);
 PARAMETER(PAR.Amount_Paid);
 PARAMETER(PAR.Remaining_Balance_Due);
 PARAMETER(WRK.A_R_Processing_Status);
 PARAMETER(PAR.GL_Document_Number);
 PARAMETER(PAR.Order_Number_Ref);
 PARAMETER(PAR.Due_Date);
 PARAMETER(PAR.Last_Payment_Date);
 PARAMETER(PAR.AR_Customer_Number);
 PARAMETER(PAR.A_R_Check_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Program from HPE to convert customer code to number ID Code
 EXECUTE FUNCTION(RTV Bank G/L           RT) TYPE(RTVOBJ) FILE(CAEBREP)          AC1333234;
 PARAMETER(DB1.Bank_Code);
 PARAMETER(PAR.USR_Bank_G_L_Apha_ID);
 {
  //?USER: Process Data record

  // PAR.G/L Alpha Code = DB1.G/L Alpha Code
  PAR.G_L_Alpha_Code = DB1.G_L_Alpha_Code;

 }

 // Call program Val G/L Act Cde 2 HPE XF.
 CALL PROGRAM(Val G/L Act Cde 2 HPE XF) ('PKVBXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.USR_Bank_G_L_Apha_ID);
 PARAMETER(WRK.G_L_Code_Desc_USR);
 PARAMETER(PAR.Bank_G_L_ID_Code);
 PARAMETER(WRK.G_L_Account_Type_1_USR);
 PARAMETER(WRK.G_L_Account_Type_2_USR);
 PARAMETER(WRK.Record_Found_USR);

 EXECUTE FUNCTION(RTV G/L Code           RT) TYPE(RTVOBJ) FILE(PDJ3CPP)          AC1345062;
 PARAMETER(DB1.Company_Number);
 PARAMETER('OA');
 PARAMETER(PAR.G_L_ID_Code_JDE);
 {
  //?USER: Process Data record

  // PAR.G/L ID Code JDE = DB1.G/L ID Code JDE
  PAR.G_L_ID_Code_JDE = DB1.G_L_ID_Code_JDE;

 }

 //?** 02/23/2010 LJB E000512  Parm added
 // Call program VAL Acct ID JDE-8 dgt  UP.
 CALL PROGRAM(VAL Acct ID JDE-8 dgt  UP) ('ARACTRET');
 PARAMETER(PAR.G_L_ID_Code_JDE);
 PARAMETER(WRK.Cost_Center);
 PARAMETER(WRK.Object_Account);
 PARAMETER(WRK.Subsidiary);
 PARAMETER(NLL.Description);
 PARAMETER(PAR.G_L_Posting_Company);
 PARAMETER(WRK.JDE_Posting_Edit_Code_USR);
 PARAMETER(WRK.Error_Return_text);

 //?** Rtv sub ledger code if GMPEC is "L", else set to zeros  E000512
 CASE;

 // IF WRK.JDE Posting Edit Code USR is Ledger Required
 IF WRK.JDE_Posting_Edit_Code_USR = 'L';

 EXECUTE FUNCTION(RTV Last Seq. No.      RT) TYPE(RTVOBJ) FILE(ARBECPP)          AC1972737;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(WRK.Sequence_Number);
 {
  //?USER: Processing if Data record not found

  // PAR.Sequence Number = CON.1
  PAR.Sequence_Number = 1;

  //?USER: Process Data record

  // PAR.Sequence Number = DB1.Sequence Number
  PAR.Sequence_Number = DB1.Sequence_Number;

 }

 // Call program Zzz G/L Sub Ledger Cd  XF.
 CALL PROGRAM(Zzz G/L Sub Ledger Cd  XF) ('PNG4XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(WRK.Sequence_Number);
 PARAMETER(WRK.G_L_Sub_Ledger_Code);

 //?** Rtv sub ledger code if GMPEC is "L", else set to zeros  E000512
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.G/L Sub-Ledger Code = CND.equal to zero
 WRK.G_L_Sub_Ledger_Code = *ZERO;

 ENDIF;

 //?*** Create A/R Post/Report Record from A/R Header OAC records
 EXECUTE FUNCTION(CRT Post/Report G/L    CR) TYPE(CRTOBJ) FILE(PDJ5CPP)          AC1341983;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Bank_Code);
 PARAMETER(PAR.Deposit_Date);
 PARAMETER(PAR.AR_Customer_Number);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Adjustment_Type_Code);
 PARAMETER(PAR.Transaction_Amount);
 PARAMETER(PAR.A_R_Check_Number);
 PARAMETER(PAR.G_L_Posting_Company);
 PARAMETER(PAR.G_L_ID_Code_JDE);
 PARAMETER(PAR.Last_Payment_Date);
 PARAMETER(PAR.Due_Date);
 PARAMETER(PAR.Order_Number_Ref);
 PARAMETER('Y');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.A_R_Processing_Status);
 PARAMETER('H');
 PARAMETER(PAR.GL_Document_Number);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Bank_G_L_ID_Code);
 PARAMETER(WRK.G_L_Sub_Ledger_Code);
 PARAMETER(WRK.EDI_Status_1);
 PARAMETER(WRK.EDI_Status_2);
 PARAMETER(WRK.EDI_Status_3);
 PARAMETER('A');
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*JOB);
 PARAMETER(JOB.*Job_date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?*** Change A/R Header Processing Code
 //?... RMC 4/4/05  OMS036 - if update sts is yes
 CASE;

 // IF PAR.Status - Y or N is yes
 IF PAR.Status_Y_or_N = 'Y';

 EXECUTE FUNCTION(CHG A/R Prcess Cd-Post CH) TYPE(CHGOBJ) FILE(ARBDCPP)          AC1342296;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(PAR.A_R_Processing_Status);
 ENDIF;

}


//?Write A/R Post/Report file from A/R Non-A/R Cash File
EXECUTE FUNCTION(CHG Post/Report        RT) TYPE(RTVOBJ) FILE(ARBKCPP)          AC1342298;
PARAMETER(PAR.Bank_Code);
PARAMETER(PAR.Deposit_Date);
PARAMETER(PAR.Deposit_Time);
PARAMETER(*BLANK);
PARAMETER(PAR.A_R_Processing_Status);
PARAMETER(PAR.Status_Y_or_N);
{
 //?USER: Initialize routine

 //?***** Change Log and comments
 DO;

 //?** 02/09/2010 LJB E000512  Default Sub Ledger to Zeros
 //?**
 //?Get Temporary OA number to use for Reporting file only
 ENDDO;

 EXECUTE FUNCTION(RTV Next on Account #  RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1335091;
 PARAMETER(*ZERO);
 PARAMETER(PAR.Next_On_Acct_Cash_Number);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 EXECUTE FUNCTION(VAL Set Int. Acc EXTNL IF) TYPE(EXCINTFUN)                     AC1277374;
 PARAMETER('A/R');
 PARAMETER(LCL.Company_Number);
 PARAMETER(NLL.Warehouse_Code);
 PARAMETER(NLL.Allow_Multi_Company);
 PARAMETER(NLL.Default_Printer);
 PARAMETER(NLL.Salesperson_Code);
 PARAMETER(NLL.Name);
 PARAMETER(NLL.System_Value_Alpha);
 PARAMETER(NLL.Access_Denied_Y_N);
 {
  //?Execute internal function

  // PAR.User Profile Name = JOB.*USER
  PAR.User_Profile_Name = JOB.*USER;

  EXECUTE FUNCTION(VAL User/Appl EXTERNAL IF) TYPE(EXCINTFUN)                     AC1277611;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Company_Number);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(WRK.Access_Denied_Y_N);
  {
   //?Execute internal function

   //?RMC 5/11/09 Rtv default company from user profile --
   //?  Override user code model company if it exists
   EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
   PARAMETER(PAR.User_Profile_Name);
   PARAMETER(PAR.Allow_Multi_Company);
   PARAMETER(PAR.Default_Printer);
   PARAMETER(PAR.Salesperson_Code);
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.User_Code_Model);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?User Profile Record Not found
   CASE;

   // IF PGM.*Return code is *Record does not exist
   IF PGM.*Return_code = 'Y2U0005';

   // PAR.Access Denied (Y/N) = CND.yes
   PAR.Access_Denied_Y_N = 'Y';

   PGM.*Return_code = 'Y2U9999';

   RETURN;

   //?User Profile Record Not found
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Access Denied (Y/N) = CND.no
   PAR.Access_Denied_Y_N = 'N';

   ENDIF;

   CASE;

   // IF PAR.User Code Model is equal to blank
   IF PAR.User_Code_Model = *BLANK;

   EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
   PARAMETER(PAR.User_Profile_Name);
   PARAMETER(PAR.Application_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(LCL.Warehouse_Code);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
   PARAMETER(PAR.User_Code_Model);
   PARAMETER(PAR.Application_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(LCL.Warehouse_Code);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

   // PAR.Warehouse Code = LCL.Warehouse Code
   PAR.Warehouse_Code = LCL.Warehouse_Code;

   //?Return code when not normal for Application Profile
   CASE;

   // IF PGM.*Return code is *Normal
   IF PGM.*Return_code = *BLANK;

   // PAR.Access Denied (Y/N) = CND.no
   PAR.Access_Denied_Y_N = 'N';

   //?Return code when not normal for Application Profile
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Access Denied (Y/N) = CND.yes
   PAR.Access_Denied_Y_N = 'Y';

   PGM.*Return_code = 'Y2U9999';

   RETURN;

   ENDIF;

   //?Use User Profile Control company if entered,get whse if the appl got one
   CASE;

   // IF LCL.Company Number is greater than zero
   IF LCL.Company_Number > *ZERO;

   // PAR.Company Number = LCL.Company Number
   PAR.Company_Number = LCL.Company_Number;

   CASE;

   // IF LCL.Warehouse Code is Not Blanks
   IF LCL.Warehouse_Code <> *BLANK;

   EXECUTE FUNCTION(RTV Prod Whse for Co  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1757887;
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(LCL.Shipping_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    CASE;

    // IF DB1.Record Status is Active
    IF DB1.Record_Status = 'A';

    CASE;

    // IF DB1.Production Warehouse Code is Warehouse Code not Blank
    IF DB1.Production_Warehouse_Code <> *BLANK;

    // PAR.Warehouse Code = DB1.Production Warehouse Code
    PAR.Warehouse_Code = DB1.Production_Warehouse_Code;

    QUIT;

    ENDIF;

    ENDIF;

   }

   ENDIF;

   ENDIF;

  }

  // PAR.Company Number = WRK.Company Number
  PAR.Company_Number = WRK.Company_Number;

  // PAR.Access Denied (Y/N) = WRK.Access Denied (Y/N)
  PAR.Access_Denied_Y_N = WRK.Access_Denied_Y_N;

  //?If access denied is no, rtv co. name
  CASE;

  // IF WRK.Access Denied (Y/N) is no
  IF WRK.Access_Denied_Y_N = 'N';

  EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
  PARAMETER(WRK.Company_Number);
  PARAMETER(PAR.Name);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  EXECUTE FUNCTION(RTV Screen Heading     RT) TYPE(EXCINTFUN)                     AC1277375;
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.System_Value_Alpha);
  {
   //?Execute internal function

   EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
   PARAMETER(PAR.Application_Code);
   PARAMETER(WRK.Description);
   {
    //?USER: Process Data record

    CASE;

    // IF DB1.Application Group is Blank
    IF DB1.Application_Group = *BLANK;

    MOVE *ALL (To: PAR From: DB1);

    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
    PARAMETER(DB1.Application_Group);
    PARAMETER(PAR.Description);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    ENDIF;

   }

   // WRK.USR Description 40 = WRK.Description
   WRK.USR_Description_40 = WRK.Description;

   // Execute function DSP Center Text Str 40 US.
   EXECUTE FUNCTION(DSP Center Text Str 40 US) TYPE(EXCUSRSRC) ('PDA0UFR');
   PARAMETER(WRK.USR_Description_40);
   PARAMETER(WRK.USR_Description_40_2);
   {
    E                    UCT        40  1               CENTER TABLE
    C                     MOVEA#IDSC4    UCT              LOAD ARRAY
    C                     Z-ADD40        UX      20       SET COUNTER
    C                     MOVE 'N'       FLAG    1        FLAG
    C           UX        DOWGT0
    C           FLAG      ANDEQ'N'
    C           UCT,UX    IFEQ ' '
    C                     SUB  1         UX
    C                     ELSE
    C                     Z-ADDUX        UXH     20
    C                     Z-ADD0         UX
    C                     MOVE 'Y'       FLAG
    C                     END
    C                     END
    C           40        SUB  UXH       UX
    C           UX        DIV  2         UX
    *** ADDED FOR HPE, THERE HEADER FOOTER IS OFF   MEA 042494
    C                     SUB  1         UX
    C           UX        IFGT 0
    C                     MOVE *BLANKS   UCT
    C                     MOVEA#IDSC4    UCT,UX
    C                     END
    C                     MOVEAUCT       #ODE40           LOAD OUTPUT
   }

   // PAR.System Value Alpha = WRK.USR Description 40   2
   PAR.System_Value_Alpha = WRK.USR_Description_40_2;

  }

 }

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 QUIT;

 //?USER: Process Data record

 CASE;

 // IF PAR.Bank Code EQ DB1.Bank Code
 IF PAR.Bank_Code = DB1.Bank_Code;

 // AND PAR.Deposit Date EQ DB1.Deposit Date
 AND PAR.Deposit_Date = DB1.Deposit_Date;

 EXECUTE FUNCTION(RTV Bank G/L           RT) TYPE(RTVOBJ) FILE(CAEBREP)          AC1333234;
 PARAMETER(PAR.Bank_Code);
 PARAMETER(PAR.USR_Bank_G_L_Apha_ID);
 {
  //?USER: Process Data record

  // PAR.G/L Alpha Code = DB1.G/L Alpha Code
  PAR.G_L_Alpha_Code = DB1.G_L_Alpha_Code;

 }

 // Call program Val G/L Act Cde 2 HPE XF.
 CALL PROGRAM(Val G/L Act Cde 2 HPE XF) ('PKVBXFR');
 PARAMETER(WRK.Company_Number);
 PARAMETER(PAR.USR_Bank_G_L_Apha_ID);
 PARAMETER(WRK.G_L_Code_Desc_USR);
 PARAMETER(PAR.Bank_G_L_ID_Code);
 PARAMETER(WRK.G_L_Account_Type_1_USR);
 PARAMETER(WRK.G_L_Account_Type_2_USR);
 PARAMETER(WRK.Record_Found_USR);

 //?Write A/R Posting and Report file record from Non A/R Cash
 // PAR.Next On Acct Cash Number = CON.1 + PAR.Next On Acct Cash Number
 PAR.Next_On_Acct_Cash_Number = 1 + PAR.Next_On_Acct_Cash_Number;

 // WRK.Invoice Number = PAR.Next On Acct Cash Number
 WRK.Invoice_Number = PAR.Next_On_Acct_Cash_Number;

 //?RMC OMS036 12/23/05 get g/l posting co
 // Call program VAL Acct ID JDE-8 dgt  UP.
 CALL PROGRAM(VAL Acct ID JDE-8 dgt  UP) ('ARACTRET');
 PARAMETER(DB1.G_L_ID_Code_JDE);
 PARAMETER(NLL.Cost_Center);
 PARAMETER(NLL.Object_Account);
 PARAMETER(NLL.Subsidiary);
 PARAMETER(NLL.Description);
 PARAMETER(PAR.G_L_Posting_Company);
 PARAMETER(NLL.JDE_Posting_Edit_Code_USR);
 PARAMETER(NLL.Error_Return_text);

 //?** Set subledger code to zeros                        E000512
 // LCL.G/L Sub-Ledger Code = CND.equal to zero
 LCL.G_L_Sub_Ledger_Code = *ZERO;

 EXECUTE FUNCTION(CRT Post/Report G/L    CR) TYPE(CRTOBJ) FILE(PDJ5CPP)          AC1341983;
 PARAMETER(LCL.Company_Number);
 PARAMETER(PAR.Bank_Code);
 PARAMETER(PAR.Deposit_Date);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Invoice_Number);
 PARAMETER('NA');
 PARAMETER(*ZERO);
 PARAMETER(DB1.Adjustment_Type_Code);
 PARAMETER(DB1.Transaction_Amount);
 PARAMETER(DB1.A_R_Check_Number);
 PARAMETER(PAR.G_L_Posting_Company);
 PARAMETER(DB1.G_L_ID_Code_JDE);
 PARAMETER(PAR.Deposit_Date);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.Effect_on_Account);
 PARAMETER(DB1.Explanation);
 PARAMETER(DB1.Reference_Field);
 PARAMETER(PAR.A_R_Processing_Status);
 PARAMETER('N');
 PARAMETER(DB1.GL_Document_Number);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Bank_G_L_ID_Code);
 PARAMETER(LCL.G_L_Sub_Ledger_Code);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER('A');
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?Update A/R Non A/R Cash Record - A/R Processing Code
 //?OMS036 RMC 4/4/05 If update status is yes
 CASE;

 // IF PAR.Status - Y or N is yes
 IF PAR.Status_Y_or_N = 'Y';

 EXECUTE FUNCTION(CHG A/R Processing Cde CH) TYPE(CHGOBJ) FILE(ARBKCPP)          AC1342322;
 PARAMETER(DB1.Bank_Code);
 PARAMETER(DB1.Deposit_Date);
 PARAMETER(DB1.Deposit_Time);
 PARAMETER(DB1.Reference_Field);
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.A_R_Processing_Status);
 PARAMETER(DB1.G_L_ID_Code_JDE);
 ENDIF;

 ENDIF;

}


//?Write Credit to cash G/L Record
// Call program CRT Crd-A/R G/L acct   XF.
CALL PROGRAM(CRT Crd-A/R G/L acct   XF) ('PDVSXFR');
PARAMETER(PAR.Bank_Code);
PARAMETER(PAR.Deposit_Date);
PARAMETER(PAR.Deposit_Time);
PARAMETER(PAR.A_R_Processing_Status);

//?Update Processing code for deposit record
//?OMS036 RMC 4/4/05 If update status is yes
CASE;

// IF PAR.Status - Y or N is yes
IF PAR.Status_Y_or_N = 'Y';

EXECUTE FUNCTION(RTV Chg Process Code   RT) TYPE(RTVOBJ) FILE(PDJ2CPP)          AC1344687;
PARAMETER(PAR.Bank_Code);
PARAMETER(PAR.Deposit_Date);
PARAMETER(PAR.Deposit_Time);
PARAMETER(PAR.A_R_Processing_Status);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.A/R Processing Status is Avail. and Posted
 IF DB1.A_R_Processing_Status = 'A'/'P';

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(CHG Process Code       CH) TYPE(CHGOBJ) FILE(PDJ2CPP)          AC1344695;
 PARAMETER(PAR.Bank_Code);
 PARAMETER(PAR.Deposit_Date);
 PARAMETER(PAR.Deposit_Time);
 PARAMETER(PAR.A_R_Processing_Status);
 PARAMETER(DB1.CD_TF_Internal_Batch_Nbr);
 PARAMETER(DB1.CD_TF_Immediate_Fund_Amt);
 PARAMETER(DB1.CD_TF_1_Day_Fund_Amt);
 PARAMETER(DB1.CD_TF_2_Day_Fund_Amt);
 PARAMETER(DB1.CD_SB_Exempt_Immed_Amt);
 PARAMETER(DB1.CD_SB_1_Day_Exempt_Immed);
 PARAMETER(DB1.CD_SB_2_Day_Exempt_Immed);
 PARAMETER(DB1.SBD_Exempt_Total_Amount);
 PARAMETER(DB1.ARBD_Unused_Amt_2);
 PARAMETER(DB1.ARBD_Unused_Amt_3);
 PARAMETER(DB1.ARBD_Unused_Amt_4);
 PARAMETER(DB1.ARBD_Unused_Amt_5);
 ENDIF;

}


ENDIF;

// Send information message - 'Report has been printed.'
MESSAGE(USR2100 *INFO);

