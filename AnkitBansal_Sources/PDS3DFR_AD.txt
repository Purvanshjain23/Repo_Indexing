// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDS3DFR
// ?Date: 14.08.2025 Time: 03:29:42
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

//?*** Do not display purged/posted deposits. ***
// WRK.Display Flag = CND.No
WRK.Display_Flag = 'N';

// PGM.*Scan limit = CND.999999
PGM.*Scan_limit = 999999;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

//?USER: Initialize subfile control

CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDIF;

//?USER: Initialize subfile record from DBF record

//?Display purged/posted records (yes or no)   - OMS036 4/5/05
DO;

CASE;

// IF WRK.Display Flag is No
IF WRK.Display_Flag = 'N';

// AND RCD.A/R Processing Status is History
AND ( RCD.A_R_Processing_Status = 'H';

// OR RCD.A/R Processing Status is Posted transaction
OR RCD.A_R_Processing_Status = 'P' );

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDDO;

EXECUTE FUNCTION(RTV Bank Description   RT) TYPE(RTVOBJ) FILE(CAEBREP)          AC1333216;
PARAMETER(DB1.Bank_Code);
PARAMETER(RCD.Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// RCD.USR Amount Remaining = DB1.Deposit Amount - DB1.Total Cash Applied
RCD.USR_Amount_Remaining = DB1.Deposit_Amount - DB1.Total_Cash_Applied;

//?USER: Process subfile record (Pre-confirm)

//?If Posted/History, can only do option 6=print journal     OMS036
CASE;

// IF RCD.A/R Processing Status is Open and Available
IF RCD.A_R_Processing_Status = 'A'/'E'/'O'/'R';

//?If Posted/History, can only do option 6=print journal     OMS036
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.*SFLSEL is Option 6
IF RCD.*SFLSEL = '6'/'6';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?If Internal Batch entered, cannot Edit or Delete          OMS036
CASE;

// IF RCD.CD TF Internal Batch Nbr is Entered
IF RCD.CD_TF_Internal_Batch_Nbr > *ZERO;

CASE;

// IF RCD.*SFLSEL is Option 2
IF RCD.*SFLSEL = '2'/'2';

// OR RCD.*SFLSEL is *Delete
OR RCD.*SFLSEL = '4'/'4';

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?2=Change or Edit Record
CASE;

// IF RCD.*SFLSEL is *Change Status
IF RCD.*SFLSEL = '2'/'2';

CASE;

// IF RCD.A/R Processing Status is Avail. and Posted
IF RCD.A_R_Processing_Status = 'A'/'P';

// Send error message - 'Deposit can not be changed.'
ERROR(USR2092);
MSGPARM(RCD.A_R_Processing_Status);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program EDT Open Deposits      E1.
CALL PROGRAM(EDT Open Deposits      E1) ('PDS8E1R');
PARAMETER(RCD.Bank_Code);
PARAMETER(RCD.Deposit_Date);
PARAMETER(RCD.Deposit_Time);

ENDIF;

ENDIF;

//?3=Display only
CASE;

// IF RCD.*SFLSEL is Option 3
IF RCD.*SFLSEL = '3'/'3';

// Call program Dsp Open Deposits     E1.
CALL PROGRAM(Dsp Open Deposits     E1) ('PPLYD1R');
PARAMETER(RCD.Bank_Code);
PARAMETER(RCD.Deposit_Date);
PARAMETER(RCD.Deposit_Time);

ENDIF;

//?4=Delete Record that has no activity
CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

// PAR.USR Confirm Status (Y/N) = CND.No
PAR.USR_Confirm_Status_Y_N = 'N';

//?Check for the existance of A/R Detail records.
DO;

EXECUTE FUNCTION(RTV Check Exits        RT) TYPE(RTVOBJ) FILE(ARBECPP)          AC1333277;
PARAMETER(RCD.Bank_Code);
PARAMETER(RCD.Deposit_Date);
PARAMETER(RCD.Deposit_Time);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// PAR.USR Confirm Status (Y/N) = CND.Yes
PAR.USR_Confirm_Status_Y_N = 'Y';

ENDIF;

ENDDO;

//?Check for the existance of A/R Non-Cash records.
DO;

EXECUTE FUNCTION(RTV Exits              RT) TYPE(RTVOBJ) FILE(ARBKCPP)          AC1333278;
PARAMETER(RCD.Bank_Code);
PARAMETER(RCD.Deposit_Date);
PARAMETER(RCD.Deposit_Time);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// PAR.USR Confirm Status (Y/N) = CND.Yes
PAR.USR_Confirm_Status_Y_N = 'Y';

ENDIF;

ENDDO;

CASE;

// IF PAR.USR Confirm Status (Y/N) is No
IF PAR.USR_Confirm_Status_Y_N = 'N';

EXECUTE FUNCTION(DLT AR A/R Bank DepositDL) TYPE(DLTOBJ) FILE(PDJ2CPP)          AC1333050;
PARAMETER(RCD.Bank_Code);
PARAMETER(RCD.Deposit_Date);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Bank Deposit record can not be deleted.  Cash records have been applied.'
ERROR(USR2073);
MSGPARM(RCD.Bank_Code);

ENDIF;

ENDIF;

//?5=Apply to Customer
CASE;

// IF RCD.*SFLSEL is *Apply to Customer
IF RCD.*SFLSEL = '5';

CASE;

// IF RCD.A/R Processing Status is Avail. and Posted
IF RCD.A_R_Processing_Status = 'A'/'P';

// Send error message - 'Deposit can not be changed.'
ERROR(USR2092);
MSGPARM(RCD.A_R_Processing_Status);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program ADD Apply Cash to Cust PV.
CALL PROGRAM(ADD Apply Cash to Cust PV) ('PDTUPVR');
PARAMETER(RCD.Bank_Code);
PARAMETER(RCD.Deposit_Date);
PARAMETER(RCD.Deposit_Time);

ENDIF;

ENDIF;

//?6=Print Cash Journal
CASE;

// IF RCD.*SFLSEL is *Print Cash Journal
IF RCD.*SFLSEL = '6'/'6';

// PAR.Company Number Pass   USR = PAR.Company Number
PAR.Company_Number_Pass_USR = PAR.Company_Number;

// PAR.Date 1          PASS  USR = RCD.Deposit Date
PAR.Date_1_PASS_USR = RCD.Deposit_Date;

// PAR.System Value Numeric = CON.1.00000
PAR.System_Value_Numeric = 1.00000;

// WRK.Time  4A             USR = CVTVAR(RCD.Deposit Time)
WRK.Time_4A_USR = CVTVAR(RCD.Deposit_Time);

//?Update if the Proc Sts isnt posted or history     OMS036
CASE;

// IF RCD.A/R Processing Status is Open and Available
IF RCD.A_R_Processing_Status = 'A'/'E'/'O'/'R';

// WRK.Status - Y or N = CND.yes
WRK.Status_Y_or_N = 'Y';

//?Update if the Proc Sts isnt posted or history     OMS036
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Status - Y or N = CND.no
WRK.Status_Y_or_N = 'N';

ENDIF;

// Call program PRT Prmt Cash Journal  UP.
CALL PROGRAM(PRT Prmt Cash Journal  UP) ('PDY5UPR');
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(RCD.Bank_Code);
PARAMETER(PAR.Date_1_PASS_USR);
PARAMETER('A/R Cash Journal');
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(WRK.Status_Y_or_N);
PARAMETER(PAR.Application_Code);
PARAMETER(WRK.Time_4A_USR);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?7=Work with OA Cash
CASE;

// IF RCD.*SFLSEL is *WW OA Cash
IF RCD.*SFLSEL = '7';

CASE;

// IF RCD.A/R Processing Status is Avail. and Posted
IF RCD.A_R_Processing_Status = 'A'/'P';

// Send error message - 'Deposit can not be changed.'
ERROR(USR2092);
MSGPARM(RCD.A_R_Processing_Status);

// IF *OTHERWISE
IF *OTHERWISE;

//?RMC  --New OMS036 3/30/05
// Call program WW On Account Cash     DF.
CALL PROGRAM(WW On Account Cash     DF) ('PPL6DFR');
PARAMETER(RCD.Bank_Code);
PARAMETER(RCD.Deposit_Date);
PARAMETER(RCD.Deposit_Time);

ENDIF;

ENDIF;

//?8=WW Non A/R Cash
CASE;

// IF RCD.*SFLSEL is *Non A/R Cash
IF RCD.*SFLSEL = '8';

CASE;

// IF RCD.A/R Processing Status is Avail. and Posted
IF RCD.A_R_Processing_Status = 'A'/'P';

// Send error message - 'Deposit can not be changed.'
ERROR(USR2092);
MSGPARM(RCD.A_R_Processing_Status);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program WW Non-A/R Cash        DF.
CALL PROGRAM(WW Non-A/R Cash        DF) ('PDTCDFR');
PARAMETER(RCD.Bank_Code);
PARAMETER(RCD.Deposit_Date);
PARAMETER(RCD.Deposit_Time);

ENDIF;

ENDIF;

//?9=G/L Post
CASE;

// IF RCD.*SFLSEL is *G/L Post
IF RCD.*SFLSEL = '9';

//?get the latest status
EXECUTE FUNCTION(RTV A/R Process Code   RT) TYPE(RTVOBJ) FILE(PDJ2CPP)          AC1414370;
PARAMETER(RCD.Bank_Code);
PARAMETER(RCD.Deposit_Date);
PARAMETER(RCD.Deposit_Time);
PARAMETER(RCD.A_R_Processing_Status);
{
 //?USER: Process Data record

 // PAR.A/R Processing Status = DB1.A/R Processing Status
 PAR.A_R_Processing_Status = DB1.A_R_Processing_Status;

}


CASE;

// IF RCD.A/R Processing Status is Avail. and Posted
IF RCD.A_R_Processing_Status = 'A'/'P';

// Send error message - 'Posting has already occurred, invalid request'
ERROR(USR1130);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program VAL Prmpt Deposit Post PV.
CALL PROGRAM(VAL Prmpt Deposit Post PV) ('PDZDPVR');
PARAMETER(RCD.Bank_Code);
PARAMETER(RCD.Deposit_Date);
PARAMETER(RCD.Deposit_Time);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?13=Dsp Appld
CASE;

// IF RCD.*SFLSEL is Option 13
IF RCD.*SFLSEL = '13';

// Call program DSP Detail f/Deposit  DF.
CALL PROGRAM(DSP Detail f/Deposit  DF) ('PPMPDFR');
PARAMETER(RCD.Bank_Code);
PARAMETER(RCD.Deposit_Date);
PARAMETER(RCD.Deposit_Time);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?USER: Process command keys

CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Create Open Deposit Record
CASE;

// IF CTL.*CMD key is *Create
IF CTL.*CMD_key = '06';

// Call program EDT Open Deposits      E1.
CALL PROGRAM(EDT Open Deposits      E1) ('PDS8E1R');
PARAMETER(CTL.Bank_Code);
PARAMETER(CTL.Deposit_Date);
PARAMETER(CTL.Deposit_Time);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F15=Show/Hide Posted Deposits
CASE;

// IF CTL.*CMD key is CF15
IF CTL.*CMD_key = '15';

CASE;

// IF WRK.Display Flag is Yes
IF WRK.Display_Flag = 'Y';

// WRK.Display Flag = CND.No
WRK.Display_Flag = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Display Flag = CND.Yes
WRK.Display_Flag = 'Y';

ENDIF;

// CTL.A/R Processing Status = WRK.BLANK
CTL.A_R_Processing_Status = WRK.BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

