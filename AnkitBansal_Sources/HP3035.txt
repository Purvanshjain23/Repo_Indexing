      *****************  RPG PROGRAM HEADING  ************************
      * SYSTEM:      HPS Hog Production
      * PROGRAM:     HP3035 - Workfile: Hog Defect Download
      * PROGRAMMER:  LeAnne Ramsey
      * CREATED:     12/22/08
      *
      * FUNCTION:    This program builds a workfile of Hog Defect Data.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE       PROGRAMMER
      *
      * 10/15/13  LeAnne Ramsey (E2831)
      *           Recompile only. Added field 'MTech Reference'.
      * 11/03/20  ISE           (H16853)
      *           Recompile only. Increased Buy Order field length from 5 to 7.
      /eject
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fpka1cpk1  if   e           k disk
      *  Tattoo header (LF and open query selections)
      *
      *
     Fpkdzrel1  if   e           k disk
      *  Tattoo defect
      *
      *
     Fhsp018    if   e           k disk
      *  Farm site (records selected with open query)
      *
      *
     Fhsp3035   uf a e           k disk
      *  Workfile: Hog defect download
      *
      /eject
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Control fields
      *
     D count           s              7  0
      *
      *
      * Workfields
      *
     D wkcono          s                   like(a1hmnb) inz(360)
     D wkkldt          s                   like(w1kldt)
      *
      *
      * Parms
      *
     D xxflag          s              1
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
      * Process each HPS Farm Site record selected by the Open Query.
      * For each Farm, process all of its Tattoo records.
      *
     C                   dou       *in90 = *on                                  Main do
     C                   read      hsp018                                 90
     C                   if        *in90 = *off                                 If not EOF
     C                   exsr      $tattoo
     C                   endif                                                  If not EOF
     C                   enddo                                                  Main do
      *
      *----------------
      * EOF processing
      *----------------
      *
      * We are going to ultimately e-mail this workfile as an Excel Spreadsheet
      * using Sequel. Rose has warned me that the Excel limit is 66,000 records.
      * When/if you exceed this limit, the "view" goes into "la-la" land.
      * So, we have counted each record that we wrote to the workfile. If it
      * exceeds 66,000, we will send a "too many" message from the CL instead
      * of executing the SQL statement. Likewise, if the "count" is zero, we will
      * issue a "no data extracted; change your selections message".
      *
     C                   select
     C                   when      count = 0
     C                   move      'Z'           xxflag
      *
     C                   when      count >= 66000
     C                   move      'T'           xxflag
     C                   other
      *
     C                   move      *blank        xxflag
     C                   endsl
      *
     C                   seton                                        lr
      /eject
      *---------------------------------------------------------------
      * Process all Tattoo Header records for a Farm Site
      *---------------------------------------------------------------
      *
     C     $tattoo       begsr
      *
      * Record selections:
      *    1) in the Kill Date range entered by the user (open query)
      *    2) for company 360 (hardcoded)                (open query)
      *    3) Hog Class Type = R                         (LF select)
      *    4) Source Type = I                            (LF select)
      *
      * Read all Tattoo records for:
      *   1) Company = 360
      *   2) Farm site
      *
     C     key01         setll     pka1cpk1
      *
     C                   dou       *in91 = *on                                  Do tattoo
     C     key01         reade     pka1cpk1                               91
     C                   if        *in91 = *off                                 If not EOF
      *
      * Get 7,0 date into Date Format field (MMDDYYYY)
      *
     C                   eval      wkkldt = %date(a1b0dt:*cymd)
      *
      * Retrieve Defect records
     C                   exsr      $defects
      *
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do tattoo
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Retrieve Defect records
      *---------------------------------------------------------------
      *
      * Retrieve all Defect records for this:
      *   Company
      *   Buy Order Number
      *   Load Number
      *   Tattoo Number
      *   Kill Date
      *
     C     $defects      begsr
      *
     C     key02         setll     pkdzrel1
      *
     C                   dou       *in93 = *on                                  Do defects
     C     key02         reade     pkdzrel1                               93
     C                   if        *in93 = *off                                 If not EOF
     C                   exsr      $wrtupd
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do tattoo
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Write/Update Workfile record for Defect
      *---------------------------------------------------------------
      *
     C     $wrtupd       begsr
      *
      * Update if you already have a record for this:
      *    Kill date
      *    Farm site
      *    Defect code
      *    Average live weight
      * otherwise
      *    Write a record
      *
     C     key03         chain     hsp3035                            92
     C                   if        *in92 = *off                                 If updating
     C                   add       dzljnb        w1hd
     C                   eval      w1estlb = w1avglb * w1hd
     C                   update    w1rec
     C                   else
      *
     C                   z-add     fsfscd        w1fscd
     C                   z-add     fscell        w1cell
     C                   move      fstfcd        w1tfcd
     C                   eval      w1kldt = wkkldt
     C                   z-add     a1f7nb        w1avglb
     C                   move      dzbdcd        w1dfcd
     C                   z-add     dzljnb        w1hd
     C                   eval      w1estlb = w1avglb * w1hd
      *
     C                   write     w1rec
     C                   add       1             count
     C                   endif                                                  If updating
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
     C     *entry        plist
     C                   parm                    xxflag
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    wkcono
     C                   kfld                    fsfscd
      *
     C     key02         klist
     C                   kfld                    a1hmnb
     C                   kfld                    a1bnnb
     C                   kfld                    a1bonb
     C                   kfld                    a1cvnb
     C                   kfld                    a1b0dt
      *
     C     key03         klist
     C                   kfld                    wkkldt
     C                   kfld                    fsfscd
     C                   kfld                    dzbdcd
     C                   kfld                    a1f7nb
      *
     C                   endsr
      /eject
