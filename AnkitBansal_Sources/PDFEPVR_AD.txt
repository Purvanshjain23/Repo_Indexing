// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDFEPVR
// ?Date: 14.08.2025 Time: 03:31:39
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.PRT Printer Device = CND.Not entered
PAR.PRT_Printer_Device = *BLANK;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

EXECUTE FUNCTION(RTV Appl Whs Restrict  RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1959551;
PARAMETER(JOB.*USER);
PARAMETER(LCL.Application_WHS_Restrict);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?***** Change Log and Comments
DO;

//?05/23/16 RMC E4119 remove live with tpm check
//?** 04/13/2015 LJB E004119
//?** Add Live w/TPM tests. Skip rev of Load Header or Load Detail
//?**   information-Load Status will be blanks
//?*****
EXECUTE FUNCTION(E00519 Access by WHS  IF) TYPE(EXCINTFUN)                      AC1960775;
{
 //?Execute internal function

 //?---------- November 2009 PKD ----------
 //?*****  WW Cust/Order Inq O.E.  *****
 //?- Do not allow Transfer Co if Application WHS Restrict = Y.
 //?***** Edit Order Header ***** -TESTED 11/10/09
 //?-  Added validation on Warehouse Code.  If Application WHS Restrict
 //?is Yes, then only the Warehouse Code for O/P Application Code
 //?are allowed.  If the Application WHS Restrict is No, then the
 //?User is allowed access to all Active Warehouses.
 //?-  Changed the F4=Prompt to only display the Warehouses the
 //?User has access to if the Application WHS Restrict is Yes.
 //?***** Edit Order Detail Lines & Copy Order Template ***** TESTED 11/10
 //?-  Added validation for Item Code. For each application and
 //?Warehouse, addtional access control is defined for TF Exempt Code.
 //?Users that are restricted by Warehouse, they may also be restricted
 //?on the Items they are able to sell.
 //?-  Added validation on Order TF Exempt Code.  If the Customer is
 //?is Exempt, then they can only sell Exempt Product. (E00505)
 //?***** Edit Load Plan Order Entry *****
 //?-  Added WHS Code to the Control Context and Record Context.
 //?For Users that are Application WHS Restrict = Yes,
 //?the CTL.Warehouse Code will be restricted to the
 //?Warehouses that they have access to.
 //?-  CTL.Warehouse Code will be required for Users with
 //?Application Warehouse Controlled.
 //?-  Added Delivery State Code (Sail Port State) to the screen.
 //?It will default to the Ship To State Code.  It will be overriden
 //?to the Sail Port State if the Shipping Line and Port Delivery
 //?Terminal are entered in the Order Header Extent.
 //?-  Added subfile select for WHS and Delv ST.
 //?***** Edit Load Plan *****
 //?-  For Users that are Application WHS Restrict = Yes,
 //?the CTL.Warehouse Code will be restricted to the
 //?Warehouses that they have access to.
 //?-  CTL.Warehouse Code will be required for Users with
 //?Application Warehouse Controlled.
 //?-  CTL.USR Load Type---Default from the CTL.USR Warehosue Code
 //?for users that are Application WHS Restrict.
 //?***** Display Change Log/Accept Load (PDAOXFR) *****
 //?-  Deletes will not be accepted by Application WHS Restricted
 //?users because we do not know the Warehouse that was on the Load.
 //?-  If Application WHS Restrict is Yes, then only select the load
 //?for acceptance if at least one order on the load has a warehouse
 //?where the user has access.
 //?-  Reverse imaged Warehouse Code on the Display. The Users with
 //?Application WHS Restrict of No will be able to see all Loads.
 //?***** Edit Load Plan *****
 //?- Added Warehouse Code to the Control and Detail Context with
 //?appropriate validations.
 //?***** Work With Load Confirmation *****
 //?- Added Warehouse Code as a parameter from the Work With Load
 //?Plan All screen for selection of the Loads to Display on the
 //?screen.  Added selection for Warehouse Code if one passed in.
 //?If the Load is not to be selected due to not matching the Whs,
 //?a record is created for the load in the array (exception array).
 //?- Added Warehouse Code to the Subfile.
 //?***** Order Status Report Prompt *****
 //?- Added Warehouse Code restriction on the prompt.
 //?***** Work With Orders Price Audit/Maintenance *****
 //?- Added Warehouse Code restriction.
 //?***** Work With Orders - Edit Ship Date  *****
 //?- Added Warehouse Code restriction.
}


//?*****
//?** 10/03/2006 LJB L61002C
//?** Added Print Yes/No flag to control display of pricing
//?** information on the printed report. This will be controlled
//?** from the menu.
//?*****
ENDDO;

//?USER: Load screen

//?First Time
CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// DTL.Company Number CDE = PAR.Company Number
DTL.Company_Number_CDE = PAR.Company_Number;

// DTL.USR Summary/Detail or Tot = CND.Summary
DTL.USR_Summary_Detail_or_Tot = 'S';

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

CASE;

// IF LCL.Application WHS Restrict is yes
IF LCL.Application_WHS_Restrict = 'Y';

EXECUTE FUNCTION(Rtv 1st Warehouse     RT) TYPE(RTVOBJ) FILE(PNFOREP)           AC1960292;
PARAMETER(JOB.*USER);
PARAMETER('O/P');
PARAMETER(DTL.Warehouse_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(PAR.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.USR Detail or Summary = CND.Report Selection 1
DTL.USR_Detail_or_Summary = 1;

//?USER: Validate fields

// PAR.Company Number = DTL.Company Number CDE
PAR.Company_Number = DTL.Company_Number_CDE;

// PAR.Order Number = DTL.CD7 Int Numeric Key
PAR.Order_Number = DTL.CD7_Int_Numeric_Key;

//?Process F4 on Company Number
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Company Number CDE
IF PGM.*Cursor_field = DTL.Company_Number_CDE;

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(DTL.Company_Number_CDE);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

ENDIF;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Customer Number
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR From Customer
AND PGM.*Cursor_field = DTL.USR_From_Customer;

//?033104 SLM ADD SHIP TO CUSTOMER POSITION BY CUSTOMER NAME
// Call program SEL Cust/ShpTo Flag 'Y'SR.
CALL PROGRAM(SEL Cust/ShpTo Flag 'Y'SR) ('PDYSSRR');
PARAMETER(DTL.Ship_To_Customer);

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(DTL.USR_From_Customer);
PARAMETER(DTL.Ship_To_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Sales Route
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Sales Route Code
AND PGM.*Cursor_field = DTL.Sales_Route_Code;

// Call program SEL Route by Sls Persn SR.
CALL PROGRAM(SEL Route by Sls Persn SR) ('PDS1SRR');
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(DTL.Sales_Route_Description);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Order Number
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.CD7 Int Numeric Key
AND PGM.*Cursor_field = DTL.CD7_Int_Numeric_Key;

// Call program Zzz Ord Avail Ord Sts  SR.
CALL PROGRAM(Zzz Ord Avail Ord Sts  SR) ('PDPMSRR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);

// DTL.CD7 Int Numeric Key = PAR.Order Number
DTL.CD7_Int_Numeric_Key = PAR.Order_Number;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Warehouse Code
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Warehouse Code
AND PGM.*Cursor_field = DTL.Warehouse_Code;

CASE;

// IF LCL.Application WHS Restrict is no
IF LCL.Application_WHS_Restrict = 'N';

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.Warehouse_Code);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Sel User Appl Whs     SR.
CALL PROGRAM(Sel User Appl Whs     SR) ('PNMMSRR');
PARAMETER(JOB.*USER);
PARAMETER('O/P');
PARAMETER(DTL.Warehouse_Code);

ENDIF;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Load ID-from Load Hdr or Order Hdr      E004119
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Load ID
AND PGM.*Cursor_field = DTL.Load_ID;

//?05/23/16 RMC E4119 remove live with tpm check
// Call program SEL Load ID            SR.
CALL PROGRAM(SEL Load ID            SR) ('OMCPSRR');
PARAMETER(DTL.Load_ID);
PARAMETER(PAR.Company_Number);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?CALC: Screen function fields

EXECUTE FUNCTION(Price Method Desc DRV) TYPE(DRVFLD)                            AC1832466;
PARAMETER(DTL.Price_Method_Desc_DRV);
PARAMETER(DTL.Price_Method_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Price Method Desc  RT) TYPE(RTVOBJ) FILE(PDIHREP)          AC1298165;
 PARAMETER(PAR.Price_Method_Code);
 PARAMETER(PAR.Price_Method_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Validate relations

EXECUTE FUNCTION(Val Warehouse         IF) TYPE(EXCINTFUN)                      AC1961537;
PARAMETER(LCL.Application_WHS_Restrict);
PARAMETER(DTL.Warehouse_Code);
PARAMETER('O/P');
{
 //?Execute internal function

 //?VAL: Warehouse Code
 CASE;

 // IF PAR.Application WHS Restrict is yes
 IF PAR.Application_WHS_Restrict = 'Y';

 CASE;

 // IF PAR.Warehouse Code is Blanks
 IF PAR.Warehouse_Code = *BLANK;

 // Send error message - 'Warehouse Code is required.'
 ERROR(USR2015);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Val App Whs Itm Acs   XF.
 CALL PROGRAM(Val App Whs Itm Acs   XF) ('PNMOXFR');
 PARAMETER(JOB.*USER);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(*ZERO);
 PARAMETER(LCL.WHS_Item_Access_Sts_USR);

 CASE;

 // IF LCL.WHS/Item Access Sts USR is Access Denied
 IF LCL.WHS_Item_Access_Sts_USR = 'D';

 // Send error message - 'Access Denied to &1 for Warehouse &2.'
 ERROR(USR2776);
 MSGPARM(JOB.*USER);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 ENDIF;

 ENDIF;

 //?VAL: Warehouse Code
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Warehouse Code is Not Blanks
 IF PAR.Warehouse_Code <> *BLANK;

 EXECUTE FUNCTION(Val Warehouse Exists   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1323885;
 PARAMETER(PAR.Warehouse_Code);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // Send error message - 'Warehouse Codes not found.'
 ERROR(USR0007);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Validate company if entered
CASE;

// IF DTL.Company Number CDE is not equal to zero
IF DTL.Company_Number_CDE <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is Company not found
IF PGM.*Return_code = 'USR0003';

// DTL.Company Number = DTL.Company Number CDE
DTL.Company_Number = DTL.Company_Number_CDE;

// Send error message - 'Company Number not found'
ERROR(USR0163);

ENDIF;

ENDIF;

//?Validate customer if entered
CASE;

// IF DTL.USR From Customer is not equal to zero
IF DTL.USR_From_Customer <> *ZERO;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(DTL.USR_From_Customer);
PARAMETER(DTL.Ship_To_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// DTL.Ship To Customer = DTL.USR From Customer
DTL.Ship_To_Customer = DTL.USR_From_Customer;

// Send error message - 'Customer Master not found.'
ERROR(USR0170);
MSGPARM(DTL.Ship_To_Customer);

ENDIF;

ENDIF;

//?Validate Sales Route if entered
CASE;

// IF DTL.Sales Route Code is entered
IF DTL.Sales_Route_Code <> *BLANK;

EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1270614;
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(DTL.Sales_Route_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Invalid Sales Route Code'
ERROR(USR2240);
MSGPARM(DTL.Sales_Route_Code);

ENDIF;

ENDIF;

//?Validate Scheduled Ship Date
CASE;

// IF DTL.USR From Date is not equal zero
IF DTL.USR_From_Date <> *ZERO;

EXECUTE FUNCTION(RTV Calendar           RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1102049;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.USR_From_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.Calendar not found
 PGM.*Return_code = 'USR0018';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


CASE;

// IF PGM.*Return code is Calendar not found
IF PGM.*Return_code = 'USR0018';

// Send error message - 'Date entered is not found in the Calendar file'
ERROR(USR0567);
MSGPARM(DTL.USR_From_Date);

ENDIF;

ENDIF;

//?Validate Actual Shipped Date
CASE;

// IF DTL.USR Through Date is not equal zero
IF DTL.USR_Through_Date <> *ZERO;

EXECUTE FUNCTION(RTV Calendar           RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1102049;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.USR_Through_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.Calendar not found
 PGM.*Return_code = 'USR0018';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


CASE;

// IF PGM.*Return code is Calendar not found
IF PGM.*Return_code = 'USR0018';

// Send error message - 'Date entered is not found in the Calendar file'
ERROR(USR0567);
MSGPARM(DTL.USR_Through_Date);

ENDIF;

ENDIF;

//?Get Price Status Description
CASE;

// IF DTL.Price Status NE WRK.BLANK
IF DTL.Price_Status <> WRK.BLANK;

// DTL.USR Desc. 10 = Condition name of DTL.Price Status
DTL.USR_Desc_10 = RTVCND(DTL.Price_Status);

ENDIF;

//?Get Price Audit Description
CASE;

// IF DTL.Price Audit NE WRK.BLANK
IF DTL.Price_Audit <> WRK.BLANK;

// DTL.USR Description - 15 = Condition name of DTL.Price Audit
DTL.USR_Description_15 = RTVCND(DTL.Price_Audit);

ENDIF;

//?Get Modified Flag Description
CASE;

// IF DTL.Modified Flag NE WRK.BLANK
IF DTL.Modified_Flag <> WRK.BLANK;

// DTL.Description = Condition name of DTL.Modified Flag
DTL.Description = RTVCND(DTL.Modified_Flag);

ENDIF;

//?Get Load Status Description  Blanks if Live with TPM  E004019
CASE;

// IF DTL.Load Status NE WRK.BLANK
IF DTL.Load_Status <> WRK.BLANK;

//?05/23/16 RMC E4119 remove live with tpm check
// DTL.Item Structure Type Desc = Condition name of DTL.Load Status
DTL.Item_Structure_Type_Desc = RTVCND(DTL.Load_Status);

ENDIF;

//?Get Order Status Description
CASE;

// IF DTL.Header Status NE WRK.BLANK
IF DTL.Header_Status <> WRK.BLANK;

// DTL.Item Structure Group Desc = Condition name of DTL.Header Status
DTL.Item_Structure_Group_Desc = RTVCND(DTL.Header_Status);

ENDIF;

//?Get Block Order Flag Description
CASE;

// IF DTL.Block Order Flag NE WRK.BLANK
IF DTL.Block_Order_Flag <> WRK.BLANK;

// DTL.USR Description 16 = Condition name of DTL.Block Order Flag
DTL.USR_Description_16 = RTVCND(DTL.Block_Order_Flag);

ENDIF;

//?USER: User defined action

MOVE *ALL (To: PAR From: DTL);

//?Submit job for Print
// PAR.Company Number Pass   USR = DTL.Company Number CDE
PAR.Company_Number_Pass_USR = DTL.Company_Number_CDE;

// PAR.Customer Number Pass  USR = DTL.USR From Customer
PAR.Customer_Number_Pass_USR = DTL.USR_From_Customer;

// PAR.Order Number 1  PASS  USR = DTL.CD7 Int Numeric Key
PAR.Order_Number_1_PASS_USR = DTL.CD7_Int_Numeric_Key;

// PAR.Order Number 2  PASS  USR = DTL.Load ID
PAR.Order_Number_2_PASS_USR = DTL.Load_ID;

// PAR.Date 1          PASS  USR = DTL.USR From Date
PAR.Date_1_PASS_USR = DTL.USR_From_Date;

// PAR.Date 2          PASS  USR = DTL.USR Through Date
PAR.Date_2_PASS_USR = DTL.USR_Through_Date;

//?** Added Print Yes/No flag to control display of pricing
//?** information on the printed report   10/03/2006 LJB L61002C
// Call program PRT Order Status Inq   UP.
CALL PROGRAM(PRT Order Status Inq   UP) ('PDPFUPR');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('O/M');
PARAMETER('PDPDCLP');
PARAMETER('Order Status Inq. Print');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Customer_Number_Pass_USR);
PARAMETER(PAR.Date_1_PASS_USR);
PARAMETER(PAR.Date_2_PASS_USR);
PARAMETER(PAR.Order_Number_1_PASS_USR);
PARAMETER(PAR.Order_Number_2_PASS_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.USR_Summary_Detail_or_Tot);
PARAMETER(DTL.USR_Detail_or_Summary);
PARAMETER(DTL.Header_Status);
PARAMETER(DTL.Price_Audit);
PARAMETER(DTL.Price_Status);
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(DTL.Modified_Flag);
PARAMETER(DTL.Block_Order_Flag);
PARAMETER(DTL.Load_Status);
PARAMETER(PAR.Print_Yes_No_USR);
PARAMETER(DTL.Price_Method_Code);

//?** submitted message
CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

//?USER: Exit program processing

CASE;

// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

PGM.*Return_code = 'Y2U9999';

RETURN;

ENDIF;

