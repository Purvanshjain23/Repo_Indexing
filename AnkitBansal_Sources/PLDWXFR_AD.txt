// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLDWXFR
// ?Date: 14.08.2025 Time: 02:53:52
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?H16853 ISE 11/05/2020-Recompiled due to change in Buy Order Number
// Call program Rtv Co for User       XF.
CALL PROGRAM(Rtv Co for User       XF) ('PLF8XFR');
PARAMETER(WRK.CC_Company_Number);
PARAMETER('HPE');

EXECUTE FUNCTION(Rtv Kill Date to Cut  Rt) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1255682;
PARAMETER(WRK.CC_Company_Number);
PARAMETER(PAR.TH_Kill_Date);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Clc Kill to Cut Time  IF) TYPE(EXCINTFUN)                      AB1255645;
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TH_Hot_Scl_Upload_Time);
 PARAMETER(DB1.TH_Cold_Scl_Upload_Date);
 PARAMETER(DB1.TH_Cold_Scl_Upload_Time);
 PARAMETER(PAR.Wait_Time_4_0_USR);
 {
  //?Execute internal function

  // PAR.Wait Time 4.0 USR = CON.*ZERO
  PAR.Wait_Time_4_0_USR = *ZERO;

  CASE;

  // IF PAR.TH Hot Scl Upload Time is Entered
  IF PAR.TH_Hot_Scl_Upload_Time <> *ZERO;

  // AND PAR.TH Cold Scl Upload Time is Entered
  AND PAR.TH_Cold_Scl_Upload_Time <> *ZERO;

  // PAR.Time End USR = CVTVAR(PAR.TH Cold Scl Upload Time)
  PAR.Time_End_USR = CVTVAR(PAR.TH_Cold_Scl_Upload_Time);

  // PAR.Time Beg USR = CVTVAR(PAR.TH Hot Scl Upload Time)
  PAR.Time_Beg_USR = CVTVAR(PAR.TH_Hot_Scl_Upload_Time);

  CASE;

  // IF PAR.TH Kill Date LT PAR.TH Cold Scl Upload Date
  IF PAR.TH_Kill_Date < PAR.TH_Cold_Scl_Upload_Date;

  // LCL.Number 1 USR = PAR.TH Cold Scl Upload Date - PAR.TH Kill Date *DAYS
  LCL.Number_1_USR = DURATION(PAR.TH_Cold_Scl_Upload_Date PAR.TH_Kill_Date 'DY' 1111111
  'NONE' 'N' 1);

  // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
  LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

  // PAR.Time End USR = PAR.Time End USR + LCL.Usr Elapsed hours
  PAR.Time_End_USR = PAR.Time_End_USR + LCL.Usr_Elapsed_hours;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Number 1 USR = PAR.TH Kill Date - PAR.TH Cold Scl Upload Date *DAYS
  LCL.Number_1_USR = DURATION(PAR.TH_Kill_Date PAR.TH_Cold_Scl_Upload_Date 'DY' 1111111
  'NONE' 'N' 1);

  // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
  LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

  // PAR.Time Beg USR = PAR.Time Beg USR + LCL.Usr Elapsed hours
  PAR.Time_Beg_USR = PAR.Time_Beg_USR + LCL.Usr_Elapsed_hours;

  ENDIF;

  // PAR.Time Diff Usr = PAR.Time End USR - PAR.Time Beg USR *HHMMSS
  PAR.Time_Diff_Usr = TIMELAPSED(PAR.Time_End_USR PAR.Time_Beg_USR 'HS');

  // LCL.Hours USR = PAR.Time Diff Usr *HOURS
  LCL.Hours_USR = TIMEDTLS(PAR.Time_Diff_Usr 'HR');

  // LCL.Minutes USR = PAR.Time Diff Usr *MINUTES
  LCL.Minutes_USR = TIMEDTLS(PAR.Time_Diff_Usr 'MN');

  // LCL.Wait Time 4.0 USR = LCL.Hours USR * CON.60 *
  LCL.Wait_Time_4_0_USR = LCL.Hours_USR * 60;

  // PAR.Wait Time 4.0 USR = LCL.Wait Time 4.0 USR + LCL.Minutes USR
  PAR.Wait_Time_4_0_USR = LCL.Wait_Time_4_0_USR + LCL.Minutes_USR;

  ENDIF;

 }

 CASE;

 // IF PAR.Wait Time 4.0 USR is Entered
 IF PAR.Wait_Time_4_0_USR <> *ZERO;

 CASE;

 // IF DB1.TH Schedule Kill Shift is Shift 1
 IF DB1.TH_Schedule_Kill_Shift = '1';

 // LCL.Count USR = LCL.Count USR + CON.1
 LCL.Count_USR = LCL.Count_USR + 1;

 // LCL.Minutes USR = LCL.Minutes USR + PAR.Wait Time 4.0 USR
 LCL.Minutes_USR = LCL.Minutes_USR + PAR.Wait_Time_4_0_USR;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Count USR 2 = LCL.Count USR 2 + CON.1
 LCL.Count_USR_2 = LCL.Count_USR_2 + 1;

 // LCL.Minutes USR 2 = LCL.Minutes USR 2 + PAR.Wait Time 4.0 USR
 LCL.Minutes_USR_2 = LCL.Minutes_USR_2 + PAR.Wait_Time_4_0_USR;

 ENDIF;

 ENDIF;

 //?USER: Exit processing

 CASE;

 // IF LCL.Count USR is GT Zero
 IF LCL.Count_USR > *ZERO;

 // LCL.Shift A Kill to Cut Avg = LCL.Minutes USR / LCL.Count USR *
 LCL.Shift_A_Kill_to_Cut_Avg = LCL.Minutes_USR / LCL.Count_USR;

 ENDIF;

 CASE;

 // IF LCL.Count USR 2 is Entered
 IF LCL.Count_USR_2 <> *ZERO;

 // LCL.Shift B Kill to Cut Avg = LCL.Minutes USR 2 / LCL.Count USR 2 *
 LCL.Shift_B_Kill_to_Cut_Avg = LCL.Minutes_USR_2 / LCL.Count_USR_2;

 ENDIF;

 // LCL.Movement number new usr = LCL.Minutes USR + LCL.Minutes USR 2
 LCL.Movement_number_new_usr = LCL.Minutes_USR + LCL.Minutes_USR_2;

 // LCL.Count USR = LCL.Count USR + LCL.Count USR 2
 LCL.Count_USR = LCL.Count_USR + LCL.Count_USR_2;

 CASE;

 // IF LCL.Count USR is GT Zero
 IF LCL.Count_USR > *ZERO;

 // LCL.Total Kill to Cut Avg = LCL.Movement number new usr / LCL.Count USR *
 LCL.Total_Kill_to_Cut_Avg = LCL.Movement_number_new_usr / LCL.Count_USR;

 ENDIF;

 EXECUTE FUNCTION(Rtv Chg Kill to cut   RT) TYPE(RTVOBJ) FILE(PKFDCPP)           AB1255683;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(LCL.Shift_A_Kill_to_Cut_Avg);
 PARAMETER(LCL.Shift_B_Kill_to_Cut_Avg);
 PARAMETER(LCL.Total_Kill_to_Cut_Avg);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Exp Rate HPE Sum  CH) TYPE(CHGOBJ) FILE(PKFDCPP)           AB1241450;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.Shift_A_Int_Adj_Live_Wgt);
  PARAMETER(DB1.Shift_A_Int_Hot_Wgt);
  PARAMETER(DB1.Shift_A_Int_Hd_Killed);
  PARAMETER(DB1.Shift_A_Int_Hd_To_Kill);
  PARAMETER(DB1.Shift_A_Int_Hd_w_2Hr_Rest);
  PARAMETER(DB1.Shift_A_Int_Hot_Wgt_SDev);
  PARAMETER(DB1.Shift_A_Int_Rate_Adj);
  PARAMETER(DB1.Shift_A_Ext_Adj_Live_Wgt);
  PARAMETER(DB1.Shift_A_Ext_Hot_Wgt);
  PARAMETER(DB1.Shift_A_Ext_Hd_Killed);
  PARAMETER(DB1.Shift_A_Ext_Hd_To_Kill);
  PARAMETER(DB1.Shift_A_Ext_Hd_w_2Hr_Rest);
  PARAMETER(DB1.Shift_A_Ext_Hot_Wgt_SDev);
  PARAMETER(DB1.Shift_A_Ext_Rate_Adj);
  PARAMETER(DB1.Shift_A_Tot_Hot_Wgt_SDev);
  PARAMETER(DB1.Shift_A_Tot_Rate_Adj);
  PARAMETER(PAR.Shift_A_Kill_to_Cut_Avg);
  PARAMETER(DB1.Shift_B_Int_Adj_Live_Wgt);
  PARAMETER(DB1.Shift_B_Int_Hot_Wgt);
  PARAMETER(DB1.Shift_B_Int_Hd_Killed);
  PARAMETER(DB1.Shift_B_Int_Hd_To_Kill);
  PARAMETER(DB1.Shift_B_Int_Hd_w_2Hr_Rest);
  PARAMETER(DB1.Shift_B_Int_Hot_Wgt_SDev);
  PARAMETER(DB1.Shift_B_Int_Rate_Adj);
  PARAMETER(DB1.Shift_B_Ext_Adj_Live_Wgt);
  PARAMETER(DB1.Shift_B_Ext_Hot_Wgt);
  PARAMETER(DB1.Shift_B_Ext_Hd_Killed);
  PARAMETER(DB1.Shift_B_Ext_Hd_To_Kill);
  PARAMETER(DB1.Shift_B_Ext_Hd_w_2Hr_Rest);
  PARAMETER(DB1.Shift_B_Ext_Hot_Wgt_SDev);
  PARAMETER(DB1.Shift_B_Ext_Rate_Adj);
  PARAMETER(DB1.Shift_B_Tot_Hot_Wgt_SDev);
  PARAMETER(DB1.Shift_B_Tot_Rate_Adj);
  PARAMETER(PAR.Shift_B_Kill_to_Cut_Avg);
  PARAMETER(DB1.Total_Int_Hot_Wgt_SDev);
  PARAMETER(DB1.Total_Int_Rate_Adj);
  PARAMETER(DB1.Total_Ext_Hot_Wgt_SDev);
  PARAMETER(DB1.Total_Ext_Rate_Adj);
  PARAMETER(DB1.Total_Hot_Wgt_SDev);
  PARAMETER(DB1.Total_Rate_Adj);
  PARAMETER(PAR.Total_Kill_to_Cut_Avg);
  PARAMETER(DB1.Production_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // Call program Rtv System Date & Tim UP.
    CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
    PARAMETER(PAR.RS_Date_Changed);
    PARAMETER(PAR.RS_Time_Changed);

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

}


