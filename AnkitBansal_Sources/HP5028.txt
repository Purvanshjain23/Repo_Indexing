      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      Hog Production System
      * PROGRAM:     HP5028
      * TITLE:       Select Route Start Point
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     03/04/03
      *
      *
      * FUNCTION: This is a select function window display of the Route Start Points.
      *
      *           A record is selected by positioning the cursor on the line
      *           and pressing enter.
      *
      *           Positioners:  None
      *           Selectors:    None
      *
      *
      * NOTE:    This is a pop-up window program.  Please note that in window
      *          programs the record format containing the window definition
      *          must be written first.  So, we write the error message subfile
      *          control record first followed by the command line record format.
      *          This is opposite of the non-window programs.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      * 99/99/99
      *
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhpd5028   cf   e             workstn
     F                                     sfile(hp5028s1:hdrrn1)
     F                                     infds(iofeed)
      *
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      * Define codes and descriptions in compile-time arrays
      *
     D cde             s              1    dim(3) ctdata perrcd(3)
     D dsc             s             25    dim(3) ctdata perrcd(1)
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
     D maxrrn          s              4  0
     D norecs          s              1    inz('N')
      *
      *
      * Control fields
      *
     D x               s              1  0
      *
      *
      * Parm fields
      *
     D xxrspcd         s                   like(d1rspcd)
     D xxrspds         s                   like(d1rspds)
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      *
      /EJECT
      *---------------------------------------------------------------
      * Set environment for screen 1
      *---------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * Clear/fill the subfile
      *
     C                   exsr      $clr1
     C                   exsr      $frsh1
      *
      * Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Perform operator I/O for screen 1
      *---------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to crt
      *
     C                   write     hp5028ec
     C                   write     hp5028k1
     C                   exfmt     hp5028c1
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in12 = *on                                  F12-previous
     C                   eval      routne = exit
      *
     C                   when      *in25 = *on                                  F25-rollup
     C                   exsr      $load1
     C                   eval      routne = scrn1
     C                   other
      *
      * User has pressed enter
      *
     C                   if        norecs = yes                                 If empty sfl
     C                   eval      routne = set1
     C                   else
     C                   exsr      $proc1
     C                   endif                                                  If empty sfl
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Process user's selection
      *----------------------------------------------------------------
      *
     C     $proc1        begsr
      *
      * If cursor location returned is the rrn of a record in the
      * subfile, chain to the subfile record and load the data into
      * the parms to return to the calling program.
      *
     C                   if        hdrrn <> 0
     C                   eval      hdrrn1 = hdrrn
     C     hdrrn1        chain     hp5028s1                           92
     C                   eval      xxrspcd = d1rspcd
     C                   eval      xxrspds = d1rspds
     C                   endif
      *
      * If the user selected a record, set the routine to exit.  If no record
      * was selected, redisplay the screen.
      *
     C                   if        xxrspcd = *blank
     C                   eval      hdpag1 = idflow
     c                   eval      routne = scrn1
     C                   else
     c                   eval      routne = exit
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Clear subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $clr1         begsr
      *
     C                   clear                   hp5028s1
     C                   seton                                        83        sflclr
     C                   write     hp5028c1
     C                   setoff                                       818283
      *                                                    81=sfldsp
      *                                                    82=sflend
      *                                                    83=sflclr
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Refresh/fill the subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $frsh1        begsr
      *
     C                   exsr      $load1
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Load subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $load1        begsr
      *
      * Fill the subfile with the compile-time array entries.
      *
     C                   z-add     1             x
      *
     C                   do        3                                            Do fill loop
     C                   movel     cde(x)        d1rspcd
     C                   movel     dsc(x)        d1rspds
     C                   add       1             hdrrn1
     C                   write     hp5028s1
     C                   seton                                        81
     C                   add       1             x
      *
      * For positioning, place the subfile relative record number into the
      * SFLRCDNBR field
      *
     C                   z-add     hdrrn1        hdpag1
      *
      * *IN82 is associated with the SFLEND keyword. Set it on to prevent the
      * '+' sign from appearing on the last subfile reocrd.
      *
     C                   seton                                        82
     C                   enddo                                                  DO FILL LOOP
      *
      *
      * If no records were written to the subfile, then issue
      * the standard message 'No data to Display'.
      *
     C                   if        hdrrn1 = 0                                   If no recs
     C                   eval      norecs = yes
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09002'
     C                   endif
      *
     C                   else
     C                   eval      norecs = no
     C                   endif                                                  If no recs
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * End job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      *
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Key lists
      *     None
      *
      * Parm lists
      *
     C     *entry        plist
     C                   parm                    xxrspcd
     C                   parm                    xxrspds
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
      * Execute required window format
      *
     C                   write     assume
      *
     C                   endsr
      /EJECT
     ******************************************************************
      * ARRAYS FOR LOADING OF DATA TO SUBFILE
     ******************************************************************
**  CODE VALUES
PTO
**  DESCRIPTIONS
Plant
Transportation office
Other
