// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDGND1R
// ?Date: 14.08.2025 Time: 03:31:51
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// WRK.Display Flag = CND.No
WRK.Display_Flag = 'N';

// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

//?USER: Load detail screen from DBF record

//?Setup first time processing
CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// DTL.Warehouse Type USR = PAR.Warehouse Type
DTL.Warehouse_Type_USR = PAR.Warehouse_Type;

// DTL.Warehouse Code PASS   USR = PAR.Warehouse Code
DTL.Warehouse_Code_PASS_USR = PAR.Warehouse_Code;

CASE;

// IF DTL.Base/Conv/Loss Item is Base
IF DTL.Base_Conv_Loss_Item = 'B';

// DTL.USR Base flag = CON.**
DTL.USR_Base_flag = '**';

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv Whs Typ/FZNCHLTME IF) TYPE(EXCINTFUN)                      AC1423925;
PARAMETER(DB1.Company_Number);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(WRK.Warehouse_Type);
PARAMETER(DTL.Fresh_Chilling_Time);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Warehouse Type is Frozen
 IF PAR.Warehouse_Type = 'FZ';

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(PAR.Company_Number);
 PARAMETER('FZNCHLTME');
 PARAMETER(PAR.System_Value_Numeric);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.Fresh Chilling Time = PAR.System Value Numeric
 PAR.Fresh_Chilling_Time = PAR.System_Value_Numeric;

 ENDIF;

}


EXECUTE FUNCTION(Rtv PA Dtl SD-6 - ALL RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1646136;
PARAMETER(DTL.Warehouse_Type);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(DTL.Avail_Ship_Date_1_USR);
PARAMETER(DTL.Avail_Ship_Date_1_USR);
PARAMETER(DTL.Avail_Ship_Date_2_USR);
PARAMETER(DTL.Avail_Ship_Date_3_USR);
PARAMETER(DTL.Avail_Ship_Date_4_USR);
PARAMETER(DTL.Avail_Ship_Date_5_USR);
PARAMETER(DTL.Avail_Ship_Date_6_USR);
PARAMETER(DTL.Avail_Ship_Date_7_USR);
PARAMETER(DTL.USR_Day_1);
PARAMETER(DTL.USR_Day_2);
PARAMETER(DTL.USR_Day_3);
PARAMETER(DTL.USR_Day_4);
PARAMETER(DTL.USR_Day_5);
PARAMETER(DTL.USR_Day_6);
PARAMETER(DTL.USR_Day_7);
PARAMETER(DTL.Primary_Load_Sts_USR);
PARAMETER(DTL.Load_Size_USR);
PARAMETER('D');
PARAMETER(DTL.Day_1_Inventory_USR);
PARAMETER(DTL.Day_2_Inventory_USR);
PARAMETER(DTL.Day_3_Inventory_USR);
PARAMETER(DTL.Day_4_Inventory_USR);
PARAMETER(DTL.Day_5_Inventory_USR);
PARAMETER(DTL.Day_6_Inventory_USR);
PARAMETER(DTL.Day_7_Inventory_USR);
PARAMETER(DTL.Day_8_Inventory_USR);
PARAMETER(DTL.Day_1_Production_USR);
PARAMETER(DTL.Day_2_Production_USR);
PARAMETER(DTL.Day_3_Production_USR);
PARAMETER(DTL.Day_4_Production_USR);
PARAMETER(DTL.Day_5_Production_USR);
PARAMETER(DTL.Day_6_Production_USR);
PARAMETER(DTL.Day_7_Production_USR);
PARAMETER(DTL.Day_8_Production_USR);
PARAMETER(DTL.Day_1_Sched_Shipments_USR);
PARAMETER(DTL.Day_2_Sched_Shipments_USR);
PARAMETER(DTL.Day_3_Sched_Shipments_USR);
PARAMETER(DTL.Day_4_Sched_Shipments_USR);
PARAMETER(DTL.Day_5_Sched_Shipments_USR);
PARAMETER(DTL.Day_6_Sched_Shipments_USR);
PARAMETER(DTL.Day_7_Sched_Shipments_USR);
PARAMETER(DTL.Day_8_Sched_Shipments_USR);
PARAMETER(DTL.Day_1_Sales_USR);
PARAMETER(DTL.Day_2_Sales_USR);
PARAMETER(DTL.Day_3_Sales_USR);
PARAMETER(DTL.Day_4_Sales_USR);
PARAMETER(DTL.Day_5_Sales_USR);
PARAMETER(DTL.Day_6_Sales_USR);
PARAMETER(DTL.Day_7_Sales_USR);
PARAMETER(DTL.Day_8_Sales_USR);
PARAMETER(DTL.Day_1_Adjustments_USR);
PARAMETER(DTL.Day_2_Adjustments_USR);
PARAMETER(DTL.Day_3_Adjustments_USR);
PARAMETER(DTL.Day_4_Adjustments_USR);
PARAMETER(DTL.Day_5_Adjustments_USR);
PARAMETER(DTL.Day_6_Adjustments_USR);
PARAMETER(DTL.Day_7_Adjustments_USR);
PARAMETER(DTL.Day_8_Adjustments_USR);
PARAMETER(DTL.Day_1_Availability_USR);
PARAMETER(DTL.Day_2_Availability_USR);
PARAMETER(DTL.Day_3_Availability_USR);
PARAMETER(DTL.Day_4_Availability_USR);
PARAMETER(DTL.Day_5_Availability_USR);
PARAMETER(DTL.Day_6_Availability_USR);
PARAMETER(DTL.Day_7_Availability_USR);
PARAMETER(DTL.Day_8_Availability_USR);
PARAMETER(DB1.UOM_Primary);
PARAMETER(DB1.Unit_Weight);
PARAMETER(DB1.Fresh_Chilling_Time);
PARAMETER(DB1.Piece_Count_Item);
PARAMETER(DB1.Pieces_Per_Bag);
PARAMETER(DB1.Bags_Per_Unit);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF PAR.Warehouse Type is Equal blank
 IF PAR.Warehouse_Type = *BLANK;

 // OR PAR.Warehouse Type is *ALL values
 OR ( PAR.Warehouse_Type = 'FZ'/'FR'/*BLANK/'BL';

 // AND PAR.Warehouse Type EQ DB1.Warehouse Type
 AND PAR.Warehouse_Type = DB1.Warehouse_Type );

 CASE;

 // IF PAR.Warehouse Code is Warehouse Code Blank
 IF PAR.Warehouse_Code = *BLANK;

 EXECUTE FUNCTION(Rtv PA Dtl SD-6       IF) TYPE(EXCINTFUN)                      AC1646139;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.PS_Available_Ship_Date);
 PARAMETER(PAR.Avail_Ship_Date_1_USR);
 PARAMETER(PAR.Avail_Ship_Date_2_USR);
 PARAMETER(PAR.Avail_Ship_Date_3_USR);
 PARAMETER(PAR.Avail_Ship_Date_4_USR);
 PARAMETER(PAR.Avail_Ship_Date_5_USR);
 PARAMETER(PAR.Avail_Ship_Date_6_USR);
 PARAMETER(PAR.Avail_Ship_Date_7_USR);
 PARAMETER(PAR.USR_Day_1);
 PARAMETER(PAR.USR_Day_2);
 PARAMETER(PAR.USR_Day_3);
 PARAMETER(PAR.USR_Day_4);
 PARAMETER(PAR.USR_Day_5);
 PARAMETER(PAR.USR_Day_6);
 PARAMETER(PAR.USR_Day_7);
 PARAMETER(PAR.Day_1_Inventory_USR);
 PARAMETER(PAR.Day_2_Inventory_USR);
 PARAMETER(PAR.Day_3_Inventory_USR);
 PARAMETER(PAR.Day_4_Inventory_USR);
 PARAMETER(PAR.Day_5_Inventory_USR);
 PARAMETER(PAR.Day_6_Inventory_USR);
 PARAMETER(PAR.Day_7_Inventory_USR);
 PARAMETER(PAR.Day_8_Inventory_USR);
 PARAMETER(PAR.Day_1_Production_USR);
 PARAMETER(PAR.Day_2_Production_USR);
 PARAMETER(PAR.Day_3_Production_USR);
 PARAMETER(PAR.Day_4_Production_USR);
 PARAMETER(PAR.Day_5_Production_USR);
 PARAMETER(PAR.Day_6_Production_USR);
 PARAMETER(PAR.Day_7_Production_USR);
 PARAMETER(PAR.Day_8_Production_USR);
 PARAMETER(PAR.Day_1_Sales_USR);
 PARAMETER(PAR.Day_2_Sales_USR);
 PARAMETER(PAR.Day_3_Sales_USR);
 PARAMETER(PAR.Day_4_Sales_USR);
 PARAMETER(PAR.Day_5_Sales_USR);
 PARAMETER(PAR.Day_6_Sales_USR);
 PARAMETER(PAR.Day_7_Sales_USR);
 PARAMETER(PAR.Day_8_Sales_USR);
 PARAMETER(PAR.Day_1_Adjustments_USR);
 PARAMETER(PAR.Day_2_Adjustments_USR);
 PARAMETER(PAR.Day_3_Adjustments_USR);
 PARAMETER(PAR.Day_4_Adjustments_USR);
 PARAMETER(PAR.Day_5_Adjustments_USR);
 PARAMETER(PAR.Day_6_Adjustments_USR);
 PARAMETER(PAR.Day_7_Adjustments_USR);
 PARAMETER(PAR.Day_8_Adjustments_USR);
 PARAMETER(PAR.Day_1_Availability_USR);
 PARAMETER(PAR.Day_2_Availability_USR);
 PARAMETER(PAR.Day_3_Availability_USR);
 PARAMETER(PAR.Day_4_Availability_USR);
 PARAMETER(PAR.Day_5_Availability_USR);
 PARAMETER(PAR.Day_6_Availability_USR);
 PARAMETER(PAR.Day_7_Availability_USR);
 PARAMETER(PAR.Day_8_Availability_USR);
 PARAMETER(PAR.Primary_Load_Sts_USR);
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Day_1_Sched_Shipments_USR);
 PARAMETER(PAR.Day_2_Sched_Shipments_USR);
 PARAMETER(PAR.Day_3_Sched_Shipments_USR);
 PARAMETER(PAR.Day_4_Sched_Shipments_USR);
 PARAMETER(PAR.Day_5_Sched_Shipments_USR);
 PARAMETER(PAR.Day_6_Sched_Shipments_USR);
 PARAMETER(PAR.Day_7_Sched_Shipments_USR);
 PARAMETER(PAR.Day_8_Sched_Shipments_USR);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv PA In/Sh SD-6     IF) TYPE(EXCINTFUN)                      AC1388774;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.Day_1_Inventory_USR);
  PARAMETER(PAR.Day_2_Inventory_USR);
  PARAMETER(PAR.Day_3_Inventory_USR);
  PARAMETER(PAR.Day_4_Inventory_USR);
  PARAMETER(PAR.Day_5_Inventory_USR);
  PARAMETER(PAR.Day_6_Inventory_USR);
  PARAMETER(PAR.Day_7_Inventory_USR);
  PARAMETER(PAR.Day_8_Inventory_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_1_Adjustments_USR);
  PARAMETER(PAR.Day_2_Adjustments_USR);
  PARAMETER(PAR.Day_3_Adjustments_USR);
  PARAMETER(PAR.Day_4_Adjustments_USR);
  PARAMETER(PAR.Day_5_Adjustments_USR);
  PARAMETER(PAR.Day_6_Adjustments_USR);
  PARAMETER(PAR.Day_7_Adjustments_USR);
  PARAMETER(PAR.Day_1_Availability_USR);
  PARAMETER(PAR.Day_2_Availability_USR);
  PARAMETER(PAR.Day_3_Availability_USR);
  PARAMETER(PAR.Day_4_Availability_USR);
  PARAMETER(PAR.Day_5_Availability_USR);
  PARAMETER(PAR.Day_6_Availability_USR);
  PARAMETER(PAR.Day_7_Availability_USR);
  PARAMETER(PAR.Primary_Load_Sts_USR);
  PARAMETER(PAR.Load_Size_USR);
  PARAMETER(PAR.Day_1_Sched_Shipments_USR);
  PARAMETER(PAR.Day_2_Sched_Shipments_USR);
  PARAMETER(PAR.Day_3_Sched_Shipments_USR);
  PARAMETER(PAR.Day_4_Sched_Shipments_USR);
  PARAMETER(PAR.Day_5_Sched_Shipments_USR);
  PARAMETER(PAR.Day_6_Sched_Shipments_USR);
  PARAMETER(PAR.Day_7_Sched_Shipments_USR);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
  {
   //?Execute internal function

   //?Retrieve Inventory and Scheduled Shipments
   EXECUTE FUNCTION(Rtv PA In/Sh SD-6 WHS RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1376865;
   PARAMETER(PAR.Company_Number);
   PARAMETER('S');
   PARAMETER(JOB.*Job_date);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Inventory / Sales if Chilling Time > 0
   CASE;

   // IF PAR.Primary/Load Sts USR is Primary
   IF PAR.Primary_Load_Sts_USR = 'P';

   // AND PAR.Unit Weight is Greater than zero
   AND ( PAR.Unit_Weight > *ZERO;

   // OR PAR.Piece Count Item is yes
   OR PAR.Piece_Count_Item = 'Y' );

   //?Calculate Quantity based on Unit Weight or Pieces
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_1_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 2 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_2_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 3 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_3_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 4 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_4_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 5 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_5_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 6 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_6_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 7 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_7_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   ENDIF;

   //?Inventory / Sales if Chilling Time > 0
   // IF PAR.Primary/Load Sts USR is Load Size
   IF PAR.Primary_Load_Sts_USR = 'L';

   // AND PAR.Load Size USR is GT Zero
   AND PAR.Load_Size_USR > *ZERO;

   //?Calculate Quantity based on Load Size
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_1_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 2 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_2_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 3 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_3_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 4 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_4_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 5 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_5_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 6 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_6_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 7 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_7_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   ENDIF;

   ENDIF;

   //?Total Inventory
   CASE;

   // IF PAR.Avail Dsp/Prt Type USR is Display
   IF PAR.Avail_Dsp_Prt_Type_USR = 'D'/'T';

   // Total Inventory
   PAR.Day_8_Inventory_USR = ( ( ( ( ( PAR.Day_1_Inventory_USR + PAR.Day_2_Inventory_USR )
   + PAR.Day_3_Inventory_USR ) + PAR.Day_4_Inventory_USR ) + PAR.Day_5_Inventory_USR )
   + PAR.Day_6_Inventory_USR ) + PAR.Day_7_Inventory_USR;

   ENDIF;

  }

  EXECUTE FUNCTION(Rtv PA Dtl SD-6 WHS   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1646149;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.USR_Day_1);
  PARAMETER(PAR.USR_Day_2);
  PARAMETER(PAR.USR_Day_3);
  PARAMETER(PAR.USR_Day_4);
  PARAMETER(PAR.USR_Day_5);
  PARAMETER(PAR.USR_Day_6);
  PARAMETER(PAR.USR_Day_7);
  PARAMETER(PAR.Day_1_Inventory_USR);
  PARAMETER(PAR.Day_2_Inventory_USR);
  PARAMETER(PAR.Day_3_Inventory_USR);
  PARAMETER(PAR.Day_4_Inventory_USR);
  PARAMETER(PAR.Day_5_Inventory_USR);
  PARAMETER(PAR.Day_6_Inventory_USR);
  PARAMETER(PAR.Day_7_Inventory_USR);
  PARAMETER(PAR.Day_1_Production_USR);
  PARAMETER(PAR.Day_2_Production_USR);
  PARAMETER(PAR.Day_3_Production_USR);
  PARAMETER(PAR.Day_4_Production_USR);
  PARAMETER(PAR.Day_5_Production_USR);
  PARAMETER(PAR.Day_6_Production_USR);
  PARAMETER(PAR.Day_7_Production_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_1_Adjustments_USR);
  PARAMETER(PAR.Day_2_Adjustments_USR);
  PARAMETER(PAR.Day_3_Adjustments_USR);
  PARAMETER(PAR.Day_4_Adjustments_USR);
  PARAMETER(PAR.Day_5_Adjustments_USR);
  PARAMETER(PAR.Day_6_Adjustments_USR);
  PARAMETER(PAR.Day_7_Adjustments_USR);
  PARAMETER(PAR.Day_1_Availability_USR);
  PARAMETER(PAR.Day_2_Availability_USR);
  PARAMETER(PAR.Day_3_Availability_USR);
  PARAMETER(PAR.Day_4_Availability_USR);
  PARAMETER(PAR.Day_5_Availability_USR);
  PARAMETER(PAR.Day_6_Availability_USR);
  PARAMETER(PAR.Day_7_Availability_USR);
  PARAMETER(PAR.Primary_Load_Sts_USR);
  PARAMETER(PAR.Load_Size_USR);
  PARAMETER(PAR.Day_1_Sched_Shipments_USR);
  PARAMETER(PAR.Day_2_Sched_Shipments_USR);
  PARAMETER(PAR.Day_3_Sched_Shipments_USR);
  PARAMETER(PAR.Day_4_Sched_Shipments_USR);
  PARAMETER(PAR.Day_5_Sched_Shipments_USR);
  PARAMETER(PAR.Day_6_Sched_Shipments_USR);
  PARAMETER(PAR.Day_7_Sched_Shipments_USR);
  PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  {
   //?USER: Initialize routine

   // PAR.Status Flag 1  Y/N = CND.No
   PAR.Status_Flag_1_Y_N = 'N';

   // PAR.Status Flag 2  Y/N = CND.No
   PAR.Status_Flag_2_Y_N = 'N';

   // PAR.Status Flag 3  Y/N = CND.No
   PAR.Status_Flag_3_Y_N = 'N';

   // PAR.Status Flag 4  Y/N = CND.no
   PAR.Status_Flag_4_Y_N = 'N';

   // PAR.Status Flag 5  Y/N = CND.No
   PAR.Status_Flag_5_Y_N = 'N';

   // PAR.Status Flag 6  Y/N = CND.No
   PAR.Status_Flag_6_Y_N = 'N';

   // PAR.Status Flag 7  Y/N = CND.No
   PAR.Status_Flag_7_Y_N = 'N';

   //?USER: Process Data record

   //?Quit:  Available Ship Date > Day 7
   CASE;

   // IF DB1.PS Available Ship Date GT PAR.Avail Ship Date 7 USR
   IF DB1.PS_Available_Ship_Date > PAR.Avail_Ship_Date_7_USR;

   EXECUTE FUNCTION(Rtv PA Ship Only-21  IF) TYPE(EXCINTFUN)                       AC1815983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Primary_Load_Sts_USR);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(PAR.Status_Flag_1_Y_N);
   PARAMETER(PAR.Status_Flag_2_Y_N);
   PARAMETER(PAR.Status_Flag_3_Y_N);
   PARAMETER(PAR.Status_Flag_4_Y_N);
   PARAMETER(PAR.Status_Flag_5_Y_N);
   PARAMETER(PAR.Status_Flag_6_Y_N);
   PARAMETER(PAR.Status_Flag_7_Y_N);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   {
    //?Execute internal function

    //?02/21/11 PKD Do not need to Override Weight for Piece Count Items.
    // PAR.Ord/Sch Sts USR = CND.Scheduled
    PAR.Ord_Sch_Sts_USR = 'S';

    //?day 1
    CASE;

    // IF PAR.Avail Ship Date 1 USR is Entered
    IF PAR.Avail_Ship_Date_1_USR <> *ZERO;

    // AND PAR.Status Flag 1  Y/N is No
    AND PAR.Status_Flag_1_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_1_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 1
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 1 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_1_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 1
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 2
    CASE;

    // IF PAR.Avail Ship Date 2 USR is Entered
    IF PAR.Avail_Ship_Date_2_USR <> *ZERO;

    // AND PAR.Status Flag 2  Y/N is No
    AND PAR.Status_Flag_2_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_2_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 2
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 2 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_2_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 2
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 3
    CASE;

    // IF PAR.Avail Ship Date 3 USR is Entered
    IF PAR.Avail_Ship_Date_3_USR <> *ZERO;

    // AND PAR.Status Flag 3  Y/N is No
    AND PAR.Status_Flag_3_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_3_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 3
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 3 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_3_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 3
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 4
    CASE;

    // IF PAR.Avail Ship Date 4 USR is Entered
    IF PAR.Avail_Ship_Date_4_USR <> *ZERO;

    // AND PAR.Status Flag 4  Y/N is no
    AND PAR.Status_Flag_4_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_4_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 4
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 4 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_4_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 4
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 5
    CASE;

    // IF PAR.Avail Ship Date 5 USR is Entered
    IF PAR.Avail_Ship_Date_5_USR <> *ZERO;

    // AND PAR.Status Flag 5  Y/N is No
    AND PAR.Status_Flag_5_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_5_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 5
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 5 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_5_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 5
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 6
    CASE;

    // IF PAR.Avail Ship Date 6 USR is Entered
    IF PAR.Avail_Ship_Date_6_USR <> *ZERO;

    // AND PAR.Status Flag 6  Y/N is No
    AND PAR.Status_Flag_6_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_6_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 6
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 6 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_6_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 6
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 7
    CASE;

    // IF PAR.Avail Ship Date 7 USR is Entered
    IF PAR.Avail_Ship_Date_7_USR <> *ZERO;

    // AND PAR.Status Flag 7  Y/N is No
    AND PAR.Status_Flag_7_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_7_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 7
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 7 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_7_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 7
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 8
    CASE;

    // IF PAR.Avail Ship Date 8 USR is Entered
    IF PAR.Avail_Ship_Date_8_USR <> *ZERO;

    // AND PAR.Status Flag 8  Y/N is No
    AND PAR.Status_Flag_8_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_8_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 8
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 8 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_8_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 8
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 9
    CASE;

    // IF PAR.Avail Ship Date 9 USR is Entered
    IF PAR.Avail_Ship_Date_9_USR <> *ZERO;

    // AND PAR.Status Flag 9  Y/N is No
    AND PAR.Status_Flag_9_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_9_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 9
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 9 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_9_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 9
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 10
    CASE;

    // IF PAR.Avail Ship Date 10 USR is Entered
    IF PAR.Avail_Ship_Date_10_USR <> *ZERO;

    // AND PAR.Status Flag 10 Y/N is No
    AND PAR.Status_Flag_10_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_10_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 10
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 10 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_10_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 10
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 11
    CASE;

    // IF PAR.Avail Ship Date 11 USR is Entered
    IF PAR.Avail_Ship_Date_11_USR <> *ZERO;

    // AND PAR.Status Flag 11 Y/N is No
    AND PAR.Status_Flag_11_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_11_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 11
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 11 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_11_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 11
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 12
    CASE;

    // IF PAR.Avail Ship Date 12 USR is Entered
    IF PAR.Avail_Ship_Date_12_USR <> *ZERO;

    // AND PAR.Status Flag 12 Y/N is No
    AND PAR.Status_Flag_12_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_12_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 12
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 12 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_12_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 12
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 13
    CASE;

    // IF PAR.Avail Ship Date 13 USR is Entered
    IF PAR.Avail_Ship_Date_13_USR <> *ZERO;

    // AND PAR.Status Flag 13 Y/N is No
    AND PAR.Status_Flag_13_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_13_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 13
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 13 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_13_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 13
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 14
    CASE;

    // IF PAR.Avail Ship Date 14 USR is Entered
    IF PAR.Avail_Ship_Date_14_USR <> *ZERO;

    // AND PAR.Status Flag 14 Y/N is No
    AND PAR.Status_Flag_14_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_14_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 14
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 14 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_14_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 14
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 15
    CASE;

    // IF PAR.Avail Ship Date 15 USR is Entered
    IF PAR.Avail_Ship_Date_15_USR <> *ZERO;

    // AND PAR.Status Flag 15 Y/N is No
    AND PAR.Status_Flag_15_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_15_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 15
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 15 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_15_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 15
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 16
    CASE;

    // IF PAR.Avail Ship Date 16 USR is Entered
    IF PAR.Avail_Ship_Date_16_USR <> *ZERO;

    // AND PAR.Status Flag 16 Y/N is No
    AND PAR.Status_Flag_16_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_16_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 16
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 16 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_16_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 16
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 17
    CASE;

    // IF PAR.Avail Ship Date 17 USR is Entered
    IF PAR.Avail_Ship_Date_17_USR <> *ZERO;

    // AND PAR.Status Flag 17 Y/N is No
    AND PAR.Status_Flag_17_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_17_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 17
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 17 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_17_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 17
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 18
    CASE;

    // IF PAR.Avail Ship Date 18 USR is Entered
    IF PAR.Avail_Ship_Date_18_USR <> *ZERO;

    // AND PAR.Status Flag 18 Y/N is No
    AND PAR.Status_Flag_18_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_18_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 18
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 18 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_18_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 18
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 19
    CASE;

    // IF PAR.Avail Ship Date 19 USR is Entered
    IF PAR.Avail_Ship_Date_19_USR <> *ZERO;

    // AND PAR.Status Flag 19 Y/N is No
    AND PAR.Status_Flag_19_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_19_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 19
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 19 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_19_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 19
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 20
    CASE;

    // IF PAR.Avail Ship Date 20 USR is Entered
    IF PAR.Avail_Ship_Date_20_USR <> *ZERO;

    // AND PAR.Status Flag 20 Y/N is No
    AND PAR.Status_Flag_20_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_20_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 20
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 20 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_20_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 20
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 21
    CASE;

    // IF PAR.Avail Ship Date 21 USR is Entered
    IF PAR.Avail_Ship_Date_21_USR <> *ZERO;

    // AND PAR.Status Flag 21 Y/N is No
    AND PAR.Status_Flag_21_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_21_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 21
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 21 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_21_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 21
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

   }

   QUIT;

   ENDIF;

   CASE;

   // IF DB1.PS Available Ship Date GE JOB.*Job date
   IF DB1.PS_Available_Ship_Date >= JOB.*Job_date;

   CASE;

   // IF PAR.Primary/Load Sts USR is Primary
   IF PAR.Primary_Load_Sts_USR = 'P';

   // AND PAR.Unit Weight is Greater than zero
   AND ( PAR.Unit_Weight > *ZERO;

   // OR PAR.Piece Count Item is yes
   OR PAR.Piece_Count_Item = 'Y' );

   //?calculate PA with Unit Weight
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_1_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 1  Y/N = CND.Yes
   PAR.Status_Flag_1_Y_N = 'Y';

   //?calculate PA with Unit Weight
   // IF PAR.Avail Ship Date 2 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_2_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 2  Y/N = CND.Yes
   PAR.Status_Flag_2_Y_N = 'Y';

   //?calculate PA with Unit Weight
   // IF PAR.Avail Ship Date 3 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_3_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 3  Y/N = CND.Yes
   PAR.Status_Flag_3_Y_N = 'Y';

   //?calculate PA with Unit Weight
   // IF PAR.Avail Ship Date 4 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_4_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 4  Y/N = CND.yes
   PAR.Status_Flag_4_Y_N = 'Y';

   //?calculate PA with Unit Weight
   // IF PAR.Avail Ship Date 5 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_5_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 5  Y/N = CND.Yes
   PAR.Status_Flag_5_Y_N = 'Y';

   //?calculate PA with Unit Weight
   // IF PAR.Avail Ship Date 6 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_6_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 6  Y/N = CND.Yes
   PAR.Status_Flag_6_Y_N = 'Y';

   //?calculate PA with Unit Weight
   // IF PAR.Avail Ship Date 7 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_7_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 7  Y/N = CND.Yes
   PAR.Status_Flag_7_Y_N = 'Y';

   ENDIF;

   // IF PAR.Primary/Load Sts USR is Load Size
   IF PAR.Primary_Load_Sts_USR = 'L';

   // AND PAR.Load Size USR is GT Zero
   AND PAR.Load_Size_USR > *ZERO;

   //?Calculate PA with Load Size
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_1_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(*MISSING);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);

   // PAR.Status Flag 1  Y/N = CND.Yes
   PAR.Status_Flag_1_Y_N = 'Y';

   //?Calculate PA with Load Size
   // IF PAR.Avail Ship Date 2 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_2_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(*MISSING);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);

   // PAR.Status Flag 2  Y/N = CND.Yes
   PAR.Status_Flag_2_Y_N = 'Y';

   //?Calculate PA with Load Size
   // IF PAR.Avail Ship Date 3 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_3_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(*MISSING);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);

   // PAR.Status Flag 3  Y/N = CND.Yes
   PAR.Status_Flag_3_Y_N = 'Y';

   //?Calculate PA with Load Size
   // IF PAR.Avail Ship Date 4 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_4_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(*MISSING);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);

   // PAR.Status Flag 4  Y/N = CND.yes
   PAR.Status_Flag_4_Y_N = 'Y';

   //?Calculate PA with Load Size
   // IF PAR.Avail Ship Date 5 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_5_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(*MISSING);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);

   // PAR.Status Flag 5  Y/N = CND.Yes
   PAR.Status_Flag_5_Y_N = 'Y';

   //?Calculate PA with Load Size
   // IF PAR.Avail Ship Date 6 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_6_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(*MISSING);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);

   // PAR.Status Flag 6  Y/N = CND.Yes
   PAR.Status_Flag_6_Y_N = 'Y';

   //?Calculate PA with Load Size
   // IF PAR.Avail Ship Date 7 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_7_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(*MISSING);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);

   // PAR.Status Flag 7  Y/N = CND.Yes
   PAR.Status_Flag_7_Y_N = 'Y';

   ENDIF;

   ENDIF;

   ENDIF;

   //?USER: Exit processing

   EXECUTE FUNCTION(Rtv PA Ship Only-21  IF) TYPE(EXCINTFUN)                       AC1815983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Primary_Load_Sts_USR);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(PAR.Status_Flag_1_Y_N);
   PARAMETER(PAR.Status_Flag_2_Y_N);
   PARAMETER(PAR.Status_Flag_3_Y_N);
   PARAMETER(PAR.Status_Flag_4_Y_N);
   PARAMETER(PAR.Status_Flag_5_Y_N);
   PARAMETER(PAR.Status_Flag_6_Y_N);
   PARAMETER(PAR.Status_Flag_7_Y_N);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   {
    //?Execute internal function

    //?02/21/11 PKD Do not need to Override Weight for Piece Count Items.
    // PAR.Ord/Sch Sts USR = CND.Scheduled
    PAR.Ord_Sch_Sts_USR = 'S';

    //?day 1
    CASE;

    // IF PAR.Avail Ship Date 1 USR is Entered
    IF PAR.Avail_Ship_Date_1_USR <> *ZERO;

    // AND PAR.Status Flag 1  Y/N is No
    AND PAR.Status_Flag_1_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_1_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 1
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 1 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_1_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 1
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 2
    CASE;

    // IF PAR.Avail Ship Date 2 USR is Entered
    IF PAR.Avail_Ship_Date_2_USR <> *ZERO;

    // AND PAR.Status Flag 2  Y/N is No
    AND PAR.Status_Flag_2_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_2_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 2
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 2 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_2_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 2
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 3
    CASE;

    // IF PAR.Avail Ship Date 3 USR is Entered
    IF PAR.Avail_Ship_Date_3_USR <> *ZERO;

    // AND PAR.Status Flag 3  Y/N is No
    AND PAR.Status_Flag_3_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_3_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 3
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 3 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_3_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 3
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 4
    CASE;

    // IF PAR.Avail Ship Date 4 USR is Entered
    IF PAR.Avail_Ship_Date_4_USR <> *ZERO;

    // AND PAR.Status Flag 4  Y/N is no
    AND PAR.Status_Flag_4_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_4_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 4
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 4 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_4_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 4
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 5
    CASE;

    // IF PAR.Avail Ship Date 5 USR is Entered
    IF PAR.Avail_Ship_Date_5_USR <> *ZERO;

    // AND PAR.Status Flag 5  Y/N is No
    AND PAR.Status_Flag_5_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_5_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 5
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 5 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_5_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 5
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 6
    CASE;

    // IF PAR.Avail Ship Date 6 USR is Entered
    IF PAR.Avail_Ship_Date_6_USR <> *ZERO;

    // AND PAR.Status Flag 6  Y/N is No
    AND PAR.Status_Flag_6_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_6_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 6
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 6 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_6_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 6
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 7
    CASE;

    // IF PAR.Avail Ship Date 7 USR is Entered
    IF PAR.Avail_Ship_Date_7_USR <> *ZERO;

    // AND PAR.Status Flag 7  Y/N is No
    AND PAR.Status_Flag_7_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_7_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 7
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 7 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_7_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 7
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 8
    CASE;

    // IF PAR.Avail Ship Date 8 USR is Entered
    IF PAR.Avail_Ship_Date_8_USR <> *ZERO;

    // AND PAR.Status Flag 8  Y/N is No
    AND PAR.Status_Flag_8_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_8_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 8
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 8 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_8_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 8
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 9
    CASE;

    // IF PAR.Avail Ship Date 9 USR is Entered
    IF PAR.Avail_Ship_Date_9_USR <> *ZERO;

    // AND PAR.Status Flag 9  Y/N is No
    AND PAR.Status_Flag_9_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_9_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 9
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 9 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_9_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 9
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 10
    CASE;

    // IF PAR.Avail Ship Date 10 USR is Entered
    IF PAR.Avail_Ship_Date_10_USR <> *ZERO;

    // AND PAR.Status Flag 10 Y/N is No
    AND PAR.Status_Flag_10_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_10_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 10
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 10 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_10_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 10
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 11
    CASE;

    // IF PAR.Avail Ship Date 11 USR is Entered
    IF PAR.Avail_Ship_Date_11_USR <> *ZERO;

    // AND PAR.Status Flag 11 Y/N is No
    AND PAR.Status_Flag_11_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_11_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 11
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 11 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_11_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 11
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 12
    CASE;

    // IF PAR.Avail Ship Date 12 USR is Entered
    IF PAR.Avail_Ship_Date_12_USR <> *ZERO;

    // AND PAR.Status Flag 12 Y/N is No
    AND PAR.Status_Flag_12_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_12_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 12
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 12 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_12_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 12
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 13
    CASE;

    // IF PAR.Avail Ship Date 13 USR is Entered
    IF PAR.Avail_Ship_Date_13_USR <> *ZERO;

    // AND PAR.Status Flag 13 Y/N is No
    AND PAR.Status_Flag_13_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_13_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 13
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 13 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_13_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 13
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 14
    CASE;

    // IF PAR.Avail Ship Date 14 USR is Entered
    IF PAR.Avail_Ship_Date_14_USR <> *ZERO;

    // AND PAR.Status Flag 14 Y/N is No
    AND PAR.Status_Flag_14_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_14_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 14
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 14 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_14_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 14
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 15
    CASE;

    // IF PAR.Avail Ship Date 15 USR is Entered
    IF PAR.Avail_Ship_Date_15_USR <> *ZERO;

    // AND PAR.Status Flag 15 Y/N is No
    AND PAR.Status_Flag_15_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_15_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 15
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 15 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_15_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 15
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 16
    CASE;

    // IF PAR.Avail Ship Date 16 USR is Entered
    IF PAR.Avail_Ship_Date_16_USR <> *ZERO;

    // AND PAR.Status Flag 16 Y/N is No
    AND PAR.Status_Flag_16_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_16_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 16
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 16 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_16_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 16
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 17
    CASE;

    // IF PAR.Avail Ship Date 17 USR is Entered
    IF PAR.Avail_Ship_Date_17_USR <> *ZERO;

    // AND PAR.Status Flag 17 Y/N is No
    AND PAR.Status_Flag_17_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_17_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 17
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 17 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_17_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 17
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 18
    CASE;

    // IF PAR.Avail Ship Date 18 USR is Entered
    IF PAR.Avail_Ship_Date_18_USR <> *ZERO;

    // AND PAR.Status Flag 18 Y/N is No
    AND PAR.Status_Flag_18_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_18_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 18
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 18 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_18_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 18
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 19
    CASE;

    // IF PAR.Avail Ship Date 19 USR is Entered
    IF PAR.Avail_Ship_Date_19_USR <> *ZERO;

    // AND PAR.Status Flag 19 Y/N is No
    AND PAR.Status_Flag_19_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_19_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 19
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 19 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_19_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 19
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 20
    CASE;

    // IF PAR.Avail Ship Date 20 USR is Entered
    IF PAR.Avail_Ship_Date_20_USR <> *ZERO;

    // AND PAR.Status Flag 20 Y/N is No
    AND PAR.Status_Flag_20_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_20_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 20
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 20 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_20_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 20
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 21
    CASE;

    // IF PAR.Avail Ship Date 21 USR is Entered
    IF PAR.Avail_Ship_Date_21_USR <> *ZERO;

    // AND PAR.Status Flag 21 Y/N is No
    AND PAR.Status_Flag_21_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_21_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 21
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 21 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_21_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 21
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

   }

  }

  // Total Production
  PAR.Day_8_Production_USR = ( ( ( ( ( PAR.Day_1_Production_USR + PAR.Day_2_Production_USR )
  + PAR.Day_3_Production_USR ) + PAR.Day_4_Production_USR ) + PAR.Day_5_Production_USR )
  + PAR.Day_6_Production_USR ) + PAR.Day_7_Production_USR;

  // Total Sched SHipments
  PAR.Day_8_Sched_Shipments_USR = ( ( ( ( ( PAR.Day_1_Sched_Shipments_USR
  + PAR.Day_2_Sched_Shipments_USR ) + PAR.Day_3_Sched_Shipments_USR )
  + PAR.Day_4_Sched_Shipments_USR ) + PAR.Day_5_Sched_Shipments_USR )
  + PAR.Day_6_Sched_Shipments_USR ) + PAR.Day_7_Sched_Shipments_USR;

  // Total Sales
  PAR.Day_8_Sales_USR = ( ( ( ( ( PAR.Day_1_Sales_USR + PAR.Day_2_Sales_USR )
  + PAR.Day_3_Sales_USR ) + PAR.Day_4_Sales_USR ) + PAR.Day_5_Sales_USR )
  + PAR.Day_6_Sales_USR ) + PAR.Day_7_Sales_USR;

  // Total Adjustments
  PAR.Day_8_Adjustments_USR = ( ( ( ( ( PAR.Day_1_Adjustments_USR
  + PAR.Day_2_Adjustments_USR ) + PAR.Day_3_Adjustments_USR ) + PAR.Day_4_Adjustments_USR )
  + PAR.Day_5_Adjustments_USR ) + PAR.Day_6_Adjustments_USR ) + PAR.Day_7_Adjustments_USR;

  // Total Availability
  PAR.Day_8_Availability_USR = ( ( ( ( ( PAR.Day_1_Availability_USR
  + PAR.Day_2_Availability_USR ) + PAR.Day_3_Availability_USR )
  + PAR.Day_4_Availability_USR ) + PAR.Day_5_Availability_USR )
  + PAR.Day_6_Availability_USR ) + PAR.Day_7_Availability_USR;

 }

 // PAR.Day 1 Inventory Total USR = PAR.Day 1 Inventory Total USR + PAR.Day 1 Inventory USR
 PAR.Day_1_Inventory_Total_USR = PAR.Day_1_Inventory_Total_USR + PAR.Day_1_Inventory_USR;

 // PAR.Day 2 Inventory Total USR = PAR.Day 2 Inventory Total USR + PAR.Day 2 Inventory USR
 PAR.Day_2_Inventory_Total_USR = PAR.Day_2_Inventory_Total_USR + PAR.Day_2_Inventory_USR;

 // PAR.Day 3 Inventory Total USR = PAR.Day 3 Inventory Total USR + PAR.Day 3 Inventory USR
 PAR.Day_3_Inventory_Total_USR = PAR.Day_3_Inventory_Total_USR + PAR.Day_3_Inventory_USR;

 // PAR.Day 4 Inventory Total USR = PAR.Day 4 Inventory Total USR + PAR.Day 4 Inventory USR
 PAR.Day_4_Inventory_Total_USR = PAR.Day_4_Inventory_Total_USR + PAR.Day_4_Inventory_USR;

 // PAR.Day 5 Inventory Total USR = PAR.Day 5 Inventory Total USR + PAR.Day 5 Inventory USR
 PAR.Day_5_Inventory_Total_USR = PAR.Day_5_Inventory_Total_USR + PAR.Day_5_Inventory_USR;

 // PAR.Day 6 Inventory Total USR = PAR.Day 6 Inventory Total USR + PAR.Day 6 Inventory USR
 PAR.Day_6_Inventory_Total_USR = PAR.Day_6_Inventory_Total_USR + PAR.Day_6_Inventory_USR;

 // PAR.Day 7 Inventory Total USR = PAR.Day 7 Inventory Total USR + PAR.Day 7 Inventory USR
 PAR.Day_7_Inventory_Total_USR = PAR.Day_7_Inventory_Total_USR + PAR.Day_7_Inventory_USR;

 // PAR.Day 8 Inventory Total USR = PAR.Day 8 Inventory Total USR + PAR.Day 8 Inventory USR
 PAR.Day_8_Inventory_Total_USR = PAR.Day_8_Inventory_Total_USR + PAR.Day_8_Inventory_USR;

 // PAR.Day 1 Production TotalUSR = PAR.Day 1 Production TotalUSR + PAR.Day 1 Production USR
 PAR.Day_1_Production_TotalUSR = PAR.Day_1_Production_TotalUSR + PAR.Day_1_Production_USR;

 // PAR.Day 2 Production TotalUSR = PAR.Day 2 Production TotalUSR + PAR.Day 2 Production USR
 PAR.Day_2_Production_TotalUSR = PAR.Day_2_Production_TotalUSR + PAR.Day_2_Production_USR;

 // PAR.Day 3 Production TotalUSR = PAR.Day 3 Production TotalUSR + PAR.Day 3 Production USR
 PAR.Day_3_Production_TotalUSR = PAR.Day_3_Production_TotalUSR + PAR.Day_3_Production_USR;

 // PAR.Day 4 Production TotalUSR = PAR.Day 4 Production TotalUSR + PAR.Day 4 Production USR
 PAR.Day_4_Production_TotalUSR = PAR.Day_4_Production_TotalUSR + PAR.Day_4_Production_USR;

 // PAR.Day 5 Production TotalUSR = PAR.Day 5 Production TotalUSR + PAR.Day 5 Production USR
 PAR.Day_5_Production_TotalUSR = PAR.Day_5_Production_TotalUSR + PAR.Day_5_Production_USR;

 // PAR.Day 6 Production TotalUSR = PAR.Day 6 Production TotalUSR + PAR.Day 6 Production USR
 PAR.Day_6_Production_TotalUSR = PAR.Day_6_Production_TotalUSR + PAR.Day_6_Production_USR;

 // PAR.Day 7 Production TotalUSR = PAR.Day 7 Production TotalUSR + PAR.Day 7 Production USR
 PAR.Day_7_Production_TotalUSR = PAR.Day_7_Production_TotalUSR + PAR.Day_7_Production_USR;

 // PAR.Day 8 Production TotalUSR = PAR.Day 8 Production TotalUSR + PAR.Day 8 Production USR
 PAR.Day_8_Production_TotalUSR = PAR.Day_8_Production_TotalUSR + PAR.Day_8_Production_USR;

 // PAR.Day 1 Schd Ship Total USR = PAR.Day 1 Schd Ship Total USR + PAR.Day 1 Sched Shipments USR
 PAR.Day_1_Schd_Ship_Total_USR = PAR.Day_1_Schd_Ship_Total_USR
 + PAR.Day_1_Sched_Shipments_USR;

 // PAR.Day 2 Schd Ship Total USR = PAR.Day 2 Schd Ship Total USR + PAR.Day 2 Sched Shipments USR
 PAR.Day_2_Schd_Ship_Total_USR = PAR.Day_2_Schd_Ship_Total_USR
 + PAR.Day_2_Sched_Shipments_USR;

 // PAR.Day 3 Schd Ship Total USR = PAR.Day 3 Schd Ship Total USR + PAR.Day 3 Sched Shipments USR
 PAR.Day_3_Schd_Ship_Total_USR = PAR.Day_3_Schd_Ship_Total_USR
 + PAR.Day_3_Sched_Shipments_USR;

 // PAR.Day 4 Schd Ship Total USR = PAR.Day 4 Schd Ship Total USR + PAR.Day 4 Sched Shipments USR
 PAR.Day_4_Schd_Ship_Total_USR = PAR.Day_4_Schd_Ship_Total_USR
 + PAR.Day_4_Sched_Shipments_USR;

 // PAR.Day 5 Schd Ship Total USR = PAR.Day 5 Schd Ship Total USR + PAR.Day 5 Sched Shipments USR
 PAR.Day_5_Schd_Ship_Total_USR = PAR.Day_5_Schd_Ship_Total_USR
 + PAR.Day_5_Sched_Shipments_USR;

 // PAR.Day 6 Schd Ship Total USR = PAR.Day 6 Schd Ship Total USR + PAR.Day 6 Sched Shipments USR
 PAR.Day_6_Schd_Ship_Total_USR = PAR.Day_6_Schd_Ship_Total_USR
 + PAR.Day_6_Sched_Shipments_USR;

 // PAR.Day 7 Schd Ship Total USR = PAR.Day 7 Schd Ship Total USR + PAR.Day 7 Sched Shipments USR
 PAR.Day_7_Schd_Ship_Total_USR = PAR.Day_7_Schd_Ship_Total_USR
 + PAR.Day_7_Sched_Shipments_USR;

 // PAR.Day 8 Schd Ship Total USR = PAR.Day 8 Schd Ship Total USR + PAR.Day 8 Sched Shipments USR
 PAR.Day_8_Schd_Ship_Total_USR = PAR.Day_8_Schd_Ship_Total_USR
 + PAR.Day_8_Sched_Shipments_USR;

 // PAR.Day 1 Sales Total     USR = PAR.Day 1 Sales Total     USR + PAR.Day 1 Sales USR
 PAR.Day_1_Sales_Total_USR = PAR.Day_1_Sales_Total_USR + PAR.Day_1_Sales_USR;

 // PAR.Day 2 Sales Total     USR = PAR.Day 2 Sales Total     USR + PAR.Day 2 Sales USR
 PAR.Day_2_Sales_Total_USR = PAR.Day_2_Sales_Total_USR + PAR.Day_2_Sales_USR;

 // PAR.Day 3 Sales Total     USR = PAR.Day 3 Sales Total     USR + PAR.Day 3 Sales USR
 PAR.Day_3_Sales_Total_USR = PAR.Day_3_Sales_Total_USR + PAR.Day_3_Sales_USR;

 // PAR.Day 4 Sales Total     USR = PAR.Day 4 Sales Total     USR + PAR.Day 4 Sales USR
 PAR.Day_4_Sales_Total_USR = PAR.Day_4_Sales_Total_USR + PAR.Day_4_Sales_USR;

 // PAR.Day 5 Sales Total     USR = PAR.Day 5 Sales Total     USR + PAR.Day 5 Sales USR
 PAR.Day_5_Sales_Total_USR = PAR.Day_5_Sales_Total_USR + PAR.Day_5_Sales_USR;

 // PAR.Day 6 Sales Total     USR = PAR.Day 6 Sales Total     USR + PAR.Day 6 Sales USR
 PAR.Day_6_Sales_Total_USR = PAR.Day_6_Sales_Total_USR + PAR.Day_6_Sales_USR;

 // PAR.Day 7 Sales Total     USR = PAR.Day 7 Sales Total     USR + PAR.Day 7 Sales USR
 PAR.Day_7_Sales_Total_USR = PAR.Day_7_Sales_Total_USR + PAR.Day_7_Sales_USR;

 // PAR.Day 8 Sales Total     USR = PAR.Day 8 Sales Total     USR + PAR.Day 8 Sales USR
 PAR.Day_8_Sales_Total_USR = PAR.Day_8_Sales_Total_USR + PAR.Day_8_Sales_USR;

 // PAR.Day 1 Adj Total       USR = PAR.Day 1 Adj Total       USR + PAR.Day 1 Adjustments USR
 PAR.Day_1_Adj_Total_USR = PAR.Day_1_Adj_Total_USR + PAR.Day_1_Adjustments_USR;

 // PAR.Day 2 Adj Total       USR = PAR.Day 2 Adj Total       USR + PAR.Day 2 Adjustments USR
 PAR.Day_2_Adj_Total_USR = PAR.Day_2_Adj_Total_USR + PAR.Day_2_Adjustments_USR;

 // PAR.Day 3 Adj Total       USR = PAR.Day 3 Adj Total       USR + PAR.Day 3 Adjustments USR
 PAR.Day_3_Adj_Total_USR = PAR.Day_3_Adj_Total_USR + PAR.Day_3_Adjustments_USR;

 // PAR.Day 4 Adj Total       USR = PAR.Day 4 Adj Total       USR + PAR.Day 4 Adjustments USR
 PAR.Day_4_Adj_Total_USR = PAR.Day_4_Adj_Total_USR + PAR.Day_4_Adjustments_USR;

 // PAR.Day 5 Adj Total       USR = PAR.Day 5 Adj Total       USR + PAR.Day 5 Adjustments USR
 PAR.Day_5_Adj_Total_USR = PAR.Day_5_Adj_Total_USR + PAR.Day_5_Adjustments_USR;

 // PAR.Day 6 Adj Total       USR = PAR.Day 6 Adj Total       USR + PAR.Day 6 Adjustments USR
 PAR.Day_6_Adj_Total_USR = PAR.Day_6_Adj_Total_USR + PAR.Day_6_Adjustments_USR;

 // PAR.Day 7 Adj Total       USR = PAR.Day 7 Adj Total       USR + PAR.Day 7 Adjustments USR
 PAR.Day_7_Adj_Total_USR = PAR.Day_7_Adj_Total_USR + PAR.Day_7_Adjustments_USR;

 // PAR.Day 8 Adj Total       USR = PAR.Day 8 Adj Total       USR + PAR.Day 8 Adjustments USR
 PAR.Day_8_Adj_Total_USR = PAR.Day_8_Adj_Total_USR + PAR.Day_8_Adjustments_USR;

 // PAR.Day 1 Avail Total     USR = PAR.Day 1 Avail Total     USR + PAR.Day 1 Availability USR
 PAR.Day_1_Avail_Total_USR = PAR.Day_1_Avail_Total_USR + PAR.Day_1_Availability_USR;

 // PAR.Day 2 Avail Total     USR = PAR.Day 2 Avail Total     USR + PAR.Day 2 Availability USR
 PAR.Day_2_Avail_Total_USR = PAR.Day_2_Avail_Total_USR + PAR.Day_2_Availability_USR;

 // PAR.Day 3 Avail Total     USR = PAR.Day 3 Avail Total     USR + PAR.Day 3 Availability USR
 PAR.Day_3_Avail_Total_USR = PAR.Day_3_Avail_Total_USR + PAR.Day_3_Availability_USR;

 // PAR.Day 4 Avail Total     USR = PAR.Day 4 Avail Total     USR + PAR.Day 4 Availability USR
 PAR.Day_4_Avail_Total_USR = PAR.Day_4_Avail_Total_USR + PAR.Day_4_Availability_USR;

 // PAR.Day 5 Avail Total     USR = PAR.Day 5 Avail Total     USR + PAR.Day 5 Availability USR
 PAR.Day_5_Avail_Total_USR = PAR.Day_5_Avail_Total_USR + PAR.Day_5_Availability_USR;

 // PAR.Day 6 Avail Total     USR = PAR.Day 6 Avail Total     USR + PAR.Day 6 Availability USR
 PAR.Day_6_Avail_Total_USR = PAR.Day_6_Avail_Total_USR + PAR.Day_6_Availability_USR;

 // PAR.Day 7 Avail Total     USR = PAR.Day 7 Avail Total     USR + PAR.Day 7 Availability USR
 PAR.Day_7_Avail_Total_USR = PAR.Day_7_Avail_Total_USR + PAR.Day_7_Availability_USR;

 // PAR.Day 8 Avail Total     USR = PAR.Day 8 Avail Total     USR + PAR.Day 8 Availability USR
 PAR.Day_8_Avail_Total_USR = PAR.Day_8_Avail_Total_USR + PAR.Day_8_Availability_USR;

 //?Zero out accumulators
 CASE;

 // IF WRK.BLANK EQ WRK.BLANK
 IF WRK.BLANK = WRK.BLANK;

 // PAR.Day 1 Inventory USR = CON.*ZERO
 PAR.Day_1_Inventory_USR = *ZERO;

 // PAR.Day 2 Inventory USR = CON.*ZERO
 PAR.Day_2_Inventory_USR = *ZERO;

 // PAR.Day 3 Inventory USR = CON.*ZERO
 PAR.Day_3_Inventory_USR = *ZERO;

 // PAR.Day 4 Inventory USR = CON.*ZERO
 PAR.Day_4_Inventory_USR = *ZERO;

 // PAR.Day 5 Inventory USR = CON.*ZERO
 PAR.Day_5_Inventory_USR = *ZERO;

 // PAR.Day 6 Inventory USR = CON.*ZERO
 PAR.Day_6_Inventory_USR = *ZERO;

 // PAR.Day 7 Inventory USR = CON.*ZERO
 PAR.Day_7_Inventory_USR = *ZERO;

 // PAR.Day 8 Inventory USR = CON.*ZERO
 PAR.Day_8_Inventory_USR = *ZERO;

 // PAR.Day 1 Production USR = CON.*ZERO
 PAR.Day_1_Production_USR = *ZERO;

 // PAR.Day 2 Production USR = CON.*ZERO
 PAR.Day_2_Production_USR = *ZERO;

 // PAR.Day 3 Production USR = CON.*ZERO
 PAR.Day_3_Production_USR = *ZERO;

 // PAR.Day 4 Production USR = CON.*ZERO
 PAR.Day_4_Production_USR = *ZERO;

 // PAR.Day 5 Production USR = CON.*ZERO
 PAR.Day_5_Production_USR = *ZERO;

 // PAR.Day 6 Production USR = CON.*ZERO
 PAR.Day_6_Production_USR = *ZERO;

 // PAR.Day 7 Production USR = CON.*ZERO
 PAR.Day_7_Production_USR = *ZERO;

 // PAR.Day 8 Production USR = CON.*ZERO
 PAR.Day_8_Production_USR = *ZERO;

 // PAR.Day 1 Sched Shipments USR = CON.*ZERO
 PAR.Day_1_Sched_Shipments_USR = *ZERO;

 // PAR.Day 2 Sched Shipments USR = CON.*ZERO
 PAR.Day_2_Sched_Shipments_USR = *ZERO;

 // PAR.Day 3 Sched Shipments USR = CON.*ZERO
 PAR.Day_3_Sched_Shipments_USR = *ZERO;

 // PAR.Day 4 Sched Shipments USR = CON.*ZERO
 PAR.Day_4_Sched_Shipments_USR = *ZERO;

 // PAR.Day 5 Sched Shipments USR = CON.*ZERO
 PAR.Day_5_Sched_Shipments_USR = *ZERO;

 // PAR.Day 6 Sched Shipments USR = CON.*ZERO
 PAR.Day_6_Sched_Shipments_USR = *ZERO;

 // PAR.Day 7 Sched Shipments USR = CON.*ZERO
 PAR.Day_7_Sched_Shipments_USR = *ZERO;

 // PAR.Day 8 Sched Shipments USR = CON.*ZERO
 PAR.Day_8_Sched_Shipments_USR = *ZERO;

 // PAR.Day 1 Sales USR = CON.*ZERO
 PAR.Day_1_Sales_USR = *ZERO;

 // PAR.Day 2 Sales USR = CON.*ZERO
 PAR.Day_2_Sales_USR = *ZERO;

 // PAR.Day 3 Sales USR = CON.*ZERO
 PAR.Day_3_Sales_USR = *ZERO;

 // PAR.Day 4 Sales USR = CON.*ZERO
 PAR.Day_4_Sales_USR = *ZERO;

 // PAR.Day 5 Sales USR = CON.*ZERO
 PAR.Day_5_Sales_USR = *ZERO;

 // PAR.Day 6 Sales USR = CON.*ZERO
 PAR.Day_6_Sales_USR = *ZERO;

 // PAR.Day 7 Sales USR = CON.*ZERO
 PAR.Day_7_Sales_USR = *ZERO;

 // PAR.Day 8 Sales USR = CON.*ZERO
 PAR.Day_8_Sales_USR = *ZERO;

 // PAR.Day 1 Adjustments USR = CON.*ZERO
 PAR.Day_1_Adjustments_USR = *ZERO;

 // PAR.Day 2 Adjustments USR = CON.*ZERO
 PAR.Day_2_Adjustments_USR = *ZERO;

 // PAR.Day 3 Adjustments USR = CON.*ZERO
 PAR.Day_3_Adjustments_USR = *ZERO;

 // PAR.Day 4 Adjustments USR = CON.*ZERO
 PAR.Day_4_Adjustments_USR = *ZERO;

 // PAR.Day 5 Adjustments USR = CON.*ZERO
 PAR.Day_5_Adjustments_USR = *ZERO;

 // PAR.Day 6 Adjustments USR = CON.*ZERO
 PAR.Day_6_Adjustments_USR = *ZERO;

 // PAR.Day 7 Adjustments USR = CON.*ZERO
 PAR.Day_7_Adjustments_USR = *ZERO;

 // PAR.Day 8 Adjustments USR = CON.*ZERO
 PAR.Day_8_Adjustments_USR = *ZERO;

 // PAR.Day 1 Availability USR = CON.*ZERO
 PAR.Day_1_Availability_USR = *ZERO;

 // PAR.Day 2 Availability USR = CON.*ZERO
 PAR.Day_2_Availability_USR = *ZERO;

 // PAR.Day 3 Availability USR = CON.*ZERO
 PAR.Day_3_Availability_USR = *ZERO;

 // PAR.Day 4 Availability USR = CON.*ZERO
 PAR.Day_4_Availability_USR = *ZERO;

 // PAR.Day 5 Availability USR = CON.*ZERO
 PAR.Day_5_Availability_USR = *ZERO;

 // PAR.Day 6 Availability USR = CON.*ZERO
 PAR.Day_6_Availability_USR = *ZERO;

 // PAR.Day 7 Availability USR = CON.*ZERO
 PAR.Day_7_Availability_USR = *ZERO;

 // PAR.Day 8 Availability USR = CON.*ZERO
 PAR.Day_8_Availability_USR = *ZERO;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Warehouse Code EQ DB1.Warehouse Code
 IF PAR.Warehouse_Code = DB1.Warehouse_Code;

 EXECUTE FUNCTION(Rtv PA Dtl SD-6       IF) TYPE(EXCINTFUN)                      AC1646139;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.PS_Available_Ship_Date);
 PARAMETER(PAR.Avail_Ship_Date_1_USR);
 PARAMETER(PAR.Avail_Ship_Date_2_USR);
 PARAMETER(PAR.Avail_Ship_Date_3_USR);
 PARAMETER(PAR.Avail_Ship_Date_4_USR);
 PARAMETER(PAR.Avail_Ship_Date_5_USR);
 PARAMETER(PAR.Avail_Ship_Date_6_USR);
 PARAMETER(PAR.Avail_Ship_Date_7_USR);
 PARAMETER(PAR.USR_Day_1);
 PARAMETER(PAR.USR_Day_2);
 PARAMETER(PAR.USR_Day_3);
 PARAMETER(PAR.USR_Day_4);
 PARAMETER(PAR.USR_Day_5);
 PARAMETER(PAR.USR_Day_6);
 PARAMETER(PAR.USR_Day_7);
 PARAMETER(PAR.Day_1_Inventory_Total_USR);
 PARAMETER(PAR.Day_2_Inventory_Total_USR);
 PARAMETER(PAR.Day_3_Inventory_Total_USR);
 PARAMETER(PAR.Day_4_Inventory_Total_USR);
 PARAMETER(PAR.Day_5_Inventory_Total_USR);
 PARAMETER(PAR.Day_6_Inventory_Total_USR);
 PARAMETER(PAR.Day_7_Inventory_Total_USR);
 PARAMETER(PAR.Day_8_Inventory_Total_USR);
 PARAMETER(PAR.Day_1_Production_TotalUSR);
 PARAMETER(PAR.Day_2_Production_TotalUSR);
 PARAMETER(PAR.Day_3_Production_TotalUSR);
 PARAMETER(PAR.Day_4_Production_TotalUSR);
 PARAMETER(PAR.Day_5_Production_TotalUSR);
 PARAMETER(PAR.Day_6_Production_TotalUSR);
 PARAMETER(PAR.Day_7_Production_TotalUSR);
 PARAMETER(PAR.Day_8_Production_TotalUSR);
 PARAMETER(PAR.Day_1_Sales_Total_USR);
 PARAMETER(PAR.Day_2_Sales_Total_USR);
 PARAMETER(PAR.Day_3_Sales_Total_USR);
 PARAMETER(PAR.Day_4_Sales_Total_USR);
 PARAMETER(PAR.Day_5_Sales_Total_USR);
 PARAMETER(PAR.Day_6_Sales_Total_USR);
 PARAMETER(PAR.Day_7_Sales_Total_USR);
 PARAMETER(PAR.Day_8_Sales_Total_USR);
 PARAMETER(PAR.Day_1_Adj_Total_USR);
 PARAMETER(PAR.Day_2_Adj_Total_USR);
 PARAMETER(PAR.Day_3_Adj_Total_USR);
 PARAMETER(PAR.Day_4_Adj_Total_USR);
 PARAMETER(PAR.Day_5_Adj_Total_USR);
 PARAMETER(PAR.Day_6_Adj_Total_USR);
 PARAMETER(PAR.Day_7_Adj_Total_USR);
 PARAMETER(PAR.Day_8_Adj_Total_USR);
 PARAMETER(PAR.Day_1_Avail_Total_USR);
 PARAMETER(PAR.Day_2_Avail_Total_USR);
 PARAMETER(PAR.Day_3_Avail_Total_USR);
 PARAMETER(PAR.Day_4_Avail_Total_USR);
 PARAMETER(PAR.Day_5_Avail_Total_USR);
 PARAMETER(PAR.Day_6_Avail_Total_USR);
 PARAMETER(PAR.Day_7_Avail_Total_USR);
 PARAMETER(PAR.Day_8_Avail_Total_USR);
 PARAMETER(PAR.Primary_Load_Sts_USR);
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Day_1_Schd_Ship_Total_USR);
 PARAMETER(PAR.Day_2_Schd_Ship_Total_USR);
 PARAMETER(PAR.Day_3_Schd_Ship_Total_USR);
 PARAMETER(PAR.Day_4_Schd_Ship_Total_USR);
 PARAMETER(PAR.Day_5_Schd_Ship_Total_USR);
 PARAMETER(PAR.Day_6_Schd_Ship_Total_USR);
 PARAMETER(PAR.Day_7_Schd_Ship_Total_USR);
 PARAMETER(PAR.Day_8_Schd_Ship_Total_USR);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv PA In/Sh SD-6     IF) TYPE(EXCINTFUN)                      AC1388774;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.Day_1_Inventory_USR);
  PARAMETER(PAR.Day_2_Inventory_USR);
  PARAMETER(PAR.Day_3_Inventory_USR);
  PARAMETER(PAR.Day_4_Inventory_USR);
  PARAMETER(PAR.Day_5_Inventory_USR);
  PARAMETER(PAR.Day_6_Inventory_USR);
  PARAMETER(PAR.Day_7_Inventory_USR);
  PARAMETER(PAR.Day_8_Inventory_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_1_Adjustments_USR);
  PARAMETER(PAR.Day_2_Adjustments_USR);
  PARAMETER(PAR.Day_3_Adjustments_USR);
  PARAMETER(PAR.Day_4_Adjustments_USR);
  PARAMETER(PAR.Day_5_Adjustments_USR);
  PARAMETER(PAR.Day_6_Adjustments_USR);
  PARAMETER(PAR.Day_7_Adjustments_USR);
  PARAMETER(PAR.Day_1_Availability_USR);
  PARAMETER(PAR.Day_2_Availability_USR);
  PARAMETER(PAR.Day_3_Availability_USR);
  PARAMETER(PAR.Day_4_Availability_USR);
  PARAMETER(PAR.Day_5_Availability_USR);
  PARAMETER(PAR.Day_6_Availability_USR);
  PARAMETER(PAR.Day_7_Availability_USR);
  PARAMETER(PAR.Primary_Load_Sts_USR);
  PARAMETER(PAR.Load_Size_USR);
  PARAMETER(PAR.Day_1_Sched_Shipments_USR);
  PARAMETER(PAR.Day_2_Sched_Shipments_USR);
  PARAMETER(PAR.Day_3_Sched_Shipments_USR);
  PARAMETER(PAR.Day_4_Sched_Shipments_USR);
  PARAMETER(PAR.Day_5_Sched_Shipments_USR);
  PARAMETER(PAR.Day_6_Sched_Shipments_USR);
  PARAMETER(PAR.Day_7_Sched_Shipments_USR);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
  {
   //?Execute internal function

   //?Retrieve Inventory and Scheduled Shipments
   EXECUTE FUNCTION(Rtv PA In/Sh SD-6 WHS RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1376865;
   PARAMETER(PAR.Company_Number);
   PARAMETER('S');
   PARAMETER(JOB.*Job_date);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Inventory / Sales if Chilling Time > 0
   CASE;

   // IF PAR.Primary/Load Sts USR is Primary
   IF PAR.Primary_Load_Sts_USR = 'P';

   // AND PAR.Unit Weight is Greater than zero
   AND ( PAR.Unit_Weight > *ZERO;

   // OR PAR.Piece Count Item is yes
   OR PAR.Piece_Count_Item = 'Y' );

   //?Calculate Quantity based on Unit Weight or Pieces
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_1_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 2 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_2_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 3 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_3_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 4 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_4_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 5 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_5_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 6 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_6_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 7 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_7_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   ENDIF;

   //?Inventory / Sales if Chilling Time > 0
   // IF PAR.Primary/Load Sts USR is Load Size
   IF PAR.Primary_Load_Sts_USR = 'L';

   // AND PAR.Load Size USR is GT Zero
   AND PAR.Load_Size_USR > *ZERO;

   //?Calculate Quantity based on Load Size
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_1_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 2 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_2_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 3 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_3_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 4 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_4_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 5 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_5_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 6 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_6_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 7 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_7_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   ENDIF;

   ENDIF;

   //?Total Inventory
   CASE;

   // IF PAR.Avail Dsp/Prt Type USR is Display
   IF PAR.Avail_Dsp_Prt_Type_USR = 'D'/'T';

   // Total Inventory
   PAR.Day_8_Inventory_USR = ( ( ( ( ( PAR.Day_1_Inventory_USR + PAR.Day_2_Inventory_USR )
   + PAR.Day_3_Inventory_USR ) + PAR.Day_4_Inventory_USR ) + PAR.Day_5_Inventory_USR )
   + PAR.Day_6_Inventory_USR ) + PAR.Day_7_Inventory_USR;

   ENDIF;

  }

  EXECUTE FUNCTION(Rtv PA Dtl SD-6 WHS   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1646149;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.USR_Day_1);
  PARAMETER(PAR.USR_Day_2);
  PARAMETER(PAR.USR_Day_3);
  PARAMETER(PAR.USR_Day_4);
  PARAMETER(PAR.USR_Day_5);
  PARAMETER(PAR.USR_Day_6);
  PARAMETER(PAR.USR_Day_7);
  PARAMETER(PAR.Day_1_Inventory_USR);
  PARAMETER(PAR.Day_2_Inventory_USR);
  PARAMETER(PAR.Day_3_Inventory_USR);
  PARAMETER(PAR.Day_4_Inventory_USR);
  PARAMETER(PAR.Day_5_Inventory_USR);
  PARAMETER(PAR.Day_6_Inventory_USR);
  PARAMETER(PAR.Day_7_Inventory_USR);
  PARAMETER(PAR.Day_1_Production_USR);
  PARAMETER(PAR.Day_2_Production_USR);
  PARAMETER(PAR.Day_3_Production_USR);
  PARAMETER(PAR.Day_4_Production_USR);
  PARAMETER(PAR.Day_5_Production_USR);
  PARAMETER(PAR.Day_6_Production_USR);
  PARAMETER(PAR.Day_7_Production_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_1_Adjustments_USR);
  PARAMETER(PAR.Day_2_Adjustments_USR);
  PARAMETER(PAR.Day_3_Adjustments_USR);
  PARAMETER(PAR.Day_4_Adjustments_USR);
  PARAMETER(PAR.Day_5_Adjustments_USR);
  PARAMETER(PAR.Day_6_Adjustments_USR);
  PARAMETER(PAR.Day_7_Adjustments_USR);
  PARAMETER(PAR.Day_1_Availability_USR);
  PARAMETER(PAR.Day_2_Availability_USR);
  PARAMETER(PAR.Day_3_Availability_USR);
  PARAMETER(PAR.Day_4_Availability_USR);
  PARAMETER(PAR.Day_5_Availability_USR);
  PARAMETER(PAR.Day_6_Availability_USR);
  PARAMETER(PAR.Day_7_Availability_USR);
  PARAMETER(PAR.Primary_Load_Sts_USR);
  PARAMETER(PAR.Load_Size_USR);
  PARAMETER(PAR.Day_1_Sched_Shipments_USR);
  PARAMETER(PAR.Day_2_Sched_Shipments_USR);
  PARAMETER(PAR.Day_3_Sched_Shipments_USR);
  PARAMETER(PAR.Day_4_Sched_Shipments_USR);
  PARAMETER(PAR.Day_5_Sched_Shipments_USR);
  PARAMETER(PAR.Day_6_Sched_Shipments_USR);
  PARAMETER(PAR.Day_7_Sched_Shipments_USR);
  PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  {
   //?USER: Initialize routine

   // PAR.Status Flag 1  Y/N = CND.No
   PAR.Status_Flag_1_Y_N = 'N';

   // PAR.Status Flag 2  Y/N = CND.No
   PAR.Status_Flag_2_Y_N = 'N';

   // PAR.Status Flag 3  Y/N = CND.No
   PAR.Status_Flag_3_Y_N = 'N';

   // PAR.Status Flag 4  Y/N = CND.no
   PAR.Status_Flag_4_Y_N = 'N';

   // PAR.Status Flag 5  Y/N = CND.No
   PAR.Status_Flag_5_Y_N = 'N';

   // PAR.Status Flag 6  Y/N = CND.No
   PAR.Status_Flag_6_Y_N = 'N';

   // PAR.Status Flag 7  Y/N = CND.No
   PAR.Status_Flag_7_Y_N = 'N';

   //?USER: Process Data record

   //?Quit:  Available Ship Date > Day 7
   CASE;

   // IF DB1.PS Available Ship Date GT PAR.Avail Ship Date 7 USR
   IF DB1.PS_Available_Ship_Date > PAR.Avail_Ship_Date_7_USR;

   EXECUTE FUNCTION(Rtv PA Ship Only-21  IF) TYPE(EXCINTFUN)                       AC1815983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Primary_Load_Sts_USR);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(PAR.Status_Flag_1_Y_N);
   PARAMETER(PAR.Status_Flag_2_Y_N);
   PARAMETER(PAR.Status_Flag_3_Y_N);
   PARAMETER(PAR.Status_Flag_4_Y_N);
   PARAMETER(PAR.Status_Flag_5_Y_N);
   PARAMETER(PAR.Status_Flag_6_Y_N);
   PARAMETER(PAR.Status_Flag_7_Y_N);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   {
    //?Execute internal function

    //?02/21/11 PKD Do not need to Override Weight for Piece Count Items.
    // PAR.Ord/Sch Sts USR = CND.Scheduled
    PAR.Ord_Sch_Sts_USR = 'S';

    //?day 1
    CASE;

    // IF PAR.Avail Ship Date 1 USR is Entered
    IF PAR.Avail_Ship_Date_1_USR <> *ZERO;

    // AND PAR.Status Flag 1  Y/N is No
    AND PAR.Status_Flag_1_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_1_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 1
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 1 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_1_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 1
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 2
    CASE;

    // IF PAR.Avail Ship Date 2 USR is Entered
    IF PAR.Avail_Ship_Date_2_USR <> *ZERO;

    // AND PAR.Status Flag 2  Y/N is No
    AND PAR.Status_Flag_2_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_2_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 2
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 2 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_2_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 2
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 3
    CASE;

    // IF PAR.Avail Ship Date 3 USR is Entered
    IF PAR.Avail_Ship_Date_3_USR <> *ZERO;

    // AND PAR.Status Flag 3  Y/N is No
    AND PAR.Status_Flag_3_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_3_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 3
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 3 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_3_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 3
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 4
    CASE;

    // IF PAR.Avail Ship Date 4 USR is Entered
    IF PAR.Avail_Ship_Date_4_USR <> *ZERO;

    // AND PAR.Status Flag 4  Y/N is no
    AND PAR.Status_Flag_4_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_4_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 4
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 4 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_4_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 4
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 5
    CASE;

    // IF PAR.Avail Ship Date 5 USR is Entered
    IF PAR.Avail_Ship_Date_5_USR <> *ZERO;

    // AND PAR.Status Flag 5  Y/N is No
    AND PAR.Status_Flag_5_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_5_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 5
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 5 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_5_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 5
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 6
    CASE;

    // IF PAR.Avail Ship Date 6 USR is Entered
    IF PAR.Avail_Ship_Date_6_USR <> *ZERO;

    // AND PAR.Status Flag 6  Y/N is No
    AND PAR.Status_Flag_6_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_6_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 6
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 6 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_6_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 6
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 7
    CASE;

    // IF PAR.Avail Ship Date 7 USR is Entered
    IF PAR.Avail_Ship_Date_7_USR <> *ZERO;

    // AND PAR.Status Flag 7  Y/N is No
    AND PAR.Status_Flag_7_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_7_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 7
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 7 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_7_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 7
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 8
    CASE;

    // IF PAR.Avail Ship Date 8 USR is Entered
    IF PAR.Avail_Ship_Date_8_USR <> *ZERO;

    // AND PAR.Status Flag 8  Y/N is No
    AND PAR.Status_Flag_8_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_8_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 8
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 8 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_8_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 8
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 9
    CASE;

    // IF PAR.Avail Ship Date 9 USR is Entered
    IF PAR.Avail_Ship_Date_9_USR <> *ZERO;

    // AND PAR.Status Flag 9  Y/N is No
    AND PAR.Status_Flag_9_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_9_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 9
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 9 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_9_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 9
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 10
    CASE;

    // IF PAR.Avail Ship Date 10 USR is Entered
    IF PAR.Avail_Ship_Date_10_USR <> *ZERO;

    // AND PAR.Status Flag 10 Y/N is No
    AND PAR.Status_Flag_10_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_10_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 10
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 10 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_10_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 10
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 11
    CASE;

    // IF PAR.Avail Ship Date 11 USR is Entered
    IF PAR.Avail_Ship_Date_11_USR <> *ZERO;

    // AND PAR.Status Flag 11 Y/N is No
    AND PAR.Status_Flag_11_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_11_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 11
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 11 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_11_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 11
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 12
    CASE;

    // IF PAR.Avail Ship Date 12 USR is Entered
    IF PAR.Avail_Ship_Date_12_USR <> *ZERO;

    // AND PAR.Status Flag 12 Y/N is No
    AND PAR.Status_Flag_12_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_12_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 12
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 12 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_12_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 12
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 13
    CASE;

    // IF PAR.Avail Ship Date 13 USR is Entered
    IF PAR.Avail_Ship_Date_13_USR <> *ZERO;

    // AND PAR.Status Flag 13 Y/N is No
    AND PAR.Status_Flag_13_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_13_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 13
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 13 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_13_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 13
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 14
    CASE;

    // IF PAR.Avail Ship Date 14 USR is Entered
    IF PAR.Avail_Ship_Date_14_USR <> *ZERO;

    // AND PAR.Status Flag 14 Y/N is No
    AND PAR.Status_Flag_14_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_14_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 14
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 14 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_14_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 14
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 15
    CASE;

    // IF PAR.Avail Ship Date 15 USR is Entered
    IF PAR.Avail_Ship_Date_15_USR <> *ZERO;

    // AND PAR.Status Flag 15 Y/N is No
    AND PAR.Status_Flag_15_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_15_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 15
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 15 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_15_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 15
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 16
    CASE;

    // IF PAR.Avail Ship Date 16 USR is Entered
    IF PAR.Avail_Ship_Date_16_USR <> *ZERO;

    // AND PAR.Status Flag 16 Y/N is No
    AND PAR.Status_Flag_16_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_16_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 16
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 16 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_16_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 16
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 17
    CASE;

    // IF PAR.Avail Ship Date 17 USR is Entered
    IF PAR.Avail_Ship_Date_17_USR <> *ZERO;

    // AND PAR.Status Flag 17 Y/N is No
    AND PAR.Status_Flag_17_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_17_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 17
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 17 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_17_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 17
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 18
    CASE;

    // IF PAR.Avail Ship Date 18 USR is Entered
    IF PAR.Avail_Ship_Date_18_USR <> *ZERO;

    // AND PAR.Status Flag 18 Y/N is No
    AND PAR.Status_Flag_18_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_18_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 18
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 18 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_18_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 18
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 19
    CASE;

    // IF PAR.Avail Ship Date 19 USR is Entered
    IF PAR.Avail_Ship_Date_19_USR <> *ZERO;

    // AND PAR.Status Flag 19 Y/N is No
    AND PAR.Status_Flag_19_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_19_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 19
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 19 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_19_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 19
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 20
    CASE;

    // IF PAR.Avail Ship Date 20 USR is Entered
    IF PAR.Avail_Ship_Date_20_USR <> *ZERO;

    // AND PAR.Status Flag 20 Y/N is No
    AND PAR.Status_Flag_20_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_20_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 20
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 20 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_20_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 20
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 21
    CASE;

    // IF PAR.Avail Ship Date 21 USR is Entered
    IF PAR.Avail_Ship_Date_21_USR <> *ZERO;

    // AND PAR.Status Flag 21 Y/N is No
    AND PAR.Status_Flag_21_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_21_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 21
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 21 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_21_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 21
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

   }

   QUIT;

   ENDIF;

   CASE;

   // IF DB1.PS Available Ship Date GE JOB.*Job date
   IF DB1.PS_Available_Ship_Date >= JOB.*Job_date;

   CASE;

   // IF PAR.Primary/Load Sts USR is Primary
   IF PAR.Primary_Load_Sts_USR = 'P';

   // AND PAR.Unit Weight is Greater than zero
   AND ( PAR.Unit_Weight > *ZERO;

   // OR PAR.Piece Count Item is yes
   OR PAR.Piece_Count_Item = 'Y' );

   //?calculate PA with Unit Weight
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_1_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 1  Y/N = CND.Yes
   PAR.Status_Flag_1_Y_N = 'Y';

   //?calculate PA with Unit Weight
   // IF PAR.Avail Ship Date 2 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_2_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 2  Y/N = CND.Yes
   PAR.Status_Flag_2_Y_N = 'Y';

   //?calculate PA with Unit Weight
   // IF PAR.Avail Ship Date 3 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_3_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 3  Y/N = CND.Yes
   PAR.Status_Flag_3_Y_N = 'Y';

   //?calculate PA with Unit Weight
   // IF PAR.Avail Ship Date 4 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_4_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 4  Y/N = CND.yes
   PAR.Status_Flag_4_Y_N = 'Y';

   //?calculate PA with Unit Weight
   // IF PAR.Avail Ship Date 5 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_5_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 5  Y/N = CND.Yes
   PAR.Status_Flag_5_Y_N = 'Y';

   //?calculate PA with Unit Weight
   // IF PAR.Avail Ship Date 6 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_6_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 6  Y/N = CND.Yes
   PAR.Status_Flag_6_Y_N = 'Y';

   //?calculate PA with Unit Weight
   // IF PAR.Avail Ship Date 7 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_7_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 7  Y/N = CND.Yes
   PAR.Status_Flag_7_Y_N = 'Y';

   ENDIF;

   // IF PAR.Primary/Load Sts USR is Load Size
   IF PAR.Primary_Load_Sts_USR = 'L';

   // AND PAR.Load Size USR is GT Zero
   AND PAR.Load_Size_USR > *ZERO;

   //?Calculate PA with Load Size
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_1_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(*MISSING);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);

   // PAR.Status Flag 1  Y/N = CND.Yes
   PAR.Status_Flag_1_Y_N = 'Y';

   //?Calculate PA with Load Size
   // IF PAR.Avail Ship Date 2 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_2_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(*MISSING);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);

   // PAR.Status Flag 2  Y/N = CND.Yes
   PAR.Status_Flag_2_Y_N = 'Y';

   //?Calculate PA with Load Size
   // IF PAR.Avail Ship Date 3 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_3_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(*MISSING);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);

   // PAR.Status Flag 3  Y/N = CND.Yes
   PAR.Status_Flag_3_Y_N = 'Y';

   //?Calculate PA with Load Size
   // IF PAR.Avail Ship Date 4 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_4_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(*MISSING);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);

   // PAR.Status Flag 4  Y/N = CND.yes
   PAR.Status_Flag_4_Y_N = 'Y';

   //?Calculate PA with Load Size
   // IF PAR.Avail Ship Date 5 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_5_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(*MISSING);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);

   // PAR.Status Flag 5  Y/N = CND.Yes
   PAR.Status_Flag_5_Y_N = 'Y';

   //?Calculate PA with Load Size
   // IF PAR.Avail Ship Date 6 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_6_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(*MISSING);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);

   // PAR.Status Flag 6  Y/N = CND.Yes
   PAR.Status_Flag_6_Y_N = 'Y';

   //?Calculate PA with Load Size
   // IF PAR.Avail Ship Date 7 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_7_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(*MISSING);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);

   // PAR.Status Flag 7  Y/N = CND.Yes
   PAR.Status_Flag_7_Y_N = 'Y';

   ENDIF;

   ENDIF;

   ENDIF;

   //?USER: Exit processing

   EXECUTE FUNCTION(Rtv PA Ship Only-21  IF) TYPE(EXCINTFUN)                       AC1815983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Primary_Load_Sts_USR);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(PAR.Status_Flag_1_Y_N);
   PARAMETER(PAR.Status_Flag_2_Y_N);
   PARAMETER(PAR.Status_Flag_3_Y_N);
   PARAMETER(PAR.Status_Flag_4_Y_N);
   PARAMETER(PAR.Status_Flag_5_Y_N);
   PARAMETER(PAR.Status_Flag_6_Y_N);
   PARAMETER(PAR.Status_Flag_7_Y_N);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   {
    //?Execute internal function

    //?02/21/11 PKD Do not need to Override Weight for Piece Count Items.
    // PAR.Ord/Sch Sts USR = CND.Scheduled
    PAR.Ord_Sch_Sts_USR = 'S';

    //?day 1
    CASE;

    // IF PAR.Avail Ship Date 1 USR is Entered
    IF PAR.Avail_Ship_Date_1_USR <> *ZERO;

    // AND PAR.Status Flag 1  Y/N is No
    AND PAR.Status_Flag_1_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_1_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 1
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 1 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_1_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 1
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 2
    CASE;

    // IF PAR.Avail Ship Date 2 USR is Entered
    IF PAR.Avail_Ship_Date_2_USR <> *ZERO;

    // AND PAR.Status Flag 2  Y/N is No
    AND PAR.Status_Flag_2_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_2_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 2
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 2 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_2_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 2
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 3
    CASE;

    // IF PAR.Avail Ship Date 3 USR is Entered
    IF PAR.Avail_Ship_Date_3_USR <> *ZERO;

    // AND PAR.Status Flag 3  Y/N is No
    AND PAR.Status_Flag_3_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_3_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 3
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 3 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_3_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 3
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 4
    CASE;

    // IF PAR.Avail Ship Date 4 USR is Entered
    IF PAR.Avail_Ship_Date_4_USR <> *ZERO;

    // AND PAR.Status Flag 4  Y/N is no
    AND PAR.Status_Flag_4_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_4_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 4
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 4 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_4_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 4
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 5
    CASE;

    // IF PAR.Avail Ship Date 5 USR is Entered
    IF PAR.Avail_Ship_Date_5_USR <> *ZERO;

    // AND PAR.Status Flag 5  Y/N is No
    AND PAR.Status_Flag_5_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_5_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 5
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 5 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_5_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 5
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 6
    CASE;

    // IF PAR.Avail Ship Date 6 USR is Entered
    IF PAR.Avail_Ship_Date_6_USR <> *ZERO;

    // AND PAR.Status Flag 6  Y/N is No
    AND PAR.Status_Flag_6_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_6_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 6
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 6 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_6_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 6
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 7
    CASE;

    // IF PAR.Avail Ship Date 7 USR is Entered
    IF PAR.Avail_Ship_Date_7_USR <> *ZERO;

    // AND PAR.Status Flag 7  Y/N is No
    AND PAR.Status_Flag_7_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_7_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 7
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 7 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_7_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 7
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 8
    CASE;

    // IF PAR.Avail Ship Date 8 USR is Entered
    IF PAR.Avail_Ship_Date_8_USR <> *ZERO;

    // AND PAR.Status Flag 8  Y/N is No
    AND PAR.Status_Flag_8_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_8_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 8
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 8 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_8_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 8
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 9
    CASE;

    // IF PAR.Avail Ship Date 9 USR is Entered
    IF PAR.Avail_Ship_Date_9_USR <> *ZERO;

    // AND PAR.Status Flag 9  Y/N is No
    AND PAR.Status_Flag_9_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_9_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 9
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 9 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_9_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 9
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 10
    CASE;

    // IF PAR.Avail Ship Date 10 USR is Entered
    IF PAR.Avail_Ship_Date_10_USR <> *ZERO;

    // AND PAR.Status Flag 10 Y/N is No
    AND PAR.Status_Flag_10_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_10_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 10
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 10 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_10_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 10
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 11
    CASE;

    // IF PAR.Avail Ship Date 11 USR is Entered
    IF PAR.Avail_Ship_Date_11_USR <> *ZERO;

    // AND PAR.Status Flag 11 Y/N is No
    AND PAR.Status_Flag_11_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_11_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 11
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 11 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_11_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 11
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 12
    CASE;

    // IF PAR.Avail Ship Date 12 USR is Entered
    IF PAR.Avail_Ship_Date_12_USR <> *ZERO;

    // AND PAR.Status Flag 12 Y/N is No
    AND PAR.Status_Flag_12_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_12_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 12
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 12 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_12_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 12
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 13
    CASE;

    // IF PAR.Avail Ship Date 13 USR is Entered
    IF PAR.Avail_Ship_Date_13_USR <> *ZERO;

    // AND PAR.Status Flag 13 Y/N is No
    AND PAR.Status_Flag_13_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_13_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 13
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 13 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_13_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 13
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 14
    CASE;

    // IF PAR.Avail Ship Date 14 USR is Entered
    IF PAR.Avail_Ship_Date_14_USR <> *ZERO;

    // AND PAR.Status Flag 14 Y/N is No
    AND PAR.Status_Flag_14_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_14_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 14
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 14 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_14_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 14
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 15
    CASE;

    // IF PAR.Avail Ship Date 15 USR is Entered
    IF PAR.Avail_Ship_Date_15_USR <> *ZERO;

    // AND PAR.Status Flag 15 Y/N is No
    AND PAR.Status_Flag_15_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_15_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 15
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 15 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_15_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 15
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 16
    CASE;

    // IF PAR.Avail Ship Date 16 USR is Entered
    IF PAR.Avail_Ship_Date_16_USR <> *ZERO;

    // AND PAR.Status Flag 16 Y/N is No
    AND PAR.Status_Flag_16_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_16_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 16
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 16 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_16_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 16
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 17
    CASE;

    // IF PAR.Avail Ship Date 17 USR is Entered
    IF PAR.Avail_Ship_Date_17_USR <> *ZERO;

    // AND PAR.Status Flag 17 Y/N is No
    AND PAR.Status_Flag_17_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_17_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 17
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 17 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_17_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 17
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 18
    CASE;

    // IF PAR.Avail Ship Date 18 USR is Entered
    IF PAR.Avail_Ship_Date_18_USR <> *ZERO;

    // AND PAR.Status Flag 18 Y/N is No
    AND PAR.Status_Flag_18_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_18_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 18
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 18 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_18_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 18
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 19
    CASE;

    // IF PAR.Avail Ship Date 19 USR is Entered
    IF PAR.Avail_Ship_Date_19_USR <> *ZERO;

    // AND PAR.Status Flag 19 Y/N is No
    AND PAR.Status_Flag_19_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_19_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 19
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 19 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_19_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 19
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 20
    CASE;

    // IF PAR.Avail Ship Date 20 USR is Entered
    IF PAR.Avail_Ship_Date_20_USR <> *ZERO;

    // AND PAR.Status Flag 20 Y/N is No
    AND PAR.Status_Flag_20_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_20_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 20
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 20 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_20_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 20
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 21
    CASE;

    // IF PAR.Avail Ship Date 21 USR is Entered
    IF PAR.Avail_Ship_Date_21_USR <> *ZERO;

    // AND PAR.Status Flag 21 Y/N is No
    AND PAR.Status_Flag_21_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_21_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 21
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 21 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_21_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 21
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

   }

  }

  // Total Production
  PAR.Day_8_Production_USR = ( ( ( ( ( PAR.Day_1_Production_USR + PAR.Day_2_Production_USR )
  + PAR.Day_3_Production_USR ) + PAR.Day_4_Production_USR ) + PAR.Day_5_Production_USR )
  + PAR.Day_6_Production_USR ) + PAR.Day_7_Production_USR;

  // Total Sched SHipments
  PAR.Day_8_Sched_Shipments_USR = ( ( ( ( ( PAR.Day_1_Sched_Shipments_USR
  + PAR.Day_2_Sched_Shipments_USR ) + PAR.Day_3_Sched_Shipments_USR )
  + PAR.Day_4_Sched_Shipments_USR ) + PAR.Day_5_Sched_Shipments_USR )
  + PAR.Day_6_Sched_Shipments_USR ) + PAR.Day_7_Sched_Shipments_USR;

  // Total Sales
  PAR.Day_8_Sales_USR = ( ( ( ( ( PAR.Day_1_Sales_USR + PAR.Day_2_Sales_USR )
  + PAR.Day_3_Sales_USR ) + PAR.Day_4_Sales_USR ) + PAR.Day_5_Sales_USR )
  + PAR.Day_6_Sales_USR ) + PAR.Day_7_Sales_USR;

  // Total Adjustments
  PAR.Day_8_Adjustments_USR = ( ( ( ( ( PAR.Day_1_Adjustments_USR
  + PAR.Day_2_Adjustments_USR ) + PAR.Day_3_Adjustments_USR ) + PAR.Day_4_Adjustments_USR )
  + PAR.Day_5_Adjustments_USR ) + PAR.Day_6_Adjustments_USR ) + PAR.Day_7_Adjustments_USR;

  // Total Availability
  PAR.Day_8_Availability_USR = ( ( ( ( ( PAR.Day_1_Availability_USR
  + PAR.Day_2_Availability_USR ) + PAR.Day_3_Availability_USR )
  + PAR.Day_4_Availability_USR ) + PAR.Day_5_Availability_USR )
  + PAR.Day_6_Availability_USR ) + PAR.Day_7_Availability_USR;

 }

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Move to Zero Decimal fields
DO;

// DTL.Day 1 Inventory 5,0   USR = DTL.Day 1 Inventory USR
DTL.Day_1_Inventory_50_USR = DTL.Day_1_Inventory_USR;

// DTL.Day 2 Inventory 5,0   USR = DTL.Day 2 Inventory USR
DTL.Day_2_Inventory_50_USR = DTL.Day_2_Inventory_USR;

// DTL.Day 3 Inventory 5,0   USR = DTL.Day 3 Inventory USR
DTL.Day_3_Inventory_50_USR = DTL.Day_3_Inventory_USR;

// DTL.Day 4 Inventory 5,0   USR = DTL.Day 4 Inventory USR
DTL.Day_4_Inventory_50_USR = DTL.Day_4_Inventory_USR;

// DTL.Day 5 Inventory 5,0   USR = DTL.Day 5 Inventory USR
DTL.Day_5_Inventory_50_USR = DTL.Day_5_Inventory_USR;

// DTL.Day 6 Inventory 5,0   USR = DTL.Day 6 Inventory USR
DTL.Day_6_Inventory_50_USR = DTL.Day_6_Inventory_USR;

// DTL.Day 7 Inventory 5,0   USR = DTL.Day 7 Inventory USR
DTL.Day_7_Inventory_50_USR = DTL.Day_7_Inventory_USR;

// DTL.Day 8 Inventory 5,0   USR = DTL.Day 8 Inventory USR
DTL.Day_8_Inventory_50_USR = DTL.Day_8_Inventory_USR;

// DTL.Day 1 Production 5,0  USR = DTL.Day 1 Production USR
DTL.Day_1_Production_50_USR = DTL.Day_1_Production_USR;

// DTL.Day 2 Production 5,0  USR = DTL.Day 2 Production USR
DTL.Day_2_Production_50_USR = DTL.Day_2_Production_USR;

// DTL.Day 3 Production 5,0  USR = DTL.Day 3 Production USR
DTL.Day_3_Production_50_USR = DTL.Day_3_Production_USR;

// DTL.Day 4 Production 5,0  USR = DTL.Day 4 Production USR
DTL.Day_4_Production_50_USR = DTL.Day_4_Production_USR;

// DTL.Day 5 Production 5,0  USR = DTL.Day 5 Production USR
DTL.Day_5_Production_50_USR = DTL.Day_5_Production_USR;

// DTL.Day 6 Production 5,0  USR = DTL.Day 6 Production USR
DTL.Day_6_Production_50_USR = DTL.Day_6_Production_USR;

// DTL.Day 7 Production 5,0  USR = DTL.Day 7 Production USR
DTL.Day_7_Production_50_USR = DTL.Day_7_Production_USR;

// DTL.Day 8 Production 5,0  USR = DTL.Day 8 Production USR
DTL.Day_8_Production_50_USR = DTL.Day_8_Production_USR;

// DTL.Day 1 Sched Shipm 5,0 USR = DTL.Day 1 Sched Shipments USR
DTL.Day_1_Sched_Shipm_50_USR = DTL.Day_1_Sched_Shipments_USR;

// DTL.Day 2 Sched Shipm 5,0 USR = DTL.Day 2 Sched Shipments USR
DTL.Day_2_Sched_Shipm_50_USR = DTL.Day_2_Sched_Shipments_USR;

// DTL.Day 3 Sched Shipm 5,0 USR = DTL.Day 3 Sched Shipments USR
DTL.Day_3_Sched_Shipm_50_USR = DTL.Day_3_Sched_Shipments_USR;

// DTL.Day 4 Sched Shipm 5,0 USR = DTL.Day 4 Sched Shipments USR
DTL.Day_4_Sched_Shipm_50_USR = DTL.Day_4_Sched_Shipments_USR;

// DTL.Day 5 Sched Shipm 5,0 USR = DTL.Day 5 Sched Shipments USR
DTL.Day_5_Sched_Shipm_50_USR = DTL.Day_5_Sched_Shipments_USR;

// DTL.Day 6 Sched Shipm 5,0 USR = DTL.Day 6 Sched Shipments USR
DTL.Day_6_Sched_Shipm_50_USR = DTL.Day_6_Sched_Shipments_USR;

// DTL.Day 7 Sched Shipm 5,0 USR = DTL.Day 7 Sched Shipments USR
DTL.Day_7_Sched_Shipm_50_USR = DTL.Day_7_Sched_Shipments_USR;

// DTL.Day 8 Sched Shipm 5,0 USR = DTL.Day 8 Sched Shipments USR
DTL.Day_8_Sched_Shipm_50_USR = DTL.Day_8_Sched_Shipments_USR;

// DTL.Day 1 Available Qty   USR = DTL.Day 1 Availability USR
DTL.Day_1_Available_Qty_USR = DTL.Day_1_Availability_USR;

// DTL.Day 2 Available Qty   USR = DTL.Day 2 Availability USR
DTL.Day_2_Available_Qty_USR = DTL.Day_2_Availability_USR;

// DTL.Day 3 Available Qty   USR = DTL.Day 3 Availability USR
DTL.Day_3_Available_Qty_USR = DTL.Day_3_Availability_USR;

// DTL.Day 4 Available Qty   USR = DTL.Day 4 Availability USR
DTL.Day_4_Available_Qty_USR = DTL.Day_4_Availability_USR;

// DTL.Day 5 Available Qty   USR = DTL.Day 5 Availability USR
DTL.Day_5_Available_Qty_USR = DTL.Day_5_Availability_USR;

// DTL.Day 6 Available Qty   USR = DTL.Day 6 Availability USR
DTL.Day_6_Available_Qty_USR = DTL.Day_6_Availability_USR;

// DTL.Day 7 Available Qty   USR = DTL.Day 7 Availability USR
DTL.Day_7_Available_Qty_USR = DTL.Day_7_Availability_USR;

// DTL.Day 8 Available Qty   USR = DTL.Day 8 Availability USR
DTL.Day_8_Available_Qty_USR = DTL.Day_8_Availability_USR;

// DTL.Day 1 Sales 5,0  USR = DTL.Day 1 Sales USR
DTL.Day_1_Sales_50_USR = DTL.Day_1_Sales_USR;

// DTL.Day 2 Sales 5,0  USR = DTL.Day 2 Sales USR
DTL.Day_2_Sales_50_USR = DTL.Day_2_Sales_USR;

// DTL.Day 3 Sales 5,0  USR = DTL.Day 3 Sales USR
DTL.Day_3_Sales_50_USR = DTL.Day_3_Sales_USR;

// DTL.Day 4 Sales 5,0  USR = DTL.Day 4 Sales USR
DTL.Day_4_Sales_50_USR = DTL.Day_4_Sales_USR;

// DTL.Day 5 Sales 5,0  USR = DTL.Day 5 Sales USR
DTL.Day_5_Sales_50_USR = DTL.Day_5_Sales_USR;

// DTL.Day 6 Sales 5,0  USR = DTL.Day 6 Sales USR
DTL.Day_6_Sales_50_USR = DTL.Day_6_Sales_USR;

// DTL.Day 7 Sales 5,0  USR = DTL.Day 7 Sales USR
DTL.Day_7_Sales_50_USR = DTL.Day_7_Sales_USR;

// DTL.Day 8 Sales 5,0  USR = DTL.Day 8 Sales USR
DTL.Day_8_Sales_50_USR = DTL.Day_8_Sales_USR;

ENDDO;

//?Calculate the Available Loads from the Available qty and unit weight
// day 1
DTL.Day_1_Available_Loads = ( DTL.Day_1_Available_Qty_USR * DTL.Unit_Weight )                      +
/ DTL.Load_Size_USR;

// Day 2
DTL.Day_2_Available_Loads = ( DTL.Day_2_Available_Qty_USR * DTL.Unit_Weight )                      +
/ DTL.Load_Size_USR;

// Day 3
DTL.Day_3_Available_Loads = ( DTL.Day_3_Available_Qty_USR * DTL.Unit_Weight )                      +
/ DTL.Load_Size_USR;

// Day 4
DTL.Day_4_Available_Loads = ( DTL.Day_4_Available_Qty_USR * DTL.Unit_Weight )                      +
/ DTL.Load_Size_USR;

// Day 5
DTL.Day_5_Available_Loads = ( DTL.Day_5_Available_Qty_USR * DTL.Unit_Weight )                      +
/ DTL.Load_Size_USR;

// Day 6
DTL.Day_6_Available_Loads = ( DTL.Day_6_Available_Qty_USR * DTL.Unit_Weight )                      +
/ DTL.Load_Size_USR;

// Day 7
DTL.Day_7_Available_Loads = ( DTL.Day_7_Available_Qty_USR * DTL.Unit_Weight )                      +
/ DTL.Load_Size_USR;

// Day 8 - TOTAL
DTL.Day_8_Available_Loads = ( ( ( ( ( DTL.Day_1_Available_Loads                                    +
+ DTL.Day_2_Available_Loads ) + DTL.Day_3_Available_Loads ) + DTL.Day_4_Available_Loads )         +
+ DTL.Day_5_Available_Loads ) + DTL.Day_6_Available_Loads ) + DTL.Day_7_Available_Loads;

//?USER: Validate detail screen

//?F4=PROMPT
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Warehouse Type USR
IF PGM.*Cursor_field = DTL.Warehouse_Type_USR;

// Call program SEL Warehouse Type-Int SR.
CALL PROGRAM(SEL Warehouse Type-Int SR) ('PDSNSRR');
PARAMETER(DTL.Warehouse_Type_USR);

// DTL.Warehouse Type = DTL.Warehouse Type USR
DTL.Warehouse_Type = DTL.Warehouse_Type_USR;

// IF PGM.*Cursor field <IS> DTL.Warehouse Code PASS   USR
IF PGM.*Cursor_field = DTL.Warehouse_Code_PASS_USR;

// Call program SEL Warehouse by Type  SR.
CALL PROGRAM(SEL Warehouse by Type  SR) ('PDZNSRR');
PARAMETER(DTL.Warehouse_Code_PASS_USR);
PARAMETER(DTL.Warehouse_Type_USR);

// DTL.Warehouse Code = DTL.Warehouse Code PASS   USR
DTL.Warehouse_Code = DTL.Warehouse_Code_PASS_USR;

ENDIF;

ENDIF;

//?validate warehouse code if entered
CASE;

// IF DTL.Warehouse Code PASS   USR is Warehouse Code not Blank
IF DTL.Warehouse_Code_PASS_USR <> *BLANK;

EXECUTE FUNCTION(Rtv Warehouse/type Val RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1469740;
PARAMETER(DTL.Warehouse_Code_PASS_USR);
PARAMETER(DTL.Warehouse_Type_USR);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 // PAR.Warehouse Type = DB1.Warehouse Type
 PAR.Warehouse_Type = DB1.Warehouse_Type;

 QUIT;

}


CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// Send error message - 'Warehouse &1 not valid for warehouse type &2'
ERROR(USR2494);
MSGPARM(DTL.Warehouse_Code_PASS_USR);
MSGPARM(DTL.Warehouse_Type_USR);

ENDIF;

ENDIF;

//?Reload subfile if warehouse or whse type change
CASE;

// IF DTL.Warehouse Type USR NE DTL.Warehouse Type
IF DTL.Warehouse_Type_USR <> DTL.Warehouse_Type;

// OR DTL.Warehouse Code PASS   USR NE DTL.Warehouse Code
OR DTL.Warehouse_Code_PASS_USR <> DTL.Warehouse_Code;

// DTL.Warehouse Type = DTL.Warehouse Type USR
DTL.Warehouse_Type = DTL.Warehouse_Type_USR;

// DTL.Warehouse Code = DTL.Warehouse Code PASS   USR
DTL.Warehouse_Code = DTL.Warehouse_Code_PASS_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process command keys

//?Refresh
CASE;

// IF DTL.*CMD key is *Refresh
IF DTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Display Item Orders
CASE;

// IF DTL.*CMD key is CF15
IF DTL.*CMD_key = '15';

// LCL.*Initial call = CND.*YES
LCL.*Initial_call = 'Y';

// Call program Zzz Item Orders       DF.
CALL PROGRAM(Zzz Item Orders       DF) ('PDO7DFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Avail_Ship_Date_1_USR);
PARAMETER(DTL.Name);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(LCL.*Initial_call);
PARAMETER(DTL.Warehouse_Type);

ENDIF;

//?F13=Toggle Unit Weight (Internal purpose only)
CASE;

// IF DTL.*CMD key is CF13
IF DTL.*CMD_key = '13';

CASE;

// IF WRK.Display Flag is No
IF WRK.Display_Flag = 'N';

// WRK.Display Flag = CND.Yes
WRK.Display_Flag = 'Y';

// IF WRK.Display Flag is Yes
IF WRK.Display_Flag = 'Y';

// WRK.Display Flag = CND.No
WRK.Display_Flag = 'N';

ENDIF;

ENDIF;

//?F07=Previous Week
CASE;

// IF DTL.*CMD key is CF07
IF DTL.*CMD_key = '07';

EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
PARAMETER(DTL.Avail_Ship_Date_1_USR);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Avail_Ship_Date_1_USR);
PARAMETER('-7');
{
 //?Execute internal function

 CASE;

 // IF PAR.*Duration (factor) is LT Zero
 IF PAR.*Duration_factor < *ZERO;

 // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
 WRK.*Duration_factor = PAR.*Duration_factor * -1;

 EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.*Date2_beginning);
 PARAMETER(PAR.*Date1_ending);
 PARAMETER(PAR.*Date2_beginning);
 PARAMETER(WRK.*Duration_factor);
 {
  //?USER: Initialize routine

  // WRK.Count USR = CON.*ZERO
  WRK.Count_USR = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
  IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Count USR = WRK.Count USR + CON.1
  WRK.Count_USR = WRK.Count_USR + 1;

  ENDIF;

  CASE;

  // IF WRK.Count USR EQ PAR.*Duration (factor)
  IF WRK.Count_USR = PAR.*Duration_factor;

  // PAR.*Date1 (ending) = DB1.Post to G/L Date
  PAR.*Date1_ending = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

 }

 // IF PAR.*Duration (factor) is GT Zero
 IF PAR.*Duration_factor > *ZERO;

 EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.*Date2_beginning);
 PARAMETER(PAR.*Date1_ending);
 PARAMETER(PAR.*Date2_beginning);
 PARAMETER(PAR.*Duration_factor);
 {
  //?USER: Initialize routine

  // WRK.Count USR = CON.*ZERO
  WRK.Count_USR = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
  IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Count USR = WRK.Count USR + CON.1
  WRK.Count_USR = WRK.Count_USR + 1;

  ENDIF;

  CASE;

  // IF WRK.Count USR EQ PAR.*Duration (factor)
  IF WRK.Count_USR = PAR.*Duration_factor;

  // PAR.*Date1 (ending) = DB1.Post to G/L Date
  PAR.*Date1_ending = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

 }

 // IF PAR.*Duration (factor) is EQ Zero
 IF PAR.*Duration_factor = *ZERO;

 // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
 PAR.*Date1_ending = PAR.*Date2_beginning;

 ENDIF;

}


ENDIF;

//?F08=Next Week
CASE;

// IF DTL.*CMD key is CF08
IF DTL.*CMD_key = '08';

EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
PARAMETER(DTL.Avail_Ship_Date_1_USR);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Avail_Ship_Date_1_USR);
PARAMETER(7);
{
 //?Execute internal function

 CASE;

 // IF PAR.*Duration (factor) is LT Zero
 IF PAR.*Duration_factor < *ZERO;

 // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
 WRK.*Duration_factor = PAR.*Duration_factor * -1;

 EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.*Date2_beginning);
 PARAMETER(PAR.*Date1_ending);
 PARAMETER(PAR.*Date2_beginning);
 PARAMETER(WRK.*Duration_factor);
 {
  //?USER: Initialize routine

  // WRK.Count USR = CON.*ZERO
  WRK.Count_USR = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
  IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Count USR = WRK.Count USR + CON.1
  WRK.Count_USR = WRK.Count_USR + 1;

  ENDIF;

  CASE;

  // IF WRK.Count USR EQ PAR.*Duration (factor)
  IF WRK.Count_USR = PAR.*Duration_factor;

  // PAR.*Date1 (ending) = DB1.Post to G/L Date
  PAR.*Date1_ending = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

 }

 // IF PAR.*Duration (factor) is GT Zero
 IF PAR.*Duration_factor > *ZERO;

 EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.*Date2_beginning);
 PARAMETER(PAR.*Date1_ending);
 PARAMETER(PAR.*Date2_beginning);
 PARAMETER(PAR.*Duration_factor);
 {
  //?USER: Initialize routine

  // WRK.Count USR = CON.*ZERO
  WRK.Count_USR = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
  IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Count USR = WRK.Count USR + CON.1
  WRK.Count_USR = WRK.Count_USR + 1;

  ENDIF;

  CASE;

  // IF WRK.Count USR EQ PAR.*Duration (factor)
  IF WRK.Count_USR = PAR.*Duration_factor;

  // PAR.*Date1 (ending) = DB1.Post to G/L Date
  PAR.*Date1_ending = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

 }

 // IF PAR.*Duration (factor) is EQ Zero
 IF PAR.*Duration_factor = *ZERO;

 // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
 PAR.*Date1_ending = PAR.*Date2_beginning;

 ENDIF;

}


ENDIF;

//?F09=Dsp Item/Whs Inq
CASE;

// IF DTL.*CMD key is CF09
IF DTL.*CMD_key = '09';

CASE;

// IF DTL.Warehouse Code PASS   USR is Warehouse Code Blank
IF DTL.Warehouse_Code_PASS_USR = *BLANK;

// Send error message - 'Warehouse Code is required.'
ERROR(USR2015);
MSGPARM(DTL.Warehouse_Code_PASS_USR);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Lot Tracking Flag RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1506123;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(LCL.Lot_Tracking_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.*Initial call = CND.*YES
LCL.*Initial_call = 'Y';

CASE;

// IF LCL.Lot Tracking Flag is yes
IF LCL.Lot_Tracking_Flag = 'Y';

// Call program Dsp Item Lot Locs     DF.
CALL PROGRAM(Dsp Item Lot Locs     DF) ('PDH2DFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(*ZERO);
PARAMETER(LCL.*Initial_call);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Dsp Item/Whse Inqy Dtl DF.
CALL PROGRAM(Dsp Item/Whse Inqy Dtl DF) ('ICQ9DFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(WRK.Item_Description);
PARAMETER(DTL.UOM_Primary);
PARAMETER(DTL.Conversion_Factor_1);
PARAMETER(DTL.Operation_Factor_1);
PARAMETER(DTL.UOM_Second);
PARAMETER(DTL.Conversion_Factor_2);
PARAMETER(DTL.Operation_Factor_2);
PARAMETER(DTL.UOM_Third);
PARAMETER(DTL.Unit_Weight);
PARAMETER(DTL.Production_Date_Control);
PARAMETER(DTL.Catch_Weight_Status);
PARAMETER(DTL.Warehouse_Code_PASS_USR);
PARAMETER(DTL.Warehouse_Description);
PARAMETER(DTL.Name);
PARAMETER(LCL.*Initial_call);

ENDIF;

ENDIF;

ENDIF;

//?F10=Work With Inventory Allocation
CASE;

// IF DTL.*CMD key is CF10
IF DTL.*CMD_key = '10';

// Call program WW Inv Allocation     DF.
CALL PROGRAM(WW Inv Allocation     DF) ('POP5DFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(*ZERO);

ENDIF;

//?F11=Work With Order Production Schedule
CASE;

// IF DTL.*CMD key is CF11
IF DTL.*CMD_key = '11';

CASE;

// IF DTL.Base/Conv/Loss Item is Base
IF DTL.Base_Conv_Loss_Item = 'B';

// LCL.Component Item Code = DTL.Item Code
LCL.Component_Item_Code = DTL.Item_Code;

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Rtv First Consumed Itm XF.
CALL PROGRAM(Rtv First Consumed Itm XF) ('POP1XFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(LCL.Component_Item_Code);

ENDIF;

// Call program WW OrdPrdSch Edit     DF.
CALL PROGRAM(WW OrdPrdSch Edit     DF) ('POQJDFR');
PARAMETER(LCL.Component_Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Item_Code);
PARAMETER(*BLANK);

ENDIF;

EXECUTE FUNCTION(Rtv Ats ShpDte-21     RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1344969;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Avail_Ship_Date_1_USR);
PARAMETER(DTL.Avail_Ship_Date_1_USR);
PARAMETER(DTL.Avail_Ship_Date_2_USR);
PARAMETER(DTL.Avail_Ship_Date_3_USR);
PARAMETER(DTL.Avail_Ship_Date_4_USR);
PARAMETER(DTL.Avail_Ship_Date_5_USR);
PARAMETER(DTL.Avail_Ship_Date_6_USR);
PARAMETER(DTL.Avail_Ship_Date_7_USR);
PARAMETER(NLL.USR_Day_8);
PARAMETER(NLL.USR_Day_9);
PARAMETER(NLL.USR_Day_10);
PARAMETER(NLL.USR_Day_11);
PARAMETER(NLL.USR_Day_12);
PARAMETER(NLL.USR_Day_13);
PARAMETER(NLL.USR_Day_14);
PARAMETER(NLL.USR_Day_15);
PARAMETER(NLL.USR_Day_16);
PARAMETER(NLL.USR_Day_17);
PARAMETER(NLL.USR_Day_18);
PARAMETER(NLL.USR_Day_19);
PARAMETER(NLL.USR_Day_20);
PARAMETER(NLL.USR_Day_21);
{
 //?USER: Initialize routine

 // WRK.Count USR = CON.1
 WRK.Count_USR = 1;

 //?USER: Process Data record

 //?DOC: Change log
 DO;

 //?04/10/07 Effective 04/23/07 representation of Age Code changes
 //?         will be such that Age Code A will be 0 day for boxes
 //?         and combos.  The labels on the cartons will not print
 //?         a date that is offset by Sunday or Holiday.  Instead of
 //?         Code Date, it will be the Pack Date.
 ENDDO;

 CASE;

 // IF WRK.Count USR is GT 21
 IF WRK.Count_USR > 21;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?04/11/07 PKD Sunday will now be included.
 //?Move Date
 CASE;

 // IF WRK.Count USR is One
 IF WRK.Count_USR = 1;

 // PAR.USR Day 1 = DB1.Plant Date of Last Order
 PAR.USR_Day_1 = DB1.Post_to_G_L_Date;

 // WRK.Condition Desc. 1  USR = Condition name of DB1.Day of Week
 WRK.Condition_Desc_1_USR = RTVCND(DB1.Day_of_Week);

 //?Move Date
 // IF WRK.Count USR is Two
 IF WRK.Count_USR = 2;

 // PAR.USR Day 2 = DB1.Plant Date of Last Order
 PAR.USR_Day_2 = DB1.Post_to_G_L_Date;

 // WRK.Condition Desc. 2  USR = Condition name of DB1.Day of Week
 WRK.Condition_Desc_2_USR = RTVCND(DB1.Day_of_Week);

 //?Move Date
 // IF WRK.Count USR is Three
 IF WRK.Count_USR = 3;

 // PAR.USR Day 3 = DB1.Plant Date of Last Order
 PAR.USR_Day_3 = DB1.Post_to_G_L_Date;

 // WRK.Condition Desc. 3  USR = Condition name of DB1.Day of Week
 WRK.Condition_Desc_3_USR = RTVCND(DB1.Day_of_Week);

 //?Move Date
 // IF WRK.Count USR is Four
 IF WRK.Count_USR = 4;

 // PAR.USR Day 4 = DB1.Plant Date of Last Order
 PAR.USR_Day_4 = DB1.Post_to_G_L_Date;

 // WRK.Condition Desc. 4  USR = Condition name of DB1.Day of Week
 WRK.Condition_Desc_4_USR = RTVCND(DB1.Day_of_Week);

 //?Move Date
 // IF WRK.Count USR is Five
 IF WRK.Count_USR = 5;

 // PAR.USR Day 5 = DB1.Plant Date of Last Order
 PAR.USR_Day_5 = DB1.Post_to_G_L_Date;

 // WRK.Condition Desc. 5  USR = Condition name of DB1.Day of Week
 WRK.Condition_Desc_5_USR = RTVCND(DB1.Day_of_Week);

 //?Move Date
 // IF WRK.Count USR is Six
 IF WRK.Count_USR = 6;

 // PAR.USR Day 6 = DB1.Plant Date of Last Order
 PAR.USR_Day_6 = DB1.Post_to_G_L_Date;

 // WRK.Condition Desc. 6  USR = Condition name of DB1.Day of Week
 WRK.Condition_Desc_6_USR = RTVCND(DB1.Day_of_Week);

 //?Move Date
 // IF WRK.Count USR is Seven
 IF WRK.Count_USR = 7;

 // PAR.USR Day 7 = DB1.Plant Date of Last Order
 PAR.USR_Day_7 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Eight
 IF WRK.Count_USR = 8;

 // PAR.USR Day 8 = DB1.Plant Date of Last Order
 PAR.USR_Day_8 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Nine
 IF WRK.Count_USR = 9;

 // PAR.USR Day 9 = DB1.Plant Date of Last Order
 PAR.USR_Day_9 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Ten
 IF WRK.Count_USR = 10;

 // PAR.USR Day 10 = DB1.Plant Date of Last Order
 PAR.USR_Day_10 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Eleven
 IF WRK.Count_USR = 11;

 // PAR.USR Day 11 = DB1.Plant Date of Last Order
 PAR.USR_Day_11 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Twelve
 IF WRK.Count_USR = 12;

 // PAR.USR Day 12 = DB1.Plant Date of Last Order
 PAR.USR_Day_12 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Thirteen
 IF WRK.Count_USR = 13;

 // PAR.USR Day 13 = DB1.Plant Date of Last Order
 PAR.USR_Day_13 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Fourteen
 IF WRK.Count_USR = 14;

 // PAR.USR Day 14 = DB1.Plant Date of Last Order
 PAR.USR_Day_14 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Fifteen
 IF WRK.Count_USR = 15;

 // PAR.USR Day 15 = DB1.Plant Date of Last Order
 PAR.USR_Day_15 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Sixteen
 IF WRK.Count_USR = 16;

 // PAR.USR Day 16 = DB1.Plant Date of Last Order
 PAR.USR_Day_16 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Seventeen
 IF WRK.Count_USR = 17;

 // PAR.USR Day 17 = DB1.Plant Date of Last Order
 PAR.USR_Day_17 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Eighteen
 IF WRK.Count_USR = 18;

 // PAR.USR Day 18 = DB1.Plant Date of Last Order
 PAR.USR_Day_18 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Nineteen
 IF WRK.Count_USR = 19;

 // PAR.USR Day 19 = DB1.Plant Date of Last Order
 PAR.USR_Day_19 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Twenty
 IF WRK.Count_USR = 20;

 // PAR.USR Day 20 = DB1.Plant Date of Last Order
 PAR.USR_Day_20 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Twenty One
 IF WRK.Count_USR = 21;

 // PAR.USR Day 21 = DB1.Plant Date of Last Order
 PAR.USR_Day_21 = DB1.Post_to_G_L_Date;

 ENDIF;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Whs Typ/FZNCHLTME IF) TYPE(EXCINTFUN)                      AC1423925;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(WRK.Warehouse_Type);
PARAMETER(DTL.Fresh_Chilling_Time);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Warehouse Type is Frozen
 IF PAR.Warehouse_Type = 'FZ';

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(PAR.Company_Number);
 PARAMETER('FZNCHLTME');
 PARAMETER(PAR.System_Value_Numeric);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.Fresh Chilling Time = PAR.System Value Numeric
 PAR.Fresh_Chilling_Time = PAR.System_Value_Numeric;

 ENDIF;

}


EXECUTE FUNCTION(Rtv PA Dtl SD-6 - ALL RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1646136;
PARAMETER(DTL.Warehouse_Type_USR);
PARAMETER(DTL.Warehouse_Code_PASS_USR);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Avail_Ship_Date_1_USR);
PARAMETER(DTL.Avail_Ship_Date_1_USR);
PARAMETER(DTL.Avail_Ship_Date_2_USR);
PARAMETER(DTL.Avail_Ship_Date_3_USR);
PARAMETER(DTL.Avail_Ship_Date_4_USR);
PARAMETER(DTL.Avail_Ship_Date_5_USR);
PARAMETER(DTL.Avail_Ship_Date_6_USR);
PARAMETER(DTL.Avail_Ship_Date_7_USR);
PARAMETER(DTL.USR_Day_1);
PARAMETER(DTL.USR_Day_2);
PARAMETER(DTL.USR_Day_3);
PARAMETER(DTL.USR_Day_4);
PARAMETER(DTL.USR_Day_5);
PARAMETER(DTL.USR_Day_6);
PARAMETER(DTL.USR_Day_7);
PARAMETER(DTL.Primary_Load_Sts_USR);
PARAMETER(DTL.Load_Size_USR);
PARAMETER('D');
PARAMETER(DTL.Day_1_Inventory_USR);
PARAMETER(DTL.Day_2_Inventory_USR);
PARAMETER(DTL.Day_3_Inventory_USR);
PARAMETER(DTL.Day_4_Inventory_USR);
PARAMETER(DTL.Day_5_Inventory_USR);
PARAMETER(DTL.Day_6_Inventory_USR);
PARAMETER(DTL.Day_7_Inventory_USR);
PARAMETER(DTL.Day_8_Inventory_USR);
PARAMETER(DTL.Day_1_Production_USR);
PARAMETER(DTL.Day_2_Production_USR);
PARAMETER(DTL.Day_3_Production_USR);
PARAMETER(DTL.Day_4_Production_USR);
PARAMETER(DTL.Day_5_Production_USR);
PARAMETER(DTL.Day_6_Production_USR);
PARAMETER(DTL.Day_7_Production_USR);
PARAMETER(DTL.Day_8_Production_USR);
PARAMETER(DTL.Day_1_Sched_Shipments_USR);
PARAMETER(DTL.Day_2_Sched_Shipments_USR);
PARAMETER(DTL.Day_3_Sched_Shipments_USR);
PARAMETER(DTL.Day_4_Sched_Shipments_USR);
PARAMETER(DTL.Day_5_Sched_Shipments_USR);
PARAMETER(DTL.Day_6_Sched_Shipments_USR);
PARAMETER(DTL.Day_7_Sched_Shipments_USR);
PARAMETER(DTL.Day_8_Sched_Shipments_USR);
PARAMETER(DTL.Day_1_Sales_USR);
PARAMETER(DTL.Day_2_Sales_USR);
PARAMETER(DTL.Day_3_Sales_USR);
PARAMETER(DTL.Day_4_Sales_USR);
PARAMETER(DTL.Day_5_Sales_USR);
PARAMETER(DTL.Day_6_Sales_USR);
PARAMETER(DTL.Day_7_Sales_USR);
PARAMETER(DTL.Day_8_Sales_USR);
PARAMETER(DTL.Day_1_Adjustments_USR);
PARAMETER(DTL.Day_2_Adjustments_USR);
PARAMETER(DTL.Day_3_Adjustments_USR);
PARAMETER(DTL.Day_4_Adjustments_USR);
PARAMETER(DTL.Day_5_Adjustments_USR);
PARAMETER(DTL.Day_6_Adjustments_USR);
PARAMETER(DTL.Day_7_Adjustments_USR);
PARAMETER(DTL.Day_8_Adjustments_USR);
PARAMETER(DTL.Day_1_Availability_USR);
PARAMETER(DTL.Day_2_Availability_USR);
PARAMETER(DTL.Day_3_Availability_USR);
PARAMETER(DTL.Day_4_Availability_USR);
PARAMETER(DTL.Day_5_Availability_USR);
PARAMETER(DTL.Day_6_Availability_USR);
PARAMETER(DTL.Day_7_Availability_USR);
PARAMETER(DTL.Day_8_Availability_USR);
PARAMETER(DTL.UOM_Primary);
PARAMETER(DTL.Unit_Weight);
PARAMETER(DTL.Fresh_Chilling_Time);
PARAMETER(DTL.Piece_Count_Item);
PARAMETER(DTL.Pieces_Per_Bag);
PARAMETER(DTL.Bags_Per_Unit);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF PAR.Warehouse Type is Equal blank
 IF PAR.Warehouse_Type = *BLANK;

 // OR PAR.Warehouse Type is *ALL values
 OR ( PAR.Warehouse_Type = 'FZ'/'FR'/*BLANK/'BL';

 // AND PAR.Warehouse Type EQ DB1.Warehouse Type
 AND PAR.Warehouse_Type = DB1.Warehouse_Type );

 CASE;

 // IF PAR.Warehouse Code is Warehouse Code Blank
 IF PAR.Warehouse_Code = *BLANK;

 EXECUTE FUNCTION(Rtv PA Dtl SD-6       IF) TYPE(EXCINTFUN)                      AC1646139;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.PS_Available_Ship_Date);
 PARAMETER(PAR.Avail_Ship_Date_1_USR);
 PARAMETER(PAR.Avail_Ship_Date_2_USR);
 PARAMETER(PAR.Avail_Ship_Date_3_USR);
 PARAMETER(PAR.Avail_Ship_Date_4_USR);
 PARAMETER(PAR.Avail_Ship_Date_5_USR);
 PARAMETER(PAR.Avail_Ship_Date_6_USR);
 PARAMETER(PAR.Avail_Ship_Date_7_USR);
 PARAMETER(PAR.USR_Day_1);
 PARAMETER(PAR.USR_Day_2);
 PARAMETER(PAR.USR_Day_3);
 PARAMETER(PAR.USR_Day_4);
 PARAMETER(PAR.USR_Day_5);
 PARAMETER(PAR.USR_Day_6);
 PARAMETER(PAR.USR_Day_7);
 PARAMETER(PAR.Day_1_Inventory_USR);
 PARAMETER(PAR.Day_2_Inventory_USR);
 PARAMETER(PAR.Day_3_Inventory_USR);
 PARAMETER(PAR.Day_4_Inventory_USR);
 PARAMETER(PAR.Day_5_Inventory_USR);
 PARAMETER(PAR.Day_6_Inventory_USR);
 PARAMETER(PAR.Day_7_Inventory_USR);
 PARAMETER(PAR.Day_8_Inventory_USR);
 PARAMETER(PAR.Day_1_Production_USR);
 PARAMETER(PAR.Day_2_Production_USR);
 PARAMETER(PAR.Day_3_Production_USR);
 PARAMETER(PAR.Day_4_Production_USR);
 PARAMETER(PAR.Day_5_Production_USR);
 PARAMETER(PAR.Day_6_Production_USR);
 PARAMETER(PAR.Day_7_Production_USR);
 PARAMETER(PAR.Day_8_Production_USR);
 PARAMETER(PAR.Day_1_Sales_USR);
 PARAMETER(PAR.Day_2_Sales_USR);
 PARAMETER(PAR.Day_3_Sales_USR);
 PARAMETER(PAR.Day_4_Sales_USR);
 PARAMETER(PAR.Day_5_Sales_USR);
 PARAMETER(PAR.Day_6_Sales_USR);
 PARAMETER(PAR.Day_7_Sales_USR);
 PARAMETER(PAR.Day_8_Sales_USR);
 PARAMETER(PAR.Day_1_Adjustments_USR);
 PARAMETER(PAR.Day_2_Adjustments_USR);
 PARAMETER(PAR.Day_3_Adjustments_USR);
 PARAMETER(PAR.Day_4_Adjustments_USR);
 PARAMETER(PAR.Day_5_Adjustments_USR);
 PARAMETER(PAR.Day_6_Adjustments_USR);
 PARAMETER(PAR.Day_7_Adjustments_USR);
 PARAMETER(PAR.Day_8_Adjustments_USR);
 PARAMETER(PAR.Day_1_Availability_USR);
 PARAMETER(PAR.Day_2_Availability_USR);
 PARAMETER(PAR.Day_3_Availability_USR);
 PARAMETER(PAR.Day_4_Availability_USR);
 PARAMETER(PAR.Day_5_Availability_USR);
 PARAMETER(PAR.Day_6_Availability_USR);
 PARAMETER(PAR.Day_7_Availability_USR);
 PARAMETER(PAR.Day_8_Availability_USR);
 PARAMETER(PAR.Primary_Load_Sts_USR);
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Day_1_Sched_Shipments_USR);
 PARAMETER(PAR.Day_2_Sched_Shipments_USR);
 PARAMETER(PAR.Day_3_Sched_Shipments_USR);
 PARAMETER(PAR.Day_4_Sched_Shipments_USR);
 PARAMETER(PAR.Day_5_Sched_Shipments_USR);
 PARAMETER(PAR.Day_6_Sched_Shipments_USR);
 PARAMETER(PAR.Day_7_Sched_Shipments_USR);
 PARAMETER(PAR.Day_8_Sched_Shipments_USR);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv PA In/Sh SD-6     IF) TYPE(EXCINTFUN)                      AC1388774;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.Day_1_Inventory_USR);
  PARAMETER(PAR.Day_2_Inventory_USR);
  PARAMETER(PAR.Day_3_Inventory_USR);
  PARAMETER(PAR.Day_4_Inventory_USR);
  PARAMETER(PAR.Day_5_Inventory_USR);
  PARAMETER(PAR.Day_6_Inventory_USR);
  PARAMETER(PAR.Day_7_Inventory_USR);
  PARAMETER(PAR.Day_8_Inventory_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_1_Adjustments_USR);
  PARAMETER(PAR.Day_2_Adjustments_USR);
  PARAMETER(PAR.Day_3_Adjustments_USR);
  PARAMETER(PAR.Day_4_Adjustments_USR);
  PARAMETER(PAR.Day_5_Adjustments_USR);
  PARAMETER(PAR.Day_6_Adjustments_USR);
  PARAMETER(PAR.Day_7_Adjustments_USR);
  PARAMETER(PAR.Day_1_Availability_USR);
  PARAMETER(PAR.Day_2_Availability_USR);
  PARAMETER(PAR.Day_3_Availability_USR);
  PARAMETER(PAR.Day_4_Availability_USR);
  PARAMETER(PAR.Day_5_Availability_USR);
  PARAMETER(PAR.Day_6_Availability_USR);
  PARAMETER(PAR.Day_7_Availability_USR);
  PARAMETER(PAR.Primary_Load_Sts_USR);
  PARAMETER(PAR.Load_Size_USR);
  PARAMETER(PAR.Day_1_Sched_Shipments_USR);
  PARAMETER(PAR.Day_2_Sched_Shipments_USR);
  PARAMETER(PAR.Day_3_Sched_Shipments_USR);
  PARAMETER(PAR.Day_4_Sched_Shipments_USR);
  PARAMETER(PAR.Day_5_Sched_Shipments_USR);
  PARAMETER(PAR.Day_6_Sched_Shipments_USR);
  PARAMETER(PAR.Day_7_Sched_Shipments_USR);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
  {
   //?Execute internal function

   //?Retrieve Inventory and Scheduled Shipments
   EXECUTE FUNCTION(Rtv PA In/Sh SD-6 WHS RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1376865;
   PARAMETER(PAR.Company_Number);
   PARAMETER('S');
   PARAMETER(JOB.*Job_date);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Inventory / Sales if Chilling Time > 0
   CASE;

   // IF PAR.Primary/Load Sts USR is Primary
   IF PAR.Primary_Load_Sts_USR = 'P';

   // AND PAR.Unit Weight is Greater than zero
   AND ( PAR.Unit_Weight > *ZERO;

   // OR PAR.Piece Count Item is yes
   OR PAR.Piece_Count_Item = 'Y' );

   //?Calculate Quantity based on Unit Weight or Pieces
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_1_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 2 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_2_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 3 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_3_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 4 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_4_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 5 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_5_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 6 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_6_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 7 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_7_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   ENDIF;

   //?Inventory / Sales if Chilling Time > 0
   // IF PAR.Primary/Load Sts USR is Load Size
   IF PAR.Primary_Load_Sts_USR = 'L';

   // AND PAR.Load Size USR is GT Zero
   AND PAR.Load_Size_USR > *ZERO;

   //?Calculate Quantity based on Load Size
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_1_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 2 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_2_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 3 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_3_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 4 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_4_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 5 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_5_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 6 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_6_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 7 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_7_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   ENDIF;

   ENDIF;

   //?Total Inventory
   CASE;

   // IF PAR.Avail Dsp/Prt Type USR is Display
   IF PAR.Avail_Dsp_Prt_Type_USR = 'D'/'T';

   // Total Inventory
   PAR.Day_8_Inventory_USR = ( ( ( ( ( PAR.Day_1_Inventory_USR + PAR.Day_2_Inventory_USR )
   + PAR.Day_3_Inventory_USR ) + PAR.Day_4_Inventory_USR ) + PAR.Day_5_Inventory_USR )
   + PAR.Day_6_Inventory_USR ) + PAR.Day_7_Inventory_USR;

   ENDIF;

  }

  EXECUTE FUNCTION(Rtv PA Dtl SD-6 WHS   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1646149;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.USR_Day_1);
  PARAMETER(PAR.USR_Day_2);
  PARAMETER(PAR.USR_Day_3);
  PARAMETER(PAR.USR_Day_4);
  PARAMETER(PAR.USR_Day_5);
  PARAMETER(PAR.USR_Day_6);
  PARAMETER(PAR.USR_Day_7);
  PARAMETER(PAR.Day_1_Inventory_USR);
  PARAMETER(PAR.Day_2_Inventory_USR);
  PARAMETER(PAR.Day_3_Inventory_USR);
  PARAMETER(PAR.Day_4_Inventory_USR);
  PARAMETER(PAR.Day_5_Inventory_USR);
  PARAMETER(PAR.Day_6_Inventory_USR);
  PARAMETER(PAR.Day_7_Inventory_USR);
  PARAMETER(PAR.Day_1_Production_USR);
  PARAMETER(PAR.Day_2_Production_USR);
  PARAMETER(PAR.Day_3_Production_USR);
  PARAMETER(PAR.Day_4_Production_USR);
  PARAMETER(PAR.Day_5_Production_USR);
  PARAMETER(PAR.Day_6_Production_USR);
  PARAMETER(PAR.Day_7_Production_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_1_Adjustments_USR);
  PARAMETER(PAR.Day_2_Adjustments_USR);
  PARAMETER(PAR.Day_3_Adjustments_USR);
  PARAMETER(PAR.Day_4_Adjustments_USR);
  PARAMETER(PAR.Day_5_Adjustments_USR);
  PARAMETER(PAR.Day_6_Adjustments_USR);
  PARAMETER(PAR.Day_7_Adjustments_USR);
  PARAMETER(PAR.Day_1_Availability_USR);
  PARAMETER(PAR.Day_2_Availability_USR);
  PARAMETER(PAR.Day_3_Availability_USR);
  PARAMETER(PAR.Day_4_Availability_USR);
  PARAMETER(PAR.Day_5_Availability_USR);
  PARAMETER(PAR.Day_6_Availability_USR);
  PARAMETER(PAR.Day_7_Availability_USR);
  PARAMETER(PAR.Primary_Load_Sts_USR);
  PARAMETER(PAR.Load_Size_USR);
  PARAMETER(PAR.Day_1_Sched_Shipments_USR);
  PARAMETER(PAR.Day_2_Sched_Shipments_USR);
  PARAMETER(PAR.Day_3_Sched_Shipments_USR);
  PARAMETER(PAR.Day_4_Sched_Shipments_USR);
  PARAMETER(PAR.Day_5_Sched_Shipments_USR);
  PARAMETER(PAR.Day_6_Sched_Shipments_USR);
  PARAMETER(PAR.Day_7_Sched_Shipments_USR);
  PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  {
   //?USER: Initialize routine

   // PAR.Status Flag 1  Y/N = CND.No
   PAR.Status_Flag_1_Y_N = 'N';

   // PAR.Status Flag 2  Y/N = CND.No
   PAR.Status_Flag_2_Y_N = 'N';

   // PAR.Status Flag 3  Y/N = CND.No
   PAR.Status_Flag_3_Y_N = 'N';

   // PAR.Status Flag 4  Y/N = CND.no
   PAR.Status_Flag_4_Y_N = 'N';

   // PAR.Status Flag 5  Y/N = CND.No
   PAR.Status_Flag_5_Y_N = 'N';

   // PAR.Status Flag 6  Y/N = CND.No
   PAR.Status_Flag_6_Y_N = 'N';

   // PAR.Status Flag 7  Y/N = CND.No
   PAR.Status_Flag_7_Y_N = 'N';

   //?USER: Process Data record

   //?Quit:  Available Ship Date > Day 7
   CASE;

   // IF DB1.PS Available Ship Date GT PAR.Avail Ship Date 7 USR
   IF DB1.PS_Available_Ship_Date > PAR.Avail_Ship_Date_7_USR;

   EXECUTE FUNCTION(Rtv PA Ship Only-21  IF) TYPE(EXCINTFUN)                       AC1815983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Primary_Load_Sts_USR);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(PAR.Status_Flag_1_Y_N);
   PARAMETER(PAR.Status_Flag_2_Y_N);
   PARAMETER(PAR.Status_Flag_3_Y_N);
   PARAMETER(PAR.Status_Flag_4_Y_N);
   PARAMETER(PAR.Status_Flag_5_Y_N);
   PARAMETER(PAR.Status_Flag_6_Y_N);
   PARAMETER(PAR.Status_Flag_7_Y_N);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   {
    //?Execute internal function

    //?02/21/11 PKD Do not need to Override Weight for Piece Count Items.
    // PAR.Ord/Sch Sts USR = CND.Scheduled
    PAR.Ord_Sch_Sts_USR = 'S';

    //?day 1
    CASE;

    // IF PAR.Avail Ship Date 1 USR is Entered
    IF PAR.Avail_Ship_Date_1_USR <> *ZERO;

    // AND PAR.Status Flag 1  Y/N is No
    AND PAR.Status_Flag_1_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_1_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 1
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 1 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_1_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 1
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 2
    CASE;

    // IF PAR.Avail Ship Date 2 USR is Entered
    IF PAR.Avail_Ship_Date_2_USR <> *ZERO;

    // AND PAR.Status Flag 2  Y/N is No
    AND PAR.Status_Flag_2_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_2_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 2
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 2 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_2_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 2
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 3
    CASE;

    // IF PAR.Avail Ship Date 3 USR is Entered
    IF PAR.Avail_Ship_Date_3_USR <> *ZERO;

    // AND PAR.Status Flag 3  Y/N is No
    AND PAR.Status_Flag_3_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_3_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 3
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 3 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_3_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 3
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 4
    CASE;

    // IF PAR.Avail Ship Date 4 USR is Entered
    IF PAR.Avail_Ship_Date_4_USR <> *ZERO;

    // AND PAR.Status Flag 4  Y/N is no
    AND PAR.Status_Flag_4_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_4_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 4
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 4 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_4_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 4
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 5
    CASE;

    // IF PAR.Avail Ship Date 5 USR is Entered
    IF PAR.Avail_Ship_Date_5_USR <> *ZERO;

    // AND PAR.Status Flag 5  Y/N is No
    AND PAR.Status_Flag_5_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_5_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 5
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 5 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_5_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 5
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 6
    CASE;

    // IF PAR.Avail Ship Date 6 USR is Entered
    IF PAR.Avail_Ship_Date_6_USR <> *ZERO;

    // AND PAR.Status Flag 6  Y/N is No
    AND PAR.Status_Flag_6_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_6_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 6
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 6 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_6_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 6
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 7
    CASE;

    // IF PAR.Avail Ship Date 7 USR is Entered
    IF PAR.Avail_Ship_Date_7_USR <> *ZERO;

    // AND PAR.Status Flag 7  Y/N is No
    AND PAR.Status_Flag_7_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_7_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 7
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 7 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_7_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 7
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 8
    CASE;

    // IF PAR.Avail Ship Date 8 USR is Entered
    IF PAR.Avail_Ship_Date_8_USR <> *ZERO;

    // AND PAR.Status Flag 8  Y/N is No
    AND PAR.Status_Flag_8_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_8_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 8
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 8 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_8_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 8
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 9
    CASE;

    // IF PAR.Avail Ship Date 9 USR is Entered
    IF PAR.Avail_Ship_Date_9_USR <> *ZERO;

    // AND PAR.Status Flag 9  Y/N is No
    AND PAR.Status_Flag_9_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_9_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 9
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 9 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_9_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 9
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 10
    CASE;

    // IF PAR.Avail Ship Date 10 USR is Entered
    IF PAR.Avail_Ship_Date_10_USR <> *ZERO;

    // AND PAR.Status Flag 10 Y/N is No
    AND PAR.Status_Flag_10_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_10_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 10
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 10 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_10_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 10
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 11
    CASE;

    // IF PAR.Avail Ship Date 11 USR is Entered
    IF PAR.Avail_Ship_Date_11_USR <> *ZERO;

    // AND PAR.Status Flag 11 Y/N is No
    AND PAR.Status_Flag_11_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_11_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 11
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 11 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_11_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 11
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 12
    CASE;

    // IF PAR.Avail Ship Date 12 USR is Entered
    IF PAR.Avail_Ship_Date_12_USR <> *ZERO;

    // AND PAR.Status Flag 12 Y/N is No
    AND PAR.Status_Flag_12_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_12_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 12
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 12 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_12_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 12
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 13
    CASE;

    // IF PAR.Avail Ship Date 13 USR is Entered
    IF PAR.Avail_Ship_Date_13_USR <> *ZERO;

    // AND PAR.Status Flag 13 Y/N is No
    AND PAR.Status_Flag_13_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_13_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 13
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 13 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_13_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 13
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 14
    CASE;

    // IF PAR.Avail Ship Date 14 USR is Entered
    IF PAR.Avail_Ship_Date_14_USR <> *ZERO;

    // AND PAR.Status Flag 14 Y/N is No
    AND PAR.Status_Flag_14_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_14_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 14
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 14 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_14_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 14
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 15
    CASE;

    // IF PAR.Avail Ship Date 15 USR is Entered
    IF PAR.Avail_Ship_Date_15_USR <> *ZERO;

    // AND PAR.Status Flag 15 Y/N is No
    AND PAR.Status_Flag_15_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_15_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 15
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 15 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_15_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 15
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 16
    CASE;

    // IF PAR.Avail Ship Date 16 USR is Entered
    IF PAR.Avail_Ship_Date_16_USR <> *ZERO;

    // AND PAR.Status Flag 16 Y/N is No
    AND PAR.Status_Flag_16_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_16_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 16
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 16 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_16_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 16
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 17
    CASE;

    // IF PAR.Avail Ship Date 17 USR is Entered
    IF PAR.Avail_Ship_Date_17_USR <> *ZERO;

    // AND PAR.Status Flag 17 Y/N is No
    AND PAR.Status_Flag_17_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_17_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 17
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 17 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_17_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 17
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 18
    CASE;

    // IF PAR.Avail Ship Date 18 USR is Entered
    IF PAR.Avail_Ship_Date_18_USR <> *ZERO;

    // AND PAR.Status Flag 18 Y/N is No
    AND PAR.Status_Flag_18_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_18_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 18
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 18 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_18_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 18
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 19
    CASE;

    // IF PAR.Avail Ship Date 19 USR is Entered
    IF PAR.Avail_Ship_Date_19_USR <> *ZERO;

    // AND PAR.Status Flag 19 Y/N is No
    AND PAR.Status_Flag_19_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_19_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 19
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 19 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_19_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 19
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 20
    CASE;

    // IF PAR.Avail Ship Date 20 USR is Entered
    IF PAR.Avail_Ship_Date_20_USR <> *ZERO;

    // AND PAR.Status Flag 20 Y/N is No
    AND PAR.Status_Flag_20_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_20_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 20
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 20 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_20_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 20
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 21
    CASE;

    // IF PAR.Avail Ship Date 21 USR is Entered
    IF PAR.Avail_Ship_Date_21_USR <> *ZERO;

    // AND PAR.Status Flag 21 Y/N is No
    AND PAR.Status_Flag_21_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_21_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 21
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 21 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_21_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 21
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

   }

   QUIT;

   ENDIF;

   CASE;

   // IF DB1.PS Available Ship Date GE JOB.*Job date
   IF DB1.PS_Available_Ship_Date >= JOB.*Job_date;

   CASE;

   // IF PAR.Primary/Load Sts USR is Primary
   IF PAR.Primary_Load_Sts_USR = 'P';

   // AND PAR.Unit Weight is Greater than zero
   AND ( PAR.Unit_Weight > *ZERO;

   // OR PAR.Piece Count Item is yes
   OR PAR.Piece_Count_Item = 'Y' );

   //?calculate PA with Unit Weight
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_1_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 1  Y/N = CND.Yes
   PAR.Status_Flag_1_Y_N = 'Y';

   //?calculate PA with Unit Weight
   // IF PAR.Avail Ship Date 2 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_2_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 2  Y/N = CND.Yes
   PAR.Status_Flag_2_Y_N = 'Y';

   //?calculate PA with Unit Weight
   // IF PAR.Avail Ship Date 3 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_3_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 3  Y/N = CND.Yes
   PAR.Status_Flag_3_Y_N = 'Y';

   //?calculate PA with Unit Weight
   // IF PAR.Avail Ship Date 4 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_4_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 4  Y/N = CND.yes
   PAR.Status_Flag_4_Y_N = 'Y';

   //?calculate PA with Unit Weight
   // IF PAR.Avail Ship Date 5 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_5_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 5  Y/N = CND.Yes
   PAR.Status_Flag_5_Y_N = 'Y';

   //?calculate PA with Unit Weight
   // IF PAR.Avail Ship Date 6 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_6_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 6  Y/N = CND.Yes
   PAR.Status_Flag_6_Y_N = 'Y';

   //?calculate PA with Unit Weight
   // IF PAR.Avail Ship Date 7 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_7_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 7  Y/N = CND.Yes
   PAR.Status_Flag_7_Y_N = 'Y';

   ENDIF;

   // IF PAR.Primary/Load Sts USR is Load Size
   IF PAR.Primary_Load_Sts_USR = 'L';

   // AND PAR.Load Size USR is GT Zero
   AND PAR.Load_Size_USR > *ZERO;

   //?Calculate PA with Load Size
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_1_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(*MISSING);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);

   // PAR.Status Flag 1  Y/N = CND.Yes
   PAR.Status_Flag_1_Y_N = 'Y';

   //?Calculate PA with Load Size
   // IF PAR.Avail Ship Date 2 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_2_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(*MISSING);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);

   // PAR.Status Flag 2  Y/N = CND.Yes
   PAR.Status_Flag_2_Y_N = 'Y';

   //?Calculate PA with Load Size
   // IF PAR.Avail Ship Date 3 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_3_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(*MISSING);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);

   // PAR.Status Flag 3  Y/N = CND.Yes
   PAR.Status_Flag_3_Y_N = 'Y';

   //?Calculate PA with Load Size
   // IF PAR.Avail Ship Date 4 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_4_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(*MISSING);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);

   // PAR.Status Flag 4  Y/N = CND.yes
   PAR.Status_Flag_4_Y_N = 'Y';

   //?Calculate PA with Load Size
   // IF PAR.Avail Ship Date 5 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_5_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(*MISSING);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);

   // PAR.Status Flag 5  Y/N = CND.Yes
   PAR.Status_Flag_5_Y_N = 'Y';

   //?Calculate PA with Load Size
   // IF PAR.Avail Ship Date 6 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_6_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(*MISSING);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);

   // PAR.Status Flag 6  Y/N = CND.Yes
   PAR.Status_Flag_6_Y_N = 'Y';

   //?Calculate PA with Load Size
   // IF PAR.Avail Ship Date 7 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_7_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(*MISSING);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);

   // PAR.Status Flag 7  Y/N = CND.Yes
   PAR.Status_Flag_7_Y_N = 'Y';

   ENDIF;

   ENDIF;

   ENDIF;

   //?USER: Exit processing

   EXECUTE FUNCTION(Rtv PA Ship Only-21  IF) TYPE(EXCINTFUN)                       AC1815983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Primary_Load_Sts_USR);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(PAR.Status_Flag_1_Y_N);
   PARAMETER(PAR.Status_Flag_2_Y_N);
   PARAMETER(PAR.Status_Flag_3_Y_N);
   PARAMETER(PAR.Status_Flag_4_Y_N);
   PARAMETER(PAR.Status_Flag_5_Y_N);
   PARAMETER(PAR.Status_Flag_6_Y_N);
   PARAMETER(PAR.Status_Flag_7_Y_N);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   {
    //?Execute internal function

    //?02/21/11 PKD Do not need to Override Weight for Piece Count Items.
    // PAR.Ord/Sch Sts USR = CND.Scheduled
    PAR.Ord_Sch_Sts_USR = 'S';

    //?day 1
    CASE;

    // IF PAR.Avail Ship Date 1 USR is Entered
    IF PAR.Avail_Ship_Date_1_USR <> *ZERO;

    // AND PAR.Status Flag 1  Y/N is No
    AND PAR.Status_Flag_1_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_1_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 1
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 1 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_1_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 1
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 2
    CASE;

    // IF PAR.Avail Ship Date 2 USR is Entered
    IF PAR.Avail_Ship_Date_2_USR <> *ZERO;

    // AND PAR.Status Flag 2  Y/N is No
    AND PAR.Status_Flag_2_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_2_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 2
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 2 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_2_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 2
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 3
    CASE;

    // IF PAR.Avail Ship Date 3 USR is Entered
    IF PAR.Avail_Ship_Date_3_USR <> *ZERO;

    // AND PAR.Status Flag 3  Y/N is No
    AND PAR.Status_Flag_3_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_3_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 3
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 3 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_3_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 3
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 4
    CASE;

    // IF PAR.Avail Ship Date 4 USR is Entered
    IF PAR.Avail_Ship_Date_4_USR <> *ZERO;

    // AND PAR.Status Flag 4  Y/N is no
    AND PAR.Status_Flag_4_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_4_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 4
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 4 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_4_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 4
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 5
    CASE;

    // IF PAR.Avail Ship Date 5 USR is Entered
    IF PAR.Avail_Ship_Date_5_USR <> *ZERO;

    // AND PAR.Status Flag 5  Y/N is No
    AND PAR.Status_Flag_5_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_5_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 5
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 5 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_5_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 5
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 6
    CASE;

    // IF PAR.Avail Ship Date 6 USR is Entered
    IF PAR.Avail_Ship_Date_6_USR <> *ZERO;

    // AND PAR.Status Flag 6  Y/N is No
    AND PAR.Status_Flag_6_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_6_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 6
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 6 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_6_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 6
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 7
    CASE;

    // IF PAR.Avail Ship Date 7 USR is Entered
    IF PAR.Avail_Ship_Date_7_USR <> *ZERO;

    // AND PAR.Status Flag 7  Y/N is No
    AND PAR.Status_Flag_7_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_7_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 7
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 7 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_7_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 7
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 8
    CASE;

    // IF PAR.Avail Ship Date 8 USR is Entered
    IF PAR.Avail_Ship_Date_8_USR <> *ZERO;

    // AND PAR.Status Flag 8  Y/N is No
    AND PAR.Status_Flag_8_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_8_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 8
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 8 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_8_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 8
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 9
    CASE;

    // IF PAR.Avail Ship Date 9 USR is Entered
    IF PAR.Avail_Ship_Date_9_USR <> *ZERO;

    // AND PAR.Status Flag 9  Y/N is No
    AND PAR.Status_Flag_9_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_9_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 9
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 9 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_9_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 9
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 10
    CASE;

    // IF PAR.Avail Ship Date 10 USR is Entered
    IF PAR.Avail_Ship_Date_10_USR <> *ZERO;

    // AND PAR.Status Flag 10 Y/N is No
    AND PAR.Status_Flag_10_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_10_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 10
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 10 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_10_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 10
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 11
    CASE;

    // IF PAR.Avail Ship Date 11 USR is Entered
    IF PAR.Avail_Ship_Date_11_USR <> *ZERO;

    // AND PAR.Status Flag 11 Y/N is No
    AND PAR.Status_Flag_11_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_11_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 11
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 11 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_11_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 11
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 12
    CASE;

    // IF PAR.Avail Ship Date 12 USR is Entered
    IF PAR.Avail_Ship_Date_12_USR <> *ZERO;

    // AND PAR.Status Flag 12 Y/N is No
    AND PAR.Status_Flag_12_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_12_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 12
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 12 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_12_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 12
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 13
    CASE;

    // IF PAR.Avail Ship Date 13 USR is Entered
    IF PAR.Avail_Ship_Date_13_USR <> *ZERO;

    // AND PAR.Status Flag 13 Y/N is No
    AND PAR.Status_Flag_13_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_13_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 13
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 13 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_13_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 13
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 14
    CASE;

    // IF PAR.Avail Ship Date 14 USR is Entered
    IF PAR.Avail_Ship_Date_14_USR <> *ZERO;

    // AND PAR.Status Flag 14 Y/N is No
    AND PAR.Status_Flag_14_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_14_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 14
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 14 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_14_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 14
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 15
    CASE;

    // IF PAR.Avail Ship Date 15 USR is Entered
    IF PAR.Avail_Ship_Date_15_USR <> *ZERO;

    // AND PAR.Status Flag 15 Y/N is No
    AND PAR.Status_Flag_15_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_15_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 15
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 15 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_15_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 15
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 16
    CASE;

    // IF PAR.Avail Ship Date 16 USR is Entered
    IF PAR.Avail_Ship_Date_16_USR <> *ZERO;

    // AND PAR.Status Flag 16 Y/N is No
    AND PAR.Status_Flag_16_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_16_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 16
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 16 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_16_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 16
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 17
    CASE;

    // IF PAR.Avail Ship Date 17 USR is Entered
    IF PAR.Avail_Ship_Date_17_USR <> *ZERO;

    // AND PAR.Status Flag 17 Y/N is No
    AND PAR.Status_Flag_17_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_17_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 17
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 17 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_17_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 17
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 18
    CASE;

    // IF PAR.Avail Ship Date 18 USR is Entered
    IF PAR.Avail_Ship_Date_18_USR <> *ZERO;

    // AND PAR.Status Flag 18 Y/N is No
    AND PAR.Status_Flag_18_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_18_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 18
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 18 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_18_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 18
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 19
    CASE;

    // IF PAR.Avail Ship Date 19 USR is Entered
    IF PAR.Avail_Ship_Date_19_USR <> *ZERO;

    // AND PAR.Status Flag 19 Y/N is No
    AND PAR.Status_Flag_19_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_19_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 19
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 19 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_19_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 19
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 20
    CASE;

    // IF PAR.Avail Ship Date 20 USR is Entered
    IF PAR.Avail_Ship_Date_20_USR <> *ZERO;

    // AND PAR.Status Flag 20 Y/N is No
    AND PAR.Status_Flag_20_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_20_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 20
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 20 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_20_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 20
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 21
    CASE;

    // IF PAR.Avail Ship Date 21 USR is Entered
    IF PAR.Avail_Ship_Date_21_USR <> *ZERO;

    // AND PAR.Status Flag 21 Y/N is No
    AND PAR.Status_Flag_21_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_21_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 21
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 21 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_21_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 21
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

   }

  }

  // Total Production
  PAR.Day_8_Production_USR = ( ( ( ( ( PAR.Day_1_Production_USR + PAR.Day_2_Production_USR )
  + PAR.Day_3_Production_USR ) + PAR.Day_4_Production_USR ) + PAR.Day_5_Production_USR )
  + PAR.Day_6_Production_USR ) + PAR.Day_7_Production_USR;

  // Total Sched SHipments
  PAR.Day_8_Sched_Shipments_USR = ( ( ( ( ( PAR.Day_1_Sched_Shipments_USR
  + PAR.Day_2_Sched_Shipments_USR ) + PAR.Day_3_Sched_Shipments_USR )
  + PAR.Day_4_Sched_Shipments_USR ) + PAR.Day_5_Sched_Shipments_USR )
  + PAR.Day_6_Sched_Shipments_USR ) + PAR.Day_7_Sched_Shipments_USR;

  // Total Sales
  PAR.Day_8_Sales_USR = ( ( ( ( ( PAR.Day_1_Sales_USR + PAR.Day_2_Sales_USR )
  + PAR.Day_3_Sales_USR ) + PAR.Day_4_Sales_USR ) + PAR.Day_5_Sales_USR )
  + PAR.Day_6_Sales_USR ) + PAR.Day_7_Sales_USR;

  // Total Adjustments
  PAR.Day_8_Adjustments_USR = ( ( ( ( ( PAR.Day_1_Adjustments_USR
  + PAR.Day_2_Adjustments_USR ) + PAR.Day_3_Adjustments_USR ) + PAR.Day_4_Adjustments_USR )
  + PAR.Day_5_Adjustments_USR ) + PAR.Day_6_Adjustments_USR ) + PAR.Day_7_Adjustments_USR;

  // Total Availability
  PAR.Day_8_Availability_USR = ( ( ( ( ( PAR.Day_1_Availability_USR
  + PAR.Day_2_Availability_USR ) + PAR.Day_3_Availability_USR )
  + PAR.Day_4_Availability_USR ) + PAR.Day_5_Availability_USR )
  + PAR.Day_6_Availability_USR ) + PAR.Day_7_Availability_USR;

 }

 // PAR.Day 1 Inventory Total USR = PAR.Day 1 Inventory Total USR + PAR.Day 1 Inventory USR
 PAR.Day_1_Inventory_Total_USR = PAR.Day_1_Inventory_Total_USR + PAR.Day_1_Inventory_USR;

 // PAR.Day 2 Inventory Total USR = PAR.Day 2 Inventory Total USR + PAR.Day 2 Inventory USR
 PAR.Day_2_Inventory_Total_USR = PAR.Day_2_Inventory_Total_USR + PAR.Day_2_Inventory_USR;

 // PAR.Day 3 Inventory Total USR = PAR.Day 3 Inventory Total USR + PAR.Day 3 Inventory USR
 PAR.Day_3_Inventory_Total_USR = PAR.Day_3_Inventory_Total_USR + PAR.Day_3_Inventory_USR;

 // PAR.Day 4 Inventory Total USR = PAR.Day 4 Inventory Total USR + PAR.Day 4 Inventory USR
 PAR.Day_4_Inventory_Total_USR = PAR.Day_4_Inventory_Total_USR + PAR.Day_4_Inventory_USR;

 // PAR.Day 5 Inventory Total USR = PAR.Day 5 Inventory Total USR + PAR.Day 5 Inventory USR
 PAR.Day_5_Inventory_Total_USR = PAR.Day_5_Inventory_Total_USR + PAR.Day_5_Inventory_USR;

 // PAR.Day 6 Inventory Total USR = PAR.Day 6 Inventory Total USR + PAR.Day 6 Inventory USR
 PAR.Day_6_Inventory_Total_USR = PAR.Day_6_Inventory_Total_USR + PAR.Day_6_Inventory_USR;

 // PAR.Day 7 Inventory Total USR = PAR.Day 7 Inventory Total USR + PAR.Day 7 Inventory USR
 PAR.Day_7_Inventory_Total_USR = PAR.Day_7_Inventory_Total_USR + PAR.Day_7_Inventory_USR;

 // PAR.Day 8 Inventory Total USR = PAR.Day 8 Inventory Total USR + PAR.Day 8 Inventory USR
 PAR.Day_8_Inventory_Total_USR = PAR.Day_8_Inventory_Total_USR + PAR.Day_8_Inventory_USR;

 // PAR.Day 1 Production TotalUSR = PAR.Day 1 Production TotalUSR + PAR.Day 1 Production USR
 PAR.Day_1_Production_TotalUSR = PAR.Day_1_Production_TotalUSR + PAR.Day_1_Production_USR;

 // PAR.Day 2 Production TotalUSR = PAR.Day 2 Production TotalUSR + PAR.Day 2 Production USR
 PAR.Day_2_Production_TotalUSR = PAR.Day_2_Production_TotalUSR + PAR.Day_2_Production_USR;

 // PAR.Day 3 Production TotalUSR = PAR.Day 3 Production TotalUSR + PAR.Day 3 Production USR
 PAR.Day_3_Production_TotalUSR = PAR.Day_3_Production_TotalUSR + PAR.Day_3_Production_USR;

 // PAR.Day 4 Production TotalUSR = PAR.Day 4 Production TotalUSR + PAR.Day 4 Production USR
 PAR.Day_4_Production_TotalUSR = PAR.Day_4_Production_TotalUSR + PAR.Day_4_Production_USR;

 // PAR.Day 5 Production TotalUSR = PAR.Day 5 Production TotalUSR + PAR.Day 5 Production USR
 PAR.Day_5_Production_TotalUSR = PAR.Day_5_Production_TotalUSR + PAR.Day_5_Production_USR;

 // PAR.Day 6 Production TotalUSR = PAR.Day 6 Production TotalUSR + PAR.Day 6 Production USR
 PAR.Day_6_Production_TotalUSR = PAR.Day_6_Production_TotalUSR + PAR.Day_6_Production_USR;

 // PAR.Day 7 Production TotalUSR = PAR.Day 7 Production TotalUSR + PAR.Day 7 Production USR
 PAR.Day_7_Production_TotalUSR = PAR.Day_7_Production_TotalUSR + PAR.Day_7_Production_USR;

 // PAR.Day 8 Production TotalUSR = PAR.Day 8 Production TotalUSR + PAR.Day 8 Production USR
 PAR.Day_8_Production_TotalUSR = PAR.Day_8_Production_TotalUSR + PAR.Day_8_Production_USR;

 // PAR.Day 1 Schd Ship Total USR = PAR.Day 1 Schd Ship Total USR + PAR.Day 1 Sched Shipments USR
 PAR.Day_1_Schd_Ship_Total_USR = PAR.Day_1_Schd_Ship_Total_USR
 + PAR.Day_1_Sched_Shipments_USR;

 // PAR.Day 2 Schd Ship Total USR = PAR.Day 2 Schd Ship Total USR + PAR.Day 2 Sched Shipments USR
 PAR.Day_2_Schd_Ship_Total_USR = PAR.Day_2_Schd_Ship_Total_USR
 + PAR.Day_2_Sched_Shipments_USR;

 // PAR.Day 3 Schd Ship Total USR = PAR.Day 3 Schd Ship Total USR + PAR.Day 3 Sched Shipments USR
 PAR.Day_3_Schd_Ship_Total_USR = PAR.Day_3_Schd_Ship_Total_USR
 + PAR.Day_3_Sched_Shipments_USR;

 // PAR.Day 4 Schd Ship Total USR = PAR.Day 4 Schd Ship Total USR + PAR.Day 4 Sched Shipments USR
 PAR.Day_4_Schd_Ship_Total_USR = PAR.Day_4_Schd_Ship_Total_USR
 + PAR.Day_4_Sched_Shipments_USR;

 // PAR.Day 5 Schd Ship Total USR = PAR.Day 5 Schd Ship Total USR + PAR.Day 5 Sched Shipments USR
 PAR.Day_5_Schd_Ship_Total_USR = PAR.Day_5_Schd_Ship_Total_USR
 + PAR.Day_5_Sched_Shipments_USR;

 // PAR.Day 6 Schd Ship Total USR = PAR.Day 6 Schd Ship Total USR + PAR.Day 6 Sched Shipments USR
 PAR.Day_6_Schd_Ship_Total_USR = PAR.Day_6_Schd_Ship_Total_USR
 + PAR.Day_6_Sched_Shipments_USR;

 // PAR.Day 7 Schd Ship Total USR = PAR.Day 7 Schd Ship Total USR + PAR.Day 7 Sched Shipments USR
 PAR.Day_7_Schd_Ship_Total_USR = PAR.Day_7_Schd_Ship_Total_USR
 + PAR.Day_7_Sched_Shipments_USR;

 // PAR.Day 8 Schd Ship Total USR = PAR.Day 8 Schd Ship Total USR + PAR.Day 8 Sched Shipments USR
 PAR.Day_8_Schd_Ship_Total_USR = PAR.Day_8_Schd_Ship_Total_USR
 + PAR.Day_8_Sched_Shipments_USR;

 // PAR.Day 1 Sales Total     USR = PAR.Day 1 Sales Total     USR + PAR.Day 1 Sales USR
 PAR.Day_1_Sales_Total_USR = PAR.Day_1_Sales_Total_USR + PAR.Day_1_Sales_USR;

 // PAR.Day 2 Sales Total     USR = PAR.Day 2 Sales Total     USR + PAR.Day 2 Sales USR
 PAR.Day_2_Sales_Total_USR = PAR.Day_2_Sales_Total_USR + PAR.Day_2_Sales_USR;

 // PAR.Day 3 Sales Total     USR = PAR.Day 3 Sales Total     USR + PAR.Day 3 Sales USR
 PAR.Day_3_Sales_Total_USR = PAR.Day_3_Sales_Total_USR + PAR.Day_3_Sales_USR;

 // PAR.Day 4 Sales Total     USR = PAR.Day 4 Sales Total     USR + PAR.Day 4 Sales USR
 PAR.Day_4_Sales_Total_USR = PAR.Day_4_Sales_Total_USR + PAR.Day_4_Sales_USR;

 // PAR.Day 5 Sales Total     USR = PAR.Day 5 Sales Total     USR + PAR.Day 5 Sales USR
 PAR.Day_5_Sales_Total_USR = PAR.Day_5_Sales_Total_USR + PAR.Day_5_Sales_USR;

 // PAR.Day 6 Sales Total     USR = PAR.Day 6 Sales Total     USR + PAR.Day 6 Sales USR
 PAR.Day_6_Sales_Total_USR = PAR.Day_6_Sales_Total_USR + PAR.Day_6_Sales_USR;

 // PAR.Day 7 Sales Total     USR = PAR.Day 7 Sales Total     USR + PAR.Day 7 Sales USR
 PAR.Day_7_Sales_Total_USR = PAR.Day_7_Sales_Total_USR + PAR.Day_7_Sales_USR;

 // PAR.Day 8 Sales Total     USR = PAR.Day 8 Sales Total     USR + PAR.Day 8 Sales USR
 PAR.Day_8_Sales_Total_USR = PAR.Day_8_Sales_Total_USR + PAR.Day_8_Sales_USR;

 // PAR.Day 1 Adj Total       USR = PAR.Day 1 Adj Total       USR + PAR.Day 1 Adjustments USR
 PAR.Day_1_Adj_Total_USR = PAR.Day_1_Adj_Total_USR + PAR.Day_1_Adjustments_USR;

 // PAR.Day 2 Adj Total       USR = PAR.Day 2 Adj Total       USR + PAR.Day 2 Adjustments USR
 PAR.Day_2_Adj_Total_USR = PAR.Day_2_Adj_Total_USR + PAR.Day_2_Adjustments_USR;

 // PAR.Day 3 Adj Total       USR = PAR.Day 3 Adj Total       USR + PAR.Day 3 Adjustments USR
 PAR.Day_3_Adj_Total_USR = PAR.Day_3_Adj_Total_USR + PAR.Day_3_Adjustments_USR;

 // PAR.Day 4 Adj Total       USR = PAR.Day 4 Adj Total       USR + PAR.Day 4 Adjustments USR
 PAR.Day_4_Adj_Total_USR = PAR.Day_4_Adj_Total_USR + PAR.Day_4_Adjustments_USR;

 // PAR.Day 5 Adj Total       USR = PAR.Day 5 Adj Total       USR + PAR.Day 5 Adjustments USR
 PAR.Day_5_Adj_Total_USR = PAR.Day_5_Adj_Total_USR + PAR.Day_5_Adjustments_USR;

 // PAR.Day 6 Adj Total       USR = PAR.Day 6 Adj Total       USR + PAR.Day 6 Adjustments USR
 PAR.Day_6_Adj_Total_USR = PAR.Day_6_Adj_Total_USR + PAR.Day_6_Adjustments_USR;

 // PAR.Day 7 Adj Total       USR = PAR.Day 7 Adj Total       USR + PAR.Day 7 Adjustments USR
 PAR.Day_7_Adj_Total_USR = PAR.Day_7_Adj_Total_USR + PAR.Day_7_Adjustments_USR;

 // PAR.Day 8 Adj Total       USR = PAR.Day 8 Adj Total       USR + PAR.Day 8 Adjustments USR
 PAR.Day_8_Adj_Total_USR = PAR.Day_8_Adj_Total_USR + PAR.Day_8_Adjustments_USR;

 // PAR.Day 1 Avail Total     USR = PAR.Day 1 Avail Total     USR + PAR.Day 1 Availability USR
 PAR.Day_1_Avail_Total_USR = PAR.Day_1_Avail_Total_USR + PAR.Day_1_Availability_USR;

 // PAR.Day 2 Avail Total     USR = PAR.Day 2 Avail Total     USR + PAR.Day 2 Availability USR
 PAR.Day_2_Avail_Total_USR = PAR.Day_2_Avail_Total_USR + PAR.Day_2_Availability_USR;

 // PAR.Day 3 Avail Total     USR = PAR.Day 3 Avail Total     USR + PAR.Day 3 Availability USR
 PAR.Day_3_Avail_Total_USR = PAR.Day_3_Avail_Total_USR + PAR.Day_3_Availability_USR;

 // PAR.Day 4 Avail Total     USR = PAR.Day 4 Avail Total     USR + PAR.Day 4 Availability USR
 PAR.Day_4_Avail_Total_USR = PAR.Day_4_Avail_Total_USR + PAR.Day_4_Availability_USR;

 // PAR.Day 5 Avail Total     USR = PAR.Day 5 Avail Total     USR + PAR.Day 5 Availability USR
 PAR.Day_5_Avail_Total_USR = PAR.Day_5_Avail_Total_USR + PAR.Day_5_Availability_USR;

 // PAR.Day 6 Avail Total     USR = PAR.Day 6 Avail Total     USR + PAR.Day 6 Availability USR
 PAR.Day_6_Avail_Total_USR = PAR.Day_6_Avail_Total_USR + PAR.Day_6_Availability_USR;

 // PAR.Day 7 Avail Total     USR = PAR.Day 7 Avail Total     USR + PAR.Day 7 Availability USR
 PAR.Day_7_Avail_Total_USR = PAR.Day_7_Avail_Total_USR + PAR.Day_7_Availability_USR;

 // PAR.Day 8 Avail Total     USR = PAR.Day 8 Avail Total     USR + PAR.Day 8 Availability USR
 PAR.Day_8_Avail_Total_USR = PAR.Day_8_Avail_Total_USR + PAR.Day_8_Availability_USR;

 //?Zero out accumulators
 CASE;

 // IF WRK.BLANK EQ WRK.BLANK
 IF WRK.BLANK = WRK.BLANK;

 // PAR.Day 1 Inventory USR = CON.*ZERO
 PAR.Day_1_Inventory_USR = *ZERO;

 // PAR.Day 2 Inventory USR = CON.*ZERO
 PAR.Day_2_Inventory_USR = *ZERO;

 // PAR.Day 3 Inventory USR = CON.*ZERO
 PAR.Day_3_Inventory_USR = *ZERO;

 // PAR.Day 4 Inventory USR = CON.*ZERO
 PAR.Day_4_Inventory_USR = *ZERO;

 // PAR.Day 5 Inventory USR = CON.*ZERO
 PAR.Day_5_Inventory_USR = *ZERO;

 // PAR.Day 6 Inventory USR = CON.*ZERO
 PAR.Day_6_Inventory_USR = *ZERO;

 // PAR.Day 7 Inventory USR = CON.*ZERO
 PAR.Day_7_Inventory_USR = *ZERO;

 // PAR.Day 8 Inventory USR = CON.*ZERO
 PAR.Day_8_Inventory_USR = *ZERO;

 // PAR.Day 1 Production USR = CON.*ZERO
 PAR.Day_1_Production_USR = *ZERO;

 // PAR.Day 2 Production USR = CON.*ZERO
 PAR.Day_2_Production_USR = *ZERO;

 // PAR.Day 3 Production USR = CON.*ZERO
 PAR.Day_3_Production_USR = *ZERO;

 // PAR.Day 4 Production USR = CON.*ZERO
 PAR.Day_4_Production_USR = *ZERO;

 // PAR.Day 5 Production USR = CON.*ZERO
 PAR.Day_5_Production_USR = *ZERO;

 // PAR.Day 6 Production USR = CON.*ZERO
 PAR.Day_6_Production_USR = *ZERO;

 // PAR.Day 7 Production USR = CON.*ZERO
 PAR.Day_7_Production_USR = *ZERO;

 // PAR.Day 8 Production USR = CON.*ZERO
 PAR.Day_8_Production_USR = *ZERO;

 // PAR.Day 1 Sched Shipments USR = CON.*ZERO
 PAR.Day_1_Sched_Shipments_USR = *ZERO;

 // PAR.Day 2 Sched Shipments USR = CON.*ZERO
 PAR.Day_2_Sched_Shipments_USR = *ZERO;

 // PAR.Day 3 Sched Shipments USR = CON.*ZERO
 PAR.Day_3_Sched_Shipments_USR = *ZERO;

 // PAR.Day 4 Sched Shipments USR = CON.*ZERO
 PAR.Day_4_Sched_Shipments_USR = *ZERO;

 // PAR.Day 5 Sched Shipments USR = CON.*ZERO
 PAR.Day_5_Sched_Shipments_USR = *ZERO;

 // PAR.Day 6 Sched Shipments USR = CON.*ZERO
 PAR.Day_6_Sched_Shipments_USR = *ZERO;

 // PAR.Day 7 Sched Shipments USR = CON.*ZERO
 PAR.Day_7_Sched_Shipments_USR = *ZERO;

 // PAR.Day 8 Sched Shipments USR = CON.*ZERO
 PAR.Day_8_Sched_Shipments_USR = *ZERO;

 // PAR.Day 1 Sales USR = CON.*ZERO
 PAR.Day_1_Sales_USR = *ZERO;

 // PAR.Day 2 Sales USR = CON.*ZERO
 PAR.Day_2_Sales_USR = *ZERO;

 // PAR.Day 3 Sales USR = CON.*ZERO
 PAR.Day_3_Sales_USR = *ZERO;

 // PAR.Day 4 Sales USR = CON.*ZERO
 PAR.Day_4_Sales_USR = *ZERO;

 // PAR.Day 5 Sales USR = CON.*ZERO
 PAR.Day_5_Sales_USR = *ZERO;

 // PAR.Day 6 Sales USR = CON.*ZERO
 PAR.Day_6_Sales_USR = *ZERO;

 // PAR.Day 7 Sales USR = CON.*ZERO
 PAR.Day_7_Sales_USR = *ZERO;

 // PAR.Day 8 Sales USR = CON.*ZERO
 PAR.Day_8_Sales_USR = *ZERO;

 // PAR.Day 1 Adjustments USR = CON.*ZERO
 PAR.Day_1_Adjustments_USR = *ZERO;

 // PAR.Day 2 Adjustments USR = CON.*ZERO
 PAR.Day_2_Adjustments_USR = *ZERO;

 // PAR.Day 3 Adjustments USR = CON.*ZERO
 PAR.Day_3_Adjustments_USR = *ZERO;

 // PAR.Day 4 Adjustments USR = CON.*ZERO
 PAR.Day_4_Adjustments_USR = *ZERO;

 // PAR.Day 5 Adjustments USR = CON.*ZERO
 PAR.Day_5_Adjustments_USR = *ZERO;

 // PAR.Day 6 Adjustments USR = CON.*ZERO
 PAR.Day_6_Adjustments_USR = *ZERO;

 // PAR.Day 7 Adjustments USR = CON.*ZERO
 PAR.Day_7_Adjustments_USR = *ZERO;

 // PAR.Day 8 Adjustments USR = CON.*ZERO
 PAR.Day_8_Adjustments_USR = *ZERO;

 // PAR.Day 1 Availability USR = CON.*ZERO
 PAR.Day_1_Availability_USR = *ZERO;

 // PAR.Day 2 Availability USR = CON.*ZERO
 PAR.Day_2_Availability_USR = *ZERO;

 // PAR.Day 3 Availability USR = CON.*ZERO
 PAR.Day_3_Availability_USR = *ZERO;

 // PAR.Day 4 Availability USR = CON.*ZERO
 PAR.Day_4_Availability_USR = *ZERO;

 // PAR.Day 5 Availability USR = CON.*ZERO
 PAR.Day_5_Availability_USR = *ZERO;

 // PAR.Day 6 Availability USR = CON.*ZERO
 PAR.Day_6_Availability_USR = *ZERO;

 // PAR.Day 7 Availability USR = CON.*ZERO
 PAR.Day_7_Availability_USR = *ZERO;

 // PAR.Day 8 Availability USR = CON.*ZERO
 PAR.Day_8_Availability_USR = *ZERO;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Warehouse Code EQ DB1.Warehouse Code
 IF PAR.Warehouse_Code = DB1.Warehouse_Code;

 EXECUTE FUNCTION(Rtv PA Dtl SD-6       IF) TYPE(EXCINTFUN)                      AC1646139;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.PS_Available_Ship_Date);
 PARAMETER(PAR.Avail_Ship_Date_1_USR);
 PARAMETER(PAR.Avail_Ship_Date_2_USR);
 PARAMETER(PAR.Avail_Ship_Date_3_USR);
 PARAMETER(PAR.Avail_Ship_Date_4_USR);
 PARAMETER(PAR.Avail_Ship_Date_5_USR);
 PARAMETER(PAR.Avail_Ship_Date_6_USR);
 PARAMETER(PAR.Avail_Ship_Date_7_USR);
 PARAMETER(PAR.USR_Day_1);
 PARAMETER(PAR.USR_Day_2);
 PARAMETER(PAR.USR_Day_3);
 PARAMETER(PAR.USR_Day_4);
 PARAMETER(PAR.USR_Day_5);
 PARAMETER(PAR.USR_Day_6);
 PARAMETER(PAR.USR_Day_7);
 PARAMETER(PAR.Day_1_Inventory_Total_USR);
 PARAMETER(PAR.Day_2_Inventory_Total_USR);
 PARAMETER(PAR.Day_3_Inventory_Total_USR);
 PARAMETER(PAR.Day_4_Inventory_Total_USR);
 PARAMETER(PAR.Day_5_Inventory_Total_USR);
 PARAMETER(PAR.Day_6_Inventory_Total_USR);
 PARAMETER(PAR.Day_7_Inventory_Total_USR);
 PARAMETER(PAR.Day_8_Inventory_Total_USR);
 PARAMETER(PAR.Day_1_Production_TotalUSR);
 PARAMETER(PAR.Day_2_Production_TotalUSR);
 PARAMETER(PAR.Day_3_Production_TotalUSR);
 PARAMETER(PAR.Day_4_Production_TotalUSR);
 PARAMETER(PAR.Day_5_Production_TotalUSR);
 PARAMETER(PAR.Day_6_Production_TotalUSR);
 PARAMETER(PAR.Day_7_Production_TotalUSR);
 PARAMETER(PAR.Day_8_Production_TotalUSR);
 PARAMETER(PAR.Day_1_Sales_Total_USR);
 PARAMETER(PAR.Day_2_Sales_Total_USR);
 PARAMETER(PAR.Day_3_Sales_Total_USR);
 PARAMETER(PAR.Day_4_Sales_Total_USR);
 PARAMETER(PAR.Day_5_Sales_Total_USR);
 PARAMETER(PAR.Day_6_Sales_Total_USR);
 PARAMETER(PAR.Day_7_Sales_Total_USR);
 PARAMETER(PAR.Day_8_Sales_Total_USR);
 PARAMETER(PAR.Day_1_Adj_Total_USR);
 PARAMETER(PAR.Day_2_Adj_Total_USR);
 PARAMETER(PAR.Day_3_Adj_Total_USR);
 PARAMETER(PAR.Day_4_Adj_Total_USR);
 PARAMETER(PAR.Day_5_Adj_Total_USR);
 PARAMETER(PAR.Day_6_Adj_Total_USR);
 PARAMETER(PAR.Day_7_Adj_Total_USR);
 PARAMETER(PAR.Day_8_Adj_Total_USR);
 PARAMETER(PAR.Day_1_Avail_Total_USR);
 PARAMETER(PAR.Day_2_Avail_Total_USR);
 PARAMETER(PAR.Day_3_Avail_Total_USR);
 PARAMETER(PAR.Day_4_Avail_Total_USR);
 PARAMETER(PAR.Day_5_Avail_Total_USR);
 PARAMETER(PAR.Day_6_Avail_Total_USR);
 PARAMETER(PAR.Day_7_Avail_Total_USR);
 PARAMETER(PAR.Day_8_Avail_Total_USR);
 PARAMETER(PAR.Primary_Load_Sts_USR);
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Day_1_Schd_Ship_Total_USR);
 PARAMETER(PAR.Day_2_Schd_Ship_Total_USR);
 PARAMETER(PAR.Day_3_Schd_Ship_Total_USR);
 PARAMETER(PAR.Day_4_Schd_Ship_Total_USR);
 PARAMETER(PAR.Day_5_Schd_Ship_Total_USR);
 PARAMETER(PAR.Day_6_Schd_Ship_Total_USR);
 PARAMETER(PAR.Day_7_Schd_Ship_Total_USR);
 PARAMETER(PAR.Day_8_Schd_Ship_Total_USR);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv PA In/Sh SD-6     IF) TYPE(EXCINTFUN)                      AC1388774;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.Day_1_Inventory_USR);
  PARAMETER(PAR.Day_2_Inventory_USR);
  PARAMETER(PAR.Day_3_Inventory_USR);
  PARAMETER(PAR.Day_4_Inventory_USR);
  PARAMETER(PAR.Day_5_Inventory_USR);
  PARAMETER(PAR.Day_6_Inventory_USR);
  PARAMETER(PAR.Day_7_Inventory_USR);
  PARAMETER(PAR.Day_8_Inventory_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_1_Adjustments_USR);
  PARAMETER(PAR.Day_2_Adjustments_USR);
  PARAMETER(PAR.Day_3_Adjustments_USR);
  PARAMETER(PAR.Day_4_Adjustments_USR);
  PARAMETER(PAR.Day_5_Adjustments_USR);
  PARAMETER(PAR.Day_6_Adjustments_USR);
  PARAMETER(PAR.Day_7_Adjustments_USR);
  PARAMETER(PAR.Day_1_Availability_USR);
  PARAMETER(PAR.Day_2_Availability_USR);
  PARAMETER(PAR.Day_3_Availability_USR);
  PARAMETER(PAR.Day_4_Availability_USR);
  PARAMETER(PAR.Day_5_Availability_USR);
  PARAMETER(PAR.Day_6_Availability_USR);
  PARAMETER(PAR.Day_7_Availability_USR);
  PARAMETER(PAR.Primary_Load_Sts_USR);
  PARAMETER(PAR.Load_Size_USR);
  PARAMETER(PAR.Day_1_Sched_Shipments_USR);
  PARAMETER(PAR.Day_2_Sched_Shipments_USR);
  PARAMETER(PAR.Day_3_Sched_Shipments_USR);
  PARAMETER(PAR.Day_4_Sched_Shipments_USR);
  PARAMETER(PAR.Day_5_Sched_Shipments_USR);
  PARAMETER(PAR.Day_6_Sched_Shipments_USR);
  PARAMETER(PAR.Day_7_Sched_Shipments_USR);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
  {
   //?Execute internal function

   //?Retrieve Inventory and Scheduled Shipments
   EXECUTE FUNCTION(Rtv PA In/Sh SD-6 WHS RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1376865;
   PARAMETER(PAR.Company_Number);
   PARAMETER('S');
   PARAMETER(JOB.*Job_date);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Inventory / Sales if Chilling Time > 0
   CASE;

   // IF PAR.Primary/Load Sts USR is Primary
   IF PAR.Primary_Load_Sts_USR = 'P';

   // AND PAR.Unit Weight is Greater than zero
   AND ( PAR.Unit_Weight > *ZERO;

   // OR PAR.Piece Count Item is yes
   OR PAR.Piece_Count_Item = 'Y' );

   //?Calculate Quantity based on Unit Weight or Pieces
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_1_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 2 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_2_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 3 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_3_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 4 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_4_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 5 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_5_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 6 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_6_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 7 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_7_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   ENDIF;

   //?Inventory / Sales if Chilling Time > 0
   // IF PAR.Primary/Load Sts USR is Load Size
   IF PAR.Primary_Load_Sts_USR = 'L';

   // AND PAR.Load Size USR is GT Zero
   AND PAR.Load_Size_USR > *ZERO;

   //?Calculate Quantity based on Load Size
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_1_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 2 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_2_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 3 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_3_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 4 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_4_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 5 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_5_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 6 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_6_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 7 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_7_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   ENDIF;

   ENDIF;

   //?Total Inventory
   CASE;

   // IF PAR.Avail Dsp/Prt Type USR is Display
   IF PAR.Avail_Dsp_Prt_Type_USR = 'D'/'T';

   // Total Inventory
   PAR.Day_8_Inventory_USR = ( ( ( ( ( PAR.Day_1_Inventory_USR + PAR.Day_2_Inventory_USR )
   + PAR.Day_3_Inventory_USR ) + PAR.Day_4_Inventory_USR ) + PAR.Day_5_Inventory_USR )
   + PAR.Day_6_Inventory_USR ) + PAR.Day_7_Inventory_USR;

   ENDIF;

  }

  EXECUTE FUNCTION(Rtv PA Dtl SD-6 WHS   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1646149;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.USR_Day_1);
  PARAMETER(PAR.USR_Day_2);
  PARAMETER(PAR.USR_Day_3);
  PARAMETER(PAR.USR_Day_4);
  PARAMETER(PAR.USR_Day_5);
  PARAMETER(PAR.USR_Day_6);
  PARAMETER(PAR.USR_Day_7);
  PARAMETER(PAR.Day_1_Inventory_USR);
  PARAMETER(PAR.Day_2_Inventory_USR);
  PARAMETER(PAR.Day_3_Inventory_USR);
  PARAMETER(PAR.Day_4_Inventory_USR);
  PARAMETER(PAR.Day_5_Inventory_USR);
  PARAMETER(PAR.Day_6_Inventory_USR);
  PARAMETER(PAR.Day_7_Inventory_USR);
  PARAMETER(PAR.Day_1_Production_USR);
  PARAMETER(PAR.Day_2_Production_USR);
  PARAMETER(PAR.Day_3_Production_USR);
  PARAMETER(PAR.Day_4_Production_USR);
  PARAMETER(PAR.Day_5_Production_USR);
  PARAMETER(PAR.Day_6_Production_USR);
  PARAMETER(PAR.Day_7_Production_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_1_Adjustments_USR);
  PARAMETER(PAR.Day_2_Adjustments_USR);
  PARAMETER(PAR.Day_3_Adjustments_USR);
  PARAMETER(PAR.Day_4_Adjustments_USR);
  PARAMETER(PAR.Day_5_Adjustments_USR);
  PARAMETER(PAR.Day_6_Adjustments_USR);
  PARAMETER(PAR.Day_7_Adjustments_USR);
  PARAMETER(PAR.Day_1_Availability_USR);
  PARAMETER(PAR.Day_2_Availability_USR);
  PARAMETER(PAR.Day_3_Availability_USR);
  PARAMETER(PAR.Day_4_Availability_USR);
  PARAMETER(PAR.Day_5_Availability_USR);
  PARAMETER(PAR.Day_6_Availability_USR);
  PARAMETER(PAR.Day_7_Availability_USR);
  PARAMETER(PAR.Primary_Load_Sts_USR);
  PARAMETER(PAR.Load_Size_USR);
  PARAMETER(PAR.Day_1_Sched_Shipments_USR);
  PARAMETER(PAR.Day_2_Sched_Shipments_USR);
  PARAMETER(PAR.Day_3_Sched_Shipments_USR);
  PARAMETER(PAR.Day_4_Sched_Shipments_USR);
  PARAMETER(PAR.Day_5_Sched_Shipments_USR);
  PARAMETER(PAR.Day_6_Sched_Shipments_USR);
  PARAMETER(PAR.Day_7_Sched_Shipments_USR);
  PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  {
   //?USER: Initialize routine

   // PAR.Status Flag 1  Y/N = CND.No
   PAR.Status_Flag_1_Y_N = 'N';

   // PAR.Status Flag 2  Y/N = CND.No
   PAR.Status_Flag_2_Y_N = 'N';

   // PAR.Status Flag 3  Y/N = CND.No
   PAR.Status_Flag_3_Y_N = 'N';

   // PAR.Status Flag 4  Y/N = CND.no
   PAR.Status_Flag_4_Y_N = 'N';

   // PAR.Status Flag 5  Y/N = CND.No
   PAR.Status_Flag_5_Y_N = 'N';

   // PAR.Status Flag 6  Y/N = CND.No
   PAR.Status_Flag_6_Y_N = 'N';

   // PAR.Status Flag 7  Y/N = CND.No
   PAR.Status_Flag_7_Y_N = 'N';

   //?USER: Process Data record

   //?Quit:  Available Ship Date > Day 7
   CASE;

   // IF DB1.PS Available Ship Date GT PAR.Avail Ship Date 7 USR
   IF DB1.PS_Available_Ship_Date > PAR.Avail_Ship_Date_7_USR;

   EXECUTE FUNCTION(Rtv PA Ship Only-21  IF) TYPE(EXCINTFUN)                       AC1815983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Primary_Load_Sts_USR);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(PAR.Status_Flag_1_Y_N);
   PARAMETER(PAR.Status_Flag_2_Y_N);
   PARAMETER(PAR.Status_Flag_3_Y_N);
   PARAMETER(PAR.Status_Flag_4_Y_N);
   PARAMETER(PAR.Status_Flag_5_Y_N);
   PARAMETER(PAR.Status_Flag_6_Y_N);
   PARAMETER(PAR.Status_Flag_7_Y_N);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   {
    //?Execute internal function

    //?02/21/11 PKD Do not need to Override Weight for Piece Count Items.
    // PAR.Ord/Sch Sts USR = CND.Scheduled
    PAR.Ord_Sch_Sts_USR = 'S';

    //?day 1
    CASE;

    // IF PAR.Avail Ship Date 1 USR is Entered
    IF PAR.Avail_Ship_Date_1_USR <> *ZERO;

    // AND PAR.Status Flag 1  Y/N is No
    AND PAR.Status_Flag_1_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_1_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 1
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 1 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_1_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 1
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 2
    CASE;

    // IF PAR.Avail Ship Date 2 USR is Entered
    IF PAR.Avail_Ship_Date_2_USR <> *ZERO;

    // AND PAR.Status Flag 2  Y/N is No
    AND PAR.Status_Flag_2_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_2_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 2
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 2 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_2_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 2
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 3
    CASE;

    // IF PAR.Avail Ship Date 3 USR is Entered
    IF PAR.Avail_Ship_Date_3_USR <> *ZERO;

    // AND PAR.Status Flag 3  Y/N is No
    AND PAR.Status_Flag_3_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_3_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 3
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 3 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_3_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 3
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 4
    CASE;

    // IF PAR.Avail Ship Date 4 USR is Entered
    IF PAR.Avail_Ship_Date_4_USR <> *ZERO;

    // AND PAR.Status Flag 4  Y/N is no
    AND PAR.Status_Flag_4_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_4_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 4
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 4 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_4_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 4
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 5
    CASE;

    // IF PAR.Avail Ship Date 5 USR is Entered
    IF PAR.Avail_Ship_Date_5_USR <> *ZERO;

    // AND PAR.Status Flag 5  Y/N is No
    AND PAR.Status_Flag_5_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_5_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 5
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 5 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_5_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 5
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 6
    CASE;

    // IF PAR.Avail Ship Date 6 USR is Entered
    IF PAR.Avail_Ship_Date_6_USR <> *ZERO;

    // AND PAR.Status Flag 6  Y/N is No
    AND PAR.Status_Flag_6_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_6_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 6
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 6 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_6_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 6
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 7
    CASE;

    // IF PAR.Avail Ship Date 7 USR is Entered
    IF PAR.Avail_Ship_Date_7_USR <> *ZERO;

    // AND PAR.Status Flag 7  Y/N is No
    AND PAR.Status_Flag_7_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_7_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 7
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 7 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_7_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 7
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 8
    CASE;

    // IF PAR.Avail Ship Date 8 USR is Entered
    IF PAR.Avail_Ship_Date_8_USR <> *ZERO;

    // AND PAR.Status Flag 8  Y/N is No
    AND PAR.Status_Flag_8_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_8_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 8
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 8 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_8_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 8
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 9
    CASE;

    // IF PAR.Avail Ship Date 9 USR is Entered
    IF PAR.Avail_Ship_Date_9_USR <> *ZERO;

    // AND PAR.Status Flag 9  Y/N is No
    AND PAR.Status_Flag_9_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_9_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 9
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 9 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_9_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 9
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 10
    CASE;

    // IF PAR.Avail Ship Date 10 USR is Entered
    IF PAR.Avail_Ship_Date_10_USR <> *ZERO;

    // AND PAR.Status Flag 10 Y/N is No
    AND PAR.Status_Flag_10_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_10_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 10
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 10 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_10_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 10
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 11
    CASE;

    // IF PAR.Avail Ship Date 11 USR is Entered
    IF PAR.Avail_Ship_Date_11_USR <> *ZERO;

    // AND PAR.Status Flag 11 Y/N is No
    AND PAR.Status_Flag_11_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_11_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 11
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 11 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_11_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 11
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 12
    CASE;

    // IF PAR.Avail Ship Date 12 USR is Entered
    IF PAR.Avail_Ship_Date_12_USR <> *ZERO;

    // AND PAR.Status Flag 12 Y/N is No
    AND PAR.Status_Flag_12_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_12_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 12
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 12 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_12_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 12
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 13
    CASE;

    // IF PAR.Avail Ship Date 13 USR is Entered
    IF PAR.Avail_Ship_Date_13_USR <> *ZERO;

    // AND PAR.Status Flag 13 Y/N is No
    AND PAR.Status_Flag_13_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_13_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 13
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 13 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_13_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 13
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 14
    CASE;

    // IF PAR.Avail Ship Date 14 USR is Entered
    IF PAR.Avail_Ship_Date_14_USR <> *ZERO;

    // AND PAR.Status Flag 14 Y/N is No
    AND PAR.Status_Flag_14_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_14_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 14
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 14 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_14_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 14
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 15
    CASE;

    // IF PAR.Avail Ship Date 15 USR is Entered
    IF PAR.Avail_Ship_Date_15_USR <> *ZERO;

    // AND PAR.Status Flag 15 Y/N is No
    AND PAR.Status_Flag_15_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_15_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 15
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 15 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_15_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 15
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 16
    CASE;

    // IF PAR.Avail Ship Date 16 USR is Entered
    IF PAR.Avail_Ship_Date_16_USR <> *ZERO;

    // AND PAR.Status Flag 16 Y/N is No
    AND PAR.Status_Flag_16_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_16_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 16
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 16 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_16_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 16
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 17
    CASE;

    // IF PAR.Avail Ship Date 17 USR is Entered
    IF PAR.Avail_Ship_Date_17_USR <> *ZERO;

    // AND PAR.Status Flag 17 Y/N is No
    AND PAR.Status_Flag_17_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_17_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 17
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 17 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_17_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 17
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 18
    CASE;

    // IF PAR.Avail Ship Date 18 USR is Entered
    IF PAR.Avail_Ship_Date_18_USR <> *ZERO;

    // AND PAR.Status Flag 18 Y/N is No
    AND PAR.Status_Flag_18_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_18_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 18
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 18 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_18_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 18
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 19
    CASE;

    // IF PAR.Avail Ship Date 19 USR is Entered
    IF PAR.Avail_Ship_Date_19_USR <> *ZERO;

    // AND PAR.Status Flag 19 Y/N is No
    AND PAR.Status_Flag_19_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_19_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 19
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 19 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_19_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 19
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 20
    CASE;

    // IF PAR.Avail Ship Date 20 USR is Entered
    IF PAR.Avail_Ship_Date_20_USR <> *ZERO;

    // AND PAR.Status Flag 20 Y/N is No
    AND PAR.Status_Flag_20_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_20_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 20
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 20 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_20_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 20
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 21
    CASE;

    // IF PAR.Avail Ship Date 21 USR is Entered
    IF PAR.Avail_Ship_Date_21_USR <> *ZERO;

    // AND PAR.Status Flag 21 Y/N is No
    AND PAR.Status_Flag_21_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_21_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 21
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 21 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_21_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 21
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

   }

   QUIT;

   ENDIF;

   CASE;

   // IF DB1.PS Available Ship Date GE JOB.*Job date
   IF DB1.PS_Available_Ship_Date >= JOB.*Job_date;

   CASE;

   // IF PAR.Primary/Load Sts USR is Primary
   IF PAR.Primary_Load_Sts_USR = 'P';

   // AND PAR.Unit Weight is Greater than zero
   AND ( PAR.Unit_Weight > *ZERO;

   // OR PAR.Piece Count Item is yes
   OR PAR.Piece_Count_Item = 'Y' );

   //?calculate PA with Unit Weight
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_1_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 1  Y/N = CND.Yes
   PAR.Status_Flag_1_Y_N = 'Y';

   //?calculate PA with Unit Weight
   // IF PAR.Avail Ship Date 2 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_2_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 2  Y/N = CND.Yes
   PAR.Status_Flag_2_Y_N = 'Y';

   //?calculate PA with Unit Weight
   // IF PAR.Avail Ship Date 3 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_3_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 3  Y/N = CND.Yes
   PAR.Status_Flag_3_Y_N = 'Y';

   //?calculate PA with Unit Weight
   // IF PAR.Avail Ship Date 4 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_4_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 4  Y/N = CND.yes
   PAR.Status_Flag_4_Y_N = 'Y';

   //?calculate PA with Unit Weight
   // IF PAR.Avail Ship Date 5 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_5_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 5  Y/N = CND.Yes
   PAR.Status_Flag_5_Y_N = 'Y';

   //?calculate PA with Unit Weight
   // IF PAR.Avail Ship Date 6 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_6_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 6  Y/N = CND.Yes
   PAR.Status_Flag_6_Y_N = 'Y';

   //?calculate PA with Unit Weight
   // IF PAR.Avail Ship Date 7 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_7_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 7  Y/N = CND.Yes
   PAR.Status_Flag_7_Y_N = 'Y';

   ENDIF;

   // IF PAR.Primary/Load Sts USR is Load Size
   IF PAR.Primary_Load_Sts_USR = 'L';

   // AND PAR.Load Size USR is GT Zero
   AND PAR.Load_Size_USR > *ZERO;

   //?Calculate PA with Load Size
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_1_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(*MISSING);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);

   // PAR.Status Flag 1  Y/N = CND.Yes
   PAR.Status_Flag_1_Y_N = 'Y';

   //?Calculate PA with Load Size
   // IF PAR.Avail Ship Date 2 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_2_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(*MISSING);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);

   // PAR.Status Flag 2  Y/N = CND.Yes
   PAR.Status_Flag_2_Y_N = 'Y';

   //?Calculate PA with Load Size
   // IF PAR.Avail Ship Date 3 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_3_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(*MISSING);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);

   // PAR.Status Flag 3  Y/N = CND.Yes
   PAR.Status_Flag_3_Y_N = 'Y';

   //?Calculate PA with Load Size
   // IF PAR.Avail Ship Date 4 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_4_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(*MISSING);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);

   // PAR.Status Flag 4  Y/N = CND.yes
   PAR.Status_Flag_4_Y_N = 'Y';

   //?Calculate PA with Load Size
   // IF PAR.Avail Ship Date 5 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_5_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(*MISSING);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);

   // PAR.Status Flag 5  Y/N = CND.Yes
   PAR.Status_Flag_5_Y_N = 'Y';

   //?Calculate PA with Load Size
   // IF PAR.Avail Ship Date 6 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_6_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(*MISSING);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);

   // PAR.Status Flag 6  Y/N = CND.Yes
   PAR.Status_Flag_6_Y_N = 'Y';

   //?Calculate PA with Load Size
   // IF PAR.Avail Ship Date 7 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_7_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(*MISSING);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(*MISSING);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);

   // PAR.Status Flag 7  Y/N = CND.Yes
   PAR.Status_Flag_7_Y_N = 'Y';

   ENDIF;

   ENDIF;

   ENDIF;

   //?USER: Exit processing

   EXECUTE FUNCTION(Rtv PA Ship Only-21  IF) TYPE(EXCINTFUN)                       AC1815983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Primary_Load_Sts_USR);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(LCL.ZERO);
   PARAMETER(PAR.Status_Flag_1_Y_N);
   PARAMETER(PAR.Status_Flag_2_Y_N);
   PARAMETER(PAR.Status_Flag_3_Y_N);
   PARAMETER(PAR.Status_Flag_4_Y_N);
   PARAMETER(PAR.Status_Flag_5_Y_N);
   PARAMETER(PAR.Status_Flag_6_Y_N);
   PARAMETER(PAR.Status_Flag_7_Y_N);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(LCL.BLANK);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   {
    //?Execute internal function

    //?02/21/11 PKD Do not need to Override Weight for Piece Count Items.
    // PAR.Ord/Sch Sts USR = CND.Scheduled
    PAR.Ord_Sch_Sts_USR = 'S';

    //?day 1
    CASE;

    // IF PAR.Avail Ship Date 1 USR is Entered
    IF PAR.Avail_Ship_Date_1_USR <> *ZERO;

    // AND PAR.Status Flag 1  Y/N is No
    AND PAR.Status_Flag_1_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_1_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 1
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 1 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_1_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 1
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 2
    CASE;

    // IF PAR.Avail Ship Date 2 USR is Entered
    IF PAR.Avail_Ship_Date_2_USR <> *ZERO;

    // AND PAR.Status Flag 2  Y/N is No
    AND PAR.Status_Flag_2_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_2_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 2
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 2 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_2_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 2
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 3
    CASE;

    // IF PAR.Avail Ship Date 3 USR is Entered
    IF PAR.Avail_Ship_Date_3_USR <> *ZERO;

    // AND PAR.Status Flag 3  Y/N is No
    AND PAR.Status_Flag_3_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_3_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 3
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 3 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_3_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 3
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 4
    CASE;

    // IF PAR.Avail Ship Date 4 USR is Entered
    IF PAR.Avail_Ship_Date_4_USR <> *ZERO;

    // AND PAR.Status Flag 4  Y/N is no
    AND PAR.Status_Flag_4_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_4_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 4
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 4 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_4_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 4
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 5
    CASE;

    // IF PAR.Avail Ship Date 5 USR is Entered
    IF PAR.Avail_Ship_Date_5_USR <> *ZERO;

    // AND PAR.Status Flag 5  Y/N is No
    AND PAR.Status_Flag_5_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_5_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 5
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 5 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_5_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 5
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 6
    CASE;

    // IF PAR.Avail Ship Date 6 USR is Entered
    IF PAR.Avail_Ship_Date_6_USR <> *ZERO;

    // AND PAR.Status Flag 6  Y/N is No
    AND PAR.Status_Flag_6_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_6_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 6
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 6 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_6_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 6
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 7
    CASE;

    // IF PAR.Avail Ship Date 7 USR is Entered
    IF PAR.Avail_Ship_Date_7_USR <> *ZERO;

    // AND PAR.Status Flag 7  Y/N is No
    AND PAR.Status_Flag_7_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_7_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 7
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 7 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_7_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 7
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 8
    CASE;

    // IF PAR.Avail Ship Date 8 USR is Entered
    IF PAR.Avail_Ship_Date_8_USR <> *ZERO;

    // AND PAR.Status Flag 8  Y/N is No
    AND PAR.Status_Flag_8_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_8_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 8
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 8 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_8_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 8
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 9
    CASE;

    // IF PAR.Avail Ship Date 9 USR is Entered
    IF PAR.Avail_Ship_Date_9_USR <> *ZERO;

    // AND PAR.Status Flag 9  Y/N is No
    AND PAR.Status_Flag_9_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_9_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 9
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 9 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_9_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 9
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 10
    CASE;

    // IF PAR.Avail Ship Date 10 USR is Entered
    IF PAR.Avail_Ship_Date_10_USR <> *ZERO;

    // AND PAR.Status Flag 10 Y/N is No
    AND PAR.Status_Flag_10_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_10_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 10
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 10 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_10_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 10
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 11
    CASE;

    // IF PAR.Avail Ship Date 11 USR is Entered
    IF PAR.Avail_Ship_Date_11_USR <> *ZERO;

    // AND PAR.Status Flag 11 Y/N is No
    AND PAR.Status_Flag_11_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_11_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 11
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 11 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_11_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 11
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 12
    CASE;

    // IF PAR.Avail Ship Date 12 USR is Entered
    IF PAR.Avail_Ship_Date_12_USR <> *ZERO;

    // AND PAR.Status Flag 12 Y/N is No
    AND PAR.Status_Flag_12_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_12_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 12
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 12 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_12_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 12
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 13
    CASE;

    // IF PAR.Avail Ship Date 13 USR is Entered
    IF PAR.Avail_Ship_Date_13_USR <> *ZERO;

    // AND PAR.Status Flag 13 Y/N is No
    AND PAR.Status_Flag_13_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_13_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 13
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 13 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_13_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 13
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 14
    CASE;

    // IF PAR.Avail Ship Date 14 USR is Entered
    IF PAR.Avail_Ship_Date_14_USR <> *ZERO;

    // AND PAR.Status Flag 14 Y/N is No
    AND PAR.Status_Flag_14_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_14_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 14
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 14 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_14_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 14
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 15
    CASE;

    // IF PAR.Avail Ship Date 15 USR is Entered
    IF PAR.Avail_Ship_Date_15_USR <> *ZERO;

    // AND PAR.Status Flag 15 Y/N is No
    AND PAR.Status_Flag_15_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_15_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 15
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 15 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_15_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 15
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 16
    CASE;

    // IF PAR.Avail Ship Date 16 USR is Entered
    IF PAR.Avail_Ship_Date_16_USR <> *ZERO;

    // AND PAR.Status Flag 16 Y/N is No
    AND PAR.Status_Flag_16_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_16_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 16
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 16 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_16_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 16
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 17
    CASE;

    // IF PAR.Avail Ship Date 17 USR is Entered
    IF PAR.Avail_Ship_Date_17_USR <> *ZERO;

    // AND PAR.Status Flag 17 Y/N is No
    AND PAR.Status_Flag_17_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_17_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 17
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 17 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_17_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 17
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 18
    CASE;

    // IF PAR.Avail Ship Date 18 USR is Entered
    IF PAR.Avail_Ship_Date_18_USR <> *ZERO;

    // AND PAR.Status Flag 18 Y/N is No
    AND PAR.Status_Flag_18_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_18_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 18
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 18 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_18_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 18
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 19
    CASE;

    // IF PAR.Avail Ship Date 19 USR is Entered
    IF PAR.Avail_Ship_Date_19_USR <> *ZERO;

    // AND PAR.Status Flag 19 Y/N is No
    AND PAR.Status_Flag_19_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_19_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 19
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 19 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_19_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 19
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 20
    CASE;

    // IF PAR.Avail Ship Date 20 USR is Entered
    IF PAR.Avail_Ship_Date_20_USR <> *ZERO;

    // AND PAR.Status Flag 20 Y/N is No
    AND PAR.Status_Flag_20_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_20_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 20
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 20 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_20_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 20
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 21
    CASE;

    // IF PAR.Avail Ship Date 21 USR is Entered
    IF PAR.Avail_Ship_Date_21_USR <> *ZERO;

    // AND PAR.Status Flag 21 Y/N is No
    AND PAR.Status_Flag_21_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_21_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 21
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 21 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_21_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 21
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

   }

  }

  // Total Production
  PAR.Day_8_Production_USR = ( ( ( ( ( PAR.Day_1_Production_USR + PAR.Day_2_Production_USR )
  + PAR.Day_3_Production_USR ) + PAR.Day_4_Production_USR ) + PAR.Day_5_Production_USR )
  + PAR.Day_6_Production_USR ) + PAR.Day_7_Production_USR;

  // Total Sched SHipments
  PAR.Day_8_Sched_Shipments_USR = ( ( ( ( ( PAR.Day_1_Sched_Shipments_USR
  + PAR.Day_2_Sched_Shipments_USR ) + PAR.Day_3_Sched_Shipments_USR )
  + PAR.Day_4_Sched_Shipments_USR ) + PAR.Day_5_Sched_Shipments_USR )
  + PAR.Day_6_Sched_Shipments_USR ) + PAR.Day_7_Sched_Shipments_USR;

  // Total Sales
  PAR.Day_8_Sales_USR = ( ( ( ( ( PAR.Day_1_Sales_USR + PAR.Day_2_Sales_USR )
  + PAR.Day_3_Sales_USR ) + PAR.Day_4_Sales_USR ) + PAR.Day_5_Sales_USR )
  + PAR.Day_6_Sales_USR ) + PAR.Day_7_Sales_USR;

  // Total Adjustments
  PAR.Day_8_Adjustments_USR = ( ( ( ( ( PAR.Day_1_Adjustments_USR
  + PAR.Day_2_Adjustments_USR ) + PAR.Day_3_Adjustments_USR ) + PAR.Day_4_Adjustments_USR )
  + PAR.Day_5_Adjustments_USR ) + PAR.Day_6_Adjustments_USR ) + PAR.Day_7_Adjustments_USR;

  // Total Availability
  PAR.Day_8_Availability_USR = ( ( ( ( ( PAR.Day_1_Availability_USR
  + PAR.Day_2_Availability_USR ) + PAR.Day_3_Availability_USR )
  + PAR.Day_4_Availability_USR ) + PAR.Day_5_Availability_USR )
  + PAR.Day_6_Availability_USR ) + PAR.Day_7_Availability_USR;

 }

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Move to Zero Decimal fields
DO;

// DTL.Day 1 Inventory 5,0   USR = DTL.Day 1 Inventory USR
DTL.Day_1_Inventory_50_USR = DTL.Day_1_Inventory_USR;

// DTL.Day 2 Inventory 5,0   USR = DTL.Day 2 Inventory USR
DTL.Day_2_Inventory_50_USR = DTL.Day_2_Inventory_USR;

// DTL.Day 3 Inventory 5,0   USR = DTL.Day 3 Inventory USR
DTL.Day_3_Inventory_50_USR = DTL.Day_3_Inventory_USR;

// DTL.Day 4 Inventory 5,0   USR = DTL.Day 4 Inventory USR
DTL.Day_4_Inventory_50_USR = DTL.Day_4_Inventory_USR;

// DTL.Day 5 Inventory 5,0   USR = DTL.Day 5 Inventory USR
DTL.Day_5_Inventory_50_USR = DTL.Day_5_Inventory_USR;

// DTL.Day 6 Inventory 5,0   USR = DTL.Day 6 Inventory USR
DTL.Day_6_Inventory_50_USR = DTL.Day_6_Inventory_USR;

// DTL.Day 7 Inventory 5,0   USR = DTL.Day 7 Inventory USR
DTL.Day_7_Inventory_50_USR = DTL.Day_7_Inventory_USR;

// DTL.Day 8 Inventory 5,0   USR = DTL.Day 8 Inventory USR
DTL.Day_8_Inventory_50_USR = DTL.Day_8_Inventory_USR;

// DTL.Day 1 Production 5,0  USR = DTL.Day 1 Production USR
DTL.Day_1_Production_50_USR = DTL.Day_1_Production_USR;

// DTL.Day 2 Production 5,0  USR = DTL.Day 2 Production USR
DTL.Day_2_Production_50_USR = DTL.Day_2_Production_USR;

// DTL.Day 3 Production 5,0  USR = DTL.Day 3 Production USR
DTL.Day_3_Production_50_USR = DTL.Day_3_Production_USR;

// DTL.Day 4 Production 5,0  USR = DTL.Day 4 Production USR
DTL.Day_4_Production_50_USR = DTL.Day_4_Production_USR;

// DTL.Day 5 Production 5,0  USR = DTL.Day 5 Production USR
DTL.Day_5_Production_50_USR = DTL.Day_5_Production_USR;

// DTL.Day 6 Production 5,0  USR = DTL.Day 6 Production USR
DTL.Day_6_Production_50_USR = DTL.Day_6_Production_USR;

// DTL.Day 7 Production 5,0  USR = DTL.Day 7 Production USR
DTL.Day_7_Production_50_USR = DTL.Day_7_Production_USR;

// DTL.Day 8 Production 5,0  USR = DTL.Day 8 Production USR
DTL.Day_8_Production_50_USR = DTL.Day_8_Production_USR;

// DTL.Day 1 Sched Shipm 5,0 USR = DTL.Day 1 Sched Shipments USR
DTL.Day_1_Sched_Shipm_50_USR = DTL.Day_1_Sched_Shipments_USR;

// DTL.Day 2 Sched Shipm 5,0 USR = DTL.Day 2 Sched Shipments USR
DTL.Day_2_Sched_Shipm_50_USR = DTL.Day_2_Sched_Shipments_USR;

// DTL.Day 3 Sched Shipm 5,0 USR = DTL.Day 3 Sched Shipments USR
DTL.Day_3_Sched_Shipm_50_USR = DTL.Day_3_Sched_Shipments_USR;

// DTL.Day 4 Sched Shipm 5,0 USR = DTL.Day 4 Sched Shipments USR
DTL.Day_4_Sched_Shipm_50_USR = DTL.Day_4_Sched_Shipments_USR;

// DTL.Day 5 Sched Shipm 5,0 USR = DTL.Day 5 Sched Shipments USR
DTL.Day_5_Sched_Shipm_50_USR = DTL.Day_5_Sched_Shipments_USR;

// DTL.Day 6 Sched Shipm 5,0 USR = DTL.Day 6 Sched Shipments USR
DTL.Day_6_Sched_Shipm_50_USR = DTL.Day_6_Sched_Shipments_USR;

// DTL.Day 7 Sched Shipm 5,0 USR = DTL.Day 7 Sched Shipments USR
DTL.Day_7_Sched_Shipm_50_USR = DTL.Day_7_Sched_Shipments_USR;

// DTL.Day 8 Sched Shipm 5,0 USR = DTL.Day 8 Sched Shipments USR
DTL.Day_8_Sched_Shipm_50_USR = DTL.Day_8_Sched_Shipments_USR;

// DTL.Day 1 Available Qty   USR = DTL.Day 1 Availability USR
DTL.Day_1_Available_Qty_USR = DTL.Day_1_Availability_USR;

// DTL.Day 2 Available Qty   USR = DTL.Day 2 Availability USR
DTL.Day_2_Available_Qty_USR = DTL.Day_2_Availability_USR;

// DTL.Day 3 Available Qty   USR = DTL.Day 3 Availability USR
DTL.Day_3_Available_Qty_USR = DTL.Day_3_Availability_USR;

// DTL.Day 4 Available Qty   USR = DTL.Day 4 Availability USR
DTL.Day_4_Available_Qty_USR = DTL.Day_4_Availability_USR;

// DTL.Day 5 Available Qty   USR = DTL.Day 5 Availability USR
DTL.Day_5_Available_Qty_USR = DTL.Day_5_Availability_USR;

// DTL.Day 6 Available Qty   USR = DTL.Day 6 Availability USR
DTL.Day_6_Available_Qty_USR = DTL.Day_6_Availability_USR;

// DTL.Day 7 Available Qty   USR = DTL.Day 7 Availability USR
DTL.Day_7_Available_Qty_USR = DTL.Day_7_Availability_USR;

// DTL.Day 8 Available Qty   USR = DTL.Day 8 Availability USR
DTL.Day_8_Available_Qty_USR = DTL.Day_8_Availability_USR;

// DTL.Day 1 Sales 5,0  USR = DTL.Day 1 Sales USR
DTL.Day_1_Sales_50_USR = DTL.Day_1_Sales_USR;

// DTL.Day 2 Sales 5,0  USR = DTL.Day 2 Sales USR
DTL.Day_2_Sales_50_USR = DTL.Day_2_Sales_USR;

// DTL.Day 3 Sales 5,0  USR = DTL.Day 3 Sales USR
DTL.Day_3_Sales_50_USR = DTL.Day_3_Sales_USR;

// DTL.Day 4 Sales 5,0  USR = DTL.Day 4 Sales USR
DTL.Day_4_Sales_50_USR = DTL.Day_4_Sales_USR;

// DTL.Day 5 Sales 5,0  USR = DTL.Day 5 Sales USR
DTL.Day_5_Sales_50_USR = DTL.Day_5_Sales_USR;

// DTL.Day 6 Sales 5,0  USR = DTL.Day 6 Sales USR
DTL.Day_6_Sales_50_USR = DTL.Day_6_Sales_USR;

// DTL.Day 7 Sales 5,0  USR = DTL.Day 7 Sales USR
DTL.Day_7_Sales_50_USR = DTL.Day_7_Sales_USR;

// DTL.Day 8 Sales 5,0  USR = DTL.Day 8 Sales USR
DTL.Day_8_Sales_50_USR = DTL.Day_8_Sales_USR;

ENDDO;

//?Calculate the Available Loads from the Available qty and unit weight
// Day 1
DTL.Day_1_Available_Loads = ( DTL.Day_1_Available_Qty_USR * DTL.Unit_Weight )                      +
/ DTL.Load_Size_USR;

// Day 2
DTL.Day_2_Available_Loads = ( DTL.Day_2_Available_Qty_USR * DTL.Unit_Weight )                      +
/ DTL.Load_Size_USR;

// Day 3
DTL.Day_3_Available_Loads = ( DTL.Day_3_Available_Qty_USR * DTL.Unit_Weight )                      +
/ DTL.Load_Size_USR;

// Day 4
DTL.Day_4_Available_Loads = ( DTL.Day_4_Available_Qty_USR * DTL.Unit_Weight )                      +
/ DTL.Load_Size_USR;

// Day 5
DTL.Day_5_Available_Loads = ( DTL.Day_5_Available_Qty_USR * DTL.Unit_Weight )                      +
/ DTL.Load_Size_USR;

// Day 6
DTL.Day_6_Available_Loads = ( DTL.Day_6_Available_Qty_USR * DTL.Unit_Weight )                      +
/ DTL.Load_Size_USR;

// Day 7
DTL.Day_7_Available_Loads = ( DTL.Day_7_Available_Qty_USR * DTL.Unit_Weight )                      +
/ DTL.Load_Size_USR;

// Day 8 - Total
DTL.Day_8_Available_Loads = ( ( ( ( ( DTL.Day_1_Available_Loads                                    +
+ DTL.Day_2_Available_Loads ) + DTL.Day_3_Available_Loads ) + DTL.Day_4_Available_Loads )         +
+ DTL.Day_5_Available_Loads ) + DTL.Day_6_Available_Loads ) + DTL.Day_7_Available_Loads;

//?*********************************************************************
// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

