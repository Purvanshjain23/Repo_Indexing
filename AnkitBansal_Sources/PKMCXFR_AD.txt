// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKMCXFR
// ?Date: 14.08.2025 Time: 02:52:11
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modifications and Comments
DO;

//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//?                      length from 5 to 7.
ENDDO;

EXECUTE FUNCTION(Rtv/Chg Rsl Sprd Wgt  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1202951;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TST_Wgt);
PARAMETER(PAR.Avg_Live_Wgt_Usr_Rep);
PARAMETER(PAR.Head_Total_Usr_2);
PARAMETER(PAR.Pen_Number);
{
 //?USER: Process Data record

 //?If tattoo was previously selected, SPREAD the weight.
 CASE;

 // IF DB1.TH Resale Spread Sts is Select for Spread
 IF DB1.TH_Resale_Spread_Sts = 'S';

 //?Tattoo Header -- Upd live wgt, avg live wgt, resale spread sts
 // PAR.Live Weight           USR = PAR.Avg Live Wgt Usr Rep * DB1.TH Head Received
 PAR.Live_Weight_USR = PAR.Avg_Live_Wgt_Usr_Rep * DB1.TH_Head_Received;

 EXECUTE FUNCTION(Chg Rsl Spread Wgt    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1202997;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER('P');
 PARAMETER(PAR.Live_Weight_USR);
 PARAMETER(PAR.Avg_Live_Wgt_Usr_Rep);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 //?Tattoo Detail -- Update live wt, avg live wgt, pen
 EXECUTE FUNCTION(Rtv/Chg TttDtl wgt,pn RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1203002;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(1);
 PARAMETER(PAR.Avg_Live_Wgt_Usr_Rep);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.Pen_Number);
 {
  //?USER: Process Data record

  // PAR.TD Live Wgt = PAR.TD Avg Live Wgt * DB1.TD Pen Head *
  PAR.TD_Live_Wgt = PAR.TD_Avg_Live_Wgt * DB1.TD_Pen_Head;

  //?H16749 SLM 08/17/2020
  //?do not use the change audit date use system date
  EXECUTE FUNCTION(Chg Tattoo Detail   SydCH) TYPE(CHGOBJ) FILE(PKA2CPP)          AB1353953;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TD_Sequence_Number);
  PARAMETER(PAR.TD_Live_Wgt);
  PARAMETER(DB1.TD_Pen_Head);
  PARAMETER(DB1.TD_Yard_Dead);
  PARAMETER(DB1.TD_Held_Over);
  PARAMETER(DB1.TD_Held_Over_Status);
  PARAMETER(DB1.TD_Drive_Time);
  PARAMETER(DB1.TD_Drive_Hour);
  PARAMETER(DB1.TD_Drive_Card_Number);
  PARAMETER(PAR.TD_Avg_Live_Wgt);
  PARAMETER(DB1.TD_Gen_Bal_To_Kill);
  PARAMETER(DB1.TD_Recs_Created_for_HO);
  PARAMETER(DB1.TD_User_Status_2);
  PARAMETER(DB1.TD_User_Status_3);
  PARAMETER(DB1.TD_User_Date_1);
  PARAMETER(DB1.TD_User_Date_2);
  PARAMETER(DB1.TD_Drive_Date);
  PARAMETER(PAR.Pen_Company_Number);
  PARAMETER(PAR.Pen_Number);
  PARAMETER(DB1.TDP_Process_Code);
  PARAMETER(DB1.Held_Over_Pen_Company_Num);
  PARAMETER(DB1.Held_Over_Pen_Number);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // Call program Rtv System Date & Tim UP.
    CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
    PARAMETER(PAR.RS_Date_Changed);
    PARAMETER(PAR.RS_Time_Changed);

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 //?Change Buy Order Load -- Increase Live wgt received
 // PAR.BOL Head Received = CON.*ZERO
 PAR.BOL_Head_Received = *ZERO;

 EXECUTE FUNCTION(Rtv/Chg Bol Hd rcvd   RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1184135;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(PAR.BOL_Head_Received);
 PARAMETER(PAR.Live_Weight_USR);
 {
  //?USER: Process Data record

  // WRK.BOL Head Received = DB1.BOL Head Received + PAR.BOL Head Received
  WRK.BOL_Head_Received = DB1.BOL_Head_Received + PAR.BOL_Head_Received;

  // WRK.BOL Live Wgt Received = DB1.BOL Live Wgt Received + PAR.BOL Live Wgt Receive
  WRK.BOL_Live_Wgt_Received = DB1.BOL_Live_Wgt_Received + PAR.BOL_Live_Wgt_Received;

  //?Calculate freight based on the unit of measure
  // WRK.BOL Freight Amt = DB1.BOL Freight Amt
  WRK.BOL_Freight_Amt = DB1.BOL_Freight_Amt;

  EXECUTE FUNCTION(Chk tatto Paid for Bol RT) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1183687;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(WRK.Tattoo_is_paid_Usr);
  PARAMETER(WRK.Held_Over_Records_Y_N);
  PARAMETER(WRK.Tot_Frt_Spdb_aft_pay_Usr);
  {
   //?USER: Initialize routine

   // PAR.Tot Frt Spdb aft pay Usr = CON.*ZERO
   PAR.Tot_Frt_Spdb_aft_pay_Usr = *ZERO;

   // PAR.Held Over Records Y/N = CND.No
   PAR.Held_Over_Records_Y_N = 'N';

   // PAR.Tattoo is paid Usr = CND.No
   PAR.Tattoo_is_paid_Usr = 'N';

   //?USER: Process Data record

   //?If one tattoo is paid but freight was spread then accumulate
   //?what is paid, for held over respread problem
   //?when this probelm goes away, then just flag that there is one paid
   CASE;

   // IF DB1.TH Payment Sts is Paid Anything
   IF DB1.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

   //?CHECK IF FREIGHT AMOUNT IS IN RECORD
   CASE;

   // IF DB1.TH Freight Amount is Not Zeros
   IF DB1.TH_Freight_Amount <> *ZERO;

   // PAR.Tattoo is paid Usr = CND.Yes
   PAR.Tattoo_is_paid_Usr = 'Y';

   ENDIF;

   // PAR.Tot Frt Spdb aft pay Usr = PAR.Tot Frt Spdb aft pay Usr + DB1.TH Freight Amo
   PAR.Tot_Frt_Spdb_aft_pay_Usr = PAR.Tot_Frt_Spdb_aft_pay_Usr + DB1.TH_Freight_Amount;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?CHECK FOR HELD OVER RECORD
   CASE;

   // IF DB1.TH Held Over Record is Yes
   IF DB1.TH_Held_Over_Record = 'Y';

   // OR DB1.TH Held Over is greater than 0
   OR DB1.TH_Held_Over > *ZERO;

   // PAR.Held Over Records Y/N = CND.Yes
   PAR.Held_Over_Records_Y_N = 'Y';

   ENDIF;

   ENDIF;

  }

  CASE;

  // IF DB1.BOL Freight Allocation is Freight is Allocated
  IF DB1.BOL_Freight_Allocation = 'Y';

  // AND WRK.Tattoo is paid Usr is Yes
  AND WRK.Tattoo_is_paid_Usr = 'Y';

  // IF DB1.BOL Trucker Payment Sts is Paid Trucker
  IF DB1.BOL_Trucker_Payment_Sts = 'PT';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Call program Clc Freight Amt       XF.
  CALL PROGRAM(Clc Freight Amt       XF) ('PKQ5XFR');
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.BOL_Freight_UOM);
  PARAMETER(DB1.BOL_Freight_Unit_Amt);
  PARAMETER(WRK.BOL_Freight_Amt);
  PARAMETER(DB1.BOL_Freight_Allocation);
  PARAMETER(WRK.BOL_Head_Received);
  PARAMETER(WRK.BOL_Live_Wgt_Received);

  ENDIF;

  CASE;

  // IF WRK.BOL Freight Amt is Not Zeros
  IF WRK.BOL_Freight_Amt <> *ZERO;

  // AND WRK.BOL Head Received is Greater then Zero
  AND WRK.BOL_Head_Received > *ZERO;

  // AND DB1.BOL Trucker Payment Sts is Blank
  AND DB1.BOL_Trucker_Payment_Sts = *BLANK;

  // WRK.BOL Trucker Payment Sts = CND.Select Trucker
  WRK.BOL_Trucker_Payment_Sts = 'ST';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.BOL Trucker Payment Sts = DB1.BOL Trucker Payment Sts
  WRK.BOL_Trucker_Payment_Sts = DB1.BOL_Trucker_Payment_Sts;

  ENDIF;

  EXECUTE FUNCTION(Chg Buy Order Detail  CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1100531;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.BOL_Kill_Date);
  PARAMETER(DB1.BOL_Pln_Delv_Start_Time);
  PARAMETER(DB1.BOL_Pln_Delv_End_Time);
  PARAMETER(DB1.BOL_Pln_Head_Delv);
  PARAMETER(DB1.BOL_Shipped_Wgt);
  PARAMETER(DB1.BOL_Pln_Delv_Date);
  PARAMETER(DB1.BOL_Freight_UOM);
  PARAMETER(DB1.BOL_Freight_Unit_Amt);
  PARAMETER(WRK.BOL_Freight_Amt);
  PARAMETER(DB1.BOL_Freight_Allocation);
  PARAMETER(WRK.BOL_Head_Received);
  PARAMETER(WRK.BOL_Live_Wgt_Received);
  PARAMETER(WRK.BOL_Trucker_Payment_Sts);
  PARAMETER(DB1.BOL_Trucker_Check_Number);
  PARAMETER(DB1.BOL_Trucker_Check_Date);
  PARAMETER(DB1.BOL_AP_Voucher);
  PARAMETER(DB1.BOL_Trailer);
  PARAMETER(DB1.BOL_Freight_Exp_Paid_By);
  PARAMETER(DB1.BOL_Scheduled_Kill_Shift);
  PARAMETER(DB1.BOL_Truck_Scale_Weigh_Sts);
  PARAMETER(DB1.BOL_Violated_Auth_Tme_Sts);
  PARAMETER(DB1.TRK_Trucker_Code);
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.PL_Location_Code);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

}


EXECUTE FUNCTION(Rtv Dtl hd/Chg Pen    RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1110385;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.Pen_Number);
{
 //?USER: Initialize routine

 EXECUTE FUNCTION(Set Pen Totals to Zeros) TYPE(RTVOBJ) FILE(PKA3REP)            AB1110376;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.Pen_Number);
 PARAMETER(*ZERO);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Pen               CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1102758;
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(WRK.Blank_USR);
  PARAMETER(DB1.Pen_Maximun_Capacity);
  PARAMETER(*ZERO);
  PARAMETER(DB1.Pen_Current_Drive_Card_No);
  PARAMETER(DB1.Pen_Sts);
  PARAMETER(DB1.Pen_Drive_Sequence);
  PARAMETER(DB1.Pen_Type);
  PARAMETER(DB1.Pen_Adjustment);
  PARAMETER(WRK.Blank_USR);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 //?USER: Processing if Data record not found

 // WRK.Pen Description = CON.*BLANK
 WRK.Pen_Description = *BLANK;

 // WRK.GN Genetic Code = CON.*BLANK
 WRK.GN_Genetic_Code = *BLANK;

 EXECUTE FUNCTION(Chg Pen Genetics      CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1119678;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.Pen_Number);
 PARAMETER(WRK.Pen_Description);
 PARAMETER(WRK.GN_Genetic_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv/Chg Pen Totals    RT) TYPE(RTVOBJ) FILE(PKA3REP)           AB1110372;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.Pen_Number);
 PARAMETER(DB1.TD_Pen_Head);
 PARAMETER(DB1.TD_Yard_Dead);
 {
  //?USER: Process Data record

  // WRK.Pen Current Head = PAR.TD Pen Head + DB1.Pen Current Head
  WRK.Pen_Current_Head = PAR.TD_Pen_Head + DB1.Pen_Current_Head;

  // WRK.Pen Current Head = WRK.Pen Current Head - PAR.TD Yard Dead
  WRK.Pen_Current_Head = WRK.Pen_Current_Head - PAR.TD_Yard_Dead;

  EXECUTE FUNCTION(Chg Pen               CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1102758;
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(DB1.Pen_Description);
  PARAMETER(DB1.Pen_Maximun_Capacity);
  PARAMETER(WRK.Pen_Current_Head);
  PARAMETER(DB1.Pen_Current_Drive_Card_No);
  PARAMETER(DB1.Pen_Sts);
  PARAMETER(DB1.Pen_Drive_Sequence);
  PARAMETER(DB1.Pen_Type);
  PARAMETER(DB1.Pen_Adjustment);
  PARAMETER(DB1.GN_Genetic_Code);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 //?USER: Exit processing

 // WRK.Pen Description = CON.*BLANK
 WRK.Pen_Description = *BLANK;

 // WRK.GN Genetic Code = CON.*BLANK
 WRK.GN_Genetic_Code = *BLANK;

 EXECUTE FUNCTION(Rtv Pen GENETICS      RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1107816;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.Pen_Number);
 PARAMETER(WRK.Pen_Description);
 PARAMETER(WRK.GN_Genetic_Code);
 {
  //?USER: Processing if Data record not found

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Pen_Description = *BLANK;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.GN_Genetic_Code = *BLANK;

  //?USER: Process Data record

  CASE;

  // IF DB1.TDP Process Code is Drive Card Printed
  IF DB1.TDP_Process_Code = 'D';

  // OR DB1.TDP Process Code is Open
  OR DB1.TDP_Process_Code = 'O';

  EXECUTE FUNCTION(Rtv Tattoo GENETICS) TYPE(RTVOBJ) FILE(PKA1CPP)                AB1107783;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(WRK.Genetic_Code_USR);
  PARAMETER(WRK.Pen_Desc_USR);
  {
   //?USER: Processing if Data record not found

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.GN_Genetic_Code = *BLANK;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Pen_Description = *BLANK;

   //?USER: Process Data record

   // PAR.GN Genetic Code = DB1.GN Genetic Code
   PAR.GN_Genetic_Code = DB1.GN_Genetic_Code;

   EXECUTE FUNCTION(Rtv Genetic Record    RT) TYPE(RTVOBJ) FILE(PKAIREP)           AB1107738;
   PARAMETER(DB1.GN_Genetic_Code);
   PARAMETER(PAR.Pen_Description);
   {
    //?USER: Processing if Data record not found

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.GN_Description = *BLANK;

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

  }

  CASE;

  // IF PAR.GN Genetic Code is BLANKS
  IF PAR.GN_Genetic_Code = *BLANK;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.GN_Genetic_Code = WRK.Genetic_Code_USR;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Pen_Description = WRK.Pen_Desc_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF WRK.Genetic Code USR NE PAR.GN Genetic Code
  IF WRK.Genetic_Code_USR <> PAR.GN_Genetic_Code;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Pen_Description = 'MIXED';

  ENDIF;

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(Chg Pen Genetics      CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1119678;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.Pen_Number);
 PARAMETER(WRK.Pen_Description);
 PARAMETER(WRK.GN_Genetic_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


