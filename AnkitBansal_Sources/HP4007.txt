     H debug(*yes)
     H option(*srcstmt:*nodebugio)
      *****************  RPG PROGRAM HEADING  ************************
      * SYSTEM:      Hog Production
      * PROGRAM:     HP4007
      * TITLE:       Specify BGF Targets to Copy
      * PROGRAMMER:  LeAnne Ramsey
      * CREATED:     09/25/07
      *
      * FUNCTION: Allows user to enter options for copying/duplicating data.
      *
      * NOTE: THIS IS A POP-UP WINDOW PROGRAM. PLEASE NOTE THAT IN
      *       WINDOW PROGRAMS THE RECORD FORMAT CONTAINING THE WINDOW
      *       DEFINITION MUST BE WRITTEN FIRST. SO, WE WRITE THE
      *       ERROR MESSAGE SUBFILE CONTROL RECORD FIRST FOLLOWED BY
      *       THE COMMAND LINE RECORD FORMAT.  THIS IS OPPOSITE OF
      *       THE NON-WINDOW PROGRAMS.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 09/18/07  LeAnne Ramsey
      *           Clean up code. Added F4=Prompt logic.
      *
      * 11/06/08  LeAnne Ramsey
      *           Recompile only. Added fields to HSP096.
      *
      * 05/28/09  LeAnne Ramsey
      *           Recompile only. Added 1 new field to HSP096-BGF Yearly Targets:
      *            1) farrowing crates
      *
      * 11/10/10  LeAnne Ramsey (E1151)
      *           Recompile only. Increased some head fields from 5,0 to 6,0 in HSP096.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhpd4007   cf   e             workstn infds(iofeed)
      *
      *
     Fhsp095    if   e           k disk
      * BGF target tables
      *
      *
     Fhsp096    if   e           k disk
      * BGF yearly targets
      *
      *
     Fhsl096a   if   e           k disk    rename(byrec:byreca)
      * BGF yearly targets
      *
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *
      *---------------------------------------------------------------
      *  Compile time array for SBMJOB used in QCMDEXC
      *---------------------------------------------------------------
     D cmd             s              1    dim(80) ctdata perrcd(80)
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D maxmsg          s              2  0  inz(20)
      *
      *
      * Control fields
      *
     D warnfl          s              1     inz('N')
     D svfcdyr         s                   like(d1fcdyr)
     D svtcdyr         s                   like(d1fcdyr)
     D svfttbcd        s                   like(d1fttbcd)
     D svtttbcd        s                   like(d1fttbcd)
      *
      *
      * Parms
      *
     D xxcdyr          s                   like(d1fcdyr)
     D xxalphyear      s              4
     D xxttbcd         s                   like(d1fttbcd)
     D xxttbds         s             25
      *
     D rtncd           s              2
     D xxjobq          s             10     inz('*JOBD     ')
      *
      *  Parms for use with QCMDEXC.  'LENGTH' is the length of the
      *  command that will be issued with QCMDEXC.  QCMDEXC requires
      *  the field containing length to be defined as 15 with 5 decimal
      *  positions.  The field 'CMDSBM' will hold the values of the
      *  submit job command when passed as a parm on the call to
      *  QCMDEXC.
      *
     D length          s             15  5 inz(80)
     D cmdsbm          s             80
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      * Data areas
      *---------------------------------------------------------------
      *
      * Local data area.
      *
     Dlda             uds                  dtaara(*lda)
     D  ldfcdyr                1      4  0
     D  ldfttbcd               5      9
      *
     D  ldtcdyr               10     13  0
     D  ldtttbcd              14     18
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /eject
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo
      /eject
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      *  Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to CRT.
      *
     C                   write     hp4007ec
     C                   write     hp4007k1
     C                   exfmt     hp4007r1
      *
      * Clear messages
     C                   exsr      $clmsg
      *
      *
      * Get user's input and set routine
      *
     C                   select
      *
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
      *
     C                   when      *in08 = *on                                  F8-submit
     C                   exsr      $edit1
     C                   if        error = 0 and warnfl = no
     C                   exsr      $proc1
     C                   else
     C                   eval      routne = scrn1
     C                   endif
     C                   other
      *
     C                   exsr      $edit1
     C                   eval      routne = scrn1
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Edit screen 1
      *---------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * FROM/TO Year
     C                   exsr      $fcdyr
     C                   exsr      $tcdyr
      *
      * FROM/TO Target Table
      *
     C                   exsr      $fttbcd
     C                   exsr      $tttbcd
      *
      * Validate that all froms/tos are not identical
      *
     C                   if        error = 0
     C                   exsr      $allsame
     C                   endif
      *
      * Check to see if you will be overlaying existing data.
      *
     C                   if        error = 0
     C                   exsr      $overlay
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate From Year
      *---------------------------------------------------------------
      *
     C     $fcdyr        begsr
      *
     C                   select
     C                   when      d1fcdyr = 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
      *
     C                   when      d1fcdyr < 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
      * Are there ANY targets for this year?
      *
     C     d1fcdyr       chain     hsl096a                            92
     C                   if        *in92 = *on                                  If no targets
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS02030'     mgid(e)
     C                   clear                   mgw
     C                   move      d1fcdyr       xxalphyear
     C                   movea     xxalphyear    mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If no targets
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate To Year
      *---------------------------------------------------------------
      *
     C     $tcdyr        begsr
      *
     C                   select
     C                   when      d1tcdyr = 0
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
      *
     C                   when      d1tcdyr < 0
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   endsl
      *
      * If From/To Years are both valid, verify that the TO year
      * is not prior to the FROM year.
      *
     C                   if        *in31 = *off and *in32 = *off
     C                             and d1tcdyr < d1fcdyr
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS02027'
     C                   endif
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate FROM Target Table
      *---------------------------------------------------------------
      *
     C     $fttbcd       begsr
      *
     C                   select
     C                   when      d1fttbcd = *blank
     C                   if        d1tttbcd <> *blank
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS02022'     mgid(e)
     C                   endif
     C                   endif
     C                   other
      *
      * The user has entered a FROM Target Table:
      *   1) The table must exist in the BGF Target Tables file
      *   2) The table must have yearly targets for the specified year
      *
     C     d1fttbcd      chain     hsp095                             92
     C                   if        *in92 = *on                                  If no master
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS01021'     mgid(e)
     C                   clear                   mgw
     C                   movea     d1fttbcd      mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If no master
      *
     C                   if        *in31 = *off                                 If from year OK
     C     key01         chain     hsp096                             92
     C                   if        *in92 = *on                                  If no targets
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS02021'     mgid(e)
     C                   clear                   mgw
     C                   movea     d1fttbcd      mgw(1)
     C                   move      d1fcdyr       xxalphyear
     C                   movea     xxalphyear    mgw(6)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If no targets
     C                   endif                                                  If from year OK
      *
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate TO Target Table
      *---------------------------------------------------------------
      *
     C     $tttbcd       begsr
      *
     C                   select
     C                   when      d1tttbcd = *blank
     C                   if        d1fttbcd <> *blank
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS02042'     mgid(e)
     C                   endif
     C                   endif
     C                   other
      *
      *
      * The user has entered a TO Target Table:
      *   1) The table must exist in the BGF Target Tables file
      *
     C     d1tttbcd      chain     hsp095                             92
     C                   if        *in92 = *on                                  If no master
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS01021'     mgid(e)
     C                   clear                   mgw
     C                   movea     d1tttbcd      mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If no master
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate that the 'froms' and 'tos' are not all the same
      *---------------------------------------------------------------
      *
     C     $allsame      begsr
      *
     C                   if        d1fcdyr = d1tcdyr and                        If same
     C                             d1fttbcd = d1tttbcd
     C                   seton                                        3234
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09179'     mgid(e)
     C                   endif
     C                   endif                                                  If same
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------------------------
      * Check to see if you will be overlaying existing data
      *---------------------------------------------------------------------------------
      *
     C     $overlay      begsr
      *
     C                   if        svfcdyr = d1fcdyr and                        If already warned
     C                             svtcdyr = d1tcdyr and
     C                             svfttbcd = d1fttbcd  and
     C                             svtttbcd = d1tttbcd
     C                   move      no            warnfl
     C                   else
      *
      * Check to see if you will be overlaying existing data with this copy.
      * If so, we will display an on-screen message 1 time.
      *
     C                   select
     C                   when      d1tttbcd <> *blank
     C     key02         chain     hsp096                             92
     C                   other
      *
     C     d1tcdyr       chain     hsl096a                            92
     C                   endsl
      *
     C                   if        *in92 = *off
     C                   move      yes           warnfl
     C                   seton                                        39
     C                   endif
      *
      * Save the screen fields. This allows us to make the check/warning
      * only 1 time for each 'set' of values entered by the user.
      *
     C                   z-add     d1fcdyr       svfcdyr
     C                   move      d1fttbcd      svfttbcd
      *
     C                   z-add     d1tcdyr       svtcdyr
     C                   move      d1tttbcd      svtttbcd
     C                   endif                                                  If already warned
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redispaly the screen to the user.
      *
     C                   if        *in43 = *on
     C                   movel     set1          routne
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redispaly the screen to the user.
      *
     C                   if        *in43 = *on
     C                   movel     set1          routne
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Set on last record indicator and end job
      *----------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Process user's request
      *---------------------------------------------------------------
      *
      * This subroutine is only executed if the user submits the copy
      *
     C     $proc1        begsr
      *
      * Move submission values into LDA
      *
     C                   z-add     d1fcdyr       ldfcdyr
     C                   z-add     d1tcdyr       ldtcdyr
     C                   move      d1fttbcd      ldfttbcd
     C                   move      d1tttbcd      ldtttbcd
      *
     C                   out       lda
      *
      * Move the 80-character compile time array 'CMD' to an
      * 80-character field for passing as a parm with QCMDEXC.
      *
      *
     C                   movea     xxjobq        cmd(51)
     C                   movea     cmd           cmdsbm
     C                   call      'QCMDEXC'
     C                   parm                    cmdsbm
     C                   parm                    length
      *
      * Issue the standard request submission message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09003'
      *
     C                   z-add     0             svfcdyr
     C                   move      *blank        svfttbcd
     C                   z-add     0             svtcdyr
     C                   move      *blank        svtttbcd
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * F4 prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
     C                   select
      * From Target table
     C                   when      fld = 'D1FTTBCD'
     C                   call      'HP5011'
     C                   parm      *blank        xxttbcd
     C                   parm      *blank        xxttbds
     C                   seton                                        53
     C                   if        xxttbcd <> *blank
     C                   move      xxttbcd       d1fttbcd
     C                   endif
      *
      * From Target table
     C                   when      fld = 'D1TTTBCD'
     C                   call      'HP5011'
     C                   parm      *blank        xxttbcd
     C                   parm      *blank        xxttbds
     C                   seton                                        54
     C                   if        xxttbcd <> *blank
     C                   move      xxttbcd       d1tttbcd
     C                   endif
     C                   other
      *
      * F4 not valid for this field...issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error                                        013
     C                   movel     'HS09011'     mgid(e)
     C                   endif
      *
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
     C     d1fttbcd      parm                    xxttbcd
     C     d1fcdyr       parm                    xxcdyr
     C                   parm                    rtncd
      *
      * If this is called for a specific Table, just default that Table into
      * the TO Table.
     C                   if        d1fttbcd <> *blank
     C                   move      d1fttbcd      d1tttbcd
     C                   endif
      *
     C     key01         klist
     C                   kfld                    d1fttbcd
     C                   kfld                    d1fcdyr
      *
     C     key02         klist
     C                   kfld                    d1tttbcd
     C                   kfld                    d1tcdyr
      *
      *
      * Initialize LDA fields
      *
     C                   z-add     0             ldfcdyr
     C                   z-add     0             ldtcdyr
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
      * This window logic keeps the screen in the calling program from being
      * cleared.
     C                   write     assume
      *
     C                   endsr
      /eject
      *****************************************************************
      * COMPILE TIME ARRAY 'CMD' USED IN QCMDEXC
      *****************************************************************
** CMD table 'CMD' submits listing when F8 selected
SBMJOB CMD(CALL PGM(HP4007CL)) JOB(COPYPRED) JOBQ(__________)
