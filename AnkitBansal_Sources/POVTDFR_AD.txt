// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POVTDFR
// ?Date: 14.08.2025 Time: 03:39:12
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('YR');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(Set Access            IF) TYPE(EXCINTFUN)                      AC1667888;
PARAMETER(PAR.User_Department);
PARAMETER(PAR.User_Access);
PARAMETER(PAR.Output_Production_USR);
PARAMETER(PAR.Output_Begin_Inv_USR);
PARAMETER(PAR.Output_Not_Used_USR);
PARAMETER(PAR.Output_Partial_Prod_USR);
PARAMETER(PAR.Output_Head_Cut_Wgt_USR);
PARAMETER(PAR.Output_Conv_Start_Wgt);
PARAMETER(PAR.Output_Comment_USR);
PARAMETER(PAR.Add_Partial_USR);
PARAMETER(PAR.Calculate_Yield_USR);
PARAMETER(PAR.Publish_Yield_USR);
{
 //?Execute internal function

 //?** Accounting has all access **
 // PAR.Output Production USR = CND.no
 PAR.Output_Production_USR = 'N';

 // PAR.Output Begin Inv USR = CND.no
 PAR.Output_Begin_Inv_USR = 'N';

 // PAR.Output Not Used USR = CND.no
 PAR.Output_Not_Used_USR = 'N';

 // PAR.Output Partial Prod USR = CND.no
 PAR.Output_Partial_Prod_USR = 'N';

 // PAR.Output Head Cut/Wgt USR = CND.no
 PAR.Output_Head_Cut_Wgt_USR = 'N';

 // PAR.Output Conv Start Wgt = CND.no
 PAR.Output_Conv_Start_Wgt = 'N';

 // PAR.Output Comment USR = CND.no
 PAR.Output_Comment_USR = 'N';

 // PAR.Add Partial USR = CND.yes
 PAR.Add_Partial_USR = 'Y';

 // PAR.Calculate Yield USR = CND.yes
 PAR.Calculate_Yield_USR = 'Y';

 // PAR.Publish Yield USR = CND.yes
 PAR.Publish_Yield_USR = 'Y';

 CASE;

 // IF PAR.User Department is Production
 IF PAR.User_Department = 'PR';

 // PAR.Output Production USR = CND.yes
 PAR.Output_Production_USR = 'Y';

 // PAR.Output Begin Inv USR = CND.yes
 PAR.Output_Begin_Inv_USR = 'Y';

 // PAR.Output Partial Prod USR = CND.yes
 PAR.Output_Partial_Prod_USR = 'Y';

 // PAR.Output Conv Start Wgt = CND.yes
 PAR.Output_Conv_Start_Wgt = 'Y';

 //?* Cannot enter Head Cut/Cold Weight *
 // PAR.Output Head Cut/Wgt USR = CND.yes
 PAR.Output_Head_Cut_Wgt_USR = 'Y';

 // IF PAR.User Department is Main Break
 IF PAR.User_Department = 'MB';

 // PAR.Output Production USR = CND.yes
 PAR.Output_Production_USR = 'Y';

 // PAR.Output Begin Inv USR = CND.yes
 PAR.Output_Begin_Inv_USR = 'Y';

 // PAR.Output Partial Prod USR = CND.yes
 PAR.Output_Partial_Prod_USR = 'Y';

 // PAR.Output Conv Start Wgt = CND.yes
 PAR.Output_Conv_Start_Wgt = 'Y';

 // IF PAR.User Department is Converting
 IF PAR.User_Department = 'CV';

 // PAR.Output Production USR = CND.yes
 PAR.Output_Production_USR = 'Y';

 // PAR.Output Begin Inv USR = CND.yes
 PAR.Output_Begin_Inv_USR = 'Y';

 // PAR.Output Not Used USR = CND.yes
 PAR.Output_Not_Used_USR = 'Y';

 // PAR.Output Partial Prod USR = CND.yes
 PAR.Output_Partial_Prod_USR = 'Y';

 // PAR.Output Head Cut/Wgt USR = CND.yes
 PAR.Output_Head_Cut_Wgt_USR = 'Y';

 // PAR.Output Comment USR = CND.yes
 PAR.Output_Comment_USR = 'Y';

 // PAR.Add Partial USR = CND.no
 PAR.Add_Partial_USR = 'N';

 // PAR.Calculate Yield USR = CND.no
 PAR.Calculate_Yield_USR = 'N';

 // PAR.Publish Yield USR = CND.no
 PAR.Publish_Yield_USR = 'N';

 // IF PAR.User Department is Product Manager
 IF PAR.User_Department = 'PM';

 // PAR.Output Production USR = CND.yes
 PAR.Output_Production_USR = 'Y';

 // PAR.Output Begin Inv USR = CND.yes
 PAR.Output_Begin_Inv_USR = 'Y';

 // PAR.Output Not Used USR = CND.yes
 PAR.Output_Not_Used_USR = 'Y';

 // PAR.Output Partial Prod USR = CND.yes
 PAR.Output_Partial_Prod_USR = 'Y';

 // PAR.Output Head Cut/Wgt USR = CND.yes
 PAR.Output_Head_Cut_Wgt_USR = 'Y';

 // PAR.Output Conv Start Wgt = CND.yes
 PAR.Output_Conv_Start_Wgt = 'Y';

 // PAR.Output Comment USR = CND.yes
 PAR.Output_Comment_USR = 'Y';

 // PAR.Add Partial USR = CND.no
 PAR.Add_Partial_USR = 'N';

 // PAR.Calculate Yield USR = CND.no
 PAR.Calculate_Yield_USR = 'N';

 // PAR.Publish Yield USR = CND.no
 PAR.Publish_Yield_USR = 'N';

 ENDIF;

}


// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// LCL.Select Options USR = CON.8=FG/WP Transactions
LCL.Select_Options_USR = '8=FG/WP Transactions';

// LCL.Select Options USR = CONCAT(LCL.Select Options USR,CON.9=Adjustments,CON.1)
LCL.Select_Options_USR = LCL.Select_Options_USR + '9=Adjustments' (1);

//?USER: Initialize subfile control

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(CTL.Company_Name_DRV);
PARAMETER(CTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Department Desc DRV) TYPE(DRVFLD)                              AC1666904;
PARAMETER(CTL.Department_Desc_DRV);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Prod Dept Name    RT) TYPE(RTVOBJ) FILE(PDI5REP)           AC1286709;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Department_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Production Line Desc DRV) TYPE(DRVFLD)                         AC1666905;
PARAMETER(CTL.Production_Line_Desc_DRV);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Line_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Prod Line Desc    RT) TYPE(RTVOBJ) FILE(POCMREP)           AC1666906;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Production_Line_Code);
 PARAMETER(PAR.Production_Line_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Rtv Total Produced    RT) TYPE(RTVOBJ) FILE(POCPCPP)           AC1667183;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Line_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER(CTL.Wgt_Produced_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Item Type Code is FG/WP
 IF DB1.Item_Type_Code = 'FG'/'WP';

 CASE;

 // IF DB1.Yld Transaction Weight is Greater than zero
 IF DB1.Yld_Transaction_Weight > *ZERO;

 // PAR.Wgt Produced USR = PAR.Wgt Produced USR + DB1.Yld Transaction Weight
 PAR.Wgt_Produced_USR = PAR.Wgt_Produced_USR + DB1.Yld_Transaction_Weight;

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Ship Co FR WHS    RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1714992;
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Warehouse_Code);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Warehouse Type is Fresh
 IF DB1.Warehouse_Type = 'FR';

 // AND DB1.Warehouse Location is Internal (Plant)
 AND DB1.Warehouse_Location = 'I';

 // AND DB1.Production Warehouse Code is Warehouse Code Blank
 AND DB1.Production_Warehouse_Code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


//?USER: Initialize subfile record from DBF record

// RCD.Text USR 40 = RCD.Yld Transaction Comment
RCD.Text_USR_40 = RCD.Yld_Transaction_Comment;

// RCD.Qty Produced          USR = RCD.Yld Transaction Quantity
RCD.Qty_Produced_USR = RCD.Yld_Transaction_Quantity;

// RCD.Wgt Produced USR = RCD.Yld Transaction Weight
RCD.Wgt_Produced_USR = RCD.Yld_Transaction_Weight;

EXECUTE FUNCTION(Item Description DRV) TYPE(DRVFLD)                             AC1633414;
PARAMETER(RCD.Item_Description_DRV);
PARAMETER(RCD.Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Description   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1325690;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Description_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Item Code DRV) TYPE(DRVFLD)                                    AC1670444;
PARAMETER(RCD.Item_Code_DRV);
PARAMETER(RCD.Item_Code);
{
 //?Calculate derived field

 // LCL.Number 5,0            USR = PAR.Item Code
 LCL.Number_50_USR = PAR.Item_Code;

 // LCL.Text USR 5 = CVTVAR(LCL.Number 5,0            USR)
 LCL.Text_USR_5 = CVTVAR(LCL.Number_50_USR);

 // PAR.Item Code DRV = LCL.Text USR 5
 PAR.Item_Code_DRV = LCL.Text_USR_5;

}


//?USER: Process subfile control (Pre-confirm)

//?F5=Refresh
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?F9=Create
CASE;

// IF CTL.*CMD key is CF09
IF CTL.*CMD_key = '09';

CASE;

// IF PAR.Add Partial USR is no
IF PAR.Add_Partial_USR = 'N';

// Send error message - 'Function not allowed.'
ERROR(USR1833);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Zzz Item Production   PV.
CALL PROGRAM(Zzz Item Production   PV) ('POXRPVR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Line_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?8=Display Item Transactions
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

// Call program Dsp Transaction   WEB DF.
CALL PROGRAM(Dsp Transaction   WEB DF) ('POWXDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Item_Description_DRV);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?9=Display Item Adjustments
CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

// Call program Zzz Item Adjustments  DF.
CALL PROGRAM(Zzz Item Adjustments  DF) ('POYUDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Production_Line_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Production_Shift);
PARAMETER(RCD.Item_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?CHG:  Record
CASE;

// IF RCD.Yld Transaction Comment NE RCD.Text USR 40
IF RCD.Yld_Transaction_Comment <> RCD.Text_USR_40;

// OR RCD.Yld Transaction Quantity NE RCD.Qty Produced          USR
OR RCD.Yld_Transaction_Quantity <> RCD.Qty_Produced_USR;

// OR RCD.Yld Transaction Weight NE RCD.Wgt Produced USR
OR RCD.Yld_Transaction_Weight <> RCD.Wgt_Produced_USR;

EXECUTE FUNCTION(Chg Production        IF) TYPE(EXCINTFUN)                      AC1667867;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Production_Line_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Production_Shift);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Partial_Item_Code);
PARAMETER(RCD.Yld_Transaction_Code);
PARAMETER(RCD.Yld_Transaction_Seq);
PARAMETER(RCD.Yld_Transaction_Quantity);
PARAMETER(RCD.Yld_Transaction_Weight);
PARAMETER(RCD.Yld_Transaction_Comment);
PARAMETER(RCD.Yld_Transaction_Source);
PARAMETER(RCD.Item_Type_Code);
PARAMETER(RCD.Credit_Item_Status);
PARAMETER(RCD.Yld_Transaction_Post_Sts);
PARAMETER(RCD.Item_Structure_Type_Code);
PARAMETER(RCD.Item_Structure_Group_Code);
PARAMETER(RCD.Item_Structure_Class_Code);
PARAMETER(RCD.Qty_Produced_USR);
PARAMETER(RCD.Wgt_Produced_USR);
PARAMETER(RCD.Text_USR_40);
{
 //?Execute internal function

 //?Create Adjustment Record
 CASE;

 // IF PAR.Yld Transaction Quantity NE PAR.Qty Produced          USR
 IF PAR.Yld_Transaction_Quantity <> PAR.Qty_Produced_USR;

 // OR PAR.Yld Transaction Weight NE PAR.Wgt Produced USR
 OR PAR.Yld_Transaction_Weight <> PAR.Wgt_Produced_USR;

 // PAR.Transaction Quantity = PAR.Qty Produced          USR - PAR.Yld Transaction Quantity
 PAR.Transaction_Quantity = PAR.Qty_Produced_USR - PAR.Yld_Transaction_Quantity;

 // PAR.Transaction Weight = PAR.Wgt Produced USR - PAR.Yld Transaction Weight
 PAR.Transaction_Weight = PAR.Wgt_Produced_USR - PAR.Yld_Transaction_Weight;

 EXECUTE FUNCTION(Crt Yld Adjustment    IF) TYPE(EXCINTFUN)                      AC1667868;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Production_Line_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Production_Shift);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Partial_Item_Code);
 PARAMETER(PAR.Yld_Transaction_Code);
 PARAMETER(PAR.Transaction_Quantity);
 PARAMETER(PAR.Transaction_Weight);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Seq Num      RT) TYPE(RTVOBJ) FILE(POCUCPP)           AC1667873;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Partial_Item_Code);
  PARAMETER(PAR.Yld_Transaction_Code);
  PARAMETER(PAR.Yld_Transaction_Seq);
  {
   //?USER: Processing if Data record not found

   // PAR.Yld Transaction Seq = CON.1
   PAR.Yld_Transaction_Seq = 1;

   //?USER: Process Data record

   // PAR.Yld Transaction Seq = DB1.Yld Transaction Seq + CON.1
   PAR.Yld_Transaction_Seq = DB1.Yld_Transaction_Seq + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Yld Adjustment    CR) TYPE(CRTOBJ) FILE(POCUCPP)           AC1664350;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Partial_Item_Code);
  PARAMETER(PAR.Yld_Transaction_Code);
  PARAMETER(PAR.Yld_Transaction_Seq);
  PARAMETER(PAR.Transaction_Quantity);
  PARAMETER(PAR.Transaction_Weight);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 ENDIF;

 EXECUTE FUNCTION(RTV Pces/Bag,Bag/Unit  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1480428;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(NLL.Description_Line_One);
 PARAMETER(LCL.Unit_Weight);
 PARAMETER(LCL.Piece_Count_Item);
 PARAMETER(LCL.Pieces_Per_Bag);
 PARAMETER(LCL.Bags_Per_Unit);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Calculate Pieces
 CASE;

 // IF PAR.Item Type Code is Finished Goods
 IF PAR.Item_Type_Code = 'FG';

 // Compute:Trans pieces
 PAR.Yld_Transaction_Pieces = ( PAR.Qty_Produced_USR * LCL.Pieces_Per_Bag 'H' )
 * LCL.Bags_Per_Unit 'H';

 //?Calculate Pieces
 // IF PAR.Item Type Code is Work in Process
 IF PAR.Item_Type_Code = 'WP';

 // Compute:Trans pieces
 PAR.Yld_Transaction_Pieces = ( PAR.Wgt_Produced_USR / LCL.Unit_Weight 'H' ) (
 LCL.Pieces_Per_Bag * LCL.Bags_Per_Unit 'H' ) 'H';

 ENDIF;

 EXECUTE FUNCTION(Chg Production        CH) TYPE(CHGOBJ) FILE(POCPCPP)           AC1665442;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Production_Line_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Production_Shift);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Partial_Item_Code);
 PARAMETER(PAR.Yld_Transaction_Code);
 PARAMETER(PAR.Yld_Transaction_Seq);
 PARAMETER(PAR.Qty_Produced_USR);
 PARAMETER(PAR.Wgt_Produced_USR);
 PARAMETER(PAR.Yld_Transaction_Pieces);
 PARAMETER(PAR.Text_USR_40);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process command keys

CASE;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

// Call program PMT Print Option  WEB PV.
CALL PROGRAM(PMT Print Option  WEB PV) ('POT2PVR');
PARAMETER('Production');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('YR');

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
PGM.*Sbmjob_override_string = RTVMSG(USR2684);
PARAMETER('PRTYLDPRD');
PARAMETER(*JOBD);
PARAMETER(*JOBD_JOBD_JOBD);
PARAMETER(*JOBD);

// LCL.Copies NBR USR = PAR.PRT Number of Copies
LCL.Copies_NBR_USR = PAR.PRT_Number_of_Copies;

// Call program Zzz Yield Reports     UP.
SBMJOB;
CALL PROGRAM(Zzz Yield Reports     UP) ('POWVUPR');
PARAMETER('POWUPFR$');
PARAMETER('POWUPFR');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(LCL.Copies_NBR_USR);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Line_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
SBMJOBEND;

ENDIF;

ENDIF;

//?F8=Next
CASE;

// IF CTL.*CMD key is SUBMIT/NEXT
IF CTL.*CMD_key = '08';

// PAR.Yld Program USR = CND.Inventory Reconcile
PAR.Yld_Program_USR = 'IR';

RETURN;

ENDIF;

//?F7=Back
CASE;

// IF CTL.*CMD key is BACK
IF CTL.*CMD_key = '07';

CASE;

// IF PAR.Department Code is Loin Boning
IF PAR.Department_Code = 'LOINS';

// PAR.Yld Program USR = CND.Loin Boning Input Worksht
PAR.Yld_Program_USR = 'LB';

// IF PAR.Production Line Code is Bone-In Loin
IF PAR.Production_Line_Code = 'BILOIN';

// PAR.Yld Program USR = CND.Loin Boning Dsply Worksht
PAR.Yld_Program_USR = 'LD';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Yld Program USR = CND.End of Shift
PAR.Yld_Program_USR = 'ES';

ENDIF;

RETURN;

ENDIF;

//?USER: Exit program processing

//?F3=Back
CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

// PAR.Yld Program USR = CND.Exit
PAR.Yld_Program_USR = 'EX';

RETURN;

ENDIF;

