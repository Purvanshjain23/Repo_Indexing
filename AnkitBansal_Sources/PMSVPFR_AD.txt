// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMSVPFR
// ?Date: 14.08.2025 Time: 12:05:44
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?E00112 03/10/08 RMC - NEW function - workfile built in pmsuupc/pmstxfr for
//?  FG trans total RR/AP/A/RR- for trans that came up for a prod date range
//?   after the prod to date
//?  3/25/08 Calc $Cost for AP and A columns
EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('C/S');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


//?USER: On print of first page format

MOVE *ALL (To: 1PG From: PAR);

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(X1PG_Company_Name_DRV);
PARAMETER(X1PG_Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Print required level headings

CASE;

IF NEW Company_Number;
// Print Company Number header format
PRINT Company Number header format;

ENDIF;

CASE;

IF NEW Pckg_Type_Class;
// CUR.Condition Desc. 1  USR = Condition name of CUR.Pckg Type Class
CUR.Condition_Desc_1_USR = RTVCND(CUR.Pckg_Type_Class);

// Print Pckg Type Class header format
PRINT Pckg Type Class header format;

ENDIF;

// SUPPRESSED PRINT Packaging Item Code header format

//?USER: On print of detail format

EXECUTE FUNCTION(Rtv Calc Adj Usage    RT) TYPE(RTVOBJ) FILE(POAZCPP)           AC1871643;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Packaging_Item_Code);
PARAMETER(PAR.Date_From_USR);
PARAMETER(PAR.Date_To_USR);
PARAMETER(CUR.Standard_Usage_USR);
PARAMETER(CUR.USR_Adjustment_Count_2);
PARAMETER(CUR.USR_Adjustment_Count_3);
PARAMETER(CUR.USR_Adjustment_Count_4);
PARAMETER(CUR.USR_Adjustment_Count_5);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Summ for Var Rpt  RT) TYPE(RTVOBJ) FILE(PMALCPP)           AC1871297;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.WF_Trans_Total_type_RR_qt);
 PARAMETER(LCL.WF_Trans_Total_type_A_qty);
 PARAMETER(LCL.WF_Trans_Total_type_AP_qt);
 PARAMETER(LCL.WF_ISC_Part_Rej_Curr_Qty);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.WF Trans Total type RR qt = PAR.WF Trans Total type RR qt + DB1.WF Trans Total type RR qt
  PAR.WF_Trans_Total_type_RR_qt = PAR.WF_Trans_Total_type_RR_qt
  + DB1.WF_Trans_Total_type_RR_qt;

  // PAR.WF Trans Total type AP qt = PAR.WF Trans Total type AP qt + DB1.WF Trans Total type AP qt
  PAR.WF_Trans_Total_type_AP_qt = PAR.WF_Trans_Total_type_AP_qt
  + DB1.WF_Trans_Total_type_AP_qt;

  // PAR.WF Trans Total type A qty = PAR.WF Trans Total type A qty + DB1.WF Trans Total type A qty
  PAR.WF_Trans_Total_type_A_qty = PAR.WF_Trans_Total_type_A_qty
  + DB1.WF_Trans_Total_type_A_qty;

  //?This is -RR = rework
  // PAR.WF ISC Part/Rej Curr Qty = PAR.WF ISC Part/Rej Curr Qty + DB1.WF ISC Part/Rej Curr Qty
  PAR.WF_ISC_Part_Rej_Curr_Qty = PAR.WF_ISC_Part_Rej_Curr_Qty
  + DB1.WF_ISC_Part_Rej_Curr_Qty;

 }

 // Compute: RR  Usage,Accum
 PAR.Standard_Usage_USR = ( ( LCL.WF_Trans_Total_type_RR_qt
 + LCL.WF_ISC_Part_Rej_Curr_Qty ) * DB1.Packaging_Item_Quantity ) + PAR.Standard_Usage_USR;

 // Comp: RR  pkging used
 PAR.USR_Adjustment_Count_2 = PAR.USR_Adjustment_Count_2 + (
 LCL.WF_Trans_Total_type_RR_qt * DB1.Packaging_Item_Quantity );

 // Comp: RR- pkging used
 PAR.USR_Adjustment_Count_3 = PAR.USR_Adjustment_Count_3 + ( LCL.WF_ISC_Part_Rej_Curr_Qty
 * DB1.Packaging_Item_Quantity );

 // Comp: AP  pkging used
 PAR.USR_Adjustment_Count_4 = PAR.USR_Adjustment_Count_4 + (
 LCL.WF_Trans_Total_type_AP_qt * DB1.Packaging_Item_Quantity );

 // Comp: A   pkging used
 PAR.USR_Adjustment_Count_5 = PAR.USR_Adjustment_Count_5 + (
 LCL.WF_Trans_Total_type_A_qty * DB1.Packaging_Item_Quantity );

}


// Compute:RR/RR- Total
CUR.Standard_Usage_USR = CUR.USR_Adjustment_Count_2 + CUR.USR_Adjustment_Count_3;

EXECUTE FUNCTION(Rtv Cost by Eff Dt    RT) TYPE(RTVOBJ) FILE(POCDCPP)           AC1655809;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Packaging_Item_Code);
PARAMETER(PAR.Date_To_USR);
PARAMETER(LCL.Pckg_Unit_Cost);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// CUR.Standard $ Usage      USR = CUR.Standard Usage        USR * LCL.Pckg Unit Cost *
CUR.Standard_$_Usage_USR = CUR.Standard_Usage_USR * LCL.Pckg_Unit_Cost;

// CUR.Adj $ Usage - AP     usr = CUR.USR Adjustment Count 4 * LCL.Pckg Unit Cost *
CUR.Adj_$_Usage_AP_usr = CUR.USR_Adjustment_Count_4 * LCL.Pckg_Unit_Cost;

// CUR.Adj $ Usage - A      usr = CUR.USR Adjustment Count 5 * LCL.Pckg Unit Cost *
CUR.Adj_$_Usage_A_usr = CUR.USR_Adjustment_Count_5 * LCL.Pckg_Unit_Cost;

//?Dont print item if no trans are found
CASE;

// IF CUR.USR Adjustment Count 2 is eq 0
IF CUR.USR_Adjustment_Count_2 = 0;

// AND CUR.USR Adjustment Count 3 is eq 0
AND CUR.USR_Adjustment_Count_3 = 0;

// AND CUR.USR Adjustment Count 4 is eq 0
AND CUR.USR_Adjustment_Count_4 = 0;

// AND CUR.USR Adjustment Count 5 is eq 0
AND CUR.USR_Adjustment_Count_5 = 0;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

//?USER: Process after print of detail format

NXT.Qty_Produced_SUM = SUM(CUR.USR_Adjustment_Count_2);

NXT.Qty_Produced_SUM_2 = SUM(CUR.USR_Adjustment_Count_3);

NXT.Qty_Adjusted_SUM = SUM(CUR.USR_Adjustment_Count_4);

NXT.Qty_Adjusted_SUM_2 = SUM(CUR.USR_Adjustment_Count_5);

NXT.Standard_Usage_SUM = SUM(CUR.Standard_Usage_USR);

NXT.Standard_$_Usage_SUM = SUM(CUR.Standard_$_Usage_USR);

NXT.Adj_$_Usage_AP_SUM = SUM(CUR.Adj_$_Usage_AP_usr);

NXT.Adj_$_Usage_A_SUM = SUM(CUR.Adj_$_Usage_A_usr);

//?USER: Print required level totals

// SUPPRESSED PRINT Packaging Item Code totals format

CASE;

IF NEW Pckg_Type_Class;
// Print Pckg Type Class totals format
PRINT Pckg Type Class totals format;

NXT.Qty_Produced_SUM = SUM(CUR.Qty_Produced_SUM);

NXT.Qty_Produced_SUM_2 = SUM(CUR.Qty_Produced_SUM_2);

NXT.Qty_Adjusted_SUM = SUM(CUR.Qty_Adjusted_SUM);

NXT.Qty_Adjusted_SUM_2 = SUM(CUR.Qty_Adjusted_SUM_2);

NXT.Standard_Usage_SUM = SUM(CUR.Standard_Usage_SUM);

NXT.Standard_$_Usage_SUM = SUM(CUR.Standard_$_Usage_SUM);

NXT.Adj_$_Usage_AP_SUM = SUM(CUR.Adj_$_Usage_AP_SUM);

NXT.Adj_$_Usage_A_SUM = SUM(CUR.Adj_$_Usage_A_SUM);

ENDIF;

// SUPPRESSED PRINT Company Number totals format

