// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDB2PVR
// ?Date: 14.08.2025 Time: 03:33:58
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?FP1054
EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('P/S');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

//?USER: Load screen

CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

// DTL.PPS Reallocate Sts USR = CND.By Sch Ship/DDt,new 2009
DTL.PPS_Reallocate_Sts_USR = 3;

// DTL.Condition Desc. 1  USR = Condition name of DTL.PPS Reallocate Sts USR
DTL.Condition_Desc_1_USR = RTVCND(DTL.PPS_Reallocate_Sts_USR);

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

ENDIF;

// DTL.Company Number = PAR.Company Number
DTL.Company_Number = PAR.Company_Number;

//?CALC: Screen function fields

// DTL.Condition Desc. 1  USR = Condition name of DTL.PPS Reallocate Sts USR
DTL.Condition_Desc_1_USR = RTVCND(DTL.PPS_Reallocate_Sts_USR);

//?USER: User defined action

//?***** NEW for FP1054 to get TO date
EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
PARAMETER(PAR.Company_Number);
PARAMETER('CURKILLDTE');
PARAMETER(LCL.System_Value_Numeric);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Kill Date CUR USR = LCL.System Value Numeric
LCL.Kill_Date_CUR_USR = LCL.System_Value_Numeric;

EXECUTE FUNCTION(Rtv Prev Kill Date    RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1395074;
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Kill_Date_CUR_USR);
PARAMETER(LCL.Kill_Date_PRV_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Post to G/L Date EQ PAR.Post to G/L Date
 IF DB1.Post_to_G_L_Date = PAR.Post_to_G_L_Date;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Kill Day Status is yes
 IF DB1.Kill_Day_Status = 'Y';

 // PAR.Kill Date PRV USR = DB1.Post to G/L Date
 PAR.Kill_Date_PRV_USR = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

 ENDIF;

}


// LCL.Kill Date = LCL.Kill Date PRV USR
LCL.Kill_Date = LCL.Kill_Date_PRV_USR;

EXECUTE FUNCTION(RTV Next Kill Date     RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1336433;
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Kill_Date);
PARAMETER(LCL.Kill_Date_RGF);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Post to G/L Date EQ PAR.Post to G/L Date
 IF DB1.Post_to_G_L_Date = PAR.Post_to_G_L_Date;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Kill Day Status is yes
 IF DB1.Kill_Day_Status = 'Y';

 // PAR.Kill Date = DB1.Post to G/L Date
 PAR.Kill_Date = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

 ENDIF;

}


// LCL.*Duration (factor) = CON.40
LCL.*Duration_factor = 40;

EXECUTE FUNCTION(RTV KillDay Dte-Durtn  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1369299;
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Kill_Date_RGF);
PARAMETER(LCL.*Duration_factor);
PARAMETER(LCL.Kill_Date_RGT);
{
 //?USER: Initialize routine

 // WRK.Count USR = CON.*ZERO
 WRK.Count_USR = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF WRK.Count USR EQ PAR.*Duration (factor)
 IF WRK.Count_USR = PAR.*Duration_factor;

 // PAR.*DATE = DB1.Post to G/L Date
 PAR.*DATE = DB1.Post_to_G_L_Date;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Prdctn Dt w/Kill  RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1299920;
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Kill_Date);
PARAMETER(LCL.Production_Date);
{
 //?USER: Initialize routine

 // WRK.First Time Flag = CND.Yes
 WRK.First_Time_Flag = 'Y';

 //?USER: Process Data record

 CASE;

 // IF WRK.First Time Flag is Yes
 IF WRK.First_Time_Flag = 'Y';

 // WRK.First Time Flag = CND.NO
 WRK.First_Time_Flag = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Production Day Status is yes
 IF DB1.Production_Day_Status = 'Y';

 // PAR.Production Date = DB1.Post to G/L Date
 PAR.Production_Date = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

 ENDIF;

}


// LCL.Production Date RGF = LCL.Production Date
LCL.Production_Date_RGF = LCL.Production_Date;

// LCL.*Duration (factor) = CON.40
LCL.*Duration_factor = 40;

EXECUTE FUNCTION(Rtv PrdDay Dte -Durtn RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1369297;
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Production_Date_RGF);
PARAMETER(LCL.*Duration_factor);
PARAMETER(LCL.Production_Date_RGT);
{
 //?USER: Initialize routine

 // WRK.Count USR = CON.*ZERO
 WRK.Count_USR = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF WRK.Count USR EQ PAR.*Duration (factor)
 IF WRK.Count_USR = PAR.*Duration_factor;

 // PAR.*DATE = DB1.Post to G/L Date
 PAR.*DATE = DB1.Post_to_G_L_Date;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

}


//?***** END NEW
// Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
PGM.*Sbmjob_override_string = RTVMSG(USR2684);
PARAMETER('REALCORD');
PARAMETER(*JOBD);
PARAMETER('4 00 *SECLVL');
PARAMETER(*JOBD);

CASE;

// IF DTL.PPS Reallocate Sts USR is By Scheduled Production
IF DTL.PPS_Reallocate_Sts_USR = '1';

// IF DTL.PPS Reallocate Sts USR is By Ship Date
IF DTL.PPS_Reallocate_Sts_USR = '2';

// IF DTL.PPS Reallocate Sts USR is By Sch Ship/DDt,new 2009
IF DTL.PPS_Reallocate_Sts_USR = '3';

// LCL.Production Date RGT = JOB.*Job date + CON.40 *DAYS
LCL.Production_Date_RGT = DATEINCR(JOB.*Job_date 40 'DY' 1111111 'NONE' 'N' 1);

// Execute command - 'CLRPFM'
EXECUTE COMMAND(USR2862);
PARAMETER('PME6CPP');

// Call program BPS Order Det Bld Sch XF.
SBMJOB;
CALL PROGRAM(BPS Order Det Bld Sch XF) ('PMD1XFR');
PARAMETER(2);
PARAMETER(LCL.Production_Date_RGT);
SBMJOBOVR JOB(ORDREALC);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

ENDIF;

