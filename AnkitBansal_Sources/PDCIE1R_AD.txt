// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDCIE1R
// ?Date: 14.08.2025 Time: 03:31:10
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.Change Flag USR = CND.No
PAR.Change_Flag_USR = 'N';

EXECUTE FUNCTION(Rtv User Profile Info RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1785768;
PARAMETER(JOB.*USER);
PARAMETER(NLL.Description);
PARAMETER(NLL.System_Date_Format);
PARAMETER(NLL.Printer_Device_Str);
PARAMETER(LCL.Allow_Multi_Company);
PARAMETER(NLL.Application_WHS_Restrict);
PARAMETER(NLL.Credit_Hold_Authority);
PARAMETER(NLL.Production_Hold_Authority);
PARAMETER(NLL.Allow_Multi_Warehouse);
PARAMETER(NLL.Entity_Number);
PARAMETER(NLL.Default_Printer);
PARAMETER(NLL.Salesperson_Code);
PARAMETER(NLL.Company_Number);
PARAMETER(NLL.Enterprise_Code_1);
PARAMETER(NLL.Enterprise_Code_2);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(NLL.User_Code_Model);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize detail screen (existing record)

MOVE *ALL (To: DTL From: DB1);

// PAR.Container Number = DB1.Container Number
PAR.Container_Number = DB1.Container_Number;

//?** Trailer ID will now have Container# if this is an Export P000737
//?* Put trailer id into the screen field
// DTL.Trailer ID USR = DB1.Trailer Id
DTL.Trailer_ID_USR = DB1.Trailer_Id;

//?If Export use container number
CASE;

// IF DTL.Export Status is yes
IF DTL.Export_Status = 'Y';

CASE;

// IF DTL.Container Number is Entered
IF DTL.Container_Number <> *BLANK;

// DTL.Trailer ID USR = DB1.Container Number
DTL.Trailer_ID_USR = DB1.Container_Number;

ENDIF;

ENDIF;

//?Convert Trailer ID to all caps                        E004079
CASE;

// IF DTL.Trailer ID USR is Entered
IF DTL.Trailer_ID_USR <> *BLANK;

// LCL.Case Sensitive Field = DTL.Trailer ID USR
LCL.Case_Sensitive_Field = DTL.Trailer_ID_USR;

// Call program CVT to Upper Alpha 3   XF.
CALL PROGRAM(CVT to Upper Alpha 3   XF) ('PBSBXFR');
PARAMETER(LCL.Case_Sensitive_Field);
PARAMETER(LCL.Case_Upper_Field);

// DTL.Trailer ID USR = LCL.Case Upper Field
DTL.Trailer_ID_USR = LCL.Case_Upper_Field;

ENDIF;

//?Convert Container to all caps (if Exports)            E004079
CASE;

// IF DTL.Container Number is Entered
IF DTL.Container_Number <> *BLANK;

// LCL.Case Sensitive Field = DTL.Container Number
LCL.Case_Sensitive_Field = DTL.Container_Number;

// Call program CVT to Upper Alpha 3   XF.
CALL PROGRAM(CVT to Upper Alpha 3   XF) ('PBSBXFR');
PARAMETER(LCL.Case_Sensitive_Field);
PARAMETER(LCL.Case_Upper_Field);

// DTL.Container Number = LCL.Case Upper Field
DTL.Container_Number = LCL.Case_Upper_Field;

ENDIF;

//?If truck size is blank default it
CASE;

// IF DTL.Truck Size is Not Entered
IF DTL.Truck_Size = *BLANK;

//?Set truck default according to load type default
CASE;

// IF DTL.Load Type is Regular
IF DTL.Load_Type = 'R';

// DTL.Truck Size = CND.Standard
DTL.Truck_Size = 'T';

//?Set truck default according to load type default
// IF DTL.Load Type is Bulk
IF DTL.Load_Type = 'B';

// DTL.Truck Size = CND.Bulk
DTL.Truck_Size = 'B';

ENDIF;

ENDIF;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(RTV Name, Status       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1260598;
PARAMETER(DB1.Carrier_Code);
PARAMETER(DTL.USR_Carrier_Name);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Name, Status       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1260598;
PARAMETER(DB1.Carrier_Broker);
PARAMETER(DTL.Name);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Name, Status       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1260598;
PARAMETER(DB1.Transloader_Carrier_Code);
PARAMETER(DTL.USR_Description_20);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Truck Size Desc.   RT) TYPE(RTVOBJ) FILE(OMFKREP)          AC1371092;
PARAMETER(DTL.Truck_Size);
PARAMETER(DTL.Truck_Size_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DB1.Ship_From_Warehouse);
PARAMETER(DTL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


EXECUTE FUNCTION(RTV Active Description RT) TYPE(RTVOBJ) FILE(CAACREP)          AC1287387;
PARAMETER(DB1.Ship_To_State_Code);
PARAMETER(DTL.State_Description);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Status Description = Condition name of DB1.Load Status
DTL.Status_Description = RTVCND(DB1.Load_Status);

// DTL.USR Desc. 10 = Condition name of DB1.Load Type
DTL.USR_Desc_10 = RTVCND(DB1.Load_Type);

// DTL.Description 14A      USR = Condition name of DB1.Shipping Method
DTL.Description_14A_USR = RTVCND(DB1.Shipping_Method);

// PAR.Scheduled Ship Date = DB1.Scheduled Ship Date
PAR.Scheduled_Ship_Date = DB1.Scheduled_Ship_Date;

// PAR.Carrier Code = DB1.Carrier Code
PAR.Carrier_Code = DB1.Carrier_Code;

// WRK.Carrier Code Usr = DB1.Carrier Code
WRK.Carrier_Code_Usr = DB1.Carrier_Code;

// PAR.Shipping Method = DB1.Shipping Method
PAR.Shipping_Method = DB1.Shipping_Method;

// PAR.Shipping Line = DB1.Shipping Line
PAR.Shipping_Line = DB1.Shipping_Line;

EXECUTE FUNCTION(RTV Any Ord/Blk  on Ld RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1448300;
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.USR_Check_Y_N_Status);
PARAMETER(PAR.Block_Order_Flag);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 // PAR.USR Check Y/N Status = CND.blank
 PAR.USR_Check_Y_N_Status = *BLANK;

 //?OMS203:  need to know if there are any Block orders on load
 // PAR.Block Order Flag = CND.Firm Order
 PAR.Block_Order_Flag = 'F';

 //?USER: Process Data record

 // PAR.USR Check Y/N Status = CND.yes
 PAR.USR_Check_Y_N_Status = 'Y';

 CASE;

 // IF DB1.Block Order Flag is Block Order
 IF DB1.Block_Order_Flag = 'B';

 // PAR.Block Order Flag = DB1.Block Order Flag
 PAR.Block_Order_Flag = DB1.Block_Order_Flag;

 QUIT;

 ENDIF;

}


//?Set flag whether Load Type is updatable
CASE;

// IF PAR.USR Check Y/N Status is yes
IF PAR.USR_Check_Y_N_Status = 'Y';

// OR DB1.Load Status is Locked thru Invoiced
OR DB1.Load_Status = 'I'/'L'/'S';

// PAR.USR Update Flag = CND.No
PAR.USR_Update_Flag = *BLANK;

//?Set flag whether Load Type is updatable
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Update Flag = CND.Yes
PAR.USR_Update_Flag = 'Y';

ENDIF;

// WRK.Trailer ID USR = DTL.Trailer ID USR
WRK.Trailer_ID_USR = DTL.Trailer_ID_USR;

// WRK.Load Start Company USR = DB1.Company Number
WRK.Load_Start_Company_USR = DB1.Company_Number;

// LCL.Company Number = DTL.Company Number
LCL.Company_Number = DTL.Company_Number;

// PAR.Load Status = DB1.Load Status
PAR.Load_Status = DB1.Load_Status;

EXECUTE FUNCTION(RTV Last Stop Consign  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1377331;
PARAMETER(DB1.Load_ID);
PARAMETER(WRK.Ship_To_Customer);
PARAMETER(WRK.Ship_To_Name);
PARAMETER(WRK.Ship_To_Address_Line_1);
PARAMETER(WRK.Ship_To_Address_Line_2);
PARAMETER(WRK.Ship_To_Address_Line_3);
PARAMETER(DTL.Ship_To_City);
PARAMETER(WRK.Ship_To_State_Code);
PARAMETER(WRK.Ship_To_Zip_Postal_Code);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV for B.O.L. Print   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1377319;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name);
 PARAMETER(PAR.Ship_To_Address_Line_1);
 PARAMETER(PAR.Ship_To_Address_Line_2);
 PARAMETER(PAR.Ship_To_Address_Line_3);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Ship_To_Zip_Postal_Code);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 QUIT;

}


EXECUTE FUNCTION(RTV State Description  RT) TYPE(RTVOBJ) FILE(CAACREP)          AC1227485;
PARAMETER(WRK.Ship_To_State_Code);
PARAMETER(DTL.USR_State_Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?E4687A JJH 02/03/16 - Remove logic for OHE Mexican Buyer Truck
EXECUTE FUNCTION(RTV Shipping Line-OHE  RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2016789;
PARAMETER(PAR.Load_ID);
PARAMETER(DTL.USR_Work_Field_3A);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?** pass back the first record found with a shipping line
 CASE;

 // IF DB1.Shipping Line is not entered
 IF DB1.Shipping_Line = *BLANK;

 //?** pass back the first record found with a shipping line
 // IF *OTHERWISE
 IF *OTHERWISE;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


//?** Rtv Ship Line name, not an error if it is not there   P000737
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// DTL.USR Work Field 3A = CON.*BLANK
DTL.USR_Work_Field_3A = *BLANK;

//?** Rtv Ship Line name, not an error if it is not there   P000737
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Name, Status       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1260598;
PARAMETER(DTL.USR_Work_Field_3A);
PARAMETER(DTL.Description_21A_Usr);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?If shipping line is entered, use instead of carrier   E004079
CASE;

// IF DTL.USR Work Field 3A is Entered
IF DTL.USR_Work_Field_3A <> *BLANK;

// WRK.USR Carrier Code = DTL.USR Work Field 3A
WRK.USR_Carrier_Code = DTL.USR_Work_Field_3A;

//?If shipping line is entered, use instead of carrier   E004079
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Carrier Code = DTL.Carrier Code
WRK.USR_Carrier_Code = DTL.Carrier_Code;

ENDIF;

//?Chk load status
CASE;

// IF DB1.Load Status is Shipped or Invoiced
IF DB1.Load_Status = 'I'/'S';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?E7892-Replaced 'USR Deadline Deprt Time' with 'TMS Deadline Depart Time'.
// DTL.TMS Deadline Depart Time = DB1.Deadline Departure Time / CON.100 *
DTL.TMS_Deadline_Depart_Time = DB1.Deadline_Departure_Time / 100;

//?** Protect fields that are Shipped or Invoiced     FP1251 01/04/2008
CASE;

// IF DTL.Load Status is Shipped or Invoiced
IF DTL.Load_Status = 'I'/'S';

// WRK.Lock/Unlock = CND.Lock
WRK.Lock_Unlock = 'L';

ENDIF;

//?** Protect Carrier Code from changes for Collect loads   FP1251 01/04/08
CASE;

// IF DTL.Shipping Method is Collect
IF DTL.Shipping_Method = 'CR'/'CT';

CASE;

// IF DTL.Carrier Code is entered
IF DTL.Carrier_Code <> *BLANK;

// WRK.Lock/Unlock = CND.Lock
WRK.Lock_Unlock = 'L';

ENDIF;

//?** Protect Carrier Code from changes for Collect loads   FP1251 01/04/08
// IF *OTHERWISE
IF *OTHERWISE;

//?** Carrier code OK to reset if Prepaid and Ld Sts not locked/shipped
CASE;

// IF DTL.Shipping Method is Prepaid
IF DTL.Shipping_Method = 'PR'/'PT';

CASE;

// IF DTL.Load Status is Prior to Invoiced
IF DTL.Load_Status = *BLANK/'C'/'E'/'L'/'S'/'U';

// WRK.Lock/Unlock = CND.Unlock
WRK.Lock_Unlock = 'U';

ENDIF;

ENDIF;

ENDIF;

//?** Put Override miles on screen if they are entered and hilite  E00207
CASE;

// IF DB1.Override Total Load Miles is Entered
IF DB1.Override_Total_Load_Miles <> *ZERO;

// DTL.Total Load Miles = DB1.Override Total Load Miles
DTL.Total_Load_Miles = DB1.Override_Total_Load_Miles;

//?** Save total load miles for db update          E00207
// LCL.Total Load Miles = DB1.Total Load Miles
LCL.Total_Load_Miles = DB1.Total_Load_Miles;

// PAR.Change Flag USR = CND.Yes
PAR.Change_Flag_USR = 'Y';

//?** Put Override miles on screen if they are entered and hilite  E00207
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Total Load Miles = DB1.Total Load Miles
DTL.Total_Load_Miles = DB1.Total_Load_Miles;

// LCL.Total Load Miles = DB1.Total Load Miles
LCL.Total_Load_Miles = DB1.Total_Load_Miles;

// PAR.Change Flag USR = CND.No
PAR.Change_Flag_USR = 'N';

ENDIF;

//?***** Save to check for changes later
// WRK.Flat Amount = DTL.Flat Amount
WRK.Flat_Amount = DTL.Flat_Amount;

//?DEFAULT: Power Only Load
CASE;

// IF DTL.LH Power Only Load is Blank
IF DTL.LH_Power_Only_Load = *BLANK;

EXECUTE FUNCTION(DFT Power Only Load   IF) TYPE(EXCINTFUN)                      AC2024600;
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.LH_Power_Only_Load);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Country Code/WHS  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2024263;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(LCL.Country_Code);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(RTV 1st Whse/Country   RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1426676;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Country_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

 }

 EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(LCL.Warehouse_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Country EXT       RT) TYPE(RTVOBJ) FILE(PNHAREP)           AC2024232;
 PARAMETER(LCL.Country_Code);
 PARAMETER(LCL.Country_Power_Only_Ld_Dft);
 PARAMETER(NLL.ISO_Alpha2_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Country Power Only Ld Dft is Yes
 IF LCL.Country_Power_Only_Ld_Dft = 'Y';

 // AND LCL.Warehouse Type is Fresh
 AND LCL.Warehouse_Type = 'FR';

 // PAR.LH Power Only Load = CND.Yes
 PAR.LH_Power_Only_Load = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.LH Power Only Load = CND.No
 PAR.LH_Power_Only_Load = 'N';

 ENDIF;

}


ENDIF;

// DTL.Text USR 5 = Condition name of DTL.LH Power Only Load
DTL.Text_USR_5 = RTVCND(DTL.LH_Power_Only_Load);

// PAR.Schedule Sequence Number = DB1.Schedule Sequence Number
PAR.Schedule_Sequence_Number = DB1.Schedule_Sequence_Number;

//?USER: Validate detail screen fields

CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

//?F4=Prompt Trailer
CASE;

// IF PGM.*Cursor field <IS> DTL.Trailer ID USR
IF PGM.*Cursor_field = DTL.Trailer_ID_USR;

//?Use Shipping Line if it is entered at this point      E004079
CASE;

// IF DTL.USR Work Field 3A is Entered
IF DTL.USR_Work_Field_3A <> *BLANK;

// LCL.Carrier Code = DTL.USR Work Field 3A
LCL.Carrier_Code = DTL.USR_Work_Field_3A;

ENDIF;

// LCL.Trailer ID USR = DTL.Trailer ID USR
LCL.Trailer_ID_USR = DTL.Trailer_ID_USR;

// LCL.Company Number = DTL.Company Number
LCL.Company_Number = DTL.Company_Number;

// Call program Sel Trailer           SR.
CALL PROGRAM(Sel Trailer           SR) ('PBRFSRR');
PARAMETER(LCL.Carrier_Code);
PARAMETER(LCL.Trailer_ID_USR);
PARAMETER(LCL.Company_Number);
PARAMETER(NLL.On_Yard_Status);
PARAMETER(NLL.On_Yard_Date);
PARAMETER(NLL.On_Yard_Time);
PARAMETER(NLL.Available_Status);

//?** Trailer Co# <> Load Start Co# warning    E00117  LJB 03/12/2008
CASE;

// IF LCL.Company Number NE DTL.Company Number
IF LCL.Company_Number <> DTL.Company_Number;

// Send information message - 'Trailer Co# & Load Start Co# do not match-Press enter'
MESSAGE(USR3902 *INFO);
MSGPARM(DTL.Trailer_ID_USR);

ENDIF;

CASE;

// IF LCL.Trailer ID USR is Entered
IF LCL.Trailer_ID_USR <> *BLANK;

// DTL.Trailer ID USR = LCL.Trailer ID USR
DTL.Trailer_ID_USR = LCL.Trailer_ID_USR;

// DTL.Trailer Id = DTL.Trailer ID USR
DTL.Trailer_Id = DTL.Trailer_ID_USR;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?F4=Prompt Transloader
CASE;

// IF PGM.*Cursor field <IS> DTL.Transloader Carrier Code
IF PGM.*Cursor_field = DTL.Transloader_Carrier_Code;

// Call program SEL Active Carrier     SR.
CALL PROGRAM(SEL Active Carrier     SR) ('OMY6SRR');
PARAMETER(DTL.Transloader_Carrier_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?F17=WW Trailer
CASE;

// IF DTL.*CMD key is CF17
IF DTL.*CMD_key = '17';

// Call program WW Trailer             DF.
CALL PROGRAM(WW Trailer             DF) ('PDGNDFR');

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?02/13/07 PKD Removed hardcoding of Company Number.
EXECUTE FUNCTION(Rtv Plant Co Status   RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1761084;
PARAMETER(DTL.Company_Number);
PARAMETER(LCL.Plant_Company_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Shipping Line = DTL.USR Work Field 3A
DTL.Shipping_Line = DTL.USR_Work_Field_3A;

//?Check for Plant Company                      DLY029
CASE;

//?Check for Plant Company                      DLY029
// IF LCL.Plant Company Sts is Plant Company
IF LCL.Plant_Company_Sts = 'P';

//?Check for Plant Company                      DLY029
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Company not found or Invalid.'
ERROR(USR2270);
MSGPARM(DTL.Company_Number);

ENDIF;

//?Validate active carrier if entered
CASE;

// IF DTL.Carrier Code is entered
IF DTL.Carrier_Code <> *BLANK;

EXECUTE FUNCTION(Val Carrier Active     RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1418093;
PARAMETER(DTL.Carrier_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carrier Info not found.'
ERROR(USR1180);
MSGPARM(DTL.Carrier_Code);

ENDIF;

CASE;

// IF DTL.Shipping Method is Prepaid
IF DTL.Shipping_Method = 'PR'/'PT';

CASE;

// IF DTL.Carrier Code is Buyer's Truck
IF DTL.Carrier_Code = 'BUY';

// Send error message - 'Invalid Carrier &1 for Prepaid load.'
ERROR(USR4632);
MSGPARM(DTL.Carrier_Code);

ENDIF;

ENDIF;

ENDIF;

//?Validate active Transloader Carrier if entered P000737
CASE;

// IF DTL.Transloader Carrier Code NE LCL.Blank for 4           USR
IF DTL.OHE_Spot_Buy <> LCL.Blank_for_4_USR;

//?** Use first 3 characters for testing
// LCL.USR CDE Parm 1 = DTL.Transloader Carrier Code
LCL.USR_CDE_Parm_1 = DTL.OHE_Spot_Buy;

EXECUTE FUNCTION(Val Carrier Active     RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1418093;
PARAMETER(LCL.USR_CDE_Parm_1);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carrier Info not found.'
ERROR(USR1180);
MSGPARM(LCL.USR_CDE_Parm_1);

ENDIF;

ENDIF;

//?Validate active Mexican Buyer Carrier if entered P000737
CASE;

// IF DTL.Mexican Buyer Truck NE LCL.Blank for 4           USR
IF DTL.OHE_Carrier_SCAC_Code <> LCL.Blank_for_4_USR;

//?** Use first 3 characters for testing
// LCL.USR CDE Parm 1 = DTL.OHE Mexican Buyer Truck
LCL.USR_CDE_Parm_1 = DTL.OHE_Carrier_SCAC_Code;

EXECUTE FUNCTION(Val Carrier Active     RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1418093;
PARAMETER(LCL.USR_CDE_Parm_1);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carrier Info not found.'
ERROR(USR1180);
MSGPARM(LCL.USR_CDE_Parm_1);

ENDIF;

ENDIF;

//?F20=Add Traffic Comments
CASE;

// IF DTL.*CMD key is CF20
IF DTL.*CMD_key = '20';

// Call program EDT PD Traffic Comment EF.
CALL PROGRAM(EDT PD Traffic Comment EF) ('PDCZEFR');
PARAMETER(DTL.Load_ID);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?No scheduled ship date entered
CASE;

// IF DTL.Scheduled Ship Date EQ WRK.ZERO
IF DTL.Scheduled_Ship_Date = WRK.ZERO;

// AND PAR.USR Check Y/N Status is yes
AND PAR.USR_Check_Y_N_Status = 'Y';

// Send error message - 'Scheduled Ship Date is required when orders are assigned to load.'
ERROR(USR2230);
MSGPARM(DTL.Scheduled_Ship_Date);

ENDIF;

//?F15=Lock Load request
CASE;

// IF DTL.*CMD key is *Lock Load
IF DTL.*CMD_key = '15';

//?** Don't allow lock load if errors pending in Order Detail  P001251
EXECUTE FUNCTION(EDT Lock Load Edits    IF) TYPE(EXCINTFUN)                     AC1384547;
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Load_Status);
PARAMETER(DTL.Total_Load_Order_Weight);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Truck_Size);
PARAMETER(DTL.Shipping_Method);
PARAMETER(DTL.Load_Acceptance_Flag);
PARAMETER(WRK.*SFLSEL);
PARAMETER(WRK.Error_Status);
PARAMETER(PAR.Block_Order_Flag);
{
 //?Execute internal function

 //?assume will have error
 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 EXECUTE FUNCTION(VAL Set Int.Acc No Hdg IF) TYPE(EXCINTFUN)                     AC1460523;
 PARAMETER('LOCKLD');
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(PAR.Access_Denied_Y_N);
 {
  //?Execute internal function

  // PAR.User Profile Name = JOB.*USER
  PAR.User_Profile_Name = JOB.*USER;

  EXECUTE FUNCTION(VAL User/Appl No Exit  IF) TYPE(EXCINTFUN)                     AC1460535;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Company_Number);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(WRK.Access_Denied_Y_N);
  {
   //?Execute internal function

   //?RMC 5/11/09 Rtv default company from user profile --
   //?  Override user code model company if it exists
   EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
   PARAMETER(PAR.User_Profile_Name);
   PARAMETER(PAR.Allow_Multi_Company);
   PARAMETER(PAR.Default_Printer);
   PARAMETER(PAR.Salesperson_Code);
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.User_Code_Model);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?User Profile Record Not found
   CASE;

   // IF PGM.*Return code is *Record does not exist
   IF PGM.*Return_code = 'Y2U0005';

   // PAR.Access Denied (Y/N) = CND.yes
   PAR.Access_Denied_Y_N = 'Y';

   //?User Profile Record Not found
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Access Denied (Y/N) = CND.no
   PAR.Access_Denied_Y_N = 'N';

   ENDIF;

   CASE;

   // IF PAR.User Code Model is equal to blank
   IF PAR.User_Code_Model = *BLANK;

   EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
   PARAMETER(PAR.User_Profile_Name);
   PARAMETER(PAR.Application_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(LCL.Warehouse_Code);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
   PARAMETER(PAR.User_Code_Model);
   PARAMETER(PAR.Application_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(LCL.Warehouse_Code);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

   // PAR.Warehouse Code = LCL.Warehouse Code
   PAR.Warehouse_Code = LCL.Warehouse_Code;

   //?Return code when not normal for Application Profile
   CASE;

   // IF PGM.*Return code is *Normal
   IF PGM.*Return_code = *BLANK;

   // PAR.Access Denied (Y/N) = CND.no
   PAR.Access_Denied_Y_N = 'N';

   //?Return code when not normal for Application Profile
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Access Denied (Y/N) = CND.yes
   PAR.Access_Denied_Y_N = 'Y';

   ENDIF;

   CASE;

   // IF LCL.Company Number is greater than zero
   IF LCL.Company_Number > *ZERO;

   // PAR.Company Number = LCL.Company Number
   PAR.Company_Number = LCL.Company_Number;

   CASE;

   // IF LCL.Warehouse Code is Not Blanks
   IF LCL.Warehouse_Code <> *BLANK;

   EXECUTE FUNCTION(RTV Prod Whse for Co  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1757887;
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(LCL.Shipping_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    CASE;

    // IF DB1.Record Status is Active
    IF DB1.Record_Status = 'A';

    CASE;

    // IF DB1.Production Warehouse Code is Warehouse Code not Blank
    IF DB1.Production_Warehouse_Code <> *BLANK;

    // PAR.Warehouse Code = DB1.Production Warehouse Code
    PAR.Warehouse_Code = DB1.Production_Warehouse_Code;

    QUIT;

    ENDIF;

    ENDIF;

   }

   ENDIF;

   ENDIF;

  }

  // PAR.Company Number = WRK.Company Number
  PAR.Company_Number = WRK.Company_Number;

  // PAR.Access Denied (Y/N) = WRK.Access Denied (Y/N)
  PAR.Access_Denied_Y_N = WRK.Access_Denied_Y_N;

  //?If access denied is no, rtv co. name
  CASE;

  // IF WRK.Access Denied (Y/N) is no
  IF WRK.Access_Denied_Y_N = 'N';

  EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
  PARAMETER(WRK.Company_Number);
  PARAMETER(PAR.Name);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

 }

 CASE;

 // IF PAR.Access Denied (Y/N) is yes
 IF PAR.Access_Denied_Y_N = 'Y';

 // Send error message - 'User not allowed to  Lock/Unlock Loads.'
 ERROR(USR2468);

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(VAL no Stop Entered    RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1295710;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.USR_Orders_on_Load);
 {
  //?USER: Initialize routine

  // PAR.Status - Y or N = CND.no
  PAR.Status_Y_or_N = 'N';

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  CASE;

  // IF DB1.Stop/Drop is EQ Zero
  IF DB1.Stop_Drop = *ZERO;

  // PAR.Status - Y or N = CND.yes
  PAR.Status_Y_or_N = 'Y';

  QUIT;

  ENDIF;

 }

 //?Validate lock request
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // Send error message - 'No orders assigned to load &1; Can't lock'
 ERROR(USR1276);
 MSGPARM(PAR.Load_ID);
 MSGPARM(PAR.*SFLSEL);

 //?Validate lock request
 // IF PAR.Block Order Flag is Block Order
 IF PAR.Block_Order_Flag = 'B';

 // Send error message - 'Load &2 contains Block Orders--no update allowed.'
 ERROR(USR2441);
 MSGPARM(PAR.*SFLSEL);
 MSGPARM(PAR.Load_ID);

 //?Validate lock request
 // IF PAR.Load Status is Locked thru Invoiced
 IF PAR.Load_Status = 'I'/'L'/'S';

 // Send error message - 'Load &2 cannot be locked due to load status'
 ERROR(USR2189);
 MSGPARM(PAR.*SFLSEL);
 MSGPARM(PAR.Load_ID);

 //?Validate lock request
 // IF PAR.Carrier Code EQ WRK.BLANK
 IF PAR.Carrier_Code = WRK.BLANK;

 // Send error message - 'Carrier must be entered for load &2'
 ERROR(USR1253);
 MSGPARM(PAR.Carrier_Code);
 MSGPARM(PAR.Load_ID);

 //?Validate lock request
 // IF PAR.Truck Size EQ WRK.BLANK
 IF PAR.Truck_Size = WRK.BLANK;

 // Send error message - 'Truck size must be entered for load &2'
 ERROR(USR1255);
 MSGPARM(PAR.Truck_Size);
 MSGPARM(PAR.Load_ID);

 //?Validate lock request
 // IF PAR.Shipping Method EQ WRK.BLANK
 IF PAR.Shipping_Method = WRK.BLANK;

 // Send error message - 'Shipping Method required to lock load.'
 ERROR(USR2197);
 MSGPARM(PAR.Shipping_Method);

 //?Validate lock request
 // IF PAR.USR Orders on Load is yes
 IF PAR.USR_Orders_on_Load = 'Y';

 // Send error message - 'Function not allowed; Load &1 has orders tied to it which are not assigned
 ERROR(USR2196);
 MSGPARM(PAR.Load_ID);

 //?Validate lock request
 // IF PAR.Load Acceptance Flag is Load not Accepted
 IF PAR.Load_Acceptance_Flag = 'U';

 // Send error message - 'Load cannot be locked, it is unaccepted.'
 ERROR(USR2514);
 MSGPARM(PAR.Load_ID);

 //?Validate lock request
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Hold, Use-by load  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1304327;
 PARAMETER(PAR.Order_in_Use);
 PARAMETER(PAR.Header_Status);
 PARAMETER(PAR.Load_ID);
 {
  //?USER: Initialize routine

  //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?If find 1 order on load which is held/cancelled, set par flag and exit
  CASE;

  // IF DB1.Header Status is Hold
  IF DB1.Header_Status = 'H';

  // PAR.Header Status = DB1.Header Status
  PAR.Header_Status = DB1.Header_Status;

  QUIT;

  //?If find 1 order on load which is held/cancelled, set par flag and exit
  // IF DB1.Header Status is Cancelled
  IF DB1.Header_Status = 'X';

  // PAR.Header Status = DB1.Header Status
  PAR.Header_Status = DB1.Header_Status;

  QUIT;

  //?If find 1 order on load which is held/cancelled, set par flag and exit
  // IF DB1.Order in Use is yes
  IF DB1.Order_in_Use = 'Y';

  // PAR.Order in Use = DB1.Order in Use
  PAR.Order_in_Use = DB1.Order_in_Use;

  QUIT;

  ENDIF;

 }

 //?Error if held/cancelled/in use order(s) on load
 CASE;

 // IF PAR.Header Status is Hold
 IF PAR.Header_Status = 'H';

 // Send error message - 'Load &1 contains orders on Hold.  Load cannot be Locked.'
 ERROR(USR1921);
 MSGPARM(PAR.Load_ID);
 MSGPARM(PAR.*SFLSEL);

 //?Error if held/cancelled/in use order(s) on load
 // IF PAR.Header Status is Cancelled
 IF PAR.Header_Status = 'X';

 // Send error message - 'Load &1 contains cancelled order(s).  Load cannot be Locked.'
 ERROR(USR2236);
 MSGPARM(PAR.Load_ID);
 MSGPARM(PAR.*SFLSEL);

 //?Error if held/cancelled/in use order(s) on load
 // IF PAR.Order in Use is yes
 IF PAR.Order_in_Use = 'Y';

 // Send error message - 'Load &2 has order(s) in use; Load cannot be locked.'
 ERROR(USR2280);
 MSGPARM(PAR.*SFLSEL);
 MSGPARM(PAR.Load_ID);

 //?Error if held/cancelled/in use order(s) on load
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?** Check if Export Order Automation Upload had errors  P001251
 EXECUTE FUNCTION(RTV Ord Requires Revw RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2027682;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Order_Requires_Review);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?** Cannot lock if Upload had errors                  P001251
 CASE;

 // IF LCL.Order Requires Review is Yes
 IF LCL.Order_Requires_Review = 'Y';

 // Send error message - 'Order has detail lines that require review'
 ERROR(USR4464);
 MSGPARM(PAR.*SFLSEL);
 MSGPARM(PAR.Load_ID);

 //?** Cannot lock if Upload had errors                  P001251
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Min & Max Pounds  RT) TYPE(RTVOBJ) FILE(OMFKREP)           AC1197715;
 PARAMETER(PAR.Truck_Size);
 PARAMETER(PAR.Maximum_pounds);
 PARAMETER(PAR.Minimum_pounds);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Check minimum and maximum pounds
 CASE;

 // IF PAR.Total Weight LT PAR.Minimum pounds
 IF PAR.Total_Load_Order_Weight < PAR.Minimum_pounds;

 // Send information message - 'Load weight is less than the minimum weight allowed for load &1.'
 MESSAGE(USR1262 *INFO);
 MSGPARM(PAR.Load_ID);

 // PAR.Error Status = CND.no
 PAR.Error_Status = 'N';

 //?Check minimum and maximum pounds
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Total Weight GT PAR.Maximum pounds
 IF PAR.Total_Load_Order_Weight > PAR.Maximum_pounds;

 // Send information message - 'Load weight is greater than maximum allowed for truck size.'
 MESSAGE(USR2231 *INFO);

 // PAR.Error Status = CND.no
 PAR.Error_Status = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send information message - 'Locking load pending'
 MESSAGE(USR1273 *INFO);

 // PAR.Error Status = CND.no
 PAR.Error_Status = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?***** Change Log and Comments
 DO;

 //?** 09/20/2011 LJB P001251 Export Order Automation
 //?** Cannot lock if Export Order Automation Upload had errors
 //?** that have not been cleared up
 ENDDO;

}


CASE;

// IF WRK.Error Status is no
IF WRK.Error_Status = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?F16=Unlock load request
CASE;

// IF DTL.*CMD key is *Unlock Load
IF DTL.*CMD_key = '16';

//?RMC PFS017 06/05/06  new par.allow unlock if picked = N
EXECUTE FUNCTION(EDT Unlock Load Edits  IF) TYPE(EXCINTFUN)                     AC1419437;
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Load_Status);
PARAMETER(WRK.*SFLSEL);
PARAMETER(WRK.Error_Status);
PARAMETER(PAR.Block_Order_Flag);
PARAMETER('N');
{
 //?Execute internal function

 //?assume will have error
 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 EXECUTE FUNCTION(VAL Set Int.Acc No Hdg IF) TYPE(EXCINTFUN)                     AC1460523;
 PARAMETER('LOCKLD');
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(PAR.Access_Denied_Y_N);
 {
  //?Execute internal function

  // PAR.User Profile Name = JOB.*USER
  PAR.User_Profile_Name = JOB.*USER;

  EXECUTE FUNCTION(VAL User/Appl No Exit  IF) TYPE(EXCINTFUN)                     AC1460535;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Company_Number);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(WRK.Access_Denied_Y_N);
  {
   //?Execute internal function

   //?RMC 5/11/09 Rtv default company from user profile --
   //?  Override user code model company if it exists
   EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
   PARAMETER(PAR.User_Profile_Name);
   PARAMETER(PAR.Allow_Multi_Company);
   PARAMETER(PAR.Default_Printer);
   PARAMETER(PAR.Salesperson_Code);
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.User_Code_Model);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?User Profile Record Not found
   CASE;

   // IF PGM.*Return code is *Record does not exist
   IF PGM.*Return_code = 'Y2U0005';

   // PAR.Access Denied (Y/N) = CND.yes
   PAR.Access_Denied_Y_N = 'Y';

   //?User Profile Record Not found
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Access Denied (Y/N) = CND.no
   PAR.Access_Denied_Y_N = 'N';

   ENDIF;

   CASE;

   // IF PAR.User Code Model is equal to blank
   IF PAR.User_Code_Model = *BLANK;

   EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
   PARAMETER(PAR.User_Profile_Name);
   PARAMETER(PAR.Application_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(LCL.Warehouse_Code);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
   PARAMETER(PAR.User_Code_Model);
   PARAMETER(PAR.Application_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(LCL.Warehouse_Code);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

   // PAR.Warehouse Code = LCL.Warehouse Code
   PAR.Warehouse_Code = LCL.Warehouse_Code;

   //?Return code when not normal for Application Profile
   CASE;

   // IF PGM.*Return code is *Normal
   IF PGM.*Return_code = *BLANK;

   // PAR.Access Denied (Y/N) = CND.no
   PAR.Access_Denied_Y_N = 'N';

   //?Return code when not normal for Application Profile
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Access Denied (Y/N) = CND.yes
   PAR.Access_Denied_Y_N = 'Y';

   ENDIF;

   CASE;

   // IF LCL.Company Number is greater than zero
   IF LCL.Company_Number > *ZERO;

   // PAR.Company Number = LCL.Company Number
   PAR.Company_Number = LCL.Company_Number;

   CASE;

   // IF LCL.Warehouse Code is Not Blanks
   IF LCL.Warehouse_Code <> *BLANK;

   EXECUTE FUNCTION(RTV Prod Whse for Co  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1757887;
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(LCL.Shipping_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    CASE;

    // IF DB1.Record Status is Active
    IF DB1.Record_Status = 'A';

    CASE;

    // IF DB1.Production Warehouse Code is Warehouse Code not Blank
    IF DB1.Production_Warehouse_Code <> *BLANK;

    // PAR.Warehouse Code = DB1.Production Warehouse Code
    PAR.Warehouse_Code = DB1.Production_Warehouse_Code;

    QUIT;

    ENDIF;

    ENDIF;

   }

   ENDIF;

   ENDIF;

  }

  // PAR.Company Number = WRK.Company Number
  PAR.Company_Number = WRK.Company_Number;

  // PAR.Access Denied (Y/N) = WRK.Access Denied (Y/N)
  PAR.Access_Denied_Y_N = WRK.Access_Denied_Y_N;

  //?If access denied is no, rtv co. name
  CASE;

  // IF WRK.Access Denied (Y/N) is no
  IF WRK.Access_Denied_Y_N = 'N';

  EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
  PARAMETER(WRK.Company_Number);
  PARAMETER(PAR.Name);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

 }

 //?check the entry control field too.  4/28/05 so christa can do.
 EXECUTE FUNCTION(Rtv Unlock Load Authr RT) TYPE(RTVOBJ) FILE(OPC0REP)           AC1736002;
 PARAMETER(JOB.*USER);
 PARAMETER('O/P');
 PARAMETER(PAR.Company_Number);
 PARAMETER(WRK.Unlock_Load_Authority);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Access Denied (Y/N) is yes
 IF PAR.Access_Denied_Y_N = 'Y';

 // AND WRK.Unlock Load Authority is Blank
 AND WRK.Unlock_Load_Authority = *BLANK;

 // Send error message - 'User not allowed to  Lock/Unlock Loads.'
 ERROR(USR2468);

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?If load has been shipped, can't unlock. RMC Chg for picked 5/31/06
 CASE;

 // IF PAR.Block Order Flag is Block Order
 IF PAR.Block_Order_Flag = 'B';

 //?  (load contains a block order)
 // Send error message - 'Load &2 contains Block Orders--no update allowed.'
 ERROR(USR2441);
 MSGPARM(PAR.*SFLSEL);
 MSGPARM(PAR.Load_ID);

 //?If load has been shipped, can't unlock. RMC Chg for picked 5/31/06
 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 // Send error message - 'Load has been shipped can not unlock it'
 ERROR(USR1272);
 MSGPARM(PAR.Load_Status);

 //?If load has been shipped, can't unlock. RMC Chg for picked 5/31/06
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?**** Determine if Load has been picked, if yes do not allow unlock
 //?**** This function checks OP Order Events & AS Picked Acknowledgment
 CASE;

 // IF PAR.Allow Unlock if Picked St is No
 IF PAR.Allow_Unlock_if_Picked_St = 'N';

 //?Do this one if par is NO. We dont want an UNLOCK if there are XOx
 //?  and it isnt shipping doing it.
 // Call program RTV Load Order Picked  XF.
 CALL PROGRAM(RTV Load Order Picked  XF) ('PDQVXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 PARAMETER(WRK.Pick_Status_USR);

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(PFS Val Order Picked  RT) TYPE(RTVOBJ) FILE(PPBKCPP)           AC1754282;
 PARAMETER(PAR.Load_ID);
 PARAMETER(WRK.Pick_Status_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Pick Status USR = CND.Not Picked
  PAR.Pick_Status_USR = 'N';

  //?USER: Process Data record

  // PAR.Pick Status USR = CND.Picked
  PAR.Pick_Status_USR = 'Y';

  QUIT;

 }

 ENDIF;

 //?Allow if picked but not Close Order or Close Truck  5/31/06
 CASE;

 // IF WRK.Pick Status USR is Picked
 IF WRK.Pick_Status_USR = 'Y';

 CASE;

 // IF PAR.Allow Unlock if Picked St is No
 IF PAR.Allow_Unlock_if_Picked_St = 'N';

 // Send error message - 'Unlocking of Load is not allowed for a Load which has been picked.'
 ERROR(USR1999);
 MSGPARM(PAR.Load_Status);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program PFS Val Close Ord/Trk XF.
 CALL PROGRAM(PFS Val Close Ord/Trk XF) ('PPYIXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(WRK.Status_Y_or_N);

 CASE;

 // IF WRK.Status - Y or N is yes
 IF WRK.Status_Y_or_N = 'Y';

 // Send error message - 'Unlock Load not allowed for Load with a Closed Order or Closed Truck.'
 ERROR(USR3629);
 MSGPARM(PAR.*SFLSEL);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send information message - 'Unlock Load Pending'
 MESSAGE(USR1274 *INFO);

 // PAR.Error Status = CND.no
 PAR.Error_Status = 'N';

 ENDIF;

 ENDIF;

 //?Allow if picked but not Close Order or Close Truck  5/31/06
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send information message - 'Unlock Load Pending'
 MESSAGE(USR1274 *INFO);

 // PAR.Error Status = CND.no
 PAR.Error_Status = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

}


CASE;

// IF WRK.Error Status is no
IF WRK.Error_Status = 'N';

// PAR.Load Status = CND.Unlock
PAR.Load_Status = 'U';

// DTL.Rated Freight = CON.*ZERO
DTL.Rated_Freight = *ZERO;

// DTL.Flat Amount = CON.*ZERO
DTL.Flat_Amount = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?convert trailer id
CASE;

// IF WRK.Trailer ID Numeric    USR EQ WRK.ZERO
IF WRK.Trailer_ID_Numeric_USR = WRK.ZERO;

// DTL.Trailer Id = CON.*BLANK
DTL.Trailer_Id = *BLANK;

//?convert trailer id
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Trailer Number Alpha 20 = CVTVAR(WRK.Trailer ID Numeric    USR)
WRK.Trailer_Number_Alpha_20 = CVTVAR(WRK.Trailer_ID_Numeric_USR);

// DTL.Trailer Id = WRK.Trailer Number Alpha 20
DTL.Trailer_Id = WRK.Trailer_Number_Alpha_20;

ENDIF;

// DTL.Trailer Id = DTL.Trailer ID USR
DTL.Trailer_Id = DTL.Trailer_ID_USR;

EXECUTE FUNCTION(RTV Last Stop Consign  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1377331;
PARAMETER(DTL.Load_ID);
PARAMETER(WRK.Ship_To_Customer);
PARAMETER(WRK.Ship_To_Name);
PARAMETER(WRK.Ship_To_Address_Line_1);
PARAMETER(WRK.Ship_To_Address_Line_2);
PARAMETER(WRK.Ship_To_Address_Line_3);
PARAMETER(DTL.Ship_To_City);
PARAMETER(WRK.Ship_To_State_Code);
PARAMETER(WRK.Ship_To_Zip_Postal_Code);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV for B.O.L. Print   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1377319;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name);
 PARAMETER(PAR.Ship_To_Address_Line_1);
 PARAMETER(PAR.Ship_To_Address_Line_2);
 PARAMETER(PAR.Ship_To_Address_Line_3);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Ship_To_Zip_Postal_Code);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 QUIT;

}


EXECUTE FUNCTION(RTV State Description  RT) TYPE(RTVOBJ) FILE(CAACREP)          AC1227485;
PARAMETER(WRK.Ship_To_State_Code);
PARAMETER(DTL.USR_State_Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Fill in ship from warehouse, if none entered             S00558
CASE;

// IF DTL.Ship From Warehouse EQ WRK.BLANK
IF DTL.Ship_From_Warehouse = WRK.BLANK;

EXECUTE FUNCTION(RTV First Order Whse   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1397882;
PARAMETER(DTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(DTL.Ship_From_Warehouse);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.TXT_field_not_needed);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 QUIT;

}


ENDIF;

//?If Date entered, Time s/b entered too
CASE;

// IF DTL.LPT Load Plan Start Dt is GT 0
IF DTL.LPT_Load_Plan_Start_Dt > *ZERO;

CASE;

// IF DTL.LPT Load Plan Start Tm is 00:00:00
IF DTL.LPT_Load_Plan_Start_Tm = 0;

// Send error message - 'Value Required'
ERROR(USR1962);
MSGPARM(DTL.LPT_Load_Plan_Start_Tm);

ENDIF;

ENDIF;

//?If Time entered, Date s/b entered too
CASE;

// IF DTL.LPT Load Plan Start Tm is GT 0
IF DTL.LPT_Load_Plan_Start_Tm > 0;

CASE;

// IF DTL.LPT Load Plan Start Dt is NOT ENTERED
IF DTL.LPT_Load_Plan_Start_Dt = *ZERO;

// Send error message - 'Value Required'
ERROR(USR1962);
MSGPARM(DTL.LPT_Load_Plan_Start_Dt);

ENDIF;

ENDIF;

//?CALC: Detail screen function fields

EXECUTE FUNCTION(RTV Name, Status       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1260598;
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.USR_Carrier_Name);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Truck Size Desc.   RT) TYPE(RTVOBJ) FILE(OMFKREP)          AC1371092;
PARAMETER(DTL.Truck_Size);
PARAMETER(DTL.Truck_Size_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Actv Descr, Ctrl   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304411;
PARAMETER(DTL.Ship_From_Warehouse);
PARAMETER(DTL.Warehouse_Description);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Active Description RT) TYPE(RTVOBJ) FILE(CAACREP)          AC1287387;
PARAMETER(DTL.Ship_To_State_Code);
PARAMETER(DTL.State_Description);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Status Description = Condition name of DTL.Load Status
DTL.Status_Description = RTVCND(DTL.Load_Status);

// DTL.Description 14A      USR = Condition name of DTL.Shipping Method
DTL.Description_14A_USR = RTVCND(DTL.Shipping_Method);

// DTL.USR Desc. 10 = Condition name of DTL.Load Type
DTL.USR_Desc_10 = RTVCND(DTL.Load_Type);

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// DTL.Text USR 5 = Condition name of DTL.LH Power Only Load
DTL.Text_USR_5 = RTVCND(DTL.LH_Power_Only_Load);

//?USER: Validate detail screen relations

//?Set load sts if O.E. created load and has stops
CASE;

// IF DTL.Load Status is Entered or Combined
IF DTL.Load_Status = 'E'/'C';

CASE;

// IF DTL.*CMD key is *Lock Load
IF DTL.*CMD_key = '15';

// OR DTL.*CMD key is *Unlock Load
OR DTL.*CMD_key = '16';

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(VAL no Stop Entered    RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1295710;
PARAMETER(DTL.Load_ID);
PARAMETER(PAR.Status_Y_or_N);
{
 //?USER: Initialize routine

 // PAR.Status - Y or N = CND.no
 PAR.Status_Y_or_N = 'N';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF DB1.Stop/Drop is EQ Zero
 IF DB1.Stop_Drop = *ZERO;

 // PAR.Status - Y or N = CND.yes
 PAR.Status_Y_or_N = 'Y';

 QUIT;

 ENDIF;

}


//?All details have stop
CASE;

// IF PAR.Status - Y or N is no
IF PAR.Status_Y_or_N = 'N';

// PAR.Load Status = CND.Unlock
PAR.Load_Status = 'U';

//?All details have stop
// IF *OTHERWISE
IF *OTHERWISE;

// Send information message - 'Load has orders tied to it which are not assigned a stop.'
MESSAGE(USR2195 *INFO);

ENDIF;

ENDIF;

ENDIF;

//?Fill in ship from whse, ship to state when lock load
CASE;

// IF DTL.*CMD key is *Lock Load
IF DTL.*CMD_key = '15';

// AND WRK.Error Status is no
AND WRK.Error_Status = 'N';

//?Fill in ship from warehouse, if locking load and none entered
CASE;

// IF DTL.Ship From Warehouse EQ WRK.BLANK
IF DTL.Ship_From_Warehouse = WRK.BLANK;

EXECUTE FUNCTION(RTV First Order Whse   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1397882;
PARAMETER(DTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(DTL.Ship_From_Warehouse);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.TXT_field_not_needed);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 QUIT;

}


ENDIF;

//?Fill in ship to state, if locking load and none entered
CASE;

// IF DTL.Ship To State Code EQ WRK.BLANK
IF DTL.Ship_To_State_Code = WRK.BLANK;

EXECUTE FUNCTION(RTV Last Stop Consign  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1377331;
PARAMETER(DTL.Load_ID);
PARAMETER(WRK.Ship_To_Customer);
PARAMETER(WRK.Ship_To_Name);
PARAMETER(WRK.Ship_To_Address_Line_1);
PARAMETER(WRK.Ship_To_Address_Line_2);
PARAMETER(WRK.Ship_To_Address_Line_3);
PARAMETER(WRK.Ship_To_City);
PARAMETER(DTL.Ship_To_State_Code);
PARAMETER(WRK.Ship_To_Zip_Postal_Code);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV for B.O.L. Print   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1377319;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name);
 PARAMETER(PAR.Ship_To_Address_Line_1);
 PARAMETER(PAR.Ship_To_Address_Line_2);
 PARAMETER(PAR.Ship_To_Address_Line_3);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Ship_To_Zip_Postal_Code);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 QUIT;

}


ENDIF;

//?OMS132:  Fill in Flat amount, if possible, from Carr Dest Rate file
CASE;

// IF DTL.Flat Amount EQ WRK.ZERO
IF DTL.Flat_Amount = WRK.ZERO;

// AND DTL.Total Stops is One Stop
AND DTL.Total_Stops = 1;

//?get flat amount for destination city
EXECUTE FUNCTION(RTV Ship To City/St-Ld RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1454218;
PARAMETER(DTL.Load_ID);
PARAMETER(PAR.Destination_City);
PARAMETER(WRK.State_Code);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// Execute function CVT Str to Upper Alpha US.
EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
PARAMETER(PAR.Destination_City);
PARAMETER(WRK.Destination_City);
{
 PDWEUFR:  PGM PARM(&STRIN &STROUT)

 CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
}


// PAR.Destination City = WRK.Destination City
PAR.Destination_City = WRK.Destination_City;

EXECUTE FUNCTION(RTV Destination Amount RT) TYPE(RTVOBJ) FILE(PDLECPP)          AC1454806;
PARAMETER(DTL.Carrier_Broker);
PARAMETER(DTL.Ship_From_Warehouse);
PARAMETER(PAR.Destination_City);
PARAMETER(WRK.State_Code);
PARAMETER(DTL.Flat_Amount);
{
 //?USER: Process Data record

 //?only pass out FLAT amt.  (it could now be a ML rate too)  01/03/07
 CASE;

 // IF DB1.CDR Unit of Measure is Flat
 IF DB1.CDR_Unit_of_Measure = 'FL';

 MOVE *ALL (To: PAR From: DB1);

 ENDIF;

}


//?** If NRF, try using state in city         7/13/2007 LJB DLY029
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// PAR.Destination City = WRK.State Code
PAR.Destination_City = WRK.State_Code;

EXECUTE FUNCTION(RTV Destination Amount RT) TYPE(RTVOBJ) FILE(PDLECPP)          AC1454806;
PARAMETER(DTL.Carrier_Broker);
PARAMETER(DTL.Ship_From_Warehouse);
PARAMETER(PAR.Destination_City);
PARAMETER(WRK.State_Code);
PARAMETER(DTL.Flat_Amount);
{
 //?USER: Process Data record

 //?only pass out FLAT amt.  (it could now be a ML rate too)  01/03/07
 CASE;

 // IF DB1.CDR Unit of Measure is Flat
 IF DB1.CDR_Unit_of_Measure = 'FL';

 MOVE *ALL (To: PAR From: DB1);

 ENDIF;

}


ENDIF;

ENDIF;

ENDIF;

//?Set confirm for shipped, invoiced loads
CASE;

// IF DTL.Load Status is Shipped or Invoiced
IF DTL.Load_Status = 'I'/'S';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?VAL: Carrier exists & Carrier Insurance exists           E00230
CASE;

// IF DTL.Carrier Code is entered
IF DTL.Carrier_Code <> *BLANK;

EXECUTE FUNCTION(Val Carrier Active     RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1418093;
PARAMETER(DTL.Carrier_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


//?** Quit if no carrier
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carrier doesn't exist'
ERROR(USR1252);
MSGPARM(DTL.Carrier_Code);

QUIT;

ENDIF;

//?Validate Insurance if NOT MG Created Load
CASE;

// IF DTL.MG Created Load is Not MG Created Load
IF DTL.MG_Created_Load = *BLANK;

EXECUTE FUNCTION(Val Ins Existance     RT) TYPE(RTVOBJ) FILE(POCKREP)           AC1661147;
PARAMETER(DTL.Carrier_Code);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


//?** Quit if carrier has no insurance records           E00230
CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// Send error message - 'Halt - No Certificate of insurance for Carrier.'
ERROR(USR2418);
MSGPARM(DTL.Carrier_Code);

QUIT;

ENDIF;

//?VAL: Auto insurance expiration date                      E00230
EXECUTE FUNCTION(Val Insurance Expire  RT) TYPE(RTVOBJ) FILE(POCKREP)           AC1902236;
PARAMETER(DTL.Carrier_Code);
PARAMETER('AUTO');
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(LCL.Error_Flag_USR);
{
 //?USER: Initialize routine

 // PAR.Error Flag            USR = CND.No
 PAR.Error_Flag_USR = 'N';

 //?***** Change Log and Comments
 DO;

 //?** Quit if a record is found with an expired date
 ENDDO;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?VAL:  Insurance Expiration
 CASE;

 // IF PAR.Scheduled Ship Date USR is Entered
 IF PAR.Scheduled_Ship_Date_USR <> *ZERO;

 CASE;

 // IF DB1.CI Date of Expiration LT PAR.Scheduled Ship Date USR
 IF DB1.CI_Date_of_Expiration < PAR.Scheduled_Ship_Date_USR;

 EXECUTE FUNCTION(Rtv Insurance Desc    RT) TYPE(RTVOBJ) FILE(POCJREP)           AC1661091;
 PARAMETER(DB1.Insurance_Type_Code);
 PARAMETER(LCL.Insurance_Type_Desc);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Send error message - 'Halt-&3 insurance expired on &1 for Carrier &2'
 ERROR(USR3204);
 MSGPARM(DB1.CI_Date_of_Expiration);
 MSGPARM(DB1.Carrier_Code);
 MSGPARM(LCL.Insurance_Type_Desc);

 // PAR.Error Flag            USR = CND.Yes
 PAR.Error_Flag_USR = 'Y';

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Add 14 days to scheduled ship date to go 2 weeks out
 // LCL.Scheduled Ship Date USR = PAR.Scheduled Ship Date USR + CON.14 *DAYS
 LCL.Scheduled_Ship_Date_USR = DATEINCR(PAR.Scheduled_Ship_Date_USR 14 'DY' 1111111
 'NONE' 'N' 1);

 CASE;

 // IF DB1.CI Date of Expiration LE LCL.Scheduled Ship Date USR
 IF DB1.CI_Date_of_Expiration <= LCL.Scheduled_Ship_Date_USR;

 EXECUTE FUNCTION(Rtv Insurance Desc    RT) TYPE(RTVOBJ) FILE(POCJREP)           AC1661091;
 PARAMETER(DB1.Insurance_Type_Code);
 PARAMETER(LCL.Insurance_Type_Desc);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Send information message - 'Warn-&3 insurance will expire within 2 wks of Scheduled Ship Date'
 MESSAGE(USR3205 *INFO);
 MSGPARM(DB1.CI_Date_of_Expiration);
 MSGPARM(LCL.Insurance_Type_Desc);
 MSGPARM(DB1.Carrier_Code);

 ENDIF;

 ENDIF;

 ENDIF;

}


//?** quit if insurance cert has already expired
CASE;

// IF LCL.Error Flag            USR is Yes
IF LCL.Error_Flag_USR = 'Y';

QUIT;

ENDIF;

//?***
//?VAL: Cargo insurance expiration date                     E00230
EXECUTE FUNCTION(Val Insurance Expire  RT) TYPE(RTVOBJ) FILE(POCKREP)           AC1902236;
PARAMETER(DTL.Carrier_Code);
PARAMETER('CARGO');
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(LCL.Error_Flag_USR);
{
 //?USER: Initialize routine

 // PAR.Error Flag            USR = CND.No
 PAR.Error_Flag_USR = 'N';

 //?***** Change Log and Comments
 DO;

 //?** Quit if a record is found with an expired date
 ENDDO;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?VAL:  Insurance Expiration
 CASE;

 // IF PAR.Scheduled Ship Date USR is Entered
 IF PAR.Scheduled_Ship_Date_USR <> *ZERO;

 CASE;

 // IF DB1.CI Date of Expiration LT PAR.Scheduled Ship Date USR
 IF DB1.CI_Date_of_Expiration < PAR.Scheduled_Ship_Date_USR;

 EXECUTE FUNCTION(Rtv Insurance Desc    RT) TYPE(RTVOBJ) FILE(POCJREP)           AC1661091;
 PARAMETER(DB1.Insurance_Type_Code);
 PARAMETER(LCL.Insurance_Type_Desc);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Send error message - 'Halt-&3 insurance expired on &1 for Carrier &2'
 ERROR(USR3204);
 MSGPARM(DB1.CI_Date_of_Expiration);
 MSGPARM(DB1.Carrier_Code);
 MSGPARM(LCL.Insurance_Type_Desc);

 // PAR.Error Flag            USR = CND.Yes
 PAR.Error_Flag_USR = 'Y';

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Add 14 days to scheduled ship date to go 2 weeks out
 // LCL.Scheduled Ship Date USR = PAR.Scheduled Ship Date USR + CON.14 *DAYS
 LCL.Scheduled_Ship_Date_USR = DATEINCR(PAR.Scheduled_Ship_Date_USR 14 'DY' 1111111
 'NONE' 'N' 1);

 CASE;

 // IF DB1.CI Date of Expiration LE LCL.Scheduled Ship Date USR
 IF DB1.CI_Date_of_Expiration <= LCL.Scheduled_Ship_Date_USR;

 EXECUTE FUNCTION(Rtv Insurance Desc    RT) TYPE(RTVOBJ) FILE(POCJREP)           AC1661091;
 PARAMETER(DB1.Insurance_Type_Code);
 PARAMETER(LCL.Insurance_Type_Desc);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Send information message - 'Warn-&3 insurance will expire within 2 wks of Scheduled Ship Date'
 MESSAGE(USR3205 *INFO);
 MSGPARM(DB1.CI_Date_of_Expiration);
 MSGPARM(LCL.Insurance_Type_Desc);
 MSGPARM(DB1.Carrier_Code);

 ENDIF;

 ENDIF;

 ENDIF;

}


//?** quit if insurance cert has already expired
CASE;

// IF LCL.Error Flag            USR is Yes
IF LCL.Error_Flag_USR = 'Y';

QUIT;

ENDIF;

//?***
// DTL.USR Total Order Value = CON.*ZERO
DTL.USR_Total_Order_Value = *ZERO;

EXECUTE FUNCTION(RTV Load Dollar Amount RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1443874;
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.USR_Total_Order_Value);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 //?USER: Process Data record

 CASE;

 // IF DB1.Header Status is Not closed or cancelled
 IF DB1.Header_Status = 'L'/'A'/'R'/'E'/'H';

 // PAR.USR Total Order Value = PAR.USR Total Order Value + DB1.Order Value Total
 PAR.USR_Total_Order_Value = PAR.USR_Total_Order_Value + DB1.Order_Value_Total;

 ENDIF;

}


EXECUTE FUNCTION(Val Cargo Insurance    RT) TYPE(RTVOBJ) FILE(POCKREP)          AC1860213;
PARAMETER(DTL.Carrier_Code);
PARAMETER('CARGO');
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(LCL.Error_Flag_USR);
PARAMETER(DTL.USR_Total_Order_Value);
{
 //?USER: Initialize routine

 // PAR.Error Flag            USR = CND.No
 PAR.Error_Flag_USR = 'N';

 //?USER: Processing if Data record not found

 // Send error message - 'Halt - No Cargo Insurance Certificate for Carrier &1.'
 ERROR(USR3867);
 MSGPARM(PAR.Carrier_Code);

 // PAR.Error Flag            USR = CND.Yes
 PAR.Error_Flag_USR = 'Y';

 //?USER: Process Data record

 CASE;

 // IF DB1.Insurance Type Code is Cargo
 IF DB1.Insurance_Type_Code = 'CARGO';

 //?VAL:  Liability Limit
 CASE;

 // IF PAR.USR Total Order Value GT DB1.CI Liability Amount
 IF PAR.USR_Total_Order_Value > DB1.CI_Liability_Amount;

 EXECUTE FUNCTION(Rtv Insurance Desc    RT) TYPE(RTVOBJ) FILE(POCJREP)           AC1661091;
 PARAMETER(DB1.Insurance_Type_Code);
 PARAMETER(LCL.Insurance_Type_Desc);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Send error message - 'Halt-&3 Amount of &1 is less than Load dollar amount for Carrier &2'
 ERROR(USR3206);
 MSGPARM(DB1.CI_Liability_Amount);
 MSGPARM(DB1.Carrier_Code);
 MSGPARM(LCL.Insurance_Type_Desc);

 // PAR.Error Flag            USR = CND.Yes
 PAR.Error_Flag_USR = 'Y';

 ENDIF;

 ENDIF;

}


//?** quit if Cargo Insurance amt is less than Load cargo amount
CASE;

// IF LCL.Error Flag            USR is Yes
IF LCL.Error_Flag_USR = 'Y';

QUIT;

ENDIF;

//?***
//?VAL: General insurance expiration date-WARNING only, don't quit
EXECUTE FUNCTION(Val Ins Expire/Warning RT) TYPE(RTVOBJ) FILE(POCKREP)          AC1902315;
PARAMETER(DTL.Carrier_Code);
PARAMETER('GEN');
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(LCL.Error_Flag_USR);
{
 //?USER: Initialize routine

 // PAR.Error Flag            USR = CND.No
 PAR.Error_Flag_USR = 'N';

 //?***** Change Log and Comments
 DO;

 //?** Warning if a record is found with an expired date
 ENDDO;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?VAL:  Insurance Expiration
 CASE;

 // IF PAR.Scheduled Ship Date USR is Entered
 IF PAR.Scheduled_Ship_Date_USR <> *ZERO;

 CASE;

 // IF DB1.CI Date of Expiration LT PAR.Scheduled Ship Date USR
 IF DB1.CI_Date_of_Expiration < PAR.Scheduled_Ship_Date_USR;

 EXECUTE FUNCTION(Rtv Insurance Desc    RT) TYPE(RTVOBJ) FILE(POCJREP)           AC1661091;
 PARAMETER(DB1.Insurance_Type_Code);
 PARAMETER(LCL.Insurance_Type_Desc);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Send information message - 'Warn-&2 &3 insurance expired on &1. Notify carrier.'
 MESSAGE(USR4049 *INFO);
 MSGPARM(DB1.CI_Date_of_Expiration);
 MSGPARM(DB1.Carrier_Code);
 MSGPARM(LCL.Insurance_Type_Desc);

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Add 14 days to scheduled ship date to go 2 weeks out
 // LCL.Scheduled Ship Date USR = PAR.Scheduled Ship Date USR + CON.14 *DAYS
 LCL.Scheduled_Ship_Date_USR = DATEINCR(PAR.Scheduled_Ship_Date_USR 14 'DY' 1111111
 'NONE' 'N' 1);

 CASE;

 // IF DB1.CI Date of Expiration LE LCL.Scheduled Ship Date USR
 IF DB1.CI_Date_of_Expiration <= LCL.Scheduled_Ship_Date_USR;

 EXECUTE FUNCTION(Rtv Insurance Desc    RT) TYPE(RTVOBJ) FILE(POCJREP)           AC1661091;
 PARAMETER(DB1.Insurance_Type_Code);
 PARAMETER(LCL.Insurance_Type_Desc);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Send information message - 'Warn-&3 insurance will expire within 2 wks of Scheduled Ship Date'
 MESSAGE(USR3205 *INFO);
 MSGPARM(DB1.CI_Date_of_Expiration);
 MSGPARM(LCL.Insurance_Type_Desc);
 MSGPARM(DB1.Carrier_Code);

 ENDIF;

 ENDIF;

 ENDIF;

}


//?***
//?VAL: Workers Comp expiration date-WARNING only, don't quit
EXECUTE FUNCTION(Val Ins Expire/Warning RT) TYPE(RTVOBJ) FILE(POCKREP)          AC1902315;
PARAMETER(DTL.Carrier_Code);
PARAMETER('WRKCMP');
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(LCL.Error_Flag_USR);
{
 //?USER: Initialize routine

 // PAR.Error Flag            USR = CND.No
 PAR.Error_Flag_USR = 'N';

 //?***** Change Log and Comments
 DO;

 //?** Warning if a record is found with an expired date
 ENDDO;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?VAL:  Insurance Expiration
 CASE;

 // IF PAR.Scheduled Ship Date USR is Entered
 IF PAR.Scheduled_Ship_Date_USR <> *ZERO;

 CASE;

 // IF DB1.CI Date of Expiration LT PAR.Scheduled Ship Date USR
 IF DB1.CI_Date_of_Expiration < PAR.Scheduled_Ship_Date_USR;

 EXECUTE FUNCTION(Rtv Insurance Desc    RT) TYPE(RTVOBJ) FILE(POCJREP)           AC1661091;
 PARAMETER(DB1.Insurance_Type_Code);
 PARAMETER(LCL.Insurance_Type_Desc);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Send information message - 'Warn-&2 &3 insurance expired on &1. Notify carrier.'
 MESSAGE(USR4049 *INFO);
 MSGPARM(DB1.CI_Date_of_Expiration);
 MSGPARM(DB1.Carrier_Code);
 MSGPARM(LCL.Insurance_Type_Desc);

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Add 14 days to scheduled ship date to go 2 weeks out
 // LCL.Scheduled Ship Date USR = PAR.Scheduled Ship Date USR + CON.14 *DAYS
 LCL.Scheduled_Ship_Date_USR = DATEINCR(PAR.Scheduled_Ship_Date_USR 14 'DY' 1111111
 'NONE' 'N' 1);

 CASE;

 // IF DB1.CI Date of Expiration LE LCL.Scheduled Ship Date USR
 IF DB1.CI_Date_of_Expiration <= LCL.Scheduled_Ship_Date_USR;

 EXECUTE FUNCTION(Rtv Insurance Desc    RT) TYPE(RTVOBJ) FILE(POCJREP)           AC1661091;
 PARAMETER(DB1.Insurance_Type_Code);
 PARAMETER(LCL.Insurance_Type_Desc);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Send information message - 'Warn-&3 insurance will expire within 2 wks of Scheduled Ship Date'
 MESSAGE(USR3205 *INFO);
 MSGPARM(DB1.CI_Date_of_Expiration);
 MSGPARM(LCL.Insurance_Type_Desc);
 MSGPARM(DB1.Carrier_Code);

 ENDIF;

 ENDIF;

 ENDIF;

}


ENDIF;

ENDIF;

//?VAL: Mexican Carrier exists & has valid insurance        P000737
CASE;

// IF DTL.OHE Mexican Buyer Truck NE WRK.Blank for 4           USR
IF DTL.OHE_Carrier_SCAC_Code <> WRK.Blank_for_4_USR;

//?** move mexican carrier code to a 3 char field
// LCL.Text 3 Length USR = DTL.OHE Mexican Buyer Truck
LCL.Text_3_Length_USR = DTL.OHE_Carrier_SCAC_Code;

EXECUTE FUNCTION(Val Carrier Active     RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1418093;
PARAMETER(LCL.Text_3_Length_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


//?** Don't Quit if no carrier
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

//?** for now, just set return code to normal
// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

ENDIF;

//?Validate Insurance if NOT an MG Created load
CASE;

// IF DTL.MG Created Load is Not MG Created Load
IF DTL.MG_Created_Load = *BLANK;

EXECUTE FUNCTION(Val Ins Existance     RT) TYPE(RTVOBJ) FILE(POCKREP)           AC1661147;
PARAMETER(LCL.Text_3_Length_USR);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


//?** Don't quit at this time for Mexican Carriers
//?** Don't quit if carrier has no insurance records           E00230
CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// Send error message - 'Halt - No Certificate of insurance for Carrier.'
ERROR(USR2418);
MSGPARM(DTL.OHE_Carrier_SCAC_Code);

ENDIF;

//?VAL: Auto insurance expiration date                      E00230
EXECUTE FUNCTION(Val Insurance Expire  RT) TYPE(RTVOBJ) FILE(POCKREP)           AC1902236;
PARAMETER(LCL.Text_3_Length_USR);
PARAMETER('AUTO');
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(LCL.Error_Flag_USR);
{
 //?USER: Initialize routine

 // PAR.Error Flag            USR = CND.No
 PAR.Error_Flag_USR = 'N';

 //?***** Change Log and Comments
 DO;

 //?** Quit if a record is found with an expired date
 ENDDO;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?VAL:  Insurance Expiration
 CASE;

 // IF PAR.Scheduled Ship Date USR is Entered
 IF PAR.Scheduled_Ship_Date_USR <> *ZERO;

 CASE;

 // IF DB1.CI Date of Expiration LT PAR.Scheduled Ship Date USR
 IF DB1.CI_Date_of_Expiration < PAR.Scheduled_Ship_Date_USR;

 EXECUTE FUNCTION(Rtv Insurance Desc    RT) TYPE(RTVOBJ) FILE(POCJREP)           AC1661091;
 PARAMETER(DB1.Insurance_Type_Code);
 PARAMETER(LCL.Insurance_Type_Desc);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Send error message - 'Halt-&3 insurance expired on &1 for Carrier &2'
 ERROR(USR3204);
 MSGPARM(DB1.CI_Date_of_Expiration);
 MSGPARM(DB1.Carrier_Code);
 MSGPARM(LCL.Insurance_Type_Desc);

 // PAR.Error Flag            USR = CND.Yes
 PAR.Error_Flag_USR = 'Y';

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Add 14 days to scheduled ship date to go 2 weeks out
 // LCL.Scheduled Ship Date USR = PAR.Scheduled Ship Date USR + CON.14 *DAYS
 LCL.Scheduled_Ship_Date_USR = DATEINCR(PAR.Scheduled_Ship_Date_USR 14 'DY' 1111111
 'NONE' 'N' 1);

 CASE;

 // IF DB1.CI Date of Expiration LE LCL.Scheduled Ship Date USR
 IF DB1.CI_Date_of_Expiration <= LCL.Scheduled_Ship_Date_USR;

 EXECUTE FUNCTION(Rtv Insurance Desc    RT) TYPE(RTVOBJ) FILE(POCJREP)           AC1661091;
 PARAMETER(DB1.Insurance_Type_Code);
 PARAMETER(LCL.Insurance_Type_Desc);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Send information message - 'Warn-&3 insurance will expire within 2 wks of Scheduled Ship Date'
 MESSAGE(USR3205 *INFO);
 MSGPARM(DB1.CI_Date_of_Expiration);
 MSGPARM(LCL.Insurance_Type_Desc);
 MSGPARM(DB1.Carrier_Code);

 ENDIF;

 ENDIF;

 ENDIF;

}


//?** Don't quit at this time for Mexican Carriers
//?** don't quit if insurance cert has already expired
CASE;

// IF LCL.Error Flag            USR is Yes
IF LCL.Error_Flag_USR = 'Y';

ENDIF;

//?***
//?VAL: Cargo insurance expiration date                     E00230
EXECUTE FUNCTION(Val Insurance Expire  RT) TYPE(RTVOBJ) FILE(POCKREP)           AC1902236;
PARAMETER(LCL.Text_3_Length_USR);
PARAMETER('CARGO');
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(LCL.Error_Flag_USR);
{
 //?USER: Initialize routine

 // PAR.Error Flag            USR = CND.No
 PAR.Error_Flag_USR = 'N';

 //?***** Change Log and Comments
 DO;

 //?** Quit if a record is found with an expired date
 ENDDO;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?VAL:  Insurance Expiration
 CASE;

 // IF PAR.Scheduled Ship Date USR is Entered
 IF PAR.Scheduled_Ship_Date_USR <> *ZERO;

 CASE;

 // IF DB1.CI Date of Expiration LT PAR.Scheduled Ship Date USR
 IF DB1.CI_Date_of_Expiration < PAR.Scheduled_Ship_Date_USR;

 EXECUTE FUNCTION(Rtv Insurance Desc    RT) TYPE(RTVOBJ) FILE(POCJREP)           AC1661091;
 PARAMETER(DB1.Insurance_Type_Code);
 PARAMETER(LCL.Insurance_Type_Desc);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Send error message - 'Halt-&3 insurance expired on &1 for Carrier &2'
 ERROR(USR3204);
 MSGPARM(DB1.CI_Date_of_Expiration);
 MSGPARM(DB1.Carrier_Code);
 MSGPARM(LCL.Insurance_Type_Desc);

 // PAR.Error Flag            USR = CND.Yes
 PAR.Error_Flag_USR = 'Y';

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Add 14 days to scheduled ship date to go 2 weeks out
 // LCL.Scheduled Ship Date USR = PAR.Scheduled Ship Date USR + CON.14 *DAYS
 LCL.Scheduled_Ship_Date_USR = DATEINCR(PAR.Scheduled_Ship_Date_USR 14 'DY' 1111111
 'NONE' 'N' 1);

 CASE;

 // IF DB1.CI Date of Expiration LE LCL.Scheduled Ship Date USR
 IF DB1.CI_Date_of_Expiration <= LCL.Scheduled_Ship_Date_USR;

 EXECUTE FUNCTION(Rtv Insurance Desc    RT) TYPE(RTVOBJ) FILE(POCJREP)           AC1661091;
 PARAMETER(DB1.Insurance_Type_Code);
 PARAMETER(LCL.Insurance_Type_Desc);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Send information message - 'Warn-&3 insurance will expire within 2 wks of Scheduled Ship Date'
 MESSAGE(USR3205 *INFO);
 MSGPARM(DB1.CI_Date_of_Expiration);
 MSGPARM(LCL.Insurance_Type_Desc);
 MSGPARM(DB1.Carrier_Code);

 ENDIF;

 ENDIF;

 ENDIF;

}


//?** Don't quit at this time for Mexican Carriers
//?** don't quit if insurance cert has already expired
CASE;

// IF LCL.Error Flag            USR is Yes
IF LCL.Error_Flag_USR = 'Y';

ENDIF;

//?***
// DTL.USR Total Order Value = CON.*ZERO
DTL.USR_Total_Order_Value = *ZERO;

EXECUTE FUNCTION(RTV Load Dollar Amount RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1443874;
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.USR_Total_Order_Value);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 //?USER: Process Data record

 CASE;

 // IF DB1.Header Status is Not closed or cancelled
 IF DB1.Header_Status = 'L'/'A'/'R'/'E'/'H';

 // PAR.USR Total Order Value = PAR.USR Total Order Value + DB1.Order Value Total
 PAR.USR_Total_Order_Value = PAR.USR_Total_Order_Value + DB1.Order_Value_Total;

 ENDIF;

}


EXECUTE FUNCTION(Val Cargo Insurance    RT) TYPE(RTVOBJ) FILE(POCKREP)          AC1860213;
PARAMETER(LCL.Text_3_Length_USR);
PARAMETER('CARGO');
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(LCL.Error_Flag_USR);
PARAMETER(DTL.USR_Total_Order_Value);
{
 //?USER: Initialize routine

 // PAR.Error Flag            USR = CND.No
 PAR.Error_Flag_USR = 'N';

 //?USER: Processing if Data record not found

 // Send error message - 'Halt - No Cargo Insurance Certificate for Carrier &1.'
 ERROR(USR3867);
 MSGPARM(PAR.Carrier_Code);

 // PAR.Error Flag            USR = CND.Yes
 PAR.Error_Flag_USR = 'Y';

 //?USER: Process Data record

 CASE;

 // IF DB1.Insurance Type Code is Cargo
 IF DB1.Insurance_Type_Code = 'CARGO';

 //?VAL:  Liability Limit
 CASE;

 // IF PAR.USR Total Order Value GT DB1.CI Liability Amount
 IF PAR.USR_Total_Order_Value > DB1.CI_Liability_Amount;

 EXECUTE FUNCTION(Rtv Insurance Desc    RT) TYPE(RTVOBJ) FILE(POCJREP)           AC1661091;
 PARAMETER(DB1.Insurance_Type_Code);
 PARAMETER(LCL.Insurance_Type_Desc);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Send error message - 'Halt-&3 Amount of &1 is less than Load dollar amount for Carrier &2'
 ERROR(USR3206);
 MSGPARM(DB1.CI_Liability_Amount);
 MSGPARM(DB1.Carrier_Code);
 MSGPARM(LCL.Insurance_Type_Desc);

 // PAR.Error Flag            USR = CND.Yes
 PAR.Error_Flag_USR = 'Y';

 ENDIF;

 ENDIF;

}


//?** Don't quit at this time for Mexican Carriers
//?** don't quit if Cargo Insurance amt is less than Load cargo amount
CASE;

// IF LCL.Error Flag            USR is Yes
IF LCL.Error_Flag_USR = 'Y';

ENDIF;

//?***
//?VAL: General insurance expiration date-WARNING only, don't quit
EXECUTE FUNCTION(Val Ins Expire/Warning RT) TYPE(RTVOBJ) FILE(POCKREP)          AC1902315;
PARAMETER(LCL.Text_3_Length_USR);
PARAMETER('GEN');
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(LCL.Error_Flag_USR);
{
 //?USER: Initialize routine

 // PAR.Error Flag            USR = CND.No
 PAR.Error_Flag_USR = 'N';

 //?***** Change Log and Comments
 DO;

 //?** Warning if a record is found with an expired date
 ENDDO;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?VAL:  Insurance Expiration
 CASE;

 // IF PAR.Scheduled Ship Date USR is Entered
 IF PAR.Scheduled_Ship_Date_USR <> *ZERO;

 CASE;

 // IF DB1.CI Date of Expiration LT PAR.Scheduled Ship Date USR
 IF DB1.CI_Date_of_Expiration < PAR.Scheduled_Ship_Date_USR;

 EXECUTE FUNCTION(Rtv Insurance Desc    RT) TYPE(RTVOBJ) FILE(POCJREP)           AC1661091;
 PARAMETER(DB1.Insurance_Type_Code);
 PARAMETER(LCL.Insurance_Type_Desc);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Send information message - 'Warn-&2 &3 insurance expired on &1. Notify carrier.'
 MESSAGE(USR4049 *INFO);
 MSGPARM(DB1.CI_Date_of_Expiration);
 MSGPARM(DB1.Carrier_Code);
 MSGPARM(LCL.Insurance_Type_Desc);

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Add 14 days to scheduled ship date to go 2 weeks out
 // LCL.Scheduled Ship Date USR = PAR.Scheduled Ship Date USR + CON.14 *DAYS
 LCL.Scheduled_Ship_Date_USR = DATEINCR(PAR.Scheduled_Ship_Date_USR 14 'DY' 1111111
 'NONE' 'N' 1);

 CASE;

 // IF DB1.CI Date of Expiration LE LCL.Scheduled Ship Date USR
 IF DB1.CI_Date_of_Expiration <= LCL.Scheduled_Ship_Date_USR;

 EXECUTE FUNCTION(Rtv Insurance Desc    RT) TYPE(RTVOBJ) FILE(POCJREP)           AC1661091;
 PARAMETER(DB1.Insurance_Type_Code);
 PARAMETER(LCL.Insurance_Type_Desc);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Send information message - 'Warn-&3 insurance will expire within 2 wks of Scheduled Ship Date'
 MESSAGE(USR3205 *INFO);
 MSGPARM(DB1.CI_Date_of_Expiration);
 MSGPARM(LCL.Insurance_Type_Desc);
 MSGPARM(DB1.Carrier_Code);

 ENDIF;

 ENDIF;

 ENDIF;

}


//?***
//?VAL: Workers Comp expiration date-WARNING only, don't quit
EXECUTE FUNCTION(Val Ins Expire/Warning RT) TYPE(RTVOBJ) FILE(POCKREP)          AC1902315;
PARAMETER(LCL.Text_3_Length_USR);
PARAMETER('WRKCMP');
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(LCL.Error_Flag_USR);
{
 //?USER: Initialize routine

 // PAR.Error Flag            USR = CND.No
 PAR.Error_Flag_USR = 'N';

 //?***** Change Log and Comments
 DO;

 //?** Warning if a record is found with an expired date
 ENDDO;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?VAL:  Insurance Expiration
 CASE;

 // IF PAR.Scheduled Ship Date USR is Entered
 IF PAR.Scheduled_Ship_Date_USR <> *ZERO;

 CASE;

 // IF DB1.CI Date of Expiration LT PAR.Scheduled Ship Date USR
 IF DB1.CI_Date_of_Expiration < PAR.Scheduled_Ship_Date_USR;

 EXECUTE FUNCTION(Rtv Insurance Desc    RT) TYPE(RTVOBJ) FILE(POCJREP)           AC1661091;
 PARAMETER(DB1.Insurance_Type_Code);
 PARAMETER(LCL.Insurance_Type_Desc);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Send information message - 'Warn-&2 &3 insurance expired on &1. Notify carrier.'
 MESSAGE(USR4049 *INFO);
 MSGPARM(DB1.CI_Date_of_Expiration);
 MSGPARM(DB1.Carrier_Code);
 MSGPARM(LCL.Insurance_Type_Desc);

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Add 14 days to scheduled ship date to go 2 weeks out
 // LCL.Scheduled Ship Date USR = PAR.Scheduled Ship Date USR + CON.14 *DAYS
 LCL.Scheduled_Ship_Date_USR = DATEINCR(PAR.Scheduled_Ship_Date_USR 14 'DY' 1111111
 'NONE' 'N' 1);

 CASE;

 // IF DB1.CI Date of Expiration LE LCL.Scheduled Ship Date USR
 IF DB1.CI_Date_of_Expiration <= LCL.Scheduled_Ship_Date_USR;

 EXECUTE FUNCTION(Rtv Insurance Desc    RT) TYPE(RTVOBJ) FILE(POCJREP)           AC1661091;
 PARAMETER(DB1.Insurance_Type_Code);
 PARAMETER(LCL.Insurance_Type_Desc);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Send information message - 'Warn-&3 insurance will expire within 2 wks of Scheduled Ship Date'
 MESSAGE(USR3205 *INFO);
 MSGPARM(DB1.CI_Date_of_Expiration);
 MSGPARM(LCL.Insurance_Type_Desc);
 MSGPARM(DB1.Carrier_Code);

 ENDIF;

 ENDIF;

 ENDIF;

}


ENDIF;

ENDIF;

//?If carrier code is entered and carrier broker is not default broker
CASE;

// IF DTL.Carrier Code is entered
IF DTL.Carrier_Code <> *BLANK;

// AND DTL.Carrier Broker is not entered
AND DTL.Carrier_Broker = *BLANK;

// DTL.Carrier Broker = DTL.Carrier Code
DTL.Carrier_Broker = DTL.Carrier_Code;

//?C7674:  Fill in Flat amount, if possible
CASE;

// IF DTL.Flat Amount EQ WRK.ZERO
IF DTL.Flat_Amount = WRK.ZERO;

// AND DTL.Total Stops is One Stop
AND DTL.Total_Stops = 1;

//?get flat amount for destination city
EXECUTE FUNCTION(RTV Ship To City/St-Ld RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1454218;
PARAMETER(DTL.Load_ID);
PARAMETER(PAR.Destination_City);
PARAMETER(WRK.State_Code);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// Execute function CVT Str to Upper Alpha US.
EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
PARAMETER(PAR.Destination_City);
PARAMETER(LCL.Destination_City);
{
 PDWEUFR:  PGM PARM(&STRIN &STROUT)

 CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
}


// PAR.Destination City = LCL.Destination City
PAR.Destination_City = LCL.Destination_City;

EXECUTE FUNCTION(RTV Destination Amount RT) TYPE(RTVOBJ) FILE(PDLECPP)          AC1454806;
PARAMETER(DTL.Carrier_Broker);
PARAMETER(DTL.Ship_From_Warehouse);
PARAMETER(PAR.Destination_City);
PARAMETER(WRK.State_Code);
PARAMETER(DTL.Flat_Amount);
{
 //?USER: Process Data record

 //?only pass out FLAT amt.  (it could now be a ML rate too)  01/03/07
 CASE;

 // IF DB1.CDR Unit of Measure is Flat
 IF DB1.CDR_Unit_of_Measure = 'FL';

 MOVE *ALL (To: PAR From: DB1);

 ENDIF;

}


//?** If NRF, try again with State code in place of the city
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// PAR.Destination City = WRK.State Code
PAR.Destination_City = WRK.State_Code;

EXECUTE FUNCTION(RTV Destination Amount RT) TYPE(RTVOBJ) FILE(PDLECPP)          AC1454806;
PARAMETER(DTL.Carrier_Broker);
PARAMETER(DTL.Ship_From_Warehouse);
PARAMETER(PAR.Destination_City);
PARAMETER(WRK.State_Code);
PARAMETER(DTL.Flat_Amount);
{
 //?USER: Process Data record

 //?only pass out FLAT amt.  (it could now be a ML rate too)  01/03/07
 CASE;

 // IF DB1.CDR Unit of Measure is Flat
 IF DB1.CDR_Unit_of_Measure = 'FL';

 MOVE *ALL (To: PAR From: DB1);

 ENDIF;

}


ENDIF;

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Carrier_Broker);
PARAMETER(DTL.Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Not an error if Carrier Broker name is not there
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

ENDIF;

//?If Export put dtl.trailer into container
CASE;

// IF DTL.Export Status is yes
IF DTL.Export_Status = 'Y';

// AND DTL.Shipping Line is entered
AND DTL.Shipping_Line <> *BLANK;

CASE;

// IF DTL.Trailer ID USR is Entered
IF DTL.Trailer_ID_USR <> *BLANK;

// DTL.Container Number = DTL.Trailer ID USR
DTL.Container_Number = DTL.Trailer_ID_USR;

ENDIF;

ENDIF;

//?Convert Container to all caps (for Exports)           E004079
CASE;

// IF LCL.Trailer ID USR is Entered
IF LCL.Trailer_ID_USR <> *BLANK;

// LCL.Case Sensitive Field = DTL.Container Number
LCL.Case_Sensitive_Field = DTL.Container_Number;

// Call program CVT to Upper Alpha 3   XF.
CALL PROGRAM(CVT to Upper Alpha 3   XF) ('PBSBXFR');
PARAMETER(LCL.Case_Sensitive_Field);
PARAMETER(LCL.Case_Upper_Field);

// DTL.Container Number = LCL.Case Upper Field
DTL.Container_Number = LCL.Case_Upper_Field;

ENDIF;

//?Convert Trailer ID to all caps                        E004079
CASE;

// IF LCL.Trailer ID USR is Entered
IF LCL.Trailer_ID_USR <> *BLANK;

// LCL.Case Sensitive Field = DTL.Trailer ID USR
LCL.Case_Sensitive_Field = DTL.Trailer_ID_USR;

// Call program CVT to Upper Alpha 3   XF.
CALL PROGRAM(CVT to Upper Alpha 3   XF) ('PBSBXFR');
PARAMETER(LCL.Case_Sensitive_Field);
PARAMETER(LCL.Case_Upper_Field);

// DTL.Trailer ID USR = LCL.Case Upper Field
DTL.Trailer_ID_USR = LCL.Case_Upper_Field;

ENDIF;

//?If Shipping Line is entered, use instead of Carrier   E004079
CASE;

// IF DTL.USR Work Field 3A is Entered
IF DTL.USR_Work_Field_3A <> *BLANK;

// LCL.Carrier Code = DTL.USR Work Field 3A
LCL.Carrier_Code = DTL.USR_Work_Field_3A;

// DTL.Shipping Line = DTL.USR Work Field 3A
DTL.Shipping_Line = DTL.USR_Work_Field_3A;

// LCL.Trailer ID USR = DTL.Container Number
LCL.Trailer_ID_USR = DTL.Container_Number;

//?If Shipping Line is entered, use instead of Carrier   E004079
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Carrier Code = DTL.Carrier Code
LCL.Carrier_Code = DTL.Carrier_Code;

// LCL.Trailer ID USR = DTL.Trailer ID USR
LCL.Trailer_ID_USR = DTL.Trailer_ID_USR;

ENDIF;

//?OMS301 -- Validate Trailer        +changes for E004079
CASE;

// IF LCL.Trailer ID USR NE WRK.Blank for 12          USR
IF LCL.Trailer_ID_USR <> WRK.Blank_for_12_USR;

// AND LCL.Trailer ID USR NE WRK.Trailer ID USR
AND ( LCL.Trailer_ID_USR <> WRK.Trailer_ID_USR;

// OR LCL.Carrier Code NE WRK.USR Carrier Code
OR LCL.Carrier_Code <> WRK.USR_Carrier_Code );

//?** Output Co# to lcl context for comparison to ld str co#   FP1251
//?** Output Carr or ShipLine to lcl context for compare       E004079
//?** Rtv new trailer info for Shipline or for Carrier
EXECUTE FUNCTION(Rtv Trailer            RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC1498208;
PARAMETER(LCL.Carrier_Code);
PARAMETER(LCL.Trailer_ID_USR);
PARAMETER(LCL.Company_Number);
PARAMETER(WRK.USR_Load_Type);
PARAMETER(WRK.Trailer_Type);
PARAMETER(WRK.Seaboard_Owned_Status);
PARAMETER(WRK.On_Yard_Status);
PARAMETER(WRK.USR_On_Yard_Date_New);
PARAMETER(WRK.USR_On_Yard_Time_New);
PARAMETER(WRK.Assigned_Status);
PARAMETER(WRK.Available_Status);
PARAMETER(WRK.Not_Available_Reason_Code);
PARAMETER(WRK.Comment_Line);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Carrier required to add Trailer. Add trailer if it doesn't exist.
CASE;

// IF WRK.USR Load Type is Blank
IF WRK.USR_Load_Type = *BLANK;

//?error: carr or shipline req'd
CASE;

// IF DTL.Carrier Code EQ WRK.BLANK
IF DTL.Carrier_Code = WRK.BLANK;

// AND DTL.Shipping Line is not entered
AND DTL.Shipping_Line = *BLANK;

// Send error message - 'Carrier is required to enter a trailer.'
ERROR(USR2668);
MSGPARM(DTL.Carrier_Code);

//?error: carr or shipline req'd
// IF *OTHERWISE
IF *OTHERWISE;

//?** E002966 If trailer is not on yard, add to file with zeros in dt/tm
//?** Put the Trailer ID in the Load Hdr and zeroes in the OYD/T
CASE;

// IF WRK.On Yard Status is no
IF WRK.On_Yard_Status = 'N';

// Send information message - 'Warning: Trailer will be created for not on yard'
MESSAGE(USR4692 *INFO);
MSGPARM(DTL.Trailer_ID_USR);

// DTL.On Yard Date = CND.not entered
DTL.On_Yard_Date = *ZERO;

// DTL.On Yard Time = CND.Not Entered
DTL.On_Yard_Time = *ZERO;

ENDIF;

//?* If shipline entered put trailer in container for exports  E004079
CASE;

// IF DTL.Export Status is yes
IF DTL.Export_Status = 'Y';

CASE;

// IF DTL.USR Work Field 3A is Entered
IF DTL.USR_Work_Field_3A <> *BLANK;

// DTL.Container Number = DTL.Trailer ID USR
DTL.Container_Number = DTL.Trailer_ID_USR;

ENDIF;

ENDIF;

ENDIF;

//?Carrier required to add Trailer. Add trailer if it doesn't exist.
// IF WRK.Record Status is Active
IF WRK.Record_Status = 'A';

//?Validate using shipline if entered, else carrier      E004079
//?Validate carr/trailer are not already assigned    E002105
CASE;

// IF DTL.Export Status is no
IF DTL.Export_Status = 'N';

// LCL.Load ID USR = CND.Not entered
LCL.Load_ID_USR = *ZERO;

EXECUTE FUNCTION(VAL Trailer assignmnt RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC2031954;
PARAMETER(*ZERO);
PARAMETER(LCL.Trailer_ID_USR);
PARAMETER(LCL.Carrier_Code);
PARAMETER(LCL.Load_Id_3);
PARAMETER(DTL.Load_ID);
{
 //?USER: Initialize routine

 //?***** Changes and comments
 DO;

 //?** 05/14/2012 LJB E002105
 //?** Restrict to Carrier/Trailer, okay if multiple carriers have
 //?** the same trailer id
 ENDDO;

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.Trailer Available to assn
 PGM.*Return_code = 'TRLRAVL';

 //?USER: Process Data record

 CASE;

 // IF DB1.Load ID NE PAR.Load Id 2
 IF DB1.Load_ID <> PAR.Load_Id_2;

 CASE;

 // IF DB1.Load Status is Prior to Shipped
 IF DB1.Load_Status = 'C'/'E'/'L'/'U';

 // PGM.*Return code = CND.Trailer already assigned
 PGM.*Return_code = 'TRLRASN';

 // PAR.USR Load ID = DB1.Load ID
 PAR.USR_Load_ID = DB1.Load_ID;

 QUIT;

 ENDIF;

 ENDIF;

}


//?Trailer
CASE;

// IF PGM.*Return code is Trailer already assigned
IF PGM.*Return_code = 'TRLRASN';

// Send error message - 'Trailer is assigned to Load &1.'
ERROR(USR2822);
MSGPARM(LCL.Load_Id_3);

//?Trailer
// IF *OTHERWISE
IF *OTHERWISE;

//?** Otherwise, fill in On Yard Dt/Tm from Trailer file   E002966
// DTL.On Yard Date = WRK.USR On Yard Date New
DTL.On_Yard_Date = WRK.USR_On_Yard_Date_New;

// DTL.On Yard Time = WRK.USR On Yard Time New
DTL.On_Yard_Time = WRK.USR_On_Yard_Time_New;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Load ID USR = CND.Not entered
LCL.Load_ID_USR = *ZERO;

EXECUTE FUNCTION(VAL ShpLin/Cntnr-dup   RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2110396;
PARAMETER(LCL.Load_ID_USR);
PARAMETER(LCL.Carrier_Code);
PARAMETER(DTL.Trailer_ID_USR);
PARAMETER(DTL.Load_ID);
PARAMETER(LCL.Load_Id_3);
{
 //?USER: Initialize routine

 // LCL.Load Status New = CND.*Blank
 LCL.Load_Status_New = *BLANK;

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 //?** Comments
 DO;

 //?** See if there is a load with this same Ship Line/Container number
 //?** that does not match the load passed in. If there is, and it has
 //?** not shipped, then flag as already assigned to a load and
 //?** pass back to the calling program
 ENDDO;

 CASE;

 // IF DB1.Load ID NE PAR.Load Id 1
 IF DB1.Load_ID <> PAR.Load_Id_1;

 EXECUTE FUNCTION(RTV Load Status        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1297640;
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.Load_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Load Status is Entered,Comb,Unlck,Locked
 IF LCL.Load_Status = 'C'/'E'/'L'/'U';

 // PGM.*Return code = CND.Trailer already assigned
 PGM.*Return_code = 'TRLRASN';

 // PAR.Load Id 2 = DB1.Load ID
 PAR.Load_Id_2 = DB1.Load_ID;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 ENDIF;

}


// LCL.Record Found USR = CND.Record Not Found
LCL.Record_Found_USR = 'N';

//?Export Load
CASE;

// IF DTL.Export Status is yes
IF DTL.Export_Status = 'Y';

CASE;

// IF PGM.*Return code is Trailer already assigned
IF PGM.*Return_code = 'TRLRASN';

// Send error message - 'Trailer is assigned to Load &1.'
ERROR(USR2822);
MSGPARM(LCL.Load_Id_1);

// LCL.Record Found USR = CND.Record Found
LCL.Record_Found_USR = 'Y';

// IF PGM.*Return code is Trailer Available to assn
IF PGM.*Return_code = 'TRLRAVL';

//?** Populate Ld Hdr on yard date and time             E002966
//?** This will update the Load Header file
//?** Put the Trailer ID in Container ID for exports     E002966
// DTL.Container Number = DTL.Trailer ID USR
DTL.Container_Number = DTL.Trailer_ID_USR;

// DTL.Shipping Line = DTL.USR Work Field 3A
DTL.Shipping_Line = DTL.USR_Work_Field_3A;

// DTL.On Yard Date = WRK.USR On Yard Date New
DTL.On_Yard_Date = WRK.USR_On_Yard_Date_New;

// DTL.On Yard Time = WRK.USR On Yard Time New
DTL.On_Yard_Time = WRK.USR_On_Yard_Time_New;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?** Populate Ld Hdr on yard date and time             E002966
//?** This will update the Load Header file
// DTL.On Yard Date = WRK.USR On Yard Date New
DTL.On_Yard_Date = WRK.USR_On_Yard_Date_New;

// DTL.On Yard Time = WRK.USR On Yard Time New
DTL.On_Yard_Time = WRK.USR_On_Yard_Time_New;

ENDIF;

//?Export Load
// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

ENDIF;

//?Carrier required to add Trailer. Add trailer if it doesn't exist.
// IF LCL.Company Number NE DTL.Company Number
IF LCL.Company_Number <> DTL.Company_Number;

//?** Info test moved to after error tests               E002105
//?** Trailer Co# <> Load Start Co# - warining msg       E00117  3/12/08
// Send information message - 'Trailer Co# & Load Start Co# do not match-Press enter'
MESSAGE(USR3902 *INFO);
MSGPARM(DTL.Trailer_ID_USR);

//?Carrier required to add Trailer. Add trailer if it doesn't exist.
// IF *OTHERWISE
IF *OTHERWISE;

//?Load type
CASE;

// IF WRK.USR Load Type NE DTL.Load Type
IF WRK.USR_Load_Type <> DTL.Load_Type;

// Send error message - 'Trailer Load Type &2 disagrees with Load Type &1 on the Load.'
ERROR(USR2613);
MSGPARM(DTL.Load_Type);
MSGPARM(WRK.USR_Load_Type);
MSGPARM(DTL.Trailer_ID_USR);

ENDIF;

//?Assigned Status
CASE;

// IF WRK.Assigned Status is yes
IF WRK.Assigned_Status = 'Y';

EXECUTE FUNCTION(RTV Load ID for Trailr RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1498955;
PARAMETER(DTL.Load_ID);
PARAMETER(WRK.Company_Number);
PARAMETER(DTL.Trailer_ID_USR);
PARAMETER(LCL.Carrier_Code);
PARAMETER(WRK.USR_Active_Load);
PARAMETER(WRK.USR_Load_Assigned);
{
 //?USER: Initialize routine

 // PAR.USR Active Load = CND.no
 PAR.USR_Active_Load = 'N';

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.USR Active Load = CND.no
 PAR.USR_Active_Load = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Truck Departure Date is not entered
 IF DB1.Truck_Departure_Date = *ZERO;

 //?Active load
 //?If Load is not the Load currently being edited.
 CASE;

 // IF DB1.Load ID NE PAR.Load ID
 IF DB1.Load_ID <> PAR.Load_ID;

 // AND DB1.Load Status is Entered,Comb,Unlck,Locked
 AND DB1.Load_Status = 'C'/'E'/'L'/'U';

 // PAR.USR Active Load = CND.yes
 PAR.USR_Active_Load = 'Y';

 // PAR.USR Load Assigned = DB1.Load ID
 PAR.USR_Load_Assigned = DB1.Load_ID;

 // PAR.Company Number = DB1.Company Number
 PAR.Company_Number = DB1.Company_Number;

 QUIT;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?NOT Active load
 ENDIF;

}


CASE;

// IF WRK.USR Active Load is yes
IF WRK.USR_Active_Load = 'Y';

// Send error message - 'Trailer is already assigned to load &2'
ERROR(USR2618);
MSGPARM(DTL.Trailer_ID_USR);
MSGPARM(WRK.USR_Load_Assigned);

ENDIF;

ENDIF;

//?On Yard date
CASE;

// IF WRK.USR On Yard Date New is not entered
IF WRK.USR_On_Yard_Date_New = *ZERO;

//?** If trailer is not on yard, put zeroes in OYD/T   E002966 2/12/14
// Send information message - 'Warning: Trailer is not On Yard.'
MESSAGE(USR2619 *INFO);
MSGPARM(DTL.Trailer_ID_USR);

// DTL.On Yard Date = CND.not entered
DTL.On_Yard_Date = *ZERO;

// DTL.On Yard Time = CND.Not Entered
DTL.On_Yard_Time = *ZERO;

//?On Yard date
// IF *OTHERWISE
IF *OTHERWISE;

//?** Populate the fields with the on yard date and time  E002966
//?** This will update the Load Header file
// DTL.On Yard Date = WRK.USR On Yard Date New
DTL.On_Yard_Date = WRK.USR_On_Yard_Date_New;

// DTL.On Yard Time = WRK.USR On Yard Time New
DTL.On_Yard_Time = WRK.USR_On_Yard_Time_New;

ENDIF;

//?Available sts
CASE;

// IF WRK.Available Status is Not Yes
IF WRK.Available_Status = *BLANK/'N';

// Send information message - 'Warning: Trailer is not Available for assignment.'
MESSAGE(USR2616 *INFO);
MSGPARM(DTL.Trailer_ID_USR);

ENDIF;

//?Seaboard owned
CASE;

// IF WRK.Seaboard Owned Status is yes
IF WRK.Seaboard_Owned_Status = 'Y';

// Send information message - 'Warning:  Trailer is Seaboard Owned.'
MESSAGE(USR2617 *INFO);
MSGPARM(DTL.Trailer_ID_USR);

ENDIF;

//?Put Trailer in Container for exports if ShipLine entered    E004079
CASE;

// IF DTL.Export Status is yes
IF DTL.Export_Status = 'Y';

CASE;

// IF DTL.Shipping Line is entered
IF DTL.Shipping_Line <> *BLANK;

// DTL.Container Number = DTL.Trailer ID USR
DTL.Container_Number = DTL.Trailer_ID_USR;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?OMS132:  default Allocate Pounds/Miles based on load type
CASE;

// IF PAR.USR Update Flag is Yes
IF PAR.USR_Update_Flag = 'Y';

CASE;

// IF DTL.Load Type is Regular
IF DTL.Load_Type = 'R';

// DTL.Allocate Pounds/Miles = CND.Miles
DTL.Allocate_Pounds_Miles = 'M';

// IF DTL.Load Type is Bulk
IF DTL.Load_Type = 'B';

// DTL.Allocate Pounds/Miles = CND.Ton
DTL.Allocate_Pounds_Miles = 'T';

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Allocate Pounds/Miles = CND.Miles
DTL.Allocate_Pounds_Miles = 'M';

ENDIF;

ENDIF;

//?02/13/07 PKD Removed hardcoding of company number.
EXECUTE FUNCTION(Rtv Plant Co Status   RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1761084;
PARAMETER(DTL.Company_Number);
PARAMETER(LCL.Plant_Company_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Validate load start co
CASE;

// IF LCL.Plant Company Sts is Plant Company
IF LCL.Plant_Company_Sts = 'P';

EXECUTE FUNCTION(VAL Load Start Co      RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1703318;
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Company_Number);
PARAMETER(PAR.Status_Y_or_N);
{
 //?USER: Initialize routine

 // PAR.Status - Y or N = CND.no
 PAR.Status_Y_or_N = 'N';

 //?USER: Processing if Data record not found

 // PAR.Status - Y or N = CND.yes
 PAR.Status_Y_or_N = 'Y';

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 //?If at least one company matching the par, then quit.
 CASE;

 // IF DB1.Company Number EQ PAR.Company Number
 IF DB1.Company_Number = PAR.Company_Number;

 // PAR.Status - Y or N = CND.yes
 PAR.Status_Y_or_N = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF PAR.Status - Y or N is no
IF PAR.Status_Y_or_N = 'N';

// Send error message - 'Invalid Load Start Co. Order not found with matching Co.'
ERROR(USR3365);
MSGPARM(DTL.Company_Number);

ENDIF;

//?Validate load start co
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid Company Number'
ERROR(USR1783);
MSGPARM(DTL.Company_Number);

ENDIF;

//?** Match Rated Freight to the Flat Amount        dly029
CASE;

// IF DTL.Flat Amount NE WRK.Flat Amount
IF DTL.Flat_Amount <> WRK.Flat_Amount;

// DTL.Rated Freight = DTL.Flat Amount
DTL.Rated_Freight = DTL.Flat_Amount;

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(CHG Load Header/Trlr   IF) TYPE(EXCINTFUN) FILE(OMFJCPP)       AC1509440;
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(DTL.LTL_Flag);
PARAMETER(PAR.Load_Status);
PARAMETER(DTL.Reefer_Temperature);
PARAMETER(DTL.Seal_1);
PARAMETER(DTL.Seal_2);
PARAMETER(DTL.Seal_3);
PARAMETER(DTL.Total_Load_Order_Weight);
PARAMETER(DTL.Flat_Amount);
PARAMETER(DTL.Allocate_Pounds_Miles);
PARAMETER(DTL.Total_Stops);
PARAMETER(DTL.Trailer_ID_USR);
PARAMETER(DTL.Transloader_Carrier_Code);
PARAMETER(DTL.BOL_Time);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Truck_Size);
PARAMETER(DTL.Ld_Hdr_Ld_Dtl_Unused);
PARAMETER(DTL.Rated_Freight);
PARAMETER(DTL.Ship_Status);
PARAMETER(DTL.Load_Type);
PARAMETER(DTL.Number_Pallets_Received);
PARAMETER(DTL.Number_Pallets_Loaded);
PARAMETER(DTL.Load_Carrier_Pay_Amt);
PARAMETER(DTL.Estimated_Arrival_Time);
PARAMETER(DTL.Actual_Arrival_Date);
PARAMETER(DTL.Actual_Arrival_Time);
PARAMETER(DTL.Trailer_IN_Weight);
PARAMETER(DTL.Trailer_OUT_Weight);
PARAMETER(DTL.Actual_Departure_Date);
PARAMETER(DTL.Departure_Time);
PARAMETER(DTL.Schedule_Sequence_Number);
PARAMETER(DTL.Product_Temperature);
PARAMETER(DTL.Number_Spacers_Loaded);
PARAMETER(DTL.Car_Veh_Initials);
PARAMETER(LCL.Total_Load_Miles);
PARAMETER(DTL.Recorder_ID);
PARAMETER(DTL.Shipping_Method);
PARAMETER(DTL.Ship_From_Warehouse);
PARAMETER(DTL.Ship_To_State_Code);
PARAMETER(DTL.Gross_Weight);
PARAMETER(DTL.Carrier_Broker);
PARAMETER(DTL.Export_Status);
PARAMETER(DTL.Actual_Ship_Date);
PARAMETER(DTL.On_Time_Y_N);
PARAMETER(DTL.Truck_Ready_Date);
PARAMETER(DTL.Truck_Ready_Time);
PARAMETER(DTL.Spotted_Date);
PARAMETER(DTL.Spotted_Time);
PARAMETER(DTL.Load_Finished_Date);
PARAMETER(DTL.Load_Finished_Time);
PARAMETER(DTL.BOL_Complete_Date);
PARAMETER(DTL.BOL_Complete_Time);
PARAMETER(DTL.BOL_Received_Date);
PARAMETER(DTL.BOL_Received_Time);
PARAMETER(DTL.Truck_Departure_Date);
PARAMETER(DTL.Truck_Departure_Time);
PARAMETER(DTL.Adjusted_Departure_Date);
PARAMETER(DTL.Adjusted_Departure_Time);
PARAMETER(DTL.USR_Work_Field_3A);
PARAMETER(DTL.Port_Delv_Terminal);
PARAMETER(DTL.Vessel_Name);
PARAMETER(DTL.Voyage);
PARAMETER(DTL.Sail_Date);
PARAMETER(DTL.Booking_Number);
PARAMETER(DTL.Discharge_Port);
PARAMETER(DTL.Arrival_Date);
PARAMETER(DTL.Container_Number);
PARAMETER(DTL.Date_In);
PARAMETER(DTL.Time_In);
PARAMETER(DTL.Date_Out);
PARAMETER(DTL.Time_Out);
PARAMETER(DTL.Load_Total_Freight);
PARAMETER(DTL.Scheduled_Delivery_Date);
PARAMETER(DTL.Scheduled_Delivery_Time);
PARAMETER(DTL.LH_Unused_Sts);
PARAMETER(DTL.LH_Carrier_Payment_Sts);
PARAMETER(DTL.Bring_Back_Miles);
PARAMETER(DTL.Requested_Delivery_Date);
PARAMETER(DTL.Load_Acceptance_Flag);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.On_Yard_Date);
PARAMETER(DTL.On_Yard_Time);
PARAMETER(DTL.Deadline_Departure_Date);
PARAMETER(DTL.Deadline_Departure_Time);
PARAMETER(DTL.Load_Held_Over);
PARAMETER(DTL.Load_Held_Over_Reason);
PARAMETER(DTL.Ocean_BOL_Number);
PARAMETER(DTL.Express_Mail_Number);
PARAMETER(DTL.Express_Mail_Date);
PARAMETER(DTL.Load_Shag_Flag);
PARAMETER(DTL.Load_Wash_Flag);
PARAMETER(DTL.Product_Complete_Date);
PARAMETER(DTL.Product_Complete_Time);
PARAMETER(DTL.Load_Confirmation_Time);
PARAMETER(DTL.Load_Door_1);
PARAMETER(DTL.Override_Total_Load_Miles);
PARAMETER(DTL.Load_Door_2);
PARAMETER(DTL.Partial_Load);
PARAMETER(DTL.Load_Confirmation_Fax_Sts);
PARAMETER(DTL.Export_Load_USDA_OK);
PARAMETER(DTL.Late_Delivery_Email_Flag);
PARAMETER(DTL.Load_Actual_Freight);
PARAMETER(DTL.LH_Power_Only_Load);
PARAMETER(DTL.MG_Created_Load);
PARAMETER(DTL.LH_On_Time_Reason_Code);
PARAMETER(DTL.LPT_Load_Plan_Start_Dt);
PARAMETER(DTL.LPT_Load_Plan_Start_Tm);
PARAMETER(WRK.Trailer_ID_USR);
PARAMETER(WRK.Load_Start_Company_USR);
PARAMETER(WRK.Carrier_Code_Usr);
PARAMETER(PAR.Container_Number);
{
 //?Execute internal function

 //?Pre set On Yard, Assigned for Trailer
 CASE;

 // IF PAR.On Yard Date EQ WRK.ZERO
 IF PAR.On_Yard_Date = WRK.ZERO;

 // PAR.On Yard Status = CND.no
 PAR.On_Yard_Status = 'N';

 // PAR.Available Status = CND.no
 PAR.Available_Status = 'N';

 //?Pre set On Yard, Assigned for Trailer
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.On Yard Status = CND.yes
 PAR.On_Yard_Status = 'Y';

 // PAR.Available Status = CND.yes
 PAR.Available_Status = 'Y';

 ENDIF;

 CASE;

 // IF PAR.MG Created Load is Not MG Created Load
 IF PAR.MG_Created_Load = *BLANK;

 // Call program CLC Deadline Date/Time XF.
 CALL PROGRAM(CLC Deadline Date/Time XF) ('PMP9XFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Deadline_Depart_DT_HDR);
 PARAMETER(PAR.Deadline_Depart_Time_HDR);
 PARAMETER(LCL.Requested_Delivery_Date);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Requested Delivery Date = PAR.Requested Delivery Date
 LCL.Requested_Delivery_Date = PAR.Requested_Delivery_Date;

 // PAR.Deadline Depart DT    HDR = PAR.Deadline Departure Date
 PAR.Deadline_Depart_DT_HDR = PAR.Deadline_Departure_Date;

 // PAR.Deadline Depart Time  HDR = PAR.Deadline Departure Time
 PAR.Deadline_Depart_Time_HDR = PAR.Deadline_Departure_Time;

 ENDIF;

 //?02/09/09 PKD Removed Schedule Ship Date update
 //?For exports, default container to trailer & upd       E004079
 CASE;

 // IF PAR.Export Status is yes
 IF PAR.Export_Status = 'Y';

 // LCL.Container Number = PAR.Trailer Id
 LCL.Container_Number = PAR.Trailer_Id;

 // Call program RTV UPD Cntnr-ords/ld  XF.
 CALL PROGRAM(RTV UPD Cntnr-ords/ld  XF) ('PBRXXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Shipping_Line);
 PARAMETER(LCL.Container_Number);

 ENDIF;

 EXECUTE FUNCTION(CHG Load for Trailer   CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1515919;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.LTL_Flag);
 PARAMETER(PAR.Load_Status);
 PARAMETER(PAR.Reefer_Temperature);
 PARAMETER(PAR.Seal_1);
 PARAMETER(PAR.Seal_2);
 PARAMETER(PAR.Seal_3);
 PARAMETER(PAR.Total_Load_Order_Weight);
 PARAMETER(PAR.Flat_Amount);
 PARAMETER(PAR.Allocate_Pounds_Miles);
 PARAMETER(PAR.Total_Stops);
 PARAMETER(PAR.Trailer_Id);
 PARAMETER(PAR.Transloader_Carrier_Code);
 PARAMETER(PAR.BOL_Time);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Truck_Size);
 PARAMETER(PAR.Ld_Hdr_Ld_Dtl_Unused);
 PARAMETER(PAR.Rated_Freight);
 PARAMETER(PAR.Ship_Status);
 PARAMETER(PAR.Load_Type);
 PARAMETER(PAR.Number_Pallets_Received);
 PARAMETER(PAR.Number_Pallets_Loaded);
 PARAMETER(PAR.Load_Carrier_Pay_Amt);
 PARAMETER(PAR.Estimated_Arrival_Time);
 PARAMETER(PAR.Actual_Arrival_Date);
 PARAMETER(PAR.Actual_Arrival_Time);
 PARAMETER(PAR.Trailer_IN_Weight);
 PARAMETER(PAR.Trailer_OUT_Weight);
 PARAMETER(PAR.Actual_Departure_Date);
 PARAMETER(PAR.Departure_Time);
 PARAMETER(PAR.Schedule_Sequence_Number);
 PARAMETER(PAR.Product_Temperature);
 PARAMETER(PAR.Number_Spacers_Loaded);
 PARAMETER(PAR.Car_Veh_Initials);
 PARAMETER(PAR.Total_Load_Miles);
 PARAMETER(PAR.Recorder_ID);
 PARAMETER(PAR.Shipping_Method);
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Gross_Weight);
 PARAMETER(PAR.Carrier_Broker);
 PARAMETER(PAR.Export_Status);
 PARAMETER(PAR.Actual_Ship_Date);
 PARAMETER(PAR.On_Time_Y_N);
 PARAMETER(PAR.Truck_Ready_Date);
 PARAMETER(PAR.Truck_Ready_Time);
 PARAMETER(PAR.Spotted_Date);
 PARAMETER(PAR.Spotted_Time);
 PARAMETER(PAR.Load_Finished_Date);
 PARAMETER(PAR.Load_Finished_Time);
 PARAMETER(PAR.BOL_Complete_Date);
 PARAMETER(PAR.BOL_Complete_Time);
 PARAMETER(PAR.BOL_Received_Date);
 PARAMETER(PAR.BOL_Received_Time);
 PARAMETER(PAR.Truck_Departure_Date);
 PARAMETER(PAR.Truck_Departure_Time);
 PARAMETER(PAR.Adjusted_Departure_Date);
 PARAMETER(PAR.Adjusted_Departure_Time);
 PARAMETER(PAR.Shipping_Line);
 PARAMETER(PAR.Port_Delv_Terminal);
 PARAMETER(PAR.Vessel_Name);
 PARAMETER(PAR.Voyage);
 PARAMETER(PAR.Sail_Date);
 PARAMETER(PAR.Booking_Number);
 PARAMETER(PAR.Discharge_Port);
 PARAMETER(PAR.Arrival_Date);
 PARAMETER(LCL.Container_Number);
 PARAMETER(PAR.Date_In);
 PARAMETER(PAR.Time_In);
 PARAMETER(PAR.Date_Out);
 PARAMETER(PAR.Time_Out);
 PARAMETER(PAR.Load_Total_Freight);
 PARAMETER(PAR.Scheduled_Delivery_Date);
 PARAMETER(PAR.Scheduled_Delivery_Time);
 PARAMETER(PAR.LH_Unused_Sts);
 PARAMETER(PAR.LH_Carrier_Payment_Sts);
 PARAMETER(PAR.Bring_Back_Miles);
 PARAMETER(LCL.Requested_Delivery_Date);
 PARAMETER(PAR.Load_Acceptance_Flag);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.On_Yard_Date);
 PARAMETER(PAR.On_Yard_Time);
 PARAMETER(PAR.Deadline_Depart_DT_HDR);
 PARAMETER(PAR.Deadline_Depart_Time_HDR);
 PARAMETER(PAR.Load_Held_Over);
 PARAMETER(PAR.Load_Held_Over_Reason);
 PARAMETER(PAR.Ocean_BOL_Number);
 PARAMETER(PAR.Express_Mail_Number);
 PARAMETER(PAR.Express_Mail_Date);
 PARAMETER(PAR.Load_Shag_Flag);
 PARAMETER(PAR.Load_Wash_Flag);
 PARAMETER(PAR.LH_Power_Only_Load);
 PARAMETER(PAR.LH_On_Time_Reason_Code);
 PARAMETER(PAR.LPT_Load_Plan_Start_Dt);
 PARAMETER(PAR.LPT_Load_Plan_Start_Tm);
 {
  //?USER: Processing before Data read

  //?***** Change Log and Comments
  DO;

  //?** 06/28/2006 LJB TRF011
  //?** Added 3 char LH On-Time Reason Code as an input parm to
  //?** replace the old 1 char On Time Reason Code
  ENDDO;

  //?USER: Processing after Data read

  //?If Trailer, sched seq changes: Write TMS Load trigger
  CASE;

  // IF DB1.MG Created Load is Yes
  IF DB1.MG_Created_Load = 'Y';

  // AND PAR.Trailer Id NE DB1.Trailer Id
  AND ( PAR.Trailer_Id <> DB1.Trailer_Id;

  // OR PAR.Schedule Sequence Number NE DB1.Schedule Sequence Number
  OR PAR.Schedule_Sequence_Number <> DB1.Schedule_Sequence_Number );

  CASE;

  // IF PAR.Trailer Id NE DB1.Trailer Id
  IF PAR.Trailer_Id <> DB1.Trailer_Id;

  // LCL.Load Change Type = CND.Assign Trailer
  LCL.Load_Change_Type = 'ASNTRL';

  ENDIF;

  CASE;

  // IF PAR.Schedule Sequence Number NE DB1.Schedule Sequence Number
  IF PAR.Schedule_Sequence_Number <> DB1.Schedule_Sequence_Number;

  CASE;

  // IF LCL.Load Change Type EQ WRK.Blank for 12          USR
  IF LCL.Load_Change_Type = WRK.Blank_for_12_USR;

  // LCL.Load Change Type = CND.Scheduled Sequence Number
  LCL.Load_Change_Type = 'SCHSEQ';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Load Change Type 2 = CND.Scheduled Sequence Number
  LCL.Load_Change_Type_2 = 'SCHSEQ';

  ENDIF;

  ENDIF;

  // Call program Exc Crt TMS Load Trg  XF.
  CALL PROGRAM(Exc Crt TMS Load Trg  XF) ('PBXOXFR');
  PARAMETER(JOB.*Job_date);
  PARAMETER(JOB.*Job_time);
  PARAMETER(DB1.Load_ID);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.TMS_LH_Field_Chg_Text);
  PARAMETER('A');
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Load_Change_Type);
  PARAMETER(LCL.Load_Change_Type_2);
  PARAMETER(LCL.Load_Change_Type_3);
  PARAMETER(LCL.Load_Change_Type_4);
  PARAMETER(LCL.Load_Change_Type_5);

  ENDIF;

  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?C3910  02/10/15 RMC Added this for then they blank out the carrier
 //?If carrier blanked out, unlock the load  2/10/2015
 CASE;

 // IF PAR.Carrier Code Usr is entered
 IF PAR.Carrier_Code_Usr <> *BLANK;

 // AND PAR.Carrier Code is not entered
 AND PAR.Carrier_Code = *BLANK;

 // AND PAR.Load Status is Lock
 AND PAR.Load_Status = 'L';

 EXECUTE FUNCTION(UPD Unlock Load Update IF) TYPE(EXCINTFUN)                     AC1454814;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 {
  //?Execute internal function

  EXECUTE FUNCTION(CHG Ld Sts,Rated Frts  CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1371002;
  PARAMETER(PAR.Load_ID);
  PARAMETER('U');
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  EXECUTE FUNCTION(EDT Unlock Load        IF) TYPE(EXCINTFUN)                     AC1419468;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Company_Number);
  {
   //?Execute internal function

   //?*** Return Plant Code from first Order Header
   EXECUTE FUNCTION(zzV for Accusort Load  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1322485;
   PARAMETER(PAR.Load_ID);
   PARAMETER(PAR.Trans_Contol_AS400_Plant);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1305919;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(WRK.Trans_Contol_AS400_Plant);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428569;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Trans_Contol_AS400_Plant);
     {
      //?USER: Process Data record

      CASE;

      // IF DB1.Detail Line Status is Not cancelled
      IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

      EXECUTE FUNCTION(Rtv Desc/Trans Control RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304130;
      PARAMETER(DB1.Warehouse_Code);
      PARAMETER(WRK.Warehouse_Description);
      PARAMETER(PAR.Trans_Contol_AS400_Plant);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

      QUIT;

      ENDIF;

     }

     CASE;

     // IF WRK.Trans Contol AS400/Plant is Plant
     IF WRK.Trans_Contol_AS400_Plant = 'P';

     // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
     PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

     QUIT;

     ENDIF;

    }

    CASE;

    // IF WRK.Trans Contol AS400/Plant is Plant
    IF WRK.Trans_Contol_AS400_Plant = 'P';

    // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
    PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

    QUIT;

    ENDIF;

   }

   EXECUTE FUNCTION(RTV System Value Alpha RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1530745;
   PARAMETER('PLTFLRSYS');
   PARAMETER(LCL.Plant_Floor_System_USR);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
   PARAMETER(PAR.Company_Number);
   PARAMETER('LDORDD');
   PARAMETER(LCL.PFS_AccuSort_Active);
   PARAMETER(LCL.PFS_Carlisle_Active);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?UPD:  AccuSort
   CASE;

   // IF LCL.PFS AccuSort Active is Yes
   IF LCL.PFS_AccuSort_Active = 'Y';

   //?Notify Accusort if locked load
   CASE;

   // IF PAR.Trans Contol AS400/Plant is Plant
   IF PAR.Trans_Contol_AS400_Plant = 'P';

   // Call program Zzz Lock/Unlock Box ID XF.
   CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
   PARAMETER('L');

   // Call program DEL AS Order Hdr/Dtl   XF.
   CALL PROGRAM(DEL AS Order Hdr/Dtl   XF) ('PDQ0XFR');
   PARAMETER(PAR.Load_ID);
   PARAMETER(PAR.Company_Number);

   // Call program Zzz Lock/Unlock Box ID XF.
   CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
   PARAMETER('U');

   ENDIF;

   ENDIF;

   //?UPD:  Carlisle
   CASE;

   // IF LCL.PFS Carlisle Active is Yes
   IF LCL.PFS_Carlisle_Active = 'Y';

   // Call program PFS Unlock Load/Order XF.
   CALL PROGRAM(PFS Unlock Load/Order XF) ('PPNQXFR');
   PARAMETER(PAR.Load_ID);

   // Call program PFS Lock Load/Order   XF.
   CALL PROGRAM(PFS Lock Load/Order   XF) ('PPNLXFR');
   PARAMETER(PAR.Load_ID);

   ENDIF;

   //?** 09/23/2011 RMC E1607  if load had a whs with edi wso interchange, then
   //?   delete it if Unproc, else change it to "D"elete/and reprocess
   // Call program Exc ChgDel EDI f/UnlckXF.
   CALL PROGRAM(Exc ChgDel EDI f/UnlckXF) ('PBAEXFR');
   PARAMETER(PAR.Load_ID);

  }

  EXECUTE FUNCTION(CHG Clear Rated Frt    RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1399763;
  PARAMETER(PAR.Load_ID);
  PARAMETER(*ZERO);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(CHG Recovery Freight   CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1292118;
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.Stop_Drop_Sequence_Number);
   PARAMETER(DB1.Miles_to_next_stop);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   EXECUTE FUNCTION(CHG Clear Rated Frt    RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1399729;
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.Order_Number);
   {
    //?USER: Initialize routine

    //?05/12/04 SLM PKTR01 Multi-Company - Function was changed
    //?                                    to remove Company RST or Pos
    //?USER: Process Data record

    EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1293468;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(*ZERO);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

     // Call program TRG Order Hdr CHG Trig XT.
     CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(DB1.Order_Type_Sales);
     PARAMETER(DB1.AR_Customer_Number);
     PARAMETER(DB1.Ship_To_Customer);
     PARAMETER(DB1.Ship_To_Name);
     PARAMETER(DB1.Ship_To_Address_Line_1);
     PARAMETER(DB1.Ship_To_Address_Line_2);
     PARAMETER(DB1.Ship_To_Address_Line_3);
     PARAMETER(DB1.Ship_To_City);
     PARAMETER(DB1.Ship_To_State_Code);
     PARAMETER(DB1.Ship_To_Zip_Postal_Code);
     PARAMETER(DB1.Bill_to_Customer);
     PARAMETER(DB1.Bill_to_Name);
     PARAMETER(DB1.Bill_to_Address_Line_1);
     PARAMETER(DB1.Bill_to_Address_Line_2);
     PARAMETER(DB1.Bill_to_Address_Line_3);
     PARAMETER(DB1.Bill_to_City);
     PARAMETER(DB1.Bill_to_State_Code);
     PARAMETER(DB1.Bill_to_Zip_Postal_Code);
     PARAMETER(DB1.Customer_Purchase_Order_#);
     PARAMETER(DB1.Order_Date);
     PARAMETER(DB1.Requested_Ship_Date);
     PARAMETER(DB1.Actual_Shipped_Date);
     PARAMETER(DB1.Cancel_Date);
     PARAMETER(DB1.Terms_Code);
     PARAMETER(DB1.Special_Instructions);
     PARAMETER(DB1.Special_Instructions_2);
     PARAMETER(DB1.Carrier_Code);
     PARAMETER(DB1.Comment_Print_Acknowledge);
     PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
     PARAMETER(DB1.Comment_Print_Pick_Slip);
     PARAMETER(DB1.Comment_Print_Ship_Doc);
     PARAMETER(DB1.Reason_Code);
     PARAMETER(DB1.Order_in_Use);
     PARAMETER(DB1.Header_Status);
     PARAMETER(DB1.Header_Status_Last);
     PARAMETER(DB1.Order_Type_Print_Status);
     PARAMETER(DB1.Scheduled_Ship_Date);
     PARAMETER(DB1.User_Original_Entry);
     PARAMETER(DB1.Date_of_Original_Entry);
     PARAMETER(DB1.Order_Value_Total);
     PARAMETER(DB1.Order_Weight_Total);
     PARAMETER(DB1.Credit_Hold);
     PARAMETER(DB1.Production_Hold);
     PARAMETER(DB1.New_Customer_Hold);
     PARAMETER(DB1.Requested_Delivery_Date);
     PARAMETER(DB1.Requested_Delivery_Time);
     PARAMETER(DB1.Accounts_Receiv_Ent_1);
     PARAMETER(DB1.Accounts_Receiv_Ent_2);
     PARAMETER(DB1.Load_ID);
     PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
     PARAMETER(DB1.Rated_Freight);
     PARAMETER(DB1.LTL_Flag);
     PARAMETER(DB1.Price_Audit);
     PARAMETER(DB1.Price_Status);
     PARAMETER(DB1.Shipping_Method);
     PARAMETER(DB1.Export_Status);
     PARAMETER(DB1.Palletize);
     PARAMETER(DB1.Shrink_Wrap);
     PARAMETER(DB1.Slip_Sheet);
     PARAMETER(DB1.Age_Code);
     PARAMETER(DB1.Reefer_Temperature);
     PARAMETER(DB1.Load_Type);
     PARAMETER(DB1.Attach_to_Invoice_Number);
     PARAMETER(DB1.Load_Plan_Order);
     PARAMETER(DB1.Print_Pick_Slip);
     PARAMETER(DB1.Resell_Reference_Number);
     PARAMETER(DB1.Special_Comment_1);
     PARAMETER(DB1.Special_Comment_2);
     PARAMETER(DB1.Affect_Auto_Accruals);
     PARAMETER(DB1.Sales_Route_Code);
     PARAMETER(DB1.Manager_Level_Code);
     PARAMETER(DB1.VP_Level_Code);
     PARAMETER(DB1.Attach_to_Order_Number);
     PARAMETER(DB1.Reason_for_Price_Audit);
     PARAMETER(DB1.Invoice_Number);
     PARAMETER(DB1.Invoice_Suffix);
     PARAMETER(DB1.Invoice_Date);
     PARAMETER(DB1.Event_Code);
     PARAMETER(DB1.Trans_Contol_AS400_Plant);
     PARAMETER(DB1.Modified_Flag);
     PARAMETER(DB1.A_R_order_Value_Total);
     PARAMETER(DB1.Billing_Activity_Type);
     PARAMETER(DB1.Block_Order_Flag);
     PARAMETER(DB1.Order_Certification_Flag);
     PARAMETER(DB1.Invoice_Order_Value_Tot);
     PARAMETER(DB1.Process_Sts_for_3C);
     PARAMETER(DB1.Order_Conf_Fax_Sts);
     PARAMETER(DB1.Manifest_Fax_Sts);
     PARAMETER(DB1.Invoice_Fax_Sts);
     PARAMETER(DB1.Transfer_in_Storage_Ind);
     PARAMETER(DB1.Email_Cust_On_Order_Ship);
     PARAMETER(DB1.Order_Emailed);
     PARAMETER(DB1.Export_Docs_Go_w_Driver);
     PARAMETER(DB1.Shipping_Temp_Code_C_F);
     PARAMETER(DB1.Broker_Order_Status);
     PARAMETER(DB1.Air_Freight_Order);
     PARAMETER(DB1.Order_Requires_Review);
     PARAMETER(DB1.OH_Load_Plan_Ready);
     PARAMETER(DB1.Export_USDA_Approved);
     PARAMETER(DB1.HPB_Ship_to_Warehouse);
     PARAMETER(DB1.OH_TF_Exempt_Code);
     PARAMETER(DB1.OH_Appt_Confirmation_Dt);
     PARAMETER(DB1.JPN_Invoice_Issuance_Date);
     PARAMETER(DB1.Load_Actual_Shipped_Date);
     PARAMETER(DB1.Load_BOL_Complete_Date);
     PARAMETER(DB1.Load_Truck_Departure_Date);
     PARAMETER(DB1.Maximum_Gross_Weight);
     PARAMETER(DB1.Time_of_Original_Entry);
     PARAMETER(DB1.OH_Appt_Confirmation_Tm);
     PARAMETER(DB1.Load_BOL_Complete_Time);
     PARAMETER(DB1.Load_Truck_Departure_Time);
     PARAMETER(DB1.Act_Frt_Reference_Amount);
     PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
     PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
     PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
     PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
     PARAMETER(DB1.Claim_Number);
     PARAMETER(DB1.EDI_Status_1);
     PARAMETER(DB1.EDI_Status_2);
     PARAMETER(DB1.EDI_Status_3);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);

    }

    //?05/13/04 slm Multi-Company - Order Header lv remove co must use db1
    //?                              was using the par replace with db1
    EXECUTE FUNCTION(UPD Rated Freight      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1396132;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Weight_Total);
    PARAMETER(*ZERO);
    {
     //?USER: Initialize routine

     //?par.@rated freight is the sum of all the detail rated frt, for adjusting
     // PAR.@Rated Freight = CON.*ZERO
     PAR.@Rated_Freight = *ZERO;

     //?par.usr process status is used to indicate if there are detail present
     // PAR.USR Process status = CND.no
     PAR.USR_Process_status = 'N';

     //?USER: Process Data record

     CASE;

     // IF DB1.Detail Line Status is Cancelled
     IF DB1.Detail_Line_Status = 'X';

     EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(DB1.Order_Sequence_Number);
     PARAMETER(DB1.Order_Secondary_Line_Seq);
     PARAMETER(*ZERO);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);
      {
       //?Execute internal function

       // PAR.Job Time = JOB.*Job time
       PAR.Job_Time = JOB.*Job_time;

       // PAR.User Id = JOB.*USER
       PAR.User_Id = JOB.*USER;

       // PAR.Job Name = JOB.*JOB
       PAR.Job_Name = JOB.*JOB;

       // PAR.Job Date = JOB.*Job date
       PAR.Job_Date = JOB.*Job_date;

      }

     }

     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.USR Process status = CND.yes
     PAR.USR_Process_status = 'Y';

     CASE;

     // IF PAR.Order Weight Total is Equal to zero
     IF PAR.Order_Weight_Total = *ZERO;

     // OR PAR.Total Rated Freight is Zero
     OR PAR.Total_Rated_Freight = *ZERO;

     // PAR.Rated Freight = CON.*ZERO
     PAR.Rated_Freight = *ZERO;

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF DB1.Detail Line Status is Confirmed & Complete
     IF DB1.Detail_Line_Status = 'C'/'R';

     // Synon (17,9) work field =       * Compute Dtl Rated Freight
     PGM.*Synon_179_work_field = ( DB1.Weight_Shipped_Total / PAR.Order_Weight_Total 'H' )
     * PAR.Total_Rated_Freight 'H';

     // IF *OTHERWISE
     IF *OTHERWISE;

     // Synon (17,9) work field =       * Compute Dtl Rated Freight
     PGM.*Synon_179_work_field = ( ( DB1.Quantity_Ordered * DB1.Unit_Weight_Ordered_U_M 'H' )
     / PAR.Order_Weight_Total 'H' ) * PAR.Total_Rated_Freight 'H';

     ENDIF;

     // PAR.Rated Freight = PGM.*Synon (17,9) work field * CON.1 *Rounded
     PAR.Rated_Freight = PGM.*Synon_179_work_field * 1 'H';

     ENDIF;

     EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(DB1.Order_Sequence_Number);
     PARAMETER(DB1.Order_Secondary_Line_Seq);
     PARAMETER(PAR.Rated_Freight);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);
      {
       //?Execute internal function

       // PAR.Job Time = JOB.*Job time
       PAR.Job_Time = JOB.*Job_time;

       // PAR.User Id = JOB.*USER
       PAR.User_Id = JOB.*USER;

       // PAR.Job Name = JOB.*JOB
       PAR.Job_Name = JOB.*JOB;

       // PAR.Job Date = JOB.*Job date
       PAR.Job_Date = JOB.*Job_date;

      }

     }

     // PAR.@Rated Freight = PAR.@Rated Freight + PAR.Rated Freight
     PAR.@Rated_Freight = PAR.@Rated_Freight + PAR.Rated_Freight;

     // PAR.Order Sequence Number = DB1.Order Sequence Number
     PAR.Order_Sequence_Number = DB1.Order_Sequence_Number;

     // PAR.Order Secondary Line Seq = DB1.Order Secondary Line Seq
     PAR.Order_Secondary_Line_Seq = DB1.Order_Secondary_Line_Seq;

     ENDIF;

     //?USER: Exit processing

     //?Adjust totals
     CASE;

     // IF PAR.@Rated Freight NE PAR.Total Rated Freight
     IF PAR.@Rated_Freight <> PAR.Total_Rated_Freight;

     // AND PAR.USR Process status is yes
     AND PAR.USR_Process_status = 'Y';

     // WRK.USR Adjustment Amount 1 = PAR.Total Rated Freight - PAR.@Rated Freight
     WRK.USR_Adjustment_Amount_1 = PAR.Total_Rated_Freight - PAR.@Rated_Freight;

     // PAR.Rated Freight = PAR.Rated Freight + WRK.USR Adjustment Amount 1
     PAR.Rated_Freight = PAR.Rated_Freight + WRK.USR_Adjustment_Amount_1;

     //?Update last detail line processed
     EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Order_Number);
     PARAMETER(PAR.Order_Sequence_Number);
     PARAMETER(PAR.Order_Secondary_Line_Seq);
     PARAMETER(PAR.Rated_Freight);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);
      {
       //?Execute internal function

       // PAR.Job Time = JOB.*Job time
       PAR.Job_Time = JOB.*Job_time;

       // PAR.User Id = JOB.*USER
       PAR.User_Id = JOB.*USER;

       // PAR.Job Name = JOB.*JOB
       PAR.Job_Name = JOB.*JOB;

       // PAR.Job Date = JOB.*Job date
       PAR.Job_Date = JOB.*Job_date;

      }

     }

     ENDIF;

    }

   }

  }

  // Execute function Clr Program Message Q  US.
  EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
  {
   * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
   C                     CALL 'Y2CLMSC'
   C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
   C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
   * RESET FIRST MESSAGE ONLY FLAG.
   C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
  }

 }

 // WRK.Load Change Type = CND.Unlock Load
 WRK.Load_Change_Type = 'UNLOCK';

 // WRK.Department Control Code = CND.Traffic Dept
 WRK.Department_Control_Code = 'TRF';

 // Call program CRT Load/Order Chg Log XF.
 CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Load_Change_Type);
 PARAMETER(WRK.Department_Control_Code);
 PARAMETER(PAR.Load_Status);
 PARAMETER('U');
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(*ZERO);

 ENDIF;

 //?* Load Order Log entries:
 //?Load Str company change -write load order change log   RMC     03/01/06
 CASE;

 // IF PAR.Company Number NE PAR.Load Start Company USR
 IF PAR.Company_Number <> PAR.Load_Start_Company_USR;

 // WRK.Load Change Type = CND.Load Start Co
 WRK.Load_Change_Type = 'CHGLCO';

 // WRK.Department Control Code = CND.Traffic Dept
 WRK.Department_Control_Code = 'TRF';

 // WRK.Company Number Alpha = CVTVAR(PAR.Load Start Company USR)
 WRK.Company_Number_Alpha = CVTVAR(PAR.Load_Start_Company_USR);

 // WRK.Company Number Alpha Usr2 = CVTVAR(PAR.Company Number)
 WRK.Company_Number_Alpha_Usr2 = CVTVAR(PAR.Company_Number);

 // Call program CRT Load/Order Chg Log XF.
 CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Load_Change_Type);
 PARAMETER(WRK.Department_Control_Code);
 PARAMETER(WRK.Company_Number_Alpha);
 PARAMETER(WRK.Company_Number_Alpha_Usr2);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(*ZERO);

 //?** Log entry for "from" company         LJB TRF021 08/21/2006
 // WRK.Load Change Type = CND.Load Deleted
 WRK.Load_Change_Type = 'LDDLTD';

 // Call program CRT Load/Order Chg Log XF.
 CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Load_Change_Type);
 PARAMETER(WRK.Department_Control_Code);
 PARAMETER(WRK.Company_Number_Alpha);
 PARAMETER(WRK.Company_Number_Alpha_Usr2);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Load_Start_Company_USR);
 PARAMETER(*ZERO);

 ENDIF;

 //?Default carrier to Shipping Line. If blanks, use carrier code
 CASE;

 // IF PAR.Shipping Line is entered
 IF PAR.Shipping_Line <> *BLANK;

 // LCL.Carrier Code = PAR.Shipping Line
 LCL.Carrier_Code = PAR.Shipping_Line;

 // LCL.Trailer Id = PAR.Trailer Id
 LCL.Trailer_Id = PAR.Trailer_Id;

 //?Default carrier to Shipping Line. If blanks, use carrier code
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Carrier Code = PAR.Carrier Code
 LCL.Carrier_Code = PAR.Carrier_Code;

 // LCL.Trailer Id = PAR.Trailer Id
 LCL.Trailer_Id = PAR.Trailer_Id;

 ENDIF;

 //?Create/Update trailer
 CASE;

 // IF LCL.Trailer Id NE WRK.Blank for 30          USR
 IF LCL.Trailer_Id <> WRK.Blank_for_30_USR;

 EXECUTE FUNCTION(Rtv Trailer            RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC1498208;
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(LCL.Trailer_Id);
 PARAMETER(LCL.Company_Number);
 PARAMETER(LCL.Load_Type);
 PARAMETER(LCL.Trailer_Type);
 PARAMETER(LCL.Seaboard_Owned_Status);
 PARAMETER(PAR.On_Yard_Status);
 PARAMETER(PAR.On_Yard_Date);
 PARAMETER(PAR.On_Yard_Time);
 PARAMETER(PAR.Assigned_Status);
 PARAMETER(PAR.Available_Status);
 PARAMETER(LCL.Not_Available_Reason_Code);
 PARAMETER(LCL.Comment_Line);
 PARAMETER(PAR.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 //?* Create trailer with zeros in the on yard dt/tm      E002966
 //?Create trailer
 CASE;

 // IF PAR.Load Type is Regular
 IF PAR.Load_Type = 'R';

 //?Regular:  Reefer
 EXECUTE FUNCTION(Crt PD Trailer         CR) TYPE(CRTOBJ) FILE(PDLYREP)          AC1496468;
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(LCL.Trailer_Id);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Load_Type);
 PARAMETER('R');
 PARAMETER('N');
 PARAMETER('N');
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 PARAMETER('Y');
 PARAMETER('N');
 PARAMETER(WRK.BLANK);
 PARAMETER(*BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER('A');
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(JOB.*Job_date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?Create trailer
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Bulk:  Tanker
 EXECUTE FUNCTION(Crt PD Trailer         CR) TYPE(CRTOBJ) FILE(PDLYREP)          AC1496468;
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(LCL.Trailer_Id);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Load_Type);
 PARAMETER('T');
 PARAMETER('N');
 PARAMETER('N');
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 PARAMETER('Y');
 PARAMETER('N');
 PARAMETER(WRK.BLANK);
 PARAMETER(*BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER('A');
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(JOB.*Job_date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Update trailer
 CASE;

 // IF PAR.Load Type is Regular
 IF PAR.Load_Type = 'R';

 //?Regular:  Reefer
 EXECUTE FUNCTION(Chg PD Trailer         CH) TYPE(CHGOBJ) FILE(PDLYREP)          AC1496469;
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(LCL.Trailer_Id);
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Load_Type);
 PARAMETER('R');
 PARAMETER('N');
 PARAMETER(PAR.On_Yard_Status);
 PARAMETER(PAR.On_Yard_Date);
 PARAMETER(PAR.On_Yard_Time);
 PARAMETER('Y');
 PARAMETER('N');
 PARAMETER(WRK.BLANK);
 PARAMETER(*BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER('A');
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(JOB.*Job_date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?Update trailer
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Bulk:  Tanker
 EXECUTE FUNCTION(Chg PD Trailer         CH) TYPE(CHGOBJ) FILE(PDLYREP)          AC1496469;
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(LCL.Trailer_Id);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Load_Type);
 PARAMETER('T');
 PARAMETER('N');
 PARAMETER(PAR.On_Yard_Status);
 PARAMETER(PAR.On_Yard_Date);
 PARAMETER(PAR.On_Yard_Time);
 PARAMETER('Y');
 PARAMETER('N');
 PARAMETER(WRK.BLANK);
 PARAMETER(*BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER('A');
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(JOB.*Job_date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(RTV/Chg Container     RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC2105858;
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Order_Number);
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Trailer_Id);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Trailer_Id);
 PARAMETER(PAR.On_Yard_Status);
 PARAMETER(PAR.On_Yard_Date);
 PARAMETER(PAR.On_Yard_Time);
 PARAMETER(PAR.Assigned_Status);
 PARAMETER(PAR.Available_Status);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  EXECUTE FUNCTION(CHG OHE Container Nbr  CH) TYPE(CHGOBJ) FILE(PMAMREP)          AC2019458;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Load_ID);
  PARAMETER(PAR.OHE_Container_Number);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

   // DB1.Job Name = JOB.*PROGRAM
   DB1.Job_Name = JOB.*PROGRAM;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

  }

 }

 //?Chg container number if export and trailer changed    E004079
 CASE;

 // IF PAR.Container Number usr 1 NE LCL.Trailer Id
 IF PAR.Container_Number_usr_1 <> LCL.Trailer_Id;

 // AND PAR.Container Number usr 1 is Entered
 AND PAR.Container_Number_usr_1 <> *BLANK;

 //?* Get info for the original trailer
 EXECUTE FUNCTION(Rtv Trailer            RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC1498208;
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(PAR.Container_Number_usr_1);
 PARAMETER(NLL.Company_Number);
 PARAMETER(WRK.Load_Type);
 PARAMETER(NLL.Trailer_Type);
 PARAMETER(NLL.Seaboard_Owned_Status);
 PARAMETER(NLL.On_Yard_Status);
 PARAMETER(WRK.On_Yard_Date);
 PARAMETER(WRK.On_Yard_Time);
 PARAMETER(NLL.Assigned_Status);
 PARAMETER(NLL.Available_Status);
 PARAMETER(NLL.Not_Available_Reason_Code);
 PARAMETER(NLL.Comment_Line);
 PARAMETER(PAR.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?Don't add if doesn't exist, just update existing      E004079
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 //?* okay if it does not exist
 //?Don't add if doesn't exist, just update existing      E004079
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?* else, update to unassigned status
 //?Regular versus Bulk
 CASE;

 // IF WRK.Load Type is Regular
 IF WRK.Load_Type = 'R';

 //?Regular:  Reefer
 EXECUTE FUNCTION(Chg PD Trailer         CH) TYPE(CHGOBJ) FILE(PDLYREP)          AC1496469;
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(PAR.Container_Number_usr_1);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Load_Type);
 PARAMETER('R');
 PARAMETER('N');
 PARAMETER('Y');
 PARAMETER(WRK.On_Yard_Date);
 PARAMETER(WRK.On_Yard_Time);
 PARAMETER('N');
 PARAMETER('Y');
 PARAMETER(WRK.BLANK);
 PARAMETER(*BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER('A');
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(JOB.*Job_date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?Regular versus Bulk
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Bulk:  Tanker
 EXECUTE FUNCTION(Chg PD Trailer         CH) TYPE(CHGOBJ) FILE(PDLYREP)          AC1496469;
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(PAR.Container_Number_usr_1);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Load_Type);
 PARAMETER('T');
 PARAMETER('N');
 PARAMETER('Y');
 PARAMETER(WRK.On_Yard_Date);
 PARAMETER(WRK.On_Yard_Time);
 PARAMETER('N');
 PARAMETER('Y');
 PARAMETER(WRK.BLANK);
 PARAMETER(*BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER('A');
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(JOB.*Job_date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?Change original trailer if there was a trailer change    E004079
 CASE;

 // IF PAR.Trailer Id            USR NE LCL.Trailer Id
 IF PAR.Trailer_Id_USR <> LCL.Trailer_Id;

 //?* Get info for the original trailer
 EXECUTE FUNCTION(Rtv Trailer            RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC1498208;
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(PAR.Trailer_Id_USR);
 PARAMETER(NLL.Company_Number);
 PARAMETER(WRK.Load_Type);
 PARAMETER(NLL.Trailer_Type);
 PARAMETER(NLL.Seaboard_Owned_Status);
 PARAMETER(NLL.On_Yard_Status);
 PARAMETER(WRK.On_Yard_Date);
 PARAMETER(WRK.On_Yard_Time);
 PARAMETER(NLL.Assigned_Status);
 PARAMETER(NLL.Available_Status);
 PARAMETER(NLL.Not_Available_Reason_Code);
 PARAMETER(NLL.Comment_Line);
 PARAMETER(PAR.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 //?* okay if it does not exist
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?* else, update to unassigned status
 //?Regular versus Bulk
 CASE;

 // IF WRK.Load Type is Regular
 IF WRK.Load_Type = 'R';

 //?Regular:  Reefer
 EXECUTE FUNCTION(Chg PD Trailer         CH) TYPE(CHGOBJ) FILE(PDLYREP)          AC1496469;
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(PAR.Trailer_Id_USR);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Load_Type);
 PARAMETER('R');
 PARAMETER('N');
 PARAMETER('Y');
 PARAMETER(WRK.On_Yard_Date);
 PARAMETER(WRK.On_Yard_Time);
 PARAMETER('N');
 PARAMETER('Y');
 PARAMETER(WRK.BLANK);
 PARAMETER(*BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER('A');
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(JOB.*Job_date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?Regular versus Bulk
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Bulk:  Tanker
 EXECUTE FUNCTION(Chg PD Trailer         CH) TYPE(CHGOBJ) FILE(PDLYREP)          AC1496469;
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(PAR.Trailer_Id_USR);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Load_Type);
 PARAMETER('T');
 PARAMETER('N');
 PARAMETER('Y');
 PARAMETER(WRK.On_Yard_Date);
 PARAMETER(WRK.On_Yard_Time);
 PARAMETER('N');
 PARAMETER('Y');
 PARAMETER(WRK.BLANK);
 PARAMETER(*BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.ZERO);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER(WRK.BLANK);
 PARAMETER('A');
 PARAMETER(JOB.*Job_time);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(JOB.*Job_date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?Trailer Change - write load order change log            6/24/03
 CASE;

 // IF PAR.Trailer Id NE PAR.Trailer Id            USR
 IF PAR.Trailer_Id <> PAR.Trailer_Id_USR;

 // WRK.Load Change Type = CND.Assign Trailer
 WRK.Load_Change_Type = 'ASNTRL';

 // WRK.Department Control Code = CND.Traffic Dept
 WRK.Department_Control_Code = 'TRF';

 // Call program CRT Load/Order Chg Log XF.
 CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Load_Change_Type);
 PARAMETER(WRK.Department_Control_Code);
 PARAMETER(PAR.Trailer_Id_USR);
 PARAMETER(LCL.Trailer_Id);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(*ZERO);

 ENDIF;

 //?Carrier Change - write load order change log            9/04/07
 CASE;

 // IF PAR.Carrier Code NE PAR.Carrier Code Usr
 IF PAR.Carrier_Code <> PAR.Carrier_Code_Usr;

 // WRK.Load Change Type = CND.Carrier Change
 WRK.Load_Change_Type = 'CARCHG';

 // WRK.Department Control Code = CND.Traffic Dept
 WRK.Department_Control_Code = 'TRF';

 // Call program CRT Load/Order Chg Log XF.
 CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Load_Change_Type);
 PARAMETER(WRK.Department_Control_Code);
 PARAMETER(PAR.Carrier_Code_Usr);
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(*ZERO);

 ENDIF;

 //?If flat amount is GT zero then calc Rated Freight.
 CASE;

 // IF PAR.Flat Amount is GT Zero
 IF PAR.Flat_Amount > *ZERO;

 // Call program UPD Rated Frt Post Shp XF.
 CALL PROGRAM(UPD Rated Frt Post Shp XF) ('PDJVXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);

 ENDIF;

}


//?USER: Process command keys

//?F15=Lock Load
CASE;

// IF DTL.*CMD key is *Lock Load
IF DTL.*CMD_key = '15';

EXECUTE FUNCTION(UPD Lock Load Update   IF) TYPE(EXCINTFUN)                     AC1451094;
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Company_Number);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV Load Header All,Mg RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC2124794;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(PAR.Flat_Amount);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(PAR.Total_Stops);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(PAR.Total_Load_Miles);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(PAR.Carrier_Broker);
 PARAMETER(PAR.Export_Status);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 PARAMETER(PAR.MG_Created_Load);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?.** Use carr appt dt/tm, if entered, for DDD/T calcs   E00495
 //?Fill in ship from whse deadline depart, if locking load and none entered
 CASE;

 // IF PAR.Ship From Warehouse EQ WRK.BLANK
 IF PAR.Ship_From_Warehouse = WRK.BLANK;

 EXECUTE FUNCTION(Rtv/Chg Whs,ld miles  RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1471360;
 PARAMETER(PAR.Load_ID);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(RTV First Order Whse   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1397882;
  PARAMETER(DB1.Load_ID);
  PARAMETER(1);
  PARAMETER(PAR.Ship_From_Warehouse);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(WRK.TXT_field_not_needed);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   QUIT;

  }

  CASE;

  // IF DB1.Warehouse Code EQ PAR.Ship From Warehouse
  IF DB1.Warehouse_Code = PAR.Ship_From_Warehouse;

  // PAR.Warehouse Code = CON.*BLANK
  PAR.Warehouse_Code = *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Warehouse Code = DB1.Warehouse Code
  PAR.Warehouse_Code = DB1.Warehouse_Code;

  ENDIF;

  //?** 11/16/2007 LJB FP1251 Total Load Miles will = zeros if no
  //?** Miles Between Cities record exists
  //?** Override total load miles will take precedence over tlm  E00207
  //?E4119 RMC 7/15/16  Upd miles if NOT MG LOAD
  CASE;

  // IF DB1.MG Created Load is Yes
  IF DB1.MG_Created_Load = 'Y';

  // PAR.Total Load Miles = DB1.Total Load Miles
  PAR.Total_Load_Miles = DB1.Total_Load_Miles;

  // PAR.Override Total Load Miles = DB1.Override Total Load Miles
  PAR.Override_Total_Load_Miles = DB1.Override_Total_Load_Miles;

  //?E4119 RMC 7/15/16  Upd miles if NOT MG LOAD
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Call program CLC Total Load Miles   XF.
  CALL PROGRAM(CLC Total Load Miles   XF) ('PDW3XFR');
  PARAMETER(DB1.Load_ID);
  PARAMETER(PAR.Total_Load_Miles);
  PARAMETER(PAR.Override_Total_Load_Miles);

  ENDIF;

  //?** Add override miles to the update            E00207 LJB 08/13/08
  EXECUTE FUNCTION(CHG Ship FrmWhs,ld mls CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1471384;
  PARAMETER(DB1.Load_ID);
  PARAMETER(PAR.Total_Load_Miles);
  PARAMETER(PAR.Ship_From_Warehouse);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Override_Total_Load_Miles);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 CASE;

 // IF PAR.MG Created Load is Not MG Created Load
 IF PAR.MG_Created_Load = *BLANK;

 //?** RTV carrier appt date/time                         E00495
 EXECUTE FUNCTION(RTV 1st Carr Apt Dt/Tm RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1954073;
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(WRK.LD_Carrier_Appt_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PAR.LD Carrier Appt Date = DB1.LD Carrier Appt Date
  PAR.LD_Carrier_Appt_Date = DB1.LD_Carrier_Appt_Date;

  // PAR.LD Carrier Appt Time = DB1.LD Carrier Appt Time
  PAR.LD_Carrier_Appt_Time = DB1.LD_Carrier_Appt_Time;

  QUIT;

 }

 //?** Use carr appt dt/tm, if entered, for DDD/T calcs   E00495
 CASE;

 // IF WRK.LD Carrier Appt Date is Entered
 IF WRK.LD_Carrier_Appt_Date > 0;

 // PAR.Deadline Departure Date = WRK.LD Carrier Appt Date
 PAR.Deadline_Departure_Date = WRK.LD_Carrier_Appt_Date;

 //?** Use carr appt dt/tm, if entered, for DDD/T calcs   E00495
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv 1st Ord Delv Dt/Tm RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1456727;
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Requested_Delivery_Time);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Delivery Date/Time RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1445871;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Ship_To_Name);
  PARAMETER(WRK.Ship_To_City);
  PARAMETER(NLL.Ship_To_State_Code);
  PARAMETER(PAR.Requested_Delivery_Date);
  PARAMETER(PAR.Requested_Delivery_Time);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  QUIT;

 }

 // PAR.Deadline Departure Time = PAR.Requested Delivery Time * CON.100 *
 PAR.Deadline_Departure_Time = PAR.Requested_Delivery_Time * 100;

 ENDIF;

 EXECUTE FUNCTION(CLC Departure Date/TimeIF) TYPE(EXCINTFUN)                     AC1456426;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 {
  //?Execute internal function

  //?***** Change Log and Comments
  DO;

  //?** The Date and Time being calculated are the latest date and time
  //?** that the truck can leave the warehouse and still make the
  //?** delivery on time.
  //?*****
  //?** E00495 LJB 09.23.2009
  //?** Carrier Appt Date and Time are in the parm Deadline Departure
  //?** date and time, if called from "UPD Ld Mi,Whse,DDD/T IF"
  //?*****
  //?** E00207 LJB 08/11/2008
  //?** Override Total Load Miles has been added to the
  //?** Retrieve Total Load Miles function
  //?*****
  //?** FP1251 LJB 12/26/2007
  //?** If no Miles To Next record, change SSD/T to zeros.
  //?** Scheduled Deliv Date has (should have) Requested Delivery Date in it
  ENDDO;

  EXECUTE FUNCTION(RTV Shipping Method    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1572676;
  PARAMETER(PAR.Load_ID);
  PARAMETER(LCL.Shipping_Method);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Shipping Method is Collect Truck
  IF LCL.Shipping_Method = 'CT';

  // OR LCL.Shipping Method is Collect Rail
  OR LCL.Shipping_Method = 'CR';

  //?** Treat CT & CR the same           FP1251 LJB 12/26/2007
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV 1st Stop Mileage   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1456048;
  PARAMETER(PAR.Load_ID);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Miles_to_next_stop);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?** Calc miles between all stops then retrieve 1st stop miles
  CASE;

  // IF PAR.Miles to next stop is Not Entered
  IF PAR.Miles_to_next_stop = *ZERO;

  //?** Override miles will be returned, if entered
  // Call program CLC Total Load Miles   XF.
  CALL PROGRAM(CLC Total Load Miles   XF) ('PDW3XFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(WRK.Total_Load_Miles);
  PARAMETER(WRK.Override_Total_Load_Miles);

  EXECUTE FUNCTION(RTV 1st Stop Mileage   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1456048;
  PARAMETER(PAR.Load_ID);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Miles_to_next_stop);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  ENDIF;

  //?** 11/16/2007 LJB FP1251 Error if no miles, set SDD/SDT to zeros
  CASE;

  // IF PAR.Miles to next stop is Not Entered
  IF PAR.Miles_to_next_stop = *ZERO;

  // PAR.Scheduled Delivery Date = CND.not entered
  PAR.Scheduled_Delivery_Date = *ZERO;

  // PAR.Scheduled Delivery Time = CND.Not Entered
  PAR.Scheduled_Delivery_Time = *ZERO;

  //?** 11/16/2007 LJB FP1251 Error if no miles, set SDD/SDT to zeros
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Hours Required = CON.*ZERO
  PAR.Hours_Required = *ZERO;

  // LCL.Hours Required = CON.*ZERO
  LCL.Hours_Required = *ZERO;

  EXECUTE FUNCTION(RTV Legal Run Miles DscRT) TYPE(RTVOBJ) FILE(PDLGCPP)          AC1456042;
  PARAMETER(PAR.Miles_to_next_stop);
  PARAMETER(LCL.Hours_Required);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?09/09/11 PKD E1659 Additional Route Hours
  // Call program Rtv Addtnl Route Hrs  XF.
  CALL PROGRAM(Rtv Addtnl Route Hrs  XF) ('PMACXFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(LCL.Additional_Route_Hours);

  // PAR.Hours Required = LCL.Hours Required + LCL.Additional Route Hours
  PAR.Hours_Required = LCL.Hours_Required + LCL.Additional_Route_Hours;

  //?get number of whole days + remaining hours
  CASE;

  // IF PAR.Hours Required is Zero
  IF PAR.Hours_Required = *ZERO;

  //?get number of whole days + remaining hours
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.@Days 5 = PAR.Hours Required / CON.24 *
  PAR.@Days_5 = PAR.Hours_Required / 24;

  // WRK.USR Hours 5.0 = PAR.@Days 5 * CON.24 *
  WRK.USR_Hours_5_0 = PAR.@Days_5 * 24;

  // PAR.USR Hours 5.0 = PAR.Hours Required - WRK.USR Hours 5.0
  PAR.USR_Hours_5_0 = PAR.Hours_Required - WRK.USR_Hours_5_0;

  // WRK.@Numeric 6,0 = PAR.USR Hours 5.0 * CON.10000 *
  WRK.@Numeric_60 = PAR.USR_Hours_5_0 * 10000;

  //?Subtract whole days
  CASE;

  // IF PAR.@Days 5 is greater than zero
  IF PAR.@Days_5 > *ZERO;

  // PAR.@Days 5 = PAR.@Days 5 * CON.-1 *
  PAR.@Days_5 = PAR.@Days_5 * -1;

  // PAR.Scheduled Delivery Date = PAR.Scheduled Delivery Date + PAR.@Days 5 *DAYS
  PAR.Scheduled_Delivery_Date = DATEINCR(PAR.Scheduled_Delivery_Date PAR.@Days_5 'DY'
  1111111 'NONE' 'N' 1);

  ENDIF;

  //?Calculate # whole days + hours left
  CASE;

  // IF WRK.@Numeric 6,0 GE PAR.Scheduled Delivery Time
  IF WRK.@Numeric_60 >= PAR.Scheduled_Delivery_Time;

  // WRK.@Numeric 6,0 = WRK.@Numeric 6,0 - PAR.Scheduled Delivery Time
  WRK.@Numeric_60 = WRK.@Numeric_60 - PAR.Scheduled_Delivery_Time;

  // PAR.@Days 5 = CON.-1
  PAR.@Days_5 = -1;

  // PAR.Scheduled Delivery Date = PAR.Scheduled Delivery Date + PAR.@Days 5 *DAYS
  PAR.Scheduled_Delivery_Date = DATEINCR(PAR.Scheduled_Delivery_Date PAR.@Days_5 'DY'
  1111111 'NONE' 'N' 1);

  // PAR.Scheduled Delivery Time = CON.240000 - WRK.@Numeric 6,0
  PAR.Scheduled_Delivery_Time = 240000 - WRK.@Numeric_60;

  //?Calculate # whole days + hours left
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Scheduled Delivery Time = PAR.Scheduled Delivery Time - WRK.@Numeric 6,0
  PAR.Scheduled_Delivery_Time = PAR.Scheduled_Delivery_Time - WRK.@Numeric_60;

  ENDIF;

  ENDIF;

  ENDIF;

  EXECUTE FUNCTION(RTV Total Ld Mi/Sts    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1496186;
  PARAMETER(PAR.Load_ID);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Total_Load_Miles);
  PARAMETER(WRK.Override_Total_Load_Miles);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

 }

 ENDIF;

 ENDIF;

 //?---------------------------------------------------------------
 EXECUTE FUNCTION(RTV Last Stop Consign  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1377331;
 PARAMETER(PAR.Load_ID);
 PARAMETER(WRK.Ship_To_Customer);
 PARAMETER(WRK.Ship_To_Name);
 PARAMETER(WRK.Ship_To_Address_Line_1);
 PARAMETER(WRK.Ship_To_Address_Line_2);
 PARAMETER(WRK.Ship_To_Address_Line_3);
 PARAMETER(WRK.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(WRK.Ship_To_Zip_Postal_Code);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(RTV for B.O.L. Print   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1377319;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Ship_To_Name);
  PARAMETER(PAR.Ship_To_Address_Line_1);
  PARAMETER(PAR.Ship_To_Address_Line_2);
  PARAMETER(PAR.Ship_To_Address_Line_3);
  PARAMETER(PAR.Ship_To_City);
  PARAMETER(PAR.Ship_To_State_Code);
  PARAMETER(PAR.Ship_To_Zip_Postal_Code);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  QUIT;

 }

 //?---------------------------------------------------------------
 //?OMS132:  Fill in Flat Amount as required
 CASE;

 // IF PAR.Total Stops is One Stop
 IF PAR.Total_Stops = 1;

 // AND PAR.Flat Amount EQ WRK.ZERO
 AND PAR.Flat_Amount = WRK.ZERO;

 //?get flat amount for destination city
 EXECUTE FUNCTION(RTV Ship To City/St-Ld RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1454218;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Destination_City);
 PARAMETER(PAR.State_Code);
 {
  //?USER: Initialize routine

  //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 // Execute function CVT Str to Upper Alpha US.
 EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
 PARAMETER(PAR.Destination_City);
 PARAMETER(WRK.Destination_City);
 {
  PDWEUFR:  PGM PARM(&STRIN &STROUT)

  CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
 }

 // PAR.Destination City = WRK.Destination City
 PAR.Destination_City = WRK.Destination_City;

 EXECUTE FUNCTION(RTV Destination Amount RT) TYPE(RTVOBJ) FILE(PDLECPP)          AC1454806;
 PARAMETER(PAR.Carrier_Broker);
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(PAR.Destination_City);
 PARAMETER(PAR.State_Code);
 PARAMETER(PAR.Flat_Amount);
 {
  //?USER: Process Data record

  //?only pass out FLAT amt.  (it could now be a ML rate too)  01/03/07
  CASE;

  // IF DB1.CDR Unit of Measure is Flat
  IF DB1.CDR_Unit_of_Measure = 'FL';

  MOVE *ALL (To: PAR From: DB1);

  ENDIF;

 }

 ENDIF;

 //?Calc Load U/M           -- RMC 6/16/06
 DO;

 //?** All boxes=BX, All combos=CB, Any mix of the two=MX   E00239 11/12/08
 // Call program RTV UM/Whs Code,BX Qty XF.
 CALL PROGRAM(RTV UM/Whs Code,BX Qty XF) ('PPYXXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Load_U_M);

 ENDDO;

 EXECUTE FUNCTION(CHG Lock Load Update   CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1454811;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER('L');
 PARAMETER(PAR.Flat_Amount);
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 PARAMETER(PAR.Load_U_M);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

  // DB1.Job Name = JOB.*JOB
  DB1.Job_Name = JOB.*JOB;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

 }

 //?OMS261:  if sched to ship today, print prelim pick at all whses
 //?Sched to ship today
 CASE;

 // IF PAR.Scheduled Ship Date EQ JOB.*Job date
 IF PAR.Scheduled_Ship_Date = JOB.*Job_date;

 EXECUTE FUNCTION(RTV All Whses on Load  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1483728;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.USR_Warehouse_Code);
 PARAMETER(PAR.USR_CDE_Parm_1);
 PARAMETER(PAR.USR_CDE_Parm_2);
 PARAMETER(PAR.USR_CDE_Parm_3);
 PARAMETER(PAR.USR_CDE_Parm_4);
 PARAMETER(PAR.USR_CDE_Parm_5);
 PARAMETER(PAR.USR_CDE_Parm_6);
 PARAMETER(PAR.USR_CDE_Parm_7);
 PARAMETER(PAR.USR_CDE_Parm_8);
 PARAMETER(PAR.USR_CDE_Parm_9);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV All Whses on Order RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1483729;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.USR_Warehouse_Code);
  PARAMETER(PAR.USR_CDE_Parm_1);
  PARAMETER(PAR.USR_CDE_Parm_2);
  PARAMETER(PAR.USR_CDE_Parm_3);
  PARAMETER(PAR.USR_CDE_Parm_4);
  PARAMETER(PAR.USR_CDE_Parm_5);
  PARAMETER(PAR.USR_CDE_Parm_6);
  PARAMETER(PAR.USR_CDE_Parm_7);
  PARAMETER(PAR.USR_CDE_Parm_8);
  PARAMETER(PAR.USR_CDE_Parm_9);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Warehouse Code EQ PAR.USR Warehouse Code
   IF DB1.Warehouse_Code = PAR.USR_Warehouse_Code;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 1
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_1;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 2
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_2;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 3
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_3;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 4
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_4;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 5
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_5;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 6
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_6;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 7
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_7;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 8
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_8;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 9
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_9;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?current warehouse not already being used
   //?Fill in first blank warehouse
   CASE;

   // IF PAR.USR Warehouse Code EQ WRK.BLANK
   IF PAR.USR_Warehouse_Code = WRK.BLANK;

   // PAR.USR Warehouse Code = DB1.Warehouse Code
   PAR.USR_Warehouse_Code = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 1 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_1 = WRK.BLANK;

   // PAR.USR CDE Parm 1 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_1 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 2 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_2 = WRK.BLANK;

   // PAR.USR CDE Parm 2 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_2 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 3 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_3 = WRK.BLANK;

   // PAR.USR CDE Parm 3 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_3 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 4 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_4 = WRK.BLANK;

   // PAR.USR CDE Parm 4 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_4 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 5 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_5 = WRK.BLANK;

   // PAR.USR CDE Parm 5 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_5 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 6 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_6 = WRK.BLANK;

   // PAR.USR CDE Parm 6 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_6 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 7 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_7 = WRK.BLANK;

   // PAR.USR CDE Parm 7 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_7 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 8 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_8 = WRK.BLANK;

   // PAR.USR CDE Parm 8 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_8 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 9 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_9 = WRK.BLANK;

   // PAR.USR CDE Parm 9 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_9 = DB1.Warehouse_Code;

   ENDIF;

   ENDIF;

  }

 }

 // PAR.Company Number Pass   USR = PAR.Company Number
 PAR.Company_Number_Pass_USR = PAR.Company_Number;

 // PAR.Order Number 1  PASS  USR = PAR.Load ID
 PAR.Order_Number_1_PASS_USR = PAR.Load_ID;

 // PAR.Date 1          PASS  USR = PAR.Scheduled Ship Date
 PAR.Date_1_PASS_USR = PAR.Scheduled_Ship_Date;

 // WRK.USR Select/Omit Flag = CND.Select
 WRK.USR_Select_Omit_Flag = 'S';

 // WRK.USR Detail or Summary = CND.Detail
 WRK.USR_Detail_or_Summary = 'D';

 // WRK.AUTO PRINT PRELIM PICK = CND.AUTO PRINT YES
 WRK.AUTO_PRINT_PRELIM_PICK = 'Y';

 //?letting all the other parms default in the CL
 //?If warehouse exists for load then print.
 CASE;

 // IF PAR.USR Warehouse Code is Warehouse Code not Blank
 IF PAR.USR_Warehouse_Code <> *BLANK;

 // Call program Pass Pre Pick @LoadLockUP.
 CALL PROGRAM(Pass Pre Pick @LoadLockUP) ('PDBDUPC');
 PARAMETER(PAR.Return_Code_Usr);
 PARAMETER('OMS');
 PARAMETER('PDIZPCLP');
 PARAMETER(WRK.USR_Detail_or_Summary);
 PARAMETER('Auto Print Prelim. Pick');
 PARAMETER(WRK.PRT_Printer_Device);
 PARAMETER(WRK.PRT_Hold_Output_Sts);
 PARAMETER(WRK.PRT_Save_Output_Sts);
 PARAMETER(WRK.PRT_Night_Queue_Run_Sts);
 PARAMETER(WRK.PRT_Night_Queue);
 PARAMETER(PAR.Company_Number_Pass_USR);
 PARAMETER(PAR.Date_1_PASS_USR);
 PARAMETER(PAR.Order_Number_1_PASS_USR);
 PARAMETER(WRK.System_Value_Numeric);
 PARAMETER(PAR.USR_Warehouse_Code);
 PARAMETER(PAR.USR_CDE_Parm_1);
 PARAMETER(PAR.USR_CDE_Parm_2);
 PARAMETER(PAR.USR_CDE_Parm_3);
 PARAMETER(PAR.USR_CDE_Parm_4);
 PARAMETER(PAR.USR_CDE_Parm_5);
 PARAMETER(PAR.USR_CDE_Parm_6);
 PARAMETER(PAR.USR_CDE_Parm_7);
 PARAMETER(PAR.USR_CDE_Parm_8);
 PARAMETER(PAR.USR_CDE_Parm_9);
 PARAMETER(WRK.USR_Select_Omit_Flag);
 PARAMETER(WRK.AUTO_PRINT_PRELIM_PICK);

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(EDT Lock Load          IF) TYPE(EXCINTFUN)                     AC1419469;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 {
  //?Execute internal function

  //?*** Return Plant Code from first Order Header
  EXECUTE FUNCTION(zzV for Accusort Load  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1322485;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1305919;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428569;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(WRK.Trans_Contol_AS400_Plant);
    {
     //?USER: Process Data record

     CASE;

     // IF DB1.Detail Line Status is Not cancelled
     IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

     EXECUTE FUNCTION(Rtv Desc/Trans Control RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304130;
     PARAMETER(DB1.Warehouse_Code);
     PARAMETER(WRK.Warehouse_Description);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     QUIT;

     ENDIF;

    }

    CASE;

    // IF WRK.Trans Contol AS400/Plant is Plant
    IF WRK.Trans_Contol_AS400_Plant = 'P';

    // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
    PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

    QUIT;

    ENDIF;

   }

   CASE;

   // IF WRK.Trans Contol AS400/Plant is Plant
   IF WRK.Trans_Contol_AS400_Plant = 'P';

   // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
   PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

   QUIT;

   ENDIF;

  }

  EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
  PARAMETER(PAR.Company_Number);
  PARAMETER('LDORDD');
  PARAMETER(LCL.PFS_AccuSort_Active);
  PARAMETER(LCL.PFS_Carlisle_Active);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?UPD:  AccuSort
  CASE;

  // IF LCL.PFS AccuSort Active is Yes
  IF LCL.PFS_AccuSort_Active = 'Y';

  //?AccuSort:  Create Order Header and Order Detail
  CASE;

  // IF PAR.Trans Contol AS400/Plant is Plant
  IF PAR.Trans_Contol_AS400_Plant = 'P';

  // Call program Zzz Lock/Unlock Box ID XF.
  CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
  PARAMETER('L');

  // Call program Zzz AS Order Hdr/Dtl   XF.
  CALL PROGRAM(Zzz AS Order Hdr/Dtl   XF) ('PDQPXFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Company_Number);

  // Call program Zzz Lock/Unlock Box ID XF.
  CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
  PARAMETER('U');

  ENDIF;

  ENDIF;

  //?UPD:  Carlisle
  CASE;

  // IF LCL.PFS Carlisle Active is Yes
  IF LCL.PFS_Carlisle_Active = 'Y';

  // Call program PFS Lock Load/Order   XF.
  CALL PROGRAM(PFS Lock Load/Order   XF) ('PPNLXFR');
  PARAMETER(PAR.Load_ID);

  ENDIF;

  //?** 07/28/2017 RMC R131331 if load had a whs with edi wso interchange, then
  // Call program Exc Create EDI f/Lock XF.
  CALL PROGRAM(Exc Create EDI f/Lock XF) ('PUDNXFR');
  PARAMETER(PAR.Load_ID);

 }

 CASE;

 // IF JOB.*PROGRAM is PRT Audit Report
 IF JOB.*PROGRAM = 'PDSNPFR';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Clr Program Message Q  US.
 EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
 {
  * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
  C                     CALL 'Y2CLMSC'
  C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
  C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
  * RESET FIRST MESSAGE ONLY FLAG.
  C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
 }

 //?Sched to ship today
 CASE;

 // IF PAR.Scheduled Ship Date EQ JOB.*Job date
 IF PAR.Scheduled_Ship_Date = JOB.*Job_date;

 CASE;

 // IF PAR.USR Warehouse Code is Warehouse Code not Blank
 IF PAR.USR_Warehouse_Code <> *BLANK;

 // Call program RTV Warehouse Dflt PrtrXF.
 CALL PROGRAM(RTV Warehouse Dflt PrtrXF) ('PDCHXFR');
 PARAMETER(PAR.USR_Warehouse_Code);
 PARAMETER(NLL.Default_Printer);
 PARAMETER(LCL.Include_in_Auto_Pre_Pick);

 //?RMC DLY029 10/30/07 - sndmsg only if Warehouse is set up for auto-print
 CASE;

 // IF LCL.Include in Auto Pre Pick is Incl in Auto Prelim Pick
 IF LCL.Include_in_Auto_Pre_Pick = 'Y';

 // Send information message - 'Preliminary Pick Printing at printer for warehouses: &1 &2 &3 &4 &5
 MESSAGE(USR2565 *INFO);
 MSGPARM(PAR.USR_Warehouse_Code);
 MSGPARM(PAR.USR_CDE_Parm_1);
 MSGPARM(PAR.USR_CDE_Parm_2);
 MSGPARM(PAR.USR_CDE_Parm_3);
 MSGPARM(PAR.USR_CDE_Parm_4);
 MSGPARM(PAR.USR_CDE_Parm_5);
 MSGPARM(PAR.USR_CDE_Parm_6);
 MSGPARM(PAR.USR_CDE_Parm_7);
 MSGPARM(PAR.USR_CDE_Parm_8);
 MSGPARM(PAR.USR_CDE_Parm_9);

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send information message - 'Preliminary Pick not printed, no order details.'
 MESSAGE(USR2715 *INFO);

 ENDIF;

 ENDIF;

 ENDIF;

 //?***** Change Log and comments
 DO;

 //?** 07/15/16  RMC E4119 Dont recalc deadl depart,miles if MG Created Load
 //?** 09/30/2009 LJB E00495
 //?**   Use carrier date/time, if entered, to calc DDD/T
 //?** 11/16/2007 LJB FP1251 Deadline Depart Date and Time will be
 //?** zeros if there is no Miles Between Cities record
 ENDDO;

}


// PAR.Load Status = CND.Lock
PAR.Load_Status = 'L';

// WRK.Load Change Type = CND.Lock Load
WRK.Load_Change_Type = 'LOCK';

// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(DTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(DTL.Load_Status);
PARAMETER('L');
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Company_Number);
PARAMETER(*ZERO);

ENDIF;

//?F16=Update processing for Unlock
CASE;

// IF DTL.*CMD key is *Unlock Load
IF DTL.*CMD_key = '16';

EXECUTE FUNCTION(UPD Unlock Load Update IF) TYPE(EXCINTFUN)                     AC1454814;
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Company_Number);
{
 //?Execute internal function

 EXECUTE FUNCTION(CHG Ld Sts,Rated Frts  CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1371002;
 PARAMETER(PAR.Load_ID);
 PARAMETER('U');
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 EXECUTE FUNCTION(EDT Unlock Load        IF) TYPE(EXCINTFUN)                     AC1419468;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 {
  //?Execute internal function

  //?*** Return Plant Code from first Order Header
  EXECUTE FUNCTION(zzV for Accusort Load  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1322485;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1305919;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428569;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(WRK.Trans_Contol_AS400_Plant);
    {
     //?USER: Process Data record

     CASE;

     // IF DB1.Detail Line Status is Not cancelled
     IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

     EXECUTE FUNCTION(Rtv Desc/Trans Control RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304130;
     PARAMETER(DB1.Warehouse_Code);
     PARAMETER(WRK.Warehouse_Description);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     QUIT;

     ENDIF;

    }

    CASE;

    // IF WRK.Trans Contol AS400/Plant is Plant
    IF WRK.Trans_Contol_AS400_Plant = 'P';

    // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
    PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

    QUIT;

    ENDIF;

   }

   CASE;

   // IF WRK.Trans Contol AS400/Plant is Plant
   IF WRK.Trans_Contol_AS400_Plant = 'P';

   // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
   PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

   QUIT;

   ENDIF;

  }

  EXECUTE FUNCTION(RTV System Value Alpha RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1530745;
  PARAMETER('PLTFLRSYS');
  PARAMETER(LCL.Plant_Floor_System_USR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
  PARAMETER(PAR.Company_Number);
  PARAMETER('LDORDD');
  PARAMETER(LCL.PFS_AccuSort_Active);
  PARAMETER(LCL.PFS_Carlisle_Active);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?UPD:  AccuSort
  CASE;

  // IF LCL.PFS AccuSort Active is Yes
  IF LCL.PFS_AccuSort_Active = 'Y';

  //?Notify Accusort if locked load
  CASE;

  // IF PAR.Trans Contol AS400/Plant is Plant
  IF PAR.Trans_Contol_AS400_Plant = 'P';

  // Call program Zzz Lock/Unlock Box ID XF.
  CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
  PARAMETER('L');

  // Call program DEL AS Order Hdr/Dtl   XF.
  CALL PROGRAM(DEL AS Order Hdr/Dtl   XF) ('PDQ0XFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Company_Number);

  // Call program Zzz Lock/Unlock Box ID XF.
  CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
  PARAMETER('U');

  ENDIF;

  ENDIF;

  //?UPD:  Carlisle
  CASE;

  // IF LCL.PFS Carlisle Active is Yes
  IF LCL.PFS_Carlisle_Active = 'Y';

  // Call program PFS Unlock Load/Order XF.
  CALL PROGRAM(PFS Unlock Load/Order XF) ('PPNQXFR');
  PARAMETER(PAR.Load_ID);

  // Call program PFS Lock Load/Order   XF.
  CALL PROGRAM(PFS Lock Load/Order   XF) ('PPNLXFR');
  PARAMETER(PAR.Load_ID);

  ENDIF;

  //?** 09/23/2011 RMC E1607  if load had a whs with edi wso interchange, then
  //?   delete it if Unproc, else change it to "D"elete/and reprocess
  // Call program Exc ChgDel EDI f/UnlckXF.
  CALL PROGRAM(Exc ChgDel EDI f/UnlckXF) ('PBAEXFR');
  PARAMETER(PAR.Load_ID);

 }

 EXECUTE FUNCTION(CHG Clear Rated Frt    RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1399763;
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(CHG Recovery Freight   CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1292118;
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Stop_Drop_Sequence_Number);
  PARAMETER(DB1.Miles_to_next_stop);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  EXECUTE FUNCTION(CHG Clear Rated Frt    RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1399729;
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Order_Number);
  {
   //?USER: Initialize routine

   //?05/12/04 SLM PKTR01 Multi-Company - Function was changed
   //?                                    to remove Company RST or Pos
   //?USER: Process Data record

   EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1293468;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // Call program TRG Order Hdr CHG Trig XT.
    CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Type_Sales);
    PARAMETER(DB1.AR_Customer_Number);
    PARAMETER(DB1.Ship_To_Customer);
    PARAMETER(DB1.Ship_To_Name);
    PARAMETER(DB1.Ship_To_Address_Line_1);
    PARAMETER(DB1.Ship_To_Address_Line_2);
    PARAMETER(DB1.Ship_To_Address_Line_3);
    PARAMETER(DB1.Ship_To_City);
    PARAMETER(DB1.Ship_To_State_Code);
    PARAMETER(DB1.Ship_To_Zip_Postal_Code);
    PARAMETER(DB1.Bill_to_Customer);
    PARAMETER(DB1.Bill_to_Name);
    PARAMETER(DB1.Bill_to_Address_Line_1);
    PARAMETER(DB1.Bill_to_Address_Line_2);
    PARAMETER(DB1.Bill_to_Address_Line_3);
    PARAMETER(DB1.Bill_to_City);
    PARAMETER(DB1.Bill_to_State_Code);
    PARAMETER(DB1.Bill_to_Zip_Postal_Code);
    PARAMETER(DB1.Customer_Purchase_Order_#);
    PARAMETER(DB1.Order_Date);
    PARAMETER(DB1.Requested_Ship_Date);
    PARAMETER(DB1.Actual_Shipped_Date);
    PARAMETER(DB1.Cancel_Date);
    PARAMETER(DB1.Terms_Code);
    PARAMETER(DB1.Special_Instructions);
    PARAMETER(DB1.Special_Instructions_2);
    PARAMETER(DB1.Carrier_Code);
    PARAMETER(DB1.Comment_Print_Acknowledge);
    PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
    PARAMETER(DB1.Comment_Print_Pick_Slip);
    PARAMETER(DB1.Comment_Print_Ship_Doc);
    PARAMETER(DB1.Reason_Code);
    PARAMETER(DB1.Order_in_Use);
    PARAMETER(DB1.Header_Status);
    PARAMETER(DB1.Header_Status_Last);
    PARAMETER(DB1.Order_Type_Print_Status);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.User_Original_Entry);
    PARAMETER(DB1.Date_of_Original_Entry);
    PARAMETER(DB1.Order_Value_Total);
    PARAMETER(DB1.Order_Weight_Total);
    PARAMETER(DB1.Credit_Hold);
    PARAMETER(DB1.Production_Hold);
    PARAMETER(DB1.New_Customer_Hold);
    PARAMETER(DB1.Requested_Delivery_Date);
    PARAMETER(DB1.Requested_Delivery_Time);
    PARAMETER(DB1.Accounts_Receiv_Ent_1);
    PARAMETER(DB1.Accounts_Receiv_Ent_2);
    PARAMETER(DB1.Load_ID);
    PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
    PARAMETER(DB1.Rated_Freight);
    PARAMETER(DB1.LTL_Flag);
    PARAMETER(DB1.Price_Audit);
    PARAMETER(DB1.Price_Status);
    PARAMETER(DB1.Shipping_Method);
    PARAMETER(DB1.Export_Status);
    PARAMETER(DB1.Palletize);
    PARAMETER(DB1.Shrink_Wrap);
    PARAMETER(DB1.Slip_Sheet);
    PARAMETER(DB1.Age_Code);
    PARAMETER(DB1.Reefer_Temperature);
    PARAMETER(DB1.Load_Type);
    PARAMETER(DB1.Attach_to_Invoice_Number);
    PARAMETER(DB1.Load_Plan_Order);
    PARAMETER(DB1.Print_Pick_Slip);
    PARAMETER(DB1.Resell_Reference_Number);
    PARAMETER(DB1.Special_Comment_1);
    PARAMETER(DB1.Special_Comment_2);
    PARAMETER(DB1.Affect_Auto_Accruals);
    PARAMETER(DB1.Sales_Route_Code);
    PARAMETER(DB1.Manager_Level_Code);
    PARAMETER(DB1.VP_Level_Code);
    PARAMETER(DB1.Attach_to_Order_Number);
    PARAMETER(DB1.Reason_for_Price_Audit);
    PARAMETER(DB1.Invoice_Number);
    PARAMETER(DB1.Invoice_Suffix);
    PARAMETER(DB1.Invoice_Date);
    PARAMETER(DB1.Event_Code);
    PARAMETER(DB1.Trans_Contol_AS400_Plant);
    PARAMETER(DB1.Modified_Flag);
    PARAMETER(DB1.A_R_order_Value_Total);
    PARAMETER(DB1.Billing_Activity_Type);
    PARAMETER(DB1.Block_Order_Flag);
    PARAMETER(DB1.Order_Certification_Flag);
    PARAMETER(DB1.Invoice_Order_Value_Tot);
    PARAMETER(DB1.Process_Sts_for_3C);
    PARAMETER(DB1.Order_Conf_Fax_Sts);
    PARAMETER(DB1.Manifest_Fax_Sts);
    PARAMETER(DB1.Invoice_Fax_Sts);
    PARAMETER(DB1.Transfer_in_Storage_Ind);
    PARAMETER(DB1.Email_Cust_On_Order_Ship);
    PARAMETER(DB1.Order_Emailed);
    PARAMETER(DB1.Export_Docs_Go_w_Driver);
    PARAMETER(DB1.Shipping_Temp_Code_C_F);
    PARAMETER(DB1.Broker_Order_Status);
    PARAMETER(DB1.Air_Freight_Order);
    PARAMETER(DB1.Order_Requires_Review);
    PARAMETER(DB1.OH_Load_Plan_Ready);
    PARAMETER(DB1.Export_USDA_Approved);
    PARAMETER(DB1.HPB_Ship_to_Warehouse);
    PARAMETER(DB1.OH_TF_Exempt_Code);
    PARAMETER(DB1.OH_Appt_Confirmation_Dt);
    PARAMETER(DB1.JPN_Invoice_Issuance_Date);
    PARAMETER(DB1.Load_Actual_Shipped_Date);
    PARAMETER(DB1.Load_BOL_Complete_Date);
    PARAMETER(DB1.Load_Truck_Departure_Date);
    PARAMETER(DB1.Maximum_Gross_Weight);
    PARAMETER(DB1.Time_of_Original_Entry);
    PARAMETER(DB1.OH_Appt_Confirmation_Tm);
    PARAMETER(DB1.Load_BOL_Complete_Time);
    PARAMETER(DB1.Load_Truck_Departure_Time);
    PARAMETER(DB1.Act_Frt_Reference_Amount);
    PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
    PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
    PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
    PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
    PARAMETER(DB1.Claim_Number);
    PARAMETER(DB1.EDI_Status_1);
    PARAMETER(DB1.EDI_Status_2);
    PARAMETER(DB1.EDI_Status_3);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);

   }

   //?05/13/04 slm Multi-Company - Order Header lv remove co must use db1
   //?                              was using the par replace with db1
   EXECUTE FUNCTION(UPD Rated Freight      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1396132;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Weight_Total);
   PARAMETER(*ZERO);
   {
    //?USER: Initialize routine

    //?par.@rated freight is the sum of all the detail rated frt, for adjusting
    // PAR.@Rated Freight = CON.*ZERO
    PAR.@Rated_Freight = *ZERO;

    //?par.usr process status is used to indicate if there are detail present
    // PAR.USR Process status = CND.no
    PAR.USR_Process_status = 'N';

    //?USER: Process Data record

    CASE;

    // IF DB1.Detail Line Status is Cancelled
    IF DB1.Detail_Line_Status = 'X';

    EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(*ZERO);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.USR Process status = CND.yes
    PAR.USR_Process_status = 'Y';

    CASE;

    // IF PAR.Order Weight Total is Equal to zero
    IF PAR.Order_Weight_Total = *ZERO;

    // OR PAR.Total Rated Freight is Zero
    OR PAR.Total_Rated_Freight = *ZERO;

    // PAR.Rated Freight = CON.*ZERO
    PAR.Rated_Freight = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF DB1.Detail Line Status is Confirmed & Complete
    IF DB1.Detail_Line_Status = 'C'/'R';

    // Synon (17,9) work field =       * Compute Dtl Rated Freight
    PGM.*Synon_179_work_field = ( DB1.Weight_Shipped_Total / PAR.Order_Weight_Total 'H' )
    * PAR.Total_Rated_Freight 'H';

    // IF *OTHERWISE
    IF *OTHERWISE;

    // Synon (17,9) work field =       * Compute Dtl Rated Freight
    PGM.*Synon_179_work_field = ( ( DB1.Quantity_Ordered * DB1.Unit_Weight_Ordered_U_M 'H' )
    / PAR.Order_Weight_Total 'H' ) * PAR.Total_Rated_Freight 'H';

    ENDIF;

    // PAR.Rated Freight = PGM.*Synon (17,9) work field * CON.1 *Rounded
    PAR.Rated_Freight = PGM.*Synon_179_work_field * 1 'H';

    ENDIF;

    EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Rated_Freight);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    // PAR.@Rated Freight = PAR.@Rated Freight + PAR.Rated Freight
    PAR.@Rated_Freight = PAR.@Rated_Freight + PAR.Rated_Freight;

    // PAR.Order Sequence Number = DB1.Order Sequence Number
    PAR.Order_Sequence_Number = DB1.Order_Sequence_Number;

    // PAR.Order Secondary Line Seq = DB1.Order Secondary Line Seq
    PAR.Order_Secondary_Line_Seq = DB1.Order_Secondary_Line_Seq;

    ENDIF;

    //?USER: Exit processing

    //?Adjust totals
    CASE;

    // IF PAR.@Rated Freight NE PAR.Total Rated Freight
    IF PAR.@Rated_Freight <> PAR.Total_Rated_Freight;

    // AND PAR.USR Process status is yes
    AND PAR.USR_Process_status = 'Y';

    // WRK.USR Adjustment Amount 1 = PAR.Total Rated Freight - PAR.@Rated Freight
    WRK.USR_Adjustment_Amount_1 = PAR.Total_Rated_Freight - PAR.@Rated_Freight;

    // PAR.Rated Freight = PAR.Rated Freight + WRK.USR Adjustment Amount 1
    PAR.Rated_Freight = PAR.Rated_Freight + WRK.USR_Adjustment_Amount_1;

    //?Update last detail line processed
    EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Order_Number);
    PARAMETER(PAR.Order_Sequence_Number);
    PARAMETER(PAR.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Rated_Freight);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

   }

  }

 }

 // Execute function Clr Program Message Q  US.
 EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
 {
  * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
  C                     CALL 'Y2CLMSC'
  C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
  C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
  * RESET FIRST MESSAGE ONLY FLAG.
  C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
 }

}


// WRK.Load Change Type = CND.Unlock Load
WRK.Load_Change_Type = 'UNLOCK';

// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(DTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(DTL.Load_Status);
PARAMETER('U');
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Company_Number);
PARAMETER(*ZERO);

ENDIF;

// Execute function Clr Program Message Q  US.
EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
{
 * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
 C                     CALL 'Y2CLMSC'
 C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
 C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
 * RESET FIRST MESSAGE ONLY FLAG.
 C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
}


//?* DTL.Load Status is the load status prior to update.
//?** If "fax carrier=Y" for deleted SSI carrier, send to PowerPro FP1166
//?Update order header with changed carrier, flag to fax booking confirmation
CASE;

// IF PAR.Carrier Code NE DTL.Carrier Code
IF PAR.Carrier_Code <> DTL.Carrier_Code;

EXECUTE FUNCTION(Chg Carrier           RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1206533;
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Load_ID);
{
 //?USER: Initialize routine

 //?05/13/04 SLM PKTR01 Multi-Company - Function was changed
 //?                                   to remove Company RST or Pos
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Load Information   CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1197376;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.Event_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program TRG Order Hdr CHG Trig XT.
  CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Ship_To_Name);
  PARAMETER(DB1.Ship_To_Address_Line_1);
  PARAMETER(DB1.Ship_To_Address_Line_2);
  PARAMETER(DB1.Ship_To_Address_Line_3);
  PARAMETER(DB1.Ship_To_City);
  PARAMETER(DB1.Ship_To_State_Code);
  PARAMETER(DB1.Ship_To_Zip_Postal_Code);
  PARAMETER(DB1.Bill_to_Customer);
  PARAMETER(DB1.Bill_to_Name);
  PARAMETER(DB1.Bill_to_Address_Line_1);
  PARAMETER(DB1.Bill_to_Address_Line_2);
  PARAMETER(DB1.Bill_to_Address_Line_3);
  PARAMETER(DB1.Bill_to_City);
  PARAMETER(DB1.Bill_to_State_Code);
  PARAMETER(DB1.Bill_to_Zip_Postal_Code);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Order_Date);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Cancel_Date);
  PARAMETER(DB1.Terms_Code);
  PARAMETER(DB1.Special_Instructions);
  PARAMETER(DB1.Special_Instructions_2);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Order_in_Use);
  PARAMETER(DB1.Header_Status);
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER(DB1.Order_Type_Print_Status);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.User_Original_Entry);
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.Order_Value_Total);
  PARAMETER(DB1.Order_Weight_Total);
  PARAMETER(DB1.Credit_Hold);
  PARAMETER(DB1.Production_Hold);
  PARAMETER(DB1.New_Customer_Hold);
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(DB1.Requested_Delivery_Time);
  PARAMETER(DB1.Accounts_Receiv_Ent_1);
  PARAMETER(DB1.Accounts_Receiv_Ent_2);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.LTL_Flag);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Shrink_Wrap);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Reefer_Temperature);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Attach_to_Invoice_Number);
  PARAMETER(DB1.Load_Plan_Order);
  PARAMETER(DB1.Print_Pick_Slip);
  PARAMETER(DB1.Resell_Reference_Number);
  PARAMETER(DB1.Special_Comment_1);
  PARAMETER(DB1.Special_Comment_2);
  PARAMETER(DB1.Affect_Auto_Accruals);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Manager_Level_Code);
  PARAMETER(DB1.VP_Level_Code);
  PARAMETER(DB1.Attach_to_Order_Number);
  PARAMETER(DB1.Reason_for_Price_Audit);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Invoice_Date);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Trans_Contol_AS400_Plant);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.A_R_order_Value_Total);
  PARAMETER(DB1.Billing_Activity_Type);
  PARAMETER(DB1.Block_Order_Flag);
  PARAMETER(DB1.Order_Certification_Flag);
  PARAMETER(DB1.Invoice_Order_Value_Tot);
  PARAMETER(DB1.Process_Sts_for_3C);
  PARAMETER(DB1.Order_Conf_Fax_Sts);
  PARAMETER(DB1.Manifest_Fax_Sts);
  PARAMETER(DB1.Invoice_Fax_Sts);
  PARAMETER(DB1.Transfer_in_Storage_Ind);
  PARAMETER(DB1.Email_Cust_On_Order_Ship);
  PARAMETER(DB1.Order_Emailed);
  PARAMETER(DB1.Export_Docs_Go_w_Driver);
  PARAMETER(DB1.Shipping_Temp_Code_C_F);
  PARAMETER(DB1.Broker_Order_Status);
  PARAMETER(DB1.Air_Freight_Order);
  PARAMETER(DB1.Order_Requires_Review);
  PARAMETER(DB1.OH_Load_Plan_Ready);
  PARAMETER(DB1.Export_USDA_Approved);
  PARAMETER(DB1.HPB_Ship_to_Warehouse);
  PARAMETER(DB1.OH_TF_Exempt_Code);
  PARAMETER(DB1.OH_Appt_Confirmation_Dt);
  PARAMETER(DB1.JPN_Invoice_Issuance_Date);
  PARAMETER(DB1.Load_Actual_Shipped_Date);
  PARAMETER(DB1.Load_BOL_Complete_Date);
  PARAMETER(DB1.Load_Truck_Departure_Date);
  PARAMETER(DB1.Maximum_Gross_Weight);
  PARAMETER(DB1.Time_of_Original_Entry);
  PARAMETER(DB1.OH_Appt_Confirmation_Tm);
  PARAMETER(DB1.Load_BOL_Complete_Time);
  PARAMETER(DB1.Load_Truck_Departure_Time);
  PARAMETER(DB1.Act_Frt_Reference_Amount);
  PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
  PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
  PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
  PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);

 }

}


//?** This flag controls faxing to carrier in WW Load Plans
// PAR.USR Flag 1 = CND.No
PAR.USR_Flag_1 = 'N';

//?Flag to Fax Booking Confirmation if Carrier code changes
ENDIF;

// LCL.Status Flag 20 Y/N = CND.No
LCL.Status_Flag_20_Y_N = 'N';

//?Prompt to Fax and try to lock load only if carrier is not blank
CASE;

// IF DTL.Carrier Code is entered
IF DTL.Carrier_Code <> *BLANK;

//?** Prompt to fax, fax, then send msg to screen for each fax sent
//?** Return Carrier Fax Flag for testing SSI/PowerPro
//?** default "Fax to carrier" to Yes         P000737
// PAR.Status - Y or N = CND.yes
PAR.Status_Y_or_N = 'Y';

// Call program PMT Fax Load Confirmtn PV.
CALL PROGRAM(PMT Fax Load Confirmtn PV) ('POICPVR');
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Transloader_Carrier_Code);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Shipping_Line);
PARAMETER(DTL.OHE_Carrier_SCAC_Code);
PARAMETER(PAR.Status_Y_or_N);

//?** If Fax to Carrier is "Y" then check SSI/PowerPro also
CASE;

// IF PAR.Status - Y or N is yes
IF PAR.Status_Y_or_N = 'Y';

//?** Only send to SSI if SSI download flag is set to Yes
EXECUTE FUNCTION(RTV SSI Carrier flag   RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1904336;
PARAMETER(DTL.Carrier_Code);
PARAMETER(WRK.SSI_Download_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?ONLY do SSI from as400 if not an MG Created load (mg sends them to ssis)
CASE;

// IF DTL.MG Created Load is Not MG Created Load
IF DTL.MG_Created_Load = *BLANK;

//?** Handle deletes for SSI Carriers
CASE;

// IF WRK.SSI Download Flag is Yes, Download to SSI
IF WRK.SSI_Download_Flag = 'Y';

EXECUTE FUNCTION(RTV SSI Fax'd Flag     RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1906598;
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Fax_Sent_to_SSI_Carrier);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Carrier is new or changed to SBD
CASE;

// IF DTL.Fax Sent to SSI Carrier is Not Fax'd to Carrier
IF DTL.Fax_Sent_to_SSI_Carrier = *BLANK/'N';

// WRK.SSI Add, Chg, Delete flag = CND.Add
WRK.SSI_Add_Chg_Delete_flag = 00;

// Call program BLD SSI Download       XF.
CALL PROGRAM(BLD SSI Download       XF) ('PNPNXFR');
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Carrier_Code);
PARAMETER(WRK.SSI_Add_Chg_Delete_flag);

//?** Carrier is new or changed to SBD
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.SSI Add, Chg, Delete flag = CND.Change
WRK.SSI_Add_Chg_Delete_flag = 04;

// Call program BLD SSI Download       XF.
CALL PROGRAM(BLD SSI Download       XF) ('PNPNXFR');
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Carrier_Code);
PARAMETER(WRK.SSI_Add_Chg_Delete_flag);

ENDIF;

//?** Handle deletes for SSI Carriers
// IF WRK.SSI Download Flag is No
IF WRK.SSI_Download_Flag = 'N';

// OR WRK.SSI Download Flag is Not Entered
OR WRK.SSI_Download_Flag = *BLANK;

//?** If old carrier is SBD, send a delete record to SSI
//?** New/Changes for SBD will be sent from the Accept Screen
EXECUTE FUNCTION(RTV SSI Carrier flag   RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1904336;
PARAMETER(PAR.Carrier_Code);
PARAMETER(WRK.SSI_Download_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Only send to SSI if SSI download flag is set to Yes
CASE;

// IF WRK.SSI Download Flag is Yes, Download to SSI
IF WRK.SSI_Download_Flag = 'Y';

//?** Only send "Delete" record if a fax was previously sent
CASE;

// IF DTL.Fax Sent to SSI Carrier is Yes, Fax'd to Carrier
IF DTL.Fax_Sent_to_SSI_Carrier = 'Y';

//?** Carrier was changed from SBD to someone else
// WRK.SSI Add, Chg, Delete flag = CND.Delete
WRK.SSI_Add_Chg_Delete_flag = 01;

// Call program BLD SSI Download       XF.
CALL PROGRAM(BLD SSI Download       XF) ('PNPNXFR');
PARAMETER(DTL.Load_ID);
PARAMETER(PAR.Carrier_Code);
PARAMETER(WRK.SSI_Add_Chg_Delete_flag);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

// PAR.Company Number Pass   USR = DTL.Company Number
PAR.Company_Number_Pass_USR = DTL.Company_Number;

//?Order number is really load number
// PAR.Order Number 1  PASS  USR = DTL.Load ID
PAR.Order_Number_1_PASS_USR = DTL.Load_ID;

// PAR.Carrier Code = DTL.Carrier Code
PAR.Carrier_Code = DTL.Carrier_Code;

// PAR.USR Flag 1 = CND.Yes
PAR.USR_Flag_1 = 'Y';

//?** Pass flags back-fax to carrier and FAX (to fax, not print only)
// PAR.STATUS = CND.Yes
PAR.STATUS = 'Y';

// PAR.USR Status (Y/N) = CND.Fax
PAR.USR_Status_Y_N = 'F';

ENDIF;

//?OMS330 Try to Lock load if carrier entered.
CASE;

// IF DTL.Load Status is Lock
IF DTL.Load_Status = 'L';

//?OMS330 Try to Lock load if carrier entered.
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.STATUS = CND.Yes
WRK.STATUS = 'Y';

// Call program Rtv Plant Co/Org      XF.
CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(LCL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);

CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

//?FP1054 7/24/09 pass NO for lock option override for Seaboard only
// LCL.Lock option override sts = CND.No
LCL.Lock_option_override_sts = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Lock option override sts = CND.Yes
LCL.Lock_option_override_sts = 'Y';

ENDIF;

//?** Don't lock if errors pending in Order Detail       P0012851
EXECUTE FUNCTION(EDT Lock Load Edit/INF IF) TYPE(EXCINTFUN)                     AC1481296;
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Company_Number);
PARAMETER(WRK.*SFLSEL);
PARAMETER(WRK.STATUS);
PARAMETER(WRK.Error_Status);
PARAMETER(LCL.Lock_option_override_sts);
{
 //?Execute internal function

 //?** Chk for ord detail errors still pending  9.20.2011 P001251 LJB
 //?** Chg lock option override sts to *job date chk   8.23.09 E00495
 //?** Add lock option override sts for sched ship date chk  7.24.09 FP1054
 //?** Add Override Total Load Miles - WRK context     E00207 8/13/08
 EXECUTE FUNCTION(RTV Load for Load Plan RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1264653;
 PARAMETER(PAR.Load_ID);
 PARAMETER(WRK.Scheduled_Ship_Date);
 PARAMETER(PAR.Load_Status);
 PARAMETER(WRK.Reefer_Temperature);
 PARAMETER(PAR.Total_Load_Order_Weight);
 PARAMETER(WRK.Flat_Amount);
 PARAMETER(WRK.Allocate_Pounds_Miles);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Truck_Size);
 PARAMETER(WRK.Rated_Freight);
 PARAMETER(WRK.Load_Type);
 PARAMETER(WRK.Schedule_Sequence_Number);
 PARAMETER(WRK.Total_Load_Miles);
 PARAMETER(PAR.Shipping_Method);
 PARAMETER(WRK.Ship_From_Warehouse);
 PARAMETER(WRK.Ship_To_State_Code);
 PARAMETER(WRK.Carrier_Broker);
 PARAMETER(PAR.Load_Acceptance_Flag);
 PARAMETER(WRK.Override_Total_Load_Miles);
 PARAMETER(WRK.Shipping_Temp_C_F_txt);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Any Ord/Blk  on Ld RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1448300;
 PARAMETER(PAR.Load_ID);
 PARAMETER(WRK.USR_Check_Y_N_Status);
 PARAMETER(PAR.Block_Order_Flag);
 {
  //?USER: Initialize routine

  //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
  // PAR.USR Check Y/N Status = CND.blank
  PAR.USR_Check_Y_N_Status = *BLANK;

  //?OMS203:  need to know if there are any Block orders on load
  // PAR.Block Order Flag = CND.Firm Order
  PAR.Block_Order_Flag = 'F';

  //?USER: Process Data record

  // PAR.USR Check Y/N Status = CND.yes
  PAR.USR_Check_Y_N_Status = 'Y';

  CASE;

  // IF DB1.Block Order Flag is Block Order
  IF DB1.Block_Order_Flag = 'B';

  // PAR.Block Order Flag = DB1.Block Order Flag
  PAR.Block_Order_Flag = DB1.Block_Order_Flag;

  QUIT;

  ENDIF;

 }

 EXECUTE FUNCTION(EDT Lock Load Edits-INFIF) TYPE(EXCINTFUN)                     AC1481297;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 PARAMETER(WRK.Scheduled_Ship_Date);
 PARAMETER(PAR.Load_Status);
 PARAMETER(PAR.Total_Load_Order_Weight);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Truck_Size);
 PARAMETER(PAR.Shipping_Method);
 PARAMETER(PAR.Load_Acceptance_Flag);
 PARAMETER(PAR.*SFLSEL);
 PARAMETER(PAR.Error_Status);
 PARAMETER(PAR.Block_Order_Flag);
 PARAMETER(PAR.STATUS);
 PARAMETER(PAR.Lock_option_override_sts);
 {
  //?Execute internal function

  //?assume will have error
  // PAR.Error Status = CND.yes
  PAR.Error_Status = 'Y';

  EXECUTE FUNCTION(VAL Set Int.Acc No Hdg IF) TYPE(EXCINTFUN)                     AC1460523;
  PARAMETER('LOCKLD');
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(PAR.Access_Denied_Y_N);
  {
   //?Execute internal function

   // PAR.User Profile Name = JOB.*USER
   PAR.User_Profile_Name = JOB.*USER;

   EXECUTE FUNCTION(VAL User/Appl No Exit  IF) TYPE(EXCINTFUN)                     AC1460535;
   PARAMETER(PAR.User_Profile_Name);
   PARAMETER(PAR.Application_Code);
   PARAMETER(WRK.Company_Number);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Allow_Multi_Company);
   PARAMETER(PAR.Default_Printer);
   PARAMETER(PAR.Salesperson_Code);
   PARAMETER(WRK.Access_Denied_Y_N);
   {
    //?Execute internal function

    //?RMC 5/11/09 Rtv default company from user profile --
    //?  Override user code model company if it exists
    EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
    PARAMETER(PAR.User_Profile_Name);
    PARAMETER(PAR.Allow_Multi_Company);
    PARAMETER(PAR.Default_Printer);
    PARAMETER(PAR.Salesperson_Code);
    PARAMETER(LCL.Company_Number);
    PARAMETER(PAR.User_Code_Model);
    {
     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?User Profile Record Not found
    CASE;

    // IF PGM.*Return code is *Record does not exist
    IF PGM.*Return_code = 'Y2U0005';

    // PAR.Access Denied (Y/N) = CND.yes
    PAR.Access_Denied_Y_N = 'Y';

    //?User Profile Record Not found
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Access Denied (Y/N) = CND.no
    PAR.Access_Denied_Y_N = 'N';

    ENDIF;

    CASE;

    // IF PAR.User Code Model is equal to blank
    IF PAR.User_Code_Model = *BLANK;

    EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
    PARAMETER(PAR.User_Profile_Name);
    PARAMETER(PAR.Application_Code);
    PARAMETER(PAR.Company_Number);
    PARAMETER(LCL.Warehouse_Code);
    {
     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
    PARAMETER(PAR.User_Code_Model);
    PARAMETER(PAR.Application_Code);
    PARAMETER(PAR.Company_Number);
    PARAMETER(LCL.Warehouse_Code);
    {
     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    ENDIF;

    // PAR.Warehouse Code = LCL.Warehouse Code
    PAR.Warehouse_Code = LCL.Warehouse_Code;

    //?Return code when not normal for Application Profile
    CASE;

    // IF PGM.*Return code is *Normal
    IF PGM.*Return_code = *BLANK;

    // PAR.Access Denied (Y/N) = CND.no
    PAR.Access_Denied_Y_N = 'N';

    //?Return code when not normal for Application Profile
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Access Denied (Y/N) = CND.yes
    PAR.Access_Denied_Y_N = 'Y';

    ENDIF;

    CASE;

    // IF LCL.Company Number is greater than zero
    IF LCL.Company_Number > *ZERO;

    // PAR.Company Number = LCL.Company Number
    PAR.Company_Number = LCL.Company_Number;

    CASE;

    // IF LCL.Warehouse Code is Not Blanks
    IF LCL.Warehouse_Code <> *BLANK;

    EXECUTE FUNCTION(RTV Prod Whse for Co  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1757887;
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(LCL.Shipping_Company);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     CASE;

     // IF DB1.Record Status is Active
     IF DB1.Record_Status = 'A';

     CASE;

     // IF DB1.Production Warehouse Code is Warehouse Code not Blank
     IF DB1.Production_Warehouse_Code <> *BLANK;

     // PAR.Warehouse Code = DB1.Production Warehouse Code
     PAR.Warehouse_Code = DB1.Production_Warehouse_Code;

     QUIT;

     ENDIF;

     ENDIF;

    }

    ENDIF;

    ENDIF;

   }

   // PAR.Company Number = WRK.Company Number
   PAR.Company_Number = WRK.Company_Number;

   // PAR.Access Denied (Y/N) = WRK.Access Denied (Y/N)
   PAR.Access_Denied_Y_N = WRK.Access_Denied_Y_N;

   //?If access denied is no, rtv co. name
   CASE;

   // IF WRK.Access Denied (Y/N) is no
   IF WRK.Access_Denied_Y_N = 'N';

   EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
   PARAMETER(WRK.Company_Number);
   PARAMETER(PAR.Name);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  CASE;

  // IF PAR.Access Denied (Y/N) is yes
  IF PAR.Access_Denied_Y_N = 'Y';

  // Send information message - 'User not allowed to  Lock/Unlock Loads.'
  MESSAGE(USR2543 *INFO);

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(VAL no Stop Entered    RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1295710;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.USR_Orders_on_Load);
  {
   //?USER: Initialize routine

   // PAR.Status - Y or N = CND.no
   PAR.Status_Y_or_N = 'N';

   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   CASE;

   // IF DB1.Stop/Drop is EQ Zero
   IF DB1.Stop_Drop = *ZERO;

   // PAR.Status - Y or N = CND.yes
   PAR.Status_Y_or_N = 'Y';

   QUIT;

   ENDIF;

  }

  //?Validate lock request
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Send information message - 'No orders assigned to load &1; Can't lock'
  MESSAGE(USR2544 *INFO);
  MSGPARM(PAR.Load_ID);
  MSGPARM(PAR.*SFLSEL);

  //?Validate lock request
  // IF PAR.Block Order Flag is Block Order
  IF PAR.Block_Order_Flag = 'B';

  // Send information message - 'Load &2 contains Block Orders--no update allowed.'
  MESSAGE(USR2545 *INFO);
  MSGPARM(PAR.*SFLSEL);
  MSGPARM(PAR.Load_ID);

  //?Validate lock request
  // IF PAR.Load Status is Locked thru Invoiced
  IF PAR.Load_Status = 'I'/'L'/'S';

  // Send information message - 'Load &2 cannot be locked due to load status'
  MESSAGE(USR2546 *INFO);
  MSGPARM(PAR.*SFLSEL);
  MSGPARM(PAR.Load_ID);

  //?Validate lock request
  // IF PAR.Carrier Code EQ WRK.BLANK
  IF PAR.Carrier_Code = WRK.BLANK;

  // AND PAR.STATUS is No
  AND PAR.STATUS = 'N';

  // Send information message - 'Carrier must be entered for load &2'
  MESSAGE(USR2547 *INFO);
  MSGPARM(PAR.Carrier_Code);
  MSGPARM(PAR.Load_ID);

  //?Validate lock request
  // IF PAR.Truck Size EQ WRK.BLANK
  IF PAR.Truck_Size = WRK.BLANK;

  // Send information message - 'Truck size must be entered for load &2'
  MESSAGE(USR2548 *INFO);
  MSGPARM(PAR.Truck_Size);
  MSGPARM(PAR.Load_ID);

  //?Validate lock request
  // IF PAR.Shipping Method EQ WRK.BLANK
  IF PAR.Shipping_Method = WRK.BLANK;

  // Send information message - 'Shipping Method required to lock load.'
  MESSAGE(USR2549 *INFO);
  MSGPARM(PAR.Shipping_Method);

  //?Validate lock request
  // IF PAR.USR Orders on Load is yes
  IF PAR.USR_Orders_on_Load = 'Y';

  // Send information message - 'Function not allowed; Load &1 has orders tied to it which are not a
  MESSAGE(USR2550 *INFO);
  MSGPARM(PAR.Load_ID);

  //?Validate lock request
  // IF PAR.Load Acceptance Flag is Load not Accepted
  IF PAR.Load_Acceptance_Flag = 'U';

  // Send information message - 'Load cannot be locked, it is unaccepted.'
  MESSAGE(USR2551 *INFO);
  MSGPARM(PAR.Load_ID);

  //?Validate lock request
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Hold, Use-by load  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1304327;
  PARAMETER(PAR.Order_in_Use);
  PARAMETER(PAR.Header_Status);
  PARAMETER(PAR.Load_ID);
  {
   //?USER: Initialize routine

   //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   //?If find 1 order on load which is held/cancelled, set par flag and exit
   CASE;

   // IF DB1.Header Status is Hold
   IF DB1.Header_Status = 'H';

   // PAR.Header Status = DB1.Header Status
   PAR.Header_Status = DB1.Header_Status;

   QUIT;

   //?If find 1 order on load which is held/cancelled, set par flag and exit
   // IF DB1.Header Status is Cancelled
   IF DB1.Header_Status = 'X';

   // PAR.Header Status = DB1.Header Status
   PAR.Header_Status = DB1.Header_Status;

   QUIT;

   //?If find 1 order on load which is held/cancelled, set par flag and exit
   // IF DB1.Order in Use is yes
   IF DB1.Order_in_Use = 'Y';

   // PAR.Order in Use = DB1.Order in Use
   PAR.Order_in_Use = DB1.Order_in_Use;

   QUIT;

   ENDIF;

  }

  //?Error if held/cancelled/in use order(s) on load
  CASE;

  // IF PAR.Header Status is Hold
  IF PAR.Header_Status = 'H';

  // Send information message - 'Load &1 contains orders on Hold.  Load cannot be Locked.'
  MESSAGE(USR2552 *INFO);
  MSGPARM(PAR.Load_ID);
  MSGPARM(PAR.*SFLSEL);

  //?Error if held/cancelled/in use order(s) on load
  // IF PAR.Header Status is Cancelled
  IF PAR.Header_Status = 'X';

  // Send information message - 'Load &1 contains cancelled order(s).  Load cannot be Locked.'
  MESSAGE(USR2553 *INFO);
  MSGPARM(PAR.Load_ID);
  MSGPARM(PAR.*SFLSEL);

  //?Error if held/cancelled/in use order(s) on load
  // IF PAR.Order in Use is yes
  IF PAR.Order_in_Use = 'Y';

  // Send information message - 'Load &2 has order(s) in use; Load cannot be locked.'
  MESSAGE(USR2554 *INFO);
  MSGPARM(PAR.*SFLSEL);
  MSGPARM(PAR.Load_ID);

  //?Error if held/cancelled/in use order(s) on load
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Ord Requires Revw RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2027682;
  PARAMETER(PAR.Load_ID);
  PARAMETER(LCL.Order_Requires_Review);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?** Check for errors in Export Order Automation Upload   P001251
  CASE;

  // IF LCL.Order Requires Review is Yes
  IF LCL.Order_Requires_Review = 'Y';

  //?** Cannot lock load if errors in Order Detail         P001251
  // Send error message - 'Order has detail lines that require review'
  ERROR(USR4464);
  MSGPARM(PAR.*SFLSEL);
  MSGPARM(PAR.Load_ID);

  //?** Check for errors in Export Order Automation Upload   P001251
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Min & Max Pounds  RT) TYPE(RTVOBJ) FILE(OMFKREP)           AC1197715;
  PARAMETER(PAR.Truck_Size);
  PARAMETER(PAR.Maximum_pounds);
  PARAMETER(PAR.Minimum_pounds);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Do not want to lock the load if the Load Weight is not
  //?within range.  -Purva 5/5/99 C0007042
  //?Check minimum and maximum pounds
  CASE;

  // IF PAR.Total Weight LT PAR.Minimum pounds
  IF PAR.Total_Load_Order_Weight < PAR.Minimum_pounds;

  // Send information message - 'Load weight is less than the minimum weight allowed for load &1.'
  MESSAGE(USR1262 *INFO);
  MSGPARM(PAR.Load_ID);

  // PAR.Error Status = CND.no
  PAR.Error_Status = 'N';

  //?Check minimum and maximum pounds
  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PAR.Total Weight GT PAR.Maximum pounds
  IF PAR.Total_Load_Order_Weight > PAR.Maximum_pounds;

  // Send information message - 'Load weight is greater than maximum allowed for truck size.'
  MESSAGE(USR2231 *INFO);

  // PAR.Error Status = CND.no
  PAR.Error_Status = 'N';

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Check Sched ship date if not called from a LOCK option  FP1054 7/24/09
  CASE;

  // IF PAR.Lock option override sts is No
  IF PAR.Lock_option_override_sts = 'N';

  // AND PAR.Scheduled Ship Date GT JOB.*Job date
  AND PAR.Scheduled_Ship_Date > JOB.*Job_date;

  // PAR.Error Status = CND.yes
  PAR.Error_Status = 'Y';

  //?Check Sched ship date if not called from a LOCK option  FP1054 7/24/09
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Send information message - 'Locking load pending'
  MESSAGE(USR1273 *INFO);

  // PAR.Error Status = CND.no
  PAR.Error_Status = 'N';

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  //?***** Change Log and Comments
  DO;

  //?*****
  //?** 09/20/2011 LJB P001251  Export Order Automation Upload
  //?** Cannot lock load if there are errors still pending in the
  //?** Order Detail record
  //?*****
  //?** Auto lock if shipping today & no errors            E00495
  ENDDO;

 }

}


CASE;

// IF WRK.Error Status is no
IF WRK.Error_Status = 'N';

EXECUTE FUNCTION(UPD Lock Load Update   IF) TYPE(EXCINTFUN)                     AC1451094;
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Company_Number);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV Load Header All,Mg RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC2124794;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(PAR.Flat_Amount);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(PAR.Total_Stops);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(PAR.Total_Load_Miles);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(PAR.Carrier_Broker);
 PARAMETER(PAR.Export_Status);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 PARAMETER(PAR.MG_Created_Load);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?.** Use carr appt dt/tm, if entered, for DDD/T calcs   E00495
 //?Fill in ship from whse deadline depart, if locking load and none entered
 CASE;

 // IF PAR.Ship From Warehouse EQ WRK.BLANK
 IF PAR.Ship_From_Warehouse = WRK.BLANK;

 EXECUTE FUNCTION(Rtv/Chg Whs,ld miles  RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1471360;
 PARAMETER(PAR.Load_ID);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(RTV First Order Whse   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1397882;
  PARAMETER(DB1.Load_ID);
  PARAMETER(1);
  PARAMETER(PAR.Ship_From_Warehouse);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(WRK.TXT_field_not_needed);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   QUIT;

  }

  CASE;

  // IF DB1.Warehouse Code EQ PAR.Ship From Warehouse
  IF DB1.Warehouse_Code = PAR.Ship_From_Warehouse;

  // PAR.Warehouse Code = CON.*BLANK
  PAR.Warehouse_Code = *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Warehouse Code = DB1.Warehouse Code
  PAR.Warehouse_Code = DB1.Warehouse_Code;

  ENDIF;

  //?** 11/16/2007 LJB FP1251 Total Load Miles will = zeros if no
  //?** Miles Between Cities record exists
  //?** Override total load miles will take precedence over tlm  E00207
  //?E4119 RMC 7/15/16  Upd miles if NOT MG LOAD
  CASE;

  // IF DB1.MG Created Load is Yes
  IF DB1.MG_Created_Load = 'Y';

  // PAR.Total Load Miles = DB1.Total Load Miles
  PAR.Total_Load_Miles = DB1.Total_Load_Miles;

  // PAR.Override Total Load Miles = DB1.Override Total Load Miles
  PAR.Override_Total_Load_Miles = DB1.Override_Total_Load_Miles;

  //?E4119 RMC 7/15/16  Upd miles if NOT MG LOAD
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Call program CLC Total Load Miles   XF.
  CALL PROGRAM(CLC Total Load Miles   XF) ('PDW3XFR');
  PARAMETER(DB1.Load_ID);
  PARAMETER(PAR.Total_Load_Miles);
  PARAMETER(PAR.Override_Total_Load_Miles);

  ENDIF;

  //?** Add override miles to the update            E00207 LJB 08/13/08
  EXECUTE FUNCTION(CHG Ship FrmWhs,ld mls CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1471384;
  PARAMETER(DB1.Load_ID);
  PARAMETER(PAR.Total_Load_Miles);
  PARAMETER(PAR.Ship_From_Warehouse);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Override_Total_Load_Miles);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 CASE;

 // IF PAR.MG Created Load is Not MG Created Load
 IF PAR.MG_Created_Load = *BLANK;

 //?** RTV carrier appt date/time                         E00495
 EXECUTE FUNCTION(RTV 1st Carr Apt Dt/Tm RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1954073;
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(WRK.LD_Carrier_Appt_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PAR.LD Carrier Appt Date = DB1.LD Carrier Appt Date
  PAR.LD_Carrier_Appt_Date = DB1.LD_Carrier_Appt_Date;

  // PAR.LD Carrier Appt Time = DB1.LD Carrier Appt Time
  PAR.LD_Carrier_Appt_Time = DB1.LD_Carrier_Appt_Time;

  QUIT;

 }

 //?** Use carr appt dt/tm, if entered, for DDD/T calcs   E00495
 CASE;

 // IF WRK.LD Carrier Appt Date is Entered
 IF WRK.LD_Carrier_Appt_Date > 0;

 // PAR.Deadline Departure Date = WRK.LD Carrier Appt Date
 PAR.Deadline_Departure_Date = WRK.LD_Carrier_Appt_Date;

 //?** Use carr appt dt/tm, if entered, for DDD/T calcs   E00495
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv 1st Ord Delv Dt/Tm RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1456727;
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Requested_Delivery_Time);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Delivery Date/Time RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1445871;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Ship_To_Name);
  PARAMETER(WRK.Ship_To_City);
  PARAMETER(NLL.Ship_To_State_Code);
  PARAMETER(PAR.Requested_Delivery_Date);
  PARAMETER(PAR.Requested_Delivery_Time);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  QUIT;

 }

 // PAR.Deadline Departure Time = PAR.Requested Delivery Time * CON.100 *
 PAR.Deadline_Departure_Time = PAR.Requested_Delivery_Time * 100;

 ENDIF;

 EXECUTE FUNCTION(CLC Departure Date/TimeIF) TYPE(EXCINTFUN)                     AC1456426;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 {
  //?Execute internal function

  //?***** Change Log and Comments
  DO;

  //?** The Date and Time being calculated are the latest date and time
  //?** that the truck can leave the warehouse and still make the
  //?** delivery on time.
  //?*****
  //?** E00495 LJB 09.23.2009
  //?** Carrier Appt Date and Time are in the parm Deadline Departure
  //?** date and time, if called from "UPD Ld Mi,Whse,DDD/T IF"
  //?*****
  //?** E00207 LJB 08/11/2008
  //?** Override Total Load Miles has been added to the
  //?** Retrieve Total Load Miles function
  //?*****
  //?** FP1251 LJB 12/26/2007
  //?** If no Miles To Next record, change SSD/T to zeros.
  //?** Scheduled Deliv Date has (should have) Requested Delivery Date in it
  ENDDO;

  EXECUTE FUNCTION(RTV Shipping Method    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1572676;
  PARAMETER(PAR.Load_ID);
  PARAMETER(LCL.Shipping_Method);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Shipping Method is Collect Truck
  IF LCL.Shipping_Method = 'CT';

  // OR LCL.Shipping Method is Collect Rail
  OR LCL.Shipping_Method = 'CR';

  //?** Treat CT & CR the same           FP1251 LJB 12/26/2007
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV 1st Stop Mileage   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1456048;
  PARAMETER(PAR.Load_ID);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Miles_to_next_stop);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?** Calc miles between all stops then retrieve 1st stop miles
  CASE;

  // IF PAR.Miles to next stop is Not Entered
  IF PAR.Miles_to_next_stop = *ZERO;

  //?** Override miles will be returned, if entered
  // Call program CLC Total Load Miles   XF.
  CALL PROGRAM(CLC Total Load Miles   XF) ('PDW3XFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(WRK.Total_Load_Miles);
  PARAMETER(WRK.Override_Total_Load_Miles);

  EXECUTE FUNCTION(RTV 1st Stop Mileage   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1456048;
  PARAMETER(PAR.Load_ID);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Miles_to_next_stop);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  ENDIF;

  //?** 11/16/2007 LJB FP1251 Error if no miles, set SDD/SDT to zeros
  CASE;

  // IF PAR.Miles to next stop is Not Entered
  IF PAR.Miles_to_next_stop = *ZERO;

  // PAR.Scheduled Delivery Date = CND.not entered
  PAR.Scheduled_Delivery_Date = *ZERO;

  // PAR.Scheduled Delivery Time = CND.Not Entered
  PAR.Scheduled_Delivery_Time = *ZERO;

  //?** 11/16/2007 LJB FP1251 Error if no miles, set SDD/SDT to zeros
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Hours Required = CON.*ZERO
  PAR.Hours_Required = *ZERO;

  // LCL.Hours Required = CON.*ZERO
  LCL.Hours_Required = *ZERO;

  EXECUTE FUNCTION(RTV Legal Run Miles DscRT) TYPE(RTVOBJ) FILE(PDLGCPP)          AC1456042;
  PARAMETER(PAR.Miles_to_next_stop);
  PARAMETER(LCL.Hours_Required);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?09/09/11 PKD E1659 Additional Route Hours
  // Call program Rtv Addtnl Route Hrs  XF.
  CALL PROGRAM(Rtv Addtnl Route Hrs  XF) ('PMACXFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(LCL.Additional_Route_Hours);

  // PAR.Hours Required = LCL.Hours Required + LCL.Additional Route Hours
  PAR.Hours_Required = LCL.Hours_Required + LCL.Additional_Route_Hours;

  //?get number of whole days + remaining hours
  CASE;

  // IF PAR.Hours Required is Zero
  IF PAR.Hours_Required = *ZERO;

  //?get number of whole days + remaining hours
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.@Days 5 = PAR.Hours Required / CON.24 *
  PAR.@Days_5 = PAR.Hours_Required / 24;

  // WRK.USR Hours 5.0 = PAR.@Days 5 * CON.24 *
  WRK.USR_Hours_5_0 = PAR.@Days_5 * 24;

  // PAR.USR Hours 5.0 = PAR.Hours Required - WRK.USR Hours 5.0
  PAR.USR_Hours_5_0 = PAR.Hours_Required - WRK.USR_Hours_5_0;

  // WRK.@Numeric 6,0 = PAR.USR Hours 5.0 * CON.10000 *
  WRK.@Numeric_60 = PAR.USR_Hours_5_0 * 10000;

  //?Subtract whole days
  CASE;

  // IF PAR.@Days 5 is greater than zero
  IF PAR.@Days_5 > *ZERO;

  // PAR.@Days 5 = PAR.@Days 5 * CON.-1 *
  PAR.@Days_5 = PAR.@Days_5 * -1;

  // PAR.Scheduled Delivery Date = PAR.Scheduled Delivery Date + PAR.@Days 5 *DAYS
  PAR.Scheduled_Delivery_Date = DATEINCR(PAR.Scheduled_Delivery_Date PAR.@Days_5 'DY'
  1111111 'NONE' 'N' 1);

  ENDIF;

  //?Calculate # whole days + hours left
  CASE;

  // IF WRK.@Numeric 6,0 GE PAR.Scheduled Delivery Time
  IF WRK.@Numeric_60 >= PAR.Scheduled_Delivery_Time;

  // WRK.@Numeric 6,0 = WRK.@Numeric 6,0 - PAR.Scheduled Delivery Time
  WRK.@Numeric_60 = WRK.@Numeric_60 - PAR.Scheduled_Delivery_Time;

  // PAR.@Days 5 = CON.-1
  PAR.@Days_5 = -1;

  // PAR.Scheduled Delivery Date = PAR.Scheduled Delivery Date + PAR.@Days 5 *DAYS
  PAR.Scheduled_Delivery_Date = DATEINCR(PAR.Scheduled_Delivery_Date PAR.@Days_5 'DY'
  1111111 'NONE' 'N' 1);

  // PAR.Scheduled Delivery Time = CON.240000 - WRK.@Numeric 6,0
  PAR.Scheduled_Delivery_Time = 240000 - WRK.@Numeric_60;

  //?Calculate # whole days + hours left
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Scheduled Delivery Time = PAR.Scheduled Delivery Time - WRK.@Numeric 6,0
  PAR.Scheduled_Delivery_Time = PAR.Scheduled_Delivery_Time - WRK.@Numeric_60;

  ENDIF;

  ENDIF;

  ENDIF;

  EXECUTE FUNCTION(RTV Total Ld Mi/Sts    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1496186;
  PARAMETER(PAR.Load_ID);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Total_Load_Miles);
  PARAMETER(WRK.Override_Total_Load_Miles);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

 }

 ENDIF;

 ENDIF;

 //?---------------------------------------------------------------
 EXECUTE FUNCTION(RTV Last Stop Consign  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1377331;
 PARAMETER(PAR.Load_ID);
 PARAMETER(WRK.Ship_To_Customer);
 PARAMETER(WRK.Ship_To_Name);
 PARAMETER(WRK.Ship_To_Address_Line_1);
 PARAMETER(WRK.Ship_To_Address_Line_2);
 PARAMETER(WRK.Ship_To_Address_Line_3);
 PARAMETER(WRK.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(WRK.Ship_To_Zip_Postal_Code);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(RTV for B.O.L. Print   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1377319;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Ship_To_Name);
  PARAMETER(PAR.Ship_To_Address_Line_1);
  PARAMETER(PAR.Ship_To_Address_Line_2);
  PARAMETER(PAR.Ship_To_Address_Line_3);
  PARAMETER(PAR.Ship_To_City);
  PARAMETER(PAR.Ship_To_State_Code);
  PARAMETER(PAR.Ship_To_Zip_Postal_Code);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  QUIT;

 }

 //?---------------------------------------------------------------
 //?OMS132:  Fill in Flat Amount as required
 CASE;

 // IF PAR.Total Stops is One Stop
 IF PAR.Total_Stops = 1;

 // AND PAR.Flat Amount EQ WRK.ZERO
 AND PAR.Flat_Amount = WRK.ZERO;

 //?get flat amount for destination city
 EXECUTE FUNCTION(RTV Ship To City/St-Ld RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1454218;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Destination_City);
 PARAMETER(PAR.State_Code);
 {
  //?USER: Initialize routine

  //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 // Execute function CVT Str to Upper Alpha US.
 EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
 PARAMETER(PAR.Destination_City);
 PARAMETER(WRK.Destination_City);
 {
  PDWEUFR:  PGM PARM(&STRIN &STROUT)

  CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
 }

 // PAR.Destination City = WRK.Destination City
 PAR.Destination_City = WRK.Destination_City;

 EXECUTE FUNCTION(RTV Destination Amount RT) TYPE(RTVOBJ) FILE(PDLECPP)          AC1454806;
 PARAMETER(PAR.Carrier_Broker);
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(PAR.Destination_City);
 PARAMETER(PAR.State_Code);
 PARAMETER(PAR.Flat_Amount);
 {
  //?USER: Process Data record

  //?only pass out FLAT amt.  (it could now be a ML rate too)  01/03/07
  CASE;

  // IF DB1.CDR Unit of Measure is Flat
  IF DB1.CDR_Unit_of_Measure = 'FL';

  MOVE *ALL (To: PAR From: DB1);

  ENDIF;

 }

 ENDIF;

 //?Calc Load U/M           -- RMC 6/16/06
 DO;

 //?** All boxes=BX, All combos=CB, Any mix of the two=MX   E00239 11/12/08
 // Call program RTV UM/Whs Code,BX Qty XF.
 CALL PROGRAM(RTV UM/Whs Code,BX Qty XF) ('PPYXXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Load_U_M);

 ENDDO;

 EXECUTE FUNCTION(CHG Lock Load Update   CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1454811;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER('L');
 PARAMETER(PAR.Flat_Amount);
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 PARAMETER(PAR.Load_U_M);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

  // DB1.Job Name = JOB.*JOB
  DB1.Job_Name = JOB.*JOB;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

 }

 //?OMS261:  if sched to ship today, print prelim pick at all whses
 //?Sched to ship today
 CASE;

 // IF PAR.Scheduled Ship Date EQ JOB.*Job date
 IF PAR.Scheduled_Ship_Date = JOB.*Job_date;

 EXECUTE FUNCTION(RTV All Whses on Load  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1483728;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.USR_Warehouse_Code);
 PARAMETER(PAR.USR_CDE_Parm_1);
 PARAMETER(PAR.USR_CDE_Parm_2);
 PARAMETER(PAR.USR_CDE_Parm_3);
 PARAMETER(PAR.USR_CDE_Parm_4);
 PARAMETER(PAR.USR_CDE_Parm_5);
 PARAMETER(PAR.USR_CDE_Parm_6);
 PARAMETER(PAR.USR_CDE_Parm_7);
 PARAMETER(PAR.USR_CDE_Parm_8);
 PARAMETER(PAR.USR_CDE_Parm_9);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV All Whses on Order RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1483729;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.USR_Warehouse_Code);
  PARAMETER(PAR.USR_CDE_Parm_1);
  PARAMETER(PAR.USR_CDE_Parm_2);
  PARAMETER(PAR.USR_CDE_Parm_3);
  PARAMETER(PAR.USR_CDE_Parm_4);
  PARAMETER(PAR.USR_CDE_Parm_5);
  PARAMETER(PAR.USR_CDE_Parm_6);
  PARAMETER(PAR.USR_CDE_Parm_7);
  PARAMETER(PAR.USR_CDE_Parm_8);
  PARAMETER(PAR.USR_CDE_Parm_9);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Warehouse Code EQ PAR.USR Warehouse Code
   IF DB1.Warehouse_Code = PAR.USR_Warehouse_Code;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 1
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_1;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 2
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_2;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 3
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_3;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 4
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_4;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 5
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_5;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 6
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_6;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 7
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_7;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 8
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_8;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 9
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_9;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?current warehouse not already being used
   //?Fill in first blank warehouse
   CASE;

   // IF PAR.USR Warehouse Code EQ WRK.BLANK
   IF PAR.USR_Warehouse_Code = WRK.BLANK;

   // PAR.USR Warehouse Code = DB1.Warehouse Code
   PAR.USR_Warehouse_Code = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 1 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_1 = WRK.BLANK;

   // PAR.USR CDE Parm 1 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_1 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 2 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_2 = WRK.BLANK;

   // PAR.USR CDE Parm 2 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_2 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 3 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_3 = WRK.BLANK;

   // PAR.USR CDE Parm 3 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_3 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 4 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_4 = WRK.BLANK;

   // PAR.USR CDE Parm 4 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_4 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 5 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_5 = WRK.BLANK;

   // PAR.USR CDE Parm 5 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_5 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 6 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_6 = WRK.BLANK;

   // PAR.USR CDE Parm 6 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_6 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 7 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_7 = WRK.BLANK;

   // PAR.USR CDE Parm 7 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_7 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 8 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_8 = WRK.BLANK;

   // PAR.USR CDE Parm 8 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_8 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 9 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_9 = WRK.BLANK;

   // PAR.USR CDE Parm 9 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_9 = DB1.Warehouse_Code;

   ENDIF;

   ENDIF;

  }

 }

 // PAR.Company Number Pass   USR = PAR.Company Number
 PAR.Company_Number_Pass_USR = PAR.Company_Number;

 // PAR.Order Number 1  PASS  USR = PAR.Load ID
 PAR.Order_Number_1_PASS_USR = PAR.Load_ID;

 // PAR.Date 1          PASS  USR = PAR.Scheduled Ship Date
 PAR.Date_1_PASS_USR = PAR.Scheduled_Ship_Date;

 // WRK.USR Select/Omit Flag = CND.Select
 WRK.USR_Select_Omit_Flag = 'S';

 // WRK.USR Detail or Summary = CND.Detail
 WRK.USR_Detail_or_Summary = 'D';

 // WRK.AUTO PRINT PRELIM PICK = CND.AUTO PRINT YES
 WRK.AUTO_PRINT_PRELIM_PICK = 'Y';

 //?letting all the other parms default in the CL
 //?If warehouse exists for load then print.
 CASE;

 // IF PAR.USR Warehouse Code is Warehouse Code not Blank
 IF PAR.USR_Warehouse_Code <> *BLANK;

 // Call program Pass Pre Pick @LoadLockUP.
 CALL PROGRAM(Pass Pre Pick @LoadLockUP) ('PDBDUPC');
 PARAMETER(PAR.Return_Code_Usr);
 PARAMETER('OMS');
 PARAMETER('PDIZPCLP');
 PARAMETER(WRK.USR_Detail_or_Summary);
 PARAMETER('Auto Print Prelim. Pick');
 PARAMETER(WRK.PRT_Printer_Device);
 PARAMETER(WRK.PRT_Hold_Output_Sts);
 PARAMETER(WRK.PRT_Save_Output_Sts);
 PARAMETER(WRK.PRT_Night_Queue_Run_Sts);
 PARAMETER(WRK.PRT_Night_Queue);
 PARAMETER(PAR.Company_Number_Pass_USR);
 PARAMETER(PAR.Date_1_PASS_USR);
 PARAMETER(PAR.Order_Number_1_PASS_USR);
 PARAMETER(WRK.System_Value_Numeric);
 PARAMETER(PAR.USR_Warehouse_Code);
 PARAMETER(PAR.USR_CDE_Parm_1);
 PARAMETER(PAR.USR_CDE_Parm_2);
 PARAMETER(PAR.USR_CDE_Parm_3);
 PARAMETER(PAR.USR_CDE_Parm_4);
 PARAMETER(PAR.USR_CDE_Parm_5);
 PARAMETER(PAR.USR_CDE_Parm_6);
 PARAMETER(PAR.USR_CDE_Parm_7);
 PARAMETER(PAR.USR_CDE_Parm_8);
 PARAMETER(PAR.USR_CDE_Parm_9);
 PARAMETER(WRK.USR_Select_Omit_Flag);
 PARAMETER(WRK.AUTO_PRINT_PRELIM_PICK);

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(EDT Lock Load          IF) TYPE(EXCINTFUN)                     AC1419469;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 {
  //?Execute internal function

  //?*** Return Plant Code from first Order Header
  EXECUTE FUNCTION(zzV for Accusort Load  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1322485;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1305919;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428569;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(WRK.Trans_Contol_AS400_Plant);
    {
     //?USER: Process Data record

     CASE;

     // IF DB1.Detail Line Status is Not cancelled
     IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

     EXECUTE FUNCTION(Rtv Desc/Trans Control RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304130;
     PARAMETER(DB1.Warehouse_Code);
     PARAMETER(WRK.Warehouse_Description);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     QUIT;

     ENDIF;

    }

    CASE;

    // IF WRK.Trans Contol AS400/Plant is Plant
    IF WRK.Trans_Contol_AS400_Plant = 'P';

    // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
    PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

    QUIT;

    ENDIF;

   }

   CASE;

   // IF WRK.Trans Contol AS400/Plant is Plant
   IF WRK.Trans_Contol_AS400_Plant = 'P';

   // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
   PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

   QUIT;

   ENDIF;

  }

  EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
  PARAMETER(PAR.Company_Number);
  PARAMETER('LDORDD');
  PARAMETER(LCL.PFS_AccuSort_Active);
  PARAMETER(LCL.PFS_Carlisle_Active);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?UPD:  AccuSort
  CASE;

  // IF LCL.PFS AccuSort Active is Yes
  IF LCL.PFS_AccuSort_Active = 'Y';

  //?AccuSort:  Create Order Header and Order Detail
  CASE;

  // IF PAR.Trans Contol AS400/Plant is Plant
  IF PAR.Trans_Contol_AS400_Plant = 'P';

  // Call program Zzz Lock/Unlock Box ID XF.
  CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
  PARAMETER('L');

  // Call program Zzz AS Order Hdr/Dtl   XF.
  CALL PROGRAM(Zzz AS Order Hdr/Dtl   XF) ('PDQPXFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Company_Number);

  // Call program Zzz Lock/Unlock Box ID XF.
  CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
  PARAMETER('U');

  ENDIF;

  ENDIF;

  //?UPD:  Carlisle
  CASE;

  // IF LCL.PFS Carlisle Active is Yes
  IF LCL.PFS_Carlisle_Active = 'Y';

  // Call program PFS Lock Load/Order   XF.
  CALL PROGRAM(PFS Lock Load/Order   XF) ('PPNLXFR');
  PARAMETER(PAR.Load_ID);

  ENDIF;

  //?** 07/28/2017 RMC R131331 if load had a whs with edi wso interchange, then
  // Call program Exc Create EDI f/Lock XF.
  CALL PROGRAM(Exc Create EDI f/Lock XF) ('PUDNXFR');
  PARAMETER(PAR.Load_ID);

 }

 CASE;

 // IF JOB.*PROGRAM is PRT Audit Report
 IF JOB.*PROGRAM = 'PDSNPFR';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Clr Program Message Q  US.
 EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
 {
  * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
  C                     CALL 'Y2CLMSC'
  C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
  C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
  * RESET FIRST MESSAGE ONLY FLAG.
  C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
 }

 //?Sched to ship today
 CASE;

 // IF PAR.Scheduled Ship Date EQ JOB.*Job date
 IF PAR.Scheduled_Ship_Date = JOB.*Job_date;

 CASE;

 // IF PAR.USR Warehouse Code is Warehouse Code not Blank
 IF PAR.USR_Warehouse_Code <> *BLANK;

 // Call program RTV Warehouse Dflt PrtrXF.
 CALL PROGRAM(RTV Warehouse Dflt PrtrXF) ('PDCHXFR');
 PARAMETER(PAR.USR_Warehouse_Code);
 PARAMETER(NLL.Default_Printer);
 PARAMETER(LCL.Include_in_Auto_Pre_Pick);

 //?RMC DLY029 10/30/07 - sndmsg only if Warehouse is set up for auto-print
 CASE;

 // IF LCL.Include in Auto Pre Pick is Incl in Auto Prelim Pick
 IF LCL.Include_in_Auto_Pre_Pick = 'Y';

 // Send information message - 'Preliminary Pick Printing at printer for warehouses: &1 &2 &3 &4 &5
 MESSAGE(USR2565 *INFO);
 MSGPARM(PAR.USR_Warehouse_Code);
 MSGPARM(PAR.USR_CDE_Parm_1);
 MSGPARM(PAR.USR_CDE_Parm_2);
 MSGPARM(PAR.USR_CDE_Parm_3);
 MSGPARM(PAR.USR_CDE_Parm_4);
 MSGPARM(PAR.USR_CDE_Parm_5);
 MSGPARM(PAR.USR_CDE_Parm_6);
 MSGPARM(PAR.USR_CDE_Parm_7);
 MSGPARM(PAR.USR_CDE_Parm_8);
 MSGPARM(PAR.USR_CDE_Parm_9);

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send information message - 'Preliminary Pick not printed, no order details.'
 MESSAGE(USR2715 *INFO);

 ENDIF;

 ENDIF;

 ENDIF;

 //?***** Change Log and comments
 DO;

 //?** 07/15/16  RMC E4119 Dont recalc deadl depart,miles if MG Created Load
 //?** 09/30/2009 LJB E00495
 //?**   Use carrier date/time, if entered, to calc DDD/T
 //?** 11/16/2007 LJB FP1251 Deadline Depart Date and Time will be
 //?** zeros if there is no Miles Between Cities record
 ENDDO;

}


// WRK.Load Change Type = CND.Lock Load
WRK.Load_Change_Type = 'LOCK';

// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(DTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(DTL.Load_Status);
PARAMETER('L');
PARAMETER(JOB.*USER);
PARAMETER(JOB.*JOB);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Company_Number);
PARAMETER(PAR.Order_Number);

// DTL.Load Status = CND.Lock
DTL.Load_Status = 'L';

// PAR.Load Status = DTL.Load Status
PAR.Load_Status = DTL.Load_Status;

// Send information message - 'Load &1 has been locked.'
MESSAGE(USR2559 *INFO);
MSGPARM(DTL.Load_ID);

//?Set this so it doesnt do it again below
// LCL.Status Flag 20 Y/N = CND.Yes
LCL.Status_Flag_20_Y_N = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?** Lock or Chg Carrier, Trailer -- Carlisle processing
CASE;

// IF PAR.Carrier Code NE DTL.Carrier Code
IF ( ( PAR.Carrier_Code <> DTL.Carrier_Code;

// OR PAR.Trailer Id NE DTL.Trailer Id
OR PAR.Trailer_Id <> DTL.Trailer_Id;

// OR PAR.Shipping Method NE DTL.Shipping Method
OR PAR.Shipping_Method <> DTL.Shipping_Method );

// AND DTL.Load Status is Lock
AND DTL.Load_Status = 'L' );

EXECUTE FUNCTION(RTV Any Order Picked   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1397837;
PARAMETER(DTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(LCL.USR_Status_Y_N);
{
 //?USER: Initialize routine

 // PAR.USR Status (Y/N) = CND.no
 PAR.USR_Status_Y_N = 'N';

 //?USER: Process Data record

 //?Assume no orders picked, unless find one that is
 EXECUTE FUNCTION(RTV Check Pick Event   RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1198676;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('03');
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  QUIT;

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // PAR.USR Status (Y/N) = CND.yes
 PAR.USR_Status_Y_N = 'Y';

 QUIT;

 ENDIF;

}


//?Carlisle processing if Lock request or no orders picked
CASE;

// IF DTL.*CMD key is *Lock Load
IF DTL.*CMD_key = '15';

// OR LCL.USR Status (Y/N) is Not Yes
OR LCL.USR_Status_Y_N = *BLANK/'N';

//?dont do this again if it was done in Carrier CASE above
CASE;

// IF LCL.Status Flag 20 Y/N is No
IF LCL.Status_Flag_20_Y_N = 'N';

//?** Don't allow Carlisle processing if errors pending in OD P001251
EXECUTE FUNCTION(EDT Lock Load          IF) TYPE(EXCINTFUN)                     AC1419469;
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Company_Number);
{
 //?Execute internal function

 //?*** Return Plant Code from first Order Header
 EXECUTE FUNCTION(zzV for Accusort Load  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1322485;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Trans_Contol_AS400_Plant);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1305919;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Trans_Contol_AS400_Plant);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428569;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   {
    //?USER: Process Data record

    CASE;

    // IF DB1.Detail Line Status is Not cancelled
    IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

    EXECUTE FUNCTION(Rtv Desc/Trans Control RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304130;
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(WRK.Warehouse_Description);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    QUIT;

    ENDIF;

   }

   CASE;

   // IF WRK.Trans Contol AS400/Plant is Plant
   IF WRK.Trans_Contol_AS400_Plant = 'P';

   // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
   PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

   QUIT;

   ENDIF;

  }

  CASE;

  // IF WRK.Trans Contol AS400/Plant is Plant
  IF WRK.Trans_Contol_AS400_Plant = 'P';

  // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
  PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

  QUIT;

  ENDIF;

 }

 EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
 PARAMETER(PAR.Company_Number);
 PARAMETER('LDORDD');
 PARAMETER(LCL.PFS_AccuSort_Active);
 PARAMETER(LCL.PFS_Carlisle_Active);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?UPD:  AccuSort
 CASE;

 // IF LCL.PFS AccuSort Active is Yes
 IF LCL.PFS_AccuSort_Active = 'Y';

 //?AccuSort:  Create Order Header and Order Detail
 CASE;

 // IF PAR.Trans Contol AS400/Plant is Plant
 IF PAR.Trans_Contol_AS400_Plant = 'P';

 // Call program Zzz Lock/Unlock Box ID XF.
 CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
 PARAMETER('L');

 // Call program Zzz AS Order Hdr/Dtl   XF.
 CALL PROGRAM(Zzz AS Order Hdr/Dtl   XF) ('PDQPXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);

 // Call program Zzz Lock/Unlock Box ID XF.
 CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
 PARAMETER('U');

 ENDIF;

 ENDIF;

 //?UPD:  Carlisle
 CASE;

 // IF LCL.PFS Carlisle Active is Yes
 IF LCL.PFS_Carlisle_Active = 'Y';

 // Call program PFS Lock Load/Order   XF.
 CALL PROGRAM(PFS Lock Load/Order   XF) ('PPNLXFR');
 PARAMETER(PAR.Load_ID);

 ENDIF;

 //?** 07/28/2017 RMC R131331 if load had a whs with edi wso interchange, then
 // Call program Exc Create EDI f/Lock XF.
 CALL PROGRAM(Exc Create EDI f/Lock XF) ('PUDNXFR');
 PARAMETER(PAR.Load_ID);

}


ENDIF;

ENDIF;

ENDIF;

//?** Update the Mexican Carrier in OHE    P000737
CASE;

// IF DTL.OHE Mexican Buyer Truck NE WRK.Blank for 4           USR
IF DTL.OHE_Carrier_SCAC_Code <> WRK.Blank_for_4_USR;

EXECUTE FUNCTION(RTV/Chg Mex Carr - All RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2016954;
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.OHE_Carrier_SCAC_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(CHG Mexican Carrier    CH) TYPE(CHGOBJ) FILE(PMAMREP)          AC2016555;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.OHE_Carrier_SCAC_Code);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

 }

}


ENDIF;

