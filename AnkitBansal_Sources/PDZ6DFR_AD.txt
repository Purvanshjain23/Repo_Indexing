// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDZ6DFR
// ?Date: 14.08.2025 Time: 03:33:46
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Documentation/Change Log
DO;

//?This program shows the change log entries for a load, stop and order.
//?It is run interactively from an external function.  One Load, Stop, Order
//?per iteration.  It is executed once for deleted loads and again for
//?existing, Unaccepted loads.
//?- DBF Change on Order Header Extsn (PMAMREP) File. Changed:
//?  OHE Voyage/Flight from 5.0 to 15A.
//?  OHE Booking Number from 12A to 15A.
//?  Added: OHE Genset Number 15A.
//?- Recompiled only.
ENDDO;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('PDZ6DF');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.USR View Option = CND.View New
PAR.USR_View_Option = 'N';

// PAR.USR Order Number = PAR.Order Number
PAR.USR_Order_Number = PAR.Order_Number;

// PAR.USR Stop/Drop = PAR.Stop/Drop
PAR.USR_Stop_Drop = PAR.Stop_Drop;

EXECUTE FUNCTION(VAL Load Exist        RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1197457;
PARAMETER(PAR.Load_ID);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// PAR.USR Load Exists = CND.Load Doesn't Exist
PAR.USR_Load_Exists = 'N';

// PAR.USR View Option = CND.View All
PAR.USR_View_Option = 'A';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Load Exists = CND.Load Exists
PAR.USR_Load_Exists = 'Y';

ENDIF;

EXECUTE FUNCTION(RTV Load Acceptance Sw RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1476499;
PARAMETER(CTL.Load_ID);
PARAMETER(PAR.Load_Acceptance_Flag);
PARAMETER(LCL.MG_Created_Load);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.Load Acceptance Flag is Load Accepted
IF PAR.Load_Acceptance_Flag = 'A';

PGM.*Return_code = *BLANK;

RETURN;

ENDIF;

// CTL.Order Number = PAR.Order Number
CTL.Order_Number = PAR.Order_Number;

// CTL.Stop/Drop = PAR.Stop/Drop
CTL.Stop_Drop = PAR.Stop_Drop;

// PAR.Calc 5 = CON.1
PAR.Calc_5 = 1;

// WRK.USR Flag 1 = CND.No
WRK.USR_Flag_1 = 'N';

//?USER: Initialize subfile control

//?For existing loads
CASE;

// IF PAR.USR Load Exists is Load Exists
IF PAR.USR_Load_Exists = 'Y';

EXECUTE FUNCTION(RTV Load Header All,Co RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1776342;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Load_Start_Company_USR);
PARAMETER(CTL.Scheduled_Ship_Date);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(CTL.Load_Status);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(CTL.Total_Stops);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(CTL.USR_Carrier_Code);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(CTL.Shipping_Method);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(CTL.Ship_To_State_Code);
PARAMETER(CTL.Gross_Weight);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(NLL.Requested_Delivery_Date);
PARAMETER(PAR.Load_Acceptance_Flag);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(NLL.Override_Total_Load_Miles);
PARAMETER(NLL.Load_Actual_Freight);
PARAMETER(NLL.LH_Held_Over_Rsn_Cmt);
PARAMETER(NLL.Load_U_M);
PARAMETER(NLL.LH_On_Time_Reason_Code);
PARAMETER(NLL.LH_Held_Over_Reason);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(RTV GrsWgt w/PltTr Ld RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1601442;
PARAMETER(CTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(WRK.USR_Weight_Confirmed);
PARAMETER(CTL.Load_Status);
{
 //?USER: Initialize routine

 // PAR.USR Weight Accumulated = CON.*ZERO
 PAR.USR_Weight_Accumulated = *ZERO;

 CASE;

 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 EXECUTE FUNCTION(RTV Pallet/Tare        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1585842;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Pallets_Loaded);
 PARAMETER(LCL.Avg_Pallet_Tare);
 PARAMETER(LCL.Tot_Pallet_Tare);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?***** Change log and comments
 DO;

 //?** 01/18/2010 PKD E000261 Pass the Average Pallet Tare
 ENDDO;

 //?USER: Process Data record

 //?01/18/10 PKD E000261 SEND in LCL.Avg Pallet Tare
 // Call program RTV Gross Wgt/Qty     XF.
 CALL PROGRAM(RTV Gross Wgt/Qty     XF) ('PQPQXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.USR_Weight_Accumulated);
 PARAMETER(LCL.Order_Quantity);
 PARAMETER(LCL.Avg_Pallet_Tare);

 //?USER: Exit processing

 CASE;

 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 EXECUTE FUNCTION(RTV Pallet/Tare        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1585842;
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.Pallets_Loaded);
 PARAMETER(LCL.Avg_Pallet_Tare);
 PARAMETER(LCL.Tot_Pallet_Tare);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.USR Weight Accumulated = PAR.USR Weight Accumulated + LCL.Tot Pallet Tare
 PAR.USR_Weight_Accumulated = PAR.USR_Weight_Accumulated + LCL.Tot_Pallet_Tare;

 ENDIF;

}


EXECUTE FUNCTION(RTV Carr Appt Dt/Tm   RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1677570;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Appointment_Confirm_Date);
PARAMETER(LCL.Appointment_Confirm_Time);
{
 //?USER: Process Data record

 // PAR.Appointment Confirm Date = DB1.LD Carrier Appt Date
 PAR.Appointment_Confirm_Date = DB1.LD_Carrier_Appt_Date;

 // PAR.Appointment Confirm Time = DB1.LD Carrier Appt Time
 PAR.Appointment_Confirm_Time = DB1.LD_Carrier_Appt_Time;

 QUIT;

}


// CTL.Appointment Time HH:MM = LCL.Appointment Confirm Time / CON.100 *
CTL.Appointment_Time_HHMM = LCL.Appointment_Confirm_Time / 100;

// CTL.Gross Weight = WRK.USR Weight Confirmed
CTL.Gross_Weight = WRK.USR_Weight_Confirmed;

//?For existing loads
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Gross Weight = CON.*ZERO
CTL.Gross_Weight = *ZERO;

// WRK.Load Change Type = CND.Delete Load
WRK.Load_Change_Type = 'DELOAD';

EXECUTE FUNCTION(RTV Carrier Code       RT) TYPE(RTVOBJ) FILE(PDLHCPP)          AC1476878;
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(CTL.USR_Carrier_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(CTL.USR_Carrier_Code);
PARAMETER(CTL.USR_Carrier_Name_4);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?** Retrieve co# for the deleted load/order
// WRK.Load Change Type = CND.Delete Load
WRK.Load_Change_Type = 'DELOAD';

EXECUTE FUNCTION(RTV Co#-Dltd/trnsfd OrdRT) TYPE(RTVOBJ) FILE(PDLHCPP)          AC1798266;
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Order_Number);
PARAMETER('DELOAD');
PARAMETER(WRK.Company);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?** Get co# from Order Header file
CASE;

// IF WRK.Company is Equal to zero
IF WRK.Company = *ZERO;

EXECUTE FUNCTION(RTV All Hdr flds b/ord RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1699784;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(CTL.Ship_To_Name);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(CTL.Ship_To_City);
PARAMETER(CTL.Ship_To_State_Code);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(CTL.Header_Status);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(LCL.Scheduled_Ship_Date);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(CTL.Credit_Hold);
PARAMETER(CTL.Production_Hold);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(CTL.Requested_Delivery_Date);
PARAMETER(CTL.Requested_Delivery_Time);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.USR_Load_ID);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(LCL.Shipping_Method);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(VAL Load Exist        RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1197457;
PARAMETER(CTL.Load_ID);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


//?** Only use order info if order has not been reassigned   C000395
//?** Only use order SSD if Load SSD is zeros            C000395
CASE;

// IF CTL.Scheduled Ship Date is not entered
IF CTL.Scheduled_Ship_Date = *ZERO;

// AND CTL.Load ID EQ WRK.USR Load ID
AND ( CTL.Load_ID = WRK.USR_Load_ID;

// OR CTL.Load ID is Blank
OR CTL.Load_ID = *ZERO );

// OR PGM.*Return code is *Record does not exist
OR PGM.*Return_code = 'Y2U0005';

// CTL.Scheduled Ship Date = LCL.Scheduled Ship Date
CTL.Scheduled_Ship_Date = LCL.Scheduled_Ship_Date;

ENDIF;

//?** Only use order shipping method if load is blanks   C000395
CASE;

// IF CTL.Shipping Method EQ LCL.Blank for 3          USR
IF CTL.Shipping_Method = LCL.Blank_for_3_USR;

// AND CTL.Load ID EQ WRK.USR Load ID
AND ( CTL.Load_ID = WRK.USR_Load_ID;

// OR CTL.Load ID is Blank
OR CTL.Load_ID = *ZERO );

// OR PGM.*Return code is *Record does not exist
OR PGM.*Return_code = 'Y2U0005';

// CTL.Shipping Method = LCL.Shipping Method
CTL.Shipping_Method = LCL.Shipping_Method;

ENDIF;

//?** Get co# from Order Header file
// IF *OTHERWISE
IF *OTHERWISE;

//?** Put retrieved company number into the ctl co# field
// CTL.Company Number = WRK.Company
CTL.Company_Number = WRK.Company;

EXECUTE FUNCTION(RTV All Hdr flds b/ord RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1699784;
PARAMETER(NLL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(CTL.Ship_To_Name);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(CTL.Ship_To_City);
PARAMETER(CTL.Ship_To_State_Code);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(CTL.Header_Status);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(LCL.Scheduled_Ship_Date);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(CTL.Credit_Hold);
PARAMETER(CTL.Production_Hold);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(CTL.Requested_Delivery_Date);
PARAMETER(CTL.Requested_Delivery_Time);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.USR_Load_ID);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(LCL.Shipping_Method);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(VAL Load Exist        RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1197457;
PARAMETER(CTL.Load_ID);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


//?** Only use order info if order has not been reassigned   C000395
//?** Only use order SSD if Load SSD is zeros            C000395
CASE;

// IF CTL.Scheduled Ship Date is not entered
IF CTL.Scheduled_Ship_Date = *ZERO;

// AND CTL.Load ID EQ WRK.USR Load ID
AND ( CTL.Load_ID = WRK.USR_Load_ID;

// OR CTL.Load ID is Blank
OR CTL.Load_ID = *ZERO );

// OR PGM.*Return code is *Record does not exist
OR PGM.*Return_code = 'Y2U0005';

// CTL.Scheduled Ship Date = LCL.Scheduled Ship Date
CTL.Scheduled_Ship_Date = LCL.Scheduled_Ship_Date;

ENDIF;

//?** Only use order shipping method if load is blanks   C000395
CASE;

// IF CTL.Shipping Method EQ LCL.Blank for 3          USR
IF CTL.Shipping_Method = LCL.Blank_for_3_USR;

// AND CTL.Load ID EQ WRK.USR Load ID
AND ( CTL.Load_ID = WRK.USR_Load_ID;

// OR CTL.Load ID is Blank
OR CTL.Load_ID = *ZERO );

// OR PGM.*Return code is *Record does not exist
OR PGM.*Return_code = 'Y2U0005';

// CTL.Shipping Method = LCL.Shipping Method
CTL.Shipping_Method = LCL.Shipping_Method;

ENDIF;

ENDIF;

//?Load Order information (if needed) (Warehouse)
CASE;

// IF CTL.Order Number NE WRK.ZERO
IF CTL.Order_Number <> WRK.ZERO;

EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Trans_Contol_AS400_Plant);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

//?Set up create date/time positioners
CASE;

// IF PAR.USR View Option is View New
IF PAR.USR_View_Option = 'N';

// CTL.Created Date = PAR.Created Date
CTL.Created_Date = PAR.Created_Date;

// CTL.Created Time = PAR.Created Time
CTL.Created_Time = PAR.Created_Time;

// CTL.Sequence Number = PAR.Sequence Number
CTL.Sequence_Number = PAR.Sequence_Number;

//?Set up create date/time positioners
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Created Date = CON.*ZERO
CTL.Created_Date = *ZERO;

// CTL.Created Time = CON.*ZERO
CTL.Created_Time = *ZERO;

// CTL.Sequence Number = CON.*ZERO
CTL.Sequence_Number = *ZERO;

ENDIF;

// CTL.Condition Name 10 USR = Condition name of PAR.USR View Option
CTL.Condition_Name_10_USR = RTVCND(PAR.USR_View_Option);

//?USER: Initialize subfile record from DBF record

//?Match Order Number
CASE;

// IF DB1.Order Number NE CTL.Order Number
IF DB1.Order_Number <> CTL.Order_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Only department control code of TRF (Traffic) is displayed
CASE;

// IF DB1.Department Control Code is Traffic Dept
IF DB1.Department_Control_Code = 'TRF';

//?Only department control code of TRF (Traffic) is displayed
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Record selected processing-Condition Name of Change Type
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

// RCD.Condition Desc. 1  USR = Condition name of DB1.Load Change Type
RCD.Condition_Desc_1_USR = RTVCND(DB1.Load_Change_Type);

ENDIF;

//?3.06.02  If Date Change Type, reverse the values
CASE;

// IF DB1.Load Change Type is Date changes
IF DB1.Load_Change_Type = 'RQSDLV'/'RQSSHP'/'SCHSHP';

// WRK.USR Work Field 3A = SUBSTRING(DB1.Change Log Prior Value,CON.2,CON.2)
WRK.USR_Work_Field_3A = SUBSTRING(DB1.Change_Log_Prior_Value:2:2);

// WRK.Month (Char) USR = SUBSTRING(DB1.Change Log Prior Value,CON.4,CON.2)
WRK.Month_Char_USR = SUBSTRING(DB1.Change_Log_Prior_Value:4:2);

// WRK.Day   (Char) USR = SUBSTRING(DB1.Change Log Prior Value,CON.6,CON.2)
WRK.Day_Char_USR = SUBSTRING(DB1.Change_Log_Prior_Value:6:2);

// WRK.Text USR 4 = CONCAT(WRK.Month (Char) USR,WRK.Day   (Char) USR,CON.*ZERO)
WRK.Text_USR_4 = WRK.Month_Char_USR + WRK.Day_Char_USR (*ZERO);

// RCD.Change Log Prior Value = CONCAT(WRK.Text USR 4,WRK.USR Work Field 3A,CON.*ZERO)
RCD.Change_Log_Prior_Value = WRK.Text_USR_4 + WRK.USR_Work_Field_3A (*ZERO);

// WRK.USR Work Field 3A = SUBSTRING(DB1.Change Log New Value,CON.2,CON.2)
WRK.USR_Work_Field_3A = SUBSTRING(DB1.Change_Log_New_Value:2:2);

// WRK.Month (Char) USR = SUBSTRING(DB1.Change Log New Value,CON.4,CON.2)
WRK.Month_Char_USR = SUBSTRING(DB1.Change_Log_New_Value:4:2);

// WRK.Day   (Char) USR = SUBSTRING(DB1.Change Log New Value,CON.6,CON.2)
WRK.Day_Char_USR = SUBSTRING(DB1.Change_Log_New_Value:6:2);

// WRK.Text USR 4 = CONCAT(WRK.Month (Char) USR,WRK.Day   (Char) USR,CON.*ZERO)
WRK.Text_USR_4 = WRK.Month_Char_USR + WRK.Day_Char_USR (*ZERO);

// RCD.Change Log New Value = CONCAT(WRK.Text USR 4,WRK.USR Work Field 3A,CON.*ZERO)
RCD.Change_Log_New_Value = WRK.Text_USR_4 + WRK.USR_Work_Field_3A (*ZERO);

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?F13=Next Order
CASE;

// IF CTL.*CMD key is *Next Order
IF CTL.*CMD_key = '13';

// PAR.Order Number = CTL.Order Number
PAR.Order_Number = CTL.Order_Number;

// PAR.Stop/Drop = CTL.Stop/Drop
PAR.Stop_Drop = CTL.Stop_Drop;

// Call program RTV Next/Prev Order    XF.
CALL PROGRAM(RTV Next/Prev Order    XF) ('PDAPXFR');
PARAMETER(CTL.Created_Date);
PARAMETER(CTL.Created_Time);
PARAMETER(CTL.Sequence_Number);
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Stop_Drop);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER('N');
PARAMETER(WRK.*Return_code);

CASE;

// IF WRK.*Return code is *Record does not exist
IF WRK.*Return_code = 'Y2U0005';

// Send information message - 'No more orders available.'
MESSAGE(USR2522 *INFO);

// WRK.*Return code = CND.*Normal
WRK.*Return_code = *BLANK;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F14=Previous Order
CASE;

// IF CTL.*CMD key is *Prev Order
IF CTL.*CMD_key = '14';

CASE;

// IF CTL.Order Number EQ PAR.USR Order Number
IF CTL.Order_Number = PAR.USR_Order_Number;

// AND CTL.Stop/Drop EQ PAR.USR Stop/Drop
AND CTL.Stop_Drop = PAR.USR_Stop_Drop;

// Send information message - 'No more orders available.'
MESSAGE(USR2522 *INFO);

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Order Number = CTL.Order Number
PAR.Order_Number = CTL.Order_Number;

// PAR.Stop/Drop = CTL.Stop/Drop
PAR.Stop_Drop = CTL.Stop_Drop;

// Call program RTV Next/Prev Order    XF.
CALL PROGRAM(RTV Next/Prev Order    XF) ('PDAPXFR');
PARAMETER(CTL.Created_Date);
PARAMETER(CTL.Created_Time);
PARAMETER(CTL.Sequence_Number);
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Stop_Drop);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER('P');
PARAMETER(WRK.*Return_code);

// WRK.*Return code = CND.*Normal
WRK.*Return_code = *BLANK;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F15=Accept Load
CASE;

// IF CTL.*CMD key is *Accept Load
IF CTL.*CMD_key = '15';

EXECUTE FUNCTION(VAL Load Exist        RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1197457;
PARAMETER(CTL.Load_ID);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Validate Abs Frt Rate before Accepting Load    5/16/01
EXECUTE FUNCTION(RTV Chk Abs Frt Rt /Ld RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1623241;
PARAMETER(CTL.Load_ID);
PARAMETER(LCL.USR_Check_Y_N_Status);
PARAMETER(LCL.Ship_To_Customer);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 // PAR.USR Check Y/N Status = CND.blank
 PAR.USR_Check_Y_N_Status = *BLANK;

 //?USER: Process Data record

 CASE;

 // IF DB1.Absorbed Freight Rate is EQ Zeros
 IF DB1.Absorbed_Freight_Rate_CWT = *ZERO;

 // PAR.USR Check Y/N Status = CND.yes
 PAR.USR_Check_Y_N_Status = 'Y';

 // PAR.Ship To Customer = DB1.Ship To Customer
 PAR.Ship_To_Customer = DB1.Ship_To_Customer;

 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(RTV Export Status      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1449325;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(WRK.Export_Status);
{
 //?USER: Initialize routine

 // PAR.Export Status = CND.blank
 PAR.Export_Status = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program CLC Deadline Date/Time XF.
CALL PROGRAM(CLC Deadline Date/Time XF) ('PMP9XFR');
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.Deadline_Departure_Date);
PARAMETER(WRK.Deadline_Departure_Time);
PARAMETER(LCL.Requested_Delivery_Date);

//?** Check flag = Yes if Abs Frt is zeros
// Call program Rtv Plant Co/Org      XF.
CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(PAR.Plant_Company_Sts);
PARAMETER(PAR.Company_Organization);

CASE;

// IF PAR.Company Organization is High Plains Biodiesel
IF PAR.Company_Organization = 'H';

// LCL.USR Check Y/N Status = CND.no
LCL.USR_Check_Y_N_Status = 'N';

ENDIF;

//?If not Buyers Truck, error if Abs Frt is zeros-else Fax to Carrier
CASE;

// IF LCL.USR Check Y/N Status is yes
IF LCL.USR_Check_Y_N_Status = 'Y';

// AND CTL.Shipping Method is Prepaid
AND CTL.Shipping_Method = 'PR'/'PT';

// Send error message - 'Freight Rate is 0 for Customer &1'
ERROR(USR3051);
MSGPARM(LCL.Ship_To_Customer);

//?If not Buyers Truck, error if Abs Frt is zeros-else Fax to Carrier
// IF *OTHERWISE
IF *OTHERWISE;

//?** Only process prepaid loads, not collect (skip Dailys,HPB,Export)
CASE;

// IF CTL.Shipping Method is Prepaid
IF CTL.Shipping_Method = 'PR'/'PT';

// AND PAR.Company Organization is Seaboard
AND PAR.Company_Organization = 'S';

//?** Don't accept if zero miles, (skip if export)      FP1251(E000550)
CASE;

// IF WRK.Deadline Departure Date is not entered
IF WRK.Deadline_Departure_Date = *ZERO;

// AND WRK.Export Status is Not Yes
AND WRK.Export_Status = *BLANK/'N';

// AND CTL.Header Status is Not cancelled
AND CTL.Header_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

// Send error message - 'Mileage Between Cities not found.'
ERROR(USR2457);

//?** Don't accept if zero miles, (skip if export)      FP1251(E000550)
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(CHG Load Accept Flag   CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1476762;
PARAMETER(CTL.Load_ID);
PARAMETER('A');
PARAMETER(WRK.Deadline_Departure_Date);
PARAMETER(WRK.Deadline_Departure_Time);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(CHG Deadline Date/Time RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1496989;
PARAMETER(CTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(WRK.Deadline_Departure_Date);
PARAMETER(WRK.Deadline_Departure_Time);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 QUIT;

 //?USER: Process Data record

 EXECUTE FUNCTION(CHG Deadline Date/Time CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1496963;
 PARAMETER(PAR.Load_ID);
 PARAMETER(DB1.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.Deadline_Depart_DT_HDR);
 PARAMETER(PAR.Deadline_Depart_Time_HDR);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(Upd Deadline Dte/Tme  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1648968;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Deadline_Depart_DT_HDR);
  PARAMETER(DB1.Deadline_Depart_Time_HDR);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Deadline Dte/Tme  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1648969;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

 }

}


// WRK.Load Change Type = CND.Accept Load
WRK.Load_Change_Type = 'ACCEPT';

// WRK.Load Acceptance Flag = CND.Load Accepted
WRK.Load_Acceptance_Flag = 'A';

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(WRK.Load_Change_Type);
PARAMETER('TRF');
PARAMETER(PAR.Load_Acceptance_Flag);
PARAMETER(WRK.Load_Acceptance_Flag);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*JOB);
PARAMETER(CTL.USR_Carrier_Code);
PARAMETER(CTL.Company_Number);
PARAMETER(*ZERO);

// WRK.Status - Y or N = CND.yes
WRK.Status_Y_or_N = 'Y';

EXECUTE FUNCTION(RTV Export Fields New  RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1821086;
PARAMETER(CTL.Load_ID);
PARAMETER(LCL.Transloader_Carrier_Code);
PARAMETER(LCL.Carrier_Code);
PARAMETER(NLL.Export_Status);
PARAMETER(NLL.Shipping_Line);
PARAMETER(NLL.Port_Delv_Terminal);
PARAMETER(NLL.Vessel_Name);
PARAMETER(NLL.Voyage);
PARAMETER(NLL.Sail_Date);
PARAMETER(NLL.Booking_Number);
PARAMETER(NLL.Discharge_Port);
PARAMETER(NLL.Arrival_Date);
PARAMETER(NLL.Container_Number);
PARAMETER(NLL.Date_In);
PARAMETER(NLL.Time_In);
PARAMETER(NLL.Date_Out);
PARAMETER(NLL.Time_Out);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV OHE fields-*ALL    RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC1814634;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(LCL.Shipping_Line);
PARAMETER(NLL.Port_Delv_Terminal);
PARAMETER(NLL.OHE_City);
PARAMETER(NLL.OHE_Vessel_Airline);
PARAMETER(NLL.OHE_Voyage_Flight);
PARAMETER(NLL.OHE_Booking_Number);
PARAMETER(NLL.OHE_Discharge_Port_Airprt);
PARAMETER(NLL.OHE_Sail_Flight_Date);
PARAMETER(NLL.OHE_Port_Cut_Date);
PARAMETER(NLL.OHE_Arrival_Date);
PARAMETER(NLL.OHE_Late_Delivery_Code);
PARAMETER(NLL.OHE_Ship_Status);
PARAMETER(NLL.OHE_Container_Number);
PARAMETER(NLL.OHE_Comment_1);
PARAMETER(NLL.OHE_Comment_2);
PARAMETER(NLL.OHE_Unused_Number_1_11_0);
PARAMETER(NLL.OHE_Unused_Number_2_11_0);
PARAMETER(NLL.OHE_Unused_Number_3_11_0);
PARAMETER(NLL.OHE_Unused_Number_4_11_0);
PARAMETER(NLL.OHE_HPB_RIN_Equiv_Value);
PARAMETER(NLL.OHE_HPB_RIN_Price);
PARAMETER(NLL.Transload_Terminal_Fees);
PARAMETER(NLL.OHE_Est_Arrv_at_Dest_Date);
PARAMETER(NLL.OHE_Backhaul_ETA_RtrnDate);
PARAMETER(NLL.OHE_Port_Pier_Paid_Date);
PARAMETER(NLL.OHE_Actual_Ship_Date);
PARAMETER(LCL.OHE_Carrier_SCAC_Code);
PARAMETER(NLL.OHE_Spot_Buy);
PARAMETER(NLL.OHE_PO_ACK_Flag);
PARAMETER(NLL.OHE_Override_Type_Code);
PARAMETER(NLL.OHE_Backhaul_Status);
PARAMETER(NLL.OHE_Backhaul_ETA_AM_PM);
PARAMETER(NLL.OHE_Load_Haul_Type);
PARAMETER(NLL.OHE_Backhaul_Carrier_Code);
PARAMETER(NLL.OHE_Bookings_Confirmed);
PARAMETER(NLL.OHE_EDI_Error_Reasons);
PARAMETER(NLL.HPB_COA_Batch_Number);
PARAMETER(NLL.Delivery_P_O_Number);
PARAMETER(NLL.OHE_Intended_for_ExportCC);
PARAMETER(NLL.OHE_EDI_943_Action);
PARAMETER(NLL.OHE_EDI_944_Action);
PARAMETER(NLL.OHE_EDI_940_Action);
PARAMETER(NLL.OHE_EDI_945_Action);
PARAMETER(NLL.OHE_Transload_Seal_Nbr);
PARAMETER(NLL.OHE_Abs_Rate_Override_Rsn);
PARAMETER(NLL.OHE_Appt_Confirmation_#);
PARAMETER(NLL.OHE_Backhaul_Container#);
PARAMETER(NLL.OHE_Backhaul_Chassis_#);
PARAMETER(NLL.OHE_Transload_Container#);
PARAMETER(NLL.OHE_Pier_Pass_Invoice);
PARAMETER(NLL.OHE_Carrier_Nm);
PARAMETER(NLL.OHE_Appt_Confirmation_Nm);
PARAMETER(NLL.OHE_Backhaul_Comment);
PARAMETER(NLL.Letter_of_Credit_Number);
PARAMETER(NLL.OHE_Backhaul_Return_to_Co);
PARAMETER(NLL.LD_Stop_Drop);
PARAMETER(NLL.OHE_Unused_Number_3_0);
PARAMETER(NLL.OHE_Pier_Pass_Fee_Amount);
PARAMETER(NLL.OHE_Port_Check_Fee_Amount);
PARAMETER(NLL.OHE_Port_Cut_Time);
PARAMETER(NLL.OHE_Backhaul_Truck_Number);
PARAMETER(NLL.OHE_Load_Sched_Seq_Num);
PARAMETER(NLL.Original_Appointment_Date);
PARAMETER(NLL.Original_Appointment_Time);
PARAMETER(NLL.OHE_PowerPro_Load#_Outbnd);
PARAMETER(NLL.OHE_PowerPro_Load#_Bckhl);
PARAMETER(NLL.OHE_Unused_Numeric_9_0_3);
PARAMETER(NLL.OHE_Orig_ABS_Freight_Rate);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(NLL.Record_Status);
PARAMETER(NLL.Job_Time);
PARAMETER(NLL.User_Id);
PARAMETER(NLL.Job_Name);
PARAMETER(NLL.Job_Date);
{
 //?USER: Initialize routine

 //?LJB 1/14/09 FP1303 New Delivery P.O.Number field added
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// Call program PMT Fax Load Confirmtn PV.
CALL PROGRAM(PMT Fax Load Confirmtn PV) ('POICPVR');
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Company_Number);
PARAMETER(LCL.Transloader_Carrier_Code);
PARAMETER(CTL.USR_Carrier_Code);
PARAMETER(LCL.Shipping_Line);
PARAMETER(LCL.OHE_Carrier_SCAC_Code);
PARAMETER(WRK.Status_Y_or_N);

//?** Flag if this is an SSI PowerPro acceptance event
CASE;

// IF WRK.Load Change Type is SSI Reporting Changes
IF WRK.Load_Change_Type = 'ACCEPT'/'ADDSTP'/'CANORD'/'CARCHG'/'DELODA'/'LDDLTD'/'DELOAD';

// WRK.USR Flag 1 = CND.Yes
WRK.USR_Flag_1 = 'Y';

ENDIF;

//?** Send to PowerPro if "Download to SSI" is "Yes"
CASE;

// IF WRK.FAX DTL Status 1 is Yes
IF WRK.FAX_DTL_Status_1 = 'Y';

EXECUTE FUNCTION(RTV SSI Carrier flag   RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1904336;
PARAMETER(CTL.USR_Carrier_Code);
PARAMETER(WRK.SSI_Download_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** if this is an SSI Carrier, download info to PowerPro
CASE;

// IF WRK.SSI Download Flag is Yes, Download to SSI
IF WRK.SSI_Download_Flag = 'Y';

//?** Only send selected Load Change Types
CASE;

// IF WRK.USR Flag 1 is Yes
IF WRK.USR_Flag_1 = 'Y';

EXECUTE FUNCTION(RTV SSI Fax'd Flag     RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1906598;
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.Fax_Sent_to_SSI_Carrier);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Determine if Add or Change
CASE;

// IF WRK.Fax Sent to SSI Carrier is No, not Fax'd to Carrier
IF WRK.Fax_Sent_to_SSI_Carrier = 'N';

// OR WRK.Fax Sent to SSI Carrier is Blanks
OR WRK.Fax_Sent_to_SSI_Carrier = *BLANK;

// WRK.SSI Add, Chg, Delete flag = CND.Add
WRK.SSI_Add_Chg_Delete_flag = 00;

//?** Determine if Add or Change
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.SSI Add, Chg, Delete flag = CND.Change
WRK.SSI_Add_Chg_Delete_flag = 04;

ENDIF;

// Call program BLD SSI Download       XF.
CALL PROGRAM(BLD SSI Download       XF) ('PNPNXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.USR_Carrier_Code);
PARAMETER(WRK.SSI_Add_Chg_Delete_flag);

EXECUTE FUNCTION(CHG Fax'd to SSI flag  CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1906429;
PARAMETER(CTL.Load_ID);
PARAMETER('Y');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

ENDIF;

ENDIF;

PGM.*Return_code = *BLANK;

RETURN;

ENDIF;

//?** Only process prepaid loads, not collect (skip Dailys,HPB,Export)
// IF *OTHERWISE
IF *OTHERWISE;

//?** Accept if ctl.shipping method is Collect
EXECUTE FUNCTION(CHG Load Accept Flag   CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1476762;
PARAMETER(CTL.Load_ID);
PARAMETER('A');
PARAMETER(WRK.Deadline_Departure_Date);
PARAMETER(WRK.Deadline_Departure_Time);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(CHG Deadline Date/Time RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1496989;
PARAMETER(CTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(WRK.Deadline_Departure_Date);
PARAMETER(WRK.Deadline_Departure_Time);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 QUIT;

 //?USER: Process Data record

 EXECUTE FUNCTION(CHG Deadline Date/Time CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1496963;
 PARAMETER(PAR.Load_ID);
 PARAMETER(DB1.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.Deadline_Depart_DT_HDR);
 PARAMETER(PAR.Deadline_Depart_Time_HDR);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(Upd Deadline Dte/Tme  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1648968;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Deadline_Depart_DT_HDR);
  PARAMETER(DB1.Deadline_Depart_Time_HDR);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Deadline Dte/Tme  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1648969;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

 }

}


// WRK.Load Acceptance Flag = CND.Load Accepted
WRK.Load_Acceptance_Flag = 'A';

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER('ACCEPT');
PARAMETER('TRF');
PARAMETER(PAR.Load_Acceptance_Flag);
PARAMETER(WRK.Load_Acceptance_Flag);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*JOB);
PARAMETER(CTL.USR_Carrier_Code);
PARAMETER(CTL.Company_Number);
PARAMETER(*ZERO);

// WRK.Status - Y or N = CND.yes
WRK.Status_Y_or_N = 'Y';

EXECUTE FUNCTION(RTV Export Fields New  RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1821086;
PARAMETER(CTL.Load_ID);
PARAMETER(LCL.Transloader_Carrier_Code);
PARAMETER(LCL.Carrier_Code);
PARAMETER(NLL.Export_Status);
PARAMETER(NLL.Shipping_Line);
PARAMETER(NLL.Port_Delv_Terminal);
PARAMETER(NLL.Vessel_Name);
PARAMETER(NLL.Voyage);
PARAMETER(NLL.Sail_Date);
PARAMETER(NLL.Booking_Number);
PARAMETER(NLL.Discharge_Port);
PARAMETER(NLL.Arrival_Date);
PARAMETER(NLL.Container_Number);
PARAMETER(NLL.Date_In);
PARAMETER(NLL.Time_In);
PARAMETER(NLL.Date_Out);
PARAMETER(NLL.Time_Out);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV OHE fields-*ALL    RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC1814634;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(LCL.Shipping_Line);
PARAMETER(NLL.Port_Delv_Terminal);
PARAMETER(NLL.OHE_City);
PARAMETER(NLL.OHE_Vessel_Airline);
PARAMETER(NLL.OHE_Voyage_Flight);
PARAMETER(NLL.OHE_Booking_Number);
PARAMETER(NLL.OHE_Discharge_Port_Airprt);
PARAMETER(NLL.OHE_Sail_Flight_Date);
PARAMETER(NLL.OHE_Port_Cut_Date);
PARAMETER(NLL.OHE_Arrival_Date);
PARAMETER(NLL.OHE_Late_Delivery_Code);
PARAMETER(NLL.OHE_Ship_Status);
PARAMETER(NLL.OHE_Container_Number);
PARAMETER(NLL.OHE_Comment_1);
PARAMETER(NLL.OHE_Comment_2);
PARAMETER(NLL.OHE_Unused_Number_1_11_0);
PARAMETER(NLL.OHE_Unused_Number_2_11_0);
PARAMETER(NLL.OHE_Unused_Number_3_11_0);
PARAMETER(NLL.OHE_Unused_Number_4_11_0);
PARAMETER(NLL.OHE_HPB_RIN_Equiv_Value);
PARAMETER(NLL.OHE_HPB_RIN_Price);
PARAMETER(NLL.Transload_Terminal_Fees);
PARAMETER(NLL.OHE_Est_Arrv_at_Dest_Date);
PARAMETER(NLL.OHE_Backhaul_ETA_RtrnDate);
PARAMETER(NLL.OHE_Port_Pier_Paid_Date);
PARAMETER(NLL.OHE_Actual_Ship_Date);
PARAMETER(LCL.OHE_Carrier_SCAC_Code);
PARAMETER(NLL.OHE_Spot_Buy);
PARAMETER(NLL.OHE_PO_ACK_Flag);
PARAMETER(NLL.OHE_Override_Type_Code);
PARAMETER(NLL.OHE_Backhaul_Status);
PARAMETER(NLL.OHE_Backhaul_ETA_AM_PM);
PARAMETER(NLL.OHE_Load_Haul_Type);
PARAMETER(NLL.OHE_Backhaul_Carrier_Code);
PARAMETER(NLL.OHE_Bookings_Confirmed);
PARAMETER(NLL.OHE_EDI_Error_Reasons);
PARAMETER(NLL.HPB_COA_Batch_Number);
PARAMETER(NLL.Delivery_P_O_Number);
PARAMETER(NLL.OHE_Intended_for_ExportCC);
PARAMETER(NLL.OHE_EDI_943_Action);
PARAMETER(NLL.OHE_EDI_944_Action);
PARAMETER(NLL.OHE_EDI_940_Action);
PARAMETER(NLL.OHE_EDI_945_Action);
PARAMETER(NLL.OHE_Transload_Seal_Nbr);
PARAMETER(NLL.OHE_Abs_Rate_Override_Rsn);
PARAMETER(NLL.OHE_Appt_Confirmation_#);
PARAMETER(NLL.OHE_Backhaul_Container#);
PARAMETER(NLL.OHE_Backhaul_Chassis_#);
PARAMETER(NLL.OHE_Transload_Container#);
PARAMETER(NLL.OHE_Pier_Pass_Invoice);
PARAMETER(NLL.OHE_Carrier_Nm);
PARAMETER(NLL.OHE_Appt_Confirmation_Nm);
PARAMETER(NLL.OHE_Backhaul_Comment);
PARAMETER(NLL.Letter_of_Credit_Number);
PARAMETER(NLL.OHE_Backhaul_Return_to_Co);
PARAMETER(NLL.LD_Stop_Drop);
PARAMETER(NLL.OHE_Unused_Number_3_0);
PARAMETER(NLL.OHE_Pier_Pass_Fee_Amount);
PARAMETER(NLL.OHE_Port_Check_Fee_Amount);
PARAMETER(NLL.OHE_Port_Cut_Time);
PARAMETER(NLL.OHE_Backhaul_Truck_Number);
PARAMETER(NLL.OHE_Load_Sched_Seq_Num);
PARAMETER(NLL.Original_Appointment_Date);
PARAMETER(NLL.Original_Appointment_Time);
PARAMETER(NLL.OHE_PowerPro_Load#_Outbnd);
PARAMETER(NLL.OHE_PowerPro_Load#_Bckhl);
PARAMETER(NLL.OHE_Unused_Numeric_9_0_3);
PARAMETER(NLL.OHE_Orig_ABS_Freight_Rate);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(NLL.Record_Status);
PARAMETER(NLL.Job_Time);
PARAMETER(NLL.User_Id);
PARAMETER(NLL.Job_Name);
PARAMETER(NLL.Job_Date);
{
 //?USER: Initialize routine

 //?LJB 1/14/09 FP1303 New Delivery P.O.Number field added
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// Call program PMT Fax Load Confirmtn PV.
CALL PROGRAM(PMT Fax Load Confirmtn PV) ('POICPVR');
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Company_Number);
PARAMETER(LCL.Transloader_Carrier_Code);
PARAMETER(CTL.USR_Carrier_Code);
PARAMETER(LCL.Shipping_Line);
PARAMETER(LCL.OHE_Carrier_SCAC_Code);
PARAMETER(WRK.Status_Y_or_N);

PGM.*Return_code = *BLANK;

RETURN;

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?Load was deleted; change log type so only see this once.
//?Change log type to DELODA-Deleted Load Accepted
// WRK.Load Change Type = CND.Delete Load
WRK.Load_Change_Type = 'DELOAD';

EXECUTE FUNCTION(CHG Deload Log Entry   RT) TYPE(RTVOBJ) FILE(PDLHCPP)          AC1476861;
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?USER: Initialize routine

 //?E3796 JJH 3/5/15 - Removed "Requested Ship Date" from "Un-Confirm
 //? Load List" of "Load Change Type" field.
 //?USER: Process Data record

 // PAR.Sequence = DB1.Sequence Number + CON.1
 PAR.Sequence = DB1.Sequence_Number + 1;

 EXECUTE FUNCTION(CRT Load/Order Chg Log CR) TYPE(CRTOBJ) FILE(PDLHCPP)          AC1465744;
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 PARAMETER(PAR.Sequence);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Stop_Drop);
 PARAMETER('DELODA');
 PARAMETER(DB1.Department_Control_Code);
 PARAMETER(DB1.Change_Log_New_Value);
 PARAMETER('Delete Accpt');
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Carrier_Broker_Carrier_Co);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 {
  //?USER: Processing if Data record already exists

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

  //?USER: Processing after Data update

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

 //?added new rtv to pull in the Confirm information
 //?removed the RTV Load Status
 EXECUTE FUNCTION(RTV Load Status&ConfirmRT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1849941;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Load_Status);
 PARAMETER(LCL.Transloader_Carrier_Code);
 PARAMETER(LCL.Load_Confirmed_Sts);
 PARAMETER(LCL.Load_Confirmed_Contact);
 PARAMETER(LCL.Load_Confirmation_Time);
 PARAMETER(LCL.Load_Confirmation_Fax_Sts);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

  MOVE *ALL (To: PAR From: DB1);

 }

 //?If this is a confirmed load,unconfirm load if needed
 DO;

 //?If confirmed load but the action states to make this a
 //?unconfirmed load, then
 //?Write out the action of Unconfirm and then update the load
 //?with n = load confirmed status, and load confirmed contact
 //?of blanks and load confirmation time = zero
 //?UnConfirm Routine
 CASE;

 // IF LCL.Load Confirmed Sts is yes
 IF LCL.Load_Confirmed_Sts = 'Y';

 // AND PAR.Load Change Type is Un-Confirm Load List
 AND PAR.Load_Change_Type = 'ADDSTP'/'CARCHG'/'CHGSTP'/'CHGWHS'/'DELOAD'/'DELODA'
 /'DELORD'/'LDDLTD'/'CHGLCO'/'RQSDLV'/'ADDORD'/'CANORD'/'SCHSHP'/'SHPCST'/'SHPMTH'
 /'PO#CHG';

 // WRK.Load Confirmed Sts = LCL.Load Confirmed Sts
 WRK.Load_Confirmed_Sts = LCL.Load_Confirmed_Sts;

 // LCL.Load Confirmed Sts = CND.no
 LCL.Load_Confirmed_Sts = 'N';

 EXECUTE FUNCTION(RTV Carrier Broker     RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1475617;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Carrier_Broker_Carrier_Co);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?**************************************************************************
 //?*Comments:
 //?*  The following Retrieve Next Key was added for OMS296.  It was
 //?*  needed when the users wanted to be able to see the orders added
 //?*  and deleted from the Load Change Log.  John Tremper, 10/10/97
 //?**************************************************************************
 EXECUTE FUNCTION(RTV Next Key           RT) TYPE(RTVOBJ) FILE(PDLHCPP)          AC1485145;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Sequence_Number);
 {
  //?USER: Initialize routine

  // PAR.Sequence Number = CON.1
  PAR.Sequence_Number = 1;

  //?USER: Processing if Data record not found

  // PAR.Sequence Number = CON.1
  PAR.Sequence_Number = 1;

  QUIT;

  //?USER: Process Data record

  CASE;

  // IF DB1.Sequence Number is EQ 999
  IF DB1.Sequence_Number = 999;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Sequence Number = DB1.Sequence Number + CON.1
  PAR.Sequence_Number = DB1.Sequence_Number + 1;

  QUIT;

  ENDIF;

 }

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 //?Loop thru to do create
 // DOW PGM.*Return code is *Record already exists
 DOW PGM.*Return_code = 'Y2U0003';

 //?WRITE OUT THE UNCONFIRM RECORD
 // WRK.Load Change Type = CND.Un-Confirm Load
 WRK.Load_Change_Type = 'UNCNFM';

 // WRK.Change Log Prior Value = WRK.Load Confirmed Sts
 WRK.Change_Log_Prior_Value = WRK.Load_Confirmed_Sts;

 // WRK.Change Log New Value = LCL.Load Confirmed Sts
 WRK.Change_Log_New_Value = LCL.Load_Confirmed_Sts;

 EXECUTE FUNCTION(CRT Load/Order Chg Log CR) TYPE(CRTOBJ) FILE(PDLHCPP)          AC1465744;
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 PARAMETER(LCL.Sequence_Number);
 PARAMETER(PAR.Load_ID);
 PARAMETER(DB1.Stop_Drop);
 PARAMETER(WRK.Load_Change_Type);
 PARAMETER(DB1.Department_Control_Code);
 PARAMETER(WRK.Change_Log_Prior_Value);
 PARAMETER(WRK.Change_Log_New_Value);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(LCL.Carrier_Broker_Carrier_Co);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 {
  //?USER: Processing if Data record already exists

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

  //?USER: Processing after Data update

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

 CASE;

 // IF PGM.*Return code is *Record already exists
 IF PGM.*Return_code = 'Y2U0003';

 // LCL.Sequence Number = LCL.Sequence Number + CON.1
 LCL.Sequence_Number = LCL.Sequence_Number + 1;

 ENDIF;

 ENDDO;

 //?Change the Load Header back to a Unconfirmed Load
 //?Now the producer to carrier will need to confirm the load
 //?again
 // LCL.Load Confirmed Contact = CON.*BLANK
 LCL.Load_Confirmed_Contact = *BLANK;

 // LCL.Load Confirmation Time = CON.*ZERO
 LCL.Load_Confirmation_Time = *ZERO;

 EXECUTE FUNCTION(CHG Load Confirm to N  CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1847496;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Load_Confirmed_Sts);
 PARAMETER(LCL.Load_Confirmed_Contact);
 PARAMETER(LCL.Load_Confirmation_Time);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 ENDDO;

 //?History
 DO;

 //?10/03/2007 FP1061 If action is on the Un-Confirm list
 //?           then perform the Un-Confirm on the Load Header
 ENDDO;

}


// LCL.Job Name CDE = JOB.*JOB
LCL.Job_Name_CDE = JOB.*JOB;

// Call program PMT Fax Load Confirmtn PV.
CALL PROGRAM(PMT Fax Load Confirmtn PV) ('POICPVR');
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Company_Number);
PARAMETER(LCL.Transloader_Carrier_Code);
PARAMETER(CTL.USR_Carrier_Code);
PARAMETER(LCL.Shipping_Line);
PARAMETER(LCL.OHE_Carrier_SCAC_Code);
PARAMETER(WRK.Status_Y_or_N);

//?** Flag if this is an SSI PowerPro acceptance event
CASE;

// IF WRK.Load Change Type is SSI Reporting Changes
IF WRK.Load_Change_Type = 'ACCEPT'/'ADDSTP'/'CANORD'/'CARCHG'/'DELODA'/'LDDLTD'/'DELOAD';

// WRK.USR Flag 1 = CND.Yes
WRK.USR_Flag_1 = 'Y';

ENDIF;

//?** Send "Deleted" record if "Download to SSI" is "Yes"
CASE;

// IF WRK.FAX DTL Status 1 is Yes
IF WRK.FAX_DTL_Status_1 = 'Y';

//?** Download to SSI PowerPro if the is an SSI event
CASE;

// IF WRK.USR Flag 1 is Yes
IF WRK.USR_Flag_1 = 'Y';

//?** If "Fax to Carrier" is "Y", see if "Download to SSI" is "Yes"
EXECUTE FUNCTION(RTV SSI Carrier flag   RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1904336;
PARAMETER(CTL.USR_Carrier_Code);
PARAMETER(WRK.SSI_Download_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** If a records was already downloaded to PowerPro, send a "Deleted"
//?** record. If not sent to PowerPro, skip sending another record.
//?** Check "Fax'd to Carrier" flag
CASE;

// IF WRK.SSI Download Flag is Yes, Download to SSI
IF WRK.SSI_Download_Flag = 'Y';

// WRK.SSI Add, Chg, Delete flag = CND.Delete
WRK.SSI_Add_Chg_Delete_flag = 01;

// Call program BLD SSI Download       XF.
CALL PROGRAM(BLD SSI Download       XF) ('PNPNXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.USR_Carrier_Code);
PARAMETER(WRK.SSI_Add_Chg_Delete_flag);

ENDIF;

ENDIF;

ENDIF;

PGM.*Return_code = *BLANK;

RETURN;

ENDIF;

ENDIF;

//?F18=View Order Details
CASE;

// IF CTL.*CMD key is *Order Details
IF CTL.*CMD_key = '18';

//?Only allowed if viewing an order
CASE;

// IF CTL.Order Number NE WRK.ZERO
IF CTL.Order_Number <> WRK.ZERO;

// WRK.Application Code = CND.Order Management System
WRK.Application_Code = 'OMS';

// Call program DSP Ord Inquiry Detail DF.
CALL PROGRAM(DSP Ord Inquiry Detail DF) ('PDPZDFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(WRK.Order_Sequence_Number);
PARAMETER(WRK.Order_Secondary_Line_Seq);

//?Only allowed if viewing an order
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Function not available for this entry'
ERROR(USR1942);

ENDIF;

ENDIF;

//?F20=View Load Entries
CASE;

// IF CTL.*CMD key is CF20
IF CTL.*CMD_key = '20';

// CTL.Order Number = CON.*ZERO
CTL.Order_Number = *ZERO;

// CTL.Stop/Drop = CON.*ZERO
CTL.Stop_Drop = *ZERO;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F19=Toggle View
CASE;

// IF CTL.*CMD key is *View All/New
IF CTL.*CMD_key = '19';

//?reset option
CASE;

// IF PAR.USR View Option is View New
IF PAR.USR_View_Option = 'N';

// PAR.USR View Option = CND.View All
PAR.USR_View_Option = 'A';

// CTL.Created Date = CON.*ZERO
CTL.Created_Date = *ZERO;

// CTL.Created Time = CON.*ZERO
CTL.Created_Time = *ZERO;

// CTL.Sequence Number = CON.*ZERO
CTL.Sequence_Number = *ZERO;

// CTL.Stop/Drop = CON.*ZERO
CTL.Stop_Drop = *ZERO;

// CTL.Order Number = PAR.USR Order Number
CTL.Order_Number = PAR.USR_Order_Number;

// CTL.Stop/Drop = PAR.USR Stop/Drop
CTL.Stop_Drop = PAR.USR_Stop_Drop;

//?reset option
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR View Option = CND.View New
PAR.USR_View_Option = 'N';

// CTL.Order Number = PAR.USR Order Number
CTL.Order_Number = PAR.USR_Order_Number;

// CTL.Stop/Drop = PAR.USR Stop/Drop
CTL.Stop_Drop = PAR.USR_Stop_Drop;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F16=Next Load (exit)
CASE;

// IF CTL.*CMD key is *Next Load
IF CTL.*CMD_key = '16';

PGM.*Return_code = *BLANK;

RETURN;

ENDIF;

//?USER: Exit program processing

CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

PGM.*Return_code = 'Y2U9999';

RETURN;

ENDIF;

