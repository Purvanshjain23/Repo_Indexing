// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMCYE1R
// ?Date: 14.08.2025 Time: 03:42:39
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('I/C');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?** Set to add if any key fields are not passed in
CASE;

// IF PAR.Company Number is Equal to zero
IF PAR.Company_Number = *ZERO;

// OR PAR.Warehouse Type is Equal blank
OR PAR.Warehouse_Type = *BLANK;

// OR PAR.Item Code is Not Entered
OR PAR.Item_Code = *ZERO;

// OR PAR.Customer Number       NBR is equal 0
OR PAR.Customer_Number_NBR = *ZERO;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

ENDIF;

//?USER: Initialize key screen

MOVE *ALL (To: KEY From: PAR);

SET CURSOR;

//?USER: Validate key screen

//?** F4 on Company Number
CASE;

// IF KEY.*CMD key is *Prompt
IF KEY.*CMD_key = '04';

// AND PGM.*Cursor field <IS> KEY.Company Number
AND PGM.*Cursor_field = KEY.Company_Number;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(KEY.Company_Number);

ENDIF;

//?** F4 on Item Code
CASE;

// IF KEY.*CMD key is *Prompt
IF KEY.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> KEY.Item Code
IF PGM.*Cursor_field = KEY.Item_Code;

// Call program Sel Item by Descrip 1  SR.
CALL PROGRAM(Sel Item by Descrip 1  SR) ('PMD7SRR');
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Item_Code);

ENDIF;

ENDIF;

//?** F4 on Customer Number
CASE;

// IF KEY.*CMD key is *Prompt
IF KEY.*CMD_key = '04';

// AND PGM.*Cursor field <IS> KEY.Customer Number       NBR
AND PGM.*Cursor_field = KEY.Customer_Number_NBR;

// Call program SEL Ship To Customer   SR.
CALL PROGRAM(SEL Ship To Customer   SR) ('PDR5SRR');
PARAMETER(KEY.Customer_Number_NBR);

ENDIF;

EXECUTE FUNCTION(Val FG Item Exists    RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1513424;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Item_Code);
PARAMETER(NLL.Description_Line_One);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'Company Item not found.'
ERROR(USR0326);
MSGPARM(KEY.Company_Number);
MSGPARM(KEY.Item_Code);

ENDIF;

//?USER: Initialize detail screen (new record)

MOVE *ALL (To: DTL From: KEY);

SET CURSOR;

EXECUTE FUNCTION(Rtv Descriptions      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1140665;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Item_Code);
PARAMETER(DTL.Item_Description_DRV);
PARAMETER(LCL.Description_Line_Two);
PARAMETER(LCL.UOM_Primary);
PARAMETER(LCL.UOM_Second);
PARAMETER(LCL.UOM_Third);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Company Name Only  RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1100959;
PARAMETER(KEY.Company_Number);
PARAMETER(DTL.Company_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Condition Name 10 USR = Condition name of KEY.Warehouse Type
DTL.Condition_Name_10_USR = RTVCND(KEY.Warehouse_Type);

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(KEY.Customer_Number_NBR);
PARAMETER(DTL.Customer_Name_DRV);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

//?USER: Initialize detail screen (existing record)

SET CURSOR;

EXECUTE FUNCTION(Rtv Descriptions      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1140665;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Item_Code);
PARAMETER(DTL.Item_Description_DRV);
PARAMETER(LCL.Description_Line_Two);
PARAMETER(LCL.UOM_Primary);
PARAMETER(LCL.UOM_Second);
PARAMETER(LCL.UOM_Third);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Company Name Only  RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1100959;
PARAMETER(KEY.Company_Number);
PARAMETER(DTL.Company_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Condition Name 10 USR = Condition name of KEY.Warehouse Type
DTL.Condition_Name_10_USR = RTVCND(KEY.Warehouse_Type);

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(KEY.Customer_Number_NBR);
PARAMETER(DTL.Customer_Name_DRV);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

//?USER: Process key screen request

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

// Send error message - 'Function not allowed.'
ERROR(USR1833);

QUIT;

ENDIF;

//?USER: Delete DBF record

EXECUTE FUNCTION(Delete Transfer Template) TYPE(DLTOBJ) FILE(PMAGREP)           AC1804687;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Warehouse_Type);
PARAMETER(DTL.Customer_Number_NBR);
PARAMETER(DTL.Item_Code);

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Transfer Templ    CR) TYPE(CRTOBJ) FILE(PMAGREP)           AC1804685;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Warehouse_Type);
PARAMETER(DTL.Customer_Number_NBR);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Description);
PARAMETER(DTL.Unused_Number_1);
PARAMETER(DTL.Unused_Date);
PARAMETER(DTL.SSI_Download_Flag);
PARAMETER(DTL.Unused_Text_1);
PARAMETER(DTL.Inventory_Logic_Version);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  //?*** Set RECORD STATUS field. ***
  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  //?*** Set CREATE fields. ***
  // PAR.Create Date = JOB.*Job date
  PAR.Create_Date = JOB.*Job_date;

  // PAR.Create Time = JOB.*Job time
  PAR.Create_Time = JOB.*Job_time;

  // PAR.Create User = JOB.*USER
  PAR.Create_User = JOB.*USER;

  // PAR.Create Program = JOB.*PROGRAM
  PAR.Create_Program = JOB.*PROGRAM;

  //?*** Set CHANGE fields. ***
  // PAR.Change Date = CON.*ZERO
  PAR.Change_Date = *ZERO;

  // PAR.Change Time = CON.*ZERO
  PAR.Change_Time = *ZERO;

  // PAR.Change User = CON.*BLANK
  PAR.Change_User = *BLANK;

  // PAR.Change Program = CON.*BLANK
  PAR.Change_Program = *BLANK;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Transfer Templ    CH) TYPE(CHGOBJ) FILE(PMAGREP)           AC1804686;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Warehouse_Type);
PARAMETER(DTL.Customer_Number_NBR);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Description);
PARAMETER(DTL.Unused_Number_1);
PARAMETER(DTL.Unused_Date);
PARAMETER(DTL.SSI_Download_Flag);
PARAMETER(DTL.Unused_Text_1);
PARAMETER(DTL.Inventory_Logic_Version);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

}


//?USER: Process command keys

MOVE *ALL (To: PAR From: DTL);

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

PGM.*Return_code = *BLANK;

RETURN;

ENDIF;

