      *
      * SYSTEM:      Hog Production
      * PROGRAM:     HP7021
      * TITLE:       View BGF Weekly Wean Projections
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     07/06/04
      *
      * FUNCTION: This View displays the Wean Projection Data for a specific Farm Site and
      *           Report Week/Year.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 10/16/13  LeAnne Ramsey (E2831)
      *           Recompile only. Added field 'MTech Reference'.
      /eject
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhpd7021   cf   e             workstn infds(iofeed)
      *
      *
     Fhsp018    if   e           k disk
      *    Farm site
      *
      *
     Fhsl086a   if   e           k disk
      *    BGF weekly wean projections
      *
      /eject
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D view            c                   'VIEW  '
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D rtncd           s              2
     D action          s                   like(mode)
     D maxmsg          s              2  0  inz(20)
      *
      *
      * Control fields
      *
     D x               s              1  0
      *
      *
      * Work fields for date manipulation
      *
     D wkisodate       s               D   datfmt(*iso)
      *
      *
      * Parm fields
      *
     D xxfscd          s                   like(pwfscd)
     D xxrpwedt        s                   like(pwrpwedt)
     D xxrpwemdy       s                   like(d1rpwemdy)
     D xxrpcdyr        s                   like(pwrpcdyr)
     D xxrpcdwk        s                   like(pwrpcdwk)
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /eject
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /eject
      *----------------------------------------------------------------
      * Set environment for Screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * There will be 2 database records for EACH farm/report week-ending date.
      * So, get them both to populate the screen.
      *
      *
     C     key01         chain     hsl086a                            92
     C                   if        *in92 = *on                                  If not found
     C                   add       1             error
     C                   movel     'HS09008'     mgid(e)
     C                   else
      *
     C     key01         setll     hsl086a
     C                   do        2             x
     C     key01         reade     hsl086a                                92
     C                   if        *in92 = *off
     C                   exsr      $pop1
     C                   endif
     C                   enddo
     C                   endif                                                  If not found
      *
      *
      * Display screen 1
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Populate the Screen 1 fields
      *---------------------------------------------------------------
      *
     C     $pop1         begsr
      *
     C                   select
      * First record
     C                   when      x = 1
      *
     C                   z-add     pwrpcdwk      d1rpcdwk
     C                   z-add     pwrpcdyr      d1rpcdyr
      *
     C                   z-add     pwpwcdwk      d1pwcdwk1
     C                   z-add     pwpwcdyr      d1pwcdyr1
      *
     C     *iso          test(d)                 pwpwwedt               92
     C                   if        *in92 = *off                                 If OK date
     C                   move      pwpwwedt      wkisodate
     C     *mdy          move      wkisodate     d1pwwemdy1
     C                   endif                                                  If OK date
      *
     C                   z-add     pwsupwhd      d1supwhd1
     C                   z-add     pwmopwhd      d1mopwhd1
     C                   z-add     pwtupwhd      d1tupwhd1
     C                   z-add     pwwepwhd      d1wepwhd1
     C                   z-add     pwthpwhd      d1thpwhd1
     C                   z-add     pwfrpwhd      d1frpwhd1
     C                   z-add     pwsapwhd      d1sapwhd1
     C                   z-add     pwtopwhd      d1topwhd1
     C                   z-add     pwpwsohd      d1pwsohd1
     C                   z-add     pwsocuhd      d1socuhd1
     C                   z-add     pwbocuhd      d1bocuhd1
      *
      *
      * Second record
     C                   when      x = 2
     C                   z-add     pwpwcdwk      d1pwcdwk2
     C                   z-add     pwpwcdyr      d1pwcdyr2
      *
     C     *iso          test(d)                 pwpwwedt               92
     C                   if        *in92 = *off                                 If OK date
     C                   move      pwpwwedt      wkisodate
     C     *mdy          move      wkisodate     d1pwwemdy2
     C                   endif                                                  If OK date
      *
     C                   z-add     pwtopwhd      d1topwhd2
     C                   z-add     pwpwsohd      d1pwsohd2
      *
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Perform operator I/O for screen 1
      *---------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to CRT
      *
     C                   write     hp7021k1
     C                   write     hp7021ec
     C                   exfmt     hp7021r1
      *
      * Clear all messages
      *
     C                   exsr      $clmsg
      *
      *
      * Process user's entry and set routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   move      '03'          rtncd
     C                   eval      routne = exit
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   eval      routne = set1
     C                   other
      *
     C                   eval      routne = exit
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redispaly the screen to the user.
      *
     C                   if        *in43 = *on
     C                   movel     set1          routne
     C                   endif
      *
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * $clmsg - clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redispaly the screen to the user.
      *
     C                   if        *in43 = *on
     C                   movel     set1          routne
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * $exit - set on last record indicator and end job
      *----------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
     C     d1fscd        parm                    xxfscd
     C                   parm                    xxrpwedt
     C     d1rpwemdy     parm                    xxrpwemdy
     C     d1rpcdwk      parm                    xxrpcdwk
     C     d1rpcdyr      parm                    xxrpcdyr
     C                   parm                    rtncd
      *
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    xxfscd
     C                   kfld                    xxrpwedt
      *
      * Retrieve Farm Site name
      *
     C     d1fscd        chain     hsp018                             92
     C                   if        *in92 = *off
     C                   eval      d1fsnm = fsfsnm
     C                   else
     C                   eval      d1fsnm = 'Unknown'
     C                   endif
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /eject
