// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PUWXPFR
// ?Date: 14.08.2025 Time: 12:07:05
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?NOTE: Any changes here should consider changing PUWVPFR.
// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

//?3/19/12 E2011 RMC dont print addendum
// PAR.FAX DTL Status 1 = CND.No
PAR.FAX_DTL_Status_1 = 'N';

//?USER: Record selection processing

CASE;

// IF DB1.Record Status is Active
IF DB1.Record_Status = 'A';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Print required level headings

// SUPPRESSED PRINT Company Number header format

// SUPPRESSED PRINT COA ULSD Company # header format

CASE;

IF NEW COA_Batch_Number;
EXECUTE FUNCTION(Rtv COA HUG Info      RT) TYPE(RTVOBJ) FILE(PMCCCPP)           AC2207327;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.COA_ULSD_Company_#);
PARAMETER(CUR.COA_Batch_Number);
PARAMETER(CUR.COA_Active_Whse_Tank);
PARAMETER(LCL.COA_Bio_diesel_Fuel_Code);
PARAMETER(CUR.COA_Specification);
PARAMETER(CUR.COA_RFS_Program_ID);
PARAMETER(LCL.COA_Reviewed_By);
PARAMETER(CUR.COA_Sample_Date);
PARAMETER(CUR.COA_Sample_Time);
PARAMETER(CUR.COA_LIMS_ID);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(PMCAREP)          AC1850788;
PARAMETER(CUR.Company_Number);
PARAMETER(LCL.COA_Bio_diesel_Fuel_Code);
PARAMETER(CUR.COA_Bio_dsl_Fuel_Cd_Descr);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(CUR.COA_Active_Whse_Tank);
PARAMETER(CUR.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


// Print COA Batch Number header format
PRINT COA Batch Number header format;

ENDIF;

// SUPPRESSED PRINT COA Print Sequence header format

// SUPPRESSED PRINT COA Test header format

// SUPPRESSED PRINT COA Property header format

//?USER: Process before print of detail format

//?New for print seq not being page - OF after 45 props printed
CASE;

// IF LCL.Count USR is GT 44
IF LCL.Count_USR > 44;

CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

// PGM.*new page flag = CND.*Yes
PGM.*new_page_flag = 'Y';

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*new page flag = CND.*No
PGM.*new_page_flag = *BLANK;

ENDIF;

ENDIF;

//?USER: On print of detail format

// CUR.COA Test & Property USR = CONCAT(CUR.COA Test,CUR.COA Property,CON.2)
CUR.COA_Test_Property_USR = CUR.COA_Test + CUR.COA_Property (2);

// LCL.Count USR = LCL.Count USR + CON.1
LCL.Count_USR = LCL.Count_USR + 1;

//?USER: Print required level totals

// SUPPRESSED PRINT COA Property totals format

// SUPPRESSED PRINT COA Test totals format

// SUPPRESSED PRINT COA Print Sequence totals format

CASE;

IF NEW COA_Batch_Number;
// Print COA Batch Number totals format
PRINT COA Batch Number totals format;

ENDIF;

// SUPPRESSED PRINT COA ULSD Company # totals format

// SUPPRESSED PRINT Company Number totals format

//?USER: On print of final totals format

// CUR.COA Reviewed By = LCL.COA Reviewed By
CUR.COA_Reviewed_By = LCL.COA_Reviewed_By;

EXECUTE FUNCTION(Rtv Reviewed By Title RT) TYPE(RTVOBJ) FILE(PNGHCPP)           AC2207257;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.COA_ULSD_Company_#);
PARAMETER(PAR.COA_Batch_Number);
PARAMETER(1);
PARAMETER(CUR.COA_Reviewed_By_Title);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


