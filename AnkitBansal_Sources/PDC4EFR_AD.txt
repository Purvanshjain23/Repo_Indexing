// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDC4EFR
// ?Date: 14.08.2025 Time: 03:34:13
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// PAR.Include/Exclude Option = CND.Include
PAR.Include_Exclude_Option = 'INC';

// PAR.USR Update Flag = CND.No
PAR.USR_Update_Flag = *BLANK;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

//?Set up whether to display Co. No. Label
CASE;

// IF PAR.Allow Multi-Company is no
IF PAR.Allow_Multi_Company = 'N';

// AND PGM.*Program mode is *ADD
AND PGM.*Program_mode = 'ADD';

// PAR.USR Display field = CND.no
PAR.USR_Display_field = 'N';

//?Set up whether to display Co. No. Label
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Display field = CND.yes
PAR.USR_Display_field = 'Y';

ENDIF;

//?USER: Initialize subfile header

//?First time processing
CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

//?If company was passed in, use it in CTL, otherwise use Co from userid
CASE;

// IF PAR.Company Number EQ WRK.ZERO
IF PAR.Company_Number = WRK.ZERO;

// CTL.Company Number = WRK.Company Number
CTL.Company_Number = WRK.Company_Number;

// PAR.Company Number = CTL.Company Number
PAR.Company_Number = CTL.Company_Number;

//?If company was passed in, use it in CTL, otherwise use Co from userid
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

ENDIF;

// CTL.Shipping Zone Code = PAR.Shipping Zone Code
CTL.Shipping_Zone_Code = PAR.Shipping_Zone_Code;

ENDIF;

//?Set up whether to display Co. No. Label
CASE;

// IF PAR.Allow Multi-Company is no
IF PAR.Allow_Multi_Company = 'N';

// AND PGM.*Program mode is *ADD
AND PGM.*Program_mode = 'ADD';

// PAR.USR Display field = CND.no
PAR.USR_Display_field = 'N';

//?Set up whether to display Co. No. Label
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Display field = CND.yes
PAR.USR_Display_field = 'Y';

ENDIF;

//?USER: Initialize subfile record (existing record)

//?Must match CTL company
CASE;

// IF CTL.Company Number NE WRK.ZERO
IF CTL.Company_Number <> WRK.ZERO;

// AND CTL.Company Number NE DB1.Company Number
AND CTL.Company_Number <> DB1.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Must match CTL shipping zone
CASE;

// IF CTL.Shipping Zone Code NE WRK.BLANK
IF CTL.Shipping_Zone_Code <> WRK.BLANK;

// AND CTL.Shipping Zone Code NE DB1.Shipping Zone Code
AND CTL.Shipping_Zone_Code <> DB1.Shipping_Zone_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?Must match CTL shipping zone
// IF *OTHERWISE
IF *OTHERWISE;

//?If in show only unassigned mode, exclude records with a zone.
CASE;

// IF PAR.Include/Exclude Option is Exclude
IF PAR.Include_Exclude_Option = 'EXC';

CASE;

// IF DB1.Shipping Zone Code NE WRK.BLANK
IF DB1.Shipping_Zone_Code <> WRK.BLANK;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?USER: Initialize subfile record (new record)

// RCD.Record Status = CND.Active
RCD.Record_Status = 'A';

//?USER: Validate subfile control

//?Prompt on Company
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Company Number
AND PGM.*Cursor_field = CTL.Company_Number;

// Call program SEL Co By Number       SR.
CALL PROGRAM(SEL Co By Number       SR) ('PDMESRR');
PARAMETER(CTL.Company_Number);
PARAMETER(WRK.TXT_field_not_needed);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Process Print Request
CASE;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

// PAR.Company Number Pass   USR = CTL.Company Number
PAR.Company_Number_Pass_USR = CTL.Company_Number;

// Call program PRT Prmt with Co. No.  UP.
CALL PROGRAM(PRT Prmt with Co. No.  UP) ('PDH1UPR');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('OMS');
PARAMETER('PDDBPCLP');
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER('Destination-Zone Listing');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

ENDIF;

//?Reload on Zone change
CASE;

// IF PAR.Shipping Zone Code NE CTL.Shipping Zone Code
IF PAR.Shipping_Zone_Code <> CTL.Shipping_Zone_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PAR.Shipping Zone Code = CTL.Shipping Zone Code
PAR.Shipping_Zone_Code = CTL.Shipping_Zone_Code;

ENDIF;

//?Option to show only unassigned
CASE;

// IF CTL.*CMD key is CF13
IF CTL.*CMD_key = '13';

//?Toggle status flag for showing only unassigned
CASE;

// IF PAR.Include/Exclude Option is Exclude
IF PAR.Include_Exclude_Option = 'EXC';

// PAR.Include/Exclude Option = CND.Include
PAR.Include_Exclude_Option = 'INC';

//?Toggle status flag for showing only unassigned
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Include/Exclude Option = CND.Exclude
PAR.Include_Exclude_Option = 'EXC';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// CTL.Shipping Zone Code = CON.*BLANK
CTL.Shipping_Zone_Code = *BLANK;

ENDIF;

//?USER: Validate subfile record fields

//?Don't edit if Deleting record
CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

// Send information message - 'Delete pending.  Confirm Y or N.'
MESSAGE(USR0597 *INFO);

QUIT;

ENDIF;

// Execute function CVT Str to Upper Alpha US.
EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
PARAMETER(RCD.Destination_City);
PARAMETER(PAR.Destination_City);
{
 PDWEUFR:  PGM PARM(&STRIN &STROUT)

 CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
}


// RCD.Destination City = PAR.Destination City
RCD.Destination_City = PAR.Destination_City;

//?Fill in company number if user only allowed access to one company
CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

// AND PAR.Allow Multi-Company is no
AND PAR.Allow_Multi_Company = 'N';

// RCD.Company Number = CTL.Company Number
RCD.Company_Number = CTL.Company_Number;

ENDIF;

//?Skip blank record on add
CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

// AND RCD.Company Number EQ WRK.ZERO
AND ( RCD.Company_Number = WRK.ZERO;

// OR PAR.Allow Multi-Company is no
OR PAR.Allow_Multi_Company = 'N' );

// AND RCD.Destination City EQ WRK.BLANK
AND RCD.Destination_City = WRK.BLANK;

// AND RCD.State Code EQ WRK.BLANK
AND RCD.State_Code = WRK.BLANK;

// RCD.Company Number = CON.*ZERO
RCD.Company_Number = *ZERO;

// RCD.Record Status = WRK.BLANK
RCD.Record_Status = WRK.BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(CRT PD Destination-ZoneCR) TYPE(CRTOBJ) FILE(PDLUREP)          AC1484040;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.State_Code);
PARAMETER(RCD.Destination_City);
PARAMETER(RCD.Shipping_Zone_Code);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Record_Status);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG PD Destination-ZoneCH) TYPE(CHGOBJ) FILE(PDLUREP)          AC1484041;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.State_Code);
PARAMETER(RCD.Destination_City);
PARAMETER(RCD.Shipping_Zone_Code);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Record_Status);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Extra processing after DBF update

// PAR.USR Update Flag = CND.Yes
PAR.USR_Update_Flag = 'Y';

CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

EXECUTE FUNCTION(DLT PD Destination-ZoneDR) TYPE(DLTOBJ) FILE(PDLUREP)          AC1484042;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.State_Code);
PARAMETER(RCD.Destination_City);

ENDIF;

//?USER: Process command keys

CASE;

// IF PAR.USR Update Flag is Yes
IF PAR.USR_Update_Flag = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

// PAR.USR Update Flag = CND.No
PAR.USR_Update_Flag = *BLANK;

