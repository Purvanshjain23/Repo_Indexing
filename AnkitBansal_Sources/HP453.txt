      *****************  RPG PROGRAM HEADING  ************************
      * SYSTEM:      HOG PRODUCTION
      * PROGRAM:     HP453
      * TITLE:       SPECIFY KILL DATA TO COPY TO HOG PRODUCTION SYSTEM
      * PROGRAMMER:  LEANNE FEDOR
      * CREATED:     09/05/95
      *
      * FUNCTION:    ALLOWS USER TO COPY KILL DATA FROM THE 'HOG
      *              PROCUREMENT AND EVALUATION SYSTEM' TO THE 'HOG
      *              PRODUCTION SYSTEM'.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 02/02/00  LeAnne Fedor
      *           Removed print options (hold, copies, outque, etc.) from screen
      *           and replaced them with a function key that calls the pop-up
      *           window of print options.
      *
      * 12/12/17  Brad Baden   E010812  Mkt Hogs to OTC
      *           Added Plant Code to the screen.  This is because a
      *           plant can have multiple Business Offices.
      *
      *  1/12/18  Brad Baden   E010812  Mkt Hogs to OTC
      *           Changed the submitted job name to 'HPEHPSINT'
      *
      *  2/01/18  Brad Baden   E010812  Mkt Hogs to OTC
      *           Only allow companies 360 and 440 on the screen.
      *           Using Company Values code HPSVALCMP to verify.
      *
      *  6/19/20  Brad Baden   E16649 - HPE to HPS Interface Duplicate Job
      *           Retrieve data area DACOPY value.  Based on Company#,
      *           check the Y/N flag.  If the flag is "Y", do not allow
      *           the user to press F8 to submit the job.  If the flag
      *           is blank, then allow the user to submit the job.
      *
      *           The flag will be reset when program HP453CL completes.
      *
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     FHPD453    CF   E             WORKSTN
     F                                     INFDS(IOFEED)
      *
     FHSP002    IF   E           K DISK
      *    FUNCTIONS                  (KEY: FNFNCD)
      *
     FPDJYREL0  IF   E           K DISK
      *    COMPANY DEFAULTS INTERNAL  (KEY: JYAIC3)
      *
      /EJECT
      ****************************************************************
      * TABLE AND ARRAY SPECIFICATIONS
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  STANDARD MESSAGE ARRAYS
      *---------------------------------------------------------------
      *
      *---------------------------------------------------------------
      *  COMPILE TIME ARRAY FOR SUBMIT JOB COMMAND USED IN QCMDEXC
      *---------------------------------------------------------------
     D CMD             S              1    DIM(80) CTDATA PERRCD(80)
      *
      *---------------------------------------------------------------
      * EDIT/FINAL FLAGS AND DESCRIPTIONS
      *---------------------------------------------------------------
     D EFF             S              1    DIM(2) CTDATA PERRCD(1)              EDIT/FINAL DSC
     D EFD             S             10    DIM(2) ALT(EFF)
      /EJECT
      ****************************************************************
      * INPUT SPECIFICATIONS
      ****************************************************************
      *
      *---------------------------------------------------------------
      * STANDARD ERROR MESSAGE HANDLING DATA STRUCTURES
      *---------------------------------------------------------------
      *
      * FOR ERROR MESSAGE HANDLING, A PACKED INDEX (E) IS REQUIRED.
      * FOR PROGRAM READABILITY, DEFINE A CORRESPONDING ERROR COUNT
      * FIELD CALLED 'ERROR'
      *
     D                 DS                  INZ
     D  ERROR                  1      2P 0
     D  E                      1      2P 0
      *
      * THIS DATA STRUCTURE SUPPLIES THE NAME OF THE MESSAGE FILE TO
      * THE MESSAGE HANDLING CL PROGRAM.  THE FIELD NAME MSGFIL MUST BE
      * CONSTANT. THE VALUE IN QUOTES IS THE NAME OF THE SPECIFIC
      * MESSAGE FILE CONTAINING THE USER DEFINED MESSAGES.
      *
     D                 DS                  INZ
     D  MSGFIL                 1     10    INZ('HSMSGF    ')
      *
      * THE FOLLOWING 3 DATA STRUCTURES ARE USED TO SPEED MESSAGE
      * HANDLING SINCE IT IS FASTER TO CLEAR DATA STRUCTURES THAN
      * ARRAYS.  EACH IS ASSOCIATED WITH A STANDARD MESSAGE ARRAY.
      *
     D MGI             DS           140    INZ
     D  MGID                   1    140
     D                                     DIM(20)                              MSG ID ARRAY
      *
     D MGD             DS          1000    INZ
     D  MGDT                   1   1000
     D                                     DIM(20)                              MSG PARMS
      *
     D MGWK            DS            50    INZ
     D  MGW                    1     50
     D                                     DIM(50)                              MSG WORK PARMS
      *
      *---------------------------------------------------------------
      * STANDARD PROGRAM STATUS DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTPGFR (RECORD FORMAT: PGMDSR)
     D PGMDS         ESDS                  EXTNAME(UTPGFR)
      *
      *---------------------------------------------------------------
      * STANDARD WORKSTATION INFORMATION DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTWSFR (RECORD FORMAT: UTIDFRR)
     D IOFEED        E DS                  EXTNAME(UTWSFR)
      *
      *---------------------------------------------------------------
      * STANDARD DATABASE FILE INFORMATION DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTDBFR (RECORD FORMAT: FDBCKD)
     D DBFEED        E DS                  EXTNAME(UTDBFR)
      *
      *
      *---------------------------------------------------------------
      *  DEFINITION FOR EXTERNAL DATA AREA 'DAAPER' WHICH HOLDS
      *  THE "CURRENT" ACCOUNTING PERIOD
      *---------------------------------------------------------------
     D                 DS
     D  DAAPER                 1     24
     D  DACCYY                 1      4  0
     D  DAPER                  5      6  0
     D  DABPDT                 7     14  0
     D  DAEPDT                15     22  0
     D  DAPGFL                23     23
     D  DAPPFL                24     24
      *
      *---------------------------------------------------------------
      *  Definition for external data area 'DACOPY'. This Data area
      *  contains the Y/N flags for companies 360 and 440.
      *---------------------------------------------------------------
     D                 DS
     D  jobsubmitflag          1     14
     D  co360text              1      4
     D  co360flag              6      6
     D  co440text              9     12
     D  co440flag             14     14
      *
      *---------------------------------------------------------------
      * DATA STRUCTURE FOR DATE
      *---------------------------------------------------------------
      *
      * DATE IN CCYYMMDD FORMAT
      *
     D                 DS
     D  WKCYMD                 1      8  0
     D  WKCEN                  1      2  0
     D  WKYER                  3      4  0
     D  WKMON                  5      6  0
     D  WKDAY                  7      8  0
      *
     D                 DS
     D  WK0YMD                 1      7  0
     D  WKCC                   1      1  0
     D  WKYY                   2      3  0
     D  WKMM                   4      5  0
     D  WKDD                   6      7  0
      *
      *
      *---------------------------------------------------------------
      *  STAND ALONE FIELDS
      *---------------------------------------------------------------
      *
     D  WKRTN                         7A
     D  WKBORI                        1A
      *
      *---------------------------------------------------------------
      *  NAMED CONSTANTS
      *---------------------------------------------------------------
      *
     D CREATE          C                   CONST('CREATE')
     D REVISE          C                   CONST('REVISE')
     D DELETE          C                   CONST('DELETE')
     D VIEW            C                   CONST('VIEW  ')
     D SELECT          C                   CONST('SELECT')
     D YES             C                   CONST('Y')
     D NO              C                   CONST('N')
     D SET1            C                   CONST('SET1  ')
     D EDIT1           C                   CONST('EDIT1 ')
     D SCRN1           C                   CONST('SCRN1 ')
     D EXIT            C                   CONST('EXIT  ')
     D UPDATE          C                   CONST('UPDATE')
     D INTERACTIVE     C                   CONST('I')
      *
      *---------------------------------------------------------------
      *  STANDALONE FIELDS
      *---------------------------------------------------------------
      *
     D wkreturn        s              7
     D wkcmpvalcd      s             10
     D wkcmpvalflag    s              1
     D wkcono          s              3
     D wkeditflag      s              1
     D wksbmjob        s              1
     D wksubmitflag    s              1
      *
      *---------------------------------------------------------------
      *  DAHPSEDIT - Data Area to check if the Edit completed successfully
      *---------------------------------------------------------------
      *
     D hpsedit         DS            25    dtaara(dahpsedit)
     D  editcomp360            1      3
     D  editflag360            6      6
     D  editcomp440           10     12
     D  editflag440           15     15
      *
      *---------------------------------------------------------------
      *  LDA - REPORT OPTIONS
      *---------------------------------------------------------------
      *
     D LDA            UDS
     D  LDKLDT                 1     08  0
     D  LD0YMD                 9     15  0
     D  LDMDY                 16     21  0
     D  LDEFFL                22     22
     D  LDEFDS                23     32
     D  LDPLCD                33     35  0
      *
     D  LDOUTU               401    410
     D  LDHOLD               411    411
     D  LDCOPY               412    412  0
     D  LDOUTQ               413    422
      *
      /EJECT
      ****************************************************************
      * MAIN LINE
      ****************************************************************
      *
     C                   MOVEL     SET1          ROUTNE
      *
     C     *INLR         DOWEQ     *OFF                                         MAIN DO LOOP
      *
     C     ROUTNE        CASEQ     SET1          $SET1
     C     ROUTNE        CASEQ     SCRN1         $SCRN1
     C     ROUTNE        CASEQ     EDIT1         $EDIT1
      *
     C     ROUTNE        CASEQ     EXIT          $EXIT
     C                   ENDCS
     C                   ENDDO                                                  MAIN DO LOOP
      *
      /EJECT
      *----------------------------------------------------------------
      * $SET1 - SUBROUTINE TO SET ENVIRONMENT FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $SET1         BEGSR
      *
     C                   MOVEL     SCRN1         ROUTNE
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $SCRN1 - SUBROUTINE TO PERFORM OPERATOR I/O FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $SCRN1        BEGSR
      *
      * WRITE THE ERROR MESSAGES FROM THE ERROR ARRAYS TO THE
      * ERROR MESSAGE SUBFILE
      *
     C                   EXSR      $WRMSG
      *
      * WRITE SCREEN 1 TO CRT
      *
     C                   WRITE     HP453K1
     C                   WRITE     HP453EC
     C                   EXFMT     HP453R1
      *
      * CLEAR THE MESSAGES FROM THE MESSAGE DATA STRUCTURES AND PROGRAM
      * MESSAGE QUEUE.
      *
     C                   EXSR      $CLMSG
      *
      * GET USER'S ENTRY AND SET THE NEXT ROUTINE
      *
     C                   SELECT
     C     *IN03         WHENEQ    *ON                                          F3-EXIT
     C     TERMFL        OREQ      YES                                          BAD USER
     C                   MOVEL     EXIT          ROUTNE
      *
     C     *IN17         WHENEQ    *ON                                          F17-PRINT OPT
     C                   MOVEL     SCRN1         ROUTNE
     C                   CALL      'HP451'
     C                   PARM                    SDPGM
     C     LDCOPY        PARM      LDCOPY        XXCOPY
     C                   PARM                    LDHOLD
     C                   PARM                    LDOUTQ
     C                   PARM                    XXNITE
     C                   PARM                    XXJOBQ
      *
     C     *IN20         WHENEQ    *ON                                          F20-WRKSPLF
     C                   CALL      'UTWRKSPL'
     C                   MOVEL     SCRN1         ROUTNE
      *
     C     *IN04         WHENEQ    *ON                                          F4-PROMPT
     C                   EXSR      $F4S1
     C                   MOVEL     SCRN1         ROUTNE
     C                   OTHER
      *
     C                   MOVEL     EDIT1         ROUTNE
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $EDIT1 - SUBROUTINE TO EDIT INPUT FIELDS FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $EDIT1        BEGSR
      *
      * VERIFY THAT A PLANT CODE IS ENTERED
      *
     C     DFPLCD        IFEQ      0                                            IF NO PLANT
     C                   SETON                                        34
     C     ERROR         IFLT      MAXMSG                                       IF ERROR
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09001'     MGID(E)
     C                   EVAL      *IN36 = *OFF
     C                   ENDIF                                                  FI ERROR
     C                   ELSE
      *
      * VERIFY THAT THE PLANT CODE IS VALID
      *
     C     DFPLCD        CHAIN     PDJYREL0
     C                   IF        NOT %FOUND(PDJYREL0)                         IF NOT %FOUND
     C                   EVAL      *IN34 = *ON
     C     ERROR         IFLT      MAXMSG                                       IF ERROR
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09261'     MGID(E)
     C                   EVAL      *IN36 = *OFF
     C                   ENDIF                                                  FI ERROR
     C                   else
      *
      ** Validate plant is in Company Value HPSVALPLT
     C                   eval      wkcmpvalcd = 'HPSVALCMP'
     C                   call      'PDGKXFR'
     C                   parm                    wkreturn
     C                   parm                    dfplcd
     C                   parm                    wkcmpvalcd
     C                   parm                    wkcmpvalflag
      *
     C                   if        wkcmpvalflag <> yes                          if wkcmpvalflag
     C                   eval      *in34 = *on
     C     error         iflt      maxmsg                                       if error
     C                   add       1             error
     C                   movel     'HS09270'     mgid(e)
     C                   eval      *in36 = *off
     C                   endif                                                  fi error
     c                   else
      *
      * Check job submitted flag
      *
     c                   select
     c                   when      dfplcd = 360
     c                   if        co360flag = 'Y'
     c                   eval      wksbmjob = 'N'                               submit NO
     c                   endif                                                  fi co360job = 'Y'
      *
     c                   when      dfplcd = 440
     c                   if        co440flag = 'Y'
     c                   eval      wksbmjob = 'N'                               submit NO
     c                   endif                                                  fi co440job = 'Y'
      *
     c                   endsl
      *
     c                   if        wksbmjob = 'N'
     C                   eval      *in34 = *on
     C     error         iflt      maxmsg                                       if error
     C                   add       1             error
     C                   movel     'HS09276'     mgid(e)
     C                   eval      *in36 = *off
     C                   endif                                                  fi error
     c                   endif                                                  fi wksbmjob = 'N'
      *
     C                   endif                                                  fi wkcmpvalflag
      *
     C                   ENDIF                                                  FI NOT %FOUND
     C                   ENDIF                                                  FI NO PLANT
      *
      * VERIFY THAT A DATE IS ENTERED
      *
     C     DFMDY         IFEQ      0                                            IF NO DATE
     C                   SETON                                        32
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09001'     MGID(E)
     C                   ENDIF
     C                   ELSE
      *
      * VERIFY THAT THE DATE IS VALID
      *
     C                   Z-ADD     DFMDY         PFRM8
     C                   Z-ADD     0             PTO8
     C                   MOVEL     'MDY '        PFRFMT
     C                   MOVEL     'CYMD'        PTOFMT
     C                   Z-ADD     0             PDAYS
     C                   MOVE      *BLANK        PCODE
     C                   MOVE      *BLANK        PRTRN
      *
     C                   EXSR      $DATE
      *
     C     PRTRN         IFNE      *BLANK                                       IF INVALID
     C                   SETON                                        32
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09004'     MGID(E)
     C                   EVAL      *IN36 = *OFF
     C                   ENDIF
     C                   ENDIF                                                  IF INVALID
     C                   ENDIF                                                  IF NO DATE
      *
      * IF DATE IS VALID,
      *    CHECK THAT IT IS NOT IN A CLOSED PERIOD
      *
     C     *IN32         IFEQ      *OFF                                         IF GOOD DATE
     C     PTO8          ANDLT     DABPDT
     C                   SETON                                        32
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09007'     MGID(E)
     C                   EVAL      *IN36 = *OFF
     C                   ENDIF
     C                   ENDIF                                                  IF GOOD DATE
      *
      * VERIFY THAT EITHER EDIT OR FINAL WAS SELECTED
      *
     C                   Z-ADD     1             X                 2 0
     C     DFEFFL        LOOKUP    EFF(X)                                 90
     C     *IN90         IFEQ      *ON                                          IF FOUND
     C                   MOVEL     EFD(X)        DFEFDS
     C                   ELSE
     C                   MOVE      *BLANK        DFEFDS
     C                   SETON                                        33
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09107'     MGID(E)
     C                   EVAL      *IN36 = *OFF
     C                   ENDIF
     C                   ENDIF                                                  IF FOUND
      *
      ** Check if the Edit has already run successfuly
      *
     C                   eval      wkcono = %char(dfplcd)
     C                   if        dfeffl = 'E'                                 if dfeffl = E
      *
      ** Retrieve edit flag from data area DAHPSEDIT
     C                   in        hpsedit
      *
     C                   select
     C                   when      wkcono = editcomp360
     C                   eval      wkeditflag = editflag360
      *
     C                   when      wkcono = editcomp440
     C                   eval      wkeditflag = editflag440
     C                   endsl
      *
      ** If the edit flag is 'E', the edit has already complete successfully.
      ** User cannot run another edit until the final post is run.  The edit
      ** flag will be set to blank after the final post is completed.
     C                   if        wkeditflag = 'E'                             if wkeditflag = E
     C                   eval      *in33 = *on
     C                   if        error < maxmsg                               if error < maxmsg
     C                   eval      error += 1
     C                   movel     'HS09271'     mgid(e)
     C                   eval      *in36 = *off
     C                   endif                                                  fi error < maxmsg
     C                   endif                                                  fi wkeditflag = E
      *
     C                   endif                                                  fi dfeffl = E
      *
      ** Check if warning message can be displayed and validated
      *
     C                   EXSR      $WRNMSG
      *
      * IF THERE ARE NO ERRORS, EXECUTE THE SUBROUTINE TO PROCESS THE
      * USERS REQUEST
      *
     C     ERROR         IFEQ      0
     C     *IN44         IFEQ      *OFF
     C                   SETON                                        44
     C                   ELSE
     C                   EXSR      $PROC1
     C                   ENDIF
     C                   ELSE
     C                   SETOFF                                       44
     C                   ENDIF
      *
     C                   MOVEL     SCRN1         ROUTNE
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $WRNMSG - DISPLAY AND VALIDATE WARNING MESSAGE
      *---------------------------------------------------------------
      *
     C     $WRNMSG       BEGSR
      *
     C                   IF        ERROR = 0                                    IF ERROR
      *
     C                   EVAL      DFPLT = DFPLCD
      *
      * Display the confirmation message if not already displayed
     C     *IN36         IFEQ      *OFF                                         IF *IN36
     C                   EVAL      ERROR = 1                                    SKIP SUBMIT
     C                   EVAL      *IN36 = *ON                                  DISPLAY MESSAGE
     C                   ELSE
      *
     C                   SELECT
      *
      * If Yes/No flag is No, turn off message and skip submit
     C                   WHEN      DFYESNO = NO
     C                   EVAL      *IN36 = *OFF
     C                   EVAL      ERROR = 1                                    SKIP SUBMIT
     C                   EVAL      DFYESNO = *BLANK
      *
      * If Yes/No flag is blank, send message-value required
     C                   WHEN      DFYESNO = *BLANK
     C                   EVAL      *IN35 = *ON
     C     ERROR         IFLT      MAXMSG                                       IF ERROR
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09001'     MGID(E)
     C                   ENDIF                                                  FI ERROR
      *
      * If Yes/No flag is not Y and not N, send message-invalid value
     C                   WHEN      DFYESNO <> 'Y' AND
     C                             DFYESNO <> 'N'
     C                   EVAL      *IN35 = *ON
     C     ERROR         IFLT      MAXMSG                                       IF ERROR
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09006'     MGID(E)
     C                   ENDIF                                                  FI ERROR
     C                   ENDSL
     C                   ENDIF                                                  FI *IN36
     C                   ENDIF                                                  FI ERROR
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $SEC   - CALL SECURITY PROGRAM
      *---------------------------------------------------------------
      *
     C     $SEC          BEGSR
      *
      * SETUP THE FIELDS TO SEND INTO THE SECURITY PROGRAM
      *
     C                   MOVEL     WKFNCD        INFNCD                         PGM NAME
     C                   MOVE      *BLANK        INBOBO                         SCREEN BO
      *
     C                   MOVE      *BLANK        OUBOBO                         BO CODE
     C                   MOVE      *BLANK        OUBODS                         BO DESC
     C                   MOVE      *BLANK        OUDVCD                         FUNCTION DIV
     C                   MOVEL     NO            TERMFL            1            TERMINAL FLG
      *
     C                   CALL      'HPSEC  '
      **** IN
     C                   PARM                    MGID                           MSGID ARRAY
     C                   PARM                    MGDT                           MSGDTA DATA
     C                   PARM                    ERROR                          # OF ERRORS
     C                   PARM                    INFNCD           10            FUNC CODE
     C                   PARM                    INBOBO            5            BO CODE
     C                   PARM                    INDVFL            1            CHECK DIV?
     C                   PARM                    INBOFL            1            CHECK B.O.?
      **** OUT
     C                   PARM                    OUBOBO            5            BO CODE
     C                   PARM                    OUBODS           30            BO DESC.
     C                   PARM                    OUDVCD            5            DIV CODE
     C                   PARM                    SECFL             1            SEC FLAG
     C                   PARM                    OUBOFL            1            BO ERRFLG
     C                   PARM                    OURMFL            1
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $PROC1 - SUBROUTINE TO PROCESS THE USER'S REQUEST
      *---------------------------------------------------------------
      *
     C     $PROC1        BEGSR
      *
      *  IF USER TOOK F8=SUBMIT EDIT/FINAL
      *
      *
      * THE HOG PROCUREMENT AND EVALUATION SYSTEM CARRIES
      * DATES AS 7,0 NUMERIC FIELDS WITH THE FIRST DIGIT BEING
      * 0=20TH CENTURY OR 1=21ST CENTURY.
      * EXAMPLE: 0951225 FOR CHRISTMAS IN 1995 AND
      *           1951225 FOR CHRISTMAS IN 2095
      * SO, GET THE KILL DATE THE USER ENTERED INTO THIS FORMAT USING
      * A DATA STRUCTURE.
      *
     C     *IN08         IFEQ      *ON                                          IF F8
      *
      * Set the appropriate job submitted flag to yes in DACOPY
      *
     c                   eval      wksubmitflag = ' '
     c                   select
     c                   when      dfplcd = 360 and co360flag = *blank
     c                   eval      co360flag = 'Y'
     c                   eval      wksubmitflag = 'Y'
      *
     c                   when      dfplcd = 440 and co440flag = *blank
     c                   eval      co440flag = 'Y'
     c                   eval      wksubmitflag = 'Y'
     c                   endsl
      *
      * If submit flag is Yes, continue processing
      *
     c                   if        wksubmitflag = 'Y'                           if wksubmitflag = 'Y
     c                   out       jobsubmitflag
      *
     C                   Z-ADD     PTO8          WKCYMD
     C                   Z-ADD     WKYER         WKYY
     C                   Z-ADD     WKMON         WKMM
     C                   Z-ADD     WKDAY         WKDD
     C     WKCEN         IFEQ      19
     C                   Z-ADD     0             WKCC
     C                   ELSE
     C                   Z-ADD     1             WKCC
     C                   ENDIF
     C                   Z-ADD     WK0YMD        LD0YMD
      *
      * PLACE OPTIONS INTO LOCAL DATA AREA AND OUTPUT AREA
      *
     C                   Z-ADD     DFMDY         LDMDY
     C                   Z-ADD     PTO8          LDKLDT
     C                   MOVEL     DFEFFL        LDEFFL
     C                   MOVEL     DFEFDS        LDEFDS
     C                   Z-ADD     DFPLCD        LDPLCD
      *
     C                   OUT       LDA
      *
     C                   MOVEL     DFEFFL        LDEFFL
     C                   MOVEL     DFEFDS        LDEFDS
     C                   Z-ADD     DFPLCD        LDPLCD
      *
     C                   OUT       LDA
      *
      *
      * MOVE THE 80-CHARACTER COMPILE TIME ARRAY 'CMD' TO AN
      * 80-CHARACTER FIELD FOR PASSING AS A PARM WITH QCMDEXC.
      *
     C                   if        wkbori = interactive
     C                   call      'HP453CL'
     C                   else
     C                   MOVEA     XXJOBQ        CMD(51)
     C                   MOVEA     CMD           CMDSBM
      *
     C                   CALL      'QCMDEXC'
     C                   PARM                    CMDSBM
     C                   PARM                    LENGTH
     C                   endif
      *
      * ISSUE STANDARD REQUEST SUBMISSION MESSAGE
      *
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09003'     MGID(E)
      *
     c                   else
      *
      * Otherwile return to process step
      *
     c                   eval      routne = edit1
     C                   endif                                                  fi submitflag = 'Y'
     C                   ENDIF                                                  IF F8
      *
     C                   ENDSR
      /EJECT
      ****************************************************************
      * $F4S1 - F4 PROMPT ON SCREEN 1
      ****************************************************************
      *
     C     $F4S1         BEGSR
      *
     C                   SELECT
      *
      * IF EDIT/FINAL FLAG
      *
     C     FLD           WHENEQ    'DFEFFL'
     C                   MOVE      *BLANK        XXEFFL
     C                   MOVE      *BLANK        XXEFDS
     C                   CALL      'HP525'
     C                   PARM                    XXEFFL
     C                   PARM                    XXEFDS
     C                   SETON                                        52
     C     XXEFFL        IFNE      *BLANK                                       IF SELECTED
     C                   MOVEL     XXEFFL        DFEFFL
     C                   MOVEL     XXEFDS        DFEFDS
     C                   ENDIF                                                  IF SELECTED
     C                   OTHER
      *
      * F4 NOT VALID FOR THIS FIELD SO ISSUE MESSAGE
      *
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09011'     MGID(E)
     C                   ENDIF
      *
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      ****************************************************************
      * $DATE -  MANIPULATE DATES WITH DATE UTILITY
      ****************************************************************
      *
     C     $DATE         BEGSR
      *
     C                   CALL      'UT80060R'
     C                   PARM                    PFRM8             8 0
     C                   PARM                    PTO8              8 0
     C                   PARM                    PFRFMT            4
     C                   PARM                    PTOFMT            4
     C                   PARM                    PDAYS             4 0
     C                   PARM                    PCODE             1
     C                   PARM                    PRTRN             1
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $WRMSG - SUBROUTINE TO WRITE ERROR MESSAGES
      *---------------------------------------------------------------
      *
     C     $WRMSG        BEGSR
      *
     C                   CALL      'UT80045J'                           43
     C                   PARM                    MGID
     C                   PARM                    MGDT
     C                   PARM                    ERROR
     C                   PARM      SDPGM         PGM
     C                   PARM      MSGFIL        MSGFL
      *
      * IF CALL TO UT80045J FAILED, A MESSAGE HARDCODED IN THE DSPF
      * COMMAND KEY RECORD WILL BE SET ON. SO, REDISPLAY SCREEN TO USER
      *
     C     *IN43         IFEQ      *ON
     C                   MOVEL     SET1          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      *
      *----------------------------------------------------------------
      * $CLMSG - SUBROUTINE TO CLEAR MESSAGES
      *----------------------------------------------------------------
      *
     C     $CLMSG        BEGSR
      *
     C                   CALL      'UT80045J'                           43
     C                   PARM      *BLANK        MGI
     C                   PARM      *BLANK        MGD
     C                   PARM      *ZEROS        ERROR
     C                   PARM      SDPGM         PGM
     C                   PARM      MSGFIL        MSGFL
      *
      * IF CALL TO UT80045J FAILED, A MESSAGE HARDCODED IN THE DSPF
      * COMMAND KEY RECORD WILL BE SET ON. SO, REDISPLAY SCREEN TO USER
      *
     C     *IN43         IFEQ      *ON
     C                   MOVEL     SET1          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      *
      *----------------------------------------------------------------
      * $EXIT - SUBROUTINE TO SET ON LR AND END JOB
      *----------------------------------------------------------------
      *
     C     $EXIT         BEGSR
     C                   SETON                                        LR
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * *INZSR - INITIALIZATION SUBROUTINE
      *---------------------------------------------------------------
      *
     C     *INZSR        BEGSR
      *
      * KEY LISTS
      *
      * PARM LISTS
     C     key01         plist
     C                   parm                    dfplcd
     C                   parm                    wkcmpvalcd
     C                   parm                    wkcmpvalflag
      *
      * Define HPE to HPS data area
     C     *dtaara       define    dacopy        jobsubmitflag
     C     *lock         in        jobsubmitflag
      *
      * DEFINE LDA
     C     *DTAARA       DEFINE    *LDA          LDA
     C                   IN        LDA
      *
      * Initialize LDA fields for printing
      *
     C                   MOVE      *BLANK        LDHOLD
     C                   Z-ADD     0             LDCOPY
     C                   MOVEL     LDOUTU        LDOUTQ
     C                   MOVEL     '*JOBD'       XXJOBQ           10
     C                   MOVEL     NO            XXNITE            1
     C                   Z-ADD     0             XXCOPY            1 0
      *
      *
      * GET THIS FUNCTION'S NUMBER OF COPIES, HOLD YES/NO
      *
     C     SDPGM         CHAIN     HSP002                             92
     C     *IN92         IFEQ      *OFF
     C                   Z-ADD     FNCOPY        LDCOPY
     C                   MOVEL     FNHOLD        LDHOLD
     C                   ENDIF
      *
     C     LDCOPY        IFEQ      0
     C                   Z-ADD     1             LDCOPY
     C                   ENDIF
      *
     C     LDHOLD        IFEQ      *BLANK
     C                   MOVEL     NO            LDHOLD
     C                   ENDIF
      *
      * GLOBAL DEFINES
      *
     C                   MOVE      *BLANK        PGM              10            USED IN MSG
     C                   MOVE      *BLANK        MSGFL            10            USED IN MSG
     C                   MOVE      *BLANK        ROUTNE            6
     C                   MOVEL     '00'          RTNCD             2            RETURN CODE
      *
      * ALPHA PARM FIELDS
      *
     C     *LIKE         DEFINE    DFEFFL        XXEFFL
     C     *LIKE         DEFINE    DFEFDS        XXEFDS
     C     *LIKE         DEFINE    DFPLCD        XXPLCD
      *
      *  PARMS FOR USE WITH QCMDEXC.  'LENGTH' IS THE LENGTH OF THE
      *  COMMAND THAT WILL BE ISSUED WITH QCMDEXC.  QCMDEXC REQUIRES
      *  THE FIELD CONTAINING LENGTH TO BE DEFINED AS 15 WITH 5 DECIMAL
      *  POSITIONS.  THE FIELD 'CMDSBM' WILL HOLD THE VALUES OF THE
      *  THE SUBMIT JOB COMMAND WHEN PASSED AS A PARM ON THE CALL TO
      *  QCMDEXC.
      *
     C                   Z-ADD     80            LENGTH           15 5          QCMDEXC PARM
     C                   MOVE      *BLANK        CMDSBM           80            QCMDEXC PARM
      *
      * BRING IN THE DATA AREA THAT CONTAINS THE CURRENT ACCOUNTING
      * PERIOD
      *
     C     *DTAARA       DEFINE                  DAAPER
     C                   IN        daaper
      *
      * THE FOLLOWING STANDARD CODE MUST BE INCLUDED TO MAKE THE
      * STANDARD ERROR MESSAGE HANDLING PROGRAM FUNCTION PROPERLY.
      * THIS CODE SETS AND CLEARS THE PROGRAM MESSAGE QUEUE.
      *
     C                   Z-ADD     20            MAXMSG            2 0
     C                   MOVEL     '*'           MSGPGM                         SET QUEUE
     C                   EXSR      $CLMSG                                       CLEAR MSG
      *
      * EXECUTE THE SECURITY SUBROUTINE TO DETERMINE USER
      * AUTHORIZATIONS.
      *
     C                   MOVEL(P)  'HP453'       WKFNCD           10
     C                   EXSR      $SEC
      *
      * IF ERRORS ON INITIAL CALL, SET TERMINAL FLAG TO YES.
      *
     C     SECFL         IFEQ      YES
     C                   MOVEL     YES           TERMFL
     C                   ENDIF
      *
      * wkbori is used to run the HP453CL ininteractively or as a submitted
      * job.  If you need to run it under debug, change the line below to
     C* eval wkbori = interactive
      *
     C                   eval      wkbori = ' '
     C*                  eval      wkbori = interactive
      *
     C                   ENDSR
      /EJECT
      *****************************************************************
      * COMPILE TIME ARRAY NAMED 'CMD' USED IN QCMDEXC
      *****************************************************************
** QCMD TABLE
SBMJOB CMD(CALL PGM(HP453CL)) JOB(HPEHPSINT) JOBQ(__________)
** EFF
EEDIT
FFINAL
