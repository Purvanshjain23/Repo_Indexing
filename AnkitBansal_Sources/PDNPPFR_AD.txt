// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDNPPFR
// ?Date: 14.08.2025 Time: 12:04:10
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('C/S');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// PAR.USR Display 1 = CND.No
PAR.USR_Display_1 = 'N';

//?USER: Record selection processing

//?RST: Item Type Code
CASE;

// IF PAR.Item Type Code is Entered
IF PAR.Item_Type_Code <> *BLANK;

// AND PAR.Item Type Code NE DB1.Item Type Code
AND PAR.Item_Type_Code <> DB1.Item_Type_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?RST: Variety/Rendered/Cut
CASE;

// IF PAR.Variety/Rendered/Cut is Valid Entries
IF PAR.Variety_Rendered_Cut = 'C'/'R'/'V';

// AND PAR.Variety/Rendered/Cut NE DB1.Variety/Rendered/Cut
AND PAR.Variety_Rendered_Cut <> DB1.Variety_Rendered_Cut;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?RST: Base/Converted/Fab/Loss
CASE;

// IF PAR.Converted/Base Item is Valid Entries
IF PAR.Base_Conv_Loss_Item = 'B'/'C'/'F'/'L';

// AND PAR.Converted/Base Item NE DB1.Converted/Base Item
AND PAR.Base_Conv_Loss_Item <> DB1.Base_Conv_Loss_Item;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?RST: Catch Weight Status
CASE;

// IF PAR.Catch Weight Status is Y/N Values
IF PAR.Catch_Weight_Status = 'N'/'Y';

// AND PAR.Catch Weight Status NE DB1.Catch Weight Status
AND PAR.Catch_Weight_Status <> DB1.Catch_Weight_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?RST: Case Ready Status
CASE;

// IF PAR.Case Ready Status is Y/N Values
IF PAR.Frozen_Make_to_Order_Sts = 'N'/'Y';

// AND PAR.Case Ready Status NE DB1.Case Ready Status
AND PAR.Frozen_Make_to_Order_Sts <> DB1.Frozen_Make_to_Order_Sts;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?RST: Credit Item Status
CASE;

// IF PAR.Credit Item Status is Y/N Values
IF PAR.Credit_Item_Status = 'N'/'Y';

// AND PAR.Credit Item Status NE DB1.Credit Item Status
AND PAR.Credit_Item_Status <> DB1.Credit_Item_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?RST: Seconds Item
CASE;

// IF PAR.Seconds Item is Entered
IF PAR.Seconds_Item = 'N'/'Y';

// AND PAR.Seconds Item NE DB1.Seconds Item
AND PAR.Seconds_Item <> DB1.Seconds_Item;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?RST: Item Structure Class
CASE;

// IF PAR.Item Structure Class Code is Entered
IF PAR.Item_Structure_Class_Code <> *ZERO;

// AND PAR.Item Structure Class Code NE DB1.Item Structure Class Code
AND PAR.Item_Structure_Class_Code <> DB1.Item_Structure_Class_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?RST: Record Status
CASE;

// IF PAR.Record Status is Valid Entries
IF PAR.Record_Status = 'A'/'D'/'I';

// AND PAR.Record Status NE DB1.Record Status
AND PAR.Record_Status <> DB1.Record_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process before print of first page format

MOVE *ALL (To: 1PG From: PAR);

//?Item Type Code
CASE;

// IF 1PG.Item Type Code is Entered
IF X1PG_Item_Type_Code <> *BLANK;

// 1PG.Condition Desc. 2  USR = Condition name of 1PG.Item Type Code
X1PG_Condition_Desc_2_USR = RTVCND(X1PG_Item_Type_Code);

//?Item Type Code
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Condition Desc. 2  USR = CON.*ALL
X1PG_Condition_Desc_2_USR = *ALL;

ENDIF;

//?Variety/Rendered/Cut
CASE;

// IF 1PG.Variety/Rendered/Cut is Valid Entries
IF X1PG_Variety_Rendered_Cut = 'C'/'R'/'V';

// 1PG.Condition Desc. 3  USR = Condition name of 1PG.Variety/Rendered/Cut
X1PG_Condition_Desc_3_USR = RTVCND(X1PG_Variety_Rendered_Cut);

//?Variety/Rendered/Cut
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Condition Desc. 3  USR = CON.*ALL
X1PG_Condition_Desc_3_USR = *ALL;

ENDIF;

//?Base/Converted/Fab/Loss
CASE;

// IF 1PG.Converted/Base Item is Valid Entries
IF X1PG_Base_Conv_Loss_Item = 'B'/'C'/'F'/'L';

// 1PG.Condition Desc. 4  USR = Condition name of 1PG.Converted/Base Item
X1PG_Condition_Desc_4_USR = RTVCND(X1PG_Base_Conv_Loss_Item);

//?Base/Converted/Fab/Loss
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Condition Desc. 4  USR = CON.*ALL
X1PG_Condition_Desc_4_USR = *ALL;

ENDIF;

//?Catch Weight Status
CASE;

// IF 1PG.Catch Weight Status is Y/N Values
IF X1PG_Catch_Weight_Status = 'N'/'Y';

// 1PG.Condition Desc. 5  USR = Condition name of 1PG.Catch Weight Status
X1PG_Condition_Desc_5_USR = RTVCND(X1PG_Catch_Weight_Status);

//?Catch Weight Status
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Condition Desc. 5  USR = CON.*ALL
X1PG_Condition_Desc_5_USR = *ALL;

ENDIF;

//?Case Ready Status
CASE;

// IF 1PG.Case Ready Status is Y/N Values
IF X1PG_Frozen_Make_to_Order_Sts = 'N'/'Y';

// 1PG.Condition Desc. 6  USR = Condition name of 1PG.Case Ready Status
X1PG_Condition_Desc_6_USR = RTVCND(X1PG_Frozen_Make_to_Order_Sts);

//?Case Ready Status
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Condition Desc. 6  USR = CON.*ALL
X1PG_Condition_Desc_6_USR = *ALL;

ENDIF;

//?Credit Item Status
CASE;

// IF 1PG.Credit Item Status is Y/N Values
IF X1PG_Credit_Item_Status = 'N'/'Y';

// 1PG.Condition Desc. 7  USR = Condition name of 1PG.Credit Item Status
X1PG_Condition_Desc_7_USR = RTVCND(X1PG_Credit_Item_Status);

//?Credit Item Status
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Condition Desc. 7  USR = CON.*ALL
X1PG_Condition_Desc_7_USR = *ALL;

ENDIF;

//?Seconds Item
CASE;

// IF 1PG.Seconds Item is Entered
IF X1PG_Seconds_Item = 'N'/'Y';

// 1PG.Condition Desc. 8  USR = Condition name of 1PG.Seconds Item
X1PG_Condition_Desc_8_USR = RTVCND(X1PG_Seconds_Item);

//?Seconds Item
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Condition Desc. 8  USR = CON.*ALL
X1PG_Condition_Desc_8_USR = *ALL;

ENDIF;

//?Item Structure Class
CASE;

// IF 1PG.Item Structure Class Code is Entered
IF X1PG_Item_Structure_Class_Code <> *ZERO;

EXECUTE FUNCTION(Rtv Item Class Desc    RT) TYPE(RTVOBJ) FILE(OMFAREP)          AC1205440;
PARAMETER(X1PG_Item_Structure_Class_Code);
PARAMETER(X1PG_Item_Structure_Class_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Item Structure Class
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Item Structure Class Desc = CON.*ALL
X1PG_Item_Structure_Class_Desc = *ALL;

ENDIF;

//?Record Status
CASE;

// IF 1PG.Record Status is Valid Entries
IF X1PG_Record_Status = 'A'/'D'/'I';

// 1PG.Condition Desc. 1  USR = Condition name of 1PG.Record Status
X1PG_Condition_Desc_1_USR = RTVCND(X1PG_Record_Status);

//?Record Status
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Condition Desc. 1  USR = CON.*ALL
X1PG_Condition_Desc_1_USR = *ALL;

ENDIF;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// PAR.USR Display 1 = CND.Yes
PAR.USR_Display_1 = 'Y';

