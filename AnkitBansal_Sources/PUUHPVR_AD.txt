// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PUUHPVR
// ?Date: 14.08.2025 Time: 03:51:24
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('C/S');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.USR Program mode Calendar = CND.Build Date Values
PAR.USR_Program_mode_Calendar = 1;

//?USER: Load screen

EXECUTE FUNCTION(RTV Company Name Only  RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1100959;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.USR_Company_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Status Flag 1  Y/N = CND.No
DTL.Status_Flag_1_Y_N = 'N';

// DTL.Status Flag 2  Y/N = CND.No
DTL.Status_Flag_2_Y_N = 'N';

// DTL.Status Flag 3  Y/N = CND.No
DTL.Status_Flag_3_Y_N = 'N';

// DTL.Status Flag 4  Y/N = CND.no
DTL.Status_Flag_4_Y_N = 'N';

// DTL.Week Number = CON.1
DTL.Week_Number = 1;

// DTL.Accounting Period = CON.1
DTL.Accounting_Period = 1;

//?USER: Validate fields

EXECUTE FUNCTION(RTV Company Name Only  RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1100959;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.USR_Company_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Set Up From & To Date / Beginning Week & Ending Week
DO;

// WRK.USR Accounting Year Alpha = CVTVAR(DTL.Accounting Year)
WRK.USR_Accounting_Year_Alpha = CVTVAR(DTL.Accounting_Year);

// WRK.USR Year Alpha = SUBSTRING(WRK.USR Accounting Year Alpha,CON.3,CON.2)
WRK.USR_Year_Alpha = SUBSTRING(WRK.USR_Accounting_Year_Alpha:3:2);

// WRK.USR Job Year = CVTVAR(WRK.USR Year Alpha)
WRK.USR_Job_Year = CVTVAR(WRK.USR_Year_Alpha);

//?From Date
// WRK.USR From Date Numeric = CON.*ZERO
WRK.USR_From_Date_Numeric = *ZERO;

// Retrieve message - '&1&2&3'
WRK.USR_Date_Alpha = RTVMSG(USR2434);
PARAMETER(WRK.USR_Year_Alpha);
PARAMETER(01);
PARAMETER(01);

// WRK.USR From Date Numeric = CVTVAR(WRK.USR Date Alpha)
WRK.USR_From_Date_Numeric = CVTVAR(WRK.USR_Date_Alpha);

//?Next Century
CASE;

// IF WRK.USR Job Year is LT 40
IF WRK.USR_Job_Year < 40;

// WRK.USR From Date Numeric = WRK.USR From Date Numeric + CON.1000000
WRK.USR_From_Date_Numeric = WRK.USR_From_Date_Numeric + 1000000;

ENDIF;

// DTL.USR From Date = WRK.USR From Date Numeric
DTL.USR_From_Date = WRK.USR_From_Date_Numeric;

// DTL.USR Week Beginning Date = WRK.USR From Date Numeric
DTL.USR_Week_Beginning_Date = WRK.USR_From_Date_Numeric;

//?To Date
// WRK.USR From Date Numeric = CON.*ZERO
WRK.USR_From_Date_Numeric = *ZERO;

// Retrieve message - '&1&2&3'
WRK.USR_Date_Alpha = RTVMSG(USR2434);
PARAMETER(WRK.USR_Year_Alpha);
PARAMETER(12);
PARAMETER(31);

// WRK.USR From Date Numeric = CVTVAR(WRK.USR Date Alpha)
WRK.USR_From_Date_Numeric = CVTVAR(WRK.USR_Date_Alpha);

//?Next Century
CASE;

// IF WRK.USR Job Year is LT 40
IF WRK.USR_Job_Year < 40;

// WRK.USR From Date Numeric = WRK.USR From Date Numeric + CON.1000000
WRK.USR_From_Date_Numeric = WRK.USR_From_Date_Numeric + 1000000;

ENDIF;

// DTL.USR Through Date = WRK.USR From Date Numeric
DTL.USR_Through_Date = WRK.USR_From_Date_Numeric;

//?Week Ending (Saturday)
// WRK.Day of Week (SYN) USR = DTL.USR From Date *DAY OF WEEK
WRK.Day_of_Week_SYN_USR = DATEDTLS(DTL.USR_From_Date 'DW' 1111111 'NONE' 'N' 1);

//?Set Up Week Ending Date
CASE;

// IF WRK.Day of Week (SYN) USR is Monday
IF WRK.Day_of_Week_SYN_USR = 1;

// DTL.USR Week Ending Date = DTL.USR Week Beginning Date + CON.5 *DAYS
DTL.USR_Week_Ending_Date = DATEINCR(DTL.USR_Week_Beginning_Date 5 'DY' 1111111 'NONE'              +
'N' 1);

//?Set Up Week Ending Date
// IF WRK.Day of Week (SYN) USR is Tuesday
IF WRK.Day_of_Week_SYN_USR = 2;

// DTL.USR Week Ending Date = DTL.USR Week Beginning Date + CON.4 *DAYS
DTL.USR_Week_Ending_Date = DATEINCR(DTL.USR_Week_Beginning_Date 4 'DY' 1111111 'NONE'              +
'N' 1);

//?Set Up Week Ending Date
// IF WRK.Day of Week (SYN) USR is Wednesday
IF WRK.Day_of_Week_SYN_USR = 3;

// DTL.USR Week Ending Date = DTL.USR Week Beginning Date + CON.3 *DAYS
DTL.USR_Week_Ending_Date = DATEINCR(DTL.USR_Week_Beginning_Date 3 'DY' 1111111 'NONE'              +
'N' 1);

//?Set Up Week Ending Date
// IF WRK.Day of Week (SYN) USR is Thursday
IF WRK.Day_of_Week_SYN_USR = 4;

// DTL.USR Week Ending Date = DTL.USR Week Beginning Date + CON.2 *DAYS
DTL.USR_Week_Ending_Date = DATEINCR(DTL.USR_Week_Beginning_Date 2 'DY' 1111111 'NONE'              +
'N' 1);

//?Set Up Week Ending Date
// IF WRK.Day of Week (SYN) USR is Friday
IF WRK.Day_of_Week_SYN_USR = 5;

// DTL.USR Week Ending Date = DTL.USR Week Beginning Date + CON.1 *DAYS
DTL.USR_Week_Ending_Date = DATEINCR(DTL.USR_Week_Beginning_Date 1 'DY' 1111111 'NONE'              +
'N' 1);

//?Set Up Week Ending Date
// IF WRK.Day of Week (SYN) USR is Saturday
IF WRK.Day_of_Week_SYN_USR = 6;

// DTL.USR Week Ending Date = DTL.USR Week Beginning Date
DTL.USR_Week_Ending_Date = DTL.USR_Week_Beginning_Date;

//?Set Up Week Ending Date
// IF WRK.Day of Week (SYN) USR is Sunday
IF WRK.Day_of_Week_SYN_USR = 7;

// DTL.USR Week Ending Date = DTL.USR Week Beginning Date + CON.6 *DAYS
DTL.USR_Week_Ending_Date = DATEINCR(DTL.USR_Week_Beginning_Date 6 'DY' 1111111 'NONE'              +
'N' 1);

ENDIF;

ENDDO;

//?Edit through date to be greater than from date
//?Val:  Through Date
CASE;

// IF DTL.USR From Date GT DTL.USR Through Date
IF DTL.USR_From_Date > DTL.USR_Through_Date;

// Send error message - 'Through date must be greater than the from date'
ERROR(USR0032);

ENDIF;

//?Validate From date
DO;

EXECUTE FUNCTION(RTV Calendar           RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1102049;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.USR_From_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.Calendar not found
 PGM.*Return_code = 'USR0018';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Error if in build mode
CASE;

// IF PAR.USR Program mode Calendar is Build mode
IF PAR.USR_Program_mode_Calendar = 'B';

// Send error message - 'From Date already exists'
ERROR(USR1784);
MSGPARM(DTL.USR_From_Date);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?Error if in change mode
CASE;

// IF PAR.USR Program mode Calendar is Update Acct. Per. Values
IF PAR.USR_Program_mode_Calendar = '3';

// Send error message - 'From date not found; Select Build option'
ERROR(USR1786);
MSGPARM(DTL.USR_From_Date);

ENDIF;

ENDIF;

ENDDO;

//?Validate Thru date
DO;

EXECUTE FUNCTION(RTV Calendar           RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1102049;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.USR_Through_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.Calendar not found
 PGM.*Return_code = 'USR0018';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Error if in build mode
CASE;

// IF PAR.USR Program mode Calendar is Build mode
IF PAR.USR_Program_mode_Calendar = 'B';

// Send error message - 'Through Date already exists'
ERROR(USR1785);
MSGPARM(DTL.USR_Through_Date);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?Error if in change mode
CASE;

// IF PAR.USR Program mode Calendar is Update Acct. Per. Values
IF PAR.USR_Program_mode_Calendar = '3';

// Send error message - 'Through date not found'
ERROR(USR1787);
MSGPARM(DTL.USR_Through_Date);

ENDIF;

ENDIF;

ENDDO;

//?Edit 1st week ending date cannot be less than 1st week starting date
//?Val:  Week Beginning Date
CASE;

// IF DTL.USR Week Beginning Date GT DTL.USR Week Ending Date
IF DTL.USR_Week_Beginning_Date > DTL.USR_Week_Ending_Date;

// Send error message - 'First Week Ending Date cannot be before First Week Starting Date'
ERROR(USR1790);
MSGPARM(DTL.USR_Week_Beginning_Date);
MSGPARM(DTL.USR_Week_Ending_Date);

ENDIF;

//?Val:  Holiday Day Dates
CASE;

// IF DTL.USR Day 1 is GT Zero
IF DTL.USR_Day_1 > *ZERO;

// AND DTL.USR Day 1 LT DTL.USR From Date
AND ( DTL.USR_Day_1 < DTL.USR_From_Date;

// OR DTL.USR Day 1 GT DTL.USR Through Date
OR DTL.USR_Day_1 > DTL.USR_Through_Date );

// Send error message - '&1 Must Be Between &2 And &3'
ERROR(USR2248);
MSGPARM(DTL.USR_Day_1);
MSGPARM(DTL.USR_From_Date);
MSGPARM(DTL.USR_Through_Date);

//?Val:  Holiday Day Dates
// IF DTL.USR Day 2 is GT Zero
IF DTL.USR_Day_2 > *ZERO;

// AND DTL.USR Day 2 LT DTL.USR From Date
AND ( DTL.USR_Day_2 < DTL.USR_From_Date;

// OR DTL.USR Day 2 GT DTL.USR Through Date
OR DTL.USR_Day_2 > DTL.USR_Through_Date );

// Send error message - '&1 Must Be Between &2 And &3'
ERROR(USR2248);
MSGPARM(DTL.USR_Day_2);
MSGPARM(DTL.USR_From_Date);
MSGPARM(DTL.USR_Through_Date);

//?Val:  Holiday Day Dates
// IF DTL.USR Day 3 is GT Zero
IF DTL.USR_Day_3 > *ZERO;

// AND DTL.USR Day 3 LT DTL.USR From Date
AND ( DTL.USR_Day_3 < DTL.USR_From_Date;

// OR DTL.USR Day 3 GT DTL.USR Through Date
OR DTL.USR_Day_3 > DTL.USR_Through_Date );

// Send error message - '&1 Must Be Between &2 And &3'
ERROR(USR2248);
MSGPARM(DTL.USR_Day_3);
MSGPARM(DTL.USR_From_Date);
MSGPARM(DTL.USR_Through_Date);

//?Val:  Holiday Day Dates
// IF DTL.USR Day 4 is GT Zero
IF DTL.USR_Day_4 > *ZERO;

// AND DTL.USR Day 4 LT DTL.USR From Date
AND ( DTL.USR_Day_4 < DTL.USR_From_Date;

// OR DTL.USR Day 4 GT DTL.USR Through Date
OR DTL.USR_Day_4 > DTL.USR_Through_Date );

// Send error message - '&1 Must Be Between &2 And &3'
ERROR(USR2248);
MSGPARM(DTL.USR_Day_4);
MSGPARM(DTL.USR_From_Date);
MSGPARM(DTL.USR_Through_Date);

//?Val:  Holiday Day Dates
// IF DTL.USR Day 5 is GT Zero
IF DTL.USR_Day_5 > *ZERO;

// AND DTL.USR Day 5 LT DTL.USR From Date
AND ( DTL.USR_Day_5 < DTL.USR_From_Date;

// OR DTL.USR Day 5 GT DTL.USR Through Date
OR DTL.USR_Day_5 > DTL.USR_Through_Date );

// Send error message - '&1 Must Be Between &2 And &3'
ERROR(USR2248);
MSGPARM(DTL.USR_Day_5);
MSGPARM(DTL.USR_From_Date);
MSGPARM(DTL.USR_Through_Date);

//?Val:  Holiday Day Dates
// IF DTL.USR Day 6 is GT Zero
IF DTL.USR_Day_6 > *ZERO;

// AND DTL.USR Day 6 LT DTL.USR From Date
AND ( DTL.USR_Day_6 < DTL.USR_From_Date;

// OR DTL.USR Day 6 GT DTL.USR Through Date
OR DTL.USR_Day_6 > DTL.USR_Through_Date );

// Send error message - '&1 Must Be Between &2 And &3'
ERROR(USR2248);
MSGPARM(DTL.USR_Day_6);
MSGPARM(DTL.USR_From_Date);
MSGPARM(DTL.USR_Through_Date);

//?Val:  Holiday Day Dates
// IF DTL.USR Day 7 is GT Zero
IF DTL.USR_Day_7 > *ZERO;

// AND DTL.USR Day 7 LT DTL.USR From Date
AND ( DTL.USR_Day_7 < DTL.USR_From_Date;

// OR DTL.USR Day 7 GT DTL.USR Through Date
OR DTL.USR_Day_7 > DTL.USR_Through_Date );

// Send error message - '&1 Must Be Between &2 And &3'
ERROR(USR2248);
MSGPARM(DTL.USR_Day_7);
MSGPARM(DTL.USR_From_Date);
MSGPARM(DTL.USR_Through_Date);

//?Val:  Holiday Day Dates
// IF DTL.USR Day 8 is GT Zero
IF DTL.USR_Day_8 > *ZERO;

// AND DTL.USR Day 8 LT DTL.USR From Date
AND ( DTL.USR_Day_8 < DTL.USR_From_Date;

// OR DTL.USR Day 8 GT DTL.USR Through Date
OR DTL.USR_Day_8 > DTL.USR_Through_Date );

// Send error message - '&1 Must Be Between &2 And &3'
ERROR(USR2248);
MSGPARM(DTL.USR_Day_8);
MSGPARM(DTL.USR_From_Date);
MSGPARM(DTL.USR_Through_Date);

ENDIF;

//?Century must be entered for year
CASE;

// IF DTL.Accounting Year is Less than 1900
IF DTL.Accounting_Year < 1900;

// Send error message - 'Century must be entered for the accounting year.'
ERROR(USR2429);
MSGPARM(DTL.Accounting_Year);

ENDIF;

//?USER: Validate relations

// WRK.USR Year = DTL.USR From Date *YEAR
WRK.USR_Year = DATEDTLS(DTL.USR_From_Date 'YR' 1111111 'NONE' 'N' 1);

// WRK.@Year Code = DTL.USR Through Date *YEAR
WRK.@Year_Code = DATEDTLS(DTL.USR_Through_Date 'YR' 1111111 'NONE' 'N' 1);

CASE;

// IF WRK.USR Year NE WRK.@Year Code
IF WRK.USR_Year <> WRK.@Year_Code;

// Send information message - 'WARNING!  You've entered dates in multiple years'
MESSAGE(USR1791 *INFO);

ENDIF;

//?USER: User defined action

// Call program EXC Maint Cal (12 Pr) XF.
CALL PROGRAM(EXC Maint Cal (12 Pr) XF) ('PDUSXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Accounting_Year);
PARAMETER(DTL.Accounting_Period);
PARAMETER(DTL.Week_Number);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(DTL.HPS_PIC_Date);
PARAMETER(DTL.HPS_Calendar_Year);
PARAMETER(DTL.HPS_Calendar_Week);
PARAMETER(DTL.USR_From_Date);
PARAMETER(DTL.USR_Through_Date);
PARAMETER(PAR.USR_Program_mode_Calendar);
PARAMETER(DTL.USR_Week_Beginning_Date);
PARAMETER(DTL.USR_Week_Ending_Date);
PARAMETER(DTL.Status_Flag_1_Y_N);
PARAMETER(DTL.Status_Flag_2_Y_N);
PARAMETER(DTL.Status_Flag_3_Y_N);
PARAMETER(DTL.Status_Flag_4_Y_N);
PARAMETER(DTL.USR_Day_1);
PARAMETER(DTL.USR_Day_2);
PARAMETER(DTL.USR_Day_3);
PARAMETER(DTL.USR_Day_4);
PARAMETER(DTL.USR_Day_5);
PARAMETER(DTL.USR_Day_6);
PARAMETER(DTL.USR_Day_7);
PARAMETER(DTL.USR_Day_8);

// DTL.USR From Date = CON.*ZERO
DTL.USR_From_Date = *ZERO;

// DTL.USR Through Date = CON.*ZERO
DTL.USR_Through_Date = *ZERO;

// DTL.Accounting Year = CON.*ZERO
DTL.Accounting_Year = *ZERO;

// DTL.USR Week Beginning Date = CON.*ZERO
DTL.USR_Week_Beginning_Date = *ZERO;

// DTL.USR Week Ending Date = CON.*ZERO
DTL.USR_Week_Ending_Date = *ZERO;

// DTL.USR Day 1 = CON.*ZERO
DTL.USR_Day_1 = *ZERO;

// DTL.USR Day 2 = CON.*ZERO
DTL.USR_Day_2 = *ZERO;

// DTL.USR Day 3 = CON.*ZERO
DTL.USR_Day_3 = *ZERO;

// DTL.USR Day 4 = CON.*ZERO
DTL.USR_Day_4 = *ZERO;

// DTL.USR Day 5 = CON.*ZERO
DTL.USR_Day_5 = *ZERO;

// DTL.USR Day 6 = CON.*ZERO
DTL.USR_Day_6 = *ZERO;

// DTL.USR Day 7 = CON.*ZERO
DTL.USR_Day_7 = *ZERO;

// DTL.USR Day 8 = CON.*ZERO
DTL.USR_Day_8 = *ZERO;

