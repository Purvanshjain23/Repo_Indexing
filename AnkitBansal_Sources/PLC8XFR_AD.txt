// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLC8XFR
// ?Date: 14.08.2025 Time: 02:53:48
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?H16853 ISE 11/05/2020-Recompiled due to change in Buy Order Number
//?Calculate wait times between points for entered dates/times
EXECUTE FUNCTION(Rtv/Chg Wait per DT   RT) TYPE(RTVOBJ) FILE(PLAFCPP)           AB1253312;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.DSH_Kill_Date);
PARAMETER(PAR.DT_Delivery_Date);
PARAMETER(PAR.DT_Delivery_Time);
PARAMETER(PAR.DT_Delivery_Time_Seq);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Clc Wait Time per DT  IF) TYPE(EXCINTFUN)                      AB1253685;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.DSH_Kill_Date);
 PARAMETER(DB1.DT_Delivery_Date);
 PARAMETER(DB1.DT_Delivery_Time);
 PARAMETER(DB1.DT_Delivery_Time_Seq);
 PARAMETER(DB1.DT_Actual_Kill_Date);
 PARAMETER(DB1.DT_Actual_Delivery_Hour);
 PARAMETER(DB1.DT_Scheduled_Hour);
 PARAMETER(DB1.DT_Delivery_Initiation);
 PARAMETER(DB1.DT_Farm_Site_Code);
 PARAMETER(DB1.DT_Building);
 PARAMETER(DB1.DT_Room);
 PARAMETER(DB1.DT_Sire_Line_Code);
 PARAMETER(DB1.DT_Hog_Group_Reference);
 PARAMETER(DB1.DT_Delivered_Head);
 PARAMETER(DB1.DT_Delivered_Weight_lbs);
 PARAMETER(DB1.DT_Trucker_Code_HPS);
 PARAMETER(DB1.DT_Driver);
 PARAMETER(DB1.DT_Loading_Crew);
 PARAMETER(DB1.CHR_Code);
 PARAMETER(DB1.DT_Load_Type);
 PARAMETER(DB1.DT_Full_Split_Load);
 PARAMETER(DB1.DT_Movement_Number);
 PARAMETER(DB1.DT_Truck_ID);
 PARAMETER(DB1.DT_Trailer_ID);
 PARAMETER(DB1.DT_Transportation_Office);
 PARAMETER(DB1.DT_Transprtn_Office_Date);
 PARAMETER(DB1.DT_Transprtn_Office_Time);
 PARAMETER(DB1.DT_Arrive@Frm_v_StartLd);
 PARAMETER(DB1.DT_On_Time_Farm_Arrvl_Sts);
 PARAMETER(DB1.DT_Route_Start_Pnt);
 PARAMETER(DB1.DT_Route_Start_Date);
 PARAMETER(DB1.DT_Route_Start_Time);
 PARAMETER(DB1.DT_Route_Start_Variance);
 PARAMETER(DB1.DT_Wait_@_Transp_Offc_Tm);
 PARAMETER(DB1.DT_Arrive_@_Farm_Date);
 PARAMETER(DB1.DT_Arrive_@_Farm_Time);
 PARAMETER(DB1.DT_Drive_Time_To_Farm);
 PARAMETER(DB1.DT_Start_Loading_Date);
 PARAMETER(DB1.DT_Start_Loading_Time);
 PARAMETER(DB1.DT_Start_Loading_Variance);
 PARAMETER(DB1.DT_Wait_@_Farm);
 PARAMETER(DB1.DT_Frm_End_Loading_Date);
 PARAMETER(DB1.DT_Frm_End_Loading_Time);
 PARAMETER(DB1.DT_Load_Time);
 PARAMETER(DB1.DT_Leave_Farm_Date);
 PARAMETER(DB1.DT_Leave_Farm_Time);
 PARAMETER(DB1.DT_Wait_Depart_Frm);
 PARAMETER(DB1.DT_Plt_TrkWsh_Arvl_Date);
 PARAMETER(DB1.DT_Plt_TrkWsh_Arvl_Time);
 PARAMETER(DB1.DT_Arrive_@_Plant_Date);
 PARAMETER(DB1.DT_Arrive_@_Plant_Time);
 PARAMETER(DB1.DT_Wait_@_TrkWsh);
 PARAMETER(DB1.DT_Drive_Time_To_Plant);
 PARAMETER(DB1.DT_Delv_Time_Variance);
 PARAMETER(DB1.DT_On_Time_Delivery);
 PARAMETER(DB1.Delivery_Reason_Code);
 PARAMETER(DB1.DT_TrkScl_Weigh_In_Date);
 PARAMETER(DB1.DT_TrkScl_Weigh_In_Time);
 PARAMETER(DB1.DT_Wait_@_TrkScl);
 PARAMETER(DB1.DT_To_Recv_Dock_Date);
 PARAMETER(DB1.DT_To_Recv_Dock_Time);
 PARAMETER(DB1.DT_Wait_Rcv_Dock);
 PARAMETER(DB1.DT_Start_Unloading_Date);
 PARAMETER(DB1.DT_Start_Unloading_Time);
 PARAMETER(DB1.DT_Wait_@_Rcv_Dock);
 PARAMETER(DB1.DT_End_Unload_Date);
 PARAMETER(DB1.DT_End_Unload_Time);
 PARAMETER(DB1.DT_Unload_Time);
 PARAMETER(DB1.DT_Unload_Variance_Time);
 PARAMETER(DB1.DT_TrkScl_Weigh_Out_Date);
 PARAMETER(DB1.DT_TrkScl_Weigh_Out_Time);
 PARAMETER(DB1.DT_Wait_Time_@_the_Plant);
 PARAMETER(DB1.DT_Formula_Wait_Tm_@_Plt);
 PARAMETER(DB1.DT_Source_Type);
 PARAMETER(DB1.DT_GATE_UPDATE_YES);
 PARAMETER(DB1.DT_Unused_Date);
 PARAMETER(DB1.DT_Unused_Time);
 PARAMETER(DB1.DT_Unused_Wait_Time);
 PARAMETER(DB1.DT_Error_Sts);
 PARAMETER(DB1.DT_Error_Reason);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.SR_Source_Code);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  //?-------------- Farm ---------------
  EXECUTE FUNCTION(Clc Time Durations    IF) TYPE(EXCINTFUN)                      AB1247954;
  PARAMETER(PAR.DT_Route_Start_Date);
  PARAMETER(PAR.DT_Route_Start_Time);
  PARAMETER(PAR.DT_Arrive_@_Farm_Date);
  PARAMETER(PAR.DT_Arrive_@_Farm_Time);
  PARAMETER(LCL.DT_Drive_Time_To_Farm);
  {
   //?Execute internal function

   // PAR.Wait Time 4.0 USR = CON.*ZERO
   PAR.Wait_Time_4_0_USR = *ZERO;

   CASE;

   // IF PAR.Date Beg USR is Entered
   IF PAR.Date_Beg_USR <> *ZERO;

   // AND PAR.Date End USR is Entered
   AND PAR.Date_End_USR <> 0;

   // AND PAR.Time Beg 4.0 USR is Entered
   AND PAR.Time_Beg_4_0_USR <> *ZERO;

   // AND PAR.Time End 4.0 USR is Entered
   AND PAR.Time_End_4_0_USR <> *ZERO;

   // LCL.Time Beg USR = PAR.Time Beg 4.0 USR * CON.100 *
   LCL.Time_Beg_USR = PAR.Time_Beg_4_0_USR * 100;

   // LCL.Time End USR = PAR.Time End 4.0 USR * CON.100 *
   LCL.Time_End_USR = PAR.Time_End_4_0_USR * 100;

   CASE;

   // IF PAR.Date Beg USR LT PAR.Date End USR
   IF PAR.Date_Beg_USR < PAR.Date_End_USR;

   // LCL.Number 1 USR = PAR.Date End USR - PAR.Date Beg USR *DAYS
   LCL.Number_1_USR = DURATION(PAR.Date_End_USR PAR.Date_Beg_USR 'DY' 1111111 'NONE' 'N' 1);

   // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
   LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

   // LCL.Time End USR = LCL.Time End USR + LCL.Usr Elapsed hours
   LCL.Time_End_USR = LCL.Time_End_USR + LCL.Usr_Elapsed_hours;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Number 1 USR = PAR.Date Beg USR - PAR.Date End USR *DAYS
   LCL.Number_1_USR = DURATION(PAR.Date_Beg_USR PAR.Date_End_USR 'DY' 1111111 'NONE' 'N' 1);

   // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
   LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

   // LCL.Time Beg USR = LCL.Time Beg USR + LCL.Usr Elapsed hours
   LCL.Time_Beg_USR = LCL.Time_Beg_USR + LCL.Usr_Elapsed_hours;

   ENDIF;

   // LCL.Time Diff Usr = LCL.Time End USR - LCL.Time Beg USR *HHMMSS
   LCL.Time_Diff_Usr = TIMELAPSED(LCL.Time_End_USR LCL.Time_Beg_USR 'HS');

   // LCL.Hours USR = LCL.Time Diff Usr *HOURS
   LCL.Hours_USR = TIMEDTLS(LCL.Time_Diff_Usr 'HR');

   // LCL.Minutes USR = LCL.Time Diff Usr *MINUTES
   LCL.Minutes_USR = TIMEDTLS(LCL.Time_Diff_Usr 'MN');

   // LCL.Wait Time 4.0 USR = LCL.Hours USR * CON.60 *
   LCL.Wait_Time_4_0_USR = LCL.Hours_USR * 60;

   // PAR.Wait Time 4.0 USR = LCL.Wait Time 4.0 USR + LCL.Minutes USR
   PAR.Wait_Time_4_0_USR = LCL.Wait_Time_4_0_USR + LCL.Minutes_USR;

   CASE;

   // IF LCL.Time Diff Usr is lt 0
   IF LCL.Time_Diff_Usr < *ZERO;

   // PAR.Wait Time 4.0 USR = CON.*ZERO - PAR.Wait Time 4.0 USR
   PAR.Wait_Time_4_0_USR = *ZERO - PAR.Wait_Time_4_0_USR;

   ENDIF;

   ENDIF;

  }

  EXECUTE FUNCTION(Clc Time Durations    IF) TYPE(EXCINTFUN)                      AB1247954;
  PARAMETER(PAR.DT_Arrive_@_Farm_Date);
  PARAMETER(PAR.DT_Arrive_@_Farm_Time);
  PARAMETER(PAR.DT_Start_Loading_Date);
  PARAMETER(PAR.DT_Start_Loading_Time);
  PARAMETER(LCL.DT_Wait_@_Farm);
  {
   //?Execute internal function

   // PAR.Wait Time 4.0 USR = CON.*ZERO
   PAR.Wait_Time_4_0_USR = *ZERO;

   CASE;

   // IF PAR.Date Beg USR is Entered
   IF PAR.Date_Beg_USR <> *ZERO;

   // AND PAR.Date End USR is Entered
   AND PAR.Date_End_USR <> 0;

   // AND PAR.Time Beg 4.0 USR is Entered
   AND PAR.Time_Beg_4_0_USR <> *ZERO;

   // AND PAR.Time End 4.0 USR is Entered
   AND PAR.Time_End_4_0_USR <> *ZERO;

   // LCL.Time Beg USR = PAR.Time Beg 4.0 USR * CON.100 *
   LCL.Time_Beg_USR = PAR.Time_Beg_4_0_USR * 100;

   // LCL.Time End USR = PAR.Time End 4.0 USR * CON.100 *
   LCL.Time_End_USR = PAR.Time_End_4_0_USR * 100;

   CASE;

   // IF PAR.Date Beg USR LT PAR.Date End USR
   IF PAR.Date_Beg_USR < PAR.Date_End_USR;

   // LCL.Number 1 USR = PAR.Date End USR - PAR.Date Beg USR *DAYS
   LCL.Number_1_USR = DURATION(PAR.Date_End_USR PAR.Date_Beg_USR 'DY' 1111111 'NONE' 'N' 1);

   // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
   LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

   // LCL.Time End USR = LCL.Time End USR + LCL.Usr Elapsed hours
   LCL.Time_End_USR = LCL.Time_End_USR + LCL.Usr_Elapsed_hours;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Number 1 USR = PAR.Date Beg USR - PAR.Date End USR *DAYS
   LCL.Number_1_USR = DURATION(PAR.Date_Beg_USR PAR.Date_End_USR 'DY' 1111111 'NONE' 'N' 1);

   // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
   LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

   // LCL.Time Beg USR = LCL.Time Beg USR + LCL.Usr Elapsed hours
   LCL.Time_Beg_USR = LCL.Time_Beg_USR + LCL.Usr_Elapsed_hours;

   ENDIF;

   // LCL.Time Diff Usr = LCL.Time End USR - LCL.Time Beg USR *HHMMSS
   LCL.Time_Diff_Usr = TIMELAPSED(LCL.Time_End_USR LCL.Time_Beg_USR 'HS');

   // LCL.Hours USR = LCL.Time Diff Usr *HOURS
   LCL.Hours_USR = TIMEDTLS(LCL.Time_Diff_Usr 'HR');

   // LCL.Minutes USR = LCL.Time Diff Usr *MINUTES
   LCL.Minutes_USR = TIMEDTLS(LCL.Time_Diff_Usr 'MN');

   // LCL.Wait Time 4.0 USR = LCL.Hours USR * CON.60 *
   LCL.Wait_Time_4_0_USR = LCL.Hours_USR * 60;

   // PAR.Wait Time 4.0 USR = LCL.Wait Time 4.0 USR + LCL.Minutes USR
   PAR.Wait_Time_4_0_USR = LCL.Wait_Time_4_0_USR + LCL.Minutes_USR;

   CASE;

   // IF LCL.Time Diff Usr is lt 0
   IF LCL.Time_Diff_Usr < *ZERO;

   // PAR.Wait Time 4.0 USR = CON.*ZERO - PAR.Wait Time 4.0 USR
   PAR.Wait_Time_4_0_USR = *ZERO - PAR.Wait_Time_4_0_USR;

   ENDIF;

   ENDIF;

  }

  EXECUTE FUNCTION(Clc Time Durations    IF) TYPE(EXCINTFUN)                      AB1247954;
  PARAMETER(PAR.DT_Start_Loading_Date);
  PARAMETER(PAR.DT_Start_Loading_Time);
  PARAMETER(PAR.DT_Leave_Farm_Date);
  PARAMETER(PAR.DT_Leave_Farm_Time);
  PARAMETER(LCL.DT_Load_Time);
  {
   //?Execute internal function

   // PAR.Wait Time 4.0 USR = CON.*ZERO
   PAR.Wait_Time_4_0_USR = *ZERO;

   CASE;

   // IF PAR.Date Beg USR is Entered
   IF PAR.Date_Beg_USR <> *ZERO;

   // AND PAR.Date End USR is Entered
   AND PAR.Date_End_USR <> 0;

   // AND PAR.Time Beg 4.0 USR is Entered
   AND PAR.Time_Beg_4_0_USR <> *ZERO;

   // AND PAR.Time End 4.0 USR is Entered
   AND PAR.Time_End_4_0_USR <> *ZERO;

   // LCL.Time Beg USR = PAR.Time Beg 4.0 USR * CON.100 *
   LCL.Time_Beg_USR = PAR.Time_Beg_4_0_USR * 100;

   // LCL.Time End USR = PAR.Time End 4.0 USR * CON.100 *
   LCL.Time_End_USR = PAR.Time_End_4_0_USR * 100;

   CASE;

   // IF PAR.Date Beg USR LT PAR.Date End USR
   IF PAR.Date_Beg_USR < PAR.Date_End_USR;

   // LCL.Number 1 USR = PAR.Date End USR - PAR.Date Beg USR *DAYS
   LCL.Number_1_USR = DURATION(PAR.Date_End_USR PAR.Date_Beg_USR 'DY' 1111111 'NONE' 'N' 1);

   // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
   LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

   // LCL.Time End USR = LCL.Time End USR + LCL.Usr Elapsed hours
   LCL.Time_End_USR = LCL.Time_End_USR + LCL.Usr_Elapsed_hours;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Number 1 USR = PAR.Date Beg USR - PAR.Date End USR *DAYS
   LCL.Number_1_USR = DURATION(PAR.Date_Beg_USR PAR.Date_End_USR 'DY' 1111111 'NONE' 'N' 1);

   // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
   LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

   // LCL.Time Beg USR = LCL.Time Beg USR + LCL.Usr Elapsed hours
   LCL.Time_Beg_USR = LCL.Time_Beg_USR + LCL.Usr_Elapsed_hours;

   ENDIF;

   // LCL.Time Diff Usr = LCL.Time End USR - LCL.Time Beg USR *HHMMSS
   LCL.Time_Diff_Usr = TIMELAPSED(LCL.Time_End_USR LCL.Time_Beg_USR 'HS');

   // LCL.Hours USR = LCL.Time Diff Usr *HOURS
   LCL.Hours_USR = TIMEDTLS(LCL.Time_Diff_Usr 'HR');

   // LCL.Minutes USR = LCL.Time Diff Usr *MINUTES
   LCL.Minutes_USR = TIMEDTLS(LCL.Time_Diff_Usr 'MN');

   // LCL.Wait Time 4.0 USR = LCL.Hours USR * CON.60 *
   LCL.Wait_Time_4_0_USR = LCL.Hours_USR * 60;

   // PAR.Wait Time 4.0 USR = LCL.Wait Time 4.0 USR + LCL.Minutes USR
   PAR.Wait_Time_4_0_USR = LCL.Wait_Time_4_0_USR + LCL.Minutes_USR;

   CASE;

   // IF LCL.Time Diff Usr is lt 0
   IF LCL.Time_Diff_Usr < *ZERO;

   // PAR.Wait Time 4.0 USR = CON.*ZERO - PAR.Wait Time 4.0 USR
   PAR.Wait_Time_4_0_USR = *ZERO - PAR.Wait_Time_4_0_USR;

   ENDIF;

   ENDIF;

  }

  //?*** New 4/23/03
  EXECUTE FUNCTION(Rtv Date/Tm Wait Calc RT) TYPE(RTVOBJ) FILE(PLAECPP)           AB1253684;
  PARAMETER(PAR.CC_Company_Number);
  PARAMETER(PAR.DSH_Kill_Date);
  PARAMETER(PAR.DT_Delivery_Date);
  PARAMETER(PAR.DT_Delivery_Time);
  PARAMETER(PAR.DT_Delivery_Time_Seq);
  PARAMETER(LCL.DSD_Sched_Route_Start_Dte);
  PARAMETER(LCL.DSD_Sched_Route_Start_Tim);
  PARAMETER(LCL.DSD_Sch_Start_Load_Date);
  PARAMETER(LCL.DSD_Sch_Start_Load_Time);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Clc Time Durations    IF) TYPE(EXCINTFUN)                      AB1247954;
  PARAMETER(PAR.DT_Route_Start_Date);
  PARAMETER(PAR.DT_Route_Start_Time);
  PARAMETER(LCL.DSD_Sched_Route_Start_Dte);
  PARAMETER(LCL.DSD_Sched_Route_Start_Tim);
  PARAMETER(LCL.DT_Route_Start_Variance);
  {
   //?Execute internal function

   // PAR.Wait Time 4.0 USR = CON.*ZERO
   PAR.Wait_Time_4_0_USR = *ZERO;

   CASE;

   // IF PAR.Date Beg USR is Entered
   IF PAR.Date_Beg_USR <> *ZERO;

   // AND PAR.Date End USR is Entered
   AND PAR.Date_End_USR <> 0;

   // AND PAR.Time Beg 4.0 USR is Entered
   AND PAR.Time_Beg_4_0_USR <> *ZERO;

   // AND PAR.Time End 4.0 USR is Entered
   AND PAR.Time_End_4_0_USR <> *ZERO;

   // LCL.Time Beg USR = PAR.Time Beg 4.0 USR * CON.100 *
   LCL.Time_Beg_USR = PAR.Time_Beg_4_0_USR * 100;

   // LCL.Time End USR = PAR.Time End 4.0 USR * CON.100 *
   LCL.Time_End_USR = PAR.Time_End_4_0_USR * 100;

   CASE;

   // IF PAR.Date Beg USR LT PAR.Date End USR
   IF PAR.Date_Beg_USR < PAR.Date_End_USR;

   // LCL.Number 1 USR = PAR.Date End USR - PAR.Date Beg USR *DAYS
   LCL.Number_1_USR = DURATION(PAR.Date_End_USR PAR.Date_Beg_USR 'DY' 1111111 'NONE' 'N' 1);

   // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
   LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

   // LCL.Time End USR = LCL.Time End USR + LCL.Usr Elapsed hours
   LCL.Time_End_USR = LCL.Time_End_USR + LCL.Usr_Elapsed_hours;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Number 1 USR = PAR.Date Beg USR - PAR.Date End USR *DAYS
   LCL.Number_1_USR = DURATION(PAR.Date_Beg_USR PAR.Date_End_USR 'DY' 1111111 'NONE' 'N' 1);

   // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
   LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

   // LCL.Time Beg USR = LCL.Time Beg USR + LCL.Usr Elapsed hours
   LCL.Time_Beg_USR = LCL.Time_Beg_USR + LCL.Usr_Elapsed_hours;

   ENDIF;

   // LCL.Time Diff Usr = LCL.Time End USR - LCL.Time Beg USR *HHMMSS
   LCL.Time_Diff_Usr = TIMELAPSED(LCL.Time_End_USR LCL.Time_Beg_USR 'HS');

   // LCL.Hours USR = LCL.Time Diff Usr *HOURS
   LCL.Hours_USR = TIMEDTLS(LCL.Time_Diff_Usr 'HR');

   // LCL.Minutes USR = LCL.Time Diff Usr *MINUTES
   LCL.Minutes_USR = TIMEDTLS(LCL.Time_Diff_Usr 'MN');

   // LCL.Wait Time 4.0 USR = LCL.Hours USR * CON.60 *
   LCL.Wait_Time_4_0_USR = LCL.Hours_USR * 60;

   // PAR.Wait Time 4.0 USR = LCL.Wait Time 4.0 USR + LCL.Minutes USR
   PAR.Wait_Time_4_0_USR = LCL.Wait_Time_4_0_USR + LCL.Minutes_USR;

   CASE;

   // IF LCL.Time Diff Usr is lt 0
   IF LCL.Time_Diff_Usr < *ZERO;

   // PAR.Wait Time 4.0 USR = CON.*ZERO - PAR.Wait Time 4.0 USR
   PAR.Wait_Time_4_0_USR = *ZERO - PAR.Wait_Time_4_0_USR;

   ENDIF;

   ENDIF;

  }

  EXECUTE FUNCTION(Clc Time Durations    IF) TYPE(EXCINTFUN)                      AB1247954;
  PARAMETER(PAR.DT_Start_Loading_Date);
  PARAMETER(PAR.DT_Start_Loading_Time);
  PARAMETER(LCL.DSD_Sch_Start_Load_Date);
  PARAMETER(LCL.DSD_Sch_Start_Load_Time);
  PARAMETER(LCL.DT_Start_Loading_Variance);
  {
   //?Execute internal function

   // PAR.Wait Time 4.0 USR = CON.*ZERO
   PAR.Wait_Time_4_0_USR = *ZERO;

   CASE;

   // IF PAR.Date Beg USR is Entered
   IF PAR.Date_Beg_USR <> *ZERO;

   // AND PAR.Date End USR is Entered
   AND PAR.Date_End_USR <> 0;

   // AND PAR.Time Beg 4.0 USR is Entered
   AND PAR.Time_Beg_4_0_USR <> *ZERO;

   // AND PAR.Time End 4.0 USR is Entered
   AND PAR.Time_End_4_0_USR <> *ZERO;

   // LCL.Time Beg USR = PAR.Time Beg 4.0 USR * CON.100 *
   LCL.Time_Beg_USR = PAR.Time_Beg_4_0_USR * 100;

   // LCL.Time End USR = PAR.Time End 4.0 USR * CON.100 *
   LCL.Time_End_USR = PAR.Time_End_4_0_USR * 100;

   CASE;

   // IF PAR.Date Beg USR LT PAR.Date End USR
   IF PAR.Date_Beg_USR < PAR.Date_End_USR;

   // LCL.Number 1 USR = PAR.Date End USR - PAR.Date Beg USR *DAYS
   LCL.Number_1_USR = DURATION(PAR.Date_End_USR PAR.Date_Beg_USR 'DY' 1111111 'NONE' 'N' 1);

   // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
   LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

   // LCL.Time End USR = LCL.Time End USR + LCL.Usr Elapsed hours
   LCL.Time_End_USR = LCL.Time_End_USR + LCL.Usr_Elapsed_hours;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Number 1 USR = PAR.Date Beg USR - PAR.Date End USR *DAYS
   LCL.Number_1_USR = DURATION(PAR.Date_Beg_USR PAR.Date_End_USR 'DY' 1111111 'NONE' 'N' 1);

   // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
   LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

   // LCL.Time Beg USR = LCL.Time Beg USR + LCL.Usr Elapsed hours
   LCL.Time_Beg_USR = LCL.Time_Beg_USR + LCL.Usr_Elapsed_hours;

   ENDIF;

   // LCL.Time Diff Usr = LCL.Time End USR - LCL.Time Beg USR *HHMMSS
   LCL.Time_Diff_Usr = TIMELAPSED(LCL.Time_End_USR LCL.Time_Beg_USR 'HS');

   // LCL.Hours USR = LCL.Time Diff Usr *HOURS
   LCL.Hours_USR = TIMEDTLS(LCL.Time_Diff_Usr 'HR');

   // LCL.Minutes USR = LCL.Time Diff Usr *MINUTES
   LCL.Minutes_USR = TIMEDTLS(LCL.Time_Diff_Usr 'MN');

   // LCL.Wait Time 4.0 USR = LCL.Hours USR * CON.60 *
   LCL.Wait_Time_4_0_USR = LCL.Hours_USR * 60;

   // PAR.Wait Time 4.0 USR = LCL.Wait Time 4.0 USR + LCL.Minutes USR
   PAR.Wait_Time_4_0_USR = LCL.Wait_Time_4_0_USR + LCL.Minutes_USR;

   CASE;

   // IF LCL.Time Diff Usr is lt 0
   IF LCL.Time_Diff_Usr < *ZERO;

   // PAR.Wait Time 4.0 USR = CON.*ZERO - PAR.Wait Time 4.0 USR
   PAR.Wait_Time_4_0_USR = *ZERO - PAR.Wait_Time_4_0_USR;

   ENDIF;

   ENDIF;

  }

  EXECUTE FUNCTION(Clc Time Durations    IF) TYPE(EXCINTFUN)                      AB1247954;
  PARAMETER(LCL.DSD_Sch_Start_Load_Date);
  PARAMETER(LCL.DSD_Sch_Start_Load_Time);
  PARAMETER(PAR.DT_Arrive_@_Farm_Date);
  PARAMETER(PAR.DT_Arrive_@_Farm_Time);
  PARAMETER(LCL.DT_Arrive@Frm_v_StartLd);
  {
   //?Execute internal function

   // PAR.Wait Time 4.0 USR = CON.*ZERO
   PAR.Wait_Time_4_0_USR = *ZERO;

   CASE;

   // IF PAR.Date Beg USR is Entered
   IF PAR.Date_Beg_USR <> *ZERO;

   // AND PAR.Date End USR is Entered
   AND PAR.Date_End_USR <> 0;

   // AND PAR.Time Beg 4.0 USR is Entered
   AND PAR.Time_Beg_4_0_USR <> *ZERO;

   // AND PAR.Time End 4.0 USR is Entered
   AND PAR.Time_End_4_0_USR <> *ZERO;

   // LCL.Time Beg USR = PAR.Time Beg 4.0 USR * CON.100 *
   LCL.Time_Beg_USR = PAR.Time_Beg_4_0_USR * 100;

   // LCL.Time End USR = PAR.Time End 4.0 USR * CON.100 *
   LCL.Time_End_USR = PAR.Time_End_4_0_USR * 100;

   CASE;

   // IF PAR.Date Beg USR LT PAR.Date End USR
   IF PAR.Date_Beg_USR < PAR.Date_End_USR;

   // LCL.Number 1 USR = PAR.Date End USR - PAR.Date Beg USR *DAYS
   LCL.Number_1_USR = DURATION(PAR.Date_End_USR PAR.Date_Beg_USR 'DY' 1111111 'NONE' 'N' 1);

   // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
   LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

   // LCL.Time End USR = LCL.Time End USR + LCL.Usr Elapsed hours
   LCL.Time_End_USR = LCL.Time_End_USR + LCL.Usr_Elapsed_hours;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Number 1 USR = PAR.Date Beg USR - PAR.Date End USR *DAYS
   LCL.Number_1_USR = DURATION(PAR.Date_Beg_USR PAR.Date_End_USR 'DY' 1111111 'NONE' 'N' 1);

   // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
   LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

   // LCL.Time Beg USR = LCL.Time Beg USR + LCL.Usr Elapsed hours
   LCL.Time_Beg_USR = LCL.Time_Beg_USR + LCL.Usr_Elapsed_hours;

   ENDIF;

   // LCL.Time Diff Usr = LCL.Time End USR - LCL.Time Beg USR *HHMMSS
   LCL.Time_Diff_Usr = TIMELAPSED(LCL.Time_End_USR LCL.Time_Beg_USR 'HS');

   // LCL.Hours USR = LCL.Time Diff Usr *HOURS
   LCL.Hours_USR = TIMEDTLS(LCL.Time_Diff_Usr 'HR');

   // LCL.Minutes USR = LCL.Time Diff Usr *MINUTES
   LCL.Minutes_USR = TIMEDTLS(LCL.Time_Diff_Usr 'MN');

   // LCL.Wait Time 4.0 USR = LCL.Hours USR * CON.60 *
   LCL.Wait_Time_4_0_USR = LCL.Hours_USR * 60;

   // PAR.Wait Time 4.0 USR = LCL.Wait Time 4.0 USR + LCL.Minutes USR
   PAR.Wait_Time_4_0_USR = LCL.Wait_Time_4_0_USR + LCL.Minutes_USR;

   CASE;

   // IF LCL.Time Diff Usr is lt 0
   IF LCL.Time_Diff_Usr < *ZERO;

   // PAR.Wait Time 4.0 USR = CON.*ZERO - PAR.Wait Time 4.0 USR
   PAR.Wait_Time_4_0_USR = *ZERO - PAR.Wait_Time_4_0_USR;

   ENDIF;

   ENDIF;

  }

  //?Calc On-Time Farm Arrvl Sts
  CASE;

  // IF LCL.DSD Sch Start Load Date is Not Entered
  IF LCL.DSD_Sch_Start_Load_Date = 0;

  // OR LCL.DSD Sch Start Load Time is Not Entered
  OR LCL.DSD_Sch_Start_Load_Time = *ZERO;

  // OR PAR.DT Arrive @ Farm Date is Not Entered
  OR PAR.DT_Arrive_@_Farm_Date = *ZERO;

  // OR PAR.DT Arrive @ Farm Time is Not Entered
  OR PAR.DT_Arrive_@_Farm_Time = *ZERO;

  //?New Status as of 01/20/04
  // LCL.DT On-Time Farm Arrvl Sts = CND.Incomplete
  LCL.DT_On_Time_Farm_Arrvl_Sts = 'I';

  // LCL.DT Arrive@Frm v StartLd = CON.*ZERO
  LCL.DT_Arrive@Frm_v_StartLd = *ZERO;

  //?Calc On-Time Farm Arrvl Sts
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Case: On Time Farm Arrival Sts
  CASE;

  // IF LCL.DT Arrive@Frm v StartLd is Within 15 minutes
  IF LCL.DT_Arrive@Frm_v_StartLd >= -15;
  AND LCL.DT_Arrive@Frm_v_StartLd <= 15;

  // LCL.DT On-Time Farm Arrvl Sts = CND.On Time
  LCL.DT_On_Time_Farm_Arrvl_Sts = 'O';

  //?Case: On Time Farm Arrival Sts
  // IF LCL.DT Arrive@Frm v StartLd is Earlier than 15 minutes
  IF LCL.DT_Arrive@Frm_v_StartLd < -15;

  // LCL.DT On-Time Farm Arrvl Sts = CND.Early
  LCL.DT_On_Time_Farm_Arrvl_Sts = 'E';

  //?Case: On Time Farm Arrival Sts
  // IF LCL.DT Arrive@Frm v StartLd is Later than 15 minutes
  IF LCL.DT_Arrive@Frm_v_StartLd > 15;

  // LCL.DT On-Time Farm Arrvl Sts = CND.Late
  LCL.DT_On_Time_Farm_Arrvl_Sts = 'L';

  ENDIF;

  ENDIF;

  //?***
  //?-------------- Plant --------------
  EXECUTE FUNCTION(Clc Time Durations    IF) TYPE(EXCINTFUN)                      AB1247954;
  PARAMETER(PAR.DT_Leave_Farm_Date);
  PARAMETER(PAR.DT_Leave_Farm_Time);
  PARAMETER(PAR.DT_Arrive_@_Plant_Date);
  PARAMETER(PAR.DT_Arrive_@_Plant_Time);
  PARAMETER(LCL.DT_Drive_Time_To_Plant);
  {
   //?Execute internal function

   // PAR.Wait Time 4.0 USR = CON.*ZERO
   PAR.Wait_Time_4_0_USR = *ZERO;

   CASE;

   // IF PAR.Date Beg USR is Entered
   IF PAR.Date_Beg_USR <> *ZERO;

   // AND PAR.Date End USR is Entered
   AND PAR.Date_End_USR <> 0;

   // AND PAR.Time Beg 4.0 USR is Entered
   AND PAR.Time_Beg_4_0_USR <> *ZERO;

   // AND PAR.Time End 4.0 USR is Entered
   AND PAR.Time_End_4_0_USR <> *ZERO;

   // LCL.Time Beg USR = PAR.Time Beg 4.0 USR * CON.100 *
   LCL.Time_Beg_USR = PAR.Time_Beg_4_0_USR * 100;

   // LCL.Time End USR = PAR.Time End 4.0 USR * CON.100 *
   LCL.Time_End_USR = PAR.Time_End_4_0_USR * 100;

   CASE;

   // IF PAR.Date Beg USR LT PAR.Date End USR
   IF PAR.Date_Beg_USR < PAR.Date_End_USR;

   // LCL.Number 1 USR = PAR.Date End USR - PAR.Date Beg USR *DAYS
   LCL.Number_1_USR = DURATION(PAR.Date_End_USR PAR.Date_Beg_USR 'DY' 1111111 'NONE' 'N' 1);

   // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
   LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

   // LCL.Time End USR = LCL.Time End USR + LCL.Usr Elapsed hours
   LCL.Time_End_USR = LCL.Time_End_USR + LCL.Usr_Elapsed_hours;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Number 1 USR = PAR.Date Beg USR - PAR.Date End USR *DAYS
   LCL.Number_1_USR = DURATION(PAR.Date_Beg_USR PAR.Date_End_USR 'DY' 1111111 'NONE' 'N' 1);

   // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
   LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

   // LCL.Time Beg USR = LCL.Time Beg USR + LCL.Usr Elapsed hours
   LCL.Time_Beg_USR = LCL.Time_Beg_USR + LCL.Usr_Elapsed_hours;

   ENDIF;

   // LCL.Time Diff Usr = LCL.Time End USR - LCL.Time Beg USR *HHMMSS
   LCL.Time_Diff_Usr = TIMELAPSED(LCL.Time_End_USR LCL.Time_Beg_USR 'HS');

   // LCL.Hours USR = LCL.Time Diff Usr *HOURS
   LCL.Hours_USR = TIMEDTLS(LCL.Time_Diff_Usr 'HR');

   // LCL.Minutes USR = LCL.Time Diff Usr *MINUTES
   LCL.Minutes_USR = TIMEDTLS(LCL.Time_Diff_Usr 'MN');

   // LCL.Wait Time 4.0 USR = LCL.Hours USR * CON.60 *
   LCL.Wait_Time_4_0_USR = LCL.Hours_USR * 60;

   // PAR.Wait Time 4.0 USR = LCL.Wait Time 4.0 USR + LCL.Minutes USR
   PAR.Wait_Time_4_0_USR = LCL.Wait_Time_4_0_USR + LCL.Minutes_USR;

   CASE;

   // IF LCL.Time Diff Usr is lt 0
   IF LCL.Time_Diff_Usr < *ZERO;

   // PAR.Wait Time 4.0 USR = CON.*ZERO - PAR.Wait Time 4.0 USR
   PAR.Wait_Time_4_0_USR = *ZERO - PAR.Wait_Time_4_0_USR;

   ENDIF;

   ENDIF;

  }

  EXECUTE FUNCTION(Clc Time Durations    IF) TYPE(EXCINTFUN)                      AB1247954;
  PARAMETER(PAR.DT_Delivery_Date);
  PARAMETER(PAR.DT_Delivery_Time);
  PARAMETER(PAR.DT_Arrive_@_Plant_Date);
  PARAMETER(PAR.DT_Arrive_@_Plant_Time);
  PARAMETER(LCL.DT_Delv_Time_Variance);
  {
   //?Execute internal function

   // PAR.Wait Time 4.0 USR = CON.*ZERO
   PAR.Wait_Time_4_0_USR = *ZERO;

   CASE;

   // IF PAR.Date Beg USR is Entered
   IF PAR.Date_Beg_USR <> *ZERO;

   // AND PAR.Date End USR is Entered
   AND PAR.Date_End_USR <> 0;

   // AND PAR.Time Beg 4.0 USR is Entered
   AND PAR.Time_Beg_4_0_USR <> *ZERO;

   // AND PAR.Time End 4.0 USR is Entered
   AND PAR.Time_End_4_0_USR <> *ZERO;

   // LCL.Time Beg USR = PAR.Time Beg 4.0 USR * CON.100 *
   LCL.Time_Beg_USR = PAR.Time_Beg_4_0_USR * 100;

   // LCL.Time End USR = PAR.Time End 4.0 USR * CON.100 *
   LCL.Time_End_USR = PAR.Time_End_4_0_USR * 100;

   CASE;

   // IF PAR.Date Beg USR LT PAR.Date End USR
   IF PAR.Date_Beg_USR < PAR.Date_End_USR;

   // LCL.Number 1 USR = PAR.Date End USR - PAR.Date Beg USR *DAYS
   LCL.Number_1_USR = DURATION(PAR.Date_End_USR PAR.Date_Beg_USR 'DY' 1111111 'NONE' 'N' 1);

   // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
   LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

   // LCL.Time End USR = LCL.Time End USR + LCL.Usr Elapsed hours
   LCL.Time_End_USR = LCL.Time_End_USR + LCL.Usr_Elapsed_hours;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Number 1 USR = PAR.Date Beg USR - PAR.Date End USR *DAYS
   LCL.Number_1_USR = DURATION(PAR.Date_Beg_USR PAR.Date_End_USR 'DY' 1111111 'NONE' 'N' 1);

   // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
   LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

   // LCL.Time Beg USR = LCL.Time Beg USR + LCL.Usr Elapsed hours
   LCL.Time_Beg_USR = LCL.Time_Beg_USR + LCL.Usr_Elapsed_hours;

   ENDIF;

   // LCL.Time Diff Usr = LCL.Time End USR - LCL.Time Beg USR *HHMMSS
   LCL.Time_Diff_Usr = TIMELAPSED(LCL.Time_End_USR LCL.Time_Beg_USR 'HS');

   // LCL.Hours USR = LCL.Time Diff Usr *HOURS
   LCL.Hours_USR = TIMEDTLS(LCL.Time_Diff_Usr 'HR');

   // LCL.Minutes USR = LCL.Time Diff Usr *MINUTES
   LCL.Minutes_USR = TIMEDTLS(LCL.Time_Diff_Usr 'MN');

   // LCL.Wait Time 4.0 USR = LCL.Hours USR * CON.60 *
   LCL.Wait_Time_4_0_USR = LCL.Hours_USR * 60;

   // PAR.Wait Time 4.0 USR = LCL.Wait Time 4.0 USR + LCL.Minutes USR
   PAR.Wait_Time_4_0_USR = LCL.Wait_Time_4_0_USR + LCL.Minutes_USR;

   CASE;

   // IF LCL.Time Diff Usr is lt 0
   IF LCL.Time_Diff_Usr < *ZERO;

   // PAR.Wait Time 4.0 USR = CON.*ZERO - PAR.Wait Time 4.0 USR
   PAR.Wait_Time_4_0_USR = *ZERO - PAR.Wait_Time_4_0_USR;

   ENDIF;

   ENDIF;

  }

  EXECUTE FUNCTION(Clc Time Durations    IF) TYPE(EXCINTFUN)                      AB1247954;
  PARAMETER(PAR.DT_Arrive_@_Plant_Date);
  PARAMETER(PAR.DT_Arrive_@_Plant_Time);
  PARAMETER(PAR.DT_TrkScl_Weigh_In_Date);
  PARAMETER(PAR.DT_TrkScl_Weigh_In_Time);
  PARAMETER(LCL.DT_Wait_@_TrkScl);
  {
   //?Execute internal function

   // PAR.Wait Time 4.0 USR = CON.*ZERO
   PAR.Wait_Time_4_0_USR = *ZERO;

   CASE;

   // IF PAR.Date Beg USR is Entered
   IF PAR.Date_Beg_USR <> *ZERO;

   // AND PAR.Date End USR is Entered
   AND PAR.Date_End_USR <> 0;

   // AND PAR.Time Beg 4.0 USR is Entered
   AND PAR.Time_Beg_4_0_USR <> *ZERO;

   // AND PAR.Time End 4.0 USR is Entered
   AND PAR.Time_End_4_0_USR <> *ZERO;

   // LCL.Time Beg USR = PAR.Time Beg 4.0 USR * CON.100 *
   LCL.Time_Beg_USR = PAR.Time_Beg_4_0_USR * 100;

   // LCL.Time End USR = PAR.Time End 4.0 USR * CON.100 *
   LCL.Time_End_USR = PAR.Time_End_4_0_USR * 100;

   CASE;

   // IF PAR.Date Beg USR LT PAR.Date End USR
   IF PAR.Date_Beg_USR < PAR.Date_End_USR;

   // LCL.Number 1 USR = PAR.Date End USR - PAR.Date Beg USR *DAYS
   LCL.Number_1_USR = DURATION(PAR.Date_End_USR PAR.Date_Beg_USR 'DY' 1111111 'NONE' 'N' 1);

   // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
   LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

   // LCL.Time End USR = LCL.Time End USR + LCL.Usr Elapsed hours
   LCL.Time_End_USR = LCL.Time_End_USR + LCL.Usr_Elapsed_hours;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Number 1 USR = PAR.Date Beg USR - PAR.Date End USR *DAYS
   LCL.Number_1_USR = DURATION(PAR.Date_Beg_USR PAR.Date_End_USR 'DY' 1111111 'NONE' 'N' 1);

   // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
   LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

   // LCL.Time Beg USR = LCL.Time Beg USR + LCL.Usr Elapsed hours
   LCL.Time_Beg_USR = LCL.Time_Beg_USR + LCL.Usr_Elapsed_hours;

   ENDIF;

   // LCL.Time Diff Usr = LCL.Time End USR - LCL.Time Beg USR *HHMMSS
   LCL.Time_Diff_Usr = TIMELAPSED(LCL.Time_End_USR LCL.Time_Beg_USR 'HS');

   // LCL.Hours USR = LCL.Time Diff Usr *HOURS
   LCL.Hours_USR = TIMEDTLS(LCL.Time_Diff_Usr 'HR');

   // LCL.Minutes USR = LCL.Time Diff Usr *MINUTES
   LCL.Minutes_USR = TIMEDTLS(LCL.Time_Diff_Usr 'MN');

   // LCL.Wait Time 4.0 USR = LCL.Hours USR * CON.60 *
   LCL.Wait_Time_4_0_USR = LCL.Hours_USR * 60;

   // PAR.Wait Time 4.0 USR = LCL.Wait Time 4.0 USR + LCL.Minutes USR
   PAR.Wait_Time_4_0_USR = LCL.Wait_Time_4_0_USR + LCL.Minutes_USR;

   CASE;

   // IF LCL.Time Diff Usr is lt 0
   IF LCL.Time_Diff_Usr < *ZERO;

   // PAR.Wait Time 4.0 USR = CON.*ZERO - PAR.Wait Time 4.0 USR
   PAR.Wait_Time_4_0_USR = *ZERO - PAR.Wait_Time_4_0_USR;

   ENDIF;

   ENDIF;

  }

  EXECUTE FUNCTION(Clc Time Durations    IF) TYPE(EXCINTFUN)                      AB1247954;
  PARAMETER(PAR.DT_TrkScl_Weigh_In_Date);
  PARAMETER(PAR.DT_TrkScl_Weigh_In_Time);
  PARAMETER(PAR.DT_To_Recv_Dock_Date);
  PARAMETER(PAR.DT_To_Recv_Dock_Time);
  PARAMETER(LCL.DT_Wait_Rcv_Dock);
  {
   //?Execute internal function

   // PAR.Wait Time 4.0 USR = CON.*ZERO
   PAR.Wait_Time_4_0_USR = *ZERO;

   CASE;

   // IF PAR.Date Beg USR is Entered
   IF PAR.Date_Beg_USR <> *ZERO;

   // AND PAR.Date End USR is Entered
   AND PAR.Date_End_USR <> 0;

   // AND PAR.Time Beg 4.0 USR is Entered
   AND PAR.Time_Beg_4_0_USR <> *ZERO;

   // AND PAR.Time End 4.0 USR is Entered
   AND PAR.Time_End_4_0_USR <> *ZERO;

   // LCL.Time Beg USR = PAR.Time Beg 4.0 USR * CON.100 *
   LCL.Time_Beg_USR = PAR.Time_Beg_4_0_USR * 100;

   // LCL.Time End USR = PAR.Time End 4.0 USR * CON.100 *
   LCL.Time_End_USR = PAR.Time_End_4_0_USR * 100;

   CASE;

   // IF PAR.Date Beg USR LT PAR.Date End USR
   IF PAR.Date_Beg_USR < PAR.Date_End_USR;

   // LCL.Number 1 USR = PAR.Date End USR - PAR.Date Beg USR *DAYS
   LCL.Number_1_USR = DURATION(PAR.Date_End_USR PAR.Date_Beg_USR 'DY' 1111111 'NONE' 'N' 1);

   // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
   LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

   // LCL.Time End USR = LCL.Time End USR + LCL.Usr Elapsed hours
   LCL.Time_End_USR = LCL.Time_End_USR + LCL.Usr_Elapsed_hours;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Number 1 USR = PAR.Date Beg USR - PAR.Date End USR *DAYS
   LCL.Number_1_USR = DURATION(PAR.Date_Beg_USR PAR.Date_End_USR 'DY' 1111111 'NONE' 'N' 1);

   // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
   LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

   // LCL.Time Beg USR = LCL.Time Beg USR + LCL.Usr Elapsed hours
   LCL.Time_Beg_USR = LCL.Time_Beg_USR + LCL.Usr_Elapsed_hours;

   ENDIF;

   // LCL.Time Diff Usr = LCL.Time End USR - LCL.Time Beg USR *HHMMSS
   LCL.Time_Diff_Usr = TIMELAPSED(LCL.Time_End_USR LCL.Time_Beg_USR 'HS');

   // LCL.Hours USR = LCL.Time Diff Usr *HOURS
   LCL.Hours_USR = TIMEDTLS(LCL.Time_Diff_Usr 'HR');

   // LCL.Minutes USR = LCL.Time Diff Usr *MINUTES
   LCL.Minutes_USR = TIMEDTLS(LCL.Time_Diff_Usr 'MN');

   // LCL.Wait Time 4.0 USR = LCL.Hours USR * CON.60 *
   LCL.Wait_Time_4_0_USR = LCL.Hours_USR * 60;

   // PAR.Wait Time 4.0 USR = LCL.Wait Time 4.0 USR + LCL.Minutes USR
   PAR.Wait_Time_4_0_USR = LCL.Wait_Time_4_0_USR + LCL.Minutes_USR;

   CASE;

   // IF LCL.Time Diff Usr is lt 0
   IF LCL.Time_Diff_Usr < *ZERO;

   // PAR.Wait Time 4.0 USR = CON.*ZERO - PAR.Wait Time 4.0 USR
   PAR.Wait_Time_4_0_USR = *ZERO - PAR.Wait_Time_4_0_USR;

   ENDIF;

   ENDIF;

  }

  EXECUTE FUNCTION(Clc Time Durations    IF) TYPE(EXCINTFUN)                      AB1247954;
  PARAMETER(PAR.DT_To_Recv_Dock_Date);
  PARAMETER(PAR.DT_To_Recv_Dock_Time);
  PARAMETER(PAR.DT_Start_Unloading_Date);
  PARAMETER(PAR.DT_Start_Unloading_Time);
  PARAMETER(LCL.DT_Wait_@_Rcv_Dock);
  {
   //?Execute internal function

   // PAR.Wait Time 4.0 USR = CON.*ZERO
   PAR.Wait_Time_4_0_USR = *ZERO;

   CASE;

   // IF PAR.Date Beg USR is Entered
   IF PAR.Date_Beg_USR <> *ZERO;

   // AND PAR.Date End USR is Entered
   AND PAR.Date_End_USR <> 0;

   // AND PAR.Time Beg 4.0 USR is Entered
   AND PAR.Time_Beg_4_0_USR <> *ZERO;

   // AND PAR.Time End 4.0 USR is Entered
   AND PAR.Time_End_4_0_USR <> *ZERO;

   // LCL.Time Beg USR = PAR.Time Beg 4.0 USR * CON.100 *
   LCL.Time_Beg_USR = PAR.Time_Beg_4_0_USR * 100;

   // LCL.Time End USR = PAR.Time End 4.0 USR * CON.100 *
   LCL.Time_End_USR = PAR.Time_End_4_0_USR * 100;

   CASE;

   // IF PAR.Date Beg USR LT PAR.Date End USR
   IF PAR.Date_Beg_USR < PAR.Date_End_USR;

   // LCL.Number 1 USR = PAR.Date End USR - PAR.Date Beg USR *DAYS
   LCL.Number_1_USR = DURATION(PAR.Date_End_USR PAR.Date_Beg_USR 'DY' 1111111 'NONE' 'N' 1);

   // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
   LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

   // LCL.Time End USR = LCL.Time End USR + LCL.Usr Elapsed hours
   LCL.Time_End_USR = LCL.Time_End_USR + LCL.Usr_Elapsed_hours;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Number 1 USR = PAR.Date Beg USR - PAR.Date End USR *DAYS
   LCL.Number_1_USR = DURATION(PAR.Date_Beg_USR PAR.Date_End_USR 'DY' 1111111 'NONE' 'N' 1);

   // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
   LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

   // LCL.Time Beg USR = LCL.Time Beg USR + LCL.Usr Elapsed hours
   LCL.Time_Beg_USR = LCL.Time_Beg_USR + LCL.Usr_Elapsed_hours;

   ENDIF;

   // LCL.Time Diff Usr = LCL.Time End USR - LCL.Time Beg USR *HHMMSS
   LCL.Time_Diff_Usr = TIMELAPSED(LCL.Time_End_USR LCL.Time_Beg_USR 'HS');

   // LCL.Hours USR = LCL.Time Diff Usr *HOURS
   LCL.Hours_USR = TIMEDTLS(LCL.Time_Diff_Usr 'HR');

   // LCL.Minutes USR = LCL.Time Diff Usr *MINUTES
   LCL.Minutes_USR = TIMEDTLS(LCL.Time_Diff_Usr 'MN');

   // LCL.Wait Time 4.0 USR = LCL.Hours USR * CON.60 *
   LCL.Wait_Time_4_0_USR = LCL.Hours_USR * 60;

   // PAR.Wait Time 4.0 USR = LCL.Wait Time 4.0 USR + LCL.Minutes USR
   PAR.Wait_Time_4_0_USR = LCL.Wait_Time_4_0_USR + LCL.Minutes_USR;

   CASE;

   // IF LCL.Time Diff Usr is lt 0
   IF LCL.Time_Diff_Usr < *ZERO;

   // PAR.Wait Time 4.0 USR = CON.*ZERO - PAR.Wait Time 4.0 USR
   PAR.Wait_Time_4_0_USR = *ZERO - PAR.Wait_Time_4_0_USR;

   ENDIF;

   ENDIF;

  }

  EXECUTE FUNCTION(Clc Time Durations    IF) TYPE(EXCINTFUN)                      AB1247954;
  PARAMETER(PAR.DT_Delivery_Date);
  PARAMETER(PAR.DT_Delivery_Time);
  PARAMETER(PAR.DT_Start_Unloading_Date);
  PARAMETER(PAR.DT_Start_Unloading_Time);
  PARAMETER(LCL.DT_Unload_Variance_Time);
  {
   //?Execute internal function

   // PAR.Wait Time 4.0 USR = CON.*ZERO
   PAR.Wait_Time_4_0_USR = *ZERO;

   CASE;

   // IF PAR.Date Beg USR is Entered
   IF PAR.Date_Beg_USR <> *ZERO;

   // AND PAR.Date End USR is Entered
   AND PAR.Date_End_USR <> 0;

   // AND PAR.Time Beg 4.0 USR is Entered
   AND PAR.Time_Beg_4_0_USR <> *ZERO;

   // AND PAR.Time End 4.0 USR is Entered
   AND PAR.Time_End_4_0_USR <> *ZERO;

   // LCL.Time Beg USR = PAR.Time Beg 4.0 USR * CON.100 *
   LCL.Time_Beg_USR = PAR.Time_Beg_4_0_USR * 100;

   // LCL.Time End USR = PAR.Time End 4.0 USR * CON.100 *
   LCL.Time_End_USR = PAR.Time_End_4_0_USR * 100;

   CASE;

   // IF PAR.Date Beg USR LT PAR.Date End USR
   IF PAR.Date_Beg_USR < PAR.Date_End_USR;

   // LCL.Number 1 USR = PAR.Date End USR - PAR.Date Beg USR *DAYS
   LCL.Number_1_USR = DURATION(PAR.Date_End_USR PAR.Date_Beg_USR 'DY' 1111111 'NONE' 'N' 1);

   // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
   LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

   // LCL.Time End USR = LCL.Time End USR + LCL.Usr Elapsed hours
   LCL.Time_End_USR = LCL.Time_End_USR + LCL.Usr_Elapsed_hours;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Number 1 USR = PAR.Date Beg USR - PAR.Date End USR *DAYS
   LCL.Number_1_USR = DURATION(PAR.Date_Beg_USR PAR.Date_End_USR 'DY' 1111111 'NONE' 'N' 1);

   // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
   LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

   // LCL.Time Beg USR = LCL.Time Beg USR + LCL.Usr Elapsed hours
   LCL.Time_Beg_USR = LCL.Time_Beg_USR + LCL.Usr_Elapsed_hours;

   ENDIF;

   // LCL.Time Diff Usr = LCL.Time End USR - LCL.Time Beg USR *HHMMSS
   LCL.Time_Diff_Usr = TIMELAPSED(LCL.Time_End_USR LCL.Time_Beg_USR 'HS');

   // LCL.Hours USR = LCL.Time Diff Usr *HOURS
   LCL.Hours_USR = TIMEDTLS(LCL.Time_Diff_Usr 'HR');

   // LCL.Minutes USR = LCL.Time Diff Usr *MINUTES
   LCL.Minutes_USR = TIMEDTLS(LCL.Time_Diff_Usr 'MN');

   // LCL.Wait Time 4.0 USR = LCL.Hours USR * CON.60 *
   LCL.Wait_Time_4_0_USR = LCL.Hours_USR * 60;

   // PAR.Wait Time 4.0 USR = LCL.Wait Time 4.0 USR + LCL.Minutes USR
   PAR.Wait_Time_4_0_USR = LCL.Wait_Time_4_0_USR + LCL.Minutes_USR;

   CASE;

   // IF LCL.Time Diff Usr is lt 0
   IF LCL.Time_Diff_Usr < *ZERO;

   // PAR.Wait Time 4.0 USR = CON.*ZERO - PAR.Wait Time 4.0 USR
   PAR.Wait_Time_4_0_USR = *ZERO - PAR.Wait_Time_4_0_USR;

   ENDIF;

   ENDIF;

  }

  EXECUTE FUNCTION(Clc Time Durations    IF) TYPE(EXCINTFUN)                      AB1247954;
  PARAMETER(PAR.DT_Start_Unloading_Date);
  PARAMETER(PAR.DT_Start_Unloading_Time);
  PARAMETER(PAR.DT_TrkScl_Weigh_Out_Date);
  PARAMETER(PAR.DT_TrkScl_Weigh_Out_Time);
  PARAMETER(LCL.DT_Unload_Time);
  {
   //?Execute internal function

   // PAR.Wait Time 4.0 USR = CON.*ZERO
   PAR.Wait_Time_4_0_USR = *ZERO;

   CASE;

   // IF PAR.Date Beg USR is Entered
   IF PAR.Date_Beg_USR <> *ZERO;

   // AND PAR.Date End USR is Entered
   AND PAR.Date_End_USR <> 0;

   // AND PAR.Time Beg 4.0 USR is Entered
   AND PAR.Time_Beg_4_0_USR <> *ZERO;

   // AND PAR.Time End 4.0 USR is Entered
   AND PAR.Time_End_4_0_USR <> *ZERO;

   // LCL.Time Beg USR = PAR.Time Beg 4.0 USR * CON.100 *
   LCL.Time_Beg_USR = PAR.Time_Beg_4_0_USR * 100;

   // LCL.Time End USR = PAR.Time End 4.0 USR * CON.100 *
   LCL.Time_End_USR = PAR.Time_End_4_0_USR * 100;

   CASE;

   // IF PAR.Date Beg USR LT PAR.Date End USR
   IF PAR.Date_Beg_USR < PAR.Date_End_USR;

   // LCL.Number 1 USR = PAR.Date End USR - PAR.Date Beg USR *DAYS
   LCL.Number_1_USR = DURATION(PAR.Date_End_USR PAR.Date_Beg_USR 'DY' 1111111 'NONE' 'N' 1);

   // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
   LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

   // LCL.Time End USR = LCL.Time End USR + LCL.Usr Elapsed hours
   LCL.Time_End_USR = LCL.Time_End_USR + LCL.Usr_Elapsed_hours;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Number 1 USR = PAR.Date Beg USR - PAR.Date End USR *DAYS
   LCL.Number_1_USR = DURATION(PAR.Date_Beg_USR PAR.Date_End_USR 'DY' 1111111 'NONE' 'N' 1);

   // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
   LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

   // LCL.Time Beg USR = LCL.Time Beg USR + LCL.Usr Elapsed hours
   LCL.Time_Beg_USR = LCL.Time_Beg_USR + LCL.Usr_Elapsed_hours;

   ENDIF;

   // LCL.Time Diff Usr = LCL.Time End USR - LCL.Time Beg USR *HHMMSS
   LCL.Time_Diff_Usr = TIMELAPSED(LCL.Time_End_USR LCL.Time_Beg_USR 'HS');

   // LCL.Hours USR = LCL.Time Diff Usr *HOURS
   LCL.Hours_USR = TIMEDTLS(LCL.Time_Diff_Usr 'HR');

   // LCL.Minutes USR = LCL.Time Diff Usr *MINUTES
   LCL.Minutes_USR = TIMEDTLS(LCL.Time_Diff_Usr 'MN');

   // LCL.Wait Time 4.0 USR = LCL.Hours USR * CON.60 *
   LCL.Wait_Time_4_0_USR = LCL.Hours_USR * 60;

   // PAR.Wait Time 4.0 USR = LCL.Wait Time 4.0 USR + LCL.Minutes USR
   PAR.Wait_Time_4_0_USR = LCL.Wait_Time_4_0_USR + LCL.Minutes_USR;

   CASE;

   // IF LCL.Time Diff Usr is lt 0
   IF LCL.Time_Diff_Usr < *ZERO;

   // PAR.Wait Time 4.0 USR = CON.*ZERO - PAR.Wait Time 4.0 USR
   PAR.Wait_Time_4_0_USR = *ZERO - PAR.Wait_Time_4_0_USR;

   ENDIF;

   ENDIF;

  }

  //?Comment 3/30/06
  //?HPE015  3/30/06  Scale out time - plant arrival = wait time @ Plt
  EXECUTE FUNCTION(Clc Time Durations    IF) TYPE(EXCINTFUN)                      AB1247954;
  PARAMETER(PAR.DT_Arrive_@_Plant_Date);
  PARAMETER(PAR.DT_Arrive_@_Plant_Time);
  PARAMETER(PAR.DT_TrkScl_Weigh_Out_Date);
  PARAMETER(PAR.DT_TrkScl_Weigh_Out_Time);
  PARAMETER(LCL.DT_Wait_Time_@_the_Plant);
  {
   //?Execute internal function

   // PAR.Wait Time 4.0 USR = CON.*ZERO
   PAR.Wait_Time_4_0_USR = *ZERO;

   CASE;

   // IF PAR.Date Beg USR is Entered
   IF PAR.Date_Beg_USR <> *ZERO;

   // AND PAR.Date End USR is Entered
   AND PAR.Date_End_USR <> 0;

   // AND PAR.Time Beg 4.0 USR is Entered
   AND PAR.Time_Beg_4_0_USR <> *ZERO;

   // AND PAR.Time End 4.0 USR is Entered
   AND PAR.Time_End_4_0_USR <> *ZERO;

   // LCL.Time Beg USR = PAR.Time Beg 4.0 USR * CON.100 *
   LCL.Time_Beg_USR = PAR.Time_Beg_4_0_USR * 100;

   // LCL.Time End USR = PAR.Time End 4.0 USR * CON.100 *
   LCL.Time_End_USR = PAR.Time_End_4_0_USR * 100;

   CASE;

   // IF PAR.Date Beg USR LT PAR.Date End USR
   IF PAR.Date_Beg_USR < PAR.Date_End_USR;

   // LCL.Number 1 USR = PAR.Date End USR - PAR.Date Beg USR *DAYS
   LCL.Number_1_USR = DURATION(PAR.Date_End_USR PAR.Date_Beg_USR 'DY' 1111111 'NONE' 'N' 1);

   // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
   LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

   // LCL.Time End USR = LCL.Time End USR + LCL.Usr Elapsed hours
   LCL.Time_End_USR = LCL.Time_End_USR + LCL.Usr_Elapsed_hours;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Number 1 USR = PAR.Date Beg USR - PAR.Date End USR *DAYS
   LCL.Number_1_USR = DURATION(PAR.Date_Beg_USR PAR.Date_End_USR 'DY' 1111111 'NONE' 'N' 1);

   // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
   LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

   // LCL.Time Beg USR = LCL.Time Beg USR + LCL.Usr Elapsed hours
   LCL.Time_Beg_USR = LCL.Time_Beg_USR + LCL.Usr_Elapsed_hours;

   ENDIF;

   // LCL.Time Diff Usr = LCL.Time End USR - LCL.Time Beg USR *HHMMSS
   LCL.Time_Diff_Usr = TIMELAPSED(LCL.Time_End_USR LCL.Time_Beg_USR 'HS');

   // LCL.Hours USR = LCL.Time Diff Usr *HOURS
   LCL.Hours_USR = TIMEDTLS(LCL.Time_Diff_Usr 'HR');

   // LCL.Minutes USR = LCL.Time Diff Usr *MINUTES
   LCL.Minutes_USR = TIMEDTLS(LCL.Time_Diff_Usr 'MN');

   // LCL.Wait Time 4.0 USR = LCL.Hours USR * CON.60 *
   LCL.Wait_Time_4_0_USR = LCL.Hours_USR * 60;

   // PAR.Wait Time 4.0 USR = LCL.Wait Time 4.0 USR + LCL.Minutes USR
   PAR.Wait_Time_4_0_USR = LCL.Wait_Time_4_0_USR + LCL.Minutes_USR;

   CASE;

   // IF LCL.Time Diff Usr is lt 0
   IF LCL.Time_Diff_Usr < *ZERO;

   // PAR.Wait Time 4.0 USR = CON.*ZERO - PAR.Wait Time 4.0 USR
   PAR.Wait_Time_4_0_USR = *ZERO - PAR.Wait_Time_4_0_USR;

   ENDIF;

   ENDIF;

  }

  //?Calc On-Time Delivery Sts
  CASE;

  // IF PAR.DT Arrive @ Plant Time is Not Entered
  IF PAR.DT_Arrive_@_Plant_Time = *ZERO;

  //?New Status as of 12/11/03
  // LCL.DT On Time Delivery = CND.Incomplete
  LCL.DT_On_Time_Delivery = 'I';

  // LCL.DT Delv Time Variance = CON.*ZERO
  LCL.DT_Delv_Time_Variance = *ZERO;

  // LCL.DT Formula Wait Tm @ Plt = CON.*ZERO
  LCL.DT_Formula_Wait_Tm_@_Plt = *ZERO;

  //?Calc On-Time Delivery Sts
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Case: On Time Delivery Sts new 4/23/03,chg 7/22 to 15,chg 3/30/06 to 30
  CASE;

  // IF LCL.DT Delv Time Variance is Within 30 minutes
  IF LCL.DT_Delv_Time_Variance >= -30;
  AND LCL.DT_Delv_Time_Variance <= 30;

  // LCL.DT On Time Delivery = CND.On Time
  LCL.DT_On_Time_Delivery = 'O';

  //?Case: On Time Delivery Sts new 4/23/03,chg 7/22 to 15,chg 3/30/06 to 30
  // IF LCL.DT Delv Time Variance is Earlier than 30 minutes
  IF LCL.DT_Delv_Time_Variance < -30;

  // LCL.DT On Time Delivery = CND.Early
  LCL.DT_On_Time_Delivery = 'E';

  //?7/22/03 Adjust Early time by adding 15 minutes
  //?3/30/06 Adjust Early time by adding 30 minutes
  // LCL.DT Delv Time Variance = LCL.DT Delv Time Variance + CON.30
  LCL.DT_Delv_Time_Variance = LCL.DT_Delv_Time_Variance + 30;

  //?Case: On Time Delivery Sts new 4/23/03,chg 7/22 to 15,chg 3/30/06 to 30
  // IF LCL.DT Delv Time Variance is Later than 30 minutes
  IF LCL.DT_Delv_Time_Variance > 30;

  // LCL.DT On Time Delivery = CND.Late
  LCL.DT_On_Time_Delivery = 'L';

  //?7/22/03 Adjust Late time by taking off 15 minutes
  //?3/30/06 Adjust Late time by taking off 30 minutes
  // LCL.DT Delv Time Variance = LCL.DT Delv Time Variance - CON.30
  LCL.DT_Delv_Time_Variance = LCL.DT_Delv_Time_Variance - 30;

  ENDIF;

  ENDIF;

  //?**** Notes for Formula Wait time:****
  //?For internal, (actual unload time + 10 minutes) is a standard,
  //?  for External, it is replaced with (+30 minutes)
  //?    As of 7/17/03 use (+10 minutes) for External also
  //?Calc: Formula Based Wait @ Plt
  CASE;

  // IF LCL.DT On Time Delivery is On Time
  IF LCL.DT_On_Time_Delivery = 'O';

  EXECUTE FUNCTION(Clc Time Durations    IF) TYPE(EXCINTFUN)                      AB1247954;
  PARAMETER(PAR.DT_TrkScl_Weigh_Out_Date);
  PARAMETER(PAR.DT_TrkScl_Weigh_Out_Time);
  PARAMETER(PAR.DT_Arrive_@_Plant_Date);
  PARAMETER(PAR.DT_Arrive_@_Plant_Time);
  PARAMETER(LCL.Time_USR);
  {
   //?Execute internal function

   // PAR.Wait Time 4.0 USR = CON.*ZERO
   PAR.Wait_Time_4_0_USR = *ZERO;

   CASE;

   // IF PAR.Date Beg USR is Entered
   IF PAR.Date_Beg_USR <> *ZERO;

   // AND PAR.Date End USR is Entered
   AND PAR.Date_End_USR <> 0;

   // AND PAR.Time Beg 4.0 USR is Entered
   AND PAR.Time_Beg_4_0_USR <> *ZERO;

   // AND PAR.Time End 4.0 USR is Entered
   AND PAR.Time_End_4_0_USR <> *ZERO;

   // LCL.Time Beg USR = PAR.Time Beg 4.0 USR * CON.100 *
   LCL.Time_Beg_USR = PAR.Time_Beg_4_0_USR * 100;

   // LCL.Time End USR = PAR.Time End 4.0 USR * CON.100 *
   LCL.Time_End_USR = PAR.Time_End_4_0_USR * 100;

   CASE;

   // IF PAR.Date Beg USR LT PAR.Date End USR
   IF PAR.Date_Beg_USR < PAR.Date_End_USR;

   // LCL.Number 1 USR = PAR.Date End USR - PAR.Date Beg USR *DAYS
   LCL.Number_1_USR = DURATION(PAR.Date_End_USR PAR.Date_Beg_USR 'DY' 1111111 'NONE' 'N' 1);

   // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
   LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

   // LCL.Time End USR = LCL.Time End USR + LCL.Usr Elapsed hours
   LCL.Time_End_USR = LCL.Time_End_USR + LCL.Usr_Elapsed_hours;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Number 1 USR = PAR.Date Beg USR - PAR.Date End USR *DAYS
   LCL.Number_1_USR = DURATION(PAR.Date_Beg_USR PAR.Date_End_USR 'DY' 1111111 'NONE' 'N' 1);

   // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
   LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

   // LCL.Time Beg USR = LCL.Time Beg USR + LCL.Usr Elapsed hours
   LCL.Time_Beg_USR = LCL.Time_Beg_USR + LCL.Usr_Elapsed_hours;

   ENDIF;

   // LCL.Time Diff Usr = LCL.Time End USR - LCL.Time Beg USR *HHMMSS
   LCL.Time_Diff_Usr = TIMELAPSED(LCL.Time_End_USR LCL.Time_Beg_USR 'HS');

   // LCL.Hours USR = LCL.Time Diff Usr *HOURS
   LCL.Hours_USR = TIMEDTLS(LCL.Time_Diff_Usr 'HR');

   // LCL.Minutes USR = LCL.Time Diff Usr *MINUTES
   LCL.Minutes_USR = TIMEDTLS(LCL.Time_Diff_Usr 'MN');

   // LCL.Wait Time 4.0 USR = LCL.Hours USR * CON.60 *
   LCL.Wait_Time_4_0_USR = LCL.Hours_USR * 60;

   // PAR.Wait Time 4.0 USR = LCL.Wait Time 4.0 USR + LCL.Minutes USR
   PAR.Wait_Time_4_0_USR = LCL.Wait_Time_4_0_USR + LCL.Minutes_USR;

   CASE;

   // IF LCL.Time Diff Usr is lt 0
   IF LCL.Time_Diff_Usr < *ZERO;

   // PAR.Wait Time 4.0 USR = CON.*ZERO - PAR.Wait Time 4.0 USR
   PAR.Wait_Time_4_0_USR = *ZERO - PAR.Wait_Time_4_0_USR;

   ENDIF;

   ENDIF;

  }

  CASE;

  // IF PAR.DT Source Type is Internal
  IF PAR.DT_Source_Type = 'I';

  // Compute: Formula wt time
  LCL.DT_Formula_Wait_Tm_@_Plt = ( LCL.Time_USR + LCL.DT_Unload_Time ) + 10;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Compute: Formula wt time
  LCL.DT_Formula_Wait_Tm_@_Plt = LCL.Time_USR + 10;

  ENDIF;

  //?Calc: Formula Based Wait @ Plt
  // IF LCL.DT On Time Delivery is Early
  IF LCL.DT_On_Time_Delivery = 'E';

  EXECUTE FUNCTION(Clc Time Durations    IF) TYPE(EXCINTFUN)                      AB1247954;
  PARAMETER(PAR.DT_TrkScl_Weigh_Out_Date);
  PARAMETER(PAR.DT_TrkScl_Weigh_Out_Time);
  PARAMETER(PAR.DT_Delivery_Date);
  PARAMETER(PAR.DT_Delivery_Time);
  PARAMETER(LCL.Time_USR);
  {
   //?Execute internal function

   // PAR.Wait Time 4.0 USR = CON.*ZERO
   PAR.Wait_Time_4_0_USR = *ZERO;

   CASE;

   // IF PAR.Date Beg USR is Entered
   IF PAR.Date_Beg_USR <> *ZERO;

   // AND PAR.Date End USR is Entered
   AND PAR.Date_End_USR <> 0;

   // AND PAR.Time Beg 4.0 USR is Entered
   AND PAR.Time_Beg_4_0_USR <> *ZERO;

   // AND PAR.Time End 4.0 USR is Entered
   AND PAR.Time_End_4_0_USR <> *ZERO;

   // LCL.Time Beg USR = PAR.Time Beg 4.0 USR * CON.100 *
   LCL.Time_Beg_USR = PAR.Time_Beg_4_0_USR * 100;

   // LCL.Time End USR = PAR.Time End 4.0 USR * CON.100 *
   LCL.Time_End_USR = PAR.Time_End_4_0_USR * 100;

   CASE;

   // IF PAR.Date Beg USR LT PAR.Date End USR
   IF PAR.Date_Beg_USR < PAR.Date_End_USR;

   // LCL.Number 1 USR = PAR.Date End USR - PAR.Date Beg USR *DAYS
   LCL.Number_1_USR = DURATION(PAR.Date_End_USR PAR.Date_Beg_USR 'DY' 1111111 'NONE' 'N' 1);

   // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
   LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

   // LCL.Time End USR = LCL.Time End USR + LCL.Usr Elapsed hours
   LCL.Time_End_USR = LCL.Time_End_USR + LCL.Usr_Elapsed_hours;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Number 1 USR = PAR.Date Beg USR - PAR.Date End USR *DAYS
   LCL.Number_1_USR = DURATION(PAR.Date_Beg_USR PAR.Date_End_USR 'DY' 1111111 'NONE' 'N' 1);

   // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
   LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

   // LCL.Time Beg USR = LCL.Time Beg USR + LCL.Usr Elapsed hours
   LCL.Time_Beg_USR = LCL.Time_Beg_USR + LCL.Usr_Elapsed_hours;

   ENDIF;

   // LCL.Time Diff Usr = LCL.Time End USR - LCL.Time Beg USR *HHMMSS
   LCL.Time_Diff_Usr = TIMELAPSED(LCL.Time_End_USR LCL.Time_Beg_USR 'HS');

   // LCL.Hours USR = LCL.Time Diff Usr *HOURS
   LCL.Hours_USR = TIMEDTLS(LCL.Time_Diff_Usr 'HR');

   // LCL.Minutes USR = LCL.Time Diff Usr *MINUTES
   LCL.Minutes_USR = TIMEDTLS(LCL.Time_Diff_Usr 'MN');

   // LCL.Wait Time 4.0 USR = LCL.Hours USR * CON.60 *
   LCL.Wait_Time_4_0_USR = LCL.Hours_USR * 60;

   // PAR.Wait Time 4.0 USR = LCL.Wait Time 4.0 USR + LCL.Minutes USR
   PAR.Wait_Time_4_0_USR = LCL.Wait_Time_4_0_USR + LCL.Minutes_USR;

   CASE;

   // IF LCL.Time Diff Usr is lt 0
   IF LCL.Time_Diff_Usr < *ZERO;

   // PAR.Wait Time 4.0 USR = CON.*ZERO - PAR.Wait Time 4.0 USR
   PAR.Wait_Time_4_0_USR = *ZERO - PAR.Wait_Time_4_0_USR;

   ENDIF;

   ENDIF;

  }

  CASE;

  // IF PAR.DT Source Type is Internal
  IF PAR.DT_Source_Type = 'I';

  // Compute: Formula wt time
  LCL.DT_Formula_Wait_Tm_@_Plt = ( LCL.Time_USR + LCL.DT_Unload_Time ) + 10;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Compute: Formula wt time
  LCL.DT_Formula_Wait_Tm_@_Plt = LCL.Time_USR + 10;

  ENDIF;

  //?Calc: Formula Based Wait @ Plt
  // IF LCL.DT On Time Delivery is Late
  IF LCL.DT_On_Time_Delivery = 'L';

  EXECUTE FUNCTION(Clc Time Durations    IF) TYPE(EXCINTFUN)                      AB1247954;
  PARAMETER(PAR.DT_TrkScl_Weigh_Out_Date);
  PARAMETER(PAR.DT_TrkScl_Weigh_Out_Time);
  PARAMETER(PAR.DT_Arrive_@_Plant_Date);
  PARAMETER(PAR.DT_Arrive_@_Plant_Time);
  PARAMETER(LCL.Time_USR);
  {
   //?Execute internal function

   // PAR.Wait Time 4.0 USR = CON.*ZERO
   PAR.Wait_Time_4_0_USR = *ZERO;

   CASE;

   // IF PAR.Date Beg USR is Entered
   IF PAR.Date_Beg_USR <> *ZERO;

   // AND PAR.Date End USR is Entered
   AND PAR.Date_End_USR <> 0;

   // AND PAR.Time Beg 4.0 USR is Entered
   AND PAR.Time_Beg_4_0_USR <> *ZERO;

   // AND PAR.Time End 4.0 USR is Entered
   AND PAR.Time_End_4_0_USR <> *ZERO;

   // LCL.Time Beg USR = PAR.Time Beg 4.0 USR * CON.100 *
   LCL.Time_Beg_USR = PAR.Time_Beg_4_0_USR * 100;

   // LCL.Time End USR = PAR.Time End 4.0 USR * CON.100 *
   LCL.Time_End_USR = PAR.Time_End_4_0_USR * 100;

   CASE;

   // IF PAR.Date Beg USR LT PAR.Date End USR
   IF PAR.Date_Beg_USR < PAR.Date_End_USR;

   // LCL.Number 1 USR = PAR.Date End USR - PAR.Date Beg USR *DAYS
   LCL.Number_1_USR = DURATION(PAR.Date_End_USR PAR.Date_Beg_USR 'DY' 1111111 'NONE' 'N' 1);

   // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
   LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

   // LCL.Time End USR = LCL.Time End USR + LCL.Usr Elapsed hours
   LCL.Time_End_USR = LCL.Time_End_USR + LCL.Usr_Elapsed_hours;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Number 1 USR = PAR.Date Beg USR - PAR.Date End USR *DAYS
   LCL.Number_1_USR = DURATION(PAR.Date_Beg_USR PAR.Date_End_USR 'DY' 1111111 'NONE' 'N' 1);

   // LCL.Usr Elapsed hours = LCL.Number 1 USR * CON.240000 *
   LCL.Usr_Elapsed_hours = LCL.Number_1_USR * 240000;

   // LCL.Time Beg USR = LCL.Time Beg USR + LCL.Usr Elapsed hours
   LCL.Time_Beg_USR = LCL.Time_Beg_USR + LCL.Usr_Elapsed_hours;

   ENDIF;

   // LCL.Time Diff Usr = LCL.Time End USR - LCL.Time Beg USR *HHMMSS
   LCL.Time_Diff_Usr = TIMELAPSED(LCL.Time_End_USR LCL.Time_Beg_USR 'HS');

   // LCL.Hours USR = LCL.Time Diff Usr *HOURS
   LCL.Hours_USR = TIMEDTLS(LCL.Time_Diff_Usr 'HR');

   // LCL.Minutes USR = LCL.Time Diff Usr *MINUTES
   LCL.Minutes_USR = TIMEDTLS(LCL.Time_Diff_Usr 'MN');

   // LCL.Wait Time 4.0 USR = LCL.Hours USR * CON.60 *
   LCL.Wait_Time_4_0_USR = LCL.Hours_USR * 60;

   // PAR.Wait Time 4.0 USR = LCL.Wait Time 4.0 USR + LCL.Minutes USR
   PAR.Wait_Time_4_0_USR = LCL.Wait_Time_4_0_USR + LCL.Minutes_USR;

   CASE;

   // IF LCL.Time Diff Usr is lt 0
   IF LCL.Time_Diff_Usr < *ZERO;

   // PAR.Wait Time 4.0 USR = CON.*ZERO - PAR.Wait Time 4.0 USR
   PAR.Wait_Time_4_0_USR = *ZERO - PAR.Wait_Time_4_0_USR;

   ENDIF;

   ENDIF;

  }

  CASE;

  // IF PAR.DT Source Type is Internal
  IF PAR.DT_Source_Type = 'I';

  // Compute: Formula Wt Time
  LCL.DT_Formula_Wait_Tm_@_Plt = ( ( ( LCL.Time_USR + LCL.DT_Delv_Time_Variance )
  + LCL.DT_Unload_Time ) + 10 ) - 15;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Compute: Formula Wt Time
  LCL.DT_Formula_Wait_Tm_@_Plt = ( ( LCL.Time_USR + LCL.DT_Delv_Time_Variance ) + 10 ) - 15;

  ENDIF;

  ENDIF;

  //?If positive, make 0;  if negative, make it positive.
  CASE;

  // IF LCL.DT Formula Wait Tm @ Plt is GT 0
  IF LCL.DT_Formula_Wait_Tm_@_Plt > *ZERO;

  // LCL.DT Formula Wait Tm @ Plt = CON.*ZERO
  LCL.DT_Formula_Wait_Tm_@_Plt = *ZERO;

  //?If positive, make 0;  if negative, make it positive.
  // IF LCL.DT Formula Wait Tm @ Plt is LT 0
  IF LCL.DT_Formula_Wait_Tm_@_Plt < 0;

  // LCL.DT Formula Wait Tm @ Plt = CON.*ZERO - LCL.DT Formula Wait Tm @ Plt
  LCL.DT_Formula_Wait_Tm_@_Plt = *ZERO - LCL.DT_Formula_Wait_Tm_@_Plt;

  ENDIF;

  //?*****
  //?Force Times calculated from 2 actual times to -0- if <0
  DO;

  //?New sequence 7/17/03
  CASE;

  // IF LCL.DT Drive Time To Farm is LT Zero
  IF LCL.DT_Drive_Time_To_Farm < *ZERO;

  // LCL.DT Drive Time To Farm = CON.*ZERO
  LCL.DT_Drive_Time_To_Farm = 0;

  ENDIF;

  CASE;

  // IF LCL.DT Wait @ Farm is LT Zero
  IF LCL.DT_Wait_@_Farm < *ZERO;

  // LCL.DT Wait @ Farm = CON.*ZERO
  LCL.DT_Wait_@_Farm = 0;

  ENDIF;

  CASE;

  // IF LCL.DT Load Time is LT Zero
  IF LCL.DT_Load_Time < *ZERO;

  // LCL.DT Load Time = CON.*ZERO
  LCL.DT_Load_Time = 0;

  ENDIF;

  CASE;

  // IF LCL.DT Drive Time To Plant is LT Zero
  IF LCL.DT_Drive_Time_To_Plant < *ZERO;

  // LCL.DT Drive Time To Plant = CON.*ZERO
  LCL.DT_Drive_Time_To_Plant = 0;

  ENDIF;

  CASE;

  // IF LCL.DT Wait @ TrkScl is LT 0
  IF LCL.DT_Wait_@_TrkScl < 0;

  // LCL.DT Wait @ TrkScl = CON.*ZERO
  LCL.DT_Wait_@_TrkScl = 0;

  ENDIF;

  CASE;

  // IF LCL.DT Wait-Rcv Dock is LT Zero
  IF LCL.DT_Wait_Rcv_Dock < *ZERO;

  // LCL.DT Wait-Rcv Dock = CON.*ZERO
  LCL.DT_Wait_Rcv_Dock = 0;

  ENDIF;

  CASE;

  // IF LCL.DT Wait @ Rcv Dock is LT Zero
  IF LCL.DT_Wait_@_Rcv_Dock < *ZERO;

  // LCL.DT Wait @ Rcv Dock = CON.*ZERO
  LCL.DT_Wait_@_Rcv_Dock = 0;

  ENDIF;

  CASE;

  // IF LCL.DT Unload Time is LT Zero
  IF LCL.DT_Unload_Time < *ZERO;

  // LCL.DT Unload Time = CON.*ZERO
  LCL.DT_Unload_Time = 0;

  ENDIF;

  ENDDO;

  //?*****
  //?Determine Error Sts and Reason, if applicable         2/02/04 RMC
  EXECUTE FUNCTION(Exc DT Exceptions     IF) TYPE(EXCINTFUN)                      AB1257269;
  PARAMETER(PAR.CC_Company_Number);
  PARAMETER(PAR.DSH_Kill_Date);
  PARAMETER(PAR.DT_Delivery_Date);
  PARAMETER(PAR.DT_Delivery_Time);
  PARAMETER(PAR.DT_Delivery_Time_Seq);
  PARAMETER(PAR.DT_Actual_Kill_Date);
  PARAMETER(PAR.DT_Actual_Delivery_Hour);
  PARAMETER(PAR.DT_Scheduled_Hour);
  PARAMETER(PAR.DT_Delivery_Initiation);
  PARAMETER(PAR.DT_Farm_Site_Code);
  PARAMETER(PAR.DT_Building);
  PARAMETER(PAR.DT_Room);
  PARAMETER(PAR.DT_Sire_Line_Code);
  PARAMETER(PAR.DT_Hog_Group_Reference);
  PARAMETER(PAR.DT_Delivered_Head);
  PARAMETER(PAR.DT_Delivered_Weight_lbs);
  PARAMETER(PAR.DT_Trucker_Code_HPS);
  PARAMETER(PAR.DT_Driver);
  PARAMETER(PAR.DT_Loading_Crew);
  PARAMETER(PAR.CHR_Code);
  PARAMETER(PAR.DT_Load_Type);
  PARAMETER(PAR.DT_Full_Split_Load);
  PARAMETER(PAR.DT_Movement_Number);
  PARAMETER(PAR.DT_Truck_ID);
  PARAMETER(PAR.DT_Trailer_ID);
  PARAMETER(PAR.DT_Transportation_Office);
  PARAMETER(PAR.DT_Transprtn_Office_Date);
  PARAMETER(PAR.DT_Transprtn_Office_Time);
  PARAMETER(PAR.DT_Arrive@Frm_v_StartLd);
  PARAMETER(PAR.DT_On_Time_Farm_Arrvl_Sts);
  PARAMETER(PAR.DT_Route_Start_Pnt);
  PARAMETER(PAR.DT_Route_Start_Date);
  PARAMETER(PAR.DT_Route_Start_Time);
  PARAMETER(PAR.DT_Route_Start_Variance);
  PARAMETER(PAR.DT_Wait_@_Transp_Offc_Tm);
  PARAMETER(PAR.DT_Arrive_@_Farm_Date);
  PARAMETER(PAR.DT_Arrive_@_Farm_Time);
  PARAMETER(PAR.DT_Drive_Time_To_Farm);
  PARAMETER(PAR.DT_Start_Loading_Date);
  PARAMETER(PAR.DT_Start_Loading_Time);
  PARAMETER(PAR.DT_Start_Loading_Variance);
  PARAMETER(PAR.DT_Wait_@_Farm);
  PARAMETER(PAR.DT_Frm_End_Loading_Date);
  PARAMETER(PAR.DT_Frm_End_Loading_Time);
  PARAMETER(PAR.DT_Load_Time);
  PARAMETER(PAR.DT_Leave_Farm_Date);
  PARAMETER(PAR.DT_Leave_Farm_Time);
  PARAMETER(PAR.DT_Wait_Depart_Frm);
  PARAMETER(PAR.DT_Plt_TrkWsh_Arvl_Date);
  PARAMETER(PAR.DT_Plt_TrkWsh_Arvl_Time);
  PARAMETER(PAR.DT_Arrive_@_Plant_Date);
  PARAMETER(PAR.DT_Arrive_@_Plant_Time);
  PARAMETER(PAR.DT_Wait_@_TrkWsh);
  PARAMETER(PAR.DT_Drive_Time_To_Plant);
  PARAMETER(PAR.DT_Delv_Time_Variance);
  PARAMETER(PAR.DT_On_Time_Delivery);
  PARAMETER(PAR.Delivery_Reason_Code);
  PARAMETER(PAR.DT_TrkScl_Weigh_In_Date);
  PARAMETER(PAR.DT_TrkScl_Weigh_In_Time);
  PARAMETER(PAR.DT_Wait_@_TrkScl);
  PARAMETER(PAR.DT_To_Recv_Dock_Date);
  PARAMETER(PAR.DT_To_Recv_Dock_Time);
  PARAMETER(PAR.DT_Wait_Rcv_Dock);
  PARAMETER(PAR.DT_Start_Unloading_Date);
  PARAMETER(PAR.DT_Start_Unloading_Time);
  PARAMETER(PAR.DT_Wait_@_Rcv_Dock);
  PARAMETER(PAR.DT_End_Unload_Date);
  PARAMETER(PAR.DT_End_Unload_Time);
  PARAMETER(PAR.DT_Unload_Time);
  PARAMETER(PAR.DT_Unload_Variance_Time);
  PARAMETER(PAR.DT_TrkScl_Weigh_Out_Date);
  PARAMETER(PAR.DT_TrkScl_Weigh_Out_Time);
  PARAMETER(PAR.DT_Wait_Time_@_the_Plant);
  PARAMETER(PAR.DT_Formula_Wait_Tm_@_Plt);
  PARAMETER(PAR.DT_Source_Type);
  PARAMETER(LCL.DT_Error_Sts);
  PARAMETER(LCL.DT_Error_Reason);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.PL_Location_Code);
  PARAMETER(PAR.SR_Source_Code);
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(WRK.Text_description);
  PARAMETER(WRK.Date_USR);
  PARAMETER(WRK.Date_2_USR);
  PARAMETER(WRK.Time_Beg_4_0_USR);
  PARAMETER(WRK.Time_End_4_0_USR);
  {
   //?Execute internal function

   //?This routine contains all of the DT Exceptions
   //?***********************
   // PAR.DT Error Sts = CND.No Errors
   PAR.DT_Error_Sts = *BLANK;

   // PAR.DT Error Reason = WRK.Blank Usr 1 fld Usr
   PAR.DT_Error_Reason = WRK.Blank_Usr_1_fld_Usr;

   // PAR.Text description = CON.*BLANK
   PAR.Text_description = *BLANK;

   // PAR.Date USR = CON.*ZERO
   PAR.Date_USR = *ZERO;

   // PAR.Time Beg 4.0 USR = CON.*ZERO
   PAR.Time_Beg_4_0_USR = *ZERO;

   // PAR.Date 2 USR = CON.*ZERO
   PAR.Date_2_USR = *ZERO;

   // PAR.Time End 4.0 USR = CON.*ZERO
   PAR.Time_End_4_0_USR = *ZERO;

   //?***********************
   //?Date/Times out of Sequence
   DO;

   //?01/29/04 PKD Only check the Route Start Date/Time if SBD Hauler
   //?02/18/04 RMC Also error if route start or arrive @ farm Not entered
   //?***********************
   //?Route Start not entered
   CASE;

   // IF PAR.DT Trucker Code HPS is Seaboard
   IF PAR.DT_Trucker_Code_HPS = 'SBD';

   // AND PAR.DT Route Start Date is Not Entered
   AND ( PAR.DT_Route_Start_Date = *ZERO;

   // OR PAR.DT Route Start Time is Not Entered
   OR PAR.DT_Route_Start_Time = *ZERO );

   // PAR.DT Error Sts = CND.Error
   PAR.DT_Error_Sts = 'E';

   // PAR.DT Error Reason = CND.Route Start not entered.
   PAR.DT_Error_Reason = 'RN';

   ENDIF;

   //?Farm Arrival not entered
   CASE;

   // IF PAR.DT Trucker Code HPS is Seaboard
   IF PAR.DT_Trucker_Code_HPS = 'SBD';

   // AND PAR.DT Arrive @ Farm Date is Not Entered
   AND ( PAR.DT_Arrive_@_Farm_Date = *ZERO;

   // OR PAR.DT Arrive @ Farm Time is Not Entered
   OR PAR.DT_Arrive_@_Farm_Time = *ZERO );

   // PAR.DT Error Sts = CND.Error
   PAR.DT_Error_Sts = 'E';

   // PAR.DT Error Reason = CND.Farm Arrvl not entered.
   PAR.DT_Error_Reason = 'FN';

   ENDIF;

   CASE;

   // IF PAR.DT Error Sts is No Errors
   IF PAR.DT_Error_Sts = *BLANK;

   //?Route Start > Farm Arrival
   CASE;

   // IF PAR.DT Trucker Code HPS is Seaboard
   IF PAR.DT_Trucker_Code_HPS = 'SBD';

   // AND PAR.DT Route Start Date GT PAR.DT Arrive @ Farm Date
   AND ( PAR.DT_Route_Start_Date > PAR.DT_Arrive_@_Farm_Date;

   // OR PAR.DT Route Start Date EQ PAR.DT Arrive @ Farm Date
   OR ( PAR.DT_Route_Start_Date = PAR.DT_Arrive_@_Farm_Date;

   // AND PAR.DT Route Start Time GT PAR.DT Arrive @ Farm Time
   AND PAR.DT_Route_Start_Time > PAR.DT_Arrive_@_Farm_Time ) );

   // PAR.Text description = CON.Route Start > Farm Arrvl
   PAR.Text_description = 'Route Start > Farm Arrvl';

   // PAR.DT Error Sts = CND.Error
   PAR.DT_Error_Sts = 'E';

   // PAR.DT Error Reason = CND.Route Start > Farm Arrvl
   PAR.DT_Error_Reason = 'RS';

   // PAR.Date USR = PAR.DT Route Start Date
   PAR.Date_USR = PAR.DT_Route_Start_Date;

   // PAR.Time Beg 4.0 USR = PAR.DT Route Start Time
   PAR.Time_Beg_4_0_USR = PAR.DT_Route_Start_Time;

   // PAR.Date 2 USR = PAR.DT Arrive @ Farm Date
   PAR.Date_2_USR = PAR.DT_Arrive_@_Farm_Date;

   // PAR.Time End 4.0 USR = PAR.DT Arrive @ Farm Time
   PAR.Time_End_4_0_USR = PAR.DT_Arrive_@_Farm_Time;

   ENDIF;

   ENDIF;

   //?Arrive @ Farm > Start Loading
   CASE;

   // IF PAR.DT Arrive @ Farm Date GT PAR.DT Start Loading Date
   IF PAR.DT_Arrive_@_Farm_Date > PAR.DT_Start_Loading_Date;

   // OR PAR.DT Arrive @ Farm Date EQ PAR.DT Start Loading Date
   OR ( PAR.DT_Arrive_@_Farm_Date = PAR.DT_Start_Loading_Date;

   // AND PAR.DT Arrive @ Farm Time GT PAR.DT Start Loading Time
   AND PAR.DT_Arrive_@_Farm_Time > PAR.DT_Start_Loading_Time );

   // PAR.Text description = CON.Farm Arrvl > Start Loadng
   PAR.Text_description = 'Farm Arrvl > Start Loadng';

   // PAR.DT Error Sts = CND.Error
   PAR.DT_Error_Sts = 'E';

   // PAR.DT Error Reason = CND.Farm Arrvl > Start Loadng
   PAR.DT_Error_Reason = 'FA';

   // PAR.Date USR = PAR.DT Arrive @ Farm Date
   PAR.Date_USR = PAR.DT_Arrive_@_Farm_Date;

   // PAR.Time Beg 4.0 USR = PAR.DT Arrive @ Farm Time
   PAR.Time_Beg_4_0_USR = PAR.DT_Arrive_@_Farm_Time;

   // PAR.Date 2 USR = PAR.DT Start Loading Date
   PAR.Date_2_USR = PAR.DT_Start_Loading_Date;

   // PAR.Time End 4.0 USR = PAR.DT Start Loading Time
   PAR.Time_End_4_0_USR = PAR.DT_Start_Loading_Time;

   ENDIF;

   //?Start Loading > Leave Farm
   CASE;

   // IF PAR.DT Start Loading Date GT PAR.DT Leave Farm Date
   IF PAR.DT_Start_Loading_Date > PAR.DT_Leave_Farm_Date;

   // OR PAR.DT Start Loading Date EQ PAR.DT Leave Farm Date
   OR ( PAR.DT_Start_Loading_Date = PAR.DT_Leave_Farm_Date;

   // AND PAR.DT Start Loading Time GT PAR.DT Leave Farm Time
   AND PAR.DT_Start_Loading_Time > PAR.DT_Leave_Farm_Time );

   // PAR.Text description = CON.Start Loadng > Leave Farm
   PAR.Text_description = 'Start Loadng > Leave Farm';

   // PAR.DT Error Sts = CND.Error
   PAR.DT_Error_Sts = 'E';

   // PAR.DT Error Reason = CND.Start Loadng > Leave Farm
   PAR.DT_Error_Reason = 'SL';

   // PAR.Date USR = PAR.DT Start Loading Date
   PAR.Date_USR = PAR.DT_Start_Loading_Date;

   // PAR.Time Beg 4.0 USR = PAR.DT Start Loading Time
   PAR.Time_Beg_4_0_USR = PAR.DT_Start_Loading_Time;

   // PAR.Date 2 USR = PAR.DT Leave Farm Date
   PAR.Date_2_USR = PAR.DT_Leave_Farm_Date;

   // PAR.Time End 4.0 USR = PAR.DT Leave Farm Time
   PAR.Time_End_4_0_USR = PAR.DT_Leave_Farm_Time;

   ENDIF;

   //?Leave Farm > Arrive @ Plant
   CASE;

   // IF PAR.DT Leave Farm Date GT PAR.DT Arrive @ Plant Date
   IF PAR.DT_Leave_Farm_Date > PAR.DT_Arrive_@_Plant_Date;

   // OR PAR.DT Leave Farm Date EQ PAR.DT Arrive @ Plant Date
   OR ( PAR.DT_Leave_Farm_Date = PAR.DT_Arrive_@_Plant_Date;

   // AND PAR.DT Leave Farm Time GT PAR.DT Arrive @ Plant Time
   AND PAR.DT_Leave_Farm_Time > PAR.DT_Arrive_@_Plant_Time );

   // PAR.Text description = CON.Leave Farm > Plant Arrvl
   PAR.Text_description = 'Leave Farm > Plant Arrvl';

   // PAR.DT Error Sts = CND.Error
   PAR.DT_Error_Sts = 'E';

   // PAR.DT Error Reason = CND.Leave Farm > Plant Arrvl
   PAR.DT_Error_Reason = 'LF';

   // PAR.Date USR = PAR.DT Leave Farm Date
   PAR.Date_USR = PAR.DT_Leave_Farm_Date;

   // PAR.Time Beg 4.0 USR = PAR.DT Leave Farm Time
   PAR.Time_Beg_4_0_USR = PAR.DT_Leave_Farm_Time;

   // PAR.Date 2 USR = PAR.DT Arrive @ Plant Date
   PAR.Date_2_USR = PAR.DT_Arrive_@_Plant_Date;

   // PAR.Time End 4.0 USR = PAR.DT Arrive @ Plant Time
   PAR.Time_End_4_0_USR = PAR.DT_Arrive_@_Plant_Time;

   ENDIF;

   //?Arrive @ Plant > TrkScl Weigh in
   CASE;

   // IF PAR.DT Arrive @ Plant Date GT PAR.DT TrkScl Weigh-In Date
   IF PAR.DT_Arrive_@_Plant_Date > PAR.DT_TrkScl_Weigh_In_Date;

   // OR PAR.DT Arrive @ Plant Date EQ PAR.DT TrkScl Weigh-In Date
   OR ( PAR.DT_Arrive_@_Plant_Date = PAR.DT_TrkScl_Weigh_In_Date;

   // AND PAR.DT Arrive @ Plant Time GT PAR.DT TrkScl Weigh-In Time
   AND PAR.DT_Arrive_@_Plant_Time > PAR.DT_TrkScl_Weigh_In_Time );

   // PAR.Text description = CON.Plant Arrvl > TrkSclWghIn
   PAR.Text_description = 'Plant Arrvl > TrkSclWghIn';

   // PAR.DT Error Sts = CND.Error
   PAR.DT_Error_Sts = 'E';

   // PAR.DT Error Reason = CND.Plant Arrvl > Trk Scl in
   PAR.DT_Error_Reason = 'PA';

   // PAR.Date USR = PAR.DT Arrive @ Plant Date
   PAR.Date_USR = PAR.DT_Arrive_@_Plant_Date;

   // PAR.Time Beg 4.0 USR = PAR.DT Arrive @ Plant Time
   PAR.Time_Beg_4_0_USR = PAR.DT_Arrive_@_Plant_Time;

   // PAR.Date 2 USR = PAR.DT TrkScl Weigh-In Date
   PAR.Date_2_USR = PAR.DT_TrkScl_Weigh_In_Date;

   // PAR.Time End 4.0 USR = PAR.DT TrkScl Weigh-In Time
   PAR.Time_End_4_0_USR = PAR.DT_TrkScl_Weigh_In_Time;

   ENDIF;

   //?TrkScl Weigh in > To Recv dock
   CASE;

   // IF PAR.DT TrkScl Weigh-In Date GT PAR.DT To Recv Dock Date
   IF PAR.DT_TrkScl_Weigh_In_Date > PAR.DT_To_Recv_Dock_Date;

   // OR PAR.DT TrkScl Weigh-In Date EQ PAR.DT To Recv Dock Date
   OR ( PAR.DT_TrkScl_Weigh_In_Date = PAR.DT_To_Recv_Dock_Date;

   // AND PAR.DT TrkScl Weigh-In Time GT PAR.DT To Recv Dock Time
   AND PAR.DT_TrkScl_Weigh_In_Time > PAR.DT_To_Recv_Dock_Time );

   // PAR.Text description = CON.TrkSclWghIn > To Rcv Dock
   PAR.Text_description = 'TrkSclWghIn > To Rcv Dock';

   // PAR.DT Error Sts = CND.Error
   PAR.DT_Error_Sts = 'E';

   // PAR.DT Error Reason = CND.Trk Scl in > To Rcv Dock
   PAR.DT_Error_Reason = 'TS';

   // PAR.Date USR = PAR.DT TrkScl Weigh-In Date
   PAR.Date_USR = PAR.DT_TrkScl_Weigh_In_Date;

   // PAR.Time Beg 4.0 USR = PAR.DT TrkScl Weigh-In Time
   PAR.Time_Beg_4_0_USR = PAR.DT_TrkScl_Weigh_In_Time;

   // PAR.Date 2 USR = PAR.DT To Recv Dock Date
   PAR.Date_2_USR = PAR.DT_To_Recv_Dock_Date;

   // PAR.Time End 4.0 USR = PAR.DT To Recv Dock Time
   PAR.Time_End_4_0_USR = PAR.DT_To_Recv_Dock_Time;

   ENDIF;

   //?To Recv Dock > Start Unloading
   CASE;

   // IF PAR.DT To Recv Dock Date GT PAR.DT Start Unloading Date
   IF PAR.DT_To_Recv_Dock_Date > PAR.DT_Start_Unloading_Date;

   // OR PAR.DT To Recv Dock Date EQ PAR.DT Start Unloading Date
   OR ( PAR.DT_To_Recv_Dock_Date = PAR.DT_Start_Unloading_Date;

   // AND PAR.DT To Recv Dock Time GT PAR.DT Start Unloading Time
   AND PAR.DT_To_Recv_Dock_Time > PAR.DT_Start_Unloading_Time );

   // PAR.Text description = CON.To Rcv Dock > Start Unld
   PAR.Text_description = 'To Rcv Dock > Start Unld';

   // PAR.DT Error Sts = CND.Error
   PAR.DT_Error_Sts = 'E';

   // PAR.DT Error Reason = CND.To Rcv Dock > Strt Unload
   PAR.DT_Error_Reason = 'TR';

   // PAR.Date USR = PAR.DT To Recv Dock Date
   PAR.Date_USR = PAR.DT_To_Recv_Dock_Date;

   // PAR.Time Beg 4.0 USR = PAR.DT To Recv Dock Time
   PAR.Time_Beg_4_0_USR = PAR.DT_To_Recv_Dock_Time;

   // PAR.Date 2 USR = PAR.DT Start Unloading Date
   PAR.Date_2_USR = PAR.DT_Start_Unloading_Date;

   // PAR.Time End 4.0 USR = PAR.DT Start Unloading Time
   PAR.Time_End_4_0_USR = PAR.DT_Start_Unloading_Time;

   ENDIF;

   //?Start Unloading > TrkScl Weigh out
   CASE;

   // IF PAR.DT Start Unloading Date GT PAR.DT TrkScl Weigh-Out Date
   IF PAR.DT_Start_Unloading_Date > PAR.DT_TrkScl_Weigh_Out_Date;

   // OR PAR.DT Start Unloading Date EQ PAR.DT TrkScl Weigh-Out Date
   OR ( PAR.DT_Start_Unloading_Date = PAR.DT_TrkScl_Weigh_Out_Date;

   // AND PAR.DT Start Unloading Time GT PAR.DT TrkScl Weigh-Out Time
   AND PAR.DT_Start_Unloading_Time > PAR.DT_TrkScl_Weigh_Out_Time );

   // PAR.Text description = CON.Start Unld > TrkSclWghOut
   PAR.Text_description = 'Start Unld > TrkSclWghOut';

   // PAR.DT Error Sts = CND.Error
   PAR.DT_Error_Sts = 'E';

   // PAR.DT Error Reason = CND.Strt Unload > Trk Scl Out
   PAR.DT_Error_Reason = 'SU';

   // PAR.Date USR = PAR.DT Start Unloading Date
   PAR.Date_USR = PAR.DT_Start_Unloading_Date;

   // PAR.Time Beg 4.0 USR = PAR.DT Start Unloading Time
   PAR.Time_Beg_4_0_USR = PAR.DT_Start_Unloading_Time;

   // PAR.Date 2 USR = PAR.DT TrkScl Weigh-Out Date
   PAR.Date_2_USR = PAR.DT_TrkScl_Weigh_Out_Date;

   // PAR.Time End 4.0 USR = PAR.DT TrkScl Weigh-Out Time
   PAR.Time_End_4_0_USR = PAR.DT_TrkScl_Weigh_Out_Time;

   ENDIF;

   ENDDO;

   //?Missing trucker,driver,loading crew
   CASE;

   // IF PAR.DT Source Type is Internal
   IF PAR.DT_Source_Type = 'I';

   // AND PAR.DT Error Sts is No Errors
   AND PAR.DT_Error_Sts = *BLANK;

   CASE;

   // IF PAR.DT Trucker Code HPS is Not Entered
   IF PAR.DT_Trucker_Code_HPS = *BLANK;

   // OR PAR.DT Driver is Not Entered
   OR PAR.DT_Driver = *BLANK;

   // OR PAR.DT Loading Crew is Not Entered
   OR PAR.DT_Loading_Crew = *BLANK;

   // WRK.Text 7 USR = CON.Missing
   WRK.Text_7_USR = 'Missing';

   CASE;

   // IF PAR.DT Trucker Code HPS is Not Entered
   IF PAR.DT_Trucker_Code_HPS = *BLANK;

   // AND PAR.DT Driver is Not Entered
   AND PAR.DT_Driver = *BLANK;

   // AND PAR.DT Loading Crew is Not Entered
   AND PAR.DT_Loading_Crew = *BLANK;

   // WRK.Reason 1 Desc USR = CONCAT(WRK.Text 7 USR,CON.TRUCKER,CON.1)
   WRK.Reason_1_Desc_USR = WRK.Text_7_USR + 'TRUCKER' (1);

   // PAR.Text description = CONCAT(WRK.Reason 1 Desc USR,CON./DRIVER/LOAD CRW,CON.*ZERO)
   PAR.Text_description = WRK.Reason_1_Desc_USR + '/DRIVER/LOAD CRW' (0);

   // PAR.DT Error Sts = CND.Error
   PAR.DT_Error_Sts = 'E';

   // PAR.DT Error Reason = CND.Trckr/Drvr/Load Crw blank
   PAR.DT_Error_Reason = 'NA';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Text 9 USR = CON.*BLANK
   WRK.Text_9_USR = *BLANK;

   // LCL.Text 9 USR = CON.*BLANK
   LCL.Text_9_USR = *BLANK;

   // WRK.Text 10 1 USR = CON.*BLANK
   WRK.Text_10_1_USR = *BLANK;

   //?Missing trucker
   CASE;

   // IF PAR.DT Trucker Code HPS is Not Entered
   IF PAR.DT_Trucker_Code_HPS = *BLANK;

   // WRK.Text 9 USR = CON.TRUCKER
   WRK.Text_9_USR = 'TRUCKER';

   // PAR.DT Error Reason = CND.Trucker not entered
   PAR.DT_Error_Reason = 'NT';

   ENDIF;

   //?Missing Driver
   CASE;

   // IF PAR.DT Driver is Not Entered
   IF PAR.DT_Driver = *BLANK;

   // PAR.DT Error Reason = CND.Driver not entered
   PAR.DT_Error_Reason = 'ND';

   CASE;

   // IF WRK.Text 9 USR EQ WRK.Blank Usr 1 fld Usr
   IF WRK.Text_9_USR = WRK.Blank_Usr_1_fld_Usr;

   // WRK.Text 9 USR = CON.DRIVER
   WRK.Text_9_USR = 'DRIVER';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Text 9 USR = CON./DRIVER
   LCL.Text_9_USR = '/DRIVER';

   ENDIF;

   ENDIF;

   //?Missing Load Crw
   CASE;

   // IF PAR.DT Loading Crew is Not Entered
   IF PAR.DT_Loading_Crew = *BLANK;

   // PAR.DT Error Reason = CND.Load Crew not entered
   PAR.DT_Error_Reason = 'NC';

   CASE;

   // IF WRK.Text 9 USR EQ WRK.Blank Usr 1 fld Usr
   IF WRK.Text_9_USR = WRK.Blank_Usr_1_fld_Usr;

   // WRK.Text 9 USR = CON.LOAD CRW
   WRK.Text_9_USR = 'LOAD CRW';

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF LCL.Text 9 USR EQ WRK.Blank Usr 1 fld Usr
   IF LCL.Text_9_USR = WRK.Blank_Usr_1_fld_Usr;

   // LCL.Text 9 USR = CON./LOAD CRW
   LCL.Text_9_USR = '/LOAD CRW';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Text 10 1 USR = CON./LOAD CRW
   LCL.Text_10_1_USR = '/LOAD CRW';

   ENDIF;

   ENDIF;

   ENDIF;

   // WRK.Text 17 USR = CONCAT(WRK.Text 7 USR,WRK.Text 9 USR,CON.1)
   WRK.Text_17_USR = WRK.Text_7_USR + WRK.Text_9_USR (1);

   // WRK.Text 25 1 USR = CONCAT(WRK.Text 17 USR,LCL.Text 9 USR,CON.*ZERO)
   WRK.Text_25_1_USR = WRK.Text_17_USR + LCL.Text_9_USR (0);

   // PAR.Text description = CONCAT(WRK.Text 25 1 USR,LCL.Text 10 1 USR,CON.*ZERO)
   PAR.Text_description = WRK.Text_25_1_USR + LCL.Text_10_1_USR (*ZERO);

   // PAR.DT Error Sts = CND.Error
   PAR.DT_Error_Sts = 'E';

   ENDIF;

   ENDIF;

   ENDIF;

  }

  //?*****
  //?-----Change all the wait times in the tracking file-----
  CASE;

  // IF PAR.DT Drive Time To Farm NE LCL.DT Drive Time To Farm
  IF PAR.DT_Drive_Time_To_Farm <> LCL.DT_Drive_Time_To_Farm;

  // OR PAR.DT Wait @ Farm NE LCL.DT Wait @ Farm
  OR PAR.DT_Wait_@_Farm <> LCL.DT_Wait_@_Farm;

  // OR PAR.DT Load Time NE LCL.DT Load Time
  OR PAR.DT_Load_Time <> LCL.DT_Load_Time;

  // OR PAR.DT Drive Time To Plant NE LCL.DT Drive Time To Plant
  OR PAR.DT_Drive_Time_To_Plant <> LCL.DT_Drive_Time_To_Plant;

  // OR PAR.DT Delv Time Variance NE LCL.DT Delv Time Variance
  OR PAR.DT_Delv_Time_Variance <> LCL.DT_Delv_Time_Variance;

  // OR PAR.DT Wait @ TrkScl NE LCL.DT Wait @ TrkScl
  OR PAR.DT_Wait_@_TrkScl <> LCL.DT_Wait_@_TrkScl;

  // OR PAR.DT Wait-Rcv Dock NE LCL.DT Wait-Rcv Dock
  OR PAR.DT_Wait_Rcv_Dock <> LCL.DT_Wait_Rcv_Dock;

  // OR PAR.DT Wait @ Rcv Dock NE LCL.DT Wait @ Rcv Dock
  OR PAR.DT_Wait_@_Rcv_Dock <> LCL.DT_Wait_@_Rcv_Dock;

  // OR PAR.DT Unload Variance Time NE LCL.DT Unload Variance Time
  OR PAR.DT_Unload_Variance_Time <> LCL.DT_Unload_Variance_Time;

  // OR PAR.DT Unload Time NE LCL.DT Unload Time
  OR PAR.DT_Unload_Time <> LCL.DT_Unload_Time;

  // OR PAR.DT Wait Time @ the Plant NE LCL.DT Wait Time @ the Plant
  OR PAR.DT_Wait_Time_@_the_Plant <> LCL.DT_Wait_Time_@_the_Plant;

  // OR PAR.DT Route Start Variance NE LCL.DT Route Start Variance
  OR PAR.DT_Route_Start_Variance <> LCL.DT_Route_Start_Variance;

  // OR PAR.DT Start Loading Variance NE LCL.DT Start Loading Variance
  OR PAR.DT_Start_Loading_Variance <> LCL.DT_Start_Loading_Variance;

  // OR PAR.DT Arrive@Frm v StartLd NE LCL.DT Arrive@Frm v StartLd
  OR PAR.DT_Arrive@Frm_v_StartLd <> LCL.DT_Arrive@Frm_v_StartLd;

  // OR PAR.DT Delv Time Variance NE LCL.DT Delv Time Variance
  OR PAR.DT_Delv_Time_Variance <> LCL.DT_Delv_Time_Variance;

  // OR PAR.DT Error Sts NE LCL.DT Error Sts
  OR PAR.DT_Error_Sts <> LCL.DT_Error_Sts;

  // OR PAR.DT Error Reason NE LCL.DT Error Reason
  OR PAR.DT_Error_Reason <> LCL.DT_Error_Reason;

  EXECUTE FUNCTION(Chg Delivery Tracking CH) TYPE(CHGOBJ) FILE(PLAFCPP)           AB1244757;
  PARAMETER(PAR.CC_Company_Number);
  PARAMETER(PAR.DSH_Kill_Date);
  PARAMETER(PAR.DT_Delivery_Date);
  PARAMETER(PAR.DT_Delivery_Time);
  PARAMETER(PAR.DT_Delivery_Time_Seq);
  PARAMETER(PAR.DT_Actual_Kill_Date);
  PARAMETER(PAR.DT_Actual_Delivery_Hour);
  PARAMETER(PAR.DT_Scheduled_Hour);
  PARAMETER(PAR.DT_Delivery_Initiation);
  PARAMETER(PAR.DT_Farm_Site_Code);
  PARAMETER(PAR.DT_Building);
  PARAMETER(PAR.DT_Room);
  PARAMETER(PAR.DT_Sire_Line_Code);
  PARAMETER(PAR.DT_Hog_Group_Reference);
  PARAMETER(PAR.DT_Delivered_Head);
  PARAMETER(PAR.DT_Delivered_Weight_lbs);
  PARAMETER(PAR.DT_Trucker_Code_HPS);
  PARAMETER(PAR.DT_Driver);
  PARAMETER(PAR.DT_Loading_Crew);
  PARAMETER(PAR.CHR_Code);
  PARAMETER(PAR.DT_Load_Type);
  PARAMETER(PAR.DT_Full_Split_Load);
  PARAMETER(PAR.DT_Movement_Number);
  PARAMETER(PAR.DT_Truck_ID);
  PARAMETER(PAR.DT_Trailer_ID);
  PARAMETER(PAR.DT_Transportation_Office);
  PARAMETER(PAR.DT_Transprtn_Office_Date);
  PARAMETER(PAR.DT_Transprtn_Office_Time);
  PARAMETER(LCL.DT_Arrive@Frm_v_StartLd);
  PARAMETER(LCL.DT_On_Time_Farm_Arrvl_Sts);
  PARAMETER(PAR.DT_Route_Start_Pnt);
  PARAMETER(PAR.DT_Route_Start_Date);
  PARAMETER(PAR.DT_Route_Start_Time);
  PARAMETER(LCL.DT_Route_Start_Variance);
  PARAMETER(PAR.DT_Wait_@_Transp_Offc_Tm);
  PARAMETER(PAR.DT_Arrive_@_Farm_Date);
  PARAMETER(PAR.DT_Arrive_@_Farm_Time);
  PARAMETER(LCL.DT_Drive_Time_To_Farm);
  PARAMETER(PAR.DT_Start_Loading_Date);
  PARAMETER(PAR.DT_Start_Loading_Time);
  PARAMETER(LCL.DT_Start_Loading_Variance);
  PARAMETER(LCL.DT_Wait_@_Farm);
  PARAMETER(PAR.DT_Frm_End_Loading_Date);
  PARAMETER(PAR.DT_Frm_End_Loading_Time);
  PARAMETER(LCL.DT_Load_Time);
  PARAMETER(PAR.DT_Leave_Farm_Date);
  PARAMETER(PAR.DT_Leave_Farm_Time);
  PARAMETER(PAR.DT_Wait_Depart_Frm);
  PARAMETER(PAR.DT_Plt_TrkWsh_Arvl_Date);
  PARAMETER(PAR.DT_Plt_TrkWsh_Arvl_Time);
  PARAMETER(PAR.DT_Arrive_@_Plant_Date);
  PARAMETER(PAR.DT_Arrive_@_Plant_Time);
  PARAMETER(PAR.DT_Wait_@_TrkWsh);
  PARAMETER(LCL.DT_Drive_Time_To_Plant);
  PARAMETER(LCL.DT_Delv_Time_Variance);
  PARAMETER(LCL.DT_On_Time_Delivery);
  PARAMETER(PAR.Delivery_Reason_Code);
  PARAMETER(PAR.DT_TrkScl_Weigh_In_Date);
  PARAMETER(PAR.DT_TrkScl_Weigh_In_Time);
  PARAMETER(LCL.DT_Wait_@_TrkScl);
  PARAMETER(PAR.DT_To_Recv_Dock_Date);
  PARAMETER(PAR.DT_To_Recv_Dock_Time);
  PARAMETER(LCL.DT_Wait_Rcv_Dock);
  PARAMETER(PAR.DT_Start_Unloading_Date);
  PARAMETER(PAR.DT_Start_Unloading_Time);
  PARAMETER(LCL.DT_Wait_@_Rcv_Dock);
  PARAMETER(PAR.DT_End_Unload_Date);
  PARAMETER(PAR.DT_End_Unload_Time);
  PARAMETER(LCL.DT_Unload_Time);
  PARAMETER(LCL.DT_Unload_Variance_Time);
  PARAMETER(PAR.DT_TrkScl_Weigh_Out_Date);
  PARAMETER(PAR.DT_TrkScl_Weigh_Out_Time);
  PARAMETER(LCL.DT_Wait_Time_@_the_Plant);
  PARAMETER(LCL.DT_Formula_Wait_Tm_@_Plt);
  PARAMETER(PAR.DT_Source_Type);
  PARAMETER(PAR.DT_GATE_UPDATE_YES);
  PARAMETER(PAR.DT_Unused_Date);
  PARAMETER(PAR.DT_Unused_Time);
  PARAMETER(PAR.DT_Unused_Wait_Time);
  PARAMETER(LCL.DT_Error_Sts);
  PARAMETER(LCL.DT_Error_Reason);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.PL_Location_Code);
  PARAMETER(PAR.SR_Source_Code);
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER(PAR.RS_Record_Status);
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  ENDIF;

 }

}


