      *****************  RPG PROGRAM HEADING  ***********************
      *
      * SYSTEM:      Hog Production System
      * PROGRAM:     HP1082
      * TITLE:       UT: Edit (Maintain) Uploaded Scheduled Movements
      * PROGRAMMER:  Brad Baden
      * CREATED:     09/19/2019
      *
      * FUNCTION: This program uses a subfile to maintain uploaded scheduled movements.
      *
      *           This program is called straight from the Menu Option.
      *
      *           It only shows records for a specific business office
      *           It has F4-Prompt logic.
      *           It uses the standard message handling program.
      *
      *           Error Indicator Usage:
      *           31 = Customer Number
      *           32 = Scheduled Ship Date
      *           33 = Scheduled Ship Time
      *           34 = Scheduled Ship Sequence
      *           35 = Scheduled Kill Date
      *           36 = Scheduled Head
      *           37 = Load Number
      *           38 = Hog Group
      *           39 = Sales Type      Folded
      *           40 = Load Type       Folded
      *           41 = Trucker ID      Folded
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      *  1/03/18  Brad Baden     E010812
      *           Call Synon function PWFNXFR to validate the Kill Date.
      *
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhpd1082   cf   e             workstn sfile(hp1082s1:hdrrn1)
     F                                     infds(iofeed)
      *
      *
     Fhsl018a   if   e           k disk
      *  Farm Site
      *
      *
     Fhsp019    if   e           k disk
      *  Farm buildings
      *
      *
     Fhsp020    if   e           k disk
      *  Building rooms
      *
      *
     Fhsp0071   if   e           k disk
      *  Company Control
      *
      *
     Fhsl034h   if   e           k disk
      *  Hog groups
      *
      *
     Fhsp046    if   e           k disk
      *  Trucker
      *
      *
     Fhsp066    if   e           k disk
      *  Sales Type
      *
      *
     Fhsp067    if   e           k disk
      *  Load Type
      *
      *
     FF0101ca   IF   E           K DISK
      *    JDE Address Book          (Key: ABMCU ABAT1 ABALPH)
      *
      *
     Fhsl1951a  if   e           k disk
      *  Ship To SBD Customer Ref
      *
      *
     Fhsl2082a  uf a e           k disk
      *  Editing file
      *
      /EJECT
      ****************************************************************
      * Definition Specifications
      ****************************************************************
      *
      ****************************************************************
      * Named Constants
      ****************************************************************
      *
     D*create          c                   'CREATE'
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D action          s              1
     D companya        s              3
     D companyn        s              3  0
     D compval         s             10
     D custtype        s              2  0
     D producer        s              6
     D producerloc     s              6
     D procinfo        s              6
     D library         s             10
     D wkdelvdt        s              7  0
     D wkkilldt        s              7  0
     D dsurecsts       s              1
     D dsuprcsts       s              1  0
     D dsuerrrsn       s              6
     D valproducer     s              1
     D valprdloc       s              1
     D valkilldt       s              1
     D valdelvdt       s              1
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
     D maxrrn          s              4  0
     D reset           s              1    inz('N')
     D norecs          s              1    inz('N')
     D count           s              2  0
     D wkflow          s                   like(idflow)
     D rtncd           s              2    inz('00')
     D svrrn1          s                   like(hdrrn1)
     D sdbodv          s              5
     D time6           s              6  0
     D wrkdate6        s              8S 0 inz
     D wrkdate8        s              6S 0 inz
     D dateiniso       s               d   datfmt(*iso)
     D datein6so       s              6  0 inz
     D datein8so       s              8  0 inz
     D dateinmdy       s               d   datfmt(*mdy)
     D ccyy            s              4s 0 inz
     D mmdd            s              4s 0 inz
     D yy              s              2s 0 inz
     D cc              s              2s 0 inz
     D stcd            s              5    inz('MRKTS')
      *
     D eeditfl         s                        like(e1editfl)
      *
      * Workfields required for subfile paging--see initialization
      * subroutine.
      *
     D wkplin          s              2  0
     D wkrlin          s              2  0
      *
      *
      * Control and save fields
      *
     D svorfscd        s                   like(hgfscd)
     D svorppcd        s                   like(hgppcd)
     D svorptcd        s                   like(hgptcd)
     D svdnfscd        s                   like(hgfscd)
     D svdnppcd        s                   like(hgppcd)
     D svdnptcd        s                   like(hgptcd)
     D svfscd          s                   like(e1fscd)
     D svhgcd          s                   like(e1hgcd)
     D svblcd          s                   like(e1blcd)
     D svrmcd          s                   like(e1rmcd)
     D svmaxmsg        s                   like(maxmsg)
     D svcusn          s                   like(e1cusn)
     D svbobo          s                   like(sdbobo)
      *
      *
      * Workfields for date manipulation
      *
     D wkisodate       s               d   datfmt(*iso)
     D wksplit         s              1
      *
      *
     D xxhgcd          s                   like(hghgcd)
     D xxptcd          s                   like(hgptcd)
     D xxppcd          s                   like(hgppcd)
     D xxfscd          s                   like(hgfscd)
     D xxrmcd          s                   like(hgrmcd)
     D xxgscd          s                   like(hggscd)
     D xxalphfscd      s              5
     D xxalphcusn      s              8
     D xxbocd          s                   like(hgfsbo)
     D xxfsnm          s                   like(fsfsnm)
     D xxaist          s                   like(fsaist)
     D xxblcd          s                   like(hgblcd)
     D xxblds          s                   like(fbblds)
     D xxinaist        s              1
     D xxmtechref      s                   like(timtechref)
     D xxticd          s                   like(titicd)
     D xxtinm          s                   like(titinm)
     D xxstcd          s                   like(ststcd)
     D xxstds          s                   like(ststds)
     D xxltcd          s                   like(ltltcd)
     D xxltds          s                   like(ltltds)
      *
      *
      *
     D jdefl           s              1                                         JDE Error Flag
     D inat1           s              3                                         JDE Address Type
     D inajd           s              8p 0                                      JDE Address Type
     D ouajd           s              8p 0                                      JDE Address Type
     D oualph          s             40                                         JDE Name
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * Standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *-----------------------------------------------------------------
      * Definition for external data area 'DAAPER' for accounting period
      *-----------------------------------------------------------------
      *
     D*daaper          ds                  dtaara(daaper)
     D* daccyy                        4s 0
     D* daper                         2s 0
     D* dabpdt                        8s 0
     D* daepdt                        8s 0
     D* dapgfl                        1a
     D* dappfl                        1a
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * Mainline
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * Clear and fill the subfile
      *
     C                   exsr      $clr1
     C                   exsr      $frsh1
      *
      * Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Perform operator I/O for screen 1
      *---------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Set the page of the subfile to display
      *
     C                   select
     C                   when      wkflow = 0 and error = 0
     C                   z-add     1             hdpag1
      *
     C                   when      reset = yes and wkflow <= hdrrn1
     C                   z-add     wkflow        hdpag1
     C                   endsl
      *
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * This subfile has Fold/Unfold capabilities.  The DDS uses the keywords
      * (SFLDROP, SFLFOLD) to determine whether the user is folded or unfolded
      * and to redisplay the screen in the same mode as when he last saw it.
      * Indicators 78 and 79 are assigned in the DDS to the keywords.
      *
     C                   setoff                                       7879
     C                   if        fold = '0'
     C                   seton                                        78
     C                   else
     C                   seton                                        79
     C                   endif
      *
      * Write screen 1 to crt
      *
     C                   write     hp1082k1
     C                   write     hp1082ec
     C                   exfmt     hp1082c1
      *
      * Save the value of the lowest subfile rrn on the screen for
      * later repositioning of the subfile
      *
     C                   z-add     idflow        wkflow
     C                   move      no            reset
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      routne = exit
      *
     C                   when      norecs = yes                                 No data
     C                   eval      routne = set1
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
     C                   eval      routne = scrn1
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   eval      reset = yes
     C                   eval      routne = set1
      *
     C                   when      *in09 = *on                                  F9-accept
     C                   exsr      $edit1
     C                   if        error = 0
     C                   exsr      $accept
     C                   endif
     C                   other
      *
      * User pressed ENTER
      *
     C                   exsr      $edit1
     C                   movel     scrn1         routne
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Subroutine to edit input fields on screen 1
      *---------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * Edit the Control Record
      *
     C                   exsr      $edc1
      *
      * Edit the subfile if there are no errors in the control record.
      * If there are errors in the control record, you need to rewrite
      * any subfile recorrds with the error indicators off.
      *
     C                   if        error = 0
     C                   eval      svcusn = 0
     C                   exsr      $eds1
     C                   else
     C                   exsr      $sfloff
     C                   endif
      *
     C                   movel     scrn1         routne
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Edit the control record info on screen 1
      *---------------------------------------------------------------
      *
     C     $edc1         begsr
      *
      * At the present time, we have no fields in the Control record to edit.
      *
     C                   endsr
      /EJECT
      *--------------------------------------------------------------------------------------
      * Edit subfile on screen 1
      *--------------------------------------------------------------------------------------
      *
     C     $eds1         begsr
      *
      * Read/process all changed subfile records
      *
     C                   dou       *in80 = *on                                  Do process
     C                   readc     hp1082s1                               80
     C                   if        *in80 = *off                                 If rec read
      *
      * Set on MDT
      * Set off error indicators in the subfile
      *
     C                   seton                                        85        Modified Data Tag
     C                   exsr      $offin
      *
      * If there are no user entries for the changed subfile record,
      * clear all fields on the line....except Movement Number.
      *
     C                   if        d1cusn   = 0 and                             if entry
     C                             d1shipdt = 0 and
     C                             d1shiptm = 0 and
     C                             d1scshsq = 0 and
     C                             d1killdt = 0 and
     C                             d1schd   = 0 and
     C                             d1ldno   = 0 and
     C                             d1stcd   = *blank and
     C                             d1ltcd   = *blank and
     C                             d1ticd   = *blank and
     C                             d1fscd   = 0 and
     C                             d1blcd   = *blank and
     C                             d1rmcd   = *blank and
     C                             d1hgcd   = *blank
     C                   exsr      $clrln
     C                   else
      *
      * Validate the Customer Number
     C                   exsr      $vlcust
      *
      * Validate the Ship Date, Ship Time, and Ship Sequence
     C                   exsr      $vlshipdt
     C                   exsr      $vlshiptm
     C                   exsr      $vlshipsq
      *
      * Validate the Kill Date
     C                   exsr      $vlkilldt
      *
      * Validate Scheduled Head
     C                   exsr      $vlhead
      *
      * Validate Load Number
     C                   exsr      $vlload
      *
      * Validate Hog Group Code
     C                   exsr      $vlhgcd
      *
      * Validate Sales Type - Must be MRKTS
     C                   exsr      $vlstcd
      *
      * Validate Load Type
     C                   exsr      $vlltcd
      *
      * Validate Trucker ID
     C                   exsr      $vlticd

     C                   endif                                                  if entry
      *
     C                   update    hp1082s1
     C                   exsr      $offin
     C                   endif                                                  if rec read
     C                   enddo                                                  do process
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Call validation routine
      *---------------------------------------------------------------
      *
     C     $valpgm       begsr
      *
     C                   call      'PWFNXFR'
     C                   parm      *blanks       rtncd
     C                   parm                    companyn
     C                   parm                    wkkilldt
     C                   parm                    wkdelvdt
     C                   parm                    producer
     C                   parm                    producerloc
     C                   parm      'A'           dsurecsts
     C                   parm      *zeros        dsuprcsts
     C                   parm      *blanks       dsuerrrsn
     C                   parm                    valproducer
     C                   parm                    valprdloc
     C                   parm                    valdelvdt
     C                   parm                    valkilldt
     C                   parm                    procinfo
      *
     C                   eval      sdbobo = svbobo
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Validate Customer Number on screen
      *----------------------------------------------------------------
      *
     C     $vlcust       begsr
      *
      * The line is so full that I didn't have room to display a negative sign if the
      * user screwed up the entry. So, I'll just flip it if the value is negative; this
      * will keep is from getting an "invalid customer" error on it.
      *
     C                   if        d1cusn < 0                                   if d1cusn < 0
     C                   mult      -1            d1cusn
     C                   endif                                                  fi d1cusn < 0
      *
      * Clear the hidden customer number field
      *
     C                   z-add     0             hdcusn
      *
     C                   select                                                 select
      *
      * When Customer Number = 0, send error message
     C                   when      d1cusn = 0                                     when d1cusn = 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error                              if errmsg < max
     C                   exsr      $err1
     C                   move      'HS09001'     mgid(e)
     C                   endif                                                      fi errmsg < max
      *
      * When Customer Number = 360516, send error message
     C                   when      d1cusn = 360516                                when d1cusn = 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error                              if errmsg < max
     C                   exsr      $err1
     C                   movel     'HS00885'     mgid(e)
     C                   clear                   mgw
     C                   movea     'CREATE'      mgw(1)
     C                   movea     'MRKTS'       mgw(7)
     C                   movel     d1cusn        xxalphcusn
     C                   movea     xxalphcusn    mgw(12)
     C                   movea     mgw           mgdt(e)
     C                   endif                                                      fi errmsg < max
      *
     C                   other                                                    other
      *
      * Check if customer number exists
      *
     C                   z-add     d1cusn        inajd
     C                   movel(p)  'C'           inat1
     C                   movel     no            jdefl                          JDE errors
      *
     C                   call      'HPJDEV'
     C                   parm                    mgi                            MSG ID'S
     C                   parm                    mgd                            MSG DATA FLD
     C                   parm                    error                          # ERR MSGS
     C                   parm                    inajd                          JDE ADDR #
     C                   parm                    inat1                          JDE ADDR TYP
     C                   parm                    jdefl                          error flag
     C                   parm      *blanks       oualph                         JDE name
      *
      *
     C     jdefl         ifeq      yes                                          if jdefl
     C                   eval      *in31 = *on
     C                   else
     C                   movel     oualph        hdcusnm
      *
      * Validate that Company, Producer, and Producer Location exist in
      * the Ship To SBD Ref file.
     C                   if        e1cusn <> svcusn                             if e1cusn
     C                   eval      svcusn = e1cusn
     C                   exsr      $vlshp2sbd
     C                   endif                                                  fi e1cusn
     C                   endif                                                  fi jdefl
      *
     C                   endsl                                                  endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Validate Schedule Ship Date on screen
      *----------------------------------------------------------------
      *
     C     $vlshipdt     begsr
      *
      * The line is so full that I didn't have room to display a negative sign if the
      * user screwed up the entry. So, I'll just flip it if the value is negative; this
      * will keep is from getting an "invalid date" error on it.
      *
     C                   if        d1shipdt < 0
     C                   mult      -1            d1shipdt
     C                   endif
      *
      * Clear the hidden date field
      *
     C                   z-add     0             hdscshdt
      *
     C                   select
     C                   when      d1shipdt = 0
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   exsr      $err1
     C                   move      'HS09001'     mgid(e)
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 d1shipdt               92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   exsr      $err1
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Flip the date from MMDDYY to CCYYMMDD.
      *
     C     *mdy          move      d1shipdt      wkisodate
     C                   move      wkisodate     hdscshdt
     C                   endif                                                  If bad date
      *
      * If the Date is valid,
      *     Check that it is not in a Closed Period
      *     If it is in the Current Period,
      *         Check that the Period Close programs are not running
      *
     C                   if        *in32 = *off                                 If good date
      *
     C                   if        sdbobo = 'OKLIV'
     C                   eval      cccocd = '350'
     C                   else
     C                   eval      cccocd = '340'
     C                   endif                                                  if sdbobo = 'OKLIV'

     C     cccocd        chain     hsp0071
      *
     C                   select
     C                   when      not %found(hsp0071)
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   exsr      $err1
     C                   movel     'HS09246'     mgid(e)
     C                   endif

     C                   when      hdscshdt < ccbpdt
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   exsr      $err1
     C                   movel     'HS09007'     mgid(e)
     C                   endif
      *
     C                   when      hdscshdt >= ccbpdt and
     C                             hdscshdt <= ccepdt and
     C                             ccppfl <> *blank
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   exsr      $err1
     C                   movel     'HS09016'     mgid(e)
     C                   endif
     C                   endsl
      *
     C                   endif                                                  If good date
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Validate Scheduled Ship Time on screen
      *----------------------------------------------------------------
      *
     C     $vlshiptm     begsr
      *
      * The line is so full that I didn't have room to display a negative sign if the
      * user screwed up the entry. So, I'll just flip it if the value is negative; this
      * will keep is from getting an "invalid date" error on it.
      *
     C                   if        d1shiptm < 0                                 if d1hm < 0
     C                   mult      -1            d1shiptm
     C                   endif                                                  if d1hm < 0
      *
      * Clear the hidden time field
      *
     C                   z-add     0             hdscshtm
      *
     C                   select                                                 select
     C                   when      d1shiptm = 0                                   when d1hm = 0
     C                   seton                                        33
     C                   if        error < maxmsg                                 if error < maxmsg
     C                   add       1             error
     C                   exsr      $err1
     C                   move      'HS09001'     mgid(e)
     C                   endif                                                    if error < maxmsg
     C                   other                                                    other
      *
     C                   eval      hdscshtm = d1shiptm * 100
     C                   test(t)                 hdscshtm               92
     C                   if        *in92 = *on                                    if time invalid
     C                   seton                                        33
     C                   if        error < maxmsg                                 if error < maxmsg
     C                   add       1             error
     C                   exsr      $err1
     C                   eval      mgid(e) = 'HS09004'
     C                   endif                                                    if error < maxmsg
     C                   endif                                                    if time invalid
      *
     C                   endsl                                                  select
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Validate Scheduled Sequence on screen
      *----------------------------------------------------------------
      *
     C     $vlshipsq     begsr
      *
      * The line is so full that I didn't have room to display a negative sign if the
      * user screwed up the entry. So, I'll just flip it if the value is negative; this
      * will keep is from getting an "invalid date" error on it.
      *
     C                   if        d1scshsq < 0                                 if d1scshsq < 0
     C                   mult      -1            d1scshsq
     C                   endif                                                  fi d1scshsq < 0
      *
     C                   if        d1scshsq = 0                                 if d1scsq = 0
     C                   seton                                        34
     C                   if        error < maxmsg                               if error < maxmsg
     C                   add       1             error
     C                   movel     'HS09001'     mgid(e)
     C                   exsr      $err1
     C                   endif                                                  fi error < maxmsg
      *
     C                   endif                                                  fi d1scsq = 0

     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Validate Scheduled Kill Date on screen
      *----------------------------------------------------------------
      *
     C     $vlkilldt     begsr
      *
      * The line is so full that I didn't have room to display a negative sign if the
      * user screwed up the entry. So, I'll just flip it if the value is negative; this
      * will keep is from getting an "invalid date" error on it.
      *
     C                   if        d1killdt < 0
     C                   mult      -1            d1killdt
     C                   endif
      *
      * Clear the hidden date field
      *
     C                   z-add     0             hdsckldt
      *
     C                   select                                                 select
     C                   when      d1killdt = 0                                   when Killdt = 0
     C                   seton                                        35
     C                   if        error < maxmsg                               if error < maxmsg
     C                   add       1             error
     C                   exsr      $err1
     C                   move      'HS09001'     mgid(e)
     C                   endif                                                  fi error < maxmsg
     C                   other                                                  other
      *
     C     *mdy          test(d)                 d1killdt               92
     C                   if        *in92 = *on                                  if bad date
     C                   seton                                        35
     C                   if        error < maxmsg                               if error < maxmsg
     C                   add       1             error
     C                   exsr      $err1
     C                   eval      mgid(e) = 'HS09004'
     C                   endif                                                  fi error < maxmsg
     C                   else                                                   else not bad date

      *
      * Call Synon Validation function to validate the Kill Date
     C                   if        companyn <> *zeros                           if companyn <> 0
     C                   eval      valproducer = no
     C                   eval      valprdloc = no
     C                   eval      valkilldt = yes
      /free
        wkkilldt = %dec(%char(%date(d1killdt:*mdy):*cymd0):7:0);
      /end-free
     C                   eval      valdelvdt = no
     C                   exsr      $valpgm
      *
     C                   if        dsuerrrsn <> *blanks                         if dsuerrrsn
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error                              if errmsg < max
     C                   exsr      $err1
     C                   move      'HS09263'     mgid(e)
     C                   endif                                                      fi errmsg < max
     C                   else
      *
     C     *mdy          move      d1killdt      wkisodate
     C                   move      wkisodate     hdsckldt
      *
      * If Ship Date is valid, Kill Date cannot be before Ship Date
      *
     C                   if        *in32 = *off                                 if Ship Date OK

     C                   if        hdsckldt < hdscshdt                          if killdt<shipdt
     C                   seton                                        35
     C                   if        error < maxmsg                               if error < maxmsg
     C                   add       1             error
     C                   exsr      $err1
     C                   movel     'HS09248'     mgid(e)
     C                   endif                                                  fi error < maxmsg
     C                   endif                                                  fi killdt<shipdt
     C                   endif                                                  fi Ship Date OK
     C                   endif                                                  fi dsuerrrsn
     C                   endif                                                  fi companyn <> 0
     C                   endif                                                  fi bad date
      *
     C                   endsl                                                  end select
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Validate Scheduled Head on screen
      *----------------------------------------------------------------
      *
     C     $vlhead       begsr
      *
      * The line is so full that I didn't have room to display a negative sign if the
      * user screwed up the entry. So, I'll just flip it if the value is negative; this
      * will keep is from getting an "invalid date" error on it.
      *
     C                   if        d1schd < 0                                   if d1schd < 0
     C                   mult      -1            d1schd
     C                   endif                                                  fi d1schd < 0
      *
     C                   if        d1schd = 0                                   if d1schd = 0
     C                   seton                                        36
     C                   if        error < maxmsg                               if error < maxmsg
     C                   add       1             error
     C                   movel     'HS09001'     mgid(e)
     C                   exsr      $err1
     C                   endif                                                  fi error < maxmsg
      *
     C                   endif                                                  fi d1schd = 0

     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Validate Load Number on screen
      *----------------------------------------------------------------
      *
     C     $vlload       begsr
      *
      * The line is so full that I didn't have room to display a negative sign if the
      * user screwed up the entry. So, I'll just flip it if the value is negative; this
      * will keep is from getting an "invalid date" error on it.
      *
     C                   if        d1ldno < 0                                   if d1schd < 0
     C                   mult      -1            d1ldno
     C                   endif                                                  fi d1schd < 0
      *
     C                   if        d1ldno = 0                                   if d1schd = 0
     C                   seton                                        37
     C                   if        error < maxmsg                               if error < maxmsg
     C                   add       1             error
     C                   movel     'HS09001'     mgid(e)
     C                   exsr      $err1
     C                   endif                                                  fi error < maxmsg
      *
     C                   endif                                                  fi d1schd = 0

     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Validate Hog Group Code on screen
      *----------------------------------------------------------------
      *
     C     $vlhgcd       begsr
      *
      ** Hog Group Code is required
     C                   select                                                 select
     C                   when      d1hgcd = *blanks                               when d1hgcd=*blank
     C                   seton                                        38
     C                   if        error < maxmsg                                   if error<maxmsg
     C                   add       1             error
     C                   movel     'HS09001'     mgid(e)
     C                   exsr      $err1
     C                   endif                                                      fi error<maxmsg
      *
     C                   other                                                    other
      *
      ** Hog Group Code must exist in the Hog Group file
     C     key05         chain     hsl034h
     C                   if        not %found                                       if not %found
     C                   seton                                        38
     C                   if        error < maxmsg                                   if error<maxmsg
     C                   add       1             error
     C                   movel     'HS00261'     mgid(e)
     C                   exsr      $err1
     C                   leavesr
     C                   endif                                                      fi error<maxmsg
      *
      ** Hog Group Status must be open
     C                   else
     C                   eval      d1fscd = hgfscd
     C                   if        hggscd <> 'OP' and                               if hggscd<>'OP'
     C                             hggscd <> 'CR'                                   if hggscd<>'CR'
     C                   seton                                        38
     C                   if        error < maxmsg                                   if error<maxmsg
     C                   add       1             error
     C                   movel     'HS09251'     mgid(e)
     C                   exsr      $err1
     C                   leavesr
     C                   endif                                                      fi error<maxmsg
     C                   else
      *
      ** Default building and room using  retrieved value and try load Building and Room
     C                   eval      d1fscd = hgfscd
     C                   eval      d1blcd = hgblcd
     C                   eval      d1rmcd = hgrmcd
     C                   endif                                                      fi hggscd<>'OP'
     C                   endif                                                      fi not %found
     C                   endsl                                                  end select

     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Validate that Ship To SBD Customer REF records exist for
      * Customer Type Numbers 1, 2, and 3.
      *----------------------------------------------------------------
      *
     C     $vlshp2sbd    begsr
      *
     C                   for       custtype = 1 to 3                             for
     C     key01         chain     hsl1951a
     C                   if        %found(hsl1951a)                              if %found
     C                   if        custtype = 1                                  if custtype = 1
     C                   eval      companyn = %dec(crtypcd:3:0)
     C                   endif                                                   fi custtype = 1
     C                   else
     C                   seton                                        31
     C                   if        error < maxmsg                                if errmsg < max
     C                   add       1             error
      *
      * Select appropriate message for Customer Type Number
     C                   select                                                  select
     C                   when      custtype = 1                                   when custtype = 1
     C                   move      'HS09262'     mgid(e)
      *
     C                   when      custtype = 2                                   when custtype = 2
     C                   move      'HS09267'     mgid(e)
      *
     C                   when      custtype = 3                                   when custtype = 3
     C                   move      'HS09268'     mgid(e)
     C                   endsl                                                   endsl
     C                   exsr      $err1
      *
     C                   endif                                                  fi errmsg < max
      *
     C                   endif                                                  fi not %found
     C                   endfor                                                 endfor
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Flip a date from mmddyy to ccyymmdd
      *----------------------------------------------------------------
      *
     C     $flipdt6      begsr
      *
      * The line is so full that I didn't have room to display a negative sign if the
      * user screwed up the entry. So, I'll just flip it if the value is negative; this
      * will keep is from getting an "invalid date" error on it.
      *
     C                   if        datein6so < 0                                if datein6so < 0
     C                   mult      -1            datein6so
     C                   endif                                                  if datein6so < 0
      *
      * If screen date is zero, set ISO date to zero
     C                   select                                                 select
     C                   when      datein6so = 0                                  when datein6so=0
     C                   eval      datein8so = 0
     C                   other                                                    other

     C     *mdy          move      datein6so     wkisodate
     C                   move      wkisodate     datein8so

     C                   endsl

     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Flip a date from ccyymmdd to mmddyy
      *----------------------------------------------------------------
      *
     C     $flipdt8      begsr
      *
      * The line is so full that I didn't have room to display a negative sign if the
      * user screwed up the entry. So, I'll just flip it if the value is negative; this
      * will keep is from getting an "invalid date" error on it.
      *
     C                   if        datein8so < 0                                if datein8so < 0
     C                   mult      -1            datein8so
     C                   endif                                                  if datein8so < 0
      *
      * If screen date is zero, set ISO date to zero
     C                   select                                                 select
     C                   when      datein8so = 0                                  when
     C                   eval      datein6so = 0
     C                   other                                                    other
      *
      *
      * Flip the date from CCYYMMDD to MMDDYY
      *
     C                   eval      ccyy = datein8so * .0001
     C                   eval      mmdd = datein8so - (ccyy * 10000)

     C                   if        ccyy >= 2000                                 if ccyy >= 2000
     C                   eval      yy   = ccyy - 2000
     C                   else                                                   else
     C                   eval      yy   = ccyy - 1900
     C                   endif                                                  if ccyy >= 2000

     C                   eval      datein6so = ((mmdd * 100) + yy)

     C                   endsl                                                  if ccyy >= 2000

     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Validate Sales Type - Must be MRKTS
      *----------------------------------------------------------------
      *
     C     $vlstcd       begsr
      *
     C                   if        d1stcd <> 'MRKTS'                            if d1stcd <> 'MRKTS'
     C                   seton                                        39
     C                   if        error < maxmsg                               if error < maxmsg
     C                   add       1             error
     C                   movel     'HS09250'     mgid(e)
     C                   exsr      $err1
     C                   endif                                                  fi error < maxmsg
     C                   endif                                                  fi d1stcd <> 'MRKTS'

     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Validate Load Type
      *----------------------------------------------------------------
      *
     C     $vlltcd       begsr
      *
     C                   if        d1ltcd = *blanks                             if d1ltcd = *blanks
     C                   seton                                        40
     C                   if        error < maxmsg                               if error < maxmsg
     C                   add       1             error
     C                   movel     'HS09001'     mgid(e)
     C                   exsr      $err1
     C                   endif                                                  fi error < maxmsg
     C                   else

     C     d1ltcd        chain     hsp067
     C                   if        not %found                                   if not %found
     C                   seton                                        40
     C                   if        error < maxmsg                               if error < maxmsg
     C                   add       1             error
     C                   movel     'HS00188'     mgid(e)
     C                   clear                   mgw
     C                   movea     d1ltcd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   exsr      $err1
     C                   endif                                                  fi error < maxmsg
     C                   endif                                                  fi not %found

     C                   endif                                                  fi d1ltcd = *blanks

     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Validate Trucker Code
      *----------------------------------------------------------------
      *
     C     $vlticd       begsr
      *
      * The line is so full that I didn't have room to display a negative sign if the
      * user screwed up the entry. So, I'll just flip it if the value is negative; this
      * will keep is from getting an "invalid date" error on it.
      *
     C                   if        d1ticd = *blanks                             if d1ticd = *blanks
     C                   seton                                        41
     C                   if        error < maxmsg                               if error < maxmsg
     C                   add       1             error
     C                   movel     'HS09001'     mgid(e)
     C                   exsr      $err1
     C                   endif                                                  fi error < maxmsg
     C                   else

     C     d1ticd        chain     hsp046
     C                   if        not %found                                   if not %found
     C                   seton                                        41
     C                   if        error < maxmsg                               if error < maxmsg
     C                   add       1             error
     C                   movel     'HS00235'     mgid(e)
     C                   clear                   mgw
     C                   movea     d1ticd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   exsr      $err1
     C                   endif                                                  fi error < maxmsg
     C                   endif                                                  fi not %found

     C                   endif                                                  fi d1ticd = *blanks

     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Clear the subfile on Screen 1
      *---------------------------------------------------------------
      *
     C     $clr1         begsr
      *
     C                   z-add     0             svrrn1
      *
     C                   clear                   hp1082s1
     C                   seton                                        83        SFLCLR
     C                   write     hp1082c1
     C                   setoff                                       818283
      *                                                    81=sfldsp
      *                                                    82=sflend
      *                                                    83=sflclr
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Refresh/fill the subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $frsh1        begsr
      *
      * Always load the entire subfile.
      *
     C     sdbobo        setll     hsl2082a
     C                   exsr      $load1
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Load the subfile on screen 1
      *---------------------------------------------------------------
      *
      * We fill the entire subfile in this program.
      *
     C     $load1        begsr
      *
     C                   z-add     svrrn1        hdrrn1
      *
     C                   setoff                                       82
     C                   dou       *in82 = *on                                  Do fill
     C     sdbobo        reade     hsl2082a                               82
      *
     C                   if        *in82 = *off                                 If not EOF
      *
     C                   move      e1editfl      d1editfl
     C                   move      e1bocd        d1bocd
     C                   z-add     e1cusn        d1cusn

      * Flip Scheduled Ship Date (8.0) to screen value (6.0)
     C                   z-add     e1scshdt      datein8so
     C                   exsr      $flipdt8
     C                   z-add     datein6so     d1shipdt

      * Convert time from HHMMSS to HHMM
     C                   eval      d1shiptm = e1scshtm * .01

     C                   z-add     e1scshsq      d1scshsq

      * Flip Scheduled Kill Date (8.0) to screen value (6.0)
     C                   z-add     e1sckldt      datein8so
     C                   exsr      $flipdt8
     C                   z-add     datein6so     d1killdt

     C                   z-add     e1ldno        d1ldno
     C                   move      e1stcd        d1stcd
     C                   move      e1ltcd        d1ltcd
     C                   move      e1ticd        d1ticd
     C                   z-add     e1fscd        d1fscd
     C                   move      e1blcd        d1blcd
     C                   move      e1rmcd        d1rmcd
     C                   move      e1hgcd        d1hgcd
     C                   z-add     e1schd        d1schd
      * Farm Site name
     C     key03         chain     hsl018a                            92
     C                   if        *in92 = *off
     C                   movel     fsfsnm        hdfsnm
     C                   else
     C                   move      *blank        hdfsnm
     C                   endif
      *
      *
     C                   add       1             hdrrn1
      *
     C                   seton                                        85
     C                   write     hp1082s1
     C                   exsr      $sfloff
     C                   seton                                        81
      *
      * For positioning, place the subfile relative record number into
      * the sflrcdnbr field (hdpag1)
      *
     C                   z-add     hdrrn1        hdpag1
     C                   endif                                                  If read
     C                   enddo                                                  Do fill loop
      *
      * If no records were written to the subfile, then issue
      * the standard message 'No data to Display'.
      *
     C                   if        hdrrn1 = 0                                   If no recs
     C                   movel     yes           norecs
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09002'
     C                   endif
     C                   else
      *
     C                   movel     no            norecs
     C                   endif                                                  If no recs
      *
     C                   z-add     hdrrn1        svrrn1
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Clear subfile line
      *---------------------------------------------------------------
      *
     C     $clrln        begsr
      *
     C                   move      *blank        wksplit
      *
     C                   move      *blank        d1editfl
     C                   move      *blank        d1bocd
     C                   z-add     0             d1cusn
     C                   z-add     0             d1shipdt
     C                   z-add     0             d1scshsq
     C                   z-add     0             d1killdt
     C                   z-add     0             d1ldno
     C                   move      *blank        d1stcd
     C                   move      *blank        d1ltcd
     C                   move      *blank        d1ticd
     C                   z-add     0             d1fscd
     C                   move      *blank        d1blcd
     C                   move      *blank        d1rmcd
     C                   move      *blank        d1hgcd
     C                   z-add     0             d1schd
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Rewrite the Subfile records with the indicators off
      *---------------------------------------------------------------
      *
      * This subroutine keeps the Cursor from being in the subfile when
      * the displayed error message is for the control record.
      *
     C     $sfloff       begsr
      *
      * Read/Process the changed subfile records
      *
     C                   dou       *in80 = *on                                  Do process
     C                   readc     hp1082s1                               80
     C                   if        *in80 = *off                                 If rec read
      *
      * Set off all subfile indicators
      *
     C                   exsr      $offin
      * Seton MDT
     C                   seton                                        85
      *
     C                   update    hp1082s1
     C                   endif                                                  If rec read
     C                   enddo                                                  Do process
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Set off all subfile indicators
      *----------------------------------------------------------------
      *
     C     $offin        begsr
      *
     C                   setoff                                       313233
     C                   setoff                                       343536
     C                   setoff                                       373839
     C                   setoff                                       404142
     C                   setoff                                       434445
     C                   setoff                                       545556
     C                   setoff                                       5758
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * F4 Prompt for Screen 1
      *----------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      * Set off all indicators in all subfile records.
      *
     C                   exsr      $sfloff
      *
      *----------------------------------------------------------------
      * Prompted fields in the subfile
      *----------------------------------------------------------------
      *
      *-------------------
      * FARM SITE
      *-------------------
      *
     C                   select                                                 select
     C                   when      fld = 'D1FSCD'                                 when fld = d1fscd
     C                   exsr      $rrn1
     C                   if        *in97 = *off                                     if *in97 = *off
     C                   call      'HP5040'
     C                   parm      'A'           xxaist
     C                   parm      0             xxfscd
     C                   parm      *blank        xxfsnm

     C                   if        xxfscd <> 0                                      if xxfscd <> 0
     C                   z-add     xxfscd        d1fscd
     C                   movel     xxfsnm        hdfsnm
     C                   endif                                                      fi xxfscd <> 0
     C                   seton                                        8551
     C                   update    hp1082s1
      *
      * Reset the subfile relative record number to what it was before the user
      * took F4 (It will be out-of-synch if the user has selected a record causing
      * thus causing the subfile record to be retrieved and updated.) But, set the
      * page of the subfile to be displayed to the page on which the user took F4.
      *
     C                   z-add     count         hdrrn1
     C                   z-add     hdrr1         hdpag1
     C                   endif                                                      fi *in97 = *off
      *
      *-----------------
      * HOG GROUP
      *-----------------
      *
     C                   when      fld = 'D1HGCD'                                 when fld = d1hgcd
      *
     C                   eval      svfscd = d1fscd
     C                   eval      svblcd = d1blcd
     C                   eval      svrmcd = d1rmcd
     C                   eval      svhgcd = d1hgcd
      *
     C                   exsr      $rrn1
     C                   if        *in97 = *off                                     if *in97 = *off
     C                   call      'HP5953'
     C                   parm      sdbobo        xxbocd
     C                   parm      d1fscd        xxfscd
     C                   parm      d1hgcd        xxhgcd
     C                   parm                    xxblcd
     C                   parm                    xxrmcd

     C                   if        xxblcd <> *blank                                 if xxblcd<>blank
     C                   movel     xxhgcd        d1hgcd
     C                   z-add     xxfscd        d1fscd
     C                   movel     xxblcd        d1blcd
     C                   movel     xxrmcd        d1rmcd
     C                   else
     C                   movel     svhgcd        d1hgcd
     C                   z-add     svfscd        d1fscd
     C                   movel     svblcd        d1blcd
     C                   movel     svrmcd        d1rmcd
     C                   endif                                                      fi xxblcd<>blank

     C                   seton                                        8554
     C                   update    hp1082s1
      *
      * Reset the subfile relative record number to what it was before the user
      * took F4 (It will be out-of-synch if the user has selected a record causing
      * thus causing the subfile record to be retrieved and updated.) But, set the
      * page of the subfile to be displayed to the page on which the user took F4.
      *
     C                   z-add     count         hdrrn1
     C                   z-add     hdrr1         hdpag1
     C                   endif                                                      fi *in97 = *off
      *
      *
      *-------------------
      * SALE TYPE
      *-------------------
      *
     C                   when      fld = 'D1STCD'                                 when fld = d1stcd
     C                   exsr      $rrn1
     C                   if        *in97 = *off                                     if *in97 = *off
     C                   call      'HP544'
     C                   parm      *blank        xxstcd
     C                   parm      *blank        xxstds

     C                   if        xxstcd <> *blank                                 if xxstcd<>blank
     C                   movel     xxstcd        d1stcd
     C                   endif                                                      fi xxstcd<>blank
     C                   seton                                        8550
     C                   update    hp1082s1
      *
      * Reset the subfile relative record number to what it was before the user
      * took F4 (It will be out-of-synch if the user has selected a record causing
      * thus causing the subfile record to be retrieved and updated.) But, set the
      * page of the subfile to be displayed to the page on which the user took F4.
      *
     C                   z-add     count         hdrrn1
     C                   z-add     hdrr1         hdpag1
     C                   endif                                                      if *in97 = *off
      *
      *-------------------
      * LOAD TYPE
      *-------------------
      *
     C                   when      fld = 'D1LTCD'                                 when fld = d1ltcd
     C                   exsr      $rrn1
     C                   if        *in97 = *off                                     if *in97 = *off
     C                   call      'HP5012'
     C                   parm      *blank        xxltcd
     C                   parm      *blank        xxltds

     C                   if        xxltcd <> *blank                                 if xxltcd<>blank
     C                   movel     xxltcd        d1ltcd
     C                   endif                                                      f1 xxltcd<>blank
     C                   seton                                        8550
     C                   update    hp1082s1
      *
      * Reset the subfile relative record number to what it was before the user
      * took F4 (It will be out-of-synch if the user has selected a record causing
      * thus causing the subfile record to be retrieved and updated.) But, set the
      * page of the subfile to be displayed to the page on which the user took F4.
      *
     C                   z-add     count         hdrrn1
     C                   z-add     hdrr1         hdpag1
     C                   endif                                                      fi *in97 = *off
      *
      *-------------------
      * TRUCK
      *-------------------
      *
     C                   when      fld = 'D1TICD'                                 when fld = d1ticd
     C                   exsr      $rrn1
     C                   if        *in97 = *off                                     if *in97 = *off
     C                   call      'HP538'
     C                   parm      'A'           xxinaist
     C                   parm      *blank        xxticd
     C                   parm      *blank        xxtinm
     C                   parm      *blank        xxmtechref

     C                   if        xxticd <> *blank                                 if xxticd<>blank
     C                   movel     xxticd        d1ticd
     C                   endif                                                      fi xxticd<>blank
     C                   seton                                        8550
     C                   update    hp1082s1
      *
      * Reset the subfile relative record number to what it was before the user
      * took F4 (It will be out-of-synch if the user has selected a record causing
      * thus causing the subfile record to be retrieved and updated.) But, set the
      * page of the subfile to be displayed to the page on which the user took F4.
      *
     C                   z-add     count         hdrrn1
     C                   z-add     hdrr1         hdpag1
     C                   endif                                                      f1 *in97 = *off

      *-------------------
      * JDE CUSTOMER NUMBER
      *-------------------
     C                   when      fld = 'D1CUSN'                                 when fld = d1cusn
     C                   exsr      $rrn1
     C                   if        *in97 = *off                                     if *in97 = *off
     C                   movel(p)  'C'           inat1
     C                   call      'HP513'
     C                   parm      sdbobo        sdbobo                         company
     C                   parm                    inat1                          search type
     C                   parm      *zero         ouajd                          jde number
     C                   parm      *BLANK        oualph                         jde name
      *
     C                   if        ouajd <> 0                                       if ouajd <> 0
     C                   z-add     ouajd         d1cusn
     C                   endif                                                      f1 ouajd <> 0
     C                   seton                                        8550
     C                   update    hp1082s1
      *
      * Reset the subfile relative record number to what it was before the user
      * took F4 (It will be out-of-synch if the user has selected a record causing
      * thus causing the subfile record to be retrieved and updated.) But, set the
      * page of the subfile to be displayed to the page on which the user took F4.
      *
     C                   z-add     count         hdrrn1
     C                   z-add     hdrr1         hdpag1
     C                   endif                                                      f1 *in97 = *off

     C                   other                                                    other
      *
      * F4 not valid for this field; so, issue message
      *
     C                   if        error < maxmsg                                   if error<maxmsg
     C                   add       1             error
     C                   movel     'HS09011'     mgid(e)
     C                   endif                                                      fi error<maxmsg
     C                   endsl                                                  end select
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------------------
      * Set the subfile to redisplay at the first screen that has errors
      *----------------------------------------------------------------------------
      *
     C     $err1         begsr
      *
     C                   if        error = 1
     C                   z-add     hdrrn1        hdpag1
     C                   endif
      *
     C                   endsr
      *
      /eject
      *--------------------------------------------------------------------------------------
      * User took F9 to accept his entries
      *--------------------------------------------------------------------------------------
      *
      * When the user takes F9, we will:
      *  1) delete the records in the Editing file
      *  2) write all subfile records to the editing file
      *
     C     $accept       begsr
      *
      * Delete all records for the business office
      *
     C     sdbobo        setll     hsl2082a
     C                   if        %equal                                       if %equal
     C                   dou       *in92 = *on                                  dou
     C     sdbobo        reade     hsl2082a                               92
     C                   if        *in92 = *off                                 if *in92 = *off
     C                   delete    e1rec
     C                   endif                                                  if *in92 = *off
     C                   enddo                                                  dou *in92 = *on
     C                   endif                                                  if %equal
      *
      *
      * Write subfile records to Editing file HSP2082
     C                   dou       *in80 = *on                                  do loop
     C                   readc     hp1082s1                               80
     C                   if        *in80 = *off and d1schd <> 0                 if *in80 = *off
      *
      * write to file
     C                   move      'Y'           e1editfl
     C                   move      d1bocd        e1bocd
     C                   z-add     d1cusn        e1cusn

      * Convert screen Ship Date to CCYYMMDD format
     C                   z-add     d1shipdt      datein6so
     C                   exsr      $flipdt6
     C                   z-add     datein8so     e1scshdt

      * Convert screen Ship Time to HHMMSS format
     C                   eval      e1scshtm = d1shiptm * 100

     C                   z-add     d1scshsq      e1scshsq

      * Convert screen Kill Date to CCYYMMDD format
     C                   z-add     d1killdt      datein6so
     C                   exsr      $flipdt6
     C                   z-add     datein8so     e1sckldt

     C                   z-add     d1ldno        e1ldno
     C                   move      d1stcd        e1stcd
     C                   move      d1ltcd        e1ltcd
     C                   move      d1ticd        e1ticd
     C                   z-add     d1fscd        e1fscd
     C                   move      d1blcd        e1blcd
     C                   move      d1rmcd        e1rmcd
     C                   move      d1hgcd        e1hgcd
     C                   z-add     d1schd        e1schd
      *
     C                   write     e1rec

     C                   endif                                                  if *in80 = *off
     C                   enddo                                                  do loop
      *
      * Set next routine
     C                   move      exit          routne
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Set on LR and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
      *
     C                   seton                                        lr
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF Command Key
      * Record will be set on. So, redisplay screen to user.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *---------------------------------------------------------------
      * Clear Messages
      *---------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF Command Key
      * Record will be set on. So, redisplay screen to user.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------------------------------
      * Find/Retrieve the subfile record to update when returning from a Select Program
      *---------------------------------------------------------------------------------------
      *
      * HDRR1 is the hidden field associated with the Keyword SFLCSRRRN on the Control Record
      * HDRRN1 is the value associated with the Keyword 'KSFILE' in the F-Specs for the Workstation.
      *
     C     $rrn1         begsr
      *
     C                   setoff                                       97
      *
     C                   if        hdrr1 <> 0
     C                   z-add     hdrr1         hdrrn1
     C     hdrrn1        chain     hp1082s1                           97
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Initialization
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Initally call the Business Office selection screen
     C                   call      'HP503'
     C                   parm      *blanks       sdbobo
     C                   parm      *blanks       sdbods
     C                   parm      'LIVE '       sdbodv
      *
      * If user does not select a business office, exit program
     C                   if        sdbobo = *blanks
     C                   exsr      $exit
     C                   else
     C                   eval      svbobo = sdbobo
     C                   endif
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    d1cusn
     C                   kfld                    custtype
      *
     C*    key02         klist
     C*                  kfld                    d1fscd
     C*                  kfld                    d1blcd
     C*                  kfld                    d1rmcd
      *
     C     key03         klist
     C                   kfld                    sdbobo
     C                   kfld                    d1fscd
      *
     C*    key04         klist
     C*                  kfld                    sdbobo
     C*                  kfld                    d1fscd
     C*                  kfld                    d1hgcd
      *
     C     key05         klist
     C                   kfld                    d1hgcd
     C                   kfld                    sdbobo
      *
      *
      *
      * You are always in REVISE mode in this porgram.
      *
     C                   movel     'REVISE'      d1MODE
      *
      * To support F5-Refresh, logic requires the number of lines on
      * the subfile page and also the number of lines less 1.  By
      * setting these values up as constant work fields, the processing
      * logic can be standardized between programs.
      *
     C                   z-add     14            wkplin
     C     wkplin        sub       1             wkrlin
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   eval      svmaxmsg = maxmsg
      *
     C                   endsr
      /EJECT
