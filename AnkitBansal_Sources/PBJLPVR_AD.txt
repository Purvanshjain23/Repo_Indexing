// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBJLPVR
// ?Date: 14.08.2025 Time: 03:48:14
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(LCL.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// WRK.Company = PAR.Company Number
WRK.Company = PAR.Company_Number;

//?** Initialize printer submit parms
// PAR.PRT Description = CON.Unbooked Orders Report
PAR.PRT_Description = 'Unbooked Orders Report';

// PAR.PRT Printer Device = CND.Not entered
PAR.PRT_Printer_Device = *BLANK;

// PAR.PRT Hold Output Sts = CND.*NO
PAR.PRT_Hold_Output_Sts = *NO;

// PAR.PRT Save Output Sts = CND.*NO
PAR.PRT_Save_Output_Sts = *NO;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Night Queue = CND.Not entered
PAR.PRT_Night_Queue = *BLANK;

// PAR.System Value Numeric = CON.1
PAR.System_Value_Numeric = 1;

//?USER: Load screen

// DTL.Company Number = PAR.Company Number
DTL.Company_Number = PAR.Company_Number;

// DTL.Status - Y or N = PAR.Status - Y or N
DTL.Status_Y_or_N = PAR.Status_Y_or_N;

// WRK.Company = PAR.Company Number
WRK.Company = PAR.Company_Number;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.From Date             USR = PAR.Scheduled Ship Date
DTL.From_Date_USR = PAR.Scheduled_Ship_Date;

// DTL.Salesperson Code = PAR.Salesperson Code
DTL.Salesperson_Code = PAR.Salesperson_Code;

// DTL.USR Select/Omit Flag = PAR.USR Select/Omit Flag
DTL.USR_Select_Omit_Flag = PAR.USR_Select_Omit_Flag;

// DTL.TPM Freight Order Sts = PAR.TPM Freight Order Sts
DTL.OH_Load_Plan_Ready = PAR.OH_Load_Plan_Ready;

// DTL.Condition Desc. 1  USR = Condition name of DTL.TPM Freight Order Sts
DTL.Condition_Desc_1_USR = RTVCND(DTL.OH_Load_Plan_Ready);

//?USER: Validate fields

//?Process F4 on Company Number
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Company Number
IF PGM.*Cursor_field = DTL.Company_Number;

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// Call program SEL Company by Number  SR.
CALL PROGRAM(SEL Company by Number  SR) ('CAAJSRR');
PARAMETER(DTL.Company_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

ENDIF;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Sales route
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Salesperson Code
IF PGM.*Cursor_field = DTL.Salesperson_Code;

// Call program SEL PD Sales Route Act SR.
CALL PROGRAM(SEL PD Sales Route Act SR) ('PDFWSRR');
PARAMETER(DTL.Salesperson_Code);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.Company Number is Equal to zero
IF DTL.Company_Number = *ZERO;

// Send error message - 'Company Number is required.'
ERROR(USR2183);
MSGPARM(DTL.Company_Number);

ENDIF;

//?Validate company if entered
CASE;

// IF DTL.Company Number is not equal to zero
IF DTL.Company_Number <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Name = CON.*BLANK
DTL.Name = *BLANK;

// Send error message - 'Company Number not found'
ERROR(USR0163);

ENDIF;

ENDIF;

CASE;

// IF DTL.Salesperson Code is entered
IF DTL.Salesperson_Code <> *BLANK;

EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
PARAMETER(DTL.Salesperson_Code);
PARAMETER(LCL.Salesperson_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Salesperson Code is not entered
IF LCL.Salesperson_Code = *BLANK;

// Send error message - 'Salesperson not found.'
ERROR(USR0039);
MSGPARM(DTL.Salesperson_Code);

ENDIF;

CASE;

// IF DTL.Report Seq Unbooked Ords is Sales Route/Deadline
IF DTL.Report_Seq_Unbooked_Ords = '3';

// IF *OTHERWISE
IF *OTHERWISE;

// Send information message - 'Salesperson ignored for report selection other than 3.'
MESSAGE(USR4635 *INFO);
MSGPARM(DTL.Salesperson_Code);

ENDIF;

ENDIF;

// DTL.Condition Desc. 1  USR = Condition name of DTL.TPM Freight Order Sts
DTL.Condition_Desc_1_USR = RTVCND(DTL.OH_Load_Plan_Ready);

//?USER: User defined action

MOVE *ALL (To: PAR From: DTL);

//?Report Seq 1= by order (original unbooked order report)
CASE;

// IF DTL.Report Seq Unbooked Ords is Order Number
IF DTL.Report_Seq_Unbooked_Ords = '1';

CASE;

// IF DTL.Company Number is Equal to zero
IF DTL.Company_Number = *ZERO;

// Send error message - 'Company Number is required.'
ERROR(USR2183);
MSGPARM(DTL.Company_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Company Number Pass   USR = DTL.Company Number
PAR.Company_Number_Pass_USR = DTL.Company_Number;

// PAR.Order Number 1  PASS  USR = CON.*ZERO
PAR.Order_Number_1_PASS_USR = *ZERO;

// PAR.Date 1          PASS  USR = DTL.From Date             USR
PAR.Date_1_PASS_USR = DTL.From_Date_USR;

// PAR.Date 2          PASS  USR = CON.*ZERO
PAR.Date_2_PASS_USR = *ZERO;

// PAR.Customer Number Pass  USR = CON.*ZERO
PAR.Customer_Number_Pass_USR = *ZERO;

//?08/21/19 DN S15343-Added 'U/M - Load Scheduling USR' as Input Parm.
// Call program PMT&Pass Unbooked Ord  UP.
CALL PROGRAM(PMT&Pass Unbooked Ord  UP) ('PDCOUPR');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('O/M');
PARAMETER('PDCNPCLP');
PARAMETER('Unbooked Orders List');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Customer_Number_Pass_USR);
PARAMETER(PAR.Date_1_PASS_USR);
PARAMETER(PAR.Date_2_PASS_USR);
PARAMETER(PAR.Order_Number_1_PASS_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(LCL.Header_Status);
PARAMETER(LCL.Credit_Hold);
PARAMETER(LCL.Production_Hold);
PARAMETER(LCL.LTL_Flag);
PARAMETER(LCL.Load_Type);
PARAMETER(LCL.Load_Plan_Order);
PARAMETER(LCL.Event_Code);
PARAMETER(DTL.U_M_Load_Scheduling_USR);

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

QUIT;

ENDIF;

ENDIF;

// Call program PMT Print Option  SHR  PV.
CALL PROGRAM(PMT Print Option  SHR  PV) ('PDG0PVR');
PARAMETER('Unbooked Orders');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Company Number Pass   USR = DTL.Company Number
PAR.Company_Number_Pass_USR = DTL.Company_Number;

// PAR.System Value Numeric = PAR.PRT Number of Copies
PAR.System_Value_Numeric = PAR.PRT_Number_of_Copies;

// PAR.Date 1          PASS  USR = DTL.From Date             USR
PAR.Date_1_PASS_USR = DTL.From_Date_USR;

//?SEL/OMT PARM
CASE;

// IF DTL.TPM Freight Order Sts is Not Entered
IF DTL.OH_Load_Plan_Ready = *BLANK;

// LCL.USR Select/Omit Flag = CND.Blanks
LCL.USR_Select_Omit_Flag = *BLANK;

//?SEL/OMT PARM
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.USR Select/Omit Flag = DTL.USR Select/Omit Flag
LCL.USR_Select_Omit_Flag = DTL.USR_Select_Omit_Flag;

ENDIF;

//?Report Seq 2= by deadline departure
CASE;

// IF DTL.Report Seq Unbooked Ords is Deadline Depart
IF DTL.Report_Seq_Unbooked_Ords = '2';

// LCL.Salesperson Code = CON.*BLANK
LCL.Salesperson_Code = *BLANK;

//?08/21/19 DN S15343-Added 'U/M - Load Scheduling USR' as Input Parm.
// Call program PRT Unbooked Ord Rpts CLP.
SBMJOB;
CALL PROGRAM(PRT Unbooked Ord Rpts CLP) ('PBJQUPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Date_1_PASS_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(LCL.Salesperson_Code);
PARAMETER(DTL.Report_Seq_Unbooked_Ords);
PARAMETER(LCL.USR_Select_Omit_Flag);
PARAMETER(DTL.OH_Load_Plan_Ready);
PARAMETER(DTL.Status_Y_or_N);
PARAMETER(DTL.Email_Address);
PARAMETER(DTL.U_M_Load_Scheduling_USR);
SBMJOBOVR JOB(UNBOOKED);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

//?Report Seq 3= by sales rte/deadline departure
CASE;

// IF DTL.Report Seq Unbooked Ords is Sales Route/Deadline
IF DTL.Report_Seq_Unbooked_Ords = '3';

//?08/21/19 DN S15343-Added 'U/M - Load Scheduling USR' as Input Parm.
// Call program PRT Unbooked Ord Rpts CLP.
SBMJOB;
CALL PROGRAM(PRT Unbooked Ord Rpts CLP) ('PBJQUPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Date_1_PASS_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(DTL.Salesperson_Code);
PARAMETER(DTL.Report_Seq_Unbooked_Ords);
PARAMETER(LCL.USR_Select_Omit_Flag);
PARAMETER(DTL.OH_Load_Plan_Ready);
PARAMETER(DTL.Status_Y_or_N);
PARAMETER(DTL.Email_Address);
PARAMETER(DTL.U_M_Load_Scheduling_USR);
SBMJOBOVR JOB(UNBOOKED);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

//?Report Seq 4= by region/deadline departure
CASE;

// IF DTL.Report Seq Unbooked Ords is Region/Deadline
IF DTL.Report_Seq_Unbooked_Ords = '4';

//?08/21/19 DN S15343-Added 'U/M - Load Scheduling USR' as Input Parm.
// Call program PRT Unbooked Ord Rpts CLP.
SBMJOB;
CALL PROGRAM(PRT Unbooked Ord Rpts CLP) ('PBJQUPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Date_1_PASS_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(DTL.Salesperson_Code);
PARAMETER(DTL.Report_Seq_Unbooked_Ords);
PARAMETER(LCL.USR_Select_Omit_Flag);
PARAMETER(DTL.OH_Load_Plan_Ready);
PARAMETER(DTL.Status_Y_or_N);
PARAMETER(DTL.Email_Address);
PARAMETER(DTL.U_M_Load_Scheduling_USR);
SBMJOBOVR JOB(UNBOOKED);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

ENDIF;

