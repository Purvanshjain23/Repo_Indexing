// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PWGWDFR
// ?Date: 14.08.2025 Time: 02:56:24
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification history
DO;

//? 6/06/2018 JBB E13128 - Make report available for Company 440
//?   Modified the program to work for companies 360, 440, 960, and
//?   961.  No longer need to pass in the sequel name to the submitted
//?   job.  The Company Number field on the screnn will be output
//?   only, and the user's company will be populated into the field.
//?01/23/2021 ISE H16853 - Increased the length from 5 to 7 and
//?                        corrected the alignment of Buy Order Number field
ENDDO;

// PGM.*Scan limit = CND.No Max
PGM.*Scan_limit = 999999;

//?Default Company field protection flag
// LCL.Protect Ref fields = CND.Yes
LCL.Protect_Ref_fields = 'Y';

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(LCL.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


//?Determine action from security check
CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

//?Determine action from security check
// IF JOB.*USER is Pork IS Repayment Users
IF JOB.*USER = 'ISJAMESB'/'ISDANNYN'/'ISJULIUSH'/'ISPURVAP'/'ISROSEM'/'ISSUSANM'                   +
/'ISBARBG';

// LCL.Protect Ref fields = CND.No
LCL.Protect_Ref_fields = 'N';

//?Determine action from security check
// IF PAR.Oms Allow Multi-Company is No
IF PAR.Oms_Allow_Multi_Company = 'N';

// LCL.Protect Ref fields = CND.Yes
LCL.Protect_Ref_fields = 'Y';

ENDIF;

// Call program Rtv Company Value Nbr XF.
CALL PROGRAM(Rtv Company Value Nbr XF) ('PDHGXFR');
PARAMETER(LCL.CC_Company_Number);
PARAMETER('HPEPSHTOCO');
PARAMETER(LCL.Push_To_Company);

// LCL.Push to Pay Sts      USR = CND.All
LCL.Push_to_Pay_Sts_USR = *BLANK;

//?USER: Initialize subfile control

// CTL.BOH Company Number = LCL.CC Company Number
CTL.BOH_Company_Number = LCL.CC_Company_Number;

// LCL.Protect field = CND.Yes
LCL.Protect_field = 'Y';

//?Set text for current status and set protection value
CASE;

// IF LCL.Push to Pay Sts      USR is All
IF LCL.Push_to_Pay_Sts_USR = *BLANK;

// CTL.Desc USR = CON.All
CTL.Desc_USR = 'All';

// LCL.Protect field = CND.No
LCL.Protect_field = 'N';

//?Set text for current status and set protection value
// IF LCL.Push to Pay Sts      USR is All Repayments
IF LCL.Push_to_Pay_Sts_USR = 'O';

// CTL.Desc USR = CON.All Repayments Only
CTL.Desc_USR = 'All Repayments Only';

//?Set text for current status and set protection value
// IF LCL.Push to Pay Sts      USR is Ignored
IF LCL.Push_to_Pay_Sts_USR = 'I';

// CTL.Desc USR = CON.Ignored
CTL.Desc_USR = 'Ignored';

//?Set text for current status and set protection value
// IF LCL.Push to Pay Sts      USR is Pushed
IF LCL.Push_to_Pay_Sts_USR = 'P';

// CTL.Desc USR = CON.Pushed-Report not printed
CTL.Desc_USR = 'Pushed-Report not printed';

//?Set text for current status and set protection value
// IF LCL.Push to Pay Sts      USR is Ready to Push
IF LCL.Push_to_Pay_Sts_USR = 'R';

// CTL.Desc USR = CON.Ready to Push
CTL.Desc_USR = 'Ready to Push';

//?Set text for current status and set protection value
// IF LCL.Push to Pay Sts      USR is Push Completed
IF LCL.Push_to_Pay_Sts_USR = 'C';

// CTL.Desc USR = CON.Push Completed
CTL.Desc_USR = 'Push Completed';

ENDIF;

// CTL.VCD Push Payment Status = CTL.Push Status
CTL.VCD_Push_Payment_Status = CTL.Push_Status;

//?USER: Initialize subfile record from DBF record

//?Record Selection
CASE;

// IF DB1.VCH Company number NE CTL.BOH Company Number
IF DB1.VCH_Company_number <> CTL.BOH_Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?Record Selection
// IF NOT RCD.VCD Source Code is Triumph Member (Owner)
IF ! RCD.VCD_Source_Code = 'TO';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?Record Selection
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Tattoo All Fields RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1232364;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(NLL.TH_Purchase_Date);
PARAMETER(NLL.TH_Group_Reference);
PARAMETER(NLL.TH_Live_Purchase_UOM);
PARAMETER(NLL.TH_Live_Purchase_Price);
PARAMETER(NLL.TH_Live_Gross_Amt);
PARAMETER(NLL.TH_LIve_Net_Amt);
PARAMETER(NLL.TH_Resale_UOM);
PARAMETER(NLL.TH_Recalc_Live_Wgt_Yld);
PARAMETER(NLL.TH_Pricing_Date);
PARAMETER(NLL.TH_Resale_Spread_Sts);
PARAMETER(NLL.TH_Dead_On_Arrival);
PARAMETER(NLL.TH_Head_Received);
PARAMETER(NLL.TH_Yard_Deads);
PARAMETER(NLL.TH_Held_Over);
PARAMETER(NLL.TH_Head_Condemned);
PARAMETER(NLL.TH_Head_Killed);
PARAMETER(NLL.TH_Head_Adds);
PARAMETER(NLL.TH_Head_Accepted);
PARAMETER(NLL.TH_Live_Wgt);
PARAMETER(NLL.TH_Adj_Live_Wgt);
PARAMETER(NLL.TH_Hot_Wgt);
PARAMETER(NLL.TH_Tot_Loin_Eye_Depth);
PARAMETER(NLL.TH_Tot_Backfat_Inches);
PARAMETER(NLL.TH_Tot_Light_Reflectance);
PARAMETER(NLL.TH_Avg_Live_Wgt);
PARAMETER(NLL.TH_Avg_Hot_Wgt);
PARAMETER(NLL.TH_Avg_Light_Reflectance);
PARAMETER(NLL.TH_Avg_Lean_Percent);
PARAMETER(NLL.TH_Avg_Loin_Eye_Depth);
PARAMETER(NLL.TH_Avg_Backfat);
PARAMETER(NLL.TH_Std_Yield_Percent);
PARAMETER(NLL.TH_Actual_Yield);
PARAMETER(NLL.TH_Adj_Actual_Yield);
PARAMETER(NLL.TH_Yield_Difference);
PARAMETER(NLL.TH_Recalc_Live_Wgt);
PARAMETER(NLL.TH_CM_Market_Price);
PARAMETER(NLL.TH_CM_Base_Mkt_Price);
PARAMETER(NLL.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(NLL.TH_CM_Sort_Discount_Amt);
PARAMETER(NLL.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(NLL.TH_CM_Base_Carcass_Value);
PARAMETER(NLL.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(NLL.TH_CM_Carcass_Gross_Amt);
PARAMETER(NLL.TH_Deduction_Amt);
PARAMETER(NLL.TH_Total_Net_WO_Adds);
PARAMETER(NLL.TH_Carcass_Net_Amt);
PARAMETER(NLL.TH_Additions_Amt);
PARAMETER(NLL.TH_Payment_Gross);
PARAMETER(NLL.Th_Payment_Net_Amt);
PARAMETER(NLL.TH_AP_Voucher_Document#);
PARAMETER(NLL.TH_Freight_Amount);
PARAMETER(NLL.TH_Accrual_Amount);
PARAMETER(NLL.TH_Fixed_Cost_Amount);
PARAMETER(NLL.TH_Calc_Net_Sts);
PARAMETER(NLL.TH_Payment_Sts);
PARAMETER(NLL.TH_Header_Error_Sts);
PARAMETER(NLL.TH_Detail_Error_Sts);
PARAMETER(NLL.TH_Kill_Balancing_Sts);
PARAMETER(NLL.TH_Bal_to_Kill_Gen);
PARAMETER(NLL.TH_Commission_A_P_Voucher);
PARAMETER(NLL.TH_Voucher_Payment_Date);
PARAMETER(NLL.TH_User_Error_Override);
PARAMETER(NLL.TH_Held_Over_Record);
PARAMETER(NLL.TH_Sex);
PARAMETER(NLL.TH_Held_Ovr_Completed_Dte);
PARAMETER(NLL.TH_Commission_Paid_Date);
PARAMETER(NLL.TH_Actual_Check_Date);
PARAMETER(NLL.TH_Shipped_Weight);
PARAMETER(NLL.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(NLL.TH_FFLI);
PARAMETER(NLL.TH_Kill_Product_Value);
PARAMETER(NLL.TH_Cut_Product_Value);
PARAMETER(NLL.TH_Render_Product_Value);
PARAMETER(NLL.TH_Head_Excluded);
PARAMETER(NLL.TH_CM_Bse_Mkt_Live_CWT);
PARAMETER(NLL.TH_CM_Bse_Mkt_Carc_CWT);
PARAMETER(NLL.TH_CM_Srt_Dsc_Live_CWT);
PARAMETER(NLL.TH_CM_Srt_Dsc_Carc_CWT);
PARAMETER(NLL.TH_CM_Yld_G_L_Live_CWT);
PARAMETER(NLL.TH_CM_Yld_G_L_Carc_CWT);
PARAMETER(NLL.TH_CM_Crc_Val_Live_CWT);
PARAMETER(NLL.TH_CM_Crc_Val_Carc_CWT);
PARAMETER(NLL.TH_CM_Lean_Prem_Live_CWT);
PARAMETER(NLL.TH_CM_Lean_Prem_Carc_CWT);
PARAMETER(NLL.TH_CM_Gross_Live_CWT);
PARAMETER(NLL.TH_CM_Gross_Carc_CWT);
PARAMETER(NLL.TH_Source_Type);
PARAMETER(NLL.TH_Scale_Ticket_Sts);
PARAMETER(NLL.TH_Payment_Type);
PARAMETER(NLL.TH_HPS_Movement_Ref_#);
PARAMETER(NLL.TH_Source_Code);
PARAMETER(RCD.TH_Hog_Class_Type);
PARAMETER(NLL.TH_Posted_to_HPS_Flag);
PARAMETER(NLL.TH_Schedule_Kill_Shift);
PARAMETER(NLL.TH_Shift_Held_Over);
PARAMETER(NLL.TH_State);
PARAMETER(NLL.TH_Unused_Code);
PARAMETER(NLL.TH_Unused_Sts_2_Pos);
PARAMETER(NLL.TH_Commission_Status);
PARAMETER(NLL.TH_Paid_2_Week_Avg_Y_N);
PARAMETER(NLL.TH_Unused_Sts_1_Pos_3);
PARAMETER(NLL.TH_DOA_Weight);
PARAMETER(NLL.TH_Avg_Lean_EXC_ADD);
PARAMETER(NLL.TH_HPS_Farm_Site);
PARAMETER(NLL.TH_Shift_Held_Over_Head);
PARAMETER(NLL.TH_Sorting_Amount);
PARAMETER(NLL.TH_Head_Identified);
PARAMETER(NLL.TH_Percent_Identified);
PARAMETER(NLL.TH_Percent_Accepted);
PARAMETER(NLL.TH_Head_Adjusted_LN);
PARAMETER(NLL.TH_PHA_Head_Adds);
PARAMETER(NLL.TH_PHA_Add_Type);
PARAMETER(NLL.TH_PHA_Average_Type);
PARAMETER(NLL.TH_PHA_Add_Reason);
PARAMETER(NLL.TH_PHA_Yield_Percent);
PARAMETER(NLL.TH_PHA_Lean_Prm_Crc_CWT);
PARAMETER(NLL.TH_VC_Gross_Value_HD);
PARAMETER(NLL.TH_Excluded_Gross_Value);
PARAMETER(NLL.TH_Avg_Lean);
PARAMETER(NLL.TH_Broken_Back_Hd_Count);
PARAMETER(NLL.TH_Hot_Scl_Upload_Time);
PARAMETER(NLL.TH_Unused_Nbr_4);
PARAMETER(NLL.TH_Excluded_Carc_Val);
PARAMETER(NLL.TH_Excluded_Premium);
PARAMETER(NLL.TH_Unused_Nbr_7);
PARAMETER(NLL.TH_Unused_Nbr_8);
PARAMETER(NLL.TH_Unused_Nbr_9);
PARAMETER(NLL.TH_Unused_Nbr_10);
PARAMETER(NLL.TH_Break_Even_Price_CWT);
PARAMETER(NLL.TH_Meat_Value_Factor_Amt);
PARAMETER(NLL.TH_Yld_Parm_Adj_Yield);
PARAMETER(NLL.TH_PHA_Sort_Disc_Fctr);
PARAMETER(NLL.TH_Avg_Loin_Eye_2_dec);
PARAMETER(NLL.TH_Avg_Backfat_2_Dec);
PARAMETER(NLL.TH_HITCH_Old_Pay_Net_Amt);
PARAMETER(NLL.TH_MPR_Sort_Loss);
PARAMETER(NLL.TH_Unused_Nbr_19);
PARAMETER(NLL.TH_Unused_Nbr_20);
PARAMETER(NLL.TH_Cold_Scl_Upload_Date);
PARAMETER(NLL.TH_Cold_Scl_Upload_Time);
PARAMETER(NLL.TH_Head_LFT);
PARAMETER(NLL.TH_Head_EUT_KOA);
PARAMETER(NLL.TH_Unused_Date_5);
PARAMETER(NLL.TH_Unused_Sts_1);
PARAMETER(NLL.TH_Unused_Sts_2);
PARAMETER(NLL.TH_Unused_Sts_3);
PARAMETER(NLL.TH_Unused_Sts_4);
PARAMETER(NLL.TH_Unused_Sts_5);
PARAMETER(NLL.TH_Unused_Sts_6);
PARAMETER(NLL.TH_Unused_Sts_7);
PARAMETER(NLL.TH_Unused_Sts_8);
PARAMETER(NLL.DF_Defect_Code);
PARAMETER(NLL.THP_Process_Code);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(NLL.HB_Buyer_Code);
PARAMETER(NLL.GN_Genetic_Code);
PARAMETER(NLL.HC_Class_Code);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // LCL.Net Amount           USR = LCL.Net Amount           USR + DB1.Th Payment Net Amt
 LCL.Net_Amount_USR = LCL.Net_Amount_USR + DB1.Th_Payment_Net_Amt;

 //?USER: Exit processing

 // PAR.Th Payment Net Amt = LCL.Th Payment Net Amt
 PAR.Th_Payment_Net_Amt = LCL.Th_Payment_Net_Amt;

}


//?View Record Selection
CASE;

// IF LCL.Push to Pay Sts      USR is All
IF LCL.Push_to_Pay_Sts_USR = *BLANK;

//?View Record Selection
// IF LCL.Push to Pay Sts      USR is Ready to Push
IF LCL.Push_to_Pay_Sts_USR = 'R';

// AND RCD.VCD Push Payment Status is Not Yes
AND RCD.VCD_Push_Payment_Status = *BLANK/'N';

//?View Record Selection
// IF LCL.Push to Pay Sts      USR is All Repayments
IF LCL.Push_to_Pay_Sts_USR = 'O';

// AND RCD.VCD Repayment Flag is Repayment
AND RCD.VCD_Repayment_Flag = 'R';

//?View Record Selection
// IF LCL.Push to Pay Sts      USR is Push Completed
IF LCL.Push_to_Pay_Sts_USR = 'C';

// AND RCD.VCD Push Payment Status is Yes
AND RCD.VCD_Push_Payment_Status = 'Y';

//?View Record Selection
// IF LCL.Push to Pay Sts      USR NE RCD.VCD Push Payment Status
IF LCL.Push_to_Pay_Sts_USR <> RCD.VCD_Push_Payment_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?F5=Refresh   F10=Toggle   F16=Push
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?F5=Refresh   F10=Toggle   F16=Push
// IF CTL.*CMD key is Toggle
IF CTL.*CMD_key = '10';

//?Toggle status value
CASE;

// IF LCL.Push to Pay Sts      USR is All
IF LCL.Push_to_Pay_Sts_USR = *BLANK;

// LCL.Push to Pay Sts      USR = CND.Ready to Push
LCL.Push_to_Pay_Sts_USR = 'R';

//?Toggle status value
// IF LCL.Push to Pay Sts      USR is Ready to Push
IF LCL.Push_to_Pay_Sts_USR = 'R';

// LCL.Push to Pay Sts      USR = CND.All Repayments
LCL.Push_to_Pay_Sts_USR = 'O';

//?Toggle status value
// IF LCL.Push to Pay Sts      USR is All Repayments
IF LCL.Push_to_Pay_Sts_USR = 'O';

// LCL.Push to Pay Sts      USR = CND.Push Completed
LCL.Push_to_Pay_Sts_USR = 'C';

//?Toggle status value
// IF LCL.Push to Pay Sts      USR is Push Completed
IF LCL.Push_to_Pay_Sts_USR = 'C';

// LCL.Push to Pay Sts      USR = CND.Pushed-Report not Printed
LCL.Push_to_Pay_Sts_USR = 'P';

//?Toggle status value
// IF LCL.Push to Pay Sts      USR is Pushed-Report not Printed
IF LCL.Push_to_Pay_Sts_USR = 'P';

// LCL.Push to Pay Sts      USR = CND.Ignored
LCL.Push_to_Pay_Sts_USR = 'I';

//?Toggle status value
// IF LCL.Push to Pay Sts      USR is Ignored
IF LCL.Push_to_Pay_Sts_USR = 'I';

// LCL.Push to Pay Sts      USR = CND.All
LCL.Push_to_Pay_Sts_USR = *BLANK;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?F5=Refresh   F10=Toggle   F16=Push
// IF CTL.*CMD key is CF16
IF CTL.*CMD_key = '16';

EXECUTE FUNCTION(Rtv Count Push records RT) TYPE(RTVOBJ) FILE(PKBLCPP)          AB1345694;
PARAMETER('TO');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(LCL.Nbr_of_Push_Rcds_Regular);
PARAMETER(LCL.Nbr_of_Push_Rcds_Repaymnt);
{
 //?USER: Initialize routine

 // PAR.Nbr of Push Rcds-Regular = CON.*ZERO
 PAR.Nbr_of_Push_Rcds_Regular = *ZERO;

 // PAR.Nbr of Push Rcds-Repaymnt = CON.*ZERO
 PAR.Nbr_of_Push_Rcds_Repaymnt = *ZERO;

 //?USER: Process Data record

 //?Count records where the Push Payment Status = N or blank
 CASE;

 // IF DB1.VCD Push Payment Status is Not Yes
 IF DB1.VCD_Push_Payment_Status = *BLANK/'N';

 //?Increment Regular Push and Repayment Push records
 CASE;

 // IF DB1.VCD Repayment Flag is Repayment
 IF DB1.VCD_Repayment_Flag = 'R';

 // PAR.Nbr of Push Rcds-Repaymnt = PAR.Nbr of Push Rcds-Repaymnt + CON.1
 PAR.Nbr_of_Push_Rcds_Repaymnt = PAR.Nbr_of_Push_Rcds_Repaymnt + 1;

 //?Increment Regular Push and Repayment Push records
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Nbr of Push Rcds-Regular = PAR.Nbr of Push Rcds-Regular + CON.1
 PAR.Nbr_of_Push_Rcds_Regular = PAR.Nbr_of_Push_Rcds_Regular + 1;

 ENDIF;

 ENDIF;

}


//?If no errors, submit push process
CASE;

// IF LCL.Push To Company is *ZERO
IF LCL.Push_To_Company = *ZERO;

// Send error message - 'Company &1 not setup for Push Payments'
ERROR(PRK1505);
MSGPARM(CTL.BOH_Company_Number);

//?If no errors, submit push process
// IF LCL.Nbr of Push Rcds-Repaymnt is Zero
IF LCL.Nbr_of_Push_Rcds_Repaymnt = *ZERO;

// Send error message - 'There are no Repayment records to push.'
ERROR(PRK1503);

//?If no errors, submit push process
// IF LCL.Nbr of Push Rcds-Regular is Not Zero
IF LCL.Nbr_of_Push_Rcds_Regular <> *ZERO;

// Send error message - 'Regular Push records exist.  Cannot Push repayments until regular Push is D
ERROR(PRK1504);

//?If no errors, submit push process
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Pmt TF2 Payment Push  PV.
CALL PROGRAM(Pmt TF2 Payment Push  PV) ('PWEGPVR');
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER('M');

ENDIF;

//?F5=Refresh   F10=Toggle   F16=Push
// IF *OTHERWISE
IF *OTHERWISE;

//?If Push Status value changes, move value to DB1 field
CASE;

// IF CTL.Push Status NE CTL.VCD Push Payment Status
IF CTL.Push_Status <> CTL.VCD_Push_Payment_Status;

// Execute function Prompt Push Status USR US.
EXECUTE FUNCTION(Prompt Push Status USR US) TYPE(EXCUSRSRC) ('PWG0UFR');
{
 * Validate user field - Push Status
 C                     MOVEL*BLANK    W0RTN
 C                     MOVEL#CI5SS    W0NSRQ           Push Status
 * Name search required?
 C           W0NSRQ    IFEQ '?'
 C           '#CI5SS'  OREQ YPMTFD
 C                     CALL 'PKVLLSR'              90  *
 C                     PARM           W0RTN
 C                     PARM 1337842   Y2LSNO
 C           #CI5SS    PARM #CI5SS    W0EXVL           Push Status
 * Defer confirm
 C                     MOVEL'Y'       W0DCF
 C           W0NSRQ    IFNE '?'
 C                     MOVEL'*DONE'   YPMTFD
 C                     END
 C                     END
}


// CTL.VCD Push Payment Status = CTL.Push Status
CTL.VCD_Push_Payment_Status = CTL.Push_Status;

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?5=Display  8=Select/Unselect for Repayment
CASE;

// IF RCD.*SFLSEL is *Work With/Display
IF RCD.*SFLSEL = '5';

// Call program Dsp Hog Voucher Detail DR.
CALL PROGRAM(Dsp Hog Voucher Detail DR) ('PWGYD1R');
PARAMETER(RCD.VCH_Company_number);
PARAMETER(RCD.VCH_Batch_Number);
PARAMETER(RCD.VCH_Header_Number);
PARAMETER(RCD.VCD_Line);

//?5=Display  8=Select/Unselect for Repayment
// IF RCD.*SFLSEL is *Option 8 request
IF RCD.*SFLSEL = '8'/'8';

//?Select/Unselect processing
DO;

//?Select/Unselect for Repayment
CASE;

// IF NOT RCD.VCD Hog Class Type is Market
IF ! RCD.VCD_Hog_Class_Type = 'M';

// Send error message - 'Select/Unselect not allowed for this record.'
ERROR(PRK1506);
MSGPARM(RCD.*SFLSEL);

QUIT;

//?Select/Unselect for Repayment
// IF RCD.VCD Push Payment Status is Yes
IF RCD.VCD_Push_Payment_Status = 'Y';

// AND RCD.VCD Repayment Flag is Not entered
AND RCD.VCD_Repayment_Flag = *BLANK;

// Call program Upd for P2P Repayment XF.
CALL PROGRAM(Upd for P2P Repayment XF) ('PWGXXFR');
PARAMETER(RCD.VCH_Company_number);
PARAMETER(RCD.VCH_Batch_Number);
PARAMETER(RCD.VCH_Header_Number);
PARAMETER(RCD.VCD_Line);
PARAMETER('R');

//?Select/Unselect for Repayment
// IF RCD.VCD Push Payment Status is No
IF RCD.VCD_Push_Payment_Status = 'N';

// AND RCD.VCD Repayment Flag is Repayment
AND RCD.VCD_Repayment_Flag = 'R';

// Call program Upd for P2P Repayment XF.
CALL PROGRAM(Upd for P2P Repayment XF) ('PWGXXFR');
PARAMETER(RCD.VCH_Company_number);
PARAMETER(RCD.VCH_Batch_Number);
PARAMETER(RCD.VCH_Header_Number);
PARAMETER(RCD.VCD_Line);
PARAMETER(*BLANK);

//?Select/Unselect for Repayment
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Select/Unselect not allowed for this record.'
ERROR(PRK1506);
MSGPARM(RCD.*SFLSEL);

QUIT;

ENDIF;

//?If no errors, reload subfile
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDDO;

ENDIF;

