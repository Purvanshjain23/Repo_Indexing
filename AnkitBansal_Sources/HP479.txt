      *****************  RPG PROGRAM HEADING  ************************
      * SYSTEM:      Hog Production System
      * PROGRAM:     HP479
      * TITLE:       Specify Open Hog Groups to Dispose
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     09/29/99
      *
      * FUNCTION: This program is called from a menu. It allows the user
      *           to specify the following parameters for disposing groups:
      *                  a) business office
      *                  b) farm site
      *                  c) cut-off open date
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 06/05/01  LeAnne Fedor
      *           Recompile only. New field 'multisite' added to Farm Site file.
      *
      * 06/28/01  LeAnne Fedor
      *           Recompile only.
      *           Three fields (manager/supervisor/multisite) renamed in Farm Site file.
      *
      * 09/04/01  LeAnne Fedor
      *           Recompile only. New 'square feet' fields added to Farm Site file.
      *
      * 10/16/13  LeAnne Ramsey (E2831)
      *           Recompile only. Added field 'MTech Reference'.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhpd479    cf   e             workstn
     F                                     infds(iofeed)
      *
     Fhsp018    if   e           k disk
      *    Farm site
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D rtncd           s              2
     D maxmsg          s              2  0  inz(20)
      *
      *
      * Control fields
      *
     D termfl          s              1
     D svdvcd          s                   like(oudvcd)
      *
      *
      * Parm fields
      *
     D infncd          s             10
     D inbobo          s              5
     D indvfl          s              1
     D inbofl          s              1
     D oubobo          s              5
     D oubods          s             30
     D oudvcd          s              5
     D secfl           s              1
     D oubofl          s              1
     D ourmfl          s              1
     D xxfsbo          s                   like(dffsbo)
     D xxbods          s                   like(dfbods)
     D xxalphfscd      s              5
     D xxfscd          s                   like(dffscd)
     D xxfsnm          s                   like(dffsnm)
     D xxppcd          s                   like(fsppcd)
     D xxptcd          s                   like(fsptcd)
     D xxcymdopdt      s              8  0
      *
      *
      *
      * Workfields
      *
     D wkfncd          s                   like(sdpgm)
      *
      * Workfields for date manipulation
      *
     D wkcymdiso       s               D   datfmt(*iso)
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAIN LINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * $set1 - set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $scrn1 - perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      *
      * If the user failed the initial security checks, set on 99 to protect
      * fields and invalidate function keys.
      *
      *
     C                   if        termfl = yes
     C                   seton                                        99
     C                   endif
      *
      * Write the error messages from the error arrays to the error
      * message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to CRT.
      *
      *
     C                   write     hp479k1
     C                   write     hp479ec
     C                   exfmt     hp479r1
      *
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on or termfl = yes                  F3-exit
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                       API
     C                   eval      routne = scrn1
     C                   other
      *
      * Always check security for business office.
      *
     C                   movel(p)  'HP479'       wkfncd
     C                   exsr      $chkbo
      *
      * User has pressed enter
      *
     C                   if        secfl = no
     C                   movel(p)  'HP179'       wkfncd
     C                   exsr      $sec
     C                   endif
      *
     C                   eval      routne = edit1
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $edit1 - edit screen 1 input fields
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * Validate:
      *  1) farm site
      *  2) cut-off open date
      *
     C                   exsr      $fscd
     C                   exsr      $mdyopdt
      *
      * If there are no errors, call the program to dispose groups
      *
     C                   if        error = 0
     C                   call      'HP179'
     C                   parm                    dffsbo
     C                   parm                    dfbods
     C                   parm                    dffscd
     C                   parm                    dffsnm
     C                   parm                    dfmdyopdt
     C                   parm                    xxcymdopdt
     C                   endif
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *-------------------------------------------------------------------------------------
      * $fscd - Validate farm site
      *-------------------------------------------------------------------------------------
      *
      * Validations:
      *  1) required
      *  2) must be valid in Farm Site file
      *  3) must be for the specified business office
      *  4) cannot be a BGF farm
      *
     C     $fscd         begsr
      *
     C                   move      *blank        dffsnm
      *
     C                   select
     C                   when      dffscd = 0
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
     C                   other
      *
     C     dffscd        chain     hsp018                             92
     C                   if        *in92 = *on                                  If bad farm
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'hs00131'
     C                   clear                   mgw
     C                   move      dffscd        xxalphfscd
     C                   movea     xxalphfscd    mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   else
      *
     C                   eval      dffsnm = fsfsnm
      *
      * Farm cannot be a BGF farm site
      *
     C                   if        fsppcd = 'BGF  '                             If BGF
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'hs00596'
     C                   clear                   mgw
     C                   move      dffscd        xxalphfscd
     C                   movea     xxalphfscd    mgw(1)
     C                   movea     fsppcd        mgw(6)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If BGF
      *
      * Farm site is valid, so check that the business office entered
      * by the user matches that of the farm.
      *
     C                   if        *in31 = *off and fsfsbo <> dffsbo            If mismatch
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'hs00158'
     C                   clear                   mgw
     C                   move      dffscd        xxalphfscd
     C                   movea     xxalphfscd    mgw(1)
     C                   movea     fsfsbo        mgw(6)
     C                   movea     dffsbo        mgw(11)
     C                   movea     mgw           mgdt(e)
     C                   endif
      *
     C                   endif                                                  If mismatch
     C                   endif                                                  If bad farm
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $mdyopdt - Validate cut-off open date
      *----------------------------------------------------------------
      *
      * Validations:
      *  1) required
      *  2) cannot be negative
      *  3) must be a valid date
      *
      *
     C     $mdyopdt      begsr
      *
     C                   eval      xxcymdopdt = 0
      *
     C                   select
     C                   when      dfmdyopdt = 0                                Wh zero
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
      *
     C                   when      dfmdyopdt < 0                                Wh negative cutoff
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
      *
     C                   when      dfmdyopdt > 0                                Wh date entered
     C     *mdy          test(d)                 dfmdyopdt              92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      *
      * Flip date from mmddyy to ccyymmdd using the 'date format' field
      * to add the century value
      *
     C     *mdy          move      dfmdyopdt     wkcymdiso
     C                   move      wkcymdiso     xxcymdopdt
      *
     C                   endif                                                  If bad date
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $chkbo - Validate the business office
      *----------------------------------------------------------------
      *
      * Validations:
      *  1) required
      *  2) valid in the Business Office master
      *  3) Be a 'LIVE' division office
      *  4) Have a security location to which the user is authroized
      *
     C     $chkbo        begsr
      *
      * Check the user's security to the business office.
      * Set the INDVFL to YES to tell security program to compare the function
      * division code to the B.O. Division Code.
      *
     C                   eval      indvfl = yes
     C                   exsr      $sec
     C                   eval      indvfl = no
      *
     C                   movel     oubods        dfbods
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $sec - call security program
      *---------------------------------------------------------------
      *
     C     $sec          begsr
      *
      * Setup the fields to send into the security program
      *
     C                   movel     wkfncd        infncd                         Pgm name
     C                   movel     dffsbo        inbobo                         Screen b.o.
      *
     C                   move      *blank        oubobo                         BO code
     C                   move      *blank        oubods                         BO desc
     C                   move      *blank        oudvcd                         Function div
     C                   movel     no            termfl                         Terminal flag
      *
     C                   call      'HPSEC  '
      *  Input
     C                   parm                    mgid                           MSGID Array
     C                   parm                    mgdt                           MSGDTA data
     C                   parm                    error                          # Of errors
     C                   parm                    infncd                         Func code
     C                   parm                    inbobo                         BO code
     C                   parm                    indvfl                         Check div?
     C                   parm                    inbofl                         Check B.O.?
      * Output
     C                   parm                    oubobo                         BO code
     C                   parm                    oubods                         BO desc.
     C                   parm                    oudvcd                         Div code
     C                   parm                    secfl                          Sec flag
     C                   parm                    oubofl                         BO errflg
     C                   parm                    ourmfl
      *
     C                   if        oubofl = yes
     C                   seton                                        31
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $f4s1 - F4 prompt on screen 1
      *----------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      * Business office
      *
     C                   select
     C                   when      fld = 'DFFSBO'
     C                   move      *blank        xxfsbo
     C                   move      *blank        xxbods
     C                   call      'HP503'
     C                   parm                    xxfsbo
     C                   parm                    xxbods
     C                   parm                    svdvcd
     C                   seton                                        51
     C                   if        xxfsbo <> *blank
     C                   movel     xxfsbo        dffsbo
     C                   movel     xxbods        dfbods
     C                   endif
      *
      * Farm site
     C                   when      fld = 'DFFSCD'
     C                   movel     dffsbo        xxfsbo
     C                   Z-ADD     0             xxfscd
     C                   move      *blank        XXfsnm
     C                   move      *blank        XXppcd
     C                   move      *blank        XXptcd
     C                   call      'HP551'
     C                   parm                    xxfsbo
     C                   parm                    xxfscd
     C                   parm                    xxfsnm
     C                   parm                    xxppcd
     C                   parm                    xxptcd
     C                   seton                                        52
     C                   if        xxfscd <> 0
     C                   z-add     xxfscd        dffscd
     C                   movel     xxfsnm        dffsnm
     C                   endif
     C                   other
      *
      * F4 not valid for this field, so issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09011'
     C                   endif
      *
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $wrmsg - write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * $clmsg - clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * $exit - seton last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        lr
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * *inzsr - initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *   none
      *
      * Key lists
      *    None
      *
      * Execute the security subroutine to determine the user authorizations
      *
     C                   eval      wkfncd = sdpgm
     C                   movel     no            inbofl
     C                   exsr      $sec
     C                   movel     yes           inbofl
      *
      * If there are errors on the initial call, set the term flag to yes.
      *
     C                   if        secfl = yes
     C                   movel     yes           termfl
     C                   endif
      *
      * Move returned fields to screen
      *
     C                   movel     oubobo        dffsbo
     C                   movel     oubods        dfbods
      *
      * Save the function's division code.
      *
     C                   movel     oudvcd        svdvcd
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
