// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDN2XFR
// ?Date: 14.08.2025 Time: 03:29:02
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(RTV Trans Control@Hdr  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1411242;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Trans_Contol_AS400_Plant);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Check if Post/Not  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1316844;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Access_Denied_Y_N);
PARAMETER(PAR.Trans_Contol_AS400_Plant);
{
 //?USER: Initialize routine

 //?Change log
 DO;

 //?E00196 RMC 8/24/12 Chk pfs interface SHPTRN too
 //?12/3/96 PLL  changed if no manifest & Plant so Price Audit = M
 //?             removed PAR.Price Audit.  not really being used
 ENDDO;

 // PAR.Access Denied (Y/N) = CND.no
 PAR.Access_Denied_Y_N = 'N';

 //?USER: Process Data record

 //?Update all status for non-deleted items
 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 EXECUTE FUNCTION(RTV Check Existence    RT) TYPE(RTVOBJ) FILE(OMFNCPP)          AC1315565;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  QUIT;

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

  QUIT;

 }

 CASE;

 // IF PGM.*Return code is *Record already exists
 IF PGM.*Return_code = 'Y2U0003';

 EXECUTE FUNCTION(CHG Post Dtl Status    CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1314004;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER('R');
 PARAMETER(DB1.Detail_Line_Status);
 PARAMETER(DB1.Billing_Detail_Gross_Dol);
 PARAMETER(DB1.Billing_Detail_Net_Dol);
 PARAMETER(DB1.Quantity_to_Substitute);
 PARAMETER(DB1.Extended_Amount);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Audit_Reason_Code);
 PARAMETER('04');
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?If plant floor order change status to shipped
 CASE;

 // IF PAR.Trans Contol AS400/Plant is Plant
 IF PAR.Trans_Contol_AS400_Plant = 'P';

 EXECUTE FUNCTION(CHG Post Dtl Status    CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1314004;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER('R');
 PARAMETER(DB1.Detail_Line_Status);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('M');
 PARAMETER(*BLANK);
 PARAMETER('04');
 //?If plant floor order change status to shipped
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?11/01/08 PKD If live with Carlisle, then Manifest Detail is not
 //?             necessary.
 EXECUTE FUNCTION(Rtv Live w/Carlisle   RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1747217;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(LCL.WHS_Live_with_Carlisle);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?E00196 RMC 8/24/12 Chk pfs interface SHPTRN too
 EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
 PARAMETER(DB1.Company_Number);
 PARAMETER('SHPTRN');
 PARAMETER(LCL.PFS_AccuSort_Active);
 PARAMETER(LCL.PFS_Carlisle_Active);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?S15557 RMC 10/02/19 Chk EDI live with 945 too
 EXECUTE FUNCTION(Rtv Whs Interchg Actv RT) TYPE(RTVOBJ) FILE(PNG0REP)           AC2153802;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER('WHSADV');
 PARAMETER(LCL.Record_Status_Save);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.WHS Live w/Carlisle is Yes
 IF LCL.WHS_Live_with_Carlisle = 'Y';

 // AND LCL.PFS Carlisle Active is Yes
 AND LCL.PFS_Carlisle_Active = 'Y';

 EXECUTE FUNCTION(CHG Post Dtl Status    CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1314004;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER('R');
 PARAMETER(DB1.Detail_Line_Status);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('M');
 PARAMETER(*BLANK);
 PARAMETER('04');
 // IF LCL.Record Status Save is Active
 IF LCL.Record_Status_Save = 'A';

 EXECUTE FUNCTION(CHG Post Dtl Status    CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1314004;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER('R');
 PARAMETER(DB1.Detail_Line_Status);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('M');
 PARAMETER(*BLANK);
 PARAMETER('04');
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(CHG Post Dtl Status    CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1314004;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER('A');
 PARAMETER(DB1.Detail_Line_Status);
 PARAMETER(DB1.Billing_Detail_Gross_Dol);
 PARAMETER(DB1.Billing_Detail_Net_Dol);
 PARAMETER(DB1.Quantity_to_Substitute);
 PARAMETER(DB1.Extended_Amount);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Audit_Reason_Code);
 PARAMETER(*BLANK);
 // PAR.Access Denied (Y/N) = CND.yes
 PAR.Access_Denied_Y_N = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Access Denied = no means all active lines have manifest
CASE;

// IF PAR.Access Denied (Y/N) is no
IF PAR.Access_Denied_Y_N = 'N';

//?11/04/19 DN R15305-Changed RTV to Also Get Bill to Customer.
EXECUTE FUNCTION(RTV ShpTo,BillTo,OTyp RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1977668;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.AR_Customer_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(LCL.Bill_to_Customer);
PARAMETER(PAR.Billing_Activity_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Get TO warehouse for transfers
CASE;

// IF PAR.Billing Activity Type is Warehouse Transfer
IF PAR.Billing_Activity_Type = '4';

EXECUTE FUNCTION(Rtv Default Warehouse  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1323141;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.To_Warehouse_Code_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?12/04/06 PKD Added Inter-Plant Transfer Processing.
EXECUTE FUNCTION(Rtv Warehouse SHP     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1801521;
PARAMETER(PAR.To_Warehouse_Code_USR);
PARAMETER(LCL.Trans_Contol_AS400_Plant);
PARAMETER(LCL.Warehouse_Location);
PARAMETER(LCL.Shipping_Company);
PARAMETER(LCL.Accounting_Company);
PARAMETER(LCL.WHS_Live_with_Carlisle);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?E00196 RMC 8/24/12 Chk pfs interface SHPTRN too
EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
PARAMETER(PAR.Company_Number);
PARAMETER('SHPTRN');
PARAMETER(LCL.PFS_AccuSort_Active);
PARAMETER(LCL.PFS_Carlisle_Active);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Inter-Plant Transfer?
CASE;

// IF LCL.Warehouse Location is Internal (Plant)
IF LCL.Warehouse_Location = 'I';

// AND LCL.WHS Live w/Carlisle is Yes
AND LCL.WHS_Live_with_Carlisle = 'Y';

// AND LCL.PFS Carlisle Active is Yes
AND LCL.PFS_Carlisle_Active = 'Y';

// PAR.Inter-Plant Transfer USR = CND.Yes
PAR.Inter_Plant_Transfer_USR = 'Y';

//?Inter-Plant Transfer?
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Inter-Plant Transfer USR = CND.No
PAR.Inter_Plant_Transfer_USR = 'N';

ENDIF;

//?Get TO warehouse for transfers
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.To Warehouse Code  USR = CON.*BLANK
PAR.To_Warehouse_Code_USR = *BLANK;

// PAR.Inter-Plant Transfer USR = CND.No
PAR.Inter_Plant_Transfer_USR = 'N';

ENDIF;

//?*********************
//?*********************
//?** This is the function that does all the Inventory updates, etc
//?WI517 DN 10/03/23-Added 'Called From Program' as Input Parm.
//?- Added 'Send Email f/Failed API U' Output Parm.
EXECUTE FUNCTION(UPD Post Ship Fields   RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1313922;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER(PAR.Access_Denied_Y_N);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(PAR.Trans_Contol_AS400_Plant);
PARAMETER(PAR.Billing_Activity_Type);
PARAMETER(PAR.To_Warehouse_Code_USR);
PARAMETER(PAR.Inter_Plant_Transfer_USR);
PARAMETER(PAR.Called_From_Program);
PARAMETER(PAR.Send_Email_f_Failed_API_U);
{
 //?USER: Initialize routine

 //?WI517 DN 10/04/23-Initialize Flags.
 // LCL.First Time Through USR = CND.Yes
 LCL.First_Time_Through_USR = 'Y';

 //?USER: Process Data record

 //?Access Denied = no means all active lines have manifest
 //?Inventory and Order Records updated when complete order confirmed
 CASE;

 // IF PAR.Access Denied (Y/N) is no
 IF PAR.Access_Denied_Y_N = 'N';

 //?Update Inventory trans and Item Balance files, return cost
 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 // AND DB1.Affect Inventory Status is yes
 AND DB1.Affect_Inventory_Status = 'Y';

 //?WI517 DN 10/03/23-Added 'Called From Program' as Input Parm.
 //?- Added 'Send Email f/Failed API U' Output Parm.
 // Call program UPD Confrm - Ship Post XF.
 CALL PROGRAM(UPD Confrm - Ship Post XF) ('PDOOXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.U_M_Ordered);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER(PAR.Billing_Activity_Type);
 PARAMETER(PAR.To_Warehouse_Code_USR);
 PARAMETER(PAR.Inter_Plant_Transfer_USR);
 PARAMETER(PAR.Called_From_Program);
 PARAMETER(LCL.Send_Email_f_Failed_API_U);

 //?WI517 DN 10/04/23-Set 'Send Email f/Failed API U' for Failed API Call.
 CASE;

 // IF LCL.Send Email f/Failed API U is Yes
 IF LCL.Send_Email_f_Failed_API_U = 'Y';

 // AND LCL.First Time Through USR is Yes
 AND LCL.First_Time_Through_USR = 'Y';

 // LCL.First Time Through USR = CND.No
 LCL.First_Time_Through_USR = 'N';

 // PAR.Send Email f/Failed API U = CND.Yes
 PAR.Send_Email_f_Failed_API_U = 'Y';

 ENDIF;

 ENDIF;

 //?Let Inventory know of any differences in what has been shipped from
 //?    what has been ordered.
 // PAR.USR New Item Status = CND.no
 PAR.USR_New_Item_Status = 'N';

 // PAR.USR Deleted Item = CND.no
 PAR.USR_Deleted_Item = 'N';

 //?If affect inventory is yes then affect Product Available
 CASE;

 // IF DB1.Affect Inventory Status is yes
 IF DB1.Affect_Inventory_Status = 'Y';

 //?Process Over/Short Ship
 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 //?If dates not =, short scheduled ship, over actual ship
 CASE;

 // IF PAR.Scheduled Ship Date NE PAR.Actual Shipped Date
 IF PAR.Scheduled_Ship_Date <> PAR.Actual_Shipped_Date;

 //?Update allocated qty/wgt so = shipped qty/wgt
 EXECUTE FUNCTION(CHG Allc/Shp Val, Csts CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1326358;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Quantity_Scheduled);
 PARAMETER(DB1.Weight_Scheduled);
 PARAMETER(DB1.Quantity_Shipped_Total);
 PARAMETER(DB1.Weight_Shipped_Total);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 //?If dates =, over or short or nothing based on processing
 CASE;

 // IF PAR.Scheduled Ship Date EQ PAR.Actual Shipped Date
 IF PAR.Scheduled_Ship_Date = PAR.Actual_Shipped_Date;

 //?Update allocated qty/wgt so = shipped qty/wgt
 EXECUTE FUNCTION(CHG Allc/Shp Val, Csts CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1326358;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Quantity_Scheduled);
 PARAMETER(DB1.Weight_Scheduled);
 PARAMETER(DB1.Quantity_Shipped_Total);
 PARAMETER(DB1.Weight_Shipped_Total);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 EXECUTE FUNCTION(Rtv/Chg Doc Order Shpd RT) TYPE(RTVOBJ) FILE(PDMSREP)          AC1612496;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Quantity_Shipped_Total);
 PARAMETER(DB1.Weight_Shipped_Total);
 {
  //?USER: Process Data record

  // LCL.ED Product Net Weight MT = PAR.Weight Shipped Total / CON.2204.6 *
  LCL.ED_Product_Net_Weight_MT = PAR.Weight_Shipped_Total / 2204.6;

  // Compute: Total Nbr Pieces
  LCL.ED_Total_Nbr_of_Pieces = PAR.Quantity_Shipped_Total * ( DB1.ED_Pieces_per_Bag
  * DB1.ED_Bags_per_Unit );

  EXECUTE FUNCTION(Chg Exp Doc Order Dtl  CH) TYPE(CHGOBJ) FILE(PDMSREP)          AC1524036;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.ED_Export_Document_Type);
  PARAMETER(DB1.Country_Code);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.ED_Item_Code);
  PARAMETER(DB1.ED_Item_Label_Line_1);
  PARAMETER(DB1.ED_Item_Label_Line_2);
  PARAMETER(DB1.ED_Chilled_Frozen_Text);
  PARAMETER(DB1.ED_Unmarked_Txt);
  PARAMETER(PAR.Weight_Shipped_Total);
  PARAMETER(LCL.ED_Product_Net_Weight_MT);
  PARAMETER(DB1.ED_Product_UOM);
  PARAMETER(PAR.Quantity_Shipped_Total);
  PARAMETER(DB1.ED_Product_Pkg_Type);
  PARAMETER(DB1.ED_Shipping_Marks_Txt);
  PARAMETER(DB1.ED_Pieces_per_Bag);
  PARAMETER(DB1.ED_Bags_per_Unit);
  PARAMETER(LCL.ED_Total_Nbr_of_Pieces);
  PARAMETER(DB1.ED_Product_Unit_Price);
  PARAMETER(DB1.ED_Producet_Extended_Amt);
  PARAMETER(DB1.ED_Print_Status);
  PARAMETER(DB1.ED_Plant_Number_Dtl);
  PARAMETER(DB1.ED_Language_Xlate_Desc_2);
  PARAMETER(DB1.ED_Consignee_Address_Nbr);
  PARAMETER(DB1.ED_Date_of_Slaughter_Dtl);
  PARAMETER(DB1.ED_HACCP_Category);
  PARAMETER(DB1.ED_Slaughter_Date_Range);
  PARAMETER(DB1.ED_Production_Date_Range);
  PARAMETER(DB1.ED_Product_UID);
  PARAMETER(DB1.ED_Language_Xlate_Desc);
  PARAMETER(DB1.ED_Unused_Status_1);
  PARAMETER(DB1.ED_Unused_Status_2);
  PARAMETER(DB1.ED_Harmonized_Tariff_Cde);
  PARAMETER(DB1.ED_Nbr_of_Packing_Units);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   //?USER: Processing after Data update

   // Call program Rtv/Chg Hdr Shpd Amts XF.
   CALL PROGRAM(Rtv/Chg Hdr Shpd Amts XF) ('POIYXFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.ED_Export_Document_Type);
   PARAMETER(DB1.Country_Code);

  }

 }

 ENDIF;

 //?Process Over/Short Ship
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Cancelled or deleted lines
 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 EXECUTE FUNCTION(CHG Allc/Shp Val, Csts CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1326358;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?USER: Exit processing

 EXECUTE FUNCTION(RTV Chg Confirm Order  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1314328;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Actual_Shipped_Date);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  CASE;

  // IF DB1.Modified Flag is Shipped & Modified
  IF DB1.Modified_Flag = 'M';

  // WRK.Modified Flag = CND.Shipped & Modified
  WRK.Modified_Flag = 'M';

  // IF DB1.Scheduled Ship Date NE PAR.Actual Shipped Date
  IF DB1.Scheduled_Ship_Date <> PAR.Actual_Shipped_Date;

  // WRK.Modified Flag = CND.Shipped & Modified
  WRK.Modified_Flag = 'M';

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(VAL Over/Under Ship    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1424362;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Modified_Flag);
  {
   //?USER: Initialize routine

   // PAR.Modified Flag = CND.Not Shipped
   PAR.Modified_Flag = *BLANK;

   //?USER: Process Data record

   CASE;

   // IF DB1.Work Over/Short Status is Over/Short
   IF DB1.Work_Over_Short_Status = 'O'/'S';

   // PAR.Modified Flag = CND.Modified
   PAR.Modified_Flag = 'M';

   QUIT;

   ENDIF;

  }

  ENDIF;

  //?If modified flag is not 'M' then modified EQ 'S'
  CASE;

  // IF WRK.Modified Flag is Shipped & Modified
  IF WRK.Modified_Flag = 'M';

  //?If modified flag is not 'M' then modified EQ 'S'
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Modified Flag = CND.Shipped Not Modified
  WRK.Modified_Flag = 'S';

  ENDIF;

  EXECUTE FUNCTION(CHG Evt,Sts,ShpDte,Mod CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1344857;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Actual_Shipped_Date);
  PARAMETER('R');
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER('04');
  PARAMETER(WRK.Modified_Flag);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // Call program TRG Order Hdr CHG Trig XT.
   CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Type_Sales);
   PARAMETER(DB1.AR_Customer_Number);
   PARAMETER(DB1.Ship_To_Customer);
   PARAMETER(DB1.Ship_To_Name);
   PARAMETER(DB1.Ship_To_Address_Line_1);
   PARAMETER(DB1.Ship_To_Address_Line_2);
   PARAMETER(DB1.Ship_To_Address_Line_3);
   PARAMETER(DB1.Ship_To_City);
   PARAMETER(DB1.Ship_To_State_Code);
   PARAMETER(DB1.Ship_To_Zip_Postal_Code);
   PARAMETER(DB1.Bill_to_Customer);
   PARAMETER(DB1.Bill_to_Name);
   PARAMETER(DB1.Bill_to_Address_Line_1);
   PARAMETER(DB1.Bill_to_Address_Line_2);
   PARAMETER(DB1.Bill_to_Address_Line_3);
   PARAMETER(DB1.Bill_to_City);
   PARAMETER(DB1.Bill_to_State_Code);
   PARAMETER(DB1.Bill_to_Zip_Postal_Code);
   PARAMETER(DB1.Customer_Purchase_Order_#);
   PARAMETER(DB1.Order_Date);
   PARAMETER(DB1.Requested_Ship_Date);
   PARAMETER(DB1.Actual_Shipped_Date);
   PARAMETER(DB1.Cancel_Date);
   PARAMETER(DB1.Terms_Code);
   PARAMETER(DB1.Special_Instructions);
   PARAMETER(DB1.Special_Instructions_2);
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Comment_Print_Acknowledge);
   PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
   PARAMETER(DB1.Comment_Print_Pick_Slip);
   PARAMETER(DB1.Comment_Print_Ship_Doc);
   PARAMETER(DB1.Reason_Code);
   PARAMETER(DB1.Order_in_Use);
   PARAMETER(DB1.Header_Status);
   PARAMETER(DB1.Header_Status_Last);
   PARAMETER(DB1.Order_Type_Print_Status);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.User_Original_Entry);
   PARAMETER(DB1.Date_of_Original_Entry);
   PARAMETER(DB1.Order_Value_Total);
   PARAMETER(DB1.Order_Weight_Total);
   PARAMETER(DB1.Credit_Hold);
   PARAMETER(DB1.Production_Hold);
   PARAMETER(DB1.New_Customer_Hold);
   PARAMETER(DB1.Requested_Delivery_Date);
   PARAMETER(DB1.Requested_Delivery_Time);
   PARAMETER(DB1.Accounts_Receiv_Ent_1);
   PARAMETER(DB1.Accounts_Receiv_Ent_2);
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
   PARAMETER(DB1.Rated_Freight);
   PARAMETER(DB1.LTL_Flag);
   PARAMETER(DB1.Price_Audit);
   PARAMETER(DB1.Price_Status);
   PARAMETER(DB1.Shipping_Method);
   PARAMETER(DB1.Export_Status);
   PARAMETER(DB1.Palletize);
   PARAMETER(DB1.Shrink_Wrap);
   PARAMETER(DB1.Slip_Sheet);
   PARAMETER(DB1.Age_Code);
   PARAMETER(DB1.Reefer_Temperature);
   PARAMETER(DB1.Load_Type);
   PARAMETER(DB1.Attach_to_Invoice_Number);
   PARAMETER(DB1.Load_Plan_Order);
   PARAMETER(DB1.Print_Pick_Slip);
   PARAMETER(DB1.Resell_Reference_Number);
   PARAMETER(DB1.Special_Comment_1);
   PARAMETER(DB1.Special_Comment_2);
   PARAMETER(DB1.Affect_Auto_Accruals);
   PARAMETER(DB1.Sales_Route_Code);
   PARAMETER(DB1.Manager_Level_Code);
   PARAMETER(DB1.VP_Level_Code);
   PARAMETER(DB1.Attach_to_Order_Number);
   PARAMETER(DB1.Reason_for_Price_Audit);
   PARAMETER(DB1.Invoice_Number);
   PARAMETER(DB1.Invoice_Suffix);
   PARAMETER(DB1.Invoice_Date);
   PARAMETER(DB1.Event_Code);
   PARAMETER(DB1.Trans_Contol_AS400_Plant);
   PARAMETER(DB1.Modified_Flag);
   PARAMETER(DB1.A_R_order_Value_Total);
   PARAMETER(DB1.Billing_Activity_Type);
   PARAMETER(DB1.Block_Order_Flag);
   PARAMETER(DB1.Order_Certification_Flag);
   PARAMETER(DB1.Invoice_Order_Value_Tot);
   PARAMETER(DB1.Process_Sts_for_3C);
   PARAMETER(DB1.Order_Conf_Fax_Sts);
   PARAMETER(DB1.Manifest_Fax_Sts);
   PARAMETER(DB1.Invoice_Fax_Sts);
   PARAMETER(DB1.Transfer_in_Storage_Ind);
   PARAMETER(DB1.Email_Cust_On_Order_Ship);
   PARAMETER(DB1.Order_Emailed);
   PARAMETER(DB1.Export_Docs_Go_w_Driver);
   PARAMETER(DB1.Shipping_Temp_Code_C_F);
   PARAMETER(DB1.Broker_Order_Status);
   PARAMETER(DB1.Air_Freight_Order);
   PARAMETER(DB1.Order_Requires_Review);
   PARAMETER(DB1.OH_Load_Plan_Ready);
   PARAMETER(DB1.Export_USDA_Approved);
   PARAMETER(DB1.HPB_Ship_to_Warehouse);
   PARAMETER(DB1.OH_TF_Exempt_Code);
   PARAMETER(DB1.OH_Appt_Confirmation_Dt);
   PARAMETER(DB1.JPN_Invoice_Issuance_Date);
   PARAMETER(DB1.Load_Actual_Shipped_Date);
   PARAMETER(DB1.Load_BOL_Complete_Date);
   PARAMETER(DB1.Load_Truck_Departure_Date);
   PARAMETER(DB1.Maximum_Gross_Weight);
   PARAMETER(DB1.Time_of_Original_Entry);
   PARAMETER(DB1.OH_Appt_Confirmation_Tm);
   PARAMETER(DB1.Load_BOL_Complete_Time);
   PARAMETER(DB1.Load_Truck_Departure_Time);
   PARAMETER(DB1.Act_Frt_Reference_Amount);
   PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
   PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
   PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
   PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
   PARAMETER(DB1.Claim_Number);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);

  }

 }

 //?FP1110 - RMC 1/10/08 Chg OHE shipped sts
 EXECUTE FUNCTION(RTV Chg for Shipping  RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC1863451;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('S');
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(CHG Order Header Exten CH) TYPE(CHGOBJ) FILE(PMAMREP)          AC1814352;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Stop_Drop_Sequence_Number);
  PARAMETER(DB1.Shipping_Line);
  PARAMETER(DB1.Port_Delv_Terminal);
  PARAMETER(DB1.OHE_City);
  PARAMETER(DB1.OHE_Vessel_Airline);
  PARAMETER(DB1.OHE_Voyage_Flight);
  PARAMETER(DB1.OHE_Booking_Number);
  PARAMETER(DB1.OHE_Discharge_Port_Airprt);
  PARAMETER(DB1.OHE_Sail_Flight_Date);
  PARAMETER(DB1.OHE_Port_Cut_Date);
  PARAMETER(DB1.OHE_Arrival_Date);
  PARAMETER(DB1.OHE_Late_Delivery_Code);
  PARAMETER(PAR.OHE_Ship_Status);
  PARAMETER(DB1.OHE_Container_Number);
  PARAMETER(DB1.OHE_Comment_1);
  PARAMETER(DB1.OHE_Comment_2);
  PARAMETER(DB1.OHE_Unused_Number_1_11_0);
  PARAMETER(DB1.OHE_Unused_Number_2_11_0);
  PARAMETER(DB1.OHE_Unused_Number_3_11_0);
  PARAMETER(DB1.OHE_Unused_Number_4_11_0);
  PARAMETER(DB1.OHE_HPB_RIN_Equiv_Value);
  PARAMETER(DB1.OHE_HPB_RIN_Price);
  PARAMETER(DB1.Transload_Terminal_Fees);
  PARAMETER(DB1.OHE_Est_Arrv_at_Dest_Date);
  PARAMETER(DB1.OHE_Backhaul_ETA_RtrnDate);
  PARAMETER(DB1.OHE_Port_Pier_Paid_Date);
  PARAMETER(DB1.OHE_Actual_Ship_Date);
  PARAMETER(DB1.OHE_Carrier_SCAC_Code);
  PARAMETER(DB1.OHE_Spot_Buy);
  PARAMETER(DB1.OHE_PO_ACK_Flag);
  PARAMETER(DB1.OHE_Override_Type_Code);
  PARAMETER(DB1.OHE_Backhaul_Status);
  PARAMETER(DB1.OHE_Backhaul_ETA_AM_PM);
  PARAMETER(DB1.OHE_Load_Haul_Type);
  PARAMETER(DB1.OHE_Backhaul_Carrier_Code);
  PARAMETER(DB1.OHE_Bookings_Confirmed);
  PARAMETER(DB1.OHE_EDI_Error_Reasons);
  PARAMETER(DB1.OHE_EDI_Error_Reasons_2);
  PARAMETER(DB1.HPB_COA_Batch_Number);
  PARAMETER(DB1.Delivery_P_O_Number);
  PARAMETER(DB1.OHE_Intended_for_ExportCC);
  PARAMETER(DB1.OHE_EDI_943_Action);
  PARAMETER(DB1.OHE_EDI_944_Action);
  PARAMETER(DB1.OHE_EDI_940_Action);
  PARAMETER(DB1.OHE_EDI_945_Action);
  PARAMETER(DB1.OHE_EDI_856_Action);
  PARAMETER(DB1.OHE_EDI_824_Action);
  PARAMETER(DB1.OHE_Transload_Seal_Nbr);
  PARAMETER(DB1.OHE_Abs_Rate_Override_Rsn);
  PARAMETER(DB1.OHE_Appt_Confirmation_#);
  PARAMETER(DB1.OHE_Backhaul_Container#);
  PARAMETER(DB1.OHE_Backhaul_Chassis_#);
  PARAMETER(DB1.OHE_Transload_Container#);
  PARAMETER(DB1.OHE_Pier_Pass_Invoice);
  PARAMETER(DB1.OHE_Carrier_Nm);
  PARAMETER(DB1.OHE_Appt_Confirmation_Nm);
  PARAMETER(DB1.OHE_Backhaul_Comment);
  PARAMETER(DB1.Letter_of_Credit_Number);
  PARAMETER(DB1.OHE_Backhaul_Return_to_Co);
  PARAMETER(DB1.LD_Stop_Drop);
  PARAMETER(DB1.OHE_Unused_Number_3_0);
  PARAMETER(DB1.OHE_Pier_Pass_Fee_Amount);
  PARAMETER(DB1.OHE_Port_Check_Fee_Amount);
  PARAMETER(DB1.OHE_Port_Cut_Time);
  PARAMETER(DB1.OHE_Backhaul_Truck_Number);
  PARAMETER(DB1.OHE_Load_Sched_Seq_Num);
  PARAMETER(DB1.Original_Appointment_Date);
  PARAMETER(DB1.Original_Appointment_Time);
  PARAMETER(DB1.OHE_PowerPro_Load#_Outbnd);
  PARAMETER(DB1.OHE_PowerPro_Load#_Bckhl);
  PARAMETER(DB1.OHE_Unused_Numeric_9_0_3);
  PARAMETER(DB1.OHE_Orig_ABS_Freight_Rate);
  PARAMETER(DB1.OHE_Genset_Number);
  PARAMETER(DB1.OHE_Email_BOL_Sent);
  PARAMETER(DB1.OHE_EDI_Order_Automated);
  PARAMETER(DB1.OHE_EDI_601_Action);
  PARAMETER(DB1.OHE_Unused_Status_4);
  PARAMETER(DB1.OHE_Unused_Text_1);
  PARAMETER(DB1.OHE_Unused_Text_2);
  PARAMETER(DB1.OHE_Customer_Vendor_f_PO);
  PARAMETER(DB1.OHE_EDI_824_AES_ITN_#);
  PARAMETER(DB1.OHE_Unused_Text_5);
  PARAMETER(DB1.OHE_Unused_Date_1);
  PARAMETER(DB1.OHE_Unused_Date_2);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(CRT Existing OHE       CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC1816936;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Load_ID);
   PARAMETER(PAR.Stop_Drop_Sequence_Number);
   PARAMETER(PAR.Shipping_Line);
   PARAMETER(PAR.Port_Delv_Terminal);
   PARAMETER(PAR.OHE_City);
   PARAMETER(PAR.OHE_Vessel_Airline);
   PARAMETER(PAR.OHE_Voyage_Flight);
   PARAMETER(PAR.OHE_Booking_Number);
   PARAMETER(PAR.OHE_Discharge_Port_Airprt);
   PARAMETER(PAR.OHE_Sail_Flight_Date);
   PARAMETER(PAR.OHE_Port_Cut_Date);
   PARAMETER(PAR.OHE_Arrival_Date);
   PARAMETER(PAR.OHE_Late_Delivery_Code);
   PARAMETER(PAR.OHE_Ship_Status);
   PARAMETER(PAR.OHE_Container_Number);
   PARAMETER(PAR.OHE_Comment_1);
   PARAMETER(PAR.OHE_Comment_2);
   PARAMETER(PAR.OHE_Unused_Number_1_11_0);
   PARAMETER(PAR.OHE_Unused_Number_2_11_0);
   PARAMETER(PAR.OHE_Unused_Number_3_11_0);
   PARAMETER(PAR.OHE_Unused_Number_4_11_0);
   PARAMETER(PAR.OHE_HPB_RIN_Equiv_Value);
   PARAMETER(PAR.OHE_HPB_RIN_Price);
   PARAMETER(PAR.Transload_Terminal_Fees);
   PARAMETER(PAR.OHE_Est_Arrv_at_Dest_Date);
   PARAMETER(PAR.OHE_Backhaul_ETA_RtrnDate);
   PARAMETER(PAR.OHE_Port_Pier_Paid_Date);
   PARAMETER(PAR.OHE_Actual_Ship_Date);
   PARAMETER(PAR.OHE_Carrier_SCAC_Code);
   PARAMETER(PAR.OHE_Spot_Buy);
   PARAMETER(PAR.OHE_PO_ACK_Flag);
   PARAMETER(PAR.OHE_Override_Type_Code);
   PARAMETER(PAR.OHE_Backhaul_Status);
   PARAMETER(PAR.OHE_Backhaul_ETA_AM_PM);
   PARAMETER(PAR.OHE_Load_Haul_Type);
   PARAMETER(PAR.OHE_Backhaul_Carrier_Code);
   PARAMETER(PAR.OHE_Bookings_Confirmed);
   PARAMETER(PAR.OHE_EDI_Error_Reasons);
   PARAMETER(PAR.OHE_EDI_Error_Reasons_2);
   PARAMETER(PAR.HPB_COA_Batch_Number);
   PARAMETER(PAR.Delivery_P_O_Number);
   PARAMETER(PAR.OHE_Intended_for_ExportCC);
   PARAMETER(PAR.OHE_EDI_943_Action);
   PARAMETER(PAR.OHE_EDI_944_Action);
   PARAMETER(PAR.OHE_EDI_940_Action);
   PARAMETER(PAR.OHE_EDI_945_Action);
   PARAMETER(PAR.OHE_EDI_856_Action);
   PARAMETER(PAR.OHE_EDI_824_Action);
   PARAMETER(PAR.OHE_Transload_Seal_Nbr);
   PARAMETER(PAR.OHE_Abs_Rate_Override_Rsn);
   PARAMETER(PAR.OHE_Appt_Confirmation_#);
   PARAMETER(PAR.OHE_Backhaul_Container#);
   PARAMETER(PAR.OHE_Backhaul_Chassis_#);
   PARAMETER(PAR.OHE_Transload_Container#);
   PARAMETER(PAR.OHE_Pier_Pass_Invoice);
   PARAMETER(PAR.OHE_Carrier_Nm);
   PARAMETER(PAR.OHE_Appt_Confirmation_Nm);
   PARAMETER(PAR.OHE_Backhaul_Comment);
   PARAMETER(PAR.Letter_of_Credit_Number);
   PARAMETER(PAR.OHE_Backhaul_Return_to_Co);
   PARAMETER(PAR.LD_Stop_Drop);
   PARAMETER(PAR.OHE_Unused_Number_3_0);
   PARAMETER(PAR.OHE_Pier_Pass_Fee_Amount);
   PARAMETER(PAR.OHE_Port_Check_Fee_Amount);
   PARAMETER(PAR.OHE_Port_Cut_Time);
   PARAMETER(PAR.OHE_Backhaul_Truck_Number);
   PARAMETER(PAR.OHE_Load_Sched_Seq_Num);
   PARAMETER(PAR.Original_Appointment_Date);
   PARAMETER(PAR.Original_Appointment_Time);
   PARAMETER(PAR.OHE_PowerPro_Load#_Outbnd);
   PARAMETER(PAR.OHE_PowerPro_Load#_Bckhl);
   PARAMETER(PAR.OHE_Unused_Numeric_9_0_3);
   PARAMETER(PAR.OHE_Orig_ABS_Freight_Rate);
   PARAMETER(PAR.OHE_Genset_Number);
   PARAMETER(PAR.OHE_Email_BOL_Sent);
   PARAMETER(PAR.OHE_EDI_Order_Automated);
   PARAMETER(PAR.OHE_EDI_601_Action);
   PARAMETER(PAR.OHE_Unused_Status_4);
   PARAMETER(PAR.OHE_Unused_Text_1);
   PARAMETER(PAR.OHE_Unused_Text_2);
   PARAMETER(PAR.OHE_Customer_Vendor_f_PO);
   PARAMETER(PAR.OHE_EDI_824_AES_ITN_#);
   PARAMETER(PAR.OHE_Unused_Text_5);
   PARAMETER(PAR.OHE_Unused_Date_1);
   PARAMETER(PAR.OHE_Unused_Date_2);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    // DB1.Job Time = JOB.*Job time
    DB1.Job_Time = JOB.*Job_time;

    // DB1.Job Date = JOB.*Job date
    DB1.Job_Date = JOB.*Job_date;

    // DB1.Job Name = JOB.*PROGRAM
    DB1.Job_Name = JOB.*PROGRAM;

    // DB1.User Id = JOB.*USER
    DB1.User_Id = JOB.*USER;

   }

   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

   // DB1.Job Name = JOB.*PROGRAM
   DB1.Job_Name = JOB.*PROGRAM;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

  }

 }

}


EXECUTE FUNCTION(RTV Carrier, Load      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1366560;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Carrier_Code);
PARAMETER(PAR.Load_ID);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program CLC Price/Price Audit  XF.
CALL PROGRAM(CLC Price/Price Audit  XF) ('PDPRXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('SHP');
PARAMETER(PAR.Order_Value_Total);
PARAMETER(PAR.Order_Weight_Total);
PARAMETER(WRK.Production_Hold);
PARAMETER(*NO);

//?-----
//?08/12/11 PKD C1696 Update Order Header with new values
EXECUTE FUNCTION(RTV Chg ord tot/wgt    RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1662870;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Weight_Total);
PARAMETER(PAR.Order_Value_Total);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(CHG Ord Val/Wgt,Prt St CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1344136;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Order_Value_Total);
 PARAMETER(PAR.Order_Weight_Total);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program TRG Order Hdr CHG Trig XT.
  CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Ship_To_Name);
  PARAMETER(DB1.Ship_To_Address_Line_1);
  PARAMETER(DB1.Ship_To_Address_Line_2);
  PARAMETER(DB1.Ship_To_Address_Line_3);
  PARAMETER(DB1.Ship_To_City);
  PARAMETER(DB1.Ship_To_State_Code);
  PARAMETER(DB1.Ship_To_Zip_Postal_Code);
  PARAMETER(DB1.Bill_to_Customer);
  PARAMETER(DB1.Bill_to_Name);
  PARAMETER(DB1.Bill_to_Address_Line_1);
  PARAMETER(DB1.Bill_to_Address_Line_2);
  PARAMETER(DB1.Bill_to_Address_Line_3);
  PARAMETER(DB1.Bill_to_City);
  PARAMETER(DB1.Bill_to_State_Code);
  PARAMETER(DB1.Bill_to_Zip_Postal_Code);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Order_Date);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Cancel_Date);
  PARAMETER(DB1.Terms_Code);
  PARAMETER(DB1.Special_Instructions);
  PARAMETER(DB1.Special_Instructions_2);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Order_in_Use);
  PARAMETER(DB1.Header_Status);
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER(DB1.Order_Type_Print_Status);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.User_Original_Entry);
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.Order_Value_Total);
  PARAMETER(DB1.Order_Weight_Total);
  PARAMETER(DB1.Credit_Hold);
  PARAMETER(DB1.Production_Hold);
  PARAMETER(DB1.New_Customer_Hold);
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(DB1.Requested_Delivery_Time);
  PARAMETER(DB1.Accounts_Receiv_Ent_1);
  PARAMETER(DB1.Accounts_Receiv_Ent_2);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.LTL_Flag);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Shrink_Wrap);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Reefer_Temperature);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Attach_to_Invoice_Number);
  PARAMETER(DB1.Load_Plan_Order);
  PARAMETER(DB1.Print_Pick_Slip);
  PARAMETER(DB1.Resell_Reference_Number);
  PARAMETER(DB1.Special_Comment_1);
  PARAMETER(DB1.Special_Comment_2);
  PARAMETER(DB1.Affect_Auto_Accruals);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Manager_Level_Code);
  PARAMETER(DB1.VP_Level_Code);
  PARAMETER(DB1.Attach_to_Order_Number);
  PARAMETER(DB1.Reason_for_Price_Audit);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Invoice_Date);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Trans_Contol_AS400_Plant);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.A_R_order_Value_Total);
  PARAMETER(DB1.Billing_Activity_Type);
  PARAMETER(DB1.Block_Order_Flag);
  PARAMETER(DB1.Order_Certification_Flag);
  PARAMETER(DB1.Invoice_Order_Value_Tot);
  PARAMETER(DB1.Process_Sts_for_3C);
  PARAMETER(DB1.Order_Conf_Fax_Sts);
  PARAMETER(DB1.Manifest_Fax_Sts);
  PARAMETER(DB1.Invoice_Fax_Sts);
  PARAMETER(DB1.Transfer_in_Storage_Ind);
  PARAMETER(DB1.Email_Cust_On_Order_Ship);
  PARAMETER(DB1.Order_Emailed);
  PARAMETER(DB1.Export_Docs_Go_w_Driver);
  PARAMETER(DB1.Shipping_Temp_Code_C_F);
  PARAMETER(DB1.Broker_Order_Status);
  PARAMETER(DB1.Air_Freight_Order);
  PARAMETER(DB1.Order_Requires_Review);
  PARAMETER(DB1.OH_Load_Plan_Ready);
  PARAMETER(DB1.Export_USDA_Approved);
  PARAMETER(DB1.HPB_Ship_to_Warehouse);
  PARAMETER(DB1.OH_TF_Exempt_Code);
  PARAMETER(DB1.OH_Appt_Confirmation_Dt);
  PARAMETER(DB1.JPN_Invoice_Issuance_Date);
  PARAMETER(DB1.Load_Actual_Shipped_Date);
  PARAMETER(DB1.Load_BOL_Complete_Date);
  PARAMETER(DB1.Load_Truck_Departure_Date);
  PARAMETER(DB1.Maximum_Gross_Weight);
  PARAMETER(DB1.Time_of_Original_Entry);
  PARAMETER(DB1.OH_Appt_Confirmation_Tm);
  PARAMETER(DB1.Load_BOL_Complete_Time);
  PARAMETER(DB1.Load_Truck_Departure_Time);
  PARAMETER(DB1.Act_Frt_Reference_Amount);
  PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
  PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
  PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
  PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);

 }

}


//?-----
//?Update Carrier Last Used Date
CASE;

// IF PAR.Carrier Code NE WRK.BLANK
IF PAR.Carrier_Code <> WRK.BLANK;

EXECUTE FUNCTION(CHG Last Used Date     CH) TYPE(CHGOBJ) FILE(OMFFREP)          AC1360310;
PARAMETER(PAR.Carrier_Code);
PARAMETER(JOB.*Job_date);

ENDIF;

//?Update load total weight
CASE;

// IF PAR.Load ID NE WRK.ZERO
IF PAR.Load_ID <> WRK.ZERO;

// Call program RTV UPD Ld Abs.Frt/Wgt XF.
CALL PROGRAM(RTV UPD Ld Abs.Frt/Wgt XF) ('PDE0XFR');
PARAMETER(PAR.Load_ID);
PARAMETER(WRK.Total_Load_Order_Weight);
PARAMETER(WRK.Total_Freight);

ENDIF;

// Call program UPD Load w/ Ship Sts   XF.
CALL PROGRAM(UPD Load w/ Ship Sts   XF) ('PDZ4XFR');
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Company_Number);

EXECUTE FUNCTION(Cnf Order Ship/Unship IF) TYPE(EXCINTFUN)                      AC1514467;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER('S');
{
 //?Execute internal function

 EXECUTE FUNCTION(Cnf Order Ship/Unship RT) TYPE(RTVOBJ) FILE(PDL8CPP)           AC1513142;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.OIA_Allocation_Sts);
 {
  //?USER: Initialize routine

  // LCL.First Time Flag = CND.Yes
  LCL.First_Time_Flag = 'Y';

  //?USER: Process Data record

  // PAR.Quantity Loc Trans USR = CON.*ZERO
  PAR.Quantity_Loc_Trans_USR = *ZERO;

  // PAR.Weight Order 2 usr = CON.*ZERO
  PAR.Weight_Order_2_usr = *ZERO;

  //?1ST:  First time process
  CASE;

  // IF LCL.First Time Flag is Yes
  IF LCL.First_Time_Flag = 'Y';

  // PAR.Item Code = DB1.Item Code
  PAR.Item_Code = DB1.Item_Code;

  // PAR.Warehouse Code = DB1.Warehouse Code
  PAR.Warehouse_Code = DB1.Warehouse_Code;

  // PAR.Production Date = DB1.Production Date
  PAR.Production_Date = DB1.Production_Date;

  // PAR.Lot Number = DB1.Lot Number
  PAR.Lot_Number = DB1.Lot_Number;

  // PAR.Location Code = DB1.Location Code
  PAR.Location_Code = DB1.Location_Code;

  // PAR.Location Level = DB1.Location Level
  PAR.Location_Level = DB1.Location_Level;

  // LCL.First Time Flag = CND.NO
  LCL.First_Time_Flag = 'N';

  ENDIF;

  //?CHG: Item, Whs, PDte, Lot, Loc, Level
  CASE;

  // IF PAR.Item Code NE DB1.Item Code
  IF PAR.Item_Code <> DB1.Item_Code;

  // OR PAR.Warehouse Code NE DB1.Warehouse Code
  OR PAR.Warehouse_Code <> DB1.Warehouse_Code;

  // OR PAR.Production Date NE DB1.Production Date
  OR PAR.Production_Date <> DB1.Production_Date;

  // OR PAR.Lot Number NE DB1.Lot Number
  OR PAR.Lot_Number <> DB1.Lot_Number;

  // OR PAR.Location Code NE DB1.Location Code
  OR PAR.Location_Code <> DB1.Location_Code;

  // OR PAR.Location Level NE DB1.Location Level
  OR PAR.Location_Level <> DB1.Location_Level;

  CASE;

  // IF PAR.LLT Trans Qty is NE Zero
  IF PAR.LLT_Transaction_Qty <> *ZERO;

  EXECUTE FUNCTION(Crt Item Lot/Loc Trns IF) TYPE(EXCINTFUN)                      AC1510270;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER('S');
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.LLT_Transaction_Qty);
  PARAMETER(PAR.LLT_Transaction_Wgt);
  PARAMETER(PAR.Lot_Number);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.Location_Level);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(DB1.Order_Number);
  PARAMETER('P');
  PARAMETER(WRK.LTT_Unused_Sts_1);
  PARAMETER(WRK.LTT_Unused_Sts_2);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Next Seq #        RT) TYPE(RTVOBJ) FILE(PDL7CPP)           AC1510279;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.LLT_Transaction_Type);
   PARAMETER(PAR.LLT_Transaction_Date);
   PARAMETER(PAR.LLT_Sequence_Number);
   {
    //?USER: Processing if Data record not found

    // PAR.LLT Sequence # = CON.1
    PAR.LLT_Sequence_Number = 1;

    //?USER: Process Data record

    // PAR.LLT Sequence # = DB1.LLT Sequence # + CON.1
    PAR.LLT_Sequence_Number = DB1.LLT_Sequence_Number + 1;

    QUIT;

   }

   EXECUTE FUNCTION(Crt Item Lot/Loc Trns CR) TYPE(CRTOBJ) FILE(PDL7CPP)           AC1505285;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.LLT_Transaction_Type);
   PARAMETER(PAR.LLT_Transaction_Date);
   PARAMETER(PAR.LLT_Sequence_Number);
   PARAMETER(PAR.LLT_Production_Date);
   PARAMETER(PAR.LLT_Transaction_Qty);
   PARAMETER(PAR.LLT_Transaction_Wgt);
   PARAMETER(PAR.LLT_Lot_Number);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.LLT_Location_Level);
   PARAMETER(PAR.Transfer_Warehouse_Code);
   PARAMETER(PAR.LLT_Transfer_Lot_Number);
   PARAMETER(PAR.Transfer_Location_Code);
   PARAMETER(PAR.LLT_Transfer_Loc_Level);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.LLT_Status);
   PARAMETER(PAR.LTT_Unused_Sts_1);
   PARAMETER(PAR.LTT_Unused_Sts_2);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  EXECUTE FUNCTION(Upd Qty On-Hand,wgt   RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC2146712;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Lot_Number);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.Location_Level);
  PARAMETER(PAR.LLT_Transaction_Qty);
  PARAMETER(PAR.LLT_Transaction_Wgt);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Clc Loc Avail Shp Dte IF) TYPE(EXCINTFUN)                      AC1510130;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.ILL_Avail_Ship_Date);
   {
    //?Execute internal function

    EXECUTE FUNCTION(Rtv Loc Type          RT) TYPE(RTVOBJ) FILE(PDL2REP)           AC1510129;
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Location_Code);
    PARAMETER(PAR.WLT_Type_Code);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    EXECUTE FUNCTION(Rtv Chill Time        RT) TYPE(RTVOBJ) FILE(PDL3REP)           AC1510134;
    PARAMETER(PAR.WLT_Type_Code);
    PARAMETER(PAR.WLT_Type_Chill_Time);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    // PAR.ILL Avail Ship Date = PAR.Production Date + PAR.WLT Type Chill Time *DAYS
    PAR.ILL_Avail_Ship_Date = DATEINCR(PAR.Production_Date PAR.WLT_Type_Chill_Time 'DY'
    1111111 'NONE' 'N' 1);

   }

   EXECUTE FUNCTION(RTV Unit Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1298772;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.ILL_Unit_Weight);
   PARAMETER(LCL.Quality_Level);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Crt Item Loc          CR) TYPE(CRTOBJ) FILE(PDL5CPP)           AC1505603;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Lot_Number);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.Location_Level);
   PARAMETER(PAR.Quantity_Loc_Trans_USR);
   PARAMETER(PAR.ILL_Unit_Weight);
   PARAMETER(PAR.ILL_Co_Packer_Lot_Num);
   PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
   PARAMETER(PAR.ILL_Unused_Qty_3);
   PARAMETER(PAR.ILL_Unused_Wgt_3);
   PARAMETER(PAR.ILL_Avail_Ship_Date);
   PARAMETER(PAR.ILL_Unused_Date_1);
   PARAMETER(PAR.ILL_Unused_Date_2);
   PARAMETER(PAR.ILL_Unused_Nbr_1);
   PARAMETER(PAR.ILL_Customer_Code);
   PARAMETER('A');
   PARAMETER(PAR.ILL_Unused_Sts_1);
   PARAMETER(PAR.ILL_Unused_Sts_2);
   PARAMETER(PAR.ILL_Unused_Sts_3);
   PARAMETER(PAR.Inv_Hold_Reason_Code);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?USER: Process Data record

   // PAR.ILL Item Qty On-Hand = DB1.ILL Item Qty On-Hand + PAR.Quantity Loc Trans USR
   PAR.ILL_Item_Qty_On_Hand = DB1.ILL_Item_Qty_On_Hand + PAR.Quantity_Loc_Trans_USR;

   // PAR.ILl Item Wgt On-Hand = DB1.ILl Item Wgt On-Hand + PAR.Weight Order 2 usr
   PAR.ILL_Item_Wgt_On_Hand = DB1.ILL_Item_Wgt_On_Hand + PAR.Weight_Order_2_usr;

   CASE;

   // IF PAR.ILL Item Qty On-Hand is GT Zero
   IF PAR.ILL_Item_Qty_On_Hand > *ZERO;

   EXECUTE FUNCTION(Chg Quantity On-Hn,wg CH) TYPE(CHGOBJ) FILE(PDL5CPP)           AC2146713;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Lot_Number);
   PARAMETER(DB1.Location_Code);
   PARAMETER(DB1.Location_Level);
   PARAMETER(PAR.ILL_Item_Qty_On_Hand);
   PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Del Item Location     DL) TYPE(DLTOBJ) FILE(PDL5CPP)           AC1517026;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Lot_Number);
   PARAMETER(DB1.Location_Code);
   PARAMETER(DB1.Location_Level);
   EXECUTE FUNCTION(Del Item Balance Dtl  RT) TYPE(RTVOBJ) FILE(CAB1REP)           AC1544110;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Production_Date);
   {
    //?USER: Process Data record

    CASE;

    // IF DB1.Quantity on Hand - U/M1 is Equal to zero
    IF DB1.Quantity_on_Hand_UOM1 = *ZERO;

    EXECUTE FUNCTION(Del Item Balance Dtl  DL) TYPE(DLTOBJ) FILE(CAB1REP)           AC1544111;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Production_Date);
    ENDIF;

   }

   ENDIF;

  }

  ENDIF;

  // PAR.Item Code = DB1.Item Code
  PAR.Item_Code = DB1.Item_Code;

  // PAR.Warehouse Code = DB1.Warehouse Code
  PAR.Warehouse_Code = DB1.Warehouse_Code;

  // PAR.Production Date = DB1.Production Date
  PAR.Production_Date = DB1.Production_Date;

  // PAR.Lot Number = DB1.Lot Number
  PAR.Lot_Number = DB1.Lot_Number;

  // PAR.Location Code = DB1.Location Code
  PAR.Location_Code = DB1.Location_Code;

  // PAR.Location Level = DB1.Location Level
  PAR.Location_Level = DB1.Location_Level;

  // PAR.LLT Trans Qty = CON.*ZERO
  PAR.LLT_Transaction_Qty = *ZERO;

  // PAR.LLT Trans Wgt = CON.*ZERO
  PAR.LLT_Transaction_Wgt = *ZERO;

  ENDIF;

  //?PRC:  Accumulate Quantity
  CASE;

  // IF PAR.OIA Allocation Sts is Shipped
  IF PAR.OIA_Allocation_Sts = 'S';

  // PAR.Quantity Loc Trans USR = DB1.OIA Alloc/Shipped Qty * CON.-1 *
  PAR.Quantity_Loc_Trans_USR = DB1.OIA_Alloc_Shipped_Qty * -1;

  // PAR.LLT Trans Qty = PAR.LLT Trans Qty + PAR.Quantity Loc Trans USR
  PAR.LLT_Transaction_Qty = PAR.LLT_Transaction_Qty + PAR.Quantity_Loc_Trans_USR;

  //?RMC 1/9/17 reduce weight too
  // PAR.Weight Order 2 usr = DB1.OIA Alloc/Shipped Wgt * CON.-1 *
  PAR.Weight_Order_2_usr = DB1.OIA_Alloc_Shipped_Wgt * -1;

  // PAR.LLT Trans Wgt = PAR.LLT Trans Wgt + PAR.Weight Order 2 usr
  PAR.LLT_Transaction_Wgt = PAR.LLT_Transaction_Wgt + PAR.Weight_Order_2_usr;

  EXECUTE FUNCTION(Chg Allocation Sts    CH) TYPE(CHGOBJ) FILE(PDL8CPP)           AC1513143;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Allocation_Seq_#);
  PARAMETER(PAR.OIA_Allocation_Sts);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?PRC:  Accumulate Quantity
  // IF PAR.OIA Allocation Sts is Unshipped
  IF PAR.OIA_Allocation_Sts = 'U';

  // PAR.LLT Trans Qty = PAR.LLT Trans Qty + DB1.OIA Alloc/Shipped Qty
  PAR.LLT_Transaction_Qty = PAR.LLT_Transaction_Qty + DB1.OIA_Alloc_Shipped_Qty;

  //?RMC 1/9/17 increase weight too
  // PAR.LLT Trans Wgt = PAR.LLT Trans Wgt + DB1.OIA Alloc/Shipped Wgt
  PAR.LLT_Transaction_Wgt = PAR.LLT_Transaction_Wgt + DB1.OIA_Alloc_Shipped_Wgt;

  EXECUTE FUNCTION(Chg Allocation Sts    CH) TYPE(CHGOBJ) FILE(PDL8CPP)           AC1513143;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Allocation_Seq_#);
  PARAMETER(PAR.OIA_Allocation_Sts);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

  //?USER: Exit processing

  //?Do if qty> 0    ----RMC 2/15/06
  CASE;

  // IF PAR.LLT Trans Qty is NE Zero
  IF PAR.LLT_Transaction_Qty <> *ZERO;

  EXECUTE FUNCTION(Crt Item Lot/Loc Trns IF) TYPE(EXCINTFUN)                      AC1510270;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER('S');
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.LLT_Transaction_Qty);
  PARAMETER(PAR.LLT_Transaction_Wgt);
  PARAMETER(PAR.Lot_Number);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.Location_Level);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(DB1.Order_Number);
  PARAMETER('P');
  PARAMETER(WRK.LTT_Unused_Sts_1);
  PARAMETER(WRK.LTT_Unused_Sts_2);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Next Seq #        RT) TYPE(RTVOBJ) FILE(PDL7CPP)           AC1510279;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.LLT_Transaction_Type);
   PARAMETER(PAR.LLT_Transaction_Date);
   PARAMETER(PAR.LLT_Sequence_Number);
   {
    //?USER: Processing if Data record not found

    // PAR.LLT Sequence # = CON.1
    PAR.LLT_Sequence_Number = 1;

    //?USER: Process Data record

    // PAR.LLT Sequence # = DB1.LLT Sequence # + CON.1
    PAR.LLT_Sequence_Number = DB1.LLT_Sequence_Number + 1;

    QUIT;

   }

   EXECUTE FUNCTION(Crt Item Lot/Loc Trns CR) TYPE(CRTOBJ) FILE(PDL7CPP)           AC1505285;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.LLT_Transaction_Type);
   PARAMETER(PAR.LLT_Transaction_Date);
   PARAMETER(PAR.LLT_Sequence_Number);
   PARAMETER(PAR.LLT_Production_Date);
   PARAMETER(PAR.LLT_Transaction_Qty);
   PARAMETER(PAR.LLT_Transaction_Wgt);
   PARAMETER(PAR.LLT_Lot_Number);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.LLT_Location_Level);
   PARAMETER(PAR.Transfer_Warehouse_Code);
   PARAMETER(PAR.LLT_Transfer_Lot_Number);
   PARAMETER(PAR.Transfer_Location_Code);
   PARAMETER(PAR.LLT_Transfer_Loc_Level);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.LLT_Status);
   PARAMETER(PAR.LTT_Unused_Sts_1);
   PARAMETER(PAR.LTT_Unused_Sts_2);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  EXECUTE FUNCTION(Upd Qty On-Hand,wgt   RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC2146712;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Lot_Number);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.Location_Level);
  PARAMETER(PAR.LLT_Transaction_Qty);
  PARAMETER(PAR.LLT_Transaction_Wgt);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Clc Loc Avail Shp Dte IF) TYPE(EXCINTFUN)                      AC1510130;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.ILL_Avail_Ship_Date);
   {
    //?Execute internal function

    EXECUTE FUNCTION(Rtv Loc Type          RT) TYPE(RTVOBJ) FILE(PDL2REP)           AC1510129;
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Location_Code);
    PARAMETER(PAR.WLT_Type_Code);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    EXECUTE FUNCTION(Rtv Chill Time        RT) TYPE(RTVOBJ) FILE(PDL3REP)           AC1510134;
    PARAMETER(PAR.WLT_Type_Code);
    PARAMETER(PAR.WLT_Type_Chill_Time);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    // PAR.ILL Avail Ship Date = PAR.Production Date + PAR.WLT Type Chill Time *DAYS
    PAR.ILL_Avail_Ship_Date = DATEINCR(PAR.Production_Date PAR.WLT_Type_Chill_Time 'DY'
    1111111 'NONE' 'N' 1);

   }

   EXECUTE FUNCTION(RTV Unit Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1298772;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.ILL_Unit_Weight);
   PARAMETER(LCL.Quality_Level);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Crt Item Loc          CR) TYPE(CRTOBJ) FILE(PDL5CPP)           AC1505603;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Lot_Number);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.Location_Level);
   PARAMETER(PAR.Quantity_Loc_Trans_USR);
   PARAMETER(PAR.ILL_Unit_Weight);
   PARAMETER(PAR.ILL_Co_Packer_Lot_Num);
   PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
   PARAMETER(PAR.ILL_Unused_Qty_3);
   PARAMETER(PAR.ILL_Unused_Wgt_3);
   PARAMETER(PAR.ILL_Avail_Ship_Date);
   PARAMETER(PAR.ILL_Unused_Date_1);
   PARAMETER(PAR.ILL_Unused_Date_2);
   PARAMETER(PAR.ILL_Unused_Nbr_1);
   PARAMETER(PAR.ILL_Customer_Code);
   PARAMETER('A');
   PARAMETER(PAR.ILL_Unused_Sts_1);
   PARAMETER(PAR.ILL_Unused_Sts_2);
   PARAMETER(PAR.ILL_Unused_Sts_3);
   PARAMETER(PAR.Inv_Hold_Reason_Code);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?USER: Process Data record

   // PAR.ILL Item Qty On-Hand = DB1.ILL Item Qty On-Hand + PAR.Quantity Loc Trans USR
   PAR.ILL_Item_Qty_On_Hand = DB1.ILL_Item_Qty_On_Hand + PAR.Quantity_Loc_Trans_USR;

   // PAR.ILl Item Wgt On-Hand = DB1.ILl Item Wgt On-Hand + PAR.Weight Order 2 usr
   PAR.ILL_Item_Wgt_On_Hand = DB1.ILL_Item_Wgt_On_Hand + PAR.Weight_Order_2_usr;

   CASE;

   // IF PAR.ILL Item Qty On-Hand is GT Zero
   IF PAR.ILL_Item_Qty_On_Hand > *ZERO;

   EXECUTE FUNCTION(Chg Quantity On-Hn,wg CH) TYPE(CHGOBJ) FILE(PDL5CPP)           AC2146713;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Lot_Number);
   PARAMETER(DB1.Location_Code);
   PARAMETER(DB1.Location_Level);
   PARAMETER(PAR.ILL_Item_Qty_On_Hand);
   PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Del Item Location     DL) TYPE(DLTOBJ) FILE(PDL5CPP)           AC1517026;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Lot_Number);
   PARAMETER(DB1.Location_Code);
   PARAMETER(DB1.Location_Level);
   EXECUTE FUNCTION(Del Item Balance Dtl  RT) TYPE(RTVOBJ) FILE(CAB1REP)           AC1544110;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Production_Date);
   {
    //?USER: Process Data record

    CASE;

    // IF DB1.Quantity on Hand - U/M1 is Equal to zero
    IF DB1.Quantity_on_Hand_UOM1 = *ZERO;

    EXECUTE FUNCTION(Del Item Balance Dtl  DL) TYPE(DLTOBJ) FILE(CAB1REP)           AC1544111;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Production_Date);
    ENDIF;

   }

   ENDIF;

  }

  ENDIF;

 }

}


//?WI609_2 JM 10/08/24-EDI 856 Advance Shipping Notice Processing.
CASE;

// IF PAR.Called From Program is Exc Upd EDI 945 Trsn   XF
IF PAR.Called_From_Program = 'PUEJXFR';

// AND NOT PAR.SSCC Pallet ID Valid USR is No
AND ! PAR.SSCC_Pallet_ID_Valid_USR = 'N';

// Call program Exc Crt EDI 856 ASN V2 XF.
CALL PROGRAM(Exc Crt EDI 856 ASN V2 XF) ('PUOIXFR');
PARAMETER(PAR.Load_ID);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('N');

ENDIF;

//?T11041 DN 07/12/17-Build EDI WHS Stock Txfr Files for Order Shipped.
CASE;

// IF PAR.Billing Activity Type is Warehouse Transfer
IF PAR.Billing_Activity_Type = '4';

// Call program Upd EDI WHS Stock Txfr XF.
CALL PROGRAM(Upd EDI WHS Stock Txfr XF) ('PUC5XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER('N');

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Chg Head Status    RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1314168;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(CHG Head Status/Event  CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1314174;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER('A');
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Modified_Flag);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program TRG Order Hdr CHG Trig XT.
  CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Ship_To_Name);
  PARAMETER(DB1.Ship_To_Address_Line_1);
  PARAMETER(DB1.Ship_To_Address_Line_2);
  PARAMETER(DB1.Ship_To_Address_Line_3);
  PARAMETER(DB1.Ship_To_City);
  PARAMETER(DB1.Ship_To_State_Code);
  PARAMETER(DB1.Ship_To_Zip_Postal_Code);
  PARAMETER(DB1.Bill_to_Customer);
  PARAMETER(DB1.Bill_to_Name);
  PARAMETER(DB1.Bill_to_Address_Line_1);
  PARAMETER(DB1.Bill_to_Address_Line_2);
  PARAMETER(DB1.Bill_to_Address_Line_3);
  PARAMETER(DB1.Bill_to_City);
  PARAMETER(DB1.Bill_to_State_Code);
  PARAMETER(DB1.Bill_to_Zip_Postal_Code);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Order_Date);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Cancel_Date);
  PARAMETER(DB1.Terms_Code);
  PARAMETER(DB1.Special_Instructions);
  PARAMETER(DB1.Special_Instructions_2);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Order_in_Use);
  PARAMETER(DB1.Header_Status);
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER(DB1.Order_Type_Print_Status);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.User_Original_Entry);
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.Order_Value_Total);
  PARAMETER(DB1.Order_Weight_Total);
  PARAMETER(DB1.Credit_Hold);
  PARAMETER(DB1.Production_Hold);
  PARAMETER(DB1.New_Customer_Hold);
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(DB1.Requested_Delivery_Time);
  PARAMETER(DB1.Accounts_Receiv_Ent_1);
  PARAMETER(DB1.Accounts_Receiv_Ent_2);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.LTL_Flag);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Shrink_Wrap);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Reefer_Temperature);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Attach_to_Invoice_Number);
  PARAMETER(DB1.Load_Plan_Order);
  PARAMETER(DB1.Print_Pick_Slip);
  PARAMETER(DB1.Resell_Reference_Number);
  PARAMETER(DB1.Special_Comment_1);
  PARAMETER(DB1.Special_Comment_2);
  PARAMETER(DB1.Affect_Auto_Accruals);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Manager_Level_Code);
  PARAMETER(DB1.VP_Level_Code);
  PARAMETER(DB1.Attach_to_Order_Number);
  PARAMETER(DB1.Reason_for_Price_Audit);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Invoice_Date);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Trans_Contol_AS400_Plant);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.A_R_order_Value_Total);
  PARAMETER(DB1.Billing_Activity_Type);
  PARAMETER(DB1.Block_Order_Flag);
  PARAMETER(DB1.Order_Certification_Flag);
  PARAMETER(DB1.Invoice_Order_Value_Tot);
  PARAMETER(DB1.Process_Sts_for_3C);
  PARAMETER(DB1.Order_Conf_Fax_Sts);
  PARAMETER(DB1.Manifest_Fax_Sts);
  PARAMETER(DB1.Invoice_Fax_Sts);
  PARAMETER(DB1.Transfer_in_Storage_Ind);
  PARAMETER(DB1.Email_Cust_On_Order_Ship);
  PARAMETER(DB1.Order_Emailed);
  PARAMETER(DB1.Export_Docs_Go_w_Driver);
  PARAMETER(DB1.Shipping_Temp_Code_C_F);
  PARAMETER(DB1.Broker_Order_Status);
  PARAMETER(DB1.Air_Freight_Order);
  PARAMETER(DB1.Order_Requires_Review);
  PARAMETER(DB1.OH_Load_Plan_Ready);
  PARAMETER(DB1.Export_USDA_Approved);
  PARAMETER(DB1.HPB_Ship_to_Warehouse);
  PARAMETER(DB1.OH_TF_Exempt_Code);
  PARAMETER(DB1.OH_Appt_Confirmation_Dt);
  PARAMETER(DB1.JPN_Invoice_Issuance_Date);
  PARAMETER(DB1.Load_Actual_Shipped_Date);
  PARAMETER(DB1.Load_BOL_Complete_Date);
  PARAMETER(DB1.Load_Truck_Departure_Date);
  PARAMETER(DB1.Maximum_Gross_Weight);
  PARAMETER(DB1.Time_of_Original_Entry);
  PARAMETER(DB1.OH_Appt_Confirmation_Tm);
  PARAMETER(DB1.Load_BOL_Complete_Time);
  PARAMETER(DB1.Load_Truck_Departure_Time);
  PARAMETER(DB1.Act_Frt_Reference_Amount);
  PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
  PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
  PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
  PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute command - 'Send ShipPost Ord Sts Err'
 EXECUTE COMMAND(USR2557);
 PARAMETER(DB1.Order_Number);

 ENDIF;

}


ENDIF;

