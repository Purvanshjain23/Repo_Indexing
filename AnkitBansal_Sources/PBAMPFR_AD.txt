// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBAMPFR
// ?Date: 14.08.2025 Time: 12:03:18
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('I/C');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// PAR.USR Display 1 = CND.No
PAR.USR_Display_1 = 'N';

// LCL.Job Date Usr = JOB.*Job date
LCL.Job_Date_Usr = JOB.*Job_date;

// LCL.Ageing Days Usr = PAR.Ageing Days Usr * CON.-1 *
LCL.Ageing_Days_Usr = PAR.Ageing_Days_Usr * -1;

//?USER: Record selection processing

EXECUTE FUNCTION(Rtv ItmTyp/ItmLv/QltLv RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1327678;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(WRK.Quality_Level);
PARAMETER(WRK.Item_Level);
PARAMETER(WRK.Item_Type_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Select item type code if entered
CASE;

// IF PAR.Item Type Code is Blank
IF PAR.Item_Type_Code = *BLANK;

//?Select item type code if entered
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Item Type Code NE WRK.Item Type Code
IF PAR.Item_Type_Code <> WRK.Item_Type_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select item level if entered
CASE;

// IF PAR.Item Level is Entered
IF PAR.Item_Level <> *BLANK;

CASE;

// IF PAR.Item Level NE WRK.Item Level
IF PAR.Item_Level <> WRK.Item_Level;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select quality level if entered
CASE;

// IF PAR.Quality Level is Entered
IF PAR.Quality_Level <> *BLANK;

CASE;

// IF PAR.Quality Level NE WRK.Quality Level
IF PAR.Quality_Level <> WRK.Quality_Level;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Sel Avail Group
CASE;

// IF PAR.Availability Group Code is NE Blank
IF PAR.Availability_Group_Code <> *BLANK;

EXECUTE FUNCTION(Val Existance         RT) TYPE(RTVOBJ) FILE(PDKLREP)           AC1390296;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(PAR.Availability_Group_Code);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: On print of first page format

// 1PG.Company Number = PAR.Company Number
X1PG_Company_Number = PAR.Company_Number;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Warehouse Code = PAR.Warehouse Code
X1PG_Warehouse_Code = PAR.Warehouse_Code;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(X1PG_Warehouse_Code);
PARAMETER(X1PG_Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


// 1PG.Item Code = PAR.Item Code
X1PG_Item_Code = PAR.Item_Code;

//?If company is selected, rtv co/item else rtv item
CASE;

// IF PAR.Accounting Company Number is not equal to zero
IF PAR.Company_Number <> *ZERO;

EXECUTE FUNCTION(Rtv Descriptions      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1140665;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Item_Code);
PARAMETER(X1PG_Item_Description);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(WRK.UOM_Primary);
PARAMETER(WRK.UOM_Second);
PARAMETER(WRK.UOM_Third);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If company is selected, rtv co/item else rtv item
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
PARAMETER(X1PG_Item_Code);
PARAMETER(X1PG_Item_Description);
PARAMETER(WRK.Description_Line_Two);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// 1PG.Item Structure Type Code = PAR.Item Structure Type Code
X1PG_Item_Structure_Type_Code = PAR.Item_Structure_Type_Code;

EXECUTE FUNCTION(RTV  Description       RT) TYPE(RTVOBJ) FILE(OME8REP)          AC1219219;
PARAMETER(X1PG_Item_Structure_Type_Code);
PARAMETER(X1PG_Item_Structure_Type_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Item Structure Group Code = PAR.Item Structure Group Code
X1PG_Item_Structure_Group_Code = PAR.Item_Structure_Group_Code;

EXECUTE FUNCTION(Rtv Group Description  RT) TYPE(RTVOBJ) FILE(OME9REP)          AC1202656;
PARAMETER(X1PG_Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(X1PG_Item_Structure_Group_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Item Structure Class Code = PAR.Item Structure Class Code
X1PG_Item_Structure_Class_Code = PAR.Item_Structure_Class_Code;

EXECUTE FUNCTION(Rtv Item Class Desc    RT) TYPE(RTVOBJ) FILE(OMFAREP)          AC1205440;
PARAMETER(X1PG_Item_Structure_Class_Code);
PARAMETER(X1PG_Item_Structure_Class_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Item Type Code = PAR.Item Type Code
X1PG_Item_Type_Code = PAR.Item_Type_Code;

// 1PG.Condition Desc. 1  USR = Condition name of 1PG.Item Type Code
X1PG_Condition_Desc_1_USR = RTVCND(X1PG_Item_Type_Code);

// 1PG.Prt Non-Zero Qty Only USR = PAR.Prt Non-Zero Qty Only USR
1PG.Prt Non-Zero Qty Only USR = PAR.Prt_Non_Zero_Qty_Only_USR;

// 1PG.Condition Desc. 2  USR = Condition name of 1PG.Prt Non-Zero Qty Only USR
X1PG_Condition_Desc_2_USR = RTVCND(X1PG_Prt_Non_Zero_Qty_Only_USR);

// 1PG.Item Level = PAR.Item Level
X1PG_Item_Level = PAR.Item_Level;

EXECUTE FUNCTION(RTV Item Level Descr   RT) TYPE(RTVOBJ) FILE(PDILREP)          AC1287285;
PARAMETER(X1PG_Item_Level);
PARAMETER(X1PG_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Quality Level = PAR.Quality Level
X1PG_Quality_Level = PAR.Quality_Level;

EXECUTE FUNCTION(Rtv Quality Level Desc RT) TYPE(RTVOBJ) FILE(CAAIREP)          AC1124632;
PARAMETER(X1PG_Quality_Level);
PARAMETER(X1PG_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Include Todays Trans = PAR.Include Todays Trans
X1PG_Include_Todays_Trans = PAR.Include_Todays_Trans;

// 1PG.Condition Desc. 3  USR = Condition name of 1PG.Include Todays Trans
X1PG_Condition_Desc_3_USR = RTVCND(X1PG_Include_Todays_Trans);

// 1PG.Ageing Days Usr = PAR.Ageing Days Usr
X1PG_Ageing_Days_Usr = PAR.Ageing_Days_Usr;

// 1PG.Availability Group Code = PAR.Availability Group Code
X1PG_Availability_Group_Code = PAR.Availability_Group_Code;

EXECUTE FUNCTION(RTV Group Description  RT) TYPE(RTVOBJ) FILE(PDKKREP)          AC1380777;
PARAMETER(X1PG_Availability_Group_Code);
PARAMETER(X1PG_Availability_Group_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// PAR.USR Display 1 = CND.Yes
PAR.USR_Display_1 = 'Y';

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
EXECUTE FUNCTION(Rtv Lot Tracking Flag RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1506123;
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Lot_Tracking_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?05/26/20 DN S16592-Added Co 440 COPACK.
//?Aged Inventory-CoPack  or Aged Inventory **Condition**
CASE;

// IF PAR.Lot Tracking Flag is yes
IF PAR.Lot_Tracking_Flag = 'Y';

// AND PAR.Item Structure Type Code is EQ 900
AND PAR.Item_Structure_Type_Code = 900;

// OR PAR.Warehouse Code is Guymon Fresh
OR PAR.Warehouse_Code = 'GP1';

// AND PAR.Item Structure Type Code is EQ 900
AND PAR.Item_Structure_Type_Code = 900;

// OR PAR.Warehouse Code is Seaboard Triumph - Fresh
OR PAR.Warehouse_Code = 'ST1';

// AND PAR.Item Structure Type Code is COPACK
AND PAR.Item_Structure_Type_Code = 900;

// LCL.PA or Aged Inv Usage USR = CND.Aged Inventory-CoPack
LCL.PA_or_Aged_Inv_Usage_USR = 'C';

//?Aged Inventory-CoPack  or Aged Inventory **Condition**
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.PA or Aged Inv Usage USR = CND.Aged Inventory
LCL.PA_or_Aged_Inv_Usage_USR = 'A';

ENDIF;

// CUR.Date To               USR = LCL.Job Date Usr
CUR.Date_To_USR = LCL.Job_Date_Usr;

//?Go Back from current date to start aging rpt
// PAR.USR Day 1 = LCL.Job Date Usr
PAR.USR_Day_1 = LCL.Job_Date_Usr;

// PAR.USR Day 1 = PAR.USR Day 1 + LCL.Ageing Days Usr *DAYS
PAR.USR_Day_1 = DATEINCR(PAR.USR_Day_1 LCL.Ageing_Days_Usr 'DY' 1111111 'NONE' 'N' 1);

//?Set to -1 now ....
// WRK.Ageing Days Usr = CON.-1
WRK.Ageing_Days_Usr = -1;

// PAR.USR Day 2 = PAR.USR Day 1 + WRK.Ageing Days Usr *DAYS
PAR.USR_Day_2 = DATEINCR(PAR.USR_Day_1 WRK.Ageing_Days_Usr 'DY' 1111111 'NONE' 'N' 1);

// PAR.USR Day 3 = PAR.USR Day 2 + WRK.Ageing Days Usr *DAYS
PAR.USR_Day_3 = DATEINCR(PAR.USR_Day_2 WRK.Ageing_Days_Usr 'DY' 1111111 'NONE' 'N' 1);

// PAR.USR Day 4 = PAR.USR Day 3 + WRK.Ageing Days Usr *DAYS
PAR.USR_Day_4 = DATEINCR(PAR.USR_Day_3 WRK.Ageing_Days_Usr 'DY' 1111111 'NONE' 'N' 1);

// PAR.USR Day 5 = PAR.USR Day 4 + WRK.Ageing Days Usr *DAYS
PAR.USR_Day_5 = DATEINCR(PAR.USR_Day_4 WRK.Ageing_Days_Usr 'DY' 1111111 'NONE' 'N' 1);

// PAR.USR Day 6 = PAR.USR Day 5 + WRK.Ageing Days Usr *DAYS
PAR.USR_Day_6 = DATEINCR(PAR.USR_Day_5 WRK.Ageing_Days_Usr 'DY' 1111111 'NONE' 'N' 1);

// PAR.USR Day 7 = PAR.USR Day 6 + WRK.Ageing Days Usr *DAYS
PAR.USR_Day_7 = DATEINCR(PAR.USR_Day_6 WRK.Ageing_Days_Usr 'DY' 1111111 'NONE' 'N' 1);

// PAR.USR Day 8 = PAR.USR Day 7 + CON.-1 *DAYS
PAR.USR_Day_8 = DATEINCR(PAR.USR_Day_7 '-1' 'DY' 1111111 'NONE' 'N' 1);

// CUR.USR Day 1 = PAR.USR Day 1
CUR.USR_Day_1 = PAR.USR_Day_1;

// CUR.USR Day 2 = PAR.USR Day 2
CUR.USR_Day_2 = PAR.USR_Day_2;

// CUR.USR Day 3 = PAR.USR Day 3
CUR.USR_Day_3 = PAR.USR_Day_3;

// CUR.USR Day 4 = PAR.USR Day 4
CUR.USR_Day_4 = PAR.USR_Day_4;

// CUR.USR Day 5 = PAR.USR Day 5
CUR.USR_Day_5 = PAR.USR_Day_5;

// CUR.USR Day 6 = PAR.USR Day 6
CUR.USR_Day_6 = PAR.USR_Day_6;

// CUR.USR Day 7 = PAR.USR Day 7
CUR.USR_Day_7 = PAR.USR_Day_7;

// CUR.USR Day 8 = PAR.USR Day 8
CUR.USR_Day_8 = PAR.USR_Day_8;

//?set to 1 always  so use wrk. instead of lcl.
// WRK.Ageing Days Usr = CON.1
WRK.Ageing_Days_Usr = 1;

// LCL.Age Heading 1Beg Usr = CON.001
LCL.Age_Heading_1Beg_Usr = 001;

// LCL.Age Heading 1End Usr = WRK.Ageing Days Usr
LCL.Age_Heading_1End_Usr = WRK.Ageing_Days_Usr;

// LCL.Age Heading 2Beg Usr = LCL.Age Heading 1End Usr + CON.1
LCL.Age_Heading_2Beg_Usr = LCL.Age_Heading_1End_Usr + 1;

// LCL.Age Heading 2End Usr = WRK.Ageing Days Usr * CON.2 *
LCL.Age_Heading_2End_Usr = WRK.Ageing_Days_Usr * 2;

// LCL.Age Heading 3Beg Usr = LCL.Age Heading 2End Usr + CON.1
LCL.Age_Heading_3Beg_Usr = LCL.Age_Heading_2End_Usr + 1;

// LCL.Age Heading 3End Usr = WRK.Ageing Days Usr * CON.3 *
LCL.Age_Heading_3End_Usr = WRK.Ageing_Days_Usr * 3;

// LCL.Age Heading 4Beg Usr = LCL.Age Heading 3End Usr + CON.1
LCL.Age_Heading_4Beg_Usr = LCL.Age_Heading_3End_Usr + 1;

// LCL.Age Heading 4End Usr = WRK.Ageing Days Usr * CON.4 *
LCL.Age_Heading_4End_Usr = WRK.Ageing_Days_Usr * 4;

// LCL.Age Heading 5Beg Usr = LCL.Age Heading 4End Usr + CON.1
LCL.Age_Heading_5Beg_Usr = LCL.Age_Heading_4End_Usr + 1;

// LCL.Age Heading 5End Usr = WRK.Ageing Days Usr * CON.5 *
LCL.Age_Heading_5End_Usr = WRK.Ageing_Days_Usr * 5;

// LCL.Age Heading 6Beg Usr = LCL.Age Heading 5End Usr + CON.1
LCL.Age_Heading_6Beg_Usr = LCL.Age_Heading_5End_Usr + 1;

// LCL.Age Heading 6End Usr = WRK.Ageing Days Usr * CON.6 *
LCL.Age_Heading_6End_Usr = WRK.Ageing_Days_Usr * 6;

// LCL.Age Heading 7Beg Usr = LCL.Age Heading 6End Usr + CON.1
LCL.Age_Heading_7Beg_Usr = LCL.Age_Heading_6End_Usr + 1;

// LCL.Age Heading 7End Usr = WRK.Ageing Days Usr * CON.7 *
LCL.Age_Heading_7End_Usr = WRK.Ageing_Days_Usr * 7;

// LCL.Age Heading 8Beg Usr = LCL.Age Heading 7End Usr + CON.1
LCL.Age_Heading_8Beg_Usr = LCL.Age_Heading_7End_Usr + 1;

CASE;

// IF PAR.Ageing Days Usr is Only 1 day
IF PAR.Ageing_Days_Usr = 00001;

// CUR.Age Heading 1 USR = CON.   0
CUR.Age_Heading_1_USR = 0;

// CUR.Age Heading 2 USR = CON.   1
CUR.Age_Heading_2_USR = 1;

// CUR.Age Heading 3 USR = CON.   2
CUR.Age_Heading_3_USR = 2;

// CUR.Age Heading 4 USR = CON.   3
CUR.Age_Heading_4_USR = 3;

// CUR.Age Heading 5 USR = CON.   4
CUR.Age_Heading_5_USR = 4;

// CUR.Age Heading 6 USR = CON.   5
CUR.Age_Heading_6_USR = 5;

// CUR.Age Heading 7 USR = CON.   6
CUR.Age_Heading_7_USR = 6;

// CUR.Age Heading 8 USR = CON.   7
CUR.Age_Heading_8_USR = 7;

// IF *OTHERWISE
IF *OTHERWISE;

//?LEAVE TOP HEADING BLANK
ENDIF;

// Print Company Number - 3 header format
PRINT Company Number - 3 header format;

ENDIF;

// SUPPRESSED PRINT Item Code header format

//?USER: On print of detail format

EXECUTE FUNCTION(Rtv Lot Tracking Flag RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1506123;
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Lot_Tracking_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Item Desc DRV) TYPE(DRVFLD)                                    AC1505592;
PARAMETER(CUR.Item_Desc_DRV);
PARAMETER(CUR.Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Desc_DRV);
 PARAMETER(WRK.Description_Line_Two);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?New: get allocated inv - not yet shipped/invoiced
EXECUTE FUNCTION(Rtv Inv Allocated-Rng RT) TYPE(RTVOBJ) FILE(POB5CPP)           AC2029100;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(PAR.USR_Day_1);
PARAMETER(PAR.USR_Day_2);
PARAMETER(PAR.USR_Day_3);
PARAMETER(PAR.USR_Day_4);
PARAMETER(PAR.USR_Day_5);
PARAMETER(PAR.USR_Day_6);
PARAMETER(PAR.USR_Day_7);
PARAMETER(PAR.USR_Day_8);
PARAMETER(LCL.Day_1_Sales_50_USR);
PARAMETER(LCL.Day_2_Sales_50_USR);
PARAMETER(LCL.Day_3_Sales_50_USR);
PARAMETER(LCL.Day_4_Sales_50_USR);
PARAMETER(LCL.Day_5_Sales_50_USR);
PARAMETER(LCL.Day_6_Sales_50_USR);
PARAMETER(LCL.Day_7_Sales_50_USR);
PARAMETER(LCL.Day_8_Sales_50_USR);
PARAMETER(LCL.Fresh_Chilling_Time);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?DOC: 04/11/07 Change Log
 DO;

 //?04/10/07 Effective 04/23/07 representation of Age Code changes
 //?         will be such that Age Code A will be 0 day for boxes
 //?         and combos.  The labels on the cartons will not print
 //?         a date that is offset by Sunday or Holiday.  Instead of
 //?         Code Date, it will be the Pack Date.
 ENDDO;

 //?04/11/07 PKD Chilled and Non-Chilled are aged the same.
 EXECUTE FUNCTION(RTV Order Status       RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1131568;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Header_Status);
 PARAMETER(LCL.Header_Status_Last);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Header Status is Confirmed & Complete
 IF LCL.Header_Status = 'C'/'R';

 //?skip if shipped/invoiced because the item bal is already reduced
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Allocated
 CASE;

 // IF DB1.OD Production Date LE PAR.USR Day 1
 IF DB1.OD_Production_Date <= PAR.USR_Day_1;

 // AND DB1.OD Production Date GT PAR.USR Day 2
 AND DB1.OD_Production_Date > PAR.USR_Day_2;

 // PAR.Day 1 Sales 5,0  USR = PAR.Day 1 Sales 5,0  USR + DB1.OD Quantity Inv Sched
 PAR.Day_1_Sales_50_USR = PAR.Day_1_Sales_50_USR + DB1.OD_Quantity_Inv_Sched;

 //?Allocated
 // IF DB1.OD Production Date LE PAR.USR Day 2
 IF DB1.OD_Production_Date <= PAR.USR_Day_2;

 // AND DB1.OD Production Date GT PAR.USR Day 3
 AND DB1.OD_Production_Date > PAR.USR_Day_3;

 // PAR.Day 2 Sales 5,0  USR = PAR.Day 2 Sales 5,0  USR + DB1.OD Quantity Inv Sched
 PAR.Day_2_Sales_50_USR = PAR.Day_2_Sales_50_USR + DB1.OD_Quantity_Inv_Sched;

 //?Allocated
 // IF DB1.OD Production Date LE PAR.USR Day 3
 IF DB1.OD_Production_Date <= PAR.USR_Day_3;

 // AND DB1.OD Production Date GT PAR.USR Day 4
 AND DB1.OD_Production_Date > PAR.USR_Day_4;

 // PAR.Day 3 Sales 5,0  USR = PAR.Day 3 Sales 5,0  USR + DB1.OD Quantity Inv Sched
 PAR.Day_3_Sales_50_USR = PAR.Day_3_Sales_50_USR + DB1.OD_Quantity_Inv_Sched;

 //?Allocated
 // IF DB1.OD Production Date LE PAR.USR Day 4
 IF DB1.OD_Production_Date <= PAR.USR_Day_4;

 // AND DB1.OD Production Date GT PAR.USR Day 5
 AND DB1.OD_Production_Date > PAR.USR_Day_5;

 // PAR.Day 4 Sales 5,0  USR = PAR.Day 4 Sales 5,0  USR + DB1.OD Quantity Inv Sched
 PAR.Day_4_Sales_50_USR = PAR.Day_4_Sales_50_USR + DB1.OD_Quantity_Inv_Sched;

 //?Allocated
 // IF DB1.OD Production Date LE PAR.USR Day 5
 IF DB1.OD_Production_Date <= PAR.USR_Day_5;

 // AND DB1.OD Production Date GT PAR.USR Day 6
 AND DB1.OD_Production_Date > PAR.USR_Day_6;

 // PAR.Day 5 Sales 5,0  USR = PAR.Day 5 Sales 5,0  USR + DB1.OD Quantity Inv Sched
 PAR.Day_5_Sales_50_USR = PAR.Day_5_Sales_50_USR + DB1.OD_Quantity_Inv_Sched;

 //?Allocated
 // IF DB1.OD Production Date LE PAR.USR Day 6
 IF DB1.OD_Production_Date <= PAR.USR_Day_6;

 // AND DB1.OD Production Date GT PAR.USR Day 7
 AND DB1.OD_Production_Date > PAR.USR_Day_7;

 // PAR.Day 6 Sales 5,0  USR = PAR.Day 6 Sales 5,0  USR + DB1.OD Quantity Inv Sched
 PAR.Day_6_Sales_50_USR = PAR.Day_6_Sales_50_USR + DB1.OD_Quantity_Inv_Sched;

 //?Allocated
 // IF DB1.OD Production Date LE PAR.USR Day 7
 IF DB1.OD_Production_Date <= PAR.USR_Day_7;

 // AND DB1.OD Production Date GT PAR.USR Day 8
 AND DB1.OD_Production_Date > PAR.USR_Day_8;

 // PAR.Day 7 Sales 5,0  USR = PAR.Day 7 Sales 5,0  USR + DB1.OD Quantity Inv Sched
 PAR.Day_7_Sales_50_USR = PAR.Day_7_Sales_50_USR + DB1.OD_Quantity_Inv_Sched;

 //?Allocated
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.OD Production Date LE PAR.USR Day 8
 IF DB1.OD_Production_Date <= PAR.USR_Day_8;

 // PAR.Day 8 Sales 5,0  USR = PAR.Day 8 Sales 5,0  USR + DB1.OD Quantity Inv Sched
 PAR.Day_8_Sales_50_USR = PAR.Day_8_Sales_50_USR + DB1.OD_Quantity_Inv_Sched;

 ENDIF;

 ENDIF;

 ENDIF;

}


// PAR.Quantity On Hand   USR = CON.*ZERO
PAR.Quantity_On_Hand_USR = *ZERO;

// Qty allocated
PAR.Quantity_On_Hand_USR = ( ( ( ( ( ( LCL.Day_1_Sales_50_USR + LCL.Day_2_Sales_50_USR )           +
+ LCL.Day_3_Sales_50_USR ) + LCL.Day_4_Sales_50_USR ) + LCL.Day_5_Sales_50_USR )                  +
+ LCL.Day_6_Sales_50_USR ) + LCL.Day_7_Sales_50_USR ) + LCL.Day_8_Sales_50_USR;

CASE;

// IF PAR.Quantity On Hand   USR is EQ 0
IF PAR.Quantity_On_Hand_USR = 0;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

//?------------------------------------------------------
//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : Prt Inv Allocated-Rng PO
EXECUTE FUNCTION(Prt Inv Allocated-Rng PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(CUR.Item_Code);
PARAMETER(PAR.USR_Day_1);
PARAMETER(PAR.USR_Day_2);
PARAMETER(PAR.USR_Day_3);
PARAMETER(PAR.USR_Day_4);
PARAMETER(PAR.USR_Day_5);
PARAMETER(PAR.USR_Day_6);
PARAMETER(PAR.USR_Day_7);
PARAMETER(PAR.USR_Day_8);
PARAMETER(LCL.Day_1_Sales_50_USR);
PARAMETER(LCL.Day_2_Sales_50_USR);
PARAMETER(LCL.Day_3_Sales_50_USR);
PARAMETER(LCL.Day_4_Sales_50_USR);
PARAMETER(LCL.Day_5_Sales_50_USR);
PARAMETER(LCL.Day_6_Sales_50_USR);
PARAMETER(LCL.Day_7_Sales_50_USR);
PARAMETER(LCL.Day_8_Sales_50_USR);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Print required level totals

// SUPPRESSED PRINT Item Code totals format

// SUPPRESSED PRINT Company Number - 3 totals format

