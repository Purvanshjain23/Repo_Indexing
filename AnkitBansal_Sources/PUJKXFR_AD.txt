// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PUJKXFR
// ?Date: 14.08.2025 Time: 03:50:32
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?NOTE: If changing this program, you may also want to consider
//?      changing PUFFXFR program since most of the logic are
//?      identical except here we check if Qty Differences Exist
//?      before creating the WF EDI Whs Stk Txfr Diff record.
//?Access Path is reading by Co/Actual Shipped Date (Desc) sequence.
EXECUTE FUNCTION(Bld WhsStckTxf Diff 2  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC2158576;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.To_Date_USR);
PARAMETER(PAR.From_Date_USR);
PARAMETER(PAR.Ship_To_Warehouse);
PARAMETER(PAR.Select_Ship_Rcvd_Diff_USR);
{
 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?Actual Shipped Date Must Be Within Date Range.
 CASE;

 // IF DB1.Actual Shipped Date LE PAR.Actual Shipped Date
 IF DB1.Actual_Shipped_Date <= PAR.Actual_Shipped_Date;

 // AND DB1.Actual Shipped Date GE PAR.From Date             USR
 AND DB1.Actual_Shipped_Date >= PAR.From_Date_USR;

 //?Actual Shipped Date Must Be Within Date Range.
 // IF *OTHERWISE
 IF *OTHERWISE;

 QUIT;

 ENDIF;

 //?Shipped To Warehouse Must Match.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Default WHS/OutWhs RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1937488;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(NLL.Outside_Warehouse_Flag);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Ship To Warehouse NE LCL.Warehouse Code
 IF PAR.Ship_To_Warehouse <> LCL.Warehouse_Code;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Record Selected then Continue With Build Work File.
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 EXECUTE FUNCTION(RTV Stops/BOL DtTm     RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1515809;
 PARAMETER(DB1.Load_ID);
 PARAMETER(NLL.Total_Stops);
 PARAMETER(LCL.BOL_Complete_Date);
 PARAMETER(LCL.BOL_Complete_Time);
 PARAMETER(NLL.Warehouse_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?Build Detail.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Val Cmp/Order Exist   RT) TYPE(RTVOBJ) FILE(PUAOCPP)           AC2148837;
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.Order_Number);
 //?EDI 944 Record Found?
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // LCL.Manifest Dtl Rcpt Exist = CND.Yes
 LCL.Manifest_Dtl_Rcpt_Exist = 'Y';

 //?EDI 944 Record Found?
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Manifest Dtl Rcpt Exist = CND.No
 LCL.Manifest_Dtl_Rcpt_Exist = 'N';

 ENDIF;

 EXECUTE FUNCTION(RTV 1st Warehouse 2    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2158777;
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(LCL.Ship_From_Warehouse);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 EXECUTE FUNCTION(Bld WhsStckTxf Diff 2  RT) TYPE(RTVOBJ) FILE(OMFNCPP)          AC2158577;
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Ship_From_Warehouse);
 PARAMETER(PAR.Ship_To_Warehouse);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.BOL_Complete_Date);
 PARAMETER(LCL.BOL_Complete_Time);
 PARAMETER(LCL.Manifest_Dtl_Rcpt_Exist);
 PARAMETER(PAR.Select_Ship_Rcvd_Diff_USR);
 {
  //?USER: Initialize routine

  // LCL.First Time Flag = CND.Yes
  LCL.First_Time_Flag = 'Y';

  // LCL.Case Quantity = CON.*ZERO
  LCL.Case_Quantity = *ZERO;

  // LCL.Case Weight = CON.*ZERO
  LCL.Case_Weight = *ZERO;

  // LCL.Manifest Gross Weight = CON.*ZERO
  LCL.Manifest_Gross_Weight = *ZERO;

  //?USER: Process Data record

  //?Initialize.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Diff/Discrepancy Qty = CON.*ZERO
  LCL.Diff_Discrepancy_Qty = *ZERO;

  // LCL.In Transit Qty = CON.*ZERO
  LCL.In_Transit_Qty = *ZERO;

  ENDIF;

  //?Build for Summary Report Version by Co/Order/Item.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Save First Time Through.
  CASE;

  // IF LCL.First Time Flag is Yes
  IF LCL.First_Time_Flag = 'Y';

  // LCL.First Time Flag = CND.NO
  LCL.First_Time_Flag = 'N';

  // LCL.Item Code = DB1.Item Code
  LCL.Item_Code = DB1.Item_Code;

  //?To save for oldest Production Date.
  // LCL.Production Date = DB1.Production Date
  LCL.Production_Date = DB1.Production_Date;

  ENDIF;

  //?Sum Qty/Wgt - Break by Item Code & Create WF EDI Whs Stk Txfr Diff.
  CASE;

  // IF DB1.Item Code EQ LCL.Item Code
  IF DB1.Item_Code = LCL.Item_Code;

  // LCL.Case Quantity = LCL.Case Quantity + DB1.Case Quantity
  LCL.Case_Quantity = LCL.Case_Quantity + DB1.Case_Quantity;

  // LCL.Case Weight = LCL.Case Weight + DB1.Case Weight
  LCL.Case_Weight = LCL.Case_Weight + DB1.Case_Weight;

  // LCL.Manifest Gross Weight = LCL.Manifest Gross Weight + DB1.Manifest Gross Weight
  LCL.Manifest_Gross_Weight = LCL.Manifest_Gross_Weight + DB1.Manifest_Gross_Weight;

  //?Save the Oldest Production Date.
  CASE;

  // IF DB1.Production Date LT LCL.Production Date
  IF DB1.Production_Date < LCL.Production_Date;

  // LCL.Production Date = DB1.Production Date
  LCL.Production_Date = DB1.Production_Date;

  ENDIF;

  //?Sum Qty/Wgt - Break by Item Code & Create WF EDI Whs Stk Txfr Diff.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Create WF EDI Whs Stk Txfr Diff & Reset Total Qty/Wgt & LCL Fields.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Create WF EDI Whs Stk Txfr Diff Record.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?LCL Ctx = Previous Pallet/Item.
  EXECUTE FUNCTION(Rtv Desc Line 1&2      RT) TYPE(RTVOBJ) FILE(CABZREP)          AC2139542;
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Item_Code);
  PARAMETER(LCL.Item_Description_Line_1);
  PARAMETER(NLL.Description_Line_Two);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV Sum Qty Rcvd-Item2 RT) TYPE(RTVOBJ) FILE(PUAOCPP)          AC2158787;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Item_Code);
  PARAMETER(LCL.Quantity_Received_Total);
  PARAMETER(LCL.Weight_received_total);
  PARAMETER(LCL.MDER_Receipt_Date);
  PARAMETER(LCL.MDER_Receipt_Time);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.Quantity Received Total = PAR.Quantity Received Total + DB1.Quantity Received
   PAR.Quantity_Received_Total = PAR.Quantity_Received_Total + DB1.Quantity_Received;

   // PAR.Weight received total = PAR.Weight received total + DB1.Weight Received
   PAR.Weight_received_total = PAR.Weight_received_total + DB1.Weight_Received;

   // PAR.MDER Receipt Date = DB1.MDER Receipt Date
   PAR.MDER_Receipt_Date = DB1.MDER_Receipt_Date;

   // PAR.MDER Receipt Time = DB1.MDER Receipt Time
   PAR.MDER_Receipt_Time = DB1.MDER_Receipt_Time;

  }

  //?Record Found?
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // LCL.Diff/Discrepancy Qty = LCL.Quantity Received Total - LCL.Case Quantity
  LCL.Diff_Discrepancy_Qty = LCL.Quantity_Received_Total - LCL.Case_Quantity;

  //?Record Found?
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?EDI 944 was Rcv by Co/Ord Therefore Set Diff/Discrep Qty Else In-Trans Qty
  CASE;

  // IF PAR.Manifest Dtl Rcpt Exist is Yes
  IF PAR.Manifest_Dtl_Rcpt_Exist = 'Y';

  // LCL.Diff/Discrepancy Qty = LCL.Quantity Received Total - LCL.Case Quantity
  LCL.Diff_Discrepancy_Qty = LCL.Quantity_Received_Total - LCL.Case_Quantity;

  //?EDI 944 was Rcv by Co/Ord Therefore Set Diff/Discrep Qty Else In-Trans Qty
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.In Transit Qty = LCL.Case Quantity
  LCL.In_Transit_Qty = LCL.Case_Quantity;

  ENDIF;

  ENDIF;

  //?S14071 DN 11/08/18-Select Ship/Rcvd Qty with Differences or All?
  //?Create Only If Qty Differences Exist Based on Ship/Rcvd Diff Flag. S14071
  CASE;

  // IF LCL.Diff/Discrepancy Qty is NE *ZERO
  IF ( LCL.Diff_Discrepancy_Qty <> *ZERO;

  // AND PAR.Select Ship/Rcvd Diff USR is Yes
  AND PAR.Select_Ship_Rcvd_Diff_USR = 'Y' );

  // OR PAR.Select Ship/Rcvd Diff USR is No
  OR PAR.Select_Ship_Rcvd_Diff_USR = 'N';

  //?SUM up Total Shipped & Total Received by Co/Ord/Load/Item.
  EXECUTE FUNCTION(Upd WhsStckTxf Diff 2  RT) TYPE(RTVOBJ) FILE(PUA1CPP)          AC2158774;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Load_ID);
  PARAMETER(LCL.Item_Code);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Ship_From_Warehouse);
  PARAMETER(PAR.Ship_To_Warehouse);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.BOL_Complete_Date);
  PARAMETER(PAR.BOL_Complete_Time);
  PARAMETER(LCL.MDER_Receipt_Date);
  PARAMETER(LCL.MDER_Receipt_Time);
  PARAMETER(LCL.Item_Description_Line_1);
  PARAMETER(LCL.Production_Date);
  PARAMETER(LCL.Case_Weight);
  PARAMETER(LCL.Manifest_Gross_Weight);
  PARAMETER(LCL.Case_Quantity);
  PARAMETER(LCL.Quantity_Received_Total);
  PARAMETER(LCL.Diff_Discrepancy_Qty);
  PARAMETER(LCL.In_Transit_Qty);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(CRT WF Whs StckTxf Dif CR) TYPE(CRTOBJ) FILE(PUA1CPP)          AC2144368;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Load_ID);
   PARAMETER(PAR.Manifest_Pallet_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.PT_Serial_Number);
   PARAMETER(PAR.Ship_From_Warehouse);
   PARAMETER(PAR.Ship_To_Warehouse);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.BOL_Complete_Date);
   PARAMETER(PAR.BOL_Complete_Time);
   PARAMETER(PAR.MDER_Receipt_Date);
   PARAMETER(PAR.MDER_Receipt_Time);
   PARAMETER(PAR.Item_Description_Line_1);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Case_Weight);
   PARAMETER(PAR.Manifest_Gross_Weight);
   PARAMETER(PAR.Case_Quantity);
   PARAMETER(PAR.Quantity_Received);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(PAR.Diff_Discrepancy_Qty);
   PARAMETER(PAR.In_Transit_Qty);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   //?USER: Process Data record

   //?Accumulate & Update WF EDI Whs Stk Txfr Diff File.
   // LCL.Case Weight = DB1.Case Weight + PAR.Case Weight
   LCL.Case_Weight = DB1.Case_Weight + PAR.Case_Weight;

   // LCL.Manifest Gross Weight = DB1.Manifest Gross Weight + PAR.Manifest Gross Weight
   LCL.Manifest_Gross_Weight = DB1.Manifest_Gross_Weight + PAR.Manifest_Gross_Weight;

   // LCL.Case Quantity = DB1.Case Quantity + PAR.Case Quantity
   LCL.Case_Quantity = DB1.Case_Quantity + PAR.Case_Quantity;

   // LCL.Quantity Received = DB1.Quantity Received + PAR.Quantity Received
   LCL.Quantity_Received = DB1.Quantity_Received + PAR.Quantity_Received;

   // LCL.Diff/Discrepancy Qty = DB1.Diff/Discrepancy Qty + PAR.Diff/Discrepancy Qty
   LCL.Diff_Discrepancy_Qty = DB1.Diff_Discrepancy_Qty + PAR.Diff_Discrepancy_Qty;

   EXECUTE FUNCTION(CHG WF Whs StckTxf Dif CH) TYPE(CHGOBJ) FILE(PUA1CPP)          AC2144369;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.Manifest_Pallet_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.PT_Serial_Number);
   PARAMETER(DB1.Ship_From_Warehouse);
   PARAMETER(DB1.Ship_To_Warehouse);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.BOL_Complete_Date);
   PARAMETER(DB1.BOL_Complete_Time);
   PARAMETER(DB1.MDER_Receipt_Date);
   PARAMETER(DB1.MDER_Receipt_Time);
   PARAMETER(DB1.Item_Description_Line_1);
   PARAMETER(DB1.Production_Date);
   PARAMETER(LCL.Case_Weight);
   PARAMETER(LCL.Manifest_Gross_Weight);
   PARAMETER(LCL.Case_Quantity);
   PARAMETER(LCL.Quantity_Received);
   PARAMETER(DB1.EWSTD_Unused_Sts_1);
   PARAMETER(DB1.EWSTD_Unused_Sts_2);
   PARAMETER(LCL.Diff_Discrepancy_Qty);
   PARAMETER(DB1.In_Transit_Qty);
   PARAMETER(DB1.EWSTD_Unused_Nbr_1);
   PARAMETER(DB1.EWSTD_Unused_Wgt_1);
   PARAMETER(DB1.EWSTD_Unused_Dte_1);
   PARAMETER(DB1.EWSTD_Unused_Dte_2);
  }

  ENDIF;

  ENDIF;

  // LCL.Item Code = DB1.Item Code
  LCL.Item_Code = DB1.Item_Code;

  // LCL.Production Date = DB1.Production Date
  LCL.Production_Date = DB1.Production_Date;

  // LCL.Case Quantity = DB1.Case Quantity
  LCL.Case_Quantity = DB1.Case_Quantity;

  // LCL.Case Weight = DB1.Case Weight
  LCL.Case_Weight = DB1.Case_Weight;

  // LCL.Manifest Gross Weight = DB1.Manifest Gross Weight
  LCL.Manifest_Gross_Weight = DB1.Manifest_Gross_Weight;

  ENDIF;

  ENDIF;

  ENDIF;

  //?USER: Exit processing

  //?Last Record Processing. Create WF EDI Whs Stk Txfr Diff Record.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Use LCL Ctx for Last Record.
  EXECUTE FUNCTION(Rtv Desc Line 1&2      RT) TYPE(RTVOBJ) FILE(CABZREP)          AC2139542;
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Item_Code);
  PARAMETER(LCL.Item_Description_Line_1);
  PARAMETER(NLL.Description_Line_Two);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV Sum Qty Rcvd-Item2 RT) TYPE(RTVOBJ) FILE(PUAOCPP)          AC2158787;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Item_Code);
  PARAMETER(LCL.Quantity_Received_Total);
  PARAMETER(LCL.Weight_received_total);
  PARAMETER(LCL.MDER_Receipt_Date);
  PARAMETER(LCL.MDER_Receipt_Time);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.Quantity Received Total = PAR.Quantity Received Total + DB1.Quantity Received
   PAR.Quantity_Received_Total = PAR.Quantity_Received_Total + DB1.Quantity_Received;

   // PAR.Weight received total = PAR.Weight received total + DB1.Weight Received
   PAR.Weight_received_total = PAR.Weight_received_total + DB1.Weight_Received;

   // PAR.MDER Receipt Date = DB1.MDER Receipt Date
   PAR.MDER_Receipt_Date = DB1.MDER_Receipt_Date;

   // PAR.MDER Receipt Time = DB1.MDER Receipt Time
   PAR.MDER_Receipt_Time = DB1.MDER_Receipt_Time;

  }

  //?Record Found?
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // LCL.Diff/Discrepancy Qty = LCL.Quantity Received Total - LCL.Case Quantity
  LCL.Diff_Discrepancy_Qty = LCL.Quantity_Received_Total - LCL.Case_Quantity;

  //?Record Found?
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?EDI 944 was Rcv by Co/Ord Therefore Set Diff/Discrep Qty Else In-Trans Qty
  CASE;

  // IF PAR.Manifest Dtl Rcpt Exist is Yes
  IF PAR.Manifest_Dtl_Rcpt_Exist = 'Y';

  // LCL.Diff/Discrepancy Qty = LCL.Quantity Received Total - LCL.Case Quantity
  LCL.Diff_Discrepancy_Qty = LCL.Quantity_Received_Total - LCL.Case_Quantity;

  //?EDI 944 was Rcv by Co/Ord Therefore Set Diff/Discrep Qty Else In-Trans Qty
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.In Transit Qty = LCL.Case Quantity
  LCL.In_Transit_Qty = LCL.Case_Quantity;

  ENDIF;

  ENDIF;

  //?S14071 DN 11/08/18-Select Ship/Rcvd Qty with Differences or All?
  //?Create Only If Qty Differences Exist Based on Ship/Rcvd Diff Flag. S14071
  CASE;

  // IF LCL.Diff/Discrepancy Qty is NE *ZERO
  IF ( LCL.Diff_Discrepancy_Qty <> *ZERO;

  // AND PAR.Select Ship/Rcvd Diff USR is Yes
  AND PAR.Select_Ship_Rcvd_Diff_USR = 'Y' );

  // OR PAR.Select Ship/Rcvd Diff USR is No
  OR PAR.Select_Ship_Rcvd_Diff_USR = 'N';

  //?SUM up Total Shipped & Total Received by Co/Ord/Load/Item.
  EXECUTE FUNCTION(Upd WhsStckTxf Diff 2  RT) TYPE(RTVOBJ) FILE(PUA1CPP)          AC2158774;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Load_ID);
  PARAMETER(LCL.Item_Code);
  PARAMETER(LCL.Manifest_Pallet_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Ship_From_Warehouse);
  PARAMETER(PAR.Ship_To_Warehouse);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.BOL_Complete_Date);
  PARAMETER(PAR.BOL_Complete_Time);
  PARAMETER(LCL.MDER_Receipt_Date);
  PARAMETER(LCL.MDER_Receipt_Time);
  PARAMETER(LCL.Item_Description_Line_1);
  PARAMETER(LCL.Production_Date);
  PARAMETER(LCL.Case_Weight);
  PARAMETER(LCL.Manifest_Gross_Weight);
  PARAMETER(LCL.Case_Quantity);
  PARAMETER(LCL.Quantity_Received_Total);
  PARAMETER(LCL.Diff_Discrepancy_Qty);
  PARAMETER(LCL.In_Transit_Qty);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(CRT WF Whs StckTxf Dif CR) TYPE(CRTOBJ) FILE(PUA1CPP)          AC2144368;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Load_ID);
   PARAMETER(PAR.Manifest_Pallet_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.PT_Serial_Number);
   PARAMETER(PAR.Ship_From_Warehouse);
   PARAMETER(PAR.Ship_To_Warehouse);
   PARAMETER(PAR.Scheduled_Ship_Date);
   PARAMETER(PAR.BOL_Complete_Date);
   PARAMETER(PAR.BOL_Complete_Time);
   PARAMETER(PAR.MDER_Receipt_Date);
   PARAMETER(PAR.MDER_Receipt_Time);
   PARAMETER(PAR.Item_Description_Line_1);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Case_Weight);
   PARAMETER(PAR.Manifest_Gross_Weight);
   PARAMETER(PAR.Case_Quantity);
   PARAMETER(PAR.Quantity_Received);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(PAR.Diff_Discrepancy_Qty);
   PARAMETER(PAR.In_Transit_Qty);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   //?USER: Process Data record

   //?Accumulate & Update WF EDI Whs Stk Txfr Diff File.
   // LCL.Case Weight = DB1.Case Weight + PAR.Case Weight
   LCL.Case_Weight = DB1.Case_Weight + PAR.Case_Weight;

   // LCL.Manifest Gross Weight = DB1.Manifest Gross Weight + PAR.Manifest Gross Weight
   LCL.Manifest_Gross_Weight = DB1.Manifest_Gross_Weight + PAR.Manifest_Gross_Weight;

   // LCL.Case Quantity = DB1.Case Quantity + PAR.Case Quantity
   LCL.Case_Quantity = DB1.Case_Quantity + PAR.Case_Quantity;

   // LCL.Quantity Received = DB1.Quantity Received + PAR.Quantity Received
   LCL.Quantity_Received = DB1.Quantity_Received + PAR.Quantity_Received;

   // LCL.Diff/Discrepancy Qty = DB1.Diff/Discrepancy Qty + PAR.Diff/Discrepancy Qty
   LCL.Diff_Discrepancy_Qty = DB1.Diff_Discrepancy_Qty + PAR.Diff_Discrepancy_Qty;

   EXECUTE FUNCTION(CHG WF Whs StckTxf Dif CH) TYPE(CHGOBJ) FILE(PUA1CPP)          AC2144369;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.Manifest_Pallet_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.PT_Serial_Number);
   PARAMETER(DB1.Ship_From_Warehouse);
   PARAMETER(DB1.Ship_To_Warehouse);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.BOL_Complete_Date);
   PARAMETER(DB1.BOL_Complete_Time);
   PARAMETER(DB1.MDER_Receipt_Date);
   PARAMETER(DB1.MDER_Receipt_Time);
   PARAMETER(DB1.Item_Description_Line_1);
   PARAMETER(DB1.Production_Date);
   PARAMETER(LCL.Case_Weight);
   PARAMETER(LCL.Manifest_Gross_Weight);
   PARAMETER(LCL.Case_Quantity);
   PARAMETER(LCL.Quantity_Received);
   PARAMETER(DB1.EWSTD_Unused_Sts_1);
   PARAMETER(DB1.EWSTD_Unused_Sts_2);
   PARAMETER(LCL.Diff_Discrepancy_Qty);
   PARAMETER(DB1.In_Transit_Qty);
   PARAMETER(DB1.EWSTD_Unused_Nbr_1);
   PARAMETER(DB1.EWSTD_Unused_Wgt_1);
   PARAMETER(DB1.EWSTD_Unused_Dte_1);
   PARAMETER(DB1.EWSTD_Unused_Dte_2);
  }

  ENDIF;

  ENDIF;

 }

 // Call program Crt Rcvd But Not Ship XF.
 CALL PROGRAM(Crt Rcvd But Not Ship XF) ('PUFRXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Ship_From_Warehouse);
 PARAMETER(PAR.Ship_To_Warehouse);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.BOL_Complete_Date);
 PARAMETER(LCL.BOL_Complete_Time);
 PARAMETER(*BLANK);
 PARAMETER('Y');

 ENDIF;

 ENDIF;

}


