      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      HOG PRODUCTION
      * PROGRAM:     HP739
      * TITLE:       VIEW TRANSFER
      * PROGRAMMER:  LEANNE FEDOR
      * CREATED:     05/30/95
      *
      * FUNCTION: THIS VIEW PROGRAM DISPLAYS A TRANSFER.
      *           IT IS CALLED FROM HP439-WORK WITH TRANSFERS
      *
      *           RESTRICTORS:  MOVEMENT NUMBER
      *           POSITIONERS:  NONE
      *           SELECTORS:    NONE
      *
      *           IT DOES NOT HAVE F4-PROMPT LOGIC.
      *           IT LOADS THE SUBFILE A PAGE AT A TIME.
      *           IT USES THE STANDARD MESSAGE HANDLING PROGRAM.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 11/09/99  LeAnne Fedor
      *           Added building/room to subfile line for both origin and
      *           destination groups.
      *
      * 08/07/02  LeAnne Fedor
      *           Added KOA HEAD to subfile line.
      *
      * 08/22/02  LeAnne Fedor
      *           Added 'average arrived pounds' to control record.
      *
      * 12/01/02  LeAnne Fedor
      *           Went to a 2-line subfile with fold/drop.
      *
      * 07/06/09  LeAnne Ramsey
      *           Recompile only. Added new field 'Continuous Flow Flag' to Hog Group file.
      *
      * 12/15/11  LeAnne Ramsey (E1858)
      *           Debbie Deen requested that we replace Rejected Head/Reasons on the
      *           Destination side with Destination Group 'Sex'. Since we had NO records
      *           in the database with 'rejected head', I removed the 'rejected head'
      *           fields/logic. We now have the 'sex' of the Destination group.
      *           (Note: I also removed Rejected Lbs logic.)
      *
      * 10/16/13  LeAnne Ramsey (E2831)
      *           Recompile only. Added field 'MTech Reference'.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     FHPD739    CF   E             WORKSTN SFILE(HP739S1:HDRRN1)
     F                                     INFDS(IOFEED)
      *
     FHSP018    IF   E           K DISK
      *    FARM SITE
      *
      *
     FHSL034D   IF   E           K DISK
      *  HOG GROUPS
      *
      *
     FHSP056    IF   E           K DISK
      *    Sex
      *
     FHSP074    IF   E           K DISK
      *  TRANSFER HEADER
      *
      *
     FHSP075    IF   E           K DISK
      *  TRANSFER DETAIL
      *
      /EJECT
      ****************************************************************
      * Definition Specifications
      ****************************************************************
      *
      *---------------------------------------------------------------
      * STANDARD ERROR MESSAGE HANDLING DATA STRUCTURES
      *---------------------------------------------------------------
      *
      * FOR ERROR MESSAGE HANDLING, A PACKED INDEX (E) IS REQUIRED.
      * FOR PROGRAM READABILITY, DEFINE A CORRESPONDING ERROR COUNT
      * FIELD CALLED 'ERROR'
      *
     D                 DS                  INZ
     D  ERROR                  1      2P 0
     D  E                      1      2P 0
      *
      * THIS DATA STRUCTURE SUPPLIES THE NAME OF THE MESSAGE FILE TO
      * THE MESSAGE HANDLING CL PROGRAM.  THE FIELD NAME MSGFIL MUST BE
      * CONSTANT. THE VALUE IN QUOTES IS THE NAME OF THE SPECIFIC
      * MESSAGE FILE CONTAINING THE USER DEFINED MESSAGES.
      *
     D                 DS                  INZ
     D  MSGFIL                 1     10    INZ('HSMSGF    ')
      *
      * THE FOLLOWING 3 DATA STRUCTURES ARE USED TO SPEED MESSAGE
      * HANDLING SINCE IT IS FASTER TO CLEAR DATA STRUCTURES THAN
      * ARRAYS.  EACH IS ASSOCIATED WITH A STANDARD MESSAGE ARRAY.
      *
     D MGI             DS           140    INZ
     D  MGID                   1    140
     D                                     DIM(20)                              MSG ID ARRAY
      *
     D MGD             DS          1000    INZ
     D  MGDT                   1   1000
     D                                     DIM(20)                              MSG PARMS
      *
     D MGWK            DS            50    INZ
     D  MGW                    1     50
     D                                     DIM(50)                              MSG WORK PARMS
      *
      *---------------------------------------------------------------
      * STANDARD PROGRAM STATUS DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTPGFR (RECORD FORMAT: PGMDSR)
     D PGMDS         ESDS                  EXTNAME(UTPGFR)
      *
      *---------------------------------------------------------------
      * STANDARD WORKSTATION INFORMATION DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTWSFR (RECORD FORMAT: UTIDFRR)
     D IOFEED        E DS                  EXTNAME(UTWSFR)
      *
      *---------------------------------------------------------------
      * STANDARD DATABASE FILE INFORMATION DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTDBFR (RECORD FORMAT: FDBCKD)
     D DBFEED        E DS                  EXTNAME(UTDBFR)
      *
      *
      *---------------------------------------------------------------
      *  DATE FORMATS
      *---------------------------------------------------------------
      *
      * DATE IN MMDDYY FORMAT
      *
     D                 DS
     D  WKMDY                  1      6  0
     D  WKMM                   1      2  0
     D  WKDD                   3      4  0
     D  WKYY                   5      6  0
      *
      * DATE IN CCYYMMDD FORMAT
      *
     D                 DS
     D  WKCYMD                 1      8  0
     D  WKCEN                  1      2  0
     D  WKYER                  3      4  0
     D  WKMON                  5      6  0
     D  WKDAY                  7      8  0
      *---------------------------------------------------------------
      *  NAMED CONSTANTS
      *---------------------------------------------------------------
      *
     D CREATE          C                   CONST('CREATE')
     D REVISE          C                   CONST('REVISE')
     D DELETE          C                   CONST('DELETE')
     D VIEW            C                   CONST('VIEW  ')
     D SELECT          C                   CONST('SELECT')
     D YES             C                   CONST('Y')
     D NO              C                   CONST('N')
     D SET1            C                   CONST('SET1  ')
     D EDIT1           C                   CONST('EDIT1 ')
     D SCRN1           C                   CONST('SCRN1 ')
     D EXIT            C                   CONST('EXIT  ')
     D UPDATE          C                   CONST('UPDATE')
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAIN LINE
      ****************************************************************
      *
     C                   MOVEL     SET1          ROUTNE
      *
     C     *INLR         DOWEQ     *OFF                                         MAIN DO LOOP
      *
     C     ROUTNE        CASEQ     SET1          $SET1
     C     ROUTNE        CASEQ     SCRN1         $SCRN1
      *
     C     ROUTNE        CASEQ     EXIT          $EXIT
     C                   ENDCS
     C                   ENDDO                                                  MAIN DO LOOP
      /EJECT
      *----------------------------------------------------------------
      * $SET1 - SUBROUTINE TO SET ENVIRONMENT FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $SET1         BEGSR
      *
      * RETRIEVE TRANSFER HEADER INFORMATION
      *
     C     C1MVSN        CHAIN     HSP074                             90
     C     *IN90         IFEQ      *OFF                                         IF FOUND
     C                   EXSR      $HDR
     C                   ELSE
     C                   MOVEL     YES           NOTFLG
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00592'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVEL     C1MVSN        XXMVSN
     C                   MOVEA     XXMVSN        MGW(1)
     C                   MOVEA     MGW           MGDT(E)
     C                   ENDIF
     C                   ENDIF                                                  IF FOUND
      *
      *  CLEAR/FILL THE SUBFILE
      *
     C                   EXSR      $CLR1
     C                   EXSR      $FRSH1
      *
      *  SET ROUTINE TO DISPLAY SCREEN
      *
     C                   MOVEL     SCRN1         ROUTNE
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $SCRN1 - SUBROUTINE TO PERFORM OPERATOR I/O FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $SCRN1        BEGSR
      *
      * WRITE THE ERROR MESSAGES FROM THE ERROR ARRAYS TO THE
      * ERROR MESSAGE SUBFILE
      *
     C                   EXSR      $WRMSG
      *
      * RESET INDICATORS TO CONTROL SCREEN
      *
     C                   EXSR      $IND
      *
      * THIS SUBFILE HAS FOLD/UNFOLD CAPABILITIES.  THE DDS USES THE
      * KEYWORDS (SFLDROP, SFLFOLD) TO DETERMINE WHETHER THE
      * USER IS FOLDED OR UNFOLDED AND TO REDISPLAY THE SCREEN IN THE
      * SAME MODE AS WHEN HE LAST SAW IT.  INDICATORS 88 AND 89 ARE
      * ASSIGNED IN THE DDS TO SFLDROP AND SFLFOLD.
      *
     C                   setoff                                       8889
     C                   if        fold = '0'
     C                   seton                                        88
     C                   else
     C                   seton                                        89
     C                   endif
      *
      *
      * WRITE SCREEN 1 TO CRT
      *
     C                   WRITE     HP739K1
     C                   WRITE     HP739EC
     C                   EXFMT     HP739C1
      *
      * SET THE 'RESET' FLAG TO NO.  THIS FLAG IS USED TO DETERMINE
      * WHETHER TO REPOSITION THE USER TO A PARTICULAR PLACE IN THE
      * SUBFILE (RESET=YES) OR TO PLACE THE USER AT THE BEGINNNING OF
      * THE SUBFILE (RESET=NO)
      *
     C                   MOVEL     NO            RESET
      *
      * SAVE THE VALUE OF THE LOWEST SUBFILE RRN ON THE SCREEN FOR
      * LATER REPOSITIONING THE SUBFILE
      *
     C                   Z-ADD     IDFLOW        WKFLOW
      *
      * CLEAR THE MESSAGES FROM THE MESSAGE DATA STRUCTURES
      * AND PROGRAM MESSAGE QUEUE.
      *
     C                   EXSR      $CLMSG
      *
      * INITIALIZE THE RETURN CODE
      *
     C                   MOVEL     '00'          RTNCD
      *
      * GET USER'S ENTRY, SET THE RETURN CODE ACCORDING TO THE FUNCTION
      * KEY TAKEN BY THE USER, SET THE NEXT ROUTINE
      *
     C                   SELECT
     C     *IN03         WHENEQ    *ON                                          F3-EXIT
     C                   MOVEL     '03'          RTNCD
     C                   MOVEL     EXIT          ROUTNE
      *
     C     *IN05         WHENEQ    *ON                                          F5-REFRESH
     C                   MOVEL     YES           RESET
     C                   MOVEL     SET1          ROUTNE
      *
     C     *IN12         WHENEQ    *ON                                          F12-PREVIOUS
     C                   MOVEL     '12'          RTNCD
     C                   MOVEL     EXIT          ROUTNE
      *
     C     *IN25         WHENEQ    *ON                                          F25-ROLLUP
     C                   MOVEL     SCRN1         ROUTNE
     C                   OTHER
      *
      * USER PRESSED 'ENTER'
      *
     C                   MOVEL     SCRN1         ROUTNE
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $IND - RESET INDICATORS
      *----------------------------------------------------------------
      *
     C     $IND          BEGSR
      *
      * THE DSPATR LOGIC USED IN THE DSPF REQUIRES AT LEAST ONE
      * INDICATOR TO BE ON.
      *
     C                   SETON                                        42
      *
      * IF THE TRANSFER WAS DELETED OUT FROM UNDER THE USER, THEN SET
      * *IN90 BACK ON TO CONTROL AVAILABLE FUNCTION KEYS AND INPUT
      * FIELDS.
      *
     C                   SELECT
     C     NOTFLG        WHENEQ    YES
     C                   SETON                                        90
     C                   endsl
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $CLR1  - SUBROUTINE TO CLEAR THE SUBFILE FOR SCREEN 1
      *---------------------------------------------------------------
      *
     C     $CLR1         BEGSR
      *
      * CLEAR CONTROL RECORD ACCUMULATORS
      *
     C                   Z-ADD     0             C1SCHD
     C                   Z-ADD     0             C1SHHD
     C                   Z-ADD     0             C1ARHD
     C                   Z-ADD     0             C1RCHD
     C                   Z-ADD     0             C1DOHD
      *
     C                   Z-ADD     0             C1SHLB
     C                   Z-ADD     0             C1ARLB
     C                   Z-ADD     0             C1AVARLB
     C                   Z-ADD     0             C1RCLB
     C                   Z-ADD     0             C1DOLB
      *
     C                   Z-ADD     0             SVRRN1
      *
     C                   CLEAR                   HP739S1
     C                   SETON                                        83        SFLCLR
     C                   WRITE     HP739C1
     C                   SETOFF                                       818283
      *                                                    81=SFLDSP
      *                                                    82=SFLEND
      *                                                    83=SFLCLR
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $FRSH1 - SUBROUTINE TO REFRESH/FILL THE SUBFILE ON SCREEN 1
      *---------------------------------------------------------------
      *
     C     $FRSH1        BEGSR
      *
     C     C1MVSN        SETLL     HSP075
     C                   EXSR      $LOAD1
      *
      * CALCULATE ARRIVED HEAD AND POUNDS:
      *    = RECEIVED + DEAD
      *
     C     C1RCHD        ADD       C1DOHD        C1ARHD
     C     C1RCLB        ADD       C1DOLB        C1ARLB
      *
     C                   if        c1arhd <> 0
     C     c1arlb        div(h)    c1arhd        c1avarlb
     C                   endif
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $HDR - RETRIEVE THE TRANSFER HEADER INFO FOR THE SCREEN
      *---------------------------------------------------------------
      *
     C     $HDR          BEGSR
      *
     C                   Z-ADD     MHORFS        C1ORFS
     C                   Z-ADD     MHDNFS        C1DNFS
     C                   Z-ADD     MHSITM        C1SITM
     C                   Z-ADD     MHSOTM        C1SOTM
     C                   Z-ADD     MHRITM        C1RITM
     C                   Z-ADD     MHROTM        C1ROTM
     C                   MOVEL     MHTICD        C1TICD
      *
      * RETRIEVE ORIGIN FARM SITE NAME
      *
     C     C1ORFS        CHAIN     HSP018                             92
     C     *IN92         IFEQ      *OFF                                         IF GOOD ORIG
     C                   MOVEL     FSFSNM        C1ORNM
     C                   ELSE
     C                   MOVEL(P)  'UNKNOWN'     C1ORNM
     C                   ENDIF
      *
      * RETRIEVE DESTINATION FARM SITE NAME
      *
     C     C1DNFS        CHAIN     HSP018                             92
     C     *IN92         IFEQ      *OFF                                         IF GOOD ORIG
     C                   MOVEL     FSFSNM        C1DNNM
     C                   ELSE
     C                   MOVEL(P)  'UNKNOWN'     C1DNNM
     C                   ENDIF
      *
      * FLIP SCHEDULED SHIP DATE TO MDY FORMAT
      *
     C                   Z-ADD     MHSCDT        WKCYMD
     C                   EXSR      $TOMDY
     C                   Z-ADD     WKMDY         C1MDY
      *
      * FLIP SHIPPED DATE TO MDY FORMAT
      *
     C                   Z-ADD     MHSHDT        WKCYMD
     C                   EXSR      $TOMDY
     C                   Z-ADD     WKMDY         C1SMDY
      *
      * FLIP RECEIVED DATE TO MDY FORMAT
      *
     C                   Z-ADD     MHRCDT        WKCYMD
     C                   EXSR      $TOMDY
     C                   Z-ADD     WKMDY         C1RMDY
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $LOAD1- SUBROUTINE TO LOAD THE SUBFILE FOR SCREEN 1
      *---------------------------------------------------------------
      *
      *  RETRIEVE TRANSFER DETAIL RECORDS FOR THE TRANSFER MOVEMENT.
      *  FILL THE SUBFILE FIELDS USING THE FOLLOWING LOGIC:
      *
     C     $LOAD1        BEGSR
      *
     C                   SETOFF                                       82
     C     *IN82         DOUEQ     *ON                                          DO FILL LOOP
     C     C1MVSN        READE     HSP075                                 82
     C     *IN82         IFEQ      *OFF                                         IF NOT EOF
     C                   SETON                                        85
      *
      * ACCUMULATE SCHEDULED HEAD
      *
     C                   ADD       MDSCHD        C1SCHD
      *
      * ACCUMULATE HEAD VALUES FOR CONTROL RECORD
      *
     C                   ADD       MDSHHD        C1SHHD
     C                   ADD       MDQLHD        C1RCHD
     C                   ADD       MDDOHD        C1DOHD
      *
      * ACCUMULATE POUNDS VALUES FOR CONTROL RECORD
      *
     C                   ADD       MDSHLB        C1SHLB
     C                   ADD       MDQLLB        C1RCLB
     C                   ADD       MDDOLB        C1DOLB
      *
     C                   Z-ADD     MDLNNO        HDLNNO
     C                   Z-ADD     MDSCHD        DFSCHD
     C                   Z-ADD     MDSHHD        DFSHHD
     C                   Z-ADD     MDQLHD        DFQLHD
     C                   Z-ADD     MDDOAHD       DFDOAHD
     C                   Z-ADD     MDKOAHD       DFKOAHD
      *
      * RETRIEVE ALPHA HOG GROUP CODES
      *
     C                   EXSR      $GRPCD
      *
     C                   ADD       1             COUNT
     C                   ADD       1             HDRRN1
      *
     C                   EXSR      $IND
      *
     C                   WRITE     HP739S1
     C                   SETON                                        81
     C                   Z-ADD     HDRRN1        HDPAG1
     C                   ENDIF                                                  IF NOT EOF
     C                   ENDDO                                                  DO FILL LOOP
      *
      * IF NO RECORDS WERE WRITTEN TO THE SUBFILE, THEN ISSUE
      * THE STANDARD ERROR MESSAGE OF NO DATA FOUND.
      *
     C     HDRRN1        IFEQ      0
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09002'     MGID(E)
     C                   ENDIF
     C                   ENDIF
      *
      * SET THE PAGE OF THE SUBFILE TO DISPLAY TO THE USER
      *
     C     RESET         IFEQ      YES
     C                   Z-ADD     WKFLOW        HDPAG1
     C                   ELSE
     C                   Z-ADD     1             HDPAG1
     C                   ENDIF
      *
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $GRPCD - RETRIEVE THE USER-ASSIGNED ALPHA HOG GROUP CODE
      *----------------------------------------------------------------
      *
      * USING THE SYSTEM-ASSIGNED HOG GROUP CODE FROM THE TRANSFER
      * DETAIL, RETRIEVE THE ALPHA HOG GROUP CODE FROM THE HOG GROUP
      * MASTER FILE.  DISPLAY THE ALPHA CODE ON THE SCREEN.
      *
     C     $GRPCD        BEGSR
      *
      * ORIGIN GROUP
      *
     C     MDORSN        CHAIN     HSL034D                            94
     C     *IN94         IFEQ      *ON
     C                   MOVEL(P)  'Unknown'     DFORHGCD
     C                   ELSE
     C                   MOVEL     hgblcd        dforblcd
     C                   MOVEL     hgrmcd        dforrmcd
     C                   MOVEL     HGHGCD        dforhgcd
     C                   MOVEL     HGGSCD        dforgscd
     C                   MOVEL     HGPTCD        dforptcd
     C                   MOVEL     HGPPCD        dforppcd
     C                   MOVEL     HGGTCD        dforgtcd
     C                   MOVEL     HGSDCD        dforsdcd
     C                   MOVEL     HGSMCD        dforsmcd
     C                   ENDIF
      *
      * DESTINATION GROUP
      *
     C     MDDNSN        CHAIN     HSL034D                            94
     C     *IN94         IFEQ      *ON
     C                   MOVEL(P)  'Unknown'     DFDNHGCD
     C                   ELSE
     C                   MOVEL     hgblcd        dfdnblcd
     C                   MOVEL     hgrmcd        dfdnrmcd
     C                   MOVEL     HGHGCD        dfdnhgcd
     C                   MOVEL     HGGSCD        dfdngscd
     C                   MOVEL     HGPTCD        dfdnptcd
     C                   MOVEL     HGPPCD        dfdnppcd
     C                   movel     hggtcd        dfdngtcd
     C                   movel     hgsdcd        dfdnsdcd
     C                   movel     hgsmcd        dfdnsmcd
      *
      *
     C     hgsxcd        chain     hsp056                             92
     C                   if        *in92 = *off
     C                   eval      dfsexds = sxsxds
     C                   else
     C                   eval      dfsexds = 'Unknown'
     C                   endif
      *
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $TOMDY - FLIP DATE TO MMDDYY
      *----------------------------------------------------------------
      *
     C     $TOMDY        BEGSR
      *
     C                   Z-ADD     WKMON         WKMM
     C                   Z-ADD     WKDAY         WKDD
     C                   Z-ADD     WKYER         WKYY
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $EXIT - SUBROUTINE TO SET ON LR AND END JOB
      *---------------------------------------------------------------
      *
     C     $EXIT         BEGSR
     C                   SETON                                        LR
     C                   ENDSR
      *
      *---------------------------------------------------------------
      * $WRMSG - SUBROUTINE TO WRITE ERROR MESSAGES
      *---------------------------------------------------------------
      *
     C     $WRMSG        BEGSR
      *
     C                   CALL      'UT80045J'                           43
     C                   PARM                    MGID
     C                   PARM                    MGDT
     C                   PARM                    ERROR
     C                   PARM      SDPGM         PGM
     C                   PARM      MSGFIL        MSGFL
      *
      * IF CALL TO UT80045J FAILED, A MESSAGE HARDCODED IN THE DSPF
      * COMMAND KEY RECORD WILL BE SET ON. SO, REDISPLAY SCREEN TO USER
      *
     C     *IN43         IFEQ      *ON
     C                   MOVEL     SET1          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      *
      *----------------------------------------------------------------
      * $CLMSG - SUBROUTINE TO CLEAR MESSAGES
      *----------------------------------------------------------------
      *
     C     $CLMSG        BEGSR
      *
     C                   CALL      'UT80045J'                           43
     C                   PARM      *BLANKS       MGI
     C                   PARM      *BLANKS       MGD
     C                   PARM      *ZEROS        ERROR
     C                   PARM      SDPGM         PGM
     C                   PARM      MSGFIL        MSGFL
      *
      * IF CALL TO UT80045J FAILED, A MESSAGE HARDCODED IN THE DSPF
      * COMMAND KEY RECORD WILL BE SET ON. SO, REDISPLAY SCREEN TO USER
      *
     C     *IN43         IFEQ      *ON
     C                   MOVEL     SET1          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * *INZSR - INITIALIZATION SUBROUTINE
      *---------------------------------------------------------------
      *
     C     *INZSR        BEGSR
      *
      *
      * PARM LISTS
      *
     C     *ENTRY        PLIST
     C                   PARM                    C1MVSN
     C                   PARM                    C1MSCD
     C                   PARM                    RTNCD
      *
      * GLOBAL DEFINES
     C                   MOVE      *BLANK        MODE              6            PARM
     C                   MOVE      *BLANK        PGM              10            USED IN MSG
     C                   MOVE      *BLANK        MSGFL            10            USED IN MSG
     C                   MOVE      *BLANK        ROUTNE            6            ROUTINE
     C                   Z-ADD     0             MAXRRN            4 0          REPOSITION
     C                   MOVEL     NO            RESET             1            REPOSITION
     C                   MOVEL     NO            NORECS            1            NO RECORDS
      *
     C     *LIKE         DEFINE    IDFLOW        WKFLOW
     C                   MOVEL     '00'          RTNCD             2            RETURN CODE
     C                   MOVEL     NO            NOTFLG            1
     C     *LIKE         DEFINE    HDRRN1        SVRRN1
     C                   Z-ADD     0             COUNT             2 0
      *
      * ALPHA FIELDS FOR USE AS PARMS
      *
     C                   MOVE      *BLANK        XXMVSN            7
      *
      * TO SUPPORT F5-REFRESH, LOGIC REQUIRES THE NUMBER OF LINES ON
      * THE SUBFILE PAGE AND ALSO THE NUMBER OF LINES LESS 1.  BY
      * SETTING THESE VALUES UP AS CONSTANT WORK FIELDS, THE PROCESSING
      * LOGIC CAN BE STANDARDIZED BETWEEN PROGRAMS. SINCE THIS DISPLAY
      * HAS FOLD/DROP LOGIC, DOUBLE THE SUBFILE PAGE VALUE.
      *
     C                   Z-ADD     4             WKPLIN            2 0          SFLPAG
     C     WKPLIN        SUB       1             WKRLIN            2 0          SFLPAG - 1
      *
      * THE FOLLOWING STANDARD CODE MUST BE INCLUDED TO MAKE THE
      * STANDARD ERROR MESSAGE HANDLING PROGRAM FUNCTION PROPERLY.
      * THIS CODE SETS AND CLEARS THE PROGRAM MESSAGE QUEUE.
      *
     C                   Z-ADD     20            MAXMSG            2 0
     C                   MOVEL     '*'           MSGPGM                         SET QUEUE
     C                   EXSR      $CLMSG                                       CLEAR MSG
      *
     C                   ENDSR
      /EJECT
