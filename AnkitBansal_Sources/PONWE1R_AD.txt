// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PONWE1R
// ?Date: 14.08.2025 Time: 03:38:17
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?***** Change Log and comments
DO;

//?** 02/26/2009 LJB E00039
//?** Recompile - field added to the chg a/r detail ch function
//?Note by Brad:
//?This program was recompiled by Lara, but never promoted in 2009.
//?**************
//?07/20/2016 JBB E6458 - Fix Duplicate Explanations on Chargebacks
//?           Opened up an unused field to store the Chargeback
//?           Invoice Number.  This will link a Chargeback header
//?           record to the related INV detail record.
ENDDO;

EXECUTE FUNCTION(RTV Order for Invc    RT) TYPE(RTVOBJ) FILE(ARBDCPP)           AC1645464;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Invoice_Number);
PARAMETER(LCL.Order_Number_Ref);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize detail screen (existing record)

// DTL.Order Number Ref = LCL.Order Number Ref
DTL.Order_Number_Ref = LCL.Order_Number_Ref;

// DTL.Invoice Number - CB = DTL.A/R Dtl UnUsed Date 3
DTL.Invoice_Number_CB = DTL.A_R_Invoice_Number_CB;

CASE;

// IF DB1.Adjustment Type Code is Chargeback
IF DB1.Adjustment_Type_Code = 'CB';

// AND DB1.A/R Dtl UnUsed Date 3 is Not Entered
AND DB1.A_R_Invoice_Number_CB = *ZERO;

// LCL.Protect Screen Field = CND.No
LCL.Protect_Screen_Field = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Protect Screen Field = CND.Yes
LCL.Protect_Screen_Field = 'Y';

ENDIF;

//?USER: Validate detail screen fields

CASE;

// IF LCL.Protect Screen Field is No
IF LCL.Protect_Screen_Field = 'N';

// AND DTL.Invoice Number - CB is Not equal to zero
AND DTL.Invoice_Number_CB <> *ZERO;

EXECUTE FUNCTION(RTV Order Number Ref   RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC2125231;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Invoice_Number_CB);
PARAMETER('CB');
PARAMETER(LCL.Order_Number_Ref);
{
 //?USER: Processing if Data record not found

 // PAR.Order Number Ref = CON.*ZERO
 PAR.Order_Number_Ref = *ZERO;

 //?USER: Process Data record

 // PAR.Order Number Ref = DB1.Order Number Ref
 PAR.Order_Number_Ref = DB1.Order_Number_Ref;

}


//?SNDERRMSG: CB Invoice not related to Order
CASE;

// IF LCL.Order Number Ref NE DTL.Order Number Ref
IF LCL.Order_Number_Ref <> DTL.Order_Number_Ref;

// Send error message - 'CB Invoice# does not exist for Order# &2'
ERROR(USR4950);
MSGPARM(DTL.Invoice_Number_CB);
MSGPARM(DTL.Order_Number_Ref);

ENDIF;

EXECUTE FUNCTION(RTV Check for Dup Invc RT) TYPE(RTVOBJ) FILE(ARBECPP)          AC2125185;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Invoice_Number);
PARAMETER(DTL.Invoice_Suffix);
PARAMETER(DTL.Invoice_Number_CB);
PARAMETER(LCL.Sequence_Number);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.A/R Dtl UnUsed Date 3 EQ PAR.Invoice Number - CB
 IF DB1.A_R_Invoice_Number_CB = PAR.Invoice_Number_CB;

 // PAR.Sequence Number = DB1.Sequence Number
 PAR.Sequence_Number = DB1.Sequence_Number;

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

 ENDIF;

}


//?SNDERRMSG: CB Invoice Already exists
CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// Send error message - 'CB Invoice Number alreadu used on Sequence# &2'
ERROR(USR4949);
MSGPARM(DTL.Invoice_Number_CB);
MSGPARM(LCL.Sequence_Number);

ENDIF;

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(CHG A/R Detail - All   CH) TYPE(CHGOBJ) FILE(ARBECPP)          AC2125154;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Invoice_Number);
PARAMETER(DTL.Invoice_Suffix);
PARAMETER(DTL.Sequence_Number);
PARAMETER(DTL.Adjustment_Type_Code);
PARAMETER(DTL.Transaction_Amount);
PARAMETER(DTL.A_R_Check_Number);
PARAMETER(DTL.Explanation);
PARAMETER(DTL.Transaction_Date_Code);
PARAMETER(DTL.Payment_Deposit_Date);
PARAMETER(DTL.Deposit_Time);
PARAMETER(DTL.G_L_Post_Date);
PARAMETER(DTL.Bank_Code);
PARAMETER(DTL.GL_Document_Number);
PARAMETER(DTL.Cash_Adj);
PARAMETER(DTL.A_R_Processing_Status);
PARAMETER(DTL.Originating_Program_Name);
PARAMETER(DTL.Effect_on_Account);
PARAMETER(DTL.G_L_Posting_Company);
PARAMETER(DTL.G_L_ID_Code_JDE);
PARAMETER(DTL.Post_Adjustments);
PARAMETER(DTL.A_R_TF_Exempt_Code);
PARAMETER(DTL.A_R_Dtl_UnUsed_Sts_1_1);
PARAMETER(DTL.A_R_Dtl_UnUsed_Sts_2_1);
PARAMETER(DTL.A_R_Dtl_UnUsed_Sts_3_1);
PARAMETER(DTL.A_R_Dtl_UnUsed_Sts_4_2);
PARAMETER(DTL.A_R_Dtl_UnUsed_Sts_5_2);
PARAMETER(DTL.TFS_Adj_Week_Ending_Date);
PARAMETER(DTL.A_R_Orig_Inv_for_CB);
PARAMETER(DTL.Invoice_Number_CB);
PARAMETER(DTL.A_R_Dtl_UnUsed_Date_4);
PARAMETER(DTL.A_R_Dtl_UnUsed_Date_5);
PARAMETER(DTL.G_L_Sub_Ledger_Code);
PARAMETER(DTL.A_R_Dtl_UnUsed_AMT_2);
PARAMETER(DTL.A_R_Dtl_UnUsed_AMT_3);
PARAMETER(DTL.A_R_Dtl_UnUsed_AMT_4);
PARAMETER(DTL.A_R_Dtl_UnUsed_AMT_5);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Job_Time);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Job_Date);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


