// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLCXPVR
// ?Date: 14.08.2025 Time: 02:53:47
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification history
DO;

//? 7/02/2021 JBB WHD80995 - Increase rollover values for BO#
//?                          Recompile only after changing the
//?                          RTVOBJ-Rtv Crt Next BOH      RT to
//?                          rollover when the BO# reaches 999999,
//?                          instead of 99999.
//?RMC 5/26/04 Create the BOH if not found instead of issuing an error.
//?11/02/2020 ISE H16853 - CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


//?USER: Load screen

// DTL.Time USR = DTL.BOL Pln Delv Start Time
DTL.Time_USR = DTL.BOL_Pln_Delv_Start_Time;

// DTL.Date To   USR = DTL.BOL Pln Delv Date
DTL.Date_To_USR = DTL.BOL_Pln_Delv_Date;

// DTL.Kill Date Usr = DTL.BOL Kill Date
DTL.Kill_Date_Usr = DTL.BOL_Kill_Date;

// DTL.Status 1 = CND.Yes
DTL.Status_1 = 'Y';

//?USER: Validate fields

//?new kill date must be within 2 days of original.
//?02/20/2007 SLM - Exclude Sundays for all companies
//?Prior there were no excluding.
// LCL.Days USR = DTL.Kill Date Usr - DTL.BOL Kill Date *DAYS
LCL.Days_USR = DURATION(DTL.Kill_Date_Usr DTL.BOL_Kill_Date 'DY' 1111110 'NONE' 'N' 1);

CASE;

// IF LCL.Days USR is GT 2
IF LCL.Days_USR > 2;

// OR LCL.Days USR is LT -2
OR LCL.Days_USR < -2;

// Send error message - 'Enter a Kill Date within 2 days of the original.'
ERROR(PRK1087);
MSGPARM(DTL.Kill_Date_Usr);

QUIT;

ENDIF;

CASE;

// IF DTL.BOL Kill Date EQ DTL.Kill Date Usr
IF DTL.BOL_Kill_Date = DTL.Kill_Date_Usr;

// Send error message - 'Enter a different Kill Date than the original &1'
ERROR(PRK1086);
MSGPARM(DTL.Kill_Date_Usr);

QUIT;

ENDIF;

//?Get last BOL for producer kill date
// DTL.Buy Order New Usr = CON.*ZERO
DTL.Buy_Order_New_Usr = *ZERO;

// DTL.Buy Order Load New Usr = CON.*ZERO
DTL.Buy_Order_Load_New_Usr = *ZERO;

EXECUTE FUNCTION(Rtv Last BOL f/prd,kl RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1251132;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.PL_Location_Code);
PARAMETER(DTL.Kill_Date_Usr);
PARAMETER(DTL.Buy_Order_New_Usr);
PARAMETER(DTL.Buy_Order_Load_New_Usr);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Process Data record

 // PAR.BOH Buy Order Number = DB1.BOH Buy Order Number
 PAR.BOH_Buy_Order_Number = DB1.BOH_Buy_Order_Number;

 // PAR.BOL Load Number = DB1.BOL Load Number
 PAR.BOL_Load_Number = DB1.BOL_Load_Number;

}


//?Maybe header exists without any loads yet.
CASE;

// IF DTL.Buy Order New Usr is EQ Zero
IF DTL.Buy_Order_New_Usr = *ZERO;

EXECUTE FUNCTION(Rtv BOH For Prdcr/Loc RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1246633;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.Buy_Order_New_Usr);
PARAMETER(DTL.Kill_Date_Usr);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
{
 //?USER: Initialize routine

 // PAR.BOH Buy Order Number = CON.*ZERO
 PAR.BOH_Buy_Order_Number = *ZERO;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

// DTL.Buy Order Load New Usr = DTL.Buy Order Load New Usr + CON.1
DTL.Buy_Order_Load_New_Usr = DTL.Buy_Order_Load_New_Usr + 1;

//?USER: User defined action

CASE;

// IF DTL.Buy Order New Usr is EQ Zero
IF DTL.Buy_Order_New_Usr = *ZERO;

EXECUTE FUNCTION(Rtv Crt Next BOH      RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1260216;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.Buy_Order_New_Usr);
PARAMETER(DTL.Kill_Date_Usr);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv/Upd Next BO       RT) TYPE(RTVOBJ) FILE(PKAZREP)           AB1100930;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.Buy_Order_New_Usr);
 {
  //?USER: Initialize routine

  //?Modification history
  DO;

  //? 7/02/2021 JBB WHD80995 - Increase rollover from 99999 to 9999999
  ENDDO;

  //?USER: Process Data record

  // PAR.BOH Buy Order Number = DB1.Next Buy Order Number
  PAR.BOH_Buy_Order_Number = DB1.Next_Buy_Order_Number;

  CASE;

  // IF DB1.Next Buy Order Number is EQ 9999999
  IF DB1.Next_Buy_Order_Number = 9999999;

  EXECUTE FUNCTION(Chg Next BO           CH) TYPE(CHGOBJ) FILE(PKAZREP)           AB1100933;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(10000);
  PARAMETER(DB1.Last_Tattoo_Nbr);
  PARAMETER(DB1.Current_Production_Date);
  PARAMETER(DB1.Next_Production_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Next Buy Order Number = DB1.Next Buy Order Number + CON.1
  WRK.Next_Buy_Order_Number = DB1.Next_Buy_Order_Number + 1;

  EXECUTE FUNCTION(Chg Next BO           CH) TYPE(CHGOBJ) FILE(PKAZREP)           AB1100933;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(WRK.Next_Buy_Order_Number);
  PARAMETER(DB1.Last_Tattoo_Nbr);
  PARAMETER(DB1.Current_Production_Date);
  PARAMETER(DB1.Next_Production_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  ENDIF;

 }

 EXECUTE FUNCTION(Crt Buy Order Header  CR) TYPE(CRTOBJ) FILE(PKAWCPP)           AB1100514;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(PAR.Buy_Order_New_Usr);
 PARAMETER(DB1.BOH_Buy_Order_Date);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(DB1.BOH_Payment_Type);
 PARAMETER(DB1.BOH_Buy_Order_Type);
 PARAMETER(DB1.BOH_Market_Add_Deduct);
 PARAMETER(DB1.BOH_Status);
 PARAMETER(DB1.BOH_Delv_Plan_Printed);
 PARAMETER(DB1.BOH_Quote_Price_Type);
 PARAMETER(DB1.BOH_Quoted_Base_Mkt_Price);
 PARAMETER(DB1.BOH_Commodity_Market_Code);
 PARAMETER(DB1.BOH_Commodity_Price_Group);
 PARAMETER(DB1.BOH_Market_Date_Method);
 PARAMETER(DB1.BOH_MPR_Reporting_Date);
 PARAMETER(DB1.BOH_Hedge_Date);
 PARAMETER(DB1.BOH_Unused_Date_3);
 PARAMETER(DB1.BOH_Unused_Date_4);
 PARAMETER(DB1.BOH_Unused_Date_5);
 PARAMETER(DB1.BOH_Hedge_Head_Total);
 PARAMETER(DB1.BOH_Hedge_Reference_BO);
 PARAMETER(DB1.BOH_Hedge_Time_hhmm);
 PARAMETER(DB1.BOH_Unused_Nbr_4);
 PARAMETER(DB1.BOH_Unused_Nbr_5);
 PARAMETER(DB1.BOH_Unused_Nbr_6);
 PARAMETER(DB1.BOH_Unused_Nbr_7);
 PARAMETER(DB1.BOH_Unused_Nbr_8);
 PARAMETER(DB1.BOH_Unused_Nbr_9);
 PARAMETER(DB1.BOH_Unused_Nbr_10);
 PARAMETER(DB1.BOH_MPR_Reporting_Time);
 PARAMETER(DB1.BOH_MPR_EST_RPT_STS);
 PARAMETER(DB1.BOH_MPR_Purchase_Type);
 PARAMETER(DB1.BOH_Status_4);
 PARAMETER(DB1.BOH_Status_5);
 PARAMETER(DB1.PPWS_Company_Number);
 PARAMETER(DB1.CW_Year);
 PARAMETER(DB1.CW_Week_Number);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.PC_Contract_Code);
 PARAMETER(DB1.PSC_Sub_Contract_Code);
 PARAMETER(DB1.GN_Genetic_Code);
 PARAMETER(DB1.PO_Option_Code);
 PARAMETER(DB1.CMP_Program_Code);
 PARAMETER(DB1.HB_Buyer_Code);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  //?RMC 6/19/19 whd 49122 Chg time to 1:45 per Jerry L at tf
  //?RMC 9/23/16 R7307   Chg time as of 10/11/2016  per new MPR Rule:
  //?            compile all functions that call this CRTOBJ
  //?     9:55:59 changed to 9:30:59             9:56 changed to 9:31
  //?     1:55:59 changed to 1:30:59
  //?************************************************************************
  //?RMC  Chg time as of 01/10/07:
  //?     9:30:59 changed to 9:55:59             9:31 changed to 9:56
  //?     1:30:59 changed to 1:55:59
  //?*********************************************************************
  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

  //?** create record boh status as open
  // DB1.BOH Status = CND.Open
  DB1.BOH_Status = 'O';

  //?PK0254 -- MPR Reporting Time and Date       RMC 1/19/2001
  //?  If Current Time < 9:30:59 am
  //?    Reporting Date = Current Date
  //?    Reporting Time = 1
  //?  If 9:31 am < Current Time < 1:30:59 pm
  //?    Reporting Date = Current Date
  //?    Reporting Time = 2
  //?*** replace with R7307 -- effective 10/11/2016
  //?  * Otherwise         (These will not be reported at all.)
  //?  * Reporting Date = 0
  //?  * Reporting Time = 0
  //?*** NEW     with R7307 -- effective 10/11/2016
  //?    Reporting Date = Next kill date - skip sat/sun
  //?    Reporting Time = 1
  // Call program Rtv System Date & Tim UP.
  CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
  PARAMETER(LCL.*DATE);
  PARAMETER(LCL.*TIME);

  CASE;

  // IF LCL.*TIME is LE 09:30:59
  IF LCL.*TIME <= 093059;

  // DB1.BOH MPR Reporting Date = LCL.*DATE
  DB1.BOH_MPR_Reporting_Date = LCL.*DATE;

  // DB1.BOH MPR Reporting Time = CND.Reporting Time is 1
  DB1.BOH_MPR_Reporting_Time = 1;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF LCL.*TIME is LE 13:45:59
  IF LCL.*TIME <= 134559;

  //?6/19/19 RMC time was LE 13:30:59
  // DB1.BOH MPR Reporting Date = LCL.*DATE
  DB1.BOH_MPR_Reporting_Date = LCL.*DATE;

  // DB1.BOH MPR Reporting Time = CND.Reporting Time is 2
  DB1.BOH_MPR_Reporting_Time = 2;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?R7307 -- GT 1:30 get reported at next day's 1st submission at 9:30
  // Call program RTV Next WkDy,N=Holidy XF.
  CALL PROGRAM(RTV Next WkDy,N=Holidy XF) ('PBYUXFR');
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(LCL.*DATE);
  PARAMETER(LCL.MPR_Reporting_Date);

  // DB1.BOH MPR Reporting Date = LCL.MPR Reporting Date
  DB1.BOH_MPR_Reporting_Date = LCL.MPR_Reporting_Date;

  // DB1.BOH MPR Reporting Time = CND.Reporting Time is 1
  DB1.BOH_MPR_Reporting_Time = 1;

  ENDIF;

  ENDIF;

 }

}


ENDIF;

CASE;

// IF DTL.Kill Date Usr is Entered
IF DTL.Kill_Date_Usr <> 0;

// AND DTL.Buy Order New Usr is NE Zero
AND DTL.Buy_Order_New_Usr <> *ZERO;

// AND DTL.Buy Order Load New Usr is Entered
AND DTL.Buy_Order_Load_New_Usr <> *ZERO;

EXECUTE FUNCTION(Rtv Next Seq Num      RT) TYPE(RTVOBJ) FILE(PLAECPP)           AB1248408;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.Kill_Date_Usr);
PARAMETER(DTL.Date_To_USR);
PARAMETER(DTL.Time_USR);
PARAMETER(LCL.New_Delivery_Time_Seq_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.DSD Delivery Time Seq = CON.1
 PAR.DSD_Delivery_Time_Seq = 1;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.DSD Delivery Time Seq = DB1.DSD Delivery Time Seq + CON.1
 PAR.DSD_Delivery_Time_Seq = DB1.DSD_Delivery_Time_Seq + 1;

 QUIT;

}


CASE;

// IF DTL.Date To   USR is Not Entered
IF DTL.Date_To_USR = *ZERO;

// Send error message - 'Date is required.'
ERROR(PRK0772);
MSGPARM(DTL.Date_To_USR);

QUIT;

// IF DTL.Time USR is Not Entered
IF DTL.Time_USR = *ZERO;

// Send error message - 'Time is required'
ERROR(PRK1230);
MSGPARM(DTL.Time_USR);

QUIT;

ENDIF;

// Call program Exc Transfer Delivery XF.
CALL PROGRAM(Exc Transfer Delivery XF) ('PLCWXFR');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.BOL_Kill_Date);
PARAMETER(DTL.BOL_HPS_Movement_Number);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.Kill_Date_Usr);
PARAMETER(DTL.Buy_Order_New_Usr);
PARAMETER(DTL.Buy_Order_Load_New_Usr);
PARAMETER(DTL.Status_1);
PARAMETER(DTL.Time_USR);
PARAMETER(DTL.Date_To_USR);
PARAMETER(LCL.New_Delivery_Time_Seq_USR);

ENDIF;

// Send information message - 'Transfer Complete to Buy Order &1 &2 &3'
MESSAGE(PRK1107 *INFO);
MSGPARM(DTL.Buy_Order_New_Usr);
MSGPARM(DTL.Buy_Order_Load_New_Usr);
MSGPARM(DTL.Kill_Date_Usr);

RETURN;

