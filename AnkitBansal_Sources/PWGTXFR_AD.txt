// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PWGTXFR
// ?Date: 14.08.2025 Time: 02:56:24
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modifications and Comments
DO;

//?E13016 JJH 02/26/19 - Upd BOL LivWgt/HdRcvd XF
//?- Renamed this function to Upd BOL LivWgt/HdRcvd XF
//?- In addtion to the current logic, this function will now accumulate
//?  the TH Head Received and update the BOL Head Received for Market
//?  Hogs.
//?E13016 JBB 06/06/18 - Update BOL Live Weight Received
//?- Changed the access path on the Upd BOL Live Wgt Rcvd RT function
//?  to be by Co/BO/Ld sel Unpaid.
//?- Only select records with Hog Class Type = Market
//?E13016 JJH 05/03/18 - Update BOL Live Weight Received
//?- This is a new program that will be ran at the end of Step 2 in
//?  in the Producer Payment Edit.
//?- This function will sum up the TH Live Weight for Market Hogs and
//?  populate this into the BOL Live Wgt Received.
//?- Compnay Value HPEBOLLVSC is Source Code specific, and initially
//?  we will only be updating Source Code = SO.
//?- This program is being ran so that the Freight Allocation which
//?  occurs in Step 3 of the Producer Payment Edit will be able to
//?  correctly allocate the Freight Amount if their are multiple
//?  Tattoo, like a Hold Over.
//?H16853 ISE 11/02/2020 CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
ENDDO;

//?Get Company Value HPEBOLLVSC to determine if the update should
//?occur for the Producer's Source Code.
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPEBOLLVSC');
PARAMETER(LCL.Upd_BOL_Live_Wgt_SrCd_USR);

//?Update BOL Live Wgt Received
EXECUTE FUNCTION(Upd BOL LivWgt/HdRcvd RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1345175;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.Pmt_Current_Payment_Date);
PARAMETER(LCL.Upd_BOL_Live_Wgt_SrCd_USR);
{
 //?USER: Initialize routine

 //?Default values to check for a change in value
 // LCL.BOH Buy Order Number = CON.*ZERO
 LCL.BOH_Buy_Order_Number = *ZERO;

 // LCL.BOL Load Number = CON.*ZERO
 LCL.BOL_Load_Number = *ZERO;

 //?USER: Process Data record

 //?Record selection for processing
 CASE;

 // IF DB1.TH Kill Date GT PAR.TH Kill Date
 IF DB1.TH_Kill_Date > PAR.TH_Kill_Date;

 //?Record selection for processing
 // IF DB1.TH Hog Class Type is Not Market
 IF DB1.TH_Hog_Class_Type = 'R'/'S';

 //?Record selection for processing
 // IF DB1.TH Kill Date LE PAR.TH Kill Date
 IF DB1.TH_Kill_Date <= PAR.TH_Kill_Date;

 //?If Upd BOL Live Wgt SrCd USR is All, OR TH Source Code = Par value
 CASE;

 // IF PAR.Upd BOL Live Wgt SrCd USR is All
 IF PAR.Upd_BOL_Live_Wgt_SrCd_USR = 'ALL';

 // OR DB1.TH Source Code EQ PAR.Upd BOL Live Wgt SrCd USR
 OR DB1.TH_Source_Code = PAR.Upd_BOL_Live_Wgt_SrCd_USR;

 //?If Buy Order Number OR Buy Order Load value changes, update
 CASE;

 // IF DB1.BOH Buy Order Number NE LCL.BOH Buy Order Number
 IF DB1.BOH_Buy_Order_Number <> LCL.BOH_Buy_Order_Number;

 // OR DB1.BOL Load Number NE LCL.BOL Load Number
 OR DB1.BOL_Load_Number <> LCL.BOL_Load_Number;

 EXECUTE FUNCTION(Upd BOL LivWgt/HdRcvd-RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1345179;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 {
  //?USER: Initialize routine

  // LCL.BOL Live Wgt Received = CON.*ZERO
  LCL.BOL_Live_Wgt_Received = *ZERO;

  // LCL.BOL Head Received Market = CON.*ZERO
  LCL.BOL_Head_Received_Market = *ZERO;

  //?USER: Process Data record

  //?Only accumulate Market Hogs
  CASE;

  // IF DB1.TH Hog Class Type is Not Resale
  IF DB1.TH_Hog_Class_Type = 'M'/'S';

  // LCL.BOL Live Wgt Received = LCL.BOL Live Wgt Received + DB1.TH Live Wgt
  LCL.BOL_Live_Wgt_Received = LCL.BOL_Live_Wgt_Received + DB1.TH_Live_Wgt;

  // LCL.BOL Head Received Market = LCL.BOL Head Received Market + DB1.TH Head Received
  LCL.BOL_Head_Received_Market = LCL.BOL_Head_Received_Market + DB1.TH_Head_Received;

  ENDIF;

  //?USER: Exit processing

  EXECUTE FUNCTION(Chg BOL LivWgt/HdRcvd CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1345180;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(LCL.BOL_Live_Wgt_Received);
  PARAMETER(LCL.BOL_Head_Received_Market);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 //?Update the values to check for a change
 // LCL.BOH Buy Order Number = DB1.BOH Buy Order Number
 LCL.BOH_Buy_Order_Number = DB1.BOH_Buy_Order_Number;

 // LCL.BOL Load Number = DB1.BOL Load Number
 LCL.BOL_Load_Number = DB1.BOL_Load_Number;

 ENDIF;

 ENDIF;

 ENDIF;

}


