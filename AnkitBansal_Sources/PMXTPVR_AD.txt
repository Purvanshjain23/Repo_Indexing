// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMXTPVR
// ?Date: 14.08.2025 Time: 03:44:28
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// WRK.Status Flag 10 Y/N = CND.No
WRK.Status_Flag_10_Y_N = 'N';

EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
PARAMETER(JOB.*USER);
PARAMETER('ITPGMR');
PARAMETER(NLL.Company_Number);
PARAMETER(NLL.Warehouse_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// WRK.Status Flag 10 Y/N = CND.Yes
WRK.Status_Flag_10_Y_N = 'Y';

ENDIF;

//?USER: Load screen

// DTL.Date Entered = JOB.*Job date
DTL.Date_Entered = JOB.*Job_date;

//?USER: Validate fields

//?** Email address is required
CASE;

// IF DTL.Email Address is Blank
IF DTL.Email_Address = *BLANK;

// Send error message - 'Email address cannot be left blank. Enter a valid email address.'
ERROR(USR3670);
MSGPARM(DTL.Email_Address);

ENDIF;

//?** F4 Prompt
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Accrual Code
IF PGM.*Cursor_field = DTL.Accrual_Code;

// AND DTL.Accrual Pgm Selection Usr is Brooker Code Selection
AND DTL.Accrual_Pgm_Selection_Usr = 'B';

//?slm 11/30/2012 only allow commission to be selected
//?only allow commission if report is for item
//?Open the selection base on all accrual types
// WRK.Accrual Type = CND.Commission
WRK.Accrual_Type = 'CM';

// Call program SEL Accrual Cde b/Typ SR.
CALL PROGRAM(SEL Accrual Cde b/Typ SR) ('PPBKSRR');
PARAMETER(DTL.Accrual_Code);
PARAMETER(WRK.Accrual_Type);

// DTL.Condition Desc. 1  USR = CON.*BLANK
DTL.Condition_Desc_1_USR = *BLANK;

// DTL.Condition Desc. 1  USR = Condition name of WRK.Accrual Type
DTL.Condition_Desc_1_USR = RTVCND(WRK.Accrual_Type);

// IF PGM.*Cursor field <IS> DTL.Accrual Code
IF PGM.*Cursor_field = DTL.Accrual_Code;

// AND DTL.Accrual Pgm Selection Usr is Customer Pgm Selection
AND DTL.Accrual_Pgm_Selection_Usr = 'C';

//?slm 05/17/2011 Allow all types to be selected
//?Open the selection base on all accrual types
// Call program Zzz Accrual Cde       SR.
CALL PROGRAM(Zzz Accrual Cde       SR) ('PBDSSRR');
PARAMETER(DTL.Accrual_Code);
PARAMETER(DTL.Accrual_Description);
PARAMETER(WRK.Accrual_Type);

// DTL.Condition Desc. 1  USR = CON.*BLANK
DTL.Condition_Desc_1_USR = *BLANK;

CASE;

// IF DTL.Accrual Code is Entered
IF DTL.Accrual_Code <> *BLANK;

// DTL.Condition Desc. 1  USR = Condition name of WRK.Accrual Type
DTL.Condition_Desc_1_USR = RTVCND(WRK.Accrual_Type);

ENDIF;

// IF PGM.*Cursor field <IS> DTL.Ship To Customer
IF PGM.*Cursor_field = DTL.Ship_To_Customer;

//?slm 05/17/2011 Allow all types to be selected
//?Open the selection base on all accrual types
// Call program Zzz Cust Accr by CustomSR.
CALL PROGRAM(Zzz Cust Accr by CustomSR) ('PBGZSRR');
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Date_Entered);

ENDIF;

ENDIF;

CASE;

// IF DTL.Ship To Customer is not equal to zero
IF DTL.Ship_To_Customer <> *ZERO;

EXECUTE FUNCTION(Customer Name DRV) TYPE(DRVFLD)                                AC1631131;
PARAMETER(DTL.Customer_Name_DRV);
PARAMETER(DTL.Ship_To_Customer);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Customer_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Customer Name DRV = CON.*BLANK
DTL.Customer_Name_DRV = *BLANK;

ENDIF;

CASE;

// IF DTL.Accrual Pgm Selection Usr is Customer Pgm Selection
IF DTL.Accrual_Pgm_Selection_Usr = 'C';

//?** specific customer selected then accrual type should be blank
CASE;

// IF DTL.Ship To Customer is not equal to zero
IF DTL.Ship_To_Customer <> *ZERO;

// AND DTL.Accrual Type NE WRK.BLANK
AND DTL.Accrual_Type <> WRK.BLANK;

// Send error message - 'Accrual Type not Allowed'
ERROR(USR4558);
MSGPARM(DTL.Accrual_Type);

ENDIF;

//?** *all customer then accrual type is required
CASE;

// IF DTL.Ship To Customer is not equal to zero
IF DTL.Ship_To_Customer <> *ZERO;

// AND DTL.Accrual Type NE WRK.BLANK
AND DTL.Accrual_Type <> WRK.BLANK;

// Send error message - 'Accrual Type Req for Accrual Code Search.'
ERROR(USR3774);
MSGPARM(DTL.Accrual_Type);

ENDIF;

//?Accrual type must have one customer accraul
CASE;

// IF DTL.Accrual Type NE WRK.BLANK
IF DTL.Accrual_Type <> WRK.BLANK;

// AND DTL.Ship To Customer NE WRK.ZERO
AND DTL.Ship_To_Customer <> WRK.ZERO;

EXECUTE FUNCTION(Val CustAccr ATyp ExisRT) TYPE(RTVOBJ) FILE(OMHOREP)           AC2057625;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Accrual_Type);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Accrual Info       RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1681415;
 PARAMETER(DB1.Accrual_Code);
 PARAMETER(NLL.Accrual_Description);
 PARAMETER(NLL.Automatic_Accrual_Y_N);
 PARAMETER(NLL.Print_On_Invoice_Y_N);
 PARAMETER(NLL.Rate_Usage);
 PARAMETER(NLL.Add_on_Allowance);
 PARAMETER(LCL.Accrual_Type);
 PARAMETER(NLL.Sub_Ledger_Code);
 PARAMETER(NLL.Reverse_Accrual_Code);
 PARAMETER(NLL.UOM_Primary_Dft);
 PARAMETER(NLL.Affect_Invoice_Price);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: DB1);

 }

 //?If one is found then allow the accrual type
 CASE;

 // IF LCL.Accrual Type EQ PAR.Accrual Type
 IF LCL.Accrual_Type = PAR.Accrual_Type;

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// Send error message - 'Select Customer or Accrual Type'
ERROR(USR4559);
MSGPARM(DTL.Ship_To_Customer);

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF DTL.Accrual Pgm Selection Usr is Brooker Code Selection
IF DTL.Accrual_Pgm_Selection_Usr = 'B';

// WRK.Accrual Code = CON.*BLANK
WRK.Accrual_Code = *BLANK;

//?Accrual for brooker for commission only
CASE;

// IF DTL.Accrual Code NE WRK.Accrual Code
IF DTL.Accrual_Code <> WRK.Accrual_Code;

EXECUTE FUNCTION(Val Accr Cde by Type  RT) TYPE(RTVOBJ) FILE(OMHLREP)           AC1957938;
PARAMETER('CM');
PARAMETER(DTL.Accrual_Code);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF WRK.Record Found USR is Record Found
IF WRK.Record_Found_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Accrual code &1 not allowed for this option'
ERROR(USR4177);
MSGPARM(DTL.Accrual_Code);

ENDIF;

ENDIF;

//?Accrual type not allowed on a broker selection
CASE;

// IF DTL.Accrual Type NE WRK.BLANK
IF DTL.Accrual_Type <> WRK.BLANK;

// Send error message - 'Accrual Type not Allowed'
ERROR(USR4558);
MSGPARM(DTL.Accrual_Type);

ENDIF;

ENDIF;

//?CALC: Screen function fields

// DTL.Customer Name DRV = CON.*BLANK
DTL.Customer_Name_DRV = *BLANK;

CASE;

// IF DTL.Ship To Customer is not equal to zero
IF DTL.Ship_To_Customer <> *ZERO;

EXECUTE FUNCTION(Customer Name DRV) TYPE(DRVFLD)                                AC1631131;
PARAMETER(DTL.Customer_Name_DRV);
PARAMETER(DTL.Ship_To_Customer);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Customer_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


ENDIF;

// DTL.Text 1 USR = CON.*BLANK
DTL.Text_1_USR = *BLANK;

CASE;

// IF DTL.Accrual Type NE WRK.BLANK
IF DTL.Accrual_Type <> WRK.BLANK;

// DTL.Text 1 USR = Condition name of DTL.Accrual Type
DTL.Text_1_USR = RTVCND(DTL.Accrual_Type);

ENDIF;

//?USER: Validate relations

//?** Email address is required
CASE;

// IF DTL.Email Address is Blank
IF DTL.Email_Address = *BLANK;

// Send error message - 'Email address cannot be left blank. Enter a valid email address.'
ERROR(USR3670);
MSGPARM(DTL.Email_Address);

ENDIF;

//?USER: User defined action

// PAR.Date 1          PASS  USR = DTL.Date Entered
PAR.Date_1_PASS_USR = DTL.Date_Entered;

// WRK.Numeric Value 1 USR = DTL.Ship To Customer
WRK.Numeric_Value_1_USR = DTL.Ship_To_Customer;

// WRK.Customer Name         USR = DTL.Customer Name DRV
WRK.Customer_Name_USR = DTL.Customer_Name_DRV;

//?Broker selection
CASE;

// IF DTL.Accrual Pgm Selection Usr is Brooker Code Selection
IF DTL.Accrual_Pgm_Selection_Usr = 'B';

// Call program BLD WF Brkr Comm Rate  CL.
SBMJOB;
CALL PROGRAM(BLD WF Brkr Comm Rate  CL) ('PMXVUPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(DTL.Accrual_Code);
PARAMETER(PAR.Date_1_PASS_USR);
PARAMETER(DTL.Email_Address);
SBMJOBOVR JOB(BRKRMATRIX);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBOVR LOG(4;
SBMJOBOVR 10;
SBMJOBOVR *SECLVL);
SBMJOBEND;

CASE;

// IF WRK.Return Code Usr is *Error Occured on Call
IF WRK.Return_Code_Usr = 'Y2U0032';

// Send error message - 'Error creating spreadsheet. Contact I.S. if problem persists.'
ERROR(USR4010);

// IF WRK.Return Code Usr is Not Blank
IF WRK.Return_Code_Usr <> *BLANK;

//?** Spreadsheet not created
// Send error message - 'Broker Commission Matrix error. Spreadsheet not created.'
ERROR(USR4011);

// IF *OTHERWISE
IF *OTHERWISE;

// Send information message - 'Report has been emailed'
MESSAGE(USR3896 *INFO);

ENDIF;

ENDIF;

//?Customer Selection
CASE;

// IF DTL.Accrual Pgm Selection Usr is Customer Pgm Selection
IF DTL.Accrual_Pgm_Selection_Usr = 'C';

// Call program BLD WF Brkr Cust Rate  CL.
SBMJOB;
CALL PROGRAM(BLD WF Brkr Cust Rate  CL) ('PBGDUPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(DTL.Accrual_Code);
PARAMETER(PAR.Date_1_PASS_USR);
PARAMETER(WRK.Numeric_Value_1_USR);
PARAMETER(DTL.Email_Address);
PARAMETER(WRK.Customer_Name_USR);
SBMJOBOVR JOB(CUSTMATRIX);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBOVR LOG(4;
SBMJOBOVR 10;
SBMJOBOVR *SECLVL);
SBMJOBEND;

ENDIF;

