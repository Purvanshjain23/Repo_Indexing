      *
      * SYSTEM:      Triumph Foods
      * PROGRAM:     TF421
      * TITLE:       EOPFEES: Specify Verification for Freight Variance Report
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     04/24/06
      *
      *
      * FUNCTION: This Specify uses an edit record format to allow the user
      *           to specify options for generating the report.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 01/29/07  LeAnne Ramsey
      *           The LDA "period end" date was inadvertantly removed from
      *           the LDA.
      *
      * 04/16/07  LeAnne Ramsey
      *           Recompile only. Field "Exclude from Mix Flag' was renamed to
      *           Mix Flag in the Freight Variance file.
      *
      * 05/07/09  LeAnne Ramsey
      *           Changed the Print logic to match Meat Costing.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Ftfd421    cf   e             workstn infds(iofeed)
      *
      *
     Ftfl017a   if   e           k disk
      *    Freight variance
      *
      *
     Ftfp099    if   e           k disk
      *    Function control
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  Compile time array for SBMJOB used in QCMDEXC
      *---------------------------------------------------------------
     D cmd             s              1    dim(80) ctdata perrcd(80)
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D maxmsg          s              2  0  inz(20)
      *
      *
      * Parm fields
      *
     D xxyr            s                   like(d1yr)
     D xxpe            s                   like(d1pe)
      *
     D xxpbdt          s              8  0
     D xxpbsyndt       s              7  0
     D xxpbmdy         s              6  0
      *
     D xxpedt          s              8  0
     D xxpesyndt       s              7  0
     D xxpemdy         s              6  0
      *
     D xxrdfl          s                   like(d1rdfl)
     D xxrdds          s                   like(d1rdds)
      *
      *
      *  Parms for use with QCMDEXC.  'LENGTH' is the length of the
      *  command that will be issued with QCMDEXC.  QCMDEXC requires
      *  the field containing length to be defined as 15 with 5 decimal
      *  positions.  The field 'CMDSBM' will hold the values of the
      *  submit job command when passed as a parm on the call to
      *  QCMDEXC.
      *
     D length          s             15  5 inz(80)
     D cmdsbm          s             80
      *
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      * Data areas
      *---------------------------------------------------------------
      *
      *---------------------------------------------------------------
      * Local data area.
      *---------------------------------------------------------------
      *
     Dlda             uds                  dtaara(*lda)
     D  lddemand               1      1
     D  ldyr                   2      5  0
     D  ldpe                   6      7  0
      *
     D  ldpbmdy               16     21  0
     D  ldpedt                29     36  0
      *
     D  ldpemdy               37     42  0
      *
     D  ldrdfl               300    300
     D  ldemail              350    399
      *
     D  ldoutq               401    410
     D  ldhold               411    414
     D  ldsave               415    418
     D  ldcopy               419    419  0
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
     C
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the error
      * message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to CRT.
      *
     C                   write     tf421k1
     C                   write     tf421ec
     C                   exfmt     tf421r1
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
      *
     C                   when      *in17 = *on                                  F17-print options
     C                   call      'RO890'
     C                   eval      routne = scrn1
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                       API
     C                   eval      routne = scrn1
     C                   other
      *
     C                   eval      routne = edit1
     C                   endsl
      *
      * Bring in the LDA to pick up any printer changes the user may
      * have made from called programs
      *
     C                   in        lda
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Edit screen 1 input fields
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * Validate required fields:
      *   1) from year/period
      *   2) report or download flag
      *   3) email address
      *
     C                   exsr      $yrpe
     C                   exsr      $rdfl
     C                   exsr      $email
      *
      *
      * If there are no errors, execute the subroutine to submit the report.
      *
     C                   if        error = 0 and *in08 = *on                    If no error
     C                   exsr      $proc1
     C                   endif                                                  If no error
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Validate 'From' Year/Period
      *----------------------------------------------------------------
      *
      * Validations:
      *  1) required
      *  2) cannot be negative
      *  3) must be a valid year/period in the Datamart Calendar file
      *  4) must have Freight Variance data
      *  5) Freight Variance data must be the "Final" data
      *
     C     $yrpe         begsr
      *
     C                   z-add     0             ldyr
     C                   z-add     0             ldpe
      * Period
     C                   select
     C                   when      d1pe = 0
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
      *
     C                   when      d1pe < 0
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   endsl
      *
      * Year
     C                   select
     C                   when      d1yr = 0
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
      *
     C                   when      d1yr < 0
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   endsl
      *
      * If no errors so far, call program to verify that this Year/Period
      * exist in Datamart Calendar file.
      *
     C                   if        *in32 = *off and *in33 = *off                If OK so far
     C                   call      'TF816'
     C                   parm      d1yr          xxyr
     C                   parm      d1pe          xxpe
     C                   parm      0             xxpbdt
     C                   parm      0             xxpbsyndt
     C     ldpbmdy       parm      0             xxpbmdy
     C     ldpedt        parm      0             xxpedt
     C                   parm      0             xxpesyndt
     C     ldpemdy       parm      0             xxpemdy
      *
      * If Year/Period are not in the Datamart Calendar file, issue message.
      *
     C                   if        xxpedt <> 0                                  If OK
     C                   z-add     d1yr          ldyr
     C                   z-add     d1pe          ldpe
     C                   else
     C                   seton                                        3233
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08090'
     C                   endif
     C                   endif                                                  If OK
      *
     C                   endif                                                  If OK so far
      *
      * If no errors so far, check that Freight Variance data exists for this
      * Year/Period. If data does exist, make sure it is "Final" data.
      *
     C                   if        *in32 = *off and *in33 = *off                If still good
     C     key01         chain     tfl017a                            92
      *
     C                   select
     C                   when      *in92 = *on
     C                   seton                                        3233
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08080'
     C                   endif
     C                   other
      *
      * Retrieve the EOP Function Control record to check that the Period the
      * user has selected has been closed.
      *
     C     'EOPFEES   '  chain     tfp099                             92
     C                   if        *in92 = *on or
     C                             xxpbdt > fnledt
     C                   seton                                        3233
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08083'
     C                   endif
     C                   endif
      *
     C                   endsl
     C                   endif                                                  If still good
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Validate Report/Download flag
      *----------------------------------------------------------------
      *
     C     $rdfl         begsr
      *
     C                   move      *blank        d1rdds
      *
     C                   select
     C                   when      d1rdfl = 'R'
     C                   eval      d1rdds = 'Report'
      *
     C                   when      d1rdfl = 'D'
     C                   eval      d1rdds = 'Download'
     C                   other
      *
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08081'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Email address
      *----------------------------------------------------------------
      *
     C     $email        begsr
      *
     C                   if        d1rdfl = 'D' and d1email = *blank
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * F4 prompt on screen 1
      *----------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      * Report or Download
      *
     C                   select
     C                   when      fld = 'D1RDFL'
     C                   call      'TF522'
     C                   parm      *blank        xxrdfl
     C                   parm      *blank        xxrdds
     C                   seton                                        51
     C                   if        xxrdfl <> *blank
     C                   move      xxrdfl        d1rdfl
     C                   move      xxrdds        d1rdds
     C                   endif
     C                   other
      *
      * F4 not valid for this field, so issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09011'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Process user's request
      *---------------------------------------------------------------
      *
      * This subroutine is only executed if the user submits the listing
      *
     C     $proc1        begsr
      *
      * Move submission values into LDA
      *
     C                   move      'D'           lddemand
     C                   move      d1rdfl        ldrdfl
     C                   move      d1email       ldemail
     C                   out       lda
      *
      * Move the 80-character compile time array 'CMD' to an
      * 80-character field for passing as a parm with QCMDEXC.
      *
     C                   movea     cmd           cmdsbm
     C                   call      'QCMDEXC'
     C                   parm                    cmdsbm
     C                   parm                    length
      *
      * Issue the standard request submission message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09003'
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Seton last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *   none
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    d1yr
     C                   kfld                    d1pe
      *
      * Retrieve/initialize "printer" fields in the LDA
      *
     C                   call      'RO891CL'
     C                   in        lda
      *
      * Initialize LDA fields
      *
     C                   z-add     0             ldyr
     C                   z-add     0             ldpe
     C                   z-add     0             ldpbmdy
     C                   z-add     0             ldpedt
     C                   z-add     0             ldpemdy
     C                   out       lda
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
      *****************************************************************
      * COMPILE TIME ARRAY 'CMD' USED IN QCMDEXC
      *****************************************************************
** CMD table 'CMD' submits listing when F8 selected
SBMJOB CMD(CALL PGM(TF421CL))  JOB(FREIGHTV) JOBQ(*JOBD)
