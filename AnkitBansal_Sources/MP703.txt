      *****************  RPG PROGRAM HEADING  ************************
      *
      * ENVIRONMENT:  PORK DIVISION
      * SYSTEM:       AS/400
      * PROGRAM:      MP703
      * DESCRIPTION:  MP2: View Invoices for a Receipt
      * PROGRAMMER:   LeAnne Fedor
      * DATE:         04/03/02
      *
      *
      * FUNCTION: This is a View that displays the records in the MP2 Invoice Detail
      *           file for a specific record in the MP2 Purchase Order Detail file.
      *
      *           Restrictors:
      *               System purchase order number
      *               Receipt number
      *               Serial number
      *
      *           Positioners:
      *               None
      *
      *           Selectors:
      *               None
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 09/24/02  LeAnne Fedor
      *           All amount fields in the database increased in size from 7,2 to 9,2.
      *           So, amount on the screen increase; recompiled screen/program.
      *
      * 03/30/11  Barb Gutierrez
      *           Increased qty and unit cost fields but no changes were necessary to
      *           screen or rpg.  Recompiled only.  E001398
      *
      * 03/06/14  LeAnne Ramsey  (E2992)
      *           Added MP2 Purchasing Center and Accounting Company on Control Header.
      *
      * 03/26/19  Brad Baden     (E14631)
      *           Change "move" to "movel" to field C1PCID
      *
      * 05/25/21  Danny Nguyen   (S17068)
      *           DBFC on MPP103 file. Unit Cost Per Item 'PDITEMRT' field length changed
      *           from 9.4 to 11.4.
      *           DBFC on MPP104 file. The following field lengths changed from 9.2 to 11.2:
      *             Invoiced Amount 'IHINAM'.
      *             Amount To Apply 'IHTAAM'.
      *             Applied Amount 'IHAPAM'.
      *             Sales Tax Amount 'IHSTAM'.
      *             Shipping/Handling Amount 'IHSHAM'.
      *           DBFC on MPP105 file. Applied Amount 'IDAPAM' field length changed from
      *           9.2 to 11.2.
      *           Recompile only.
      *
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fmpd703    cf   e             workstn
     F                                     sfile(mp703s1:hdrrn1)
     F                                     infds(iofeed)
      *
      *
     Fmpp102    if   e           k disk
      *  MP2: Purchase order header
      *
      *
     Fmpp103    if   e           k disk
      *  MP2: Purchase order detail
      *
      *
     Fmpp104    if   e           k disk
      *  MP2: Invoice header
      *
      *
     Fmpl105a   if   e           k disk
      *  MP2: Invoice detail
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
     D maxrrn          s              4  0
     D reset           s              1    inz('N')
     D norecs          s              1    inz('N')
     D count           s              2  0
     D wkflow          s                   like(idflow)
     D svrrn1          s                   like(hdrrn1)
      *
      *
      * Workfields required for subfile paging--see initialization
      * subroutine.
      *
     D wkplin          s              2  0
     D wkrlin          s              2  0
      *
      *
      * Workfields for date manipulation
      *
     D wkisodate       s               D   datfmt(*iso)
      *
      *
      * Parm fields
      *
     D xxposn          s                   like(idposn)
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * Retrieve data from the Purchase Order Header file.
      *
     C     xxposn        chain     mpp102                             92
     C                   if        *in92 = *off                                 If exists
     C                   z-add     phjdvnno      c1jdvnno
     C                   move      phpono        c1pono
     C***  E14631 JBB    move      phpcid        c1pcid
     C                   movel     phpcid        c1pcid
     C                   z-add     phacono       c1acono
     C                   endif                                                  If exists
      *
      * Retrieve data from the Purchase Order detail record.
      *
     C     key01         chain     mpp103                             92
     C                   if        *in92 = *off                                 If exists
     C                   move      pdttcd        c1ttcd
     C                   move      pditemno      c1itemno
     C                   move      pditemds      c1itemds
     C                   z-add     pditemrt      c1itemrt
     C                   z-add     pdtrqt        c1trqt
     C                   move      pdmcu         c1mcu
     C                   move      pdobj         c1obj
     C                   move      pdsub         c1sub
     C                   endif                                                  If exists
      *
      * Clear and fill the subfile
      *
     C                   exsr      $clr1
     C                   exsr      $frsh1
      *
      * Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to crt
      *
     C                   write     mp703k1
     C                   write     mp703ec
     C                   exfmt     mp703c1
      *
      * Save the value of the lowest subfile rrn on the screen for
      * later repositioning of the subfile
      *
     C                   eval      wkflow = idflow
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      routne = exit
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   movel     yes           reset
     C                   eval      routne = set1
      *
     C                   when      *in25 = *on                                  F25-rollup
     C                   exsr      $load1
     C                   other
      *
      * User has pressed enter
      *
     C                   eval      routne = set1
     C                   move      yes           reset
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Clear subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $clr1         begsr
      *
     C                   z-add     0             svrrn1
      *
     C                   clear                   mp703s1
     C                   seton                                        83        sflclr
     C                   write     mp703c1
     C                   setoff                                       818283
      *                                                    81=sfldsp
      *                                                    82=sflend
      *                                                    83=sflclr
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Refresh/fill the subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $frsh1        begsr
      *
      * Set position in Invoice Detail file.
      *
     C     key01         setll     mpl105a
      *
      *
      * The field 'reset' is a flag field to indicate whether you are
      * attempting to reposition the user close to where he was in the
      * subfile.
      * The lowest subfile RRN on the screen from the DSPF feedback
      * area (IDFLOW) was retrieved earlier and put in WKFLOW.
      * Add to WKFLOW the number of lines on your subfile page or the
      * number less 1 to determine a subfile RRN to reposition to.
      *
      *
     C                   if        reset = yes
     C                   eval      maxrrn = wkflow + wkrlin
     C                   else
      *
      * Don't try to reposition the user, just start the subfile over
      *
     C                   eval      maxrrn = wkplin
     C                   endif
      *
      * Load the subfile until you have the required number of records.
      * The number will depend on whether uou are repositioning the
      * subfile or not. Stop if you get to the end of the subfile.
      *
     C                   dou       svrrn1 >= maxrrn or *in82 = *on
     C                   exsr      $load1
     C                   enddo
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Load subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $load1        begsr
      *
     C                   z-add     svrrn1        hdrrn1
      *
      * Set the count of records on the subfile page to zero.
      *
     C                   eval      count = 0
      *
      * Fill the subfile until the end of the database file or
      * you have filled all the lines on the subfile page.
      *
     C                   setoff                                       82
     C                   dou       *in82 = *on or count >= wkplin               Do fill
     C     key01         reade     mpl105a                                82
     C                   if        *in82 = *off                                 If read
      *
     C                   add       1             count
     C                   add       1             hdrrn1
     C                   move      idinno        d1inno
     C                   z-add     idinqt        d1inqt
     C                   move      idovfl        d1ovfl
     C                   z-add     idapam        d1apam
      *
      * Retrieve invoice date from the invoice header record and flip to MMDDYY.
      *
     C                   z-add     0             d1inmdy
      *
     C     key02         chain     mpp104                             92
     C                   if        *in92 = *off                                 If exists
     C     *iso          test(d)                 ihindt                 92
     C                   if        *in92 = *off                                 If OK date
     C                   move      ihindt        wkisodate
     C     *mdy          move      wkisodate     d1inmdy
     C                   endif                                                  If OK date
     C                   endif                                                  If exists
      *
     C                   write     mp703s1
     C                   seton                                        81
      *
      * For positioning, place the subfile relative record number into
      * the sflrcdnbr field (hdpag1)
      *
     C                   z-add     hdrrn1        hdpag1
      *
     C                   endif                                                  If read
     C                   enddo                                                  Do fill loop
      *
      * If no records were written to the subfile, then issue
      * the standard message 'No data to Display'.
      *
     C                   if        hdrrn1 = 0                                   If no recs
     C                   movel     yes           norecs
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09002'
     C                   endif
      *
     C                   else
     C                   movel     no            norecs
     C                   endif                                                  If no recs
      *
     C                   z-add     hdrrn1        svrrn1
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Set on last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
     C                   parm                    xxposn
     C                   parm                    c1rcno
     C                   parm                    c1serno
      *
      *
     C     key01         klist
     C                   kfld                    xxposn
     C                   kfld                    c1rcno
     C                   kfld                    c1serno
      *
      *
     C     key02         klist
     C                   kfld                    xxposn
     C                   kfld                    d1inno
      *
      *
      * To support F5-Refresh, logic requires the number of lines on
      * the subfile page and also the number of lines less 1.  By
      * setting these values up as constant work fields, the processing
      * logic can be standardized between programs.
      *
     C                   z-add     5             wkplin                         sflpag
     C     wkplin        sub       1             wkrlin                         sflpag - 1
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
