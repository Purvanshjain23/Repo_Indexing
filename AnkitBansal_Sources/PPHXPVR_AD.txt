// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPHXPVR
// ?Date: 14.08.2025 Time: 03:40:42
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('C/S');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

EXECUTE FUNCTION(VAL Set Int.Acc No Hdg IF) TYPE(EXCINTFUN)                     AC1460523;
PARAMETER('TFCLS');
PARAMETER(NLL.Company_Number);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(NLL.Allow_Multi_Company);
PARAMETER(NLL.Default_Printer);
PARAMETER(NLL.Salesperson_Code);
PARAMETER(NLL.Name);
PARAMETER(NLL.System_Value_Alpha);
PARAMETER(LCL.Access_Denied_Y_N);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Appl No Exit  IF) TYPE(EXCINTFUN)                     AC1460535;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(WRK.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 PARAMETER(WRK.Access_Denied_Y_N);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // PAR.Access Denied (Y/N) = CND.yes
  PAR.Access_Denied_Y_N = 'Y';

  //?User Profile Record Not found
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Access Denied (Y/N) = CND.no
  PAR.Access_Denied_Y_N = 'N';

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // PAR.Access Denied (Y/N) = CND.no
  PAR.Access_Denied_Y_N = 'N';

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Access Denied (Y/N) = CND.yes
  PAR.Access_Denied_Y_N = 'Y';

  ENDIF;

  CASE;

  // IF LCL.Company Number is greater than zero
  IF LCL.Company_Number > *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  EXECUTE FUNCTION(RTV Prod Whse for Co  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1757887;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Shipping_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF DB1.Record Status is Active
   IF DB1.Record_Status = 'A';

   CASE;

   // IF DB1.Production Warehouse Code is Warehouse Code not Blank
   IF DB1.Production_Warehouse_Code <> *BLANK;

   // PAR.Warehouse Code = DB1.Production Warehouse Code
   PAR.Warehouse_Code = DB1.Production_Warehouse_Code;

   QUIT;

   ENDIF;

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 // PAR.Company Number = WRK.Company Number
 PAR.Company_Number = WRK.Company_Number;

 // PAR.Access Denied (Y/N) = WRK.Access Denied (Y/N)
 PAR.Access_Denied_Y_N = WRK.Access_Denied_Y_N;

 //?If access denied is no, rtv co. name
 CASE;

 // IF WRK.Access Denied (Y/N) is no
 IF WRK.Access_Denied_Y_N = 'N';

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(WRK.Company_Number);
 PARAMETER(PAR.Name);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

}


CASE;

// IF LCL.Access Denied (Y/N) is no
IF LCL.Access_Denied_Y_N = 'N';

// LCL.Display Flag = CND.Yes
LCL.Display_Flag = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Display Flag = CND.No
LCL.Display_Flag = 'N';

ENDIF;

//?***** Change Log and Comments
DO;

//?*****
//?** 05/02/2007 LJB OMS011
//?** Added TF Meat Cost Group to the prompt screen. Passed it to the
//?** report program as well. If Meat Cost Group is entered and it
//?** is Inactive, send "Not found or Inactive" message to the screen.
//?**
//?** 03/21/2008 SLM misc stuff for alice E00124
//?*****
ENDDO;

//?USER: Load screen

CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// DTL.Item Type Desc Usr = CON.Both FG/WIP
DTL.Item_Type_Desc_Usr = 'Both FG/WIP';

// DTL.Report Type = CND.Detail
DTL.Report_Type = 'D';

// DTL.Print Information USR = CND.Selected Items
DTL.Print_Information_USR = 'S';

EXECUTE FUNCTION(Report Type Desc DRV) TYPE(DRVFLD)                             AC1713261;
PARAMETER(DTL.Report_Type_Desc_DRV);
PARAMETER(DTL.Report_Type);
{
 //?Calculate derived field

 // PAR.Report Type Desc DRV = Condition name of PAR.Report Type
 PAR.Report_Type_Desc_DRV = RTVCND(PAR.Report_Type);

}


EXECUTE FUNCTION(Print Info Desc DRV) TYPE(DRVFLD)                              AC1713262;
PARAMETER(DTL.Print_Info_Desc_DRV);
PARAMETER(DTL.Print_Information_USR);
{
 //?Calculate derived field

 // PAR.All/Select/Omit Desc DRV = Condition name of PAR.All/Select/Omit Sts USR
 PAR.Print_Info_Desc_DRV = RTVCND(PAR.Print_Information_USR);

}


// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

// DTL.Active Status Flag = CND.Yes
DTL.Active_Status_Flag = 'Y';

// DTL.Include Credit Items USR = CND.yes
DTL.Include_Credit_Items_USR = 'Y';

// DTL.Change Flag USR = CND.No
DTL.Change_Flag_USR = 'N';

ENDIF;

//?USER: Process command keys

//?F4=PROMPT
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

//?TF Classification
CASE;

// IF PGM.*Cursor field <IS> DTL.TF Classification USR
IF PGM.*Cursor_field = DTL.TF_Classification_USR;

// Call program Zzz TF Classification SR.
CALL PROGRAM(Zzz TF Classification SR) ('PPGRSRR');
PARAMETER(DTL.TF_Classification_USR);

ENDIF;

//?Item Type Active
CASE;

// IF PGM.*Cursor field <IS> DTL.Item Structure Type USR
IF PGM.*Cursor_field = DTL.Item_Structure_Type_USR;

// Call program SEL Item Type Active   SR.
CALL PROGRAM(SEL Item Type Active   SR) ('PDENSRR');
PARAMETER(DTL.Item_Structure_Type_USR);

ENDIF;

//?Item Group Active
CASE;

// IF PGM.*Cursor field <IS> DTL.Item Structure Group USR
IF PGM.*Cursor_field = DTL.Item_Structure_Group_USR;

// Call program SEL Item Group Active  SR.
CALL PROGRAM(SEL Item Group Active  SR) ('PDEMSRR');
PARAMETER(DTL.Item_Structure_Group_USR);

ENDIF;

//?Item Class Active
CASE;

// IF PGM.*Cursor field <IS> DTL.Item Structure Class USR
IF PGM.*Cursor_field = DTL.Item_Structure_Class_USR;

// Call program SEL Item Class Active  SR.
CALL PROGRAM(SEL Item Class Active  SR) ('PDELSRR');
PARAMETER(DTL.Item_Structure_Class_USR);

ENDIF;

//?** Active only unless specifically requested otherwise
CASE;

// IF DTL.Active Status Flag is Yes
IF DTL.Active_Status_Flag = 'Y';

// OR DTL.Active Status Flag is Active
OR DTL.Active_Status_Flag = 'A';

// OR DTL.Active Status Flag is Blank
OR DTL.Active_Status_Flag = *BLANK;

// WRK.USR Record Status = CND.Active
WRK.USR_Record_Status = 'A';

//?** Active only unless specifically requested otherwise
// IF DTL.Active Status Flag is No
IF DTL.Active_Status_Flag = 'N';

// WRK.USR Record Status = CND.*blank
WRK.USR_Record_Status = *BLANK;

//?** Active only unless specifically requested otherwise
// IF DTL.Active Status Flag is Inactive
IF DTL.Active_Status_Flag = 'I';

// WRK.USR Record Status = CND.Inactive
WRK.USR_Record_Status = 'I';

//?** Active only unless specifically requested otherwise
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Record Status = CND.Active
WRK.USR_Record_Status = 'A';

ENDIF;

//?** TF Meat Cost Group
CASE;

// IF PGM.*Cursor field <IS> DTL.TFMC Group Code
IF PGM.*Cursor_field = DTL.TFMC_Group_Code;

// Call program SEL TF Meat Cost Group SR.
CALL PROGRAM(SEL TF Meat Cost Group SR) ('PMGFSRR');
PARAMETER(DTL.TFMC_Group_Code);
PARAMETER(DTL.TFMC_Group_Description);
PARAMETER(WRK.Record_Status);
PARAMETER(WRK.USR_Record_Status);

ENDIF;

ENDIF;

//?F21=Print TF Exception Prompt
CASE;

// IF DTL.*CMD key is CF21
IF DTL.*CMD_key = '21';

// Call program Prt TF Class Excep    PV.
CALL PROGRAM(Prt TF Class Excep    PV) ('PPH3PVR');

QUIT;

ENDIF;

//?USER: Validate fields

//?VAL:  TF Classification
CASE;

// IF DTL.TF Classification USR is Entered
IF DTL.TF_Classification_USR <> *BLANK;

EXECUTE FUNCTION(TF Class Desc DRV) TYPE(DRVFLD)                                AC1707607;
PARAMETER(DTL.TF_Class_Desc_DRV);
PARAMETER(DTL.TF_Classification_USR);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv TF Class Desc     RT) TYPE(RTVOBJ) FILE(PPAMREP)           AC1707658;
 PARAMETER(PAR.TF_Classification_Code);
 PARAMETER(PAR.TF_Class_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


CASE;

// IF DTL.TF Class Desc DRV is equal to blank
IF DTL.TF_Class_Desc_DRV = *BLANK;

// Send error message - 'TF Classification not found.'
ERROR(USR3376);
MSGPARM(DTL.TF_Classification_USR);

ENDIF;

ENDIF;

//?VAL:  Item Structure Type
CASE;

// IF DTL.Item Structure Type USR is Entered
IF DTL.Item_Structure_Type_USR <> *ZERO;

EXECUTE FUNCTION(Item Str Type Desc DRV) TYPE(DRVFLD)                           AC1705175;
PARAMETER(DTL.Item_Str_Type_Desc_DRV);
PARAMETER(DTL.Item_Structure_Type_USR);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Type Description   RT) TYPE(RTVOBJ) FILE(OME8REP)          AC1229616;
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Str_Type_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


CASE;

// IF DTL.Item Str Type Desc DRV is equal to blank
IF DTL.Item_Str_Type_Desc_DRV = *BLANK;

// Send error message - 'Item Structure Type not found.'
ERROR(USR3305);
MSGPARM(DTL.Item_Structure_Type_USR);

ENDIF;

ENDIF;

//?VAL:  Item Structure Group
CASE;

// IF DTL.Item Structure Group USR is Entered
IF DTL.Item_Structure_Group_USR <> *ZERO;

EXECUTE FUNCTION(Item Str Group Desc DRV) TYPE(DRVFLD)                          AC1705174;
PARAMETER(DTL.Item_Str_Group_Desc_DRV);
PARAMETER(DTL.Item_Structure_Group_USR);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Group Desc) TYPE(RTVOBJ) FILE(OME9REP)                     AC1663396;
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Str_Group_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


CASE;

// IF DTL.Item Str Group Desc DRV is equal to blank
IF DTL.Item_Str_Group_Desc_DRV = *BLANK;

// Send error message - 'Item Structure Group not found.'
ERROR(USR3306);
MSGPARM(DTL.Item_Structure_Group_USR);

ENDIF;

ENDIF;

//?VAL:  Item Structure Class
CASE;

// IF DTL.Item Structure Class USR is Entered
IF DTL.Item_Structure_Class_USR <> *ZERO;

EXECUTE FUNCTION(Item Str Class Desc DRV) TYPE(DRVFLD)                          AC1705173;
PARAMETER(DTL.Item_Str_Class_Desc_DRV);
PARAMETER(DTL.Item_Structure_Class_USR);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Class Desc    RT) TYPE(RTVOBJ) FILE(OMFAREP)          AC1205440;
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Str_Class_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


CASE;

// IF DTL.Item Str Class Desc DRV is equal to blank
IF DTL.Item_Str_Class_Desc_DRV = *BLANK;

// Send error message - 'Item Structure Class not found.'
ERROR(USR3304);
MSGPARM(DTL.Item_Structure_Class_USR);

ENDIF;

ENDIF;

//?VAL:  Item Type Code load item type description
CASE;

// IF DTL.Item Type Code is Entered
IF DTL.Item_Type_Code <> *BLANK;

//?Validation is base on drop down list
// DTL.Item Type Desc Usr = Condition name of DTL.Item Type Code
DTL.Item_Type_Desc_Usr = RTVCND(DTL.Item_Type_Code);

//?VAL:  Item Type Code load item type description
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Item Type Desc Usr = CON.Both FG/WIP
DTL.Item_Type_Desc_Usr = 'Both FG/WIP';

ENDIF;

//?VAL:  TF Meat Cost Group
CASE;

// IF DTL.TFMC Group Code is Entered
IF DTL.TFMC_Group_Code <> *BLANK;

EXECUTE FUNCTION(RTV TF Meat Cost Desc  RT) TYPE(RTVOBJ) FILE(PMAPREP)          AC1818482;
PARAMETER(DTL.TFMC_Group_Code);
PARAMETER(DTL.TFMC_Group_Description);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?** If no rec found send Not Found message
CASE;

// IF DTL.TFMC Group Description is equal to blank
IF DTL.TFMC_Group_Description = *BLANK;

// Send error message - 'TF Meat Cost Group not found.'
ERROR(USR3703);

ENDIF;

ENDIF;

//?CALC: Screen function fields

EXECUTE FUNCTION(Report Type Desc DRV) TYPE(DRVFLD)                             AC1713261;
PARAMETER(DTL.Report_Type_Desc_DRV);
PARAMETER(DTL.Report_Type);
{
 //?Calculate derived field

 // PAR.Report Type Desc DRV = Condition name of PAR.Report Type
 PAR.Report_Type_Desc_DRV = RTVCND(PAR.Report_Type);

}


EXECUTE FUNCTION(Print Info Desc DRV) TYPE(DRVFLD)                              AC1713262;
PARAMETER(DTL.Print_Info_Desc_DRV);
PARAMETER(DTL.Print_Information_USR);
{
 //?Calculate derived field

 // PAR.All/Select/Omit Desc DRV = Condition name of PAR.All/Select/Omit Sts USR
 PAR.Print_Info_Desc_DRV = RTVCND(PAR.Print_Information_USR);

}


//?USER: User defined action

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('TF Classification');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('C/S');
PARAMETER(*MISSING);
PARAMETER(1);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
PGM.*Sbmjob_override_string = RTVMSG(USR2684);
PARAMETER('PRTTFCLS');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(*JOBD_JOBD_JOBD);
PARAMETER(*JOBD);

// LCL.Copies NBR USR = PAR.PRT Number of Copies
LCL.Copies_NBR_USR = PAR.PRT_Number_of_Copies;

CASE;

// IF DTL.Change Flag USR is Yes
IF DTL.Change_Flag_USR = 'Y';

// Call program Prt TF Class          CL.
SBMJOB;
CALL PROGRAM(Prt TF Class          CL) ('PPHYUPR');
PARAMETER(LCL.Return_Code_Usr);
PARAMETER('C/S');
PARAMETER(DTL.Report_Type);
PARAMETER(DTL.Print_Information_USR);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(DTL.TF_Class_Group);
PARAMETER(*BLANK);
PARAMETER(WRK.BLANK);
PARAMETER(WRK.BLANK);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(LCL.Copies_NBR_USR);
PARAMETER(DTL.Change_Flag_USR);
PARAMETER(DTL.Item_Type_Code);
SBMJOBOVR JOB(MRGADJITMS);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Prt TF Class          CL.
SBMJOB;
CALL PROGRAM(Prt TF Class          CL) ('PPHYUPR');
PARAMETER(LCL.Return_Code_Usr);
PARAMETER('C/S');
PARAMETER(DTL.Report_Type);
PARAMETER(DTL.Print_Information_USR);
PARAMETER(DTL.TF_Classification_USR);
PARAMETER(DTL.Item_Structure_Type_USR);
PARAMETER(DTL.Item_Structure_Group_USR);
PARAMETER(DTL.Item_Structure_Class_USR);
PARAMETER(DTL.TF_Class_Group);
PARAMETER(DTL.TFMC_Group_Code);
PARAMETER(DTL.Active_Status_Flag);
PARAMETER(DTL.Include_Credit_Items_USR);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(LCL.Copies_NBR_USR);
PARAMETER(DTL.Change_Flag_USR);
PARAMETER(DTL.Item_Type_Code);
SBMJOBOVR JOB(MRGADJITMS);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

ENDIF;

ENDIF;

