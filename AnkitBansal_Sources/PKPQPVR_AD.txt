// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKPQPVR
// ?Date: 14.08.2025 Time: 02:52:24
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//?                      length from 5 to 7.
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


// PAR.Scheduled Ship Dt 8.0 USR = CON.*ZERO
PAR.Scheduled_Kill_Dt_8_0_USR = *ZERO;

//?Date 03/19/2004 Slm - Does the Scale work? Y or blank for no
// LCL.Company Value Code    USR = CON.TRKSCLSTS
LCL.Company_Value_Code_USR = 'TRKSCLSTS';

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(LCL.Company_Value_Code_USR);
PARAMETER(LCL.Trk_Scale_Working_Y_Usr);

//?USER: Load screen

// DTL.CC Company Number = PAR.CC Company Number
DTL.CC_Company_Number = PAR.CC_Company_Number;

// DTL.Oms Name = PAR.Oms Name
DTL.Oms_Name = PAR.Oms_Name;

EXECUTE FUNCTION(Producer Name         DRV) TYPE(DRVFLD)                        AB1100361;
PARAMETER(DTL.Producer_Name_DRV);
PARAMETER(DTL.PD_Producer_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.Producer_Name_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Pdctn Loc Name DRV) TYPE(DRVFLD)                               AB1100402;
PARAMETER(DTL.Pdctn_Loc_Name_DRV);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PL_Location_Code);
 PARAMETER(PAR.Pdctn_Loc_Name_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?****  Movement Entry Log  ****
// PAR.PD Producer Code = DTL.PD Producer Code
PAR.PD_Producer_Code = DTL.PD_Producer_Code;

// PAR.PL Location Code = DTL.PL Location Code
PAR.PL_Location_Code = DTL.PL_Location_Code;

//?USER: Process command keys

CASE;

// IF DTL.*CMD key is CF13
IF DTL.*CMD_key = '13';

RETURN;

ENDIF;

// DTL.Message Data USR = CON.*BLANK
DTL.Message_Data_USR = *BLANK;

//?USER: Validate fields

// DTL.Weight Type Desc USR = Condition name of DTL.BOLW Weight Type
DTL.Weight_Type_Desc_USR = RTVCND(DTL.BOLW_Weight_Type);

// PAR.Text 10 1 USR = Condition name of DTL.BOLW Weight Type
PAR.Text_10_1_USR = RTVCND(DTL.BOLW_Weight_Type);

// PAR.MEL Error Code = CND.No Error
PAR.MEL_Error_Code = *BLANK;

//?Step 1:  Determine Movement #, Internal/External, & Prod/Loc
CASE;

// IF DTL.Movement # 10.0 USR is External
IF DTL.Movement_#_10_0_USR > 9999999;

// LCL.SR Type = CND.External
LCL.SR_Type = 'E';

// LCL.Load Number 2.0 USR = DTL.Movement # 10.0 USR
LCL.Load_Number_2_0_USR = DTL.Movement_#_10_0_USR;

// DTL.BOL Load Number = LCL.Load Number 2.0 USR
DTL.BOL_Load_Number = LCL.Load_Number_2_0_USR;

// DTL.BOH Buy Order Number
DTL.BOH_Buy_Order_Number = DTL.Movement_#_10_0_USR / 1000;

// DTL.BOLW Movement Number
DTL.BOLW_Movement_Number = ( DTL.BOH_Buy_Order_Number * 100 ) + DTL.BOL_Load_Number;

// DTL.BOH Company Number = DTL.CC Company Number
DTL.BOH_Company_Number = DTL.CC_Company_Number;

EXECUTE FUNCTION(Rtv TrlScl Entry Info RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1259329;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(PAR.Scheduled_Kill_Date_USR);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(PAR.Return_Code_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 // PAR.Return Code USR = CND.*Record does not exist
 PAR.Return_Code_USR = 'Y2U0005';

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Producer Type     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1199555;
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(LCL.SR_Source_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Source Type       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1141829;
 PARAMETER(LCL.SR_Source_Code);
 PARAMETER(LCL.SR_Type);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.SR Type is External
 IF LCL.SR_Type = 'E';

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Return Code USR = CND.*Normal
 PAR.Return_Code_USR = *BLANK;

 ENDIF;

}


//?Step 1:  Determine Movement #, Internal/External, & Prod/Loc
// IF DTL.Movement # 10.0 USR is Internal
IF DTL.Movement_#_10_0_USR <= 9999999;

// LCL.SR Type = CND.Internal
LCL.SR_Type = 'I';

// DTL.BOLW Movement Number = DTL.Movement # 10.0 USR
DTL.BOLW_Movement_Number = DTL.Movement_#_10_0_USR;

// DTL.PD Producer Code = CND.SEABOA
DTL.PD_Producer_Code = 'SEABOA';

// DTL.PL Location Code = CND.Seaboard
DTL.PL_Location_Code = 'SB01';

EXECUTE FUNCTION(Rtv Buy Order Load    RT) TYPE(RTVOBJ) FILE(PLAECPP)           AB1247933;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.BOLW_Movement_Number);
PARAMETER(PAR.Return_Code_USR);
PARAMETER(PAR.Scheduled_Kill_Date_USR);
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Return Code USR = CND.*Record does not exist
 PAR.Return_Code_USR = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Return Code USR = CND.*Normal
 PAR.Return_Code_USR = *BLANK;

}


ENDIF;

//?Step 2:  Validate Movement Number
CASE;

// IF DTL.BOLW Weight Type is In(En)
IF DTL.BOLW_Weight_Type = 'I';

SET CURSOR;

EXECUTE FUNCTION(Val Movement Number   RT) TYPE(RTVOBJ) FILE(PKEJCPP)           AB1213906;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.BOLW_Movement_Number);
PARAMETER(DTL.BOLW_Weight_Type);
PARAMETER(PAR.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


//?200 Movement # already weighed In.
CASE;

// IF PAR.Record Found USR is Record Found
IF PAR.Record_Found_USR = 'Y';

// Retrieve message - '-200- This Movement # has been weighed in.  Este movimiento # ya fue  pesado
DTL.Message_Data_USR = RTVMSG(PRK0862);

// PAR.MEL Error Code = CND.200 Weighed In
PAR.MEL_Error_Code = 200;

// Send error message - 'ERROR'
ERROR(PRK0861);

//?****  Movement Entry Log  ****
// Call program Rtv System Date       UP.
CALL PROGRAM(Rtv System Date       UP) ('PKPSUPR');
PARAMETER(PAR.MEL_Date);

// Execute function Rtv Current Time      US.
EXECUTE FUNCTION(Rtv Current Time      US) TYPE(EXCUSRSRC) ('PKM1UFR');
PARAMETER(WRK.Current_Time);
{
 C                     TIME           #OA1TM
}


// PAR.MEL Time = WRK.Current Time
PAR.MEL_Time = WRK.Current_Time;

// PAR.BOLW Weight Type = DTL.BOLW Weight Type
PAR.BOLW_Weight_Type = DTL.BOLW_Weight_Type;

// PAR.BOLW Movement Number = DTL.BOLW Movement Number
PAR.BOLW_Movement_Number = DTL.BOLW_Movement_Number;

EXECUTE FUNCTION(Crt Entry Log         CR) TYPE(CRTOBJ) FILE(PKELCPP)           AB1216464;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.MEL_Date);
PARAMETER(PAR.MEL_Time);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.PL_Location_Code);
PARAMETER(PAR.BOLW_Movement_Number);
PARAMETER(PAR.BOLW_Weight_Type);
PARAMETER(PAR.MEL_Error_Code);

//?******************************
QUIT;

ENDIF;

//?100 Movement not found in the HPS System.
CASE;

// IF PAR.Return Code USR is *Record does not exist
IF PAR.Return_Code_USR = 'Y2U0005';

// Retrieve message - '-100- This Movement # is not valid.  Este movimiento # es inválido.'
DTL.Message_Data_USR = RTVMSG(PRK0860);

// PAR.MEL Error Code = CND.100 Invalid
PAR.MEL_Error_Code = 100;

// Send error message - 'ERROR'
ERROR(PRK0861);

//?****  Movement Entry Log  ****
// Call program Rtv System Date       UP.
CALL PROGRAM(Rtv System Date       UP) ('PKPSUPR');
PARAMETER(PAR.MEL_Date);

// Execute function Rtv Current Time      US.
EXECUTE FUNCTION(Rtv Current Time      US) TYPE(EXCUSRSRC) ('PKM1UFR');
PARAMETER(WRK.Current_Time);
{
 C                     TIME           #OA1TM
}


// PAR.MEL Time = WRK.Current Time
PAR.MEL_Time = WRK.Current_Time;

// PAR.BOLW Weight Type = DTL.BOLW Weight Type
PAR.BOLW_Weight_Type = DTL.BOLW_Weight_Type;

// PAR.BOLW Movement Number = DTL.BOLW Movement Number
PAR.BOLW_Movement_Number = DTL.BOLW_Movement_Number;

EXECUTE FUNCTION(Crt Entry Log         CR) TYPE(CRTOBJ) FILE(PKELCPP)           AB1216464;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.MEL_Date);
PARAMETER(PAR.MEL_Time);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.PL_Location_Code);
PARAMETER(PAR.BOLW_Movement_Number);
PARAMETER(PAR.BOLW_Weight_Type);
PARAMETER(PAR.MEL_Error_Code);

//?******************************
QUIT;

ENDIF;

//?Step 2:  Validate Movement Number
// IF DTL.BOLW Weight Type is Out
IF DTL.BOLW_Weight_Type = 'O';

SET CURSOR;

EXECUTE FUNCTION(Val Movement Number   RT) TYPE(RTVOBJ) FILE(PKEJCPP)           AB1213906;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.BOLW_Movement_Number);
PARAMETER(DTL.BOLW_Weight_Type);
PARAMETER(PAR.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


//?300 Movement # already weighed Out.
CASE;

// IF PAR.Record Found USR is Record Found
IF PAR.Record_Found_USR = 'Y';

// Retrieve message - '-300- This Movement # has been weighed out.  Este movimiento # ya fue pesado
DTL.Message_Data_USR = RTVMSG(PRK0864);

// PAR.MEL Error Code = CND.300 Weighed Out
PAR.MEL_Error_Code = 300;

// Send error message - 'ERROR'
ERROR(PRK0861);

//?****  Movement Entry Log  ****
// Call program Rtv System Date       UP.
CALL PROGRAM(Rtv System Date       UP) ('PKPSUPR');
PARAMETER(PAR.MEL_Date);

// Execute function Rtv Current Time      US.
EXECUTE FUNCTION(Rtv Current Time      US) TYPE(EXCUSRSRC) ('PKM1UFR');
PARAMETER(WRK.Current_Time);
{
 C                     TIME           #OA1TM
}


// PAR.MEL Time = WRK.Current Time
PAR.MEL_Time = WRK.Current_Time;

// PAR.BOLW Weight Type = DTL.BOLW Weight Type
PAR.BOLW_Weight_Type = DTL.BOLW_Weight_Type;

// PAR.BOLW Movement Number = DTL.BOLW Movement Number
PAR.BOLW_Movement_Number = DTL.BOLW_Movement_Number;

EXECUTE FUNCTION(Crt Entry Log         CR) TYPE(CRTOBJ) FILE(PKELCPP)           AB1216464;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.MEL_Date);
PARAMETER(PAR.MEL_Time);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.PL_Location_Code);
PARAMETER(PAR.BOLW_Movement_Number);
PARAMETER(PAR.BOLW_Weight_Type);
PARAMETER(PAR.MEL_Error_Code);

//?******************************
QUIT;

ENDIF;

EXECUTE FUNCTION(Val Movement Number   RT) TYPE(RTVOBJ) FILE(PKEJCPP)           AB1213906;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.BOLW_Movement_Number);
PARAMETER('I');
PARAMETER(PAR.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


//?400 Movement # never weighed In.
CASE;

// IF PAR.Record Found USR is Record Not Found
IF PAR.Record_Found_USR = 'N';

// Retrieve message - '-400- This Movement # was never weighed In.  Este movimiento # nunca  fue pes
DTL.Message_Data_USR = RTVMSG(PRK0865);

// PAR.MEL Error Code = CND.400 Not Weighed In
PAR.MEL_Error_Code = 400;

// Send error message - 'ERROR'
ERROR(PRK0861);

//?****  Movement Entry Log  ****
// Call program Rtv System Date       UP.
CALL PROGRAM(Rtv System Date       UP) ('PKPSUPR');
PARAMETER(PAR.MEL_Date);

// Execute function Rtv Current Time      US.
EXECUTE FUNCTION(Rtv Current Time      US) TYPE(EXCUSRSRC) ('PKM1UFR');
PARAMETER(WRK.Current_Time);
{
 C                     TIME           #OA1TM
}


// PAR.MEL Time = WRK.Current Time
PAR.MEL_Time = WRK.Current_Time;

// PAR.BOLW Weight Type = DTL.BOLW Weight Type
PAR.BOLW_Weight_Type = DTL.BOLW_Weight_Type;

// PAR.BOLW Movement Number = DTL.BOLW Movement Number
PAR.BOLW_Movement_Number = DTL.BOLW_Movement_Number;

EXECUTE FUNCTION(Crt Entry Log         CR) TYPE(CRTOBJ) FILE(PKELCPP)           AB1216464;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.MEL_Date);
PARAMETER(PAR.MEL_Time);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.PL_Location_Code);
PARAMETER(PAR.BOLW_Movement_Number);
PARAMETER(PAR.BOLW_Weight_Type);
PARAMETER(PAR.MEL_Error_Code);

//?******************************
QUIT;

ENDIF;

//?Step 2:  Validate Movement Number
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.MEL Error Code = CND.ENT No Entry
PAR.MEL_Error_Code = 'ENT';

SET CURSOR;

//?****  Movement Entry Log  ****
// Call program Rtv System Date       UP.
CALL PROGRAM(Rtv System Date       UP) ('PKPSUPR');
PARAMETER(PAR.MEL_Date);

// Execute function Rtv Current Time      US.
EXECUTE FUNCTION(Rtv Current Time      US) TYPE(EXCUSRSRC) ('PKM1UFR');
PARAMETER(WRK.Current_Time);
{
 C                     TIME           #OA1TM
}


// PAR.MEL Time = WRK.Current Time
PAR.MEL_Time = WRK.Current_Time;

// PAR.BOLW Weight Type = DTL.BOLW Weight Type
PAR.BOLW_Weight_Type = DTL.BOLW_Weight_Type;

// PAR.BOLW Movement Number = DTL.BOLW Movement Number
PAR.BOLW_Movement_Number = DTL.BOLW_Movement_Number;

// PAR.PD Producer Code = DTL.PD Producer Code
PAR.PD_Producer_Code = DTL.PD_Producer_Code;

// PAR.PL Location Code = DTL.PL Location Code
PAR.PL_Location_Code = DTL.PL_Location_Code;

EXECUTE FUNCTION(Crt Entry Log         CR) TYPE(CRTOBJ) FILE(PKELCPP)           AB1216464;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.MEL_Date);
PARAMETER(PAR.MEL_Time);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.PL_Location_Code);
PARAMETER(PAR.BOLW_Movement_Number);
PARAMETER(PAR.BOLW_Weight_Type);
PARAMETER(PAR.MEL_Error_Code);

//?******************************
ENDIF;

//?USER: User defined action

// PAR.Date Alpha USR = CVTVAR(PAR.Scheduled Kill Date   USR)
PAR.Date_Alpha_USR = CVTVAR(PAR.Scheduled_Kill_Date_USR);

// PAR.Status 1 = CND.No
PAR.Status_1 = 'N';

// Call program Acpt Scale Weight     CL.
CALL PROGRAM(Acpt Scale Weight     CL) ('PKP7UPR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.BOLW_Movement_Number);
PARAMETER(DTL.BOLW_Weight_Type);
PARAMETER(PAR.Text_10_1_USR);
PARAMETER(DTL.Movement_#_10_0_USR);
PARAMETER(PAR.Date_Alpha_USR);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Status_1);
PARAMETER(LCL.SR_Type);
PARAMETER(LCL.Trk_Scale_Working_Y_Usr);

//?VAL:  Weight Accepted
CASE;

// IF LCL.Trk Scale Working Y/  Usr is YES
IF LCL.Trk_Scale_Working_Y_Usr = 'Y';

CASE;

// IF PAR.Status 1 is Yes
IF PAR.Status_1 = 'Y';

// Retrieve message - '-500- The Truck Weight was not accepted, please retry.  El peso del   carro n
DTL.Message_Data_USR = RTVMSG(PRK0866);

// IF PAR.Status 1 is No
IF PAR.Status_1 = 'N';

// DTL.Message Data USR = CON.*BLANK
DTL.Message_Data_USR = *BLANK;

ENDIF;

ENDIF;

//?INIT:  DTL Fields
DO;

// DTL.BOLW Weight Type = WRK.Blank USR
DTL.BOLW_Weight_Type = WRK.Blank_USR;

// DTL.BOLW Movement Number = CON.*ZERO
DTL.BOLW_Movement_Number = *ZERO;

// DTL.Movement # 10.0 USR = CON.*ZERO
DTL.Movement_#_10_0_USR = *ZERO;

// DTL.PD Producer Code = CON.*BLANK
DTL.PD_Producer_Code = *BLANK;

// DTL.PL Location Code = CON.*BLANK
DTL.PL_Location_Code = *BLANK;

// DTL.BOH Company Number = CON.*ZERO
DTL.BOH_Company_Number = *ZERO;

// DTL.BOH Buy Order Number = CON.*ZERO
DTL.BOH_Buy_Order_Number = *ZERO;

// DTL.BOL Load Number = CON.*ZERO
DTL.BOL_Load_Number = *ZERO;

// PAR.Scheduled Kill Date   USR = CON.*ZERO
PAR.Scheduled_Kill_Date_USR = *ZERO;

SET CURSOR;

ENDDO;

//?USER: Exit program processing

CASE;

// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

QUIT;

ENDIF;

