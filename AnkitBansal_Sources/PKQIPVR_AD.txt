// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKQIPVR
// ?Date: 14.08.2025 Time: 02:52:30
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?H16853 ISE 01/23/21 - Increased the length from 5 to 7 and corrected the
//?                      alignment of Buy Order Number field.
ENDDO;

EXECUTE FUNCTION(Val Appl/User Only    IF) TYPE(EXCINTFUN)                      AB1191075;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 ENDIF;

}


//?USER: Load screen

MOVE *ALL (To: DTL From: PAR);

// DTL.Movement # 9.0 USE = DTL.BOLW Movement Number
DTL.Movement_#_9_0_USE = DTL.BOLW_Movement_Number;

// DTL.Weight Type USR = DTL.BOLW Weight Type
DTL.Weight_Type_USR = DTL.BOLW_Weight_Type;

// DTL.Buy Order Number USR = DTL.BOH Buy Order Number
DTL.Buy_Order_Number_USR = DTL.BOH_Buy_Order_Number;

// DTL.Buy Order Load USR = DTL.BOL Load Number
DTL.Buy_Order_Load_USR = DTL.BOL_Load_Number;

//?USER: Validate fields

//?Sel: Buy Order Load
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Buy Order Number USR
IF PGM.*Cursor_field = DTL.Buy_Order_Number_USR;

// OR PGM.*Cursor field <IS> DTL.Buy Order Load USR
OR PGM.*Cursor_field = DTL.Buy_Order_Load_USR;

// Call program Sel Producer BOL      SR.
CALL PROGRAM(Sel Producer BOL      SR) ('PKQJSRR');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);

ENDIF;

ENDIF;

// Call program Z1l HPS Movement Rfrn UP.
CALL PROGRAM(Z1l HPS Movement Rfrn UP) ('HP251');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(DTL.Movement_#_9_0_USE);
PARAMETER(WRK.Scheduled_Kill_Dt_8_0_USR);
PARAMETER(LCL.Scheduled_Head_USR);

//?Validate Movement Number
CASE;

// IF WRK.*Return code is HPS Movement Rfrnc Err 1
IF WRK.*Return_code = 'HPSM1';

// Send error message - 'Movement # &1 is not valid.'
ERROR(PRK0868);
MSGPARM(DTL.Movement_#_9_0_USE);

QUIT;

ENDIF;

EXECUTE FUNCTION(Val Buy Order Load    RT) TYPE(RTVOBJ) FILE(PKEJCPP)           AB1215860;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Buy_Order_Number_USR);
PARAMETER(DTL.Buy_Order_Load_USR);
PARAMETER(PAR.BOL_IN_record_found_USR);
PARAMETER(PAR.BOL_OUT_record_found_USR);
{
 //?USER: Initialize routine

 // PAR.BOL IN  record found  USR = CND.No
 PAR.BOL_IN_record_found_USR = 'N';

 // PAR.BOL OUT record found  USR = CND.No
 PAR.BOL_OUT_record_found_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.BOLW Weight Type is In(En)
 IF DB1.BOLW_Weight_Type = 'I';

 // PAR.BOL IN  record found  USR = CND.Yes
 PAR.BOL_IN_record_found_USR = 'Y';

 // IF DB1.BOLW Weight Type is Out(Fuera)
 IF DB1.BOLW_Weight_Type = 'O';

 // PAR.BOL OUT record found  USR = CND.Yes
 PAR.BOL_OUT_record_found_USR = 'Y';

 ENDIF;

}


CASE;

// IF DTL.Weight Type USR is Out(Fuera)
IF DTL.Weight_Type_USR = 'O';

CASE;

// IF PAR.BOL IN  record found  USR is No
IF PAR.BOL_IN_record_found_USR = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(Val Buy Order Load    RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1215780;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Buy_Order_Number_USR);
PARAMETER(DTL.Buy_Order_Load_USR);
PARAMETER(PAR.BOL_Truck_Scale_Weigh_Sts);
PARAMETER(PAR.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


//?Validate Buy Order Load
CASE;

// IF PAR.Record Found USR is Record Not Found
IF PAR.Record_Found_USR = 'N';

// Send error message - 'Buy Order Load Not Found.'
ERROR(PRK0872);
MSGPARM(DTL.Buy_Order_Number_USR);
MSGPARM(DTL.Buy_Order_Load_USR);

QUIT;

ENDIF;

//?USER: User defined action

EXECUTE FUNCTION(Trns BOL Weight       RT) TYPE(RTVOBJ) FILE(PKEJCPP)           AB1215777;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.BOLW_Movement_Number);
PARAMETER(DTL.BOLW_Weight_Type);
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.Movement_#_9_0_USE);
PARAMETER(DTL.Weight_Type_USR);
PARAMETER(DTL.Buy_Order_Number_USR);
PARAMETER(DTL.Buy_Order_Load_USR);
{
 //?USER: Process Data record

 CASE;

 // IF PAR.Movement number new usr EQ DB1.BOLW Movement Number
 IF PAR.Movement_number_new_usr = DB1.BOLW_Movement_Number;

 // AND PAR.Weight Type USR EQ DB1.BOLW Weight Type
 AND PAR.Weight_Type_USR = DB1.BOLW_Weight_Type;

 EXECUTE FUNCTION(Trns BOL Weight       CH) TYPE(CHGOBJ) FILE(PKEJCPP)           AB1215859;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.BOLW_Movement_Number);
 PARAMETER(DB1.BOLW_Weight_Type);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Trns BOL Weight       CR) TYPE(CRTOBJ) FILE(PKEJCPP)           AB1215778;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(PAR.Movement_number_new_usr);
 PARAMETER(PAR.Weight_Type_USR);
 PARAMETER(DB1.BOLW_Scale_Weight);
 PARAMETER(DB1.BOLW_Scale_Weight_Date);
 PARAMETER(DB1.BOLW_Scale_Weight_Time);
 PARAMETER(DB1.BOLW_Spread_Status);
 PARAMETER(DB1.BOLW_Unused_Sts_1);
 PARAMETER(DB1.BOLW_Unused_Sts_2);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(PAR.Buy_Order_Number_USR);
 PARAMETER(PAR.Buy_Order_Load_USR);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 EXECUTE FUNCTION(Trns BOL Weight       DL) TYPE(DLTOBJ) FILE(PKEJCPP)           AB1215779;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.BOLW_Movement_Number);
 PARAMETER(DB1.BOLW_Weight_Type);
 ENDIF;

 //?USER: Exit processing

 CASE;

 // IF PAR.Weight Type USR is In(En)
 IF PAR.Weight_Type_USR = 'I';

 EXECUTE FUNCTION(Upd Trk Scl Weigh Sts RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1214077;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER('I');
 {
  //?USER: Process Data record

  CASE;

  // IF PAR.BOL Truck Scale Weigh Sts is Respread
  IF PAR.BOL_Truck_Scale_Weigh_Sts = 'R';

  // AND DB1.BOL Truck Scale Weigh Sts is Not Spread
  AND DB1.BOL_Truck_Scale_Weigh_Sts = 'I'/'N'/*BLANK/'O'/'R'/'A'/'C';

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Chg Trk Scl Weigh Sts CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1214078;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(PAR.BOL_Truck_Scale_Weigh_Sts);
  PARAMETER(DB1.BOL_Shipped_Head);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  ENDIF;

  CASE;

  // IF PAR.BOL Truck Scale Weigh Sts is Respread
  IF PAR.BOL_Truck_Scale_Weigh_Sts = 'R';

  EXECUTE FUNCTION(Upd Hdr/Bal Status    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1230832;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER('E');
  PARAMETER('E');
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.TH Hog Class Type is Not Resale
   IF DB1.TH_Hog_Class_Type = 'M'/'S';

   EXECUTE FUNCTION(Chg Hdr/Bal Status    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1230833;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(PAR.TH_Header_Error_Sts);
   PARAMETER(PAR.TH_Kill_Balancing_Sts);
   ENDIF;

  }

  ENDIF;

 }

 // IF PAR.Weight Type USR is Out(Fuera)
 IF PAR.Weight_Type_USR = 'O';

 EXECUTE FUNCTION(Upd Trk Scl Weigh Sts RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1214077;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER('I');
 {
  //?USER: Process Data record

  CASE;

  // IF PAR.BOL Truck Scale Weigh Sts is Respread
  IF PAR.BOL_Truck_Scale_Weigh_Sts = 'R';

  // AND DB1.BOL Truck Scale Weigh Sts is Not Spread
  AND DB1.BOL_Truck_Scale_Weigh_Sts = 'I'/'N'/*BLANK/'O'/'R'/'A'/'C';

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Chg Trk Scl Weigh Sts CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1214078;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(PAR.BOL_Truck_Scale_Weigh_Sts);
  PARAMETER(DB1.BOL_Shipped_Head);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  ENDIF;

  CASE;

  // IF PAR.BOL Truck Scale Weigh Sts is Respread
  IF PAR.BOL_Truck_Scale_Weigh_Sts = 'R';

  EXECUTE FUNCTION(Upd Hdr/Bal Status    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1230832;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER('E');
  PARAMETER('E');
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.TH Hog Class Type is Not Resale
   IF DB1.TH_Hog_Class_Type = 'M'/'S';

   EXECUTE FUNCTION(Chg Hdr/Bal Status    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1230833;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(PAR.TH_Header_Error_Sts);
   PARAMETER(PAR.TH_Kill_Balancing_Sts);
   ENDIF;

  }

  ENDIF;

 }

 ENDIF;

}


