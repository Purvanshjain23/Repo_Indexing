// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDUNPVR
// ?Date: 14.08.2025 Time: 03:36:12
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

//?11/30/04  Change Sel Warehouse to Sel Company/Warehouse
//?USER: Load screen

CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// DTL.Company Number = PAR.Company Number
DTL.Company_Number = PAR.Company_Number;

// DTL.Warehouse Code = PAR.Warehouse Code
DTL.Warehouse_Code = PAR.Warehouse_Code;

// DTL.Report Type USR = CND.Summary
DTL.Report_Type_USR = 'S';

// DTL.Condition Name USR = Condition name of DTL.Report Type USR
DTL.Condition_Name_USR = RTVCND(DTL.Report_Type_USR);

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

// DTL.USR Flag 1 = CND.Yes
DTL.USR_Flag_1 = 'Y';

ENDIF;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Warehouse Desc DRV) TYPE(DRVFLD)                               AC1532477;
PARAMETER(DTL.Warehouse_Desc_DRV);
PARAMETER(DTL.Warehouse_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

}


//?USER: Validate fields

//?Prompt warehouse
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Warehouse Code
AND PGM.*Cursor_field = DTL.Warehouse_Code;

// Call program SEL ShipCo/Warehouse   SR.
CALL PROGRAM(SEL ShipCo/Warehouse   SR) ('PPHQSRR');
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Company_Number);

ENDIF;

//?Prompt company
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Company Number
AND PGM.*Cursor_field = DTL.Company_Number;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(DTL.Company_Number);

ENDIF;

EXECUTE FUNCTION(Rtv Plant Co Status   RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1761084;
PARAMETER(DTL.Company_Number);
PARAMETER(LCL.Plant_Company_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?05/11/07 JRB Removed hard coded companies
//?Check for plant company
CASE;

// IF LCL.Plant Company Sts is Plant Company
IF LCL.Plant_Company_Sts = 'P';

//?Check for plant company
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Company not found or Invalid.'
ERROR(USR2270);
MSGPARM(DTL.Company_Number);

ENDIF;

EXECUTE FUNCTION(Rtv Lot Track,Shp co  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1706753;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(WRK.Lot_Tracking_Flag);
PARAMETER(WRK.Shipping_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.Lot Tracking Flag is no
IF WRK.Lot_Tracking_Flag = 'N';

// Send error message - 'Warehouse is not Lot Tracking.'
ERROR(USR2775);
MSGPARM(DTL.Warehouse_Code);

ENDIF;

CASE;

// IF WRK.Shipping Company NE DTL.Company Number
IF WRK.Shipping_Company <> DTL.Company_Number;

// Send error message - 'Warehouse &1 cannot ship from Company &2'
ERROR(USR3362);
MSGPARM(DTL.Warehouse_Code);
MSGPARM(DTL.Company_Number);

ENDIF;

//?CALC: Screen function fields

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Warehouse Desc DRV) TYPE(DRVFLD)                               AC1532477;
PARAMETER(DTL.Warehouse_Desc_DRV);
PARAMETER(DTL.Warehouse_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

}


CASE;

// IF DTL.Item Code is Entered
IF DTL.Item_Code <> *ZERO;

EXECUTE FUNCTION(Item Desc DRV) TYPE(DRVFLD)                                    AC1505592;
PARAMETER(DTL.Item_Desc_DRV);
PARAMETER(DTL.Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Desc_DRV);
 PARAMETER(WRK.Description_Line_Two);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Item Desc DRV = CON.*All
DTL.Item_Desc_DRV = *All;

ENDIF;

// DTL.Condition Name USR = Condition name of DTL.Report Type USR
DTL.Condition_Name_USR = RTVCND(DTL.Report_Type_USR);

//?USER: User defined action

// Call program PMT Prt/Sbm Opt    SHR PV.
CALL PROGRAM(PMT Prt/Sbm Opt    SHR PV) ('PDKMPVR');
PARAMETER(PAR.PRT_Description);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);
PARAMETER(1);
PARAMETER(PAR.Hold_On_Jobq);
PARAMETER(PAR.Job_Log_Create);
PARAMETER(PAR.Hold);
PARAMETER(PAR.Log);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
PGM.*Sbmjob_override_string = RTVMSG(USR2684);
PARAMETER('PRTINVIMP');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Log);
PARAMETER(PAR.Hold);

// PAR.From Date (alpha)     USR = CVTVAR(DTL.Production Date RGF)
PAR.From_Date_alpha_USR = CVTVAR(DTL.Production_Date_RGF);

// PAR.To Date (alpha)       USR = CVTVAR(DTL.Production Date RGT)
PAR.To_Date_alpha_USR = CVTVAR(DTL.Production_Date_RGT);

// Call program Zzz Fz/Fr Impact      UP.
SBMJOB;
CALL PROGRAM(Zzz Fz/Fr Impact      UP) ('PDUOUPC');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(PAR.From_Date_alpha_USR);
PARAMETER(PAR.To_Date_alpha_USR);
PARAMETER(DTL.Report_Type_USR);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(DTL.USR_Flag_1);
PARAMETER(PAR.PRT_Number_of_Copies);
SBMJOBOVR JOB(PRTINVIMP);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

// Send information message - 'Job &1 has been submitted to job queue &2.'
MESSAGE(USR2685 *INFO);
MSGPARM('PRTPIKSLP');
MSGPARM(PAR.PRT_Night_Queue);

ENDIF;

