      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      Trimump Foods
      * PROGRAM:     TF133
      * TITLE:       Revise Invoice
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     03/09/05
      *
      *
      * FUNCTION: Uses an edit record format to add/change/delete records.
      *
      *           This program is called from TF433-Work with Invoices.
      *
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      /eject
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Ftfd133    cf   e             workstn infds(iofeed)
      *
      *
     Ftfp020    uf a e           k disk
      *   Invoice header
      *
      *
     Ftfl021c   uf   e           k disk
      *   Invoice charges
      *
      *
     Ftfp097    if   e           k disk
      *    Status codes
      *
      *
     Ftfp098    if   e           k disk
      *    Charge frequencies
      *
      /eject
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D create          c                   'CREATE'
     D revise          c                   'REVISE'
     D delete          c                   'DELETE'
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
     D update          c                   'UPDATE'
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D rtncd           s              2
     D action          s                   like(mode)
     D maxmsg          s              2  0  inz(20)
      *
      *
      * Workfields for date manipulation
      *
     D wkisodate       s               d   datfmt(*iso)
     D wkindtcymd      s              8  0
     D wkdudtcymd      s              8  0
      *
      *
      * Parms
      *
     D xxcfqcd         s                   like(d1cfqcd)
     D xxcfqds         s                   like(d1cfqds)
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *---------------------------------------------------------------
      * Data areas
      *---------------------------------------------------------------
      * Definition for external data area 'DATFINSN' for assigning the next
      * Invoice Number.
      *
     Dnextinsn         s              7  0 dtaara(datfinsn)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /eject
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     update        $upd1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /eject
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * If incoming mode is REVISE or DELETE, then retrieve the database
      * record.  Do not lock the record.  Typically, in DELETE mode, these
      * values will not be displayed. However, if there is an error on the
      * delete action, the panel will be displayed with messages.
      *
     C                   select
     C                   when      mode = create                                WH create
     C                   z-add     0             d1insn
     C                   move      *blank        d1stds
     C                   z-add     0             d1indtmdy
     C                   z-add     0             d1dudtmdy
     C                   move      *blank        d1cfqcd
     C                   move      *blank        d1cfqds
      *
     C                   when      mode = revise or mode = delete               WH revise/delete
     C     d1insn        chain(n)  tfp020                             92
     C                   if        *in92 = *on                                  If no hit
     C                   seton                                        62
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09008'
     C                   endif
     C                   else
      *
     C                   z-add     ihinsn        d1insn
     C                   move      ihcfqcd       d1cfqcd
      *
      * Retrieve descriptions and flip dates
      *
     C                   exsr      $desc
     C                   exsr      $dates
     C                   endif                                                  If no hit
     C                   endsl
      *
      * If the user is deleting and there were no errors when retrieving the
      * record, go on to the update routine without displaying the screen.
      * Otherwise, display the screen.
      *
     C                   if        error = 0 and action = delete                If no error
     C                   eval      routne = update
     C                   else
     C                   eval      routne = scrn1
     C                   endif                                                  If no error
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Set indicators to control input/output fields and available
      * function keys.
     C                   exsr      $ind
      *
      *
      * Write screen 1 to CRT
      *
     C                   write     tf133k1
     C                   write     tf133ec
     C                   exfmt     tf133r1
      *
      * Clear messages
     C                   exsr      $clmsg
      *
      *
      * Reset action to be equal to the incoming mode.  This is required
      * in case the user took F11-Delete and got an error on the
      * deletion and now needs to be able to change the record and take
      * an action other than delete
      *
     C                   eval      action = mode
      *
      * Get user's input and set routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      rtncd = '03'
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4=prompt
     C                   exsr      $f4s1
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   eval      routne = set1
      *
     C                   when      *in11 = *on or mode = delete                 F11-delete
     C                   eval      action = delete
     C                   eval      routne = update
      *
     C                   when      *in12 = *on                                  F12-previous
     C                   eval      rtncd = '12'
     C                   eval      routne = exit
     C                   other
      *
      * User has pressed enter
      *
     C                   eval      routne = edit1
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Set indicators to control/protect screen fields
      *----------------------------------------------------------------
      *
     C     $ind          begsr
      *
     c                   select
     C                   when      mode = revise
     C                   seton                                        60
      *
     C                   when      mode = create
     C                   seton                                        61
      *
     C                   when      mode = delete
     C                   seton                                        62
     c                   endsl
      *
      * When Invoice is already 'Assigned', you cannot change the
      * Charge Frequency. So, set an indicator to protect it.
      *
     C                   if        ihinstcd = 'A'
     C                   seton                                        63
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Edit input fields for screen 1
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * *IN62 will be on if the record the user is trying to access has
      * been deleted by another user.  So, only perform the edits for the
      * fields on the screen if the indicator is off
      *
     C                   if        *in62 = *off                                 If here
      *
      * Validate:
      *   1) Invoice date
      *   2) Due date
      *
     C                   exsr      $indtmdy
     C                   exsr      $dudtmdy
      *
      * Validate Charge Frequency if the Invoice is not Assigned
      *
     C                   if        *in63 = *off
     C                   exsr      $cfqcd
     C                   endif
     C                   endif                                                  If here
      *
      * If there are no errors, attempt the write/update; otherwise,
      * redisplay the screen.  If a record has been deleted out from
      * under the user (*IN62 is ON), then the error message will be
      * issued in the update subroutine.  So, always perform this code.
      *
     C                   if        error = 0
     C                   exsr      $upd1
     C                   else
     C                   eval      routne = scrn1
     C                   endif
      *
     C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * Validate Invoice Date
      *------------------------------------------------------------------------------------
      *
     C     $indtmdy      begsr
      *
     C                   select
     C                   when      d1indtmdy = 0
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
      *
     C                   when      d1indtmdy < 0
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 d1indtmdy              92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Flip Invoice Date to CCYYMMDD format
      *
     C     *mdy          move      d1indtmdy     wkisodate
     C                   move      wkisodate     wkindtcymd
     C                   endif                                                  If bad date
     C                   endsl
      *
     C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * Validate Due Date
      *------------------------------------------------------------------------------------
      *
     C     $dudtmdy      begsr
      *
     C                   select
     C                   when      d1dudtmdy = 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
      *
     C                   when      d1dudtmdy < 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 d1dudtmdy              92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Flip Due Date to CCYYMMDD format
      *
     C     *mdy          move      d1dudtmdy     wkisodate
     C                   move      wkisodate     wkdudtcymd
     C                   endif                                                  If bad date
     C                   endsl
      *
     C                   if        *in30 = *off and *in31 = *off and
     C                             wkdudtcymd < wkindtcymd
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08032'
     C                   endif
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate Charge Frequency Code
      *----------------------------------------------------------------
      *
     C     $cfqcd        begsr
      *
     C                   move      *blank        d1cfqds
      *
     C                   select
     C                   when      d1cfqcd = *blank
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
     C                   other
      *
     C     d1cfqcd       chain     tfp098                             92
     C                   if        *in92 = *off                                 If hit
     C                   move      cfcfqds       d1cfqds
     C                   else
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08018'     mgid(e)
     C                   clear                   mgw
     C                   movea     d1cfqcd       mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If hit
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * F4 prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      * Charge frequency code
      *
     C                   select
     C                   when      fld = 'D1CFQCD'
     C                   seton                                        55
     C                   call      'TF508'
     C                   parm      *blank        xxcfqcd
     C                   parm      *blank        xxcfqds
      *
     C                   if        xxcfqcd <> *blank
     C                   move      xxcfqcd       d1cfqcd
     C                   move      xxcfqds       d1cfqds
     C                   endif
     C                   other
      *
      * F4 not valid for this field...issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error                                        013
     C                   movel     'HS09011'     mgid(e)
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Write/update/delete record in database file
      *----------------------------------------------------------------
      *
     C     $upd1         begsr
      *
      * If deleting, perform deletion integrity checks.
      *
     C                   if        action = delete
     C                   exsr      $dltck
     C                   endif
      *
      * If user action is revising or deleting, determine that the
      * record he is accessing still exists prior to attempting to
      * update.  Lock the record for update.
      *
     C                   if        error = 0 and                                If OK
     C                             (action = delete or action = revise)
     C     d1insn        chain     tfp020                             92
     C                   if        *in92 = *on                                  If not found
     C                   seton                                        62
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09008'
     C                   endif
     C                   endif                                                  If not found
     C                   endif                                                  If OK
      *
      *
      * If there are no errors, delete, revise or create the record.
      *
     C                   if        error = 0                                    If no error
      *
     c                   select
     C                   when      action = delete
     C                   exsr      $unassign
     C                   delete    ihrec
     C                   other
      *
      * Move DSPF fields to database file fields
      *
     C                   move      d1cfqcd       ihcfqcd
     C                   z-add     wkindtcymd    ihindt
     C                   z-add     wkdudtcymd    ihdudt
      *
     C                   if        action = create
     C                   exsr      $defaults
     C                   write     ihrec
     C                   else
     C                   update    ihrec
     C                   endif                                                  If create
     C                   endsl
     C                   endif                                                  If no error
      *
      * Always redisplay when:
      *     1) there are errors
      *     2) you are creating records
      *
     C                   select
     C                   when      error > 0
     C                   movel     scrn1         routne
      *
     C                   when      mode = create
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09040'
     C                   eval      routne = set1
     C                   movel     set1          routne
     C                   other
      *
     C                   eval      rtncd = '00'
     C                   movel     exit          routne
     C                   endsl
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------------------------
      * Deletion integrity checks
      *-------------------------------------------------------------------------------------
      *
     C     $dltck        begsr
      *
      * Checks are unknown at this time. We will add them when we figure them out.
      *
     C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * When an invoice is deleted, you must 'unassign' all associated Invoice Charges
      *------------------------------------------------------------------------------------
      *
     C     $unassign     begsr
      *
     C     ihinsn        setll     tfl021c
      *
     C                   dou       *in91 = *on
     C     ihinsn        reade     tfl021c                                91
     C                   if        *in91 = *off
     C                   move      'O'           icinstcd
     C                   z-add     0             icinsn
     C                   update    icrec
     C                   endif
     C                   enddo
      *
     C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * Set defaults when creating a new record
      *------------------------------------------------------------------------------------
      *
     C     $defaults     begsr
      *
      * Set the Invoice Status to Open
      *
     C                   move      'O'           ihinstcd
      *
      * Get the next system-assigned 'Invoice Number' from the Data Area
      *
     C     *lock         in        nextinsn
     C                   add       1             nextinsn
     C                   eval      ihinsn = nextinsn
     C                   out       nextinsn
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------------------------
      * Write error messages
      *-------------------------------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Set on last record indicator and end job
      *----------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        lr
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Retrieve descriptions
      *---------------------------------------------------------------
      *
     C     $desc         begsr
      *
      * Charge frequency description
      *
     C     d1cfqcd       chain     tfp098                             92
     C                   if        *in92 = *off
     C                   move      cfcfqds       d1cfqds
     C                   endif
      *
      * Invoice Status description
      *
     C     ihinstcd      chain     tfp097                             92
     C                   if        *in92 = *off
     C                   move      ststds        d1stds
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Flip Invoice dates from CCYYMMDD to MMDDYY format
      *---------------------------------------------------------------
      *
     C     $dates        begsr
      *
      * Flip Invoice Date from CCYYMMDD to MMDDYY for display
      *
     C                   if        ihindt <> 0
     C     *iso          test(d)                 ihindt                 92
     C                   if        *in92 = *off                                 If OK inv date
     C                   move      ihindt        wkisodate
     C     *mdy          move      wkisodate     d1indtmdy
     C                   endif                                                  If OK inv date
     C                   endif
      *
      * Flip Due Date from CCYYMMDD to MMDDYY for display
      *
     C                   if        ihdudt <> 0
     C     *iso          test(d)                 ihdudt                 92
     C                   if        *in92 = *off                                 If OK due date
     C                   move      ihdudt        wkisodate
     C     *mdy          move      wkisodate     d1dudtmdy
     C                   endif                                                  If OK due date
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Key lists
      *  None
      *
      * Parm Lists
      *
     C     *entry        plist
     C     d1mode        parm                    mode
     C                   parm                    d1insn
     C                   parm                    rtncd
      *
     C                   movel     mode          action
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /eject
