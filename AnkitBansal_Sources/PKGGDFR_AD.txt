// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKGGDFR
// ?Date: 14.08.2025 Time: 02:51:29
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?S00275 RMC 6/04/08 Get next drive card seq from Company Value:HPEDRVSEQ
//?E4154 JJH 07/22/15 - Pen Revisions
//?- Display Pending Head which is the sum of un-printed Scale Tickets
//?- Change the Descriptions of Open and Closed to Opn and Cls
//?- Move Pen Max Capacity to the right side of Pending Head
//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//?  from 5 to 7.
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.Pen_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

//?USER: Initialize subfile control

CASE;

// IF WRK.First Time Flag Usr EQ WRK.Blank USR
IF WRK.First_Time_Flag_Usr = WRK.Blank_USR;

// CTL.Pen Company Number = WRK.Pen Company Number
CTL.Pen_Company_Number = WRK.Pen_Company_Number;

// WRK.Display Print Prompt  Usr = CND.Prompt is to be displayed
WRK.Display_Print_Prompt_Usr = 'Y';

// WRK.First Time Flag Usr = CND.Yes
WRK.First_Time_Flag_Usr = 'Y';

// CTL.RS Record Status = CND.Active
CTL.RS_Record_Status = 'A';

// PAR.PRT Night Queue Run Sts = CND.No
PAR.PRT_Night_Queue_Run_Sts = 'N';

ENDIF;

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(CTL.Pen_Company_Number);
PARAMETER(CTL.Name_USR);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


// CTL.Pen Current Head = CON.*ZERO
CTL.Pen_Current_Head = *ZERO;

EXECUTE FUNCTION(Rtv Accum Pen Totals  RT) TYPE(RTVOBJ) FILE(PKA3REP)           AB1111683;
PARAMETER(CTL.Pen_Company_Number);
PARAMETER(CTL.Pen_Current_Head);
{
 //?USER: Process Data record

 //?Exclude Resale pens from totals.
 CASE;

 // IF DB1.Pen Type is Resale
 IF DB1.Pen_Type = 'R';

 //?Exclude Resale pens from totals.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Pen Current Head = PAR.Pen Current Head + DB1.Pen Current Head
 PAR.Pen_Current_Head = PAR.Pen_Current_Head + DB1.Pen_Current_Head;

 ENDIF;

}


//?USER: Initialize subfile record from DBF record

CASE;

// IF RCD.Pen Sts is Closed
IF RCD.Pen_Sts = 'C';

EXECUTE FUNCTION(Rtv Tattoos in a pen  RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1198621;
PARAMETER(RCD.Pen_Company_Number);
PARAMETER(RCD.Pen_Number);
PARAMETER(WRK.Tattoo_1_USR);
PARAMETER(WRK.Tattoo_2_USR);
PARAMETER(WRK.Tattoo_3_USR);
PARAMETER(WRK.Tattoo_4_USR);
PARAMETER(WRK.tattoo_5_USR);
PARAMETER(WRK.@Status_+);
PARAMETER(RCD.TH_Schedule_Kill_Shift);
PARAMETER(WRK.BOL_Truck_Scale_Weigh_Sts);
{
 //?USER: Initialize routine

 // WRK.Count USR = CON.*ZERO
 WRK.Count_USR = *ZERO;

 // PAR.@Status +/- = WRK.Blank USR
 PAR.@Status_+ = WRK.Blank_USR;

 // PAR.Tattoo 1              USR = CON.*BLANK
 PAR.Tattoo_1_USR = *BLANK;

 // PAR.Tattoo 2              USR = CON.*BLANK
 PAR.Tattoo_2_USR = *BLANK;

 // PAR.Tattoo 3              USR = CON.*BLANK
 PAR.Tattoo_3_USR = *BLANK;

 // PAR.Tattoo 4              USR = CON.*BLANK
 PAR.Tattoo_4_USR = *BLANK;

 // PAR.tattoo 5              USR = CON.*BLANK
 PAR.tattoo_5_USR = *BLANK;

 // PAR.First Time Flag Usr = CND.Yes
 PAR.First_Time_Flag_Usr = 'Y';

 //?USER: Process Data record

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 // WRK.Tattoo Nbr 4          USR = DB1.TH Tattoo Number
 WRK.Tattoo_Nbr_4_USR = DB1.TH_Tattoo_Number;

 //?Set up Tattoo's
 CASE;

 // IF WRK.Count USR is One
 IF WRK.Count_USR = 1;

 // PAR.Tattoo 1              USR = CVTVAR(WRK.Tattoo Nbr 4          USR)
 PAR.Tattoo_1_USR = CVTVAR(WRK.Tattoo_Nbr_4_USR);

 EXECUTE FUNCTION(Rtv Shift,HldOvrShft  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1195857;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(PAR.TH_Schedule_Kill_Shift);
 PARAMETER(WRK.TH_Shift_Held_Over);
 PARAMETER(WRK.TH_Shift_Held_Over_Head);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?Set up Tattoo's
 // IF WRK.Count USR is Two
 IF WRK.Count_USR = 2;

 // PAR.Tattoo 2              USR = CVTVAR(WRK.Tattoo Nbr 4          USR)
 PAR.Tattoo_2_USR = CVTVAR(WRK.Tattoo_Nbr_4_USR);

 //?Set up Tattoo's
 // IF WRK.Count USR is Three
 IF WRK.Count_USR = 3;

 // PAR.Tattoo 3              USR = CVTVAR(WRK.Tattoo Nbr 4          USR)
 PAR.Tattoo_3_USR = CVTVAR(WRK.Tattoo_Nbr_4_USR);

 //?Set up Tattoo's
 // IF WRK.Count USR is Four
 IF WRK.Count_USR = 4;

 // PAR.Tattoo 4              USR = CVTVAR(WRK.Tattoo Nbr 4          USR)
 PAR.Tattoo_4_USR = CVTVAR(WRK.Tattoo_Nbr_4_USR);

 //?Set up Tattoo's
 // IF WRK.Count USR is Five
 IF WRK.Count_USR = 5;

 // PAR.tattoo 5              USR = CVTVAR(WRK.Tattoo Nbr 4          USR)
 PAR.tattoo_5_USR = CVTVAR(WRK.Tattoo_Nbr_4_USR);

 //?Set up Tattoo's
 // IF WRK.Count USR is Six
 IF WRK.Count_USR = 6;

 // PAR.@Status +/- = CND.Add
 PAR.@Status_+ = '+';

 ENDIF;

 //?Truck Weight Status
 CASE;

 // IF PAR.First Time Flag Usr is Yes
 IF PAR.First_Time_Flag_Usr = 'Y';

 EXECUTE FUNCTION(Rtv BOL Truck Wgh Sts RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1214496;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(WRK.#Num_USR);
 PARAMETER(PAR.BOL_Truck_Scale_Weigh_Sts);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.First Time Flag Usr = CND.No
 PAR.First_Time_Flag_Usr = 'N';

 //?Truck Weight Status
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.BOL Truck Scale Weigh Sts is Spread
 IF PAR.BOL_Truck_Scale_Weigh_Sts = 'S';

 EXECUTE FUNCTION(Rtv BOL Truck Wgh Sts RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1214496;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(WRK.#Num_USR);
 PARAMETER(PAR.BOL_Truck_Scale_Weigh_Sts);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 ENDIF;

}


// Retrieve message - '&1 &2 &3 &4 &5&6'
RCD.Pen_Description = RTVMSG(PRK0743);
PARAMETER(WRK.Tattoo_1_USR);
PARAMETER(WRK.Tattoo_2_USR);
PARAMETER(WRK.Tattoo_3_USR);
PARAMETER(WRK.Tattoo_4_USR);
PARAMETER(WRK.tattoo_5_USR);
PARAMETER(WRK.@Status_+);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Tattoos in Pen    RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1201142;
PARAMETER(RCD.Pen_Company_Number);
PARAMETER(RCD.Pen_Number);
PARAMETER(WRK.Tattoo_1_USR);
PARAMETER(WRK.Tattoo_2_USR);
PARAMETER(WRK.Tattoo_3_USR);
PARAMETER(WRK.Tattoo_4_USR);
PARAMETER(WRK.tattoo_5_USR);
PARAMETER(WRK.@Status_+);
PARAMETER(RCD.TH_Schedule_Kill_Shift);
{
 //?USER: Initialize routine

 // WRK.Count USR = CON.*ZERO
 WRK.Count_USR = *ZERO;

 // PAR.@Status +/- = WRK.Blank USR
 PAR.@Status_+ = WRK.Blank_USR;

 // PAR.Tattoo 1              USR = CON.*BLANK
 PAR.Tattoo_1_USR = *BLANK;

 // PAR.Tattoo 2              USR = CON.*BLANK
 PAR.Tattoo_2_USR = *BLANK;

 // PAR.Tattoo 3              USR = CON.*BLANK
 PAR.Tattoo_3_USR = *BLANK;

 // PAR.Tattoo 4              USR = CON.*BLANK
 PAR.Tattoo_4_USR = *BLANK;

 // PAR.tattoo 5              USR = CON.*BLANK
 PAR.tattoo_5_USR = *BLANK;

 //?USER: Process Data record

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 // WRK.Tattoo Nbr 4          USR = DB1.TH Tattoo Number
 WRK.Tattoo_Nbr_4_USR = DB1.TH_Tattoo_Number;

 CASE;

 // IF WRK.Count USR is One
 IF WRK.Count_USR = 1;

 // PAR.Tattoo 1              USR = CVTVAR(WRK.Tattoo Nbr 4          USR)
 PAR.Tattoo_1_USR = CVTVAR(WRK.Tattoo_Nbr_4_USR);

 EXECUTE FUNCTION(Rtv Shift,HldOvrShft  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1195857;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(PAR.TH_Schedule_Kill_Shift);
 PARAMETER(WRK.TH_Shift_Held_Over);
 PARAMETER(WRK.TH_Shift_Held_Over_Head);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 // IF WRK.Count USR is Two
 IF WRK.Count_USR = 2;

 // PAR.Tattoo 2              USR = CVTVAR(WRK.Tattoo Nbr 4          USR)
 PAR.Tattoo_2_USR = CVTVAR(WRK.Tattoo_Nbr_4_USR);

 // IF WRK.Count USR is Three
 IF WRK.Count_USR = 3;

 // PAR.Tattoo 3              USR = CVTVAR(WRK.Tattoo Nbr 4          USR)
 PAR.Tattoo_3_USR = CVTVAR(WRK.Tattoo_Nbr_4_USR);

 // IF WRK.Count USR is Four
 IF WRK.Count_USR = 4;

 // PAR.Tattoo 4              USR = CVTVAR(WRK.Tattoo Nbr 4          USR)
 PAR.Tattoo_4_USR = CVTVAR(WRK.Tattoo_Nbr_4_USR);

 // IF WRK.Count USR is Five
 IF WRK.Count_USR = 5;

 // PAR.tattoo 5              USR = CVTVAR(WRK.Tattoo Nbr 4          USR)
 PAR.tattoo_5_USR = CVTVAR(WRK.Tattoo_Nbr_4_USR);

 // IF WRK.Count USR is Six
 IF WRK.Count_USR = 6;

 // PAR.@Status +/- = CND.Add
 PAR.@Status_+ = '+';

 QUIT;

 ENDIF;

}


// Retrieve message - '&1 &2 &3 &4 &5&6'
RCD.Pen_Description = RTVMSG(PRK0743);
PARAMETER(WRK.Tattoo_1_USR);
PARAMETER(WRK.Tattoo_2_USR);
PARAMETER(WRK.Tattoo_3_USR);
PARAMETER(WRK.Tattoo_4_USR);
PARAMETER(WRK.tattoo_5_USR);
PARAMETER(WRK.@Status_+);

ENDIF;

//?E4154 JJH 07/22/15 - Calculate and Display Pending Head
// Call program Clc Pen Max Capacity  XF.
CALL PROGRAM(Clc Pen Max Capacity  XF) ('PLXNXFR');
PARAMETER(RCD.Pen_Company_Number);
PARAMETER(RCD.Pen_Number);
PARAMETER(*ZERO);
PARAMETER(RCD.Pen_Tto_Scl_Tkt_Head_USR);
PARAMETER(NLL.Pen_Exceeds_Max_Cap_USR);

//?E4154 JJH 07/22/15 - Display 3-Character Desc for Pen Status
CASE;

// IF RCD.Pen Sts is Closed
IF RCD.Pen_Sts = 'C';

// RCD.Pen Status Desc Usr = CON.Cls
RCD.Pen_Status_Desc_Usr = 'Cls';

// IF RCD.Pen Sts is Open
IF RCD.Pen_Sts = 'O';

// RCD.Pen Status Desc Usr = CON.Opn
RCD.Pen_Status_Desc_Usr = 'Opn';

ENDIF;

//?USER: Process subfile control (Pre-confirm)

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?F21=Print List
CASE;

// IF CTL.*CMD key is Print List
IF CTL.*CMD_key = '21';

// Call program Pmt Print Options     XF.
CALL PROGRAM(Pmt Print Options     XF) ('PDG0PVR');
PARAMETER('Print Pen Avail. List');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('P/S');

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Execute command - 'SBM Prt Pen Avail. List'
EXECUTE COMMAND(PRK0339);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(CTL.RS_Record_Status);
PARAMETER(CTL.Pen_Type);
PARAMETER(CTL.Pen_Company_Number);
PARAMETER(CTL.Name_USR);
PARAMETER(PAR.Oms_System_Value_Alpha);

ENDIF;

// WRK.Display Print Prompt  Usr = CND.Prompt is to be displayed
WRK.Display_Print_Prompt_Usr = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

//?F22=Print List
CASE;

// IF CTL.*CMD key is CF22
IF CTL.*CMD_key = '22';

// Call program Pmt Print Options     XF.
CALL PROGRAM(Pmt Print Options     XF) ('PDG0PVR');
PARAMETER('Print Pen Avail. List');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('P/S');

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Execute command - 'SBM Prt Pen Avail. List Detail'
EXECUTE COMMAND(PRK0681);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(CTL.RS_Record_Status);
PARAMETER(CTL.Pen_Type);
PARAMETER(CTL.Pen_Company_Number);
PARAMETER(CTL.Name_USR);
PARAMETER(PAR.Oms_System_Value_Alpha);

ENDIF;

// WRK.Display Print Prompt  Usr = CND.Prompt is to be displayed
WRK.Display_Print_Prompt_Usr = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

//?F5 Refresh
CASE;

// IF CTL.*CMD key is Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?Select option
CASE;

// IF RCD.*SFLSEL is Display Pen Detail
IF RCD.*SFLSEL = '5'/'5';

//?E4154 JJH 07/27/15 - New Parm for Pen Tto Scl Tkt Head USR
// Call program Dsp Pen Detail        DF.
CALL PROGRAM(Dsp Pen Detail        DF) ('PKCLDFR');
PARAMETER(RCD.Pen_Company_Number);
PARAMETER(RCD.Pen_Number);
PARAMETER(RCD.Pen_Current_Head);
PARAMETER(RCD.Pen_Current_Drive_Card_No);
PARAMETER(RCD.Pen_Drive_Sequence);
PARAMETER(RCD.Pen_Tto_Scl_Tkt_Head_USR);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Select option
// IF RCD.*SFLSEL is *Revise request
IF RCD.*SFLSEL = '2'/'2';

// Call program Edt Pen               E1.
CALL PROGRAM(Edt Pen               E1) ('PKGLE1R');
PARAMETER(RCD.Pen_Company_Number);
PARAMETER(RCD.Pen_Number);
PARAMETER(RCD.Pen_Description);
PARAMETER(RCD.Pen_Sts);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Select option
// IF RCD.*SFLSEL is Void Drive Card
IF RCD.*SFLSEL = '4';

CASE;

// IF RCD.Pen Type is Resale
IF RCD.Pen_Type = 'R';

// Send error message - 'Option not allowed for Resale Pen &1'
ERROR(PRK0502);
MSGPARM(RCD.Pen_Number);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.Pen Sts is Closed
IF RCD.Pen_Sts = 'C';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Pen &1 must be closed to Void Drive Card.'
ERROR(PRK0223);
MSGPARM(RCD.Pen_Number);

ENDIF;

ENDIF;

//?Select option
// IF RCD.*SFLSEL is Print Drive Card
IF RCD.*SFLSEL = '6';

CASE;

// IF RCD.Pen Type is Resale
IF RCD.Pen_Type = 'R';

// Send error message - 'Option not allowed for Resale Pen &1'
ERROR(PRK0502);
MSGPARM(RCD.Pen_Number);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.Pen Sts is Open
IF RCD.Pen_Sts = 'O';

// WRK.Record Status Usr = WRK.Blank USR
WRK.Record_Status_Usr = WRK.Blank_USR;

CASE;

// IF RCD.Pen Company Number is SBD Farms of Guymon, Ok
IF RCD.Pen_Company_Number = 360;

EXECUTE FUNCTION(Vry Tattoo SclTickAct  RT) TYPE(RTVOBJ) FILE(PKB3CPP)          AB1306509;
PARAMETER(RCD.Pen_Company_Number);
PARAMETER(RCD.Pen_Number);
PARAMETER(WRK.Return_Code_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Return Code USR = CND.*Normal
 PAR.Return_Code_USR = *BLANK;

 //?USER: Process Data record

 CASE;

 // IF DB1.RS Record Status is Flag for Purge
 IF DB1.RS_Record_Status = 'D';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Return Code USR = CND.Scale Ticket Not Process
 PAR.Return_Code_USR = 'STKNOTP';

 ENDIF;

}


ENDIF;

CASE;

// IF WRK.Return Code USR is Scale Ticket Not Process
IF WRK.Return_Code_USR = 'STKNOTP';

// AND RCD.Pen Company Number is SBD Farms of Guymon, Ok
AND RCD.Pen_Company_Number = 360;

// Send error message - 'Scale Wgtmnt has not been printed.. F16 on WW Scale Weight for this pen'
ERROR(PRK1267);
MSGPARM(RCD.Pen_Number);

QUIT;

ENDIF;

EXECUTE FUNCTION(Exc Print Drive Card  IF) TYPE(EXCINTFUN)                      AB1184187;
PARAMETER(RCD.Pen_Number);
PARAMETER(RCD.Pen_Company_Number);
PARAMETER(PAR.Pen_Current_Drive_Card_No);
PARAMETER(PAR.Pen_Sts);
PARAMETER(RCD.Pen_Sts);
{
 //?Execute internal function

 //?Get Next Drive Card Nbr
 EXECUTE FUNCTION(Rtv/Upd Last Drv Crd  RT) TYPE(RTVOBJ) FILE(PKAZREP)           AB1117402;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.Last_Drive_Card_Number);
 {
  //?USER: Processing if Data record not found

  // PAR.Last Drive Card Number = CON.1
  PAR.Last_Drive_Card_Number = 1;

  //?USER: Process Data record

  // PAR.Last Drive Card Number = DB1.Last Drive Card Number + CON.1
  PAR.Last_Drive_Card_Number = DB1.Last_Drive_Card_Number + 1;

  EXECUTE FUNCTION(Chg Last Drv Crd      CH) TYPE(CHGOBJ) FILE(PKAZREP)           AB1117417;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(PAR.Last_Drive_Card_Number);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 //?Clear Drive Card Work file
 EXECUTE FUNCTION(Rtv/Dlt Drv Crd Wrk   RT) TYPE(RTVOBJ) FILE(PKCTCPP)           AB1135868;
 PARAMETER(PAR.BOH_Company_Number);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Delete Drive Card Work) TYPE(DLTOBJ) FILE(PKCTCPP)             AB1134512;
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(DB1.DCW_Sequence_Number);
 }

 //?Retrieve/Change the Pen's Tattoo Dtls: Drive card nbr ,process code
 //? and Create Drive Card Work records for print routine
 EXECUTE FUNCTION(Rtv/Chg TttDtl Drvcrd RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1117429;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.Last_Drive_Card_Number);
 PARAMETER(PAR.Pen_Number);
 PARAMETER(PAR.TDP_Process_Code);
 {
  //?USER: Initialize routine

  // WRK.DCW Sequence Number = CON.*ZERO
  WRK.DCW_Sequence_Number = *ZERO;

  //?USER: Process Data record

  // PAR.TDP Process Code = CND.Drive Card Printed
  PAR.TDP_Process_Code = 'D';

  EXECUTE FUNCTION(Chg Tattoo Detail     CH) TYPE(CHGOBJ) FILE(PKA2CPP)           AB1101751;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TD_Sequence_Number);
  PARAMETER(DB1.TD_Live_Wgt);
  PARAMETER(DB1.TD_Pen_Head);
  PARAMETER(DB1.TD_Yard_Dead);
  PARAMETER(DB1.TD_Held_Over);
  PARAMETER(DB1.TD_Held_Over_Status);
  PARAMETER(DB1.TD_Drive_Time);
  PARAMETER(DB1.TD_Drive_Hour);
  PARAMETER(PAR.TD_Drive_Card_Number);
  PARAMETER(DB1.TD_Avg_Live_Wgt);
  PARAMETER(DB1.TD_Gen_Bal_To_Kill);
  PARAMETER(DB1.TD_Recs_Created_for_HO);
  PARAMETER(DB1.TD_User_Status_2);
  PARAMETER(DB1.TD_User_Status_3);
  PARAMETER(DB1.TD_User_Date_1);
  PARAMETER(DB1.TD_User_Date_2);
  PARAMETER(DB1.TD_Drive_Date);
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(PAR.TDP_Process_Code);
  PARAMETER(DB1.Held_Over_Pen_Company_Num);
  PARAMETER(DB1.Held_Over_Pen_Number);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  //?Build and Create Drive Card Work file record for print
  EXECUTE FUNCTION(Rtv Ttt Hdr Purch Dt  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1134522;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(WRK.TH_Purchase_Date);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // WRK.DCW Sequence Number = WRK.DCW Sequence Number + CON.1
  WRK.DCW_Sequence_Number = WRK.DCW_Sequence_Number + 1;

  // WRK.DCW Pen Head = DB1.TD Pen Head - DB1.TD Yard Dead
  WRK.DCW_Pen_Head = DB1.TD_Pen_Head - DB1.TD_Yard_Dead;

  EXECUTE FUNCTION(Create Drive Card Work) TYPE(CRTOBJ) FILE(PKCTCPP)             AB1134510;
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(WRK.DCW_Sequence_Number);
  PARAMETER(WRK.TH_Purchase_Date);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(WRK.DCW_Pen_Head);
  PARAMETER(PAR.TD_Drive_Card_Number);
  PARAMETER(DB1.TH_Kill_Date);
 }

 // Call program Rtv Cmp Val Num & Incr XF.
 CALL PROGRAM(Rtv Cmp Val Num & Incr XF) ('PMVCXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER('HPEDRVSEQ');
 PARAMETER(LCL.System_Value_Numeric_USR);

 // WRK.Pen Drive Sequence = LCL.System Value Numeric  USR
 WRK.Pen_Drive_Sequence = LCL.System_Value_Numeric_USR;

 //?Rtv/Chg the Pen: Drive card nbr, drive seq, and status 'C'losed
 EXECUTE FUNCTION(Rtv/Chg Pen DrvCrdPrt RT) TYPE(RTVOBJ) FILE(PKA3REP)           AB1117442;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.Pen_Number);
 PARAMETER(PAR.Last_Drive_Card_Number);
 PARAMETER(PAR.Pen_Sts);
 PARAMETER(WRK.Pen_Drive_Sequence);
 {
  //?USER: Process Data record

  // PAR.Pen Sts = CND.Closed
  PAR.Pen_Sts = 'C';

  EXECUTE FUNCTION(Chg Pen               CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1102758;
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(DB1.Pen_Description);
  PARAMETER(DB1.Pen_Maximun_Capacity);
  PARAMETER(DB1.Pen_Current_Head);
  PARAMETER(PAR.Pen_Current_Drive_Card_No);
  PARAMETER(PAR.Pen_Sts);
  PARAMETER(PAR.Pen_Drive_Sequence);
  PARAMETER(DB1.Pen_Type);
  PARAMETER(*ZERO);
  PARAMETER(DB1.GN_Genetic_Code);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 //?**********************************
 //?  Print Drive Card
 //?**********************************
 EXECUTE FUNCTION(Prt Drive Card        IF) TYPE(EXCINTFUN)                      AB1231896;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.Pen_Number);
 {
  //?Execute internal function

  // Call program Rtv Company Values    XF.
  CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
  PARAMETER(PAR.Pen_Company_Number);
  PARAMETER('HPEDRVCRD');
  PARAMETER(LCL.System_Value_Alpha_USR);

  // LCL.PRT Printer Device = LCL.System Value Alpha    USR
  LCL.PRT_Printer_Device = LCL.System_Value_Alpha_USR;

  // Execute command - 'OVRPRTF Printer'
  EXECUTE COMMAND(PRK0941);
  PARAMETER('PKOZPFR$');
  PARAMETER(LCL.PRT_Printer_Device);

  // Call program Prt Drive Card        PF.
  CALL PROGRAM(Prt Drive Card        PF) ('PKOZPFR');
  PARAMETER(PAR.Pen_Company_Number);
  PARAMETER(PAR.Pen_Number);

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Pen &1 must have an Open status for Print Drive Card.'
ERROR(PRK0224);
MSGPARM(RCD.Pen_Number);

ENDIF;

ENDIF;

//?Select option
// IF RCD.*SFLSEL is *Option 7 request
IF RCD.*SFLSEL = '7'/'7';

CASE;

// IF RCD.Pen Type is Resale
IF RCD.Pen_Type = 'R';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option only allowed for a resale pen.'
ERROR(PRK0503);

ENDIF;

ENDIF;

//?USER: Final processing (Pre-confirm)

// WRK.Display Print Prompt  Usr = CND.Prompt is to be displayed
WRK.Display_Print_Prompt_Usr = 'Y';

//?USER: Process subfile record (Post-confirm)

CASE;

// IF RCD.*SFLSEL is Void Drive Card
IF RCD.*SFLSEL = '4';

// AND RCD.Pen Sts is Closed
AND RCD.Pen_Sts = 'C';

EXECUTE FUNCTION(Exc Void Drive Card   IF) TYPE(EXCINTFUN)                      AB1117520;
PARAMETER(RCD.Pen_Number);
PARAMETER(RCD.Pen_Company_Number);
PARAMETER(RCD.Pen_Current_Drive_Card_No);
PARAMETER(RCD.Pen_Drive_Sequence);
PARAMETER(RCD.Pen_Sts);
PARAMETER(RCD.Pen_Current_Head);
{
 //?Execute internal function

 //?Rtv/Chg Pen: 'O'pen status, Set drive card, drive seq to 0
 EXECUTE FUNCTION(Rtv/Chg Pen Void Drv  RT) TYPE(RTVOBJ) FILE(PKA3REP)           AB1115833;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.Pen_Number);
 PARAMETER(PAR.Pen_Current_Head);
 PARAMETER(PAR.Pen_Current_Drive_Card_No);
 PARAMETER(PAR.Pen_Sts);
 PARAMETER(PAR.Pen_Drive_Sequence);
 {
  //?USER: Process Data record

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Pen_Current_Drive_Card_No = WRK.Zero_USR;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Pen_Drive_Sequence = WRK.Zero_USR;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Pen_Sts = 'O';

  EXECUTE FUNCTION(Chg Pen               CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1102758;
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(DB1.Pen_Description);
  PARAMETER(DB1.Pen_Maximun_Capacity);
  PARAMETER(DB1.Pen_Current_Head);
  PARAMETER(PAR.Pen_Current_Drive_Card_No);
  PARAMETER(PAR.Pen_Sts);
  PARAMETER(PAR.Pen_Drive_Sequence);
  PARAMETER(DB1.Pen_Type);
  PARAMETER(DB1.Pen_Adjustment);
  PARAMETER(DB1.GN_Genetic_Code);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 //?Rtv/Chg Tattoo Dtls: 'O'pen process code, Set drive card to 0
 EXECUTE FUNCTION(Rtv/Chg Ttt Dtl Drv   RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1115883;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.Pen_Number);
 {
  //?USER: Process Data record

  //?For Void Drive Card:  Set Drive Card Nbr to 0 and Process Code to Open
  // PAR.TD Drive Card Number = CON.*ZERO
  PAR.TD_Drive_Card_Number = *ZERO;

  // PAR.TDP Process Code = CND.Open
  PAR.TDP_Process_Code = 'O';

  EXECUTE FUNCTION(Chg Tattoo Detail     CH) TYPE(CHGOBJ) FILE(PKA2CPP)           AB1101751;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TD_Sequence_Number);
  PARAMETER(DB1.TD_Live_Wgt);
  PARAMETER(DB1.TD_Pen_Head);
  PARAMETER(DB1.TD_Yard_Dead);
  PARAMETER(DB1.TD_Held_Over);
  PARAMETER(DB1.TD_Held_Over_Status);
  PARAMETER(DB1.TD_Drive_Time);
  PARAMETER(DB1.TD_Drive_Hour);
  PARAMETER(PAR.TD_Drive_Card_Number);
  PARAMETER(DB1.TD_Avg_Live_Wgt);
  PARAMETER(DB1.TD_Gen_Bal_To_Kill);
  PARAMETER(DB1.TD_Recs_Created_for_HO);
  PARAMETER(DB1.TD_User_Status_2);
  PARAMETER(DB1.TD_User_Status_3);
  PARAMETER(DB1.TD_User_Date_1);
  PARAMETER(DB1.TD_User_Date_2);
  PARAMETER(DB1.TD_Drive_Date);
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(PAR.TDP_Process_Code);
  PARAMETER(DB1.Held_Over_Pen_Company_Num);
  PARAMETER(DB1.Held_Over_Pen_Number);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF RCD.*SFLSEL is *Option 7 request
IF RCD.*SFLSEL = '7'/'7';

// AND RCD.Pen Type is Resale
AND RCD.Pen_Type = 'R';

EXECUTE FUNCTION(Exc Ttt Empty Rsl Pen IF) TYPE(EXCINTFUN)                      AB1156210;
PARAMETER(RCD.Pen_Number);
PARAMETER(RCD.Pen_Company_Number);
PARAMETER(RCD.Pen_Current_Drive_Card_No);
{
 //?Execute internal function

 //?Retreive/Change the Pen's Tattoo Dtls: Process code     AND
 //? Held Over Processing for any Tattoo Dtls with Held Over Status = Y
 EXECUTE FUNCTION(Rtv/Chg TttDtl Rsl    RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1156284;
 PARAMETER(PAR.Pen_Company_Number);
 PARAMETER(PAR.Pen_Number);
 {
  //?USER: Process Data record

  // WRK.TDP Process Code = CND.Driven to Kill/Resold
  WRK.TDP_Process_Code = 'K';

  // WRK.TD Live Wgt = WRK.TD Pen Head * DB1.TD Avg Live Wgt *
  WRK.TD_Live_Wgt = WRK.TD_Pen_Head * DB1.TD_Avg_Live_Wgt;

  // LCL.TD Drive Hour = JOB.*Job hour
  LCL.TD_Drive_Hour = JOB.*Job_hour;

  EXECUTE FUNCTION(Chg Tattoo Detail     CH) TYPE(CHGOBJ) FILE(PKA2CPP)           AB1101751;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TD_Sequence_Number);
  PARAMETER(WRK.TD_Live_Wgt);
  PARAMETER(WRK.TD_Pen_Head);
  PARAMETER(DB1.TD_Yard_Dead);
  PARAMETER(DB1.TD_Held_Over);
  PARAMETER(WRK.TD_Held_Over_Status);
  PARAMETER(JOB.*Job_time);
  PARAMETER(LCL.TD_Drive_Hour);
  PARAMETER(DB1.TD_Drive_Card_Number);
  PARAMETER(DB1.TD_Avg_Live_Wgt);
  PARAMETER(DB1.TD_Gen_Bal_To_Kill);
  PARAMETER(DB1.TD_Recs_Created_for_HO);
  PARAMETER(DB1.TD_User_Status_2);
  PARAMETER(DB1.TD_User_Status_3);
  PARAMETER(DB1.TD_User_Date_1);
  PARAMETER(DB1.TD_User_Date_2);
  PARAMETER(JOB.*Job_date);
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(WRK.TDP_Process_Code);
  PARAMETER(DB1.Held_Over_Pen_Company_Num);
  PARAMETER(DB1.Held_Over_Pen_Number);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 //?Rtv/Chg the Pen: Drive card nbr & seq, hd adj., and status 'O'pen
 //?and Recount Pen Head
 EXECUTE FUNCTION(Rtv/Chg Pen To Open   RT) TYPE(RTVOBJ) FILE(PKA3REP)           AB1119348;
 PARAMETER(PAR.Pen_Company_Number);
 PARAMETER(PAR.Pen_Number);
 {
  //?USER: Process Data record

  // WRK.Pen Current Drive Card No = WRK.Zero USR
  WRK.Pen_Current_Drive_Card_No = WRK.Zero_USR;

  // WRK.Pen Drive Sequence = WRK.Zero USR
  WRK.Pen_Drive_Sequence = WRK.Zero_USR;

  // WRK.Pen Sts = CND.Open
  WRK.Pen_Sts = 'O';

  // WRK.Pen Adjustment = WRK.Zero USR
  WRK.Pen_Adjustment = WRK.Zero_USR;

  EXECUTE FUNCTION(Chg Pen               CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1102758;
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(DB1.Pen_Description);
  PARAMETER(DB1.Pen_Maximun_Capacity);
  PARAMETER(DB1.Pen_Current_Head);
  PARAMETER(WRK.Pen_Current_Drive_Card_No);
  PARAMETER(WRK.Pen_Sts);
  PARAMETER(WRK.Pen_Drive_Sequence);
  PARAMETER(DB1.Pen_Type);
  PARAMETER(WRK.Pen_Adjustment);
  PARAMETER(DB1.GN_Genetic_Code);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  //?Recount Pen Head Count and Chg the Pen
  EXECUTE FUNCTION(Rtv Dtl hd/Chg Pen    RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1110385;
  PARAMETER(PAR.Pen_Company_Number);
  PARAMETER(PAR.Pen_Number);
  {
   //?USER: Initialize routine

   EXECUTE FUNCTION(Set Pen Totals to Zeros) TYPE(RTVOBJ) FILE(PKA3REP)            AB1110376;
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.Pen_Number);
   PARAMETER(*ZERO);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(Chg Pen               CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1102758;
    PARAMETER(DB1.Pen_Company_Number);
    PARAMETER(DB1.Pen_Number);
    PARAMETER(WRK.Blank_USR);
    PARAMETER(DB1.Pen_Maximun_Capacity);
    PARAMETER(*ZERO);
    PARAMETER(DB1.Pen_Current_Drive_Card_No);
    PARAMETER(DB1.Pen_Sts);
    PARAMETER(DB1.Pen_Drive_Sequence);
    PARAMETER(DB1.Pen_Type);
    PARAMETER(DB1.Pen_Adjustment);
    PARAMETER(WRK.Blank_USR);
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
     PARAMETER(DB1.RS_User_Changed);
     PARAMETER(DB1.RS_Date_Changed);
     PARAMETER(DB1.RS_Time_Changed);
     PARAMETER(DB1.RS_Job);
     PARAMETER(DB1.RS_Program);
     {
      //?Execute internal function

      // PAR.RS User Changed = JOB.*USER
      PAR.RS_User_Changed = JOB.*USER;

      // PAR.RS Date Changed = JOB.*Job date
      PAR.RS_Date_Changed = JOB.*Job_date;

      // PAR.RS Time Changed = JOB.*Job time
      PAR.RS_Time_Changed = JOB.*Job_time;

      // PAR.RS Job = JOB.*JOB
      PAR.RS_Job = JOB.*JOB;

      // PAR.RS Program = JOB.*PROGRAM
      PAR.RS_Program = JOB.*PROGRAM;

     }

    }

   }

   //?USER: Processing if Data record not found

   // WRK.Pen Description = CON.*BLANK
   WRK.Pen_Description = *BLANK;

   // WRK.GN Genetic Code = CON.*BLANK
   WRK.GN_Genetic_Code = *BLANK;

   EXECUTE FUNCTION(Chg Pen Genetics      CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1119678;
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.Pen_Number);
   PARAMETER(WRK.Pen_Description);
   PARAMETER(WRK.GN_Genetic_Code);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

   //?USER: Process Data record

   EXECUTE FUNCTION(Rtv/Chg Pen Totals    RT) TYPE(RTVOBJ) FILE(PKA3REP)           AB1110372;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.Pen_Number);
   PARAMETER(DB1.TD_Pen_Head);
   PARAMETER(DB1.TD_Yard_Dead);
   {
    //?USER: Process Data record

    // WRK.Pen Current Head = PAR.TD Pen Head + DB1.Pen Current Head
    WRK.Pen_Current_Head = PAR.TD_Pen_Head + DB1.Pen_Current_Head;

    // WRK.Pen Current Head = WRK.Pen Current Head - PAR.TD Yard Dead
    WRK.Pen_Current_Head = WRK.Pen_Current_Head - PAR.TD_Yard_Dead;

    EXECUTE FUNCTION(Chg Pen               CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1102758;
    PARAMETER(DB1.Pen_Company_Number);
    PARAMETER(DB1.Pen_Number);
    PARAMETER(DB1.Pen_Description);
    PARAMETER(DB1.Pen_Maximun_Capacity);
    PARAMETER(WRK.Pen_Current_Head);
    PARAMETER(DB1.Pen_Current_Drive_Card_No);
    PARAMETER(DB1.Pen_Sts);
    PARAMETER(DB1.Pen_Drive_Sequence);
    PARAMETER(DB1.Pen_Type);
    PARAMETER(DB1.Pen_Adjustment);
    PARAMETER(DB1.GN_Genetic_Code);
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
     PARAMETER(DB1.RS_User_Changed);
     PARAMETER(DB1.RS_Date_Changed);
     PARAMETER(DB1.RS_Time_Changed);
     PARAMETER(DB1.RS_Job);
     PARAMETER(DB1.RS_Program);
     {
      //?Execute internal function

      // PAR.RS User Changed = JOB.*USER
      PAR.RS_User_Changed = JOB.*USER;

      // PAR.RS Date Changed = JOB.*Job date
      PAR.RS_Date_Changed = JOB.*Job_date;

      // PAR.RS Time Changed = JOB.*Job time
      PAR.RS_Time_Changed = JOB.*Job_time;

      // PAR.RS Job = JOB.*JOB
      PAR.RS_Job = JOB.*JOB;

      // PAR.RS Program = JOB.*PROGRAM
      PAR.RS_Program = JOB.*PROGRAM;

     }

    }

   }

   //?USER: Exit processing

   // WRK.Pen Description = CON.*BLANK
   WRK.Pen_Description = *BLANK;

   // WRK.GN Genetic Code = CON.*BLANK
   WRK.GN_Genetic_Code = *BLANK;

   EXECUTE FUNCTION(Rtv Pen GENETICS      RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1107816;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.Pen_Number);
   PARAMETER(WRK.Pen_Description);
   PARAMETER(WRK.GN_Genetic_Code);
   {
    //?USER: Processing if Data record not found

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Pen_Description = *BLANK;

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.GN_Genetic_Code = *BLANK;

    //?USER: Process Data record

    CASE;

    // IF DB1.TDP Process Code is Drive Card Printed
    IF DB1.TDP_Process_Code = 'D';

    // OR DB1.TDP Process Code is Open
    OR DB1.TDP_Process_Code = 'O';

    EXECUTE FUNCTION(Rtv Tattoo GENETICS) TYPE(RTVOBJ) FILE(PKA1CPP)                AB1107783;
    PARAMETER(DB1.BOH_Company_Number);
    PARAMETER(DB1.BOH_Buy_Order_Number);
    PARAMETER(DB1.BOL_Load_Number);
    PARAMETER(DB1.TH_Tattoo_Number);
    PARAMETER(WRK.Genetic_Code_USR);
    PARAMETER(WRK.Pen_Desc_USR);
    {
     //?USER: Processing if Data record not found

     // *MO.VE             1183529*Bu = ilt. in functions
     PAR.GN_Genetic_Code = *BLANK;

     // *MO.VE             1183529*Bu = ilt. in functions
     PAR.Pen_Description = *BLANK;

     //?USER: Process Data record

     // PAR.GN Genetic Code = DB1.GN Genetic Code
     PAR.GN_Genetic_Code = DB1.GN_Genetic_Code;

     EXECUTE FUNCTION(Rtv Genetic Record    RT) TYPE(RTVOBJ) FILE(PKAIREP)           AB1107738;
     PARAMETER(DB1.GN_Genetic_Code);
     PARAMETER(PAR.Pen_Description);
     {
      //?USER: Processing if Data record not found

      // *MO.VE             1183529*Bu = ilt. in functions
      PAR.GN_Description = *BLANK;

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    CASE;

    // IF PAR.GN Genetic Code is BLANKS
    IF PAR.GN_Genetic_Code = *BLANK;

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.GN_Genetic_Code = WRK.Genetic_Code_USR;

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Pen_Description = WRK.Pen_Desc_USR;

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF WRK.Genetic Code USR NE PAR.GN Genetic Code
    IF WRK.Genetic_Code_USR <> PAR.GN_Genetic_Code;

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Pen_Description = 'MIXED';

    ENDIF;

    ENDIF;

    ENDIF;

   }

   EXECUTE FUNCTION(Chg Pen Genetics      CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1119678;
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.Pen_Number);
   PARAMETER(WRK.Pen_Description);
   PARAMETER(WRK.GN_Genetic_Code);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

