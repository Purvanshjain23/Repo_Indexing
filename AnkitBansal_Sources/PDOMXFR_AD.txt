// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDOMXFR
// ?Date: 14.08.2025 Time: 03:29:08
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?IF Pre Update, assumes that the QTEMP files have been loaded
//?Initialize parms
DO;

// PAR.USR Total Consumed Items = CON.*ZERO
PAR.USR_Total_Consumed_Items = *ZERO;

// PAR.USR Muscle Yield Amt = CON.*ZERO
PAR.USR_Muscle_Yield_Amt = *ZERO;

// PAR.Total Credit Dollars = CON.*ZERO
PAR.Total_Credit_Dollars = *ZERO;

// PAR.USR Formula Overages = CON.*ZERO
PAR.USR_Formula_Overages = *ZERO;

// PAR.USR Differential = CON.*ZERO
PAR.USR_Differential = *ZERO;

// PAR.Starting Product Price = CON.*ZERO
PAR.Starting_Product_Price = *ZERO;

// PAR.Muscle Yield Price = CON.*ZERO
PAR.Muscle_Yield_Price = *ZERO;

// PAR.Credit Value = CON.*ZERO
PAR.Credit_Value = *ZERO;

// PAR.Formula Overage = CON.*ZERO
PAR.Standard_Overage_Underage = *ZERO;

// PAR.USR Cust/Item Differentl = CON.*ZERO
PAR.USR_Cust_Item_Differentl = *ZERO;

ENDDO;

CASE;

// IF PAR.Event Called From is Pre-Update Invoice
IF PAR.Event_Called_From = **;

EXECUTE FUNCTION(RTV Ship Prc Total WK  RT) TYPE(RTVOBJ) FILE(PDIMCPP)          AC1313661;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.USR_Total_Consumed_Items);
PARAMETER(PAR.USR_Muscle_Yield_Amt);
PARAMETER(PAR.Total_Credit_Dollars);
PARAMETER(PAR.USR_Formula_Overages);
PARAMETER(PAR.USR_Differential);
PARAMETER(PAR.Starting_Product_Price);
PARAMETER(PAR.Credit_Value);
PARAMETER(PAR.Muscle_Yield_Price);
PARAMETER(PAR.Standard_Overage_Underage);
PARAMETER(PAR.USR_Cust_Item_Differentl);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Price Method Componant is STRITM
 IF DB1.Price_Method_Componant = 'STRITM';

 // PAR.Starting Product Price = PAR.Starting Product Price + DB1.Componant Price
 PAR.Starting_Product_Price = PAR.Starting_Product_Price + DB1.Componant_Price;

 // IF DB1.Price Method Componant is SUBCRD
 IF DB1.Price_Method_Componant = 'SUBCRD';

 // PAR.Credit Value = PAR.Credit Value + DB1.Componant Price
 PAR.Credit_Value = PAR.Credit_Value + DB1.Componant_Price;

 // IF DB1.Price Method Componant is MSCYLD
 IF DB1.Price_Method_Componant = 'MSCYLD';

 // PAR.Muscle Yield Price = PAR.Muscle Yield Price + DB1.Componant Price
 PAR.Muscle_Yield_Price = PAR.Muscle_Yield_Price + DB1.Componant_Price;

 // IF DB1.Price Method Componant is CIFMPF
 IF DB1.Price_Method_Componant = 'CIFMPF';

 // OR DB1.Price Method Componant is IOVRFM
 OR DB1.Price_Method_Componant = 'IOVRFM';

 // OR DB1.Price Method Componant is CFRTOV
 OR DB1.Price_Method_Componant = 'CFRTOV';

 // PAR.Formula Overage = PAR.Formula Overage + DB1.Componant Price
 PAR.Standard_Overage_Underage = PAR.Standard_Overage_Underage + DB1.Componant_Price;

 // IF DB1.Price Method Componant is CIDIFF
 IF DB1.Price_Method_Componant = 'CIDIFF';

 // PAR.USR Cust/Item Differentl = PAR.USR Cust/Item Differentl + DB1.Componant Pric
 PAR.USR_Cust_Item_Differentl = PAR.USR_Cust_Item_Differentl + DB1.Componant_Price;

 ENDIF;

 //?USER: Exit processing

 // PAR.USR Total Consumed Items = PAR.Starting Product Price * CON.1 *Rounded
 PAR.USR_Total_Consumed_Items = PAR.Starting_Product_Price * 1 'H';

 // PAR.Total Credit Dollars = PAR.Credit Value * CON.1 *Rounded
 PAR.Total_Credit_Dollars = PAR.Credit_Value * 1 'H';

 // PAR.USR Muscle Yield Amt = PAR.Muscle Yield Price * CON.1 *Rounded
 PAR.USR_Muscle_Yield_Amt = PAR.Muscle_Yield_Price * 1 'H';

 // PAR.USR Formula Overages = PAR.Formula Overage * CON.1 *Rounded
 PAR.USR_Formula_Overages = PAR.Standard_Overage_Underage * 1 'H';

 // PAR.USR Differential = PAR.USR Cust/Item Differentl * CON.1 *Rounded
 PAR.USR_Differential = PAR.USR_Cust_Item_Differentl * 1 'H';

}


// IF PAR.Event Called From is Invoice Update
IF PAR.Event_Called_From = '02';

EXECUTE FUNCTION(RTV Ship Prc Total     RT) TYPE(RTVOBJ) FILE(PDIMCPP)          AC1313674;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.USR_Total_Consumed_Items);
PARAMETER(PAR.USR_Muscle_Yield_Amt);
PARAMETER(PAR.Total_Credit_Dollars);
PARAMETER(PAR.USR_Formula_Overages);
PARAMETER(PAR.USR_Differential);
PARAMETER(PAR.Starting_Product_Price);
PARAMETER(PAR.Credit_Value);
PARAMETER(PAR.Muscle_Yield_Price);
PARAMETER(PAR.Standard_Overage_Underage);
PARAMETER(PAR.USR_Cust_Item_Differentl);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Price Method Componant is STRITM
 IF DB1.Price_Method_Componant = 'STRITM';

 // PAR.Starting Product Price = PAR.Starting Product Price + DB1.Componant Price
 PAR.Starting_Product_Price = PAR.Starting_Product_Price + DB1.Componant_Price;

 // IF DB1.Price Method Componant is SUBCRD
 IF DB1.Price_Method_Componant = 'SUBCRD';

 // PAR.Credit Value = PAR.Credit Value + DB1.Componant Price
 PAR.Credit_Value = PAR.Credit_Value + DB1.Componant_Price;

 // IF DB1.Price Method Componant is MSCYLD
 IF DB1.Price_Method_Componant = 'MSCYLD';

 // PAR.Muscle Yield Price = PAR.Muscle Yield Price + DB1.Componant Price
 PAR.Muscle_Yield_Price = PAR.Muscle_Yield_Price + DB1.Componant_Price;

 // IF DB1.Price Method Componant is CIFMPF
 IF DB1.Price_Method_Componant = 'CIFMPF';

 // OR DB1.Price Method Componant is IOVRFM
 OR DB1.Price_Method_Componant = 'IOVRFM';

 // OR DB1.Price Method Componant is CFRTOV
 OR DB1.Price_Method_Componant = 'CFRTOV';

 // PAR.Formula Overage = PAR.Formula Overage + DB1.Componant Price
 PAR.Standard_Overage_Underage = PAR.Standard_Overage_Underage + DB1.Componant_Price;

 // IF DB1.Price Method Componant is CIDIFF
 IF DB1.Price_Method_Componant = 'CIDIFF';

 // PAR.USR Cust/Item Differentl = PAR.USR Cust/Item Differentl + DB1.Componant Pric
 PAR.USR_Cust_Item_Differentl = PAR.USR_Cust_Item_Differentl + DB1.Componant_Price;

 ENDIF;

 //?USER: Exit processing

 // PAR.USR Total Consumed Items = PAR.Starting Product Price * CON.1 *Rounded
 PAR.USR_Total_Consumed_Items = PAR.Starting_Product_Price * 1 'H';

 // PAR.Total Credit Dollars = PAR.Credit Value * CON.1 *Rounded
 PAR.Total_Credit_Dollars = PAR.Credit_Value * 1 'H';

 // PAR.USR Muscle Yield Amt = PAR.Muscle Yield Price * CON.1 *Rounded
 PAR.USR_Muscle_Yield_Amt = PAR.Muscle_Yield_Price * 1 'H';

 // PAR.USR Formula Overages = PAR.Formula Overage * CON.1 *Rounded
 PAR.USR_Formula_Overages = PAR.Standard_Overage_Underage * 1 'H';

 // PAR.USR Differential = PAR.USR Cust/Item Differentl * CON.1 *Rounded
 PAR.USR_Differential = PAR.USR_Cust_Item_Differentl * 1 'H';

}


ENDIF;

