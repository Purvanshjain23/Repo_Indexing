// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POIQE1R
// ?Date: 31.08.2025 Time: 22:18:18
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// Call program Rtv Alpha Value       XF.
CALL PROGRAM(Rtv Alpha Value       XF) ('POMTXFR');
PARAMETER(PAR.Company_Number);
PARAMETER('MPGFORMV2');
PARAMETER(LCL.FSIS_V2_Forms_Active);

EXECUTE FUNCTION(Rtv Live with PHIS    RT) TYPE(RTVOBJ) FILE(PDMMREP)           AC2160999;
PARAMETER(PAR.Company_Number);
PARAMETER('A');
PARAMETER(PAR.Country_Code);
PARAMETER(LCL.ED_Live_with_PHIS);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize detail screen (new record)

// DTL.ED Live with PHIS = LCL.ED Live with PHIS
DTL.ED_Live_with_PHIS = LCL.ED_Live_with_PHIS;

//?USER: Initialize detail screen (existing record)

// DTL.Consignee Number = DTL.ED Consignee Address Nbr
DTL.Consignee_Number = DTL.ED_Consignee_Address_Nbr;

//?R16637 DN 09/24/20-Set to 'NLL' for PHIS Fields No Longer Used.
EXECUTE FUNCTION(Rtv PHIS Info         RT) TYPE(RTVOBJ) FILE(PUA6CPP)           AC2161519;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(DB1.ED_Export_Document_Type);
PARAMETER(DB1.Country_Code);
PARAMETER(NLL.EDE_Reason_f_Replcmnt_Sts);
PARAMETER(DTL.EDE_Shipment_Type_Sts);
PARAMETER(DTL.EDE_Frozen_Shelf_Life_Sts);
PARAMETER(NLL.EDE_ISO_Alpha_2_code);
PARAMETER(NLL.EDE_USDA_Export_Mark_Sts);
PARAMETER(NLL.EDE_Special_Printing_Ctl);
PARAMETER(NLL.EDE_Appl_Billing_First_Nm);
PARAMETER(NLL.EDE_Appl_Billing_Last_Nm);
PARAMETER(NLL.EDE_Unused_Date);
PARAMETER(NLL.EDE_Country_of_Final_Dest);
PARAMETER(NLL.EDE_Transit_Country);
PARAMETER(NLL.EDE_Container_Number);
PARAMETER(NLL.EDE_Unused_Text_25);
PARAMETER(NLL.EDE_Additional_Stmt);
PARAMETER(NLL.EDE_IFS_PHIS_Doc_Filename);
PARAMETER(NLL.EDE_Port_of_Entry);
PARAMETER(NLL.EDE_Unused_2);
PARAMETER(NLL.EDE_Unused_3);
PARAMETER(NLL.EDE_Unused_4);
PARAMETER(NLL.EDE_Unused_5);
PARAMETER(DTL.EDE_Consignee_Tele_PHIS);
PARAMETER(NLL.EDE_Unused_6);
PARAMETER(NLL.EDE_Unused_7);
PARAMETER(NLL.EDE_Unused_8);
PARAMETER(NLL.EDE_Unused_9);
PARAMETER(NLL.EDE_Unused_10);
PARAMETER(NLL.EDE_Unused_11);
PARAMETER(DTL.EDE_Consignor_Tele_PHIS);
PARAMETER(NLL.EDE_PHIS_Process_Status);
PARAMETER(NLL.EDE_ETL_Process_Timestamp);
PARAMETER(NLL.EDE_PHIS_Action);
PARAMETER(NLL.EDE_Return_Cde_Error);
PARAMETER(NLL.EDE_Application_UID);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.ED Live with PHIS = LCL.ED Live with PHIS
DTL.ED_Live_with_PHIS = LCL.ED_Live_with_PHIS;

//?USER: Validate detail screen fields

//?F4=Prompt
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

//?Consignor Name.
CASE;

// IF PGM.*Cursor field <IS> DTL.ED Consignor Name
IF PGM.*Cursor_field = DTL.ED_Consignor_Name;

//?9/24/20 DN-Existing Issue when F4 & Don't Select Anything. Wipes
//?           out everything on Consignor Fields.
//?9/24/20 DN-Set LCL.Consignee Number = 0. Do not use Consignee Number Here.
// LCL.Consignee Number = CON.*ZERO
LCL.Consignee_Number = *ZERO;

// Call program Sel Consignee Name    SL.
CALL PROGRAM(Sel Consignee Name    SL) ('POILSRR');
PARAMETER(LCL.Consignee_Number);
PARAMETER('O');
PARAMETER('CONSIGNOR');

//?New Logic - R16637 DN 09/24/20.
CASE;

// IF LCL.Consignee Number is *zero
IF LCL.Consignee_Number = *ZERO;

//?New Logic - R16637 DN 09/24/20.
// IF *OTHERWISE
IF *OTHERWISE;

//?R16637 DN 09/24/20-Set to 'NLL' for PHIS Fields No Longer Used.
EXECUTE FUNCTION(Rtv Consignee Address RT) TYPE(RTVOBJ) FILE(POA2REP)           AC1611354;
PARAMETER(LCL.Consignee_Number);
PARAMETER(DTL.ED_Consignor_Name);
PARAMETER(DTL.ED_Consignor_Addr_1);
PARAMETER(DTL.ED_Consignor_Addr_2);
PARAMETER(DTL.ED_Consignor_Addr_3);
PARAMETER(DTL.ED_Consignor_Addr_4);
PARAMETER(DTL.ED_Consignor_State);
PARAMETER(DTL.ED_Consignor_Postal);
PARAMETER(DTL.ED_Consignor_Country_Code);
PARAMETER(DTL.EDE_Consignor_Tele_PHIS);
PARAMETER(NLL.Consignee_Addr_1_PHIS);
PARAMETER(NLL.Consignee_Addr_2_PHIS);
PARAMETER(NLL.Consignee_Addr_3_PHIS);
PARAMETER(NLL.Consignee_city_PHIS);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

ENDIF;

//?Consignor State.
CASE;

// IF PGM.*Cursor field <IS> DTL.ED Consignor State
IF PGM.*Cursor_field = DTL.ED_Consignor_State;

// Call program SEL State              SR.
CALL PROGRAM(SEL State              SR) ('CAAHSRR');
PARAMETER(DTL.ED_Consignor_State);

ENDIF;

//?Consignor Country
CASE;

// IF PGM.*Cursor field <IS> DTL.ED Consignor Country Code
IF PGM.*Cursor_field = DTL.ED_Consignor_Country_Code;

// Call program SEL Country Active     SR.
CALL PROGRAM(SEL Country Active     SR) ('PDEGSRR');
PARAMETER(DTL.ED_Consignor_Country_Code);

ENDIF;

//?Consignee Name.
CASE;

// IF PGM.*Cursor field <IS> DTL.ED Consignee Name
IF PGM.*Cursor_field = DTL.ED_Consignee_Name;

//?9/24/20 DN-Existing Issue when F4 & Don't Select Anything. Wipes
//?           out the Consignee Number.
//?9/24/20 DN-Save 'Before' Consignee Number.
// LCL.Consignee Number = DTL.Consignee Number
LCL.Consignee_Number = DTL.Consignee_Number;

// Call program WW Consignee Address  DF.
CALL PROGRAM(WW Consignee Address  DF) ('POIMDFR');
PARAMETER(DTL.Consignee_Number);

CASE;

// IF DTL.Consignee Number is *zero
IF DTL.Consignee_Number = *ZERO;

//?9/24/20 DN-Reset Consignee Number to Original.
// DTL.Consignee Number = LCL.Consignee Number
DTL.Consignee_Number = LCL.Consignee_Number;

// IF *OTHERWISE
IF *OTHERWISE;

//?R16637 DN 09/23/20-Set to 'NLL' for PHIS Fields No Longer Used.
EXECUTE FUNCTION(Rtv Consignee Address RT) TYPE(RTVOBJ) FILE(POA2REP)           AC1611354;
PARAMETER(DTL.Consignee_Number);
PARAMETER(DTL.ED_Consignee_Name);
PARAMETER(DTL.ED_Consignee_Addr_1);
PARAMETER(DTL.ED_Consignee_Addr_2);
PARAMETER(DTL.ED_Consignee_Addr_3);
PARAMETER(DTL.ED_Consignee_Addr_4);
PARAMETER(DTL.ED_Consignee_State);
PARAMETER(DTL.ED_Consignee_Postal);
PARAMETER(DTL.ED_Consignee_Country_Code);
PARAMETER(DTL.EDE_Consignee_Tele_PHIS);
PARAMETER(NLL.Consignee_Addr_1_PHIS);
PARAMETER(NLL.Consignee_Addr_2_PHIS);
PARAMETER(NLL.Consignee_Addr_3_PHIS);
PARAMETER(NLL.Consignee_city_PHIS);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

ENDIF;

//?Consignee State.
CASE;

// IF PGM.*Cursor field <IS> DTL.ED Consignee State
IF PGM.*Cursor_field = DTL.ED_Consignee_State;

// Call program SEL State              SR.
CALL PROGRAM(SEL State              SR) ('CAAHSRR');
PARAMETER(DTL.ED_Consignee_State);

ENDIF;

//?Consignee Country
CASE;

// IF PGM.*Cursor field <IS> DTL.ED Consignee Country Code
IF PGM.*Cursor_field = DTL.ED_Consignee_Country_Code;

// Call program SEL Country Active     SR.
CALL PROGRAM(SEL Country Active     SR) ('PDEGSRR');
PARAMETER(DTL.ED_Consignee_Country_Code);

ENDIF;

ENDIF;

CASE;

// IF DTL.Country Code is Canada
IF DTL.Country_Code = 'CAN';

CASE;

// IF DTL.ED MPR Canadian Province is *ALL values
IF DTL.ED_MPR_Canadian_Province = 'ON'/'AB'/'BC'/'YU'/'MB'/'NT'/'NU'/'NS'/'SA'/'QB'/'QC';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Required for MPR LS-89 processing.'
ERROR(USR4561);
MSGPARM(DTL.ED_MPR_Canadian_Province);

ENDIF;

ENDIF;

//?Validate new fields if V2 of FSIS forms is active
CASE;

// IF LCL.FSIS V2 Forms Active is Yes
IF LCL.FSIS_V2_Forms_Active = 'Y';

CASE;

// IF DTL.EDE Shipment Type Sts is *ALL values
IF DTL.EDE_Shipment_Type_Sts = '1'/'2'/'3'/'7'/'4'/'5'/'6';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Shipment Type Invalid.'
ERROR(USR5077);
MSGPARM(DTL.EDE_Shipment_Type_Sts);

ENDIF;

CASE;

// IF DTL.EDE Frozen/Shelf Life Sts is *ALL values
IF DTL.EDE_Frozen_Shelf_Life_Sts = 'Y'/'N';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Froze/Shelf Life must be Y/N.'
ERROR(USR5078);
MSGPARM(DTL.EDE_Frozen_Shelf_Life_Sts);

ENDIF;

ENDIF;

//?USER: Validate detail screen relations

//?E01457 -4/1/2011  new req for Mex MP cert, if company value MPGMEXREQ=Y
CASE;

// IF DTL.Country Code is Mexico
IF DTL.Country_Code = 'MEX';

EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(DTL.Company_Number);
PARAMETER('MPGMEXREQ');
PARAMETER(LCL.Status_Y_or_N);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Status - Y or N is yes
IF LCL.Status_Y_or_N = 'Y';

//?Remark 1 has text 'Best if used by', remark 2-5 will have the dest
CASE;

// IF DTL.ED Remark Constant 2 is Blank
IF DTL.ED_Remark_Constant_2 = *BLANK;

// DTL.ED Remark Constant 2 = CONCAT(CON.Destination:,DTL.ED Consignee Name,CON.1)
DTL.ED_Remark_Constant_2 = 'Destination:' + DTL.ED_Consignee_Name (1);

// DTL.ED Remark Constant 3 = CONCAT(LCL.Blank for 12          USR,DTL.ED Consignee Addr 1,CON.13)
DTL.ED_Remark_Constant_3 = LCL.Blank_for_12_USR + DTL.ED_Consignee_Addr_1 (13);

// DTL.ED Remark Constant 4 = CONCAT(LCL.Blank for 12          USR,DTL.ED Consignee Addr 2,CON.13)
DTL.ED_Remark_Constant_4 = LCL.Blank_for_12_USR + DTL.ED_Consignee_Addr_2 (13);

// DTL.ED Remark Constant 5 = CONCAT(LCL.Blank for 12          USR,DTL.ED Consignee Addr 3,CON.13)
DTL.ED_Remark_Constant_5 = LCL.Blank_for_12_USR + DTL.ED_Consignee_Addr_3 (13);

ENDIF;

ENDIF;

ENDIF;

// DTL.ED Consignee Address Nbr = DTL.Consignee Number
DTL.ED_Consignee_Address_Nbr = DTL.Consignee_Number;

//?R16637 DN 09/23/20-Validation for Consignor/Consignee.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Required Fields If Live with PHIS.
CASE;

// IF DTL.ED Live with PHIS is yes
IF DTL.ED_Live_with_PHIS = 'Y';

//?Consignor Addr 4/City.
CASE;

// IF DTL.ED Consignor Addr 4 is Blank
IF DTL.ED_Consignor_Addr_4 = *BLANK;

// Send error message - 'Value Required'
ERROR(USR1852);
MSGPARM(DTL.ED_Consignor_Addr_4);

ENDIF;

//?Consignor Country.
CASE;

// IF DTL.ED Consignor Country Code is Blank
IF DTL.ED_Consignor_Country_Code = *BLANK;

// Send error message - 'Value Required'
ERROR(USR1852);
MSGPARM(DTL.ED_Consignor_Country_Code);

ENDIF;

//?Consignor State if Country is USA.
CASE;

// IF DTL.ED Consignor State is *Blanks
IF DTL.ED_Consignor_State = *BLANK;

// AND DTL.ED Consignor Country Code is USA
AND DTL.ED_Consignor_Country_Code = 'USA';

// Send error message - 'Value Required'
ERROR(USR1852);
MSGPARM(DTL.ED_Consignor_State);

QUIT;

ENDIF;

//?Consignor Zip.
CASE;

// IF DTL.ED Consignor Postal is Not Entered
IF DTL.ED_Consignor_Postal = *BLANK;

// AND DTL.ED Consignor Country Code is USA
AND DTL.ED_Consignor_Country_Code = 'USA';

// Send error message - 'Value Required'
ERROR(USR1852);
MSGPARM(DTL.ED_Consignor_Postal);

ENDIF;

//?Consignee Addr 4/City.
CASE;

// IF DTL.ED Consignee Addr 4 is Blank
IF DTL.ED_Consignee_Addr_4 = *BLANK;

// Send error message - 'Value Required'
ERROR(USR1852);
MSGPARM(DTL.ED_Consignee_Addr_4);

ENDIF;

//?Consignee Country.
CASE;

// IF DTL.ED Consignee Country Code is Blank
IF DTL.ED_Consignee_Country_Code = *BLANK;

// Send error message - 'Value Required'
ERROR(USR1852);
MSGPARM(DTL.ED_Consignee_Country_Code);

QUIT;

ENDIF;

ENDIF;

//?Consignor State.
CASE;

// IF DTL.ED Consignor State is State code not Blanks
IF DTL.ED_Consignor_State <> *BLANK;

EXECUTE FUNCTION(Val State & Active     RT) TYPE(RTVOBJ) FILE(CAACREP)          AC2188226;
PARAMETER(DTL.ED_Consignor_State);
PARAMETER(LCL.Record_Status);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 // PAR.Record Status = DB1.Record Status
 PAR.Record_Status = DB1.Record_Status;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Record Status = CND.Inactive
 PAR.Record_Status = 'I';

 ENDIF;

}


//?Check Return Code.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

CASE;

// IF LCL.Record Status is Inactive
IF LCL.Record_Status = 'I';

// Send error message - 'State &1 Inactive.'
ERROR(USR5197);
MSGPARM(DTL.ED_Consignor_State);

ENDIF;

//?Check Return Code.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'State not found'
ERROR(USR1838);
MSGPARM(DTL.ED_Consignor_State);

ENDIF;

ENDIF;

//?Consignor Country.
CASE;

// IF DTL.ED Consignor Country Code is Entered
IF DTL.ED_Consignor_Country_Code <> *BLANK;

EXECUTE FUNCTION(Val Country & Active   RT) TYPE(RTVOBJ) FILE(OME5REP)          AC2188228;
PARAMETER(DTL.ED_Consignor_Country_Code);
PARAMETER(LCL.Record_Status);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 // PAR.Record Status = DB1.Record Status
 PAR.Record_Status = DB1.Record_Status;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Record Status = CND.Inactive
 PAR.Record_Status = 'I';

 ENDIF;

}


//?Check Return Code.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

CASE;

// IF LCL.Record Status is Inactive
IF LCL.Record_Status = 'I';

// Send error message - 'Country &1 Inactive.'
ERROR(USR5198);
MSGPARM(DTL.ED_Consignor_Country_Code);

ENDIF;

//?Check Return Code.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Country Code not found.'
ERROR(USR2030);
MSGPARM(DTL.ED_Consignor_Country_Code);

ENDIF;

ENDIF;

//?Consignee State.
CASE;

// IF DTL.ED Consignee State is State code not Blanks
IF DTL.ED_Consignee_State <> *BLANK;

EXECUTE FUNCTION(Val State & Active     RT) TYPE(RTVOBJ) FILE(CAACREP)          AC2188226;
PARAMETER(DTL.ED_Consignee_State);
PARAMETER(LCL.Record_Status);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 // PAR.Record Status = DB1.Record Status
 PAR.Record_Status = DB1.Record_Status;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Record Status = CND.Inactive
 PAR.Record_Status = 'I';

 ENDIF;

}


//?Check Return Code.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

CASE;

// IF LCL.Record Status is Inactive
IF LCL.Record_Status = 'I';

// Send error message - 'State &1 Inactive.'
ERROR(USR5197);
MSGPARM(DTL.ED_Consignee_State);

ENDIF;

//?Check Return Code.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'State not found'
ERROR(USR1838);
MSGPARM(DTL.ED_Consignee_State);

ENDIF;

ENDIF;

//?Consignee Country.
CASE;

// IF DTL.ED Consignee Country Code is Entered
IF DTL.ED_Consignee_Country_Code <> *BLANK;

EXECUTE FUNCTION(Val Country & Active   RT) TYPE(RTVOBJ) FILE(OME5REP)          AC2188228;
PARAMETER(DTL.ED_Consignee_Country_Code);
PARAMETER(LCL.Record_Status);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 // PAR.Record Status = DB1.Record Status
 PAR.Record_Status = DB1.Record_Status;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Record Status = CND.Inactive
 PAR.Record_Status = 'I';

 ENDIF;

}


//?Check Return Code.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

CASE;

// IF LCL.Record Status is Inactive
IF LCL.Record_Status = 'I';

// Send error message - 'Country &1 Inactive.'
ERROR(USR5198);
MSGPARM(DTL.ED_Consignee_Country_Code);

QUIT;

ENDIF;

//?Check Return Code.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Country Code not found.'
ERROR(USR2030);
MSGPARM(DTL.ED_Consignee_Country_Code);

QUIT;

ENDIF;

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Exp Doc Ord Hdr/ExtIF) TYPE(EXCINTFUN) FILE(PDMRREP)       AC2163184;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.ED_Export_Document_Type);
PARAMETER(DTL.Country_Code);
PARAMETER(DTL.ED_Area_Office);
PARAMETER(DTL.ED_Destination);
PARAMETER(DTL.ED_Consignor_Name);
PARAMETER(DTL.ED_Consignor_Addr_1);
PARAMETER(DTL.ED_Consignor_Addr_2);
PARAMETER(DTL.ED_Consignor_Addr_3);
PARAMETER(DTL.ED_Consignor_Addr_4);
PARAMETER(DTL.ED_Consignor_State);
PARAMETER(DTL.ED_Consignor_Postal);
PARAMETER(DTL.ED_Consignor_Country_Code);
PARAMETER(DTL.ED_Consignee_Name);
PARAMETER(DTL.ED_Consignee_Addr_1);
PARAMETER(DTL.ED_Consignee_Addr_2);
PARAMETER(DTL.ED_Consignee_Addr_3);
PARAMETER(DTL.ED_Consignee_Addr_4);
PARAMETER(DTL.ED_Consignee_State);
PARAMETER(DTL.ED_Consignee_Postal);
PARAMETER(DTL.ED_Consignee_Country_Code);
PARAMETER(DTL.ED_Plant_Location_City);
PARAMETER(DTL.ED_Plant_Location_State);
PARAMETER(DTL.ED_Plant_Number);
PARAMETER(DTL.ED_Processing_Plant_Sts);
PARAMETER(DTL.ED_Attachment_Subtype);
PARAMETER(DTL.ED_Attachment_Type_Sts);
PARAMETER(DTL.ED_Xlate_Desc_to_Country);
PARAMETER(DTL.ED_Unmarked_Txt);
PARAMETER(DTL.ED_Shipping_Marks_Txt);
PARAMETER(DTL.ED_Date_of_Slaughter);
PARAMETER(DTL.ED_Place_of_Slaughter_Txt);
PARAMETER(DTL.ED_Date_of_Processing);
PARAMETER(DTL.ED_Place_of_processing_Tx);
PARAMETER(DTL.ED_Continue_Comment_Txt);
PARAMETER(DTL.ED_Remark_Constant_1);
PARAMETER(DTL.ED_Remark_Constant_2);
PARAMETER(DTL.ED_Remark_Constant_3);
PARAMETER(DTL.ED_Remark_Constant_4);
PARAMETER(DTL.ED_Remark_Constant_5);
PARAMETER(DTL.ED_Remark_Constant_7);
PARAMETER(DTL.ED_Remark_Constant_8);
PARAMETER(DTL.ED_Certify_that_the_meat);
PARAMETER(DTL.ED_Inspector_Name);
PARAMETER(DTL.ED_Origin_Country);
PARAMETER(DTL.ED_Port_of_Loading);
PARAMETER(DTL.ED_Transportion);
PARAMETER(DTL.ED_Seal_Number_1);
PARAMETER(DTL.ED_Seal_Number_2);
PARAMETER(DTL.ED_Can_Import_Cntrl_Nm);
PARAMETER(DTL.ED_Can_Import_Cntrl_Ad_1);
PARAMETER(DTL.ED_Can_Import_Cntrl_Ad_2);
PARAMETER(DTL.ED_Can_Import_Cntrl_Fax);
PARAMETER(DTL.ED_Can_Import_Cntrl_Phne);
PARAMETER(DTL.ED_Seaboard_Plant_Fax);
PARAMETER(DTL.ED_USDA_Cert_Nbr_US);
PARAMETER(DTL.ED_USDA_Cert_Nbr_CA);
PARAMETER(DTL.ED_Can_Port_of_Entry);
PARAMETER(DTL.ED_Can_Reinsp_Est_Nbr);
PARAMETER(DTL.ED_Can_Reinsp_Est_Name);
PARAMETER(DTL.ED_Can_Reinsp_Est_City);
PARAMETER(DTL.ED_Herm_Sealed_Cntr_Sts);
PARAMETER(DTL.ED_Herm_Sealed_Cntr_Type);
PARAMETER(DTL.ED_Herm_Sealed_Cntr_p_Crt);
PARAMETER(DTL.ED_Whole_Bird_Sts);
PARAMETER(DTL.ED_Marked_Sts);
PARAMETER(DTL.ED_Tamper_Evident_Sts);
PARAMETER(DTL.ED_Plant_Contact_Name);
PARAMETER(DTL.ED_Plant_Contact_Phone);
PARAMETER(DTL.ED_Modified_Text);
PARAMETER(DTL.ED_Issued_Crt_for_Exp_Txt);
PARAMETER(DTL.ED_Species);
PARAMETER(DTL.ED_Slaughter_Plant_Name);
PARAMETER(DTL.ED_Slaughter_Plant_Addr_1);
PARAMETER(DTL.ED_Slaughter_Plant_Addr_2);
PARAMETER(DTL.ED_Packaging_Plant_Name);
PARAMETER(DTL.ED_Packaging_Plant_Addr_1);
PARAMETER(DTL.ED_Packaging_Plant_Addr_2);
PARAMETER(DTL.ED_Manufact_Plant_Name);
PARAMETER(DTL.ED_Manufact_Plant_Addr_1);
PARAMETER(DTL.ED_Manufact_Plant_Addr_2);
PARAMETER(DTL.ED_USDA_Name_1);
PARAMETER(DTL.ED_USDA_Name_2);
PARAMETER(DTL.ED_USDA_Name_3);
PARAMETER(DTL.ED_Title_of_Official);
PARAMETER(DTL.ED_Letter_of_Credit_Nbr);
PARAMETER(DTL.ED_Unused_prd_mo_yr);
PARAMETER(DTL.ED_Nbr_of_prods_on_1st_pg);
PARAMETER(DTL.ED_Importer_Name);
PARAMETER(DTL.ED_Importer_Addr_1);
PARAMETER(DTL.ED_Importer_Addr_2);
PARAMETER(DTL.ED_Purchaser_Name);
PARAMETER(DTL.ED_Purchaser_Addr_1);
PARAMETER(DTL.ED_Purchaser_Addr_2);
PARAMETER(DTL.ED_Place_Drct_Shpmnt_Nm);
PARAMETER(DTL.ED_Place_Drct_Shpmnt_Ad_1);
PARAMETER(DTL.ED_Place_Drct_Shpmnt_Ad_2);
PARAMETER(DTL.ED_Place_Drct_Shpmnt_Ad_3);
PARAMETER(DTL.ED_Currency);
PARAMETER(DTL.ED_Conditions_of_Sale);
PARAMETER(DTL.ED_Total_Unit_Price);
PARAMETER(DTL.ED_Invoice_Total);
PARAMETER(DTL.ED_Live_with_PHIS);
PARAMETER(DTL.ED_Print_Status);
PARAMETER(DTL.ED_Total_Net_Weight_lbs);
PARAMETER(DTL.ED_Total_Net_Weight_MT);
PARAMETER(DTL.ED_Nbr_of_Packages);
PARAMETER(DTL.ED_Customer_PO_#);
PARAMETER(DTL.ED_Total_Gross_Weight_lbs);
PARAMETER(DTL.ED_Total_Gross_Weight_MT);
PARAMETER(DTL.ED_Plant_Number_Dtl);
PARAMETER(DTL.ED_Language_Xlate_Desc_2);
PARAMETER(DTL.ED_Slaughter_Date_CofE_3);
PARAMETER(DTL.ED_Production_mo_yr_ln_3);
PARAMETER(DTL.ED_Remark_Constant_6);
PARAMETER(DTL.ED_Allow_Print_bef_Ship);
PARAMETER(DTL.ED_Cert_of_Orig_Sbd_addr);
PARAMETER(DTL.ED_Use_item_label_1_2);
PARAMETER(DTL.ED_Slg_Proc_Date_Format);
PARAMETER(DTL.ED_Total_Package_UOM);
PARAMETER(DTL.ED_Export_Certificate_Nbr);
PARAMETER(DTL.ED_Sail_Date);
PARAMETER(DTL.ED_Sworn_on_Date);
PARAMETER(DTL.ED_Consignee_Address_Nbr);
PARAMETER(DTL.ED_Form_Identification_Tx);
PARAMETER(DTL.ED_Cold_Storage_Name);
PARAMETER(DTL.ED_Cold_Storage_Addr_1);
PARAMETER(DTL.ED_Cold_Storage_Addr_2);
PARAMETER(DTL.ED_Cold_Storage_Plant_Nbr);
PARAMETER(DTL.ED_Slaughter_Date_CofE_1);
PARAMETER(DTL.ED_Production_mo_yr_ln_1);
PARAMETER(DTL.ED_Production_mo_yr_ln_2);
PARAMETER(DTL.ED_Booking_Nbr);
PARAMETER(DTL.ED_Document_Date);
PARAMETER(DTL.ED_Packing_Date);
PARAMETER(DTL.ED_Expiration_Date);
PARAMETER(DTL.ED_Packing_Date_To);
PARAMETER(DTL.ED_Unused_Date_2);
PARAMETER(DTL.ED_Print_Kilograms);
PARAMETER(DTL.ED_MPR_Canadian_Province);
PARAMETER(DTL.ED_Container_Nbrs);
PARAMETER(DTL.ED_Slaughter_Date_CofE_2);
PARAMETER(DTL.ED_Submit_Status);
PARAMETER(DTL.EDOH_Unused_Sts_2);
PARAMETER(DTL.EDOH_Unused_Text_1);
PARAMETER(DTL.EDOH_Unused_Text_2);
PARAMETER(DTL.EDOH_Unused_Number_1);
PARAMETER(DTL.EDOH_Unused_Date_1);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Job_Time);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Job_Date);
PARAMETER(DTL.EDE_Consignee_Tele_PHIS);
PARAMETER(DTL.EDE_Consignor_Tele_PHIS);
{
 //?Execute internal function

 //?R16637 DN 9/23/20-Passed In New Consignor/Consignee Fields.
 EXECUTE FUNCTION(Crt Exp Doc Order Hdr  CR) TYPE(CRTOBJ) FILE(PDMRREP)          AC1523842;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.ED_Export_Document_Type);
 PARAMETER(PAR.Country_Code);
 PARAMETER(PAR.ED_Area_Office);
 PARAMETER(PAR.ED_Destination);
 PARAMETER(PAR.ED_Consignor_Name);
 PARAMETER(PAR.ED_Consignor_Addr_1);
 PARAMETER(PAR.ED_Consignor_Addr_2);
 PARAMETER(PAR.ED_Consignor_Addr_3);
 PARAMETER(PAR.ED_Consignor_Addr_4);
 PARAMETER(PAR.ED_Consignor_State);
 PARAMETER(PAR.ED_Consignor_Postal);
 PARAMETER(PAR.ED_Consignor_Country_Code);
 PARAMETER(PAR.ED_Consignee_Name);
 PARAMETER(PAR.ED_Consignee_Addr_1);
 PARAMETER(PAR.ED_Consignee_Addr_2);
 PARAMETER(PAR.ED_Consignee_Addr_3);
 PARAMETER(PAR.ED_Consignee_Addr_4);
 PARAMETER(PAR.ED_Consignee_State);
 PARAMETER(PAR.ED_Consignee_Postal);
 PARAMETER(PAR.ED_Consignee_Country_Code);
 PARAMETER(PAR.ED_Plant_Location_City);
 PARAMETER(PAR.ED_Plant_Location_State);
 PARAMETER(PAR.ED_Plant_Number);
 PARAMETER(PAR.ED_Processing_Plant_Sts);
 PARAMETER(PAR.ED_Attachment_Subtype);
 PARAMETER(PAR.ED_Attachment_Type_Sts);
 PARAMETER(PAR.ED_Xlate_Desc_to_Country);
 PARAMETER(PAR.ED_Unmarked_Txt);
 PARAMETER(PAR.ED_Shipping_Marks_Txt);
 PARAMETER(PAR.ED_Date_of_Slaughter);
 PARAMETER(PAR.ED_Place_of_Slaughter_Txt);
 PARAMETER(PAR.ED_Date_of_Processing);
 PARAMETER(PAR.ED_Place_of_processing_Tx);
 PARAMETER(PAR.ED_Continue_Comment_Txt);
 PARAMETER(PAR.ED_Remark_Constant_1);
 PARAMETER(PAR.ED_Remark_Constant_2);
 PARAMETER(PAR.ED_Remark_Constant_3);
 PARAMETER(PAR.ED_Remark_Constant_4);
 PARAMETER(PAR.ED_Remark_Constant_5);
 PARAMETER(PAR.ED_Remark_Constant_7);
 PARAMETER(PAR.ED_Remark_Constant_8);
 PARAMETER(PAR.ED_Certify_that_the_meat);
 PARAMETER(PAR.ED_Inspector_Name);
 PARAMETER(PAR.ED_Origin_Country);
 PARAMETER(PAR.ED_Port_of_Loading);
 PARAMETER(PAR.ED_Transportion);
 PARAMETER(PAR.ED_Seal_Number_1);
 PARAMETER(PAR.ED_Seal_Number_2);
 PARAMETER(PAR.ED_Can_Import_Cntrl_Nm);
 PARAMETER(PAR.ED_Can_Import_Cntrl_Ad_1);
 PARAMETER(PAR.ED_Can_Import_Cntrl_Ad_2);
 PARAMETER(PAR.ED_Can_Import_Cntrl_Fax);
 PARAMETER(PAR.ED_Can_Import_Cntrl_Phne);
 PARAMETER(PAR.ED_Seaboard_Plant_Fax);
 PARAMETER(PAR.ED_USDA_Cert_Nbr_US);
 PARAMETER(PAR.ED_USDA_Cert_Nbr_CA);
 PARAMETER(PAR.ED_Can_Port_of_Entry);
 PARAMETER(PAR.ED_Can_Reinsp_Est_Nbr);
 PARAMETER(PAR.ED_Can_Reinsp_Est_Name);
 PARAMETER(PAR.ED_Can_Reinsp_Est_City);
 PARAMETER(PAR.ED_Herm_Sealed_Cntr_Sts);
 PARAMETER(PAR.ED_Herm_Sealed_Cntr_Type);
 PARAMETER(PAR.ED_Herm_Sealed_Cntr_p_Crt);
 PARAMETER(PAR.ED_Whole_Bird_Sts);
 PARAMETER(PAR.ED_Marked_Sts);
 PARAMETER(PAR.ED_Tamper_Evident_Sts);
 PARAMETER(PAR.ED_Plant_Contact_Name);
 PARAMETER(PAR.ED_Plant_Contact_Phone);
 PARAMETER(PAR.ED_Modified_Text);
 PARAMETER(PAR.ED_Issued_Crt_for_Exp_Txt);
 PARAMETER(PAR.ED_Species);
 PARAMETER(PAR.ED_Slaughter_Plant_Name);
 PARAMETER(PAR.ED_Slaughter_Plant_Addr_1);
 PARAMETER(PAR.ED_Slaughter_Plant_Addr_2);
 PARAMETER(PAR.ED_Packaging_Plant_Name);
 PARAMETER(PAR.ED_Packaging_Plant_Addr_1);
 PARAMETER(PAR.ED_Packaging_Plant_Addr_2);
 PARAMETER(PAR.ED_Manufact_Plant_Name);
 PARAMETER(PAR.ED_Manufact_Plant_Addr_1);
 PARAMETER(PAR.ED_Manufact_Plant_Addr_2);
 PARAMETER(PAR.ED_USDA_Name_1);
 PARAMETER(PAR.ED_USDA_Name_2);
 PARAMETER(PAR.ED_USDA_Name_3);
 PARAMETER(PAR.ED_Title_of_Official);
 PARAMETER(PAR.ED_Letter_of_Credit_Nbr);
 PARAMETER(PAR.ED_Unused_prd_mo_yr);
 PARAMETER(PAR.ED_Nbr_of_prods_on_1st_pg);
 PARAMETER(PAR.ED_Importer_Name);
 PARAMETER(PAR.ED_Importer_Addr_1);
 PARAMETER(PAR.ED_Importer_Addr_2);
 PARAMETER(PAR.ED_Purchaser_Name);
 PARAMETER(PAR.ED_Purchaser_Addr_1);
 PARAMETER(PAR.ED_Purchaser_Addr_2);
 PARAMETER(PAR.ED_Place_Drct_Shpmnt_Nm);
 PARAMETER(PAR.ED_Place_Drct_Shpmnt_Ad_1);
 PARAMETER(PAR.ED_Place_Drct_Shpmnt_Ad_2);
 PARAMETER(PAR.ED_Place_Drct_Shpmnt_Ad_3);
 PARAMETER(PAR.ED_Currency);
 PARAMETER(PAR.ED_Conditions_of_Sale);
 PARAMETER(PAR.ED_Total_Unit_Price);
 PARAMETER(PAR.ED_Invoice_Total);
 PARAMETER(PAR.ED_Live_with_PHIS);
 PARAMETER(PAR.ED_Print_Status);
 PARAMETER(PAR.ED_Total_Net_Weight_lbs);
 PARAMETER(PAR.ED_Total_Net_Weight_MT);
 PARAMETER(PAR.ED_Nbr_of_Packages);
 PARAMETER(PAR.ED_Customer_PO_#);
 PARAMETER(PAR.ED_Total_Gross_Weight_lbs);
 PARAMETER(PAR.ED_Total_Gross_Weight_MT);
 PARAMETER(PAR.ED_Plant_Number_Dtl);
 PARAMETER(PAR.ED_Language_Xlate_Desc_2);
 PARAMETER(PAR.ED_Slaughter_Date_CofE_3);
 PARAMETER(PAR.ED_Production_mo_yr_ln_3);
 PARAMETER(PAR.ED_Remark_Constant_6);
 PARAMETER(PAR.ED_Allow_Print_bef_Ship);
 PARAMETER(PAR.ED_Cert_of_Orig_Sbd_addr);
 PARAMETER(PAR.ED_Use_item_label_1_2);
 PARAMETER(PAR.ED_Slg_Proc_Date_Format);
 PARAMETER(PAR.ED_Total_Package_UOM);
 PARAMETER(PAR.ED_Export_Certificate_Nbr);
 PARAMETER(PAR.ED_Sail_Date);
 PARAMETER(PAR.ED_Sworn_on_Date);
 PARAMETER(PAR.ED_Consignee_Address_Nbr);
 PARAMETER(PAR.ED_Form_Identification_Tx);
 PARAMETER(PAR.ED_Cold_Storage_Name);
 PARAMETER(PAR.ED_Cold_Storage_Addr_1);
 PARAMETER(PAR.ED_Cold_Storage_Addr_2);
 PARAMETER(PAR.ED_Cold_Storage_Plant_Nbr);
 PARAMETER(PAR.ED_Slaughter_Date_CofE_1);
 PARAMETER(PAR.ED_Production_mo_yr_ln_1);
 PARAMETER(PAR.ED_Production_mo_yr_ln_2);
 PARAMETER(PAR.ED_Booking_Nbr);
 PARAMETER(PAR.ED_Document_Date);
 PARAMETER(PAR.ED_Packing_Date);
 PARAMETER(PAR.ED_Expiration_Date);
 PARAMETER(PAR.ED_Packing_Date_To);
 PARAMETER(PAR.ED_Unused_Date_2);
 PARAMETER(PAR.ED_Print_Kilograms);
 PARAMETER(PAR.ED_MPR_Canadian_Province);
 PARAMETER(PAR.ED_Container_Nbrs);
 PARAMETER(PAR.ED_Slaughter_Date_CofE_2);
 PARAMETER(PAR.ED_Submit_Status);
 PARAMETER(PAR.EDOH_Unused_Sts_2);
 PARAMETER(PAR.EDOH_Unused_Text_1);
 PARAMETER(PAR.EDOH_Unused_Text_2);
 PARAMETER(PAR.EDOH_Unused_Number_1);
 PARAMETER(PAR.EDOH_Unused_Date_1);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Job_Time);
 PARAMETER(PAR.User_Id);
 PARAMETER(PAR.Job_Name);
 PARAMETER(PAR.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?R16637 DN 9/23/20-Set *BLANK to PHIS Fields Except PHIS Telephone.
 EXECUTE FUNCTION(Crt Exp Doc Order Ext CR) TYPE(CRTOBJ) FILE(PUA6CPP)           AC2150707;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.ED_Export_Document_Type);
 PARAMETER(PAR.Country_Code);
 PARAMETER(LCL.EDE_Reason_f_Replcmnt_Sts);
 PARAMETER(LCL.EDE_Shipment_Type_Sts);
 PARAMETER(LCL.EDE_Frozen_Shelf_Life_Sts);
 PARAMETER(*BLANK);
 PARAMETER(LCL.EDE_USDA_Export_Mark_Sts);
 PARAMETER(LCL.EDE_Special_Printing_Ctl);
 PARAMETER(LCL.EDE_Appl_Billing_First_Nm);
 PARAMETER(LCL.EDE_Appl_Billing_Last_Nm);
 PARAMETER(LCL.EDE_Unused_Date);
 PARAMETER(LCL.EDE_Country_of_Final_Dest);
 PARAMETER(LCL.EDE_I_Certify_Stmt);
 PARAMETER(LCL.EDE_Attachment_Type_Txt);
 PARAMETER(LCL.EDE_Attachment_Sub_Type);
 PARAMETER(LCL.EDE_Transit_Country);
 PARAMETER(LCL.EDE_Container_Number);
 PARAMETER(LCL.EDE_Unused_Text_25);
 PARAMETER(LCL.EDE_Additional_Stmt);
 PARAMETER(LCL.EDE_Maturity_lt_30_Months);
 PARAMETER(LCL.EDE_Seal_Nos);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.EDE_Consignee_Tele_PHIS);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.EDE_Consignor_Tele_PHIS);
 PARAMETER(LCL.EDE_PHIS_Process_Status);
 PARAMETER(LCL.EDE_ETL_Process_Timestamp);
 PARAMETER(LCL.EDE_PHIS_Action);
 PARAMETER(LCL.EDE_Return_Cde_Error);
 PARAMETER(LCL.EDE_Application_UID);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Exp Doc Order Hdr  IF) TYPE(EXCINTFUN) FILE(PDMRREP)       AC1611423;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.ED_Consignor_Name);
PARAMETER(DTL.ED_Consignor_Addr_1);
PARAMETER(DTL.ED_Consignor_Addr_2);
PARAMETER(DTL.ED_Consignor_Addr_3);
PARAMETER(DTL.ED_Consignor_Addr_4);
PARAMETER(DTL.ED_Consignor_State);
PARAMETER(DTL.ED_Consignor_Postal);
PARAMETER(DTL.ED_Consignor_Country_Code);
PARAMETER(DTL.ED_Consignee_Name);
PARAMETER(DTL.ED_Consignee_Addr_1);
PARAMETER(DTL.ED_Consignee_Addr_2);
PARAMETER(DTL.ED_Consignee_Addr_3);
PARAMETER(DTL.ED_Consignee_Addr_4);
PARAMETER(DTL.ED_Consignee_State);
PARAMETER(DTL.ED_Consignee_Postal);
PARAMETER(DTL.ED_Consignee_Country_Code);
PARAMETER(DTL.ED_Shipping_Marks_Txt);
PARAMETER(DTL.ED_Remark_Constant_1);
PARAMETER(DTL.ED_Remark_Constant_2);
PARAMETER(DTL.ED_Remark_Constant_3);
PARAMETER(DTL.ED_Remark_Constant_4);
PARAMETER(DTL.ED_Remark_Constant_5);
PARAMETER(DTL.ED_Remark_Constant_7);
PARAMETER(DTL.ED_Remark_Constant_8);
PARAMETER(DTL.ED_Remark_Constant_6);
PARAMETER(DTL.ED_Consignee_Address_Nbr);
PARAMETER(DTL.ED_MPR_Canadian_Province);
PARAMETER(DTL.EDE_Shipment_Type_Sts);
PARAMETER(DTL.EDE_Frozen_Shelf_Life_Sts);
PARAMETER(DTL.EDE_Consignee_Tele_PHIS);
PARAMETER(DTL.EDE_Consignor_Tele_PHIS);
{
 //?Execute internal function

 //?Change the consignee/consignor on all documents for the Order
 //?R16637 DN 09/11/20-Pass In New Consignor/Consignee Fields.
 EXECUTE FUNCTION(Rtv/Chg Consignee      RT) TYPE(RTVOBJ) FILE(PDMRREP)          AC1611425;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.ED_Consignor_Name);
 PARAMETER(PAR.ED_Consignor_Addr_1);
 PARAMETER(PAR.ED_Consignor_Addr_2);
 PARAMETER(PAR.ED_Consignor_Addr_3);
 PARAMETER(PAR.ED_Consignor_Addr_4);
 PARAMETER(PAR.ED_Consignor_State);
 PARAMETER(PAR.ED_Consignor_Postal);
 PARAMETER(PAR.ED_Consignor_Country_Code);
 PARAMETER(PAR.ED_Consignee_Name);
 PARAMETER(PAR.ED_Consignee_Addr_1);
 PARAMETER(PAR.ED_Consignee_Addr_2);
 PARAMETER(PAR.ED_Consignee_Addr_3);
 PARAMETER(PAR.ED_Consignee_Addr_4);
 PARAMETER(PAR.ED_Consignee_State);
 PARAMETER(PAR.ED_Consignee_Postal);
 PARAMETER(PAR.ED_Consignee_Country_Code);
 PARAMETER(PAR.ED_Shipping_Marks_Txt);
 PARAMETER(PAR.ED_Remark_Constant_1);
 PARAMETER(PAR.ED_Remark_Constant_2);
 PARAMETER(PAR.ED_Remark_Constant_3);
 PARAMETER(PAR.ED_Remark_Constant_4);
 PARAMETER(PAR.ED_Remark_Constant_5);
 PARAMETER(PAR.ED_Remark_Constant_7);
 PARAMETER(PAR.ED_Remark_Constant_8);
 PARAMETER(PAR.ED_Remark_Constant_6);
 PARAMETER(PAR.ED_Consignee_Address_Nbr);
 PARAMETER(PAR.ED_MPR_Canadian_Province);
 {
  //?USER: Process Data record

  //?R13944 DN 1/8/19-Added Check of 'ED Live with PHIS=No'.
  CASE;

  // IF DB1.ED Export Document Type is Application for Export
  IF DB1.ED_Export_Document_Type = 'A';

  // AND DB1.ED Live with PHIS is Not Yes
  AND DB1.ED_Live_with_PHIS = *BLANK/'N';

  //?the applicant(02/27/07 RMC) &  remarks are different than other documents
  //?R16637 DN 09/11/20-Set New Consignor Flds to DB1 & Consignee to PAR Ctxt.
  //?WHD 75298 RMC 3/11/21 Chg Consignor Flds to PAR for Appl. to be same as HC
  //?WHD 75298 RMC 5/16/22 Chg Consignor Flds BACK TO PAR.DO  MATCH HC
  EXECUTE FUNCTION(Chg Exp Doc Consignee  CH) TYPE(CHGOBJ) FILE(PDMRREP)          AC1611424;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.ED_Export_Document_Type);
  PARAMETER(DB1.Country_Code);
  PARAMETER(PAR.ED_Consignor_Name);
  PARAMETER(PAR.ED_Consignor_Addr_1);
  PARAMETER(PAR.ED_Consignor_Addr_2);
  PARAMETER(PAR.ED_Consignor_Addr_3);
  PARAMETER(PAR.ED_Consignor_Addr_4);
  PARAMETER(PAR.ED_Consignor_State);
  PARAMETER(PAR.ED_Consignor_Postal);
  PARAMETER(PAR.ED_Consignor_Country_Code);
  PARAMETER(PAR.ED_Consignee_Name);
  PARAMETER(PAR.ED_Consignee_Addr_1);
  PARAMETER(PAR.ED_Consignee_Addr_2);
  PARAMETER(PAR.ED_Consignee_Addr_3);
  PARAMETER(PAR.ED_Consignee_Addr_4);
  PARAMETER(PAR.ED_Consignee_State);
  PARAMETER(PAR.ED_Consignee_Postal);
  PARAMETER(PAR.ED_Consignee_Country_Code);
  PARAMETER(PAR.ED_Shipping_Marks_Txt);
  PARAMETER(DB1.ED_Remark_Constant_1);
  PARAMETER(DB1.ED_Remark_Constant_2);
  PARAMETER(DB1.ED_Remark_Constant_3);
  PARAMETER(DB1.ED_Remark_Constant_4);
  PARAMETER(DB1.ED_Remark_Constant_5);
  PARAMETER(DB1.ED_Remark_Constant_7);
  PARAMETER(DB1.ED_Remark_Constant_8);
  PARAMETER(DB1.ED_Remark_Constant_6);
  PARAMETER(DB1.ED_Consignee_Address_Nbr);
  PARAMETER(DB1.ED_Form_Identification_Tx);
  PARAMETER(DB1.ED_Cold_Storage_Name);
  PARAMETER(DB1.ED_Cold_Storage_Addr_1);
  PARAMETER(DB1.ED_Cold_Storage_Addr_2);
  PARAMETER(DB1.ED_Cold_Storage_Plant_Nbr);
  PARAMETER(DB1.ED_Slaughter_Date_CofE_1);
  PARAMETER(DB1.ED_Production_mo_yr_ln_1);
  PARAMETER(DB1.ED_Production_mo_yr_ln_2);
  PARAMETER(DB1.ED_Booking_Nbr);
  PARAMETER(PAR.ED_MPR_Canadian_Province);
  PARAMETER(DB1.ED_Submit_Status);
  PARAMETER(DB1.EDOH_Unused_Sts_2);
  PARAMETER(DB1.EDOH_Unused_Text_1);
  PARAMETER(DB1.EDOH_Unused_Text_2);
  PARAMETER(DB1.EDOH_Unused_Number_1);
  PARAMETER(DB1.EDOH_Unused_Date_1);
  {
   //?USER: Processing after Data read

   //?* E00994 Susan Mason
   //?* these functions will execute the new routines
   //?* that will create records to the comment file
   //?* if the consignee or consignor changed
   CASE;

   // IF DB1.ED Export Document Type is MPD
   IF DB1.ED_Export_Document_Type = 'H';

   // OR DB1.ED Export Document Type is 9290/9285/9295/9115/9450
   OR DB1.ED_Export_Document_Type = 'E';

   //?R16637 DN 09/11/20-Pass in New Consignor/Consignee Fields.
   // Call program Rtv/Consignor/ConsigneXF.
   CALL PROGRAM(Rtv/Consignor/ConsigneXF) ('PNVIXFR');
   PARAMETER(JOB.*PROGRAM);
   PARAMETER(DB1.ED_Consignor_Name);
   PARAMETER(DB1.ED_Consignor_Addr_1);
   PARAMETER(DB1.ED_Consignor_Addr_2);
   PARAMETER(DB1.ED_Consignor_Addr_3);
   PARAMETER(DB1.ED_Consignor_Addr_4);
   PARAMETER(DB1.ED_Consignor_State);
   PARAMETER(DB1.ED_Consignor_Postal);
   PARAMETER(DB1.ED_Consignor_Country_Code);
   PARAMETER(DB1.ED_Consignee_Name);
   PARAMETER(DB1.ED_Consignee_Addr_1);
   PARAMETER(DB1.ED_Consignee_Addr_2);
   PARAMETER(DB1.ED_Consignee_Addr_3);
   PARAMETER(DB1.ED_Consignee_Addr_4);
   PARAMETER(DB1.ED_Consignee_State);
   PARAMETER(DB1.ED_Consignee_Postal);
   PARAMETER(DB1.ED_Consignee_Country_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.ED_Export_Document_Type);
   PARAMETER(PAR.Country_Code);
   PARAMETER(PAR.ED_Area_Office);
   PARAMETER(PAR.ED_Destination);
   PARAMETER(PAR.ED_Consignor_Name);
   PARAMETER(PAR.ED_Consignor_Addr_1);
   PARAMETER(PAR.ED_Consignor_Addr_2);
   PARAMETER(PAR.ED_Consignor_Addr_3);
   PARAMETER(PAR.ED_Consignor_Addr_4);
   PARAMETER(PAR.ED_Consignor_State);
   PARAMETER(PAR.ED_Consignor_Postal);
   PARAMETER(PAR.ED_Consignor_Country_Code);
   PARAMETER(PAR.ED_Consignee_Name);
   PARAMETER(PAR.ED_Consignee_Addr_1);
   PARAMETER(PAR.ED_Consignee_Addr_2);
   PARAMETER(PAR.ED_Consignee_Addr_3);
   PARAMETER(PAR.ED_Consignee_Addr_4);
   PARAMETER(PAR.ED_Consignee_State);
   PARAMETER(PAR.ED_Consignee_Postal);
   PARAMETER(PAR.ED_Consignee_Country_Code);

   ENDIF;

   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?S14766 DN 4/2/19-Comment out old logic.
  //?S14766 DN 4/2/19-Update Remarks if Doc Type 'A' or 'H' Else Do Not.
  CASE;

  // IF NOT DB1.ED Export Document Type is Application for Export
  IF ! DB1.ED_Export_Document_Type = 'A';

  // AND NOT DB1.ED Export Document Type is Health Certificate 9060-5
  AND ! DB1.ED_Export_Document_Type = 'H';

  //?For all other Doc Types Not A or H, don't update remarks. They
  //?have their own remarks.
  //?R16637 DN 09/11/20-Set New Consignor/Consignee Fields to PAR Ctxt.
  EXECUTE FUNCTION(Chg Exp Doc Consignee  CH) TYPE(CHGOBJ) FILE(PDMRREP)          AC1611424;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.ED_Export_Document_Type);
  PARAMETER(DB1.Country_Code);
  PARAMETER(PAR.ED_Consignor_Name);
  PARAMETER(PAR.ED_Consignor_Addr_1);
  PARAMETER(PAR.ED_Consignor_Addr_2);
  PARAMETER(PAR.ED_Consignor_Addr_3);
  PARAMETER(PAR.ED_Consignor_Addr_4);
  PARAMETER(PAR.ED_Consignor_State);
  PARAMETER(PAR.ED_Consignor_Postal);
  PARAMETER(PAR.ED_Consignor_Country_Code);
  PARAMETER(PAR.ED_Consignee_Name);
  PARAMETER(PAR.ED_Consignee_Addr_1);
  PARAMETER(PAR.ED_Consignee_Addr_2);
  PARAMETER(PAR.ED_Consignee_Addr_3);
  PARAMETER(PAR.ED_Consignee_Addr_4);
  PARAMETER(PAR.ED_Consignee_State);
  PARAMETER(PAR.ED_Consignee_Postal);
  PARAMETER(PAR.ED_Consignee_Country_Code);
  PARAMETER(PAR.ED_Shipping_Marks_Txt);
  PARAMETER(DB1.ED_Remark_Constant_1);
  PARAMETER(DB1.ED_Remark_Constant_2);
  PARAMETER(DB1.ED_Remark_Constant_3);
  PARAMETER(DB1.ED_Remark_Constant_4);
  PARAMETER(DB1.ED_Remark_Constant_5);
  PARAMETER(DB1.ED_Remark_Constant_7);
  PARAMETER(DB1.ED_Remark_Constant_8);
  PARAMETER(DB1.ED_Remark_Constant_6);
  PARAMETER(PAR.ED_Consignee_Address_Nbr);
  PARAMETER(DB1.ED_Form_Identification_Tx);
  PARAMETER(DB1.ED_Cold_Storage_Name);
  PARAMETER(DB1.ED_Cold_Storage_Addr_1);
  PARAMETER(DB1.ED_Cold_Storage_Addr_2);
  PARAMETER(DB1.ED_Cold_Storage_Plant_Nbr);
  PARAMETER(DB1.ED_Slaughter_Date_CofE_1);
  PARAMETER(DB1.ED_Production_mo_yr_ln_1);
  PARAMETER(DB1.ED_Production_mo_yr_ln_2);
  PARAMETER(DB1.ED_Booking_Nbr);
  PARAMETER(PAR.ED_MPR_Canadian_Province);
  PARAMETER(DB1.ED_Submit_Status);
  PARAMETER(DB1.EDOH_Unused_Sts_2);
  PARAMETER(DB1.EDOH_Unused_Text_1);
  PARAMETER(DB1.EDOH_Unused_Text_2);
  PARAMETER(DB1.EDOH_Unused_Number_1);
  PARAMETER(DB1.EDOH_Unused_Date_1);
  {
   //?USER: Processing after Data read

   //?* E00994 Susan Mason
   //?* these functions will execute the new routines
   //?* that will create records to the comment file
   //?* if the consignee or consignor changed
   CASE;

   // IF DB1.ED Export Document Type is MPD
   IF DB1.ED_Export_Document_Type = 'H';

   // OR DB1.ED Export Document Type is 9290/9285/9295/9115/9450
   OR DB1.ED_Export_Document_Type = 'E';

   //?R16637 DN 09/11/20-Pass in New Consignor/Consignee Fields.
   // Call program Rtv/Consignor/ConsigneXF.
   CALL PROGRAM(Rtv/Consignor/ConsigneXF) ('PNVIXFR');
   PARAMETER(JOB.*PROGRAM);
   PARAMETER(DB1.ED_Consignor_Name);
   PARAMETER(DB1.ED_Consignor_Addr_1);
   PARAMETER(DB1.ED_Consignor_Addr_2);
   PARAMETER(DB1.ED_Consignor_Addr_3);
   PARAMETER(DB1.ED_Consignor_Addr_4);
   PARAMETER(DB1.ED_Consignor_State);
   PARAMETER(DB1.ED_Consignor_Postal);
   PARAMETER(DB1.ED_Consignor_Country_Code);
   PARAMETER(DB1.ED_Consignee_Name);
   PARAMETER(DB1.ED_Consignee_Addr_1);
   PARAMETER(DB1.ED_Consignee_Addr_2);
   PARAMETER(DB1.ED_Consignee_Addr_3);
   PARAMETER(DB1.ED_Consignee_Addr_4);
   PARAMETER(DB1.ED_Consignee_State);
   PARAMETER(DB1.ED_Consignee_Postal);
   PARAMETER(DB1.ED_Consignee_Country_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.ED_Export_Document_Type);
   PARAMETER(PAR.Country_Code);
   PARAMETER(PAR.ED_Area_Office);
   PARAMETER(PAR.ED_Destination);
   PARAMETER(PAR.ED_Consignor_Name);
   PARAMETER(PAR.ED_Consignor_Addr_1);
   PARAMETER(PAR.ED_Consignor_Addr_2);
   PARAMETER(PAR.ED_Consignor_Addr_3);
   PARAMETER(PAR.ED_Consignor_Addr_4);
   PARAMETER(PAR.ED_Consignor_State);
   PARAMETER(PAR.ED_Consignor_Postal);
   PARAMETER(PAR.ED_Consignor_Country_Code);
   PARAMETER(PAR.ED_Consignee_Name);
   PARAMETER(PAR.ED_Consignee_Addr_1);
   PARAMETER(PAR.ED_Consignee_Addr_2);
   PARAMETER(PAR.ED_Consignee_Addr_3);
   PARAMETER(PAR.ED_Consignee_Addr_4);
   PARAMETER(PAR.ED_Consignee_State);
   PARAMETER(PAR.ED_Consignee_Postal);
   PARAMETER(PAR.ED_Consignee_Country_Code);

   ENDIF;

   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?S14766 DN 4/2/19-Update Remarks if Doc Type 'A' or 'H' Else Do Not.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Update Remarks if Doc Type A or H.
  //?This is Live with PHIS so update the Consignor for all Doc Types.
  //?R16637 DN 09/11/20-Set New Consignor/Consignee Fields to PAR Ctxt.
  EXECUTE FUNCTION(Chg Exp Doc Consignee  CH) TYPE(CHGOBJ) FILE(PDMRREP)          AC1611424;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.ED_Export_Document_Type);
  PARAMETER(DB1.Country_Code);
  PARAMETER(PAR.ED_Consignor_Name);
  PARAMETER(PAR.ED_Consignor_Addr_1);
  PARAMETER(PAR.ED_Consignor_Addr_2);
  PARAMETER(PAR.ED_Consignor_Addr_3);
  PARAMETER(PAR.ED_Consignor_Addr_4);
  PARAMETER(PAR.ED_Consignor_State);
  PARAMETER(PAR.ED_Consignor_Postal);
  PARAMETER(PAR.ED_Consignor_Country_Code);
  PARAMETER(PAR.ED_Consignee_Name);
  PARAMETER(PAR.ED_Consignee_Addr_1);
  PARAMETER(PAR.ED_Consignee_Addr_2);
  PARAMETER(PAR.ED_Consignee_Addr_3);
  PARAMETER(PAR.ED_Consignee_Addr_4);
  PARAMETER(PAR.ED_Consignee_State);
  PARAMETER(PAR.ED_Consignee_Postal);
  PARAMETER(PAR.ED_Consignee_Country_Code);
  PARAMETER(PAR.ED_Shipping_Marks_Txt);
  PARAMETER(PAR.ED_Remark_Constant_1);
  PARAMETER(PAR.ED_Remark_Constant_2);
  PARAMETER(PAR.ED_Remark_Constant_3);
  PARAMETER(PAR.ED_Remark_Constant_4);
  PARAMETER(PAR.ED_Remark_Constant_5);
  PARAMETER(PAR.ED_Remark_Constant_7);
  PARAMETER(PAR.ED_Remark_Constant_8);
  PARAMETER(PAR.ED_Remark_Constant_6);
  PARAMETER(PAR.ED_Consignee_Address_Nbr);
  PARAMETER(DB1.ED_Form_Identification_Tx);
  PARAMETER(DB1.ED_Cold_Storage_Name);
  PARAMETER(DB1.ED_Cold_Storage_Addr_1);
  PARAMETER(DB1.ED_Cold_Storage_Addr_2);
  PARAMETER(DB1.ED_Cold_Storage_Plant_Nbr);
  PARAMETER(DB1.ED_Slaughter_Date_CofE_1);
  PARAMETER(DB1.ED_Production_mo_yr_ln_1);
  PARAMETER(DB1.ED_Production_mo_yr_ln_2);
  PARAMETER(DB1.ED_Booking_Nbr);
  PARAMETER(PAR.ED_MPR_Canadian_Province);
  PARAMETER(DB1.ED_Submit_Status);
  PARAMETER(DB1.EDOH_Unused_Sts_2);
  PARAMETER(DB1.EDOH_Unused_Text_1);
  PARAMETER(DB1.EDOH_Unused_Text_2);
  PARAMETER(DB1.EDOH_Unused_Number_1);
  PARAMETER(DB1.EDOH_Unused_Date_1);
  {
   //?USER: Processing after Data read

   //?* E00994 Susan Mason
   //?* these functions will execute the new routines
   //?* that will create records to the comment file
   //?* if the consignee or consignor changed
   CASE;

   // IF DB1.ED Export Document Type is MPD
   IF DB1.ED_Export_Document_Type = 'H';

   // OR DB1.ED Export Document Type is 9290/9285/9295/9115/9450
   OR DB1.ED_Export_Document_Type = 'E';

   //?R16637 DN 09/11/20-Pass in New Consignor/Consignee Fields.
   // Call program Rtv/Consignor/ConsigneXF.
   CALL PROGRAM(Rtv/Consignor/ConsigneXF) ('PNVIXFR');
   PARAMETER(JOB.*PROGRAM);
   PARAMETER(DB1.ED_Consignor_Name);
   PARAMETER(DB1.ED_Consignor_Addr_1);
   PARAMETER(DB1.ED_Consignor_Addr_2);
   PARAMETER(DB1.ED_Consignor_Addr_3);
   PARAMETER(DB1.ED_Consignor_Addr_4);
   PARAMETER(DB1.ED_Consignor_State);
   PARAMETER(DB1.ED_Consignor_Postal);
   PARAMETER(DB1.ED_Consignor_Country_Code);
   PARAMETER(DB1.ED_Consignee_Name);
   PARAMETER(DB1.ED_Consignee_Addr_1);
   PARAMETER(DB1.ED_Consignee_Addr_2);
   PARAMETER(DB1.ED_Consignee_Addr_3);
   PARAMETER(DB1.ED_Consignee_Addr_4);
   PARAMETER(DB1.ED_Consignee_State);
   PARAMETER(DB1.ED_Consignee_Postal);
   PARAMETER(DB1.ED_Consignee_Country_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.ED_Export_Document_Type);
   PARAMETER(PAR.Country_Code);
   PARAMETER(PAR.ED_Area_Office);
   PARAMETER(PAR.ED_Destination);
   PARAMETER(PAR.ED_Consignor_Name);
   PARAMETER(PAR.ED_Consignor_Addr_1);
   PARAMETER(PAR.ED_Consignor_Addr_2);
   PARAMETER(PAR.ED_Consignor_Addr_3);
   PARAMETER(PAR.ED_Consignor_Addr_4);
   PARAMETER(PAR.ED_Consignor_State);
   PARAMETER(PAR.ED_Consignor_Postal);
   PARAMETER(PAR.ED_Consignor_Country_Code);
   PARAMETER(PAR.ED_Consignee_Name);
   PARAMETER(PAR.ED_Consignee_Addr_1);
   PARAMETER(PAR.ED_Consignee_Addr_2);
   PARAMETER(PAR.ED_Consignee_Addr_3);
   PARAMETER(PAR.ED_Consignee_Addr_4);
   PARAMETER(PAR.ED_Consignee_State);
   PARAMETER(PAR.ED_Consignee_Postal);
   PARAMETER(PAR.ED_Consignee_Country_Code);

   ENDIF;

   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

  ENDIF;

 }

 //?R13944 DN 1/3/19-Allow Update of PHIS info.
 //?R16637 DN 9/23/20-Remove All PHIS Fields Except PHIS Telephone.
 EXECUTE FUNCTION(Rtv/Chg EDE from OE   RT) TYPE(RTVOBJ) FILE(PUA6CPP)           AC2151536;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.EDE_Shipment_Type_Sts);
 PARAMETER(PAR.EDE_Frozen_Shelf_Life_Sts);
 PARAMETER(PAR.EDE_Consignee_Tele_PHIS);
 PARAMETER(PAR.EDE_Consignor_Tele_PHIS);
 {
  //?USER: Process Data record

  //?R16637 DN 9/23/20-Don't Update HIS Fields Except PHIS Telephone.
  EXECUTE FUNCTION(Chg Exp Doc Order Ext CH) TYPE(CHGOBJ) FILE(PUA6CPP)           AC2150708;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.ED_Export_Document_Type);
  PARAMETER(DB1.Country_Code);
  PARAMETER(DB1.EDE_Reason_f_Replcmnt_Sts);
  PARAMETER(PAR.EDE_Shipment_Type_Sts);
  PARAMETER(PAR.EDE_Frozen_Shelf_Life_Sts);
  PARAMETER(DB1.EDE_ISO_Alpha_2_code);
  PARAMETER(DB1.EDE_USDA_Export_Mark_Sts);
  PARAMETER(DB1.EDE_Special_Printing_Ctl);
  PARAMETER(DB1.EDE_Appl_Billing_First_Nm);
  PARAMETER(DB1.EDE_Appl_Billing_Last_Nm);
  PARAMETER(DB1.EDE_Unused_Date);
  PARAMETER(DB1.EDE_Country_of_Final_Dest);
  PARAMETER(DB1.EDE_I_Certify_Stmt);
  PARAMETER(DB1.EDE_Attachment_Type_Txt);
  PARAMETER(DB1.EDE_Attachment_Sub_Type);
  PARAMETER(DB1.EDE_Transit_Country);
  PARAMETER(DB1.EDE_Container_Number);
  PARAMETER(DB1.EDE_Unused_Text_25);
  PARAMETER(DB1.EDE_Additional_Stmt);
  PARAMETER(DB1.EDE_Maturity_lt_30_Months);
  PARAMETER(DB1.EDE_Seal_Nos);
  PARAMETER(DB1.EDE_IFS_PHIS_Doc_Filename);
  PARAMETER(DB1.EDE_Port_of_Entry);
  PARAMETER(DB1.EDE_Unused_2);
  PARAMETER(DB1.EDE_Unused_3);
  PARAMETER(DB1.EDE_Unused_4);
  PARAMETER(DB1.EDE_Unused_5);
  PARAMETER(PAR.EDE_Consignee_Tele_PHIS);
  PARAMETER(DB1.EDE_Unused_6);
  PARAMETER(DB1.EDE_Unused_7);
  PARAMETER(DB1.EDE_Unused_8);
  PARAMETER(DB1.EDE_Unused_9);
  PARAMETER(DB1.EDE_Unused_10);
  PARAMETER(DB1.EDE_Unused_11);
  PARAMETER(PAR.EDE_Consignor_Tele_PHIS);
  PARAMETER(DB1.EDE_PHIS_Process_Status);
  PARAMETER(DB1.EDE_ETL_Process_Timestamp);
  PARAMETER(DB1.EDE_PHIS_Action);
  PARAMETER(DB1.EDE_Return_Cde_Error);
  PARAMETER(DB1.EDE_Application_UID);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

}


//?USER: Process command keys

CASE;

// IF DTL.*CMD key is CF15
IF DTL.*CMD_key = '15';

// PAR.Next Program Name = CND.Order Header Program
PAR.Next_Program_Name = 'PMGFE2R';

PGM.*Return_code = *BLANK;

RETURN;

ENDIF;

CASE;

// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

// Send error message - 'Function not allowed.'
ERROR(USR1833);

QUIT;

ENDIF;

