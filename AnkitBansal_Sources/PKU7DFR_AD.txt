// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKU7DFR
// ?Date: 14.08.2025 Time: 02:53:00
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?MODIFICATIONS
//?H16853 ISE 01/23/2021 - Increased the length from 5 to 7 and
//?                        corrected the alignment of Buy Order Number field
EXECUTE FUNCTION(HPE063 Frt Exp/Accruals) TYPE(EXCINTFUN)                       AB1192166;
{
 //?Execute internal function

 //?2/26/96  HPE063   Allow the expense for freight to be paid
 //?                  by either Seaboard(us) or the producer
 //?                  Allow the system to process accruals thru
 //?                  the General Ledger.
}


EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.BOH_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

// Execute function SFL Fold/Drop  RPG    US.
EXECUTE FUNCTION(SFL Fold/Drop  RPG    US) TYPE(EXCUSRSRC) ('PKS3UFR');
PARAMETER(8);
{
 C                     Z-ADD#IOUTR    ##SFPG
}


//?USER: Initialize subfile control

//?First Time Processing
CASE;

// IF WRK.First Time Flag Usr EQ WRK.Blank USR
IF WRK.First_Time_Flag_Usr = WRK.Blank_USR;

// *MO.VE             1183529*Bu = ilt. in functions
CTL.BOH_Company_Number = WRK.BOH_Company_Number;

// *MO.VE             1183529*Bu = ilt. in functions
WRK.Display_Print_Prompt_Usr = 'Y';

// *MO.VE             1183529*Bu = ilt. in functions
WRK.First_Time_Flag_Usr = 'Y';

// *MO.VE             1183529*Bu = ilt. in functions
CTL.RS_Record_Status = 'A';

ENDIF;

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(WRK.Name_USR);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


//?Default Kill Date w/Job Date
CASE;

// IF CTL.BOL Kill Date EQ WRK.Zero USR
IF CTL.BOL_Kill_Date = WRK.Zero_USR;

// CTL.BOL Kill Date = JOB.*Job date
CTL.BOL_Kill_Date = JOB.*Job_date;

ENDIF;

//?Calculate Control Record Head Totals
// CTL.Total Plan Kill Usr = CON.*ZERO
CTL.Total_Plan_Kill_Usr = *ZERO;

// CTL.Head Total USR = CON.*ZERO
CTL.Head_Total_USR = *ZERO;

// CTL.Total Plan Delv Usr = CON.*ZERO
CTL.Total_Plan_Delv_Usr = *ZERO;

// CTL.Difference +/- = CON.*ZERO
CTL.Difference_+ = *ZERO;

EXECUTE FUNCTION(Rtv Plnd Kill f/Date  RT) TYPE(RTVOBJ) FILE(PKAOCPP)           AB1127652;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOL_Kill_Date);
PARAMETER(CTL.Total_Plan_Kill_Usr);
{
 //?USER: Initialize routine

 // PAR.Planned Kill USR = CON.*ZERO
 PAR.Planned_Kill_USR = *ZERO;

 //?USER: Processing if Data record not found

 // PAR.Planned Kill USR = CON.*ZERO
 PAR.Planned_Kill_USR = *ZERO;

 //?USER: Process Data record

 // PAR.Planned Kill USR = PAR.Planned Kill USR + DB1.KP Planned Kill
 PAR.Planned_Kill_USR = PAR.Planned_Kill_USR + DB1.KP_Planned_Kill;

}


EXECUTE FUNCTION(Rtv Head Received     RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1174789;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOL_Kill_Date);
PARAMETER(CTL.Head_Total_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.TH Hog Class Type is Not Resale
 IF DB1.TH_Hog_Class_Type = 'M'/'S';

 // PAR.Head Total USR = PAR.Head Total USR + DB1.TH Head Received
 PAR.Head_Total_USR = PAR.Head_Total_USR + DB1.TH_Head_Received;

 ENDIF;

}


// CTL.Difference +/- = CTL.Head Total USR - CTL.Total Plan Delv Usr
CTL.Difference_+ = CTL.Head_Total_USR - CTL.Total_Plan_Delv_Usr;

//?USER: Initialize subfile record from DBF record

EXECUTE FUNCTION(Rtv BO Info           RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1100911;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(WRK.BOH_Payment_Type);
PARAMETER(RCD.Producer_Code_USR);
PARAMETER(RCD.Pdctn_Loc_Code_USR);
PARAMETER(WRK.GN_Genetic_Code);
PARAMETER(WRK.PO_Option_Code);
PARAMETER(WRK.CMP_Program_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv BOL Tattoo Info   RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1213937;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_HPS_Movement_Ref_#);
PARAMETER(PAR.Record_Found_TH_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found TH USR = CND.Record Not Found
 PAR.Record_Found_TH_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found TH USR = CND.Record Found
 PAR.Record_Found_TH_USR = 'Y';

 QUIT;

}


EXECUTE FUNCTION(Rtv Movement Number   RT) TYPE(RTVOBJ) FILE(PKEJCPP)           AB1213938;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOLW_Movement_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Highlight Movement Number
CASE;

// IF RCD.BOLW Movement Number EQ WRK.Zero USR
IF RCD.BOLW_Movement_Number = WRK.Zero_USR;

// RCD.BOLW Movement Number = RCD.TH Movement Reference #
RCD.BOLW_Movement_Number = RCD.TH_HPS_Movement_Ref_#;

// RCD.Display Field Usr = CND.*No
RCD.Display_Field_Usr = *NO;

//?Highlight Movement Number
// IF RCD.BOLW Movement Number NE RCD.TH Movement Reference #
IF RCD.BOLW_Movement_Number <> RCD.TH_HPS_Movement_Ref_#;

// RCD.Display Field Usr = CND.*Yes
RCD.Display_Field_Usr = *YES;

//?Highlight Movement Number
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Display Field Usr = CND.*No
RCD.Display_Field_Usr = *NO;

ENDIF;

// PAR.TH Movement Reference # = CTL.BOLW Movement Number
PAR.TH_HPS_Movement_Ref_# = CTL.BOLW_Movement_Number;

//?Sel:  Movement Number
CASE;

// IF CTL.BOLW Movement Number GT WRK.Zero USR
IF CTL.BOLW_Movement_Number > WRK.Zero_USR;

CASE;

// IF RCD.BOLW Movement Number NE CTL.BOLW Movement Number
IF RCD.BOLW_Movement_Number <> CTL.BOLW_Movement_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

// Execute function SFL Fold/Drop  RPG 2  US.
EXECUTE FUNCTION(SFL Fold/Drop  RPG 2  US) TYPE(EXCUSRSRC) ('PKS4UFR');
{
 C           MODE      IFEQ '0'
 C                     SETON                     89
 C                     ELSE
 C                     SETOF                     89
 C                     ENDIF
}


//?USER: Process subfile control (Pre-confirm)

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?If Movement Number changed, Reload Subfile
CASE;

// IF CTL.BOLW Movement Number NE PAR.TH Movement Reference #
IF CTL.BOLW_Movement_Number <> PAR.TH_HPS_Movement_Ref_#;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?F4=Prompt+
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.PD Producer Code
IF PGM.*Cursor_field = CTL.PD_Producer_Code;

// OR PGM.*Cursor field <IS> CTL.PL Location Code
OR PGM.*Cursor_field = CTL.PL_Location_Code;

// Call program Sel Producer Loc      SR.
CALL PROGRAM(Sel Producer Loc      SR) ('PKKMSRR');
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Reload_subfile = 'Y';

// IF PGM.*Cursor field <IS> CTL.TRK Trucker Code
IF PGM.*Cursor_field = CTL.TRK_Trucker_Code;

// Call program Sel Trucker           SR.
CALL PROGRAM(Sel Trucker           SR) ('PKDLSRR');
PARAMETER(CTL.TRK_Trucker_Code);

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?F5=Refresh
CASE;

// IF CTL.*CMD key is Refresh
IF CTL.*CMD_key = '05';

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Change to kill date:  reset "held" tattoo number
CASE;

// IF PAR.TH Kill Date NE CTL.BOL Kill Date
IF PAR.TH_Kill_Date <> CTL.BOL_Kill_Date;

// PAR.TH Kill Date = CTL.BOL Kill Date
PAR.TH_Kill_Date = CTL.BOL_Kill_Date;

// PAR.TH Tattoo Number = CON.*ZERO
PAR.TH_Tattoo_Number = *ZERO;

//?Clear CTL. BO/BOL if probably filled in for Tto selection
CASE;

// IF CTL.BOH Buy Order Number EQ PAR.BOH Buy Order Number
IF CTL.BOH_Buy_Order_Number = PAR.BOH_Buy_Order_Number;

// AND CTL.BOL Load Number EQ PAR.BOL Load Number
AND CTL.BOL_Load_Number = PAR.BOL_Load_Number;

// AND CTL.TH Tattoo Number NE WRK.Zero USR
AND CTL.TH_Tattoo_Number <> WRK.Zero_USR;

// CTL.BOH Buy Order Number = CON.*ZERO
CTL.BOH_Buy_Order_Number = *ZERO;

// CTL.BOL Load Number = CON.*ZERO
CTL.BOL_Load_Number = *ZERO;

ENDIF;

ENDIF;

//?Change to Tattoo selection
CASE;

// IF PAR.TH Tattoo Number NE CTL.TH Tattoo Number
IF PAR.TH_Tattoo_Number <> CTL.TH_Tattoo_Number;

// PAR.TH Tattoo Number = CTL.TH Tattoo Number
PAR.TH_Tattoo_Number = CTL.TH_Tattoo_Number;

CASE;

// IF CTL.TH Tattoo Number EQ WRK.Zero USR
IF CTL.TH_Tattoo_Number = WRK.Zero_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Tatts/Bo Load     RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1135414;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.BOL_Kill_Date);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(PGM.*Return_code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Return Code USR = CND.*Record does not exist
 PAR.Return_Code_USR = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Tattoo Number Not Found'
ERROR(PRK0368);
MSGPARM(CTL.TH_Tattoo_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.BOH Buy Order Number = PAR.BOH Buy Order Number
CTL.BOH_Buy_Order_Number = PAR.BOH_Buy_Order_Number;

// CTL.BOL Load Number = PAR.BOL Load Number
CTL.BOL_Load_Number = PAR.BOL_Load_Number;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?Fill in higher level keys if buy order entered
CASE;

// IF CTL.BOH Buy Order Number NE WRK.Zero USR
IF CTL.BOH_Buy_Order_Number <> WRK.Zero_USR;

//?fill in higher level keys
EXECUTE FUNCTION(Rtv Buy Order Load    RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1192881;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(WRK.Num_Field_Not_Needed);
PARAMETER(CTL.BOL_Pln_Delv_Start_Time);
PARAMETER(WRK.Num_Field_Not_Needed);
PARAMETER(CTL.BOL_Pln_Head_Delv);
PARAMETER(WRK.Num_Field_Not_Needed);
PARAMETER(WRK.Num_Field_Not_Needed);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(WRK.Num_Field_Not_Needed);
PARAMETER(WRK.Num_Field_Not_Needed);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(WRK.Num_Field_Not_Needed);
PARAMETER(WRK.Num_Field_Not_Needed);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(WRK.Num_Field_Not_Needed);
PARAMETER(WRK.Num_Field_Not_Needed);
PARAMETER(WRK.Num_Field_Not_Needed);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(WRK.Txt_Field_Not_Needed);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?8=Work with Tattoo
CASE;

// IF RCD.*SFLSEL is WW Tattoo
IF RCD.*SFLSEL = '8'/'8';

// Call program WW Tattoo         SUP DT.
CALL PROGRAM(WW Tattoo         SUP DT) ('PKU8DTR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.Producer_Code_USR);
PARAMETER(RCD.Pdctn_Loc_Code_USR);
PARAMETER(PAR.Oms_System_Value_Alpha);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

