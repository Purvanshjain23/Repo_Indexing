// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POWQPVR
// ?Date: 14.08.2025 Time: 03:39:23
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.PRT Printer Device = CND.Not entered
PAR.PRT_Printer_Device = *BLANK;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.Company Number Pass   USR = PAR.Company Number
PAR.Company_Number_Pass_USR = PAR.Company_Number;

//?9/17/02  Added Sales Route report type 6 and Detail/Summary for
//?  report types 2 (customer),3 (carrier), 6 (sales route)
//?USER: Load screen

// DTL.Company Number = PAR.Company Number
DTL.Company_Number = PAR.Company_Number;

// DTL.Company Number CDE = PAR.Company Number
DTL.Company_Number_CDE = PAR.Company_Number;

CASE;

// IF DTL.Company Number CDE is Equal to zero
IF DTL.Company_Number_CDE = *ZERO;

// DTL.USR Company Name = CON.*All
DTL.USR_Company_Name = *All;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.USR_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// DTL.USR Detail or Summary = CND.Report Selection 1
DTL.USR_Detail_or_Summary = 1;

// DTL.USR Confirm Status (Y/N) = CND.Yes
DTL.USR_Confirm_Status_Y_N = 'Y';

// DTL.Load Carrier Pay Amt STS = CND.No
DTL.Exclude_if_Carr_Paid_STS = 'N';

// DTL.Exclude Shp Mth is CT STS = CND.Yes
DTL.Exclude_Shp_Mth_is_CT_STS = 'Y';

// DTL.Report Type Both      USR = CND.Detail
DTL.Report_Type_Both_USR = 'D';

//?USER: Validate fields

//?Process F4
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

//?Select company
CASE;

// IF PGM.*Cursor field <IS> DTL.Company Number CDE
IF PGM.*Cursor_field = DTL.Company_Number_CDE;

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// DTL.Company Number = DTL.Company Number CDE
DTL.Company_Number = DTL.Company_Number_CDE;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(DTL.Company_Number);

// DTL.Company Number CDE = DTL.Company Number
DTL.Company_Number_CDE = DTL.Company_Number;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

ENDIF;

ENDIF;

//?Select parent customer
CASE;

// IF PGM.*Cursor field <IS> DTL.Parent Customer
IF PGM.*Cursor_field = DTL.Parent_Customer;

// Call program SEL Parent Customer    SR.
CALL PROGRAM(SEL Parent Customer    SR) ('PDWBSRR');
PARAMETER(DTL.Parent_Customer);

ENDIF;

//?Select Ship to customer
CASE;

// IF PGM.*Cursor field <IS> DTL.Ship To Customer
IF PGM.*Cursor_field = DTL.Ship_To_Customer;

//?4/8/04 slm add the ship to customer select with the customer search
// Call program SEL Cust/ShpTo Flag 'Y'SR.
CALL PROGRAM(SEL Cust/ShpTo Flag 'Y'SR) ('PDYSSRR');
PARAMETER(DTL.Ship_To_Customer);

ENDIF;

//?Select Sales Route
CASE;

// IF PGM.*Cursor field <IS> DTL.Sales Route Code
IF PGM.*Cursor_field = DTL.Sales_Route_Code;

// Call program SEL Route by Sls Persn SR.
CALL PROGRAM(SEL Route by Sls Persn SR) ('PDS1SRR');
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(LCL.Salesperson_Code);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?USER: Validate relations

// DTL.USR Company Name = CON.*BLANK
DTL.USR_Company_Name = *BLANK;

// DTL.Name = CON.*BLANK
DTL.Name = *BLANK;

// DTL.Ship To Name = CON.*BLANK
DTL.Ship_To_Name = *BLANK;

// DTL.Company Number = DTL.Company Number CDE
DTL.Company_Number = DTL.Company_Number_CDE;

CASE;

// IF DTL.Company Number CDE is Equal to zero
IF DTL.Company_Number_CDE = *ZERO;

// DTL.USR Company Name = CON.*All
DTL.USR_Company_Name = *All;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.USR_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Company not found
CASE;

// IF PGM.*Return code is Company not found
IF PGM.*Return_code = 'USR0003';

// DTL.Company Number = DTL.Company Number CDE
DTL.Company_Number = DTL.Company_Number_CDE;

// Send error message - 'Company Number not found'
ERROR(USR0163);

//?Company not found
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Plant Co Status   RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1761084;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(LCL.Plant_Company_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?05/11/07 JRB Removed hard coded companies
CASE;

// IF LCL.Plant Company Sts is Plant Company
IF LCL.Plant_Company_Sts = 'P';

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Name = CON.*BLANK
DTL.Name = *BLANK;

// DTL.Company Number = DTL.Company Number CDE
DTL.Company_Number = DTL.Company_Number_CDE;

// Send error message - 'Company Number not found'
ERROR(USR0163);

ENDIF;

ENDIF;

ENDIF;

//?Validate parent customer if entered
CASE;

// IF DTL.Parent Customer is not equal to zero
IF DTL.Parent_Customer <> *ZERO;

EXECUTE FUNCTION(VAL Parent Customer    RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1452401;
PARAMETER(DTL.Parent_Customer);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Parent Customer is invalid.'
ERROR(USR2111);
MSGPARM(DTL.Parent_Customer);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(DTL.Parent_Customer);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

ENDIF;

//?Validate ship to customer if entered
CASE;

// IF DTL.Ship To Customer is not equal to zero
IF DTL.Ship_To_Customer <> *ZERO;

EXECUTE FUNCTION(VAL Ship to Customer   RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1452403;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Ship_To_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Parent Customer is invalid.'
ERROR(USR2452);
MSGPARM(DTL.Ship_To_Customer);

ENDIF;

ENDIF;

//?Only one customer can be entered at a time.
CASE;

// IF DTL.Parent Customer is not equal to zero
IF DTL.Parent_Customer <> *ZERO;

// AND DTL.Ship To Customer is not equal to zero
AND DTL.Ship_To_Customer <> *ZERO;

// Send error message - 'Only one customer can be selected at a time.'
ERROR(USR2453);
MSGPARM(DTL.Ship_To_Customer);
MSGPARM(WRK.AR_Customer_Number);
MSGPARM(DTL.Parent_Customer);

ENDIF;

//?Validate From Date
CASE;

// IF DTL.USR From Date is not equal zero
IF DTL.USR_From_Date <> *ZERO;

EXECUTE FUNCTION(RTV Calendar           RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1102049;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.USR_From_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.Calendar not found
 PGM.*Return_code = 'USR0018';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Validate From Date
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Date entered is not found in the Calendar file'
ERROR(USR0567);
MSGPARM(DTL.USR_From_Date);

ENDIF;

//?Validate Thru Date
CASE;

// IF DTL.USR Through Date is not equal zero
IF DTL.USR_Through_Date <> *ZERO;

EXECUTE FUNCTION(RTV Calendar           RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1102049;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.USR_Through_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.Calendar not found
 PGM.*Return_code = 'USR0018';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Validate Thru Date
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Date entered is not found in the Calendar file'
ERROR(USR0567);
MSGPARM(DTL.USR_Through_Date);

ENDIF;

//?If From Date GT Through Date, send error message
CASE;

// IF DTL.USR From Date GT DTL.USR Through Date
IF DTL.USR_From_Date > DTL.USR_Through_Date;

// Send error message - 'From date exceeds to date.  Please re-enter.'
ERROR(USR0319);
MSGPARM(DTL.USR_From_Date);

ENDIF;

//?Validate Sales Route     9/17/02
CASE;

// IF DTL.Sales Route Code is entered
IF DTL.Sales_Route_Code <> *BLANK;

EXECUTE FUNCTION(RTV Check Existence    RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1502618;
PARAMETER(DTL.Sales_Route_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 QUIT;

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Sales Route not found.'
ERROR(USR1800);

// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

ENDIF;

//?USER: User defined action

MOVE *ALL (To: PAR From: DTL);

//?Submit job for Print
// PAR.Company Number Pass   USR = DTL.Company Number CDE
PAR.Company_Number_Pass_USR = DTL.Company_Number_CDE;

// PAR.Date 1          PASS  USR = DTL.USR From Date
PAR.Date_1_PASS_USR = DTL.USR_From_Date;

// PAR.Date 2          PASS  USR = DTL.USR Through Date
PAR.Date_2_PASS_USR = DTL.USR_Through_Date;

// PAR.Customer Number Pass  USR = DTL.Parent Customer
PAR.Customer_Number_Pass_USR = DTL.Parent_Customer;

//?Order number is being used for A/R customer
// PAR.Order Number 1  PASS  USR = CON.*ZERO
PAR.Order_Number_1_PASS_USR = *ZERO;

// WRK.Carrier Code = CON.*BLANK
WRK.Carrier_Code = *BLANK;

// PAR.Ship to Customer Pass USR = DTL.Ship To Customer
PAR.Ship_to_Customer_Pass_USR = DTL.Ship_To_Customer;

// WRK.Load Id Pass = CON.*ZERO
WRK.Load_Id_Pass = *ZERO;

CASE;

// IF DTL.USR Detail or Summary is Report Selection 1
IF DTL.USR_Detail_or_Summary = '1';

// Call program PRT Pmt&Pass Dts/Flgs  UP.
CALL PROGRAM(PRT Pmt&Pass Dts/Flgs  UP) ('PDMJUPR');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('O/M');
PARAMETER('POWOPCLP');
PARAMETER('POWOPFR');
PARAMETER('Frt Comp by Sales Route');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Customer_Number_Pass_USR);
PARAMETER(PAR.Date_1_PASS_USR);
PARAMETER(PAR.Date_2_PASS_USR);
PARAMETER(PAR.Order_Number_1_PASS_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(DTL.Report_Type_Both_USR);
PARAMETER(DTL.USR_Detail_or_Summary);
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(PAR.Ship_to_Customer_Pass_USR);
PARAMETER(DTL.Exclude_if_Carr_Paid_STS);
PARAMETER(DTL.Exclude_Shp_Mth_is_CT_STS);
PARAMETER(DTL.USR_Confirm_Status_Y_N);
PARAMETER(WRK.Carrier_Code);
PARAMETER(WRK.Load_Id_Pass);
PARAMETER(*BLANK);
PARAMETER(*BLANK);

ENDIF;

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

//?USER: Exit program processing

CASE;

// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

PGM.*Return_code = 'Y2U9999';

RETURN;

ENDIF;

