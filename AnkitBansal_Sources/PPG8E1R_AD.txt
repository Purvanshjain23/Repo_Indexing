// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPG8E1R
// ?Date: 14.08.2025 Time: 03:40:35
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(LCL.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(RTV First Org         IF) TYPE(EXCINTFUN)                      AC1826264;
PARAMETER(NLL.Company_Number);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(PAR.User_Organization_Access);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
 PARAMETER(JOB.*USER);
 PARAMETER(PAR.User_Code_Model);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.User Code Model is equal to blank
 IF PAR.User_Code_Model = *BLANK;

 EXECUTE FUNCTION(Rtv First Org         RT) TYPE(RTVOBJ) FILE(CADTREP)           AC1826258;
 PARAMETER(JOB.*USER);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.User_Organization_Access);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv First Org         RT) TYPE(RTVOBJ) FILE(CADTREP)           AC1826258;
 PARAMETER(PAR.User_Code_Model);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.User_Organization_Access);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 ENDIF;

}


// PAR.PRT Printer Device = CND.Not entered
PAR.PRT_Printer_Device = *BLANK;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

//?E3882SS JJH 01/29/16 - Determine if there is a Sales Customer Sold
//?  To record
EXECUTE FUNCTION(Rtv SalesCstSoldTo Ex RT) TYPE(RTVOBJ) FILE(PBB6REP)           AC2118605;
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(LCL.Sales_Sold_To_Exist);
{
 //?USER: Processing if Data record not found

 // PAR.Sales Sold To Exist = CND.No
 PAR.Sales_Sold_To_Exist = 'N';

 //?USER: Process Data record

 // PAR.Sales Sold To Exist = CND.Yes
 PAR.Sales_Sold_To_Exist = 'Y';

 QUIT;

}


//?USER: Initialize key screen

// KEY.USR Company Number = PAR.Company Number
KEY.USR_Company_Number = PAR.Company_Number;

// KEY.USR Ship To Customer = PAR.Ship To Customer
KEY.USR_Ship_To_Customer = PAR.Ship_To_Customer;

// KEY.USR Salesperson Code = PAR.Sales Route Code
KEY.USR_Salesperson_Code = PAR.Sales_Route_Code;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(KEY.USR_Company_Number);
PARAMETER(LCL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Validate key screen

//?Select company or customer
CASE;

// IF KEY.*CMD key is *Prompt
IF KEY.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> KEY.USR Company Number
IF PGM.*Cursor_field = KEY.USR_Company_Number;

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// Call program SEL Co By Number       SR.
CALL PROGRAM(SEL Co By Number       SR) ('PDMESRR');
PARAMETER(KEY.USR_Company_Number);
PARAMETER(LCL.Name);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Selection not allowed on output field.'
ERROR(USR2389);

ENDIF;

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> KEY.USR Ship To Customer
IF PGM.*Cursor_field = KEY.USR_Ship_To_Customer;

//?4/2/04 slm add select on shipped to customer with customer name search
// Call program SEL Cust/ShpTo Flag 'Y'SR.
CALL PROGRAM(SEL Cust/ShpTo Flag 'Y'SR) ('PDYSSRR');
PARAMETER(KEY.USR_Ship_To_Customer);

ENDIF;

ENDIF;

//?Select sales route/salesperson
CASE;

// IF KEY.*CMD key is *Prompt
IF KEY.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> KEY.USR Salesperson Code
IF PGM.*Cursor_field = KEY.USR_Salesperson_Code;

// Call program SEL Route by Sls Persn SR.
CALL PROGRAM(SEL Route by Sls Persn SR) ('PDS1SRR');
PARAMETER(KEY.USR_Salesperson_Code);
PARAMETER(PAR.Salesperson_Code);

ENDIF;

ENDIF;

// KEY.Company Number = KEY.USR Company Number
KEY.Company_Number = KEY.USR_Company_Number;

// KEY.Ship To Customer = KEY.USR Ship To Customer
KEY.Ship_To_Customer = KEY.USR_Ship_To_Customer;

//?USER: Initialize detail screen (existing record)

// LCL.Access Denied (Y/N) = CND.yes
LCL.Access_Denied_Y_N = 'Y';

//?Sales Channel-Allow changes
EXECUTE FUNCTION(RTV Check by Full Key  RT) TYPE(RTVOBJ) FILE(PMA7REP)          AC1836072;
PARAMETER(PAR.Salesperson_Code);
PARAMETER(PAR.Salesperson_Code);
PARAMETER('SC');
PARAMETER(LCL.Access_Denied_Y_N);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 // PAR.Access Denied (Y/N) = CND.no
 PAR.Access_Denied_Y_N = 'N';

 ENDIF;

}


// LCL.USR Access Denied (Y/N) = CND.Yes
LCL.USR_Access_Denied_Y_N = 'Y';

//?Only certain Sls people can chg the Mkt Code.
EXECUTE FUNCTION(RTV Check by Full Key  RT) TYPE(RTVOBJ) FILE(PMA7REP)          AC1836072;
PARAMETER(PAR.Salesperson_Code);
PARAMETER(PAR.Salesperson_Code);
PARAMETER('MC');
PARAMETER(LCL.USR_Access_Denied_Y_N);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 // PAR.Access Denied (Y/N) = CND.no
 PAR.Access_Denied_Y_N = 'N';

 ENDIF;

}


EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DB1.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Cust Defaults      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1259916;
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(DTL.Customer_Name);
PARAMETER(DTL.Address_Line_1);
PARAMETER(DTL.Address_Line_2);
PARAMETER(DTL.Address_Line_3);
PARAMETER(DTL.City);
PARAMETER(DTL.State_Code);
PARAMETER(DTL.County_Code);
PARAMETER(DTL.Zip_Postal_Code);
PARAMETER(DTL.Telephone_Number_FF);
PARAMETER(DTL.Fax_Number_FF);
PARAMETER(WRK.Federal_Tax_Id);
PARAMETER(DTL.A_R_Customer);
PARAMETER(WRK.Credit_Check_AR_Customer);
PARAMETER(DTL.Email_When_Order_Shipped);
PARAMETER(DTL.Item_Reference_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(DTL.A_R_Customer);
PARAMETER(DTL.AR_Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV State Description  RT) TYPE(RTVOBJ) FILE(CAACREP)          AC1227485;
PARAMETER(DTL.State_Code);
PARAMETER(DTL.Description);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV County Desc.       RT) TYPE(RTVOBJ) FILE(CAECREP)          AC1147093;
PARAMETER(DTL.State_Code);
PARAMETER(DTL.County_Code);
PARAMETER(DTL.Description);
PARAMETER(WRK.Record_Status);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv All Values FX/EM+ RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1743374;
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(DTL.Internet_Password);
PARAMETER(DTL.Email_Address);
PARAMETER(LCL.Email_User_ID);
PARAMETER(PAR.EDI_Trading_Partner_No);
PARAMETER(PAR.EDI_Cust_Duns_Number);
PARAMETER(PAR.EDI_Warehouse_Store_No);
PARAMETER(PAR.State_Tax_ID);
PARAMETER(PAR.Cust_Shipping_Temp_C_F);
PARAMETER(PAR.One_Invoice_Per_PO);
PARAMETER(PAR.EDI_Advanced_Ship_Notice);
PARAMETER(LCL.Customer_G_L_Vendor_Num);
PARAMETER(DTL.Air_Freight_Orders);
PARAMETER(DTL.Regional_Mgr_Fax_Email);
PARAMETER(NLL.Employee_Co_Packer_Sale);
PARAMETER(LCL.Customer_TF_Exempt_Code);
PARAMETER(NLL.Customer_Watch_Flag);
PARAMETER(DTL.Customer_Sales_Region);
PARAMETER(DTL.Customer_Market_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Catchall 12/9/05 RMC
CASE;

// IF LCL.Customer TF Exempt Code EQ WRK.Blank for 4           USR
IF LCL.Customer_TF_Exempt_Code = WRK.Blank_for_4_USR;

// LCL.Customer TF Exempt Code = CND.Not Exempt
LCL.Customer_TF_Exempt_Code = 'NE';

ENDIF;

EXECUTE FUNCTION(RTV SR Desc,person     RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1270657;
PARAMETER(DB1.Sales_Route_Code);
PARAMETER(DTL.Sales_Route_Description);
PARAMETER(NLL.Salesperson_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Type Code Desc.    RT) TYPE(RTVOBJ) FILE(CAAJREP)          AC1249965;
PARAMETER(DB1.Type_Code);
PARAMETER(DTL.Condition_Name_10_USR);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Cust Shipping Tmp RT) TYPE(RTVOBJ) FILE(PDNIREP)           AC1645925;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(DTL.Cust_Shipping_Temp);
PARAMETER(DTL.Cust_Shipping_Temp_C_F);
PARAMETER(NLL.Ship_To_Warehouse);
PARAMETER(DTL.Print_Req_Delv_Tm_on_Docs);
PARAMETER(DTL.Item_Age_Days_Fresh);
PARAMETER(DTL.Item_Age_Days_Frozen);
PARAMETER(DTL.CCE_Classification_ABC);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Cust Fax Buyer NbrsRT) TYPE(RTVOBJ) FILE(PDM3REP)          AC1718279;
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(*BLANK);
PARAMETER(DTL.Buyer_Fax_Number);
PARAMETER(DTL.Buyer_Fax_Name);
PARAMETER(DTL.Buyer_Email_Address);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// DTL.Reg Fax/Email Sts DescUsr = Condition name of DTL.Regional Mgr Fax/Email
DTL.Reg_Fax_Email_Sts_DescUsr = RTVCND(DTL.Regional_Mgr_Fax_Email);

EXECUTE FUNCTION(Rtv Description       RT) TYPE(RTVOBJ) FILE(PMDDREP)           AC1859875;
PARAMETER(DTL.Customer_Market_Code);
PARAMETER(DTL.Market_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Display Class for edit if Parent
//?DN 05/21/20 R16543-Combined RTV into 1 to Get Customer Info.
EXECUTE FUNCTION(RTV Cust Sls Info     RT) TYPE(RTVOBJ) FILE(CABBREP)           AC2184701;
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(LCL.Parent_Customer);
PARAMETER(LCL.Ship_To_Customer_Flag);
PARAMETER(DTL.Field_vs_In_House_flag);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Parent Status
CASE;

// IF LCL.Parent Customer EQ DB1.Ship To Customer
IF LCL.Parent_Customer = DB1.Ship_To_Customer;

// LCL.Parent Status         USR = CND.Parent Customer
LCL.Parent_Status_USR = 'Y';

//?Parent Status
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Parent Status         USR = CND.Not a Parent Customer
LCL.Parent_Status_USR = 'N';

ENDIF;

//?wi464 added this
EXECUTE FUNCTION(Rtv Pallet/price type RT) TYPE(RTVOBJ) FILE(PUAAREP)           AC2203735;
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(DTL.PM_Pallet_Type_USR);
PARAMETER(DTL.Cust_Dft_Price_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?DN 05/21/20 R16543-Get Buying Group Info for Ship To Cust Only.
CASE;

// IF LCL.Ship To Customer Flag is Allow Use as Ship To Cust
IF LCL.Ship_To_Customer_Flag = 'Y';

EXECUTE FUNCTION(Rtv Buying Group Info RT) TYPE(RTVOBJ) FILE(PUAAREP)           AC2184469;
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(DTL.Buying_Group);
PARAMETER(DTL.Buying_Group_Opt_In_Out);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?08/06/24 SP S312312-Start (Get field Broker Code and Email ID)
EXECUTE FUNCTION(Rtv Ship to Broker Eml RT) TYPE(RTVOBJ) FILE(OMHOREP)          AC2230823;
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(JOB.*Job_date);
PARAMETER(DTL.Broker_Code);
PARAMETER(DTL.Broker_Email_Address);
{
 //?USER: Initialize routine

 // PAR.Broker Code = CND.Not entered
 PAR.Broker_Code = *BLANK;

 // PAR.Broker Email Address = CND.Blank
 PAR.Broker_Email_Address = *BLANK;

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF DB1.Period Beginning Date LE PAR.Date From             USR
 IF DB1.Period_Beginning_Date <= PAR.Date_From_USR;

 // AND DB1.Period Ending Date GE PAR.Date From             USR
 AND DB1.Period_Ending_Date >= PAR.Date_From_USR;

 CASE;

 // IF DB1.Broker Code is Entered
 IF DB1.Broker_Code <> *BLANK;

 EXECUTE FUNCTION(Rtv All details        RT) TYPE(RTVOBJ) FILE(POC5REP)          AC2232586;
 PARAMETER(DB1.Broker_Code);
 PARAMETER(NLL.Broker_Name);
 PARAMETER(NLL.Broker_Address_Line_1);
 PARAMETER(NLL.Broker_Address_Line_2);
 PARAMETER(NLL.Broker_City);
 PARAMETER(NLL.Broker_State);
 PARAMETER(NLL.Broker_Zip);
 PARAMETER(NLL.Broker_Office_Manager);
 PARAMETER(NLL.Broker_Telephone_Number);
 PARAMETER(NLL.Broker_Fax_Number);
 PARAMETER(LCL.Broker_Email_Address);
 PARAMETER(NLL.Broker_G_L_Vendor_Number);
 PARAMETER(NLL.Broker_unused_txt_1);
 PARAMETER(NLL.Broker_M3_Supplier);
 PARAMETER(NLL.Broker_EDI_Trade_Partner);
 PARAMETER(NLL.Broker_Fax_Email_Inv);
 PARAMETER(NLL.Broker_Fax_Email_Prc_Sht);
 PARAMETER(NLL.Payee_Type);
 PARAMETER(NLL.Broker_unused_sts_4);
 PARAMETER(NLL.Salesperson_Code);
 PARAMETER(NLL.EDI_Status_1);
 PARAMETER(NLL.EDI_Status_2);
 PARAMETER(NLL.EDI_Status_3);
 PARAMETER(LCL.Record_Status);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Record Status is Active
 IF LCL.Record_Status = 'A';

 // PAR.Broker Code = DB1.Broker Code
 PAR.Broker_Code = DB1.Broker_Code;

 // PAR.Broker Email Address = LCL.Broker Email Address
 PAR.Broker_Email_Address = LCL.Broker_Email_Address;

 QUIT;

 ENDIF;

 ENDIF;

 ENDIF;

}


//?08/06/24 SP S312312-End
//?USER: Validate detail screen fields

//?SEL: Market Code
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Customer Market Code
IF PGM.*Cursor_field = DTL.Customer_Market_Code;

// Call program Sel Market            SR.
CALL PROGRAM(Sel Market            SR) ('PMQYSRR');
PARAMETER(DTL.Customer_Market_Code);

ENDIF;

ENDIF;

//?SEL: Buying Group.                            DN 05/21/20 R16543
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Buying Group
IF PGM.*Cursor_field = DTL.Buying_Group;

// Call program Sel Buying Group      SR.
CALL PROGRAM(Sel Buying Group      SR) ('PUQ1SRR');
PARAMETER(DTL.Buying_Group);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?SEL: pallet
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.PM Pallet Type USR
IF PGM.*Cursor_field = DTL.PM_Pallet_Type_USR;

// Call program Sel Pallet Master     SR.
CALL PROGRAM(Sel Pallet Master     SR) ('PUTOSRR');
PARAMETER(DTL.PM_Pallet_Type_USR);
PARAMETER(LCL.Rental_Y_N);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

CASE;

// IF DTL.Customer Market Code is Entered
IF DTL.Customer_Market_Code <> *BLANK;

EXECUTE FUNCTION(Rtv Description       RT) TYPE(RTVOBJ) FILE(PMDDREP)           AC1859875;
PARAMETER(DTL.Customer_Market_Code);
PARAMETER(DTL.Market_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.CM Market Desc is equal to blank
IF DTL.Market_Desc = *BLANK;

// Send error message - 'Market not found.'
ERROR(USR3859);
MSGPARM(DTL.Customer_Market_Code);

ENDIF;

ENDIF;

//?USER: Validate detail screen relations

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Cust Defaults      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1259916;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Customer_Name);
PARAMETER(DTL.Address_Line_1);
PARAMETER(DTL.Address_Line_2);
PARAMETER(DTL.Address_Line_3);
PARAMETER(DTL.City);
PARAMETER(DTL.State_Code);
PARAMETER(DTL.County_Code);
PARAMETER(DTL.Zip_Postal_Code);
PARAMETER(WRK.Telephone_Number_FF);
PARAMETER(WRK.Fax_Number_FF);
PARAMETER(WRK.Federal_Tax_Id);
PARAMETER(WRK.AR_Customer_Number);
PARAMETER(WRK.Credit_Check_AR_Customer);
PARAMETER(WRK.Email_When_Order_Shipped);
PARAMETER(WRK.Item_Reference_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV State Description  RT) TYPE(RTVOBJ) FILE(CAACREP)          AC1227485;
PARAMETER(DTL.State_Code);
PARAMETER(DTL.Description);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV County Desc.       RT) TYPE(RTVOBJ) FILE(CAECREP)          AC1147093;
PARAMETER(DTL.State_Code);
PARAMETER(DTL.County_Code);
PARAMETER(DTL.Description);
PARAMETER(WRK.Record_Status);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV SR Desc,person     RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1270657;
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(DTL.Sales_Route_Description);
PARAMETER(NLL.Salesperson_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Type Code Desc.    RT) TYPE(RTVOBJ) FILE(CAAJREP)          AC1249965;
PARAMETER(DTL.Type_Code);
PARAMETER(DTL.Condition_Name_10_USR);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Description       RT) TYPE(RTVOBJ) FILE(PMDDREP)           AC1859875;
PARAMETER(DTL.Customer_Market_Code);
PARAMETER(DTL.Market_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?pallet type
CASE;

// IF DTL.PM Pallet Type USR is Entered
IF DTL.PM_Pallet_Type_USR <> *BLANK;

EXECUTE FUNCTION(Rtv Pallet Desc       RT) TYPE(RTVOBJ) FILE(PUB6CPP)           AC2203100;
PARAMETER(DTL.PM_Pallet_Type_USR);
PARAMETER(LCL.Pallet_type_1_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Pallet type 1 Desc is Not entered
IF LCL.Pallet_type_1_Desc = *BLANK;

// Send error message - 'Pallet Master not found.'
ERROR(USR5203);

ENDIF;

ENDIF;

//?Delivery Time.
CASE;

// IF DTL.Deliver after time is Entered
IF ( DTL.Deliver_after_time <> *ZERO;

// AND DTL.Deliver after time is LE 2400
AND DTL.Deliver_after_time <= 2400 );

// OR DTL.Deliver after time is Zero
OR DTL.Deliver_after_time = *ZERO;

//?Delivery Time.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - '&1'
ERROR(USR5117);
MSGPARM('Invalid time.');
MSGPARM(DTL.Deliver_after_time);

ENDIF;

//?F7=Edit Customer Item Reference
CASE;

// IF DTL.*CMD key is CF07
IF DTL.*CMD_key = '07';

// Call program Edt Cust Item Ref     EF.
CALL PROGRAM(Edt Cust Item Ref     EF) ('POMXEFR');
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Customer_Name);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Enter temp type
CASE;

// IF DTL.Cust Shipping Temp is Entered
IF DTL.Cust_Shipping_Temp <> *ZERO;

// AND DTL.Cust Shipping Temp C/F EQ WRK.Blank for 4           USR
AND DTL.Cust_Shipping_Temp_C_F = WRK.Blank_for_4_USR;

// Send error message - 'Enter F for Fahrenheit or C for Celsius.'
ERROR(USR3139);
MSGPARM(DTL.Cust_Shipping_Temp_C_F);

ENDIF;

//?DN 05/21/20 R16543-Validations for Buying Group Info.
CASE;

// IF DTL.Buying Group is Entered
IF DTL.Buying_Group <> *BLANK;

EXECUTE FUNCTION(Val Active Buying Grp RT) TYPE(RTVOBJ) FILE(PUB1REP)           AC2184571;
PARAMETER(DTL.Buying_Group);
PARAMETER(LCL.Record_Status);
{
 //?USER: Initialize routine

 // PAR.Record Status = CND.*blank
 PAR.Record_Status = *BLANK;

 //?USER: Process Data record

 // PAR.Record Status = DB1.Record Status
 PAR.Record_Status = DB1.Record_Status;

}


//?Record Exist?
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?If Not Active, Send Error Msg.
CASE;

// IF NOT LCL.Record Status is Active
IF ! LCL.Record_Status = 'A';

// LCL.Generic Message 80 USR = CON.Buying Group not active.
LCL.Generic_Message_80_USR = 'Buying Group not active.';

// Send error message - '&1'
ERROR(USR5085);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(DTL.Buying_Group);

QUIT;

ENDIF;

//?Record Exist?
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Generic Message 80 USR = CON.Buying Group not found.
LCL.Generic_Message_80_USR = 'Buying Group not found.';

// Send error message - '&1'
ERROR(USR5085);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(DTL.Buying_Group);

QUIT;

ENDIF;

//?DN 05/21/20 R16543-Validations for Buying Group Info.
// IF *OTHERWISE
IF *OTHERWISE;

//?Buying Group is required.
CASE;

// IF NOT DTL.Buying Group Opt In/Out is Not Entered
IF ! DTL.Buying_Group_Opt_In_Out = *BLANK;

// LCL.Generic Message 80 USR = CON.Buying Group required.
LCL.Generic_Message_80_USR = 'Buying Group required.';

// Send error message - '&1'
ERROR(USR5085);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(DTL.Buying_Group);

QUIT;

ENDIF;

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(CHG Co/Customer - SalesIF) TYPE(EXCINTFUN) FILE(CAEOREP)       AC1709248;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(DTL.Special_Instructions_2);
PARAMETER(DTL.Special_Instructions);
PARAMETER(DTL.Deliver_after_time);
PARAMETER(DTL.Type_Code);
PARAMETER(DTL.Age_Code);
PARAMETER(DTL.Distributor);
PARAMETER(DTL.Ord_Ent_Default_Sls_Rte);
PARAMETER(DTL.Telephone_Number_FF);
PARAMETER(DTL.Fax_Number_FF);
PARAMETER(LCL.Ship_To_Customer_Flag);
PARAMETER(DTL.Field_vs_In_House_flag);
PARAMETER(DTL.Email_When_Order_Shipped);
PARAMETER(DTL.Item_Reference_Status);
PARAMETER(DTL.Internet_Password);
PARAMETER(DTL.Email_Address);
PARAMETER(PAR.EDI_Trading_Partner_No);
PARAMETER(PAR.EDI_Cust_Duns_Number);
PARAMETER(PAR.EDI_Warehouse_Store_No);
PARAMETER(PAR.State_Tax_ID);
PARAMETER(DTL.Cust_Shipping_Temp);
PARAMETER(DTL.Cust_Shipping_Temp_C_F);
PARAMETER(PAR.One_Invoice_Per_PO);
PARAMETER(PAR.EDI_Advanced_Ship_Notice);
PARAMETER(DTL.Print_Req_Delv_Tm_on_Docs);
PARAMETER(DTL.Item_Age_Days_Fresh);
PARAMETER(DTL.Item_Age_Days_Frozen);
PARAMETER(DTL.CCE_Classification_ABC);
PARAMETER(LCL.Customer_G_L_Vendor_Num);
PARAMETER(DTL.Air_Freight_Orders);
PARAMETER(DTL.Regional_Mgr_Fax_Email);
PARAMETER(LCL.Customer_TF_Exempt_Code);
PARAMETER(DTL.Customer_Sales_Region);
PARAMETER(DTL.Customer_Market_Code);
PARAMETER(DTL.Buyer_Fax_Number);
PARAMETER(DTL.Buyer_Fax_Name);
PARAMETER(DTL.Buyer_Email_Address);
PARAMETER(DTL.Buying_Group);
PARAMETER(DTL.Buying_Group_Opt_In_Out);
PARAMETER(DTL.PM_Pallet_Type_USR);
PARAMETER(DTL.Cust_Dft_Price_Type);
{
 //?Execute internal function

 //?Company Customer Update  and Company Customer Ext Crt/Upd
 //?upd deliver after time
 EXECUTE FUNCTION(RTV Chg Co/Cust        RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1826284;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Sales_Route_Code);
 PARAMETER(PAR.Special_Instructions_2);
 PARAMETER(PAR.Special_Instructions);
 PARAMETER(PAR.Deliver_after_time);
 PARAMETER(PAR.Type_Code);
 PARAMETER(PAR.Age_Code);
 PARAMETER(PAR.Distributor);
 PARAMETER(PAR.Ord_Ent_Default_Sls_Rte);
 PARAMETER(PAR.Cust_Shipping_Temp);
 PARAMETER(PAR.Cust_Shipping_Temp_C_F);
 PARAMETER(PAR.Print_Req_Delv_Tm_on_Docs);
 PARAMETER(PAR.Item_Age_Days_Fresh);
 PARAMETER(PAR.Item_Age_Days_Frozen);
 PARAMETER(PAR.CCE_Classification_ABC);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(CHG Co/Customer - SalesCH) TYPE(CHGOBJ) FILE(CAEOREP)          AC1709255;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(PAR.Sales_Route_Code);
  PARAMETER(PAR.Special_Instructions_2);
  PARAMETER(PAR.Special_Instructions);
  PARAMETER(PAR.Deliver_after_time);
  PARAMETER(PAR.Type_Code);
  PARAMETER(PAR.Age_Code);
  PARAMETER(PAR.Distributor);
  PARAMETER(PAR.Ord_Ent_Default_Sls_Rte);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  EXECUTE FUNCTION(FP1309 Inventory Age  IF) TYPE(EXCINTFUN)                      AC1981251;
  {
   //?Execute internal function

   //?FP1309 Inventory Age Code Description
  }

  EXECUTE FUNCTION(Rtv/Upd Shipping Temp RT) TYPE(RTVOBJ) FILE(PDNIREP)           AC1645966;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(PAR.Cust_Shipping_Temp);
  PARAMETER(PAR.Cust_Shipping_Temp_C_F);
  PARAMETER(PAR.Print_Req_Delv_Tm_on_Docs);
  PARAMETER(PAR.Item_Age_Days_Fresh);
  PARAMETER(PAR.Item_Age_Days_Frozen);
  PARAMETER(PAR.CCE_Classification_ABC);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Crt Cust Elec Comm    CR) TYPE(CRTOBJ) FILE(PDNIREP)           AC1611532;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Ship_To_Customer);
   PARAMETER(PAR.Cust_Shipping_Temp);
   PARAMETER(PAR.Cust_Shipping_Temp_C_F);
   PARAMETER(PAR.Print_Req_Delv_Tm_on_Docs);
   PARAMETER(PAR.Item_Age_Days_Fresh);
   PARAMETER(PAR.Item_Age_Days_Frozen);
   PARAMETER(PAR.CCE_Classification_ABC);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Shipping Temp    CH) TYPE(CHGOBJ) FILE(PDNIREP)            AC1645932;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Ship_To_Customer);
   PARAMETER(PAR.Cust_Shipping_Temp);
   PARAMETER(PAR.Cust_Shipping_Temp_C_F);
   PARAMETER(PAR.Print_Req_Delv_Tm_on_Docs);
   PARAMETER(PAR.Item_Age_Days_Fresh);
   PARAMETER(PAR.Item_Age_Days_Frozen);
   PARAMETER(PAR.CCE_Classification_ABC);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

 }

 //?Customer Update
 EXECUTE FUNCTION(CHG Phone# & Fax # EXT CH) TYPE(CHGOBJ) FILE(CABBREP)          AC1718003;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Telephone_Number_FF);
 PARAMETER(PAR.Fax_Number_FF);
 PARAMETER(PAR.Field_vs_In_House_flag);
 PARAMETER(PAR.Email_When_Order_Shipped);
 PARAMETER(PAR.Item_Reference_Status);
 PARAMETER(PAR.Internet_Password);
 PARAMETER(PAR.Email_Address);
 PARAMETER(PAR.EDI_Trading_Partner_No);
 PARAMETER(PAR.EDI_Cust_Duns_Number);
 PARAMETER(PAR.EDI_Warehouse_Store_No);
 PARAMETER(PAR.State_Tax_ID);
 PARAMETER(PAR.Cust_Shipping_Temp_C_F);
 PARAMETER(PAR.One_Invoice_Per_PO);
 PARAMETER(PAR.EDI_Advanced_Ship_Notice);
 PARAMETER(PAR.Customer_G_L_Vendor_Num);
 PARAMETER(PAR.Air_Freight_Orders);
 PARAMETER(PAR.Regional_Mgr_Fax_Email);
 PARAMETER(PAR.Customer_TF_Exempt_Code);
 PARAMETER(PAR.Customer_Sales_Region);
 PARAMETER(PAR.Customer_Market_Code);
 {
  //?USER: Processing after Data read

  //?Create or change customer ext record
  EXECUTE FUNCTION(Val Cust Elec Exists  RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1569842;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(LCL.Email_User_ID);
  PARAMETER(LCL.Air_Freight_Orders);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Create or change customer ext record
  CASE;

  // IF LCL.Email User ID is Not Entered Blank
  IF LCL.Email_User_ID = *BLANK;

  // LCL.Customer Number Alpha = CVTVAR(DB1.Ship To Customer)
  LCL.Customer_Number_Alpha = CVTVAR(DB1.Ship_To_Customer);

  // LCL.Email User ID = CONCAT(CON.A,LCL.Customer Number Alpha,CON.*ZERO)
  LCL.Email_User_ID = 'A' + LCL.Customer_Number_Alpha (*ZERO);

  //?Create or change customer ext record
  // IF *OTHERWISE
  IF *OTHERWISE;

  ENDIF;

  EXECUTE FUNCTION(Upd Customer EXT      RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC2041891;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(PAR.Internet_Password);
  PARAMETER(PAR.Email_Address);
  PARAMETER(LCL.Email_User_ID);
  PARAMETER(PAR.EDI_Trading_Partner_No);
  PARAMETER(PAR.EDI_Cust_Duns_Number);
  PARAMETER(PAR.EDI_Warehouse_Store_No);
  PARAMETER(PAR.State_Tax_ID);
  PARAMETER(PAR.Cust_Shipping_Temp_C_F);
  PARAMETER(PAR.One_Invoice_Per_PO);
  PARAMETER(PAR.EDI_Advanced_Ship_Notice);
  PARAMETER(PAR.Customer_G_L_Vendor_Num);
  PARAMETER(PAR.Air_Freight_Orders);
  PARAMETER(PAR.Regional_Mgr_Fax_Email);
  PARAMETER(PAR.Employee_Co_Packer_Sale);
  PARAMETER(PAR.Customer_TF_Exempt_Code);
  PARAMETER(PAR.Customer_Watch_Flag);
  PARAMETER(PAR.Customer_Sales_Region);
  PARAMETER(PAR.Customer_Market_Code);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Crt Customer Elec Comm CR) TYPE(CRTOBJ) FILE(PDNEREP)          AC1569823;
   PARAMETER(PAR.Ship_To_Customer);
   PARAMETER(PAR.Internet_Password);
   PARAMETER(PAR.Email_Address);
   PARAMETER(PAR.Email_User_ID);
   PARAMETER(PAR.EDI_Trading_Partner_No);
   PARAMETER(PAR.EDI_Cust_Duns_Number);
   PARAMETER(PAR.EDI_Warehouse_Store_No);
   PARAMETER(PAR.State_Tax_ID);
   PARAMETER(PAR.Cust_Shipping_Temp_C_F);
   PARAMETER(PAR.One_Invoice_Per_PO);
   PARAMETER(PAR.EDI_Advanced_Ship_Notice);
   PARAMETER(PAR.Customer_G_L_Vendor_Num);
   PARAMETER(PAR.Air_Freight_Orders);
   PARAMETER(PAR.Regional_Mgr_Fax_Email);
   PARAMETER(PAR.Employee_Co_Packer_Sale);
   PARAMETER(PAR.Customer_TF_Exempt_Code);
   PARAMETER(PAR.Customer_Watch_Flag);
   PARAMETER(PAR.Customer_Sales_Region);
   PARAMETER(PAR.Customer_Market_Code);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   {
    //?USER: Processing before Data update

    //?Add customer to Pork Email File - This is an IBM file.
    // Call program Crt Cust Usr Id IBM Fl UP.
    CALL PROGRAM(Crt Cust Usr Id IBM Fl UP) ('PDW1UPR');
    PARAMETER(DB1.Email_Address);
    PARAMETER(DB1.Email_User_ID);

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?USER: Process Data record

   //?upd empl/copack with db1.. its not passed in
   EXECUTE FUNCTION(Chg Customer Elec Comm CH) TYPE(CHGOBJ) FILE(PDNEREP)          AC1569824;
   PARAMETER(DB1.Ship_To_Customer);
   PARAMETER(PAR.Internet_Password);
   PARAMETER(PAR.Email_Address);
   PARAMETER(PAR.Email_User_ID);
   PARAMETER(PAR.EDI_Trading_Partner_No);
   PARAMETER(PAR.EDI_Cust_Duns_Number);
   PARAMETER(PAR.EDI_Warehouse_Store_No);
   PARAMETER(PAR.State_Tax_ID);
   PARAMETER(PAR.Cust_Shipping_Temp_C_F);
   PARAMETER(PAR.One_Invoice_Per_PO);
   PARAMETER(PAR.EDI_Advanced_Ship_Notice);
   PARAMETER(PAR.Customer_G_L_Vendor_Num);
   PARAMETER(PAR.Air_Freight_Orders);
   PARAMETER(PAR.Regional_Mgr_Fax_Email);
   PARAMETER(DB1.Employee_Co_Packer_Sale);
   PARAMETER(PAR.Customer_TF_Exempt_Code);
   PARAMETER(PAR.Customer_Watch_Flag);
   PARAMETER(PAR.Customer_Sales_Region);
   PARAMETER(PAR.Customer_Market_Code);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER(DB1.Record_Status);
   {
    //?USER: Processing before Data update

    //?Add or change Pork Email Address in file. - This is an IBM file.
    // Call program Crt Cust Usr Id IBM Fl UP.
    CALL PROGRAM(Crt Cust Usr Id IBM Fl UP) ('PDW1UPR');
    PARAMETER(DB1.Email_Address);
    PARAMETER(DB1.Email_User_ID);

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 EXECUTE FUNCTION(Rtv Upd Cust FaxBUYFX RT) TYPE(RTVOBJ) FILE(PDM3REP)           AC1717991;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Buyer_Fax_Number);
 PARAMETER(PAR.Buyer_Fax_Name);
 PARAMETER(PAR.Buyer_Email_Address);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Customer Fax      CR) TYPE(CRTOBJ) FILE(PDM3REP)           AC1600692;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Fax_Application_Code);
  PARAMETER(PAR.Buyer_Fax_Number);
  PARAMETER(PAR.Buyer_Fax_Name);
  PARAMETER(PAR.Buyer_Email_Address);
  PARAMETER(*BLANKS);
  PARAMETER(*BLANKS);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(WRK.Fax_Unused_Sts_1);
  PARAMETER(WRK.Fax_Unused_Sts_2);
  PARAMETER(WRK.Fax_Unused_Sts_3);
  PARAMETER(WRK.Fax_Unused_Sts_4);
  PARAMETER(WRK.Fax_Unused_Sts_5);
  PARAMETER('A');
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set RECORD STATUS field. ***
    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Customer Fax      CH) TYPE(CHGOBJ) FILE(PDM3REP)           AC1600693;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Fax_Application_Code);
  PARAMETER(PAR.Buyer_Fax_Number);
  PARAMETER(PAR.Buyer_Fax_Name);
  PARAMETER(PAR.Buyer_Email_Address);
  PARAMETER(DB1.Fax_Number_2);
  PARAMETER(DB1.Fax_Contact_Name_2);
  PARAMETER(DB1.Fax_Number_3);
  PARAMETER(DB1.Fax_Contact_Name_3);
  PARAMETER(DB1.Fax_Number_4);
  PARAMETER(DB1.Fax_Contact_Name_4);
  PARAMETER(DB1.Fax_Number_5);
  PARAMETER(DB1.Fax_Contact_Name_5);
  PARAMETER(DB1.Fax_Unused_Sts_1);
  PARAMETER(DB1.Fax_Unused_Sts_2);
  PARAMETER(DB1.Fax_Unused_Sts_3);
  PARAMETER(DB1.Fax_Unused_Sts_4);
  PARAMETER(DB1.Fax_Unused_Sts_5);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

 }

 EXECUTE FUNCTION(Rtv Chg Pallet/price  RT) TYPE(RTVOBJ) FILE(PUAAREP)           AC2203777;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.PM_Pallet_Type);
 PARAMETER(PAR.Cust_Dft_Price_Type);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Customer EXT2     CR) TYPE(CRTOBJ) FILE(PUAAREP)           AC2130726;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(LCL.CEXT2_Unused_Sts_1);
  PARAMETER(LCL.CEXT2_Unused_Sts_2);
  PARAMETER(LCL.CEXT2_Unused_Sts_3);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(PAR.PM_Pallet_Type);
  PARAMETER(PAR.Cust_Dft_Price_Type);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set RECORD STATUS field. ***
    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Pallet/Price typesCH) TYPE(CHGOBJ) FILE(PUAAREP)           AC2203734;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(PAR.PM_Pallet_Type);
  PARAMETER(PAR.Cust_Dft_Price_Type);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(PAR.Change_Date);
   PARAMETER(PAR.Change_Time);
   PARAMETER(PAR.Change_User);
   PARAMETER(PAR.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

 }

 //?DN 05/21/20 R16543-Update Buying Group Info in Customer EXT2 File.
 CASE;

 // IF PAR.Ship To Customer Flag is Allow Use as Ship To Cust
 IF PAR.Ship_To_Customer_Flag = 'Y';

 EXECUTE FUNCTION(Upd Buying Group Info RT) TYPE(RTVOBJ) FILE(PUAAREP)           AC2184712;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Buying_Group);
 PARAMETER(PAR.Buying_Group_Opt_In_Out);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Customer EXT2     CR) TYPE(CRTOBJ) FILE(PUAAREP)           AC2130726;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(*BLANK);
  PARAMETER('FT');
  PARAMETER(PAR.Buying_Group);
  PARAMETER(PAR.Buying_Group_Opt_In_Out);
  PARAMETER(LCL.CEXT2_Unused_Sts_1);
  PARAMETER(LCL.CEXT2_Unused_Sts_2);
  PARAMETER(LCL.CEXT2_Unused_Sts_3);
  PARAMETER(LCL.Automated_A_R_Aging_Rpt);
  PARAMETER(LCL.CEXT2_Unused_Cde_2);
  PARAMETER(LCL.CEXT2_Unused_Cde_3);
  PARAMETER(LCL.CEXT2_Unused_Nbr_2);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.CEXT2_Unused_Tme_1);
  PARAMETER(LCL.Ship_To_Establishment_nbr);
  PARAMETER(*BLANK);
  PARAMETER(LCL.Cust_Dft_Price_Type);
  PARAMETER(LCL.Cust_Dft_Age_Days);
  PARAMETER(LCL.Cust_Dft_Delivery_Time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set RECORD STATUS field. ***
    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

  }

  //?USER: Process Data record

  CASE;

  // IF PAR.Buying Group NE DB1.Buying Group
  IF PAR.Buying_Group <> DB1.Buying_Group;

  // OR PAR.Buying Group Opt In/Out NE DB1.Buying Group Opt In/Out
  OR PAR.Buying_Group_Opt_In_Out <> DB1.Buying_Group_Opt_In_Out;

  EXECUTE FUNCTION(Chg Buying Group Info CH) TYPE(CHGOBJ) FILE(PUAAREP)           AC2184587;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(PAR.Buying_Group);
  PARAMETER(PAR.Buying_Group_Opt_In_Out);
  {
   //?USER: Processing after Data read

   //?If Buying Group Info Changed Then Update Else Quit.
   CASE;

   // IF PAR.Buying Group NE DB1.Buying Group
   IF PAR.Buying_Group <> DB1.Buying_Group;

   // OR PAR.Buying Group Opt In/Out NE DB1.Buying Group Opt In/Out
   OR PAR.Buying_Group_Opt_In_Out <> DB1.Buying_Group_Opt_In_Out;

   //?Continue to update.
   //?If Buying Group Info Changed Then Update Else Quit.
   // IF *OTHERWISE
   IF *OTHERWISE;

   QUIT;

   ENDIF;

   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

  ENDIF;

 }

 ENDIF;

}


