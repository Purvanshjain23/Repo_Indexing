// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDR2PFR
// ?Date: 14.08.2025 Time: 12:04:23
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('I/C');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// PAR.USR Display 1 = CND.No
PAR.USR_Display_1 = 'N';

//?USER: Record selection processing

EXECUTE FUNCTION(Rtv ItmTyp/ItmLv/QltLv RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1327678;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(WRK.Quality_Level);
PARAMETER(WRK.Item_Level);
PARAMETER(WRK.Item_Type_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Select item type code if entered
CASE;

// IF PAR.Item Type Code is Blank
IF PAR.Item_Type_Code = *BLANK;

//?Select item type code if entered
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Item Type Code NE WRK.Item Type Code
IF PAR.Item_Type_Code <> WRK.Item_Type_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select item level if entered
CASE;

// IF PAR.Item Level is Entered
IF PAR.Item_Level <> *BLANK;

CASE;

// IF PAR.Item Level NE WRK.Item Level
IF PAR.Item_Level <> WRK.Item_Level;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select quality level if entered
CASE;

// IF PAR.Quality Level is Entered
IF PAR.Quality_Level <> *BLANK;

CASE;

// IF PAR.Quality Level NE WRK.Quality Level
IF PAR.Quality_Level <> WRK.Quality_Level;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select non-zero quantities only if flag is yes
CASE;

// IF PAR.Prt Non-Zero Qty Only USR is yes
IF PAR.Prt_Non_Zero_Qty_Only_USR = 'Y';

// AND DB1.On Hand Weight Summary is Equal to zero
AND DB1.On_Hand_Weight_Summary = *ZERO;

// AND DB1.On Hand U/M1 Summary is Equal to zero
AND DB1.On_Hand_UOM1_Summary = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: On print of first page format

// 1PG.Accounting Company Number = PAR.Accounting Company Number
X1PG_Company_Number = PAR.Company_Number;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Warehouse Code = PAR.Warehouse Code
X1PG_Warehouse_Code = PAR.Warehouse_Code;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(X1PG_Warehouse_Code);
PARAMETER(X1PG_Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


// 1PG.Item Code = PAR.Item Code
X1PG_Item_Code = PAR.Item_Code;

//?If company is selected, rtv co/item else rtv item
CASE;

// IF PAR.Accounting Company Number is not equal to zero
IF PAR.Company_Number <> *ZERO;

EXECUTE FUNCTION(Rtv Descriptions      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1140665;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Item_Code);
PARAMETER(X1PG_Item_Description);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(WRK.UOM_Primary);
PARAMETER(WRK.UOM_Second);
PARAMETER(WRK.UOM_Third);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If company is selected, rtv co/item else rtv item
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
PARAMETER(X1PG_Item_Code);
PARAMETER(X1PG_Item_Description);
PARAMETER(WRK.Description_Line_Two);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// 1PG.Item Structure Type Code = PAR.Item Structure Type Code
X1PG_Item_Structure_Type_Code = PAR.Item_Structure_Type_Code;

EXECUTE FUNCTION(RTV  Description       RT) TYPE(RTVOBJ) FILE(OME8REP)          AC1219219;
PARAMETER(X1PG_Item_Structure_Type_Code);
PARAMETER(X1PG_Item_Structure_Type_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Item Structure Group Code = PAR.Item Structure Group Code
X1PG_Item_Structure_Group_Code = PAR.Item_Structure_Group_Code;

EXECUTE FUNCTION(Rtv Group Description  RT) TYPE(RTVOBJ) FILE(OME9REP)          AC1202656;
PARAMETER(X1PG_Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(X1PG_Item_Structure_Group_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Item Structure Class Code = PAR.Item Structure Class Code
X1PG_Item_Structure_Class_Code = PAR.Item_Structure_Class_Code;

EXECUTE FUNCTION(Rtv Item Class Desc    RT) TYPE(RTVOBJ) FILE(OMFAREP)          AC1205440;
PARAMETER(X1PG_Item_Structure_Class_Code);
PARAMETER(X1PG_Item_Structure_Class_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Item Type Code = PAR.Item Type Code
X1PG_Item_Type_Code = PAR.Item_Type_Code;

// 1PG.Condition Desc. 1  USR = Condition name of 1PG.Item Type Code
X1PG_Condition_Desc_1_USR = RTVCND(X1PG_Item_Type_Code);

// 1PG.Prt Non-Zero Qty Only USR = PAR.Prt Non-Zero Qty Only USR
1PG.Prt Non-Zero Qty Only USR = PAR.Prt_Non_Zero_Qty_Only_USR;

// 1PG.Condition Desc. 2  USR = Condition name of 1PG.Prt Non-Zero Qty Only USR
X1PG_Condition_Desc_2_USR = RTVCND(X1PG_Prt_Non_Zero_Qty_Only_USR);

// 1PG.Item Level = PAR.Item Level
X1PG_Item_Level = PAR.Item_Level;

EXECUTE FUNCTION(RTV Item Level Descr   RT) TYPE(RTVOBJ) FILE(PDILREP)          AC1287285;
PARAMETER(X1PG_Item_Level);
PARAMETER(X1PG_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Quality Level = PAR.Quality Level
X1PG_Quality_Level = PAR.Quality_Level;

EXECUTE FUNCTION(Rtv Quality Level Desc RT) TYPE(RTVOBJ) FILE(CAAIREP)          AC1124632;
PARAMETER(X1PG_Quality_Level);
PARAMETER(X1PG_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Item/Item Struct. Sts USR = PAR.Item/Item Struct. Sts USR
X1PG_Item_Item_Struct_Sts_USR = PAR.Item_Item_Struct_Sts_USR;

// 1PG.Condition Desc. 3  USR = Condition name of 1PG.Item/Item Struct. Sts USR
X1PG_Condition_Desc_3_USR = RTVCND(X1PG_Item_Item_Struct_Sts_USR);

// 1PG.As of Date = PAR.As of Date
X1PG_As_of_Date = PAR.As_of_Date;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// PAR.USR Display 1 = CND.Yes
PAR.USR_Display_1 = 'Y';

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Print Accounting Company Number header format
PRINT Accounting Company Number header format;

ENDIF;

// SUPPRESSED PRINT Item Code header format

//?USER: On print of detail format

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

//?USER: Process after print of detail format

// NXT.USR Amount for CR = NXT.USR Amount for CR + DB1.Value of On Hand Inventor
NXT.USR_Amount_for_CR = NXT.USR_Amount_for_CR + DB1.Value_of_On_Hand_Inventor;

// NXT.Quantity Total 13.2   USR = NXT.Quantity Total 13.2   USR + DB1.On Hand U/M1
NXT.Quantity_Total_13_2_USR = NXT.Quantity_Total_13_2_USR + DB1.On_Hand_UOM1_Summary;

// NXT.Weight Total 13.2     USR = NXT.Weight Total 13.2     USR + DB1.On Hand Weig
NXT.Weight_Total_13_2_USR = NXT.Weight_Total_13_2_USR + DB1.On_Hand_Weight_Summary;

//?USER: Print required level totals

CASE;

IF NEW Item_Code;
//?Remove transactions greater than as of date
EXECUTE FUNCTION(Rtv As Of Inv by Item  RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1354935;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(9999999);
PARAMETER(PAR.Transaction_Quantity);
PARAMETER(PAR.Transaction_Weight);
PARAMETER(PAR.As_of_Date);
{
 //?USER: Initialize routine

 // PAR.Transaction Quantity = CON.*ZERO
 PAR.Transaction_Quantity = *ZERO;

 // PAR.Transaction Weight = CON.*ZERO
 PAR.Transaction_Weight = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.Transaction Date Code GT PAR.As of Date
 IF DB1.Transaction_Date_Code > PAR.As_of_Date;

 CASE;

 // IF DB1.Inventory Trans. Type is Change Qty/Weight/Amount
 IF DB1.Inventory_Trans_Type = 'AP'/'A'/'I'/'IO'/'R'/'RR'/'RP'/'RV'/'RW'/'S'/'T'/'TB'
 /'TW'/'OB'/'BO'/'SA'/'AW';

 // PAR.Transaction Quantity = PAR.Transaction Quantity + DB1.Transaction Quantity
 PAR.Transaction_Quantity = PAR.Transaction_Quantity + DB1.Transaction_Quantity;

 // PAR.Transaction Weight = PAR.Transaction Weight + DB1.Transaction Weight
 PAR.Transaction_Weight = PAR.Transaction_Weight + DB1.Transaction_Weight;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(RTV Unit Cost          RT) TYPE(RTVOBJ) FILE(PDKZCPP)          AC1415612;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(PAR.As_of_Date);
PARAMETER(999999);
PARAMETER(CUR.Unit_Cost_Per_Pound);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// CUR.Quantity Total 13.2   USR = CUR.Quantity Total 13.2   USR - PAR.Transaction
CUR.Quantity_Total_13_2_USR = CUR.Quantity_Total_13_2_USR - PAR.Transaction_Quantity;

// CUR.Weight Total 13.2     USR = CUR.Weight Total 13.2     USR - PAR.Transaction
CUR.Weight_Total_13_2_USR = CUR.Weight_Total_13_2_USR - PAR.Transaction_Weight;

// CUR.USR Amount for CR = CUR.Unit Cost Per Pound * CUR.Weight Total 13.2     USR
CUR.USR_Amount_for_CR = CUR.Unit_Cost_Per_Pound * CUR.Weight_Total_13_2_USR 'H';

EXECUTE FUNCTION(Rtv Base Values        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1125011;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Item_Description);
PARAMETER(PAR.Description_Line_Two);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(PAR.UOM_Pricing);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Production_Date_Control);
PARAMETER(PAR.Catch_Weight_Status);
PARAMETER(WRK.Fresh_Chilling_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Print Item Code totals format
PRINT Item Code totals format;

// NXT.USR Amount for CR = NXT.USR Amount for CR + CUR.USR Amount for CR
NXT.USR_Amount_for_CR = NXT.USR_Amount_for_CR + CUR.USR_Amount_for_CR;

// NXT.Quantity Total 13.2   USR = NXT.Quantity Total 13.2   USR + CUR.Quantity Tot
NXT.Quantity_Total_13_2_USR = NXT.Quantity_Total_13_2_USR + CUR.Quantity_Total_13_2_USR;

// NXT.Weight Total 13.2     USR = NXT.Weight Total 13.2     USR + CUR.Weight Total
NXT.Weight_Total_13_2_USR = NXT.Weight_Total_13_2_USR + CUR.Weight_Total_13_2_USR;

ENDIF;

CASE;

IF NEW Company_Number;
// Print Accounting Company Number totals format
PRINT Accounting Company Number totals format;

// NXT.USR Amount for CR = NXT.USR Amount for CR + CUR.USR Amount for CR
NXT.USR_Amount_for_CR = NXT.USR_Amount_for_CR + CUR.USR_Amount_for_CR;

// NXT.Quantity Total 13.2   USR = NXT.Quantity Total 13.2   USR + CUR.Quantity Tot
NXT.Quantity_Total_13_2_USR = NXT.Quantity_Total_13_2_USR + CUR.Quantity_Total_13_2_USR;

// NXT.Weight Total 13.2     USR = NXT.Weight Total 13.2     USR + CUR.Weight Total
NXT.Weight_Total_13_2_USR = NXT.Weight_Total_13_2_USR + CUR.Weight_Total_13_2_USR;

ENDIF;

