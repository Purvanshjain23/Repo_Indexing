// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMGAXFR
// ?Date: 14.08.2025 Time: 03:43:03
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Accum loads sequenced per zone for the sched ship date.
EXECUTE FUNCTION(RTV Clear Sched Seq   RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1817708;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Scheduled_Ship_Date);
{
 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?**************  Exclusions from Auto sequencing process *****************
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 //?************** Get Day of Week from Calendar  *******************
 EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(WRK.Accounting_Period_Code);
 PARAMETER(PAR.Day_of_Week);
 PARAMETER(WRK.Week_Number);
 {
  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: DB1);

 }

 //?****** Zero seq number if its one thats in the auto assign matrix
 EXECUTE FUNCTION(Val Load Seq Zones    RT) TYPE(RTVOBJ) FILE(PMAJREP)           AC1817709;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Day_of_Week);
 PARAMETER(DB1.Schedule_Sequence_Number);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

 }

 CASE;

 // IF PGM.*Return code is *Record already exists
 IF PGM.*Return_code = 'Y2U0003';

 EXECUTE FUNCTION(CHG Sched Seq Nbr      CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1514660;
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Load_Status);
 PARAMETER(*ZERO);
 PARAMETER(0);
 {
  //?USER: Processing after Data read

  CASE;

  // IF DB1.MG Created Load is Yes
  IF DB1.MG_Created_Load = 'Y';

  //?S14625 03/11/19 DN-Initialize.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Create TMS Load Trg USR = CND.No
  LCL.Create_TMS_Load_Trg_USR = 'N';

  // LCL.Load Change Type = LCL.Blank 6 USR
  LCL.Load_Change_Type = LCL.Blank_6_USR;

  // LCL.Load Change Type 2 = LCL.Blank 6 USR
  LCL.Load_Change_Type_2 = LCL.Blank_6_USR;

  ENDIF;

  //?If Sched seq changes: Write TMS Load trigger  E4119 6.30.16
  CASE;

  // IF PAR.Schedule Sequence Number NE DB1.Schedule Sequence Number
  IF PAR.Schedule_Sequence_Number <> DB1.Schedule_Sequence_Number;

  CASE;

  // IF PAR.Schedule Sequence Number NE DB1.Schedule Sequence Number
  IF PAR.Schedule_Sequence_Number <> DB1.Schedule_Sequence_Number;

  // LCL.Load Change Type = CND.Scheduled Sequence Number
  LCL.Load_Change_Type = 'SCHSEQ';

  //?S14625 03/11/19 DN-Set Flag to Create TMS Load Trigger.
  // LCL.Create TMS Load Trg USR = CND.Yes
  LCL.Create_TMS_Load_Trg_USR = 'Y';

  ENDIF;

  //?S14625 03/11/19 DN-Commented Out & Execute Below.
  ENDIF;

  //?S14625 03/11/19 DN-Crt TMS Load Trigger for Sched Seq and/or LPS Time Chg.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PAR.LPT Load Plan Start Tm NE DB1.LPT Load Plan Start Tm
  IF PAR.LPT_Load_Plan_Start_Tm <> DB1.LPT_Load_Plan_Start_Tm;

  // LCL.Create TMS Load Trg USR = CND.Yes
  LCL.Create_TMS_Load_Trg_USR = 'Y';

  //?Set for Both Sched Seq and/or LPS Time Change.
  CASE;

  // IF LCL.Load Change Type EQ LCL.Blank 6 USR
  IF LCL.Load_Change_Type = LCL.Blank_6_USR;

  // LCL.Load Change Type = CND.Load Plan Start Tm Change
  LCL.Load_Change_Type = 'LPTCHG';

  //?Set for Both Sched Seq and/or LPS Time Change.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Load Change Type 2 = CND.Load Plan Start Tm Change
  LCL.Load_Change_Type_2 = 'LPTCHG';

  ENDIF;

  ENDIF;

  //?Create TMS Load Trigger.
  CASE;

  // IF LCL.Create TMS Load Trg USR is Yes
  IF LCL.Create_TMS_Load_Trg_USR = 'Y';

  // Call program Exc Crt TMS Load Trg  XF.
  CALL PROGRAM(Exc Crt TMS Load Trg  XF) ('PBXOXFR');
  PARAMETER(JOB.*Job_date);
  PARAMETER(JOB.*Job_time);
  PARAMETER(DB1.Load_ID);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.TMS_LH_Field_Chg_Text);
  PARAMETER('A');
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Load_Change_Type);
  PARAMETER(LCL.Load_Change_Type_2);
  PARAMETER(LCL.Load_Change_Type_3);
  PARAMETER(LCL.Load_Change_Type_4);
  PARAMETER(LCL.Load_Change_Type_5);

  ENDIF;

  ENDIF;

  ENDIF;

  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 ENDIF;

}


//?Reseq loads for sched ship date per zone for the sched ship date.
EXECUTE FUNCTION(RTV Load to AutoSched RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1811706;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Scheduled_Ship_Date);
{
 //?USER: Initialize routine

 // Call program Rtv Company Ctl Vals  XF.
 CALL PROGRAM(Rtv Company Ctl Vals  XF) ('PNOQXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
 PARAMETER(LCL.Partial_Load_Max_Lbs_USR);

 //?USER: Process Data record

 //?**************  Exclusions from Auto sequencing process *****************
 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?Exclude: Loads shipped and invoiced
 CASE;

 // IF DB1.Load Status is Prior to Shipped
 IF DB1.Load_Status = 'C'/'E'/'L'/'U';

 //?Exclude: Loads shipped and invoiced
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?Exclude: Pre-sequenced 1-9
 CASE;

 // IF DB1.Schedule Sequence Number is Between 1 and 9
 IF DB1.Schedule_Sequence_Number >= 1;
 AND DB1.Schedule_Sequence_Number <= 09;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?Exclude: Pre-entered by Scheduling.
 CASE;

 // IF DB1.Schedule Sequence Number is GT Zero
 IF DB1.Schedule_Sequence_Number > *ZERO;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 //?************** Get Day of Week from Calendar  *******************
 EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(WRK.Accounting_Period_Code);
 PARAMETER(PAR.Day_of_Week);
 PARAMETER(WRK.Week_Number);
 {
  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: DB1);

 }

 //?**************  Determine if load is BOX or COMBO
 // LCL.LSSA Load Slot Type = WRK.BLANK 1               USR
 LCL.LSSA_Load_Slot_Type = WRK.BLANK_1_USR;

 // LCL.LSSA Partial Load Sts = CND.blank
 LCL.LSSA_Partial_Load_Sts = *BLANK;

 //?Priority - CB,EX,BX
 CASE;

 // IF DB1.Shipping Method is Not Rail
 IF DB1.Shipping_Method = 'CT'/'PT';

 // AND DB1.Load Type is Regular
 AND DB1.Load_Type = 'R';

 EXECUTE FUNCTION(RTV Warehouse Slot Typ RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1619241;
 PARAMETER(DB1.Ship_From_Warehouse);
 PARAMETER(LCL.Warehouse_Type);
 PARAMETER(LCL.WHS_Slotting_Limit_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV UM/Whs Code,BX Qty RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1625242;
 PARAMETER(*ZERO);
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.U_M_Ordered);
 PARAMETER(LCL.Boxes_Total_Quantity);
 {
  //?USER: Initialize routine

  //?05/13/04 SLM PKTR01 Multi-Company - Funt chg to rmv Co RST or Pos
  // PAR.USR Unit of Measure = CON.*BLANK
  PAR.USR_Unit_of_Measure = *BLANK;

  // WRK.First Time Flag = CND.Yes
  WRK.First_Time_Flag = 'Y';

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV UM/Whs Code,BX Qty RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1625244;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(1);
  PARAMETER(PAR.USR_Unit_of_Measure);
  PARAMETER(PAR.Boxes_Total_Quantity);
  {
   //?USER: Initialize routine

   // WRK.First Time Flag = CND.Yes
   WRK.First_Time_Flag = 'Y';

   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   QUIT;

   //?USER: Process Data record

   CASE;

   // IF DB1.Detail Line Status is Cancelled
   IF DB1.Detail_Line_Status = 'X';

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?S17054 DN 04/08/21-Beyond this point, changed all 'U/M - Ordered'
   //?  to reference LCL Context instead of DB1.
   //?S17054 DN 04/08/21-Count Type 'Cases' (CS) as 'Boxes' (BX).
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.U/M - Ordered = DB1.U/M - Ordered
   LCL.U_M_Ordered = DB1.U_M_Ordered;

   CASE;

   // IF LCL.U/M - Ordered is Cases
   IF LCL.U_M_Ordered = 'CS';

   // LCL.U/M - Ordered = CND.EQ Boxes
   LCL.U_M_Ordered = 'BX';

   ENDIF;

   ENDIF;

   //?Accumulate the Box Quantity for slotting consideration  6/12/01
   CASE;

   // IF LCL.U/M - Ordered is EQ Boxes
   IF LCL.U_M_Ordered = 'BX';

   // PAR.Boxes Total Quantity = PAR.Boxes Total Quantity + DB1.Quantity Ordered
   PAR.Boxes_Total_Quantity = PAR.Boxes_Total_Quantity + DB1.Quantity_Ordered;

   ENDIF;

   CASE;

   // IF PAR.USR Unit of Measure is *Blank
   IF PAR.USR_Unit_of_Measure = *BLANK;

   // PAR.USR Unit of Measure = LCL.U/M - Ordered
   PAR.USR_Unit_of_Measure = LCL.U_M_Ordered;

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF LCL.U/M - Ordered EQ PAR.USR Unit of Measure
   IF LCL.U_M_Ordered = PAR.USR_Unit_of_Measure;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.USR Unit of Measure = CND.Mixed
   PAR.USR_Unit_of_Measure = 'MX';

   ENDIF;

   ENDIF;

   ENDIF;

  }

  //?USER: Exit processing

  //?RMC E2709 added here so it wont need to be in every calling pgm
  CASE;

  // IF PAR.USR Unit of Measure is Mixed
  IF PAR.USR_Unit_of_Measure = 'MX';

  EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
  PARAMETER(DB1.Company_Number);
  PARAMETER('BOXLOAD');
  PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
  IF PAR.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

  // PAR.USR Unit of Measure = CND.Combos
  PAR.USR_Unit_of_Measure = 'CB';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.USR Unit of Measure = CND.Boxed
  PAR.USR_Unit_of_Measure = 'BX';

  ENDIF;

  ENDIF;

 }

 // LCL.LSSA Partial Load Sts = CND.blank
 LCL.LSSA_Partial_Load_Sts = *BLANK;

 //?Slot for Loads if Warehouse slot type is Load
 CASE;

 // IF LCL.WHS Slotting Limit Type is By Load
 IF LCL.WHS_Slotting_Limit_Type = 'L';

 //?RMC 09/24/07 still slot if a partial load - so zero this out to force it.
 // LCL.Partial Load Max Lbs USR = CON.*ZERO
 LCL.Partial_Load_Max_Lbs_USR = *ZERO;

 //?Slot the load if load wt gt partial load lbs (20000)
 CASE;

 // IF DB1.Total Load Order Weight GT LCL.Partial Load Max Lbs USR
 IF DB1.Total_Load_Order_Weight > LCL.Partial_Load_Max_Lbs_USR;

 CASE;

 // IF LCL.U/M - Ordered is Combos
 IF LCL.U_M_Ordered = 'CB';

 // LCL.LSSA Load Slot Type = CND.Combo
 LCL.LSSA_Load_Slot_Type = 'CB';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?default exports to BX
 CASE;

 // IF DB1.Export Status is yes
 IF DB1.Export_Status = 'Y';

 // LCL.LSSA Load Slot Type = CND.Box
 LCL.LSSA_Load_Slot_Type = 'BX';

 //?default exports to BX
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.LSSA Load Slot Type = CND.Box
 LCL.LSSA_Load_Slot_Type = 'BX';

 ENDIF;

 ENDIF;

 //?Slot the load if load wt gt partial load lbs (20000)
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.LSSA Partial Load Sts = CND.yes
 LCL.LSSA_Partial_Load_Sts = 'Y';

 ENDIF;

 ENDIF;

 //?Slot for Weights if Warehouse Slot Type is Weight
 CASE;

 // IF LCL.WHS Slotting Limit Type is By Weight
 IF LCL.WHS_Slotting_Limit_Type = 'W';

 CASE;

 // IF LCL.U/M - Ordered is Combos
 IF LCL.U_M_Ordered = 'CB';

 // LCL.LSSA Load Slot Type = CND.Combo
 LCL.LSSA_Load_Slot_Type = 'CB';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?default exports to BX
 CASE;

 // IF DB1.Export Status is yes
 IF DB1.Export_Status = 'Y';

 // LCL.LSSA Load Slot Type = CND.Box
 LCL.LSSA_Load_Slot_Type = 'BX';

 //?default exports to BX
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.LSSA Load Slot Type = CND.Box
 LCL.LSSA_Load_Slot_Type = 'BX';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?**************  Determine zone for load *****************
 CASE;

 // IF LCL.LSSA Load Slot Type is *ALL values
 IF LCL.LSSA_Load_Slot_Type = 'EX'/'CB'/'BX'/'MX';

 // LCL.LSZ Zone Sched Seq Nbr = CON.*ZERO
 LCL.LSZ_Zone_Sched_Seq_Nbr = *ZERO;

 //?See if buyers truck dft exists for the day
 CASE;

 // IF DB1.Shipping Method is Buyers Truck
 IF DB1.Shipping_Method = 'CR'/'CT';

 EXECUTE FUNCTION(Rtv Buyers Trk Dft    RT) TYPE(RTVOBJ) FILE(PMAJREP)           AC1811731;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Day_of_Week);
 PARAMETER(WRK.LSZ_Zone_Sched_Seq_Nbr);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.LSZ Dft for Buyers Truck is yes
  IF DB1.LSZ_Dft_for_Buyers_Truck = 'Y';

  // PAR.LSZ Zone Sched Seq Nbr = DB1.LSZ Zone Sched Seq Nbr
  PAR.LSZ_Zone_Sched_Seq_Nbr = DB1.LSZ_Zone_Sched_Seq_Nbr;

  QUIT;

  ENDIF;

 }

 CASE;

 // IF WRK.LSZ Zone Sched Seq Nbr is GT Zero
 IF WRK.LSZ_Zone_Sched_Seq_Nbr > *ZERO;

 // WRK.Status - Y or N = CND.yes
 WRK.Status_Y_or_N = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Status - Y or N = CND.no
 WRK.Status_Y_or_N = 'N';

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Rtv/Assng Seq&Count   RT) TYPE(RTVOBJ) FILE(PMAJREP)           AC1811773;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Day_of_Week);
 PARAMETER(LCL.LSZ_Zone_Sched_Seq_Nbr);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(LCL.Schedule_Sequence_Number);
 PARAMETER(LCL.LSSA_Load_Slot_Type);
 PARAMETER(WRK.Status_Y_or_N);
 {
  //?USER: Initialize routine

  //?Leave sched seq as 000 if all zones are full.
  // PAR.Schedule Sequence Number = CON.*ZERO
  PAR.Schedule_Sequence_Number = *ZERO;

  //?PAR.Status - Y or N is yes If a buyers truck default exists for
  //?the Day. Steve may not always have a default      10/02/07 RMC
  //?USER: Processing if Data record not found

  //?day of week doesnt exist -- skip ???
  //?USER: Process Data record

  //?If BOX
  CASE;

  // IF PAR.LSSA Load Slot Type is Box
  IF PAR.LSSA_Load_Slot_Type = 'BX';

  CASE;

  // IF DB1.LSZ Box Actual Loads LT DB1.LSZ Box Limit per Zone
  IF DB1.LSZ_Box_Actual_Loads < DB1.LSZ_Box_Limit_per_Zone;

  CASE;

  // IF PAR.Shipping Method is Buyers Truck
  IF PAR.Shipping_Method = 'CR'/'CT';

  // AND PAR.Status - Y or N is yes
  AND PAR.Status_Y_or_N = 'Y';

  //?Default for Buyer's truck
  CASE;

  // IF DB1.LSZ Dft for Buyers Truck is yes
  IF DB1.LSZ_Dft_for_Buyers_Truck = 'Y';

  // WRK.LSZ Box Actual Loads = DB1.LSZ Box Actual Loads + CON.1
  WRK.LSZ_Box_Actual_Loads = DB1.LSZ_Box_Actual_Loads + 1;

  EXECUTE FUNCTION(Chg Load Seq Zones    CH) TYPE(CHGOBJ) FILE(PMAJREP)           AC1811343;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.LSZ_Day_of_Week);
  PARAMETER(DB1.LSZ_Zone_Sched_Seq_Nbr);
  PARAMETER(DB1.LSZ_Box_Limit_per_Zone);
  PARAMETER(WRK.LSZ_Box_Actual_Loads);
  PARAMETER(DB1.LSZ_Combo_Load_Limit);
  PARAMETER(DB1.LSZ_Combo_Actual_Loads);
  PARAMETER(DB1.LSZ_Dft_for_Buyers_Truck);
  PARAMETER(DB1.LSZ_Unused_Limit);
  PARAMETER(DB1.LSZ_Unused_Actual_Loads);
  PARAMETER(DB1.LSZ_Unused_Sts);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

  // PAR.Schedule Sequence Number = DB1.LSZ Zone Sched Seq Nbr
  PAR.Schedule_Sequence_Number = DB1.LSZ_Zone_Sched_Seq_Nbr;

  QUIT;

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.LSZ Box Actual Loads = DB1.LSZ Box Actual Loads + CON.1
  WRK.LSZ_Box_Actual_Loads = DB1.LSZ_Box_Actual_Loads + 1;

  EXECUTE FUNCTION(Chg Load Seq Zones    CH) TYPE(CHGOBJ) FILE(PMAJREP)           AC1811343;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.LSZ_Day_of_Week);
  PARAMETER(DB1.LSZ_Zone_Sched_Seq_Nbr);
  PARAMETER(DB1.LSZ_Box_Limit_per_Zone);
  PARAMETER(WRK.LSZ_Box_Actual_Loads);
  PARAMETER(DB1.LSZ_Combo_Load_Limit);
  PARAMETER(DB1.LSZ_Combo_Actual_Loads);
  PARAMETER(DB1.LSZ_Dft_for_Buyers_Truck);
  PARAMETER(DB1.LSZ_Unused_Limit);
  PARAMETER(DB1.LSZ_Unused_Actual_Loads);
  PARAMETER(DB1.LSZ_Unused_Sts);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

  // PAR.Schedule Sequence Number = DB1.LSZ Zone Sched Seq Nbr
  PAR.Schedule_Sequence_Number = DB1.LSZ_Zone_Sched_Seq_Nbr;

  QUIT;

  ENDIF;

  ENDIF;

  ENDIF;

  //?If COMBO
  CASE;

  // IF PAR.LSSA Load Slot Type is Combo
  IF PAR.LSSA_Load_Slot_Type = 'CB';

  CASE;

  // IF DB1.LSZ Combo Actual Loads LT DB1.LSZ Combo Load Limit
  IF DB1.LSZ_Combo_Actual_Loads < DB1.LSZ_Combo_Load_Limit;

  CASE;

  // IF PAR.Shipping Method is Buyers Truck
  IF PAR.Shipping_Method = 'CR'/'CT';

  // AND PAR.Status - Y or N is yes
  AND PAR.Status_Y_or_N = 'Y';

  //?Default for Buyer's truck
  CASE;

  // IF DB1.LSZ Dft for Buyers Truck is yes
  IF DB1.LSZ_Dft_for_Buyers_Truck = 'Y';

  // WRK.LSZ Combo Actual Loads = DB1.LSZ Combo Actual Loads + CON.1
  WRK.LSZ_Combo_Actual_Loads = DB1.LSZ_Combo_Actual_Loads + 1;

  EXECUTE FUNCTION(Chg Load Seq Zones    CH) TYPE(CHGOBJ) FILE(PMAJREP)           AC1811343;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.LSZ_Day_of_Week);
  PARAMETER(DB1.LSZ_Zone_Sched_Seq_Nbr);
  PARAMETER(DB1.LSZ_Box_Limit_per_Zone);
  PARAMETER(DB1.LSZ_Box_Actual_Loads);
  PARAMETER(DB1.LSZ_Combo_Load_Limit);
  PARAMETER(WRK.LSZ_Combo_Actual_Loads);
  PARAMETER(DB1.LSZ_Dft_for_Buyers_Truck);
  PARAMETER(DB1.LSZ_Unused_Limit);
  PARAMETER(DB1.LSZ_Unused_Actual_Loads);
  PARAMETER(DB1.LSZ_Unused_Sts);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

  // PAR.Schedule Sequence Number = DB1.LSZ Zone Sched Seq Nbr
  PAR.Schedule_Sequence_Number = DB1.LSZ_Zone_Sched_Seq_Nbr;

  QUIT;

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.LSZ Combo Actual Loads = DB1.LSZ Combo Actual Loads + CON.1
  WRK.LSZ_Combo_Actual_Loads = DB1.LSZ_Combo_Actual_Loads + 1;

  EXECUTE FUNCTION(Chg Load Seq Zones    CH) TYPE(CHGOBJ) FILE(PMAJREP)           AC1811343;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.LSZ_Day_of_Week);
  PARAMETER(DB1.LSZ_Zone_Sched_Seq_Nbr);
  PARAMETER(DB1.LSZ_Box_Limit_per_Zone);
  PARAMETER(DB1.LSZ_Box_Actual_Loads);
  PARAMETER(DB1.LSZ_Combo_Load_Limit);
  PARAMETER(WRK.LSZ_Combo_Actual_Loads);
  PARAMETER(DB1.LSZ_Dft_for_Buyers_Truck);
  PARAMETER(DB1.LSZ_Unused_Limit);
  PARAMETER(DB1.LSZ_Unused_Actual_Loads);
  PARAMETER(DB1.LSZ_Unused_Sts);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

  // PAR.Schedule Sequence Number = DB1.LSZ Zone Sched Seq Nbr
  PAR.Schedule_Sequence_Number = DB1.LSZ_Zone_Sched_Seq_Nbr;

  QUIT;

  ENDIF;

  ENDIF;

  ENDIF;

 }

 // PAR.Load Status = DB1.Load Status
 PAR.Load_Status = DB1.Load_Status;

 //?Set load sts to unlock when a seq nbr is entered.
 CASE;

 // IF DB1.Load Status is Entered or Combined
 IF DB1.Load_Status = 'E'/'C';

 // AND LCL.Schedule Sequence Number NE WRK.ZERO
 AND LCL.Schedule_Sequence_Number <> WRK.ZERO;

 // PAR.Load Status = CND.Unlock
 PAR.Load_Status = 'U';

 ENDIF;

 EXECUTE FUNCTION(CHG Load Sched Seq Nm CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC1811732;
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.Load_Status);
 PARAMETER(LCL.Schedule_Sequence_Number);
 {
  //?USER: Processing after Data read

  CASE;

  // IF DB1.MG Created Load is Yes
  IF DB1.MG_Created_Load = 'Y';

  //?If Sched seq changes: Write TMS Load trigger  E4119 6.30.16
  CASE;

  // IF PAR.Schedule Sequence Number NE DB1.Schedule Sequence Number
  IF PAR.Schedule_Sequence_Number <> DB1.Schedule_Sequence_Number;

  CASE;

  // IF PAR.Schedule Sequence Number NE DB1.Schedule Sequence Number
  IF PAR.Schedule_Sequence_Number <> DB1.Schedule_Sequence_Number;

  // LCL.Load Change Type = CND.Scheduled Sequence Number
  LCL.Load_Change_Type = 'SCHSEQ';

  ENDIF;

  // Call program Exc Crt TMS Load Trg  XF.
  CALL PROGRAM(Exc Crt TMS Load Trg  XF) ('PBXOXFR');
  PARAMETER(JOB.*Job_date);
  PARAMETER(JOB.*Job_time);
  PARAMETER(DB1.Load_ID);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.TMS_LH_Field_Chg_Text);
  PARAMETER('A');
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Load_Change_Type);
  PARAMETER(LCL.Load_Change_Type_2);
  PARAMETER(LCL.Load_Change_Type_3);
  PARAMETER(LCL.Load_Change_Type_4);
  PARAMETER(LCL.Load_Change_Type_5);

  ENDIF;

  ENDIF;

  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 ENDIF;

}


