// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for OML1EFR
// ?Date: 14.08.2025 Time: 03:27:12
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?RMC DLY029 05/23/07 Db Changes
//?RMC DLY029 08/09/07 added accrual rate type "G" to all sales condition
//?E4057 JJH 05/06/15 - Price Credit Memo Fixes
//?- Recompiled because $/Quantity by qty shipped QR
//?  removed from Cases LST of Accrual Rate Type.
//?- Recompiled because $/Lb by Weight Billed WR
//?  removed from Pounds LST of Accrual Rate Type.
ENDDO;

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('A/R');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize subfile header

// CTL.Ship To Customer = PAR.Ship To Customer
CTL.Ship_To_Customer = PAR.Ship_To_Customer;

// CTL.Accrual Code = PAR.Accrual Code
CTL.Accrual_Code = PAR.Accrual_Code;

// CTL.Period Beginning Date = PAR.Period Beginning Date
CTL.Period_Beginning_Date = PAR.Period_Beginning_Date;

// CTL.Period Ending Date = PAR.Period Ending Date
CTL.Period_Ending_Date = PAR.Period_Ending_Date;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Accrual Desc,Type  RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1686089;
PARAMETER(CTL.Accrual_Code);
PARAMETER(CTL.Accrual_Description);
PARAMETER(CTL.Accrual_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.CAH Sequence No = PAR.CAH Sequence No
CTL.CAH_Sequence_No = PAR.CAH_Sequence_No;

//?USER: Initialize subfile record (existing record)

EXECUTE FUNCTION(Item Desc DRV) TYPE(DRVFLD)                                    AC1505592;
PARAMETER(RCD.Item_Desc_DRV);
PARAMETER(RCD.Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Desc_DRV);
 PARAMETER(WRK.Description_Line_Two);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?output RCD fields    3/29/04
CASE;

// IF CTL.Accrual Type is Commission
IF CTL.Accrual_Type = 'CM';

// OR PGM.*Program mode is *ADD
OR PGM.*Program_mode = 'ADD';

// LCL.Status - Y or N = CND.yes
LCL.Status_Y_or_N = 'Y';

ENDIF;

//?USER: Initialize subfile record (new record)

// RCD.Ship To Customer = CTL.Ship To Customer
RCD.Ship_To_Customer = CTL.Ship_To_Customer;

// RCD.Accrual Code = CTL.Accrual Code
RCD.Accrual_Code = CTL.Accrual_Code;

// RCD.CAH Sequence No = CTL.CAH Sequence No
RCD.CAH_Sequence_No = CTL.CAH_Sequence_No;

//?output RCD fields    3/29/04
CASE;

// IF CTL.Accrual Type is Commission
IF CTL.Accrual_Type = 'CM';

// OR PGM.*Program mode is *ADD
OR PGM.*Program_mode = 'ADD';

// LCL.Status - Y or N = CND.yes
LCL.Status_Y_or_N = 'Y';

ENDIF;

//?USER: Validate subfile control

//?Select Item
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Item Code USR
AND PGM.*Cursor_field = CTL.Item_Code_USR;

// Call program SEL Item Default       SR.
CALL PROGRAM(SEL Item Default       SR) ('OMZ8SRR');
PARAMETER(CTL.Item_Code);

ENDIF;

CASE;

// IF CTL.Item Code NE CTL.Item Code USR
IF CTL.Item_Code <> CTL.Item_Code_USR;

// CTL.Item Code = CTL.Item Code USR
CTL.Item_Code = CTL.Item_Code_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Validate subfile record fields

//?SEL: Item
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> RCD.Item Code
AND PGM.*Cursor_field = RCD.Item_Code;

// Call program SEL Item Default       SR.
CALL PROGRAM(SEL Item Default       SR) ('OMZ8SRR');
PARAMETER(RCD.Item_Code);

ENDIF;

//?VAL:  Accrual Rate
CASE;

// IF RCD.Accrual Rate Type is All Sales
IF RCD.Accrual_Rate_Type = 'W'/'S'/'Q'/'G'/'FA';

CASE;

// IF RCD.Accrual Rate is equal to zero
IF RCD.Accrual_Rate = *ZERO;

ENDIF;

ENDIF;

//?CALC: Subfile record function fields

EXECUTE FUNCTION(Item Desc DRV) TYPE(DRVFLD)                                    AC1505592;
PARAMETER(RCD.Item_Desc_DRV);
PARAMETER(RCD.Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Desc_DRV);
 PARAMETER(WRK.Description_Line_Two);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Validate subfile record relations

EXECUTE FUNCTION(Val Item Exists        RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1305841;
PARAMETER(RCD.Item_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Item is not found'
ERROR(USR0461);
MSGPARM(RCD.Item_Code);

ENDIF;

EXECUTE FUNCTION(Rtv Item Pricing UOM  RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC1825735;
PARAMETER(RCD.Item_Code);
PARAMETER(WRK.Description_Line_One);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(WRK.UOM_Pricing_Dft);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Set lcl.UOM per rate type - dly029 rmc 6/21/07
CASE;

// IF RCD.Accrual Rate Type is $/Lb
IF RCD.Accrual_Rate_Type = 'W';

// OR RCD.Accrual Rate Type is $/Lb by Weight Billed
OR RCD.Accrual_Rate_Type = 'WR';

// LCL.U/M - Pricing = CND.Pounds
LCL.UOM_Pricing = 'LB';

//?Set lcl.UOM per rate type - dly029 rmc 6/21/07
// IF RCD.Accrual Rate Type is $/Quantity
IF RCD.Accrual_Rate_Type = 'Q';

// OR RCD.Accrual Rate Type is $/Quantity by qty shipped
OR RCD.Accrual_Rate_Type = 'QR';

// LCL.U/M - Pricing = CND.Cases
LCL.UOM_Pricing = 'CS';

//?Set lcl.UOM per rate type - dly029 rmc 6/21/07
// IF RCD.Accrual Rate Type is % of Net Sales
IF RCD.Accrual_Rate_Type = 'S';

// OR RCD.Accrual Rate Type is % of NetSls by NetSls/Lb
OR RCD.Accrual_Rate_Type = 'SR';

// OR RCD.Accrual Rate Type is % of NetSls per Sls/Month
OR RCD.Accrual_Rate_Type = 'SS';

// OR RCD.Accrual Rate Type is % of Gross Extended Amt
OR RCD.Accrual_Rate_Type = 'G';

//?dont care for sales so make it the same as the item's
// LCL.U/M - Pricing = WRK.U/M - Pricing Dft
LCL.UOM_Pricing = WRK.UOM_Pricing_Dft;

ENDIF;

//?8/30/07 SAZ For Dailys pricing U/M is CWT, but the accrual will be based
//? on lbs. So this validation is commented out.
//?09/04/07 PKD DLY029 -- Validate the Accrual is the same type as
//?             Pricing Unit of Measure.
CASE;

// IF RCD.Accrual Rate Type is Pounds
IF RCD.Accrual_Rate_Type = 'W';

CASE;

// IF LCL.U/M - Pricing is Carcass Hundred Weight
IF LCL.UOM_Pricing = 'CW';

// OR LCL.U/M - Pricing is Pounds
OR LCL.UOM_Pricing = 'LB';

// OR LCL.U/M - Pricing is Thousand
OR LCL.UOM_Pricing = 'M';

// OR LCL.U/M - Pricing is Tons
OR LCL.UOM_Pricing = 'TN';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Pricing U/M must be equal to Rate type's U/M &1'
ERROR(USR3740);
MSGPARM(WRK.UOM_Pricing_Dft);
MSGPARM(LCL.UOM_Pricing);

ENDIF;

// IF RCD.Accrual Rate Type is Cases
IF RCD.Accrual_Rate_Type = 'Q';

CASE;

// IF LCL.U/M - Pricing is Carcass Hundred Weight
IF LCL.UOM_Pricing = 'CW';

// OR LCL.U/M - Pricing is Pounds
OR LCL.UOM_Pricing = 'LB';

// OR LCL.U/M - Pricing is Thousand
OR LCL.UOM_Pricing = 'M';

// OR LCL.U/M - Pricing is Tons
OR LCL.UOM_Pricing = 'TN';

// Send error message - 'Pricing U/M must be equal to Rate type's U/M &1'
ERROR(USR3740);
MSGPARM(WRK.UOM_Pricing_Dft);
MSGPARM(LCL.UOM_Pricing);

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(CRT OM Cust Accrual De CR) TYPE(CRTOBJ) FILE(OMHPREP)          AC1221729;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Accrual_Code);
PARAMETER(RCD.CAH_Sequence_No);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Accrual_Rate);
PARAMETER(RCD.Accrual_Rate_Type);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Delete DBF record

EXECUTE FUNCTION(DLT OM Cust Accrual De DL) TYPE(DLTOBJ) FILE(OMHPREP)          AC1221731;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Accrual_Code);
PARAMETER(RCD.CAH_Sequence_No);
PARAMETER(RCD.Item_Code);

//?USER: Change DBF record

EXECUTE FUNCTION(CHG OM Cust Accrual De CH) TYPE(CHGOBJ) FILE(OMHPREP)          AC1221730;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Accrual_Code);
PARAMETER(RCD.CAH_Sequence_No);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Accrual_Rate);
PARAMETER(RCD.Accrual_Rate_Type);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


