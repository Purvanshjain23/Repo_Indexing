// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKLYDTR
// ?Date: 14.08.2025 Time: 02:49:54
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?H16853 ISE 11/02/20 - Increased the Buy Order Number field length
//?                      from 5 to 7.
//?E00144 LFT Left on Truck and EUT/KOA - redesign screen
DO;

//?6/11/2008 slm
//?New fields from the buy order load and from the tattoo header
ENDDO;

EXECUTE FUNCTION(C2140 Trn TTo Dbl Inv) TYPE(EXCINTFUN)                         AB1188593;
{
 //?Execute internal function

 //?12/23/96   SLM     Transfer of one tattoo to another the
 //?                   tattoo detail was doubling up
 //?                   Establish proceudre of how this will be done
 //?                   for the scale people.
 //?                   The orginal tattoo scale ticket must be printed
 //?                   before this transfer can be completed.
 //?                   Do not allow transfer to be selected if
 //?                   any weightments have not been printed.
 //?                   Give user message and not select the transfer
 //?                   Also on the create of the scale weight record
 //?                   create a record but the active status flag stays
 //?                   as was on the orginal record
}


EXECUTE FUNCTION(C2156 DOA HELD OVERS) TYPE(EXCINTFUN)                          AB1188624;
{
 //?Execute internal function

 //?12/24/96   SLM     User was report of Doa after scale tickets
 //?                   were done.  The tattoo was sent to kill and they
 //?                   missed reporting doas.  So if the user had the
 //?                   scaling pgm up for this tattoo before the sent
 //?                   was completed then when the scaleing exits the
 //?                   scale ticket file is recounted which puts the
 //?                   held overs back on the org day.  Tattoo scale
 //?                   tickets are not moved for held overs.
 //?                   Validate if there is one tattoo detail for this
 //?                   tattoo that has been driven then do not allow
 //?                   user to change the tattoo scale file.
 //?                   Also if error go to display pgm
 //?                   Only if no error, and all open tattoo detail
 //?                   will the edits be allowed.
}


EXECUTE FUNCTION(HPE076) TYPE(EXCINTFUN)                                        AB1188851;
{
 //?Execute internal function

 //?C1108 -- Duplicate Tattoo Problem
 //?  PKLYDTR -- WW Tattoo
 //?  PKL0E1R -- Edt TTt Hdr
 //?  PKO6PVR-- Edt Ttt Hdr (PV)
}


// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


// Call program Rtv User Code Model   XF.
CALL PROGRAM(Rtv User Code Model   XF) ('POYBXFR');
PARAMETER(JOB.*USER);
PARAMETER(LCL.User_Code_Model_USR);

//?E2423 Mtech Live or Not Live *** Interfaces to HPS ***
//?Get the MTech Live Yes or No
DO;

//?Mtech Live Yes or no
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('MTECHLIVE');
PARAMETER(WRK.System_Value_Alpha_USR);

// LCL.MTech Live Yes or No = WRK.System Value Alpha    USR
LCL.MTech_Live_Yes_or_No = WRK.System_Value_Alpha_USR;

ENDDO;

//?USER: Validate header fields

CASE;

// IF WRK.First Time Flag Usr EQ WRK.Blank USR
IF WRK.First_Time_Flag_Usr = WRK.Blank_USR;

// CTL.BOH Company Number = PAR.BOH Company Number
CTL.BOH_Company_Number = PAR.BOH_Company_Number;

// WRK.Display Print Prompt  Usr = CND.Prompt is to be displayed
WRK.Display_Print_Prompt_Usr = 'Y';

// WRK.First Time Flag Usr = CND.Yes
WRK.First_Time_Flag_Usr = 'Y';

// CTL.RS Record Status = CND.Active
CTL.RS_Record_Status = 'A';

ENDIF;

EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PD_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
PARAMETER(CTL.PL_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize subfile record

// RCD.No Scale Record Prted Us = CND.Yes
RCD.No_Scale_Record_Prted_Us = 'Y';

// RCD.Group Reference Code  USR = RCD.TH Tattoo Reference
RCD.Group_Reference_Code_USR = RCD.TH_Group_Reference;

CASE;

// IF RCD.TH Source Type is Internal
IF RCD.TH_Source_Type = 'I';

// AND LCL.MTech Live Yes or No is No MTech not Live
AND LCL.MTech_Live_Yes_or_No = 'N';

//?* 01/27/03 PKD PK0495 Replaced HP255 with HP249.
// Call program Z1v HPS Farm Info     UP.
CALL PROGRAM(Z1v HPS Farm Info     UP) ('HP249');
PARAMETER(WRK.*Return_code);
PARAMETER(RCD.TH_HPS_Movement_Ref_#);
PARAMETER(WRK.Farm_site_Name_f_HPS_USR);
PARAMETER(WRK.Farm_Site_USR);
PARAMETER(RCD.HPS_FS_Comp_Relation_USR);
PARAMETER(WRK.State);

// IF RCD.TH Source Type is Internal
IF RCD.TH_Source_Type = 'I';

// AND LCL.MTech Live Yes or No is Yes MTech is Live
AND LCL.MTech_Live_Yes_or_No = 'Y';

//?NOT needed
// RCD.HPS FS Comp Relation USR = CON.*BLANK
RCD.HPS_FS_Comp_Relation_USR = *BLANK;

ENDIF;

// WRK.@Record Found = CND.Record Not Found
WRK.@Record_Found = 'N';

// WRK.Found Act Scl Rec Sts Usr = CND.Blank
WRK.Found_Act_Scl_Rec_Sts_Usr = *BLANK;

EXECUTE FUNCTION(Rtv Scl Tkt Val Edt   RT) TYPE(RTVOBJ) FILE(PKB3CPP)           AB1157790;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(WRK.@Record_Found);
PARAMETER(WRK.Found_Act_Scl_Rec_Sts_Usr);
{
 //?USER: Processing if Data record not found

 // PAR.@Record Found = CND.Record Not Found
 PAR.@Record_Found = 'N';

 //?USER: Process Data record

 // PAR.@Record Found = CND.Record Found
 PAR.@Record_Found = 'Y';

 CASE;

 // IF DB1.RS Record Status is Active
 IF DB1.RS_Record_Status = 'A';

 // PAR.Found Act Scl Rec Sts Usr = CND.Yes
 PAR.Found_Act_Scl_Rec_Sts_Usr = 'Y';

 ENDIF;

}


//?Validate to allow if any tattoo scale records need to be printed
CASE;

// IF WRK.@Record Found is Record Not Found
IF WRK.@Record_Found = 'N';

//?Validate to allow if any tattoo scale records need to be printed
// IF WRK.Found Act Scl Rec Sts Usr is Yes
IF WRK.Found_Act_Scl_Rec_Sts_Usr = 'Y';

// Send error message - 'One Scale Wgtmnt has not been printed.. F16 on WW Scale Weight for this tat
ERROR(PRK0650);
MSGPARM(RCD.TH_Tattoo_Number);

// RCD.No Scale Record Prted Us = CND.No
RCD.No_Scale_Record_Prted_Us = 'N';

ENDIF;

EXECUTE FUNCTION(Rtv Employee Id       RT) TYPE(RTVOBJ) FILE(PKFJCPP)           AB1255709;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.Employee_ID);
PARAMETER(RCD.Employee_Number_2_Employe);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Save to use if ADD is selected
CASE;

// IF LCL.TH Group Reference EQ WRK.Blank Usr 1 fld Usr
IF LCL.TH_Group_Reference = WRK.Blank_Usr_1_fld_Usr;

// LCL.TH HPS Movement Ref # = RCD.TH HPS Movement Ref #
LCL.TH_HPS_Movement_Ref_# = RCD.TH_HPS_Movement_Ref_#;

// LCL.TH Group Reference = RCD.TH Group Reference
LCL.TH_Group_Reference = RCD.TH_Group_Reference;

// LCL.GN Genetic Code = RCD.GN Genetic Code
LCL.GN_Genetic_Code = RCD.GN_Genetic_Code;

ENDIF;

// RCD.LFT usr = RCD.TH Head LFT
RCD.LFT_usr = RCD.TH_Head_LFT;

// RCD.EUT/KOA Hogs usr = RCD.TH Head EUT/KOA
RCD.EUT_KOA_Hogs_usr = RCD.TH_Head_EUT_KOA;

//?USER: Validate subfile record relations

//?3=Transfer
CASE;

// IF RCD.*SFLSEL is *Option 3 (Reusable)
IF RCD.*SFLSEL = '3';

//?Transfer
CASE;

// IF RCD.THP Process Code is Payment
IF RCD.THP_Process_Code = 'PAYMNT';

// Send error message - 'Tattoo Is either in payment process or paid. This option is not allowed'
ERROR(PRK0724);

QUIT;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.@Record Found = CND.Record Not Found
WRK.@Record_Found = 'N';

// WRK.Found Act Scl Rec Sts Usr = CND.Blank
WRK.Found_Act_Scl_Rec_Sts_Usr = *BLANK;

EXECUTE FUNCTION(Rtv Scl Tkt Val Edt   RT) TYPE(RTVOBJ) FILE(PKB3CPP)           AB1157790;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(WRK.@Record_Found);
PARAMETER(WRK.Found_Act_Scl_Rec_Sts_Usr);
{
 //?USER: Processing if Data record not found

 // PAR.@Record Found = CND.Record Not Found
 PAR.@Record_Found = 'N';

 //?USER: Process Data record

 // PAR.@Record Found = CND.Record Found
 PAR.@Record_Found = 'Y';

 CASE;

 // IF DB1.RS Record Status is Active
 IF DB1.RS_Record_Status = 'A';

 // PAR.Found Act Scl Rec Sts Usr = CND.Yes
 PAR.Found_Act_Scl_Rec_Sts_Usr = 'Y';

 ENDIF;

}


//?Vld if user can use the trnsfr pgm. Scale tckts must be prtd
CASE;

// IF WRK.Found Act Scl Rec Sts Usr is Yes
IF WRK.Found_Act_Scl_Rec_Sts_Usr = 'Y';

// Send error message - 'One Scale Wgtmnt has not been printed.. F16 on WW Scale Weight for this tat
ERROR(PRK0650);
MSGPARM(RCD.TH_Tattoo_Number);

QUIT;

ENDIF;

ENDIF;

ENDIF;

//?New - RMC 1/18/05  jance/mel cannot create/delete tattoos (porkproc4)
CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

// OR RCD.*SFLSEL is *Option 10 (Reusable)
OR RCD.*SFLSEL = '10';

// OR RCD.*SFLSEL is *Option 11 (Reusable)
OR RCD.*SFLSEL = '11';

CASE;

// IF LCL.User Code Model USR is Procurement 4
IF LCL.User_Code_Model_USR = 'PORKPROC4';

// Send error message - 'Option not allowed for user &1'
ERROR(PRK1126);
MSGPARM(JOB.*USER);

QUIT;

ENDIF;

ENDIF;

//?Options
CASE;

// IF RCD.*SFLSEL is *Revise request
IF RCD.*SFLSEL = '2'/'2';

// WRK.Record Added Usr = CND.No
WRK.Record_Added_Usr = 'N';

EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PD_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
PARAMETER(CTL.PL_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Edt Tattoo Hdr/Defect  ER.
CALL PROGRAM(Edt Tattoo Hdr/Defect  ER) ('PKKIE1R');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TH_Group_Reference);
PARAMETER(RCD.TH_Sex);
PARAMETER(RCD.TH_HPS_Movement_Ref_#);
PARAMETER(RCD.TH_Hog_Class_Type);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(RCD.GN_Genetic_Code);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(CTL.Name_USR);
PARAMETER(CTL.BOL_Pln_Delv_Date);
PARAMETER(WRK.Record_Added_Usr);
PARAMETER(CTL.PD_Name);
PARAMETER(CTL.PL_Name);
PARAMETER(WRK.User_modified_0_not_modi);
PARAMETER(WRK.Company_Value_Code_USR);
PARAMETER('N');

//?Options
// IF RCD.*SFLSEL is *Option 3 request
IF RCD.*SFLSEL = '3'/'3';

//?Transfer
// Call program Pmt Transfer Tattoo   PV.
CALL PROGRAM(Pmt Transfer Tattoo   PV) ('PKVDPVR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TH_Source_Type);
PARAMETER(RCD.TH_Hog_Class_Type);

//?Options
// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

EXECUTE FUNCTION(Rtv Ttt Get Wt f/TH   RT) TYPE(RTVOBJ) FILE(PKCNCPP)           AB1168430;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.@Record Found = CND.Record Not Found
 PAR.@Record_Found = 'N';

 //?USER: Process Data record

 // PAR.@Record Found = CND.Record Found
 PAR.@Record_Found = 'Y';

}


//?Error: Get Weight in process
CASE;

// IF WRK.Record Found USR is Record Found
IF WRK.Record_Found_USR = 'Y';

// Send error message - 'Delete not allowed because Get Weight is in process.'
ERROR(PRK0592);

QUIT;

ENDIF;

//?Check head counts
CASE;

// IF RCD.TH Head Killed is Not Zero
IF RCD.TH_Head_Killed <> *ZERO;

// Send error message - 'Delete not allowed because hogs have been killed.'
ERROR(PRK0590);

QUIT;

ENDIF;

//?Check payment sts
CASE;

// IF RCD.TH Payment Sts is Paid Producer
IF RCD.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

// Send error message - 'Delete is not allowed because tattoo has been paid.'
ERROR(PRK0614);

QUIT;

ENDIF;

//?Held overs (original and new) are ineligible for deletion.
CASE;

// IF RCD.TH Held Over is greater than 0
IF RCD.TH_Held_Over > *ZERO;

// OR RCD.TH Held Over Record is Yes
OR RCD.TH_Held_Over_Record = 'Y';

// Send error message - 'Held overs are ineligible for deletion.'
ERROR(PRK0615);

QUIT;

ENDIF;

// Call program Dlt Tattoo - all files XF.
CALL PROGRAM(Dlt Tattoo - all files XF) ('PKZSXFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TH_Purchase_Date);
PARAMETER(RCD.TH_Group_Reference);
PARAMETER(RCD.TH_Live_Purchase_UOM);
PARAMETER(RCD.TH_Live_Purchase_Price);
PARAMETER(RCD.TH_Dead_On_Arrival);
PARAMETER(RCD.TH_Head_Received);
PARAMETER(RCD.TH_Live_Wgt);
PARAMETER(RCD.TH_Sex);
PARAMETER(RCD.TH_Source_Type);
PARAMETER(RCD.TH_Scale_Ticket_Sts);
PARAMETER(RCD.TH_Payment_Type);
PARAMETER(RCD.TH_HPS_Movement_Ref_#);
PARAMETER(RCD.TH_Source_Code);
PARAMETER(RCD.TH_Hog_Class_Type);
PARAMETER(RCD.DF_Defect_Code);
PARAMETER(RCD.THP_Process_Code);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(RCD.HB_Buyer_Code);
PARAMETER(RCD.GN_Genetic_Code);
PARAMETER(RCD.HC_Class_Code);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
PARAMETER(PAR.Oms_System_Value_Alpha);

//?Options
// IF RCD.*SFLSEL is *Option 7 request
IF RCD.*SFLSEL = '7'/'7';

//?Tattoo comments
// Call program Edt Tattoo Comment    EF.
CALL PROGRAM(Edt Tattoo Comment    EF) ('PKIVEFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER('U');
PARAMETER(PAR.Oms_System_Value_Alpha);

//?Options
// IF RCD.*SFLSEL is *Option 8 request
IF RCD.*SFLSEL = '8'/'8';

//?***  WW with Scale ticket ***
//?***  IF Scale ticket not allowed to be changed then
//?***      the Display Scale ticket will be displayed
//?***        Then the old live scale pgm will be used
//?***        else the new live scale programs will be used
//?Normal Entry of Tattoo Scale Tickets
// WRK.@Record Found = CND.Record Not Found
WRK.@Record_Found = 'N';

// WRK.Allw Edit or Dsply Usr = CND.Dispaly
WRK.Allw_Edit_or_Dsply_Usr = 'D';

//?Validate allow user to use edit scale program
CASE;

// IF CTL.BOL Trucker Payment Sts is Paid Trucker
IF CTL.BOL_Trucker_Payment_Sts = 'PT';

// OR RCD.TH Payment Sts is Paid Producer
OR RCD.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

// OR RCD.THP Process Code is Payment
OR RCD.THP_Process_Code = 'PAYMNT';

// OR RCD.THP Process Code is Slaughter
OR RCD.THP_Process_Code = 'SLG';

//?Validate allow user to use edit scale program
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.TH Held Over is greater than 0
IF RCD.TH_Held_Over > *ZERO;

// OR RCD.TH Held Over Record is Yes
OR RCD.TH_Held_Over_Record = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

//?HPE107 -- dont allow for Internal Resale Spread hogs
CASE;

// IF RCD.TH Source Type is Internal
IF RCD.TH_Source_Type = 'I';

// AND RCD.TH Hog Class Type is Resale
AND RCD.TH_Hog_Class_Type = 'R';

// AND RCD.TH Resale Spread Sts is Spread
AND ( RCD.TH_Resale_Spread_Sts = 'P';

// OR RCD.TH Resale Spread Sts is Select for Spread
OR RCD.TH_Resale_Spread_Sts = 'S';

// OR RCD.TH Resale Spread Sts is Mark for Future Sprd Wgt
OR RCD.TH_Resale_Spread_Sts = 'M' );

//?HPE107 -- dont allow for Internal Resale Spread hogs
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Ttt Dtl/chk Cl/Snt) TYPE(RTVOBJ) FILE(PKA2CPP)             AB1188707;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.TDP Process Code is Open
 IF DB1.TDP_Process_Code = 'O';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 ENDIF;

}


CASE;

// IF WRK.Record Found USR is Record Found
IF WRK.Record_Found_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Allw Edit or Dsply Usr = CND.Edit
WRK.Allw_Edit_or_Dsply_Usr = 'E';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Allow the user to edit or the display pgm
CASE;

// IF WRK.Allw Edit or Dsply Usr is Edit
IF WRK.Allw_Edit_or_Dsply_Usr = 'E';

// Call program WW Tattoo Scale tkt NW DF.
CALL PROGRAM(WW Tattoo Scale tkt NW DF) ('PKINDFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(RCD.TH_Avg_Live_Wgt);
PARAMETER(RCD.TH_Source_Type);
PARAMETER(RCD.TH_Scale_Ticket_Sts);
PARAMETER(RCD.TH_Hog_Class_Type);
PARAMETER(RCD.DF_Defect_Code);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(RCD.HC_Class_Code);

//?Allow the user to edit or the display pgm
// IF WRK.Allw Edit or Dsply Usr is Dispaly
IF WRK.Allw_Edit_or_Dsply_Usr = 'D';

// Call program Dsp Th/Ttt Scale Tkt  DT.
CALL PROGRAM(Dsp Th/Ttt Scale Tkt  DT) ('PKGLDTR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.DF_Defect_Code);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(RCD.HC_Class_Code);
PARAMETER(CTL.Oms_Warehouse_Code);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(CTL.Oms_Application_Code);
PARAMETER(CTL.Oms_SalesPerson_Code);
PARAMETER(CTL.Oms_Allow_Multi_Company);
PARAMETER(CTL.Oms_Default_Printer);
PARAMETER(CTL.Oms_Name);
PARAMETER(CTL.Oms_System_Value_Alpha);
PARAMETER(CTL.Oms_Access_Denied_Y_N);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Options
// IF RCD.*SFLSEL is *option 9 request
IF RCD.*SFLSEL = '9'/'9';

//?Reprint and change the Tattoo Scale Ticket on Head count
// WRK.@Record Found = CND.Record Not Found
WRK.@Record_Found = 'N';

// WRK.Allw Edit or Dsply Usr = CND.Dispaly
WRK.Allw_Edit_or_Dsply_Usr = 'D';

// WRK.Found Act Scl Rec Sts Usr = CND.Blank
WRK.Found_Act_Scl_Rec_Sts_Usr = *BLANK;

EXECUTE FUNCTION(Rtv Scl Tkt Val Edt   RT) TYPE(RTVOBJ) FILE(PKB3CPP)           AB1157790;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(WRK.@Record_Found);
PARAMETER(WRK.Found_Act_Scl_Rec_Sts_Usr);
{
 //?USER: Processing if Data record not found

 // PAR.@Record Found = CND.Record Not Found
 PAR.@Record_Found = 'N';

 //?USER: Process Data record

 // PAR.@Record Found = CND.Record Found
 PAR.@Record_Found = 'Y';

 CASE;

 // IF DB1.RS Record Status is Active
 IF DB1.RS_Record_Status = 'A';

 // PAR.Found Act Scl Rec Sts Usr = CND.Yes
 PAR.Found_Act_Scl_Rec_Sts_Usr = 'Y';

 ENDIF;

}


//?Validate to allow if user can use the edit scale program
CASE;

// IF WRK.@Record Found is Record Not Found
IF WRK.@Record_Found = 'N';

//?Validate to allow if user can use the edit scale program
// IF WRK.Found Act Scl Rec Sts Usr is Yes
IF WRK.Found_Act_Scl_Rec_Sts_Usr = 'Y';

// Send error message - 'Scale Ticket Not Printed for &1. Use Option 8 to print it.'
ERROR(PRK0912);
MSGPARM(RCD.TH_Tattoo_Number);

QUIT;

//?Validate to allow if user can use the edit scale program
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.BOL Trucker Payment Sts is Paid Trucker
IF CTL.BOL_Trucker_Payment_Sts = 'PT';

// OR RCD.TH Payment Sts is Paid Producer
OR RCD.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

// OR RCD.THP Process Code is Payment
OR RCD.THP_Process_Code = 'PAYMNT';

// OR RCD.THP Process Code is Slaughter
OR RCD.THP_Process_Code = 'SLG';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.TH Held Over is greater than 0
IF RCD.TH_Held_Over > *ZERO;

// OR RCD.TH Held Over Record is Yes
OR RCD.TH_Held_Over_Record = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Ttt Dtl/chk Cl/Snt) TYPE(RTVOBJ) FILE(PKA2CPP)             AB1188707;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.TDP Process Code is Open
 IF DB1.TDP_Process_Code = 'O';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 ENDIF;

}


CASE;

// IF WRK.Record Found USR is Record Found
IF WRK.Record_Found_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Allw Edit or Dsply Usr = CND.Edit
WRK.Allw_Edit_or_Dsply_Usr = 'E';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Allow user to use the Edit or to use the display
CASE;

// IF WRK.Allw Edit or Dsply Usr is Edit
IF WRK.Allw_Edit_or_Dsply_Usr = 'E';

// Call program Edt Th/Ttt Scale Tkt  ET.
CALL PROGRAM(Edt Th/Ttt Scale Tkt  ET) ('PKVGETR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.DF_Defect_Code);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(RCD.HC_Class_Code);
PARAMETER(PAR.Oms_System_Value_Alpha);

//?Allow user to use the Edit or to use the display
// IF WRK.Allw Edit or Dsply Usr is Dispaly
IF WRK.Allw_Edit_or_Dsply_Usr = 'D';

// Call program Dsp Th/Ttt Scale Tkt  DT.
CALL PROGRAM(Dsp Th/Ttt Scale Tkt  DT) ('PKGLDTR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.DF_Defect_Code);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(RCD.HC_Class_Code);
PARAMETER(CTL.Oms_Warehouse_Code);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(CTL.Oms_Application_Code);
PARAMETER(CTL.Oms_SalesPerson_Code);
PARAMETER(CTL.Oms_Allow_Multi_Company);
PARAMETER(CTL.Oms_Default_Printer);
PARAMETER(CTL.Oms_Name);
PARAMETER(CTL.Oms_System_Value_Alpha);
PARAMETER(CTL.Oms_Access_Denied_Y_N);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Options
// IF RCD.*SFLSEL is *Option 10 (Reusable)
IF RCD.*SFLSEL = '10';

//?PK0313 -- SBD Top Tattoo   10/16/01    (Was Subject)
EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PD_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
PARAMETER(CTL.PL_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Edt Ttt Hdr (create)  PV.
CALL PROGRAM(Edt Ttt Hdr (create)  PV) ('PKO6PVR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(*ZERO);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TH_Group_Reference);
PARAMETER(RCD.TH_Sex);
PARAMETER(RCD.TH_HPS_Movement_Ref_#);
PARAMETER('M');
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
PARAMETER(RCD.GN_Genetic_Code);
PARAMETER(CTL.Oms_System_Value_Alpha);
PARAMETER(CTL.Name_USR);
PARAMETER(CTL.BOL_Kill_Date);
PARAMETER(CTL.PD_Name);
PARAMETER(CTL.PL_Name);
PARAMETER('Y');

// CTL.BOL Head Received = CTL.Head Total SUM
CTL.BOL_Head_Received = CTL.Head_Total_SUM;

// CTL.BOL Live Wgt Received = CTL.Weight SUM
CTL.BOL_Live_Wgt_Received = CTL.Weight_SUM;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Options
// IF RCD.*SFLSEL is *Option 11 (Reusable)
IF RCD.*SFLSEL = '11';

EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PD_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
PARAMETER(CTL.PL_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Edt Ttt Hdr (create)  PV.
CALL PROGRAM(Edt Ttt Hdr (create)  PV) ('PKO6PVR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(*ZERO);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TH_Group_Reference);
PARAMETER(RCD.TH_Sex);
PARAMETER(RCD.TH_HPS_Movement_Ref_#);
PARAMETER('R');
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
PARAMETER(RCD.GN_Genetic_Code);
PARAMETER(CTL.Oms_System_Value_Alpha);
PARAMETER(CTL.Name_USR);
PARAMETER(CTL.BOL_Kill_Date);
PARAMETER(CTL.PD_Name);
PARAMETER(CTL.PL_Name);
PARAMETER('N');

// CTL.BOL Head Received = CTL.Head Total SUM
CTL.BOL_Head_Received = CTL.Head_Total_SUM;

// CTL.BOL Live Wgt Received = CTL.Weight SUM
CTL.BOL_Live_Wgt_Received = CTL.Weight_SUM;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Options
// IF RCD.*SFLSEL is *Option 12 (Reusable)
IF RCD.*SFLSEL = '12';

// Call program Dsp Tattoo Defect     DF.
CALL PROGRAM(Dsp Tattoo Defect     DF) ('PKJ6DFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?CALC: Subfile record function fields

CTL.Head_Total_SUM = SUM(RCD.TH_Head_Received);

CTL.Weight_SUM = SUM(RCD.TH_Live_Wgt);

//?USER: Process command keys

//?New - RMC 1/18/05 dont allow create for jancie/mel (porkproc4)
CASE;

// IF CTL.*CMD key is *Create
IF CTL.*CMD_key = '06';

// OR CTL.*CMD key is CF08
OR CTL.*CMD_key = '08';

// OR CTL.*CMD key is CF09
OR CTL.*CMD_key = '09';

CASE;

// IF LCL.User Code Model USR is Procurement 4
IF LCL.User_Code_Model_USR = 'PORKPROC4';

// Send error message - 'Option not allowed for user &1'
ERROR(PRK1126);
MSGPARM(JOB.*USER);

QUIT;

ENDIF;

ENDIF;

CASE;

// IF CTL.*CMD key is Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF CTL.*CMD key is Create
IF CTL.*CMD_key = '06';

EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PD_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
PARAMETER(CTL.PL_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF CTL.PD Producer Code is SEABOA
IF CTL.PD_Producer_Code = 'SEABOA';

// LCL.GN Genetic Code = CND.PIC
LCL.GN_Genetic_Code = 'PIC';

ENDIF;

// Call program Edt Ttt Hdr (create)  PV.
CALL PROGRAM(Edt Ttt Hdr (create)  PV) ('PKO6PVR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(*ZERO);
PARAMETER(CTL.BOL_Kill_Date);
PARAMETER(LCL.TH_Group_Reference);
PARAMETER('X');
PARAMETER(LCL.TH_HPS_Movement_Ref_#);
PARAMETER('M');
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
PARAMETER(LCL.GN_Genetic_Code);
PARAMETER(CTL.Oms_System_Value_Alpha);
PARAMETER(CTL.Name_USR);
PARAMETER(CTL.BOL_Kill_Date);
PARAMETER(CTL.PD_Name);
PARAMETER(CTL.PL_Name);
PARAMETER('N');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF CTL.*CMD key is CF08
IF CTL.*CMD_key = '08';

EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PD_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
PARAMETER(CTL.PL_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF CTL.PD Producer Code is SEABOA
IF CTL.PD_Producer_Code = 'SEABOA';

// LCL.GN Genetic Code = CND.PIC
LCL.GN_Genetic_Code = 'PIC';

ENDIF;

// Call program Edt Ttt Hdr (create)  PV.
CALL PROGRAM(Edt Ttt Hdr (create)  PV) ('PKO6PVR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(*ZERO);
PARAMETER(CTL.BOL_Kill_Date);
PARAMETER(LCL.TH_Group_Reference);
PARAMETER('X');
PARAMETER(LCL.TH_HPS_Movement_Ref_#);
PARAMETER('M');
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
PARAMETER(LCL.GN_Genetic_Code);
PARAMETER(CTL.Oms_System_Value_Alpha);
PARAMETER(CTL.Name_USR);
PARAMETER(CTL.BOL_Kill_Date);
PARAMETER(CTL.PD_Name);
PARAMETER(CTL.PL_Name);
PARAMETER('Y');

// CTL.BOL Head Received = CTL.Head Total SUM
CTL.BOL_Head_Received = CTL.Head_Total_SUM;

// CTL.BOL Live Wgt Received = CTL.Weight SUM
CTL.BOL_Live_Wgt_Received = CTL.Weight_SUM;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF CTL.*CMD key is CF09
IF CTL.*CMD_key = '09';

EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PD_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
PARAMETER(CTL.PL_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF CTL.PD Producer Code is SEABOA
IF CTL.PD_Producer_Code = 'SEABOA';

// LCL.GN Genetic Code = CND.PIC
LCL.GN_Genetic_Code = 'PIC';

ENDIF;

// Call program Edt Ttt Hdr (create)  PV.
CALL PROGRAM(Edt Ttt Hdr (create)  PV) ('PKO6PVR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(*ZERO);
PARAMETER(CTL.BOL_Kill_Date);
PARAMETER(LCL.TH_Group_Reference);
PARAMETER('X');
PARAMETER(LCL.TH_HPS_Movement_Ref_#);
PARAMETER('R');
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
PARAMETER(LCL.GN_Genetic_Code);
PARAMETER(CTL.Oms_System_Value_Alpha);
PARAMETER(CTL.Name_USR);
PARAMETER(CTL.BOL_Kill_Date);
PARAMETER(CTL.PD_Name);
PARAMETER(CTL.PL_Name);
PARAMETER('N');

// CTL.BOL Head Received = CTL.Head Total SUM
CTL.BOL_Head_Received = CTL.Head_Total_SUM;

// CTL.BOL Live Wgt Received = CTL.Weight SUM
CTL.BOL_Live_Wgt_Received = CTL.Weight_SUM;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF CTL.*CMD key is CF14
IF CTL.*CMD_key = '14';

// Call program Edt Buy Order Load    E1.
CALL PROGRAM(Edt Buy Order Load    E1) ('PKLZE1R');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(CTL.Name_USR);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

// PGM.*Continue transaction = CND.*NO
PGM.*Continue_transaction = 'N';

QUIT;

