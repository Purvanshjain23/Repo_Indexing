      *****************  RPG PROGRAM HEADING  ************************
      * SYSTEM:      Hog Production
      * PROGRAM:     HP4415
      * TITLE:       Specify BGF Target Listing Options
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     09/27/00
      *
      * FUNCTION: Allows user to enter listing options and submit job.
      *
      * NOTE: This is a pop-up window program. Please note that the
      *       record format containing the window definition must be written
      *       first. So, we write the error message subfile control record
      *       followed by the command line record format. This is opposite
      *       of non-window programs.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 11/06/08  LeAnne Ramsey
      *           Recompile only. Added fields to HSP096.
      *
      * 05/28/09  LeAnne Ramsey
      *           Recompile only. Added 1 new field to HSP096-BGF Yearly Targets:
      *            1) farrowing crates
      *
      * 11/10/10  LeAnne Ramsey (E1151)
      *           Recompile only. Increased some head fields from 5,0 to 6,0 in HSP096.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhpd4415   CF   E             workstn
     F                                     infds(iofeed)
      *
      *
     Fhsp095    if   e           k disk
      *    BGF target tables
      *
      *
     Fhsl096a   if   e           k disk
      *    BGF yearly targets
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D scrn1           c                   'SCRN1 '
     D scrn2           c                   'SCRN2 '
     D exit            c                   'EXIT  '
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *---------------------------------------------------------------
      *  Compile time array for SBMJOB used in QCMDEXC
      *---------------------------------------------------------------
     D cmd             s              1    dim(80) ctdata perrcd(80)
      *
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D rtncd           s              2
     D maxmsg          s              2  0  inz(20)
      *
      *
      * Parms
      *
     D xxttbcd         s                   like(d1ttbcd)
     D xxttbds         s                   like(d1ttbds)
     D xxynfl          s                   like(d1targetfl)
     D xxalphyear      s              4
      *
      *
     D xxjobq          s             10     inz('*JOBD     ')
     D xxnite          s              1     inz('N')
     D xxcopy          s              1  0
      *
      *
      *  Parms for use with QCMDEXC.  'LENGTH' is the length of the
      *  command that will be issued with QCMDEXC.  QCMDEXC requires
      *  the field containing length to be defined as 15 with 5 decimal
      *  positions.  The field 'CMDSBM' will hold the values of the
      *  submit job command when passed as a parm on the call to
      *  QCMDEXC.
      *
     D length          s             15  5 inz(80)
     D cmdsbm          s             80
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      * Data areas
      *---------------------------------------------------------------
      *
     Dlda             uds                  dtaara(*lda)
     D  ldttbcd                2      6
     D  ldtargetfl             7      7
     D  ldcdyr                 8     11  0
     D  ldfarmfl              12     12
      *
     D  ldoutu               401    410
     D  ldhold               411    411
     D  ldcopy               412    412  0
     D  ldoutq               413    422
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /eject
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /eject
      *----------------------------------------------------------------
      * $set1 - set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      *  Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $scrn1 - perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      *
      * Write screen 1 to CRT.
      *
     C                   write     hp4415ec
     C                   write     hp4415k1
     C                   exfmt     hp4415r1
      *
      * Clear messages
      *
     C                   exsr      $clmsg
      *
      *
      * Get user's input and set routine
      *
     C                   select
      *
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      rtncd = '03'
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
      *
     C                   when      *in08 = *on                                  F3-exit
     C                   exsr      $edit1
     C                   if        error = 0
     C                   exsr      $proc1
     C                   endif
      *
     C                   when      *in17 = *on                                  F17-print options
     C                   eval      routne = scrn1
     C                   call      'HP451'
     C                   parm                    sdpgm
     C     ldcopy        parm      ldcopy        xxcopy
     C                   parm                    ldhold
     C     ldoutu        parm      ldoutu        ldoutq
     C                   parm                    xxnite
     C                   parm                    xxjobq
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                     API
     C                   eval      routne = scrn1
     C                   other
      *
     C                   exsr      $edit1
     C                   eval      routne = scrn1
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Edit screen 1
      *---------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * Validate:
      *   1) target table code
      *   2) include yearly targets yes/no flag
      *   3) target year
      *   4) show current farms
      *
     C                   exsr      $ttbcd
     C                   exsr      $targetfl
     C                   exsr      $cdyr
     C                   exsr      $farmfl
      *
      *
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate target table code
      *---------------------------------------------------------------
      *
     C     $ttbcd        begsr
      *
     C                   move      *blank        d1ttbds
      *
     C                   select
     C                   when      d1ttbcd = *blank
     C                   other
      *
     C     d1ttbcd       chain     hsp095                             92
     C                   if        *in92 = *off                                 If found
     C                   move(p)   btttbds       d1ttbds
     C                   else
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS01021'     mgid(e)
     C                   clear                   mgw
     C                   movea     d1ttbcd       mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If found
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate include yearly targets yes/no flag
      *---------------------------------------------------------------
      *
     C     $targetfl     begsr
      *
     c                   select
     C                   when      d1targetfl <> yes and d1targetfl <> no
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09106'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate include farms with current entries flag
      *---------------------------------------------------------------
      *
     C     $farmfl       begsr
      *
     c                   select
     C                   when      d1farmfl <> yes and d1farmfl <> no
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09106'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate target year
      *---------------------------------------------------------------
      *
      * Validations:
      *   1) Year is required when Include Targets is Yes
      *   2) Year must be blank when Include Targest is NO
      *
     C     $cdyr         begsr
      *
     C                   select
     C                   when      d1cdyr < 0
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
      *
     C                   when      d1targetfl = yes and
     C                             d1cdyr <= 0
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS02043'
     C                   endif
      *
     C                   when      d1targetfl = no and
     C                             d1cdyr <> 0
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS01025'
     C                   endif
     C                   endsl
      *
      * If Target Table Code/Year are Valid,
      * Validate that targets exist
      *
     C                   if        *in31 = *off and
     C                             *in33 = *off
     C                   exsr      $target
     C                   endif
     C                   endsr
      /eject
      *---------------------------------------------------------------------------------
      * Validate that Targets exist
      *---------------------------------------------------------------------------------
      *
     C     $target       begsr
      *
      * If a Target Table/Year are entered
      *
     C                   select
     C                   when      d1ttbcd <> *blank and
     C                             d1cdyr <> 0
     C     key01         chain     hsl096a                            92
     C                   if        *in92 = *on
     C                   seton                                        3133
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS02044'     mgid(e)
     C                   endif
     C                   endif
      *
      * Only Year is entered
      *
     C                   when      d1cdyr <> 0
     C     d1cdyr        chain     hsl096a                            92
     C                   if        *in92 = *on
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS02030'     mgid(e)
     C                   clear                   mgw
     C                   move      d1cdyr        xxalphyear
     C                   movea     xxalphyear    mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Process user's request
      *---------------------------------------------------------------
      *
     C     $proc1        begsr
      *
      * Populate LDA fields.
      *
     C                   z-add     d1cdyr        ldcdyr
     C                   move      d1ttbcd       ldttbcd
     C                   move      d1targetfl    ldtargetfl
     C                   move      d1farmfl      ldfarmfl
      *
      * Move the 80-character compile time array 'CMD' to an
      * 80-character field for passing as a parm with QCMDEXC.
      *
     C                   out       lda
     C                   movea     xxjobq        cmd(53)
     C                   movea     cmd           cmdsbm
     C                   call      'QCMDEXC'
     C                   parm                    cmdsbm
     C                   parm                    length
      *
      *
      * Issue the standard request submission message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09003'
     C                   endif
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * $wrmsg - write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redispaly the screen to the user.
      *
     C                   if        *in43 = *on
     C                   movel     set1          routne
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * $clmsg - clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redispaly the screen to the user.
      *
     C                   if        *in43 = *on
     C                   movel     set1          routne
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * $exit - set on last record indicator and end job
      *----------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * $f4s1 - F4 prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
     C                   select
      * Target table
     C                   when      fld = 'D1TTBCD'
     C                   call      'HP5011'
     C                   parm      *blank        xxttbcd
     C                   parm      *blank        xxttbds
     C                   seton                                        51
     C                   if        xxttbcd <> *blank
     C                   move      xxttbcd       d1ttbcd
     C                   move      xxttbds       d1ttbds
     C                   endif
      *
      * Include yearly targets yes/no flag
      *
     C                   when      fld = 'D1TARGETFL'
     C                   call      'HP522'
     C                   parm                    xxynfl
     C                   seton                                        52
     C                   if        xxynfl <> *blank
     C                   movel     xxynfl        d1targetfl
     C                   endif
      *
      *
      * Include farms with current entries
      *
     C                   when      fld = 'D1FARMFL'
     C                   call      'HP522'
     C                   parm                    xxynfl
     C                   seton                                        54
     C                   if        xxynfl <> *blank
     C                   movel     xxynfl        d1farmfl
     C                   endif
     C                   other
      *
      * F4 not valid for this field...issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error                                        013
     C                   movel     'HS09011'     mgid(e)
     C                   endif
      *
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
     C                   parm                    d1ttbcd
     C                   parm                    d1cdyr
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    d1cdyr
     C                   kfld                    d1ttbcd
      *
      * Initialize LDA fields
     C                   z-add     1             ldcopy
      *
      * Default a 'Yes' for the listing options:
      *   1) Include yearly targets
      *   2) Show current farms for tables
      *
     C                   move      yes           d1targetfl
     C                   move      yes           d1farmfl
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
      * This window logic keeps the screen in the calling program from being
      * cleared.
      *
     C                   write     assume
      *
     C                   endsr
      *
      *****************************************************************
      /eject
      * COMPILE TIME ARRAY 'CMD' USED IN QCMDEXC
      *****************************************************************
** CMD table 'CMD' submits listing
SBMJOB CMD(CALL PGM(HP4415CL)) JOB(BGFTARGETS) JOBQ(__________)
