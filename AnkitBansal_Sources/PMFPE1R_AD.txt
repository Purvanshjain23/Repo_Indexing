// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMFPE1R
// ?Date: 14.08.2025 Time: 03:42:56
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('PDTNE1');
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.Allow_Multi_Company);
PARAMETER(LCL.Default_Printer);
PARAMETER(LCL.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


MOVE *ALL (To: KEY From: PAR);

// PAR.USR Company Number = PAR.Company Number
PAR.USR_Company_Number = PAR.Company_Number;

// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// PAR.USR Exit Program = CND.no
PAR.USR_Exit_Program = 'N';

//?***** Change Log and Comments
DO;

//?** FP1303 LJB 01/14/2009
//?** Recompile for changes to the OHE file
//?*****
//?** E00207 TRANS LJB 08/12/2008
//?** Include Override Total Load Miles. If entered, they will
//?** take precedence. Return both Miles fields from the calc routine.
//?*****
//?** S00072 TRANS LJB 01/17/2008
//?** Change the RTV from the Load Detail to retrieve the Load
//?** Sequence number into the stop field on the screen. This is
//?** because there is an internal validation routine that uses this
//?** field and errs out if it doesn't match
//?*****
//?** FP1251 LJB 12/12/2007
//?** If Deadline Depart Date cannot be calculated, set the
//?** Scheduled Delivery Date to zeros.
//?*****
//?** FT683 12/12/2007 LJB
//?** 1. Update/Create the OHE record with PAR.Load ID so that the
//?** load id will be properly updated. This is because the load
//?** may have been tied to a different load at one time and will
//?** need to be replaced with the new one.
//?** 2. Remove update of ship from warehouse code.
//?** 3. Rename OHE Warehouse Code to an unused field
//?** 4. Send error message if invalid shipping line entered
//?** 4. Error if shipping port is wrong.
ENDDO;

//?USER: Initialize key screen

//?** Test & switch program mode
CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

ENDIF;

//?** Test & switch program mode
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// PGM.*Program mode = CND.*CHANGE
PGM.*Program_mode = 'CHG';

ENDIF;

ENDIF;

//?USER: Initialize detail screen (new record)

CASE;

// IF DTL.Load ID NE PAR.Load ID
IF DTL.Load_ID <> PAR.Load_ID;

// DTL.Load ID = PAR.Load ID
DTL.Load_ID = PAR.Load_ID;

ENDIF;

EXECUTE FUNCTION(RTV Load Dispatch flds RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1444756;
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.Scheduled_Ship_Date);
PARAMETER(DTL.Trailer_Id);
PARAMETER(LCL.Carrier_Code);
PARAMETER(LCL.Sequence_Number);
PARAMETER(LCL.Shipping_Method);
PARAMETER(LCL.On_Time_Y_N);
PARAMETER(LCL.Truck_Ready_Date);
PARAMETER(LCL.Truck_Ready_Time);
PARAMETER(LCL.Spotted_Date);
PARAMETER(LCL.Spotted_Time);
PARAMETER(LCL.Load_Finished_Date);
PARAMETER(LCL.Load_Finished_Time);
PARAMETER(LCL.BOL_Complete_Date);
PARAMETER(LCL.BOL_Complete_Time);
PARAMETER(LCL.BOL_Received_Date);
PARAMETER(LCL.BOL_Received_Time);
PARAMETER(LCL.Truck_Departure_Date);
PARAMETER(LCL.Truck_Departure_Time);
PARAMETER(LCL.Adjusted_Departure_Date);
PARAMETER(LCL.Adjusted_Departure_Time);
PARAMETER(LCL.Shipping_Line);
PARAMETER(LCL.Port_Delv_Terminal);
PARAMETER(LCL.Scheduled_Delivery_Date);
PARAMETER(LCL.Scheduled_Delivery_Time);
PARAMETER(LCL.LH_Unused_Sts);
PARAMETER(LCL.On_Yard_Date);
PARAMETER(LCL.On_Yard_Time);
PARAMETER(LCL.Load_Held_Over);
PARAMETER(LCL.LH_On_Time_Reason_Code);
PARAMETER(LCL.LH_Held_Over_Reason);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV All Hdr flds b/ord RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1699784;
PARAMETER(PAR.USR_Company_Number);
PARAMETER(KEY.Order_Number);
PARAMETER(LCL.Order_Type_Sales);
PARAMETER(LCL.AR_Customer_Number);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(DTL.Ship_To_Name);
PARAMETER(LCL.Ship_To_Address_Line_1);
PARAMETER(LCL.Ship_To_Address_Line_2);
PARAMETER(LCL.Ship_To_Address_Line_3);
PARAMETER(DTL.City);
PARAMETER(DTL.State);
PARAMETER(LCL.Ship_To_Zip_Postal_Code);
PARAMETER(LCL.Bill_to_Customer);
PARAMETER(LCL.Bill_to_Name);
PARAMETER(LCL.Bill_to_Address_Line_1);
PARAMETER(LCL.Bill_to_Address_Line_2);
PARAMETER(LCL.Bill_to_Address_Line_3);
PARAMETER(LCL.Bill_to_City);
PARAMETER(LCL.Bill_to_State_Code);
PARAMETER(LCL.Bill_to_Zip_Postal_Code);
PARAMETER(LCL.Customer_Purchase_Order_#);
PARAMETER(LCL.Order_Date);
PARAMETER(LCL.Requested_Ship_Date);
PARAMETER(DTL.Actual_Ship_Date);
PARAMETER(LCL.Cancel_Date);
PARAMETER(LCL.Terms_Code);
PARAMETER(LCL.Special_Instructions);
PARAMETER(LCL.Special_Instructions_2);
PARAMETER(DTL.Carrier_Code);
PARAMETER(LCL.Comment_Print_Acknowledge);
PARAMETER(LCL.Comment_Print_Inv_Cr_Memo);
PARAMETER(LCL.Comment_Print_Pick_Slip);
PARAMETER(LCL.Comment_Print_Ship_Doc);
PARAMETER(LCL.Reason_Code);
PARAMETER(LCL.Order_in_Use);
PARAMETER(LCL.Header_Status);
PARAMETER(LCL.Header_Status_Last);
PARAMETER(LCL.Order_Type_Print_Status);
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(LCL.User_Original_Entry);
PARAMETER(LCL.Date_of_Original_Entry);
PARAMETER(LCL.Order_Value_Total);
PARAMETER(LCL.Order_Weight_Total);
PARAMETER(LCL.Credit_Hold);
PARAMETER(LCL.Production_Hold);
PARAMETER(LCL.New_Customer_Hold);
PARAMETER(DTL.Requested_Delivery_Date);
PARAMETER(LCL.Requested_Delivery_Time);
PARAMETER(LCL.Accounts_Receiv_Ent_1);
PARAMETER(LCL.Accounts_Receiv_Ent_2);
PARAMETER(LCL.Load_ID);
PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
PARAMETER(LCL.Rated_Freight);
PARAMETER(LCL.LTL_Flag);
PARAMETER(LCL.Price_Audit);
PARAMETER(LCL.Price_Status);
PARAMETER(DTL.Shipping_Method);
PARAMETER(LCL.Export_Status);
PARAMETER(LCL.Palletize);
PARAMETER(LCL.Shrink_Wrap);
PARAMETER(LCL.Slip_Sheet);
PARAMETER(LCL.Age_Code);
PARAMETER(LCL.Reefer_Temperature);
PARAMETER(LCL.Load_Type);
PARAMETER(LCL.Attach_to_Invoice_Number);
PARAMETER(LCL.Load_Plan_Order);
PARAMETER(LCL.Print_Pick_Slip);
PARAMETER(LCL.Resell_Reference_Number);
PARAMETER(LCL.Special_Comment_1);
PARAMETER(LCL.Special_Comment_2);
PARAMETER(LCL.Affect_Auto_Accruals);
PARAMETER(LCL.Sales_Route_Code);
PARAMETER(LCL.Manager_Level_Code);
PARAMETER(LCL.VP_Level_Code);
PARAMETER(LCL.Attach_to_Order_Number);
PARAMETER(LCL.Reason_for_Price_Audit);
PARAMETER(LCL.Invoice_Number);
PARAMETER(LCL.Invoice_Suffix);
PARAMETER(LCL.Invoice_Date);
PARAMETER(LCL.Event_Code);
PARAMETER(LCL.Trans_Contol_AS400_Plant);
PARAMETER(LCL.Modified_Flag);
PARAMETER(LCL.A_R_order_Value_Total);
PARAMETER(LCL.Billing_Activity_Type);
PARAMETER(LCL.Block_Order_Flag);
PARAMETER(LCL.Order_Certification_Flag);
PARAMETER(LCL.EDI_Status_1);
PARAMETER(LCL.EDI_Status_2);
PARAMETER(LCL.EDI_Status_3);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Use the Company Number from the Load Header to see
//?** if Sail Port information exists for this Order Number
//?** for instance, from a cancelled load. If it does, put info on
//?** the screen.                              FT683 LJB 12/12/2007
EXECUTE FUNCTION(RTV OHE Ship fields    RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC1814635;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(DTL.Shipping_Line);
PARAMETER(DTL.Port_Delv_Terminal);
PARAMETER(DTL.OHE_City);
PARAMETER(DTL.OHE_Vessel_Airline);
PARAMETER(DTL.OHE_Voyage_Flight);
PARAMETER(DTL.OHE_Booking_Number);
PARAMETER(DTL.OHE_Discharge_Port_Airprt);
PARAMETER(DTL.OHE_Sail_Flight_Date);
PARAMETER(DTL.OHE_Port_Cut_Date);
PARAMETER(DTL.OHE_Arrival_Date);
PARAMETER(DTL.OHE_Late_Delivery_Code);
PARAMETER(DTL.OHE_Ship_Status);
PARAMETER(DTL.OHE_Container_Number);
PARAMETER(DTL.OHE_Comment_1);
PARAMETER(DTL.OHE_Comment_2);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Company Number = PAR.USR Company Number
DTL.Company_Number = PAR.USR_Company_Number;

EXECUTE FUNCTION(RTV Company Name Only  RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1100959;
PARAMETER(KEY.Company_Number);
PARAMETER(DTL.Company_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Carrier_Name_DRV);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


// PAR.USR Carrier Code = DTL.Carrier Code
PAR.USR_Carrier_Code = DTL.Carrier_Code;

EXECUTE FUNCTION(RTV Order Info by Load RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1814603;
PARAMETER(PAR.Load_ID);
PARAMETER(DTL.Stop_Drop_Sequence_Number);
PARAMETER(LCL.Sequence_Number);
PARAMETER(LCL.Comments_for_Pickup);
PARAMETER(LCL.Miles_to_next_stop);
PARAMETER(LCL.Freight_Charge);
PARAMETER(LCL.Ld_Hdr_Ld_Dtl_Unused);
PARAMETER(LCL.Freight_Misc_Charge);
PARAMETER(LCL.Freight_Stop_Charge);
PARAMETER(LCL.Rated_Freight);
PARAMETER(LCL.Company_Number);
PARAMETER(KEY.Order_Number);
PARAMETER(DTL.OHE_Ship_Status);
PARAMETER(LCL.Estimated_Arrival_Date);
PARAMETER(LCL.Estimated_Arrival_Time);
PARAMETER(LCL.Appointment_Confirm_Date);
PARAMETER(LCL.Appointment_Confirm_Time);
PARAMETER(LCL.Confirmation_Made_With);
PARAMETER(LCL.Confirmation_Number);
PARAMETER(LCL.Actual_Delivery_Date);
PARAMETER(LCL.Actual_Delivery_time);
PARAMETER(LCL.Scheduled_Delivery_Date);
PARAMETER(LCL.Scheduled_Delivery_Time);
PARAMETER(LCL.Deadline_Depart_DT_HDR);
PARAMETER(LCL.Deadline_Depart_Time_HDR);
PARAMETER(LCL.On_Yard_Date);
PARAMETER(LCL.On_Yard_Time);
PARAMETER(LCL.MPC_Number);
PARAMETER(LCL.Load_Dtl_On_Time_Flag);
PARAMETER(LCL.On_Time_Addl_Rsn_Unused);
PARAMETER(LCL.Seal_Nbr_1);
PARAMETER(LCL.Seal_Nbr_2);
PARAMETER(LCL.Seal_Nbr_3);
PARAMETER(LCL.Seal_Nbr_4);
PARAMETER(LCL.Seal_Nbr_5);
PARAMETER(LCL.LD_Carrier_Appt_Date);
PARAMETER(LCL.LD_Unused_Date_2);
PARAMETER(LCL.LD_Unused_Date_3);
PARAMETER(LCL.LD_Carrier_Appt_Time);
PARAMETER(LCL.LD_Unused_Time_2);
PARAMETER(LCL.LD_Unused_Time_3);
PARAMETER(LCL.Miles_Error_Sts);
PARAMETER(LCL.LD_Unused_Sts_2);
PARAMETER(LCL.HPB_Transload_Station);
PARAMETER(LCL.LD_Cst_Svc_Tracer_Cmmnt);
PARAMETER(LCL.Carrier_Ref_PRO_Inv);
PARAMETER(LCL.Cust_Assigned_Appt_#);
PARAMETER(LCL.EDI_Status_1);
PARAMETER(LCL.EDI_Status_2);
PARAMETER(LCL.EDI_Status_3);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

//?USER: Initialize detail screen (existing record)

// PGM.*Program mode = CND.*CHANGE
PGM.*Program_mode = 'CHG';

EXECUTE FUNCTION(RTV Load Dispatch flds RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1444756;
PARAMETER(PAR.Load_ID);
PARAMETER(NLL.Scheduled_Ship_Date);
PARAMETER(DTL.Trailer_Id);
PARAMETER(NLL.Carrier_Code);
PARAMETER(NLL.Schedule_Sequence_Number);
PARAMETER(NLL.Shipping_Method);
PARAMETER(NLL.On_Time_Y_N);
PARAMETER(NLL.Truck_Ready_Date);
PARAMETER(NLL.Truck_Ready_Time);
PARAMETER(NLL.Spotted_Date);
PARAMETER(NLL.Spotted_Time);
PARAMETER(NLL.Load_Finished_Date);
PARAMETER(NLL.Load_Finished_Time);
PARAMETER(NLL.BOL_Complete_Date);
PARAMETER(NLL.BOL_Complete_Time);
PARAMETER(NLL.BOL_Received_Date);
PARAMETER(NLL.BOL_Received_Time);
PARAMETER(NLL.Truck_Departure_Date);
PARAMETER(NLL.Truck_Departure_Time);
PARAMETER(NLL.Adjusted_Departure_Date);
PARAMETER(NLL.Adjusted_Departure_Time);
PARAMETER(NLL.Shipping_Line);
PARAMETER(NLL.Port_Delv_Terminal);
PARAMETER(NLL.Scheduled_Delivery_Date);
PARAMETER(NLL.Scheduled_Delivery_Time);
PARAMETER(NLL.LH_Unused_Sts);
PARAMETER(NLL.On_Yard_Date);
PARAMETER(NLL.On_Yard_Time);
PARAMETER(NLL.Load_Held_Over);
PARAMETER(NLL.LH_On_Time_Reason_Code);
PARAMETER(NLL.LH_Held_Over_Reason);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV All Hdr flds b/ord RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1699784;
PARAMETER(PAR.USR_Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(NLL.Order_Type_Sales);
PARAMETER(NLL.AR_Customer_Number);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(DTL.Ship_To_Name);
PARAMETER(LCL.Ship_To_Address_Line_1);
PARAMETER(LCL.Ship_To_Address_Line_2);
PARAMETER(LCL.Ship_To_Address_Line_3);
PARAMETER(DTL.City);
PARAMETER(DTL.State);
PARAMETER(LCL.Ship_To_Zip_Postal_Code);
PARAMETER(NLL.Bill_to_Customer);
PARAMETER(NLL.Bill_to_Name);
PARAMETER(NLL.Bill_to_Address_Line_1);
PARAMETER(NLL.Bill_to_Address_Line_2);
PARAMETER(NLL.Bill_to_Address_Line_3);
PARAMETER(NLL.Bill_to_City);
PARAMETER(NLL.Bill_to_State_Code);
PARAMETER(NLL.Bill_to_Zip_Postal_Code);
PARAMETER(NLL.Customer_Purchase_Order_#);
PARAMETER(NLL.Order_Date);
PARAMETER(NLL.Requested_Ship_Date);
PARAMETER(DTL.Actual_Ship_Date);
PARAMETER(NLL.Cancel_Date);
PARAMETER(NLL.Terms_Code);
PARAMETER(LCL.Special_Instructions);
PARAMETER(LCL.Special_Instructions_2);
PARAMETER(DTL.Carrier_Code);
PARAMETER(NLL.Comment_Print_Acknowledge);
PARAMETER(NLL.Comment_Print_Inv_Cr_Memo);
PARAMETER(NLL.Comment_Print_Pick_Slip);
PARAMETER(NLL.Comment_Print_Ship_Doc);
PARAMETER(NLL.Reason_Code);
PARAMETER(NLL.Order_in_Use);
PARAMETER(NLL.Header_Status);
PARAMETER(NLL.Header_Status_Last);
PARAMETER(NLL.Order_Type_Print_Status);
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(NLL.User_Original_Entry);
PARAMETER(NLL.Date_of_Original_Entry);
PARAMETER(NLL.Order_Value_Total);
PARAMETER(NLL.Order_Weight_Total);
PARAMETER(NLL.Credit_Hold);
PARAMETER(NLL.Production_Hold);
PARAMETER(NLL.New_Customer_Hold);
PARAMETER(DTL.Requested_Delivery_Date);
PARAMETER(NLL.Requested_Delivery_Time);
PARAMETER(NLL.Accounts_Receiv_Ent_1);
PARAMETER(NLL.Accounts_Receiv_Ent_2);
PARAMETER(NLL.Load_ID);
PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
PARAMETER(NLL.Rated_Freight);
PARAMETER(NLL.LTL_Flag);
PARAMETER(NLL.Price_Audit);
PARAMETER(NLL.Price_Status);
PARAMETER(DTL.Shipping_Method);
PARAMETER(LCL.Export_Status);
PARAMETER(NLL.Palletize);
PARAMETER(NLL.Shrink_Wrap);
PARAMETER(NLL.Slip_Sheet);
PARAMETER(NLL.Age_Code);
PARAMETER(NLL.Reefer_Temperature);
PARAMETER(NLL.Load_Type);
PARAMETER(NLL.Attach_to_Invoice_Number);
PARAMETER(NLL.Load_Plan_Order);
PARAMETER(NLL.Print_Pick_Slip);
PARAMETER(NLL.Resell_Reference_Number);
PARAMETER(LCL.Special_Comment_1);
PARAMETER(LCL.Special_Comment_2);
PARAMETER(NLL.Affect_Auto_Accruals);
PARAMETER(NLL.Sales_Route_Code);
PARAMETER(NLL.Manager_Level_Code);
PARAMETER(NLL.VP_Level_Code);
PARAMETER(NLL.Attach_to_Order_Number);
PARAMETER(NLL.Reason_for_Price_Audit);
PARAMETER(NLL.Invoice_Number);
PARAMETER(NLL.Invoice_Suffix);
PARAMETER(NLL.Invoice_Date);
PARAMETER(NLL.Event_Code);
PARAMETER(NLL.Trans_Contol_AS400_Plant);
PARAMETER(NLL.Modified_Flag);
PARAMETER(NLL.A_R_order_Value_Total);
PARAMETER(NLL.Billing_Activity_Type);
PARAMETER(NLL.Block_Order_Flag);
PARAMETER(NLL.Order_Certification_Flag);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Save Co# and Carrier for Fax prompt
// PAR.USR Carrier Code = DTL.Carrier Code
PAR.USR_Carrier_Code = DTL.Carrier_Code;

// PAR.USR Company Number = DTL.Company Number
PAR.USR_Company_Number = DTL.Company_Number;

//?** Retrieve the Carrier Name
EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Carrier_Name_DRV);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


EXECUTE FUNCTION(RTV Order Info by Load RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1814603;
PARAMETER(PAR.Load_ID);
PARAMETER(DTL.Stop_Drop_Sequence_Number);
PARAMETER(NLL.Stop_Drop);
PARAMETER(NLL.Comments_for_Pickup);
PARAMETER(NLL.Miles_to_next_stop);
PARAMETER(NLL.Freight_Charge);
PARAMETER(NLL.Ld_Hdr_Ld_Dtl_Unused);
PARAMETER(NLL.Freight_Misc_Charge);
PARAMETER(NLL.Freight_Stop_Charge);
PARAMETER(NLL.Rated_Freight);
PARAMETER(NLL.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(DTL.OHE_Ship_Status);
PARAMETER(NLL.Estimated_Arrival_Date);
PARAMETER(NLL.Estimated_Arrival_Time);
PARAMETER(NLL.Appointment_Confirm_Date);
PARAMETER(NLL.Appointment_Confirm_Time);
PARAMETER(NLL.Confirmation_Made_With);
PARAMETER(NLL.Confirmation_Number);
PARAMETER(NLL.Actual_Delivery_Date);
PARAMETER(NLL.Actual_Delivery_time);
PARAMETER(NLL.Scheduled_Delivery_Date);
PARAMETER(NLL.Scheduled_Delivery_Time);
PARAMETER(NLL.Deadline_Depart_DT_HDR);
PARAMETER(NLL.Deadline_Depart_Time_HDR);
PARAMETER(NLL.On_Yard_Date);
PARAMETER(NLL.On_Yard_Time);
PARAMETER(NLL.MPC_Number);
PARAMETER(NLL.Load_Dtl_On_Time_Flag);
PARAMETER(NLL.On_Time_Addl_Rsn_Unused);
PARAMETER(NLL.Seal_Nbr_1);
PARAMETER(NLL.Seal_Nbr_2);
PARAMETER(NLL.Seal_Nbr_3);
PARAMETER(NLL.Seal_Nbr_4);
PARAMETER(NLL.Seal_Nbr_5);
PARAMETER(NLL.LD_Carrier_Appt_Date);
PARAMETER(NLL.LD_Unused_Date_2);
PARAMETER(NLL.LD_Unused_Date_3);
PARAMETER(NLL.LD_Carrier_Appt_Time);
PARAMETER(NLL.LD_Unused_Time_2);
PARAMETER(NLL.LD_Unused_Time_3);
PARAMETER(NLL.Miles_Error_Sts);
PARAMETER(NLL.LD_Unused_Sts_2);
PARAMETER(NLL.HPB_Transload_Station);
PARAMETER(NLL.LD_Cst_Svc_Tracer_Cmmnt);
PARAMETER(NLL.Carrier_Ref_PRO_Inv);
PARAMETER(NLL.Cust_Assigned_Appt_#);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Retrieve the Shipping Line name from the Carrier file
CASE;

// IF DTL.Shipping Line is entered
IF DTL.Shipping_Line <> *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Shipping_Line);
PARAMETER(DTL.USR_Carrier_Name);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?** Send error message if invalid shipping line entered  FT683 LJB
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Shipping line &1 not found'
ERROR(USR2431);
MSGPARM(DTL.Shipping_Line);

ENDIF;

ENDIF;

//?** Retrieve the Port City and address
CASE;

// IF DB1.Port Delv Terminal is Entered
IF DB1.Port_Delv_Terminal <> *BLANK;

EXECUTE FUNCTION(RTV Shp Line/Port All  RT) TYPE(RTVOBJ) FILE(PDLCREP)          AC1502160;
PARAMETER(DTL.Shipping_Line);
PARAMETER(DTL.Port_Delv_Terminal);
PARAMETER(DTL.OHE_City);
PARAMETER(LCL.Port_Address_Line_1);
PARAMETER(LCL.Port_Address_Line_2);
PARAMETER(LCL.Sail_Port_State);
PARAMETER(LCL.Port_Zip_Postal_Code);
PARAMETER(LCL.Port_Phone_Number);
PARAMETER(LCL.Port_Fax_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Shipping Line_Port not found.'
ERROR(USR2419);

ENDIF;

ENDIF;

//?USER: Delete DBF record

EXECUTE FUNCTION(Delete Order Header Exten) TYPE(DLTOBJ) FILE(PMAMREP)          AC1814353;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);

//?USER: Validate detail screen fields

//?** F10 = Copy from another order  DLY27SP LJB 08/24/2007
CASE;

// IF DTL.*CMD key is CF10
IF DTL.*CMD_key = '10';

// Call program SEL Copy OHE Record    SR.
CALL PROGRAM(SEL Copy OHE Record    SR) ('PMMLSRR');
PARAMETER(PAR.Shipping_Line);
PARAMETER(PAR.Port_Delv_Terminal);
PARAMETER(PAR.Vessel_Name);
PARAMETER(PAR.Sail_Date);
PARAMETER(PAR.Discharge_Port);
PARAMETER(PAR.Container_Number);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(WRK.Record_Selected_USR);

//?** Only update fields if a record was selected.
CASE;

// IF WRK.Record Selected       USR is yes
IF WRK.Record_Selected_USR = 'Y';

// DTL.Shipping Line = PAR.Shipping Line
DTL.Shipping_Line = PAR.Shipping_Line;

// DTL.Port Delv Terminal = PAR.Port Delv Terminal
DTL.Port_Delv_Terminal = PAR.Port_Delv_Terminal;

// DTL.OHE Vessel/Airline = PAR.Vessel Name
DTL.OHE_Vessel_Airline = PAR.Vessel_Name;

// DTL.OHE Voyage/Flight = PAR.Voyage
DTL.OHE_Voyage_Flight = PAR.Voyage;

// DTL.OHE Sail/Flight Date = PAR.Sail Date
DTL.OHE_Sail_Flight_Date = PAR.Sail_Date;

// DTL.OHE Booking Number = PAR.Booking Number
DTL.OHE_Booking_Number = PAR.Booking_Number;

// DTL.OHE Discharge Port/Airprt = PAR.Discharge Port
DTL.OHE_Discharge_Port_Airprt = PAR.Discharge_Port;

// DTL.OHE Container Number = PAR.Container Number
DTL.OHE_Container_Number = PAR.Container_Number;

//?** Error if shipping line or port are wrong.  FT683 LJB
//?** Retrieve the Shipping Line name from the Carrier file
CASE;

// IF DTL.Shipping Line is entered
IF DTL.Shipping_Line <> *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Shipping_Line);
PARAMETER(DTL.USR_Carrier_Name);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?** Send error message if invalid shipping line entered  FT683 LJB
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Shipping line &1 not found'
ERROR(USR2431);
MSGPARM(DTL.Shipping_Line);

ENDIF;

ENDIF;

//?** Retrieve the Port City and address
CASE;

// IF DB1.Port Delv Terminal is Entered
IF DB1.Port_Delv_Terminal <> *BLANK;

EXECUTE FUNCTION(RTV Shp Line/Port All  RT) TYPE(RTVOBJ) FILE(PDLCREP)          AC1502160;
PARAMETER(DTL.Shipping_Line);
PARAMETER(DTL.Port_Delv_Terminal);
PARAMETER(DTL.OHE_City);
PARAMETER(LCL.Port_Address_Line_1);
PARAMETER(LCL.Port_Address_Line_2);
PARAMETER(LCL.Sail_Port_State);
PARAMETER(LCL.Port_Zip_Postal_Code);
PARAMETER(LCL.Port_Phone_Number);
PARAMETER(LCL.Port_Fax_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Shipping Line_Port not found.'
ERROR(USR2419);

ENDIF;

ENDIF;

//?** Only update fields if a record was selected.
// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Shipping Line
IF PGM.*Cursor_field = DTL.Shipping_Line;

// Call program SEL Shipping Line/PortsSR.
CALL PROGRAM(SEL Shipping Line/PortsSR) ('PDUMSRR');
PARAMETER(DTL.Shipping_Line);
PARAMETER(DTL.Port_Delv_Terminal);
PARAMETER(DTL.OHE_City);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF PGM.*Cursor field <IS> DTL.Port Delv Terminal
IF PGM.*Cursor_field = DTL.Port_Delv_Terminal;

// Call program SEL Shipping Line/PortsSR.
CALL PROGRAM(SEL Shipping Line/PortsSR) ('PDUMSRR');
PARAMETER(DTL.Shipping_Line);
PARAMETER(DTL.Port_Delv_Terminal);
PARAMETER(DTL.OHE_City);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

// IF DTL.*CMD key is CF20
IF DTL.*CMD_key = '20';

//?** Traffic Comments
// Call program EDT PD Traffic Comment EF.
CALL PROGRAM(EDT PD Traffic Comment EF) ('PDCZEFR');
PARAMETER(DTL.Load_ID);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF DTL.*CMD key is CF13
IF DTL.*CMD_key = '13';

//?** Display/Edit MPC
// Call program Edt MPC/Dsp Orders     EF.
CALL PROGRAM(Edt MPC/Dsp Orders     EF) ('PDSQEFR');
PARAMETER(DTL.Load_ID);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?CALC: Detail screen function fields

EXECUTE FUNCTION(Carrier Name DRV) TYPE(DRVFLD)                                 AC1582201;
PARAMETER(DTL.Carrier_Name_DRV);
PARAMETER(DTL.Carrier_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Carrier_Name_DRV);
 PARAMETER(NLL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

}


// Call program Zzz Depart Date/Accept XF.
CALL PROGRAM(Zzz Depart Date/Accept XF) ('PMFTXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Load_ID);

//?USER: Validate detail screen relations

//?** Retrieve the Shipping Line name from the Carrier file
CASE;

// IF DTL.Shipping Line is entered
IF DTL.Shipping_Line <> *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Shipping_Line);
PARAMETER(DTL.USR_Carrier_Name);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?** Send error message if invalid shipping line entered  FT683 LJB
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Shipping line &1 not found'
ERROR(USR2431);
MSGPARM(DTL.Shipping_Line);

ENDIF;

ENDIF;

//?** Retrieve the Port City and address
CASE;

// IF DTL.Port Delv Terminal is Entered
IF DTL.Port_Delv_Terminal <> *BLANK;

EXECUTE FUNCTION(RTV Shp Line/Port All  RT) TYPE(RTVOBJ) FILE(PDLCREP)          AC1502160;
PARAMETER(DTL.Shipping_Line);
PARAMETER(DTL.Port_Delv_Terminal);
PARAMETER(DTL.OHE_City);
PARAMETER(LCL.Port_Address_Line_1);
PARAMETER(LCL.Port_Address_Line_2);
PARAMETER(LCL.Sail_Port_State);
PARAMETER(LCL.Port_Zip_Postal_Code);
PARAMETER(LCL.Port_Phone_Number);
PARAMETER(LCL.Port_Fax_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Shipping Line_Port not found.'
ERROR(USR2419);

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(CRT Order Header Exten CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC1814351;
PARAMETER(PAR.USR_Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Load_ID);
PARAMETER(DTL.Stop_Drop_Sequence_Number);
PARAMETER(DTL.Shipping_Line);
PARAMETER(DTL.Port_Delv_Terminal);
PARAMETER(DTL.OHE_City);
PARAMETER(DTL.OHE_Vessel_Airline);
PARAMETER(DTL.OHE_Voyage_Flight);
PARAMETER(DTL.OHE_Booking_Number);
PARAMETER(DTL.OHE_Discharge_Port_Airprt);
PARAMETER(DTL.OHE_Sail_Flight_Date);
PARAMETER(DTL.OHE_Port_Cut_Date);
PARAMETER(DTL.OHE_Arrival_Date);
PARAMETER(DTL.OHE_Late_Delivery_Code);
PARAMETER(DTL.OHE_Ship_Status);
PARAMETER(DTL.OHE_Container_Number);
PARAMETER(DTL.OHE_Comment_1);
PARAMETER(DTL.OHE_Comment_2);
PARAMETER(DTL.OHE_Unused_Number_1_11_0);
PARAMETER(DTL.OHE_Unused_Number_2_11_0);
PARAMETER(DTL.OHE_Unused_Number_3_11_0);
PARAMETER(DTL.OHE_Unused_Number_4_11_0);
PARAMETER(DTL.OHE_HPB_RIN_Equiv_Value);
PARAMETER(DTL.OHE_HPB_RIN_Price);
PARAMETER(DTL.Transload_Terminal_Fees);
PARAMETER(DTL.OHE_Est_Arrv_at_Dest_Date);
PARAMETER(DTL.OHE_Backhaul_ETA_RtrnDate);
PARAMETER(DTL.OHE_Port_Pier_Paid_Date);
PARAMETER(DTL.OHE_Actual_Ship_Date);
PARAMETER(DTL.OHE_Carrier_SCAC_Code);
PARAMETER(DTL.OHE_Spot_Buy);
PARAMETER(DTL.OHE_PO_ACK_Flag);
PARAMETER(DTL.OHE_Override_Type_Code);
PARAMETER(DTL.OHE_Backhaul_Status);
PARAMETER(DTL.OHE_Backhaul_ETA_AM_PM);
PARAMETER(DTL.OHE_Load_Haul_Type);
PARAMETER(DTL.OHE_Backhaul_Carrier_Code);
PARAMETER(DTL.OHE_Bookings_Confirmed);
PARAMETER(DTL.OHE_EDI_Error_Reasons);
PARAMETER(*MISSING);
PARAMETER(DTL.HPB_COA_Batch_Number);
PARAMETER(DTL.Delivery_P_O_Number);
PARAMETER(DTL.OHE_Intended_for_ExportCC);
PARAMETER(DTL.OHE_EDI_943_Action);
PARAMETER(DTL.OHE_EDI_944_Action);
PARAMETER(DTL.OHE_EDI_940_Action);
PARAMETER(DTL.OHE_EDI_945_Action);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(DTL.OHE_Transload_Seal_Nbr);
PARAMETER(DTL.OHE_Abs_Rate_Override_Rsn);
PARAMETER(DTL.OHE_Appt_Confirmation_#);
PARAMETER(DTL.OHE_Backhaul_Container#);
PARAMETER(DTL.OHE_Backhaul_Chassis_#);
PARAMETER(DTL.OHE_Transload_Container#);
PARAMETER(DTL.OHE_Pier_Pass_Invoice);
PARAMETER(DTL.OHE_Carrier_Nm);
PARAMETER(DTL.OHE_Appt_Confirmation_Nm);
PARAMETER(DTL.OHE_Backhaul_Comment);
PARAMETER(DTL.Letter_of_Credit_Number);
PARAMETER(DTL.OHE_Backhaul_Return_to_Co);
PARAMETER(DTL.LD_Stop_Drop);
PARAMETER(DTL.OHE_Unused_Number_3_0);
PARAMETER(DTL.OHE_Pier_Pass_Fee_Amount);
PARAMETER(DTL.OHE_Port_Check_Fee_Amount);
PARAMETER(DTL.OHE_Port_Cut_Time);
PARAMETER(DTL.OHE_Backhaul_Truck_Number);
PARAMETER(DTL.OHE_Load_Sched_Seq_Num);
PARAMETER(DTL.Original_Appointment_Date);
PARAMETER(DTL.Original_Appointment_Time);
PARAMETER(DTL.OHE_PowerPro_Load#_Outbnd);
PARAMETER(DTL.OHE_PowerPro_Load#_Bckhl);
PARAMETER(DTL.OHE_Unused_Numeric_9_0_3);
PARAMETER(DTL.OHE_Orig_ABS_Freight_Rate);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER('A');
PARAMETER(JOB.*Job_time);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(JOB.*Job_date);
{
 //?USER: Processing before Data update

 // DB1.Job Time = JOB.*Job time
 DB1.Job_Time = JOB.*Job_time;

 // DB1.Job Date = JOB.*Job date
 DB1.Job_Date = JOB.*Job_date;

 // DB1.Job Name = JOB.*PROGRAM
 DB1.Job_Name = JOB.*PROGRAM;

 // DB1.User Id = JOB.*USER
 DB1.User_Id = JOB.*USER;

 //?USER: Processing if Data record already exists

 //?R15161 DN 07/31/19-Commented Out.
 //?USER: Processing if Data update error

 RETURN;

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG OrdHdr Ext/SlsHst CH) TYPE(CHGOBJ) FILE(PMAMREP)           AC1919908;
PARAMETER(PAR.USR_Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Load_ID);
PARAMETER(DTL.Stop_Drop_Sequence_Number);
PARAMETER(DTL.Shipping_Line);
PARAMETER(DTL.Port_Delv_Terminal);
PARAMETER(DTL.OHE_City);
PARAMETER(DTL.OHE_Vessel_Airline);
PARAMETER(DTL.OHE_Voyage_Flight);
PARAMETER(DTL.OHE_Booking_Number);
PARAMETER(DTL.OHE_Discharge_Port_Airprt);
PARAMETER(DTL.OHE_Sail_Flight_Date);
PARAMETER(DTL.OHE_Port_Cut_Date);
PARAMETER(DTL.OHE_Arrival_Date);
PARAMETER(DTL.OHE_Late_Delivery_Code);
PARAMETER(DTL.OHE_Ship_Status);
PARAMETER(DTL.OHE_Container_Number);
PARAMETER(DTL.OHE_Comment_1);
PARAMETER(DTL.OHE_Comment_2);
PARAMETER(DTL.OHE_Unused_Number_1_11_0);
PARAMETER(DTL.OHE_Unused_Number_2_11_0);
PARAMETER(DTL.OHE_Unused_Number_3_11_0);
PARAMETER(DTL.OHE_Unused_Number_4_11_0);
PARAMETER(DTL.OHE_HPB_RIN_Equiv_Value);
PARAMETER(DTL.OHE_HPB_RIN_Price);
PARAMETER(DTL.Transload_Terminal_Fees);
PARAMETER(DTL.OHE_Est_Arrv_at_Dest_Date);
PARAMETER(DTL.OHE_Backhaul_ETA_RtrnDate);
PARAMETER(DTL.OHE_Port_Pier_Paid_Date);
PARAMETER(DTL.OHE_Actual_Ship_Date);
PARAMETER(DTL.OHE_Carrier_SCAC_Code);
PARAMETER(DTL.OHE_Spot_Buy);
PARAMETER(DTL.OHE_PO_ACK_Flag);
PARAMETER(DTL.OHE_Override_Type_Code);
PARAMETER(DTL.OHE_Backhaul_Status);
PARAMETER(DTL.OHE_Backhaul_ETA_AM_PM);
PARAMETER(DTL.OHE_Load_Haul_Type);
PARAMETER(DTL.OHE_Backhaul_Carrier_Code);
PARAMETER(DTL.OHE_Bookings_Confirmed);
PARAMETER(DTL.OHE_EDI_Error_Reasons);
PARAMETER(*MISSING);
PARAMETER(DTL.HPB_COA_Batch_Number);
PARAMETER(DTL.Delivery_P_O_Number);
PARAMETER(DTL.OHE_Intended_for_ExportCC);
PARAMETER(DTL.OHE_EDI_943_Action);
PARAMETER(DTL.OHE_EDI_944_Action);
PARAMETER(DTL.OHE_EDI_940_Action);
PARAMETER(DTL.OHE_EDI_945_Action);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(DTL.OHE_Transload_Seal_Nbr);
PARAMETER(DTL.OHE_Abs_Rate_Override_Rsn);
PARAMETER(DTL.OHE_Appt_Confirmation_#);
PARAMETER(DTL.OHE_Backhaul_Container#);
PARAMETER(DTL.OHE_Backhaul_Chassis_#);
PARAMETER(DTL.OHE_Transload_Container#);
PARAMETER(DTL.OHE_Pier_Pass_Invoice);
PARAMETER(DTL.OHE_Carrier_Nm);
PARAMETER(DTL.OHE_Appt_Confirmation_Nm);
PARAMETER(DTL.OHE_Backhaul_Comment);
PARAMETER(DTL.Letter_of_Credit_Number);
PARAMETER(DTL.OHE_Backhaul_Return_to_Co);
PARAMETER(DTL.LD_Stop_Drop);
PARAMETER(DTL.OHE_Unused_Number_3_0);
PARAMETER(DTL.OHE_Pier_Pass_Fee_Amount);
PARAMETER(DTL.OHE_Port_Check_Fee_Amount);
PARAMETER(DTL.OHE_Port_Cut_Time);
PARAMETER(DTL.OHE_Backhaul_Truck_Number);
PARAMETER(DTL.OHE_Load_Sched_Seq_Num);
PARAMETER(DTL.Original_Appointment_Date);
PARAMETER(DTL.Original_Appointment_Time);
PARAMETER(DTL.OHE_PowerPro_Load#_Outbnd);
PARAMETER(DTL.OHE_PowerPro_Load#_Bckhl);
PARAMETER(DTL.OHE_Unused_Numeric_9_0_3);
PARAMETER(DTL.OHE_Orig_ABS_Freight_Rate);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Job_Time);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Job_Date);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(CRT Existing OHE       CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC1816936;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.Shipping_Line);
 PARAMETER(PAR.Port_Delv_Terminal);
 PARAMETER(PAR.OHE_City);
 PARAMETER(PAR.OHE_Vessel_Airline);
 PARAMETER(PAR.OHE_Voyage_Flight);
 PARAMETER(PAR.OHE_Booking_Number);
 PARAMETER(PAR.OHE_Discharge_Port_Airprt);
 PARAMETER(PAR.OHE_Sail_Flight_Date);
 PARAMETER(PAR.OHE_Port_Cut_Date);
 PARAMETER(PAR.OHE_Arrival_Date);
 PARAMETER(PAR.OHE_Late_Delivery_Code);
 PARAMETER(PAR.OHE_Ship_Status);
 PARAMETER(PAR.OHE_Container_Number);
 PARAMETER(PAR.OHE_Comment_1);
 PARAMETER(PAR.OHE_Comment_2);
 PARAMETER(PAR.OHE_Unused_Number_1_11_0);
 PARAMETER(PAR.OHE_Unused_Number_2_11_0);
 PARAMETER(PAR.OHE_Unused_Number_3_11_0);
 PARAMETER(PAR.OHE_Unused_Number_4_11_0);
 PARAMETER(PAR.OHE_HPB_RIN_Equiv_Value);
 PARAMETER(PAR.OHE_HPB_RIN_Price);
 PARAMETER(PAR.Transload_Terminal_Fees);
 PARAMETER(PAR.OHE_Est_Arrv_at_Dest_Date);
 PARAMETER(PAR.OHE_Backhaul_ETA_RtrnDate);
 PARAMETER(PAR.OHE_Port_Pier_Paid_Date);
 PARAMETER(PAR.OHE_Actual_Ship_Date);
 PARAMETER(PAR.OHE_Carrier_SCAC_Code);
 PARAMETER(PAR.OHE_Spot_Buy);
 PARAMETER(PAR.OHE_PO_ACK_Flag);
 PARAMETER(PAR.OHE_Override_Type_Code);
 PARAMETER(PAR.OHE_Backhaul_Status);
 PARAMETER(PAR.OHE_Backhaul_ETA_AM_PM);
 PARAMETER(PAR.OHE_Load_Haul_Type);
 PARAMETER(PAR.OHE_Backhaul_Carrier_Code);
 PARAMETER(PAR.OHE_Bookings_Confirmed);
 PARAMETER(PAR.OHE_EDI_Error_Reasons);
 PARAMETER(*MISSING);
 PARAMETER(PAR.HPB_COA_Batch_Number);
 PARAMETER(PAR.Delivery_P_O_Number);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Job_Time);
 PARAMETER(PAR.User_Id);
 PARAMETER(PAR.Job_Name);
 PARAMETER(PAR.Job_Date);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

 }

 //?USER: Processing before Data update

 // DB1.Job Time = JOB.*Job time
 DB1.Job_Time = JOB.*Job_time;

 // DB1.Job Date = JOB.*Job date
 DB1.Job_Date = JOB.*Job_date;

 // DB1.Job Name = JOB.*PROGRAM
 DB1.Job_Name = JOB.*PROGRAM;

 // DB1.User Id = JOB.*USER
 DB1.User_Id = JOB.*USER;

 //?USER: Processing after Data update

 CASE;

 // IF PAR.OHE Arrival Date is Entered
 IF PAR.OHE_Arrival_Date <> *ZERO;

 EXECUTE FUNCTION(Upd Arrival Date      RT) TYPE(RTVOBJ) FILE(OMHSTPP)           AC1919909;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.OHE_Arrival_Date);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.LD Arrival Date NE PAR.LD Arrival Date
  IF DB1.LD_Arrival_Date <> PAR.LD_Arrival_Date;

  EXECUTE FUNCTION(Chg Arrival Date      CH) TYPE(CHGOBJ) FILE(OMHSTPP)           AC1919910;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.LD_Arrival_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

 }

 ENDIF;

}


//?USER: Exit program processing

//?** Re-Calculate the total load miles using the updated sail port
//?** city. Update the load header.
//?** Total Load Miles will be zeros if any leg of the journey
//?** is missing a Miles Between Cities record.
//?** Include Override Total Load Miles. If entered, they will
//?** take precedence                    E00207 08/12/2008
// Call program CLC Total Load Miles   XF.
CALL PROGRAM(CLC Total Load Miles   XF) ('PDW3XFR');
PARAMETER(PAR.Load_ID);
PARAMETER(WRK.Total_Load_Miles);
PARAMETER(WRK.Override_Total_Load_Miles);

// Call program CHG Total Load Miles   XF.
CALL PROGRAM(CHG Total Load Miles   XF) ('PMFSXFR');
PARAMETER(PAR.Load_ID);
PARAMETER(WRK.Total_Load_Miles);
PARAMETER(WRK.Override_Total_Load_Miles);

//?10/15/09 PKD/RMC E00495
// Call program CLC Deadline Date/Time XF.
CALL PROGRAM(CLC Deadline Date/Time XF) ('PMP9XFR');
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.Deadline_Departure_Date);
PARAMETER(LCL.Deadline_Departure_Time);
PARAMETER(LCL.Requested_Delivery_Date);

EXECUTE FUNCTION(CHG Deadline Dep D/T   CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1493670;
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.Deadline_Departure_Date);
PARAMETER(LCL.Deadline_Departure_Time);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(CHG Deadline Date/Time RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1496989;
PARAMETER(PAR.Load_ID);
PARAMETER(*ZERO);
PARAMETER(LCL.Deadline_Departure_Date);
PARAMETER(LCL.Deadline_Departure_Time);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 QUIT;

 //?USER: Process Data record

 EXECUTE FUNCTION(CHG Deadline Date/Time CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1496963;
 PARAMETER(PAR.Load_ID);
 PARAMETER(DB1.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.Deadline_Depart_DT_HDR);
 PARAMETER(PAR.Deadline_Depart_Time_HDR);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(Upd Deadline Dte/Tme  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1648968;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Deadline_Depart_DT_HDR);
  PARAMETER(DB1.Deadline_Depart_Time_HDR);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Deadline Dte/Tme  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1648969;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

 }

}


CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// PAR.USR Exit Program = CND.yes
PAR.USR_Exit_Program = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.USR Carrier Code is entered
IF PAR.USR_Carrier_Code <> *BLANK;

// WRK.Job Name CDE = JOB.*JOB
WRK.Job_Name_CDE = JOB.*JOB;

// Call program PMT Fax Load Confirmtn PV.
CALL PROGRAM(PMT Fax Load Confirmtn PV) ('POICPVR');
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.USR_Company_Number);
PARAMETER(*MISSING);
PARAMETER(PAR.USR_Carrier_Code);

ENDIF;

ENDIF;

