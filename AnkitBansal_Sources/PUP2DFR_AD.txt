// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PUP2DFR
// ?Date: 14.08.2025 Time: 03:51:04
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('C/S');
PARAMETER(NLL.Company_Number);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(NLL.Allow_Multi_Company);
PARAMETER(NLL.Default_Printer);
PARAMETER(NLL.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PGM.*Scan limit = CND.999999
PGM.*Scan_limit = 999999;

//?USER: Initialize subfile record from DBF record

//?Set Process Sts Text.
CASE;

// IF RCD.ETL Process Status is Not Processed
IF RCD.ETL_Process_Status = *ZERO;

// RCD.Text USR 15 = CON.UnProc
RCD.Text_USR_15 = 'UnProc';

//?Set Process Sts Text.
// IF RCD.ETL Process Status is Processed
IF RCD.ETL_Process_Status = 1;

// RCD.Text USR 15 = CON.Proc
RCD.Text_USR_15 = 'Proc';

//?Set Process Sts Text.
// IF RCD.ETL Process Status is Error/Void
IF RCD.ETL_Process_Status = 2;

// RCD.Text USR 15 = CON.Error
RCD.Text_USR_15 = 'Error';

//?Set Process Sts Text.
// IF RCD.ETL Process Status is ReOpen Truck/ReOpen Order
IF RCD.ETL_Process_Status = 3;

// RCD.Text USR 15 = CON.ReOpen Trck/Ord
RCD.Text_USR_15 = 'ReOpen Trck/Ord';

//?Set Process Sts Text.
// IF RCD.ETL Process Status is Batch Selection
IF RCD.ETL_Process_Status = 4;

// RCD.Text USR 15 = CON.BatchS
RCD.Text_USR_15 = 'BatchS';

//?Set Process Sts Text.
// IF RCD.ETL Process Status is Not Sent-Voided
IF RCD.ETL_Process_Status = 5;

// RCD.Text USR 15 = CON.Voided
RCD.Text_USR_15 = 'Voided';

//?Set Process Sts Text.
// IF RCD.ETL Process Status is Ready to Send
IF RCD.ETL_Process_Status = 6;

// RCD.Text USR 15 = CON.RdytoSend
RCD.Text_USR_15 = 'RdytoSend';

//?Set Process Sts Text.
// IF RCD.ETL Process Status is Send InProcess
IF RCD.ETL_Process_Status = 7;

// RCD.Text USR 15 = CON.SndInProcess
RCD.Text_USR_15 = 'SndInProcess';

//?Set Process Sts Text.
// IF RCD.ETL Process Status is Sent
IF RCD.ETL_Process_Status = 9;

// RCD.Text USR 15 = CON.Sent
RCD.Text_USR_15 = 'Sent';

//?Set Process Sts Text.
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Text USR 15 = CON.*BLANK
RCD.Text_USR_15 = *BLANK;

ENDIF;

//?Set Change Date.
CASE;

// IF RCD.ETL Change Date is Zero
IF RCD.ETL_Change_Date = *ZERO;

// RCD.Usr Date 1 = RCD.ETL Create Date
RCD.Usr_Date_1 = RCD.ETL_Create_Date;

//?Set Change Date.
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Usr Date 1 = RCD.ETL Change Date
RCD.Usr_Date_1 = RCD.ETL_Change_Date;

ENDIF;

//?Set Change Time.
CASE;

// IF RCD.ETL Change time is Zero
IF RCD.ETL_Change_time = *ZERO;

// RCD.USR Time = RCD.ETL Create Time
RCD.USR_Time = RCD.ETL_Create_Time;

//?Set Change Time.
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.USR Time = RCD.ETL Change time
RCD.USR_Time = RCD.ETL_Change_time;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?Prompt Market Code
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Commodity Market Code
AND PGM.*Cursor_field = CTL.Commodity_Market_Code;

// Call program SEL Commod. Mkts Actve SR.
CALL PROGRAM(SEL Commod. Mkts Actve SR) ('PDEDSRR');
PARAMETER(CTL.Commodity_Market_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Prompt Commodity Price Group
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Commodity Price Group
AND PGM.*Cursor_field = CTL.Commodity_Price_Group;

// Call program SEL Commod Grp Active  SR.
CALL PROGRAM(SEL Commod Grp Active  SR) ('PDECSRR');
PARAMETER(CTL.Commodity_Price_Group);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?F5=Refresh.
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F10=Process All Unprocessed.
CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

EXECUTE FUNCTION(Val Unprocess Rcd ExistRT) TYPE(RTVOBJ) FILE(PUBZCPP)          AC2183277;
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// Call program UPD Comdty Mkt Prc IntfXF.
SBMJOB;
CALL PROGRAM(UPD Comdty Mkt Prc IntfXF) ('PUP5XFR');
SBMJOBOVR JOB(CMDMKTPRIF);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

// Send information message - '&1'
MESSAGE(USR4976 *INFO);
MSGPARM('Job submitted.');

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Generic Message 80 USR = CONCAT(CON.There are no unprocessed,CON.records to process.,CON.1)
LCL.Generic_Message_80_USR = 'There are no unprocessed' + 'records to process.' (1);

// Send information message - '&1'
MESSAGE(USR4976 *INFO);
MSGPARM(LCL.Generic_Message_80_USR);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?F21=Email List.
CASE;

// IF CTL.*CMD key is *Print 21
IF CTL.*CMD_key = '21';

//?Must Enter Market Price Date.
CASE;

// IF CTL.Market Price Date is Not Entered
IF CTL.Market_Price_Date = *ZERO;

// LCL.Generic Message 80 USR = CONCAT(CON.Must enter Market Price,CON.Date.,CON.1)
LCL.Generic_Message_80_USR = 'Must enter Market Price' + 'Date.' (1);

// Send error message - '&1'
ERROR(USR5117);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(CTL.Market_Price_Date);

QUIT;

ENDIF;

// LCL.Email Address = CON.*BLANK
LCL.Email_Address = *BLANK;

// Call program Pmt Enter Email Addr  PV.
CALL PROGRAM(Pmt Enter Email Addr  PV) ('POWGPVR');
PARAMETER(LCL.Email_Address);

//?Email Report via SEQUEL.
CASE;

// IF LCL.Email Address is Entered
IF LCL.Email_Address <> *BLANK;

//?Format Data.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Date (Alpha) USR = CVTVAR(CTL.Market Price Date)
LCL.Date_Alpha_USR = CVTVAR(CTL.Market_Price_Date);

EXECUTE FUNCTION(CNV cyymmdd to mm/dd/yy) TYPE(EXCINTFUN)                       AC2090454;
PARAMETER(CTL.Market_Price_Date);
PARAMETER(LCL.Date_Out_8_USR);
{
 //?Execute internal function

 //?convert numeric date to character date.
 // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
 PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

 //?extract month, day, and year.
 // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
 PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

 // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
 PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

 // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
 PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

 //?reconstruct date in mm/dd/yy format.
 // LCL.Date Out (8) USR = CONCAT(PAR.Month (Char) USR,CON./,CND.*None)
 LCL.Date_Out_8_USR = PAR.Month_Char_USR + '/' (*ZERO);

 // LCL.Date Out (8) USR = CONCAT(LCL.Date Out (8) USR,PAR.Day   (Char) USR,CND.*None)
 LCL.Date_Out_8_USR = LCL.Date_Out_8_USR + PAR.Day_Char_USR (*ZERO);

 // LCL.Date Out (8) USR = CONCAT(LCL.Date Out (8) USR,CON./,CND.*None)
 LCL.Date_Out_8_USR = LCL.Date_Out_8_USR + '/' (*ZERO);

 // PAR.Date Out (8) USR = CONCAT(LCL.Date Out (8) USR,PAR.Year  (Char) USR,CND.*None)
 PAR.Date_Out_8_USR = LCL.Date_Out_8_USR + PAR.Year_Char_USR (*ZERO);

}


// LCL.Email Message USR = CONCAT(CON.Commodity Market Price In,CON.terface by Market Date:,CON.*ZER
LCL.Email_Message_USR = 'Commodity Market Price In' + 'terface by Market Date:' (*ZERO);

// LCL.Email Message USR = CONCAT(LCL.Email Message USR,LCL.Date Out (8) USR,CON.1)
LCL.Email_Message_USR = LCL.Email_Message_USR + LCL.Date_Out_8_USR (1);

// Call program RTV Data Libraries     XF.
CALL PROGRAM(RTV Data Libraries     XF) ('CAQXXFR');
PARAMETER(LCL.Library_List_Code);
PARAMETER(LCL.@Library_List_Code);

//?If Not PROD Then Append 'TEST' to Email Message.
CASE;

// IF LCL.Library List Code is Not PRKFLIB
IF LCL.Library_List_Code <> 'PRKFLIB';

// LCL.Email Message USR = CONCAT(LCL.Email Message USR,CON.- TEST,CON.1)
LCL.Email_Message_USR = LCL.Email_Message_USR + '- TEST' (1);

ENDIF;

ENDIF;

// Execute command - 'EXECUTE SQL VIEW'
EXECUTE COMMAND(USR5179);
PARAMETER(LCL.Date_Alpha_USR);
PARAMETER(LCL.Email_Address);
PARAMETER(LCL.Email_Message_USR);

// Send information message - '&1'
MESSAGE(USR4976 *INFO);
MSGPARM('Job submitted.');

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?USER: Process subfile record (Post-confirm)

//?Opt 2=Reprocess.
CASE;

// IF RCD.*SFLSEL is *Change
IF RCD.*SFLSEL = '2';

EXECUTE FUNCTION(Chg Comdty Mkt Prc IntfCH) TYPE(CHGOBJ) FILE(PUBZCPP)          AC2182841;
PARAMETER(RCD.Commodity_Market_Code);
PARAMETER(RCD.Commodity_Price_Group);
PARAMETER(RCD.Market_Price_Date);
PARAMETER(RCD.Commodity_Market_Price);
PARAMETER(RCD.Projected_Market_Price);
PARAMETER(RCD.ETL_Record_Status);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Change Stamp      IF) TYPE(EXCINTFUN)                      AC2182822;
 PARAMETER(DB1.ETL_Change_Date);
 PARAMETER(DB1.ETL_Change_time);
 {
  //?Execute internal function

  // Call program RTV System Date/Time   UP.
  CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
  PARAMETER(LCL.System_Date_Nbr_USR);
  PARAMETER(LCL.System_Time_USR);

  // LCL.USR Internal D8# YYYYMMDD = LCL.System Date Nbr USR
  LCL.USR_Internal_D8#_YYYYMMDD = LCL.System_Date_Nbr_USR;

  // PAR.ETL Change Date = LCL.USR Internal D8# YYYYMMDD
  PAR.ETL_Change_Date = LCL.USR_Internal_D8#_YYYYMMDD;

  // PAR.ETL Change time = LCL.System Time USR
  PAR.ETL_Change_time = LCL.System_Time_USR;

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

