     h option(*SRCSTMT:*NODEBUGIO)
      *
      * SYSTEM:      Triumph Foods
      * PROGRAM:     TF406
      * TITLE:       Specify Options for Cash Distribution Balance Report
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     10/04/05
      *
      *
      * FUNCTION: This Specify uses an edit record format to allow the user
      *           to specify options for generating the report.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 11/06/06  LeAnne Ramsey
      *           Recompile only. New fields were added to TFP011-Cash Distribution Balance.
      *
      * 12/01/06  LeAnne Ramsey
      *           Added "period" parm to call to generic calendar program
      *           TF811.
      *
      * 04/09/09  LeAnne Ramsey
      *           Added "stop date" logic.
      *
      * 05/11/09  LeAnne Ramsey
      *           Changed the Print logic to match Meat Costing.
      *
      * 09/15/09  LeAnne Ramsey
      *           Recompile only. Fields added to TFP011-Cash Distribution Balance.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Ftfd406    cf   e             workstn infds(iofeed)
      *
      *
     Ftfl011b   if   e           k disk    rename(cbrec:cbrecb)
      *    Cash distribution balance
      *
      *
     Ftfl011c   if   e           k disk    rename(cbrec:cbrecc)
      *    Cash distribution balance
      *
      *
     Ftfl011e   if   e           k disk    rename(cbrec:cbrece)
      *    Cash distribution balance
      *
      *
     Ftfl011f   if   e           k disk    rename(cbrec:cbrecf)
      *    Cash distribution balance
      *
      *
     Ftfp094    if   e           k disk
      *    Report type
      *
      *
     Ftfp095    if   e           k disk
      *    Include/exclude options
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  Compile time array for SBMJOB used in QCMDEXC
      *---------------------------------------------------------------
     D cmd             s              1    dim(80) ctdata perrcd(80)
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D maxmsg          s              2  0  inz(20)
      *
      *
      * Workfields
      *
     D wkrcexfl        s                   like(cbrcexfl)
      *
      *
      * Workfields for date manipulation
      *
     D wkcymdiso       s               d   datfmt(*iso)
     D wkmdydt         s               d   datfmt(*mdy)
     D wkmdy           s              6  0
     D wkdt            s              8  0
      *
      * Parm fields
      *
     D xxrtcd          s                   like(d1rtcd)
     D xxrtds          s                   like(d1rtds)
      *
     D xxiecd          s                   like(d1iecd)
     D xxieds          s                   like(d1ieds)
      *
     D xxdt            s              8  0
     D xxsatdt         s              8  0
     D xxsundt         s              8  0
     D xxyr            s              4  0
     D xxpe            s              2  0
     D xxwk            s              2  0
      *
      *  Parms for use with QCMDEXC.  'LENGTH' is the length of the
      *  command that will be issued with QCMDEXC.  QCMDEXC requires
      *  the field containing length to be defined as 15 with 5 decimal
      *  positions.  The field 'CMDSBM' will hold the values of the
      *  submit job command when passed as a parm on the call to
      *  QCMDEXC.
      *
     D length          s             15  5 inz(80)
     D cmdsbm          s             80
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      * Data areas
      *---------------------------------------------------------------
      *
      *---------------------------------------------------------------
      * Local data area.
      *---------------------------------------------------------------
      *
     Dlda             uds                  dtaara(*lda)
      *
     D  ldfmdy                 1      6  0
     D  ldfdt                  7     14  0
     D  ldfwemdy              15     20  0
     D  ldfwedt               21     28  0
      *
     D  ldiecd                29     29
     D  ldieds                30     55
      *
     D  ldrtcd                56     56
     D  ldrtds                57     73
      *
     D  ldtmdy                74     79  0
     D  ldtdt                 80     87  0
      *
     D  ldoutq               401    410
     D  ldhold               411    414
     D  ldsave               415    418
     D  ldcopy               419    419  0
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
     C
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the error
      * message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to CRT.
      *
     C                   write     tf406k1
     C                   write     tf406ec
     C                   exfmt     tf406r1
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
      *
     C                   when      *in17 = *on                                  F17-print options
     C                   call      'RO890'
     C                   eval      routne = scrn1
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                       API
     C                   eval      routne = scrn1
     C                   other
      *
     C                   eval      routne = edit1
     C                   endsl
      *
      * Bring in the LDA to pick up any printer changes the user may
      * have made from called programs
      *
     C                   in        lda
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Edit screen 1 input fields
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * Validate fields:
      *   1) exempt/non-exempt/both
      *   2) report type
      *   3) start date (aka: from date)
      *   4) stop date  (aka: to date)
      *
     C                   exsr      $iecd
     C                   exsr      $rtcd
     C                   exsr      $fmdy
     C                   exsr      $tmdy
      *
      * If there are no errors, execute the subroutine to submit the report.
      *
     C                   if        error = 0 and
     C                             *in08 = *on
     C                   exsr      $proc1
     C                   endif
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Validate Start Date (aka: From Date)
      *----------------------------------------------------------------
      *
      * Validations:
      *  1) optional
      *  2) cannot be negative
      *  3) must be a valid date
      *
      *
     C     $fmdy         begsr
      *
     C                   z-add     0             ldfmdy
     C                   z-add     0             ldfdt
     C                   z-add     0             ldfwemdy
     C                   z-add     0             ldfwedt
      *
     C                   z-add     0             d1fwemdy
      *
     C                   select
     C                   when      d1fmdy = 0
      *
     C                   when      d1fmdy < 0
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 d1fmdy                 92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Flip the date from MMDDYY to CCYYMMDD and go find the 'week-ending date'
      * assocated with this date.
      *
     C     *mdy          move      d1fmdy        wkcymdiso
     C                   move      wkcymdiso     wkdt
     C                   z-add     wkdt          ldfdt
     C                   z-add     d1fmdy        ldfmdy
      *
     C                   exsr      $wedt
      *
     C                   if        wkmdy = 0
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09229'
     C                   endif
     C                   else
     C                   z-add     wkmdy         d1fwemdy
     C                   z-add     wkmdy         ldfwemdy
     C                   z-add     xxsatdt       ldfwedt
     C                   endif
      *
     C                   endif                                                  If bad date
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate Stop Date
      *----------------------------------------------------------------
      *
      * Validations:
      *  1) optional
      *  2) cannot be negative
      *  3) must be a valid date
      *
     C     $tmdy         begsr
      *
     C                   z-add     99999999      ldtdt
     C                   z-add     999999        ldtmdy
      *
      *
     C                   select
     C                   when      d1tmdy = 0
      *
     C                   when      d1tmdy < 0
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 d1tmdy                 92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Flip the date from MMDDYY to CCYYMMDD.
      *
     C     *mdy          move      d1tmdy        wkcymdiso
     C                   move      wkcymdiso     wkdt
     C                   z-add     wkdt          ldtdt
     C                   z-add     d1tmdy        ldtmdy
      *
     C                   if        *in32 = *off and *in33 = *off and
     C                             ldtdt < ldfdt
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09233'
     C                   endif
     C                   endif
      *
     C                   endif                                                  If bad date
     C                   endsl
      *
      * If there are no errors on Start/Stop dates and the user did not
      * enter a "start" date, calc a "start" date. Then, if the user did key
      * a "stop" date, go find another WeekEnding date and, possibly, override
      * the "start" date just calculated!
      *
     C                   if        *in32 = *off and *in33 = *off and d1fmdy = 0
     C                   exsr      $calcstart
     C                   if        d1tmdy <> 0
     C                   exsr      $overstart
     C                   endif
     C                   endif
      *
     C                   endsr
      /eject
      *------------------------------------------------------------------------------
      * Find a default Start WeekEnding Date when the user did not key a Start Date
      *------------------------------------------------------------------------------
      *
     C     $calcstart    begsr
      *
      * When the user did not enter a Start, get the Week-Ending date from
      * the first Cash Distribution Balance record that still has a balance (ie:
      * the Completed Date is 0). Base this 'retrieval' on whether the user has
      * selected Exempt, Non-Exempt or Both.
      *
     C                   select
     C                   when      d1iecd = 'E' or d1iecd = 'N'
      *
     C                   if        d1iecd = 'E'
     C                   move      yes           wkrcexfl
     C                   else
     C                   move      no            wkrcexfl
     C                   endif
      *
     C     wkrcexfl      setll     tfl011e
     C                   read      tfl011e                                92
     C                   other
      *
     C     *loval        setll     tfl011c
     C                   read      tfl011c                                92
     C                   endsl
      *
     C                   if        *in92 = *off                                 If hit
     C                   z-add     cbwedt        ldfdt
     C                   z-add     cbwedt        ldfwedt
      *
      * Flip date from CCYYMMDD format to MMDDYY format.
      *
     C     *iso          test(d)                 ldfwedt                92
     C                   if        *in92 = *off                                 If good
     C     *iso          move      ldfwedt       wkmdydt
     C                   move      wkmdydt       ldfwemdy
     C                   move      wkmdydt       d1fwemdy
     C                   endif                                                  If good
      *
     C                   endif                                                  If hit
      *
     C                   endsr
      /eject
      *------------------------------------------------------------------------------
      * Override the default Start WeekEnding Date when the user keyed a STOP Date
      *------------------------------------------------------------------------------
      *
     C     $overstart    begsr
      *
      * Retrieve the Sunday on/before the Start Date entered by the user.
      *
     C                   call      'TF819'
     C                   parm      ldtdt         xxdt
     C                   parm      0             xxsundt
      *
      *
      * Using this Sunday date
      *
     C                   select
     C                   when      d1iecd = 'E' or d1iecd = 'N'
      *
     C                   if        d1iecd = 'E'
     C                   move      yes           wkrcexfl
     C                   else
     C                   move      no            wkrcexfl
     C                   endif
      *
     C     key01         setll     tfl011f
     C     wkrcexfl      reade     tfl011f                                92
     C                   other
      *
     C     xxsundt       setll     tfl011b
     C                   read      tfl011b                                92
     C                   endsl
      *
      * Conditionally override the previously calculated "Start" date
      *
     C                   if        *in92 = *off and cbwedt < ldfwedt            If hit
     C                   z-add     cbwedt        ldfdt
     C                   z-add     cbwedt        ldfwedt
      *
      * Flip date from CCYYMMDD format to MMDDYY format.
      *
     C     *iso          test(d)                 ldfwedt                92
     C                   if        *in92 = *off                                 If good
     C     *iso          move      ldfwedt       wkmdydt
     C                   move      wkmdydt       ldfwemdy
     C                   move      wkmdydt       d1fwemdy
     C                   endif                                                  If good
      *
     C                   endif                                                  If hit
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate Exempt Records Option
      *----------------------------------------------------------------
      *
     C     $iecd         begsr
      *
     C                   move      *blank        d1ieds
      *
     C                   select
     C                   when      d1iecd = *blank
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09001'     mgid(e)
     C                   endif
     C                   other
      *
     C     d1iecd        chain     tfp095                             92
     C                   if        *in92 = *off                                 If ok
     C                   move      ieieds        d1ieds
     C                   else
      *
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08045'     mgid(e)
     C                   clear                   mgw
     C                   movea     d1iecd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If ok
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate Report Type
      *----------------------------------------------------------------
      *
     C     $rtcd         begsr
      *
     C                   move      *blank        d1rtds
      *
     C                   select
     C                   when      d1rtcd = *blank
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09001'     mgid(e)
     C                   endif
     C                   other
      *
     C     d1rtcd        chain     tfp094                             92
     C                   if        *in92 = *off                                 If ok
     C                   move      rtrtds        d1rtds
     C                   else
      *
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08069'     mgid(e)
     C                   clear                   mgw
     C                   movea     d1rtcd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If ok
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Retrieve Week-ending date
      *----------------------------------------------------------------
      *
     C     $wedt         begsr
      *
      * Find Saturday subsequent to Start Date using the generic program.
      *
     C                   call      'TF811'
     C                   parm      wkdt          xxdt
     C                   parm      0             xxsatdt
     C                   parm      0             xxyr
     C                   parm      0             xxpe
     C                   parm      0             xxwk
      *
      *
      * Get returned 'week-ending date' into MMDDYY format.
      *
     C                   z-add     0             wkmdy
      *
     C     *iso          test(d)                 xxsatdt                92
     C                   if        *in92 = *off                                 If good
     C     *iso          move      xxsatdt       wkmdydt
     C                   move      wkmdydt       wkmdy
     C                   endif                                                  If good
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * F4 prompt on screen 1
      *----------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      * Exempt/Non-Exempt/Both
      *
     C                   select
     C                   when      fld = 'D1IECD'
     C                   call      'TF518'
     C                   parm      *blank        xxiecd
     C                   parm      *blank        xxieds
     C                   seton                                        50
     C                   if        xxiecd <> *blank
     C                   move      xxiecd        d1iecd
     C                   move      xxieds        d1ieds
     C                   endif
      * Report Type
     C                   when      fld = 'D1RTCD'
     C                   call      'TF519'
     C                   parm      *blank        xxrtcd
     C                   parm      *blank        xxrtds
     C                   seton                                        51
     C                   if        xxrtcd <> *blank
     C                   move      xxrtcd        d1rtcd
     C                   move      xxrtds        d1rtds
     C                   endif
     C                   other
      *
      * F4 not valid for this field, so issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09011'
     C                   endif
      *
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Process user's request
      *---------------------------------------------------------------
      *
      * This subroutine is only executed if the user submits the listing
      *
     C     $proc1        begsr
      *
      * Move remaining submission values into LDA
      *
     C                   move      d1rtcd        ldrtcd
     C                   move      d1rtds        ldrtds
      *
     C                   move      d1iecd        ldiecd
     C                   move      d1ieds        ldieds
     C                   out       lda
      *
      * Move the 80-character compile time array 'CMD' to an
      * 80-character field for passing as a parm with QCMDEXC.
      *
     C                   movea     cmd           cmdsbm
     C                   call      'QCMDEXC'
     C                   parm                    cmdsbm
     C                   parm                    length
      *
      * Issue the standard request submission message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09003'
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Seton last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *   none
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    wkrcexfl
     C                   kfld                    xxsundt
      *
      * Retrieve/initialize "printer" fields in the LDA
      *
     C                   call      'RO891CL'
     C                   in        lda
      *
      * Start date (from date)
     C                   z-add     0             ldfmdy
     C                   z-add     0             ldfdt
     C                   z-add     0             ldfwemdy
     C                   z-add     0             ldfwedt
      *
      * Stop date (to date)
     C                   z-add     0             ldtmdy
     C                   z-add     0             ldtdt
     C                   out       lda
      *
      * Default screen selection to "Non-Exempt":
      *
     C                   move      'N'           d1iecd
     C     d1iecd        chain     tfp095                             92
     C                   if        *in92 = *off
     C                   move      ieieds        d1ieds
     C                   endif
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
      *****************************************************************
      * COMPILE TIME ARRAY 'CMD' USED IN QCMDEXC
      *****************************************************************
** CMD table 'CMD' submits listing when F8 selected
SBMJOB CMD(CALL PGM(TF406CL))  JOB(CASHBAL ) JOBQ(*JOBD)
