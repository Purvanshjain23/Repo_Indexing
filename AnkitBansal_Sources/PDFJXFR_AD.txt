// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDFJXFR
// ?Date: 14.08.2025 Time: 03:31:41
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(Upd Revalue Inv/Sls Pc RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1386170;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Revaluation_Eff_Date);
{
 //?USER: Initialize routine

 EXECUTE FUNCTION(RTV Period & Week      RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1293012;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Revaluation_Eff_Date);
 PARAMETER(WRK.Accounting_Year_Code);
 PARAMETER(WRK.Accounting_Period_Code);
 PARAMETER(WRK.OM_Week);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv From Week/To Week  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235754;
 PARAMETER(PAR.Company_Number);
 PARAMETER(WRK.Accounting_Year_Code);
 PARAMETER(WRK.Accounting_Period_Code);
 PARAMETER(WRK.OM_Week);
 PARAMETER(PAR.USR_From_Date);
 PARAMETER(PAR.USR_To_Date);
 {
  //?USER: Initialize routine

  // WRK.USR number = CON.1
  WRK.USR_number = 1;

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF WRK.USR number is Equal to 1
  IF WRK.USR_number = 1;

  // PAR.USR From Date = DB1.Plant Date of Last Order
  PAR.USR_From_Date = DB1.Post_to_G_L_Date;

  // PAR.USR To Date = DB1.Plant Date of Last Order
  PAR.USR_To_Date = DB1.Post_to_G_L_Date;

  // WRK.USR number = WRK.USR number + CON.1
  WRK.USR_number = WRK.USR_number + 1;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.USR To Date = DB1.Plant Date of Last Order
  PAR.USR_To_Date = DB1.Post_to_G_L_Date;

  ENDIF;

 }

 //?USER: Process Data record

 // WRK.Weight Billed = CON.*ZERO
 WRK.Weight_Billed = *ZERO;

 // WRK.FOB Gross Amount = CON.*ZERO
 WRK.FOB_Gross_Amount = *ZERO;

 // PAR.Unit Cost Per Pound = CON.*ZERO
 PAR.Unit_Cost_Per_Pound = *ZERO;

 EXECUTE FUNCTION(Rtv Dol/Pnds for Dates RT) TYPE(RTVOBJ) FILE(OMHSTPP)          AC1315796;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(WRK.Weight_Billed);
 PARAMETER(DB1.Item_Code);
 PARAMETER(WRK.FOB_Gross_Amount);
 PARAMETER(PAR.USR_From_Date);
 PARAMETER(PAR.USR_To_Date);
 {
  //?USER: Initialize routine

  // PAR.Weight Billed = CON.*ZERO
  PAR.Weight_Billed = *ZERO;

  // PAR.FOB Gross Amount = CON.*ZERO
  PAR.FOB_Gross_Amount = *ZERO;

  //?USER: Process Data record

  //?Assumes Position to first date
  CASE;

  // IF DB1.Actual Shipped Date GE PAR.Actual Shipped Date
  IF DB1.Actual_Shipped_Date >= PAR.Actual_Shipped_Date;

  // AND DB1.Actual Shipped Date LE PAR.USR To Date
  AND DB1.Actual_Shipped_Date <= PAR.USR_To_Date;

  EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(PAR.Billing_Activity_Type);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.Billing Activity Type is Invoice
  IF PAR.Billing_Activity_Type = '1';

  // PAR.Weight Billed = PAR.Weight Billed + DB1.Weight Billed
  PAR.Weight_Billed = PAR.Weight_Billed + DB1.Weight_Billed;

  // PAR.FOB Gross Amount = PAR.FOB Gross Amount + DB1.FOB Gross Amount
  PAR.FOB_Gross_Amount = PAR.FOB_Gross_Amount + DB1.FOB_Gross_Amount;

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  QUIT;

  ENDIF;

 }

 CASE;

 // IF WRK.Weight Billed is Not equal zero
 IF WRK.Weight_Billed <> *ZERO;

 // PAR.Unit Cost Per Pound = WRK.FOB Gross Amount / WRK.Weight Billed *Rounded
 PAR.Unit_Cost_Per_Pound = WRK.FOB_Gross_Amount / WRK.Weight_Billed 'H';

 //?If unit cost/LB is less than zero make it positive
 CASE;

 // IF PAR.Unit Cost Per Pound is Less than zero
 IF PAR.Unit_Cost_Per_Pound < *ZERO;

 // PAR.Unit Cost Per Pound = CON.*ZERO - PAR.Unit Cost Per Pound
 PAR.Unit_Cost_Per_Pound = *ZERO - PAR.Unit_Cost_Per_Pound;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(RTV Desc,U/Ms,CWT,PrcM RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1315777;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(WRK.Description_Line_One);
 PARAMETER(WRK.Description_Line_Two);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Conversion_Factor_1);
 PARAMETER(PAR.Operation_Factor_1);
 PARAMETER(PAR.UOM_Second);
 PARAMETER(PAR.Conversion_Factor_2);
 PARAMETER(PAR.Operation_Factor_2);
 PARAMETER(PAR.UOM_Third);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Production_Date_Control);
 PARAMETER(PAR.Catch_Weight_Status);
 PARAMETER(PAR.Default_Commod_Mark_basis);
 PARAMETER(PAR.Price_Method_Default);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?If market price is not equal to zero then update price
 CASE;

 // IF PAR.Unit Cost Per Pound NE WRK.ZERO
 IF PAR.Unit_Cost_Per_Pound <> WRK.ZERO;

 // AND PAR.Unit Cost Per Pound NE DB1.Unit Cost Per Pound
 AND PAR.Unit_Cost_Per_Pound <> DB1.Unit_Cost_Per_Pound;

 EXECUTE FUNCTION(Upd Cost From Revalue  CH) TYPE(CHGOBJ) FILE(CAB0REP)          AC1316457;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER('A');
 PARAMETER('RV');
 PARAMETER(JOB.*Job_date);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Cost_Per_Pound);
 PARAMETER('LB');
 PARAMETER(PAR.Catch_Weight_Status);
 PARAMETER(PAR.Revaluation_Eff_Date);
 PARAMETER('S');
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  // PAR.Shift Number = CON.1
  PAR.Shift_Number = 1;

  // PGM.*Record Data Changed = CND.*YES
  PGM.*Record_Data_Changed = 'Y';

  // DB1.Last Cost = DB1.Unit Cost
  DB1.Last_Cost = DB1.Unit_Cost_Per_Pound;

  // DB1.Last Revaluation Cost = DB1.Revaluation Cost
  DB1.Last_Revaluation_Cost = DB1.Revaluation_Cost;

  // DB1.Last Revaluation Eff Date = DB1.Revaluation Eff. Date
  DB1.Last_Revaluation_Eff_Date = DB1.Revaluation_Eff_Date;

  // DB1.Unit Cost Per Pound = PAR.USR Transaction-Unit Cost
  DB1.Unit_Cost_Per_Pound = PAR.USR_Transaction_Unit_Cost;

  // DB1.Revaluation Cost = PAR.USR Transaction-Unit Cost
  DB1.Revaluation_Cost = PAR.USR_Transaction_Unit_Cost;

  // DB1.Revaluation Eff. Date = PAR.Revaluation Eff. Date
  DB1.Revaluation_Eff_Date = PAR.Revaluation_Eff_Date;

  // DB1.Revaluation Cost Type = PAR.Revaluation Cost Type
  DB1.Revaluation_Cost_Type = PAR.Revaluation_Cost_Type;

  //?Update IC Item Balance Detail
  EXECUTE FUNCTION(Upd Value From Revalue RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1316466;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Inventory_Trans_ID);
  PARAMETER(PAR.Inventory_Trans_Type);
  PARAMETER(PAR.Transaction_Date_Code);
  PARAMETER(PAR.UOM_Transaction);
  PARAMETER(PAR.USR_Transaction_Unit_Cost);
  PARAMETER(PAR.UOM_Cost);
  PARAMETER(PAR.Shift_Number);
  PARAMETER(PAR.Catch_Weight_Status);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  {
   //?USER: Process Data record

   // PAR.Value of On Hand Inventor = PAR.USR Transaction-Unit Cost * DB1.Quantity on
   PAR.Value_of_On_Hand_Inventor = PAR.USR_Transaction_Unit_Cost
   * DB1.Quantity_on_Hand_Weight 'H';

   // PAR.Extended Amount = PAR.Value of On Hand Inventor - DB1.Value of On Hand Inven
   PAR.Extended_Amount = PAR.Value_of_On_Hand_Inventor - DB1.Value_of_On_Hand_Inventor;

   EXECUTE FUNCTION(Chg Item Bal. Detail   CH) TYPE(CHGOBJ) FILE(CAB1REP)          AC1120963;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Physical_Count_Weight);
   PARAMETER(DB1.Physical_Count_Qty_UOM1);
   PARAMETER(DB1.Physical_Count_Qty_UOM2);
   PARAMETER(DB1.Physical_Count_Qty_UOM3);
   PARAMETER(DB1.Physical_Count_Status);
   PARAMETER(DB1.Quantity_on_Hand_Weight);
   PARAMETER(DB1.Quantity_on_Hand_UOM1);
   PARAMETER(DB1.Quantity_on_Hand_UOM2);
   PARAMETER(DB1.Quantity_on_Hand_UOM3);
   PARAMETER(DB1.Quantity_In_Chill);
   PARAMETER(DB1.Weight_In_Chill);
   PARAMETER(DB1.Update_Exception_Status);
   PARAMETER(DB1.Physical_Start_Weight);
   PARAMETER(DB1.Physical_Start_UOM1);
   PARAMETER(DB1.Physical_Start_UOM2);
   PARAMETER(DB1.Physical_Start_UOM3);
   PARAMETER(DB1.Physical_Start_Date);
   PARAMETER(DB1.Unit_Cost_Per_Pound);
   PARAMETER(DB1.Last_Cost);
   PARAMETER(PAR.Value_of_On_Hand_Inventor);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // DB1.Job Name = JOB.*PROGRAM
    DB1.Job_Name = JOB.*PROGRAM;

   }

   //?Create transaction detail
   EXECUTE FUNCTION(Rtv Next Sequence No.  RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1304410;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.Inventory_Trans_ID);
   PARAMETER(PAR.Inventory_Trans_Type);
   PARAMETER(PAR.Transaction_Date_Code);
   PARAMETER(PAR.ITD_Sequence_Number);
   {
    //?USER: Processing if Data record not found

    // PAR.ITD Sequence Number = CON.1
    PAR.ITD_Sequence_Number = 1;

    //?USER: Process Data record

    // PAR.ITD Sequence Number = DB1.ITD Sequence Number + CON.1
    PAR.ITD_Sequence_Number = DB1.ITD_Sequence_Number + 1;

    QUIT;

   }

   EXECUTE FUNCTION(Crt IC Trans. Detail   CR) TYPE(CRTOBJ) FILE(CAB7CPP)          AC1122298;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.Inventory_Trans_ID);
   PARAMETER(PAR.Inventory_Trans_Type);
   PARAMETER(PAR.Transaction_Date_Code);
   PARAMETER(PAR.ITD_Sequence_Number);
   PARAMETER(*ZERO);
   PARAMETER(DB1.Production_Date);
   PARAMETER(PAR.UOM_Transaction);
   PARAMETER('IC');
   PARAMETER('Revalue Inventory');
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.UOM_Cost);
   PARAMETER(PAR.Extended_Amount);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Shift_Number);
   PARAMETER(DB1.Label_Date);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER('A');
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    //?USER: Processing after Data update

    // Call program Crt Export Rate Dtl   XF.
    CALL PROGRAM(Crt Export Rate Dtl   XF) ('POO5XFR');
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Inventory_Trans_ID);
    PARAMETER(DB1.Inventory_Trans_Type);
    PARAMETER(DB1.Transaction_Date_Code);
    PARAMETER(DB1.Sequence_Number);
    PARAMETER(DB1.Production_Date);
    PARAMETER(DB1.UOM_Transaction);
    PARAMETER(DB1.Item_Transaction_Source);
    PARAMETER(DB1.Description);
    PARAMETER(DB1.Transaction_Quantity);
    PARAMETER(DB1.Transaction_Weight);
    PARAMETER(DB1.USR_Transaction_Unit_Cost);
    PARAMETER(DB1.UOM_Cost);
    PARAMETER(DB1.Extended_Amount);
    PARAMETER(DB1.Ticket_Number);
    PARAMETER(DB1.GL_Document_Number);
    PARAMETER(DB1.GL_Update_Status);
    PARAMETER(DB1.Reason_Code);
    PARAMETER(DB1.Reference_Number_Code);
    PARAMETER(DB1.Lot_ID);
    PARAMETER(DB1.Transfer_Batch_Number);
    PARAMETER(DB1.Transfer_Batch_Sequence);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Item_Structure_Class_Code);
    PARAMETER(DB1.Item_Structure_Group_Code);
    PARAMETER(DB1.Item_Structure_Type_Code);
    PARAMETER(DB1.Employee_Badge_Number);
    PARAMETER(DB1.Production_Time);
    PARAMETER(DB1.Shift_Number);
    PARAMETER(DB1.Label_Date);
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.Job_Date);

   }

  }

  // DB1.Value of On Hand Inventor = DB1.On Hand Weight Summary * PAR.USR Transaction
  DB1.Value_of_On_Hand_Inventor = DB1.On_Hand_Weight_Summary
  * PAR.USR_Transaction_Unit_Cost 'H';

  EXECUTE FUNCTION(CRT PD Item Values     CR) TYPE(CRTOBJ) FILE(PDKZCPP)          AC1414720;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(JOB.*Job_date);
  PARAMETER(JOB.*Job_time);
  PARAMETER(PAR.USR_Transaction_Unit_Cost);
  PARAMETER(PAR.Pricing_Date_Used);
  PARAMETER(PAR.Revaluation_Cost_Type);
  PARAMETER(PAR.Revaluation_Eff_Date);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  {
   //?USER: Processing before Data update

   // Call program VAL Exists             XF.
   CALL PROGRAM(VAL Exists             XF) ('PDNHXFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Revaluation_Eff_Date);
   PARAMETER(DB1.Revaluation_Eff_Time);
   PARAMETER(PAR.*Return_code);

   // DOW PAR.*Return code is *Record already exists
   DOW PAR.*Return_code = 'Y2U0003';

   // DB1.Revaluation Eff. Time = DB1.Revaluation Eff. Time + CON.1
   DB1.Revaluation_Eff_Time = DB1.Revaluation_Eff_Time + 1;

   // Call program VAL Exists             XF.
   CALL PROGRAM(VAL Exists             XF) ('PDNHXFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Revaluation_Eff_Date);
   PARAMETER(DB1.Revaluation_Eff_Time);
   PARAMETER(PAR.*Return_code);

   ENDDO;

   // Execute function SET Off Indicator 98   US.
   EXECUTE FUNCTION(SET Off Indicator 98   US) TYPE(EXCUSRSRC) ('PDNLUFR');
   {
    C                     SETOF                     98    SETOFF INDIC
   }

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // DB1.Job Name = JOB.*PROGRAM
   DB1.Job_Name = JOB.*PROGRAM;

  }

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

}


