// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDUDPFR
// ?Date: 14.08.2025 Time: 12:04:32
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display 1 = CND.No
WRK.USR_Display_1 = 'N';

EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
PARAMETER(PAR.LSP_Prodution_Warehouse);
PARAMETER(LCL.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.First time flag 2     USR = CND.Yes
WRK.First_time_flag_2_USR = 'Y';

//?USER: Record selection processing

//?LSP Accounting Co selection
CASE;

// IF PAR.LSP Accounting Co EQ DB1.LSP Accounting Co
IF PAR.LSP_Accounting_Co = DB1.LSP_Accounting_Co;

// AND PAR.LSP Accounting Co EQ DB1.LSP Order Company
AND PAR.LSP_Accounting_Co = DB1.LSP_Order_Company;

CASE;

// IF PAR.LSP Prodution Warehouse NE DB1.LSP Order Warehouse
IF PAR.LSP_Prodution_Warehouse <> DB1.LSP_Order_Warehouse;

CASE;

// IF DB1.Multiple Warehouses is Multiple Warehouses f/Ld
IF DB1.Multiple_Warehouses = 'M';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?LSP Accounting Co selection
// IF PAR.LSP Accounting Co NE DB1.LSP Accounting Co
IF PAR.LSP_Accounting_Co <> DB1.LSP_Accounting_Co;

// AND PAR.LSP Accounting Co EQ DB1.LSP Order Company
AND PAR.LSP_Accounting_Co = DB1.LSP_Order_Company;

//?LSP Accounting Co selection
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Warehouse selection
CASE;

// IF DB1.Multiple Warehouses is Multiple Warehouses f/Ld
IF DB1.Multiple_Warehouses = 'M';

CASE;

// IF LCL.Warehouse Type is Frozen
IF LCL.Warehouse_Type = 'FZ';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Order tied to a load.
CASE;

// IF PAR.Untied Orders Flag USR is No
IF PAR.Untied_Orders_Flag_USR = 'N';

//?Select Tied Order Only.
CASE;

// IF DB1.Load ID is GT Zero
IF DB1.Load_ID > *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// IF PAR.Untied Orders Flag USR is Yes
IF PAR.Untied_Orders_Flag_USR = 'Y';

//?Select Untied Orders Only.
CASE;

// IF DB1.Load ID is Blank
IF DB1.Load_ID = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Scheduled Ship Date Selection.
CASE;

// IF PAR.From Date             USR is Entered
IF PAR.From_Date_USR <> *ZERO;

// AND PAR.To Date               USR is Entered
AND PAR.To_Date_USR <> *ZERO;

CASE;

// IF DB1.Scheduled Ship Date LT PAR.From Date             USR
IF DB1.Scheduled_Ship_Date < PAR.From_Date_USR;

// OR DB1.Scheduled Ship Date GT PAR.To Date               USR
OR DB1.Scheduled_Ship_Date > PAR.To_Date_USR;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Load ID Selection.
CASE;

// IF PAR.From Load ID  USR is NE Blank
IF PAR.From_Load_ID_USR <> *ZERO;

// AND PAR.To Load ID  USR is NE Blank
AND PAR.To_Load_ID_USR <> *ZERO;

CASE;

// IF DB1.Load ID LT PAR.From Load ID  USR
IF DB1.Load_ID < PAR.From_Load_ID_USR;

// OR DB1.Load ID GT PAR.To Load ID  USR
OR DB1.Load_ID > PAR.To_Load_ID_USR;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Export Status Selection.
CASE;

// IF PAR.Export Status is Y/N Values
IF PAR.Export_Status = 'N'/'Y';

EXECUTE FUNCTION(RTV Export Status RT) TYPE(RTVOBJ) FILE(OMFJCPP)               AC1556755;
PARAMETER(DB1.Load_ID);
PARAMETER(PAR.Export_Status_Dft);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.Export Status Dft NE PAR.Export Status
IF PAR.Export_Status_Dft <> PAR.Export_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Unit of Measure Selection.
CASE;

// IF PAR.U/M - Load Scheduling USR is Not Blank
IF PAR.U_M_Load_Scheduling_USR = 'BX'/'CB'/'MX';

//?05/11/04 SLM PKTR01 Multi-Company - Function was changed
//?                                    to remove Company RST or Pos
EXECUTE FUNCTION(RTV UM/Whs Code        RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1541555;
PARAMETER(DB1.Order_Number);
PARAMETER(DB1.Load_ID);
PARAMETER(PAR.USR_Unit_of_Measure);
{
 //?USER: Initialize routine

 // PAR.USR Unit of Measure = CON.*BLANK
 PAR.USR_Unit_of_Measure = *BLANK;

 // LCL.Boxes Total Quantity = CON.*ZERO
 LCL.Boxes_Total_Quantity = *ZERO;

 // WRK.First Time Flag = CND.Yes
 WRK.First_Time_Flag = 'Y';

 //?USER: Processing if Data record not found

 QUIT;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV UM/Whs Code,BX Qty RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1625244;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(1);
 PARAMETER(PAR.USR_Unit_of_Measure);
 PARAMETER(LCL.Boxes_Total_Quantity);
 {
  //?USER: Initialize routine

  // WRK.First Time Flag = CND.Yes
  WRK.First_Time_Flag = 'Y';

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  QUIT;

  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?S17054 DN 04/08/21-Beyond this point, changed all 'U/M - Ordered'
  //?  to reference LCL Context instead of DB1.
  //?S17054 DN 04/08/21-Count Type 'Cases' (CS) as 'Boxes' (BX).
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.U/M - Ordered = DB1.U/M - Ordered
  LCL.U_M_Ordered = DB1.U_M_Ordered;

  CASE;

  // IF LCL.U/M - Ordered is Cases
  IF LCL.U_M_Ordered = 'CS';

  // LCL.U/M - Ordered = CND.EQ Boxes
  LCL.U_M_Ordered = 'BX';

  ENDIF;

  ENDIF;

  //?Accumulate the Box Quantity for slotting consideration  6/12/01
  CASE;

  // IF LCL.U/M - Ordered is EQ Boxes
  IF LCL.U_M_Ordered = 'BX';

  // PAR.Boxes Total Quantity = PAR.Boxes Total Quantity + DB1.Quantity Ordered
  PAR.Boxes_Total_Quantity = PAR.Boxes_Total_Quantity + DB1.Quantity_Ordered;

  ENDIF;

  CASE;

  // IF PAR.USR Unit of Measure is *Blank
  IF PAR.USR_Unit_of_Measure = *BLANK;

  // PAR.USR Unit of Measure = LCL.U/M - Ordered
  PAR.USR_Unit_of_Measure = LCL.U_M_Ordered;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF LCL.U/M - Ordered EQ PAR.USR Unit of Measure
  IF LCL.U_M_Ordered = PAR.USR_Unit_of_Measure;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.USR Unit of Measure = CND.Mixed
  PAR.USR_Unit_of_Measure = 'MX';

  ENDIF;

  ENDIF;

  ENDIF;

 }

 //?If doing for one Order, because it isnt tied to a load yet
 CASE;

 // IF DB1.Load ID is Blank
 IF DB1.Load_ID = *ZERO;

 CASE;

 // IF PAR.USR Unit of Measure is Mixed
 IF PAR.USR_Unit_of_Measure = 'MX';

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(DB1.Company_Number);
 PARAMETER('BOXLOAD');
 PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
 IF LCL.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

 // PAR.USR Unit of Measure = CND.Combos
 PAR.USR_Unit_of_Measure = 'CB';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Unit of Measure = CND.Boxed
 PAR.USR_Unit_of_Measure = 'BX';

 ENDIF;

 ENDIF;

 QUIT;

 ENDIF;

 //?orig code
 //?USER: Exit processing

 CASE;

 // IF PAR.USR Unit of Measure is Mixed
 IF PAR.USR_Unit_of_Measure = 'MX';

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(DB1.Company_Number);
 PARAMETER('BOXLOAD');
 PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
 IF LCL.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

 // PAR.USR Unit of Measure = CND.Combos
 PAR.USR_Unit_of_Measure = 'CB';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Unit of Measure = CND.Boxed
 PAR.USR_Unit_of_Measure = 'BX';

 ENDIF;

 ENDIF;

}


CASE;

// IF PAR.USR Unit of Measure NE PAR.U/M - Load Scheduling USR
IF PAR.USR_Unit_of_Measure <> PAR.U_M_Load_Scheduling_USR;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Load Grade Selection.
CASE;

// IF PAR.Load Grade is Not Blank
IF PAR.Load_Grade = 'C'/'L'/'X'/'A'/'P';

CASE;

// IF DB1.Load Grade NE PAR.Load Grade
IF DB1.Load_Grade <> PAR.Load_Grade;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?E3328 JJH 10/13/14-Do not print if Sched Pos >= 0 & Qtys LT 0 = Y.
//?Scheduling Position
CASE;

// IF PAR.Qty Less Than Zero    USR is Yes
IF PAR.Qty_Less_Than_Zero_USR = 'Y';

CASE;

// IF DB1.Scheduling Position is Greater than Equal Zero
IF DB1.Scheduling_Position >= *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?11/13/19 DN S15765-Select By Primal Group Code.
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF NOT PAR.Primal Group Code is Not Entered
IF ! PAR.Primal_Group_Code = *BLANK;

EXECUTE FUNCTION(DEL Load Schdlng Summ  DL) TYPE(DLTOBJ) ARRAY(ARR_Load_Schdlng_AC2178603;

EXECUTE FUNCTION(Bld ARR Load Schdlng SmRT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC2178608;
PARAMETER(DB1.Load_ID);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Header Status is Not cancelled
 IF DB1.Header_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 EXECUTE FUNCTION(Bld ARR Load Schdlng SmRT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2178609;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Not cancelled
  IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

  EXECUTE FUNCTION(Rtv Primal Group Code RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC1911997;
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Primal_Group_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  //?Accum QTY Ordered Per Primal Group Code.
  EXECUTE FUNCTION(UPD Load Schdlng Summ  RT) TYPE(RTVOBJ) ARRAY(ARR_Load_Schdlng_AC2178602;
  PARAMETER(LCL.Primal_Group_Code);
  PARAMETER(DB1.Quantity_Ordered);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(CRT Load Schdlng Summ  CR) TYPE(CRTOBJ) ARRAY(ARR_Load_Schdlng_AC2178601;
   PARAMETER(PAR.Primal_Group_Code);
   PARAMETER(PAR.Total_Quantity_Ordered_U);
   //?USER: Process Data record

   // LCL.Total Quantity Ordered U = DB1.Total Quantity Ordered U + PAR.Total Quantity Ordered U
   LCL.Total_Quantity_Ordered_U = DB1.Total_Quantity_Ordered_U
   + PAR.Total_Quantity_Ordered_U;

   EXECUTE FUNCTION(CHG Load Schdlng Summ  CH) TYPE(CHGOBJ) ARRAY(ARR_Load_Schdlng_AC2178616;
   PARAMETER(DB1.Primal_Group_Code);
   PARAMETER(LCL.Total_Quantity_Ordered_U);
  }

  ENDIF;

 }

 ENDIF;

}


// LCL.Primal Group Code = CON.*BLANK
LCL.Primal_Group_Code = *BLANK;

EXECUTE FUNCTION(RTV Load Schdlng Summ  RT) TYPE(RTVOBJ) ARRAY(ARR_Load_Schdlng_AC2178629;
PARAMETER(LCL.Primal_Group_Code);
PARAMETER(LCL.Primal_Group_Code_USR);
{
 //?USER: Initialize routine

 // PAR.Primal Group Code USR = CND.Not Entered
 PAR.Primal_Group_Code_USR = *BLANK;

 // LCL.Total Quantity Ordered U = CON.*ZERO
 LCL.Total_Quantity_Ordered_U = *ZERO;

 //?USER: Process Data record

 //?Send Back the Most Qty Ordered for Primal Group.
 CASE;

 // IF DB1.Total Quantity Ordered U GT LCL.Total Quantity Ordered U
 IF DB1.Total_Quantity_Ordered_U > LCL.Total_Quantity_Ordered_U;

 // LCL.Total Quantity Ordered U = DB1.Total Quantity Ordered U
 LCL.Total_Quantity_Ordered_U = DB1.Total_Quantity_Ordered_U;

 // PAR.Primal Group Code USR = DB1.Primal Group Code
 PAR.Primal_Group_Code_USR = DB1.Primal_Group_Code;

 ENDIF;

}


//?1st Record Matches Primal Code User Selected?
CASE;

// IF PAR.Primal Group Code EQ LCL.Primal Group Code USR
IF PAR.Primal_Group_Code = LCL.Primal_Group_Code_USR;

//?1st Record Matches Primal Code User Selected?
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?USER: Process top of page

MOVE *ALL (To: TOP From: PAR);

// TOP.Company Number = PAR.LSP Accounting Co
TOP_Company_Number = PAR.LSP_Accounting_Co;

// TOP.Warehouse Code = PAR.LSP Prodution Warehouse
TOP_Warehouse_Code = PAR.LSP_Prodution_Warehouse;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(PAR.LSP_Accounting_Co);
PARAMETER(TOP_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Warehouse Desc DRV) TYPE(DRVFLD)                               AC1532477;
PARAMETER(X1PG_Warehouse_Desc_DRV);
PARAMETER(PAR.LSP_Prodution_Warehouse);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

}


EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(TOP_Warehouse_Code);
PARAMETER(TOP_Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


EXECUTE FUNCTION(RTV Newest Rcd         RT) TYPE(RTVOBJ) FILE(PDMHCPP)          AC1542212;
PARAMETER(TOP_Job_Time_User);
PARAMETER(TOP_Job_Date_Usr);
PARAMETER(NLL.Thru_Scheduled_Ship_Date);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// TOP.From Load ID  USR = TOP.From Load ID  USR
TOP_From_Load_ID_USR = TOP_From_Load_ID_USR;

// TOP.To Load ID  USR = TOP.To Load ID  USR
TOP_To_Load_ID_USR = TOP_To_Load_ID_USR;

//?E3328 JJH 10/10/14 - New Option: Quantities Less Than Zero
// TOP.Qty Less Than Zero    USR = PAR.Qty Less Than Zero    USR
TOP_Qty_Less_Than_Zero_USR = PAR.Qty_Less_Than_Zero_USR;

EXECUTE FUNCTION(Primal Group Desc DRV) TYPE(DRVFLD)                            AC2178638;
PARAMETER(TOP_Primal_Group_Desc_DRV);
PARAMETER(PAR.Primal_Group_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Primal Grp Desc   RT) TYPE(RTVOBJ) FILE(PDLLREP)           AC1476186;
 PARAMETER(PAR.Primal_Group_Code);
 PARAMETER(PAR.Primal_Group_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

}


//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display 1 = CND.Yes
WRK.USR_Display_1 = 'Y';

//?USER: Print required level headings

// SUPPRESSED PRINT LSP Order Company header format

// SUPPRESSED PRINT Deadline Departure Date header format

// SUPPRESSED PRINT Deadline Departure Time header format

CASE;

IF NEW Load_ID;
//?04/20/16 JJH E4687 - Load Scheduling Positioning
//?09/17/19 DN R15161-Undo Load Scheduling Positioning Logic by JH.
EXECUTE FUNCTION(RTV Load All Fields    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1491510;
PARAMETER(CUR.Load_ID);
PARAMETER(NLL.Company_Number);
PARAMETER(NLL.Scheduled_Ship_Date);
PARAMETER(NLL.LTL_Flag);
PARAMETER(NLL.Load_Status);
PARAMETER(NLL.Reefer_Temperature);
PARAMETER(NLL.Seal_1);
PARAMETER(NLL.Seal_2);
PARAMETER(NLL.Seal_3);
PARAMETER(NLL.Seal_4);
PARAMETER(NLL.Seal_2_Unused);
PARAMETER(NLL.Total_Load_Order_Weight);
PARAMETER(NLL.Flat_Amount);
PARAMETER(NLL.Allocate_Pounds_Miles);
PARAMETER(NLL.Total_Stops);
PARAMETER(CUR.Trailer_Id);
PARAMETER(NLL.Transloader_Carrier_Code);
PARAMETER(NLL.BOL_Time);
PARAMETER(CUR.Carrier_Code);
PARAMETER(NLL.Truck_Size);
PARAMETER(NLL.Ld_Hdr_Ld_Dtl_Unused);
PARAMETER(NLL.Rated_Freight);
PARAMETER(NLL.Ship_Status);
PARAMETER(NLL.Load_Type);
PARAMETER(NLL.Number_Pallets_Received);
PARAMETER(NLL.Number_Pallets_Loaded);
PARAMETER(NLL.Load_Carrier_Pay_Amt);
PARAMETER(NLL.Estimated_Arrival_Time);
PARAMETER(NLL.Actual_Arrival_Date);
PARAMETER(NLL.Actual_Arrival_Time);
PARAMETER(NLL.Trailer_IN_Weight);
PARAMETER(NLL.Trailer_OUT_Weight);
PARAMETER(NLL.Actual_Departure_Date);
PARAMETER(NLL.Departure_Time);
PARAMETER(NLL.Schedule_Sequence_Number);
PARAMETER(NLL.Product_Temperature);
PARAMETER(NLL.Number_Spacers_Loaded);
PARAMETER(NLL.Car_Veh_Initials);
PARAMETER(NLL.Total_Load_Miles);
PARAMETER(NLL.Recorder_ID);
PARAMETER(NLL.Shipping_Method);
PARAMETER(NLL.Ship_From_Warehouse);
PARAMETER(NLL.Ship_To_State_Code);
PARAMETER(NLL.Gross_Weight);
PARAMETER(NLL.Carrier_Broker);
PARAMETER(NLL.Export_Status);
PARAMETER(NLL.Actual_Ship_Date);
PARAMETER(NLL.On_Time_Y_N);
PARAMETER(NLL.Truck_Ready_Date);
PARAMETER(NLL.Truck_Ready_Time);
PARAMETER(NLL.Spotted_Date);
PARAMETER(NLL.Spotted_Time);
PARAMETER(NLL.Load_Finished_Date);
PARAMETER(NLL.Load_Finished_Time);
PARAMETER(NLL.BOL_Complete_Date);
PARAMETER(NLL.BOL_Complete_Time);
PARAMETER(NLL.BOL_Received_Date);
PARAMETER(NLL.BOL_Received_Time);
PARAMETER(NLL.Truck_Departure_Date);
PARAMETER(NLL.Truck_Departure_Time);
PARAMETER(NLL.Adjusted_Departure_Date);
PARAMETER(NLL.Adjusted_Departure_Time);
PARAMETER(NLL.Shipping_Line);
PARAMETER(NLL.Port_Delv_Terminal);
PARAMETER(NLL.Vessel_Name);
PARAMETER(NLL.Voyage);
PARAMETER(NLL.Sail_Date);
PARAMETER(NLL.Booking_Number);
PARAMETER(NLL.Discharge_Port);
PARAMETER(NLL.Arrival_Date);
PARAMETER(NLL.Container_Number);
PARAMETER(NLL.Date_In);
PARAMETER(NLL.Time_In);
PARAMETER(NLL.Date_Out);
PARAMETER(NLL.Time_Out);
PARAMETER(NLL.Load_Total_Freight);
PARAMETER(NLL.Scheduled_Delivery_Date);
PARAMETER(NLL.Scheduled_Delivery_Time);
PARAMETER(NLL.LH_Unused_Sts);
PARAMETER(NLL.LH_Carrier_Payment_Sts);
PARAMETER(NLL.Bring_Back_Miles);
PARAMETER(NLL.Requested_Delivery_Date);
PARAMETER(NLL.Load_Acceptance_Flag);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(CUR.On_Yard_Date);
PARAMETER(CUR.On_Yard_Time);
PARAMETER(NLL.Deadline_Departure_Date);
PARAMETER(NLL.Deadline_Departure_Time);
PARAMETER(NLL.Load_Held_Over);
PARAMETER(NLL.Load_Held_Over_Reason);
PARAMETER(NLL.Load_Held_Over_Rsn_Cmt);
PARAMETER(NLL.Ocean_BOL_Number);
PARAMETER(NLL.Express_Mail_Number);
PARAMETER(NLL.Express_Mail_Date);
PARAMETER(NLL.Load_Shag_Flag);
PARAMETER(NLL.Load_Wash_Flag);
PARAMETER(NLL.Product_Complete_Date);
PARAMETER(NLL.Product_Complete_Time);
PARAMETER(NLL.Pallets_Loaded);
PARAMETER(NLL.Avg_Pallet_Tare);
PARAMETER(NLL.Tot_Pallet_Tare);
PARAMETER(NLL.Load_Confirmed_Sts);
PARAMETER(NLL.Load_Confirmed_Contact);
PARAMETER(NLL.Load_Confirmation_Time);
PARAMETER(NLL.Load_Door_1);
PARAMETER(NLL.Override_Total_Load_Miles);
PARAMETER(NLL.Load_Door_2);
PARAMETER(NLL.Partial_Load);
PARAMETER(NLL.Load_Confirmation_Fax_Sts);
PARAMETER(NLL.Export_Load_USDA_OK);
PARAMETER(NLL.Late_Delivery_Email_Flag);
PARAMETER(NLL.Load_Actual_Freight);
PARAMETER(NLL.Hide_on_WW_Load_Sts);
PARAMETER(NLL.Late_Billing_Email_Flag);
PARAMETER(NLL.Shipping_Temp_C_F_txt);
PARAMETER(NLL.LH_Held_Over_Rsn_Cmt);
PARAMETER(NLL.Multi_Company_Load);
PARAMETER(NLL.Fax_Sent_to_SSI_Carrier);
PARAMETER(NLL.Schedule_Pos_Load_Grade);
PARAMETER(NLL.LH_Power_Only_Load);
PARAMETER(NLL.MG_Created_Load);
PARAMETER(NLL.LH_Unused_Sts_5);
PARAMETER(NLL.Load_U_M);
PARAMETER(NLL.TPM_Shipment_Status);
PARAMETER(NLL.LH_Unused_Sts_8);
PARAMETER(NLL.LH_On_Time_Reason_Code);
PARAMETER(NLL.LH_Held_Over_Reason);
PARAMETER(NLL.LH_Carrier_Paid_Dte);
PARAMETER(NLL.LH_Carrier_Paid_Time);
PARAMETER(NLL.LH_Last_Combo_Prod_Date);
PARAMETER(NLL.LH_Last_Combo_Prod_Time);
PARAMETER(NLL.LPT_Load_Plan_Start_Dt);
PARAMETER(NLL.LPT_Load_Plan_Start_Tm);
PARAMETER(NLL.TPM_Planned_Ship_Date);
PARAMETER(NLL.LH_Unused_Time_4);
PARAMETER(NLL.LH_Unused_Date_5);
PARAMETER(NLL.LH_Unused_Time_5);
PARAMETER(NLL.LH_Unused_Date_6);
PARAMETER(NLL.LH_Unused_Time_6);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?04/20/16 JJH E4687 - Load Scheduling Positioning
//?09/17/19 DN R15161-Undo Load Scheduling Positioning Logic by JH.
EXECUTE FUNCTION(RTV Active Carr Name   RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1447369;
PARAMETER(CUR.Carrier_Code);
PARAMETER(CUR.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


// CUR.@Text 15 = CUR.Name
CUR.@Text_15 = CUR.Name;

EXECUTE FUNCTION(RTV Ship To Name       RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1313894;
PARAMETER(PAR.LSP_Accounting_Co);
PARAMETER(DB1.Order_Number);
PARAMETER(CUR.Ship_To_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CUR.Text USR 15 = CUR.Ship To Name
CUR.Text_USR_15 = CUR.Ship_To_Name;

// CUR.USR Time 4.0 = CUR.On Yard Time / CON.100 *
CUR.USR_Time_4_0 = CUR.On_Yard_Time / 100;

// CUR.USR Sched Ship Date 4,0 = CVTVAR(DB1.Scheduled Ship Date)
CUR.USR_Sched_Ship_Date_40 = CVTVAR(DB1.Scheduled_Ship_Date);

// CUR.Deadline Departure MM/DD = CVTVAR(DB1.Deadline Departure Date)
CUR.Deadline_Departure_MM_DD = CVTVAR(DB1.Deadline_Departure_Date);

// CUR.USR Deadline Deprt Time = DB1.Deadline Departure Time / CON.100 *
CUR.USR_Deadline_Deprt_Time = DB1.Deadline_Departure_Time / 100;

// LCL.Stop/Drop = CON.*ZERO
LCL.Stop_Drop = *ZERO;

// Print Load ID header format
PRINT Load ID header format;

ENDIF;

// SUPPRESSED PRINT Stop/Drop header format

// SUPPRESSED PRINT Item Code header format

// SUPPRESSED PRINT Process Sequence header format

//?USER: On print of detail format

CASE;

// IF WRK.First time flag 2     USR is Yes
IF WRK.First_time_flag_2_USR = 'Y';

// WRK.First time flag 2     USR = CND.No
WRK.First_time_flag_2_USR = 'N';

ENDIF;

//?Check for change in Stop/Drop number
CASE;

// IF DB1.Stop/Drop NE LCL.Stop/Drop
IF DB1.Stop_Drop <> LCL.Stop_Drop;

// CUR.USR Display field = CND.yes
CUR.USR_Display_field = 'Y';

// LCL.Stop/Drop = DB1.Stop/Drop
LCL.Stop_Drop = DB1.Stop_Drop;

//?Check for change in Stop/Drop number
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Display field = CND.no
CUR.USR_Display_field = 'N';

ENDIF;

//?USER: Print required level totals

// SUPPRESSED PRINT Process Sequence totals format

// SUPPRESSED PRINT Item Code totals format

// SUPPRESSED PRINT Stop/Drop totals format

// SUPPRESSED PRINT Load ID totals format

// SUPPRESSED PRINT Deadline Departure Time totals format

// SUPPRESSED PRINT Deadline Departure Date totals format

// SUPPRESSED PRINT LSP Order Company totals format

//?USER: On print of final totals format

//?04/20/16 JJH E4687 - Load Scheduling Positioning
//?09/17/19 DN R15161-Undo Load Scheduling Positioning Logic by JH.
EXECUTE FUNCTION(RTV Limit Loads f/Slot RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1619257;
PARAMETER(PAR.LSP_Prodution_Warehouse);
PARAMETER(PAR.From_Date_USR);
PARAMETER(*ZERO);
PARAMETER(CUR.Export_Load_Limit);
PARAMETER(CUR.Combo_Load_Limit);
PARAMETER(CUR.Box_Load_Limit_USR);
PARAMETER(WRK.Record_Found_OrdDtlUSR);
{
 //?USER: Initialize routine

 // PAR.Export Load Limit = CON.*ZERO
 PAR.Export_Load_Limit = *ZERO;

 // PAR.Combo Load Limit = CON.*ZERO
 PAR.Combo_Load_Limit = *ZERO;

 // PAR.Box Load Limit        USR = CON.*ZERO
 PAR.Box_Load_Limit_USR = *ZERO;

 // PAR.Record Found -OrdDtlUSR = CND.Record Not Found
 PAR.Record_Found_OrdDtlUSR = 'N';

 EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(LCL.Shipping_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?** Retrieve needed values from System Values file     E000233
 // Call program Rtv Company Ctl Vals  XF.
 CALL PROGRAM(Rtv Company Ctl Vals  XF) ('PNOQXFR');
 PARAMETER(LCL.Shipping_Company);
 PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
 PARAMETER(LCL.Partial_Load_Max_Lbs_USR);

 //?change log
 DO;

 //?02/03/2010 LJB E000233
 //?   Retrieve needed values from System Values file
 //?08/03/07 RMC dly029 Count Load as Export if export order whse
 //?   matches ShipFrom Whse on the load   -- per jim n, steve b
 //?05/11/04 SLM PKTR01 Multi-Company - Order Header TRG Remove Co
 //?   from Logical View
 //?05/17/04 RMC PKTR01 Multi-Company - Use Shipping Co from Whse
 ENDDO;

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 //?RMC 9/11/13 E2709
 //?Check for Mixed having box qty>BOXLOAD qty, if yes, then BX, else CB
 //?Change Priority 3/14/01    RMC
 //?Check for Mixed having a box qty > 60 to stay BX   6/12/01    RMC
 //?Per Steve Burke - 6/27/01
 //?Dont check just for Prepaid Trucks.  Collect and Prepaid trucks included
 //?If Partial Load (<= 20000 lbs) dont count.
 //?Priority :  Combo , Export, Box
 CASE;

 // IF DB1.Load Type is Regular
 IF DB1.Load_Type = 'R';

 // AND DB1.Total Load Order Weight GT LCL.Partial Load Max Lbs USR
 AND DB1.Total_Load_Order_Weight > LCL.Partial_Load_Max_Lbs_USR;

 // AND DB1.Shipping Method is Not Rail
 AND DB1.Shipping_Method = 'CT'/'PT';

 //?Update load found so this load wont be counted again in the calling pgm.
 CASE;

 // IF DB1.Load ID EQ PAR.Load ID
 IF DB1.Load_ID = PAR.Load_ID;

 // PAR.Record Found -OrdDtlUSR = CND.Record Found
 PAR.Record_Found_OrdDtlUSR = 'Y';

 ENDIF;

 // LCL.Boxes Total Quantity = CON.*ZERO
 LCL.Boxes_Total_Quantity = *ZERO;

 //?05/11/04 SLM PKTR01 Multi-Company - Function chgd-remove Company RST/Pos
 EXECUTE FUNCTION(RTV UM/Whs Code,BX Qty RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1625242;
 PARAMETER(*ZERO);
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.U_M_Ordered);
 PARAMETER(LCL.Boxes_Total_Quantity);
 {
  //?USER: Initialize routine

  //?05/13/04 SLM PKTR01 Multi-Company - Funt chg to rmv Co RST or Pos
  // PAR.USR Unit of Measure = CON.*BLANK
  PAR.USR_Unit_of_Measure = *BLANK;

  // WRK.First Time Flag = CND.Yes
  WRK.First_Time_Flag = 'Y';

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV UM/Whs Code,BX Qty RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1625244;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(1);
  PARAMETER(PAR.USR_Unit_of_Measure);
  PARAMETER(PAR.Boxes_Total_Quantity);
  {
   //?USER: Initialize routine

   // WRK.First Time Flag = CND.Yes
   WRK.First_Time_Flag = 'Y';

   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   QUIT;

   //?USER: Process Data record

   CASE;

   // IF DB1.Detail Line Status is Cancelled
   IF DB1.Detail_Line_Status = 'X';

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?S17054 DN 04/08/21-Beyond this point, changed all 'U/M - Ordered'
   //?  to reference LCL Context instead of DB1.
   //?S17054 DN 04/08/21-Count Type 'Cases' (CS) as 'Boxes' (BX).
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.U/M - Ordered = DB1.U/M - Ordered
   LCL.U_M_Ordered = DB1.U_M_Ordered;

   CASE;

   // IF LCL.U/M - Ordered is Cases
   IF LCL.U_M_Ordered = 'CS';

   // LCL.U/M - Ordered = CND.EQ Boxes
   LCL.U_M_Ordered = 'BX';

   ENDIF;

   ENDIF;

   //?Accumulate the Box Quantity for slotting consideration  6/12/01
   CASE;

   // IF LCL.U/M - Ordered is EQ Boxes
   IF LCL.U_M_Ordered = 'BX';

   // PAR.Boxes Total Quantity = PAR.Boxes Total Quantity + DB1.Quantity Ordered
   PAR.Boxes_Total_Quantity = PAR.Boxes_Total_Quantity + DB1.Quantity_Ordered;

   ENDIF;

   CASE;

   // IF PAR.USR Unit of Measure is *Blank
   IF PAR.USR_Unit_of_Measure = *BLANK;

   // PAR.USR Unit of Measure = LCL.U/M - Ordered
   PAR.USR_Unit_of_Measure = LCL.U_M_Ordered;

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF LCL.U/M - Ordered EQ PAR.USR Unit of Measure
   IF LCL.U_M_Ordered = PAR.USR_Unit_of_Measure;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.USR Unit of Measure = CND.Mixed
   PAR.USR_Unit_of_Measure = 'MX';

   ENDIF;

   ENDIF;

   ENDIF;

  }

  //?USER: Exit processing

  //?RMC E2709 added here so it wont need to be in every calling pgm
  CASE;

  // IF PAR.USR Unit of Measure is Mixed
  IF PAR.USR_Unit_of_Measure = 'MX';

  EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
  PARAMETER(DB1.Company_Number);
  PARAMETER('BOXLOAD');
  PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
  IF PAR.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

  // PAR.USR Unit of Measure = CND.Combos
  PAR.USR_Unit_of_Measure = 'CB';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.USR Unit of Measure = CND.Boxed
  PAR.USR_Unit_of_Measure = 'BX';

  ENDIF;

  ENDIF;

 }

 CASE;

 // IF LCL.U/M - Ordered is Combos
 IF LCL.U_M_Ordered = 'CB';

 // PAR.Combo Load Limit = PAR.Combo Load Limit + CON.1
 PAR.Combo_Load_Limit = PAR.Combo_Load_Limit + 1;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Export Status Dft = DB1.Export Status
 LCL.Export_Status_Dft = DB1.Export_Status;

 //?Count Load as Export if order whse = Ship-From-Whse & Export 8/3/07
 CASE;

 // IF DB1.Export Status is yes
 IF DB1.Export_Status = 'Y';

 //?See if export order whse matches load Shipfrom whse  08/03/07 RMC
 //?For example a load could be export sts=Y and ship from whse is GP1, but
 //?there are multiple orders, and the one that is export is out of CF1
 //? in that case, dont count the load as export- per Steve B and Jim Norris
 // Call program RTV ExpOrd Whse for LD XF.
 CALL PROGRAM(RTV ExpOrd Whse for LD XF) ('PMK2XFR');
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Ship_From_Warehouse);
 PARAMETER(LCL.Export_Status_Dft);

 ENDIF;

 CASE;

 // IF LCL.Export Status Dft is yes
 IF LCL.Export_Status_Dft = 'Y';

 // PAR.Export Load Limit = PAR.Export Load Limit + CON.1
 PAR.Export_Load_Limit = PAR.Export_Load_Limit + 1;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Box Load Limit        USR = PAR.Box Load Limit        USR + CON.1
 PAR.Box_Load_Limit_USR = PAR.Box_Load_Limit_USR + 1;

 ENDIF;

 ENDIF;

 ENDIF;

}


CASE;

// IF LCL.Warehouse Type is Fresh
IF LCL.Warehouse_Type = 'FR';

//?** Rtv week day name, rst on day of week for limits   E000233
EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
PARAMETER(PAR.LSP_Accounting_Co);
PARAMETER(PAR.From_Date_USR);
PARAMETER(LCL.Accounting_Period_Code);
PARAMETER(LCL.Day_of_Week);
PARAMETER(LCL.Week_Number);
{
 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


// CUR.Day of the Week USR = Condition name of LCL.Day of Week
CUR.Day_of_the_Week_USR = RTVCND(LCL.Day_of_Week);

EXECUTE FUNCTION(Rtv Load Slotting Sch RT) TYPE(RTVOBJ) FILE(POA3REP)           AC1619252;
PARAMETER(PAR.LSP_Accounting_Co);
PARAMETER(PAR.LSP_Prodution_Warehouse);
PARAMETER(LCL.Day_of_Week);
PARAMETER(CUR.Slot_Limit_for_Export);
PARAMETER(CUR.Slot_Limit_for_Combo);
PARAMETER(CUR.Slot_Limit_for_Box_Other);
PARAMETER(WRK.Weight_Limit_for_Export);
PARAMETER(WRK.Weight_Limit_for_Combo);
PARAMETER(WRK.Weight_Limit_for_Box_Othr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Slot Limit for Combo = CON.999
CUR.Slot_Limit_for_Combo = 999;

// CUR.Slot Limit for Box/Other = CON.999
CUR.Slot_Limit_for_Box_Other = 999;

// CUR.Slot Limit for Export = CON.999
CUR.Slot_Limit_for_Export = 999;

ENDIF;

