// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POVBXFR
// ?Date: 14.08.2025 Time: 03:39:08
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Pgm 5 Accumulate FG/WP Production for the Dept/Line/Dt/Shift
//?Pgm 7 Accumulate FG/WP Deletes for the Dept/Line/Dt/Shift
//?4/14/04  Accum Trans Pieces too
//?4/04/06  RMC Dont exclude deletes made from 15:15:01 - 17:30:00
//?8/02/06  RMC Setup for Triumph 2nd shift starting 8/7/06
//?3/29/11  RMC Chg shift start / end times to 15:15 and 15:15:01
//?4/20/17  RMC E9064 added 440, 1 shift 15:15 and 15:15:01
CASE;

// IF PAR.Company Number is Guymon
IF PAR.Company_Number = 360;

//?From & To Date/Time
CASE;

// IF PAR.Number of Prod Shifts is Shift 1
IF PAR.Number_of_Prod_Shifts = '1';

// PAR.USR From Time 6.0 = CON.060000
PAR.USR_From_Time_6_0 = 060000;

// PAR.USR To Time 6.0 = CON.055959
PAR.USR_To_Time_6_0 = 055959;

// PAR.Date To               USR = PAR.Production Date + CON.1 *DAYS
PAR.Date_To_USR = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

//?From & To Date/Time
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Production Shift is Shift 1
IF PAR.Production_Shift = '1';

// PAR.USR From Time 6.0 = CON.060000
PAR.USR_From_Time_6_0 = 060000;

//?RMC 3/29/11 chg back to 15:15 per Stan Scott/Billy Jack Grice
// PAR.USR To Time 6.0 = CON.151500
PAR.USR_To_Time_6_0 = 151500;

// PAR.Date To               USR = PAR.Production Date
PAR.Date_To_USR = PAR.Production_Date;

// IF PAR.Production Shift is Shift 2
IF PAR.Production_Shift = '2';

//?RMC 3/29/11 chg back to 15:15 per Stan Scott/Billy Jack Grice
// PAR.USR From Time 6.0 = CON.151501
PAR.USR_From_Time_6_0 = 151501;

// PAR.USR To Time 6.0 = CON.055959
PAR.USR_To_Time_6_0 = 055959;

// PAR.Date To               USR = PAR.Production Date + CON.1 *DAYS
PAR.Date_To_USR = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF PAR.Company Number is Seaboard Triumph Foods
IF PAR.Company_Number = 440;

//?From & To Date/Time
CASE;

// IF PAR.Number of Prod Shifts is Shift 1
IF PAR.Number_of_Prod_Shifts = '1';

// PAR.USR From Time 6.0 = CON.060000
PAR.USR_From_Time_6_0 = 060000;

// PAR.USR To Time 6.0 = CON.055959
PAR.USR_To_Time_6_0 = 055959;

// PAR.Date To               USR = PAR.Production Date + CON.1 *DAYS
PAR.Date_To_USR = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

//?From & To Date/Time
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Production Shift is Shift 1
IF PAR.Production_Shift = '1';

// PAR.USR From Time 6.0 = CON.060000
PAR.USR_From_Time_6_0 = 060000;

//?RMC 3/29/11 chg back to 15:15 per Stan Scott/Billy Jack Grice
// PAR.USR To Time 6.0 = CON.151500
PAR.USR_To_Time_6_0 = 151500;

// PAR.Date To               USR = PAR.Production Date
PAR.Date_To_USR = PAR.Production_Date;

// IF PAR.Production Shift is Shift 2
IF PAR.Production_Shift = '2';

// PAR.USR From Time 6.0 = CON.151501
PAR.USR_From_Time_6_0 = 151501;

// PAR.USR To Time 6.0 = CON.055959
PAR.USR_To_Time_6_0 = 055959;

// PAR.Date To               USR = PAR.Production Date + CON.1 *DAYS
PAR.Date_To_USR = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF PAR.Company Number is St. Joseph
IF PAR.Company_Number = 960;

//?From & To Date/Time
CASE;

// IF PAR.Number of Prod Shifts is Shift 1
IF PAR.Number_of_Prod_Shifts = '1';

// PAR.USR From Time 6.0 = CON.060000
PAR.USR_From_Time_6_0 = 060000;

// PAR.USR To Time 6.0 = CON.055959
PAR.USR_To_Time_6_0 = 055959;

// PAR.Date To               USR = PAR.Production Date + CON.1 *DAYS
PAR.Date_To_USR = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

//?From & To Date/Time
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Production Shift is Shift 1
IF PAR.Production_Shift = '1';

// PAR.USR From Time 6.0 = CON.060000
PAR.USR_From_Time_6_0 = 060000;

// PAR.USR To Time 6.0 = CON.150000
PAR.USR_To_Time_6_0 = 150000;

// PAR.Date To               USR = PAR.Production Date
PAR.Date_To_USR = PAR.Production_Date;

// IF PAR.Production Shift is Shift 2
IF PAR.Production_Shift = '2';

// PAR.USR From Time 6.0 = CON.150001
PAR.USR_From_Time_6_0 = 150001;

// PAR.USR To Time 6.0 = CON.055959
PAR.USR_To_Time_6_0 = 055959;

// PAR.Date To               USR = PAR.Production Date + CON.1 *DAYS
PAR.Date_To_USR = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

ENDIF;

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv Accum FG/WP Prod  RT) TYPE(RTVOBJ) FILE(CAB7CPP)           AC1664101;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Structure_Type_Code);
PARAMETER(PAR.Item_Structure_Group_Code);
PARAMETER(PAR.Item_Structure_Class_Code);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.USR_From_Time_6_0);
PARAMETER(PAR.USR_To_Time_6_0);
PARAMETER(PAR.Date_To_USR);
PARAMETER(PAR.Department_Code);
PARAMETER(PAR.Production_Line_Code);
PARAMETER(PAR.WIP_Usage_Company_Num);
PARAMETER(PAR.WIP_Usage_Dept_Code);
PARAMETER(PAR.WIP_Usage_Prod_Line_Code);
PARAMETER(PAR.Production_Shift);
PARAMETER(PAR.Number_of_Prod_Shifts);
{
 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?End of File
 CASE;

 // IF DB1.Transaction Date Code GT PAR.Date To               USR
 IF DB1.Transaction_Date_Code > PAR.Date_To_USR;

 // OR DB1.Transaction Date Code EQ PAR.Date To               USR
 OR ( DB1.Transaction_Date_Code = PAR.Date_To_USR;

 // AND DB1.Job Time GT PAR.USR To Time 6.0
 AND DB1.Job_Time > PAR.USR_To_Time_6_0 );

 QUIT;

 ENDIF;

 EXECUTE FUNCTION(Rtv Item Yield Info   RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1672890;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(NLL.Unit_Weight);
 PARAMETER(LCL.Item_Structure_Class_Code);
 PARAMETER(LCL.Item_Structure_Group_Code);
 PARAMETER(LCL.Item_Structure_Type_Code);
 PARAMETER(LCL.Item_Type_Code);
 PARAMETER(LCL.Credit_Item_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Dept/Line         RT) TYPE(RTVOBJ) FILE(POCNREP)           AC1664090;
 PARAMETER(LCL.Item_Structure_Type_Code);
 PARAMETER(LCL.Item_Structure_Group_Code);
 PARAMETER(LCL.Item_Structure_Class_Code);
 PARAMETER(WRK.Department_Code);
 PARAMETER(WRK.Production_Line_Code);
 PARAMETER(LCL.WIP_Usage_Dept_Code);
 PARAMETER(WRK.WIP_Usage_Prod_Line_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?OMT:  WIP Deletes for-Pumped, Chops, Trim Blend, & Ground Pork
 CASE;

 // IF DB1.Transaction Weight is Less than zero
 IF DB1.Transaction_Weight < *ZERO;

 // AND LCL.Item Type Code is Work in Process
 AND LCL.Item_Type_Code = 'WP';

 CASE;

 // IF LCL.WIP Usage Dept Code is Chops
 IF LCL.WIP_Usage_Dept_Code = 'CHOPS';

 // OR LCL.WIP Usage Dept Code is Pump
 OR LCL.WIP_Usage_Dept_Code = 'PUMP';

 // OR LCL.WIP Usage Dept Code is Trim Blend
 OR LCL.WIP_Usage_Dept_Code = 'TRMBLN';

 // OR LCL.WIP Usage Dept Code is Ground Pork
 OR LCL.WIP_Usage_Dept_Code = 'GRIND';

 // OR LCL.WIP Usage Dept Code is Belly
 OR LCL.WIP_Usage_Dept_Code = 'BELLY';

 // OR LCL.WIP Usage Dept Code is Loin Boning
 OR LCL.WIP_Usage_Dept_Code = 'LOINS';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Exclude Trans where Shift not = Shift being processed
 CASE;

 // IF DB1.Shift Number NE PAR.Production Shift
 IF DB1.Shift_Number <> PAR.Production_Shift;

 // AND PAR.Number of Prod Shifts is Shift 2
 AND PAR.Number_of_Prod_Shifts = '2';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?All of the Items in the Structure will be captured.
 //?If the structure does not have a Production Line identified,
 //?then the weight will not be captured.
 //?Process Record
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 //?Accum +/- separately
 CASE;

 // IF DB1.Transaction Quantity is Less than zero
 IF DB1.Transaction_Quantity < *ZERO;

 // LCL.Trans qty - Final Tot = DB1.Transaction Quantity
 LCL.Trans_qty_Final_Tot = DB1.Transaction_Quantity;

 // LCL.Trans Wgt -           USR = DB1.Transaction Weight
 LCL.Trans_Wgt_USR = DB1.Transaction_Weight;

 //?Accum +/- separately
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Trans qty + Final Tot = DB1.Transaction Quantity
 LCL.Trans_qty_+_Final_Tot = DB1.Transaction_Quantity;

 // LCL.Trans Wgt +           USR = DB1.Transaction Weight
 LCL.Trans_Wgt_+_USR = DB1.Transaction_Weight;

 ENDIF;

 //?Crt/Chg Yld Trans Detail for +RR & +WP
 CASE;

 // IF LCL.Trans qty + Final Tot is Entered
 IF LCL.Trans_qty_+_Final_Tot <> 0;

 EXECUTE FUNCTION(RTV Pces/Bag,Bag/Unit  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1480428;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.Description_Line_One);
 PARAMETER(LCL.Unit_Weight);
 PARAMETER(LCL.Piece_Count_Item);
 PARAMETER(LCL.Pieces_Per_Bag);
 PARAMETER(LCL.Bags_Per_Unit);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Transaction Pieces
 CASE;

 // IF LCL.Item Type Code is Finished Goods
 IF LCL.Item_Type_Code = 'FG';

 // Compute:Trans pieces
 LCL.Yld_Transaction_Pieces = ( LCL.Trans_qty_+_Final_Tot * LCL.Pieces_Per_Bag 'H' )
 * LCL.Bags_Per_Unit 'H';

 //?Transaction Pieces
 // IF LCL.Item Type Code is Work in Process
 IF LCL.Item_Type_Code = 'WP';

 // Compute:Trans pieces
 LCL.Yld_Transaction_Pieces = ( LCL.Trans_Wgt_+_USR / LCL.Unit_Weight 'H' ) (
 LCL.Pieces_Per_Bag * LCL.Bags_Per_Unit 'H' ) 'H';

 ENDIF;

 EXECUTE FUNCTION(Rtv Chg Crt YDT       RT) TYPE(RTVOBJ) FILE(POCPCPP)           AC1665123;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(PAR.Production_Shift);
 PARAMETER(DB1.Item_Code);
 PARAMETER(*ZERO);
 PARAMETER('RR');
 PARAMETER(LCL.Trans_qty_+_Final_Tot);
 PARAMETER(LCL.Trans_Wgt_+_USR);
 PARAMETER(LCL.Yld_Transaction_Pieces);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Yld Detail Trans  IF) TYPE(EXCINTFUN)                      AC1664727;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(PAR.Item_Code);
  PARAMETER(*ZERO);
  PARAMETER('RR');
  PARAMETER(PAR.Yld_Transaction_Quantity);
  PARAMETER(PAR.Yld_Transaction_Weight);
  PARAMETER('S');
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Next Sequence Num RT) TYPE(RTVOBJ) FILE(POCPCPP)           AC1664732;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Production_Line_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Production_Shift);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Partial_Item_Code);
   PARAMETER(PAR.Yld_Transaction_Code);
   PARAMETER(PAR.Yld_Transaction_Seq);
   {
    //?USER: Processing if Data record not found

    // PAR.Yld Transaction Seq = CON.1
    PAR.Yld_Transaction_Seq = 1;

    //?USER: Process Data record

    // PAR.Yld Transaction Seq = DB1.Yld Transaction Seq + CON.1
    PAR.Yld_Transaction_Seq = DB1.Yld_Transaction_Seq + 1;

    QUIT;

   }

   EXECUTE FUNCTION(Rtv Typ/Grp/Cls, Type RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1664670;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Credit_Item_Status);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // PAR.Yld Transaction Comment = CON.*BLANK
   PAR.Yld_Transaction_Comment = *BLANK;

   // PAR.Yld Transaction Post Sts = CND.Open
   PAR.Yld_Transaction_Post_Sts = 'O';

   EXECUTE FUNCTION(RTV Pces/Bag,Bag/Unit  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1480428;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.Description_Line_One);
   PARAMETER(LCL.Unit_Weight);
   PARAMETER(LCL.Piece_Count_Item);
   PARAMETER(LCL.Pieces_Per_Bag);
   PARAMETER(LCL.Bags_Per_Unit);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF PAR.Item Type Code is Finished Goods
   IF PAR.Item_Type_Code = 'FG';

   // Compute:Trans pieces
   PAR.Yld_Transaction_Pieces = ( PAR.Yld_Transaction_Quantity * LCL.Pieces_Per_Bag 'H' )
   * LCL.Bags_Per_Unit 'H';

   // IF PAR.Item Type Code is Work in Process
   IF PAR.Item_Type_Code = 'WP';

   // Compute:Trans pieces
   PAR.Yld_Transaction_Pieces = ( PAR.Yld_Transaction_Weight / LCL.Unit_Weight 'H' ) (
   LCL.Pieces_Per_Bag * LCL.Bags_Per_Unit 'H' ) 'H';

   ENDIF;

   EXECUTE FUNCTION(Crt Yld Detail Trans  CR) TYPE(CRTOBJ) FILE(POCPCPP)           AC1664092;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Production_Line_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Production_Shift);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Partial_Item_Code);
   PARAMETER(PAR.Yld_Transaction_Code);
   PARAMETER(PAR.Yld_Transaction_Seq);
   PARAMETER(PAR.Yld_Transaction_Quantity);
   PARAMETER(PAR.Yld_Transaction_Weight);
   PARAMETER(PAR.Yld_Transaction_Pieces);
   PARAMETER(PAR.Yld_Transaction_Comment);
   PARAMETER(PAR.Yld_Transaction_Source);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Yld_Transaction_Post_Sts);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  //?USER: Process Data record

  // LCL.Yld Transaction Quantity = DB1.Yld Transaction Quantity + PAR.Yld Transaction Quantity
  LCL.Yld_Transaction_Quantity = DB1.Yld_Transaction_Quantity
  + PAR.Yld_Transaction_Quantity;

  // LCL.Yld Transaction Weight = DB1.Yld Transaction Weight + PAR.Yld Transaction Weight
  LCL.Yld_Transaction_Weight = DB1.Yld_Transaction_Weight + PAR.Yld_Transaction_Weight;

  // LCL.Yld Transaction Pieces = DB1.Yld Transaction Pieces + PAR.Yld Transaction Pieces
  LCL.Yld_Transaction_Pieces = DB1.Yld_Transaction_Pieces + PAR.Yld_Transaction_Pieces;

  EXECUTE FUNCTION(Chg Yld Detail Trans  CH) TYPE(CHGOBJ) FILE(POCPCPP)           AC1664093;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Department_Code);
  PARAMETER(DB1.Production_Line_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Production_Shift);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Partial_Item_Code);
  PARAMETER(DB1.Yld_Transaction_Code);
  PARAMETER(DB1.Yld_Transaction_Seq);
  PARAMETER(LCL.Yld_Transaction_Quantity);
  PARAMETER(LCL.Yld_Transaction_Weight);
  PARAMETER(LCL.Yld_Transaction_Pieces);
  PARAMETER(DB1.Yld_Transaction_Comment);
  PARAMETER(DB1.Yld_Transaction_Source);
  PARAMETER(DB1.Item_Type_Code);
  PARAMETER(DB1.Credit_Item_Status);
  PARAMETER(DB1.Yld_Transaction_Post_Sts);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 ENDIF;

 //?Crt/Chg Yld Inv Bal for -WP
 CASE;

 // IF LCL.Item Type Code is Work in Process
 IF LCL.Item_Type_Code = 'WP';

 CASE;

 // IF LCL.Trans qty + Final Tot is Entered
 IF LCL.Trans_qty_+_Final_Tot <> 0;

 // OR LCL.Trans qty - Final Tot is Entered
 OR LCL.Trans_qty_Final_Tot <> 0;

 EXECUTE FUNCTION(Rtv Crt/Chg YIB       RT) TYPE(RTVOBJ) FILE(POCOCPP)           AC1664305;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Production_Line_Code);
 PARAMETER(DB1.Transaction_Date_Code);
 PARAMETER(PAR.Production_Shift);
 PARAMETER(DB1.Item_Code);
 PARAMETER(*ZERO);
 PARAMETER('WP');
 PARAMETER(PAR.WIP_Usage_Company_Num);
 PARAMETER(PAR.WIP_Usage_Dept_Code);
 PARAMETER(PAR.WIP_Usage_Prod_Line_Code);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Trans_qty_Final_Tot);
 PARAMETER(LCL.Trans_Wgt_USR);
 PARAMETER(LCL.Credit_Item_Status);
 {
  //?USER: Processing if Data record not found

  // LCL.Delete Pending Qty = CON.*ZERO - PAR.Delete Pending Qty
  LCL.Delete_Pending_Qty = *ZERO - PAR.Delete_Pending_Qty;

  // LCL.Delete Pending Wgt = CON.*ZERO - PAR.Delete Pending Wgt
  LCL.Delete_Pending_Wgt = *ZERO - PAR.Delete_Pending_Wgt;

  EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Item_Structure_Class_Code);
  PARAMETER(LCL.Item_Structure_Group_Code);
  PARAMETER(LCL.Item_Structure_Type_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Crt Yld Inventory Bal CR) TYPE(CRTOBJ) FILE(POCOCPP)           AC1664073;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Partial_Item_Code);
  PARAMETER(PAR.Yld_Inv_Balance_Type);
  PARAMETER(PAR.WIP_Usage_Company_Num);
  PARAMETER(PAR.WIP_Usage_Dept_Code);
  PARAMETER(PAR.WIP_Usage_Prod_Line_Code);
  PARAMETER(PAR.Partial_Produced_Qty);
  PARAMETER(PAR.Partial_Produced_Wgt);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Delete_Pending_Qty);
  PARAMETER(LCL.Delete_Pending_Wgt);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER('O');
  PARAMETER(PAR.Credit_Item_Status);
  PARAMETER(LCL.Item_Structure_Type_Code);
  PARAMETER(LCL.Item_Structure_Group_Code);
  PARAMETER(LCL.Item_Structure_Class_Code);
  PARAMETER(WRK.EDI_Status_1);
  PARAMETER(WRK.EDI_Status_2);
  PARAMETER(WRK.EDI_Status_3);
  PARAMETER('A');
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // LCL.Produced Qty = DB1.Produced Qty + PAR.Produced Qty
  LCL.Partial_Produced_Qty = DB1.Partial_Produced_Qty + PAR.Partial_Produced_Qty;

  // LCL.Produced Wgt = DB1.Produced Wgt + PAR.Produced Wgt
  LCL.Partial_Produced_Wgt = DB1.Partial_Produced_Wgt + PAR.Partial_Produced_Wgt;

  // LCL.Delete Pending Qty = DB1.Delete Pending Qty - PAR.Delete Pending Qty
  LCL.Delete_Pending_Qty = DB1.Delete_Pending_Qty - PAR.Delete_Pending_Qty;

  // LCL.Delete Pending Wgt = DB1.Delete Pending Wgt - PAR.Delete Pending Wgt
  LCL.Delete_Pending_Wgt = DB1.Delete_Pending_Wgt - PAR.Delete_Pending_Wgt;

  EXECUTE FUNCTION(Chg Yld Inventory Bal CH) TYPE(CHGOBJ) FILE(POCOCPP)           AC1664074;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Department_Code);
  PARAMETER(DB1.Production_Line_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Production_Shift);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Partial_Item_Code);
  PARAMETER(DB1.Yld_Inv_Balance_Type);
  PARAMETER(DB1.WIP_Usage_Company_Num);
  PARAMETER(DB1.WIP_Usage_Dept_Code);
  PARAMETER(DB1.WIP_Usage_Prod_Line_Code);
  PARAMETER(LCL.Partial_Produced_Qty);
  PARAMETER(LCL.Partial_Produced_Wgt);
  PARAMETER(DB1.Beginning_Inv_Qty);
  PARAMETER(DB1.Beginning_Inv_Wgt);
  PARAMETER(LCL.Delete_Pending_Qty);
  PARAMETER(LCL.Delete_Pending_Wgt);
  PARAMETER(DB1.Used_Qty);
  PARAMETER(DB1.Used_Wgt);
  PARAMETER(DB1.Not_Used_Qty);
  PARAMETER(DB1.Not_Used_Wgt);
  PARAMETER(DB1.WIP_Rejected_Qty);
  PARAMETER(DB1.WIP_Rejected_Wgt);
  PARAMETER(DB1.Yld_Balance_Comment);
  PARAMETER('O');
  PARAMETER(DB1.Credit_Item_Status);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(WRK.EDI_Status_1);
  PARAMETER(WRK.EDI_Status_2);
  PARAMETER(WRK.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 ENDIF;

 ENDIF;

 //?Crt/Chg Yld Inv Bal for -RR
 CASE;

 // IF LCL.Trans qty - Final Tot is Entered
 IF LCL.Trans_qty_Final_Tot <> 0;

 // AND LCL.Item Type Code is Finished Good
 AND LCL.Item_Type_Code = 'FG';

 EXECUTE FUNCTION(Rtv Crt/Chg YIB       RT) TYPE(RTVOBJ) FILE(POCOCPP)           AC1664305;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Production_Line_Code);
 PARAMETER(DB1.Transaction_Date_Code);
 PARAMETER(PAR.Production_Shift);
 PARAMETER(DB1.Item_Code);
 PARAMETER(*ZERO);
 PARAMETER('FG');
 PARAMETER(PAR.WIP_Usage_Company_Num);
 PARAMETER(PAR.WIP_Usage_Dept_Code);
 PARAMETER(PAR.WIP_Usage_Prod_Line_Code);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Trans_qty_Final_Tot);
 PARAMETER(LCL.Trans_Wgt_USR);
 PARAMETER(LCL.Credit_Item_Status);
 {
  //?USER: Processing if Data record not found

  // LCL.Delete Pending Qty = CON.*ZERO - PAR.Delete Pending Qty
  LCL.Delete_Pending_Qty = *ZERO - PAR.Delete_Pending_Qty;

  // LCL.Delete Pending Wgt = CON.*ZERO - PAR.Delete Pending Wgt
  LCL.Delete_Pending_Wgt = *ZERO - PAR.Delete_Pending_Wgt;

  EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Item_Structure_Class_Code);
  PARAMETER(LCL.Item_Structure_Group_Code);
  PARAMETER(LCL.Item_Structure_Type_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Crt Yld Inventory Bal CR) TYPE(CRTOBJ) FILE(POCOCPP)           AC1664073;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Partial_Item_Code);
  PARAMETER(PAR.Yld_Inv_Balance_Type);
  PARAMETER(PAR.WIP_Usage_Company_Num);
  PARAMETER(PAR.WIP_Usage_Dept_Code);
  PARAMETER(PAR.WIP_Usage_Prod_Line_Code);
  PARAMETER(PAR.Partial_Produced_Qty);
  PARAMETER(PAR.Partial_Produced_Wgt);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Delete_Pending_Qty);
  PARAMETER(LCL.Delete_Pending_Wgt);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER('O');
  PARAMETER(PAR.Credit_Item_Status);
  PARAMETER(LCL.Item_Structure_Type_Code);
  PARAMETER(LCL.Item_Structure_Group_Code);
  PARAMETER(LCL.Item_Structure_Class_Code);
  PARAMETER(WRK.EDI_Status_1);
  PARAMETER(WRK.EDI_Status_2);
  PARAMETER(WRK.EDI_Status_3);
  PARAMETER('A');
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // LCL.Produced Qty = DB1.Produced Qty + PAR.Produced Qty
  LCL.Partial_Produced_Qty = DB1.Partial_Produced_Qty + PAR.Partial_Produced_Qty;

  // LCL.Produced Wgt = DB1.Produced Wgt + PAR.Produced Wgt
  LCL.Partial_Produced_Wgt = DB1.Partial_Produced_Wgt + PAR.Partial_Produced_Wgt;

  // LCL.Delete Pending Qty = DB1.Delete Pending Qty - PAR.Delete Pending Qty
  LCL.Delete_Pending_Qty = DB1.Delete_Pending_Qty - PAR.Delete_Pending_Qty;

  // LCL.Delete Pending Wgt = DB1.Delete Pending Wgt - PAR.Delete Pending Wgt
  LCL.Delete_Pending_Wgt = DB1.Delete_Pending_Wgt - PAR.Delete_Pending_Wgt;

  EXECUTE FUNCTION(Chg Yld Inventory Bal CH) TYPE(CHGOBJ) FILE(POCOCPP)           AC1664074;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Department_Code);
  PARAMETER(DB1.Production_Line_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Production_Shift);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Partial_Item_Code);
  PARAMETER(DB1.Yld_Inv_Balance_Type);
  PARAMETER(DB1.WIP_Usage_Company_Num);
  PARAMETER(DB1.WIP_Usage_Dept_Code);
  PARAMETER(DB1.WIP_Usage_Prod_Line_Code);
  PARAMETER(LCL.Partial_Produced_Qty);
  PARAMETER(LCL.Partial_Produced_Wgt);
  PARAMETER(DB1.Beginning_Inv_Qty);
  PARAMETER(DB1.Beginning_Inv_Wgt);
  PARAMETER(LCL.Delete_Pending_Qty);
  PARAMETER(LCL.Delete_Pending_Wgt);
  PARAMETER(DB1.Used_Qty);
  PARAMETER(DB1.Used_Wgt);
  PARAMETER(DB1.Not_Used_Qty);
  PARAMETER(DB1.Not_Used_Wgt);
  PARAMETER(DB1.WIP_Rejected_Qty);
  PARAMETER(DB1.WIP_Rejected_Wgt);
  PARAMETER(DB1.Yld_Balance_Comment);
  PARAMETER('O');
  PARAMETER(DB1.Credit_Item_Status);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(WRK.EDI_Status_1);
  PARAMETER(WRK.EDI_Status_2);
  PARAMETER(WRK.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 ENDIF;

 ENDIF;

 // LCL.Trans qty + Final Tot = CON.*ZERO
 LCL.Trans_qty_+_Final_Tot = *ZERO;

 // LCL.Trans Wgt +           USR = CON.*ZERO
 LCL.Trans_Wgt_+_USR = *ZERO;

 // LCL.Trans qty - Final Tot = CON.*ZERO
 LCL.Trans_qty_Final_Tot = *ZERO;

 // LCL.Trans Wgt -           USR = CON.*ZERO
 LCL.Trans_Wgt_USR = *ZERO;

}


