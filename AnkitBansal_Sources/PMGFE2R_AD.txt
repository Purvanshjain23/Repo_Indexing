// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMGFE2R
// ?Date: 14.08.2025 Time: 03:45:02
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?***  Note: Files have maxed out at 50. Use XF if adding a new function.
//?***** MODIFICATION HISTORY
DO;

//?S020798 SR3020798 Shefali 04/15/25 Send Order confirmation Email to
//?                                   Salesperson
//?- Get field "Email to Salesperson" from PDS0PVR and pass to PDJWPCLP
//?S312312 SR3012312 Santosh 08/06/24 Send Order confirmation Email to Broker
//?- Get field "Email to Broker" from PDS0PVR and pass it to PPFDXFR.
//?S028326 JM 08/22/24 - Validation added to stop new order creation
//?                    - with Zero Order Number.
//?S302751 Santosh 03/14/24 For International state account, Prepaid Shipping
//?      method & alphanumeric zip code set Code same as Shipto Country if
//?      it is blank. Also fields "Ship to Customer      USR" and "Country Co
//?      de 1 usr" is added on screen and are hidden.
//?*****
//?W104274 RMC 07/29/22  hugoton SE plant.. added check for it for equiv 1.5
//?*****
//?DO2416 DN  03/24/22 - PHIS Continuation WI 500
//?- Validate Country Code is 'active'. If not active, throw error msg.
//?  Replaced 'RTV Chk if valid Cntry RT' function with
//?  'Val Country & Active   RT'.
//?*****
//?W77844 DN  06/11/21 - Changed screen field 'Spot Buy  (Y/N)' to
//?  have the following valid values: 'S'pot , 'T'urn, 'P'romo
//?  No longer will use LST 'Y/N Values'. Use LST
//?  'Valid Values for Spot Buy' instead.
//?- Convert field 'OHE Spot Buy' existing values from:
//?  '*YES' -> 'S'pot.
//?  '*NO'  -> 'T'urn.
//?  Will save future values as single value in: 'S', 'T', 'P'.
//?- Changed message text (USR4747) from 'Spot Buy Y/N required' to
//?  'Spot Buy S/T/P required.'.
//?*****
//?R16048 RMC 01/17/20 - HPB - validate ship to warehouse type matches
//? shipfrom warehouse. dont let txfr to/fr Blended to a not blended whse/tnk
//?*****
//?R15161 DN  08/06/19 - Export Load AS400 Updates
//?- DBF Change on Order Header Extsn (PMAMREP) File. Changed:
//?  OHE Voyage/Flight from 5.0 to 15A.
//?  OHE Booking Number from 12A to 15A.
//?  Added: OHE Genset Number 15A.
//?- Recompiled only due to calling PNLLXFR program parm changed for
//?  OHE file.
//?*****
//?** 11/28/18   RMC E01714 REallocate if Req Delivery date changes too
//?**   in Process Command Keys section
//?*****
//?R13074 DN  06/15/18 - FSIS Export Document from USDA
//?- This was to support WHD33039. Changed Export & Air Freight
//?  validation to set Export Docs Go w/Driver flag.
//?R12926 DN  05/03/18 - Absorbed Freight Rate Override
//?- Use Absorbed Freight Rate (AFR) on an Order for all Order
//?  processing. Do not get AFR from the Company Customer once it is
//?  on the Order.
//?- If AFR is 0 from the Order Header, get AFR from the Co Customer.
//?- When creating a new Order, populate the OHE Orig ABS Freight Rate
//?  in the Order Hdr Extsn with the AFR from the detail screen.
//?- When in CHANGE mode & the ABS Freight Rate changes then update
//?  Orig ABS Freight Rate in the Order Hdr Extsn file. And if the
//?  Abs Freight Rate is changed to 0 then set Abs Rate Override Rsn
//?  to blank in the Order Hdr Extsn. Changed PMDHXFR.
//?*****
//?** 10/12/17   RMC E011229 Check dup po sans company
//?08/21/2017 DN  T11489 - Order Acknowledgement to Regional Manager
//?- Added 2 parms 'Salesperson Code & Name' to PDS0PVR which is the
//?  Regional Sales Manager.
//?- Added parm 'Salesperson Code' to PPFDXFR.
//?** 06/08/2017 RMC R9064 - COMP/CUST CAN NOW BE inactive, so modify to allo
//?** 02/06/2017 RMC R7574 - dont set status - mileage to NO ever
//?** 10/19/2016 JJH R7574 - Change logic to validate Order Detail
//?  exists.  Used in conjunction with changing Warehouse on Order.
//?  Add additional validation that will only occur in Change Mode.
//?*****
//?** 08/17/2016 RMC R6965
//?** New hpb plant
//?*****
//?E4119L 7/18/16 RMC if MG Created load: dont set load acceptance flag
//?    if load plan ready=Y, output only the shipping method
//?E4119L 6/29/16 RMC check new pfs interface: TMSLDP to disable F16
//?E4119 5/23/16 RMC Remove live with tpm checks
//?***** PA PROCESS - USE REQUESTED SHIP DATE FOR Ship Date USR *****
//?***** Description of information and status flags
DO;

//?********************************************************************
//?*****  Special note *****
//?** Any changes that affect the movement of trucks needs to be
//?** given the department control code of TRF (Transportation)
//?** not SLS (Sales), and a Load Order Change Log record is to be written.
//?**   a. All Date changes   b. Warehouse change   c. Shipping method chgs
//?**   d. any change that affects the movement of a truck (not contents)
//?**   e. PO# change (load confirm needs to be resent)
//?** This way Traffic will be notified that a change has been made
//?** and they can notify the correct carriers (both the old and new).
//?***** Status Flags:
//?** Print (Yes/No) USR=Print Acknowledgement,
//?** Status Flag 2=Buyer Fax, Status Flag 3=Regional Sales Manager
//?** Status Flag 4=Broker Fax-which is not used at this level
//?** Status Flag 5=Print Get Ready Rpt, Status Flag 6=EDI Ack to Cust
//?** Status Flag 7=Fax Ack to Customer
//?** Status Flag 8=SSD error-Order <> Load
//?** Status Flag 9=Errors Pending in Order Detail recs
//?** Status Flag 10=Hide Appt Date/Time, contact, if Yes or not SBD
//?** Status Flag 12=Load Plan Ready (send to MG)
ENDDO;

//?*****
//?* 03/16/2016 E005434  Blank out OHE TPM Location Code when calling
//?  the Create program
//?* 11/02/2015 E004119 Put "Load Plan Ready" back on the
//?  Confirm Prompt popup. Make Load Planning output only
//?  include Letter of Credit, Cindy frequently has it available
//?  when entering LOC orders
//?* 04/08/2015 LJB E004119   After Live w/TPM, disable F16=Load Planning,
//?  set Load Plan Order=N. Don't validate Load ID. Also disable F7, F13
//?  and F19 if live w/TPM or if Load ID <> zeros
//?*****
//?!03/25/2015  c4026 RMC fix mileage between cities issues: Cvt to CAPITALS!
//? 11/24/2014  E3641 RMC dont allow warehouse chg from a fr<->Fz if there
//?  are OD lines because that will cause the items to not be valid for the
//?   warehouse     -- ** Commented for now 2/24/15
//? 08/15/2014  E3323 RMC req spot buy. dont dft to No unless not SBD Org
//? 06/09/2014  P0196 RMC add spot buy to screen. dft ' ' = N
//?             from OHE unused sts renamed Spot Buy
//?*****
//? 06/04/2014  P0196 RMC Default 363 MSL to Print Pick Slip = N
//? in Crt/Chg XFs
//?*****
//? 01/09/2014  E2625 RMC Undo tpm stuff
//?*****
//? 06/20/2013  E2625 RMC Get tpm loc from ship to, and upd OHE with it
//?  Cant F7/F16 if Live with tpm=Y, condition fields on 'Sent to Tpm'
//?*****
//? 06/17/2013  E2640 RMC Call Different Load Ord chg log for Cancel sans ld
//?*****
//?** 05/09/2013 RMC C2586 Upd tpm freight order sts in post routine
//?*****
//?** 02/07/2013 RMC E2438 For SBD also Upd OHE Override type code
//?** so they can change a customer type to something else per order-
//?   default from salesperson sales channel
//?*****
//? * 07/12/2012 RMC C2180 if order require review is NO update OH if it WAS
//?    YES... all orders with sts "A" were being change to "E" which caused
//?  potential erroneous sched ship date change to req ship date
//?*****
//?** 01/12/2012 RMC E1814 HPB Validate ship from/to whses being external
//?**            for Transfer orders billing activity=4
//?*****
//?** 09/30/2011 RMC E1762 HPB Upd OHE Override type code
//?** so they can change a RIN cust sale to NON RIN
//?*****
//?** 09/20/2011 LJB P001251 Export Order Automation Upload
//?** If "Order Requires Review" = "Y" then there are errors
//?** pending in Order Detail from Export Order Automation upload
//?** Check the Order Detail at the end of order processing. If there
//?** are none, reset the Order Requires Review flag = "  ".
//?** Re-Test for errors in F20=Post routine             P001251
//?*****
//?** 09/09/2011 RMC E01714
//?** write chg log if req delv date OR time chgs
//?*****
//?** 08/10/2011 RMC E01692
//?** HPB Only - dont allow hpb whs if cust ULSD Company is blank
//?** Whs req meter readings sts determines if whs has biodiesel or byprodcts
//?*****
//?** 07/07/2011 LJB E001625
//?** Email TRAFFIC (esend profile) if no Mileage Between Cities rec
//?*****
//?** 5/19/2011 RMC E01488
//?** Display appt confirm dt/tm from OH and confirm#/Nm from ohe
//?** Added F7=Dsp Appts
//?*****
//?** 5/02/2011 RMC E01523
//?** Use req delv dt/time for ddt calc always.
//?*****
//?** 09/14/2010 RMC E914 HPB Only added RIN Equiv Value and RIN Price
//?**   from Order Header Ext file
//?********************************************************************
//?** 03/26/2010 SLM FP1309
//?HIDE PROCESS OF AGE CODE
EXECUTE FUNCTION(FP1309 Inventory Age  IF) TYPE(EXCINTFUN)                      AC1981251;
{
 //?Execute internal function

 //?FP1309 Inventory Age Code Description
}


//?********************************************************************
//?** 03/08/2010 LJB E000589
//?** Validate Scheduled Ship Date. If error, user cannot change
//?** unless Requested Ship or Delivery dates are unlocked.
//?*****
//?** 01/26/2010 LJB W288  Post-install changes
//?** Change the Restricted Time Range test to: If Requested Ship
//?** Date = Deadline Departure Date then enforce the Restriced Hours
//?** If Export with no State Code, use SSD and dflt time to 8:00
//?*****
//?** 12/15/2009 RMC FP1322
//?** For HPB Only -
//?** Added Ship To warehouse for when they're shipping from hp1/hp2 to
//?** an external 369 whse that makes the fuel owned by 369 HPB Biodiesel.
//?** The fuel will be sold from there to an outside customer later.
//?*****
//?** 12/02/2009 LJB W288
//?** For Seaboard only (skip HPB and Daily's)
//?** If shipping today, retrieve Shipping Restricted Hours from
//?** Warehouse Control. Warning if DDT falls within Restriced
//?** time range. Warning also if DDD/T falls before right now.
//?*****
//?**11/2009 PKD**
EXECUTE FUNCTION(E00519 Access by WHS  IF) TYPE(EXCINTFUN)                      AC1960775;
{
 //?Execute internal function

 //?---------- November 2009 PKD ----------
 //?*****  WW Cust/Order Inq O.E.  *****
 //?- Do not allow Transfer Co if Application WHS Restrict = Y.
 //?***** Edit Order Header ***** -TESTED 11/10/09
 //?-  Added validation on Warehouse Code.  If Application WHS Restrict
 //?is Yes, then only the Warehouse Code for O/P Application Code
 //?are allowed.  If the Application WHS Restrict is No, then the
 //?User is allowed access to all Active Warehouses.
 //?-  Changed the F4=Prompt to only display the Warehouses the
 //?User has access to if the Application WHS Restrict is Yes.
 //?***** Edit Order Detail Lines & Copy Order Template ***** TESTED 11/10
 //?-  Added validation for Item Code. For each application and
 //?Warehouse, addtional access control is defined for TF Exempt Code.
 //?Users that are restricted by Warehouse, they may also be restricted
 //?on the Items they are able to sell.
 //?-  Added validation on Order TF Exempt Code.  If the Customer is
 //?is Exempt, then they can only sell Exempt Product. (E00505)
 //?***** Edit Load Plan Order Entry *****
 //?-  Added WHS Code to the Control Context and Record Context.
 //?For Users that are Application WHS Restrict = Yes,
 //?the CTL.Warehouse Code will be restricted to the
 //?Warehouses that they have access to.
 //?-  CTL.Warehouse Code will be required for Users with
 //?Application Warehouse Controlled.
 //?-  Added Delivery State Code (Sail Port State) to the screen.
 //?It will default to the Ship To State Code.  It will be overriden
 //?to the Sail Port State if the Shipping Line and Port Delivery
 //?Terminal are entered in the Order Header Extent.
 //?-  Added subfile select for WHS and Delv ST.
 //?***** Edit Load Plan *****
 //?-  For Users that are Application WHS Restrict = Yes,
 //?the CTL.Warehouse Code will be restricted to the
 //?Warehouses that they have access to.
 //?-  CTL.Warehouse Code will be required for Users with
 //?Application Warehouse Controlled.
 //?-  CTL.USR Load Type---Default from the CTL.USR Warehosue Code
 //?for users that are Application WHS Restrict.
 //?***** Display Change Log/Accept Load (PDAOXFR) *****
 //?-  Deletes will not be accepted by Application WHS Restricted
 //?users because we do not know the Warehouse that was on the Load.
 //?-  If Application WHS Restrict is Yes, then only select the load
 //?for acceptance if at least one order on the load has a warehouse
 //?where the user has access.
 //?-  Reverse imaged Warehouse Code on the Display. The Users with
 //?Application WHS Restrict of No will be able to see all Loads.
 //?***** Edit Load Plan *****
 //?- Added Warehouse Code to the Control and Detail Context with
 //?appropriate validations.
 //?***** Work With Load Confirmation *****
 //?- Added Warehouse Code as a parameter from the Work With Load
 //?Plan All screen for selection of the Loads to Display on the
 //?screen.  Added selection for Warehouse Code if one passed in.
 //?If the Load is not to be selected due to not matching the Whs,
 //?a record is created for the load in the array (exception array).
 //?- Added Warehouse Code to the Subfile.
 //?***** Order Status Report Prompt *****
 //?- Added Warehouse Code restriction on the prompt.
 //?***** Work With Orders Price Audit/Maintenance *****
 //?- Added Warehouse Code restriction.
 //?***** Work With Orders - Edit Ship Date  *****
 //?- Added Warehouse Code restriction.
}


//?*****
//?** 9/29/2009 LJB E00495
//?** If order is on a load, rtv Carrier Date/Time and use in the
//?** Deadline Departure Date/Time calcs. Also in the Must Ship calcs.
//?*****
//?** 9/28/2009 LJB S00949
//?** Add date error comment under DDD/T. Condition it non-display
//?** Display in reverse image if Load SSD is not equal to Order SSD
//?** Write Load/Order Log rec for SSD change
//?*****
//?** 8/26/2009 LJB E00157
//?** Add "Intended for Export" country code and validation
//?** Add prompt for country code for "Intended for Export"
//?*****
//?** 7/29/2009 LJB E00447
//?** Allow changes to dates if a) not on a load,   b) on a load,
//?** and not locked, shipped, or invoiced and c) current date is
//?**  at least 7 days prior to SSD
//?** (Per Bo Bostic and Steve Burke)
//?*****
//?** 7/29/2009 LJB E00139 (revisited)
//?** If PO# changes, write log record. Unaccept if load is accepted.
//?** This way Traffic will need to re-accept and resend the
//?** load confirmation. Also, allow changes to dates if not on a
//?*****
//?** FP1303 LJB 01/15/09  RTV the delivery p.o. from OHE file
//?** If Delivery P.O. has changed then update the OHE file
//?*****
//?** 07/06/09 RMC S00584 If country code is changed, then
//?** del exp docs if they exist because theyre for the orig country
//?** 06/10/09 RMC FP1054 position cursor on req delv dt for block ords
//?** 12/01/2008 LJB E00255 - Added Fax Ack to customer in F20
//?** 9/23/2008 SAZ E00178 - Added code to EDI the Acknowledgement to cust
//?** 8/05/2008 RMC E00180 - in Command Key section, moved update
//?** of Order Header outside of CASE stmts to make sure its done
//?** before the F16.  Loads were getting planned and flagged as underweight
//?** because the order header weight wasnt updated yet.
//?*****
//?** 7/08/2008 RMC E00180 - dont allow F16 if ordered weight is -0-
//?** need this because of the underweight load change log creation
//?*****
//?** 6/25/2008 LJB FP1098
//?** Retrieve Export Defaults from Co/Cust for existing record
//?** update country code if type code is "EX"port for existing rec
//?*****
//?** 6/05/2008 LJB E00139
//?** Save PO# and Load ID.
//?*****
//?** 05/16/2008 LJB
//?** Time field cannot be zeros on an existing record. Unlock the
//?** field and send error message.
//?*****
//?** 04/28/2008 LJB E00147
//?** Test dates to see if they have been changed. if not, don't
//?** send error messages.
//?*****
//?** 04/22/2008 LJB E00147
//?** Requested Ship Date cannot be after Requested Delivery Date
//?*****
//?** 04/04/2008 LJB E00127
//?** If Ship Method changed from Collect to Prepaid, blank
//?** out the carrier code
//?*****
//?** 03/04/2008 LJB FP1251
//?** If the Shipping Method changes in the order header and the
//?** order is tied to a load, change the shipping method in
//?** the Load Header as well.
//?*****
//?** 02/21/2008 LJB FP1251
//?** Add Requested Ship Date to the tests in the Must Ship Date
//?** routine.
//?*****
//?** 01/14/2008 RMC FP1100 HPB
//?** If company org is "H"PB default Print Pick Slip to "N"o.
//?*****
//?** 01/03/2008 LJB E-OMS23
//?** Do not allow the Ship Date to be before the Delivery Date. Unlock
//?** the field if there is an error so it can be corrected.
//?*****
//?** 01/03/2008 LJB E-TRANS47 (Reverse FP1061)
//?** Change the department code back to Traffic (from Sales) if the
//?** Shipping Method changes. This will notify traffic that the original
//?** shipping company needs to be notified of a delete.
//?*****
//?** 12/14/2007 RMC FP1110 HPB
//?** If order is on a HPB Batch, then Retire all the RINS when del
//?** the order off of a load. they may exist if the order was shipp/unshipd
//?*****
//?** 11/16/2007 LJB FP1251
//?** If shipping method is CR or CT, default carrier to "BUY"
//?** and protect from change until shipping method is changed
//?** If this changes the carrier then write a record to
//?** the Load Order Change Log so Traffic sees the change
//?*****
//?** 10/23/2007 LJB Support
//?** Change the test on Requested Delivery date: Use WRK field to lock
//?** instead of Load ID *ne blanks, Unlock and allow change if
//?** it is before the scheduled delivery date
//?*****
//?8/01/07 RMC - for TR orders, Acct Co of whse on screen must eq
//?  the To Whse on the Transfer customer number
//?*****
//?6/20/07 Added Get Ready Report JRB DLY0129 in > F20=Post Order
//?*****
//?** 05/24/2007 RMC DLY029
//?** Broker not in OH so dont validate here;take broker order sts off screen
//?*****
//?** 05/21/2007 LJB DLY029
//?** Change parms to Fax Acknowledgements to accommodate additional
//?** parms required for new companies.
//?*****
//?PKTR01: Output air freight order sts from cust ext    08/09/06 RMC
//?*****
//?workin: Add company# and order# to parms being passed  08/31/06 LJB
//?        to WW Loads Order Entry (F16)
//?*****
//?01/23/07 Added error if Req Delv time < 0
//?*****
//?PK0519: Changes for Broker Order              10/20/03 RMC
//?*****
//?PKTR01: Changes for new Plant                 07/21/04 RMC
//?*****
ENDDO;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(WRK.Allow_Multi_Company);
PARAMETER(WRK.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?PKTR01 Get default shipping co for customer
CASE;

// IF PAR.Ship To Customer is not equal to zero
IF PAR.Ship_To_Customer <> *ZERO;

EXECUTE FUNCTION(RTV Shipping Co Dft    RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1701590;
PARAMETER(WRK.Company_Number_041405);
PARAMETER(PAR.Ship_To_Customer);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Default Shipping Co Sts is Yes
 IF DB1.Default_Shipping_Co_Sts = 'Y';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


//?Set PAR company
CASE;

// IF PAR.Company Number EQ WRK.ZERO
IF PAR.Company_Number = WRK.ZERO;

// PAR.Company Number = WRK.Company Number     041405
PAR.Company_Number = WRK.Company_Number_041405;

ENDIF;

ENDIF;

//?Use user's co if their multi-co = No
CASE;

// IF WRK.Allow Multi-Company is no
IF WRK.Allow_Multi_Company = 'N';

// WRK.Company Number     041405 = WRK.Company Number
WRK.Company_Number_041405 = WRK.Company_Number;

//?Set PAR company
CASE;

// IF PAR.Company Number EQ WRK.ZERO
IF PAR.Company_Number = WRK.ZERO;

// PAR.Company Number = WRK.Company Number     041405
PAR.Company_Number = WRK.Company_Number_041405;

ENDIF;

ENDIF;

// WRK.USR Display 1 = CND.No
WRK.USR_Display_1 = 'N';

// PAR.Next Program Name = CON.*BLANK
PAR.Next_Program_Name = *BLANK;

EXECUTE FUNCTION(RTV Dflt Type for Co   RT) TYPE(RTVOBJ) FILE(OPC0REP)          AC1316112;
PARAMETER(JOB.*USER);
PARAMETER('O/P');
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.Order_Type_Sales);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Auto order numbering for new order
CASE;

// IF PAR.Order Number EQ WRK.ZERO
IF PAR.Order_Number = WRK.ZERO;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

CASE;

// IF WRK.Allow Multi-Company is yes
IF WRK.Allow_Multi_Company = 'Y';

// WRK.USR Display 1 = CND.Yes
WRK.USR_Display_1 = 'Y';

ENDIF;

EXECUTE FUNCTION(RTV OP status          RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1129149;
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.Auto_Order_Numbering);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.Auto Order Numbering? is yes
IF WRK.Auto_Order_Numbering = 'Y';

//?PKTR01 - 7/21/04 Use company 000 for next order nbr
//? (was using Par.Company Number)
EXECUTE FUNCTION(RTV Next Order Number  RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1316902;
PARAMETER(*ZERO);
PARAMETER(PAR.Order_Number);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Auto order numbering for new order
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Program mode = CND.*CHANGE
PGM.*Program_mode = 'CHG';

ENDIF;

// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// WRK.USR Output Only Status = CND.no
WRK.USR_Output_Only_Status = 'N';

// LCL.Display Flag = CND.Yes
LCL.Display_Flag = 'Y';

// PAR.User Access = CND.None
PAR.User_Access = 'N';

// PAR.Status Flag 9  Y/N = CND.No
PAR.Status_Flag_9_Y_N = 'N';

// PAR.Status Flag 8  Y/N = CND.No
PAR.Status_Flag_8_Y_N = 'N';

// PAR.Status Flag 10 Y/N = CND.No
PAR.Status_Flag_10_Y_N = 'N';

//?** Display/NonDisplay Deadline Depart Date/Time warning  W288
// PAR.Status Flag 7  Y/N = CND.No
PAR.Status_Flag_7_Y_N = 'N';

// WRK.Explaination Text 1 = CONCAT(CON.Multi-Ord Ld-Call Sched f,CON./sched ship chg,CON.*ZERO)
WRK.Explaination_Text_1 = 'Multi-Ord Ld-Call Sched f' + '/sched ship chg' (*ZERO);

// WRK.Explaination 50 = CONCAT(CON.WARN:Invalid DDTime-durin,CON.g Whse Restricted time,CON.*ZERO)
WRK.Explaination_50 = 'WARN:Invalid DDTime-durin' + 'g Whse Restricted time' (*ZERO);

// WRK.Note: Text Usr - 50 = CONCAT(CON.WARN:Invld DDTime-must lo,CON.ad and ship before now,CON.*ZE
WRK.Note_Text_Usr_50 = 'WARN:Invld DDTime-must lo' + 'ad and ship before now' (*ZERO);

// WRK.Explaination Text 2 = CONCAT(CON.Detail records have upld,CON.errors pending,CON.1)
WRK.Explaination_Text_2 = 'Detail records have upld' + 'errors pending' (1);

//?User access update?
CASE;

// IF JOB.*USER is All IS DEV/PRD & Prktest
IF JOB.*USER = 'ALICEB'/'ISALICEB'/'PRKTEST'/'ISPURVAP'/'ISPPATE'/'ISROSEM'/'ISRCENT'              +
/'ISSMASO'/'ISSUSANM'/'ISLBUSE'/'ISLARAB'/'ISWGAUS'/'ISELOUC';

// PAR.User Access = CND.Update
PAR.User_Access = 'U';

ENDIF;

// Call program EXC Rtv Status        XF.
CALL PROGRAM(EXC Rtv Status        XF) ('PBXNXFR');
PARAMETER(PAR.Company_Number);
PARAMETER('TMSLDP');
PARAMETER(PAR.PFS_Carlisle_Active);

// Call program EXC Rtv Status-AS     XF.
CALL PROGRAM(EXC Rtv Status-AS     XF) ('PBX2XFR');
PARAMETER(PAR.Company_Number);
PARAMETER('TMSLDP');
PARAMETER(LCL.PFS_AccuSort_Active);

//?USER: Initialize key screen

CASE;

// IF WRK.Allow Multi-Company is no
IF WRK.Allow_Multi_Company = 'N';

// KEY.Company Number = WRK.Company Number
KEY.Company_Number = WRK.Company_Number;

// IF WRK.Allow Multi-Company is yes
IF WRK.Allow_Multi_Company = 'Y';

CASE;

// IF KEY.Company Number is Equal to zero
IF KEY.Company_Number = *ZERO;

// KEY.Company Number = PAR.Company Number
KEY.Company_Number = PAR.Company_Number;

CASE;

// IF KEY.Company Number is Equal to zero
IF KEY.Company_Number = *ZERO;

// KEY.Company Number = WRK.Company Number
KEY.Company_Number = WRK.Company_Number;

ENDIF;

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(KEY.Company_Number);
PARAMETER(LCL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Validate key screen

//?R12926 DN 05/03/18-At Order level, use Absorbed Freight Rate from OH.
EXECUTE FUNCTION(RTV Cust Ordering Dflt2RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1981275;
PARAMETER(KEY.Company_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Terms_Code);
PARAMETER(LCL.Sales_Route_Code);
PARAMETER(DTL.Special_Instructions_2);
PARAMETER(DTL.Special_Instructions);
PARAMETER(LCL.Carrier_Code);
PARAMETER(WRK.P_O_Required_Flag);
PARAMETER(DTL.Requested_Delivery_Time);
PARAMETER(WRK.Type_Code);
PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(PAR.Outside_Warehouse_Flag);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(LCL.Ord_Ent_Default_Sls_Rte);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Company Customer not found.'
ERROR(USR1007);
MSGPARM(KEY.Company_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Company Number = KEY.Company Number
PAR.Company_Number = KEY.Company_Number;

ENDIF;

//?USER: Initialize detail screen (new record)

// DTL.Field Description = CON.Scheduled Ship
DTL.Field_Description = 'Scheduled Ship';

// DTL.Reference. . . . . . . . = CON.Order Type . . . . . :
DTL.Reference = 'Order Type . . . . . :';

//?Get Shipping Co dft for ship to    7/27/04
CASE;

// IF DTL.Ship To Customer is not equal to zero
IF DTL.Ship_To_Customer <> *ZERO;

// AND DTL.USR Company Number is Equal to zero
AND DTL.USR_Company_Number = *ZERO;

CASE;

// IF PAR.Company Number is not equal to zero
IF PAR.Company_Number <> *ZERO;

// WRK.Company Number     041405 = PAR.Company Number
WRK.Company_Number_041405 = PAR.Company_Number;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Shipping Co Dft    RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1701590;
PARAMETER(WRK.Company_Number_041405);
PARAMETER(DTL.Ship_To_Customer);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Default Shipping Co Sts is Yes
 IF DB1.Default_Shipping_Co_Sts = 'Y';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


ENDIF;

ENDIF;

//?Multi-co processing
CASE;

// IF WRK.Allow Multi-Company is yes
IF WRK.Allow_Multi_Company = 'Y';

// AND PAR.Ship To Customer is equal to zero
AND PAR.Ship_To_Customer = *ZERO;

//?PKTR01 RMC 07/21/04  Dont def. company if allow multi co is Y
//? and ship to is blank    -- allow entry of co
// WRK.USR Display 1 = CND.Yes
WRK.USR_Display_1 = 'Y';

//?Multi-co processing
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Company Number = WRK.Company Number     041405
PAR.Company_Number = WRK.Company_Number_041405;

// DTL.USR Company Number = WRK.Company Number     041405
DTL.USR_Company_Number = WRK.Company_Number_041405;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.USR_Company_Number);
PARAMETER(DTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// DTL.Order Type - Sales = WRK.Order Type - Sales
DTL.Order_Type_Sales = WRK.Order_Type_Sales;

MOVE *ALL (To: DTL From: PAR);

// WRK.@Date - ATR = CON.*ZERO
WRK.@Date_ATR = *ZERO;

EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
PARAMETER(DTL.Order_Type_Sales);
PARAMETER(DTL.Billing_Activity_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Ship to and Bill to information
CASE;

// IF PAR.Ship To Customer NE WRK.ZERO
IF PAR.Ship_To_Customer <> WRK.ZERO;

EXECUTE FUNCTION(RTV Cust Addr, A/R,Loc RT) TYPE(RTVOBJ) FILE(CABBREP)          AC2068791;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Ship_To_Name);
PARAMETER(DTL.Ship_To_Address_Line_1);
PARAMETER(DTL.Ship_To_Address_Line_2);
PARAMETER(DTL.Ship_To_Address_Line_3);
PARAMETER(DTL.Ship_To_City);
PARAMETER(DTL.Ship_To_State_Code);
PARAMETER(DTL.Ship_To_Zip_Postal_Code);
PARAMETER(DTL.OHE_Abs_Rate_Override_Rsn);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.Email_Cust_On_Order_Ship);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Bill to Customer = DTL.A/R Customer Number
DTL.Bill_to_Customer = DTL.AR_Customer_Number;

EXECUTE FUNCTION(RTV Cust Name/Addr     RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1129143;
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.Bill_to_Name);
PARAMETER(DTL.Bill_to_Address_Line_1);
PARAMETER(DTL.Bill_to_Address_Line_2);
PARAMETER(DTL.Bill_to_Address_Line_3);
PARAMETER(DTL.Bill_to_City);
PARAMETER(DTL.Bill_to_State_Code);
PARAMETER(DTL.Bill_to_Zip_Postal_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// Call program RTV Co. Dflt Int All,O XF.
CALL PROGRAM(RTV Co. Dflt Int All,O XF) ('PMRMXFR');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Shipping_Method_Dft);
PARAMETER(PAR.Load_Type_Dft);
PARAMETER(PAR.LTL_Flag_Dft);
PARAMETER(PAR.Export_Status_Dft);
PARAMETER(PAR.Shrink_Wrap_Dft);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(PAR.Export_Code_Dft);
PARAMETER(PAR.Allow_Mult_Whse_to_Order);
PARAMETER(PAR.Allow_Multi_Export_On_Ord);
PARAMETER(PAR.Slip_Sheet_Dft);
PARAMETER(PAR.Palletize_Dft);
PARAMETER(PAR.Company_Organization);

//?Company/customer defaults
CASE;

// IF PAR.Ship To Customer NE WRK.ZERO
IF PAR.Ship_To_Customer <> WRK.ZERO;

EXECUTE FUNCTION(RTV Cust Ordering Dflt2RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1981275;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Terms_Code);
PARAMETER(LCL.Sales_Route_Code);
PARAMETER(DTL.Special_Instructions_2);
PARAMETER(DTL.Special_Instructions);
PARAMETER(LCL.Carrier_Code);
PARAMETER(WRK.P_O_Required_Flag);
PARAMETER(DTL.Requested_Delivery_Time);
PARAMETER(WRK.Type_Code);
PARAMETER(DTL.Absorbed_Freight_Rate_CWT);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(PAR.Outside_Warehouse_Flag);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(LCL.Ord_Ent_Default_Sls_Rte);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?06/16/10 PKD Default Sales Route
CASE;

// IF DTL.Sales Route Code is not entered
IF DTL.Sales_Route_Code = *BLANK;

CASE;

// IF LCL.Ord Ent Default Sls Rte is Yes
IF LCL.Ord_Ent_Default_Sls_Rte = 'Y';

// DTL.Sales Route Code = LCL.Sales Route Code
DTL.Sales_Route_Code = LCL.Sales_Route_Code;

ENDIF;

ENDIF;

//?E2438 Default Type Code for HPB - not for Foods
CASE;

// IF PAR.Company Organization is High Plains Biodiesel
IF PAR.Company_Organization = 'H';

// DTL.Type Code = WRK.Type Code
DTL.Type_Code = WRK.Type_Code;

ENDIF;

//?Validate Co/Cust exists
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// WRK.USR Warehouse Code = DTL.Warehouse Code
WRK.USR_Warehouse_Code = DTL.Warehouse_Code;

CASE;

// IF LCL.Carrier Code is Buyer's Truck
IF LCL.Carrier_Code = 'BUY';

// PAR.Shipping Method Dft = CND.Collect Truck
PAR.Shipping_Method_Dft = 'CT';

ENDIF;

//?Validate Co/Cust exists
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Company Customer not found.'
ERROR(USR1007);
MSGPARM(DTL.Company_Number);

QUIT;

ENDIF;

ENDIF;

//?HPB: Type Code
CASE;

// IF PAR.Company Organization is High Plains Biodiesel
IF PAR.Company_Organization = 'H';

// DTL.Text USR 8 = CON.Type Cd:
DTL.Text_USR_8 = 'Type Cd:';

//?HPB: Type Code
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Text USR 8 = CON.Sls Chn:
DTL.Text_USR_8 = 'Sls Chn:';

ENDIF;

//?Billing Activity type reset for transfer
CASE;

// IF PAR.Outside Warehouse Flag is yes
IF PAR.Outside_Warehouse_Flag = 'Y';

// DTL.Billing Activity Type = CND.Warehouse Transfer
DTL.Billing_Activity_Type = 4;

ENDIF;

//?Populate warehouse code
CASE;

// IF DTL.Billing Activity Type is Warehouse Transfer
IF DTL.Billing_Activity_Type = '4';

EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(PAR.Company_Number);
PARAMETER('WHSEXFER');
PARAMETER(DTL.Warehouse_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Populate warehouse code
// IF DTL.Warehouse Code EQ WRK.BLANK
IF DTL.Warehouse_Code = WRK.BLANK;

// DTL.Warehouse Code = WRK.Warehouse Code
DTL.Warehouse_Code = WRK.Warehouse_Code;

ENDIF;

EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(DTL.Salesperson_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
PARAMETER(DTL.Salesperson_Code);
PARAMETER(DTL.Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?E2438 Default Type Code for Sbd - from salesperson
CASE;

// IF PAR.Company Organization is Seaboard
IF PAR.Company_Organization = 'S';

// Call program Rtv Dft Sales Channel  XF.
CALL PROGRAM(Rtv Dft Sales Channel  XF) ('PBHPXFR');
PARAMETER(DTL.Salesperson_Code);
PARAMETER(LCL.SEC_Default_Sales_Channel);

// DTL.Type Code = LCL.SEC Default Sales Channel
DTL.Type_Code = LCL.SEC_Default_Sales_Channel;

ENDIF;

EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(WRK.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?First time processing
CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

// DTL.Header Status = CND.Entered
DTL.Header_Status = 'E';

//?FP1110 - RMC 01/14/08  Print Pick Slip - dft to NO for HPB
CASE;

// IF PAR.Company Organization is High Plains Biodiesel
IF PAR.Company_Organization = 'H';

// DTL.Print Pick Slip = CND.no
DTL.Print_Pick_Slip = 'N';

//?FP1110 - RMC 01/14/08  Print Pick Slip - dft to NO for HPB
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Print Pick Slip = CND.yes
DTL.Print_Pick_Slip = 'Y';

ENDIF;

// DTL.Affect Auto Accruals = CND.Affect Auto Accruals
DTL.Affect_Auto_Accruals = 'Y';

// DTL.Event Code = CND.01 Order Entry
DTL.Event_Code = '01';

// DTL.Palletize = PAR.Palletize Dft
DTL.Palletize = PAR.Palletize_Dft;

// DTL.Slip Sheet = PAR.Slip Sheet Dft
DTL.Slip_Sheet = PAR.Slip_Sheet_Dft;

// DTL.Shrink Wrap = PAR.Shrink Wrap Dft
DTL.Shrink_Wrap = PAR.Shrink_Wrap_Dft;

// DTL.Shipping Method = PAR.Shipping Method Dft
DTL.Shipping_Method = PAR.Shipping_Method_Dft;

// DTL.LTL Flag = PAR.LTL Flag Dft
DTL.LTL_Flag = PAR.LTL_Flag_Dft;

// DTL.Country Code = PAR.Export Code Dft
DTL.Country_Code = PAR.Export_Code_Dft;

//?Check Company/customer for Export Type Code
CASE;

// IF PAR.Ship To Customer NE WRK.ZERO
IF PAR.Ship_To_Customer <> WRK.ZERO;

CASE;

// IF WRK.Type Code is Export
IF WRK.Type_Code = 'EX';

// DTL.Export Status = CND.yes
DTL.Export_Status = 'Y';

// DTL.Country Code = PAR.Country Code          USR
DTL.Country_Code = PAR.Country_Code_USR;

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Export Status = PAR.Export Status Dft
DTL.Export_Status = PAR.Export_Status_Dft;

ENDIF;

ENDIF;

//?** Save original carrier code to test for change  FT686 LJB 01/03/2008
// LCL.Carrier Code Chg Usr 1 = DTL.Carrier Code
LCL.Carrier_Code_Chg_Usr_1 = DTL.Carrier_Code;

// DTL.Load Type = PAR.Load Type Dft
DTL.Load_Type = PAR.Load_Type_Dft;

// DTL.Requested Delivery Date = JOB.*Job date
DTL.Requested_Delivery_Date = JOB.*Job_date;

// DTL.Scheduled Ship Date = JOB.*Job date
DTL.Scheduled_Ship_Date = JOB.*Job_date;

// DTL.Order Date = JOB.*Job date
DTL.Order_Date = JOB.*Job_date;

// DTL.Date of Original Entry = JOB.*Job date
DTL.Date_of_Original_Entry = JOB.*Job_date;

// DTL.User Original Entry = JOB.*USER
DTL.User_Original_Entry = JOB.*USER;

// Call program RTV Shipping Temp      XF.
CALL PROGRAM(RTV Shipping Temp      XF) ('PDSSXFR');
PARAMETER(WRK.Warehouse_Type);
PARAMETER(DTL.Reefer_Temperature);
PARAMETER(DTL.Shipping_Temp_Code_C_F);

EXECUTE FUNCTION(Rtv Customer Air Frt  RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1789821;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(PAR.Air_Freight_Order);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Rtv Cust Shipping Tmp XF.
CALL PROGRAM(Rtv Cust Shipping Tmp XF) ('POPRXFR');
PARAMETER(DTL.USR_Company_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(LCL.Cust_Shipping_Temp);
PARAMETER(LCL.Cust_Shipping_Temp_C_F);
PARAMETER(DTL.HPB_Ship_to_Warehouse);
PARAMETER(NLL.Item_Age_Days_Fresh);
PARAMETER(NLL.Item_Age_Days_Frozen);

//?Cust Shipping Temp
CASE;

// IF LCL.Cust Shipping Temp is Entered
IF LCL.Cust_Shipping_Temp <> *ZERO;

// DTL.Reefer Temperature = LCL.Cust Shipping Temp
DTL.Reefer_Temperature = LCL.Cust_Shipping_Temp;

// DTL.Shipping Temp Code C/F = LCL.Cust Shipping Temp C/F
DTL.Shipping_Temp_Code_C_F = LCL.Cust_Shipping_Temp_C_F;

ENDIF;

// PAR.Reefer Temperature = DTL.Reefer Temperature
PAR.Reefer_Temperature = DTL.Reefer_Temperature;

// PAR.Shipping Temp Code C/F = DTL.Shipping Temp Code C/F
PAR.Shipping_Temp_Code_C_F = DTL.Shipping_Temp_Code_C_F;

CASE;

// IF DTL.Block Order Flag is Block Order
IF DTL.Block_Order_Flag = 'B';

// DTL.OH Load Plan Ready = CND.No
DTL.OH_Load_Plan_Ready = 'N';

ENDIF;

// LCL.OH Load Plan Ready = DTL.OH Load Plan Ready
LCL.OH_Load_Plan_Ready = DTL.OH_Load_Plan_Ready;

//?Set Appointments to non-display if HPB or Live w/TPM  E004119
CASE;

// IF PAR.Company Organization is High Plains Biodiesel
IF PAR.Company_Organization = 'H';

// OR PAR.PFS Carlisle Active is Yes
OR PAR.PFS_Carlisle_Active = 'Y';

//?E4119 RMC 5/23/2016 Remove Live with tpm checks
//?E4119 RMC 7/21/2016 dont display if ldp=Y
// PAR.Status Flag 10 Y/N = CND.Yes
PAR.Status_Flag_10_Y_N = 'Y';

ENDIF;

ENDIF;

// PAR.Shipping Method = DTL.Shipping Method
PAR.Shipping_Method = DTL.Shipping_Method;

// DTL.Block Order Flag = CND.Firm Order
DTL.Block_Order_Flag = 'F';

// LCL.Block Order Flag = CND.Firm Order
LCL.Block_Order_Flag = 'F';

// DTL.Order Certification Flag = CND.No
DTL.Order_Certification_Flag = 'N';

// DTL.Transfer in Storage Ind = CND.*No
DTL.Transfer_in_Storage_Ind = 'N';

// DTL.Air Freight Order = PAR.Air Freight Order
DTL.Air_Freight_Order = PAR.Air_Freight_Order;

// WRK.USR Display 2 = CND.Yes
WRK.USR_Display_2 = 'Y';

//?HPB
CASE;

// IF PAR.Company Organization is High Plains Biodiesel
IF PAR.Company_Organization = 'H';

CASE;

// IF WRK.Company Number     041405 is HPB Biodiesel
IF WRK.Company_Number_041405 = 369;

// OR WRK.Company Number     041405 is St Joseph HPB Marketing
OR WRK.Company_Number_041405 = 374;

// OR WRK.Company Number     041405 is Hugoton SE Marketing
OR WRK.Company_Number_041405 = 376;

//?RMC 7/29/22 added for hugoton
// DTL.OHE HPB RIN Equiv Value = CND.Normal 1.5
DTL.OHE_HPB_RIN_Equiv_Value = 1.5;

ENDIF;

ENDIF;

//?update exception status used to get 1 time *ADD mode msg for dup. P/O.
// WRK.Update Exception Status = CND.no
WRK.Update_Exception_Status = 'N';

//?SET CURSOR
CASE;

// IF DTL.Ship To Customer is equal to zero
IF DTL.Ship_To_Customer = *ZERO;

SET CURSOR;

//?SET CURSOR
// IF DTL.USR Company Number is Equal to zero
IF DTL.USR_Company_Number = *ZERO;

SET CURSOR;

//?SET CURSOR
// IF *OTHERWISE
IF *OTHERWISE;

SET CURSOR;

ENDIF;

//?Set Email cust if blank
CASE;

// IF DTL.Email Cust On Order Ship is No
IF DTL.Email_Cust_On_Order_Ship = 'N';

//?Set Email cust if blank
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Email Cust On Order Ship is Yes
IF DTL.Email_Cust_On_Order_Ship = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Email Cust On Order Ship = CND.No
DTL.Email_Cust_On_Order_Ship = 'N';

ENDIF;

ENDIF;

//?*-------------------------------------------------------------*
//?* 08/16/00 PKP Default flag to N when creating a new order.
//?Export Doc go w/ Driver
CASE;

// IF DTL.Export Docs Go w/Driver is Blank
IF DTL.Export_Docs_Go_w_Driver = *BLANK;

// DTL.Export Docs Go w/Driver = CND.No
DTL.Export_Docs_Go_w_Driver = 'N';

ENDIF;

//?Outside Warehouse Flag
CASE;

// IF PAR.Outside Warehouse Flag is yes
IF PAR.Outside_Warehouse_Flag = 'Y';

EXECUTE FUNCTION(Rtv Default Warehouse  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1323141;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.To_Warehouse_Code_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.Company Organization is Not HPB
IF PAR.Company_Organization = 'D'/'S';

//?dont show for hpb - they use 1 cust for all transfers
// DTL.Warehouse Desc DRV = CONCAT(CON.To WHS:,DTL.To Warehouse Code  USR,CON.1)
DTL.Warehouse_Desc_DRV = 'To WHS:' + DTL.To_Warehouse_Code_USR (1);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Warehouse Desc DRV) TYPE(DRVFLD)                               AC1532477;
PARAMETER(DTL.Warehouse_Desc_DRV);
PARAMETER(DTL.Warehouse_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

}


ENDIF;

//?Outside Warehouse Flag
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Warehouse Desc DRV) TYPE(DRVFLD)                               AC1532477;
PARAMETER(DTL.Warehouse_Desc_DRV);
PARAMETER(DTL.Warehouse_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

}


ENDIF;

//?DEFAULT: Spot Buy
CASE;

// IF PAR.Company Organization is Seaboard
IF PAR.Company_Organization = 'S';

//?RMC 8/15/14  Req for seaboard now  per sales/josh
//?DEFAULT: Spot Buy
// IF *OTHERWISE
IF *OTHERWISE;

//?W77844 DN 06/11/21-Convert 'N' to 'T'urn.
// DTL.Spot Buy  (Y/N) = CND.Turn
DTL.Spot_Buy_Y_N = 'T';

// DTL.Spot Buy Text USR = Condition name of DTL.Spot Buy  (Y/N)
DTL.Spot_Buy_Text_USR = RTVCND(DTL.Spot_Buy_Y_N);

ENDIF;

//?E4119 RMC 5/23/2016 Remove Live with tpm checks
// DTL.Load Plan Order = CND.yes
DTL.Load_Plan_Order = 'Y';

//?USER: Initialize detail screen (existing record)

//?E4119 RMC 5/23/2016 Remove Live with tpm checks
// DTL.Load Plan Order = CND.yes
DTL.Load_Plan_Order = 'Y';

// DTL.Field Description = CON.Scheduled Ship
DTL.Field_Description = 'Scheduled Ship';

//?Save Load Plan Ready before order is updated          E004119
// DTL.OH Load Plan Ready = DB1.OH Load Plan Ready
DTL.OH_Load_Plan_Ready = DB1.OH_Load_Plan_Ready;

// LCL.OH Load Plan Ready = DTL.OH Load Plan Ready
LCL.OH_Load_Plan_Ready = DTL.OH_Load_Plan_Ready;

//?** Save the Carrier, & other 1st time stuff
CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

//?** Save original carrier code to test for change  FT686 LJB 01/03/2008
// LCL.Carrier Code Chg Usr 1 = DTL.Carrier Code
LCL.Carrier_Code_Chg_Usr_1 = DTL.Carrier_Code;

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

ENDIF;

//?06/12/08 PKD Added parms to XF. Receiving into NLL.
// Call program RTV Co. Dflt Int All   XF.
CALL PROGRAM(RTV Co. Dflt Int All   XF) ('PDSTXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Shipping_Method_Dft);
PARAMETER(PAR.Load_Type_Dft);
PARAMETER(PAR.LTL_Flag_Dft);
PARAMETER(PAR.Export_Status_Dft);
PARAMETER(PAR.Shrink_Wrap_Dft);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(PAR.Export_Code_Dft);
PARAMETER(PAR.Allow_Mult_Whse_to_Order);
PARAMETER(PAR.Allow_Multi_Export_On_Ord);
PARAMETER(PAR.Slip_Sheet_Dft);
PARAMETER(PAR.Palletize_Dft);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(NLL.Company_Organization);
PARAMETER(NLL.CDI_Valuation_Grouping);
PARAMETER(NLL.CDI_Unused_Sts_3);
PARAMETER(NLL.CDI_Shipper);
PARAMETER(NLL.CDI_Produced_by_co);

// DTL.Reference. . . . . . . . = CON.Order Number . . . . :
DTL.Reference = 'Order Number . . . . :';

// DTL.Country Code = PAR.Country Code
DTL.Country_Code = PAR.Country_Code;

//?04/02/24 SP S302751-START
// DTL.Country Code 1 usr = PAR.Country Code 1 usr
DTL.Country_Code_1_usr = PAR.Country_Code_1_usr;

// DTL.Ship to Customer      USR = PAR.Ship to Customer      USR
DTL.Ship_to_Customer_USR = PAR.Ship_to_Customer_USR;

//?04/02/24 SP S302751-END
// DTL.OHE Intended for ExportCC = PAR.OHE Intended for ExportCC
DTL.OHE_Intended_for_ExportCC = PAR.OHE_Intended_for_ExportCC;

// DTL.USR Company Number = PAR.Company Number
DTL.USR_Company_Number = PAR.Company_Number;

EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
PARAMETER(DB1.Sales_Route_Code);
PARAMETER(DTL.Salesperson_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
PARAMETER(DTL.Salesperson_Code);
PARAMETER(DTL.Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(WRK.Trans_Contol_AS400_Plant);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Trans_Contol_AS400_Plant);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(RTV Telephone Number   RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1333192;
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(DTL.Telephone_Number_FF);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Cust Ordering Dflt2RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1981275;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(LCL.Carrier_Code);
PARAMETER(WRK.P_O_Required_Flag);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Type_Code);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.USR_Warehouse_Code);
PARAMETER(PAR.Outside_Warehouse_Flag);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(NLL.Ord_Ent_Default_Sls_Rte);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Errors in Ord Detail pending from Export Ord Automation P0101251
// DTL.Order Requires Review = DB1.Order Requires Review
DTL.Order_Requires_Review = DB1.Order_Requires_Review;

//?Errors exist in Ord Detail if "Order Requires Review" = "Y"
CASE;

// IF DTL.Order Requires Review is Yes
IF DTL.Order_Requires_Review = 'Y';

// PAR.Status Flag 9  Y/N = CND.Yes
PAR.Status_Flag_9_Y_N = 'Y';

// DTL.Explaination Text 2 = WRK.Explaination Text 2
DTL.Explaination_Text_2 = WRK.Explaination_Text_2;

//?Errors exist in Ord Detail if "Order Requires Review" = "Y"
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Status Flag 9  Y/N = CND.No
PAR.Status_Flag_9_Y_N = 'N';

ENDIF;

//?Populate warehouse code
CASE;

// IF DTL.Warehouse Code EQ WRK.BLANK
IF DTL.Warehouse_Code = WRK.BLANK;

//?Order:  From detail, passed (PAR), from Company/Customer, from User Prof.
CASE;

// IF PAR.Warehouse Code EQ WRK.BLANK
IF PAR.Warehouse_Code = WRK.BLANK;

CASE;

// IF DB1.Billing Activity Type is Warehouse Transfer
IF DB1.Billing_Activity_Type = '4';

EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(PAR.Company_Number);
PARAMETER('WHSEXFER');
PARAMETER(DTL.Warehouse_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF WRK.USR Warehouse Code EQ WRK.BLANK
IF WRK.USR_Warehouse_Code = WRK.BLANK;

// DTL.Warehouse Code = WRK.Warehouse Code
DTL.Warehouse_Code = WRK.Warehouse_Code;

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Warehouse Code = WRK.USR Warehouse Code
DTL.Warehouse_Code = WRK.USR_Warehouse_Code;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Warehouse Code = PAR.Warehouse Code
DTL.Warehouse_Code = PAR.Warehouse_Code;

ENDIF;

ENDIF;

// DTL.USR Warehouse Code = DTL.Warehouse Code
DTL.USR_Warehouse_Code = DTL.Warehouse_Code;

// DTL.USR Export Code = DTL.Country Code
DTL.USR_Export_Code = DTL.Country_Code;

// DTL.USR Requested ship date s = DB1.Requested Ship Date
DTL.USR_Requested_ship_date_s = DB1.Requested_Ship_Date;

// DTL.Scheduled Ship Date USR = DB1.Scheduled Ship Date
DTL.Scheduled_Ship_Date_USR = DB1.Scheduled_Ship_Date;

//?** Save the Shipping Method for testing later
// PAR.Shipping Method = DB1.Shipping Method
PAR.Shipping_Method = DB1.Shipping_Method;

// PAR.Reefer Temperature = DB1.Reefer Temperature
PAR.Reefer_Temperature = DB1.Reefer_Temperature;

// PAR.Shipping Temp Code C/F = DB1.Shipping Temp Code C/F
PAR.Shipping_Temp_Code_C_F = DB1.Shipping_Temp_Code_C_F;

// WRK.Requested Delivery Dt = DB1.Requested Delivery Date
WRK.Requested_Delivery_Dt = DB1.Requested_Delivery_Date;

// WRK.Requested Delivery Time = DB1.Requested Delivery Time
WRK.Requested_Delivery_Time = DB1.Requested_Delivery_Time;

// DTL.USR Time 4.0 = DB1.Requested Delivery Time
DTL.USR_Time_4_0 = DB1.Requested_Delivery_Time;

// DTL.Requested Delivery Time = DTL.USR Time 4.0
DTL.Requested_Delivery_Time = DTL.USR_Time_4_0;

EXECUTE FUNCTION(RTV Ord Hdr Val/Wgt    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1426041;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(DTL.USR_Weight_Accumulated);
{
 //?USER: Process Data record

 // PAR.USR Order Weight = PAR.USR Order Weight + DB1.Weight Ordered
 PAR.USR_Order_Weight = PAR.USR_Order_Weight + DB1.Weight_Ordered;

}


//?** 11/16/2007 LJB FP1251 If collect, default carrier to BUY
CASE;

// IF DTL.Shipping Method is Collect Truck
IF DTL.Shipping_Method = 'CT';

// DTL.Carrier Code = CND.Buyer's Truck
DTL.Carrier_Code = 'BUY';

//?** 11/16/2007 LJB FP1251 If collect, default carrier to BUY
// IF DTL.Shipping Method is Collect Rail
IF DTL.Shipping_Method = 'CR';

// DTL.Carrier Code = CND.Buyer's Truck
DTL.Carrier_Code = 'BUY';

ENDIF;

//?Only allow update to Block Order Flag until order has been posted, if Firm
CASE;

// IF DB1.Header Status is Entered
IF DB1.Header_Status = 'E';

// WRK.USR Display 2 = CND.Yes
WRK.USR_Display_2 = 'Y';

//?Only allow update to Block Order Flag until order has been posted, if Firm
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.Block Order Flag is Firm Order
IF DB1.Block_Order_Flag = 'F';

// WRK.USR Display 2 = CND.No
WRK.USR_Display_2 = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Display 2 = CND.Yes
WRK.USR_Display_2 = 'Y';

ENDIF;

ENDIF;

// LCL.Block Order Flag = DB1.Block Order Flag
LCL.Block_Order_Flag = DB1.Block_Order_Flag;

//?Set Email cust if blank
CASE;

// IF DTL.Email Cust On Order Ship is No
IF DTL.Email_Cust_On_Order_Ship = 'N';

//?Set Email cust if blank
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Email Cust On Order Ship is Yes
IF DTL.Email_Cust_On_Order_Ship = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Email Cust On Order Ship = CND.No
DTL.Email_Cust_On_Order_Ship = 'N';

ENDIF;

ENDIF;

//?** Save Customer PO# and Load ID                          E00139
//?** When Live w/TPM, Load ID will initially be zeros       E004119
// PAR.Customer Purchase Order # = DTL.Customer Purchase Order #
PAR.Customer_Purchase_Order_# = DTL.Customer_Purchase_Order_#;

// PAR.Load ID = DTL.Load ID
PAR.Load_ID = DTL.Load_ID;

//?**  PK0093
// PAR.Export Status = DTL.Export Status
PAR.Export_Status = DTL.Export_Status;

//?air freight
CASE;

// IF DTL.Air Freight Order is blank
IF DTL.Air_Freight_Order = *BLANK;

// DTL.Air Freight Order = CND.no
DTL.Air_Freight_Order = 'N';

ENDIF;

//?** Unlock Req Delivery date/time & Req Ship date for Dailys
// Call program Rtv Plant Co/Org      XF.
CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(PAR.Company_Organization);

//?Company Organization
CASE;

// IF PAR.Company Organization is High Plains Biodiesel
IF PAR.Company_Organization = 'H';

// DTL.Text USR 8 = CON.Type Cd:
DTL.Text_USR_8 = 'Type Cd:';

//?Company Organization
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Text USR 8 = CON.Sls Chn:
DTL.Text_USR_8 = 'Sls Chn:';

ENDIF;

// WRK.Lock/Unlock = CND.Unlock
WRK.Lock_Unlock = 'U';

//?** Lock SSD for Seaboard only                         E00447
CASE;

// IF DTL.Load ID is NE Blank
IF DTL.Load_ID <> *ZERO;

EXECUTE FUNCTION(RTV ld Accpt/Load Status) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1591499;
PARAMETER(DB1.Load_ID);
PARAMETER(LCL.Load_Status);
PARAMETER(LCL.Load_Acceptance_Flag);
PARAMETER(PAR.MG_Created_Load);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** For HPB, Dailys, Block or Bulk - unlock            E00447
CASE;

// IF PAR.Company Organization is Not Seaboard
IF PAR.Company_Organization = 'D'/'H';

// OR DTL.Load Type is Bulk
OR DTL.Load_Type = 'B';

// OR DTL.Block Order Flag is Block Order
OR DTL.Block_Order_Flag = 'B';

// WRK.Lock/Unlock = CND.Unlock
WRK.Lock_Unlock = 'U';

//?** For HPB, Dailys, Block or Bulk - unlock            E00447
// IF *OTHERWISE
IF *OTHERWISE;

//?** If on a load that is Locked, shipped or invoiced, lock
//?** scheduled ship date                                E00447
CASE;

// IF LCL.Load Status is Locked thru Invoiced
IF LCL.Load_Status = 'I'/'L'/'S';

//?E4119 RMC 5/23/2016 Remove Live with tpm checks
//?E2625 RMC 6/27/13 added |Live with tpm=Y
// WRK.Lock/Unlock = CND.Lock
WRK.Lock_Unlock = 'L';

// IF LCL.Load Status is Entered,Combined,Unlock
IF LCL.Load_Status = 'C'/'E'/'U';

// WRK.Date To               USR = JOB.*Job date + CON.1 *DAYS
WRK.Date_To_USR = DATEINCR(JOB.*Job_date 1 'DY' 1111111 'NONE' 'N' 1);

//?Lock if SSD is today or tomorrow             (SBD)    E00447
CASE;

// IF DTL.Scheduled Ship Date LE WRK.Date To               USR
IF DTL.Scheduled_Ship_Date <= WRK.Date_To_USR;

// WRK.Lock/Unlock = CND.Lock
WRK.Lock_Unlock = 'L';

//?Lock if SSD is today or tomorrow             (SBD)    E00447
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Lock/Unlock = CND.Unlock
WRK.Lock_Unlock = 'U';

ENDIF;

ENDIF;

ENDIF;

//?** Lock SSD for Seaboard only                         E00447
// IF *OTHERWISE
IF *OTHERWISE;

//?** If not on a load, unlock the dates                 E00447
// WRK.Lock/Unlock = CND.Unlock
WRK.Lock_Unlock = 'U';

ENDIF;

//?** RTV the delivery p.o. from OHE file, if one exists       FP1303
//?**  AND HPB fields  9/14/2010 E914 &appt conf fields, intend for exp E1488
// Call program RTV OHE for Ord Entry XF.
CALL PROGRAM(RTV OHE for Ord Entry XF) ('PMDBXFR');
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(DTL.OHE_HPB_RIN_Equiv_Value);
PARAMETER(DTL.OHE_HPB_RIN_Price);
PARAMETER(DTL.OHE_Spot_Buy);
PARAMETER(DTL.Type_Code);
PARAMETER(WRK.Delivery_P_O_Number);
PARAMETER(WRK.OHE_Intended_for_ExportCC);
PARAMETER(DTL.OHE_Appt_Confirmation_#);
PARAMETER(DTL.OHE_Appt_Confirmation_Nm);
PARAMETER(LCL.Letter_of_Credit_Number);

//?W77844 DN 06/11/21-Convert Old Spot Buy Flag Value to New Val: S, T, P
//?** Spot buy = y / n/blank = invald    W77844 DN 06/11/21-New Spot Buy Val.
CASE;

// IF DTL.OHE Spot Buy is Spot
IF DTL.OHE_Spot_Buy = 'S';

// DTL.Spot Buy  (Y/N) = CND.Spot
DTL.Spot_Buy_Y_N = 'S';

// DTL.Spot Buy Text USR = Condition name of DTL.Spot Buy  (Y/N)
DTL.Spot_Buy_Text_USR = RTVCND(DTL.Spot_Buy_Y_N);

//?** Spot buy = y / n/blank = invald    W77844 DN 06/11/21-New Spot Buy Val.
// IF DTL.OHE Spot Buy is Turn
IF DTL.OHE_Spot_Buy = 'T';

// DTL.Spot Buy  (Y/N) = CND.Turn
DTL.Spot_Buy_Y_N = 'T';

// DTL.Spot Buy Text USR = Condition name of DTL.Spot Buy  (Y/N)
DTL.Spot_Buy_Text_USR = RTVCND(DTL.Spot_Buy_Y_N);

//?** Spot buy = y / n/blank = invald    W77844 DN 06/11/21-New Spot Buy Val.
// IF DTL.OHE Spot Buy is Promo
IF DTL.OHE_Spot_Buy = 'P';

// DTL.Spot Buy  (Y/N) = CND.Promo
DTL.Spot_Buy_Y_N = 'P';

// DTL.Spot Buy Text USR = Condition name of DTL.Spot Buy  (Y/N)
DTL.Spot_Buy_Text_USR = RTVCND(DTL.Spot_Buy_Y_N);

//?** Spot buy = y / n/blank = invald    W77844 DN 06/11/21-New Spot Buy Val.
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Company Organization is Seaboard
IF PAR.Company_Organization = 'S';

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Spot Buy  (Y/N) = CND.Turn
DTL.Spot_Buy_Y_N = 'T';

// DTL.OHE Spot Buy = CND.Turn
DTL.OHE_Spot_Buy = 'T';

// DTL.Spot Buy Text USR = Condition name of DTL.OHE Spot Buy
DTL.Spot_Buy_Text_USR = RTVCND(DTL.OHE_Spot_Buy);

ENDIF;

ENDIF;

//?** Put OHE deliv po on screen, first time only           FP1303
CASE;

// IF DTL.USR 15 Text           USR is Blanks
IF DTL.USR_15_Text_USR = *BLANK;

// AND WRK.Delivery P.O. Number is Not Blank
AND WRK.Delivery_P_O_Number <> *BLANK;

// AND LCL.Delivery P.O. Number is Eq Blank
AND LCL.Delivery_P_O_Number = *BLANK;

// DTL.USR 15 Text           USR = WRK.Delivery P.O. Number
DTL.USR_15_Text_USR = WRK.Delivery_P_O_Number;

// LCL.Delivery P.O. Number = DTL.USR 15 Text           USR
LCL.Delivery_P_O_Number = DTL.USR_15_Text_USR;

ENDIF;

//?** Put Intended for Export on screen from file 1st time only  E00157
CASE;

// IF DTL.OHE Intended for ExportCC is Blank
IF DTL.OHE_Intended_for_ExportCC = *BLANK;

// AND WRK.OHE Intended for ExportCC is Entered
AND WRK.OHE_Intended_for_ExportCC <> *BLANK;

// DTL.OHE Intended for ExportCC = WRK.OHE Intended for ExportCC
DTL.OHE_Intended_for_ExportCC = WRK.OHE_Intended_for_ExportCC;

// PAR.OHE Intended for ExportCC = WRK.OHE Intended for ExportCC
PAR.OHE_Intended_for_ExportCC = WRK.OHE_Intended_for_ExportCC;

// DTL.USR Country Code = DTL.OHE Intended for ExportCC
DTL.USR_Country_Code = DTL.OHE_Intended_for_ExportCC;

ENDIF;

//?** Put Letter of Credit on screen, first time only    E004119
CASE;

// IF DTL.String 30 is Blank
IF DTL.String_30 = *BLANK;

// AND LCL.Letter of Credit Number is Entered
AND LCL.Letter_of_Credit_Number <> *BLANK;

// DTL.String 30 = LCL.Letter of Credit Number
DTL.String_30 = LCL.Letter_of_Credit_Number;

ENDIF;

//?Set Appointments to non-display if HPB or Live w/TPM  E004119
CASE;

// IF PAR.Company Organization is High Plains Biodiesel
IF PAR.Company_Organization = 'H';

// OR DB1.OH Load Plan Ready is Yes
OR DB1.OH_Load_Plan_Ready = 'Y';

//?E4119 RMC 5/23/2016 Remove Live with tpm checks
// PAR.Status Flag 10 Y/N = CND.Yes
PAR.Status_Flag_10_Y_N = 'Y';

ENDIF;

EXECUTE FUNCTION(RTV Desc, Status       RT) TYPE(RTVOBJ) FILE(OME5REP)          AC1261065;
PARAMETER(DTL.OHE_Intended_for_ExportCC);
PARAMETER(DTL.Text_USR_9);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?04/13/09 PKD E00329 Re-Org screen with new fields.
//?SET CURSOR
CASE;

// IF DTL.Ship To Customer is equal to zero
IF DTL.Ship_To_Customer = *ZERO;

SET CURSOR;

//?SET CURSOR
// IF DTL.USR Company Number is Equal to zero
IF DTL.USR_Company_Number = *ZERO;

SET CURSOR;

//?SET CURSOR
// IF *OTHERWISE
IF *OTHERWISE;

SET CURSOR;

ENDIF;

EXECUTE FUNCTION(RTV Order Type Desc.   RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1281766;
PARAMETER(DTL.Order_Type_Sales);
PARAMETER(DTL.Order_Type_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Shipping Method Desc DRV) TYPE(DRVFLD)                         AC1927077;
PARAMETER(DTL.Shipping_Method_Desc_DRV);
PARAMETER(DTL.Shipping_Method);
{
 //?Calculate derived field

 // PAR.Shipping Method Desc DRV = Condition name of PAR.Shipping Method
 PAR.Shipping_Method_Desc_DRV = RTVCND(PAR.Shipping_Method);

}


EXECUTE FUNCTION(RTV Desc, Status       RT) TYPE(RTVOBJ) FILE(OME5REP)          AC1261065;
PARAMETER(DTL.Country_Code);
PARAMETER(DTL.Country_Description);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Block Order Flag Description
CASE;

// IF DTL.Block Order Flag is Firm Order
IF DTL.Block_Order_Flag = 'F';

// DTL.Block Order Flag Desc USR = CON.--- FIRM ORDER ----
DTL.Block_Order_Flag_Desc_USR = '--- FIRM ORDER ----';

//?Block Order Flag Description
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Block Order Flag Desc USR = CON.--- BLOCK ORDER ---
DTL.Block_Order_Flag_Desc_USR = '--- BLOCK ORDER ---';

ENDIF;

//?Outside Warehouse
CASE;

// IF PAR.Outside Warehouse Flag is yes
IF PAR.Outside_Warehouse_Flag = 'Y';

EXECUTE FUNCTION(Rtv Default Warehouse  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1323141;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.To_Warehouse_Code_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.Company Organization is Not HPB
IF PAR.Company_Organization = 'D'/'S';

// DTL.Warehouse Desc DRV = CONCAT(CON.To WHS:,DTL.To Warehouse Code  USR,CON.1)
DTL.Warehouse_Desc_DRV = 'To WHS:' + DTL.To_Warehouse_Code_USR (1);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Warehouse Desc DRV) TYPE(DRVFLD)                               AC1532477;
PARAMETER(DTL.Warehouse_Desc_DRV);
PARAMETER(DTL.Warehouse_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

}


ENDIF;

//?Outside Warehouse
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Warehouse Desc DRV) TYPE(DRVFLD)                               AC1532477;
PARAMETER(DTL.Warehouse_Desc_DRV);
PARAMETER(DTL.Warehouse_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

}


ENDIF;

//?Display YLW Warning msg if sched ship date wont be changed
CASE;

// IF DTL.Load ID is GT Zero
IF DTL.Load_ID > *ZERO;

//?Display YLW warning message
CASE;

// IF WRK.USR Output Only Status is yes
IF WRK.USR_Output_Only_Status = 'Y';

// PAR.Status Flag 8  Y/N = CND.Yes
PAR.Status_Flag_8_Y_N = 'Y';

ENDIF;

ENDIF;

//?** Use req delv dt/tm always   5/02/11  E01523   RMC
CASE;

// IF DTL.Requested Delivery Date is entered
IF DTL.Requested_Delivery_Date <> *ZERO;

// Call program CLC Deadln Depart Dt  XF.
CALL PROGRAM(CLC Deadln Depart Dt  XF) ('POSCXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Ship_To_City);
PARAMETER(DTL.Ship_To_State_Code);
PARAMETER(DTL.Requested_Delivery_Date);
PARAMETER(DTL.Requested_Delivery_Time);
PARAMETER(DTL.Deadline_Depart_Date);
PARAMETER(DTL.Deadline_Depart_Time_LH);

//?Default for export if it cant be calc'd
CASE;

// IF DTL.Deadline Depart Date is not entered
IF DTL.Deadline_Depart_Date = *ZERO;

CASE;

// IF DTL.Export Status is yes
IF DTL.Export_Status = 'Y';

// AND DTL.Ship To State Code is International Accounts
AND DTL.Ship_To_State_Code = '.';

// DTL.Deadline Depart Date = DTL.Scheduled Ship Date
DTL.Deadline_Depart_Date = DTL.Scheduled_Ship_Date;

// DTL.Deadline Depart Time LH = CON.80000
DTL.Deadline_Depart_Time_LH = 80000;

ENDIF;

ENDIF;

ENDIF;

//?** For Seaboard only, validate Deadline Depart Date/Time   W288
CASE;

// IF PAR.Company Organization is Seaboard
IF PAR.Company_Organization = 'S';

//?** Retrieve the hours that Shipping is restricted from loading
//?** (this is maintained by scheduling)                 W288
// Call program RTV Dock Unavail Range XF.
CALL PROGRAM(RTV Dock Unavail Range XF) ('PNNIXFR');
PARAMETER(DTL.Warehouse_Code);
PARAMETER(WRK.Dock_Unavail_Start_Time);
PARAMETER(WRK.Dock_Unavail_End_Time);

//?** Validate if hours are entered for a warehouse
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

//?      skip - not an error if no record
//?** Validate if hours are entered for a warehouse
// IF WRK.Dock Unavail Start Time is Zeros
IF WRK.Dock_Unavail_Start_Time = *ZERO;

// AND WRK.Dock Unavail End Time is Zeros
AND WRK.Dock_Unavail_End_Time = *ZERO;

//?      skip - not an error if times are zeros
//?** Validate if hours are entered for a warehouse
// IF *OTHERWISE
IF *OTHERWISE;

//?** If RSD = DDD then enforce Restricted Time Range    W288
CASE;

// IF DTL.Requested Ship Date EQ DTL.Deadline Depart Date
IF DTL.Requested_Ship_Date = DTL.Deadline_Depart_Date;

//?** Warning if DDT is during restriced hours             W288
CASE;

// IF DTL.Deadline Depart Time LH GE WRK.Dock Unavail Start Time
IF DTL.Deadline_Depart_Time_LH >= WRK.Dock_Unavail_Start_Time;

// AND DTL.Deadline Depart Time LH LE WRK.Dock Unavail End Time
AND DTL.Deadline_Depart_Time_LH <= WRK.Dock_Unavail_End_Time;

// DTL.Explaination 50 = WRK.Explaination 50
DTL.Explaination_50 = WRK.Explaination_50;

// PAR.Status Flag 7  Y/N = CND.Yes
PAR.Status_Flag_7_Y_N = 'Y';

// WRK.Lock/Unlock = CND.Unlock
WRK.Lock_Unlock = 'U';

ENDIF;

ENDIF;

ENDIF;

//?** Warning if date changes put DDD/T in the past. Truck will not have
//?** time to load and leave. Send a warning message and unlock the
//?** dates so they can be changed.                      W288
// Call program RTV System Date/Time   UP.
CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
PARAMETER(WRK.Current_System_Date);
PARAMETER(WRK.Current_System_Time);

//?** Warning if DDD = Today & DDT is before system time   W288
CASE;

// IF DTL.Deadline Depart Date EQ WRK.Current System Date
IF DTL.Deadline_Depart_Date = WRK.Current_System_Date;

// AND DTL.Deadline Depart Time LH LE WRK.Current System Time
AND DTL.Deadline_Depart_Time_LH <= WRK.Current_System_Time;

// DTL.Explaination 50 = WRK.Note: Text Usr - 50
DTL.Explaination_50 = WRK.Note_Text_Usr_50;

// PAR.Status Flag 7  Y/N = CND.Yes
PAR.Status_Flag_7_Y_N = 'Y';

// WRK.Lock/Unlock = CND.Unlock
WRK.Lock_Unlock = 'U';

ENDIF;

//?** Test to see if Mileage Between Cities record exists E001625
// WRK.Status - Mileage = CND.Yes
WRK.Status_Mileage = 'Y';

// Call program RTV Warehouse Address  XF.
CALL PROGRAM(RTV Warehouse Address  XF) ('PNX5XFR');
PARAMETER(DTL.Warehouse_Code);
PARAMETER(LCL.Warehouse_Description);
PARAMETER(LCL.Address_Line_1);
PARAMETER(LCL.Address_Line_2);
PARAMETER(LCL.Address_Line_3);
PARAMETER(LCL.City);
PARAMETER(LCL.Zip_Postal_Code);
PARAMETER(LCL.State_Code);

// Call program RTV Miles Between      XF.
CALL PROGRAM(RTV Miles Between      XF) ('PNYAXFR');
PARAMETER(LCL.City);
PARAMETER(LCL.State_Code);
PARAMETER(DTL.Ship_To_City);
PARAMETER(DTL.Ship_To_State_Code);
PARAMETER(LCL.Miles_to_next_stop);

ENDIF;

//?** Scheduled Ship Date must be a valid date           E000589
CASE;

// IF DTL.Scheduled Ship Date is entered
IF DTL.Scheduled_Ship_Date <> *ZERO;

//?** Validate Scheduled Ship Date. If error, user cannot change
//?** unless Requested Ship or Delivery dates are unlocked.    E000589
// Call program VAL Date               XF.
CALL PROGRAM(VAL Date               XF) ('PNO4XFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Scheduled_Ship_Date);

//?Validate SSD                                          E000589
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// DTL.Scheduled Ship Date = DTL.Scheduled Ship Date USR
DTL.Scheduled_Ship_Date = DTL.Scheduled_Ship_Date_USR;

// WRK.Lock/Unlock = CND.Unlock
WRK.Lock_Unlock = 'U';

ENDIF;

ENDIF;

//?USER: Validate detail screen fields

//?Cancel Order
CASE;

// IF DTL.*CMD key is *Cancel
IF DTL.*CMD_key = '11';

//?Edit for Cancel
CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

// Send error message - 'Function not allowed.'
ERROR(USR1833);

//?Edit for Cancel
// IF *OTHERWISE
IF *OTHERWISE;

//?If load is not zero check load Sts of E or C else cancel order
CASE;

// IF DTL.Load ID NE WRK.ZERO
IF DTL.Load_ID <> WRK.ZERO;

EXECUTE FUNCTION(RTV Load Status        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1297640;
PARAMETER(DTL.Load_ID);
PARAMETER(WRK.Load_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

}


//?If load status is U,L,S or I then can't cancel, else cancel order
CASE;

// IF WRK.Load Status is Unlocked thru Invoiced
IF WRK.Load_Status = 'I'/'L'/'S'/'U';

// Send error message - 'Order Cannot be Cancelled:  It is tied to load &2.'
ERROR(USR2363);
MSGPARM(DTL.Order_Number);
MSGPARM(DTL.Load_ID);

//?If load status is U,L,S or I then can't cancel, else cancel order
// IF *OTHERWISE
IF *OTHERWISE;

//?Cancel Order that has been assigned to a load
CASE;

// IF DTL.*CMD key is *Cancel
IF DTL.*CMD_key = '11';

// WRK.Status - Y or N = CND.yes
WRK.Status_Y_or_N = 'Y';

// WRK.Status Flag 2  Y/N = CND.No
WRK.Status_Flag_2_Y_N = 'N';

// WRK.Status Flag 3  Y/N = CND.No
WRK.Status_Flag_3_Y_N = 'N';

// WRK.Status Flag 4  Y/N = CND.no
WRK.Status_Flag_4_Y_N = 'N';

// WRK.Status Flag 5  Y/N = CND.No
WRK.Status_Flag_5_Y_N = 'N';

// WRK.Status Flag 6  Y/N = CND.No
WRK.Status_Flag_6_Y_N = 'N';

// WRK.Status Flag 7  Y/N = CND.No
WRK.Status_Flag_7_Y_N = 'N';

//?** 03/12/13 slm add email on Acknowledgement by the Warehouse Dist
// WRK.Status Flag 8  Y/N = CND.No
WRK.Status_Flag_8_Y_N = 'N';

// WRK.Status Flag 9  Y/N = CND.No
WRK.Status_Flag_9_Y_N = 'N';

// WRK.Status Flag 12 Y/N = DTL.OH Load Plan Ready
WRK.Status_Flag_12_Y_N = DTL.OH_Load_Plan_Ready;

// WRK.Display Flag 1 USR = CND.no
WRK.Display_Flag_1_USR = 'N';

//?** 03/12/13 slm add email on Acknowledgement by the Warehouse Dist
// WRK.Email to Warehouse Code = CON.*BLANK
WRK.Email_to_Warehouse_Code = *BLANK;

//?** 05/08/13 rmc C2586 TPM Frt Order Sts
//?08/21/2017 DN T11489-Added Salesperson Code/Name to Parm.
//?08/27/24 SP S312312-Start
// Call program SEL Confirm Prompt     PV.
CALL PROGRAM(SEL Confirm Prompt     PV) ('PDS0PVR');
PARAMETER(WRK.Status_Y_or_N);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Block_Order_Flag);
PARAMETER(DTL.OH_Load_Plan_Ready);
PARAMETER(WRK.Print_Yes_No_USR);
PARAMETER(WRK.Status_Flag_2_Y_N);
PARAMETER(WRK.Status_Flag_3_Y_N);
PARAMETER(WRK.Status_Flag_4_Y_N);
PARAMETER(WRK.Status_Flag_5_Y_N);
PARAMETER(WRK.Status_Flag_6_Y_N);
PARAMETER(WRK.Status_Flag_7_Y_N);
PARAMETER(WRK.Status_Flag_8_Y_N);
PARAMETER(WRK.Status_Flag_12_Y_N);
PARAMETER(WRK.Email_to_Warehouse_Code);
PARAMETER(WRK.Email_Selection_usr);
PARAMETER(PAR.Salesperson_Code);
PARAMETER(LCL.Salesperson_Name);
PARAMETER(LCL.Email_to_Broker_Usr);
PARAMETER(LCL.Email_to_Salesperson_Usr);

//?08/27/24 SP S312312-End
CASE;

// IF WRK.Status - Y or N is no
IF WRK.Status_Y_or_N = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

//?Remove load ID from canceled order
EXECUTE FUNCTION(CHG Load ID            CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1424581;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


// PAR.Next Program Name = CON.*BLANK
PAR.Next_Program_Name = *BLANK;

// Call program UPD Cancel Order       XF.
CALL PROGRAM(UPD Cancel Order       XF) ('OPV9XFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Billing_Activity_Type);

CASE;

// IF DTL.OH Load Plan Ready is Yes
IF DTL.OH_Load_Plan_Ready = 'Y';

// Call program Rtv Crt OH Trigger    XF.
CALL PROGRAM(Rtv Crt OH Trigger    XF) ('PBWVXFR');
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Company_Number);

ENDIF;

// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// WRK.Load Change Type = CND.Cancelled Order
WRK.Load_Change_Type = 'CANORD';

// WRK.Header Status USR = CND.Cancelled
WRK.Header_Status_USR = 'X';

//?NOTE:  Will only write log if order on load and load not in E status
// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(DTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(DTL.Header_Status);
PARAMETER(WRK.Header_Status_USR);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);

EXECUTE FUNCTION(VAL Load ID on Orders  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1424592;
PARAMETER(DTL.Load_ID);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


//?If no other orders on load then delete the load else change load
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

//?** E-TRANS47 LJB 01/03/2008  Reverse FP1061 per Gary Martin. If a
//?** Load ID is cancelled then the carrier needs to be notified.
//?** Traffic will do this.
// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// WRK.Load Change Type = CND.Delete Load
WRK.Load_Change_Type = 'DELOAD';

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(DTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(WRK.Load_Status);
PARAMETER('Deleted');
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Company_Number);
PARAMETER(*ZERO);

//?NOTE:  Will only write log if order on load and load not in E status
EXECUTE FUNCTION(DLT Load Header        DL) TYPE(DLTOBJ) FILE(OMFJCPP)          AC1183331;
PARAMETER(DTL.Load_ID);

EXECUTE FUNCTION(DLT Load Detail       RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1197338;
PARAMETER(DTL.Load_ID);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DLT Load Detail        DL) TYPE(DLTOBJ) FILE(OMFLCPP)          AC1183328;
 PARAMETER(PAR.Load_ID);
 PARAMETER(DB1.Stop_Drop_Sequence_Number);
}


//?If no other orders on load then delete the load else change load
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(CHG Sub Weight & Stop  RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1424613;
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Order_Weight_Total);
{
 //?USER: Process Data record

 // PAR.Total Weight = DB1.Total Weight - PAR.Order Weight Total
 PAR.Total_Load_Order_Weight = DB1.Total_Load_Order_Weight - PAR.Order_Weight_Total;

 // PAR.Total Stops = DB1.Total Stops - CON.1
 PAR.Total_Stops = DB1.Total_Stops - 1;

 EXECUTE FUNCTION(CHG Load Header        CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1183330;
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Load_Status);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Seal_1);
 PARAMETER(DB1.Seal_2);
 PARAMETER(DB1.Seal_3);
 PARAMETER(PAR.Total_Load_Order_Weight);
 PARAMETER(DB1.Flat_Amount);
 PARAMETER(DB1.Allocate_Pounds_Miles);
 PARAMETER(PAR.Total_Stops);
 PARAMETER(DB1.Trailer_Id);
 PARAMETER(DB1.Transloader_Carrier_Code);
 PARAMETER(DB1.BOL_Time);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Truck_Size);
 PARAMETER(DB1.Ld_Hdr_Ld_Dtl_Unused);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.Ship_Status);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Number_Pallets_Received);
 PARAMETER(DB1.Number_Pallets_Loaded);
 PARAMETER(DB1.Load_Carrier_Pay_Amt);
 PARAMETER(DB1.Estimated_Arrival_Time);
 PARAMETER(DB1.Actual_Arrival_Date);
 PARAMETER(DB1.Actual_Arrival_Time);
 PARAMETER(DB1.Trailer_IN_Weight);
 PARAMETER(DB1.Trailer_OUT_Weight);
 PARAMETER(DB1.Actual_Departure_Date);
 PARAMETER(DB1.Departure_Time);
 PARAMETER(DB1.Schedule_Sequence_Number);
 PARAMETER(DB1.Product_Temperature);
 PARAMETER(DB1.Number_Spacers_Loaded);
 PARAMETER(DB1.Car_Veh_Initials);
 PARAMETER(DB1.Total_Load_Miles);
 PARAMETER(DB1.Recorder_ID);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Ship_From_Warehouse);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Gross_Weight);
 PARAMETER(DB1.Carrier_Broker);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Actual_Ship_Date);
 PARAMETER(DB1.On_Time_Y_N);
 PARAMETER(DB1.Truck_Ready_Date);
 PARAMETER(DB1.Truck_Ready_Time);
 PARAMETER(DB1.Spotted_Date);
 PARAMETER(DB1.Spotted_Time);
 PARAMETER(DB1.Load_Finished_Date);
 PARAMETER(DB1.Load_Finished_Time);
 PARAMETER(DB1.BOL_Complete_Date);
 PARAMETER(DB1.BOL_Complete_Time);
 PARAMETER(DB1.BOL_Received_Date);
 PARAMETER(DB1.BOL_Received_Time);
 PARAMETER(DB1.Truck_Departure_Date);
 PARAMETER(DB1.Truck_Departure_Time);
 PARAMETER(DB1.Adjusted_Departure_Date);
 PARAMETER(DB1.Adjusted_Departure_Time);
 PARAMETER(DB1.Shipping_Line);
 PARAMETER(DB1.Port_Delv_Terminal);
 PARAMETER(DB1.Vessel_Name);
 PARAMETER(DB1.Voyage);
 PARAMETER(DB1.Sail_Date);
 PARAMETER(DB1.Booking_Number);
 PARAMETER(DB1.Discharge_Port);
 PARAMETER(DB1.Arrival_Date);
 PARAMETER(DB1.Container_Number);
 PARAMETER(DB1.Date_In);
 PARAMETER(DB1.Time_In);
 PARAMETER(DB1.Date_Out);
 PARAMETER(DB1.Time_Out);
 PARAMETER(DB1.Load_Total_Freight);
 PARAMETER(DB1.Scheduled_Delivery_Date);
 PARAMETER(DB1.LH_Unused_Sts);
 PARAMETER(DB1.LH_Carrier_Payment_Sts);
 PARAMETER(DB1.Bring_Back_Miles);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Load_Acceptance_Flag);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.On_Yard_Date);
 PARAMETER(DB1.On_Yard_Time);
 PARAMETER(DB1.Deadline_Departure_Date);
 PARAMETER(DB1.Deadline_Departure_Time);
 PARAMETER(DB1.Load_Held_Over);
 PARAMETER(DB1.Load_Held_Over_Reason);
 PARAMETER(*MISSING);
 PARAMETER(DB1.Ocean_BOL_Number);
 PARAMETER(DB1.Express_Mail_Number);
 PARAMETER(DB1.Express_Mail_Date);
 PARAMETER(DB1.Load_Shag_Flag);
 PARAMETER(DB1.Load_Wash_Flag);
 PARAMETER(DB1.Product_Complete_Date);
 PARAMETER(DB1.Product_Complete_Time);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.Load_Confirmation_Time);
 PARAMETER(DB1.Load_Door_1);
 PARAMETER(DB1.Override_Total_Load_Miles);
 PARAMETER(DB1.Load_Door_2);
 PARAMETER(DB1.Partial_Load);
 PARAMETER(DB1.Load_Confirmation_Fax_Sts);
 PARAMETER(DB1.Export_Load_USDA_OK);
 PARAMETER(DB1.Late_Delivery_Email_Flag);
 PARAMETER(DB1.Load_Actual_Freight);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.LH_On_Time_Reason_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?***** Change Log and Comments
  DO;

  //?06/28/2006 LJB TRF011
  //?** Added 3 char LH On-Time Reason Code as an input parm to
  //?** replace the 1 char On Time Reason parm
  ENDDO;

 }

}


EXECUTE FUNCTION(CHG Del Order Off load RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1424620;
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Order_Number);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DLT Load Detail        DL) TYPE(DLTOBJ) FILE(OMFLCPP)          AC1183328;
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Stop_Drop_Sequence_Number);
}


ENDIF;

RETURN;

ENDIF;

ENDIF;

ENDIF;

//?If load is not zero check load Sts of E or C else cancel order
// IF *OTHERWISE
IF *OTHERWISE;

//?Cancel Order that has not yet been assigned to a load
CASE;

// IF DTL.*CMD key is *Cancel
IF DTL.*CMD_key = '11';

// WRK.Status - Y or N = CND.yes
WRK.Status_Y_or_N = 'Y';

// WRK.Status Flag 2  Y/N = CND.No
WRK.Status_Flag_2_Y_N = 'N';

// WRK.Status Flag 3  Y/N = CND.No
WRK.Status_Flag_3_Y_N = 'N';

// WRK.Status Flag 4  Y/N = CND.no
WRK.Status_Flag_4_Y_N = 'N';

// WRK.Status Flag 5  Y/N = CND.No
WRK.Status_Flag_5_Y_N = 'N';

// WRK.Status Flag 6  Y/N = CND.No
WRK.Status_Flag_6_Y_N = 'N';

// WRK.Status Flag 7  Y/N = CND.No
WRK.Status_Flag_7_Y_N = 'N';

// WRK.Status Flag 8  Y/N = CND.No
WRK.Status_Flag_8_Y_N = 'N';

// WRK.Status Flag 12 Y/N = CND.No
WRK.Status_Flag_12_Y_N = 'N';

//?08/21/2017 DN T11489-Added Salesperson Code/Name to Parm.
//?08/27/24 SP S312312-Start
// Call program SEL Confirm Prompt     PV.
CALL PROGRAM(SEL Confirm Prompt     PV) ('PDS0PVR');
PARAMETER(WRK.Status_Y_or_N);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Block_Order_Flag);
PARAMETER(DTL.OH_Load_Plan_Ready);
PARAMETER(WRK.Print_Yes_No_USR);
PARAMETER(WRK.Status_Flag_2_Y_N);
PARAMETER(WRK.Status_Flag_3_Y_N);
PARAMETER(WRK.Status_Flag_4_Y_N);
PARAMETER(WRK.Status_Flag_5_Y_N);
PARAMETER(WRK.Status_Flag_6_Y_N);
PARAMETER(WRK.Status_Flag_7_Y_N);
PARAMETER(WRK.Status_Flag_8_Y_N);
PARAMETER(WRK.Status_Flag_12_Y_N);
PARAMETER(WRK.Email_to_Warehouse_Code);
PARAMETER(WRK.Email_Selection_usr);
PARAMETER(PAR.Salesperson_Code);
PARAMETER(LCL.Salesperson_Name);
PARAMETER(LCL.Email_to_Broker_Usr);
PARAMETER(LCL.Email_to_Salesperson_Usr);

//?08/27/24 SP S312312-End
//?Write Load/Order change log
CASE;

// IF WRK.Status - Y or N is no
IF WRK.Status_Y_or_N = 'N';

//?Write Load/Order change log
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Department Control Code = CND.Sales Dept
WRK.Department_Control_Code = 'SLS';

// WRK.Load Change Type = CND.Cancelled Order
WRK.Load_Change_Type = 'CANORD';

// WRK.Header Status USR = CND.Cancelled
WRK.Header_Status_USR = 'X';

//?E2640 RMC Call Different Load Ord chg log
// Call program CRT Load/OrderChg n/ld XF.
CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
PARAMETER(*ZERO);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(DTL.Header_Status);
PARAMETER(WRK.Header_Status_USR);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);

//?NOTE:  Will only write log if order on load and load not in E status
// PAR.Next Program Name = CON.*BLANK
PAR.Next_Program_Name = *BLANK;

// Call program UPD Cancel Order       XF.
CALL PROGRAM(UPD Cancel Order       XF) ('OPV9XFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Billing_Activity_Type);

CASE;

// IF DTL.OH Load Plan Ready is Yes
IF DTL.OH_Load_Plan_Ready = 'Y';

// Call program Rtv Crt OH Trigger    XF.
CALL PROGRAM(Rtv Crt OH Trigger    XF) ('PBWVXFR');
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Company_Number);

ENDIF;

RETURN;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Add error
CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

EXECUTE FUNCTION(RTV OE Hold/ShipTo FlagRT) TYPE(RTVOBJ) FILE(CABBREP)          AC1306629;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(WRK.Order_Entry_Hold);
PARAMETER(WRK.Ship_To_Customer_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Order Entry Hold
CASE;

// IF WRK.Order Entry Hold is New Order Hold
IF WRK.Order_Entry_Hold = 'Y';

// Send error message - 'Customer is held for new orders. Cannot process transaction.'
ERROR(USR1025);

QUIT;

ENDIF;

//?Ship to Customer = N
CASE;

// IF WRK.Ship To Customer Flag is No Use as Ship to Cust
IF WRK.Ship_To_Customer_Flag = 'N';

// Send error message - 'Invalid Ship To entered - Ship to Customer Flag is 'N'o.'
ERROR(USR2482);
MSGPARM(DTL.Ship_To_Customer);

QUIT;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Customer is not found.'
ERROR(USR0525);
MSGPARM(DTL.Ship_To_Customer);

ENDIF;

ENDIF;

//?Select company
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR Company Number
AND PGM.*Cursor_field = DTL.USR_Company_Number;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(DTL.USR_Company_Number);

ENDIF;

//?Select customer
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Ship To Customer
AND PGM.*Cursor_field = DTL.Ship_To_Customer;

// AND PGM.*Program mode is *ADD
AND PGM.*Program_mode = 'ADD';

// Call program SEL Cust/ShpTo Flag 'Y'SR.
CALL PROGRAM(SEL Cust/ShpTo Flag 'Y'SR) ('PDYSSRR');
PARAMETER(DTL.Ship_To_Customer);

//?Change to customer
CASE;

// IF DTL.Ship To Customer NE WRK.ZERO
IF DTL.Ship_To_Customer <> WRK.ZERO;

// PAR.Company Number = DTL.USR Company Number
PAR.Company_Number = DTL.USR_Company_Number;

// PAR.Ship To Customer = DTL.Ship To Customer
PAR.Ship_To_Customer = DTL.Ship_To_Customer;

// PAR.Order Number = CON.*ZERO
PAR.Order_Number = *ZERO;

// PAR.Next Program Name = CON.PMGFE2R
PAR.Next_Program_Name = 'PMGFE2R';

PGM.*Return_code = *BLANK;

RETURN;

ENDIF;

ENDIF;

//?Select TYPE (HPB ONLY -- and SBD)
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Type Code
AND PGM.*Cursor_field = DTL.Type_Code;

// Call program SEL Type Codes         SR.
CALL PROGRAM(SEL Type Codes         SR) ('CABVSRR');
PARAMETER(DTL.Type_Code);

ENDIF;

//?S028326 JM 08/22/24-Validate Company
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Rtv Plant Co/Org      XF.
CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
PARAMETER(DTL.USR_Company_Number);
PARAMETER(LCL.Plant_Company_Sts);
PARAMETER(NLL.Company_Organization);

CASE;

// IF LCL.Plant Company Sts is Plant Company
IF LCL.Plant_Company_Sts = 'P';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Company Number must be a Plant company.'
ERROR(USR3706);
MSGPARM(DTL.USR_Company_Number);

QUIT;

ENDIF;

ENDIF;

//?Change to company number
CASE;

// IF DTL.USR Company Number NE PAR.Company Number
IF DTL.USR_Company_Number <> PAR.Company_Number;

// PAR.Company Number = DTL.USR Company Number
PAR.Company_Number = DTL.USR_Company_Number;

// PAR.Ship To Customer = DTL.Ship To Customer
PAR.Ship_To_Customer = DTL.Ship_To_Customer;

// PAR.Order Number = CON.*ZERO
PAR.Order_Number = *ZERO;

// PAR.Next Program Name = CON.PMGFE2R
PAR.Next_Program_Name = 'PMGFE2R';

PGM.*Return_code = *BLANK;

RETURN;

ENDIF;

//?Change to customer
CASE;

// IF DTL.Ship To Customer NE PAR.Ship To Customer
IF DTL.Ship_To_Customer <> PAR.Ship_To_Customer;

//?Validate customer
CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

EXECUTE FUNCTION(VAL Check Exists       RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1347294;
PARAMETER(DTL.Ship_To_Customer);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// PAR.Company Number = DTL.USR Company Number
PAR.Company_Number = DTL.USR_Company_Number;

// PAR.Ship To Customer = DTL.Ship To Customer
PAR.Ship_To_Customer = DTL.Ship_To_Customer;

// PAR.Order Number = CON.*ZERO
PAR.Order_Number = *ZERO;

// PAR.Next Program Name = CON.PMGFE2R
PAR.Next_Program_Name = 'PMGFE2R';

PGM.*Return_code = *BLANK;

RETURN;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Customer Master not found.'
ERROR(USR0170);
MSGPARM(DTL.Ship_To_Customer);

ENDIF;

ENDIF;

ENDIF;

// PAR.Next Program Name = CON.PMGFE2R
PAR.Next_Program_Name = 'PMGFE2R';

//?Selects - Warehouse, Salesperson, Country, Intended for Export
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Salesperson Code
AND PGM.*Cursor_field = DTL.Salesperson_Code;

// Call program SEL Active Salesperson SR.
CALL PROGRAM(SEL Active Salesperson SR) ('CABYSRR');
PARAMETER(DTL.Salesperson_Code);

//?Selects - Warehouse, Salesperson, Country, Intended for Export
// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Warehouse Code
AND PGM.*Cursor_field = DTL.Warehouse_Code;

EXECUTE FUNCTION(RTV Appl Whs Restrict  RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1959551;
PARAMETER(JOB.*USER);
PARAMETER(LCL.Application_WHS_Restrict);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Application WHS Restrict is no
IF LCL.Application_WHS_Restrict = 'N';

// Call program SEL ShipCo/Warehouse   SR.
CALL PROGRAM(SEL ShipCo/Warehouse   SR) ('PPHQSRR');
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.USR_Company_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Sel User Appl Whs     SR.
CALL PROGRAM(Sel User Appl Whs     SR) ('PNMMSRR');
PARAMETER(JOB.*USER);
PARAMETER('O/P');
PARAMETER(DTL.Warehouse_Code);

ENDIF;

//?Selects - Warehouse, Salesperson, Country, Intended for Export
// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Country Code
AND PGM.*Cursor_field = DTL.Country_Code;

// Call program SEL Country Active     SR.
CALL PROGRAM(SEL Country Active     SR) ('PDEGSRR');
PARAMETER(DTL.Country_Code);

//?Selects - Warehouse, Salesperson, Country, Intended for Export
// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.OHE Intended for ExportCC
AND PGM.*Cursor_field = DTL.OHE_Intended_for_ExportCC;

// Call program SEL Country Active     SR.
CALL PROGRAM(SEL Country Active     SR) ('PDEGSRR');
PARAMETER(DTL.OHE_Intended_for_ExportCC);

// PAR.OHE Intended for ExportCC = DTL.OHE Intended for ExportCC
PAR.OHE_Intended_for_ExportCC = DTL.OHE_Intended_for_ExportCC;

//?Selects - Warehouse, Salesperson, Country, Intended for Export
// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.HPB Ship to Warehouse
AND PGM.*Cursor_field = DTL.HPB_Ship_to_Warehouse;

// Call program SEL ShipCo/Whse/Loc    SR.
CALL PROGRAM(SEL ShipCo/Whse/Loc    SR) ('PNNWSRR');
PARAMETER(DTL.HPB_Ship_to_Warehouse);
PARAMETER('E');
PARAMETER(DTL.USR_Company_Number);

ENDIF;

EXECUTE FUNCTION(RTV Sls Route by Slsp  RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1315679;
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(DTL.Salesperson_Code);
PARAMETER(DTL.Manager_Level_Code);
PARAMETER(DTL.VP_Level_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Sales route required
CASE;

// IF DTL.Sales Route Code EQ WRK.BLANK
IF DTL.Sales_Route_Code = WRK.BLANK;

// Send error message - 'Salesperson is not assigned a sales route'
ERROR(USR2029);
MSGPARM(DTL.Salesperson_Code);

ENDIF;

//?Validate Type code (HPB and SBD)
CASE;

// IF PAR.Company Organization is High Plains Biodiesel
IF PAR.Company_Organization = 'H';

// OR PAR.Company Organization is Seaboard
OR PAR.Company_Organization = 'S';

//?Validate Type code (HPB and SBD)
CASE;

// IF DTL.Type Code is Entered
IF DTL.Type_Code <> *BLANK;

// Call program Val Type Codes         XF.
CALL PROGRAM(Val Type Codes         XF) ('PBAKXFR');
PARAMETER(DTL.Type_Code);
PARAMETER(WRK.Return_Code_Usr);

CASE;

// IF WRK.Return Code Usr is *Record does not exist
IF WRK.Return_Code_Usr = 'Y2U0005';

// Send error message - 'Type Code &1 Not Found'
ERROR(USR3388);
MSGPARM(DTL.Type_Code);

ENDIF;

//?Validate Type code (HPB and SBD)
// IF *OTHERWISE
IF *OTHERWISE;

//?Default for HPB Only  & sbd
CASE;

// IF PAR.Company Organization is High Plains Biodiesel
IF PAR.Company_Organization = 'H';

// DTL.Type Code = WRK.Type Code
DTL.Type_Code = WRK.Type_Code;

//?Default for HPB Only  & sbd
// IF PAR.Company Organization is Seaboard
IF PAR.Company_Organization = 'S';

// Call program Rtv Dft Sales Channel  XF.
CALL PROGRAM(Rtv Dft Sales Channel  XF) ('PBHPXFR');
PARAMETER(DTL.Salesperson_Code);
PARAMETER(LCL.SEC_Default_Sales_Channel);

// DTL.Type Code = LCL.SEC Default Sales Channel
DTL.Type_Code = LCL.SEC_Default_Sales_Channel;

CASE;

// IF DTL.Type Code is EQ Blank
IF DTL.Type_Code = *BLANK;

// Send error message - 'Type Code &1 Not Found'
ERROR(USR3388);
MSGPARM(DTL.Type_Code);

ENDIF;

//?Default for HPB Only  & sbd
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Type Code &1 Not Found'
ERROR(USR3388);
MSGPARM(DTL.Type_Code);

ENDIF;

ENDIF;

ENDIF;

//?VP Level
CASE;

// IF DTL.VP Level Code EQ WRK.BLANK
IF DTL.VP_Level_Code = WRK.BLANK;

EXECUTE FUNCTION(RTV Mgr Desc,VP Level  RT) TYPE(RTVOBJ) FILE(CAALREP)          AC1277261;
PARAMETER(DTL.Manager_Level_Code);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(DTL.VP_Level_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

EXECUTE FUNCTION(RTV Order Types        RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1168350;
PARAMETER(DTL.Order_Type_Sales);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(DTL.Billing_Activity_Type);
PARAMETER(PAR.Affect_Inventory_Default);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Validate Order type
CASE;

// IF DTL.Billing Activity Type is Credit or Debit Memo
IF DTL.Billing_Activity_Type = '2'/'3';

// Send error message - 'Order type is invalid for &1'
ERROR(USR1895);
MSGPARM('Sales Orders');
MSGPARM(DTL.Order_Type_Sales);

//?Validate Order type
// IF DTL.Billing Activity Type is Warehouse Transfer
IF DTL.Billing_Activity_Type = '4';

CASE;

// IF PAR.Outside Warehouse Flag is Not Yes
IF PAR.Outside_Warehouse_Flag = *BLANK/'N';

// Send error message - 'Order Type is a warehouse transfer, but customer is not an outside warehous
ERROR(USR0610);
MSGPARM(DTL.Order_Type_Sales);

ENDIF;

//?Validate Order type
// IF DTL.Billing Activity Type is Invoice
IF DTL.Billing_Activity_Type = '1';

CASE;

// IF PAR.Outside Warehouse Flag is yes
IF PAR.Outside_Warehouse_Flag = 'Y';

// Send error message - 'Customer is an outside warehouse, but order type is not a warehouse transfe
ERROR(USR2259);
MSGPARM(DTL.Order_Type_Sales);

ENDIF;

ENDIF;

//?Fill Warehouse Control
CASE;

// IF DTL.Warehouse Code NE WRK.BLANK
IF DTL.Warehouse_Code <> WRK.BLANK;

EXECUTE FUNCTION(RTV WhsTyp/Ctrl/LdTyp RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1959790;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(WRK.Warehouse_Type);
PARAMETER(DTL.Trans_Contol_AS400_Plant);
PARAMETER(NLL.WHS_Default_Load_Type);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Add mode processing
CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

//?6/20/13 RMC E2625 get tpm loc code too
EXECUTE FUNCTION(RTV Cust Addr, A/R,Loc RT) TYPE(RTVOBJ) FILE(CABBREP)          AC2068791;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Ship_To_Name);
PARAMETER(DTL.Ship_To_Address_Line_1);
PARAMETER(DTL.Ship_To_Address_Line_2);
PARAMETER(DTL.Ship_To_Address_Line_3);
PARAMETER(DTL.Ship_To_City);
PARAMETER(DTL.Ship_To_State_Code);
PARAMETER(DTL.Ship_To_Zip_Postal_Code);
PARAMETER(DTL.OHE_Abs_Rate_Override_Rsn);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.Email_Cust_On_Order_Ship);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Bill to Customer = DTL.A/R Customer Number
DTL.Bill_to_Customer = DTL.AR_Customer_Number;

EXECUTE FUNCTION(RTV Cust Name/Addr     RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1129143;
PARAMETER(DTL.Bill_to_Customer);
PARAMETER(DTL.Bill_to_Name);
PARAMETER(DTL.Bill_to_Address_Line_1);
PARAMETER(DTL.Bill_to_Address_Line_2);
PARAMETER(DTL.Bill_to_Address_Line_3);
PARAMETER(DTL.Bill_to_City);
PARAMETER(DTL.Bill_to_State_Code);
PARAMETER(DTL.Bill_to_Zip_Postal_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Check for duplicate P.O #
CASE;

// IF DTL.Customer Purchase Order # NE WRK.BLANK
IF DTL.Customer_Purchase_Order_# <> WRK.BLANK;

// AND WRK.Update Exception Status is no
AND WRK.Update_Exception_Status = 'N';

EXECUTE FUNCTION(RTV Co,Cust,PO         RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1279297;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Customer_Purchase_Order_#);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

//?informational message was getting lost; get error message 1st time, then
//?    allow update
// Send error message - 'PO Number is a duplicate on another open order header.  Press Enter/Cmd Key
ERROR(USR2439);
MSGPARM(DTL.Customer_Purchase_Order_#);

// WRK.Update Exception Status = CND.yes
WRK.Update_Exception_Status = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?** Validate "Intended For Export" country code        E00157
CASE;

// IF DTL.OHE Intended for ExportCC is Entered
IF DTL.OHE_Intended_for_ExportCC <> *BLANK;

//?DO2416 DN 03/24/22-Validate Country Exist & Active.
EXECUTE FUNCTION(Val Country & Active   RT) TYPE(RTVOBJ) FILE(OME5REP)          AC2188228;
PARAMETER(DTL.OHE_Intended_for_ExportCC);
PARAMETER(LCL.Record_Status);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 // PAR.Record Status = DB1.Record Status
 PAR.Record_Status = DB1.Record_Status;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Record Status = CND.Inactive
 PAR.Record_Status = 'I';

 ENDIF;

}


//?DO2416 DN 03/24/22-Check Return Code.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Throw Error Message if NOT Active.
CASE;

// IF NOT LCL.Record Status is Active
IF ! LCL.Record_Status = 'A';

// Send error message - 'Country &1 Inactive.'
ERROR(USR5198);
MSGPARM(DTL.OHE_Intended_for_ExportCC);

ENDIF;

//?DO2416 DN 03/24/22-Check Return Code.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Country Code not found.'
ERROR(USR2030);
MSGPARM(DTL.OHE_Intended_for_ExportCC);

ENDIF;

//?** Cannot put Intended for Export country on an export E00157
CASE;

// IF DTL.Export Status is yes
IF DTL.Export_Status = 'Y';

// OR DTL.Country Code is Entered
OR DTL.Country_Code <> *BLANK;

// Send error message - 'Intended for Export country cannot be entered for an Export'
ERROR(USR4188);
MSGPARM(DTL.OHE_Intended_for_ExportCC);

ENDIF;

EXECUTE FUNCTION(RTV Desc, Status       RT) TYPE(RTVOBJ) FILE(OME5REP)          AC1261065;
PARAMETER(DTL.OHE_Intended_for_ExportCC);
PARAMETER(DTL.Text_USR_9);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Validate country code     (moved to before ship date tests)
CASE;

// IF DTL.Country Code NE WRK.BLANK
IF DTL.Country_Code <> WRK.BLANK;

//?** Error if "Intended for Export" is entered - one or the other  E00157
CASE;

// IF DTL.OHE Intended for ExportCC is Entered
IF DTL.OHE_Intended_for_ExportCC <> *BLANK;

// Send error message - 'Country code cannot be entered if Intended For Export.'
ERROR(USR4189);
MSGPARM(DTL.OHE_Intended_for_ExportCC);

ENDIF;

//?DO2416 DN 03/24/22-Validate Country Exist & Active.
EXECUTE FUNCTION(Val Country & Active   RT) TYPE(RTVOBJ) FILE(OME5REP)          AC2188228;
PARAMETER(DTL.Country_Code);
PARAMETER(LCL.Record_Status);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 // PAR.Record Status = DB1.Record Status
 PAR.Record_Status = DB1.Record_Status;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Record Status = CND.Inactive
 PAR.Record_Status = 'I';

 ENDIF;

}


//?DO2416 DN 03/24/22-Check Return Code.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Throw Error Message if NOT Active.
CASE;

// IF NOT LCL.Record Status is Active
IF ! LCL.Record_Status = 'A';

// Send error message - 'Country &1 Inactive.'
ERROR(USR5198);
MSGPARM(DTL.Country_Code);

ENDIF;

//?DO2416 DN 03/24/22-Check Return Code.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Country Code not found.'
ERROR(USR2030);
MSGPARM(DTL.Country_Code);

ENDIF;

// DTL.Export Status = CND.yes
DTL.Export_Status = 'Y';

//?Validate country code     (moved to before ship date tests)
// IF *OTHERWISE
IF *OTHERWISE;

//?Error if export status = Y
CASE;

// IF DTL.Export Status is yes
IF DTL.Export_Status = 'Y';

// Send error message - 'Export Code required when Export Status = Yes'
ERROR(USR2034);
MSGPARM(DTL.Country_Code);

ENDIF;

ENDIF;

//?** Date Tests:
//?** Dates are handled differently for Dailys and HPB   E00447
//?Sched ship date = req ship date if order sts is "E"ntered
CASE;

// IF DTL.Header Status is Entered
IF DTL.Header_Status = 'E';

// DTL.Scheduled Ship Date = DTL.Requested Ship Date
DTL.Scheduled_Ship_Date = DTL.Requested_Ship_Date;

ENDIF;

//?VAL:  Requested Ship Date
CASE;

// IF DTL.Requested Ship Date GT DTL.Scheduled Ship Date
IF DTL.Requested_Ship_Date > DTL.Scheduled_Ship_Date;

// Send error message - 'Requested Ship Date cannot be greater than Scheduled Ship Date.'
ERROR(USR4780);
MSGPARM(DTL.Requested_Ship_Date);

ENDIF;

// Call program Rtv Plant Co/Org      XF.
CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(PAR.Company_Organization);

//?Requested Ship date change
CASE;

// IF DTL.Requested Ship Date NE DTL.USR Requested ship date s
IF DTL.Requested_Ship_Date <> DTL.USR_Requested_ship_date_s;

// PAR.Status Flag 7  Y/N = CND.No
PAR.Status_Flag_7_Y_N = 'N';

// PAR.Status Flag 8  Y/N = CND.No
PAR.Status_Flag_8_Y_N = 'N';

EXECUTE FUNCTION(Val Day Prior Ship    RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1598040;
PARAMETER(DTL.USR_Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Date Method Code is Day Prior Ship
 IF DB1.Date_Method_Code = 'DPS';

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

 ENDIF;

}


//?Check Date method, date price
CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// AND LCL.Display Flag is Yes
AND LCL.Display_Flag = 'Y';

// Send error message - 'Order has "DPS" Date Method.  Market Price Date may need to be modified.'
ERROR(USR2964);

// LCL.Display Flag = CND.No
LCL.Display_Flag = 'N';

ENDIF;

//?Test dates 7 days out if on a load, else 1 day
CASE;

// IF DTL.Load ID is Blank
IF DTL.Load_ID = *ZERO;

// WRK.Date To               USR = JOB.*Job date + CON.1 *DAYS
WRK.Date_To_USR = DATEINCR(JOB.*Job_date 1 'DY' 1111111 'NONE' 'N' 1);

//?Test dates 7 days out if on a load, else 1 day
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Date To               USR = JOB.*Job date + CON.7 *DAYS
WRK.Date_To_USR = DATEINCR(JOB.*Job_date 7 'DY' 1111111 'NONE' 'N' 1);

ENDIF;

//?Update SSD if within date range                       E00447
CASE;

// IF DTL.Scheduled Ship Date GT WRK.Date To               USR
IF DTL.Scheduled_Ship_Date > WRK.Date_To_USR;

CASE;

// IF WRK.USR Output Only Status is Not Yes
IF WRK.USR_Output_Only_Status = *BLANK/'N';

//?dont update sched ship date if mult orders on a load
// DTL.Scheduled Ship Date = DTL.Requested Ship Date
DTL.Scheduled_Ship_Date = DTL.Requested_Ship_Date;

ENDIF;

ENDIF;

//?Update SSD if Dailys or HPB           E00447
CASE;

// IF PAR.Company Organization is Not Seaboard
IF PAR.Company_Organization = 'D'/'H';

// OR DTL.Load Type is Bulk
OR DTL.Load_Type = 'B';

// OR DTL.Block Order Flag is Block Order
OR DTL.Block_Order_Flag = 'B';

// DTL.Scheduled Ship Date = DTL.Requested Ship Date
DTL.Scheduled_Ship_Date = DTL.Requested_Ship_Date;

ENDIF;

ENDIF;

// WRK.Time = DTL.Requested Delivery Time * CON.100 *
WRK.Time = DTL.Requested_Delivery_Time * 100;

//?** Requested Ship Date cannot be before today (test only if changed)
CASE;

// IF DTL.Requested Ship Date NE DTL.USR Requested ship date s
IF DTL.Requested_Ship_Date <> DTL.USR_Requested_ship_date_s;

CASE;

// IF DTL.Requested Ship Date LT JOB.*Job date
IF DTL.Requested_Ship_Date < JOB.*Job_date;

// Send error message - 'Date must be after or equal to the current date and time'
ERROR(USR3927);
MSGPARM(DTL.Requested_Ship_Date);

// WRK.Lock/Unlock = CND.Unlock
WRK.Lock_Unlock = 'U';

ENDIF;

ENDIF;

//?Edit Delivery Time
CASE;

// IF DTL.Requested Delivery Time is GT 24 Hour Day
IF DTL.Requested_Delivery_Time > 2400;

// Send error message - 'Time Field GT 24 Hours.  Correct time and re-enter.'
ERROR(USR1712);
MSGPARM(DTL.Requested_Delivery_Time);

// WRK.Lock/Unlock = CND.Unlock
WRK.Lock_Unlock = 'U';

//?Edit Delivery Time
// IF DTL.Requested Delivery Time is LT 0
IF DTL.Requested_Delivery_Time < 0;

//?RMC 01/23/07 added err for time < 0 (& unlock field LJB 5/16/08)
// Send error message - 'Time Field is negative.  Correct time and re-enter.'
ERROR(USR3682);
MSGPARM(DTL.Requested_Delivery_Time);

// WRK.Lock/Unlock = CND.Unlock
WRK.Lock_Unlock = 'U';

//?Edit Delivery Time
// IF DTL.Requested Delivery Time is Zero
IF DTL.Requested_Delivery_Time = *ZERO;

//?LJB 05/16/08 Time cannot be zeros  (& unlock field)
// Send error message - 'Time is required.'
ERROR(USR2333);
MSGPARM(DTL.Requested_Delivery_Time);

// WRK.Lock/Unlock = CND.Unlock
WRK.Lock_Unlock = 'U';

//?Edit Delivery Time
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Remainder= DTL.Requested Delivery Time\CON.100
WRK.USR_Remainder = MODULO(DTL.Requested_Delivery_Time 100 1);

CASE;

// IF WRK.USR Remainder is GT 59 Minutes
IF WRK.USR_Remainder > 59;

// Send error message - 'Time Field minutes GT 59.  Correct time and re-enter.'
ERROR(USR2175);
MSGPARM(DTL.Requested_Delivery_Time);

ENDIF;

ENDIF;

//?** Validate delivery date if it has changed or if it is new
CASE;

// IF DTL.Requested Delivery Date NE WRK.Requested Delivery Dt
IF ( DTL.Requested_Delivery_Date <> WRK.Requested_Delivery_Dt;

// AND WRK.Requested Delivery Dt is Entered
AND WRK.Requested_Delivery_Dt <> *ZERO );

// OR WRK.Requested Delivery Dt is not entered
OR WRK.Requested_Delivery_Dt = *ZERO;

//?** Requested Delivery Date cannot be before today or now
CASE;

// IF DTL.Requested Delivery Date LT JOB.*Job date
IF DTL.Requested_Delivery_Date < JOB.*Job_date;

// Send error message - 'Date must be after or equal to the current date and time'
ERROR(USR3927);
MSGPARM(DTL.Requested_Delivery_Date);

// WRK.Lock/Unlock = CND.Unlock
WRK.Lock_Unlock = 'U';

//?** Requested Delivery Date cannot be before today or now
// IF DTL.Requested Delivery Date EQ JOB.*Job date
IF DTL.Requested_Delivery_Date = JOB.*Job_date;

CASE;

// IF DTL.Shipping Method is Prepaid
IF DTL.Shipping_Method = 'PR'/'PT';

CASE;

// IF WRK.Time LE JOB.*Job time
IF WRK.Time <= JOB.*Job_time;

// Send error message - 'Date must be after or equal to the current date and time'
ERROR(USR3927);
MSGPARM(DTL.Requested_Delivery_Date);

// WRK.Lock/Unlock = CND.Unlock
WRK.Lock_Unlock = 'U';

ENDIF;

ENDIF;

ENDIF;

//?** Delivery Date cannot be before Scheduled Ship Date      FP1251
CASE;

// IF DTL.Requested Delivery Date LT DTL.Scheduled Ship Date
IF DTL.Requested_Delivery_Date < DTL.Scheduled_Ship_Date;

//?** Do not allow the Delivery date to be before the Ship Date. Unlock
//?** the field if there is an error so it can be corrected.   FP1251
// Send error message - 'Delivery Date is before Scheduled Ship Date'
ERROR(USR2063);
MSGPARM(DTL.Requested_Delivery_Date);

// WRK.Lock/Unlock = CND.Unlock
WRK.Lock_Unlock = 'U';

ENDIF;

//?** Delivery Date cannot be before Requested Ship Date      E00147
CASE;

// IF DTL.Requested Delivery Date LT DTL.Requested Ship Date
IF DTL.Requested_Delivery_Date < DTL.Requested_Ship_Date;

// Send error message - 'Ship Date cannot be after Deliv Date.'
ERROR(USR3881);
MSGPARM(DTL.Requested_Ship_Date);

// WRK.Lock/Unlock = CND.Unlock
WRK.Lock_Unlock = 'U';

ENDIF;

// PAR.Status Flag 7  Y/N = CND.No
PAR.Status_Flag_7_Y_N = 'N';

// PAR.Status Flag 8  Y/N = CND.No
PAR.Status_Flag_8_Y_N = 'N';

ENDIF;

//?** Scheduled Ship Date must be a valid date           E000589
CASE;

// IF DTL.Scheduled Ship Date is entered
IF DTL.Scheduled_Ship_Date <> *ZERO;

//?** Validate Scheduled Ship Date. If error, user cannot change
//?** unless Requested Ship or Delivery dates are unlocked.    E000589
// Call program VAL Calendar           XF.
CALL PROGRAM(VAL Calendar           XF) ('PNO5XFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(WRK.Return_Code_Usr);

//?Validate SSD                                          E000589
CASE;

// IF WRK.Return Code Usr is Calendar not found
IF WRK.Return_Code_Usr = 'USR0018';

// DTL.Scheduled Ship Date = DTL.Scheduled Ship Date USR
DTL.Scheduled_Ship_Date = DTL.Scheduled_Ship_Date_USR;

// WRK.Lock/Unlock = CND.Unlock
WRK.Lock_Unlock = 'U';

ENDIF;

ENDIF;

//?** Check Must Ship Date in order if Whse, SSD, or RSD changed
CASE;

// IF DTL.Shipping Method is Buyers Truck
IF DTL.Shipping_Method = 'CR'/'CT';

//?       don't edit dates for buyers truck orders/loads
//?** Check Must Ship Date in order if Whse, SSD, or RSD changed
// IF DTL.Warehouse Code NE DTL.USR Warehouse Code
IF DTL.Warehouse_Code <> DTL.USR_Warehouse_Code;

// OR DTL.Scheduled Ship Date NE DTL.Scheduled Ship Date USR
OR DTL.Scheduled_Ship_Date <> DTL.Scheduled_Ship_Date_USR;

// OR DTL.Requested Delivery Date NE WRK.Requested Delivery Dt
OR DTL.Requested_Delivery_Date <> WRK.Requested_Delivery_Dt;

// OR DTL.Requested Delivery Time NE DTL.USR Time 4.0
OR DTL.Requested_Delivery_Time <> DTL.USR_Time_4_0;

// OR DTL.Requested Ship Date NE DTL.USR Requested ship date s
OR DTL.Requested_Ship_Date <> DTL.USR_Requested_ship_date_s;

//?** Must Ship Date will be zeros and error if no Miles Between Cities
//?E01523 RMC 5/02/11 use req delv date and time always for ddt calc
// WRK.USR Date - ATR = DTL.Requested Delivery Date
WRK.USR_Date_ATR = DTL.Requested_Delivery_Date;

// WRK.USR To Time 4.0 = DTL.Requested Delivery Time
WRK.USR_To_Time_4_0 = DTL.Requested_Delivery_Time;

// Call program CLC Must Ship 4 Req DlvXF.
CALL PROGRAM(CLC Must Ship 4 Req DlvXF) ('PMUSXFR');
PARAMETER(WRK.Must_Ship_Error);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Ship_To_City);
PARAMETER(DTL.Ship_To_State_Code);
PARAMETER(DTL.Requested_Ship_Date);
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(WRK.USR_Date_ATR);
PARAMETER(WRK.USR_To_Time_4_0);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(LCL.Must_Ship_Date_USR);
PARAMETER(LCL.Must_Ship_Time_USR);
PARAMETER(WRK.USR_Order_Number);

//?flag to notify TRAFFIC if no Mileage Between Cities rec    E001625
CASE;

// IF WRK.Must Ship Error is Miles to Next=Zeros
IF WRK.Must_Ship_Error = 'MTN';

//?RMC Dont trigger an error msg!    2-06-2017
// WRK.Must Ship Error = CND.No Error
WRK.Must_Ship_Error = *BLANK;

ENDIF;

// Call program Rtv Plant Co/Org      XF.
CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(PAR.Company_Organization);

//?Process date order error for must ship
CASE;

// IF WRK.Must Ship Error is No Error
IF WRK.Must_Ship_Error = *BLANK;

// OR PAR.Company Organization is Not Seaboard
OR PAR.Company_Organization = 'D'/'H';

// OR DTL.Country Code is Entered
OR ( DTL.Country_Code <> *BLANK;

// AND DTL.Country Code is Not USA
AND DTL.Country_Code <> 'USA' );

//?               do nothing
//?    if Dailys or High Plains Diesel or international account
//?Process date order error for must ship
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Load ID EQ WRK.ZERO
IF DTL.Load_ID = WRK.ZERO;

//?** Scheduled Ship Date must be a valid date           E000589
CASE;

// IF DTL.Scheduled Ship Date is entered
IF DTL.Scheduled_Ship_Date <> *ZERO;

//?** Validate Scheduled Ship Date. If error, user cannot change
//?** unless Requested Ship or Delivery dates are unlocked.    E000589
// Call program VAL Calendar           XF.
CALL PROGRAM(VAL Calendar           XF) ('PNO5XFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(WRK.Return_Code_Usr);

//?Validate SSD                                          E000589
CASE;

// IF WRK.Return Code Usr is Calendar not found
IF WRK.Return_Code_Usr = 'USR0018';

// DTL.Scheduled Ship Date = DTL.Scheduled Ship Date USR
DTL.Scheduled_Ship_Date = DTL.Scheduled_Ship_Date_USR;

// WRK.Lock/Unlock = CND.Unlock
WRK.Lock_Unlock = 'U';

ENDIF;

ENDIF;

//?** Don't prompt with an error message if *ADD mode    E00447
CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

EXECUTE FUNCTION(PMT Must Ship Dt Accpt IF) TYPE(EXCINTFUN)                     AC1510968;
PARAMETER(DTL.Requested_Delivery_Date);
PARAMETER(DTL.Requested_Delivery_Time);
PARAMETER(LCL.Must_Ship_Date_USR);
PARAMETER(LCL.Must_Ship_Time_USR);
PARAMETER(DTL.Requested_Ship_Date);
PARAMETER(PAR.STATUS);
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(WRK.Must_Ship_Error);
PARAMETER(DTL.Order_Number);
{
 //?Execute internal function

 // Call program PMT Must Ship Dt Accpt PV.
 CALL PROGRAM(PMT Must Ship Dt Accpt PV) ('PDJFPVR');
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(PAR.Must_Ship_Date_USR);
 PARAMETER(PAR.Requested_Ship_Date);
 PARAMETER(PAR.STATUS);
 PARAMETER(PAR.Must_Ship_Time_USR);
 PARAMETER(PAR.Requested_Delivery_Time);
 PARAMETER(PAR.Must_Ship_Error);
 PARAMETER(PAR.Order_Number);

 CASE;

 // IF PAR.STATUS is No
 IF PAR.STATUS = 'N';

 // Send error message - 'Order must be shipped by &1 to be delivered on time.'
 ERROR(USR2662);
 MSGPARM(PAR.Must_Ship_Date_USR);

 ENDIF;

}


//?** Don't prompt with an error message if *ADD mode    E00447
// IF *OTHERWISE
IF *OTHERWISE;

//?** If not yet assigned to a load, unlock so the date can be changed
EXECUTE FUNCTION(PMT Must Ship Dt Accpt IF) TYPE(EXCINTFUN)                     AC1510968;
PARAMETER(DTL.Requested_Delivery_Date);
PARAMETER(DTL.Requested_Delivery_Time);
PARAMETER(LCL.Must_Ship_Date_USR);
PARAMETER(LCL.Must_Ship_Time_USR);
PARAMETER(DTL.Requested_Ship_Date);
PARAMETER(PAR.STATUS);
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(WRK.Must_Ship_Error);
PARAMETER(DTL.Order_Number);
{
 //?Execute internal function

 // Call program PMT Must Ship Dt Accpt PV.
 CALL PROGRAM(PMT Must Ship Dt Accpt PV) ('PDJFPVR');
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(PAR.Must_Ship_Date_USR);
 PARAMETER(PAR.Requested_Ship_Date);
 PARAMETER(PAR.STATUS);
 PARAMETER(PAR.Must_Ship_Time_USR);
 PARAMETER(PAR.Requested_Delivery_Time);
 PARAMETER(PAR.Must_Ship_Error);
 PARAMETER(PAR.Order_Number);

 CASE;

 // IF PAR.STATUS is No
 IF PAR.STATUS = 'N';

 // Send error message - 'Order must be shipped by &1 to be delivered on time.'
 ERROR(USR2662);
 MSGPARM(PAR.Must_Ship_Date_USR);

 ENDIF;

}


ENDIF;

// WRK.Lock/Unlock = CND.Unlock
WRK.Lock_Unlock = 'U';

// IF *OTHERWISE
IF *OTHERWISE;

//?** Error if assigned to a load and has an invalid date
//?** Unlock the date field so it can be changed       E00147 LJB 4/22/08
EXECUTE FUNCTION(RTV Stop Number       RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1197795;
PARAMETER(DTL.Load_ID);
PARAMETER(WRK.Stop_Drop);
PARAMETER(DTL.Order_Number);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
{
 //?USER: Initialize routine

 // PAR.Stop/Drop = CON.*ZERO
 PAR.Stop_Drop = *ZERO;

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?If order number is found, retrieve stop number
 CASE;

 // IF PAR.Order Number EQ DB1.Order Number
 IF PAR.Order_Number = DB1.Order_Number;

 // PAR.Stop/Drop = DB1.Stop/Drop
 PAR.Stop_Drop = DB1.Stop_Drop;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


// WRK.Lock/Unlock = CND.Unlock
WRK.Lock_Unlock = 'U';

// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(DTL.Load_ID);
PARAMETER(WRK.Stop_Drop);
PARAMETER('DEADLN');
PARAMETER(WRK.Department_Control_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);

//?NOTE:  Will only write log if order on load and load not in E status
ENDIF;

ENDIF;

ENDIF;

//?** Delivery Date cannot be before Requested Ship Date      S00346
CASE;

// IF DTL.Requested Delivery Date LT DTL.Requested Ship Date
IF DTL.Requested_Delivery_Date < DTL.Requested_Ship_Date;

//?** Do not allow the Delivery date to be before the Ship Date. Unlock
//?** the field if there is an error so it can be corrected.   FP1251
// Send error message - 'Requested Delivery Date cannot be before requested ship date'
ERROR(USR3963);
MSGPARM(DTL.Requested_Ship_Date);

// WRK.Lock/Unlock = CND.Unlock
WRK.Lock_Unlock = 'U';

ENDIF;

//?** For Seaboard only, validate Deadline Depart Date/Time   W288
CASE;

// IF PAR.Company Organization is Seaboard
IF PAR.Company_Organization = 'S';

//?** Retrieve the hours that Shipping is restricted from loading
//?** (this is maintained by scheduling)                 W288
// Call program RTV Dock Unavail Range XF.
CALL PROGRAM(RTV Dock Unavail Range XF) ('PNNIXFR');
PARAMETER(DTL.Warehouse_Code);
PARAMETER(WRK.Dock_Unavail_Start_Time);
PARAMETER(WRK.Dock_Unavail_End_Time);

//?** Validate if hours are entered for a warehouse
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

//?      skip - not an error if no record
//?** Validate if hours are entered for a warehouse
// IF WRK.Dock Unavail Start Time is Zeros
IF WRK.Dock_Unavail_Start_Time = *ZERO;

// AND WRK.Dock Unavail End Time is Zeros
AND WRK.Dock_Unavail_End_Time = *ZERO;

//?      skip - not an error if times are zeros
//?** Validate if hours are entered for a warehouse
// IF *OTHERWISE
IF *OTHERWISE;

//?** If RSD = DDD then enforce Restricted Time Range    W288
CASE;

// IF DTL.Requested Ship Date EQ DTL.Deadline Depart Date
IF DTL.Requested_Ship_Date = DTL.Deadline_Depart_Date;

//?** Warning if DDT is during restriced hours             W288
CASE;

// IF DTL.Deadline Depart Time LH GE WRK.Dock Unavail Start Time
IF DTL.Deadline_Depart_Time_LH >= WRK.Dock_Unavail_Start_Time;

// AND DTL.Deadline Depart Time LH LE WRK.Dock Unavail End Time
AND DTL.Deadline_Depart_Time_LH <= WRK.Dock_Unavail_End_Time;

// DTL.Explaination 50 = WRK.Explaination 50
DTL.Explaination_50 = WRK.Explaination_50;

// PAR.Status Flag 7  Y/N = CND.Yes
PAR.Status_Flag_7_Y_N = 'Y';

// WRK.Lock/Unlock = CND.Unlock
WRK.Lock_Unlock = 'U';

ENDIF;

ENDIF;

ENDIF;

//?** Warning if date changes put DDD/T in the past. Truck will not have
//?** time to load and leave. Send a warning message and unlock the
//?** dates so they can be changed.                      W288
// Call program RTV System Date/Time   UP.
CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
PARAMETER(WRK.Current_System_Date);
PARAMETER(WRK.Current_System_Time);

//?** Warning if DDD = Today & DDT is before system time   W288
CASE;

// IF DTL.Deadline Depart Date EQ WRK.Current System Date
IF DTL.Deadline_Depart_Date = WRK.Current_System_Date;

// AND DTL.Deadline Depart Time LH LE WRK.Current System Time
AND DTL.Deadline_Depart_Time_LH <= WRK.Current_System_Time;

// DTL.Explaination 50 = WRK.Note: Text Usr - 50
DTL.Explaination_50 = WRK.Note_Text_Usr_50;

// PAR.Status Flag 7  Y/N = CND.Yes
PAR.Status_Flag_7_Y_N = 'Y';

// WRK.Lock/Unlock = CND.Unlock
WRK.Lock_Unlock = 'U';

ENDIF;

ENDIF;

//?Validate warehouse code     / hpb ship to whse
CASE;

// IF DTL.Warehouse Code EQ WRK.BLANK
IF DTL.Warehouse_Code = WRK.BLANK;

// Send error message - 'Value Required'
ERROR(USR1852);
MSGPARM(DTL.Warehouse_Code);

//?Validate warehouse code     / hpb ship to whse
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Warehouse Exists   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1323885;
PARAMETER(DTL.Warehouse_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


//?Error if warehouse not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Warehouse Codes not found.'
ERROR(USR0007);
MSGPARM(DTL.Warehouse_Code);

//?Error if warehouse not found
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Acct&Ship Co      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1814475;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(WRK.Shipping_Company);
PARAMETER(WRK.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.Billing Activity Type is Warehouse Transfer
IF DTL.Billing_Activity_Type = '4';

//?Screen warehouse (from) = warehouse in co/cust file (to)
CASE;

// IF DTL.Warehouse Code EQ WRK.USR Warehouse Code
IF DTL.Warehouse_Code = WRK.USR_Warehouse_Code;

// Send error message - 'From and To warehouse must be different for transfer.'
ERROR(USR0433);
MSGPARM(DTL.Warehouse_Code);

ENDIF;

EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
PARAMETER(WRK.USR_Warehouse_Code);
PARAMETER(WRK.Company_Number_Select);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Val Acctg Co on from whse on screen must = acctg Co on to whse on cust
CASE;

// IF WRK.Accounting Company NE WRK.Company Number Select
IF WRK.Accounting_Company <> WRK.Company_Number_Select;

//?This validation added 08/01/07 RMC
// Send error message - 'Warehouse &1 has diff Acctg Co than Transfer Cust Whse &2'
ERROR(USR3772);
MSGPARM(DTL.Warehouse_Code);
MSGPARM(WRK.USR_Warehouse_Code);

ENDIF;

CASE;

// IF WRK.Shipping Company NE DTL.Company Number
IF WRK.Shipping_Company <> DTL.Company_Number;

// Send error message - 'Warehouse &1 cannot ship from Company &2'
ERROR(USR3362);
MSGPARM(DTL.Warehouse_Code);
MSGPARM(DTL.Company_Number);

ENDIF;

CASE;

// IF PAR.Company Organization is High Plains Biodiesel
IF PAR.Company_Organization = 'H';

//?HPB Ship to whse - both must be external whses
CASE;

// IF DTL.HPB Ship to Warehouse is not entered
IF DTL.HPB_Ship_to_Warehouse = *BLANK;

// Send error message - 'Warehouse Code is required.'
ERROR(USR2015);
MSGPARM(DTL.HPB_Ship_to_Warehouse);

//?HPB Ship to whse - both must be external whses
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Warehouse Exists   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1323885;
PARAMETER(DTL.HPB_Ship_to_Warehouse);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Warehouse Codes not found.'
ERROR(USR0007);
MSGPARM(DTL.HPB_Ship_to_Warehouse);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Warehouse Location RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1564246;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(WRK.Warehouse_Location);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF WRK.Warehouse Location is Internal (Plant)
IF WRK.Warehouse_Location = 'I';

// Send error message - 'Warehouse must be an external warehouse.'
ERROR(USR4207);
MSGPARM(DTL.Warehouse_Code);

ENDIF;

EXECUTE FUNCTION(RTV Warehouse Location RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1564246;
PARAMETER(DTL.HPB_Ship_to_Warehouse);
PARAMETER(WRK.Warehouse_Location);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF WRK.Warehouse Location is Internal (Plant)
IF WRK.Warehouse_Location = 'I';

// Send error message - 'Warehouse must be an external warehouse.'
ERROR(USR4207);
MSGPARM(DTL.HPB_Ship_to_Warehouse);

ENDIF;

ENDIF;

ENDIF;

//?HPB Ship to whse - cant xfr from BL to not BL.   1/17.20
CASE;

// IF DTL.HPB Ship to Warehouse is not entered
IF DTL.HPB_Ship_to_Warehouse = *BLANK;

//?HPB Ship to whse - cant xfr from BL to not BL.   1/17.20
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
PARAMETER(DTL.HPB_Ship_to_Warehouse);
PARAMETER(LCL.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.Warehouse Type is Blended
IF WRK.Warehouse_Type = 'BL';

// AND LCL.Warehouse Type is Fresh or Frozen
AND LCL.Warehouse_Type = 'FR'/'FZ';

// Send error message - 'Warehouse type mismatch'
ERROR(USR5162);
MSGPARM(DTL.HPB_Ship_to_Warehouse);

ENDIF;

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?PKTR01 Validate Whse with Shipping Co               7/27/04
CASE;

// IF WRK.Shipping Company NE DTL.Company Number
IF WRK.Shipping_Company <> DTL.Company_Number;

// Send error message - 'Warehouse &1 cannot ship from Company &2'
ERROR(USR3362);
MSGPARM(DTL.Warehouse_Code);
MSGPARM(DTL.Company_Number);

ENDIF;

CASE;

// IF PAR.Company Organization is High Plains Biodiesel
IF PAR.Company_Organization = 'H';

//?HPB Only - FP1322 if ship co <> acctng co, then ship to whse is required
CASE;

// IF WRK.Shipping Company NE WRK.Accounting Company
IF WRK.Shipping_Company <> WRK.Accounting_Company;

//?Prevent shipping from hp1/hp2 directly to musket
CASE;

// IF WRK.Type Code is Marketing
IF WRK.Type_Code = 'MK';

//?hpb biodiesel cust will be a MK type
//?HPB Ship to whse
CASE;

// IF DTL.HPB Ship to Warehouse is not entered
IF DTL.HPB_Ship_to_Warehouse = *BLANK;

// Send error message - 'Warehouse Code is required.'
ERROR(USR2015);
MSGPARM(DTL.HPB_Ship_to_Warehouse);

//?HPB Ship to whse
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Warehouse Exists   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1323885;
PARAMETER(DTL.HPB_Ship_to_Warehouse);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Warehouse Codes not found.'
ERROR(USR0007);
MSGPARM(DTL.HPB_Ship_to_Warehouse);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Warehouse Location RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1564246;
PARAMETER(DTL.HPB_Ship_to_Warehouse);
PARAMETER(WRK.Warehouse_Location);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF WRK.Warehouse Location is Internal (Plant)
IF WRK.Warehouse_Location = 'I';

// Send error message - 'Warehouse must be an external warehouse.'
ERROR(USR4207);
MSGPARM(DTL.HPB_Ship_to_Warehouse);

ENDIF;

ENDIF;

ENDIF;

//?Prevent shipping from hp1/hp2 directly to musket
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Marketing customer # is required for Warehouse &1'
ERROR(USR4246);
MSGPARM(DTL.Warehouse_Code);

ENDIF;

//?HPB Only - FP1322 if ship co <> acctng co, then ship to whse is required
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.HPB Ship to Warehouse = CON.*BLANK
DTL.HPB_Ship_to_Warehouse = *BLANK;

CASE;

// IF WRK.Type Code is Marketing
IF WRK.Type_Code = 'MK';

// Send error message - 'Marketing customer # is not valid for Warehouse &1'
ERROR(USR4247);
MSGPARM(DTL.Warehouse_Code);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Rtv HPB Cust Fields   XF.
CALL PROGRAM(Rtv HPB Cust Fields   XF) ('PNY1XFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Bill_to_Customer);
PARAMETER(LCL.HPB_Employer_ID_#);
PARAMETER(LCL.HPB_ULSD_Company_#);
PARAMETER(LCL.HPB_ULSD_Facility_ID);
PARAMETER(LCL.Type_Code);

//?E01692 RMC dont allow biodiesel sale if ULSD# is blank
CASE;

// IF LCL.HPB ULSD Company # is Not Entered
IF LCL.HPB_ULSD_Company_# = *BLANK;

// AND DTL.Type Code is Not NR
AND DTL.Type_Code <> 'NR';

//?9/30/11 use dtl.type code alieu lcl.type code
EXECUTE FUNCTION(Rtv HPB fields        RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1855470;
PARAMETER(WRK.USR_Warehouse_Code);
PARAMETER(NLL.Production_Warehouse_Code);
PARAMETER(NLL.Warehouse_Location);
PARAMETER(LCL.WHS_Req_Meter_Reading_Shp);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?see if its a biodiesel whse
CASE;

// IF LCL.WHS Req Meter Reading Shp is Yes
IF LCL.WHS_Req_Meter_Reading_Shp = 'Y';

// Send error message - 'Invalid Customer Setup for HPB Sale'
ERROR(USR4454);
MSGPARM(DTL.Bill_to_Customer);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?VAL: Warehouse Access
CASE;

// IF DTL.Warehouse Code is Not Blanks
IF DTL.Warehouse_Code <> *BLANK;

// Call program Val App Whs Itm Acs   XF.
CALL PROGRAM(Val App Whs Itm Acs   XF) ('PNMOXFR');
PARAMETER(JOB.*USER);
PARAMETER('O/P');
PARAMETER(DTL.Warehouse_Code);
PARAMETER(*ZERO);
PARAMETER(LCL.WHS_Item_Access_Sts_USR);

CASE;

// IF LCL.Warehouse Access Sts USR is Access Denied
IF LCL.WHS_Item_Access_Sts_USR = 'D';

// Send error message - 'Access Denied to &1 for Warehouse &2.'
ERROR(USR2776);
MSGPARM(JOB.*USER);
MSGPARM(DTL.Warehouse_Code);

ENDIF;

ENDIF;

//?R7574  RMC 10/18/16 Cant chg warehouse to a diff type if OD Exist
CASE;

// IF DTL.Warehouse Code NE DTL.USR Warehouse Code
IF DTL.Warehouse_Code <> DTL.USR_Warehouse_Code;

// AND PAR.Company Organization is Seaboard
AND PAR.Company_Organization = 'S';

// AND PGM.*Program mode is *CHANGE
AND PGM.*Program_mode = 'CHG';

// Call program RTV Whse Type-2 whses  XF.
CALL PROGRAM(RTV Whse Type-2 whses  XF) ('PBQAXFR');
PARAMETER(DTL.Warehouse_Code);
PARAMETER(LCL.Warehouse_Type);
PARAMETER(DTL.USR_Warehouse_Code);
PARAMETER(LCL.Warehouse_Type_USR);

CASE;

// IF LCL.Warehouse Type NE LCL.Warehouse Type USR
IF LCL.Warehouse_Type <> LCL.Warehouse_Type_USR;

EXECUTE FUNCTION(RTV Chk Detail Exists  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1425981;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


//?Msg 'Order has line items' R7574  JJH 10/19/16
CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// Send error message - 'Order has line items; warehouse cant be changed to a diff type'
ERROR(USR4777);
MSGPARM(DTL.Warehouse_Code);

ENDIF;

ENDIF;

ENDIF;

//?Validate P.O requirement
CASE;

// IF WRK.P.O. Required Flag is yes
IF WRK.P_O_Required_Flag = 'Y';

// AND DTL.Customer Purchase Order # EQ WRK.BLANK
AND DTL.Customer_Purchase_Order_# = WRK.BLANK;

CASE;

// IF DTL.Block Order Flag is Firm Order
IF DTL.Block_Order_Flag = 'F';

// Send error message - 'Customer Default File requires P.O. to be entered for this customer.'
ERROR(USR1243);
MSGPARM(DTL.Customer_Purchase_Order_#);

ENDIF;

ENDIF;

//?Validate absorbed freight rate
CASE;

// IF DTL.Shipping Method is Buyers Truck
IF DTL.Shipping_Method = 'CR'/'CT';

// OR DTL.Shipping Method is Collect Rail
OR DTL.Shipping_Method = 'CR';

//?R12926 DN 05/04/18-Added c2-'Shipping Method is Collect Rail' to
//?  be consistent with PDSVE1R program.
// DTL.Absorbed Freight Rate = CON.*ZERO
DTL.Absorbed_Freight_Rate_CWT = *ZERO;

//?Validate absorbed freight rate
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Absorbed Freight Rate is EQ Zeros
IF DTL.Absorbed_Freight_Rate_CWT = *ZERO;

//?R12926 DN 05/04/18-If AFR is 0 must get it from Co Cust. Leave as is.
EXECUTE FUNCTION(RTV Abs Freight Rate   RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1391554;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Absorbed_Freight_Rate_CWT);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

ENDIF;

//?Determine Carrier - If ship method is collect then carrier must be buy
CASE;

// IF DTL.Shipping Method is Buyers Truck
IF DTL.Shipping_Method = 'CR'/'CT';

//?** Change carrier to BUY if collect   FT686 LJB 01/03/2008
// DTL.Carrier Code = CON.BUY
DTL.Carrier_Code = 'BUY';

ENDIF;

//?** If Collect Truck or Rail then default carrier to "BUY"
CASE;

// IF PAR.Shipping Method is Collect
IF PAR.Shipping_Method = 'CR'/'CT';

CASE;

// IF DTL.Shipping Method is Collect
IF DTL.Shipping_Method = 'CR'/'CT';

//?** 11/16/2007 LJB FP1251 Carrier must be BUY if ship meth = collect
// DTL.Carrier Code = CND.Buyer's Truck
DTL.Carrier_Code = 'BUY';

// IF *OTHERWISE
IF *OTHERWISE;

//?** If Ship Method changed from Collect to Prepaid
// DTL.Carrier Code = CON.*BLANK
DTL.Carrier_Code = *BLANK;

ENDIF;

ENDIF;

//?** If changed from Collect to Prepaid, blank out the carrier code
CASE;

// IF PAR.Shipping Method is Collect
IF PAR.Shipping_Method = 'CR'/'CT';

CASE;

// IF DTL.Shipping Method is Prepaid
IF DTL.Shipping_Method = 'PR'/'PT';

//?** If Ship Method changed from Collect to Prepaid   E00127 LJB 04/04/08
// DTL.Carrier Code = CON.*BLANK
DTL.Carrier_Code = *BLANK;

ENDIF;

ENDIF;

//?Edit for Transfer In Storage
CASE;

// IF DTL.Transfer in Storage Ind is Yes
IF DTL.Transfer_in_Storage_Ind = 'Y';

CASE;

// IF DTL.Shipping Method is Buyers Truck
IF DTL.Shipping_Method = 'CR'/'CT';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Shipping Method must by CR or CT if TIS Indicator is 'Y'.'
ERROR(USR2866);
MSGPARM(DTL.Shipping_Method);

ENDIF;

ENDIF;

CASE;

// IF PAR.Company Organization is Not HPB
IF PAR.Company_Organization = 'D'/'S';

CASE;

// IF DTL.Reefer Temperature is GE 100
IF DTL.Reefer_Temperature >= 100;

// OR DTL.Reefer Temperature is LE 100-
OR DTL.Reefer_Temperature <= -100;

// Send error message - 'Temperature must be < 100 degrees.'
ERROR(USR4960);
MSGPARM(DTL.Reefer_Temperature);

ENDIF;

ENDIF;

//?Export Status
CASE;

// IF PAR.Export Status is yes
IF PAR.Export_Status = 'Y';

CASE;

// IF DTL.Export Status is no
IF DTL.Export_Status = 'N';

// DTL.Country Code = CON.*BLANK
DTL.Country_Code = *BLANK;

ENDIF;

ENDIF;

//?Export Docs Go w/Driver
CASE;

// IF DTL.Export Status is no
IF DTL.Export_Status = 'N';

// DTL.Export Docs Go w/Driver = CND.No
DTL.Export_Docs_Go_w_Driver = 'N';

ENDIF;

//?W77844 DN 06/11/21-Convert Old Spot Buy Flag Value to New Val: S, T, P
//?** Spot buy = y or n, blank = err   W77844 DN 06/11/21-New Spot Buy Value
CASE;

// IF DTL.Spot Buy  (Y/N) is Spot
IF DTL.Spot_Buy_Y_N = 'S';

// DTL.OHE Spot Buy = CND.Spot
DTL.OHE_Spot_Buy = 'S';

// DTL.Spot Buy Text USR = Condition name of DTL.OHE Spot Buy
DTL.Spot_Buy_Text_USR = RTVCND(DTL.OHE_Spot_Buy);

//?** Spot buy = y or n, blank = err   W77844 DN 06/11/21-New Spot Buy Value
// IF DTL.Spot Buy  (Y/N) is Turn
IF DTL.Spot_Buy_Y_N = 'T';

// DTL.OHE Spot Buy = CND.Turn
DTL.OHE_Spot_Buy = 'T';

// DTL.Spot Buy Text USR = Condition name of DTL.OHE Spot Buy
DTL.Spot_Buy_Text_USR = RTVCND(DTL.OHE_Spot_Buy);

//?** Spot buy = y or n, blank = err   W77844 DN 06/11/21-New Spot Buy Value
// IF DTL.Spot Buy  (Y/N) is Promo
IF DTL.Spot_Buy_Y_N = 'P';

// DTL.OHE Spot Buy = CND.Promo
DTL.OHE_Spot_Buy = 'P';

// DTL.Spot Buy Text USR = Condition name of DTL.OHE Spot Buy
DTL.Spot_Buy_Text_USR = RTVCND(DTL.OHE_Spot_Buy);

//?** Spot buy = y or n, blank = err   W77844 DN 06/11/21-New Spot Buy Value
// IF *OTHERWISE
IF *OTHERWISE;

//?E3323 now required
CASE;

// IF PAR.Company Organization is Seaboard
IF PAR.Company_Organization = 'S';

// Send error message - 'Spot Buy S/T/P required'
ERROR(USR4747);
MSGPARM(DTL.Spot_Buy_Y_N);

// DTL.OHE Spot Buy = CND.*Blank
DTL.OHE_Spot_Buy = *BLANK;

// DTL.Spot Buy Text USR = CON.*BLANK
DTL.Spot_Buy_Text_USR = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.OHE Spot Buy = CND.Turn
DTL.OHE_Spot_Buy = 'T';

// DTL.Spot Buy Text USR = Condition name of DTL.OHE Spot Buy
DTL.Spot_Buy_Text_USR = RTVCND(DTL.OHE_Spot_Buy);

ENDIF;

ENDIF;

//?Errors exist in Ord Detail if "Order Requires Review" = "Y"
CASE;

// IF DTL.Order Requires Review is Yes
IF DTL.Order_Requires_Review = 'Y';

// PAR.Status Flag 9  Y/N = CND.Yes
PAR.Status_Flag_9_Y_N = 'Y';

// DTL.Explaination Text 2 = WRK.Explaination Text 2
DTL.Explaination_Text_2 = WRK.Explaination_Text_2;

//?Errors exist in Ord Detail if "Order Requires Review" = "Y"
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Status Flag 9  Y/N = CND.No
PAR.Status_Flag_9_Y_N = 'N';

ENDIF;

//?Set Country Code and Export flg for Blank International State
CASE;

// IF DTL.Shipping Method is Prepaid
IF DTL.Shipping_Method = 'PR'/'PT';

// AND DTL.Country Code is Blank
AND DTL.Country_Code = *BLANK;

// AND DTL.Export Status is no
AND DTL.Export_Status = 'N';

// AND NOT DTL.Ship To Zip_Postal Code is Blank
AND ! DTL.Ship_To_Zip_Postal_Code = *BLANK;

// AND DTL.Order Type_Sales is Regular Order
AND DTL.Order_Type_Sales = 'OR';

// AND DTL.Ship To State Code is International Accounts
AND DTL.Ship_To_State_Code = '.';

CASE;

// IF DTL.Country Code 1 usr is Not Entered
IF ( DTL.Country_Code_1_usr = *BLANK;

// AND DTL.Ship to Customer      USR is Not entered
AND DTL.Ship_to_Customer_USR = *ZERO );

// OR DTL.Country Code 1 usr is Entered
OR ( DTL.Country_Code_1_usr <> *BLANK;

// AND DTL.Ship to Customer      USR is Entered
AND DTL.Ship_to_Customer_USR <> 0;

// AND DTL.Ship To Customer NE DTL.Ship to Customer      USR
AND DTL.Ship_To_Customer <> DTL.Ship_to_Customer_USR );

// LCL.Text USR 5 = DTL.Ship To Zip_Postal Code
LCL.Text_USR_5 = DTL.Ship_To_Zip_Postal_Code;

// Call program EUP Chk Numeric value.
CALL PROGRAM(EUP Chk Numeric value) ('PVD8UPR');
PARAMETER(LCL.Text_USR_5);
PARAMETER(LCL.Numeric_Zip_Code_USR);

//?Proceed if Zipcode is not Numeric
CASE;

// IF LCL.Numeric Zip Code USR? is No
IF LCL.Numeric_Zip_Code_USR = 'N';

EXECUTE FUNCTION(RTV All fields         RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1478652;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(NLL.Customer_Name);
PARAMETER(NLL.Address_Line_1);
PARAMETER(NLL.Address_Line_2);
PARAMETER(NLL.Address_Line_3);
PARAMETER(NLL.City);
PARAMETER(NLL.State_Code);
PARAMETER(NLL.County_Code);
PARAMETER(NLL.Zip_Postal_Code);
PARAMETER(NLL.Telephone_Number_FF);
PARAMETER(NLL.Fax_Number_FF);
PARAMETER(NLL.Alpha_Search);
PARAMETER(NLL.Federal_Tax_Id);
PARAMETER(NLL.New_Customer_Status);
PARAMETER(NLL.SIC_Number);
PARAMETER(NLL.D_B_Number);
PARAMETER(NLL.D_B_Rating);
PARAMETER(NLL.Date_of_D_B_Rating);
PARAMETER(NLL.Credit_Line_Expire_Date);
PARAMETER(NLL.AR_Customer_Number);
PARAMETER(NLL.Parent_Customer);
PARAMETER(NLL.Credit_Check_AR_Customer);
PARAMETER(NLL.Credit_Check_Parent_Cust);
PARAMETER(DTL.Country_Code_1_usr);
PARAMETER(NLL.EDI_Invoice_Sts);
PARAMETER(NLL.Order_Entry_Hold);
PARAMETER(NLL.Parent_Credit_Limit);
PARAMETER(NLL.AR_Credit_Limit);
PARAMETER(NLL.Order_Entry_Hold_Date);
PARAMETER(NLL.Ship_To_Customer_Flag);
PARAMETER(NLL.Field_vs_In_House_flag);
PARAMETER(NLL.Email_When_Order_Shipped);
PARAMETER(NLL.Print_Invoice_Sts);
PARAMETER(NLL.Item_Reference_Status);
PARAMETER(NLL.Statement_Print_Frequency);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(NLL.Record_Status);
PARAMETER(NLL.Job_Time);
PARAMETER(NLL.User_Id);
PARAMETER(NLL.Job_Name);
PARAMETER(NLL.Job_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.Country Code 1 usr is Entered
IF DTL.Country_Code_1_usr <> *BLANK;

// DTL.Country Code = DTL.Country Code 1 usr
DTL.Country_Code = DTL.Country_Code_1_usr;

// DTL.Export Status = CND.yes
DTL.Export_Status = 'Y';

// DTL.Ship to Customer      USR = DTL.Ship To Customer
DTL.Ship_to_Customer_USR = DTL.Ship_To_Customer;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?CALC: Detail screen function fields

//?04/13/09 PKD E00329 Re-Org screen with new fields.
EXECUTE FUNCTION(RTV Order Type Desc.   RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1281766;
PARAMETER(DTL.Order_Type_Sales);
PARAMETER(DTL.Order_Type_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Shipping Method Desc DRV) TYPE(DRVFLD)                         AC1927077;
PARAMETER(DTL.Shipping_Method_Desc_DRV);
PARAMETER(DTL.Shipping_Method);
{
 //?Calculate derived field

 // PAR.Shipping Method Desc DRV = Condition name of PAR.Shipping Method
 PAR.Shipping_Method_Desc_DRV = RTVCND(PAR.Shipping_Method);

}


EXECUTE FUNCTION(RTV Desc, Status       RT) TYPE(RTVOBJ) FILE(OME5REP)          AC1261065;
PARAMETER(DTL.Country_Code);
PARAMETER(DTL.Country_Description);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Retrieve description for "Intended for Export" country E00157
EXECUTE FUNCTION(RTV Desc, Status       RT) TYPE(RTVOBJ) FILE(OME5REP)          AC1261065;
PARAMETER(DTL.OHE_Intended_for_ExportCC);
PARAMETER(DTL.Text_USR_9);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Block Order Flag Description
CASE;

// IF DTL.Block Order Flag is Firm Order
IF DTL.Block_Order_Flag = 'F';

// DTL.Block Order Flag Desc USR = CON.--- FIRM ORDER ----
DTL.Block_Order_Flag_Desc_USR = '--- FIRM ORDER ----';

//?Block Order Flag Description
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Block Order Flag Desc USR = CON.--- BLOCK ORDER ---
DTL.Block_Order_Flag_Desc_USR = '--- BLOCK ORDER ---';

ENDIF;

// Call program CLC Deadln Depart Dt  XF.
CALL PROGRAM(CLC Deadln Depart Dt  XF) ('POSCXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Ship_To_City);
PARAMETER(DTL.Ship_To_State_Code);
PARAMETER(DTL.Requested_Delivery_Date);
PARAMETER(DTL.Requested_Delivery_Time);
PARAMETER(DTL.Deadline_Depart_Date);
PARAMETER(DTL.Deadline_Depart_Time_LH);

//?** Seaboard only, if no DDD/T, check for Mileage Betw Cities  E1625
CASE;

// IF PAR.Company Organization is Seaboard
IF PAR.Company_Organization = 'S';

//?Only check Mileage Betw Cities if no DDDate           E001625
CASE;

// IF DTL.Deadline Depart Date is not entered
IF DTL.Deadline_Depart_Date = *ZERO;

//?** Validate "From" city/state
// Call program VAL MBC Exists-From CtyXF.
CALL PROGRAM(VAL MBC Exists-From CtyXF) ('PNX3XFR');
PARAMETER(DTL.Ship_To_City);
PARAMETER(DTL.Ship_To_State_Code);

CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

ENDIF;

CASE;

// IF DTL.Warehouse Code is Not Blanks
IF DTL.Warehouse_Code <> *BLANK;

//?** Validate "To" city/state
EXECUTE FUNCTION(RTV Warehouse Address  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1211418;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(NLL.Warehouse_Description);
PARAMETER(NLL.Address_Line_1);
PARAMETER(NLL.Address_Line_2);
PARAMETER(NLL.Address_Line_3);
PARAMETER(LCL.City);
PARAMETER(NLL.Zip_Postal_Code);
PARAMETER(LCL.State_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Val Mileage Existance  XF.
CALL PROGRAM(Val Mileage Existance  XF) ('PNX4XFR');
PARAMETER(LCL.City);
PARAMETER(LCL.State_Code);
PARAMETER(WRK.Record_Found_USR);

ENDIF;

ENDIF;

ENDIF;

//?USER: Validate detail screen relations

//?Change mode processing
CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

//?Validate item balances exist if change warehouse
CASE;

// IF DTL.Warehouse Code NE DTL.USR Warehouse Code
IF DTL.Warehouse_Code <> DTL.USR_Warehouse_Code;

// Call program VAL Itm Bals-Whs Chg   XF.
CALL PROGRAM(VAL Itm Bals-Whs Chg   XF) ('PDG3XFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(WRK.Error_Status);

CASE;

// IF WRK.Error Status is yes
IF WRK.Error_Status = 'Y';

// Send error message - 'Item Balance not found for some items in new warehouse.'
ERROR(USR2261);
MSGPARM(DTL.Warehouse_Code);

ENDIF;

ENDIF;

ENDIF;

//?** If changed from Collect to Prepaid, blank out the carrier code
CASE;

// IF PAR.Shipping Method is Collect
IF PAR.Shipping_Method = 'CR'/'CT';

CASE;

// IF DTL.Shipping Method is Prepaid
IF DTL.Shipping_Method = 'PR'/'PT';

//?** If Ship Method changed from Collect to Prepaid   E00127 LJB 04/04/08
// DTL.Carrier Code = CON.*BLANK
DTL.Carrier_Code = *BLANK;

ENDIF;

ENDIF;

//?F16=Load Planning    E4119 RMC 5/23/2016 Remove Live with tpm checks
CASE;

// IF DTL.*CMD key is *Work With Loads
IF DTL.*CMD_key = '16';

EXECUTE FUNCTION(RTV Chk Detail Exists  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1425981;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


//?Msg 'Order has no line items' E00180 RMC 7/08/08
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Order has no line items. Cannot Load Plan.'
ERROR(USR3962);

//?Msg 'Order has no line items' E00180 RMC 7/08/08
// IF *OTHERWISE
IF *OTHERWISE;

//?call load plan pgm in command key section
ENDIF;

//?TMS checks
CASE;

// IF PAR.PFS Carlisle Active is Yes
IF PAR.PFS_Carlisle_Active = 'Y';

CASE;

// IF LCL.PFS AccuSort Active is Yes
IF ( LCL.PFS_AccuSort_Active = 'Y';

// AND DTL.Type Code is Export Seaboard Bookings
AND DTL.Type_Code = 'ES' );

//?only ES Stay on the as400 when live with TMS domestic only
// IF *OTHERWISE
IF *OTHERWISE;

//?If TMS Is live with Domestic only, allow Export load ties
// Send error message - 'Function not allowed.'
ERROR(USR1833);

ENDIF;

//?TMS checks
// IF DTL.Load Plan Order is no
IF DTL.Load_Plan_Order = 'N';

// Send error message - 'Function not allowed.'
ERROR(USR1833);

ENDIF;

ENDIF;

//?10/16/08 PKD Added to default Y for Docs go with Driver if
//?             export and air frieght.
//?R13074 DN 06/15/18-Changed Validation to Set Export Docs Go w/Driver Flag.
//?export & air frt
CASE;

// IF DTL.Export Status is yes
IF DTL.Export_Status = 'Y';

// AND DTL.Air Freight Order is yes
AND ( DTL.Air_Freight_Order = 'Y';

// OR DTL.Country Code is Mexico
OR DTL.Country_Code = 'MEX' );

// DTL.Export Docs Go w/Driver = CND.Yes
DTL.Export_Docs_Go_w_Driver = 'Y';

ENDIF;

// LCL.Letter of Credit Number = DTL.String 30
LCL.Letter_of_Credit_Number = DTL.String_30;

//?USER: Create DBF record

// Call program CRT Order Header&DlvPO XF.
CALL PROGRAM(CRT Order Header&DlvPO XF) ('PMDIXFR')                             AC1425981;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Order_Type_Sales);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(WRK.Parent_Customer);
PARAMETER(DTL.Ship_To_Name);
PARAMETER(DTL.Ship_To_Address_Line_1);
PARAMETER(DTL.Ship_To_Address_Line_2);
PARAMETER(DTL.Ship_To_Address_Line_3);
PARAMETER(DTL.Ship_To_City);
PARAMETER(DTL.Ship_To_State_Code);
PARAMETER(DTL.Ship_To_Zip_Postal_Code);
PARAMETER(DTL.Bill_to_Customer);
PARAMETER(DTL.Bill_to_Name);
PARAMETER(DTL.Bill_to_Address_Line_1);
PARAMETER(DTL.Bill_to_Address_Line_2);
PARAMETER(DTL.Bill_to_Address_Line_3);
PARAMETER(DTL.Bill_to_City);
PARAMETER(DTL.Bill_to_State_Code);
PARAMETER(DTL.Bill_to_Zip_Postal_Code);
PARAMETER(DTL.Customer_Purchase_Order_#);
PARAMETER(DTL.Order_Date);
PARAMETER(DTL.Requested_Ship_Date);
PARAMETER(DTL.Actual_Shipped_Date);
PARAMETER(*ZERO);
PARAMETER(DTL.Terms_Code);
PARAMETER(DTL.Special_Instructions);
PARAMETER(DTL.Special_Instructions_2);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Comment_Print_Acknowledge);
PARAMETER(DTL.Comment_Print_Inv_Cr_Memo);
PARAMETER(DTL.Comment_Print_Pick_Slip);
PARAMETER(DTL.Comment_Print_Ship_Doc);
PARAMETER(DTL.Reason_Code);
PARAMETER('Y');
PARAMETER(DTL.Header_Status);
PARAMETER(DTL.Header_Status_Last);
PARAMETER('N');
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(DTL.User_Original_Entry);
PARAMETER(DTL.Date_of_Original_Entry);
PARAMETER(DTL.Order_Value_Total);
PARAMETER(DTL.Order_Weight_Total);
PARAMETER('N');
PARAMETER('N');
PARAMETER('N');
PARAMETER(DTL.Requested_Delivery_Date);
PARAMETER(DTL.Requested_Delivery_Time);
PARAMETER(DTL.Accounts_Receiv_Ent_1);
PARAMETER(DTL.Accounts_Receiv_Ent_2);
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Absorbed_Freight_Rate_CWT);
PARAMETER(DTL.Rated_Freight);
PARAMETER(DTL.LTL_Flag);
PARAMETER(*BLANK);
PARAMETER('U');
PARAMETER(DTL.Shipping_Method);
PARAMETER(DTL.Export_Status);
PARAMETER(DTL.Palletize);
PARAMETER(DTL.Shrink_Wrap);
PARAMETER(DTL.Slip_Sheet);
PARAMETER(*BLANK);
PARAMETER(DTL.Reefer_Temperature);
PARAMETER(DTL.Load_Type);
PARAMETER(DTL.Attach_to_Invoice_Number);
PARAMETER(DTL.Load_Plan_Order);
PARAMETER(DTL.Print_Pick_Slip);
PARAMETER(DTL.Resell_Reference_Number);
PARAMETER(DTL.Special_Comment_1);
PARAMETER(DTL.Special_Comment_2);
PARAMETER(DTL.Affect_Auto_Accruals);
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(DTL.Manager_Level_Code);
PARAMETER(DTL.VP_Level_Code);
PARAMETER(DTL.Attach_to_Order_Number);
PARAMETER(DTL.Reason_for_Price_Audit);
PARAMETER(DTL.Invoice_Number);
PARAMETER(DTL.Invoice_Suffix);
PARAMETER(DTL.Invoice_Date);
PARAMETER(DTL.Event_Code);
PARAMETER(DTL.Trans_Contol_AS400_Plant);
PARAMETER(DTL.Modified_Flag);
PARAMETER(DTL.A_R_order_Value_Total);
PARAMETER(DTL.Billing_Activity_Type);
PARAMETER(DTL.Block_Order_Flag);
PARAMETER(DTL.Order_Certification_Flag);
PARAMETER(DTL.Invoice_Order_Value_Tot);
PARAMETER(DTL.Process_Sts_for_3C);
PARAMETER(DTL.Order_Conf_Fax_Sts);
PARAMETER(DTL.Manifest_Fax_Sts);
PARAMETER(DTL.Invoice_Fax_Sts);
PARAMETER(DTL.Transfer_in_Storage_Ind);
PARAMETER(DTL.Email_Cust_On_Order_Ship);
PARAMETER(DTL.Order_Emailed);
PARAMETER(DTL.Export_Docs_Go_w_Driver);
PARAMETER(DTL.Shipping_Temp_Code_C_F);
PARAMETER(DTL.Broker_Order_Status);
PARAMETER(DTL.Air_Freight_Order);
PARAMETER(DTL.Order_Requires_Review);
PARAMETER(DTL.OH_Load_Plan_Ready);
PARAMETER(DTL.Export_USDA_Approved);
PARAMETER(DTL.HPB_Ship_to_Warehouse);
PARAMETER(DTL.OH_TF_Exempt_Code);
PARAMETER(DTL.OH_Appt_Confirmation_Dt);
PARAMETER(DTL.JPN_Invoice_Issuance_Date);
PARAMETER(DTL.Load_Actual_Shipped_Date);
PARAMETER(DTL.Load_BOL_Complete_Date);
PARAMETER(DTL.Load_Truck_Departure_Date);
PARAMETER(DTL.Maximum_Gross_Weight);
PARAMETER(DTL.Time_of_Original_Entry);
PARAMETER(DTL.OH_Appt_Confirmation_Tm);
PARAMETER(DTL.Load_BOL_Complete_Time);
PARAMETER(DTL.Load_Truck_Departure_Time);
PARAMETER(DTL.Act_Frt_Reference_Amount);
PARAMETER(DTL.Act_Non_Ref_Frt_Amount);
PARAMETER(DTL.OH_Fuel_Surcharge_Amount);
PARAMETER(DTL.OH_Total_Non_Ref_Frt_Amt);
PARAMETER(DTL.OH_Total_Ref_Frt_Amt);
PARAMETER(DTL.Claim_Number);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.OHE_HPB_RIN_Equiv_Value);
PARAMETER(DTL.OHE_HPB_RIN_Price);
PARAMETER(DTL.OHE_Spot_Buy);
PARAMETER(DTL.Type_Code);
PARAMETER(DTL.USR_15_Text_USR);
PARAMETER(DTL.OHE_Intended_for_ExportCC);
PARAMETER(*BLANK);
PARAMETER(DTL.OHE_Appt_Confirmation_#);
PARAMETER(DTL.OHE_Appt_Confirmation_Nm);
PARAMETER(LCL.Letter_of_Credit_Number);
PARAMETER(WRK.Auto_Order_Numbering);

//?USER: Change DBF record

// Call program Chg Order Header&DlvPO XF.
CALL PROGRAM(Chg Order Header&DlvPO XF) ('PMDHXFR')                             AC1425981;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Order_Type_Sales);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(WRK.Parent_Customer);
PARAMETER(DTL.Ship_To_Name);
PARAMETER(DTL.Ship_To_Address_Line_1);
PARAMETER(DTL.Ship_To_Address_Line_2);
PARAMETER(DTL.Ship_To_Address_Line_3);
PARAMETER(DTL.Ship_To_City);
PARAMETER(DTL.Ship_To_State_Code);
PARAMETER(DTL.Ship_To_Zip_Postal_Code);
PARAMETER(DTL.Bill_to_Customer);
PARAMETER(DTL.Bill_to_Name);
PARAMETER(DTL.Bill_to_Address_Line_1);
PARAMETER(DTL.Bill_to_Address_Line_2);
PARAMETER(DTL.Bill_to_Address_Line_3);
PARAMETER(DTL.Bill_to_City);
PARAMETER(DTL.Bill_to_State_Code);
PARAMETER(DTL.Bill_to_Zip_Postal_Code);
PARAMETER(DTL.Customer_Purchase_Order_#);
PARAMETER(DTL.Order_Date);
PARAMETER(DTL.Requested_Ship_Date);
PARAMETER(DTL.Actual_Shipped_Date);
PARAMETER(DTL.Cancel_Date);
PARAMETER(DTL.Terms_Code);
PARAMETER(DTL.Special_Instructions);
PARAMETER(DTL.Special_Instructions_2);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Comment_Print_Acknowledge);
PARAMETER(DTL.Comment_Print_Inv_Cr_Memo);
PARAMETER(DTL.Comment_Print_Pick_Slip);
PARAMETER(DTL.Comment_Print_Ship_Doc);
PARAMETER(DTL.Reason_Code);
PARAMETER(DTL.Order_in_Use);
PARAMETER(DTL.Header_Status);
PARAMETER(DTL.Header_Status_Last);
PARAMETER(DTL.Order_Type_Print_Status);
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(DTL.User_Original_Entry);
PARAMETER(DTL.Date_of_Original_Entry);
PARAMETER(DTL.Order_Value_Total);
PARAMETER(DTL.Order_Weight_Total);
PARAMETER(DTL.Credit_Hold);
PARAMETER(DTL.Production_Hold);
PARAMETER(DTL.New_Customer_Hold);
PARAMETER(DTL.Requested_Delivery_Date);
PARAMETER(DTL.Requested_Delivery_Time);
PARAMETER(DTL.Accounts_Receiv_Ent_1);
PARAMETER(DTL.Accounts_Receiv_Ent_2);
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Absorbed_Freight_Rate_CWT);
PARAMETER(DTL.Rated_Freight);
PARAMETER(DTL.LTL_Flag);
PARAMETER(DTL.Price_Audit);
PARAMETER(DTL.Price_Status);
PARAMETER(DTL.Shipping_Method);
PARAMETER(DTL.Export_Status);
PARAMETER(DTL.Palletize);
PARAMETER(DTL.Shrink_Wrap);
PARAMETER(DTL.Slip_Sheet);
PARAMETER(DTL.Age_Code);
PARAMETER(DTL.Reefer_Temperature);
PARAMETER(DTL.Load_Type);
PARAMETER(DTL.Attach_to_Invoice_Number);
PARAMETER(DTL.Load_Plan_Order);
PARAMETER(DTL.Print_Pick_Slip);
PARAMETER(DTL.Resell_Reference_Number);
PARAMETER(DTL.Special_Comment_1);
PARAMETER(DTL.Special_Comment_2);
PARAMETER(DTL.Affect_Auto_Accruals);
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(DTL.Manager_Level_Code);
PARAMETER(DTL.VP_Level_Code);
PARAMETER(DTL.Attach_to_Order_Number);
PARAMETER(DTL.Reason_for_Price_Audit);
PARAMETER(DTL.Invoice_Number);
PARAMETER(DTL.Invoice_Suffix);
PARAMETER(DTL.Invoice_Date);
PARAMETER(DTL.Event_Code);
PARAMETER(DTL.Trans_Contol_AS400_Plant);
PARAMETER(DTL.Modified_Flag);
PARAMETER(DTL.A_R_order_Value_Total);
PARAMETER(DTL.Billing_Activity_Type);
PARAMETER(DTL.Block_Order_Flag);
PARAMETER(DTL.Order_Certification_Flag);
PARAMETER(DTL.Invoice_Order_Value_Tot);
PARAMETER(DTL.Process_Sts_for_3C);
PARAMETER(DTL.Order_Conf_Fax_Sts);
PARAMETER(DTL.Manifest_Fax_Sts);
PARAMETER(DTL.Invoice_Fax_Sts);
PARAMETER(DTL.Transfer_in_Storage_Ind);
PARAMETER(DTL.Email_Cust_On_Order_Ship);
PARAMETER(DTL.Order_Emailed);
PARAMETER(DTL.Export_Docs_Go_w_Driver);
PARAMETER(DTL.Shipping_Temp_Code_C_F);
PARAMETER(DTL.Broker_Order_Status);
PARAMETER(DTL.Air_Freight_Order);
PARAMETER(DTL.Order_Requires_Review);
PARAMETER(DTL.OH_Load_Plan_Ready);
PARAMETER(DTL.Export_USDA_Approved);
PARAMETER(DTL.HPB_Ship_to_Warehouse);
PARAMETER(DTL.OH_TF_Exempt_Code);
PARAMETER(DTL.OH_Appt_Confirmation_Dt);
PARAMETER(DTL.JPN_Invoice_Issuance_Date);
PARAMETER(DTL.Load_Actual_Shipped_Date);
PARAMETER(DTL.Load_BOL_Complete_Date);
PARAMETER(DTL.Load_Truck_Departure_Date);
PARAMETER(DTL.Maximum_Gross_Weight);
PARAMETER(DTL.Time_of_Original_Entry);
PARAMETER(DTL.OH_Appt_Confirmation_Tm);
PARAMETER(DTL.Load_BOL_Complete_Time);
PARAMETER(DTL.Load_Truck_Departure_Time);
PARAMETER(DTL.Act_Frt_Reference_Amount);
PARAMETER(DTL.Act_Non_Ref_Frt_Amount);
PARAMETER(DTL.OH_Fuel_Surcharge_Amount);
PARAMETER(DTL.OH_Total_Non_Ref_Frt_Amt);
PARAMETER(DTL.OH_Total_Ref_Frt_Amt);
PARAMETER(DTL.Claim_Number);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.OHE_HPB_RIN_Equiv_Value);
PARAMETER(DTL.OHE_HPB_RIN_Price);
PARAMETER(DTL.OHE_Spot_Buy);
PARAMETER(DTL.Type_Code);
PARAMETER(DTL.USR_15_Text_USR);
PARAMETER(DTL.OHE_Intended_for_ExportCC);
PARAMETER(DTL.OHE_Appt_Confirmation_#);
PARAMETER(DTL.OHE_Appt_Confirmation_Nm);
PARAMETER(LCL.Letter_of_Credit_Number);

//?USER: Process command keys

//?Increment # Orders YTD on Add - Create Events record
CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(1);
PARAMETER('01');
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(JOB.*Job_date);
PARAMETER('Y');
PARAMETER('N');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(DTL.Ship_To_Customer);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

//?Dealloc/Allocate details and Load/Order Change Log if whse changed
CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

// AND DTL.Warehouse Code NE DTL.USR Warehouse Code
AND DTL.Warehouse_Code <> DTL.USR_Warehouse_Code;

//?Perform Dellocate/Allocate using the original Requested Ship Date
//?Routine for Requested Ship Date will handle the date change.
// Call program UPD Dealloc/Allocate   XF.
CALL PROGRAM(UPD Dealloc/Allocate   XF) ('PDPJXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.USR_Requested_ship_date_s);
PARAMETER(DTL.USR_Requested_ship_date_s);
PARAMETER(WRK.TXT_field_not_needed);

// WRK.Load Change Type = CND.Change Warehouse
WRK.Load_Change_Type = 'CHGWHS';

//?** Reverse FP1061 - Department control code MUST be Traffic
//?** Do not change this per Gary Martin.     E-TRANS47 LJB 01/03/2008
// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(DTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(DTL.USR_Warehouse_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);

//?NOTE:  Will only write log if order on load and load not in E status
// DTL.USR Warehouse Code = DTL.Warehouse Code
DTL.USR_Warehouse_Code = DTL.Warehouse_Code;

ENDIF;

//?Reallocate if Requested Ship date/ or req delivery date changes (11/28/18)
CASE;

// IF DTL.Requested Ship Date NE DTL.USR Requested ship date s
IF DTL.Requested_Ship_Date <> DTL.USR_Requested_ship_date_s;

// OR DTL.Requested Delivery Date NE WRK.Requested Delivery Dt
OR DTL.Requested_Delivery_Date <> WRK.Requested_Delivery_Dt;

// Call program UPD Dealloc/Allocate   XF.
CALL PROGRAM(UPD Dealloc/Allocate   XF) ('PDPJXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.USR_Requested_ship_date_s);
PARAMETER(DTL.Requested_Ship_Date);
PARAMETER(WRK.TXT_field_not_needed);

ENDIF;

//?*********
//?E00180 RMC 8/05/08 moved here so it will be done before F16 Load Planning
// Call program CLC Tot Ord Val Ship   XF.
CALL PROGRAM(CLC Tot Ord Val Ship   XF) ('PDP1XFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Order_Value_Total);
PARAMETER(DTL.Order_Weight_Total);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);

EXECUTE FUNCTION(CHG Order Value,Wgt    CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1403601;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Order_Value_Total);
PARAMETER(DTL.Order_Weight_Total);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


// Call program RTV OD Error from Upl XF.
CALL PROGRAM(RTV OD Error from Upl XF) ('PBACXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(NLL.Item_Age_Days);
PARAMETER(LCL.Order_Line_Error_Type);
PARAMETER(WRK.Status_Flag_20_Y_N);

//?Update error flag if no errors pending in Order Detail P001251
CASE;

// IF WRK.Status Flag 20 Y/N is No
IF WRK.Status_Flag_20_Y_N = 'N';

//?C2180 7/12/12 RMC do if it was YES, dont change all orders to sts E
CASE;

// IF DTL.Order Requires Review is Yes
IF DTL.Order_Requires_Review = 'Y';

// DTL.Order Requires Review = CND.No
DTL.Order_Requires_Review = *BLANK;

EXECUTE FUNCTION(CHG Ord Req's Rvw-JCO  CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC2027659;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Order_Requires_Review);
{
 //?USER: Processing before Data update

 //?** Chg line status to Entered when errors so Order will be reviewed
 // DB1.Header Status = CND.Entered
 DB1.Header_Status = 'E';

}


ENDIF;

ENDIF;

//?Update load with order's weight
CASE;

// IF DTL.Load ID NE WRK.ZERO
IF DTL.Load_ID <> WRK.ZERO;

// Call program RTV UPD Ld Abs.Frt/Wgt XF.
CALL PROGRAM(RTV UPD Ld Abs.Frt/Wgt XF) ('PDE0XFR');
PARAMETER(DTL.Load_ID);
PARAMETER(WRK.Total_Load_Order_Weight);
PARAMETER(WRK.Total_Freight);

ENDIF;

//?*********
//?Update details with changed export code;del exp docs 7/06/09
CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

// AND DTL.Country Code NE DTL.USR Export Code
AND DTL.Country_Code <> DTL.USR_Export_Code;

EXECUTE FUNCTION(CHG Export Code        RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1426272;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(DTL.Country_Code);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(CHG Export Code        CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1426273;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Country_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


//?RMC S00854 07/06/09
//?New - del exp docs if they exist because theyre for the orig country
CASE;

// IF DTL.USR Export Code is Entered
IF DTL.USR_Export_Code <> *BLANK;

// Call program Rtv & Dlt for CtryChg XF.
CALL PROGRAM(Rtv & Dlt for CtryChg XF) ('PNKJXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);

ENDIF;

ENDIF;

//?Update OHE with changed Intended for Country code    9/09/09 E00157
CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

// AND DTL.OHE Intended for ExportCC NE DTL.USR Country Code
AND DTL.OHE_Intended_for_ExportCC <> DTL.USR_Country_Code;

// Call program VAL OHE exists for ord XF.
CALL PROGRAM(VAL OHE exists for ord XF) ('PNLNXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(WRK.Return_Code_Usr);

CASE;

// IF WRK.Return Code Usr is *Record does not exist
IF WRK.Return_Code_Usr = 'Y2U0005';

// Call program Zzz OHE w/no chg       XF.
CALL PROGRAM(Zzz OHE w/no chg       XF) ('PNLLXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER('O');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.OHE_Carrier_SCAC_Code);
PARAMETER(LCL.OHE_Spot_Buy);
PARAMETER(LCL.OHE_PO_ACK_Flag);
PARAMETER(DTL.Type_Code);
PARAMETER(LCL.OHE_Backhaul_Status);
PARAMETER(LCL.OHE_Backhaul_ETA_AM_PM);
PARAMETER(LCL.OHE_Load_Haul_Type);
PARAMETER(LCL.OHE_Backhaul_Carrier_Code);
PARAMETER(LCL.OHE_Bookings_Confirmed);
PARAMETER(LCL.OHE_EDI_Error_Reasons);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(DTL.OHE_Intended_for_ExportCC);
PARAMETER(LCL.OHE_EDI_943_Action);
PARAMETER(LCL.OHE_EDI_944_Action);
PARAMETER(LCL.OHE_EDI_940_Action);
PARAMETER(LCL.OHE_EDI_945_Action);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER('A');
PARAMETER(DTL.Job_Time);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Job_Date);

// DTL.USR Country Code = DTL.OHE Intended for ExportCC
DTL.USR_Country_Code = DTL.OHE_Intended_for_ExportCC;

// IF *OTHERWISE
IF *OTHERWISE;

// Call program CHG Intended for ExportXF.
CALL PROGRAM(CHG Intended for ExportXF) ('PNLKXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.OHE_Spot_Buy);
PARAMETER(DTL.Type_Code);
PARAMETER(DTL.OHE_Intended_for_ExportCC);

// DTL.USR Country Code = DTL.OHE Intended for ExportCC
DTL.USR_Country_Code = DTL.OHE_Intended_for_ExportCC;

ENDIF;

ENDIF;

//?E4119 RMC 5/23/2016 Remove Live with tpm checks
//?Update load header if shipping temperature changed
CASE;

// IF DTL.Reefer Temperature NE PAR.Reefer Temperature
IF ( DTL.Reefer_Temperature <> PAR.Reefer_Temperature;

// OR DTL.Shipping Temp Code C/F NE PAR.Shipping Temp Code C/F
OR DTL.Shipping_Temp_Code_C_F <> PAR.Shipping_Temp_Code_C_F );

// AND DTL.Load ID NE WRK.ZERO
AND DTL.Load_ID <> WRK.ZERO;

EXECUTE FUNCTION(Rtv Min Temp for Load RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1268079;
PARAMETER(DTL.Load_ID);
PARAMETER(WRK.Shipping_Temp_Code_C_F);
PARAMETER(WRK.USR_Temperature_3_1);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 // PAR.USR Temperature 3.1 = CND.Low
 PAR.USR_Temperature_3_1 = -99;

 // PAR.Shipping Temp Code C/F = WRK.Blank for 4           USR
 PAR.Shipping_Temp_Code_C_F = WRK.Blank_for_4_USR;

 //?USER: Process Data record

 //?**** new 7/19/02
 //?If db1 doesnt match par, convert db1 temp to par temp C or F
 CASE;

 // IF PAR.Shipping Temp Code C/F NE WRK.Blank for 4           USR
 IF PAR.Shipping_Temp_Code_C_F <> WRK.Blank_for_4_USR;

 // AND PAR.Shipping Temp Code C/F NE DB1.Shipping Temp Code C/F
 AND PAR.Shipping_Temp_Code_C_F <> DB1.Shipping_Temp_Code_C_F;

 CASE;

 // IF PAR.Shipping Temp Code C/F is Celsius
 IF PAR.Shipping_Temp_Code_C_F = 'C';

 //?Convert DB1 to Celsius
 // Compute Cels from Fahr
 LCL.USR_Temperature_3_1 = ( ( DB1.Reefer_Temperature - 32 ) * 5 ) / 9 'H';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Convert DB1 to Fahr
 // Compute Fahr from Cels
 LCL.USR_Temperature_3_1 = ( ( DB1.Reefer_Temperature * 9 ) / 5 'H' ) + 32;

 ENDIF;

 //?If db1 doesnt match par, convert db1 temp to par temp C or F
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.USR Temperature 3.1 = DB1.Reefer Temperature
 LCL.USR_Temperature_3_1 = DB1.Reefer_Temperature;

 ENDIF;

 CASE;

 // IF LCL.USR Temperature 3.1 GT PAR.USR Temperature 3.1
 IF LCL.USR_Temperature_3_1 > PAR.USR_Temperature_3_1;

 // PAR.USR Temperature 3.1 = DB1.Reefer Temperature
 PAR.USR_Temperature_3_1 = DB1.Reefer_Temperature;

 // PAR.Shipping Temp Code C/F = DB1.Shipping Temp Code C/F
 PAR.Shipping_Temp_Code_C_F = DB1.Shipping_Temp_Code_C_F;

 ENDIF;

 //?USER: Exit processing

 CASE;

 // IF PAR.USR Temperature 3.1 is Low
 IF PAR.USR_Temperature_3_1 = -99;

 // PAR.USR Temperature 3.1 = CON.*ZERO
 PAR.USR_Temperature_3_1 = *ZERO;

 ENDIF;

}


EXECUTE FUNCTION(CHG Shipping Temp      CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1458511;
PARAMETER(DTL.Load_ID);
PARAMETER(WRK.USR_Temperature_3_1);
PARAMETER(WRK.Shipping_Temp_Code_C_F);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// PAR.Reefer Temperature = DTL.Reefer Temperature
PAR.Reefer_Temperature = DTL.Reefer_Temperature;

// PAR.Shipping Temp Code C/F = DTL.Shipping Temp Code C/F
PAR.Shipping_Temp_Code_C_F = DTL.Shipping_Temp_Code_C_F;

ENDIF;

//?Update Load Header Shipping Method if Load ID is not blank
CASE;

// IF DTL.Load ID is Blank
IF DTL.Load_ID = *ZERO;

//?Update Load Header Shipping Method if Load ID is not blank
// IF *OTHERWISE
IF *OTHERWISE;

//?E4119 RMC 5/23/2016 Remove Live with tpm checks
//?** If shipping method was Collect and now is Prepaid
CASE;

// IF PAR.Shipping Method is Buyers Truck
IF PAR.Shipping_Method = 'CR'/'CT';

CASE;

// IF DTL.Shipping Method is Buyers Truck
IF DTL.Shipping_Method = 'CR'/'CT';

// IF *OTHERWISE
IF *OTHERWISE;

//?If shipping method changed to prepaid and carrier is blank
CASE;

// IF DTL.Carrier Code is not entered
IF DTL.Carrier_Code = *BLANK;

//?** E-TRANS47 - Report carrier changes to Traffic (do not change this)
// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// LCL.Load Change Type = CND.Shipping Method
LCL.Load_Change_Type = 'SHPMTH';

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(DTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(LCL.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(PAR.Shipping_Method);
PARAMETER(DTL.Shipping_Method);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);

//?** This CHGOBJ writes the carrier change to the load order chg log
//?** Change the Shipping Method if Changed from CT to PT     FP1251
EXECUTE FUNCTION(CHG Carrier/Broker     CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1563300;
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Order_Number);
PARAMETER(WRK.Department_Control_Code);
{
 //?USER: Processing before Data read

 //?***** Change Log and Comments
 DO;

 //?FP1061
 //?TCJ 10/03/07 - Load Order Change Log created if Carrier Code or
 //?               Scheduled Delivery Date changes
 ENDDO;

 //?USER: Processing after Data read

 //?Save copy of fields written to Load Order Change Log
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Carrier Code = DB1.Carrier Code
 LCL.Carrier_Code = DB1.Carrier_Code;

 ENDIF;

 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing after Data update

 //?Check for carrier change for Load Order Header Change Log
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?09/18/2014 change to put *USER into user instead of *JOB
 //?10/17/2007 change to put in the job user and job program name
 //?Carrier Code
 CASE;

 // IF PAR.Carrier Code NE LCL.Carrier Code
 IF PAR.Carrier_Code <> LCL.Carrier_Code;

 // Call program CRT Load/Order Chg Log XF.
 CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
 PARAMETER(DB1.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER('CARCHG');
 PARAMETER(PAR.Department_Control_Code);
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Order_Number);

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(CHG Ship Method        CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1438450;
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Shipping_Method);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?If shipping method changed to prepaid and carrier is blank
// IF *OTHERWISE
IF *OTHERWISE;

//?** Log entry if carrier code has changed
CASE;

// IF DTL.Carrier Code NE LCL.Carrier Code Chg Usr 1
IF DTL.Carrier_Code <> LCL.Carrier_Code_Chg_Usr_1;

//?** Carrier code will be blanks after Live with TPM
//?** E-TRANS47 - Report carrier changes to Traffic (do not change this)
// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// LCL.Load Change Type = CND.Shipping Method
LCL.Load_Change_Type = 'SHPMTH';

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(DTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(LCL.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(PAR.Shipping_Method);
PARAMETER(DTL.Shipping_Method);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);

//?** This CHGOBJ writes the carrier change to the load order chg log
//?** Change the Shipping Method if Changed from CT to PT   FP1251
EXECUTE FUNCTION(CHG Carrier/Broker     CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1563300;
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Order_Number);
PARAMETER(WRK.Department_Control_Code);
{
 //?USER: Processing before Data read

 //?***** Change Log and Comments
 DO;

 //?FP1061
 //?TCJ 10/03/07 - Load Order Change Log created if Carrier Code or
 //?               Scheduled Delivery Date changes
 ENDDO;

 //?USER: Processing after Data read

 //?Save copy of fields written to Load Order Change Log
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Carrier Code = DB1.Carrier Code
 LCL.Carrier_Code = DB1.Carrier_Code;

 ENDIF;

 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing after Data update

 //?Check for carrier change for Load Order Header Change Log
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?09/18/2014 change to put *USER into user instead of *JOB
 //?10/17/2007 change to put in the job user and job program name
 //?Carrier Code
 CASE;

 // IF PAR.Carrier Code NE LCL.Carrier Code
 IF PAR.Carrier_Code <> LCL.Carrier_Code;

 // Call program CRT Load/Order Chg Log XF.
 CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
 PARAMETER(DB1.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER('CARCHG');
 PARAMETER(PAR.Department_Control_Code);
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Order_Number);

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(CHG Ship Method        CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1438450;
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Shipping_Method);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

ENDIF;

ENDIF;

//?** If shipping method was Collect and now is Prepaid
// IF *OTHERWISE
IF *OTHERWISE;

//?If shipping method was prepaid and changed to collect
CASE;

// IF DTL.Shipping Method is Buyers Truck
IF DTL.Shipping_Method = 'CR'/'CT';

//?** FT686 - Report carrier changes to Traffic (do not change this)
// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// LCL.Load Change Type = CND.Shipping Method
LCL.Load_Change_Type = 'SHPMTH';

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(DTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(LCL.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(PAR.Shipping_Method);
PARAMETER(DTL.Shipping_Method);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);

EXECUTE FUNCTION(CHG Carrier/Broker     CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1563300;
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Order_Number);
PARAMETER(WRK.Department_Control_Code);
{
 //?USER: Processing before Data read

 //?***** Change Log and Comments
 DO;

 //?FP1061
 //?TCJ 10/03/07 - Load Order Change Log created if Carrier Code or
 //?               Scheduled Delivery Date changes
 ENDDO;

 //?USER: Processing after Data read

 //?Save copy of fields written to Load Order Change Log
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Carrier Code = DB1.Carrier Code
 LCL.Carrier_Code = DB1.Carrier_Code;

 ENDIF;

 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing after Data update

 //?Check for carrier change for Load Order Header Change Log
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?09/18/2014 change to put *USER into user instead of *JOB
 //?10/17/2007 change to put in the job user and job program name
 //?Carrier Code
 CASE;

 // IF PAR.Carrier Code NE LCL.Carrier Code
 IF PAR.Carrier_Code <> LCL.Carrier_Code;

 // Call program CRT Load/Order Chg Log XF.
 CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
 PARAMETER(DB1.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER('CARCHG');
 PARAMETER(PAR.Department_Control_Code);
 PARAMETER(LCL.Carrier_Code);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Order_Number);

 ENDIF;

 ENDIF;

}


//?** Change the Shipping Method if Changed from PT to CT
EXECUTE FUNCTION(CHG Ship Method        CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1438450;
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Shipping_Method);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?If shipping method was prepaid and changed to collect
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Shipping Method NE DTL.Shipping Method
IF PAR.Shipping_Method <> DTL.Shipping_Method;

// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// LCL.Load Change Type = CND.Shipping Method
LCL.Load_Change_Type = 'SHPMTH';

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(DTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(LCL.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(PAR.Shipping_Method);
PARAMETER(DTL.Shipping_Method);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);

//?** Change the Shipping Method if Changed from PT to CT
EXECUTE FUNCTION(CHG Ship Method        CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1438450;
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Shipping_Method);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?If no Mileage Betw Cities rec, send an email to Traffic.  E1625
CASE;

// IF WRK.Status - Mileage is No
IF WRK.Status_Mileage = 'N';

//?Only email if Seaboard
CASE;

// IF PAR.Company Organization is Seaboard
IF PAR.Company_Organization = 'S';

// Call program RTV Warehouse Address  XF.
CALL PROGRAM(RTV Warehouse Address  XF) ('PNX5XFR');
PARAMETER(DTL.Warehouse_Code);
PARAMETER(NLL.Warehouse_Description);
PARAMETER(NLL.Address_Line_1);
PARAMETER(NLL.Address_Line_2);
PARAMETER(NLL.Address_Line_3);
PARAMETER(LCL.From_City);
PARAMETER(NLL.Zip_Postal_Code);
PARAMETER(LCL.From_State);

CASE;

// IF DTL.Ship To City EQ LCL.From City
IF DTL.Ship_To_City = LCL.From_City;

// AND DTL.Ship To State Code EQ LCL.From State
AND DTL.Ship_To_State_Code = LCL.From_State;

// IF *OTHERWISE
IF *OTHERWISE;

//?Dont snd msg if Live with TMSLDP
CASE;

// IF PAR.PFS Carlisle Active is No
IF PAR.PFS_Carlisle_Active = 'N';

// Call program Zzz Email if no MBC    CL.
CALL PROGRAM(Zzz Email if no MBC    CL) ('PNX2UPC');
PARAMETER(LCL.From_City);
PARAMETER(LCL.From_State);
PARAMETER(DTL.Ship_To_City);
PARAMETER(DTL.Ship_To_State_Code);

// WRK.Status - Mileage = CND.Yes
WRK.Status_Mileage = 'Y';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Update Load/Order Change Log if requested delivery date/time changed
CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

// AND DTL.Requested Delivery Date NE WRK.Requested Delivery Dt
AND ( DTL.Requested_Delivery_Date <> WRK.Requested_Delivery_Dt;

// OR DTL.Requested Delivery Time NE WRK.Requested Delivery Time
OR DTL.Requested_Delivery_Time <> WRK.Requested_Delivery_Time );

// WRK.Load Change Type = CND.Requested Delivery Date
WRK.Load_Change_Type = 'RQSDLV';

//?** Reverse FP1061 - All date changes are to be reported to
//?** Traffic per Gary Martin. Do Not Change this. E-TRANS47 LJB 01/03/08
// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// WRK.Text USR 7 = CVTVAR(WRK.Requested Delivery Dt)
WRK.Text_USR_7 = CVTVAR(WRK.Requested_Delivery_Dt);

// WRK.Text USR 4 = CVTVAR(WRK.Requested Delivery Time)
WRK.Text_USR_4 = CVTVAR(WRK.Requested_Delivery_Time);

// WRK.Change Log Prior Value = CONCAT(WRK.Text USR 7,WRK.Text USR 4,CON.1)
WRK.Change_Log_Prior_Value = WRK.Text_USR_7 + WRK.Text_USR_4 (1);

// WRK.Text USR 7 = CVTVAR(DTL.Requested Delivery Date)
WRK.Text_USR_7 = CVTVAR(DTL.Requested_Delivery_Date);

// WRK.Text USR 4 = CVTVAR(DTL.Requested Delivery Time)
WRK.Text_USR_4 = CVTVAR(DTL.Requested_Delivery_Time);

// WRK.Change Log New Value = CONCAT(WRK.Text USR 7,WRK.Text USR 4,CON.1)
WRK.Change_Log_New_Value = WRK.Text_USR_7 + WRK.Text_USR_4 (1);

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(DTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(WRK.Change_Log_Prior_Value);
PARAMETER(WRK.Change_Log_New_Value);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);

//?NOTE:  Will only write log if order on load and load not in E status
//?E4119 RMC 5/23/2016 Remove Live with tpm checks
//?Upd requested delivery date / Recalc deadline departure
CASE;

// IF DTL.Load ID is NE Blank
IF DTL.Load_ID <> *ZERO;

CASE;

// IF WRK.Stop/Drop is Stop One
IF WRK.Stop_Drop = 1;

// Call program Zzz Chg Carr Apt DtTm XF.
CALL PROGRAM(Zzz Chg Carr Apt DtTm XF) ('PNMGXFR');
PARAMETER(DTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(*ZERO);

ENDIF;

// Call program UPD Rqs Deliv Date/1st XF.
CALL PROGRAM(UPD Rqs Deliv Date/1st XF) ('PDFFXFR');
PARAMETER(DTL.Load_ID);

EXECUTE FUNCTION(RTV ld Accpt/Load Status) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1591499;
PARAMETER(DTL.Load_ID);
PARAMETER(LCL.Load_Status);
PARAMETER(LCL.Load_Acceptance_Flag);
PARAMETER(PAR.MG_Created_Load);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Unaccept if accepted and date change    E00139
CASE;

// IF LCL.Load Acceptance Flag is Load Accepted
IF LCL.Load_Acceptance_Flag = 'A';

// AND PAR.MG Created Load is Not MG Created Load
AND PAR.MG_Created_Load = *BLANK;

EXECUTE FUNCTION(CHG Load Acceptance Sw CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1475345;
PARAMETER(DTL.Load_ID);
PARAMETER('U');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

//?Recalc deadline departure since carrier appt may have changed 10/20/09
CASE;

// IF PAR.MG Created Load is Not MG Created Load
IF PAR.MG_Created_Load = *BLANK;

// WRK.USR Load Id ALpha = CVTVAR(DTL.Load ID)
WRK.USR_Load_Id_ALpha = CVTVAR(DTL.Load_ID);

// Call program CLC Depart Date f/web  XF.
CALL PROGRAM(CLC Depart Date f/web  XF) ('PNMAXFR');
PARAMETER(WRK.USR_Load_Id_ALpha);

ENDIF;

ENDIF;

// WRK.Requested Delivery Dt = DTL.Requested Delivery Date
WRK.Requested_Delivery_Dt = DTL.Requested_Delivery_Date;

// WRK.Requested Delivery Time = DTL.Requested Delivery Time
WRK.Requested_Delivery_Time = DTL.Requested_Delivery_Time;

ENDIF;

//?Upd Load/Order Change Log if Scheduled Ship Date changed  S00949
CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

// AND DTL.Scheduled Ship Date NE DTL.Scheduled Ship Date USR
AND DTL.Scheduled_Ship_Date <> DTL.Scheduled_Ship_Date_USR;

//?***** PA PROCESS - USE REQUESTED SHIP DATE FOR Ship Date USR *****
//?Deallocation/Allocation handled with Requested Ship Date change.
// WRK.Load Change Type = CND.Scheduled Ship Date
WRK.Load_Change_Type = 'SCHSHP';

// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// WRK.Change Log Prior Value = CVTVAR(DTL.Scheduled Ship Date USR)
WRK.Change_Log_Prior_Value = CVTVAR(DTL.Scheduled_Ship_Date_USR);

// WRK.Change Log New Value = CVTVAR(DTL.Scheduled Ship Date)
WRK.Change_Log_New_Value = CVTVAR(DTL.Scheduled_Ship_Date);

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(DTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(WRK.Change_Log_Prior_Value);
PARAMETER(WRK.Change_Log_New_Value);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);

//?E4119 RMC 5/23/2016 Remove Live with tpm checks
//?Upd to Unaccepted if load has been accepted & Upd Sched Ship
CASE;

// IF DTL.Load ID is NE Blank
IF DTL.Load_ID <> *ZERO;

EXECUTE FUNCTION(RTV ld Accpt/Load Status) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1591499;
PARAMETER(DTL.Load_ID);
PARAMETER(LCL.Load_Status);
PARAMETER(LCL.Load_Acceptance_Flag);
PARAMETER(PAR.MG_Created_Load);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Unaccept if accepted and date change
CASE;

// IF LCL.Load Acceptance Flag is Load Accepted
IF LCL.Load_Acceptance_Flag = 'A';

// AND PAR.MG Created Load is Not MG Created Load
AND PAR.MG_Created_Load = *BLANK;

// LCL.Load Acceptance Flag = CND.Load not Accepted
LCL.Load_Acceptance_Flag = 'U';

ENDIF;

EXECUTE FUNCTION(CHG Load Accep/SchShip CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1957141;
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(LCL.Load_Acceptance_Flag);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

// WRK.Requested Delivery Dt = DTL.Requested Delivery Date
WRK.Requested_Delivery_Dt = DTL.Requested_Delivery_Date;

ENDIF;

//?** PO# changed & order is on a load                   E004119
CASE;

// IF DTL.Customer Purchase Order # NE PAR.Customer Purchase Order #
IF DTL.Customer_Purchase_Order_# <> PAR.Customer_Purchase_Order_#;

// AND PAR.Load ID is NE Blank
AND PAR.Load_ID <> *ZERO;

//?** Write the log record every time the PO# changes
// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// LCL.Load Change Type = CND.PO Number Changed
LCL.Load_Change_Type = 'PO#CHG';

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(DTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(LCL.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(PAR.Customer_Purchase_Order_#);
PARAMETER(DTL.Customer_Purchase_Order_#);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);

//?E4119 RMC 5/23/2016 Remove Live with tpm checks, add MG created load
EXECUTE FUNCTION(RTV Load Acceptance Sw RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1476499;
PARAMETER(DTL.Load_ID);
PARAMETER(LCL.Load_Acceptance_Flag);
PARAMETER(PAR.MG_Created_Load);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Change the load accept flag if it has already been accepted.
CASE;

// IF LCL.Load Acceptance Flag is Load Accepted
IF LCL.Load_Acceptance_Flag = 'A';

// AND PAR.MG Created Load is Not MG Created Load
AND PAR.MG_Created_Load = *BLANK;

//?** Unaccept load if PO# changes on the order
EXECUTE FUNCTION(CHG Load Acceptance Sw CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1475345;
PARAMETER(DTL.Load_ID);
PARAMETER('U');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

ENDIF;

// PAR.Order Number = DTL.Order Number
PAR.Order_Number = DTL.Order_Number;

// PAR.Customer Purchase Order # = DTL.Customer Purchase Order #
PAR.Customer_Purchase_Order_# = DTL.Customer_Purchase_Order_#;

// PAR.Warehouse Code = DTL.Warehouse Code
PAR.Warehouse_Code = DTL.Warehouse_Code;

// PAR.OHE Intended for ExportCC = DTL.OHE Intended for ExportCC
PAR.OHE_Intended_for_ExportCC = DTL.OHE_Intended_for_ExportCC;

// PAR.Country Code = DTL.Country Code
PAR.Country_Code = DTL.Country_Code;

// PAR.Country Code 1 usr = DTL.Country Code 1 usr
PAR.Country_Code_1_usr = DTL.Country_Code_1_usr;

// PAR.Ship to Customer      USR = DTL.Ship to Customer      USR
PAR.Ship_to_Customer_USR = DTL.Ship_to_Customer_USR;

// WRK.Status - Y or N = CND.yes
WRK.Status_Y_or_N = 'Y';

//?F7=Dsp Appts        * remove:Disable if Live w/TPM   E004019
CASE;

// IF DTL.*CMD key is CF07
IF DTL.*CMD_key = '07';

//?E4119 RMC 5/23/2016 Remove Live with tpm checks
// Call program Dsp Customer Appt     DF.
CALL PROGRAM(Dsp Customer Appt     DF) ('PNXMDFR');
PARAMETER(DTL.Ship_To_Customer);

ENDIF;

//?F13=Shipping Instructions
CASE;

// IF DTL.*CMD key is *Shipping Instructions
IF DTL.*CMD_key = '13';

// Call program EDT Shipping Inst.     EF.
CALL PROGRAM(EDT Shipping Inst.     EF) ('PDAEEFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(*ZERO);

ENDIF;

//?F16=Load Planning       remove:Disable if Live w/TPM   E0014019
CASE;

// IF DTL.*CMD key is *Work With Loads
IF DTL.*CMD_key = '16';

EXECUTE FUNCTION(RTV Chk Detail Exists  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1425981;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


//?Msg 'Order has no line items' E00180 RMC 7/08/08
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

//?error msg wont work here. its in the detail screen relations section
//?Msg 'Order has no line items' E00180 RMC 7/08/08
// IF *OTHERWISE
IF *OTHERWISE;

//?** Add company# and order# to parms being passed    LJB 08/31/06
// Call program WW Loads Order Entry   DF.
CALL PROGRAM(WW Loads Order Entry   DF) ('PDFKDFR');
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);

ENDIF;

ENDIF;

//?F19=Pick Comments
CASE;

// IF DTL.*CMD key is CF19
IF DTL.*CMD_key = '19';

// Call program Edt Customer Comment  EF.
CALL PROGRAM(Edt Customer Comment  EF) ('POF9EFR');
PARAMETER(DTL.Ship_To_Customer);
PARAMETER('PI');

ENDIF;

//?F17=Export Doc
CASE;

// IF DTL.*CMD key is CF17
IF DTL.*CMD_key = '17';

CASE;

// IF DTL.Export Status is yes
IF DTL.Export_Status = 'Y';

// PAR.Next Program Name = CON.POIRXFR
PAR.Next_Program_Name = 'POIRXFR';

PGM.*Return_code = *BLANK;

RETURN;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Export document function not allowed for Domestic order.'
ERROR(USR3026);

ENDIF;

ENDIF;

//?F14=Header Comments
CASE;

// IF DTL.*CMD key is *Header Comments
IF DTL.*CMD_key = '14';

// Call program EDT OP Order Comment   EF.
CALL PROGRAM(EDT OP Order Comment   EF) ('PDAGEFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);

ENDIF;

//?F15=More Header
CASE;

// IF DTL.*CMD key is *Order Header
IF DTL.*CMD_key = '15';

// PAR.Next Program Name = CON.PDSVE1R
PAR.Next_Program_Name = 'PDSVE1R';

PGM.*Return_code = *BLANK;

RETURN;

ENDIF;

//?F18=Details
CASE;

// IF DTL.*CMD key is *Order Details
IF DTL.*CMD_key = '18';

// PAR.Next Program Name = CON.PDN9EFR
PAR.Next_Program_Name = 'PDN9EFR';

PGM.*Return_code = *BLANK;

RETURN;

ENDIF;

//?F20=Post Order
CASE;

// IF DTL.*CMD key is *Post/Update Open Order
IF DTL.*CMD_key = '20';

//?Post Order.
DO;

EXECUTE FUNCTION(RTV Chk Detail Exists  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1425981;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


//?Msg 'Order has no line items'
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send information message - 'Warning:  Order has no line items'
MESSAGE(USR2058 *INFO);

ENDIF;

//?** Review for Export Order Automation Upload Errors    P001251
CASE;

// IF DTL.Order Requires Review is Yes
IF DTL.Order_Requires_Review = 'Y';

// Call program EXC Order Req Rvw editsXF.
CALL PROGRAM(EXC Order Req Rvw editsXF) ('PBBIXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Requested_Ship_Date);
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(DTL.Requested_Delivery_Date);
PARAMETER(DTL.Requested_Delivery_Time);
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Order_Requires_Review);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(WRK.Order_Line_Error_Type);
PARAMETER(DTL.Deadline_Depart_Date);
PARAMETER(DTL.Deadline_Depart_Time_LH);
PARAMETER(PAR.Company_Organization);

//?Msg: 'Exp Order Automation Upl errors still pending'    P001251
CASE;

// IF DTL.Order Requires Review is Yes
IF DTL.Order_Requires_Review = 'Y';

// Send information message - 'Warning: Export Order Automation Upload Errors still pending.'
MESSAGE(USR4472 *INFO);

ENDIF;

ENDIF;

// WRK.Print (Yes/No) USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

// WRK.Status Flag 2  Y/N = CND.No
WRK.Status_Flag_2_Y_N = 'N';

// WRK.Status Flag 3  Y/N = CND.No
WRK.Status_Flag_3_Y_N = 'N';

// WRK.Status Flag 4  Y/N = CND.no
WRK.Status_Flag_4_Y_N = 'N';

// WRK.Status Flag 5  Y/N = CND.Yes
WRK.Status_Flag_5_Y_N = 'Y';

//?** 12/01/08 LJB E00255 Default Fax to Cust parm
// WRK.Status Flag 7  Y/N = CND.No
WRK.Status_Flag_7_Y_N = 'N';

// WRK.Status Flag 8  Y/N = CND.No
WRK.Status_Flag_8_Y_N = 'N';

// WRK.Status Flag 12 Y/N = CND.No
WRK.Status_Flag_12_Y_N = 'N';

//?E2176 SLM Feature to allow email of Acknowledgement
//?** 05/08/13 RMC C2586 Email Reg, Fax OR Email Buyer, upd Ld Plan Rdy
// LCL.OH Load Plan Ready = CND.Blank
LCL.OH_Load_Plan_Ready = *BLANK;

//?08/21/2017 DN T11489-Added Salesperson Code/Name to Parm.
//?08/27/24 SP S312312-Start (Get field "Email to Broker Usr")
// Call program SEL Confirm Prompt     PV.
CALL PROGRAM(SEL Confirm Prompt     PV) ('PDS0PVR');
PARAMETER(WRK.Status_Y_or_N);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Block_Order_Flag);
PARAMETER(LCL.OH_Load_Plan_Ready);
PARAMETER(WRK.Print_Yes_No_USR);
PARAMETER(WRK.Status_Flag_2_Y_N);
PARAMETER(WRK.Status_Flag_3_Y_N);
PARAMETER(WRK.Status_Flag_4_Y_N);
PARAMETER(WRK.Status_Flag_5_Y_N);
PARAMETER(WRK.Status_Flag_6_Y_N);
PARAMETER(WRK.Status_Flag_7_Y_N);
PARAMETER(WRK.Status_Flag_8_Y_N);
PARAMETER(WRK.Status_Flag_12_Y_N);
PARAMETER(WRK.Email_to_Warehouse_Code);
PARAMETER(WRK.Email_Selection_usr);
PARAMETER(PAR.Salesperson_Code);
PARAMETER(LCL.Salesperson_Name);
PARAMETER(LCL.Email_to_Broker_Usr);
PARAMETER(LCL.Email_to_Salesperson_Usr);

//?08/27/24 SP S312312-End
//?Post ,Print Acknowledgement, and Get Rdy Rpt.
CASE;

// IF WRK.Status - Y or N is no
IF WRK.Status_Y_or_N = 'N';

// PAR.Next Program Name = CON.PMGFE2R
PAR.Next_Program_Name = 'PMGFE2R';

//?Post ,Print Acknowledgement, and Get Rdy Rpt.
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Next Program Name = CON.*BLANK
PAR.Next_Program_Name = *BLANK;

// Call program EDT Post Open Orders 2 XF.
CALL PROGRAM(EDT Post Open Orders 2 XF) ('POI4XFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Order_Value_Total);
PARAMETER(DTL.Order_Weight_Total);
PARAMETER(DTL.Country_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER('OE');

//?Print Acknowledgement if flag is yes from the confirm prompt
CASE;

// IF WRK.Print (Yes/No) USR is Yes
IF WRK.Print_Yes_No_USR = 'Y';

// OR WRK.Status Flag 8  Y/N is Yes
OR WRK.Status_Flag_8_Y_N = 'Y';

// OR LCL.Email to Salesperson Usr is Yes
OR LCL.Email_to_Salesperson_Usr = 'Y';

// WRK.PRT Night Queue Run Sts = CND.no
WRK.PRT_Night_Queue_Run_Sts = 'N';

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Print Acknowledgement');
PARAMETER(WRK.PRT_Printer_Device);
PARAMETER(WRK.PRT_Hold_Output_Sts);
PARAMETER(WRK.PRT_Save_Output_Sts);
PARAMETER(WRK.PRT_Number_of_Copies);
PARAMETER(WRK.PRT_Night_Queue_Run_Sts);
PARAMETER(WRK.PRT_Night_Queue);
PARAMETER('OMS');
PARAMETER(*MISSING);
PARAMETER(WRK.Paper_Type_USR);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

//?dont print copy for sales
CASE;

// IF WRK.Print (Yes/No) USR is No
IF WRK.Print_Yes_No_USR = 'N';

// WRK.PRT Printer Device = CON.*BLANK
WRK.PRT_Printer_Device = *BLANK;

ENDIF;

// Call program PRT Acknowledgements UP.
SBMJOB;
CALL PROGRAM(PRT Acknowledgements UP) ('PDJWPCLP');
PARAMETER(DTL.USR_Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(WRK.Blank_for_4_USR);
PARAMETER(1);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER('S');
PARAMETER(WRK.PRT_Printer_Device);
PARAMETER(WRK.PRT_Hold_Output_Sts);
PARAMETER(WRK.PRT_Save_Output_Sts);
PARAMETER(WRK.PRT_Number_of_Copies);
PARAMETER(*JOBD);
PARAMETER(*ZERO);
PARAMETER(WRK.Status_Flag_8_Y_N);
PARAMETER(WRK.Email_to_Warehouse_Code);
PARAMETER(LCL.Email_to_Salesperson_Usr);
SBMJOBOVR JOB(ORDER_ACK);
SBMJOBEND;

ENDIF;

ENDIF;

//?Print Get Ready Report if flag is yes from the confirm prompt
CASE;

// IF WRK.Status Flag 5  Y/N is Yes
IF WRK.Status_Flag_5_Y_N = 'Y';

// WRK.PRT Night Queue Run Sts = CND.no
WRK.PRT_Night_Queue_Run_Sts = 'N';

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Print Get Ready Report');
PARAMETER(WRK.PRT_Printer_Device);
PARAMETER(WRK.PRT_Hold_Output_Sts);
PARAMETER(WRK.PRT_Save_Output_Sts);
PARAMETER(WRK.PRT_Number_of_Copies);
PARAMETER(WRK.PRT_Night_Queue_Run_Sts);
PARAMETER(WRK.PRT_Night_Queue);
PARAMETER('OMS');
PARAMETER(*MISSING);
PARAMETER(WRK.Paper_Type_USR);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Zzz Get Ready Report   UP.
SBMJOB;
CALL PROGRAM(Zzz Get Ready Report   UP) ('PMH5UPC');
PARAMETER(DTL.USR_Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.PRT_Printer_Device);
PARAMETER(WRK.PRT_Hold_Output_Sts);
PARAMETER(WRK.PRT_Save_Output_Sts);
PARAMETER(WRK.PRT_Number_of_Copies);
PARAMETER(*JOBD);
PARAMETER(*BLANK);
SBMJOBOVR JOB(GETREADY);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

ENDIF;

ENDIF;

//?08/27/24 SP S312312-Start (Add condition c5 Email to Broker Usr)
//?Fax Acknwlgmnt to buyer/fld/brkr/cust if flag=yes f/confirm pmt  12/01/08
CASE;

// IF WRK.Status Flag 2  Y/N is Yes
IF WRK.Status_Flag_2_Y_N = 'Y';

// OR WRK.Status Flag 3  Y/N is Yes
OR WRK.Status_Flag_3_Y_N = 'Y';

// OR WRK.Status Flag 4  Y/N is yes
OR WRK.Status_Flag_4_Y_N = 'Y';

// OR WRK.Status Flag 7  Y/N is Yes
OR WRK.Status_Flag_7_Y_N = 'Y';

// OR LCL.Email to Broker Usr is Yes
OR LCL.Email_to_Broker_Usr = 'Y';

//?** Status Flag 2=Buyer Fax/email, Status Flag 3=Regional Sales Manager
//?** Status Flag 4=Broker Fax-which is not used at this level
//?** Status Flag 7=Customer Fax
//?08/21/2017 DN T11489-Added Salesperson Code to Parm.
// Call program EXC Fax Acknwgmnt     XF.
CALL PROGRAM(EXC Fax Acknwgmnt     XF) ('PPFDXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.HPB_Ship_to_Warehouse);
PARAMETER(PAR.Salesperson_Code);
PARAMETER(WRK.Status_Flag_2_Y_N);
PARAMETER(WRK.Status_Flag_3_Y_N);
PARAMETER(WRK.Status_Flag_4_Y_N);
PARAMETER(WRK.Status_Flag_7_Y_N);
PARAMETER(LCL.Email_to_Broker_Usr);

ENDIF;

RETURN;

ENDIF;

ENDDO;

ENDIF;

//?USER: Exit program processing

CASE;

// IF KEY.*CMD key is *Exit
IF KEY.*CMD_key = '03';

CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

EXECUTE FUNCTION(Val Order Hdr Exists   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1316396;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Order_Number);

//?Only allow F3 if order doesn't exist (no processing has been done)
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Send error message - 'Function not allowed.'
ERROR(USR1833);

QUIT;

//?Only allow F3 if order doesn't exist (no processing has been done)
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Next Program Name = CON.*BLANK
PAR.Next_Program_Name = *BLANK;

// PAR.Order Number = CON.*ZERO
PAR.Order_Number = *ZERO;

PGM.*Return_code = 'NOUPD';

RETURN;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Function not allowed.'
ERROR(USR1833);

QUIT;

ENDIF;

ENDIF;

