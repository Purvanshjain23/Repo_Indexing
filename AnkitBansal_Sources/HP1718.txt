      *****************  RPG PROGRAM HEADING  ***********************
      *
      * SYSTEM:      Hog Production System
      * PROGRAM:     HP1718
      * TITLE:       Maintain Order Request (No CREATE; no HOLD/ERROR requests)
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     03/15/04
      *
      * FUNCTION: This program does not CREATE new requests.
      *           This program uses a subfile to maintain items on an existing request THAT
      *           DOES NOT HAVE a status of HOLD or ERROR.
      *
      *           There is ANOTHER (almost identical) program that we use to:
      *                 1) CREATE new requests
      *                 2) REVISE existing HOLD requests
      *                 3) REVISE existing ERROR requests
      *
      *           This program is different than anything else in HPS!!!
      *
      *           There is only REVISE mode. And, in REVISE mode, the user can
      *           NOT change existing records. He can only delete/create records.
      *
      *           The user deletes by taking an Option 4. BUT, we don't actually delete
      *           any records--we just tag them as D=Delete. John L. uses them on the
      *           p.c. side and then deletes them.
      *
      *           Alice wanted 'line numbers' to keep the items on the screen in the
      *           sequence that the user entered them. So, John L. will have to put line
      *           numbers in on the p.c. side for detail records he adds to HPS.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 10/13/04  LeAnne Fedor
      *           Recompile only. Cost Per Unit Amount was changed from
      *           9,2 to 9,4.
      *
      * 04/04/05  LeAnne Fedor
      *           Recompile only (we changed the screen heading in the DSPF).
      *
      * 01/17/06  LeAnne Fedor
      *           Recompile only (we tweaked the field positions in the DSPF
      *           control record.)
      *
      * 10/15/13  LeAnne Ramsey (E2831)
      *           Recompile only. Added field 'MTech Reference'.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhpd1718   cf   e             workstn sfile(hp1718s1:hdrrn1)
     F                                     infds(iofeed)
      *
      *
     Fhsp018    if   e           k disk
      *    Farm site
      *
      *
     Fhsp181    if   e           k disk
      *    Item
      *
      *
     Fhsj189j   if   e           k disk
      *    Farm budget detail + farm budget header
      *
      *
     Fhsp190    if   e           k disk
      *    Override reason codes
      *
      *
     Fhsp192    uf a e           k disk
      *    Request header
      *
      *
     Fhsl192a   if   e           k disk    rename(qhrec:qhreca)
      *    Request header
      *
      *
     Fhsl193d   uf a e           k disk    rename(qdrec:qdrecd)
      *    Request detail
      *
      *
     Fhsl193f   if   e           k disk    rename(qdrec:qdrecf)
      *    Request detail
      *
      *
     Fhsl193g   if   e           k disk    rename(qdrec:qdrecg)
      *    Request detail
      *
      *
     Fhsp194    if   e           k disk
      *    Request status codes
      *
      /eject
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D revise          c                   'REVISE'
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
     D itcd            s             25    dim(100)
     D bgit            s             25    dim(100)
     D apqt            s             11  4 dim(100)
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
     D maxrrn          s              4  0
     D reset           s              1    inz('N')
     D norecs          s              1    inz('N')
     D wkflow          s                   like(idflow)
     D rtncd           s              2
     D count           s              2  0
      *
      *
      * Control fields
      *
     D entryfl         s              1
     D warmsg          s              2  0
      *
      *
      * Workfields
      *
     D wkdiff          s                   like(count)
     D wkrmdr          s                   like(count)
     D wkfld           s                   like(count)
     D wklnno          s                   like(qdlnno)
     D wkrqqt          s                   like(qdrqqt)
     D wkrqscd         s                   like(qdrqscd)
      *
      *
      * Workfields required for subfile paging--see initialization
      * subroutine.
      *
     D wkplin          s              2  0
     D wkrlin          s              2  0
      *
      *
      *
      * Workfields for date manipulation
      *
     D wkcymdiso       s               d   datfmt(*iso)
     D wkcrupdt        s              8  0
     D wkrqdt          s              8  0
      *
      *
      * Array indexes
      *
     D x               s              3  0
     D y               s              3  0
     D w               s              3  0
     D z               s              3  0
      *
      *
      * Parms
      *
     D xxrqsn          s                   like(qdrqsn)
      *
     D xxaist          s              1
      *
     D xxitcd          s                   like(d1itcd)
     D xxitds          s                   like(d1itds)
      *
     D xxorcd          s                   like(d1orcd)
     D xxords          s                   like(orords)
      *
     D xxbgqt          s                   like(qdapqt)
     D xxqt            s                   like(qdapqt)
     D xxavqt          s                   like(qdapqt)
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * Mainline
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /eject
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * Verify that the Request the user selected still exists.
      * If it still exists, get descrptions to display; otherwise,
      * issue an error message
      *
     C     xxrqsn        chain(n)  hsp192                             92
     C                   if        *in92 = *off                                 If found
     C                   move      qhwo          c1wo
     C                   z-add     qhfscd        c1fscd
     C                   move      qhcom         c1com
     C                   move      qhrqscd       wkrqscd
     C                   exsr      $desc
     C                   else
      *
     C                   move      yes           norecs
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09008'     mgid(e)
     C                   endif
     C                   endif                                                  If found
      *
      *  Clear/fill the subfile
      *
     C                   exsr      $clr1
     C                   exsr      $frsh1
      *
      * Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Set the page of the subfile to display
      *
     C                   select
     C                   when      wkflow = 0 and error = 0
     C                   z-add     1             hdpag1
      *
     C                   when      reset = yes and wkflow <= hdrrn1
     C                   z-add     wkflow        hdpag1
     C                   endsl
      *
      * Set the indicators to control screen fields
      *
     C                   exsr      $c1ind
      *
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to crt
      *
     C                   write     hp1718k1
     C                   write     hp1718ec
     C                   exfmt     hp1718c1
      *
      * Set off the error indicators in the subfile
      *
     C                   exsr      $sfloff
      *
      * Set the 'RESET' flag to NO. This flag is used to determine whether to
      * reposition the user to a particular place in the subfile (reset=yes)
      * or to just place the user at the beginning of the subfile (reset=no).
      *
     C                   move      no            reset
      *
      * Save the value of the lowest subfile rrn on the screen for
      * later repositioning of the subfile
      *
     C                   z-add     idflow        wkflow
      *
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   move      '03'          rtncd
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   if        mode = revise
     C                   move      yes           reset
     C                   endif
     C                   movel     set1          routne
      *
     C                   when      *in09 = *on                                  F9-accept
     C                   exsr      $edit1
     C                   if        error = 0 or
     C                             error = warmsg
     C                   exsr      $accept
     C                   endif
      *
     C                   when      *in25 = *on                                  F25-rollup
     C     idflow        add       wkplin        wkdiff
     C                   if        hdrrn1 >= wkdiff                             If something
     C                   else
     C                   z-add     count         hdrrn1
     C                   exsr      $sfloff
     C                   exsr      $clrln
     C                   do        wkplin                                       Do fill
     C                   exsr      $blank
     C                   enddo                                                  Do fill
     C                   endif                                                  If something
     C                   movel     scrn1         routne
     C                   other
      *
      * User pressed 'ENTER'
      *
     C                   exsr      $edit1
     C                   movel     scrn1         routne
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------------
      * Edit the screen 1 fields
      *---------------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * Edit the subfile
     C                   exsr      $eds1
      *
     C                   movel     scrn1         routne
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Clear subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $clr1         begsr
      *
     C                   z-add     0             hdrrn1
     C                   z-add     0             count
     C                   z-add     0             wklnno
      *
     C                   clear                   hp1718s1
     C                   seton                                        83        sflclr
     C                   write     hp1718c1
     C                   setoff                                       818283
      *                                                    81=sfldsp
      *                                                    82=sflend
      *                                                    83=sflclr
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Refresh/fill the subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $frsh1        begsr
      *
      * Set indicators to control/protect screen fields
      *
     C                   exsr      $c1ind
     C                   exsr      $sfloff
      *
      *
      * Loading the subfile in this program is different than in the shell programs
      * and depends on the 'MODE'.
      * For REVISE mode, we load all the database records and, if we hit EOF, we
      *                  finish the page with blank lines.
      *
      * The logical used in Revise mode omits detail records that are tagged as
      * D=delete or E=Error.
      *
     C     xxrqsn        setll     hsl193d
     C                   dou       *in82 = *on
     C                   exsr      $load1
     C                   enddo
      *
      * Fill up the subfile page with blank lines if necessary
      *
     C                   if        wkplin <> 0 and wkplin <> count
     C     count         div       wkplin        wkfld
     C                   mvr                     wkrmdr
     C     wkplin        sub       wkrmdr        wkdiff
     C                   exsr      $clrln
     C                   exsr      $sfloff
     C                   do        wkdiff
     C                   exsr      $blank
     C                   enddo
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Clear subfile line
      *----------------------------------------------------------------
      *
     C     $clrln        begsr
      *
     C                   move      *blank        d1itcd
     C                   z-add     0             d1rqqt
     C                   z-add     0             d1apqt
     C                   move      *blank        d1orcd
     C                   move      *blank        d1com
     C                   move      *blank        d1rqscd
     C                   move      *blank        d1itds
      *
     C                   z-add     0             hdlnno
     C                   move      *blank        hditcd
     C                   z-add     0             hdrqqt
     C                   z-add     0             hdusqt
     C                   z-add     0             hdfbsn
     C                   move      *blank        hdbgit
     C                   move      *blank        hdbgfl
     C                   move      *blank        hdcritfl
     C                   z-add     0             hdvol
     C                   move      *blank        hdovfl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Load the subfile on screen 1
      *----------------------------------------------------------------
      *
     C     $load1        begsr
      *
      * Retrieve Request Detail records---(omit D=delete and E=error records)
      *
     C     xxrqsn        reade(n)  hsl193d                                82
     C                   if        *in82 = *off and                             If not EOF
     C                             qdrqscd <> 'D' and
     C                             qdrqscd <> 'E'
     C                   seton                                        85
      *
      * Clear fields in the subfile line
      *
     C                   exsr      $clrln
      *
      * Set up line number fields--a workfield in case you have to fill the
      * rest of the page with blank lines and a hidden field on the subfile record
      *
     C                   z-add     qdlnno        hdlnno
     C                   z-add     qdlnno        wklnno
      *
     C                   move      qditcd        hditcd
     C                   z-add     qdfbsn        hdfbsn
     C                   z-add     qdrqqt        hdrqqt
     C                   z-add     qdusqt        hdusqt
      *
     C                   move      qditcd        d1itcd
     C                   z-add     qdrqqt        d1rqqt
     C                   z-add     qdapqt        d1apqt
     C                   move      qdorcd        d1orcd
     C                   move      qdcom         d1com
     C                   move      qdrqscd       d1rqscd
      *
      * Retrieve the Item Description and Budget flags
      *
     C     d1itcd        chain     hsp181                             92
     C                   if        *in92 = *off
     C                   move      imitds        d1itds
     C                   move      imbgfl        hdbgfl
     C                   move      imcritfl      hdcritfl
     C                   z-add     imvol         hdvol
     C                   move      imbgit        hdbgit
     C                   endif
      *
      * Reset subfile indicators
      *
     C                   exsr      $sfloff
     C                   exsr      $sflon
      *
     C                   add       1             count
     C                   add       1             hdrrn1
      *
     C                   write     hp1718s1
     C                   seton                                        81
     C                   z-add     hdrrn1        hdpag1
     C                   endif                                                  If not EOF
      *
     C                   endsr
      /EJECT
      *-------------------------------------------------------------------
      * Load blank subfile records for screen 1
      *-------------------------------------------------------------------
      *
     C     $blank        begsr
      *
      * Set off subfile indicators
      *
     C                   exsr      $sfloff
      *
     C                   add       1             wklnno
     C                   z-add     wklnno        hdlnno
      *
     C                   add       1             count
     C                   add       1             hdrrn1
      *
     C                   exsr      $sflon
     C                   write     hp1718s1
      *
     C                   seton                                        81
     C                   z-add     hdrrn1        hdpag1
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------------------------------
      * Read/edit changed subfile records on screen 1
      *---------------------------------------------------------------------------------------
      *
     C     $eds1         begsr
      *
      * Initialize Item arrays and indexes
      *
     C                   move      *blank        itcd
     C                   z-add     0             y
     C                   z-add     0             x
      *
     C                   move      *blank        bgit
     C                   z-add     0             apqt
     C                   z-add     0             w
     C                   z-add     0             z
      *
      *
      * Set the flag that will determine whether the user keyed any subfile entries.
      * And, initialize the field used to count 'warning' messages.
      *
     C                   move      no            entryfl
     C                   z-add     0             warmsg
      *
      * Read/process all the changed subfile records
      *
     C                   dou       *in80 = *on                                  Do process loop
     C                   readc     hp1718s1                               80
     C                   if        *in80 = *off                                 If rec read
      * Set on MDT
      * Set off error indicators in the subfile
      *
     C                   seton                                        85
     C                   exsr      $sfloff
      *
      * If there are no user entries for the subfile record, clear the line.
      *
     C                   if        d1opt = *blank and                           If entry
     C                             d1itcd = *blank and
     C                             d1rqqt = 0 and
     C                             d1orcd = *blank and
     C                             d1com  = *blank
     C                   exsr      $clrln
     C                   else
      *
     C                   move      yes           entryfl
      *
      * Validate
      *   1) option
      *   2) item
     C                   exsr      $opt4
     C                   exsr      $itcd
      *
      *
      * If Item was valid, validate:
      *  1) quantity
      *  2) override reason
      *
     C                   if        *in33 = *off
     C                   exsr      $rqqt
     C                   exsr      $orcd
     C                   endif
      *
     C                   endif                                                  If entry
      *
      * Reset indicators
      *
     C                   exsr      $sflon
     C                   update    hp1718s1
     C                   exsr      $sfloff
     C                   endif                                                  If rec read
     C                   enddo                                                  Do process loop
      * Set MDT
     C                   setoff                                       85
      *
      *---------------------------------------------------------------
      * After all subfile records have been edited, issue an error
      * message if there are no subfile entries.
      *---------------------------------------------------------------
      *
     C                   if        entryfl = no and                             If nothing
     C                             error < maxmsg
     C                   add       1             error
     C                   movel     'HS04775'     mgid(e)
     C                   endif                                                  If nothing
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------
      * Validate subfile options
      *-------------------------------------------------------------------
      *
     C     $opt4         begsr
      *
     C                   if        d1opt <> '4' and
     C                             d1opt <> *blank
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09006'
     C                   exsr      $err1
     C                   endif
     C                   endif
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------
      * Validate Item
      *-------------------------------------------------------------------
      *
     C     $itcd         begsr
      *
     C                   if        hditcd <> *blank                             If protected
     C                   else
      *
     C                   z-add     0             d1apqt
      *
     C                   select
     C                   when      d1itcd = *blank
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   exsr      $err1
     C                   endif
     C                   other
      *
      * Item must exist in Item Master
      *
     C                   move      *blank        d1itds
     C     d1itcd        chain     hsp181                             92
     C                   if        *in92 = *on                                  If invalid
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04776'
     C                   exsr      $err1
     C                   endif
     C                   else
      *
      * Item is valid in the Item Master, so continue other validations.
      *
      * Item cannot be Inactive
      *
     C                   move      imitds        d1itds
     C                   if        imaist = 'I'                                 If inactive
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04777'
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If inactive
      *
      * Item cannot already be on the request.
      *
     C     key01         chain     hsl193f                            92
     C                   if        *in92 = *off                                 If on request
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04778'
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If on request
      *
      * If budgetable, item must be on a currently ACTIVE budget for
      * the Farm.
     C                   if        imbgfl = yes                                 If budgetable
     C                   exsr      $actbud
     C                   endif                                                  If budgetable
      *
      * Item cannot be keyed twice in the subfile as a new record.
      *
     C                   if        *in33 = *off                                 If OK so far
     C                   z-add     1             x
     C     d1itcd        lookup    itcd(x)                                92
     C                   if        *in92 = *off                                 If not there
     C                   move      imbgfl        hdbgfl
     C                   move      imcritfl      hdcritfl
     C                   z-add     imvol         hdvol
     C                   move      imbgit        hdbgit
     C                   add       1             y
     C                   move      d1itcd        itcd(y)
     C                   else
      *
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04779'
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If not there
     C                   endif                                                  If OK so far
      *
     C                   endif                                                  If invalid
     C                   endsl
      *
     C                   endif                                                  If protected
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------
      * Check that an Item is on an Active Budget for the Farm
      *-------------------------------------------------------------------
      *
     C     $actbud       begsr
      *
     C     key02         chain     hsj189j                            92
     C                   if        *in92 = *off                                 If active
     C                   z-add     jhfbsn        hdfbsn
     C                   else
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04780'
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If active
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------
      * Validate Quantity
      *-------------------------------------------------------------------
      *
     C     $rqqt         begsr
      *
     C                   select                                                 Outer select
     C                   when      hditcd <> *blank
     C                   other
      *
     C                   select                                                 Inner select
     C                   when      d1rqqt < 0
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   exsr      $err1
     C                   endif
      *
     C                   when      d1rqqt = 0
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   exsr      $err1
     C                   endif
     C                   other
      *
      * Check available quantities for budgetable items.
      *
     C                   if        hdbgfl = yes
     C                   exsr      $avail
     C                   else
     C                   z-add     d1rqqt        d1apqt
     C                   endif
      *
     C                   endsl                                                  Inner select
     C                   endsl                                                  Outer select
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------
      * Find available quantity
      *-------------------------------------------------------------------
      *
     C     $avail        begsr
      *
      * Call the program to see whats been used on all requistions--including
      * any already existing items on this requisition.
      *
     C                   call      'HP8700'
     C                   parm                    hdfbsn
     C                   parm                    hdbgit
     C                   parm                    wkrqdt
     C                   parm      0             xxbgqt
     C                   parm      0             xxqt
     C                   parm      0             xxavqt
      *
      * Now you have data from existing records. Determine any quantities used
      * on 'new' records already in the subfile.
      *
     C                   z-add     1             w
     C     hdbgit        lookup    bgit(w)                                92
     C                   if        *in92 = *on                                  If in array
     C                   sub       apqt(w)       xxavqt
     C                   endif                                                  If in array
      *
      * Do the 'volume' thing
      *
     C                   if        hdvol = 0
     C                   z-add     d1rqqt        wkrqqt
     C                   else
     C     hdvol         mult      d1rqqt        wkrqqt
     C                   endif
      *
      * If the item is overbudget but not critical, the user can only get what
      * is left. He will get a warning message.
      * He can't have any if nothing is left.
      *
     C                   if        hdcritfl = no                                If not critical
     C                   exsr      $notcrit
     C                   endif                                                  If not critical
      *
      * If the item is over budget BUT critical, they can have all they want.
      * You just have to set a flag so that you will know to force them to
      * enter an Override Budget Reason Code.
      *
     C                   if        hdcritfl = yes                               If critical
      *
     C                   select
     C                   when      wkrqqt > xxavqt
     C                   move      yes           hdovfl
     C                   other
      *
     C                   z-add     d1rqqt        d1apqt
     C                   endsl
      *
     C                   endif                                                  If critical
      *
      * Always load the requested quantity from the subfile into the array.
      *
     C                   z-add     1             w
     C     hdbgit        lookup    bgit(w)                                92
     C                   if        *in92 = *on                                  If in array
     C                   add       wkrqqt        apqt(w)
     C                   else
     C                   add       1             z
     C                   move      hdbgit        bgit(z)
     C                   z-add     wkrqqt        apqt(z)
     C                   endif                                                  If in array
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------
      * Item is overbudget but NOT critical
      *-------------------------------------------------------------------
      *
     C     $notcrit      begsr
      *
      * When there is NO available quantity
      *
     C                   select
     C                   when      xxavqt <= 0
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04790'
     C                   exsr      $err1
     C                   endif
     C                   other
      *
      * There is more available than what the user is requesting. SO, he
      * gets what he wants.
      *
     C                   if        wkrqqt <= xxavqt                             If enough
     C                   z-add     d1rqqt        d1apqt
     C                   else
      *
      * The user wants more than what is available. So, we only let him have
      * the remaining quantity available.
      *
      * Do an unvolume thing (if necessary)
      *
     C                   if        hdvol = 0
     C                   z-add     xxavqt        d1apqt
     C                   else
     C                   eval      d1apqt = xxavqt / hdvol
     C                   endif
      *
     C                   seton                                        37
     C                   if        error < maxmsg
     C                   add       1             error
     C                   add       1             warmsg
     C                   eval      mgid(e) = 'HS04789'
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If enough
     C                   endsl
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------
      * Validate Override Reason
      *-------------------------------------------------------------------
      *
     C     $orcd         begsr
      *
     C                   select
     C                   when      hditcd <> *blank
      *
     C                   when      d1orcd <> *blank
      *
     C                   if        hdbgfl = no                                  If not budgetable
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04781'
     C                   exsr      $err1
     C                   endif
     C                   else
      *
     C                   if        hdcritfl = no
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04782'
     C                   exsr      $err1
     C                   endif
     C                   endif
     C                   endif                                                  If not budgetable
      *
     C                   when      hdcritfl = yes and
     C                             hdovfl = yes and
     C                             d1orcd = *blank
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04783'
     C                   exsr      $err1
     C                   endif
     C                   endsl
      *
      * If there are no errors so far and the user has entered a value,
      * check that it is valid in the master file.
      *
     C                   if        *in35 = *off and d1orcd <> *blank            If check file
     C     d1orcd        chain     hsp190                             92
     C                   if        *in92 = *on
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04765'
     C                   exsr      $err1
     C                   endif
     C                   endif
     C                   endif                                                  If check file
      *
      * If a Critical Item is Over-budget and the user entered a valid
      * Override Reason:
      *   Populate Approved Quantity
      *
     C                   if        d1orcd <> *blank and *in35 = *off
     C                   z-add     d1rqqt        d1apqt
     C                   endif
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------
      * Reset indicators in Control Record
      *-------------------------------------------------------------------
      *
     C     $c1ind        begsr
      *
      * If the request was deleted out from under the user, then set *in90
      * back on to control available function keys and input fields.
      *
     C                   if        norecs = yes
     C                   seton                                        99
     C                   endif
      *
      *  Set up for user's action
      *
     C                   select
     C                   when      c1mode = revise
     C                   seton                                        60
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Set off subfile indicators
      *----------------------------------------------------------------
      *
     C     $sfloff       begsr
      *
     C                   setoff                                       333435
     C                   setoff                                       3637
     C                   setoff                                       5355
     C                   setoff                                       6364
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Set on subfile indicators
      *----------------------------------------------------------------
      *
     C     $sflon        begsr
      *
      * If the request was deleted out from under the user, then set on the
      * indicator that controls available function keys and input fields.
      *
     C                   if        norecs = yes
     C                   seton                                        99
     C                   else
     C                   setoff                                       99
     C                   endif
      *
     C                   select
     C                   when      c1mode = revise
     C                   seton                                        60
     C                   endsl
      *
     C                   if        hditcd <> *blank
     C                   seton                                        64
     C                   endif
      *
     C                   if        hdusqt <> 0 or d1rqscd = 'C' or
     C                             hditcd = *blank
     C                   seton                                        63
     C                   endif
      *
     C                   endsr
      /eject
      *--------------------------------------------------------------------------------------
      * User took F9 to accept his entries
      *--------------------------------------------------------------------------------------
      *
     C     $accept       begsr
      *
      * Update the Request Header.
      *
     C                   exsr      $updhdr
      *
      * The user can only delete/create detail records.
      *
     C                   z-add     0             wklnno
      *
     C                   dou       *in80 = *on                                  Do loop
     C                   readc     hp1718s1                               80
     C                   if        *in80 = *off                                 If read
      * Deleting
     C                   select
     C                   when      d1opt = '4'
     C     key03         chain     hsl193d                            92
     C                   if        *in92 = *off
     C                   move      'D'           qdrqscd
     C                   update    qdrecd
     C                   endif
      *
      * Creating
     C                   when      d1itcd <> *blank and hditcd = *blank
     C                   exsr      $lnno
     C                   z-add     qhrqsn        qdrqsn
     C                   z-add     wklnno        qdlnno
     C                   move      d1itcd        qditcd
     C                   z-add     d1rqqt        qdrqqt
     C                   z-add     d1apqt        qdapqt
     C                   move      d1orcd        qdorcd
     C                   move      d1com         qdcom
     C                   move      'O'           qdrqscd
     C                   z-add     hdfbsn        qdfbsn
     C                   z-add     0             qdusqt
     C                   z-add     0             qdcpuam
     C                   write     qdrecd
     C                   endsl
      *
     C                   endif                                                  If read
     C                   enddo                                                  Do loop
      *
      * Set next routine
     C                   move      exit          routne
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------
      * Update a request header record
      *-------------------------------------------------------------------
      *
      * The only user-entry field in REVISE mode is the Comment.
      *
     C     $updhdr       begsr
      *
     C     xxrqsn        chain     hsp192                             92
     C                   if        *in92 = *off                                 If found
     C                   move      c1com         qhcom
     C                   move      'O'           qhrqscd
     C                   z-add     wkcrupdt      qhupdt
     C                   time                    qhuptm
     C                   move      sdusr         qhuscd
     C                   update    qhrec
     C                   endif                                                  If found
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------
      * Prompt for subfile fields on Screen 1
      *-------------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      * Item
     C                   select
     C                   when      fld = 'D1ITCD'
     C                   exsr      $rrn1
     C                   if        *in97 = *off                                 If hit
     C                   if        hditcd <> *blank                             If protected
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09011'     mgid(e)
     C                   endif
     C                   else
      *
     C                   call      'HP5055'
     C                   parm      'A'           xxaist
     C                   parm      *blank        xxitcd
     C                   parm      *blank        xxitds
     C                   seton                                        53
     C                   if        xxitcd <> *blank
     C                   move      xxitcd        d1itcd
     C                   move      xxitds        d1itds
     C                   endif
     C                   endif                                                  If protected
      *
     C                   exsr      $sfloff
     C                   exsr      $sflon
     C                   seton                                        8553
     C                   update    hp1718s1
     C                   setoff                                       8553
     C                   exsr      $synchrrn
     C                   endif                                                  If hit
      *
      * Override reason
     C                   when      fld = 'D1ORCD'
     C                   exsr      $rrn1
     C                   if        *in97 = *off                                 If hit
     C                   if        hditcd <> *blank                             If protected
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09011'     mgid(e)
     C                   endif
     C                   else
      *
     C                   call      'HP5056'
     C                   parm      *blank        xxorcd
     C                   parm      *blank        xxords
     C                   seton                                        55
     C                   if        xxorcd <> *blank
     C                   move      xxorcd        d1orcd
     C                   endif
     C                   endif                                                  If protected
      *
     C                   exsr      $sfloff
     C                   exsr      $sflon
     C                   seton                                        8555
     C                   update    hp1718s1
     C                   setoff                                       8555
     C                   exsr      $synchrrn
     C                   endif                                                  If hit
     C                   other
      *
      * F4 not valid for this field. So, issue message and reset the
      * subfile relative record number.
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09011'     mgid(e)
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------------
      * Synch up the relative record number after an F4 prompt in the subfile
      *----------------------------------------------------------------------
      *
      * Reset the subfile relative record number to what it was before
      * the user took F4 (It will be out-of-synch if the user has
      * selected a record-- thus causing the subfile record to be
      * retrieved and updated.)  But, set the page of the subfile to
      * be displayed to the page on which the user took F4.
      *
     C     $synchrrn     begsr
      *
     C                   z-add     count         hdrrn1
     C                   z-add     hdrr1         hdpag1
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------------------------------
      * Set the subfile to redisplay at the first page that has errors on Screen 1
      *----------------------------------------------------------------------------------------
      *
     C     $err1         begsr
      *
     C                   if        error = 1
     C                   z-add     hdrrn1        hdpag1
     C                   endif
      *
     C                   endsr
      *
      /eject
      *--------------------------------------------------------------------
      * End job
      *--------------------------------------------------------------------
      *
     C     $exit         begsr
      *
     C                   if        xxrqsn <> 0
     C                   exsr      $cleanup
     C                   endif
      *
     C                   seton                                        lr
      *
     C                   endsr
      *
      *----------------------------------------------------------------------------------------
      * Clean up from Deletes
      *----------------------------------------------------------------------------------------
      *
      * If the only records left in the detail file are delete records, then
      * tag the Header record as Delete as well.
      *
     C     $cleanup      begsr
      *
     C     xxrqsn        chain     hsl193f                            92
     C                   if        *in92 = *on                                  If all tagged
     C     xxrqsn        chain     hsp192                             92
     C                   if        *in92 = *off
     C                   move      'D'           qhrqscd
     C                   update    qhrec
     C                   endif
     C                   endif                                                  If all tagged
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * Find/retrieve the subfile record to update when returning from a select program
      * on screen 1.
      *------------------------------------------------------------------------------------
      *
      * HDRR1 is the hidden field associated with the keyword SFLCSRRRN on the control
      * record in the DSPF.
      * HDRRN1 is the value associated with the keyword KSFILE in the F-specs for the
      * workstation.
      *
     C     $rrn1         begsr
      *
     C                   setoff                                       97
      *
     C                   if        hdrr1 <> 0
     C                   z-add     hdrr1         hdrrn1
     C     hdrrn1        chain     hp1718s1                           97
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Retrieve descriptions for various fields in the Control Record
      *----------------------------------------------------------------
      *
     C     $desc         begsr
      *
      * Retrieve Farm Site name
      *
     C     c1fscd        chain     hsp018                             92
     C                   if        *in92 = *off                                 If found
     C                   move      fsfsnm        c1fsnm
     C                   else
     C                   eval      c1fsnm = 'Unknown'
     C                   endif                                                  If found
      *
      * Flip Request Date from CCYYMMDD to MMDDYY for display
      *
     C     *iso          test(d)                 qhrqdt                 92
     C                   if        *in92 = *off                                 If OK date
     C                   move      qhrqdt        wkcymdiso
     C     *mdy          move      wkcymdiso     c1mdy
     C                   z-add     qhrqdt        wkrqdt
     C                   endif                                                  If OK date
      *
      *
      * Retrieve Request Status description
      *
     C     wkrqscd       chain     hsp194                             92
     C                   if        *in92 = *off                                 If found
     C                   move      rqrqsds       c1rqsds
     C                   else
     C                   eval      c1rqsds = 'Unknown'
     C                   endif                                                  If found
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------------------------------
      * Get a Line Number
      *---------------------------------------------------------------------------------------
      *
      * You have to assign a 'line number' to make the request detail record unique.
      *
     C     $lnno         begsr
      *
      * Just to make sure that John L. and I don't step on each other---he
      * has to assign line numbers on his side as well--always go get the
      * highest line number and add 1 to it.
      *
     C                   select
     C                   when      mode = revise
     C     qhrqsn        chain     hsl193g                            92
     C                   if        *in92 = *off
     C     qdlnno        add       1             wklnno
     C                   else
     C                   z-add     1             wklnno
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
     C     mode          parm                    c1mode
     C                   parm                    xxrqsn
     C                   parm                    rtncd
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    xxrqsn
     C                   kfld                    d1itcd
      *
     C     key02         klist
     C                   kfld                    c1fscd
     C                   kfld                    imbgit
      *
     C     key03         klist
     C                   kfld                    xxrqsn
     C                   kfld                    hdlnno
      *
      *
      * To support F5-Refresh, logic requires the number of lines on
      * the subfile page and also the number of lines less 1.  By
      * setting these values up as constant work fields, the processing
      * logic can be standardized between programs.
      *
     C                   z-add     5             wkplin
     C     wkplin        sub       1             wkrlin
      *
      *
      * Save date for record stamp
      *
     C     *mdy          move      udate         wkcymdiso
     C                   move      wkcymdiso     wkcrupdt
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
