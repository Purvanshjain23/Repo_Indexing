// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDQPPFR
// ?Date: 14.08.2025 Time: 12:04:17
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('A/R');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


//?USER: Record selection processing

//?A/R Customers Only - Record selection criteria
CASE;

// IF DB1.Ship To Customer EQ DB1.A/R Customer Number
IF DB1.Ship_To_Customer = DB1.AR_Customer_Number;

EXECUTE FUNCTION(RTV Age 30,60,90 Selec RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1431371;
PARAMETER(PAR.Company_Number);
PARAMETER(DB1.AR_Customer_Number);
PARAMETER(PAR.USR_Select_Omit_Flag);
PARAMETER(PAR.Invoice_Suffix);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF DB1.Invoice Suffix is All Except Invoices-A/R
 IF ( DB1.Invoice_Suffix = 'CB'/'CM'/'DM'/'OA'/'RB';

 // AND PAR.Invoice Suffix EQ WRK.Blank for 4           USR
 AND PAR.Invoice_Suffix = WRK.Blank_for_4_USR );

 // OR PAR.Invoice Suffix EQ DB1.Invoice Suffix
 OR PAR.Invoice_Suffix = DB1.Invoice_Suffix;

 CASE;

 // IF DB1.Remaining Balance Due is not equal to zeros
 IF DB1.Remaining_Balance_Due <> *ZERO;

 // PAR.USR Select/Omit Flag = CND.Select
 PAR.USR_Select_Omit_Flag = 'S';

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Select/Omit Flag = CND.Omit
 PAR.USR_Select_Omit_Flag = 'O';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Select/Omit Flag = CND.Omit
 PAR.USR_Select_Omit_Flag = 'O';

 ENDIF;

}


//?Open Headers that meet criteria not Invoice with balance remaining
CASE;

// IF PAR.USR Select/Omit Flag is Select
IF PAR.USR_Select_Omit_Flag = 'S';

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

//?Open Headers that meet criteria not Invoice with balance remaining
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?A/R Customers Only - Record selection criteria
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process top of page

// TOP.Company Number = PAR.Company Number
TOP_Company_Number = PAR.Company_Number;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(TOP_Company_Number);
PARAMETER(TOP_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// TOP.Invoice Suffix = PAR.Invoice Suffix
TOP_Invoice_Suffix = PAR.Invoice_Suffix;

CASE;

// IF TOP.Invoice Suffix NE WRK.Blank for 4           USR
IF TOP_Invoice_Suffix <> WRK.Blank_for_4_USR;

// TOP.Condition Desc. 1  USR = Condition name of PAR.Invoice Suffix
TOP_Condition_Desc_1_USR = RTVCND(PAR.Invoice_Suffix);

// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Condition Desc. 1  USR = CON.ALL
TOP_Condition_Desc_1_USR = 'ALL';

ENDIF;

//?USER: On print of first page format

CASE;

// IF PAR.USR Flag 1 is Blank
IF PAR.USR_Flag_1 = *BLANK;

// PAR.USR Flag 1 = CND.Yes
PAR.USR_Flag_1 = 'Y';

ENDIF;

//?USER: Print required level headings

// SUPPRESSED PRINT Customer Name header format

// SUPPRESSED PRINT Ship To Customer header format

//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : PRT Age 30,60 90       PO
EXECUTE FUNCTION(PRT Age 30,60 90       PO) TYPE(PRTOBJ);
PARAMETER(PAR.Company_Number);
PARAMETER(CUR.AR_Customer_Number);
PARAMETER(PAR.USR_Age_Value_1);
PARAMETER(PAR.USR_Age_Value_2);
PARAMETER(PAR.USR_Age_Value_3);
PARAMETER(PAR.USR_Age_Current);
PARAMETER(PAR.Invoice_Suffix);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// NXT.USR Total Less Than 30 = PAR.USR Age Current + NXT.USR Total Less Than 30
NXT.USR_Total_Less_Than_30 = PAR.USR_Age_Current + NXT.USR_Total_Less_Than_30;

// NXT.USR Total 30-60 = PAR.USR Age Value 1 + NXT.USR Total 30-60
NXT.USR_Total_30_60 = PAR.USR_Age_Value_1 + NXT.USR_Total_30_60;

// NXT.USR Total 60 90 = PAR.USR Age Value 2 + NXT.USR Total 60 90
NXT.USR_Total_60_90 = PAR.USR_Age_Value_2 + NXT.USR_Total_60_90;

// NXT.USR Total Over 90 = PAR.USR Age Value 3 + NXT.USR Total Over 90
NXT.USR_Total_Over_90 = PAR.USR_Age_Value_3 + NXT.USR_Total_Over_90;

//?USER: Print required level totals

// SUPPRESSED PRINT Ship To Customer totals format

// SUPPRESSED PRINT Customer Name totals format

