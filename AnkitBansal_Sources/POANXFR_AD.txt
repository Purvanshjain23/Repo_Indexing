// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POANXFR
// ?Date: 14.08.2025 Time: 03:36:37
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?10/04/07 PER SUSAN AND TOD PROGRAM NOT USED ANY MORE
//?         IN PRODUCTION NO ONE HAS USED THIS PROGRAM
EXECUTE FUNCTION(zzc GAF Ship Load Hdr  RT) TYPE(RTVOBJ) FILE(PONNCPP)          AC1579528;
{
 //?USER: Initialize routine

 // PAR.First Time Flag = CND.Yes
 PAR.First_Time_Flag = 'Y';

 //?USER: Process Data record

 // PAR.GAF Error Code = CND.Blank
 PAR.GAF_Error_Code = *BLANK;

 //?First time processing
 CASE;

 // IF PAR.First Time Flag is Yes
 IF PAR.First_Time_Flag = 'Y';

 // PAR.GAF Customer Number = DB1.GAF Customer Number
 PAR.GAF_Customer_Number = DB1.GAF_Customer_Number;

 EXECUTE FUNCTION(Val Cust Exists        RT) TYPE(RTVOBJ) FILE(POAEREP)          AC1579497;
 PARAMETER(PAR.Company_Number);
 PARAMETER(NLL.Warehouse_Code);
 PARAMETER(DB1.GAF_Customer_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  CASE;

  // IF DB1.GAF Customer Number EQ PAR.GAF Customer Number
  IF DB1.GAF_Customer_Number = PAR.GAF_Customer_Number;

  MOVE *ALL (To: PAR From: DB1);

  ENDIF;

  QUIT;

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.GAF Error Code = CND.Error
 PAR.GAF_Error_Code = 'E';

 ENDIF;

 // PAR.First Time Flag = CND.NO
 PAR.First_Time_Flag = 'N';

 ENDIF;

 //?Get new company when GAF customer changes.
 CASE;

 // IF PAR.GAF Customer Number NE DB1.GAF Customer Number
 IF PAR.GAF_Customer_Number <> DB1.GAF_Customer_Number;

 EXECUTE FUNCTION(Val Cust Exists        RT) TYPE(RTVOBJ) FILE(POAEREP)          AC1579497;
 PARAMETER(PAR.Company_Number);
 PARAMETER(NLL.Warehouse_Code);
 PARAMETER(DB1.GAF_Customer_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  CASE;

  // IF DB1.GAF Customer Number EQ PAR.GAF Customer Number
  IF DB1.GAF_Customer_Number = PAR.GAF_Customer_Number;

  MOVE *ALL (To: PAR From: DB1);

  ENDIF;

  QUIT;

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.GAF Error Code = CND.Error
 PAR.GAF_Error_Code = 'E';

 ENDIF;

 // PAR.GAF Customer Number = DB1.GAF Customer Number
 PAR.GAF_Customer_Number = DB1.GAF_Customer_Number;

 ENDIF;

 EXECUTE FUNCTION(RTV Ld Sts/DeptDtTM    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1560196;
 PARAMETER(DB1.GAF_Load_Id_Numeric);
 PARAMETER(PAR.Load_Status);
 PARAMETER(NLL.Truck_Departure_Date);
 PARAMETER(NLL.Truck_Departure_Time);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

  MOVE *ALL (To: PAR From: DB1);

 }

 //?If load not found then error
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // OR PAR.Load Status is Shipped or Invoiced
 OR PAR.Load_Status = 'I'/'S';

 // PAR.GAF Error Code = CND.Error
 PAR.GAF_Error_Code = 'E';

 ENDIF;

 //?Validate truck ready date
 CASE;

 // IF DB1.GAF Truck Ready Date is Entered
 IF DB1.GAF_Truck_Ready_Date <> *ZERO;

 EXECUTE FUNCTION(VAL Date               RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1418516;
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.GAF_Truck_Ready_Date);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.GAF Error Code = CND.Error
 PAR.GAF_Error_Code = 'E';

 ENDIF;

 ENDIF;

 //?Validate BOL Complete date
 CASE;

 // IF DB1.GAF BOL Complete Date is Entered
 IF DB1.GAF_BOL_Complete_Date <> *ZERO;

 EXECUTE FUNCTION(VAL Date               RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1418516;
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.GAF_BOL_Complete_Date);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.GAF Error Code = CND.Error
 PAR.GAF_Error_Code = 'E';

 ENDIF;

 ENDIF;

 //?Validate BOL Received date
 CASE;

 // IF DB1.GAF BOL Received Date is Entered
 IF DB1.GAF_BOL_Received_Date <> *ZERO;

 EXECUTE FUNCTION(VAL Date               RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1418516;
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.GAF_BOL_Received_Date);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.GAF Error Code = CND.Error
 PAR.GAF_Error_Code = 'E';

 ENDIF;

 ENDIF;

 //?Validate truck depart date
 CASE;

 // IF DB1.GAF Truck Departure Date is Entered
 IF DB1.GAF_Truck_Departure_Date <> *ZERO;

 EXECUTE FUNCTION(VAL Date               RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1418516;
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.GAF_Truck_Departure_Date);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.GAF Error Code = CND.Error
 PAR.GAF_Error_Code = 'E';

 ENDIF;

 ENDIF;

 //?If record not in error then process
 CASE;

 // IF PAR.GAF Error Code is Blank
 IF PAR.GAF_Error_Code = *BLANK;

 // PAR.GAF Process Code = CND.Yes
 PAR.GAF_Process_Code = 'Y';

 EXECUTE FUNCTION(RTV for A/S BOL Print  RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1463554;
 PARAMETER(DB1.GAF_Load_Id_Numeric);
 PARAMETER(PAR.Load_Status);
 PARAMETER(PAR.Total_Load_Miles);
 PARAMETER(NLL.BOL_Complete_Date);
 PARAMETER(NLL.BOL_Complete_Time);
 PARAMETER(PAR.Scheduled_Delivery_Date);
 PARAMETER(PAR.Scheduled_Delivery_Time);
 PARAMETER(NLL.EDI_Status_1);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Calculate Sched Delivery date
 CASE;

 // IF PAR.Total Load Miles EQ WRK.ZERO
 IF PAR.Total_Load_Miles = WRK.ZERO;

 //?update scheduled delivery date/time to be NOW
 // PAR.Scheduled Delivery Date = JOB.*Job date
 PAR.Scheduled_Delivery_Date = JOB.*Job_date;

 // PAR.Scheduled Delivery Time = JOB.*Job time
 PAR.Scheduled_Delivery_Time = JOB.*Job_time;

 //?Calculate Sched Delivery date
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(CLC Sched Delivery D/T IF) TYPE(EXCINTFUN)                     AC1456041;
 PARAMETER(DB1.GAF_Load_Id_Numeric);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Scheduled_Delivery_Date);
 PARAMETER(PAR.Scheduled_Delivery_Time);
 {
  //?Execute internal function

  // PAR.Scheduled Delivery Date = JOB.*Job date
  PAR.Scheduled_Delivery_Date = JOB.*Job_date;

  // PAR.Scheduled Delivery Time = JOB.*Job time
  PAR.Scheduled_Delivery_Time = JOB.*Job_time;

  EXECUTE FUNCTION(RTV 1st Stop Mile,Dlv  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1459457;
  PARAMETER(PAR.Load_ID);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Miles_to_next_stop);
  PARAMETER(PAR.Requested_Delivery_Date);
  PARAMETER(PAR.Requested_Delivery_Time);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   EXECUTE FUNCTION(Rtv Delivery Date/Time RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1445871;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.TXT_field_not_needed);
   PARAMETER(WRK.TXT_field_not_needed);
   PARAMETER(WRK.TXT_field_not_needed);
   PARAMETER(PAR.Requested_Delivery_Date);
   PARAMETER(PAR.Requested_Delivery_Time);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   QUIT;

  }

  //?requested delivery time is hh:mm, needs to be hh:mm:ss
  // PAR.Unused Time 2 = PAR.Requested Delivery Time * CON.100 *
  PAR.Deadline_Depart_Time_HDR = PAR.Requested_Delivery_Time * 100;

  EXECUTE FUNCTION(RTV Legal Run Miles DscRT) TYPE(RTVOBJ) FILE(PDLGCPP)          AC1456042;
  PARAMETER(PAR.Miles_to_next_stop);
  PARAMETER(PAR.Hours_Required);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?get number of whole days + remaining hours
  //?Calculate # whole days + hours left
  CASE;

  // IF PAR.Hours Required is Less than 1 day
  IF PAR.Hours_Required < 24;

  // PAR.@Days 5 = CON.*ZERO
  PAR.@Days_5 = *ZERO;

  // PAR.USR Hours Remaining = PAR.Hours Required
  PAR.USR_Hours_Remaining = PAR.Hours_Required;

  //?Calculate # whole days + hours left
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.@Days 5 = PAR.Hours Required / CON.24 USR Hours Remaining
  PAR.@Days_5 = PAR.Hours_Required / 24 ,REMAINDER: PAR.USR_Hours_Remaining;

  ENDIF;

  //?Add # whole days to current date
  CASE;

  // IF PAR.@Days 5 EQ WRK.ZERO
  IF PAR.@Days_5 = WRK.ZERO;

  //?Add # whole days to current date
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Scheduled Delivery Date = PAR.Scheduled Delivery Date + PAR.@Days 5 *DAYS
  PAR.Scheduled_Delivery_Date = DATEINCR(PAR.Scheduled_Delivery_Date PAR.@Days_5 'DY'
  1111111 'NONE' 'N' 1);

  ENDIF;

  // WRK.Scheduled Delivery Time = CON.*ZERO + PAR.USR Hours Remaining *HOURS
  WRK.Scheduled_Delivery_Time = TIMEINCR(*ZERO PAR.USR_Hours_Remaining 'HR');

  // PAR.USR Hours Remaining = WRK.Scheduled Delivery Time *HOURS
  PAR.USR_Hours_Remaining = TIMEDTLS(WRK.Scheduled_Delivery_Time 'HR');

  //?Calculate scheduled delivery time; recalc date if past midnight
  CASE;

  // IF PAR.USR Hours Remaining is Not Zero
  IF PAR.USR_Hours_Remaining <> *ZERO;

  // PAR.Estimated Arrival Time = CON.240000 - PAR.Scheduled Delivery Time *HHMMSS
  PAR.Estimated_Arrival_Time = TIMELAPSED(240000 PAR.Scheduled_Delivery_Time 'HS');

  // PAR.USR Hours to Midnight = PAR.Estimated Arrival Time *HOURS
  PAR.USR_Hours_to_Midnight = TIMEDTLS(PAR.Estimated_Arrival_Time 'HR');

  // WRK.USR Period = PAR.Estimated Arrival Time *MINUTES
  WRK.USR_Period = TIMEDTLS(PAR.Estimated_Arrival_Time 'MN');

  // Synon (15,2) work field =       * calc minutes % hour
  PGM.*Synon_152_work_field = ( 60 - WRK.USR_Period ) / 60;

  // calc hours to midnight
  PAR.USR_Hours_to_Midnight = PAR.USR_Hours_to_Midnight + PGM.*Synon_152_work_field;

  //?Add to date if going past midnight
  CASE;

  // IF PAR.USR Hours to Midnight LT PAR.USR Hours Remaining
  IF PAR.USR_Hours_to_Midnight < PAR.USR_Hours_Remaining;

  // PAR.Scheduled Delivery Date = PAR.Scheduled Delivery Date + CON.1 *DAYS
  PAR.Scheduled_Delivery_Date = DATEINCR(PAR.Scheduled_Delivery_Date 1 'DY' 1111111 'NONE'
  'N' 1);

  // PAR.USR Hours Remaining = PAR.USR Hours Remaining - PAR.USR Hours to Midnight
  PAR.USR_Hours_Remaining = PAR.USR_Hours_Remaining - PAR.USR_Hours_to_Midnight;

  // PAR.Scheduled Delivery Time = CON.*ZERO + PAR.USR Hours Remaining *HOURS
  PAR.Scheduled_Delivery_Time = TIMEINCR(*ZERO PAR.USR_Hours_Remaining 'HR');

  //?Add to date if going past midnight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Scheduled Delivery Time = PAR.Scheduled Delivery Time + PAR.USR Hours Remain
  PAR.Scheduled_Delivery_Time = TIMEINCR(PAR.Scheduled_Delivery_Time
  PAR.USR_Hours_Remaining 'HR');

  ENDIF;

  ENDIF;

  //?If sched delivery Date/Time < rqs. delivery date/time, use rqs.
  CASE;

  // IF PAR.Scheduled Delivery Date LT PAR.Requested Delivery Date
  IF PAR.Scheduled_Delivery_Date < PAR.Requested_Delivery_Date;

  // PAR.Scheduled Delivery Date = PAR.Requested Delivery Date
  PAR.Scheduled_Delivery_Date = PAR.Requested_Delivery_Date;

  // PAR.Scheduled Delivery Time = PAR.Unused Time 2
  PAR.Scheduled_Delivery_Time = PAR.Deadline_Depart_Time_HDR;

  //?If sched delivery Date/Time < rqs. delivery date/time, use rqs.
  // IF PAR.Scheduled Delivery Date EQ PAR.Requested Delivery Date
  IF PAR.Scheduled_Delivery_Date = PAR.Requested_Delivery_Date;

  // AND PAR.Scheduled Delivery Time LT PAR.Unused Time 2
  AND PAR.Scheduled_Delivery_Time < PAR.Deadline_Depart_Time_HDR;

  // PAR.Scheduled Delivery Date = PAR.Requested Delivery Date
  PAR.Scheduled_Delivery_Date = PAR.Requested_Delivery_Date;

  // PAR.Scheduled Delivery Time = PAR.Unused Time 2
  PAR.Scheduled_Delivery_Time = PAR.Deadline_Depart_Time_HDR;

  //?If sched delivery Date/Time < rqs. delivery date/time, use rqs.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?   use calculated scheduled delivery date/time
  ENDIF;

 }

 ENDIF;

 //?If Bol date not entered use job date
 CASE;

 // IF DB1.GAF BOL Complete Date is Not Entered
 IF DB1.GAF_BOL_Complete_Date = *ZERO;

 // PAR.GAF BOL Complete Date = JOB.*Job date
 PAR.GAF_BOL_Complete_Date = JOB.*Job_date;

 //?If Bol date not entered use job date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.GAF BOL Complete Date = DB1.GAF BOL Complete Date
 PAR.GAF_BOL_Complete_Date = DB1.GAF_BOL_Complete_Date;

 ENDIF;

 //?If Bol time not entered use job time
 CASE;

 // IF DB1.GAF BOL Complete Time is Not Entered
 IF DB1.GAF_BOL_Complete_Time = 0;

 // PAR.GAF BOL Complete Time = JOB.*Job time
 PAR.GAF_BOL_Complete_Time = JOB.*Job_time;

 //?If Bol time not entered use job time
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.GAF BOL Complete Time = DB1.GAF BOL Complete Time
 PAR.GAF_BOL_Complete_Time = DB1.GAF_BOL_Complete_Time;

 ENDIF;

 //?Check and see if all orders on load have shipped.
 EXECUTE FUNCTION(RTV All Ords Shipped?  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1366564;
 PARAMETER(DB1.GAF_Load_Id_Numeric);
 PARAMETER(PAR.Status_Y_or_N);
 {
  //?USER: Initialize routine

  // PAR.Status - Y or N = CND.yes
  PAR.Status_Y_or_N = 'Y';

  //?USER: Process Data record

  //?Assume all orders are shipped, unless find one that isn't
  EXECUTE FUNCTION(RTV Order Status       RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1131568;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Header_Status);
  PARAMETER(WRK.TXT_field_not_needed);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.Header Status is Conf/Comp/Canc
  IF PAR.Header_Status = 'X'/'C'/'R';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Status - Y or N = CND.no
  PAR.Status_Y_or_N = 'N';

  QUIT;

  ENDIF;

 }

 //?If all orders have shipped then update load & ship Sts to shipped
 CASE;

 // IF PAR.Status - Y or N is yes
 IF PAR.Status_Y_or_N = 'Y';

 //?Update load header with Accu-Sort Data - Change Load & ship sts
 EXECUTE FUNCTION(RTV Act ShpDt Last Ord RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1444830;
 PARAMETER(DB1.GAF_Load_Id_Numeric);
 PARAMETER(9999);
 PARAMETER(LCL.Actual_Ship_Date);
 PARAMETER(NLL.Ship_To_Name);
 PARAMETER(NLL.Ship_To_City);
 PARAMETER(NLL.Ship_To_State_Code);
 {
  //?USER: Initialize routine

  // PAR.Actual Shipped Date = CON.*ZERO
  PAR.Actual_Shipped_Date = *ZERO;

  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Actual Ship Date  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1444831;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Ship_To_Name);
  PARAMETER(PAR.Ship_To_City);
  PARAMETER(PAR.Ship_To_State_Code);
  PARAMETER(WRK.Actual_Shipped_Date);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Actual Shipped Date GT PAR.Actual Shipped Date
  IF WRK.Actual_Shipped_Date > PAR.Actual_Shipped_Date;

  // PAR.Actual Shipped Date = WRK.Actual Shipped Date
  PAR.Actual_Shipped_Date = WRK.Actual_Shipped_Date;

  ENDIF;

 }

 // WRK.Departure Time = JOB.*Job time / CON.100 *
 WRK.Departure_Time = JOB.*Job_time / 100;

 EXECUTE FUNCTION(CHG Ship GAF Load     CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC1579531;
 PARAMETER(DB1.GAF_Load_Id_Numeric);
 PARAMETER('S');
 PARAMETER(DB1.GAF_Reefer_Temperature);
 PARAMETER(DB1.Seal_1);
 PARAMETER(DB1.Seal_2);
 PARAMETER(DB1.Seal_3);
 PARAMETER(DB1.Trailer_Id);
 PARAMETER('S');
 PARAMETER(DB1.GAF_No_Pallets_Received);
 PARAMETER(DB1.GAF_No_Pallets_Loaded);
 PARAMETER(JOB.*Job_date);
 PARAMETER(WRK.Departure_Time);
 PARAMETER(DB1.GAF_No_Pallets_Unservice);
 PARAMETER(DB1.Recorder_ID);
 PARAMETER(LCL.Actual_Ship_Date);
 PARAMETER(DB1.GAF_Truck_Ready_Date);
 PARAMETER(DB1.GAF_Truck_Ready_Time);
 PARAMETER(PAR.GAF_BOL_Complete_Date);
 PARAMETER(PAR.GAF_BOL_Complete_Time);
 PARAMETER(DB1.GAF_BOL_Received_Date);
 PARAMETER(DB1.GAF_BOL_Received_Time);
 PARAMETER(DB1.GAF_Truck_Departure_Date);
 PARAMETER(DB1.Gaf_Truck_Departure_Time);
 PARAMETER(PAR.Scheduled_Delivery_Date);
 PARAMETER(PAR.Scheduled_Delivery_Time);
 PARAMETER('M');
 {
  //?USER: Processing after Data read

  //?Save copy of fields written to Load Order Change Log
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Scheduled Delivery Date = DB1.Scheduled Delivery Date
  LCL.Scheduled_Delivery_Date = DB1.Scheduled_Delivery_Date;

  ENDIF;

  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  //?Check fields for Load Order Header Change Log
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Scheduled Delivery Date
  CASE;

  // IF PAR.Scheduled Delivery Date NE LCL.Scheduled Delivery Date
  IF PAR.Scheduled_Delivery_Date <> LCL.Scheduled_Delivery_Date;

  //?Convert dates to character
  // LCL.Date From Alpha       USR = CVTVAR(LCL.Scheduled Delivery Date)
  LCL.Date_From_Alpha_USR = CVTVAR(LCL.Scheduled_Delivery_Date);

  // LCL.Date To Alpha         USR = CVTVAR(PAR.Scheduled Delivery Date)
  LCL.Date_To_Alpha_USR = CVTVAR(PAR.Scheduled_Delivery_Date);

  // Call program CRT Load/Order Chg Log XF.
  CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
  PARAMETER(DB1.Load_ID);
  PARAMETER(*ZERO);
  PARAMETER('SCHDLV');
  PARAMETER('TRF');
  PARAMETER(LCL.Date_From_Alpha_USR);
  PARAMETER(LCL.Date_To_Alpha_USR);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Company_Number);
  PARAMETER(*ZERO);

  ENDIF;

  ENDIF;

 }

 //?If all orders have shipped then update load & ship Sts to shipped
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Update load header with Accu-Sort Data - Don't change Load & ship sts
 // WRK.Departure Time = JOB.*Job time / CON.100 *
 WRK.Departure_Time = JOB.*Job_time / 100;

 EXECUTE FUNCTION(CHG Shp GAF LD/No Sts CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC1407065;
 PARAMETER(DB1.GAF_Load_Id_Numeric);
 PARAMETER(DB1.GAF_Reefer_Temperature);
 PARAMETER(DB1.Seal_1);
 PARAMETER(DB1.Seal_2);
 PARAMETER(DB1.Seal_3);
 PARAMETER(DB1.Trailer_Id);
 PARAMETER(DB1.GAF_No_Pallets_Received);
 PARAMETER(DB1.GAF_No_Pallets_Loaded);
 PARAMETER(JOB.*Job_date);
 PARAMETER(WRK.Departure_Time);
 PARAMETER(DB1.GAF_No_Pallets_Unservice);
 PARAMETER(DB1.Recorder_ID);
 PARAMETER(DB1.GAF_Truck_Ready_Date);
 PARAMETER(DB1.GAF_Truck_Ready_Time);
 PARAMETER(PAR.GAF_BOL_Complete_Date);
 PARAMETER(PAR.GAF_BOL_Complete_Time);
 PARAMETER(DB1.GAF_BOL_Received_Date);
 PARAMETER(DB1.GAF_BOL_Received_Time);
 PARAMETER(DB1.GAF_Truck_Departure_Date);
 PARAMETER(DB1.Gaf_Truck_Departure_Time);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 //?If record not in error then process
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.GAF Process Code = CND.No
 PAR.GAF_Process_Code = 'N';

 ENDIF;

 EXECUTE FUNCTION(Val Load Exists        RT) TYPE(RTVOBJ) FILE(POADCPP)          AC1579535;
 PARAMETER(DB1.GAF_Customer_Number);
 PARAMETER(DB1.GAF_Load_Id_Numeric);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

 }

 //?If load does not exists in history then write history record.
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 EXECUTE FUNCTION(Crt GAF Ship Load Hdr  CR) TYPE(CRTOBJ) FILE(POADCPP)          AC1579532;
 PARAMETER(DB1.GAF_Customer_Number);
 PARAMETER(DB1.GAF_Load_Id_Numeric);
 PARAMETER(DB1.GAF_Reefer_Temperature);
 PARAMETER(DB1.Seal_1);
 PARAMETER(DB1.Seal_2);
 PARAMETER(DB1.Seal_3);
 PARAMETER(DB1.GAF_No_Pallets_Loaded);
 PARAMETER(DB1.GAF_No_Pallets_Received);
 PARAMETER(DB1.GAF_No_Pallets_Unservice);
 PARAMETER(DB1.Trailer_Id);
 PARAMETER(DB1.Recorder_ID);
 PARAMETER(DB1.GAF_Truck_Ready_Date);
 PARAMETER(DB1.GAF_Truck_Ready_Time);
 PARAMETER(DB1.GAF_BOL_Complete_Date);
 PARAMETER(DB1.GAF_BOL_Complete_Time);
 PARAMETER(DB1.GAF_BOL_Received_Date);
 PARAMETER(DB1.GAF_BOL_Received_Time);
 PARAMETER(DB1.GAF_Truck_Departure_Date);
 PARAMETER(DB1.Gaf_Truck_Departure_Time);
 PARAMETER(PAR.GAF_Process_Code);
 PARAMETER(PAR.GAF_Error_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

}


