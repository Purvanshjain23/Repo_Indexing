// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMKTE1R
// ?Date: 14.08.2025 Time: 03:43:21
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?E6218 JJH 08/01/16 - Added Exit Program after confirm prompt.
ENDDO;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('C/S');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

//?USER: Initialize key screen

// KEY.PCG Code = PAR.PCG Code
KEY.PCG_Code = PAR.PCG_Code;

// KEY.PCG Library = PAR.PCG Library
KEY.PCG_From_Library = PAR.PCG_From_Library;

// KEY.Purge Application Code = PAR.Purge Application Code
KEY.Purge_Application_Code = PAR.Purge_Application_Code;

//?USER: Validate key screen

//?** Model Code Required
CASE;

// IF KEY.PCG Code is *Blanks
IF KEY.PCG_Code = *BLANK;

// Send error message - 'Purge Control Group code cannot be blank'
ERROR(USR3780);
MSGPARM(KEY.PCG_Code);

ENDIF;

//?** Library required
CASE;

// IF KEY.PCG Library is *Blanks
IF KEY.PCG_From_Library = *BLANK;

// Send error message - 'Purge Control Group Library is required'
ERROR(USR3781);
MSGPARM(KEY.PCG_From_Library);

ENDIF;

//?** Purge Application Code required
CASE;

// IF KEY.Purge Application Code is Blank
IF KEY.Purge_Application_Code = *BLANK;

// Send error message - 'Purge Control Application not found.'
ERROR(USR2529);
MSGPARM(KEY.Purge_Application_Code);

ENDIF;

//?USER: Initialize detail screen (new record)

// DTL.PCG Code = KEY.PCG Code
DTL.PCG_Code = KEY.PCG_Code;

// DTL.PCG Library = KEY.PCG Library
DTL.PCG_From_Library = KEY.PCG_From_Library;

// DTL.Purge Application Code = KEY.Purge Application Code
DTL.Purge_Application_Code = KEY.Purge_Application_Code;

// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

// DTL.Condition Name 10 USR = Condition name of DTL.Record Status
DTL.Condition_Name_10_USR = RTVCND(DTL.Record_Status);

// DTL.PCA Purge Method = CND.Tape
DTL.PCA_Purge_Method = 'T';

// DTL.Text 10A USR = Condition name of DTL.PCA Purge Method
DTL.Text_10A_USR = RTVCND(DTL.PCA_Purge_Method);

//?USER: Initialize detail screen (existing record)

// DTL.Description. . . . . . . = Condition name of DTL.PCG Code
DTL.Description = RTVCND(DTL.PCG_Code);

CASE;

// IF DTL.Description. . . . . . . is Blank
IF DTL.Description = *BLANK;

EXECUTE FUNCTION(RTV Purge Ctl Grp Desc RT) TYPE(RTVOBJ) FILE(PMBEREP)          AC1839888;
PARAMETER(DTL.PCG_Code);
PARAMETER(DTL.Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// DTL.Text USR = Condition name of DTL.Purge Run Frequency
DTL.Text_USR = RTVCND(DTL.Purge_Run_Frequency);

// DTL.Text 10A USR = Condition name of DTL.PCA Purge Method
DTL.Text_10A_USR = RTVCND(DTL.PCA_Purge_Method);

// DTL.Condition Name 10 USR = Condition name of DTL.Record Status
DTL.Condition_Name_10_USR = RTVCND(DTL.Record_Status);

//?USER: Validate detail screen fields

CASE;

// IF DTL.PCA Purge Method is *ALL values
IF DTL.PCA_Purge_Method = 'T'/'D'/'H'/'C';

// DTL.Text 10A USR = Condition name of DTL.PCA Purge Method
DTL.Text_10A_USR = RTVCND(DTL.PCA_Purge_Method);

ENDIF;

//?USER: Validate detail screen relations

//?** Cannot delete if matching Purge Control File recs exist
CASE;

// IF DTL.*CMD key is *Delete
IF DTL.*CMD_key = '11';

EXECUTE FUNCTION(RTV Val Purge Files    RT) TYPE(RTVOBJ) FILE(PDLQREP)          AC1839703;
PARAMETER(DTL.PCG_Code);
PARAMETER(DTL.PCG_From_Library);
PARAMETER(DTL.Purge_Application_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// Send error message - 'Purge Control File records exist - cannot delete at this time.'
ERROR(USR3776);
MSGPARM(DTL.PCG_Code);
MSGPARM(DTL.PCG_From_Library);
MSGPARM(DTL.Purge_Application_Code);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(DEL Purge Control      DL) TYPE(DLTOBJ) FILE(PDLPREP)          AC1477882;
PARAMETER(DTL.PCG_Code);
PARAMETER(DTL.PCG_From_Library);
PARAMETER(DTL.Purge_Application_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(CRT Purge Control      CR) TYPE(CRTOBJ) FILE(PDLPREP)          AC1477880;
PARAMETER(DTL.PCG_Code);
PARAMETER(DTL.PCG_From_Library);
PARAMETER(DTL.Purge_Application_Code);
PARAMETER(DTL.Purge_Retention_Period);
PARAMETER(DTL.Purge_Run_Frequency);
PARAMETER(DTL.Purge_Last_Run_Date);
PARAMETER(DTL.PCA_Purge_Method);
PARAMETER(DTL.PCA_Purge_Program);
PARAMETER(DTL.Unused_Date);
PARAMETER(DTL.Unused_Date_2);
PARAMETER(DTL.Unused_Number_1);
PARAMETER(DTL.Unused_Text_1);
PARAMETER(DTL.SSI_Download_Flag);
PARAMETER(DTL.unused_status_2);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Create_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG Purge Control      CH) TYPE(CHGOBJ) FILE(PDLPREP)          AC1477881;
PARAMETER(DTL.PCG_Code);
PARAMETER(DTL.PCG_From_Library);
PARAMETER(DTL.Purge_Application_Code);
PARAMETER(DTL.Purge_Retention_Period);
PARAMETER(DTL.Purge_Run_Frequency);
PARAMETER(DTL.Purge_Last_Run_Date);
PARAMETER(DTL.PCA_Purge_Method);
PARAMETER(DTL.PCA_Purge_Program);
PARAMETER(DTL.Unused_Date);
PARAMETER(DTL.Unused_Date_2);
PARAMETER(DTL.Unused_Number_1);
PARAMETER(DTL.Unused_Text_1);
PARAMETER(DTL.SSI_Download_Flag);
PARAMETER(DTL.unused_status_2);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 PARAMETER(DB1.Change_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Process command keys

PGM.*Return_code = *BLANK;

RETURN;

//?USER: Exit program processing

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

