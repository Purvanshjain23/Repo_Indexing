// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMQ7E1R
// ?Date: 14.08.2025 Time: 03:43:50
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize key screen

CASE;

// IF KEY.Contact Type Code is Not Entered
IF KEY.Contact_Type_Code = *BLANK;

// Call program Sel Contact Type      SR.
CALL PROGRAM(Sel Contact Type      SR) ('CAMISRR');
PARAMETER(KEY.Contact_Type_Code);

ENDIF;

//?USER: Validate key screen

CASE;

// IF KEY.Contact Type Code is Not Entered
IF KEY.Contact_Type_Code = *BLANK;

// Call program Sel Contact Type      SR.
CALL PROGRAM(Sel Contact Type      SR) ('CAMISRR');
PARAMETER(KEY.Contact_Type_Code);

ENDIF;

//?USER: Initialize detail screen (new record)

EXECUTE FUNCTION(RTV Contact Type Desc RT) TYPE(RTVOBJ) FILE(CAEDREP)           AC1162762;
PARAMETER(DTL.Contact_Type_Code);
PARAMETER(DTL.Description);
PARAMETER(LCL.Broker_Required);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Ship To Name = PAR.Ship To Name
DTL.Ship_To_Name = PAR.Ship_To_Name;

//?USER: Initialize detail screen (existing record)

// DTL.Ship To Name = PAR.Ship To Name
DTL.Ship_To_Name = PAR.Ship_To_Name;

EXECUTE FUNCTION(RTV DFT Retrieve      RT) TYPE(RTVOBJ) FILE(CAD0REP)           AC1164483;
PARAMETER(DTL.Contact_Number);
PARAMETER(DTL.Primary_Contact_Name);
PARAMETER(NLL.Primary_Contact_Salutatio);
PARAMETER(NLL.Primary_Contact_Bus_Title);
PARAMETER(NLL.Telephone_Number_FF);
PARAMETER(NLL.Address_Line_1);
PARAMETER(NLL.Address_Line_2);
PARAMETER(NLL.Address_Line_3);
PARAMETER(NLL.City);
PARAMETER(NLL.Zip_Postal_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.Broker Code is Entered
IF DTL.Broker_Code <> *BLANK;

EXECUTE FUNCTION(Rtv Broker Name Act   RT) TYPE(RTVOBJ) FILE(POC5REP)           AC1938855;
PARAMETER(DTL.Broker_Code);
PARAMETER(DTL.Broker_Name_DRV);
PARAMETER(LCL.Record_Status);
{
 //?USER: Initialize routine

 //?modification history
 DO;

 //?E00360 slm 06/16/09 Broker/Inactive rules
 ENDDO;

 // PAR.Record Status = CND.*blank
 PAR.Record_Status = *BLANK;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Record Status is Inactive
IF LCL.Record_Status = 'I';

// Send error message - 'Broker is Inactive'
ERROR(USR4166);
MSGPARM(DTL.Broker_Code);

ENDIF;

ENDIF;

//?USER: Validate detail screen fields

EXECUTE FUNCTION(RTV Contact Type Desc RT) TYPE(RTVOBJ) FILE(CAEDREP)           AC1162762;
PARAMETER(DTL.Contact_Type_Code);
PARAMETER(DTL.Description);
PARAMETER(LCL.Broker_Required);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Broker Required is yes
IF LCL.Broker_Required = 'Y';

CASE;

// IF DTL.Broker Code is Not entered
IF DTL.Broker_Code = *BLANK;

// Send error message - 'Broker is required.'
ERROR(USR3868);
MSGPARM(DTL.Broker_Code);

ENDIF;

ENDIF;

CASE;

// IF DTL.Broker Code is Not entered
IF DTL.Broker_Code = *BLANK;

EXECUTE FUNCTION(Rtv Broker Name Act   RT) TYPE(RTVOBJ) FILE(POC5REP)           AC1938855;
PARAMETER(DTL.Broker_Code);
PARAMETER(DTL.Broker_Name_DRV);
PARAMETER(LCL.Record_Status);
{
 //?USER: Initialize routine

 //?modification history
 DO;

 //?E00360 slm 06/16/09 Broker/Inactive rules
 ENDDO;

 // PAR.Record Status = CND.*blank
 PAR.Record_Status = *BLANK;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Record Status is Inactive
IF LCL.Record_Status = 'I';

// Send error message - 'Broker is Inactive'
ERROR(USR4166);
MSGPARM(DTL.Broker_Code);

ENDIF;

ENDIF;

//?CALC: Detail screen function fields

CASE;

// IF DTL.Contact Number is Not equal to zero
IF DTL.Contact_Number <> *ZERO;

EXECUTE FUNCTION(RTV DFT Retrieve      RT) TYPE(RTVOBJ) FILE(CAD0REP)           AC1164483;
PARAMETER(DTL.Contact_Number);
PARAMETER(DTL.Primary_Contact_Name);
PARAMETER(NLL.Primary_Contact_Salutatio);
PARAMETER(NLL.Primary_Contact_Bus_Title);
PARAMETER(NLL.Telephone_Number_FF);
PARAMETER(NLL.Address_Line_1);
PARAMETER(NLL.Address_Line_2);
PARAMETER(NLL.Address_Line_3);
PARAMETER(NLL.City);
PARAMETER(NLL.Zip_Postal_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

CASE;

// IF DTL.Broker Code is Entered
IF DTL.Broker_Code <> *BLANK;

EXECUTE FUNCTION(Rtv Broker Name Act   RT) TYPE(RTVOBJ) FILE(POC5REP)           AC1938855;
PARAMETER(DTL.Broker_Code);
PARAMETER(DTL.Broker_Name_DRV);
PARAMETER(LCL.Record_Status);
{
 //?USER: Initialize routine

 //?modification history
 DO;

 //?E00360 slm 06/16/09 Broker/Inactive rules
 ENDDO;

 // PAR.Record Status = CND.*blank
 PAR.Record_Status = *BLANK;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Record Status is Inactive
IF LCL.Record_Status = 'I';

// Send error message - 'Broker is Inactive'
ERROR(USR4166);
MSGPARM(DTL.Broker_Code);

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Customer Contact  IF) TYPE(EXCINTFUN) FILE(CAEMCPP)        AC1860999;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Contact_Type_Code);
PARAMETER(DTL.Contact_Number);
PARAMETER(DTL.Broker_Code);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV Next Sequence #   RT) TYPE(RTVOBJ) FILE(CAEMCPP)           AC1160093;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Contact_Sequence_Number);
 {
  //?USER: Processing if Data record not found

  // PAR.Contact Sequence Number = CON.1
  PAR.Contact_Sequence_Number = 1;

  //?USER: Process Data record

  // PAR.Contact Sequence Number = DB1.Contact Sequence Number + CON.1
  PAR.Contact_Sequence_Number = DB1.Contact_Sequence_Number + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Customer Contact  CR) TYPE(CRTOBJ) FILE(CAEMCPP)           AC1159588;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Contact_Sequence_Number);
 PARAMETER(PAR.Contact_Type_Code);
 PARAMETER(PAR.Contact_Number);
 PARAMETER(PAR.Broker_Code);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Customer Contact  CH) TYPE(CHGOBJ) FILE(CAEMCPP)           AC1860945;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Contact_Sequence_Number);
PARAMETER(DTL.Contact_Type_Code);
PARAMETER(DTL.Contact_Number);
PARAMETER(DTL.Broker_Code);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Job_Time);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Job_Date);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


