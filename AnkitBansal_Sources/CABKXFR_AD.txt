// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for CABKXFR
// ?Date: 14.08.2025 Time: 03:26:14
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Maintain Calendar for range of dates
//?Send status message to indicate ongoing activity
// Send status message - 'Selected calendar activity being processed'
MESSAGE(USR0046 *STATUS);

// PAR.USR Current Date = PAR.USR From Date
PAR.USR_Current_Date = PAR.USR_From_Date;

// WRK.Week Number = PAR.Week Number
WRK.Week_Number = PAR.Week_Number;

// PAR.Week Number 2.0 USR = PAR.Week Number
PAR.Week_Number_2_0_USR = PAR.Week_Number;

// WRK.Accounting Period Code = PAR.Accounting Period Code
WRK.Accounting_Period_Code = PAR.Accounting_Period_Code;

// WRK.Accounting Year Code = PAR.Accounting Year Code
WRK.Accounting_Year_Code = PAR.Accounting_Year_Code;

//?Set up values for build mode
CASE;

// IF PAR.USR Program mode Calendar is Build Date Values
IF PAR.USR_Program_mode_Calendar = '1';

//?First week's summary record
EXECUTE FUNCTION(CRT Build Calendar     CR) TYPE(CRTOBJ) FILE(CAATREP)          AC1264771;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Accounting_Year_Code);
PARAMETER(PAR.Accounting_Period_Code);
PARAMETER(PAR.Week_Number);
PARAMETER(PAR.Period_Beginning_Date);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // DB1.Period Close Status = CND.Open
 DB1.Period_Close_Status = 'O';

 // DB1.Period Ending Date = CON.*ZERO
 DB1.Period_Ending_Date = *ZERO;

}


// PAR.@Status Y or N = CND.no
PAR.FAX_DTL_Status_4 = 'N';

//?Set up day of week for 1st day
DO;

//?the days of week returned go from Monday=1 thru Sunday=7
// WRK.USR Day of Week Number = PAR.USR Current Date *DAY OF WEEK
WRK.USR_Day_of_Week_Number = DATEDTLS(PAR.USR_Current_Date 'DW' 1111111 'NONE' 'N' 1);

CASE;

// IF WRK.USR Day of Week Number is Saturday
IF WRK.USR_Day_of_Week_Number = 7;

// WRK.USR Day of Week Number = CON.1
WRK.USR_Day_of_Week_Number = 1;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Day of Week Number = WRK.USR Day of Week Number + CON.1
WRK.USR_Day_of_Week_Number = WRK.USR_Day_of_Week_Number + 1;

ENDIF;

// WRK.CD7 Ext Numeric Key = CVTVAR(WRK.USR Day of Week Number)
WRK.CD7_Ext_Numeric_Key = CVTVAR(WRK.USR_Day_of_Week_Number);

// WRK.Day of Week = SUBSTRING(WRK.CD7 Ext Numeric Key,CON.7,CON.1)
WRK.Day_of_Week = SUBSTRING(WRK.CD7_Ext_Numeric_Key:7:1);

ENDDO;

ENDIF;

//?REPEATE WHILE
// DOW PAR.USR Current Date LE PAR.USR Through Date
DOW PAR.USR_Current_Date <= PAR.USR_Through_Date;

//?Retrieve object and determine required processing
//?Compute julian date
DO;

// WRK.USR Day of Year = PAR.USR Current Date *DAY OF YEAR
WRK.USR_Day_of_Year = DATEDTLS(PAR.USR_Current_Date 'DY' 1111111 'NONE' 'N' 1);

// WRK.USR Year = PAR.USR Current Date *YEAR
WRK.USR_Year = DATEDTLS(PAR.USR_Current_Date 'YR' 1111111 'NONE' 'N' 1);

// Compute Julian Date
PAR.USR_From_Julian_Date = ( WRK.USR_Year * 1000 ) + WRK.USR_Day_of_Year;

ENDDO;

EXECUTE FUNCTION(RTV Calendar           RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1102049;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.USR_Current_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.Calendar not found
 PGM.*Return_code = 'USR0018';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?---- Process based on mode passed to this function ----
//?Set-up Kill Day Sts, Production Day Sts, Public Holiday Sts
CASE;

// IF WRK.Day of Week is Saturday
IF WRK.Day_of_Week = '7';

// WRK.Kill Day Status = PAR.Status Flag 1  Y/N
WRK.Kill_Day_Status = PAR.Status_Flag_1_Y_N;

// WRK.Production Day Status = PAR.Status Flag 2  Y/N
WRK.Production_Day_Status = PAR.Status_Flag_2_Y_N;

// WRK.Public Holiday Status = CND.no
WRK.Public_Holiday_Status = 'N';

//?Set-up Kill Day Sts, Production Day Sts, Public Holiday Sts
// IF WRK.Day of Week is Sunday
IF WRK.Day_of_Week = '1';

// WRK.Kill Day Status = PAR.Status Flag 3  Y/N
WRK.Kill_Day_Status = PAR.Status_Flag_3_Y_N;

// WRK.Production Day Status = PAR.Status Flag 4  Y/N
WRK.Production_Day_Status = PAR.Status_Flag_4_Y_N;

// WRK.Public Holiday Status = CND.no
WRK.Public_Holiday_Status = 'N';

//?Set-up Kill Day Sts, Production Day Sts, Public Holiday Sts
// IF *OTHERWISE
IF *OTHERWISE;

//?If Holiday set to 'N', Otherwise set to 'Y'
CASE;

// IF PAR.USR Current Date EQ PAR.USR Day 1
IF PAR.USR_Current_Date = PAR.USR_Day_1;

// OR PAR.USR Current Date EQ PAR.USR Day 2
OR PAR.USR_Current_Date = PAR.USR_Day_2;

// OR PAR.USR Current Date EQ PAR.USR Day 3
OR PAR.USR_Current_Date = PAR.USR_Day_3;

// OR PAR.USR Current Date EQ PAR.USR Day 4
OR PAR.USR_Current_Date = PAR.USR_Day_4;

// OR PAR.USR Current Date EQ PAR.USR Day 5
OR PAR.USR_Current_Date = PAR.USR_Day_5;

// OR PAR.USR Current Date EQ PAR.USR Day 6
OR PAR.USR_Current_Date = PAR.USR_Day_6;

// OR PAR.USR Current Date EQ PAR.USR Day 7
OR PAR.USR_Current_Date = PAR.USR_Day_7;

// OR PAR.USR Current Date EQ PAR.USR Day 8
OR PAR.USR_Current_Date = PAR.USR_Day_8;

// WRK.Kill Day Status = CND.no
WRK.Kill_Day_Status = 'N';

// WRK.Production Day Status = CND.no
WRK.Production_Day_Status = 'N';

// WRK.Public Holiday Status = CND.yes
WRK.Public_Holiday_Status = 'Y';

//?If Holiday set to 'N', Otherwise set to 'Y'
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Kill Day Status = CND.yes
WRK.Kill_Day_Status = 'Y';

// WRK.Production Day Status = CND.yes
WRK.Production_Day_Status = 'Y';

// WRK.Public Holiday Status = CND.no
WRK.Public_Holiday_Status = 'N';

ENDIF;

ENDIF;

//?  Process build mode
CASE;

// IF PAR.USR Program mode Calendar is Build Date Values
IF PAR.USR_Program_mode_Calendar = '1';

CASE;

// IF PGM.*Return code is Calendar not found
IF PGM.*Return_code = 'USR0018';

EXECUTE FUNCTION(CRT Calendar           CR) TYPE(CRTOBJ) FILE(CAAFREP)          AC1102024;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.USR_Current_Date);
PARAMETER(PAR.USR_From_Julian_Date);
PARAMETER(WRK.Accounting_Year_Code);
PARAMETER(WRK.Accounting_Period_Code);
PARAMETER(WRK.Week_Number);
PARAMETER(WRK.Day_of_Week);
PARAMETER(PAR.Week_Number_2_0_USR);
PARAMETER(WRK.Public_Holiday_Status);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(WRK.Kill_Day_Status);
PARAMETER(WRK.Production_Day_Status);
PARAMETER(WRK.Prodcution_Sch_Pln_Sts);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.BLANK_1_USR);
PARAMETER(WRK.BLANK_1_USR);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.EDI_Status_1);
PARAMETER(WRK.EDI_Status_2);
PARAMETER(WRK.EDI_Status_3);
PARAMETER(JOB.*Job_time);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*JOB);
PARAMETER(JOB.*Job_date);
{
 //?USER: Processing before Data update

 //?Calculate HPS PIC Date:
 //?1. Find the number of days between the incoming date and 5/31/2000.
 // WRK.Days = CON.1000531 - DB1.Post to G/L Date *DAYS
 WRK.Days = DURATION(1000531 DB1.Post_to_G_L_Date 'DY' 1111111 'NONE' 'N' 1);

 //?2.  Subtract the difference from the known 100-year value of 5/31/2000.
 //?   The result is the 100-year value for the Calendar Date.
 // WRK.Days = CON.36677 - WRK.Days
 WRK.Days = 36677 - WRK.Days;

 //?3. Subtract a hard-coded value from the 100-year value.
 //?(Per Leanne, we dont understand this calc. Its just what the user gave us)
 // DB1.HPS PIC Date = WRK.Days - CON.26203
 DB1.HPS_PIC_Date = WRK.Days - 26203;

}


CASE;

// IF PAR.@Status Y or N is yes
IF PAR.FAX_DTL_Status_4 = 'Y';

EXECUTE FUNCTION(CRT Build Calendar     CR) TYPE(CRTOBJ) FILE(CAATREP)          AC1264771;
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.Accounting_Year_Code);
PARAMETER(WRK.Accounting_Period_Code);
PARAMETER(WRK.Week_Number);
PARAMETER(PAR.USR_Current_Date);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // DB1.Period Close Status = CND.Open
 DB1.Period_Close_Status = 'O';

 // DB1.Period Ending Date = CON.*ZERO
 DB1.Period_Ending_Date = *ZERO;

}


ENDIF;

ENDIF;

ENDIF;

//?  Process change mode
CASE;

// IF PAR.USR Program mode Calendar is Update Other Cycle Val.
IF PAR.USR_Program_mode_Calendar = '2';

// WRK.Week Number = PAR.Week Number
WRK.Week_Number = PAR.Week_Number;

// WRK.Billing Cycle = PAR.Billing Cycle
WRK.Billing_Cycle = PAR.Billing_Cycle;

// WRK.Payroll Quarter = PAR.Payroll Quarter
WRK.Payroll_Quarter = PAR.Payroll_Quarter;

// WRK.Accounting Year Code = PAR.Accounting Year Code
WRK.Accounting_Year_Code = PAR.Accounting_Year_Code;

// WRK.Accounting Period Code = PAR.Accounting Period Code
WRK.Accounting_Period_Code = PAR.Accounting_Period_Code;

//?Chgobj uses the WRK context fields to determine what to change
EXECUTE FUNCTION(Change Batch Control File) TYPE(CHGOBJ) FILE(CAAFREP)          AA1102084;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.USR_Current_Date);

ENDIF;

// PAR.@Status Y or N = CND.no
PAR.FAX_DTL_Status_4 = 'N';

//?Save prior date
// WRK.USR Current Date = PAR.USR Current Date
WRK.USR_Current_Date = PAR.USR_Current_Date;

//?Increment USR Start Date by 1
// PAR.USR Current Date = PAR.USR Current Date + CON.1 *DAYS
PAR.USR_Current_Date = DATEINCR(PAR.USR_Current_Date 1 'DY' 1111111 'NONE' 'N' 1);

//?Day of week / increment week-period (build only)
CASE;

// IF PAR.USR Program mode Calendar is Build Date Values
IF PAR.USR_Program_mode_Calendar = '1';

//?Set up day of week
DO;

//?the days of week returned go from Monday=1 thru Sunday=7
// WRK.USR Day of Week Number = PAR.USR Current Date *DAY OF WEEK
WRK.USR_Day_of_Week_Number = DATEDTLS(PAR.USR_Current_Date 'DW' 1111111 'NONE' 'N' 1);

CASE;

// IF WRK.USR Day of Week Number is Saturday
IF WRK.USR_Day_of_Week_Number = 7;

// WRK.USR Day of Week Number = CON.1
WRK.USR_Day_of_Week_Number = 1;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Day of Week Number = WRK.USR Day of Week Number + CON.1
WRK.USR_Day_of_Week_Number = WRK.USR_Day_of_Week_Number + 1;

ENDIF;

// WRK.CD7 Ext Numeric Key = CVTVAR(WRK.USR Day of Week Number)
WRK.CD7_Ext_Numeric_Key = CVTVAR(WRK.USR_Day_of_Week_Number);

// WRK.Day of Week = SUBSTRING(WRK.CD7 Ext Numeric Key,CON.7,CON.1)
WRK.Day_of_Week = SUBSTRING(WRK.CD7_Ext_Numeric_Key:7:1);

ENDDO;

//?Increment week and period (except for 1st week)
CASE;

// IF PAR.USR Current Date LE PAR.Period Ending Date
IF PAR.USR_Current_Date <= PAR.Period_Ending_Date;

//?Increment week and period (except for 1st week)
// IF *OTHERWISE
IF *OTHERWISE;

//?Increment week, period
DO;

CASE;

// IF WRK.USR Day of Week Number is Sunday
IF WRK.USR_Day_of_Week_Number = 1;

EXECUTE FUNCTION(CHG Build Calendar     CH) TYPE(CHGOBJ) FILE(CAATREP)          AC1265056;
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.Accounting_Year_Code);
PARAMETER(WRK.Accounting_Period_Code);
PARAMETER(WRK.Week_Number);
PARAMETER(WRK.USR_Current_Date);

// WRK.Week Number = WRK.Week Number + CON.1
WRK.Week_Number = WRK.Week_Number + 1;

// PAR.@Status Y or N = CND.yes
PAR.FAX_DTL_Status_4 = 'Y';

CASE;

// IF WRK.Week Number is Greater than valid week
IF WRK.Week_Number > 4;

// WRK.Week Number = CON.1
WRK.Week_Number = 1;

// WRK.Accounting Period Code = WRK.Accounting Period Code + CON.1
WRK.Accounting_Period_Code = WRK.Accounting_Period_Code + 1;

ENDIF;

ENDIF;

ENDDO;

ENDIF;

ENDIF;

//?Increment Calendar Week Number
CASE;

// IF WRK.USR Day of Week Number is Sunday
IF WRK.USR_Day_of_Week_Number = 1;

// PAR.Week Number 2.0 USR = PAR.Week Number 2.0 USR + CON.1
PAR.Week_Number_2_0_USR = PAR.Week_Number_2_0_USR + 1;

ENDIF;

ENDDO;

//?update final weeks summary
EXECUTE FUNCTION(CHG Build Calendar     CH) TYPE(CHGOBJ) FILE(CAATREP)          AC1265056;
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.Accounting_Year_Code);
PARAMETER(WRK.Accounting_Period_Code);
PARAMETER(WRK.Week_Number);
PARAMETER(PAR.USR_Through_Date);

