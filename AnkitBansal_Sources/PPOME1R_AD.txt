// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPOME1R
// ?Date: 14.08.2025 Time: 03:41:24
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('I/C');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

//?USER: Validate key screen

CASE;

// IF KEY.*CMD key is *Prompt
IF KEY.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> KEY.ISC Item Code
IF PGM.*Cursor_field = KEY.ISC_Item_Code;

// Call program SEL Item Default       SR.
CALL PROGRAM(SEL Item Default       SR) ('OMZ8SRR');
PARAMETER(KEY.ISC_Item_Code);

ENDIF;

ENDIF;

EXECUTE FUNCTION(Val Item Exists        RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1305841;
PARAMETER(KEY.ISC_Item_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Item not found'
ERROR(USR0374);
MSGPARM(KEY.ISC_Item_Code);

ENDIF;

//?USER: Initialize detail screen (new record)

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.ISC_Warehouse_Company);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Warehouse Desc DRV) TYPE(DRVFLD)                               AC1532477;
PARAMETER(DTL.Warehouse_Desc_DRV);
PARAMETER(DTL.ISC_Warehouse_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

}


EXECUTE FUNCTION(Rtv Inv Stock Closing RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC1738283;
PARAMETER(DTL.ISC_Item_Code);
PARAMETER(DTL.Description_Line_One);
PARAMETER(DTL.ISC_Item_Structure_Class);
PARAMETER(DTL.ISC_Item_Structure_Group);
PARAMETER(DTL.ISC_Item_Structure_Type);
PARAMETER(DTL.ISC_Item_Dft_Cmdty_Mkt_Bs);
PARAMETER(DTL.ISC_Item_Type);
PARAMETER(DTL.ISC_Item_Cmdty_Price_Grp);
PARAMETER(DTL.ISC_Item_GL_Sub_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Inv Stock Closing RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1738284;
PARAMETER(PAR.Company_Number);
PARAMETER(DTL.ISC_Item_Code);
PARAMETER(DTL.ISC_Item_UOM_Pricing);
PARAMETER(DTL.ISC_Item_Market_Overage);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
PARAMETER(PAR.ISC_Warehouse_Code);
PARAMETER(DTL.ISC_Warehouse_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.ISC Post Balance Sts = CND.Open
DTL.ISC_Post_Balance_Sts = 'O';

// DTL.ISC Post Warehouse Sts = CND.Open
DTL.ISC_Post_Warehouse_Sts = 'O';

//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.ISC_Warehouse_Company);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Warehouse Desc DRV) TYPE(DRVFLD)                               AC1532477;
PARAMETER(DTL.Warehouse_Desc_DRV);
PARAMETER(DTL.ISC_Warehouse_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

}


EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
PARAMETER(DTL.ISC_Item_Code);
PARAMETER(DTL.Description_Line_One);
PARAMETER(NLL.Description_Line_Two);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Save to check for a change
// WRK.ISC End Inv Adj Qty = DB1.ISC End Inv Adj Qty
WRK.ISC_Ending_Inv_Adj_Qty = DB1.ISC_Ending_Inv_Adj_Qty;

// WRK.ISC End Inv Adj Lbs = DB1.ISC End Inv Adj Lbs
WRK.ISC_Ending_Inv_Adj_Lbs = DB1.ISC_Ending_Inv_Adj_Lbs;

// WRK.ISC End Inv Partial Qty = DB1.ISC End Inv Partial Qty
WRK.ISC_End_Inv_Partial_Qty = DB1.ISC_End_Inv_Partial_Qty;

// WRK.ISC End Inv Partial Lbs = DB1.ISC End Inv Partial Lbs
WRK.ISC_End_Inv_Partial_Lbs = DB1.ISC_End_Inv_Partial_Lbs;

// WRK.ISC Floor Prod Adj Lbs = DB1.ISC Floor Prod Adj Lbs
WRK.ISC_Floor_Prod_Adj_Lbs = DB1.ISC_Floor_Prod_Adj_Lbs;

// WRK.ISC Floor Prod Adj Qty = DB1.ISC Floor Prod Adj Qty
WRK.ISC_Floor_Prod_Adj_Qty = DB1.ISC_Floor_Prod_Adj_Qty;

//?USER: Validate detail screen fields

//?Comment is req if Adj is entered
CASE;

// IF DTL.ISC End Inv Adj Qty is not equal zero
IF DTL.ISC_Ending_Inv_Adj_Qty <> *ZERO;

// OR DTL.ISC End Inv Adj Lbs is Not equal zero
OR DTL.ISC_Ending_Inv_Adj_Lbs <> *ZERO;

CASE;

// IF DTL.ISC End Inv Adj Comment is Not Entered
IF DTL.ISC_End_Inv_Adj_Comment = *BLANK;

// Send error message - 'Comment is required when entering an adjustment/override.'
ERROR(USR3533);
MSGPARM(DTL.ISC_End_Inv_Adj_Comment);

ENDIF;

ENDIF;

//?If Adj changed, update user id/date/time
CASE;

// IF DTL.ISC End Inv Adj Qty NE WRK.ISC End Inv Adj Qty
IF DTL.ISC_Ending_Inv_Adj_Qty <> WRK.ISC_Ending_Inv_Adj_Qty;

// OR DTL.ISC End Inv Adj Lbs NE WRK.ISC End Inv Adj Lbs
OR DTL.ISC_Ending_Inv_Adj_Lbs <> WRK.ISC_Ending_Inv_Adj_Lbs;

// DTL.ISC Ending Inventory User = JOB.*USER
DTL.ISC_Ending_Inv_Adj_User = JOB.*USER;

// DTL.ISC Ending Inventory Date = JOB.*Job date
DTL.ISC_Ending_Inv_Adj_Date = JOB.*Job_date;

// DTL.ISC Ending Inventory Time = JOB.*Job time
DTL.ISC_Ending_Inv_Adj_Time = JOB.*Job_time;

ENDIF;

//?CALC: Detail screen function fields

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.ISC_Warehouse_Company);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Warehouse Desc DRV) TYPE(DRVFLD)                               AC1532477;
PARAMETER(DTL.Warehouse_Desc_DRV);
PARAMETER(DTL.ISC_Warehouse_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

}


// Compute:Ending Inv Fin Qt
DTL.ISC_Ending_Inv_Final_Qty = ( ( ( DTL.ISC_Ending_Inventory_Qty                                  +
+ DTL.ISC_Ending_Inv_Adj_Qty ) + DTL.ISC_Sun_Ship_Inv_Adj_Qty )                                   +
+ DTL.ISC_Unsh_Ship_Inv_Adj_Qty ) + DTL.ISC_End_Inv_Partial_Qty;

// Compute:Ending Inv Fin Lb
DTL.ISC_Ending_Inv_Final_Lbs = ( ( ( DTL.ISC_Ending_Inventory_Lbs                                  +
+ DTL.ISC_Ending_Inv_Adj_Lbs ) + DTL.ISC_Sun_Ship_Inv_Adj_Lbs )                                   +
+ DTL.ISC_Unsh_Ship_Inv_Adj_Lbs ) + DTL.ISC_End_Inv_Partial_Lbs;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Inventory Stock   CR) TYPE(CRTOBJ) FILE(PPBSCPP)           AC1738127;
PARAMETER(DTL.ISC_Week_Ending_Date);
PARAMETER(DTL.ISC_Warehouse_Company);
PARAMETER(DTL.ISC_Warehouse_Code);
PARAMETER(DTL.ISC_Item_Code);
PARAMETER(DTL.ISC_Warehouse_Type);
PARAMETER(DTL.ISC_Item_Cmdty_Price_Grp);
PARAMETER(DTL.ISC_Item_Dft_Cmdty_Mkt_Bs);
PARAMETER(DTL.ISC_Item_Type);
PARAMETER(DTL.ISC_Item_Market_Overage);
PARAMETER(DTL.ISC_Item_Structure_Type);
PARAMETER(DTL.ISC_Item_Structure_Group);
PARAMETER(DTL.ISC_Item_Structure_Class);
PARAMETER(DTL.ISC_Item_GL_Sub_Code);
PARAMETER(DTL.ISC_Item_UOM_Pricing);
PARAMETER(DTL.ISC_Begin_Inv_Final_Qty);
PARAMETER(DTL.ISC_Begin_Inv_Final_Lbs);
PARAMETER(DTL.ISC_Begin_Inv_Adjust_Qty);
PARAMETER(DTL.ISC_Begin_Inv_Adjust_Lbs);
PARAMETER(DTL.ISC_Begin_Inv_Qty);
PARAMETER(DTL.ISC_Begin_Inv_Lbs);
PARAMETER(DTL.ISC_Floor_Production_Qty);
PARAMETER(DTL.ISC_Floor_Production_Lbs);
PARAMETER(DTL.ISC_Floor_Prod_Adj_Qty);
PARAMETER(DTL.ISC_Floor_Prod_Adj_Lbs);
PARAMETER(DTL.ISC_Sales_Production_Qty);
PARAMETER(DTL.ISC_Sales_Production_Lbs);
PARAMETER(DTL.ISC_Inventory_Shipmnt_Qty);
PARAMETER(DTL.ISC_Inventory_Shipmnt_Lbs);
PARAMETER(DTL.ISC_Ord_Dtl_Shipment_Qty);
PARAMETER(DTL.ISC_Ord_Dtl_Shipment_Lbs);
PARAMETER(DTL.ISC_Shipment_Final_Qty);
PARAMETER(DTL.ISC_Shipment_Final_Lbs);
PARAMETER(DTL.ISC_FOB_Gross_Amount);
PARAMETER(DTL.ISC_Inventory_Txfr_Qty);
PARAMETER(DTL.ISC_Inventory_Txfr_Lbs);
PARAMETER(DTL.ISC_Misc_Invntry_Adj_Qty);
PARAMETER(DTL.ISC_Misc_Invntry_Adj_Lbs);
PARAMETER(DTL.ISC_Ending_Inventory_Qty);
PARAMETER(DTL.ISC_Ending_Inventory_Lbs);
PARAMETER(DTL.ISC_End_Inv_User_Id);
PARAMETER(DTL.ISC_End_Inv_Date);
PARAMETER(DTL.ISC_End_Inv_Time);
PARAMETER(DTL.ISC_Sun_Ship_Inv_Adj_Qty);
PARAMETER(DTL.ISC_Sun_Ship_Inv_Adj_Lbs);
PARAMETER(DTL.ISC_Unsh_Ship_Inv_Adj_Qty);
PARAMETER(DTL.ISC_Unsh_Ship_Inv_Adj_Lbs);
PARAMETER(DTL.ISC_End_Inv_Partial_Qty);
PARAMETER(DTL.ISC_End_Inv_Partial_Lbs);
PARAMETER(DTL.ISC_Ending_Inv_Adj_Qty);
PARAMETER(DTL.ISC_Ending_Inv_Adj_Lbs);
PARAMETER(DTL.ISC_End_Inv_Adj_Comment);
PARAMETER(DTL.ISC_Ending_Inv_Adj_User);
PARAMETER(DTL.ISC_Ending_Inv_Adj_Date);
PARAMETER(DTL.ISC_Ending_Inv_Adj_Time);
PARAMETER(DTL.ISC_Ending_Inv_Final_Qty);
PARAMETER(DTL.ISC_Ending_Inv_Final_Lbs);
PARAMETER(DTL.ISC_Warehouse_Price_UOM);
PARAMETER(DTL.ISC_Warehouse_Price_Ovrrd);
PARAMETER(DTL.ISC_Post_Balance_Sts);
PARAMETER(DTL.ISC_Post_Warehouse_Sts);
PARAMETER(DTL.ISC_Commission_Amount);
PARAMETER(DTL.ISC_Unused_Lbs_1);
PARAMETER(DTL.ISC_TF_Exempt_NPR_Dollars);
PARAMETER(DTL.ISC_TF_Exempt_Pounds);
PARAMETER(DTL.ISC_Valuation_Grouping);
PARAMETER(DTL.ISC_Unused_Date_1);
PARAMETER(DTL.ISC_Unused_Sts_2);
PARAMETER('A');
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  //?*** Set RECORD STATUS field. ***
  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  //?*** Set CREATE fields. ***
  // PAR.Create Date = JOB.*Job date
  PAR.Create_Date = JOB.*Job_date;

  // PAR.Create Time = JOB.*Job time
  PAR.Create_Time = JOB.*Job_time;

  // PAR.Create User = JOB.*USER
  PAR.Create_User = JOB.*USER;

  // PAR.Create Program = JOB.*PROGRAM
  PAR.Create_Program = JOB.*PROGRAM;

  //?*** Set CHANGE fields. ***
  // PAR.Change Date = CON.*ZERO
  PAR.Change_Date = *ZERO;

  // PAR.Change Time = CON.*ZERO
  PAR.Change_Time = *ZERO;

  // PAR.Change User = CON.*BLANK
  PAR.Change_User = *BLANK;

  // PAR.Change Program = CON.*BLANK
  PAR.Change_Program = *BLANK;

 }

 // Compute:Ending Inv Fin Qt
 DB1.ISC_Ending_Inv_Final_Qty = ( ( ( DB1.ISC_Ending_Inventory_Qty
 + DB1.ISC_Ending_Inv_Adj_Qty ) + DB1.ISC_Sun_Ship_Inv_Adj_Qty )                                   +
 + DB1.ISC_Unsh_Ship_Inv_Adj_Qty ) + DB1.ISC_End_Inv_Partial_Qty;

 // Compute:Ending Inv Fin Lb
 DB1.ISC_Ending_Inv_Final_Lbs = ( ( ( DB1.ISC_Ending_Inventory_Lbs
 + DB1.ISC_Ending_Inv_Adj_Lbs ) + DB1.ISC_Sun_Ship_Inv_Adj_Lbs )                                   +
 + DB1.ISC_Unsh_Ship_Inv_Adj_Lbs ) + DB1.ISC_End_Inv_Partial_Lbs;

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Inventory Stock   CH) TYPE(CHGOBJ) FILE(PPBSCPP)           AC1738128;
PARAMETER(DTL.ISC_Week_Ending_Date);
PARAMETER(DTL.ISC_Warehouse_Company);
PARAMETER(DTL.ISC_Warehouse_Code);
PARAMETER(DTL.ISC_Item_Code);
PARAMETER(DTL.ISC_Warehouse_Type);
PARAMETER(DTL.ISC_Item_Cmdty_Price_Grp);
PARAMETER(DTL.ISC_Item_Dft_Cmdty_Mkt_Bs);
PARAMETER(DTL.ISC_Item_Type);
PARAMETER(DTL.ISC_Item_Market_Overage);
PARAMETER(DTL.ISC_Item_Structure_Type);
PARAMETER(DTL.ISC_Item_Structure_Group);
PARAMETER(DTL.ISC_Item_Structure_Class);
PARAMETER(DTL.ISC_Item_GL_Sub_Code);
PARAMETER(DTL.ISC_Item_UOM_Pricing);
PARAMETER(DTL.ISC_Begin_Inv_Final_Qty);
PARAMETER(DTL.ISC_Begin_Inv_Final_Lbs);
PARAMETER(DTL.ISC_Begin_Inv_Adjust_Qty);
PARAMETER(DTL.ISC_Begin_Inv_Adjust_Lbs);
PARAMETER(DTL.ISC_Begin_Inv_Qty);
PARAMETER(DTL.ISC_Begin_Inv_Lbs);
PARAMETER(DTL.ISC_Floor_Production_Qty);
PARAMETER(DTL.ISC_Floor_Production_Lbs);
PARAMETER(DTL.ISC_Floor_Prod_Adj_Qty);
PARAMETER(DTL.ISC_Floor_Prod_Adj_Lbs);
PARAMETER(DTL.ISC_Sales_Production_Qty);
PARAMETER(DTL.ISC_Sales_Production_Lbs);
PARAMETER(DTL.ISC_Inventory_Shipmnt_Qty);
PARAMETER(DTL.ISC_Inventory_Shipmnt_Lbs);
PARAMETER(DTL.ISC_Ord_Dtl_Shipment_Qty);
PARAMETER(DTL.ISC_Ord_Dtl_Shipment_Lbs);
PARAMETER(DTL.ISC_Shipment_Final_Qty);
PARAMETER(DTL.ISC_Shipment_Final_Lbs);
PARAMETER(DTL.ISC_FOB_Gross_Amount);
PARAMETER(DTL.ISC_Inventory_Txfr_Qty);
PARAMETER(DTL.ISC_Inventory_Txfr_Lbs);
PARAMETER(DTL.ISC_Misc_Invntry_Adj_Qty);
PARAMETER(DTL.ISC_Misc_Invntry_Adj_Lbs);
PARAMETER(DTL.ISC_Ending_Inventory_Qty);
PARAMETER(DTL.ISC_Ending_Inventory_Lbs);
PARAMETER(DTL.ISC_End_Inv_User_Id);
PARAMETER(DTL.ISC_End_Inv_Date);
PARAMETER(DTL.ISC_End_Inv_Time);
PARAMETER(DTL.ISC_Sun_Ship_Inv_Adj_Qty);
PARAMETER(DTL.ISC_Sun_Ship_Inv_Adj_Lbs);
PARAMETER(DTL.ISC_Unsh_Ship_Inv_Adj_Qty);
PARAMETER(DTL.ISC_Unsh_Ship_Inv_Adj_Lbs);
PARAMETER(DTL.ISC_End_Inv_Partial_Qty);
PARAMETER(DTL.ISC_End_Inv_Partial_Lbs);
PARAMETER(DTL.ISC_Ending_Inv_Adj_Qty);
PARAMETER(DTL.ISC_Ending_Inv_Adj_Lbs);
PARAMETER(DTL.ISC_End_Inv_Adj_Comment);
PARAMETER(DTL.ISC_Ending_Inv_Adj_User);
PARAMETER(DTL.ISC_Ending_Inv_Adj_Date);
PARAMETER(DTL.ISC_Ending_Inv_Adj_Time);
PARAMETER(DTL.ISC_Ending_Inv_Final_Qty);
PARAMETER(DTL.ISC_Ending_Inv_Final_Lbs);
PARAMETER(DTL.ISC_Warehouse_Price_UOM);
PARAMETER(DTL.ISC_Warehouse_Price_Ovrrd);
PARAMETER(DTL.ISC_Post_Balance_Sts);
PARAMETER(DTL.ISC_Post_Warehouse_Sts);
PARAMETER(DTL.ISC_Commission_Amount);
PARAMETER(DTL.ISC_Unused_Lbs_1);
PARAMETER(DTL.ISC_TF_Exempt_NPR_Dollars);
PARAMETER(DTL.ISC_TF_Exempt_Pounds);
PARAMETER(DTL.ISC_Valuation_Grouping);
PARAMETER(DTL.ISC_Unused_Date_1);
PARAMETER(DTL.ISC_Unused_Sts_2);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

 // Compute:Ending Inv Fin Qt
 DB1.ISC_Ending_Inv_Final_Qty = ( ( ( DB1.ISC_Ending_Inventory_Qty
 + DB1.ISC_Ending_Inv_Adj_Qty ) + DB1.ISC_Sun_Ship_Inv_Adj_Qty )                                   +
 + DB1.ISC_Unsh_Ship_Inv_Adj_Qty ) + DB1.ISC_End_Inv_Partial_Qty;

 // Compute:Ending Inv Fin Lb
 DB1.ISC_Ending_Inv_Final_Lbs = ( ( ( DB1.ISC_Ending_Inventory_Lbs
 + DB1.ISC_Ending_Inv_Adj_Lbs ) + DB1.ISC_Sun_Ship_Inv_Adj_Lbs )                                   +
 + DB1.ISC_Unsh_Ship_Inv_Adj_Lbs ) + DB1.ISC_End_Inv_Partial_Lbs;

 // Comp: sales prod qty
 DB1.ISC_Sales_Production_Qty = ( DB1.ISC_Ending_Inv_Final_Qty
 + DB1.ISC_Shipment_Final_Qty ) - DB1.ISC_Begin_Inv_Final_Qty;

 // Comp: sales prod lbs
 DB1.ISC_Sales_Production_Lbs = ( DB1.ISC_Ending_Inv_Final_Lbs
 + DB1.ISC_Shipment_Final_Lbs ) - DB1.ISC_Begin_Inv_Final_Lbs;

}


//?USER: Process command keys

RETURN;

