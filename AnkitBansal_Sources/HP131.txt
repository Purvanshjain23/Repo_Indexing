      *****************  RPG PROGRAM HEADING  ************************
      * SYSTEM:      HOG PRODUCTION
      * PROGRAM:     HP131
      * TITLE:       REVISE EXPENSE RECORD IN EDIT FILE
      * PROGRAMMER:  LEANNE FEDOR
      * CREATED:     01/05/98
      *
      * FUNCTION: USES AN EDIT RECORD FORMAT TO CHANGE/DELETE
      *           A RECORD FROM THE EXPENSE INTERFACE EDIT FILE.
      *
      *    NOTE:  RECORDS CANNOT BE CREATED FROM THIS FUNCTION.
      *
      *
      *           THIS PROGRAM IS CALLED FROM HP431 - WORK WITH
      *           EXPENSE EDIT FILE.
      *
      *           THE FIELD 'MODE' CONTAINS THE VALUE PASSED INTO
      *           THIS PROGRAM FROM THE CALLING PROGRAM.  THE FIELD
      *           'DFMODE' IS THE SCREEN FIELD THAT DISPLAYS THE
      *           VALUE OF 'MODE'.  MODE WILL BE REVISE OR
      *           DELETE.           ONCE IN THE PROGRAM, MODE AND
      *           DFMODE WILL NEVER CHANGE.  HOWEVER, THE ACTION
      *           BEING PERFORMED CAN CHANGE DEPENDING ON THE
      *           FUNCTION KEYS THE USER TAKES.
      *
      *           THE USER MAY DELETE AN EXISTING RECORD BY TAKING
      *           F11=DELETE FROM THIS PROGRAM OR OPTION 4=DELETE
      *           FROM THE WORK WITH.        IF THE USER IS
      *           DELETING WITH 4=DELETE, NO PANEL WILL BE DISPLAYED
      *           FROM THIS PROGRAM (HP131) UNLESS THERE IS AN ERROR
      *           ON THE ATTEMPTED DELETION.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 04/13/98  LeAnne Fedor
      *           Recompile only. New field 'state' added to farm site file.
      *
      * 06/05/01  LeAnne Fedor
      *           Recompile only. New field 'multisite' added to Farm Site file.
      *
      * 06/28/01  LeAnne Fedor
      *           Recompile only.
      *           Three fields (manager/supervisor/multisite) renamed in Farm Site file.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     FHPD131    CF   E             WORKSTN
     F                                     INFDS(IOFEED)
      *
     FHSP052    IF   E           K DISK
      *    EXPENSE CODE
      *
     FHSP231    UF   E           K DISK
      *   EDIT FILE FOR G/L TO HPS EXPENSE INTERFACE
      *
      ****************************************************************
      * TABLE AND ARRAY SPECIFICATIONS
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  STANDARD MESSAGE ARRAYS
      *---------------------------------------------------------------
      *
      ****************************************************************
      * INPUT SPECIFICATIONS
      ****************************************************************
      *
      *---------------------------------------------------------------
      * STANDARD ERROR MESSAGE HANDLING DATA STRUCTURES
      *---------------------------------------------------------------
      *
      * FOR ERROR MESSAGE HANDLING, A PACKED INDEX (E) IS REQUIRED.
      * FOR PROGRAM READABILITY, DEFINE A CORRESPONDING ERROR COUNT
      * FIELD CALLED 'ERROR'. ALSO, DEFINE CURSOR LOCATION FIELDS.
      *
     D                 DS                  INZ
     D  ERROR                  1      2P 0
     D  E                      1      2P 0
      *
      * THIS DATA STRUCTURE SUPPLIES THE NAME OF THE MESSAGE FILE TO
      * THE MESSAGE HANDLING CL PROGRAM.  THE FIELD NAME MSGFIL MUST BE
      * CONSTANT. THE VALUE IN QUOTES IS THE NAME OF THE SPECIFIC
      * MESSAGE FILE CONTAINING THE USER DEFINED MESSAGES.
      *
     D                 DS                  INZ
     D  MSGFIL                 1     10    INZ('HSMSGF    ')
      *
      * THE FOLLOWING 3 DATA STRUCTURES ARE USED TO SPEED MESSAGE
      * HANDLING SINCE IT IS FASTER TO CLEAR DATA STRUCTURES THAN
      * ARRAYS.  EACH IS ASSOCIATED WITH A STANDARD MESSAGE ARRAY.
      *
     D MGI             DS           140    INZ
     D  MGID                   1    140
     D                                     DIM(20)                              MSG ID ARRAY
      *
     D MGD             DS          1000    INZ
     D  MGDT                   1   1000
     D                                     DIM(20)                              MSG PARMS
      *
     D MGWK            DS            50    INZ
     D  MGW                    1     50
     D                                     DIM(50)                              MSG WORK PARMS
      *
      *---------------------------------------------------------------
      * STANDARD PROGRAM STATUS DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTPGFR (RECORD FORMAT: PGMDSR)
     D PGMDS         ESDS                  EXTNAME(UTPGFR)
      *
      *---------------------------------------------------------------
      * STANDARD WORKSTATION INFORMATION DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTWSFR (RECORD FORMAT: UTIDFRR)
     D IOFEED        E DS                  EXTNAME(UTWSFR)
      *
      *---------------------------------------------------------------
      *  NAMED CONSTANTS
      *---------------------------------------------------------------
      *
     D REVISE          C                   CONST('REVISE')
     D DELETE          C                   CONST('DELETE')
     D VIEW            C                   CONST('VIEW  ')
     D SELECT          C                   CONST('SELECT')
     D YES             C                   CONST('Y')
     D NO              C                   CONST('N')
     D SET1            C                   CONST('SET1  ')
     D EDIT1           C                   CONST('EDIT1 ')
     D SCRN1           C                   CONST('SCRN1 ')
     D EXIT            C                   CONST('EXIT  ')
     D UPDATE          C                   CONST('UPDATE')
      *
     D                 DS
     D  DUMMYD                 1      1
      *  THE PRECEDING DUMMY DATA STRUCTURE IS ONLY TO KEEP THE I-SPEC
      *  INFO FROM RUNNING OVER INTO THE 'CALC SPECS' ON THE COMPILE
      *  LISTING.  IT SERVES NO OTHER PURPOSE AND CAN BE DELETED
      *  AT ANY TIME!!!
      /EJECT
      ****************************************************************
      * MAIN LINE
      ****************************************************************
      *
     C                   MOVEL     SET1          ROUTNE
      *
     C     *INLR         DOWEQ     *OFF                                         MAIN DO LOOP
      *
     C     ROUTNE        CASEQ     SET1          $SET1
     C     ROUTNE        CASEQ     SCRN1         $SCRN1
     C     ROUTNE        CASEQ     EDIT1         $EDIT1
      *
     C     ROUTNE        CASEQ     UPDATE        $UPD1
      *
     C     ROUTNE        CASEQ     EXIT          $EXIT
     C                   ENDCS
     C                   ENDDO                                                  MAIN DO LOOP
      /EJECT
      *----------------------------------------------------------------
      * $SET1 - SUBROUTINE TO SET ENVIRONMENT FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $SET1         BEGSR
      *
      *
      * IF INCOMING MODE IS REVISE OR DELETE, THEN RETRIEVE DATABASE
      * RECORD USING THE KEY VALUES PASSED IN.
      * DO NOT LOCK THE RECORD.  TYPICALLY, IN DELETE MODE THESE
      * RETRIEVED VALUES WILL NOT BE DISPLAYED.  HOWEVER, IF THERE
      * IS AN ERROR ON THE DELETE ACTION, THE PANEL WILL BE DISPLAYED.
      *
     C     MODE          IFEQ      REVISE                                       IF REV/DEL
     C     MODE          OREQ      DELETE
     C     KEY01         CHAIN(N)  HSP231                             90
     C     *IN90         IFEQ      *OFF                                         IF FOUND
     C                   MOVEL     EEOBJ         DFOBJ
     C                   Z-ADD     EEAM          DFAM
      *
      * RETRIEVE EXPENSE CODE DESCRIPTION
      *
     C                   EXSR      $EXDS
     C                   ELSE
      * NOT FOUND
     C                   SETON                                        62
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09008'     MGID(E)
     C                   ENDIF
     C                   ENDIF                                                  IF FOUND
     C                   ENDIF                                                  IF REV/DEL
      *
      * IF YOU COULDN'T FIND THE RECORD, SET TO DISPLAY THE SCREEN
      * WITH THE ERROR MESSAGE. OTHERWISE, IF THE USER IS DELETING,
      * GO ON TO THE UPDATE ROUTINE AND DON'T DISPLAY THE SCREEN.
      * IF HE IS REVISING, DISPLAY THE SCREEN.
      *
     C     ERROR         IFEQ      0
     C     ACTION        ANDEQ     DELETE
     C                   MOVEL     UPDATE        ROUTNE
     C                   ELSE
     C                   MOVEL     SCRN1         ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $SCRN1 - SUBROUTINE TO PERFORM OPERATOR I/O FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $SCRN1        BEGSR
      *
      *  WRITE MESSAGES FROM ARRAYS TO MESSAGE SUBFILE
      *
     C                   EXSR      $WRMSG
      *
      *  SET DSPF INDICATORS TO CONTROL INPUT/OUT FIELDS AND AVAILABLE
      *  FUNCTION KEYS.
      *
     C                   SELECT
     C     MODE          WHENEQ    REVISE
     C                   SETON                                        60
     C     MODE          WHENEQ    DELETE
     C                   SETON                                        62
     C                   ENDSL
      *
      * WRITE SCREEN 1 TO CRT
      *
     C                   WRITE     HP131K1
     C                   WRITE     HP131EC
     C                   EXFMT     HP131R1
      *
      * CLEAR MESSAGES
      *
     C                   EXSR      $CLMSG
      *
      * RESET ACTION TO BE EQUAL TO THE INCOMING MODE.
      * THIS IS REQUIRED IN CASE THE USER TOOK F11=DELETE,
      * GOT AN ERROR ON THE DELETION, AND NOW NEEDS TO BE ABLE TO
      * CHANGE THE RECORD AND TAKE AN ACTION OTHER THAN DELETE
      *
     C                   MOVEL     MODE          ACTION
      *
      * GET USER'S INPUT AND SET ROUTINE
      *
     C                   SELECT
     C     *IN03         WHENEQ    *ON                                          F3=EXIT
     C                   MOVEL     '03'          RTNCD
     C                   MOVEL     EXIT          ROUTNE
      *
     C     *IN12         WHENEQ    *ON                                          F12-PREVIOUS
     C                   MOVEL     '12'          RTNCD
     C                   MOVEL     EXIT          ROUTNE
      *
     C     *IN05         WHENEQ    *ON                                          F5-REFRESH
     C                   MOVEL     SET1          ROUTNE
      *
     C     *IN11         WHENEQ    *ON                                          F11-DELETE
     C     MODE          OREQ      DELETE
     C                   MOVEL     DELETE        ACTION
     C                   MOVEL     UPDATE        ROUTNE
     C                   OTHER
      *
      * USER HAS PRESSED ENTER
      *
     C                   MOVEL     EDIT1         ROUTNE
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $EDIT1 - SUBROUTINE TO EDIT INPUT FIELDS FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $EDIT1        BEGSR
      *
      * *IN62 WILL BE ON IF THE RECORD THE USER IS TRYING TO ACCESS
      * HAS BEEN DELETED BY ANOTHER USER.  SO, ONLY PERFORM THE
      * EDITS FOR THE FIELDS ON THE SCREEN IF *IN62 IS OFF
      *
     C     *IN62         IFEQ      *OFF                                         IF HERE
      *
      * VALIDATE AMOUNT:
      *  1) CANNOT BE ZERO
      *
     C     DFAM          IFEQ      0
     C                   SETON                                        32
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09001'     MGID(E)
     C                   ENDIF
     C                   ENDIF
      *
     C                   ENDIF                                                  IF HERE
      *
      * IF THERE ARE NO ERRORS, ATTEMPT THE UPDATE; OTHERWISE,
      * REDISPLAY THE SCREEN.  IF A RECORD HAS BEEN DELETED OUT FROM
      * UNDER THE USER (*IN62 IS ON), THEN THE ERROR MESSAGE WILL BE
      * ISSUED IN THE UPDATE SUBROUTINE.  SO, ALWAYS PERFORM THIS CODE.
      *
     C     ERROR         IFEQ      0
     C                   EXSR      $UPD1
     C                   ELSE
     C                   MOVEL     SCRN1         ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $UPD1  - SUBROUTINE TO WRITE/UPDATE/DELETE DATABASE FILE
      *----------------------------------------------------------------
      *
     C     $UPD1         BEGSR
      *
      *
      * IF USER ACTION IS REVISING OR DELETING, DETERMINE THAT THE
      * RECORD HE IS ACCESSING STILL EXISTS PRIOR TO ATTEMPTING TO
      * UPDATE.  LOCK THE RECORD FOR UPDATE.
      *
     C     ERROR         IFEQ      0                                            IF GOOD
     C     ACTION        IFEQ      DELETE                                       IF D/R
     C     ACTION        OREQ      REVISE
     C     KEY01         CHAIN     HSP231                             92
     C     *IN92         IFEQ      *ON                                          IF NOT FOUND
     C                   SETON                                        62
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09008'     MGID(E)
     C                   ENDIF
     C                   ENDIF                                                  IF NOT FOUND
     C                   ENDIF                                                  IF D/R
     C                   ENDIF                                                  IF GOOD
      *
      *  IF THERE ARE NO ERRORS, DELETE OR REVISE THE RECORD
      *
     C     ERROR         IFEQ      0                                            IF NO ERR
      *
     C     ACTION        IFEQ      DELETE                                       IF DELETE
     C                   DELETE    EEREC
     C                   ELSE
      *
      *  MOVE DSPF FIELDS TO DATABASE FILE FIELDS
      *
     C                   Z-ADD     DFAM          EEAM
      *
     C                   UPDATE    EEREC
     C                   ENDIF                                                  IF DELETE
     C                   ENDIF                                                  IF NO ERR
      *
      *  IF THERE ARE ANY ERRORS, REDISPLAY THE SCREEN; OTHERWISE, EXIT
      *  THE PROGRAM AUTOMATICALLY. (THE USER DOES NOT HAVE TO TAKE
      *  ANY FUNCTION KEY TO EXIT)
      *
     C     ERROR         IFGT      0
     C                   MOVEL     SCRN1         ROUTNE
     C                   ELSE
     C                   MOVEL     EXIT          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $EXDS - RETRIEVE EXPENSE CODE DESCRIPTION
      *---------------------------------------------------------------
      *
     C     $EXDS         BEGSR
      *
     C     DFEXCD        CHAIN     HSP052                             92
     C     *IN92         IFEQ      *OFF
     C                   MOVEL     EXEXDS        DFEXDS
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $WRMSG - SUBROUTINE TO WRITE ERROR MESSAGES
      *---------------------------------------------------------------
      *
     C     $WRMSG        BEGSR
      *
     C                   CALL      'UT80045J'                           43
     C                   PARM                    MGID
     C                   PARM                    MGDT
     C                   PARM                    ERROR
     C                   PARM      SDPGM         PGM
     C                   PARM      MSGFIL        MSGFL
      *
      * IF CALL TO UT80045J FAILED, A MESSAGE HARDCODED IN THE DSPF
      * COMMAND KEY RECORD WILL BE SET ON. SO, REDISPLAY SCREEN TO USER
      *
     C     *IN43         IFEQ      *ON
     C                   MOVEL     SET1          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      *
      *----------------------------------------------------------------
      * $CLMSG - SUBROUTINE TO CLEAR MESSAGES
      *----------------------------------------------------------------
      *
     C     $CLMSG        BEGSR
      *
     C                   CALL      'UT80045J'                           43
     C                   PARM      *BLANK        MGI
     C                   PARM      *BLANK        MGD
     C                   PARM      *ZEROS        ERROR
     C                   PARM      SDPGM         PGM
     C                   PARM      MSGFIL        MSGFL
      *
      * IF CALL TO UT80045J FAILED, A MESSAGE HARDCODED IN THE DSPF
      * COMMAND KEY RECORD WILL BE SET ON. SO, REDISPLAY SCREEN TO USER
      *
     C     *IN43         IFEQ      *ON
     C                   MOVEL     SET1          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      *
      *----------------------------------------------------------------
      * $EXIT - SUBROUTINE TO SET ON LR AND END JOB
      *----------------------------------------------------------------
      *
     C     $EXIT         BEGSR
     C                   SETON                                        LR
     C                   ENDSR
      *
      /EJECT
      *---------------------------------------------------------------
      * *INZSR - INITIALIZATION SUBROUTINE
      *---------------------------------------------------------------
      *
     C     *INZSR        BEGSR
      *
      * KEY LISTS
      *
     C     KEY01         KLIST
     C                   KFLD                    DFEXCD
     C                   KFLD                    DFCJD
      *
      * PARM LISTS
      *     MODE IS THE MODE COMING IN FROM THE WORK WITH.
      *     THE USER CAN COME IN IN REVISE MODE AND TAKE F11=DELETE
      *     WHICH WILL CHANGE THE PROCESSING TO THE 'DELETE' ACTION.
      *
     C     *ENTRY        PLIST
     C                   PARM                    MODE
     C                   PARM                    DFEXCD
     C                   PARM                    DFCJD
     C                   PARM                    RTNCD
      *
      * GLOBAL DEFINES
      *
     C                   MOVEL     *BLANK        PGM              10            USED IN MSG
     C                   MOVEL     *BLANK        MSGFL            10            USED IN MSG
     C                   MOVEL     *BLANK        ROUTNE            6
     C     *LIKE         DEFINE    DFMODE        ACTION
     C     *LIKE         DEFINE    DFMODE        MODE
     C                   MOVEL     MODE          ACTION
     C                   MOVEL     MODE          DFMODE
     C                   MOVEL     '00'          RTNCD             2            RETURN CODE
      *
      *
      *
      * THE FOLLOWING STANDARD CODE MUST BE INCLUDED TO MAKE THE
      * STANDARD ERROR MESSAGE HANDLING PROGRAM FUNCTION PROPERLY.
      * THIS CODE SETS AND CLEARS THE PROGRAM MESSAGE QUEUE.
      *
     C                   Z-ADD     20            MAXMSG            2 0
     C                   MOVEL     '*'           MSGPGM                         SET QUEUE
     C                   EXSR      $CLMSG                                       CLEAR MSG
      *
     C                   ENDSR
      /EJECT
