// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDGTPFR
// ?Date: 14.08.2025 Time: 12:03:54
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

//?USER: Record selection processing

EXECUTE FUNCTION(RTV for Sales Edit Rpt RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1390418;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER(PAR.Header_Status);
PARAMETER(PAR.Price_Audit);
PARAMETER(PAR.Price_Status);
PARAMETER(PAR.Event_Code);
PARAMETER(PAR.Billing_Activity_Type);
{
 //?USER: Processing if Data record not found

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Check against parms
CASE;

// IF PAR.Price Status is Priced
IF PAR.Price_Status = 'P';

// AND PAR.Price Audit is Manually/Auto Price Audit
AND PAR.Price_Audit = 'A'/'M';

//?Header Date Shipped LE Selector Date Shipped
CASE;

// IF PAR.Actual Shipped Date LE PAR.USR Date Shipped
IF PAR.Actual_Shipped_Date <= PAR.USR_Date_Shipped;

//?Header Date Shipped LE Selector Date Shipped
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Check against parms
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Only select Confirmed, Shipped
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF PAR.Billing Activity Type is Invoice
IF PAR.Billing_Activity_Type = '1';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: On print of first page format

// 1PG.Company Number = PAR.Company Number
X1PG_Company_Number = PAR.Company_Number;

// 1PG.USR Date Shipped = PAR.USR Date Shipped
X1PG_USR_Date_Shipped = PAR.USR_Date_Shipped;

// 1PG.USR Market Code = PAR.Commodity Market Code
X1PG_USR_Market_Code = PAR.Commodity_Market_Code;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Active Description RT) TYPE(RTVOBJ) FILE(OMFYREP)          AC1387392;
PARAMETER(DB1.Commodity_Market_Code);
PARAMETER(X1PG_Commodity_Market_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

// SUPPRESSED PRINT Company Number header format

// SUPPRESSED PRINT Item Code header format

// SUPPRESSED PRINT Actual Shipped Date header format

//?USER: On print of detail format

EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Item_Description);
PARAMETER(WRK.Description_Line_Two);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?*** Calculate Net FOB Amount ***
CASE;

// IF WRK.ZERO EQ WRK.ZERO
IF WRK.ZERO = WRK.ZERO;

//?        First calculating Absorbed Freight Amount
EXECUTE FUNCTION(RTV Item Price Struct  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1230472;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(PAR.UOM_Pricing);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Market_Overage);
PARAMETER(PAR.Standard_Overage_Underage);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(PAR.Item_Pricing_Operation);
PARAMETER(PAR.Item_Pricing_Constant);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Freight            RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1390225;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(WRK.Order_Weight_Total);
PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
PARAMETER(WRK.Rated_Freight);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.Freight Cost = PAR.Absorbed Freight Rate / CON.100 *
WRK.Freight_Cost = PAR.Absorbed_Freight_Rate_CWT / 100;

// WRK.Absorbed Freight Amount = WRK.Freight Cost * DB1.Weight Shipped Total *Round
WRK.Absorbed_Freight_Amount = WRK.Freight_Cost * DB1.Weight_Shipped_Total 'H';

//?        Next calculating Component Price Amount
EXECUTE FUNCTION(RTV Freight Overage    RT) TYPE(RTVOBJ) FILE(PDIMCPP)          AC1388024;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(DB1.Order_Sequence_Number);
PARAMETER(DB1.Order_Secondary_Line_Seq);
PARAMETER('CFRTOV');
PARAMETER(WRK.Componant_Price);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.USR Comp. Prc Rate per Lb = WRK.Componant Price / CON.100 *
WRK.USR_Comp_Prc_Rate_per_Lb = WRK.Componant_Price / 100;

// WRK.USR Component Price Amt = WRK.USR Comp. Prc Rate per Lb * DB1.Weight Shipped
WRK.USR_Component_Price_Amt = WRK.USR_Comp_Prc_Rate_per_Lb * DB1.Weight_Shipped_Total              +
'H';

// CUR.USR Net FOB Amount = DB1.Extended Amount - WRK.Absorbed Freight Amount
CUR.USR_Net_FOB_Amount = DB1.Extended_Amount - WRK.Absorbed_Freight_Amount;

// CUR.USR Net FOB Amount = CUR.USR Net FOB Amount - WRK.USR Component Price Amt
CUR.USR_Net_FOB_Amount = CUR.USR_Net_FOB_Amount - WRK.USR_Component_Price_Amt;

ENDIF;

//?*** Calculate Net FOB Price ***
CASE;

// IF WRK.ZERO EQ WRK.ZERO
IF WRK.ZERO = WRK.ZERO;

CASE;

// IF DB1.Weight Shipped Total is Greater than zero
IF DB1.Weight_Shipped_Total > *ZERO;

// WRK.USR FOB Price per Pound = CUR.USR Net FOB Amount / DB1.Weight Shipped Total
WRK.USR_FOB_Price_per_Pound = CUR.USR_Net_FOB_Amount / DB1.Weight_Shipped_Total;

ENDIF;

// WRK.USR FOB Primary U/M Price = WRK.USR FOB Price per Pound * PAR.Unit Weight *R
WRK.USR_FOB_Primary_U_M_Price = WRK.USR_FOB_Price_per_Pound * PAR.Unit_Weight 'H';

// PAR.U/M - Ordered = DB1.U/M - Ordered
PAR.U_M_Ordered = DB1.U_M_Ordered;

// Call program CLC Convert Price Qtys XF.
CALL PROGRAM(CLC Convert Price Qtys XF) ('PDKGXFR');
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(PAR.U_M_Ordered);
PARAMETER(WRK.Price_based_on_U_M1_S);
PARAMETER(WRK.Price_based_on_U_M2_S);
PARAMETER(WRK.Price_based_on_U_M3_S);
PARAMETER(WRK.USR_FOB_Primary_U_M_Price);

//?Get Net FOB Price
CASE;

// IF PAR.U/M - Pricing EQ PAR.U/M - Primary
IF PAR.UOM_Pricing = PAR.UOM_Primary;

// CUR.USR Net FOB Price = CON.1 * WRK.Price based on U/M1 S *Rounded
CUR.USR_Net_FOB_Price = 1 * WRK.Price_based_on_U_M1_S 'H';

//?Get Net FOB Price
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.U/M - Pricing EQ PAR.U/M - Second
IF PAR.UOM_Pricing = PAR.UOM_Second;

// CUR.USR Net FOB Price = CON.1 * WRK.Price based on U/M2 S *Rounded
CUR.USR_Net_FOB_Price = 1 * WRK.Price_based_on_U_M2_S 'H';

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Net FOB Price = CON.1 * WRK.Price based on U/M3 S *Rounded
CUR.USR_Net_FOB_Price = 1 * WRK.Price_based_on_U_M3_S 'H';

ENDIF;

ENDIF;

ENDIF;

//?*** Calculate Total Market Price ***
CASE;

// IF WRK.ZERO EQ WRK.ZERO
IF WRK.ZERO = WRK.ZERO;

EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
PARAMETER(PAR.Commodity_Market_Code);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER(WRK.Commodity_Market_Price);
PARAMETER(WRK.USR_Date_Priced);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Commodity Market Price = DB1.Commodity Market Price
 PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

 // PAR.USR Date Priced = DB1.Market Price Date
 PAR.USR_Date_Priced = DB1.Market_Price_Date;

 QUIT;

}


EXECUTE FUNCTION(RTV Overages           RT) TYPE(RTVOBJ) FILE(PDISREP)          AC1290537;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(DB1.Item_Code);
PARAMETER(WRK.Market_High_Value_1);
PARAMETER(WRK.Formula_Differential);
PARAMETER(WRK.Formula_Processing_Fee);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.USR Total Market Price = WRK.Price per Pricing U/M + WRK.Market High Value 1
WRK.USR_Total_Market_Price = WRK.Commodity_Market_Price + WRK.Market_High_Value_1;

// WRK.USR Total Market Price = WRK.USR Total Market Price + PAR.Market Overage
WRK.USR_Total_Market_Price = WRK.USR_Total_Market_Price + PAR.Market_Overage;

ENDIF;

//?*** Calculate Variance from Market ***
CASE;

// IF WRK.ZERO EQ WRK.ZERO
IF WRK.ZERO = WRK.ZERO;

// CUR.Variance amount 1     USR = CUR.USR Net FOB Price - WRK.USR Total Market Pri
CUR.Variance_amount_1_USR = CUR.USR_Net_FOB_Price - WRK.USR_Total_Market_Price;

ENDIF;

//?USER: Process after print of detail format

// NXT.USR Net FOB Amount = NXT.USR Net FOB Amount + CUR.USR Net FOB Amount
NXT.USR_Net_FOB_Amount = NXT.USR_Net_FOB_Amount + CUR.USR_Net_FOB_Amount;

// NXT.USR Weight Accumulated = NXT.USR Weight Accumulated + CUR.Weight Shipped Tot
NXT.USR_Weight_Accumulated = NXT.USR_Weight_Accumulated + CUR.Weight_Shipped_Total;

// NXT.USR Quantity to Confirm = NXT.USR Quantity to Confirm + CUR.Quantity Shipped
NXT.USR_Quantity_to_Confirm = NXT.USR_Quantity_to_Confirm + CUR.Quantity_Shipped_Total;

//?USER: Print required level totals

// SUPPRESSED PRINT Actual Shipped Date totals format

CASE;

IF NEW Item_Code;
// CUR.U/M - Primary = PAR.U/M - Pricing
CUR.UOM_Primary = PAR.UOM_Pricing;

//?*** Calculate Item Total Net FOB Price ***
CASE;

// IF WRK.ZERO EQ WRK.ZERO
IF WRK.ZERO = WRK.ZERO;

CASE;

// IF CUR.USR Weight Accumulated is Entered
IF CUR.USR_Weight_Accumulated <> *ZERO;

// WRK.USR Subtotal 1 Price = CUR.USR Net FOB Amount / CUR.USR Weight Accumulated *
WRK.USR_Subtotal_1_Price = CUR.USR_Net_FOB_Amount / CUR.USR_Weight_Accumulated;

ENDIF;

// WRK.USR Tot FOB Prmry U/M Prc = WRK.USR Subtotal 1 Price * PAR.Unit Weight *Roun
WRK.USR_Tot_FOB_Prmry_U_M_Prc = WRK.USR_Subtotal_1_Price * PAR.Unit_Weight 'H';

// Call program CLC Convert Price Qtys XF.
CALL PROGRAM(CLC Convert Price Qtys XF) ('PDKGXFR');
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(WRK.Price_based_on_U_M1_S);
PARAMETER(WRK.Price_based_on_U_M2_S);
PARAMETER(WRK.Price_based_on_U_M3_S);
PARAMETER(WRK.USR_Tot_FOB_Prmry_U_M_Prc);

//?Get Net FOB Price
CASE;

// IF PAR.U/M - Pricing EQ PAR.U/M - Primary
IF PAR.UOM_Pricing = PAR.UOM_Primary;

// CUR.USR Tot Net FOB Price = CON.1 * WRK.Price based on U/M1 S *Rounded
CUR.USR_Tot_Net_FOB_Price = 1 * WRK.Price_based_on_U_M1_S 'H';

//?Get Net FOB Price
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.U/M - Pricing EQ PAR.U/M - Second
IF PAR.UOM_Pricing = PAR.UOM_Second;

// CUR.USR Tot Net FOB Price = CON.1 * WRK.Price based on U/M2 S *Rounded
CUR.USR_Tot_Net_FOB_Price = 1 * WRK.Price_based_on_U_M2_S 'H';

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Tot Net FOB Price = CON.1 * WRK.Price based on U/M3 S *Rounded
CUR.USR_Tot_Net_FOB_Price = 1 * WRK.Price_based_on_U_M3_S 'H';

ENDIF;

ENDIF;

ENDIF;

//?*** Calculate Total Market Price ***
CASE;

// IF WRK.ZERO EQ WRK.ZERO
IF WRK.ZERO = WRK.ZERO;

EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
PARAMETER(PAR.Commodity_Market_Code);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER(WRK.Commodity_Market_Price);
PARAMETER(WRK.USR_Date_Priced);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Commodity Market Price = DB1.Commodity Market Price
 PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

 // PAR.USR Date Priced = DB1.Market Price Date
 PAR.USR_Date_Priced = DB1.Market_Price_Date;

 QUIT;

}


// WRK.USR Total Market Price = WRK.Price per Pricing U/M + WRK.Market Overage
WRK.USR_Total_Market_Price = WRK.Commodity_Market_Price + WRK.Market_Overage;

ENDIF;

//?*** Calculate Variance from Market ***
CASE;

// IF WRK.ZERO EQ WRK.ZERO
IF WRK.ZERO = WRK.ZERO;

// CUR.Variance amount 1     USR = CUR.USR Tot Net FOB Price - WRK.USR Total Market
CUR.Variance_amount_1_USR = CUR.USR_Tot_Net_FOB_Price - WRK.USR_Total_Market_Price;

ENDIF;

// Print Item Code totals format
PRINT Item Code totals format;

// NXT.USR Net FOB Amount = NXT.USR Net FOB Amount + CUR.USR Net FOB Amount
NXT.USR_Net_FOB_Amount = NXT.USR_Net_FOB_Amount + CUR.USR_Net_FOB_Amount;

// NXT.USR Weight Accumulated = NXT.USR Weight Accumulated + CUR.USR Weight Accumul
NXT.USR_Weight_Accumulated = NXT.USR_Weight_Accumulated + CUR.USR_Weight_Accumulated;

// NXT.USR Quantity to Confirm = NXT.USR Quantity to Confirm + CUR.USR Quantity to
NXT.USR_Quantity_to_Confirm = NXT.USR_Quantity_to_Confirm + CUR.USR_Quantity_to_Confirm;

ENDIF;

CASE;

IF NEW Company_Number;
// Print Company Number totals format
PRINT Company Number totals format;

ENDIF;

