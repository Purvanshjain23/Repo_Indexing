// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PUHIPFR
// ?Date: 14.08.2025 Time: 12:06:50
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?** NOTE: When recompiling, ovrprtf to OVERLAY(prkplib/prkexp)
//?         As of 6/29/18, ovrprtf to OVERLAY(prkplib/PRKAPPL).
//?To control the number of lines printed within the PRTOBJ
//?'Prt Appl f/Export V2   PO - Export Doc Order Dtl', change field
//?'Blank for 4           USR' lines before in the Company Number HDG
//?format in this PRTFIL.
EXECUTE FUNCTION(Rtv All               RT) TYPE(RTVOBJ) FILE(PUA6CPP)           AC2151312;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.ED_Export_Document_Type);
PARAMETER(PAR.Country_Code);
PARAMETER(LCL.EDE_Reason_f_Replcmnt_Sts);
PARAMETER(LCL.EDE_Shipment_Type_Sts);
PARAMETER(LCL.EDE_Frozen_Shelf_Life_Sts);
PARAMETER(LCL.EDE_ISO_Alpha_2_code);
PARAMETER(NLL.EDE_USDA_Export_Mark_Sts);
PARAMETER(NLL.EDE_Special_Printing_Ctl);
PARAMETER(NLL.EDE_Appl_Billing_First_Nm);
PARAMETER(NLL.EDE_Appl_Billing_Last_Nm);
PARAMETER(NLL.EDE_Unused_Date);
PARAMETER(LCL.EDE_Country_of_Final_Dest);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Print required level headings

CASE;

IF NEW Company_Number;
//?Original or Replacement Application.
CASE;

// IF DB1.ED Modified Text is original
IF DB1.ED_Modified_Text = 'original';

// CUR.Toggle Text 1         USR = CON. XX
CUR.Toggle_Text_1_USR = 'XX';

//?Original or Replacement Application.
// IF DB1.ED Modified Text is inlieu
IF DB1.ED_Modified_Text = 'inlieu';

//?As of 6/29/18, 'in lieu' is now 'Replacement'.
// CUR.Toggle Text 2         USR = CON. XX
CUR.Toggle_Text_2_USR = 'XX';

//?R14822 DN 04/29/19-Commented Out Replacement Reason Code 6 & 7.
//?Set Replacement Reason Code.
CASE;

// IF LCL.EDE Reason f/Replcmnt Sts is Lost Certificate
IF LCL.EDE_Reason_f_Replcmnt_Sts = '1';

// CUR.Replacement Reason 1 USR = CON.  X
CUR.Replacement_Reason_1_USR = 'X';

//?Set Replacement Reason Code.
// IF LCL.EDE Reason f/Replcmnt Sts is Incorrect Certificate
IF LCL.EDE_Reason_f_Replcmnt_Sts = '2';

// CUR.Replacement Reason 2 USR = CON.  X
CUR.Replacement_Reason_2_USR = 'X';

//?Set Replacement Reason Code.
// IF LCL.EDE Reason f/Replcmnt Sts is Importer/Export Changed
IF LCL.EDE_Reason_f_Replcmnt_Sts = '3';

// CUR.Replacement Reason 3 USR = CON. XX
CUR.Replacement_Reason_3_USR = 'XX';

//?Set Replacement Reason Code.
// IF LCL.EDE Reason f/Replcmnt Sts is Certificate Missing Req
IF LCL.EDE_Reason_f_Replcmnt_Sts = '4';

// CUR.Replacement Reason 4 USR = CON.  X
CUR.Replacement_Reason_4_USR = 'X';

//?Set Replacement Reason Code.
// IF LCL.EDE Reason f/Replcmnt Sts is Import Country Border Cls
IF LCL.EDE_Reason_f_Replcmnt_Sts = '5';

// CUR.Replacement Reason 5 USR = CON.  X
CUR.Replacement_Reason_5_USR = 'X';

//?Set Replacement Reason Code.
//?Set Replacement Reason Code.
ENDIF;

ENDIF;

//?Export Certificate No.
CASE;

// IF CUR.ED Export Certificate Nbr NE WRK.ZERO
IF CUR.ED_Export_Certificate_Nbr <> WRK.ZERO;

// WRK.ED Export Certificate Nbr = DB1.ED Export Certificate Nbr
WRK.ED_Export_Certificate_Nbr = DB1.ED_Export_Certificate_Nbr;

// CUR.Text USR 4 = DB1.ED USDA Cert Nbr US
CUR.Text_USR_4 = DB1.ED_USDA_Cert_Nbr_US;

CASE;

// IF CUR.Text USR 4 is Not Entered
IF CUR.Text_USR_4 = *BLANK;

//?S00591 RMC 12/10/08 get form letters from company value
EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(0);
PARAMETER(0);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(NLL.Trans_Contol_AS400_Plant);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Trans_Contol_AS400_Plant);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Get Fresh /frozen to get which form name to use    RMC 12/10/08
CASE;

// IF LCL.Warehouse Type is Fresh
IF LCL.Warehouse_Type = 'FR';

// WRK.Company Value Code = CON.MPGFRLTR
WRK.Company_Value_Code = 'MPGFRLTR';

//?Get Fresh /frozen to get which form name to use    RMC 12/10/08
// IF LCL.Warehouse Type is Frozen
IF LCL.Warehouse_Type = 'FZ';

// WRK.Company Value Code = CON.MPGFZLTR
WRK.Company_Value_Code = 'MPGFZLTR';

//?Get Fresh /frozen to get which form name to use    RMC 12/10/08
// IF *OTHERWISE
IF *OTHERWISE;

//?default to something
// WRK.Company Value Code = CON.MPGFRLTR
WRK.Company_Value_Code = 'MPGFRLTR';

ENDIF;

EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(DB1.Company_Number);
PARAMETER(WRK.Company_Value_Code);
PARAMETER(WRK.USR_Old_New_prtf_designtn);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?S020491 SP 10/16/24 Start (Update PHIS Certificate Letters MPP to MPQ)
EXECUTE FUNCTION(Set USDA Cert Nbr US   IF) TYPE(EXCINTFUN)                     AC2235467;
PARAMETER(CUR.Country_Code);
PARAMETER(LCL.Warehouse_Type);
PARAMETER(DB1.Company_Number);
PARAMETER(WRK.USR_Old_New_prtf_designtn);
{
 //?Execute internal function

 // LCL.ED USDA Cert Nbr US = PAR.ED USDA Cert Nbr US
 LCL.ED_USDA_Cert_Nbr_US = PAR.ED_USDA_Cert_Nbr_US;

 //?Get "USDA Cert Nbr" for Japan/Chile
 CASE;

 // IF PAR.Country Code is Japan
 IF PAR.Country_Code = 'JPN';

 // OR PAR.Country Code is Mexico
 OR PAR.Country_Code = 'MEX';

 // OR PAR.Country Code is Korea
 OR PAR.Country_Code = 'KOR';

 // OR PAR.Country Code is Australia
 OR PAR.Country_Code = 'AUS';

 // OR PAR.Country Code is Chile - ISO 3
 OR PAR.Country_Code = 'CHL';

 // OR PAR.Country Code is NewZealand
 OR PAR.Country_Code = 'NZL';

 // OR PAR.Country Code is New Zealand
 OR PAR.Country_Code = 'NEW';

 CASE;

 // IF PAR.Warehouse Type is Fresh
 IF PAR.Warehouse_Type = 'FR';

 EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
 PARAMETER(PAR.Company_Number);
 PARAMETER('CERTLTRFR');
 PARAMETER(LCL.ED_USDA_Cert_Nbr_US_User);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
 PARAMETER(PAR.Company_Number);
 PARAMETER('CERTLTRFZ');
 PARAMETER(LCL.ED_USDA_Cert_Nbr_US_User);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 ENDIF;

 //?Pass "USDA Cert Nbr" as Output
 CASE;

 // IF LCL.ED USDA Cert Nbr US  User is not entered
 IF LCL.ED_USDA_Cert_Nbr_US_User = *BLANK;

 // PAR.ED USDA Cert Nbr US = LCL.ED USDA Cert Nbr US
 PAR.ED_USDA_Cert_Nbr_US = LCL.ED_USDA_Cert_Nbr_US;

 //?Pass "USDA Cert Nbr" as Output
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ED USDA Cert Nbr US = LCL.ED USDA Cert Nbr US  User
 PAR.ED_USDA_Cert_Nbr_US = LCL.ED_USDA_Cert_Nbr_US_User;

 ENDIF;

}


//?S020491 SP 10/16/24 End
// CUR.Text USR 4 = CONCAT(WRK.USR Old/New prtf designtn,CON.-,CON.*ZERO)
CUR.Text_USR_4 = WRK.USR_Old_New_prtf_designtn + '-' (*ZERO);

ENDIF;

ENDIF;

//?Shipment Type.
CASE;

// IF LCL.EDE Shipment Type Sts is Commercial Sale
IF LCL.EDE_Shipment_Type_Sts = '1';

// CUR.Shipment Type 1 USR = CON. X
CUR.Shipment_Type_1_USR = 'X';

//?Shipment Type.
// IF LCL.EDE Shipment Type Sts is Personal Consumption
IF LCL.EDE_Shipment_Type_Sts = '2';

// CUR.Shipment Type 2 USR = CON. X
CUR.Shipment_Type_2_USR = 'X';

//?Shipment Type.
// IF LCL.EDE Shipment Type Sts is Ships Store
IF LCL.EDE_Shipment_Type_Sts = '3';

// CUR.Shipment Type 3 USR = CON. X
CUR.Shipment_Type_3_USR = 'X';

//?Shipment Type.
// IF LCL.EDE Shipment Type Sts is Airline
IF LCL.EDE_Shipment_Type_Sts = '7';

// CUR.Shipment Type 4 USR = CON. X
CUR.Shipment_Type_4_USR = 'X';

//?Shipment Type.
// IF LCL.EDE Shipment Type Sts is US Military
IF LCL.EDE_Shipment_Type_Sts = '4';

// CUR.Shipment Type 5 USR = CON. X
CUR.Shipment_Type_5_USR = 'X';

//?Shipment Type.
// IF LCL.EDE Shipment Type Sts is Samples
IF LCL.EDE_Shipment_Type_Sts = '5';

// CUR.Shipment Type 6 USR = CON. xx
CUR.Shipment_Type_6_USR = 'xx';

//?Shipment Type.
// IF LCL.EDE Shipment Type Sts is US Embassy
IF LCL.EDE_Shipment_Type_Sts = '6';

// CUR.Shipment Type 7 USR = CON. X
CUR.Shipment_Type_7_USR = 'X';

ENDIF;

//?Date of Request.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.ED Document Date is Not entered
IF DB1.ED_Document_Date = *ZERO;

// LCL.Date From Alpha       USR = CVTVAR(JOB.*Job date)
LCL.Date_From_Alpha_USR = CVTVAR(JOB.*Job_date);

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Date From Alpha       USR = CVTVAR(DB1.ED Document Date)
LCL.Date_From_Alpha_USR = CVTVAR(DB1.ED_Document_Date);

ENDIF;

// LCL.Year 2A USR = SUBSTRING(LCL.Date From Alpha       USR,CON.2,CON.2)
LCL.Year_2A_USR = SUBSTRING(LCL.Date_From_Alpha_USR:2:2);

//?Setup up 19nn or 20nn
CASE;

// IF LCL.Year 2A USR is >=40
IF LCL.Year_2A_USR >= '40';

// LCL.Year USR = CONCAT(CON.19,LCL.Year 2A USR,CON.*ZERO)
LCL.Year_USR = '19' + LCL.Year_2A_USR (*ZERO);

//?Setup up 19nn or 20nn
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Year USR = CONCAT(CON.20,LCL.Year 2A USR,CON.*ZERO)
LCL.Year_USR = '20' + LCL.Year_2A_USR (*ZERO);

ENDIF;

// LCL.Month MM/  3A = SUBSTRING(LCL.Date From Alpha       USR,CON.4,CON.2)
LCL.Month_MM_3A = SUBSTRING(LCL.Date_From_Alpha_USR:4:2);

// LCL.Day DD/  3A = SUBSTRING(LCL.Date From Alpha       USR,CON.6,CON.2)
LCL.Day_DD_3A = SUBSTRING(LCL.Date_From_Alpha_USR:6:2);

// LCL.Month MM/  3A = CONCAT(LCL.Month MM/  3A,CON./,CON.*ZERO)
LCL.Month_MM_3A = LCL.Month_MM_3A + '/' (*ZERO);

// LCL.Day DD/  3A = CONCAT(LCL.Day DD/  3A,CON./,CON.*ZERO)
LCL.Day_DD_3A = LCL.Day_DD_3A + '/' (*ZERO);

// LCL.Month/Day MM/DD/ = CONCAT(LCL.Month MM/  3A,LCL.Day DD/  3A,CON.*ZERO)
LCL.Month_Day_MM_DD = LCL.Month_MM_3A + LCL.Day_DD_3A (*ZERO);

// CUR.Date mm/dd/yyyy USR = CONCAT(LCL.Month/Day MM/DD/,LCL.Year USR,CON.*ZERO)
CUR.Date_mm_dd_yyyy_USR = LCL.Month_Day_MM_DD + LCL.Year_USR (*ZERO);

ENDIF;

//?Country of Final Destination.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Desc, Status       RT) TYPE(RTVOBJ) FILE(OME5REP)          AC1261065;
PARAMETER(LCL.EDE_Country_of_Final_Dest);
PARAMETER(CUR.Country_of_Final_Dest_Dsc);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?R13944 DN 12/17/18-Set Blanks if Country of Final Dest is same as Country.
CASE;

// IF LCL.EDE Country of Final Dest EQ PAR.Country Code
IF LCL.EDE_Country_of_Final_Dest = PAR.Country_Code;

// CUR.Country of Final Dest Dsc = CND.Blank
CUR.Country_of_Final_Dest_Dsc = *BLANK;

ENDIF;

ENDIF;

//?Export Mark To Be Used.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Export Mark 1 USR = CON. X
CUR.Export_Mark_1_USR = 'X';

ENDIF;

// WRK.ED Shipping Marks Txt = CUR.ED Shipping Marks Txt
WRK.ED_Shipping_Marks_Txt = CUR.ED_Shipping_Marks_Txt;

//?R16637 DN 10/06/20-Suppress Consignor/Consignee Blank Address Lines.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Fmt Suppress Addr LinesIF) TYPE(EXCINTFUN)                     AC2191192;
PARAMETER(CUR.ED_Consignor_Addr_2);
PARAMETER(CUR.ED_Consignor_Addr_3);
PARAMETER(CUR.ED_Consignor_Addr_4);
PARAMETER(CUR.ED_Consignor_State);
PARAMETER(CUR.ED_Consignor_Postal);
PARAMETER(CUR.ED_Consignor_Country_Code);
PARAMETER(CUR.ED_Consignee_Addr_2);
PARAMETER(CUR.ED_Consignee_Addr_3);
PARAMETER(CUR.ED_Consignee_Addr_4);
PARAMETER(CUR.ED_Consignee_State);
PARAMETER(CUR.ED_Consignee_Postal);
PARAMETER(CUR.ED_Consignee_Country_Code);
PARAMETER(DB1.ED_Live_with_PHIS);
PARAMETER(CUR.Consignor_Country_Desc_U);
PARAMETER(CUR.Consignee_Country_Desc_U);
{
 //?Execute internal function

 //?CONSIGNOR: Format & Suppress Blank Address Lines.
 CASE;

 // IF PAR.ED Consignor Addr 2 is Not Blank
 IF PAR.ED_Consignor_Addr_2 <> *BLANK;

 // AND PAR.ED Consignor Addr 3 is Not Blank
 AND PAR.ED_Consignor_Addr_3 <> *BLANK;

 //?If Addr4/City is Entered then Concat State & Zip.
 CASE;

 // IF PAR.ED Consignor Addr 4 is Not Blank
 IF PAR.ED_Consignor_Addr_4 <> *BLANK;

 // PAR.ED Consignor Addr 4 = CONCAT(PAR.ED Consignor Addr 4,PAR.ED Consignor State,CON.1)
 PAR.ED_Consignor_Addr_4 = PAR.ED_Consignor_Addr_4 + PAR.ED_Consignor_State (1);

 // PAR.ED Consignor Addr 4 = CONCAT(PAR.ED Consignor Addr 4,PAR.ED Consignor Postal,CON.1)
 PAR.ED_Consignor_Addr_4 = PAR.ED_Consignor_Addr_4 + PAR.ED_Consignor_Postal (1);

 ENDIF;

 //?CONSIGNOR: Format & Suppress Blank Address Lines.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Check Blank Address Lines to Suppress.
 CASE;

 // IF PAR.ED Consignor Addr 2 is eq blank
 IF PAR.ED_Consignor_Addr_2 = *BLANK;

 //?Shouldn't have too many scenarios with Addr 2 is blank.
 // PAR.ED Consignor Addr 2 = PAR.ED Consignor Addr 3
 PAR.ED_Consignor_Addr_2 = PAR.ED_Consignor_Addr_3;

 // PAR.ED Consignor Addr 3 = CON.*BLANK
 PAR.ED_Consignor_Addr_3 = *BLANK;

 ENDIF;

 //?Check Addr 4/City & Suppress Blank Address Line.
 CASE;

 // IF PAR.ED Consignor Addr 4 is eq blank
 IF PAR.ED_Consignor_Addr_4 = *BLANK;

 //?Check Addr 4/City & Suppress Blank Address Line.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Addr4/City is Entered, Concat State & Zip.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ED Consignor Addr 4 = CONCAT(PAR.ED Consignor Addr 4,PAR.ED Consignor State,CON.1)
 PAR.ED_Consignor_Addr_4 = PAR.ED_Consignor_Addr_4 + PAR.ED_Consignor_State (1);

 // PAR.ED Consignor Addr 4 = CONCAT(PAR.ED Consignor Addr 4,PAR.ED Consignor Postal,CON.1)
 PAR.ED_Consignor_Addr_4 = PAR.ED_Consignor_Addr_4 + PAR.ED_Consignor_Postal (1);

 ENDIF;

 CASE;

 // IF PAR.ED Consignor Addr 2 is Blank
 IF PAR.ED_Consignor_Addr_2 = *BLANK;

 // PAR.ED Consignor Addr 2 = PAR.ED Consignor Addr 4
 PAR.ED_Consignor_Addr_2 = PAR.ED_Consignor_Addr_4;

 // PAR.ED Consignor Addr 4 = CON.*BLANK
 PAR.ED_Consignor_Addr_4 = *BLANK;

 // IF PAR.ED Consignor Addr 3 is Blank
 IF PAR.ED_Consignor_Addr_3 = *BLANK;

 // PAR.ED Consignor Addr 3 = PAR.ED Consignor Addr 4
 PAR.ED_Consignor_Addr_3 = PAR.ED_Consignor_Addr_4;

 // PAR.ED Consignor Addr 4 = CON.*BLANK
 PAR.ED_Consignor_Addr_4 = *BLANK;

 ENDIF;

 ENDIF;

 ENDIF;

 //?CONSIGNEE: Format & Suppress Blank Address Lines.
 CASE;

 // IF PAR.ED Consignee Addr 2 is Not Blank
 IF PAR.ED_Consignee_Addr_2 <> *BLANK;

 // AND PAR.ED Consignee Addr 3 is Not Blank
 AND PAR.ED_Consignee_Addr_3 <> *BLANK;

 //?If Addr4/City is Entered then Concat State & Zip.
 CASE;

 // IF PAR.ED Consignee Addr 4 is Not Blank
 IF PAR.ED_Consignee_Addr_4 <> *BLANK;

 // PAR.ED Consignee Addr 4 = CONCAT(PAR.ED Consignee Addr 4,PAR.ED Consignee State,CON.1)
 PAR.ED_Consignee_Addr_4 = PAR.ED_Consignee_Addr_4 + PAR.ED_Consignee_State (1);

 // PAR.ED Consignee Addr 4 = CONCAT(PAR.ED Consignee Addr 4,PAR.ED Consignee Postal,CON.1)
 PAR.ED_Consignee_Addr_4 = PAR.ED_Consignee_Addr_4 + PAR.ED_Consignee_Postal (1);

 ENDIF;

 //?CONSIGNEE: Format & Suppress Blank Address Lines.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Check Blank Address Lines to Suppress.
 CASE;

 // IF PAR.ED Consignee Addr 2 is eq blank
 IF PAR.ED_Consignee_Addr_2 = *BLANK;

 //?Shouldn't have too many scenarios with Addr 2 is blank.
 // LCL.ED Consignee Addr 3 = PAR.ED Consignee Addr 3
 LCL.ED_Consignee_Addr_3 = PAR.ED_Consignee_Addr_3;

 // PAR.ED Consignee Addr 2 = LCL.ED Consignee Addr 3
 PAR.ED_Consignee_Addr_2 = LCL.ED_Consignee_Addr_3;

 // PAR.ED Consignee Addr 3 = LCL.USR Blank Field
 PAR.ED_Consignee_Addr_3 = LCL.USR_Blank_Field;

 ENDIF;

 //?Check Addr 4/City & Suppress Blank Address Line.
 CASE;

 // IF PAR.ED Consignee Addr 4 is eq blank
 IF PAR.ED_Consignee_Addr_4 = *BLANK;

 //?S17055 DN 04/06/21-Concat Consignee State & Zip if Entered.
 CASE;

 // IF PAR.ED Consignee Postal is Entered
 IF PAR.ED_Consignee_Postal <> *BLANK;

 //?Get State for Domestic Address Else Concat Only Zip Code.
 CASE;

 // IF PAR.ED Consignee State is State code not Blanks
 IF PAR.ED_Consignee_State <> *BLANK;

 // AND PAR.ED Consignee State is Not International
 AND PAR.ED_Consignee_State <> '.';

 // LCL.ED Consignee Addr 4 = PAR.ED Consignee State
 LCL.ED_Consignee_Addr_4 = PAR.ED_Consignee_State;

 // LCL.ED Consignee Addr 4 = CONCAT(LCL.ED Consignee Addr 4,PAR.ED Consignee Postal,CON.1)
 LCL.ED_Consignee_Addr_4 = LCL.ED_Consignee_Addr_4 + PAR.ED_Consignee_Postal (1);

 //?Get State for Domestic Address Else Concat Only Zip Code.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.ED Consignee Addr 4 = PAR.ED Consignee Postal
 LCL.ED_Consignee_Addr_4 = PAR.ED_Consignee_Postal;

 ENDIF;

 //?Concat State/Zip to Last Non Blank Address Line.
 CASE;

 // IF PAR.ED Consignee Addr 3 is Not Blank
 IF PAR.ED_Consignee_Addr_3 <> *BLANK;

 // PAR.ED Consignee Addr 3 = CONCAT(PAR.ED Consignee Addr 3,LCL.ED Consignee Addr 4,CON.1)
 PAR.ED_Consignee_Addr_3 = PAR.ED_Consignee_Addr_3 + LCL.ED_Consignee_Addr_4 (1);

 //?Concat State/Zip to Last Non Blank Address Line.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Must Concat on Address 2 Line.
 // PAR.ED Consignee Addr 2 = CONCAT(PAR.ED Consignee Addr 2,LCL.ED Consignee Addr 4,CON.1)
 PAR.ED_Consignee_Addr_2 = PAR.ED_Consignee_Addr_2 + LCL.ED_Consignee_Addr_4 (1);

 ENDIF;

 ENDIF;

 //?Check Addr 4/City & Suppress Blank Address Line.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Addr4/City is Entered, Concat State & Zip.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.ED Consignee Addr 4 = CONCAT(PAR.ED Consignee Addr 4,PAR.ED Consignee State,CON.1)
 LCL.ED_Consignee_Addr_4 = PAR.ED_Consignee_Addr_4 + PAR.ED_Consignee_State (1);

 // LCL.ED Consignee Addr 4 = CONCAT(LCL.ED Consignee Addr 4,PAR.ED Consignee Postal,CON.1)
 LCL.ED_Consignee_Addr_4 = LCL.ED_Consignee_Addr_4 + PAR.ED_Consignee_Postal (1);

 ENDIF;

 CASE;

 // IF PAR.ED Consignee Addr 2 is Blank
 IF PAR.ED_Consignee_Addr_2 = *BLANK;

 // PAR.ED Consignee Addr 2 = LCL.ED Consignee Addr 4
 PAR.ED_Consignee_Addr_2 = LCL.ED_Consignee_Addr_4;

 // PAR.ED Consignee Addr 4 = LCL.USR Blank Field
 PAR.ED_Consignee_Addr_4 = LCL.USR_Blank_Field;

 // IF PAR.ED Consignee Addr 3 is Blank
 IF PAR.ED_Consignee_Addr_3 = *BLANK;

 // PAR.ED Consignee Addr 3 = LCL.ED Consignee Addr 4
 PAR.ED_Consignee_Addr_3 = LCL.ED_Consignee_Addr_4;

 // PAR.ED Consignee Addr 4 = LCL.USR Blank Field
 PAR.ED_Consignee_Addr_4 = LCL.USR_Blank_Field;

 ENDIF;

 ENDIF;

 ENDIF;

 //?Get Consignor Country Desc.
 CASE;

 // IF PAR.ED Consignor Country Code is Entered
 IF PAR.ED_Consignor_Country_Code <> *BLANK;

 EXECUTE FUNCTION(Rtv Country Desc       RT) TYPE(RTVOBJ) FILE(OME5REP)          AC2188699;
 PARAMETER(PAR.ED_Consignor_Country_Code);
 PARAMETER(PAR.Consignor_Country_Desc_U);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Move Country Desc to Addr 3 or 4 if Blank.
 CASE;

 // IF PAR.ED Consignor Addr 3 is eq blank
 IF PAR.ED_Consignor_Addr_3 = *BLANK;

 // PAR.ED Consignor Addr 3 = PAR.Consignor Country Desc U
 PAR.ED_Consignor_Addr_3 = PAR.Consignor_Country_Desc_U;

 // PAR.Consignor Country Desc U = CON.*BLANK
 PAR.Consignor_Country_Desc_U = *BLANK;

 //?Move Country Desc to Addr 3 or 4 if Blank.
 // IF PAR.ED Consignor Addr 4 is eq blank
 IF PAR.ED_Consignor_Addr_4 = *BLANK;

 // PAR.ED Consignor Addr 4 = PAR.Consignor Country Desc U
 PAR.ED_Consignor_Addr_4 = PAR.Consignor_Country_Desc_U;

 // PAR.Consignor Country Desc U = CON.*BLANK
 PAR.Consignor_Country_Desc_U = *BLANK;

 ENDIF;

 ENDIF;

 //?Get Consignee Country Desc.
 CASE;

 // IF PAR.ED Consignee Country Code is Entered
 IF PAR.ED_Consignee_Country_Code <> *BLANK;

 //?Set 'THE PEOPLE'S REPUBLIC OF CHINA' Else Get Country Desc.
 CASE;

 // IF PAR.ED Consignee Country Code is China
 IF PAR.ED_Consignee_Country_Code = 'CHN';

 // PAR.Consignee Country Desc U = CONCAT(CON.THE PEOPLE'S REPUBLIC OF,CON.CHINA,CON.1)
 PAR.Consignee_Country_Desc_U = 'THE PEOPLE'S REPUBLIC OF' + 'CHINA' (1);

 //?Set 'THE PEOPLE'S REPUBLIC OF CHINA' Else Get Country Desc.
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Country Desc       RT) TYPE(RTVOBJ) FILE(OME5REP)          AC2188699;
 PARAMETER(PAR.ED_Consignee_Country_Code);
 PARAMETER(PAR.Consignee_Country_Desc_U);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?Move Country Desc to Addr 3 or 4 if Blank.
 CASE;

 // IF PAR.ED Consignee Addr 3 is eq blank
 IF PAR.ED_Consignee_Addr_3 = *BLANK;

 // PAR.ED Consignee Addr 3 = PAR.Consignee Country Desc U
 PAR.ED_Consignee_Addr_3 = PAR.Consignee_Country_Desc_U;

 // PAR.Consignee Country Desc U = CON.*BLANK
 PAR.Consignee_Country_Desc_U = *BLANK;

 //?Move Country Desc to Addr 3 or 4 if Blank.
 // IF PAR.ED Consignee Addr 4 is eq blank
 IF PAR.ED_Consignee_Addr_4 = *BLANK;

 // PAR.ED Consignee Addr 4 = PAR.Consignee Country Desc U
 PAR.ED_Consignee_Addr_4 = PAR.Consignee_Country_Desc_U;

 // PAR.Consignee Country Desc U = CON.*BLANK
 PAR.Consignee_Country_Desc_U = *BLANK;

 ENDIF;

 ENDIF;

}


//?Move Left for Consignor & Move Right for Consignee.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Cnsgnr/Cnsgne Name USR = CUR.ED Consignor Name
CUR.Cnsgnr_Cnsgne_Name_USR = CUR.ED_Consignor_Name;

// Execute function *Move-Right.
EXECUTE FUNCTION(*Move-Right) TYPE(EXCUSRSRC) ('PDUIUFR');
PARAMETER(CUR.Cnsgnr_Cnsgne_Name_USR);
PARAMETER(CUR.ED_Consignee_Name);
{
 C                     MOVE #IPANA    #OO9NA
}


// CUR.Cnsgnr/Cnsgne Addr1 USR = CUR.ED Consignor Addr 1
CUR.Cnsgnr_Cnsgne_Addr1_USR = CUR.ED_Consignor_Addr_1;

// Execute function *Move-Right.
EXECUTE FUNCTION(*Move-Right) TYPE(EXCUSRSRC) ('PDUIUFR');
PARAMETER(CUR.Cnsgnr_Cnsgne_Addr1_USR);
PARAMETER(CUR.ED_Consignee_Addr_1);
{
 C                     MOVE #IPANA    #OO9NA
}


// CUR.Cnsgnr/Cnsgne Addr2 USR = CUR.ED Consignor Addr 2
CUR.Cnsgnr_Cnsgne_Addr2_USR = CUR.ED_Consignor_Addr_2;

// Execute function *Move-Right.
EXECUTE FUNCTION(*Move-Right) TYPE(EXCUSRSRC) ('PDUIUFR');
PARAMETER(CUR.Cnsgnr_Cnsgne_Addr2_USR);
PARAMETER(CUR.ED_Consignee_Addr_2);
{
 C                     MOVE #IPANA    #OO9NA
}


// CUR.Cnsgnr/Cnsgne Addr3 USR = CUR.ED Consignor Addr 3
CUR.Cnsgnr_Cnsgne_Addr3_USR = CUR.ED_Consignor_Addr_3;

// Execute function *Move-Right.
EXECUTE FUNCTION(*Move-Right) TYPE(EXCUSRSRC) ('PDUIUFR');
PARAMETER(CUR.Cnsgnr_Cnsgne_Addr3_USR);
PARAMETER(CUR.ED_Consignee_Addr_3);
{
 C                     MOVE #IPANA    #OO9NA
}


// CUR.Cnsgnr/Cnsgne Addr4 USR = CUR.ED Consignor Addr 4
CUR.Cnsgnr_Cnsgne_Addr4_USR = CUR.ED_Consignor_Addr_4;

// Execute function *Move-Right.
EXECUTE FUNCTION(*Move-Right) TYPE(EXCUSRSRC) ('PDUIUFR');
PARAMETER(CUR.Cnsgnr_Cnsgne_Addr4_USR);
PARAMETER(CUR.ED_Consignee_Addr_4);
{
 C                     MOVE #IPANA    #OO9NA
}


ENDIF;

ENDIF;

// Print Company Number header format
PRINT Company Number header format;

ENDIF;

CASE;

IF NEW Order_Number;
// SUPPRESSED PRINT Order Number header format

ENDIF;

CASE;

IF NEW ED_Export_Document_Type;
// SUPPRESSED PRINT ED Export Document Type header format

ENDIF;

//?USER: On print of detail format

EXECUTE FUNCTION(Rtv Count No Dtls Cmb RT) TYPE(RTVOBJ) FILE(PDMSREP)           AC1755257;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(CUR.ED_Export_Document_Type);
PARAMETER(CUR.Country_Code);
PARAMETER(LCL.Count_2_USR);
{
 //?USER: Initialize routine

 // PAR.Count 2 USR = CON.*ZERO
 PAR.Count_2_USR = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.ED Item Code NE LCL.ED Item Code
 IF DB1.ED_Item_Code <> LCL.ED_Item_Code;

 // PAR.Count 2 USR = PAR.Count 2 USR + CON.1
 PAR.Count_2_USR = PAR.Count_2_USR + 1;

 // LCL.ED Item Code = DB1.ED Item Code
 LCL.ED_Item_Code = DB1.ED_Item_Code;

 ENDIF;

}


//?DO2642 DN 08/15/22-Build Export Doc Order Dtl PRT (PUCFCPP) File.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Crt Exp Doc Ord Dtl PRTXF.
CALL PROGRAM(Crt Exp Doc Ord Dtl PRTXF) ('PUWBXFR');
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(CUR.ED_Export_Document_Type);
PARAMETER(CUR.Country_Code);
PARAMETER(CUR.ED_Xlate_Desc_to_Country);

ENDIF;

//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : Prt Appl f/Export New  PO
EXECUTE FUNCTION(Prt Appl f/Export V2   PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(CUR.ED_Export_Document_Type);
PARAMETER(CUR.Country_Code);
PARAMETER(CUR.ED_Shipping_Marks_Txt);
PARAMETER(CUR.ED_Nbr_of_prods_on_1st_pg);
PARAMETER(PAR.USR_Overflow);
PARAMETER(LCL.Count_2_USR);
PARAMETER(PAR.Print_On_Form);
PARAMETER(LCL.EDE_Frozen_Shelf_Life_Sts);
PARAMETER(CUR.ED_Species);
PARAMETER(CUR.ED_Xlate_Desc_to_Country);
{
 //?USER: Initialize routine

 // PAR.Count 2 USR = CON.*ZERO
 PAR.Count_2_USR = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.ED Item Code NE LCL.ED Item Code
 IF DB1.ED_Item_Code <> LCL.ED_Item_Code;

 // PAR.Count 2 USR = PAR.Count 2 USR + CON.1
 PAR.Count_2_USR = PAR.Count_2_USR + 1;

 // LCL.ED Item Code = DB1.ED Item Code
 LCL.ED_Item_Code = DB1.ED_Item_Code;

 ENDIF;

}


//?USER: Print required level totals

// SUPPRESSED PRINT ED Export Document Type totals format

CASE;

IF NEW Order_Number;
EXECUTE FUNCTION(Rtv Consignor Nm      RT) TYPE(RTVOBJ) FILE(PDMMREP)           AC1705146;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.ED_Export_Document_Type);
PARAMETER(CUR.Country_Code);
PARAMETER(WRK.ED_Consignor_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF CUR.Company Number is St. Joseph
IF CUR.Company_Number = 960;

// CUR.Text USR 40 = CONCAT(CON.Export Coordinator;,WRK.ED Consignor Name,CON.*ZERO)
CUR.Text_USR_40 = 'Export Coordinator;' + WRK.ED_Consignor_Name (0);

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Text USR 40 = CONCAT(CON.Billing Clerk-,WRK.ED Consignor Name,CON.1)
CUR.Text_USR_40 = 'Billing Clerk-' + WRK.ED_Consignor_Name (1);

ENDIF;

CASE;

// IF PAR.USR Overflow is Yes
IF PAR.USR_Overflow = *BLANK;

// CUR.ED Continue Comment Txt = CONCAT(CON.Continuation of Product A,CON.ttached,CON.*ZERO)
CUR.ED_Continue_Comment_Txt = 'Continuation of Product A' + 'ttached' (*ZERO);

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.ED Continue Comment Txt = CON.*BLANK
CUR.ED_Continue_Comment_Txt = *BLANK;

ENDIF;

//?dont print date for STF  / & TF added 8/20/19 RMC
CASE;

// IF CUR.Company Number is NE Seaboard Triumph
IF CUR.Company_Number <> 440;

// AND CUR.Company Number is NE 960
AND CUR.Company_Number <> 960;

// CUR.Date MM/DD/YYYY     USR = CONCAT(LCL.Month/Day MM/DD/,LCL.Year USR,CON.*ZERO)
CUR.Date_MM_DD_YYYY_USR = LCL.Month_Day_MM_DD + LCL.Year_USR (*ZERO);

ENDIF;

// Print Order Number totals format
PRINT Order Number totals format;

ENDIF;

// SUPPRESSED PRINT Company Number totals format

