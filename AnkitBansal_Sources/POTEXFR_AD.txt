// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POTEXFR
// ?Date: 14.08.2025 Time: 03:38:57
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modification history
DO;

//?08/11/2016 JBB E5262 - Chargeback and Rebill project
//?           Recompiled for change in select criteria for the
//?           addition of select criteria on access path ARBDCPLA.
ENDDO;

//?one cust yr mo
EXECUTE FUNCTION(CNV A/R Bal MTD Flds  RT) TYPE(RTVOBJ) FILE(PDLDCPP)           AC1658285;
PARAMETER(PAR.A_R_Balance_Year);
PARAMETER(PAR.A_R_Balance_Month);
{
 //?USER: Initialize routine

 //?***** Change Log and Comments
 //?** 09/11/2006 LJB L60906C
 //?** Update the A/R Balance Days to Pay with the count from
 //?** the A/R Header File. Add new Days to Pay field to the CHGOBJ.
 //?** Round the Bal Avg Days to Pay calculations.
 //?*****
 //?USER: Process Data record

 CASE;

 // IF DB1.A/R Balance Year EQ PAR.A/R Balance Year
 IF DB1.A_R_Balance_Year = PAR.A_R_Balance_Year;

 // AND DB1.A/R Balance Month EQ PAR.A/R Balance Month
 AND DB1.A_R_Balance_Month = PAR.A_R_Balance_Month;

 //?First day of the month
 // WRK.Year  NBR USR = DB1.A/R Balance Year
 WRK.Year_NBR_USR = DB1.A_R_Balance_Year;

 // WRK.Text 1 Length USR = CON.1
 WRK.Text_1_Length_USR = 1;

 // WRK.Day   (Char) USR = CON.01
 WRK.Day_Char_USR = 01;

 // WRK.Year Alpha (YY) USR = WRK.Year  NBR USR
 WRK.Year_Alpha_YY_USR = WRK.Year_NBR_USR;

 // WRK.Month USR = DB1.A/R Balance Month
 WRK.Month_USR = DB1.A_R_Balance_Month;

 // WRK.Day 1 3A = CONCAT(WRK.Text 1 Length USR,WRK.Year Alpha (YY) USR,CON.*ZERO)
 WRK.Day_1_3A = WRK.Text_1_Length_USR + WRK.Year_Alpha_YY_USR (*ZERO);

 // WRK.Text USR 5 = CONCAT(WRK.Day 1 3A,WRK.Month USR,CON.*ZERO)
 WRK.Text_USR_5 = WRK.Day_1_3A + WRK.Month_USR (*ZERO);

 // WRK.Date (Alpha) USR = CONCAT(WRK.Text USR 5,WRK.Day   (Char) USR,CON.*ZERO)
 WRK.Date_Alpha_USR = WRK.Text_USR_5 + WRK.Day_Char_USR (*ZERO);

 // WRK.Paid in Full Date = CVTVAR(WRK.Date (Alpha) USR)
 WRK.Paid_in_Full_Date = CVTVAR(WRK.Date_Alpha_USR);

 //?Update A/R Balance at Month-end - new fields 11/15/02
 EXECUTE FUNCTION(RTV Days Paid MTD      RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1357656;
 PARAMETER(DB1.Company_Number);
 PARAMETER(WRK.Paid_in_Full_Date);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(WRK.Days_to_Pay);
 PARAMETER(DB1.A_R_Balance_Month);
 PARAMETER(WRK.Year_NBR_USR);
 PARAMETER(WRK.Bal_Nbr_of_Invoices_Paid);
 {
  //?USER: Initialize routine

  // PAR.Days to Pay = CND.equal to zero
  PAR.Days_to_Pay = *ZERO;

  // PAR.MTD Invoices Paid = CND.Equal zero
  PAR.MTD_Invoices_Paid = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF DB1.Remaining Balance Due is equal to zero
  IF DB1.Remaining_Balance_Due = *ZERO;

  // AND DB1.Invoice Suffix is Invoice or Debit Memo
  AND DB1.Invoice_Suffix = 'DM'/'IN';

  // PAR.USR Job Year = DB1.Paid in Full Date *YEAR
  PAR.USR_Job_Year = DATEDTLS(DB1.Paid_in_Full_Date 'YR' 1111111 'NONE' 'N' 1);

  // PAR.USR Job Month = DB1.Paid in Full Date *MONTH
  PAR.USR_Job_Month = DATEDTLS(DB1.Paid_in_Full_Date 'MO' 1111111 'NONE' 'N' 1);

  CASE;

  // IF PAR.USR Job Year EQ PAR.*Job year
  IF PAR.USR_Job_Year = PAR.*Job_year;

  // AND PAR.USR Job Month EQ PAR.USR Current Month
  AND PAR.USR_Job_Month = PAR.USR_Current_Month;

  // PAR.Days to Pay = DB1.Days to Pay + PAR.Days to Pay
  PAR.Days_to_Pay = DB1.Days_to_Pay + PAR.Days_to_Pay;

  // PAR.MTD Invoices Paid = PAR.MTD Invoices Paid + CON.1
  PAR.MTD_Invoices_Paid = PAR.MTD_Invoices_Paid + 1;

  // IF *OTHERWISE
  IF *OTHERWISE;

  QUIT;

  ENDIF;

  ENDIF;

 }

 // WRK.Bal Avg Days to Pay = CON.*ZERO
 WRK.Bal_Avg_Days_to_Pay = *ZERO;

 CASE;

 // IF WRK.Bal Nbr of Invoices Paid is Greater than zero
 IF WRK.Bal_Nbr_of_Invoices_Paid > *ZERO;

 // WRK.Bal Avg Days to Pay = WRK.Days to Pay / WRK.Bal Nbr of Invoices Paid *Rounded
 WRK.Bal_Avg_Days_to_Pay = WRK.Days_to_Pay / WRK.Bal_Nbr_of_Invoices_Paid 'H';

 ENDIF;

 // LCL.Invoice Date = CVTVAR(WRK.Date (Alpha) USR)
 LCL.Invoice_Date = CVTVAR(WRK.Date_Alpha_USR);

 //?*
 EXECUTE FUNCTION(Rtv f/A/R Bal MTD Upd RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1658275;
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(LCL.Invoice_Date);
 PARAMETER(DB1.A_R_Balance_Month);
 PARAMETER(DB1.A_R_Balance_Year);
 PARAMETER(WRK.Bal_Nbr_of_Invoices);
 PARAMETER(WRK.Bal_Nbr_of_Credits);
 PARAMETER(DB1.Company_Number);
 {
  //?USER: Initialize routine

  // PAR.Bal Nbr of Invoices = CON.*ZERO
  PAR.Bal_Nbr_of_Invoices = *ZERO;

  // PAR.Bal Nbr of Credits = CON.*ZERO
  PAR.Bal_Nbr_of_Credits = *ZERO;

  //?USER: Process Data record

  // WRK.Month                 USR = DB1.Invoice Date *MONTH
  WRK.Month_USR = DATEDTLS(DB1.Invoice_Date 'MO' 1111111 'NONE' 'N' 1);

  // WRK.Year Code = DB1.Invoice Date *YEAR
  WRK.Year_Code = DATEDTLS(DB1.Invoice_Date 'YR' 1111111 'NONE' 'N' 1);

  CASE;

  // IF WRK.Year Code EQ PAR.Year Code
  IF WRK.Year_Code = PAR.Year_Code;

  // AND WRK.Month                 USR EQ PAR.Month                 USR
  AND WRK.Month_USR = PAR.Month_USR;

  //?12/07/06 PKD PK0040 Retrieve the Accounting Company Number for
  //?             the Order and only accumulate if PAR.Company Number
  //?             is equal to the Accounting Company Number.
  EXECUTE FUNCTION(RTV OD Whs/ShpCo/AccCo RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1801010;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(NLL.Warehouse_Code);
  PARAMETER(LCL.Shipping_Company);
  PARAMETER(LCL.Accounting_Company);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Detail Line Status is Not cancelled
   IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

   EXECUTE FUNCTION(RTV OD Whs/ShpCo/AccCo RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1801011;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.Shipping_Company);
   PARAMETER(PAR.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // PAR.Warehouse Code = DB1.Warehouse Code
   PAR.Warehouse_Code = DB1.Warehouse_Code;

   QUIT;

   ENDIF;

  }

  CASE;

  // IF LCL.Accounting Company EQ PAR.Company Number
  IF LCL.Accounting_Company = PAR.Company_Number;

  CASE;

  // IF DB1.Billing Activity Type is Invoice
  IF DB1.Billing_Activity_Type = '1';

  // PAR.Bal Nbr of Invoices = PAR.Bal Nbr of Invoices + CON.1
  PAR.Bal_Nbr_of_Invoices = PAR.Bal_Nbr_of_Invoices + 1;

  // IF DB1.Billing Activity Type is Credit Memo
  IF DB1.Billing_Activity_Type = '2';

  // PAR.Bal Nbr of Credits = PAR.Bal Nbr of Credits + CON.1
  PAR.Bal_Nbr_of_Credits = PAR.Bal_Nbr_of_Credits + 1;

  ENDIF;

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  QUIT;

  ENDIF;

 }

 EXECUTE FUNCTION(Rtv f/A/R Bal #OrdUpd RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1658323;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(LCL.Invoice_Date);
 PARAMETER(DB1.A_R_Balance_Month);
 PARAMETER(DB1.A_R_Balance_Year);
 PARAMETER(WRK.Bal_Nbr_of_Orders);
 {
  //?USER: Initialize routine

  // PAR.Bal Nbr of Orders = CON.*ZERO
  PAR.Bal_Nbr_of_Orders = *ZERO;

  //?USER: Process Data record

  // WRK.Month                 USR = DB1.Order Date *MONTH
  WRK.Month_USR = DATEDTLS(DB1.Order_Date 'MO' 1111111 'NONE' 'N' 1);

  // WRK.Year Code = DB1.Order Date *YEAR
  WRK.Year_Code = DATEDTLS(DB1.Order_Date 'YR' 1111111 'NONE' 'N' 1);

  CASE;

  // IF WRK.Year Code EQ PAR.Year Code
  IF WRK.Year_Code = PAR.Year_Code;

  // AND WRK.Month                 USR EQ PAR.Month                 USR
  AND WRK.Month_USR = PAR.Month_USR;

  //?12/07/06 PKD PK0040 Retrieve the Accounting Company Number for
  //?             the Order and only accumulate if PAR.Company Number
  //?             is equal to the Accounting Company Number.
  EXECUTE FUNCTION(RTV OD Whs/ShpCo/AccCo RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1801010;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(NLL.Warehouse_Code);
  PARAMETER(LCL.Shipping_Company);
  PARAMETER(LCL.Accounting_Company);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Detail Line Status is Not cancelled
   IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

   EXECUTE FUNCTION(RTV OD Whs/ShpCo/AccCo RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1801011;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.Shipping_Company);
   PARAMETER(PAR.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // PAR.Warehouse Code = DB1.Warehouse Code
   PAR.Warehouse_Code = DB1.Warehouse_Code;

   QUIT;

   ENDIF;

  }

  CASE;

  // IF LCL.Accounting Company EQ PAR.Company Number
  IF LCL.Accounting_Company = PAR.Company_Number;

  // PAR.Bal Nbr of Orders = PAR.Bal Nbr of Orders + CON.1
  PAR.Bal_Nbr_of_Orders = PAR.Bal_Nbr_of_Orders + 1;

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  QUIT;

  ENDIF;

 }

 //?*
 CASE;

 // IF DB1.Bal Avg Days to Pay NE WRK.Bal Avg Days to Pay
 IF DB1.Bal_Avg_Days_to_Pay <> WRK.Bal_Avg_Days_to_Pay;

 EXECUTE FUNCTION(Chg/Crt A/R Bal MTDs  CH) TYPE(CHGOBJ) FILE(PDLDCPP)           AC1658270;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.A_R_Balance_Year);
 PARAMETER(DB1.A_R_Balance_Month);
 PARAMETER(DB1.Bal_Nbr_of_Orders);
 PARAMETER(DB1.Bal_Nbr_of_Credits);
 PARAMETER(DB1.Bal_Nbr_of_Payments);
 PARAMETER(DB1.Bal_Nbr_of_Invoices);
 PARAMETER(DB1.Bal_Nbr_of_Invoices_Paid);
 PARAMETER(WRK.Bal_Avg_Days_to_Pay);
 PARAMETER(WRK.Days_to_Pay);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT A/R Balance File   CR) TYPE(CRTOBJ) FILE(PDLDCPP)          AC1450075;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.AR_Customer_Number);
  PARAMETER(PAR.A_R_Balance_Year);
  PARAMETER(PAR.A_R_Balance_Month);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Bal_Nbr_of_Orders);
  PARAMETER(PAR.Bal_Nbr_of_Credits);
  PARAMETER(PAR.Bal_Nbr_of_Payments);
  PARAMETER(PAR.Bal_Nbr_of_Invoices);
  PARAMETER(PAR.Bal_Nbr_of_Invoices_Paid);
  PARAMETER(PAR.Bal_Avg_Days_to_Pay);
  PARAMETER(PAR.Days_to_Pay);
  PARAMETER(WRK.Override_Total_Load_Miles);
  PARAMETER(WRK.SSI_Download_Flag);
  PARAMETER(WRK.unused_status_2);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 ENDIF;

}


