// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDW7EFR
// ?Date: 14.08.2025 Time: 03:33:28
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(WRK.Allow_Multi_Company);
PARAMETER(WRK.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(RTV First Order Whse   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1397882;
PARAMETER(PAR.Load_ID);
PARAMETER(*ZERO);
PARAMETER(PAR.Ship_From_Warehouse);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.TXT_field_not_needed);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 QUIT;

}


EXECUTE FUNCTION(RTV Total Ld Mi/Sts    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1496186;
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Load_Status);
PARAMETER(PAR.Total_Load_Miles);
PARAMETER(PAR.Override_Total_Load_Miles);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Calculate miles if there are any missing
CASE;

// IF PAR.Total Load Miles EQ WRK.ZERO
IF PAR.Total_Load_Miles = WRK.ZERO;

// Call program CLC Total Load Miles   XF.
CALL PROGRAM(CLC Total Load Miles   XF) ('PDW3XFR');
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Total_Load_Miles);
PARAMETER(PAR.Override_Total_Load_Miles);

//?** Only update the Total Load Miles if no Override TLM   E00207
CASE;

// IF PAR.Override Total Load Miles is Not Entered
IF PAR.Override_Total_Load_Miles = *ZERO;

//?** 01/02/2008 LJB FP1251 Total Load Miles will be = zeros if no
//?** Miles Between Cities record exists for any leg of the journey.
CASE;

// IF PAR.Total Load Miles NE WRK.ZERO
IF PAR.Total_Load_Miles <> WRK.ZERO;

EXECUTE FUNCTION(CHG Total Load Miles   CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1455677;
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Total_Load_Miles);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

//?** Only update the Total Load Miles if no Override TLM   E00207
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(CHG Total Load Miles   CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1455677;
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Total_Load_Miles);
PARAMETER(PAR.Override_Total_Load_Miles);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

ENDIF;

//?** Put the retrieved miles on the screen         E00207
// CTL.Total Load Miles = PAR.Total Load Miles
CTL.Total_Load_Miles = PAR.Total_Load_Miles;

// CTL.Override Total Load Miles = PAR.Override Total Load Miles
CTL.Override_Total_Load_Miles = PAR.Override_Total_Load_Miles;

//?** Save already entered Override miles for later updates
// WRK.Override Total Load Miles = PAR.Override Total Load Miles
WRK.Override_Total_Load_Miles = PAR.Override_Total_Load_Miles;

// WRK.Change Flag USR = CND.No
WRK.Change_Flag_USR = 'N';

//?** Override miles flag
CASE;

// IF CTL.Override Total Load Miles is Entered
IF CTL.Override_Total_Load_Miles <> *ZERO;

// WRK.Change Flag USR = CND.Yes
WRK.Change_Flag_USR = 'Y';

ENDIF;

//?USER: Initialize subfile header

EXECUTE FUNCTION(RTV Warehouse Address  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1211418;
PARAMETER(PAR.Ship_From_Warehouse);
PARAMETER(WRK.Warehouse_Description);
PARAMETER(WRK.Address_Line_1);
PARAMETER(WRK.Address_Line_2);
PARAMETER(WRK.Address_Line_3);
PARAMETER(PAR.From_City);
PARAMETER(WRK.Zip_Postal_Code);
PARAMETER(PAR.From_State);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Retrieve Load Header info       (add override miles-E00207)
EXECUTE FUNCTION(RTV Mileage Info       RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1495805;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Total_Load_Miles);
PARAMETER(CTL.Ship_From_Warehouse);
PARAMETER(CTL.Bring_Back_Miles);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Override_Total_Load_Miles);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If Ship From Whse in header is wrong, reset it
CASE;

// IF CTL.Ship From Warehouse NE PAR.Ship From Warehouse
IF CTL.Ship_From_Warehouse <> PAR.Ship_From_Warehouse;

EXECUTE FUNCTION(CHG Ship From Whse     CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1469205;
PARAMETER(CTL.Load_ID);
PARAMETER(PAR.Ship_From_Warehouse);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// CTL.Ship From Warehouse = PAR.Ship From Warehouse
CTL.Ship_From_Warehouse = PAR.Ship_From_Warehouse;

ENDIF;

// PAR.USR Stop/Drop = CON.*ZERO
PAR.USR_Stop_Drop = *ZERO;

//?Override 1st from city/state if have 2nd pick whse
CASE;

// IF CTL.Warehouse Code NE WRK.BLANK
IF CTL.Warehouse_Code <> WRK.BLANK;

EXECUTE FUNCTION(RTV Warehouse Address  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1211418;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(WRK.Warehouse_Description);
PARAMETER(WRK.Address_Line_1);
PARAMETER(WRK.Address_Line_2);
PARAMETER(WRK.Address_Line_3);
PARAMETER(PAR.From_City);
PARAMETER(WRK.Zip_Postal_Code);
PARAMETER(PAR.From_State);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// PAR.Bring Back Miles = CTL.Bring Back Miles
PAR.Bring_Back_Miles = CTL.Bring_Back_Miles;

// PAR.Warehouse Code = CTL.Warehouse Code
PAR.Warehouse_Code = CTL.Warehouse_Code;

// PAR.Override Total Load Miles = CTL.Override Total Load Miles
PAR.Override_Total_Load_Miles = CTL.Override_Total_Load_Miles;

//?USER: Initialize subfile record (existing record)

//?Set output status for mileage in the subfile
CASE;

// IF DB1.Miles to next stop is Entered
IF DB1.Miles_to_next_stop <> *ZERO;

// RCD.USR Output Only Status = CND.yes
RCD.USR_Output_Only_Status = 'Y';

//?Set output status for mileage in the subfile
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.USR Output Only Status = CND.no
RCD.USR_Output_Only_Status = 'N';

ENDIF;

// RCD.From City = PAR.From City
RCD.From_City = PAR.From_City;

// RCD.From State = PAR.From State
RCD.From_State = PAR.From_State;

//?Determine Export Status
DO;

//?**************************************************************************
//?** 01/18/2007 LJB L70108A - Retrieve the export status from the
//?** order header because some loads have export and domestic
//?** combined on them. This will retrieve the correct ship to
//?** city and state.
EXECUTE FUNCTION(RTV Export Status      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1449325;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(PAR.Export_Status);
{
 //?USER: Initialize routine

 // PAR.Export Status = CND.blank
 PAR.Export_Status = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** FP1101 11/08/2007 Get shipping line and term from order hdr ext
CASE;

// IF PAR.Export Status is yes
IF PAR.Export_Status = 'Y';

EXECUTE FUNCTION(RTV OHE Ship fields    RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC1814635;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(PAR.Shipping_Line);
PARAMETER(PAR.Port_Delv_Terminal);
PARAMETER(LCL.OHE_City);
PARAMETER(LCL.OHE_Vessel_Airline);
PARAMETER(LCL.OHE_Voyage_Flight);
PARAMETER(LCL.OHE_Booking_Number);
PARAMETER(LCL.OHE_Discharge_Port_Airprt);
PARAMETER(LCL.OHE_Sail_Flight_Date);
PARAMETER(LCL.OHE_Port_Cut_Date);
PARAMETER(LCL.OHE_Arrival_Date);
PARAMETER(LCL.OHE_Late_Delivery_Code);
PARAMETER(LCL.OHE_Ship_Status);
PARAMETER(LCL.OHE_Container_Number);
PARAMETER(LCL.OHE_Comment_1);
PARAMETER(LCL.OHE_Comment_2);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Shipping Line/PortsRT) TYPE(RTVOBJ) FILE(PDLCREP)          AC1447742;
PARAMETER(PAR.Shipping_Line);
PARAMETER(PAR.Port_Delv_Terminal);
PARAMETER(RCD.Ship_To_City);
PARAMETER(WRK.Port_Address_Line_1);
PARAMETER(WRK.Port_Address_Line_2);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(WRK.Port_Zip_Postal_Code);
PARAMETER(WRK.Port_Phone_Number);
PARAMETER(WRK.Port_Fax_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


//?** FP1101 11/08/2007 Get shipping line and term from order hdr ext
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Ship To City/State RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1454149;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Ship_To_City);
PARAMETER(RCD.Ship_To_State_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

ENDDO;

//?2nd order on stop
CASE;

// IF DB1.Stop/Drop EQ PAR.USR Stop/Drop
IF DB1.Stop_Drop = PAR.USR_Stop_Drop;

//?(2nd order on stop)
// RCD.From City = CON.*BLANK
RCD.From_City = *BLANK;

// RCD.From State = CON.*BLANK
RCD.From_State = *BLANK;

// RCD.Ship To City = CON.*BLANK
RCD.Ship_To_City = *BLANK;

// RCD.Ship To State Code = CON.*BLANK
RCD.Ship_To_State_Code = *BLANK;

// RCD.Miles to next stop = CON.*ZERO
RCD.Miles_to_next_stop = *ZERO;

// RCD.USR Output Only Status = CND.yes
RCD.USR_Output_Only_Status = 'Y';

//?2nd order on stop
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.From City = RCD.Ship To City
PAR.From_City = RCD.Ship_To_City;

// PAR.From State = RCD.Ship To State Code
PAR.From_State = RCD.Ship_To_State_Code;

ENDIF;

// PAR.USR Stop/Drop = DB1.Stop/Drop
PAR.USR_Stop_Drop = DB1.Stop_Drop;

//?USER: Validate subfile control

//?Validate 2nd pick warehouse
CASE;

// IF CTL.Warehouse Code is Warehouse Code not Blank
IF CTL.Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(Val Warehouse Exists   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1323885;
PARAMETER(CTL.Warehouse_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Warehouse Codes not found.'
ERROR(USR0007);
MSGPARM(CTL.Warehouse_Code);

ENDIF;

ENDIF;

//?Ship from warehouse and 2nd pick warehouse can't be the same
CASE;

// IF CTL.Warehouse Code EQ CTL.Ship From Warehouse
IF CTL.Warehouse_Code = CTL.Ship_From_Warehouse;

// Send error message - '2nd pick warehouse can't equal ship from warehouse.'
ERROR(USR2497);
MSGPARM(CTL.Warehouse_Code);

ENDIF;

//?Check to see if bring back miles or 2nd pick warehouse have been changed
CASE;

// IF CTL.Bring Back Miles NE PAR.Bring Back Miles
IF CTL.Bring_Back_Miles <> PAR.Bring_Back_Miles;

// OR CTL.Warehouse Code NE PAR.Warehouse Code
OR CTL.Warehouse_Code <> PAR.Warehouse_Code;

EXECUTE FUNCTION(CHG Bring Back, 2 Whse CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1467576;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Bring_Back_Miles);
PARAMETER(CTL.Warehouse_Code);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// PAR.Bring Back Miles = CTL.Bring Back Miles
PAR.Bring_Back_Miles = CTL.Bring_Back_Miles;

// PAR.Warehouse Code = CTL.Warehouse Code
PAR.Warehouse_Code = CTL.Warehouse_Code;

ENDIF;

//?** If miles have been overriden, update and write log      E00207
CASE;

// IF CTL.Override Total Load Miles NE PAR.Override Total Load Miles
IF CTL.Override_Total_Load_Miles <> PAR.Override_Total_Load_Miles;

//?** Write internal load order change log       E00207
// WRK.Text 7 Alpha Usr = CVTVAR(CTL.Total Load Miles)
WRK.Text_7_Alpha_Usr = CVTVAR(CTL.Total_Load_Miles);

// WRK.Text USR 7 = CVTVAR(CTL.Override Total Load Miles)
WRK.Text_USR_7 = CVTVAR(CTL.Override_Total_Load_Miles);

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER('OVRMIL');
PARAMETER('INT');
PARAMETER(WRK.Text_7_Alpha_Usr);
PARAMETER(WRK.Text_USR_7);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(*BLANK);
PARAMETER(WRK.Company_Number);
PARAMETER(*ZERO);

//?** Update the Load Header file              E00207
EXECUTE FUNCTION(CHG Ovrrde Ttl Ld MilesCH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1894993;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Override_Total_Load_Miles);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// PAR.Override Total Load Miles = CTL.Override Total Load Miles
PAR.Override_Total_Load_Miles = CTL.Override_Total_Load_Miles;

ENDIF;

//?USER: Validate subfile record fields

EXECUTE FUNCTION(RTV Ship To City/State RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1454149;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Ship_To_City);
PARAMETER(RCD.Ship_To_State_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG Recovery Freight   CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1292118;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Stop_Drop_Sequence_Number);
PARAMETER(RCD.Miles_to_next_stop);
PARAMETER(RCD.Freight_Misc_Charge);
PARAMETER(RCD.Freight_Stop_Charge);
PARAMETER(RCD.Rated_Freight);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Extra processing after DBF update

CASE;

// IF RCD.Miles to next stop NE WRK.ZERO
IF RCD.Miles_to_next_stop <> WRK.ZERO;

EXECUTE FUNCTION(CRT Miles Bet Cities   IF) TYPE(EXCINTFUN)                     AC1455642;
PARAMETER(RCD.From_City);
PARAMETER(RCD.From_State);
PARAMETER(RCD.Ship_To_City);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(RCD.Miles_to_next_stop);
{
 //?Execute internal function

 //?ensure cities are all caps, no punctuation
 //?usr city is From City; Ship to City is To city
 // Execute function CVT Str to Upper Alpha US.
 EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
 PARAMETER(PAR.From_City);
 PARAMETER(PAR.USR_City);
 {
  PDWEUFR:  PGM PARM(&STRIN &STROUT)

  CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
 }

 // Execute function CVT Str to Upper Alpha US.
 EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
 PARAMETER(PAR.To_City);
 PARAMETER(PAR.Ship_To_City);
 {
  PDWEUFR:  PGM PARM(&STRIN &STROUT)

  CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
 }

 EXECUTE FUNCTION(CRT Mileage Bet Cities CR) TYPE(CRTOBJ) FILE(PDLFREP)          AC1453971;
 PARAMETER(PAR.USR_City);
 PARAMETER(PAR.From_State);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.To_State_State_Code);
 PARAMETER(PAR.Miles_to_next_stop);
}


ENDIF;

//?If miles or override have changed, update deadline departure  E00207
CASE;

// IF CTL.Total Load Miles NE WRK.Total Load Miles
IF ( CTL.Total_Load_Miles <> WRK.Total_Load_Miles;

// OR CTL.Override Total Load Miles NE PAR.Override Total Load Miles
OR CTL.Override_Total_Load_Miles <> PAR.Override_Total_Load_Miles );

// AND PAR.Load Status is Not "E"ntered
AND PAR.Load_Status = 'C'/'I'/'L'/'S'/'U';

// Call program CLC Deadline Date/Time XF.
CALL PROGRAM(CLC Deadline Date/Time XF) ('PMP9XFR');
PARAMETER(CTL.Load_ID);
PARAMETER(PAR.Deadline_Departure_Date);
PARAMETER(PAR.Deadline_Departure_Time);
PARAMETER(NLL.Requested_Delivery_Date);

//?** If no deadline depart date then Miles Between Cities is missing
//?** Update the load header with zeros for DDD/T   FP1251 LJB
EXECUTE FUNCTION(CHG Deadline Dep D/T   CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1493670;
PARAMETER(CTL.Load_ID);
PARAMETER(PAR.Deadline_Departure_Date);
PARAMETER(PAR.Deadline_Departure_Time);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(CHG Deadline Date/Time RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1496989;
PARAMETER(CTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(PAR.Deadline_Departure_Date);
PARAMETER(PAR.Deadline_Departure_Time);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 QUIT;

 //?USER: Process Data record

 EXECUTE FUNCTION(CHG Deadline Date/Time CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1496963;
 PARAMETER(PAR.Load_ID);
 PARAMETER(DB1.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.Deadline_Depart_DT_HDR);
 PARAMETER(PAR.Deadline_Depart_Time_HDR);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(Upd Deadline Dte/Tme  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1648968;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Deadline_Depart_DT_HDR);
  PARAMETER(DB1.Deadline_Depart_Time_HDR);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Deadline Dte/Tme  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1648969;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

 }

}


ENDIF;

//?USER: Process command keys

// Call program CLC Total Load Miles   XF.
CALL PROGRAM(CLC Total Load Miles   XF) ('PDW3XFR');
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.Total_Load_Miles);
PARAMETER(CTL.Override_Total_Load_Miles);

//?If miles changed or recalculating, update deadline departure
CASE;

// IF CTL.Total Load Miles NE WRK.Total Load Miles
IF ( CTL.Total_Load_Miles <> WRK.Total_Load_Miles;

// OR CTL.*CMD key is CF13
OR CTL.*CMD_key = '13';

// OR CTL.Override Total Load Miles NE WRK.Override Total Load Miles
OR CTL.Override_Total_Load_Miles <> WRK.Override_Total_Load_Miles );

// AND PAR.Load Status is Not "E"ntered
AND PAR.Load_Status = 'C'/'I'/'L'/'S'/'U';

// Call program CLC Deadline Date/Time XF.
CALL PROGRAM(CLC Deadline Date/Time XF) ('PMP9XFR');
PARAMETER(CTL.Load_ID);
PARAMETER(PAR.Deadline_Departure_Date);
PARAMETER(PAR.Deadline_Departure_Time);
PARAMETER(NLL.Requested_Delivery_Date);

//?** If no deadline depart date then Miles Between Cities is missing
//?** Update the load header with zeros for DDD/T   FP1251 LJB
EXECUTE FUNCTION(CHG Deadline Dep D/T   CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1493670;
PARAMETER(CTL.Load_ID);
PARAMETER(PAR.Deadline_Departure_Date);
PARAMETER(PAR.Deadline_Departure_Time);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(CHG Deadline Date/Time RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1496989;
PARAMETER(CTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(PAR.Deadline_Departure_Date);
PARAMETER(PAR.Deadline_Departure_Time);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 QUIT;

 //?USER: Process Data record

 EXECUTE FUNCTION(CHG Deadline Date/Time CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1496963;
 PARAMETER(PAR.Load_ID);
 PARAMETER(DB1.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.Deadline_Depart_DT_HDR);
 PARAMETER(PAR.Deadline_Depart_Time_HDR);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(Upd Deadline Dte/Tme  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1648968;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Deadline_Depart_DT_HDR);
  PARAMETER(DB1.Deadline_Depart_Time_HDR);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Deadline Dte/Tme  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1648969;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

 }

}


ENDIF;

//?Miles or Override Miles changed                           E00207
CASE;

// IF WRK.Total Load Miles NE CTL.Total Load Miles
IF WRK.Total_Load_Miles <> CTL.Total_Load_Miles;

// OR WRK.Override Total Load Miles NE PAR.Override Total Load Miles
OR WRK.Override_Total_Load_Miles <> PAR.Override_Total_Load_Miles;

EXECUTE FUNCTION(CHG Total Load Miles   CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1455677;
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.Total_Load_Miles);
PARAMETER(CTL.Override_Total_Load_Miles);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// CTL.Total Load Miles = WRK.Total Load Miles
CTL.Total_Load_Miles = WRK.Total_Load_Miles;

// Send information message - 'Miles have been updated.'
MESSAGE(USR4000 *INFO);
MSGPARM(CTL.Override_Total_Load_Miles);

// WRK.Change Flag USR = CND.Yes
WRK.Change_Flag_USR = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?** F13 = Recalculate Miles (error if Override miles > 0)
CASE;

// IF CTL.*CMD key is CF13
IF CTL.*CMD_key = '13';

CASE;

// IF CTL.Override Total Load Miles is Entered
IF CTL.Override_Total_Load_Miles <> *ZERO;

//?** Error if Override miles > 0            E00207
// Send error message - 'F13 not allowed with Override Miles (F2 for more info)'
ERROR(USR3994);
MSGPARM(CTL.Override_Total_Load_Miles);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program CLC Total Load Miles   XF.
CALL PROGRAM(CLC Total Load Miles   XF) ('PDW3XFR');
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Total_Load_Miles);
PARAMETER(CTL.Override_Total_Load_Miles);

EXECUTE FUNCTION(CHG Total Load Miles   CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1455677;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Total_Load_Miles);
PARAMETER(CTL.Override_Total_Load_Miles);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// Send information message - 'Miles have been updated.'
MESSAGE(USR4000 *INFO);
MSGPARM(CTL.Total_Load_Miles);

ENDIF;

ENDIF;

//?** F18=Add/Edit Mileage Between Cities
CASE;

// IF CTL.*CMD key is CF18
IF CTL.*CMD_key = '18';

// Call program EDT Mileage Bet Cities EF.
CALL PROGRAM(EDT Mileage Bet Cities EF) ('PDWNEFR');

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

