// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDKQPFR
// ?Date: 14.08.2025 Time: 12:04:02
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.Invoice Date = CON.960405
WRK.Invoice_Date = 960405;

//?USER: Record selection processing

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

CASE;

// IF DB1.Invoice Date LT WRK.Invoice Date
IF DB1.Invoice_Date < WRK.Invoice_Date;

// OR DB1.Extended Amount EQ DB1.Billing Detail Gross Dol.
OR DB1.Extended_Amount = DB1.Billing_Detail_Gross_Dol;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Print required level headings

// SUPPRESSED PRINT Company Number header format

// SUPPRESSED PRINT Item Structure Class Code header format

// SUPPRESSED PRINT Shipped Item Code header format

//?USER: On print of detail format

//?Calculate Gross amount
// CUR.Previos Gross Amount  USR = DB1.Billing Detail Gross Dol.
CUR.Previos_Gross_Amount_USR = DB1.Billing_Detail_Gross_Dol;

// CUR.Billing Detail Gross Dol. = DB1.Extended Amount
CUR.Billing_Detail_Gross_Dol = DB1.Extended_Amount;

// CUR.Variance amount 1     USR = CUR.Previos Gross Amount  USR - CUR.Billing Deta
CUR.Variance_amount_1_USR = CUR.Previos_Gross_Amount_USR - CUR.Billing_Detail_Gross_Dol;

//?Calculate FOB Gross amount
// CUR.Previous FOB Gross    USR = DB1.FOB Gross Amount
CUR.Previous_FOB_Gross_USR = DB1.FOB_Gross_Amount;

// CUR.FOB Gross Amount = CUR.Billing Detail Gross Dol. - DB1.Absorbed Freight Amou
CUR.FOB_Gross_Amount = CUR.Billing_Detail_Gross_Dol - DB1.Absorbed_Freight_Amount;

// CUR.Variance Amount 2     USR = CUR.Previous FOB Gross    USR - CUR.FOB Gross Am
CUR.Variance_Amount_2_USR = CUR.Previous_FOB_Gross_USR - CUR.FOB_Gross_Amount;

//?Update History with new Gross and FOB Gross amount
EXECUTE FUNCTION(CHG for Billing Fix    CH) TYPE(CHGOBJ) FILE(OMHSTPP)          AC1405536;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(DB1.Order_Sequence_Number);
PARAMETER(DB1.Order_Secondary_Line_Seq);
PARAMETER(DB1.Billing_Detail_Cost_Dol);
PARAMETER(CUR.Billing_Detail_Gross_Dol);
PARAMETER(CUR.FOB_Gross_Amount);
{
 //?USER: Processing after Data read

 // DB1.Data Mart Process Sts = CND.no
 DB1.Data_Mart_Process_Sts = 'N';

}


//?Accumulate Gross Amount
// WRK.Billing Detail Gross Dol. = WRK.Billing Detail Gross Dol. + CUR.Billing Deta
WRK.Billing_Detail_Gross_Dol = WRK.Billing_Detail_Gross_Dol                                        +
+ CUR.Billing_Detail_Gross_Dol;

// WRK.Previos Gross Amount  USR = WRK.Previos Gross Amount  USR + CUR.Previos Gros
WRK.Previos_Gross_Amount_USR = WRK.Previos_Gross_Amount_USR                                        +
+ CUR.Previos_Gross_Amount_USR;

//?Accumulate FOB Gross Amount
// WRK.FOB Gross Amount = WRK.FOB Gross Amount + CUR.FOB Gross Amount
WRK.FOB_Gross_Amount = WRK.FOB_Gross_Amount + CUR.FOB_Gross_Amount;

// WRK.Previous FOB Gross    USR = WRK.Previous FOB Gross    USR + CUR.Previous FOB
WRK.Previous_FOB_Gross_USR = WRK.Previous_FOB_Gross_USR + CUR.Previous_FOB_Gross_USR;

//?USER: Print required level totals

// SUPPRESSED PRINT Shipped Item Code totals format

CASE;

IF NEW Item_Structure_Class_Code;
//?Calculate Gross amount
// CUR.Previos Gross Amount  USR = WRK.Previos Gross Amount  USR
CUR.Previos_Gross_Amount_USR = WRK.Previos_Gross_Amount_USR;

// CUR.Billing Detail Gross Dol. = WRK.Billing Detail Gross Dol.
CUR.Billing_Detail_Gross_Dol = WRK.Billing_Detail_Gross_Dol;

// CUR.Variance amount 1     USR = CUR.Previos Gross Amount  USR - CUR.Billing Deta
CUR.Variance_amount_1_USR = CUR.Previos_Gross_Amount_USR - CUR.Billing_Detail_Gross_Dol;

//?Calculate FOB Gross amount
// CUR.Previous FOB Gross    USR = WRK.Previous FOB Gross    USR
CUR.Previous_FOB_Gross_USR = WRK.Previous_FOB_Gross_USR;

// CUR.FOB Gross Amount = WRK.FOB Gross Amount
CUR.FOB_Gross_Amount = WRK.FOB_Gross_Amount;

// CUR.Variance Amount 2     USR = CUR.Previous FOB Gross    USR - CUR.FOB Gross Am
CUR.Variance_Amount_2_USR = CUR.Previous_FOB_Gross_USR - CUR.FOB_Gross_Amount;

// Print Item Structure Class Code totals format
PRINT Item Structure Class Code totals format;

// WRK.Previos Gross Amount  USR = CON.*ZERO
WRK.Previos_Gross_Amount_USR = *ZERO;

// WRK.Billing Detail Gross Dol. = CON.*ZERO
WRK.Billing_Detail_Gross_Dol = *ZERO;

// CUR.Variance amount 1     USR = CON.*ZERO
CUR.Variance_amount_1_USR = *ZERO;

// WRK.Previous FOB Gross    USR = CON.*ZERO
WRK.Previous_FOB_Gross_USR = *ZERO;

// WRK.FOB Gross Amount = CON.*ZERO
WRK.FOB_Gross_Amount = *ZERO;

// CUR.Variance Amount 2     USR = CON.*ZERO
CUR.Variance_Amount_2_USR = *ZERO;

ENDIF;

// SUPPRESSED PRINT Company Number totals format

