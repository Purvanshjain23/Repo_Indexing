// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POEFPVR
// ?Date: 14.08.2025 Time: 03:36:52
// ?------------------------------------------------------------------------------------------------

//?USER: Load screen

CASE;

// IF LCL.First Time Flag is NO
IF LCL.First_Time_Flag = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(WRK.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// DTL.Company Number = PAR.Company Number
DTL.Company_Number = PAR.Company_Number;

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

ENDIF;

//?USER: User defined action

EXECUTE FUNCTION(Rtv/Dlt if Recald     RT) TYPE(RTVOBJ) FILE(POALCPP)           AC1598602;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Dlt Sales History Exp DL) TYPE(DLTOBJ) FILE(POALCPP)           AC1597713;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Sales_Expense_Code);
}


// Call program Prc Sales History Exp XF.
CALL PROGRAM(Prc Sales History Exp XF) ('POD8XFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);

EXECUTE FUNCTION(Rtv Order Exp Clc Vls RT) TYPE(RTVOBJ) FILE(POALCPP)           AC1598278;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Sales_Exp_Amt_USR_1);
PARAMETER(DTL.Sales_Exp_Amt_USR_2);
PARAMETER(DTL.Sales_Exp_Amt_USR_3);
PARAMETER(DTL.Sales_Exp_Amt_USR_4);
PARAMETER(DTL.Sales_Expense_Code);
PARAMETER(DTL.Sales_Exp_code_USR);
PARAMETER(DTL.Sales_Exp_code_USR_2);
PARAMETER(DTL.Sales_Exp_code_USR_3);
PARAMETER(DTL.Sales_Exp_code_USR_5);
PARAMETER(DTL.Sales_Exp_Amt_USR_5);
PARAMETER(DTL.Sales_Exp_code_USR_6);
PARAMETER(DTL.Sales_Exp_Amt_USR_6);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Sales Expense Code is Brokerage Fee %
 IF DB1.Sales_Expense_Code = 'BRK%1';

 // PAR.Sales Expense Code = DB1.Sales Expense Code
 PAR.Sales_Expense_Code = DB1.Sales_Expense_Code;

 // PAR.Sales Exp Amt USR 1 = PAR.Sales Exp Amt USR 1 + DB1.Sales Expense Amount
 PAR.Sales_Exp_Amt_USR_1 = PAR.Sales_Exp_Amt_USR_1 + DB1.Sales_Expense_Amount;

 // IF DB1.Sales Expense Code is Freezer Storage Cost
 IF DB1.Sales_Expense_Code = 'FRZ#1';

 // PAR.Sales Exp code USR = DB1.Sales Expense Code
 PAR.Sales_Exp_code_USR = DB1.Sales_Expense_Code;

 // PAR.Sales Exp Amt USR 2 = PAR.Sales Exp Amt USR 2 + DB1.Sales Expense Amount
 PAR.Sales_Exp_Amt_USR_2 = PAR.Sales_Exp_Amt_USR_2 + DB1.Sales_Expense_Amount;

 // IF DB1.Sales Expense Code is Payment Interest %
 IF DB1.Sales_Expense_Code = 'PAY%1';

 // PAR.Sales Exp code USR 2 = DB1.Sales Expense Code
 PAR.Sales_Exp_code_USR_2 = DB1.Sales_Expense_Code;

 // PAR.Sales Exp Amt USR 3 = PAR.Sales Exp Amt USR 3 + DB1.Sales Expense Amount
 PAR.Sales_Exp_Amt_USR_3 = PAR.Sales_Exp_Amt_USR_3 + DB1.Sales_Expense_Amount;

 // IF DB1.Sales Expense Code is Pallet Usage Cost
 IF DB1.Sales_Expense_Code = 'PLT#1';

 // PAR.Sales Exp code USR 3 = DB1.Sales Expense Code
 PAR.Sales_Exp_code_USR_3 = DB1.Sales_Expense_Code;

 // PAR.Sales Exp Amt USR 4 = PAR.Sales Exp Amt USR 4 + DB1.Sales Expense Amount
 PAR.Sales_Exp_Amt_USR_4 = PAR.Sales_Exp_Amt_USR_4 + DB1.Sales_Expense_Amount;

 // IF DB1.Sales Expense Code is Brokerage Fee by Item
 IF DB1.Sales_Expense_Code = 'BRK#1';

 // PAR.Sales Exp code USR 5 = DB1.Sales Expense Code
 PAR.Sales_Exp_code_USR_5 = DB1.Sales_Expense_Code;

 // PAR.Sales Exp Amt USR 5 = PAR.Sales Exp Amt USR 5 + DB1.Sales Expense Amount
 PAR.Sales_Exp_Amt_USR_5 = PAR.Sales_Exp_Amt_USR_5 + DB1.Sales_Expense_Amount;

 // IF DB1.Sales Expense Code is Brokerage Fee by Country
 IF DB1.Sales_Expense_Code = 'BRKX1';

 // PAR.Sales Exp code USR 6 = DB1.Sales Expense Code
 PAR.Sales_Exp_code_USR_6 = DB1.Sales_Expense_Code;

 // PAR.Sales Exp Amt USR 6 = PAR.Sales Exp Amt USR 6 + DB1.Sales Expense Amount
 PAR.Sales_Exp_Amt_USR_6 = PAR.Sales_Exp_Amt_USR_6 + DB1.Sales_Expense_Amount;

 ENDIF;

}


// DTL.Sales Expense Total =       *
DTL.Sales_Expense_Total = ( ( ( ( DTL.Sales_Exp_Amt_USR_1 + DTL.Sales_Exp_Amt_USR_2 )              +
+ DTL.Sales_Exp_Amt_USR_3 ) + DTL.Sales_Exp_Amt_USR_4 ) + DTL.Sales_Exp_Amt_USR_5 )               +
+ DTL.Sales_Exp_Amt_USR_6;

