// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDC6PFR
// ?Date: 14.08.2025 Time: 12:03:41
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('P/S');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


//?Modification History
//?** 03/15/2013 RMC E2513
//?** Schedule missed-- added print on sched, var<>0
//?** 03/26/2009 SLM S00726
//?** Production Reports with Divide by Zero on Calculations
//?** will be installed with PA project FP1054
//?USER: Record selection processing

CASE;

// IF PAR.Print On Schedule is Y/N Values
IF PAR.Print_On_Schedule = 'N'/'Y';

CASE;

// IF DB1.PS Print On Schedule NE PAR.Print On Schedule
IF DB1.PS_Print_On_Schedule <> PAR.Print_On_Schedule;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Process top of page

MOVE *ALL (To: TOP From: PAR);

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(TOP_Company_Number);
PARAMETER(TOP_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Hog Volume         RT) TYPE(RTVOBJ) FILE(PDJCCPP)          AC1373728;
PARAMETER(TOP_Company_Number);
PARAMETER(DB1.Production_Type);
PARAMETER(TOP_Production_Date);
PARAMETER(TOP_Hog_Volume);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Rtv Hog Volume  2 HPE XF.
CALL PROGRAM(Rtv Hog Volume  2 HPE XF) ('PKQIXFR');
PARAMETER(TOP_Company_Number);
PARAMETER(PAR.Production_Date);
PARAMETER(TOP_Hog_Volume_USR);

//?USER: Print required level headings

// SUPPRESSED PRINT Accounting Company Number header format

// SUPPRESSED PRINT Production Type header format

// SUPPRESSED PRINT Production Date header format

CASE;

IF NEW Department_Code;
EXECUTE FUNCTION(Rtv Prod Dept Name    RT) TYPE(RTVOBJ) FILE(PDI5REP)           AC1286709;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Department_Code);
PARAMETER(CUR.Department_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Print Department Code header format
PRINT Department Code header format;

ENDIF;

// SUPPRESSED PRINT Item Code header format

// SUPPRESSED PRINT Warehouse Code header format

//?USER: Process before print of detail format

EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Description_Line_One);
PARAMETER(CUR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.Item_Structure_Class_Code);
PARAMETER(WRK.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(WRK.Item_Type_Code);
PARAMETER(WRK.Default_Warehouse);
PARAMETER(WRK.Fresh_Chilling_Time);
PARAMETER(WRK.Base_Conv_Loss_Item);
PARAMETER(WRK.Variety_Rendered_Cut);
PARAMETER(WRK.Credit_Item_Status);
PARAMETER(WRK.Std_Weight_Head_Var_Ren);
PARAMETER(WRK.Pieces_Per_Head);
PARAMETER(WRK.Department_Code);
PARAMETER(WRK.Group_for_Packaging);
PARAMETER(WRK.Seconds_Item);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(WRK.Export_Domestic);
PARAMETER(WRK.Print_On_Schedule);
PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
PARAMETER(WRK.Fresh_Sched_As_Ordered);
PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
PARAMETER(WRK.Primal_Group_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Field DOC:
//?Schedule:   Qty Sched To Produce USR
//?            PS Weight Sched Prod  -  Pieces Scheduled
//?Plan    :   Quantity Scheduled 1 USR
//?            Weight Sched Prod USR -  Pieces Ordered
//?Actual  :   Production Quantity USR
//?            Production Weight USR
//?Sch Var :   Quantity 7.0 USR
//?            Weight 9.2 USR
//?Pln Var :   Quantity Open 7.0     USR
//?            Weight Production USR
//?Plan/Schedule Weight
CASE;

// IF PAR.Production Type is Schedule
IF PAR.Production_Type = 'S';

// SCH: PS Weight Sched Prod
CUR.PS_Weight_Sched_Prod = ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )                     +
- DB1.PS_Weight_Converted;

// SCH: Pieces Scheduled
CUR.Pieces_Scheduled = ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )                         +
- DB1.PS_Pieces_Converted;

EXECUTE FUNCTION(Rtv Sch/Plan Sch Msd  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1449985;
PARAMETER(PAR.Company_Number);
PARAMETER('P');
PARAMETER(PAR.Production_Date);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(CUR.Weight_Sched_Prod_USR);
PARAMETER(CUR.Pieces_Ordered);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // Weight Scheduled
 PAR.Weight_Scheduled = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
 - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

 // Pieces Scheduled
 PAR.Pieces_Scheduled = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
 - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

}


//?Plan/Schedule Weight
// IF PAR.Production Type is Plan
IF PAR.Production_Type = 'P';

// PLN: Weight Sched Prod
CUR.Weight_Sched_Prod_USR = ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )                    +
- DB1.PS_Weight_Converted;

// PLN: Pieces Ordered
CUR.Pieces_Ordered = ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )                           +
- DB1.PS_Pieces_Converted;

EXECUTE FUNCTION(Rtv Sch/Plan Sch Msd  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1449985;
PARAMETER(PAR.Company_Number);
PARAMETER('S');
PARAMETER(PAR.Production_Date);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(CUR.PS_Weight_Sched_Prod);
PARAMETER(CUR.Pieces_Scheduled);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // Weight Scheduled
 PAR.Weight_Scheduled = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
 - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

 // Pieces Scheduled
 PAR.Pieces_Scheduled = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
 - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

}


ENDIF;

//?correction on divide by zero
// CUR.Text USR 40 = CON.*BLANK
CUR.Text_USR_40 = *BLANK;

// WRK.Item Piece Count Flag Chg = CND.blank
WRK.Item_Piece_Count_Flag_Chg = *BLANK;

//?SCH: Quantity Production
CASE;

// IF PAR.Piece Count Item is yes
IF PAR.Piece_Count_Item = 'Y';

CASE;

// IF PAR.Bags Per Unit is EQ Zero
IF PAR.Bags_Per_Unit = *ZERO;

// OR PAR.Pieces Per Bag is EQ Zero
OR PAR.Pieces_Per_Bag = *ZERO;

// CUR.Qty Sched To Produce USR = CON.*ZERO
CUR.Qty_Sched_To_Produce_USR = *ZERO;

// CUR.Text USR 40 = CON.Warning: Piece Count Item
CUR.Text_USR_40 = 'Warning: Piece Count Item';

// CUR.Text USR 40 = CONCAT(CUR.Text USR 40,CON.Flag Modified,CON.1)
CUR.Text_USR_40 = CUR.Text_USR_40 + 'Flag Modified' (1);

// WRK.Item Piece Count Flag Chg = CND.yes
WRK.Item_Piece_Count_Flag_Chg = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Qty Sched to Produce USR
CUR.Qty_Sched_To_Produce_USR = CUR.Pieces_Scheduled / ( PAR.Pieces_Per_Bag                         +
* PAR.Bags_Per_Unit );

ENDIF;

//?SCH: Quantity Production
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Unit Weight is Equal to zero
IF PAR.Unit_Weight = *ZERO;

// CUR.Qty Sched To Produce USR = CON.*ZERO
CUR.Qty_Sched_To_Produce_USR = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// Qty Sched to Produce USR
CUR.Qty_Sched_To_Produce_USR = CUR.PS_Weight_Sched_Prod / PAR.Unit_Weight;

ENDIF;

ENDIF;

//?PLN: Quantity Production
CASE;

// IF PAR.Piece Count Item is yes
IF PAR.Piece_Count_Item = 'Y';

CASE;

// IF PAR.Bags Per Unit is EQ Zero
IF PAR.Bags_Per_Unit = *ZERO;

// OR PAR.Pieces Per Bag is EQ Zero
OR PAR.Pieces_Per_Bag = *ZERO;

// CUR.Quantity Scheduled 1 USR = CON.*ZERO
CUR.Quantity_Scheduled_1_USR = *ZERO;

// CUR.Text USR 40 = CON.Warning: Piece Count Item
CUR.Text_USR_40 = 'Warning: Piece Count Item';

// CUR.Text USR 40 = CONCAT(CUR.Text USR 40,CON.Flag Modified,CON.1)
CUR.Text_USR_40 = CUR.Text_USR_40 + 'Flag Modified' (1);

// WRK.Item Piece Count Flag Chg = CND.yes
WRK.Item_Piece_Count_Flag_Chg = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Quantity Scheduled 1 USR
CUR.Quantity_Scheduled_1_USR = CUR.Pieces_Ordered / ( PAR.Pieces_Per_Bag                           +
* PAR.Bags_Per_Unit );

ENDIF;

//?PLN: Quantity Production
// IF *OTHERWISE
IF *OTHERWISE;

// Quantity Scheduled 1 usr
CUR.Quantity_Scheduled_1_USR = CUR.Weight_Sched_Prod_USR / PAR.Unit_Weight;

ENDIF;

//?ACTUAL PRODUCTION
EXECUTE FUNCTION(Rtv Actual Production RT) TYPE(RTVOBJ) FILE(CAB7CPP)           AC1377968;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(CUR.Production_Date);
PARAMETER(CUR.Production_Weight_USR);
PARAMETER(CUR.Production_Quantity_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Production Weight USR = PAR.Production Weight USR + DB1.Transaction Weight
 PAR.Production_Weight_USR = PAR.Production_Weight_USR + DB1.Transaction_Weight;

 // PAR.Production Quantity USR = PAR.Production Quantity USR + DB1.Transaction Quantity
 PAR.Production_Quantity_USR = PAR.Production_Quantity_USR + DB1.Transaction_Quantity;

}


//?SCHEDULE VARIANCE
// CUR.Weight 9.2 USR = CUR.Production Weight USR - CUR.PS Weight Sched Prod
CUR.Weight_9_2_USR = CUR.Production_Weight_USR - CUR.PS_Weight_Sched_Prod;

// CUR.Quantity 7.0 USR = CUR.Production Quantity USR - CUR.Qty Sched To Produce US
CUR.Quantity_7_0_USR = CUR.Production_Quantity_USR - CUR.Qty_Sched_To_Produce_USR;

//?PLAN VARIANCE
// CUR.Weight Production USR = CUR.Production Weight USR - CUR.Weight Sched Prod US
CUR.Weight_Production_USR = CUR.Production_Weight_USR - CUR.Weight_Sched_Prod_USR;

// CUR.Quantity Open  7.0    USR = CUR.Production Quantity USR - CUR.Quantity Sched
CUR.Quantity_Open_7_0_USR = CUR.Production_Quantity_USR - CUR.Quantity_Scheduled_1_USR;

//?USER: On print of detail format

//?If schedule or plan or actual quantity > 0
CASE;

// IF CUR.Qty Sched To Produce USR is Greater than Zero
IF CUR.Qty_Sched_To_Produce_USR > *ZERO;

// OR CUR.Quantity Scheduled 1 USR is Greater than Zero
OR CUR.Quantity_Scheduled_1_USR > *ZERO;

// OR CUR.Production Quantity USR is Greater than Zero
OR CUR.Production_Quantity_USR > *ZERO;

//?If schedule or plan or actual quantity > 0
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

//?Sel if Var<>0 only
CASE;

// IF PAR.Status Flag 10 Y/N is Yes
IF PAR.Status_Flag_10_Y_N = 'Y';

CASE;

// IF CUR.Quantity 7.0 USR is Equal to Zero
IF CUR.Quantity_7_0_USR = *ZERO;

// AND CUR.Quantity Open  7.0    USR is Equal to Zero
AND CUR.Quantity_Open_7_0_USR = *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

ENDIF;

//?USER: Print required level totals

// SUPPRESSED PRINT Warehouse Code totals format

// SUPPRESSED PRINT Item Code totals format

// SUPPRESSED PRINT Department Code totals format

// SUPPRESSED PRINT Production Date totals format

// SUPPRESSED PRINT Production Type totals format

// SUPPRESSED PRINT Accounting Company Number totals format

