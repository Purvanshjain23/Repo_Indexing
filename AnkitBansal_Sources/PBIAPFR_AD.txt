// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBIAPFR
// ?Date: 14.08.2025 Time: 12:03:28
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


//?***** Change Log and Comments
//?*****
//?** 03/23/2013 LJB E002519
//?** Price Code is now optional so it may be zeros
//?USER: Record selection processing

//?* Select Customer if entered
CASE;

// IF PAR.Ship To Customer is not equal to zero
IF PAR.Ship_To_Customer <> *ZERO;

// AND DB1.Ship To Customer NE PAR.Ship To Customer
AND DB1.Ship_To_Customer <> PAR.Ship_To_Customer;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?* Validate and select Broker, if entered              E001704
CASE;

// IF PAR.Broker Code is Entered
IF PAR.Broker_Code <> *BLANK;

EXECUTE FUNCTION(VAL Broker Exists     RT) TYPE(RTVOBJ) FILE(POC5REP)           AC2032975;
PARAMETER(PAR.Broker_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Ship To Customer is not equal to zero
IF PAR.Ship_To_Customer <> *ZERO;

EXECUTE FUNCTION(VAL Broker for ShipTo  RT) TYPE(RTVOBJ) FILE(OMHOREP)          AC2031619;
PARAMETER(PAR.Broker_Code);
PARAMETER(PAR.Ship_To_Customer);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Ship To Customer = CON.*ZERO
LCL.Ship_To_Customer = *ZERO;

EXECUTE FUNCTION(VAL Broker for ShipTo  RT) TYPE(RTVOBJ) FILE(OMHOREP)          AC2031619;
PARAMETER(PAR.Broker_Code);
PARAMETER(DB1.Ship_To_Customer);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?* Select Company if entered                           E001893
CASE;

// IF PAR.Company is not equal to zero
IF PAR.Company <> *ZERO;

// AND DB1.Company Number NE PAR.Company
AND DB1.Company_Number <> PAR.Company;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process top of page

// TOP.Ship to Customer      USR = PAR.Ship To Customer
TOP_Ship_to_Customer_USR = PAR.Ship_To_Customer;

//?* Customer Name or *ALL
CASE;

// IF PAR.Ship To Customer is equal to zero
IF PAR.Ship_To_Customer = *ZERO;

// TOP.Customer Name DRV = CON.*ALL
TOP_Customer_Name_DRV = *ALL;

//?* Customer Name or *ALL
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Customer Name DRV) TYPE(DRVFLD)                                AC1631131;
PARAMETER(TOP_Customer_Name_DRV);
PARAMETER(PAR.Ship_To_Customer);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Customer_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


ENDIF;

// TOP.Price Code USR = PAR.Price Code USR
TOP_Price_Code_USR = PAR.Price_Code_USR;

// TOP.USR number = PAR.USR number
TOP_USR_number = PAR.USR_number;

// TOP.From Date             USR = PAR.From Date             USR
TOP_From_Date_USR = PAR.From_Date_USR;

// TOP.To Date               USR = PAR.To Date               USR
TOP_To_Date_USR = PAR.To_Date_USR;

// TOP.Report Type = PAR.Select Option
TOP_Report_Type = PAR.Select_Option;

//?* Selection options
CASE;

// IF PAR.Select Option is Option 1
IF PAR.Select_Option = '1';

// TOP.Report Listing Desc   USR = CON.Shipped
TOP_Report_Listing_Desc_USR = 'Shipped';

//?* Selection options
// IF PAR.Select Option is Option 2
IF PAR.Select_Option = '2';

// TOP.Report Listing Desc   USR = CON.Ordered
TOP_Report_Listing_Desc_USR = 'Ordered';

//?* Selection options
// IF PAR.Select Option is Option 3
IF PAR.Select_Option = '3';

// TOP.Report Listing Desc   USR = CON.Ordered vs. Shipped
TOP_Report_Listing_Desc_USR = 'Ordered vs. Shipped';

//?* Selection options
// IF PAR.Select Option is Option 4
IF PAR.Select_Option = '4';

// TOP.Report Listing Desc   USR = CON.Summary
TOP_Report_Listing_Desc_USR = 'Summary';

ENDIF;

//?* Broker Name or *ALL
CASE;

// IF PAR.Broker Code is Entered
IF PAR.Broker_Code <> *BLANK;

EXECUTE FUNCTION(Rtv Broker Name       RT) TYPE(RTVOBJ) FILE(POC5REP)           AC1676428;
PARAMETER(TOP_Broker_Code);
PARAMETER(TOP_Broker_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF TOP.Broker Name is blanks
IF TOP_Broker_Name = *BLANK;

// TOP.Broker Name = CON.*ALL
TOP_Broker_Name = *ALL;

ENDIF;

ENDIF;

//?* Company Number or *ALL
CASE;

// IF PAR.Company is Equal to zero
IF PAR.Company = *ZERO;

// TOP.Company Name DRV = CON.*ALL
TOP_Company_Name_DRV = *ALL;

//?* Company Number or *ALL
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.USR Company Number = PAR.Company
TOP_USR_Company_Number = PAR.Company;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(TOP_Company_Name_DRV);
PARAMETER(TOP_USR_Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


ENDIF;

//?USER: Print required level headings

CASE;

IF NEW Ship_To_Customer;
// WRK.USR Flag 1 = CND.Yes
WRK.USR_Flag_1 = 'Y';

// WRK.USR Flag 2 = CND.Yes
WRK.USR_Flag_2 = 'Y';

// WRK.USR Flag 2 = CND.Yes
WRK.USR_Flag_2 = 'Y';

EXECUTE FUNCTION(Rtv ShpTo Info/AR Cst RT) TYPE(RTVOBJ) FILE(CABBREP)           AC1522850;
PARAMETER(CUR.Ship_To_Customer);
PARAMETER(CUR.Ship_To_Name_DRV);
PARAMETER(CUR.Ship_To_Address_Line_1);
PARAMETER(CUR.Ship_To_Address_Line_2);
PARAMETER(CUR.Ship_To_Address_Line_3);
PARAMETER(CUR.Ship_To_City);
PARAMETER(CUR.Ship_To_State_Code);
PARAMETER(CUR.Ship_To_Zip_Postal_Code);
PARAMETER(LCL.Telephone_Number_FF);
PARAMETER(LCL.AR_Customer_Number);
PARAMETER(LCL.Order_Entry_Hold);
PARAMETER(LCL.Ship_To_Customer_Flag);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Ship To Name          DRV) TYPE(DRVFLD)                        AC1573561;
PARAMETER(CUR.Ship_To_Name_DRV);
PARAMETER(CUR.Ship_To_Customer);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?** Don't print address lines if blanks
CASE;

// IF CUR.Ship To Address Line 1 is Blank
IF CUR.Ship_To_Address_Line_1 = *BLANK;

// WRK.USR Flag 1 = CND.No
WRK.USR_Flag_1 = 'N';

//?** Don't print address lines if blanks
// IF CUR.Ship To Address Line 2 is Blank
IF CUR.Ship_To_Address_Line_2 = *BLANK;

// WRK.USR Flag 2 = CND.No
WRK.USR_Flag_2 = 'N';

//?** Don't print address lines if blanks
// IF CUR.Ship To Address Line 3 is Blank
IF CUR.Ship_To_Address_Line_3 = *BLANK;

// WRK.USR Flag 2 = CND.No
WRK.USR_Flag_2 = 'N';

ENDIF;

// Print Ship To Customer header format
PRINT Ship To Customer header format;

ENDIF;

// SUPPRESSED PRINT Order Number header format

//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : PRT Ship To-JCO orders PO
//?** Clear variables for the order totals
// PAR.Total Quantity Alloc USR = CON.*ZERO
PAR.Total_Quantity_Alloc_USR = *ZERO;

// PAR.Total Weight Ship    USR = CON.*ZERO
PAR.Total_Weight_Ship_USR = *ZERO;

// PAR.Total Quantity Ship  USR = CON.*ZERO
PAR.Total_Quantity_Ship_USR = *ZERO;

// PAR.Total Weight Ship2   USR = CON.*ZERO
PAR.Total_Weight_Ship2_USR = *ZERO;

//?** Print the order detail information
EXECUTE FUNCTION(PRT Ship To-JCO orders PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(CUR.Price_Code);
PARAMETER(PAR.Total_Quantity_Alloc_USR);
PARAMETER(PAR.Total_Weight_Ship_USR);
PARAMETER(PAR.Total_Quantity_Ship_USR);
PARAMETER(PAR.Total_Weight_Ship2_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Process after print of detail format

//?** Accumulate Ship To Customer totals
// NXT.Total Quantity Alloc USR = NXT.Total Quantity Alloc USR + PAR.Total Quantity Alloc USR
NXT.Total_Quantity_Alloc_USR = NXT.Total_Quantity_Alloc_USR                                        +
+ PAR.Total_Quantity_Alloc_USR;

// NXT.Total Weight Ship    USR = NXT.Total Weight Ship    USR + PAR.Total Weight Ship    USR
NXT.Total_Weight_Ship_USR = NXT.Total_Weight_Ship_USR + PAR.Total_Weight_Ship_USR;

// NXT.Total Quantity Ship  USR = NXT.Total Quantity Ship  USR + PAR.Total Quantity Ship  USR
NXT.Total_Quantity_Ship_USR = NXT.Total_Quantity_Ship_USR + PAR.Total_Quantity_Ship_USR;

// NXT.Total Weight Ship2   USR = NXT.Total Weight Ship2   USR + PAR.Total Weight Ship2   USR
NXT.Total_Weight_Ship2_USR = NXT.Total_Weight_Ship2_USR + PAR.Total_Weight_Ship2_USR;

//?USER: Print required level totals

// SUPPRESSED PRINT Order Number totals format

CASE;

IF NEW Ship_To_Customer;
// Print Ship To Customer totals format
PRINT Ship To Customer totals format;

ENDIF;

