// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBBCPFR
// ?Date: 14.08.2025 Time: 12:03:21
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


//?S00074 - get company value for truck departure validation
EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(PAR.Company_Number);
PARAMETER('INVTRKDPTR');
PARAMETER(WRK.Status_Y_or_N);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Record selection processing

CASE;

// IF PAR.Order Number is Greater then zero
IF PAR.Order_Number > *ZERO;

// AND DB1.Order Number NE PAR.Order Number
AND DB1.Order_Number <> PAR.Order_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF PAR.Actual Shipped Date is entered
IF PAR.Actual_Shipped_Date <> *ZERO;

// AND DB1.Actual Shipped Date GT PAR.Actual Shipped Date
AND DB1.Actual_Shipped_Date > PAR.Actual_Shipped_Date;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(CUR.Company_Name_DRV);
PARAMETER(CUR.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// Print Company Number header format
PRINT Company Number header format;

ENDIF;

// SUPPRESSED PRINT Order Number header format

//?USER: On print of detail format

// PAR.USR Process status = CND.yes
PAR.USR_Process_status = 'Y';

//?Do not process if load status <> "S"
CASE;

// IF DB1.Load ID NE WRK.ZERO
IF DB1.Load_ID <> WRK.ZERO;

EXECUTE FUNCTION(RTV Load Status        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1297640;
PARAMETER(DB1.Load_ID);
PARAMETER(WRK.Load_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// PAR.USR Process status = CND.no
PAR.USR_Process_status = 'N';

// IF WRK.Load Status is Not Shipped
IF WRK.Load_Status = 'C'/'E'/'I'/'L'/'U';

// PAR.USR Process status = CND.no
PAR.USR_Process_status = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV EDI Status 1       RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1394672;
PARAMETER(DB1.Load_ID);
PARAMETER(WRK.EDI_Status_1);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Do not process if BOL not printed and the order is load planned
CASE;

// IF DB1.Load Plan Order is no
IF DB1.Load_Plan_Order = 'N';

//?Do not process if BOL not printed and the order is load planned
// IF DB1.Modified Flag is Modified
IF DB1.Modified_Flag = 'M';

//?Do not process if BOL not printed and the order is load planned
// IF WRK.EDI Status 1 is Modified
IF WRK.EDI_Status_1 = 'M';

//?Do not process if BOL not printed and the order is load planned
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Process status = CND.no
PAR.USR_Process_status = 'N';

ENDIF;

//?*********** RMC E00074 - 1/18/08 added this validation here.
//?Do Truck Departure validation if sts is Yes from company values
CASE;

// IF WRK.Status - Y or N is yes
IF WRK.Status_Y_or_N = 'Y';

EXECUTE FUNCTION(RTV LdSts/DptDtTM/BOL RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1851987;
PARAMETER(DB1.Load_ID);
PARAMETER(NLL.Load_Status);
PARAMETER(NLL.BOL_Complete_Date);
PARAMETER(NLL.BOL_Complete_Time);
PARAMETER(WRK.Truck_Departure_Date);
PARAMETER(WRK.Truck_Departure_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

}


//?Do not process if truck departure not entered
CASE;

// IF DB1.Load Plan Order is no
IF DB1.Load_Plan_Order = 'N';

//?Do not process if truck departure not entered
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF WRK.Truck Departure Date is not entered
IF WRK.Truck_Departure_Date = *ZERO;

// OR WRK.Truck Departure Time is Not Entered
OR WRK.Truck_Departure_Time = *ZERO;

// PAR.USR Process status = CND.no
PAR.USR_Process_status = 'N';

ENDIF;

ENDIF;

ENDIF;

// LCL.Scheduled Ship Date USR = JOB.*Job date + CON.-5 *DAYS
LCL.Scheduled_Ship_Date_USR = DATEINCR(JOB.*Job_date '-5' 'DY' 1111111 'NONE' 'N' 1);

//?OVERRIDE:  USR Process Status
CASE;

// IF DB1.Scheduled Ship Date LT LCL.Scheduled Ship Date USR
IF DB1.Scheduled_Ship_Date < LCL.Scheduled_Ship_Date_USR;

// AND WRK.Load Status is Shipped
AND WRK.Load_Status = 'S';

// PAR.USR Process status = CND.yes
PAR.USR_Process_status = 'Y';

ENDIF;

//?*********** RMC E01814 - 1/04/12 added HPB Transfer Complete XF here
//?Only process completion if passed above edits
CASE;

// IF PAR.USR Process status is yes
IF PAR.USR_Process_status = 'Y';

//?Process Shipping Detail
// PAR.Quantity Billed = CON.*ZERO
PAR.Quantity_Billed = *ZERO;

// PAR.Weight Billed = CON.*ZERO
PAR.Weight_Billed = *ZERO;

//?This function updates Shipping Detail Status="C", Last Status
//?                      Event code to "07", G/L Update Status="N"
//?                      (not G/L Update Status - not in Detail file)
//?                      & returns Order Total Qty & Weight Billed
//?                      & also affect inventory, sales $, sales # fields
//?NOTE:  This is the same function used in Invoice Post program
// Call program UPD Invoice Post Dtl   XF.
CALL PROGRAM(UPD Invoice Post Dtl   XF) ('PDT4XFR');
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(PAR.Affect_Inventory_Status);
PARAMETER(PAR.Affect_Sales_Doll_Status);
PARAMETER(PAR.Affect_Sales_Pnds_Status);
PARAMETER(PAR.Quantity_Billed);
PARAMETER(PAR.Weight_Billed);
PARAMETER(DB1.Date_of_Original_Entry);
PARAMETER(DB1.Billing_Activity_Type);

//?Change/Create A/R Summary Record
//?12/07/06 PKD PK0040 Use Accounting Company if there
EXECUTE FUNCTION(RTV OD Whs/ShpCo/AccCo RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1801010;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(LCL.Shipping_Company);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 EXECUTE FUNCTION(RTV OD Whs/ShpCo/AccCo RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1801011;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Shipping_Company);
 PARAMETER(PAR.Accounting_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.Warehouse Code = DB1.Warehouse Code
 PAR.Warehouse_Code = DB1.Warehouse_Code;

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.Accounting Company is Equal to zero
IF LCL.Accounting_Company = *ZERO;

// Call program EDT A/R Summary        XF.
CALL PROGRAM(EDT A/R Summary        XF) ('PDU4XFR');
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.AR_Customer_Number);
PARAMETER(DB1.Order_Date);
PARAMETER(DB1.Actual_Shipped_Date);
PARAMETER(DB1.Order_Value_Total);
PARAMETER(DB1.Order_Weight_Total);
PARAMETER(DB1.A_R_order_Value_Total);
PARAMETER(DB1.Billing_Activity_Type);
PARAMETER(PAR.Affect_Sales_Doll_Status);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program EDT A/R Summary        XF.
CALL PROGRAM(EDT A/R Summary        XF) ('PDU4XFR');
PARAMETER(LCL.Accounting_Company);
PARAMETER(DB1.AR_Customer_Number);
PARAMETER(DB1.Order_Date);
PARAMETER(DB1.Actual_Shipped_Date);
PARAMETER(DB1.Order_Value_Total);
PARAMETER(DB1.Order_Weight_Total);
PARAMETER(DB1.A_R_order_Value_Total);
PARAMETER(DB1.Billing_Activity_Type);
PARAMETER(PAR.Affect_Sales_Doll_Status);

ENDIF;

EXECUTE FUNCTION(RTV 1st Warehouse/UOM  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1568424;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(CUR.U_M_Ordered);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// CUR.Quantity Transfer/Stg USR = PAR.Quantity Billed
CUR.Quantity_Transfer_Stg_USR = PAR.Quantity_Billed;

EXECUTE FUNCTION(RTV Last Event Code    RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1393013;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Event_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(CRT History Event      RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1341856;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(WRK.Event_Code);
PARAMETER(DB1.Ship_To_Customer);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(1);
 PARAMETER(PAR.Event_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(JOB.*Job_date);
 PARAMETER('Y');
 PARAMETER('N');
 PARAMETER('Y');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?USER: Process Data record

 // WRK.Event Number = DB1.Event Number + CON.1
 WRK.Event_Number = DB1.Event_Number + 1;

 EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Event_Number);
 PARAMETER('07');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Invoice_Memo_Number);
 PARAMETER(DB1.Invoice_Memo_Suffix);
 PARAMETER(JOB.*Job_date);
 PARAMETER('N');
 PARAMETER('N');
 PARAMETER('N');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Ship_To_Customer);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 QUIT;

}


//?Update Order Header Status and Event
//?NOTE:  Transfers are not really written to history
// LCL.Header Status Last = DB1.Header Status
LCL.Header_Status_Last = DB1.Header_Status;

EXECUTE FUNCTION(CHG for Invoice Post   CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1341749;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER('C');
PARAMETER(LCL.Header_Status_Last);
PARAMETER('Y');
PARAMETER('07');
PARAMETER(DB1.A_R_order_Value_Total);
PARAMETER(DB1.Billing_Activity_Type);
PARAMETER(DB1.Block_Order_Flag);
PARAMETER(DB1.Order_Certification_Flag);
{
 //?USER: Processing after Data read

 //?doesnt upd the last from here - discovered 3.10.16
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


//?*** HPB Only - update "TRB" rcd with gallons transferred.   E1814 12/12/11
EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
PARAMETER(DB1.Company_Number);
PARAMETER(LCL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Company Organization is High Plains Biodiesel
IF LCL.Company_Organization = 'H';

// Call program Exc Gen TRB Cmplt Txf XF.
CALL PROGRAM(Exc Gen TRB Cmplt Txf XF) ('PBBAXFR');
PARAMETER(DB1.Order_Number);
PARAMETER(DB1.Company_Number);
PARAMETER(PAR.Process_Cust_Types_Usr);
PARAMETER(DB1.Actual_Shipped_Date);

ENDIF;

//?**** Read all Load Orders, if all orders have been Invoiced then
//?**** Update Load as Invoiced
EXECUTE FUNCTION(RTV Ld Orders Invoiced RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1377315;
PARAMETER(DB1.Load_ID);
PARAMETER(PAR.Invoiced_Flag_USR);
{
 //?USER: Initialize routine

 //?05/12/04 SLM PKTR01 Multi-Company - Function was changed
 //?                                    to remove Company RST or Pos
 // PAR.Invoiced Flag USR = CND.Invoiced
 PAR.Invoiced_Flag_USR = 'Y';

 //?USER: Process Data record

 CASE;

 // IF DB1.Header Status is Complete
 IF ( ( DB1.Header_Status = 'C';

 // AND DB1.Event Code is 07 Written to History
 AND DB1.Event_Code = '07' );

 // OR DB1.Header Status is Cancelled
 OR DB1.Header_Status = 'X' );

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Invoiced Flag USR = CND.Not Invoiced
 PAR.Invoiced_Flag_USR = 'N';

 QUIT;

 ENDIF;

}


//?If all Load Orders have been Invoiced, then update load
CASE;

// IF PAR.Invoiced Flag USR is Invoiced
IF PAR.Invoiced_Flag_USR = 'Y';

EXECUTE FUNCTION(CHG Load Status        CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1197977;
PARAMETER(DB1.Load_ID);
PARAMETER(DB1.Scheduled_Ship_Date);
PARAMETER('I');
{
 //?USER: Processing before Data update

 // DB1.Job Time = JOB.*Job time
 DB1.Job_Time = JOB.*Job_time;

 // DB1.User Id = JOB.*USER
 DB1.User_Id = JOB.*USER;

 // DB1.Job Name = JOB.*JOB
 DB1.Job_Name = JOB.*JOB;

 // DB1.Job Date = JOB.*Job date
 DB1.Job_Date = JOB.*Job_date;

}


ENDIF;

//?Only process completion if passed above edits
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

//?USER: Print required level totals

// SUPPRESSED PRINT Order Number totals format

// SUPPRESSED PRINT Company Number totals format

