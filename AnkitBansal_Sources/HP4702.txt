      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      Hog Production System
      * PROGRAM:     HP4702
      * TITLE:       Work With Farm Budgets
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     02/23/04
      *
      *
      * FUNCTION: This Work With displays the records in the Farm Budget Header file.
      *
      *           Restrictors:
      *                Include closed budgets flag
      *
      *           Positioners:
      *                Farm budget number
      *
      *           Selectors:
      *                Farm site
      *                Budget template
      *                Budget availability
      *                Creation schedule
      *                Weeks
      *                From date
      *                To date
      *                Budget status
      *
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 07/14/04  LeAnne Fedor
      *           Per ALice, we will now sort by Farm Site/From Date (Descending).
      *           And, we will move the Budget Number column to be just before the
      *           Budget Status.
      *
      * 10/13/04  LeAnne Fedor
      *           Recompile only. Cost Per Unit Amount was changed from
      *           9,2 to 9,4.
      *
      * 01/27/05  LeAnne Fedor
      *           Per AMB, default Active into the Status field so that only the
      *           'Active' stuff shows up when you first go into the screen.
      *
      * 10/16/13  LeAnne Ramsey (E2831)
      *           Recompile only. Added field 'MTech Reference'.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhpd4702   cf   e             workstn
     F                                     sfile(hp4702s1:hdrrn1)
     F                                     infds(iofeed)
      *
      *
     Fhsp018    if   e           k disk
      *    Farm site
      *
      *
     Fhsp185    if   e           k disk
      *    Budget template header
      *
      *
     Fhsl188k   if   e           k disk    infds(dbfeed)
      *    Farm budget header
      *
      *
     Fhsl193h   if   e           k disk
      *    Requisition detail
      *
      /eject
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D create          c                   'CREATE'
     D revise          c                   'REVISE'
     D delete          c                   'DELETE'
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
     D update          c                   'UPDATE'
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * Compile time array for SBMJOB used in QCMDEXC
      *---------------------------------------------------------------
     D cmd             s              1    dim(80) ctdata perrcd(80)
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
     D maxrrn          s              4  0
     D reset           s              1    inz('N')
     D norecs          s              1    inz('N')
     D count           s              2  0
     D wkflow          s                   like(idflow)
     D rtncd           s              2    inz('00')
     D svrrn1          s                   like(hdrrn1)
      *
      *
      *  Parms for use with QCMDEXC.  'LENGTH' is the length of the
      *  command that will be issued with QCMDEXC.  QCMDEXC requires
      *  the field containing length to be defined as 15 with 5 decimal
      *  positions.  The field 'CMDSBM' will hold the values of the
      *  submit job command when passed as a parm on the call to
      *  QCMDEXC.
      *
     D length          s             15  5 inz(80)
     D cmdsbm          s             80
      *
      *
      * Workfields required for subfile paging--see initialization
      * subroutine.
      *
     D wkplin          s              2  0
     D wkrlin          s              2  0
      *
      *
      * Save fields for restrictors/positioners/selectors
      *
     D svynfl          s                   like(c1ynfl)
     D svfbsn          s                   like(c1fbsn)
     D svfscd          s                   like(c1fscd)
     D svbtcd          s                   like(c1btcd)
     D svbacd          s                   like(c1bacd)
     D svcscd          s                   like(c1cscd)
     D svbtwk          s                   like(c1btwk)
     D svfmdy          s                   like(c1fmdy)
     D svtmdy          s                   like(c1tmdy)
     D svfbscd         s                   like(c1fbscd)
      *
      *
      * Workfields for date manipulation
      *
     D wkisodate       s               D   datfmt(*iso)
      *
      *
      * Parms
      *
     D xxaist          s              1
     D xxynfl          s                   like(c1ynfl)
      *
     D xxbtcd          s                   like(c1btcd)
     D xxbtds          s             25
      *
     D xxbacd          s                   like(c1bacd)
     D xxbads          s             20
      *
     D xxcscd          s                   like(c1cscd)
     D xxcsds          s             20
      *
     D xxfbscd         s                   like(c1fbscd)
     D xxfbsds         s              8
      *
     D xxfscd          s                   like(c1fscd)
     D xxfsnm          s                   like(d1fsnm)
      *
     D xxjobq          s             10     inz('*JOBD     ')
     D xxnite          s              1     inz('N')
     D xxcopy          s              1  0
      *
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      * Standard subfile option conversion
      *---------------------------------------------------------------
     D                 ds                  inz
     D d1opt                          2
     D   wkopt1                       1    overlay(d1opt)
     D   wkopt2                       1    overlay(d1opt:2)
      *
      *
      *---------------------------------------------------------------
      * Data areas
      *---------------------------------------------------------------
      *
      * Local data area.
      *
     Dlda             uds                  dtaara(*lda)
     D  ldreport               1      1
     D  ldfbsn                 2      8  0
     D  ldfscd                 9     13  0
     D  ldbtcd                14     19
     D  ldbacd                20     20
     D  ldcscd                21     21
     D  ldbtwk                22     26  0
     D  ldfcymd               27     34  0
     D  ldtcymd               35     42  0
     D  ldfbscd               43     43
     D  ldynfl                44     44
      *
     D  ldoutu               401    410
     D  ldhold               411    411
     D  ldcopy               412    412  0
     D  ldoutq               413    422
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * Clear and fill the subfile
      *
     C                   exsr      $clr1
     C                   exsr      $frsh1
      *
      * Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Set indicators to control screen options
      *
     C                   if        version = 'V'
     C                   seton                                        87
     C                   endif
      *
      * This subfile has Fold/Unfold capabilities.  The DDS uses the keywords
      * (SFLDROP, SFLFOLD) to determine whether the user is folded or unfolded
      * and to redisplay the screen in the same mode as when he last saw it.
      * Indicators 78 and 79 are assigned in the DDS to the keywords.
      *
     C                   setoff                                       7879
     C                   if        fold = '0'
     C                   seton                                        78
     C                   else
     C                   seton                                        79
     C                   endif
      *
      * Write screen 1 to crt
      *
     C                   write     hp4702k1
     C                   write     hp4702ec
     C                   exfmt     hp4702c1
      *
      * Save the value of the lowest subfile rrn on the screen for
      * later repositioning of the subfile
      *
     C                   eval      wkflow = idflow
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-EXIT
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
      *
     C                   if        fld = 'C1YNFL' and
     C                             c1ynfl <> svynfl
     C                   exsr      $ynfl
     C                   endif
      *
     C                   if        error = 0
     C                   exsr      $chksv
     C                   else
     C                   eval      routne = scrn1
     C                   endif
      *
     C                   when      *in05 = *on and                              F5-refresh
     C                             (c1ynfl = yes or c1ynfl = no)
     C                   eval      reset = yes
     C                   eval      routne = set1
      *
     C                   when      *in06 = *on                                  F6-create
     C                   exsr      $creat
     C                   eval      hdpag1 = wkflow
     C                   eval      reset = yes
     C                   eval      routne = set1
      *
     C                   when      *in07 = *on                                  F7-listing
     C                   exsr      $list
     C                   z-add     wkflow        hdpag1
     C                   eval      routne = scrn1
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                     API
     C                   eval      hdpag1 = wkflow
     C                   eval      routne = scrn1
      *
     C                   when      *in17 = *on                                  F17-print options
     C                   eval      routne = scrn1
     C                   call      'HP451'
     C                   parm                    sdpgm
     C     ldcopy        parm      ldcopy        xxcopy
     C                   parm                    ldhold
     C                   parm                    ldoutq
     C                   parm                    xxnite
     C                   parm                    xxjobq
      *
      *
      * Reposition the subfile if the user has changed any of the
      * restrictors or positioners or selectors in the control record.
      *
     C                   when      c1ynfl <> svynfl or                          Positioners,etc
     C                             c1fbsn <> svfbsn or
     C                             c1fscd <> svfscd or
     C                             c1btcd <> svbtcd or
     C                             c1bacd <> svbacd or
     C                             c1cscd <> svcscd or
     C                             c1btwk <> svbtwk or
     C                             c1fmdy <> svfmdy or
     C                             c1tmdy <> svtmdy or
     C                             c1fbscd <> svfbscd
      *
     C                   if        c1ynfl <> svynfl                                              nge
     C                   exsr      $ynfl
     C                   endif                                                                   nge
      *
     C                   if        error = 0
     C                   exsr      $chksv
     C                   else
     C                   eval      routne = scrn1
     C                   endif
      *
     C                   when      *in25 = *on                                  F25-rollup
     C                   exsr      $load1
     C                   other
      *
      * User has pressed enter
      *
     C                   if        norecs = yes                                 If empty sfl
     C                   eval      routne = set1
     C                   else
     C                   eval      routne = edit1
     C                   endif                                                  If empty sfl
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Save the control record positioners/selectors
      *----------------------------------------------------------------
      *
     C     $chksv        begsr
      *
     C                   eval      reset = no
     C                   eval      routne = set1
      *
     C                   move      c1ynfl        svynfl
     C                   z-add     c1fbsn        svfbsn
     C                   z-add     c1fscd        svfscd
     C                   move      c1btcd        svbtcd
     C                   move      c1bacd        svbacd
     C                   move      c1cscd        svcscd
     C                   z-add     c1btwk        svbtwk
     C                   z-add     c1fmdy        svfmdy
     C                   z-add     c1tmdy        svtmdy
     C                   move      c1fbscd       svfbscd
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Validate 'include closed budgets' flag
      *---------------------------------------------------------------
      *
     C     $ynfl         begsr
      *
     C                   if        c1ynfl <> yes and
     C                             c1ynfl <> no
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09106'
     C                   endif
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Edit input fields for screen 1
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * First, edit all the selections entered by the user in the
      * subfile option field to see that valid selections were input
      *
     C                   exsr      $edop1
      *
      * If there are no errors in the subfile option selectors entered
      * by the user, then execute the subroutine to reread and process
      * the records selected by the user.  After completing the
      * subroutine, set the routine to start over.
      *
     C                   if        error = 0                                    If no error
     C                   exsr      $proc1
      *
     C                   if        rtncd = '00'
     C                   eval      routne = set1
     C                   else
     C                   eval      hdpag1 = wkflow
     C                   eval      routne = scrn1
     C                   endif
      *
      * else there were errors in the subfile options entered,
      * so set to redisplay screen with errors to user
      *
     C                   else
     C                   eval      routne = scrn1
     C                   endif                                                  If no error
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Listing logic
      *---------------------------------------------------------------
      *
     C     $list         begsr
      *
      * Move submission values into LDA
      *
     C                   select
     C                   when      d1opt = ' 6'
     C                   move      'B'           ldreport
     C                   z-add     d1fbsn        ldfbsn
      *
     C                   when      *in07 = *on
     C                   move      'L'           ldreport
     C                   z-add     c1fscd        ldfscd
     C                   move      c1btcd        ldbtcd
     C                   move      c1bacd        ldbacd
     C                   move      c1cscd        ldcscd
     C                   z-add     c1btwk        ldbtwk
     C                   move      c1fbscd       ldfbscd
     C                   move      c1ynfl        ldynfl
      *
     C                   z-add     0             ldfcymd
     C                   if        c1fmdy <> 0                                  If a from
     C     *mdy          test(d)                 c1fmdy                 92
     C                   if        *in92 = *off                                 If OK date
     C     *mdy          move      c1fmdy        wkisodate
     C     *iso          move      wkisodate     ldfcymd
     C                   endif                                                  If OK date
     C                   endif                                                  If a from
      *
     C                   z-add     0             ldtcymd
     C                   if        c1tmdy <> 0                                  If a TO
     C     *mdy          test(d)                 c1tmdy                 92
     C                   if        *in92 = *off                                 If OK date
     C     *mdy          move      c1tmdy        wkisodate
     C     *iso          move      wkisodate     ldtcymd
     C                   endif                                                  If OK date
     C                   endif                                                  If a TO
     C                   endsl
      *
     C                   out       lda
      *
      *
      * Move the 80-character compile time array 'CMD' to an
      * 80-character field for passing as a parm with QCMDEXC.
      *
     C                   movea     xxjobq        cmd(52)
     C                   movea     cmd           cmdsbm
     C                   call      'QCMDEXC'
     C                   parm                    cmdsbm
     C                   parm                    length
      *
      * Issue the standard request submission message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09003'
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Clear subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $clr1         begsr
      *
     C                   eval      svrrn1 = 0
      *
     C                   clear                   hp4702s1
     C                   seton                                        83        sflclr
     C                   write     hp4702c1
     C                   setoff                                       818283
      *                                                    81=sfldsp
      *                                                    82=sflend
      *                                                    83=sflclr
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Refresh/fill the subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $frsh1        begsr
      *
      * Set position in file
      *
     C     c1fscd        setll     hsl188k
      *
      *
      * The field 'reset' is a flag field to indicate whether you are
      * attempting to reposition the user close to where he was in the
      * subfile.
      * The lowest subfile RRN on the screen from the DSPF feedback
      * area (IDFLOW) was retrieved earlier and put in WKFLOW.
      * Add to WKFLOW the number of lines on your subfile page or the
      * number less 1 to determine a subfile RRN to reposition to.
      *
     C                   if        reset = yes
     C                   eval      maxrrn = wkflow + wkrlin
     C                   else
      *
      * Don't try to reposition the user, just start the subfile over
      *
     C                   eval      maxrrn = wkplin
     C                   endif
      *
      * Load the subfile until you have the required number of records.
      * The number will depend on whether uou are repositioning the
      * subfile or not. Stop if you get to the end of the subfile.
      *
     C                   dou       svrrn1 >= maxrrn or *in82 = *on
     C                   exsr      $load1
     C                   enddo
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Load subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $load1        begsr
      *
     C                   eval      hdrrn1 = svrrn1
      *
      * Set the count of records on the subfile page to zero.
      *
     C                   z-add     0             count
      *
      * Fill the subfile until the end of the database file or
      * you have filled all the lines on the subfile page.
      *
     C                   setoff                                       82
     C                   dou       *in82 = *on or count >= wkplin               Do fill
      *
     C                   read      hsl188k                                82
     C                   if        *in82 = *off                                 If read
      *
     C                   if        c1ynfl = yes or                              If process
     C                             (c1ynfl = no and jhfbscd <> 'C')
      *
     C                   z-add     jhfbsn        d1fbsn
     C                   z-add     jhfscd        d1fscd
     C                   move      jhbtcd        d1btcd
     C                   move      jhfbscd       d1fbscd
      *
      * Retrieve Budget Template Header info.
      *
     C     jhbtcd        chain     hsp185                             92
     C                   if        *in92 = *off                                 If found
     C                   move      thbtds        d1btds
     C                   move      thbacd        d1bacd
     C                   move      thcscd        d1cscd
     C                   z-add     thbtwk        d1btwk
     C                   else
     C                   move      *blank        d1btds
     C                   move      *blank        d1bacd
     C                   move      *blank        d1cscd
     C                   z-add     0             d1btwk
     C                   endif                                                  If found
      *
      * Flip From Date from CCYYMMDD to MMDDYY for display
      *
     C     *iso          test(d)                 jhbfdt                 92
     C                   if        *in92 = *off                                 If OK date
     C                   move      jhbfdt        wkisodate
     C     *mdy          move      wkisodate     d1fmdy
     C                   endif                                                  If OK date
      *
      * Flip To Date from CCYYMMDD to MMDDYY for display
      *
     C                   z-add     0             d1tmdy
     C     *iso          test(d)                 jhbtdt                 92
     C                   if        *in92 = *off                                 If OK date
     C                   move      jhbtdt        wkisodate
     C     *mdy          move      wkisodate     d1tmdy
     C                   endif                                                  If OK date
      *
      *
      * Only include records that match the user's selectors
      *
     C                   if        c1btcd <> *blank and                         If template
     C                             c1btcd <> d1btcd
     C                   else
      *
     C                   if        c1bacd <> *blank and                         If availability
     C                             c1bacd <> d1bacd
     C                   else
      *
     C                   if        c1cscd <> *blank and                         If schedule
     C                             c1cscd <> d1cscd
     C                   else
      *
     C                   if        c1fmdy <> 0 and                               If from date
     C                             c1fmdy <> d1fmdy
     C                   else
      *
     C                   if        c1tmdy <> 0 and                               If to date
     C                             c1tmdy <> d1tmdy
     C                   else
      *
     C                   if        c1fbsn <> 0 and                              If budget nbr
     C                             c1fbsn <> d1fbsn
     C                   else
      *
     C                   if        c1btwk <> 0 and                              If weeks
     C                             c1btwk <> d1btwk
     C                   else
      *
     C                   if        c1fbscd <> *blank and                        If status
     C                             c1fbscd <> d1fbscd
     C                   else
      *
      * Retrieve Farm Site Name
      *
     C     jhfscd        chain     hsp018                             92
     C                   if        *in92 = *off                                 If found
     C                   move      fsfsnm        d1fsnm
     C                   else
     C                   move      *blank        d1fsnm
     C                   endif                                                  If found
      *
     C                   add       1             count
     C                   add       1             hdrrn1
     C                   move      *blank        d1opt
     C                   write     hp4702s1
     C                   seton                                        81
      *
      * For positioning, place the subfile relative record number into
      * the sflrcdnbr field (hdpag1)
      *
     C                   eval      hdpag1 = hdrrn1
      *
     C                   endif                                                  If status
     C                   endif                                                  If weeks
     C                   endif                                                  If budget nbr
     C                   endif                                                  If to date
     C                   endif                                                  If from date
     C                   endif                                                  If schedule
     C                   endif                                                  If availability
     C                   endif                                                  If template
     C                   endif                                                  If process
     C                   endif                                                  If read
     C                   enddo                                                  Do fill
      *
      * If no records were written to the subfile, then issue
      * the standard message 'No data to Display'.
      *
     C                   if        hdrrn1 = 0                                   If no recs
     C                   eval      norecs = yes
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09002'
     C                   endif
      *
     C                   else
     C                   eval      norecs = no
     C                   endif                                                  If no recs
      *
     C                   eval      svrrn1 = hdrrn1
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Call the create program when the user takes F6
      *---------------------------------------------------------------
      *
     C     $creat        begsr
      *
     C                   call      'HP1712'
     C                   parm      '00'          rtncd
      *
     C                   endsr
      /EJECT
      *--------------------------------------------------------------------------------------
      * Read/edit changed subfile records for valid subfile options on screen 1
      *--------------------------------------------------------------------------------------
      *
     C     $edop1        begsr
      *
     C                   eval      error = 0
      *
      * Read all changed subfile records, editing for valid options
      *
     C                   setoff                                       80
     C                   dou       *in80 = *on                                  Do readc
     C                   readc     hp4702s1                               80
     C                   if        *in80 = *off                                 If rec read
      *
      * Set off error indicator for subfile option field
      *
     C                   setoff                                       30
      *
      * Convert option user entered to standard format. For example,
      * a ' 1', '01', and '1 ' must be standardized to ' 1'.
      *
     C                   if        wkopt2 = *blank                              If 2 = blank
     C                   eval      wkopt2 = wkopt1
     C                   eval      wkopt1 = *blank
     C                   endif                                                  If 2 = blank
      *
     C                   if        wkopt1 = *zero                               If 1 is zero
     C                   eval      wkopt1 = *blank
     C                   endif                                                  If 1 is zero
      *
      * Test for valid subfile option entry on all changed records
      *
     C                   if        d1opt <> ' 2' and                            If bad opt
     C                             d1opt <> ' 4' and
     C                             d1opt <> ' 5' and
     C                             d1opt <> ' 6' and
     C                             d1opt <> ' 9' and
     C                             d1opt <> '13' and
     C                             d1opt <> '  '
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09006'
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If bad opt
      *
      * When you have the 'View Only Version', only 2 options are valid
      *
     C                   select
     C                   when      version = 'V'
     C                   if        d1opt <> ' 5' and
     C                             d1opt <> ' 6' and
     C                             d1opt <> '  '
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09006'
     C                   exsr      $err1
     C                   endif
     C                   endif
     C                   other
      *
      * Change dates
     C                   if        d1opt = ' 2' and d1fbscd = 'C'
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04754'
     C                   exsr      $err1
     C                   endif
     C                   endif
      *
      * Delete budget
     C                   if        d1opt = ' 4'
     C                   exsr      $opt4
     C                   endif
      *
      * Maintain Items
      *
     C                   if        d1opt = ' 9' and d1fbscd = 'C'
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04754'
     C                   exsr      $err1
     C                   endif
     C                   endif
      *
      * Close budget
     C                   if        d1opt = '13'
     C                   exsr      $opt13
     C                   endif
     C                   endsl
      *
      * Checks completed.
     C                   if        error = 0 and d1opt = *blank
     C                   setoff                                       85
     C                   else
     C                   seton                                        85
     C                   endif
      *
     C                   update    hp4702s1
     C                   setoff                                       8530
      *
     C                   endif                                                  If rec read
     C                   enddo                                                  Do readc
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------------------------------
      * Edits for Option 4
      *---------------------------------------------------------------------------------------
      *
      * You can always delete Farm Budgets that:
      *  1) have a status of Inactive
      *  2) are Active, but haven't been used yet on any requisitions
      *
      * You cannot delete a Farm Budget that:
      *  1) has a status of Closed
      *  2) is Active with requisitions against it
      *
     C     $opt4         begsr
      *
     C                   if        d1fbscd = 'C'
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04749'
     C                   endif
     C                   endif
      *
      * Check if the Farm Budget has already been used on a requisition.
      *
     C     d1fbsn        chain     hsl193h                            92
     C                   if        *in92 = *off                                 If reqs
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04750'
     C                   exsr      $err1
     C                   endif
      *
     C                   endif                                                  If reqs
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------------------------------
      * Edits for Close Option
      *---------------------------------------------------------------------------------------
      *
      * You can only close a Farm Budget that:
      *  1) is Active and has been used on requisitions
      *
      * You cannot close any Farm Budget that:
      *  1) already has a status of Closed
      *  2) is Inactive (the user should just delete Inactive budgets)
      *  3) is Active but has not been used on Requisitions (the user should just delete)
      *
     C     $opt13        begsr
      *
     C                   select
     C                   when      d1fbscd = 'C'
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04751'
     C                   endif
      *
     C                   when      d1fbscd = 'I'
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04752'
     C                   endif
      *
     C                   when      d1fbscd = 'A'
     C     d1fbsn        chain     hsl193h                            92
     C                   if        *in92 = *on                                  If not used
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04753'
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If not used
     C                   endsl
      *
      * The budget must have a TO date before it can be closed.
      *
     C                   if        d1tmdy = 0                                   If no TO
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04799'
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If no TO
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------------------------------
      * Read subfile records and process user selections for screen 1
      *---------------------------------------------------------------------------------------
      *
     C     $proc1        begsr
      *
     C                   z-add     0             error
     C                   move      '00'          rtncd
      *
      * Read all the changed subfile records processing the subfile
      * selection
      *
     C                   setoff                                       80
     C                   dou       *in80 = *on                                  Do process
     C                   readc     hp4702s1                               80
     C                   if        *in80 = *off                                 If rec read
     C                   if        rtncd = '00'                                 If enter
      *
      * Option: Change Dates
      *
     C                   select
     C                   when      d1opt = ' 2'
     C                   eval      reset = yes
     C                   call      'HP1713'
     C                   parm                    d1fbsn
     C                   parm                    d1fscd
     C                   parm                    d1fsnm
     C                   parm                    d1btcd
     C                   parm                    d1btds
     C                   parm                    d1bacd
     C                   parm                    d1cscd
     C                   parm                    d1btwk
     C                   parm                    d1fmdy
     C                   parm                    d1tmdy
     C                   parm                    d1fbscd
     C                   parm                    rtncd
      *
      *
      * Option: Delete
     C                   when      d1opt = ' 4'
     C                   eval      reset = yes
     C                   call      'HP3706'
     C                   parm                    d1fbsn
      *
      *
      * Option: View
     C                   when      d1opt = ' 5'
     C                   eval      reset = yes
     C                   call      'HP7707'
     C                   parm                    d1fbsn
     C                   parm                    d1fscd
     C                   parm                    d1fsnm
     C                   parm                    d1btcd
     C                   parm                    d1btds
     C                   parm                    d1bacd
     C                   parm                    d1cscd
     C                   parm                    d1btwk
     C                   parm                    d1fmdy
     C                   parm                    d1tmdy
     C                   parm                    d1fbscd
     C                   parm                    rtncd
      *
      * Option: Print
     C                   when      d1opt = ' 6'
     C                   eval      reset = yes
     C                   exsr      $list
      *
      * Option: Maintain Items
      *
     C                   when      d1opt = ' 9'
     C                   eval      reset = yes
     C                   call      'HP1714'
     C                   parm                    d1fbsn
     C                   parm                    d1fscd
     C                   parm                    d1fsnm
     C                   parm                    d1btcd
     C                   parm                    d1btds
     C                   parm                    d1fbscd
     C                   parm                    rtncd
      *
      * Option: Close
      *
     C                   when      d1opt = '13'
     C                   eval      reset = yes
     C                   call      'HP1711'
     C                   parm                    d1fbsn
     C                   parm                    d1fscd
     C                   parm                    d1fsnm
     C                   parm                    d1btcd
     C                   parm                    d1btds
     C                   parm                    d1bacd
     C                   parm                    d1cscd
     C                   parm                    d1btwk
     C                   parm                    d1fmdy
     C                   parm                    d1tmdy
     C                   parm                    d1fbscd
     C                   parm                    rtncd
      *
     C                   endsl
      *
      * Upon returning from the called program,
      * clear the subfile option selected by the user and rewrite
      * the subfile record.
      *
     C                   eval      d1opt = *blank
     C                   setoff                                       85
     C                   else
     C                   seton                                        85
     C                   endif                                                  If enter
      *
     C                   update    hp4702s1
     C                   endif                                                  If rec read
      *
     C                   enddo                                                  Do process
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * F4 prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      * Include closed budgets
      *
     C                   select
     C                   when      fld = 'C1YNFL'
     C                   call      'HP522'
     C                   parm                    xxynfl
     C                   seton                                        51
     C                   if        xxynfl <> *blank
     C                   movel     xxynfl        c1ynfl
     C                   endif
      *
      * Farm site
     C                   when      fld = 'C1FSCD'
     C                   call      'HP5040'
     C                   parm      ' '           xxaist
     C                   parm      0             xxfscd
     C                   parm      *blank        xxfsnm
     C                   seton                                        52
     C                   if        xxfscd <> 0
     C                   z-add     xxfscd        c1fscd
     C                   endif
      *
      * Budget template
     C                   when      fld = 'C1BTCD'
     C                   call      'HP5039'
     C                   parm      *blank        xxaist
     C                   parm      *blank        xxbtcd
     C                   parm      *blank        xxbtds
     C                   seton                                        53
     C                   if        xxbtcd <> *blank
     C                   move      xxbtcd        c1btcd
     C                   endif
      *
      * Budget availability
      *
     C                   when      fld = 'C1BACD'
     C                   call      'HP5035'
     C                   parm      *blank        xxbacd
     C                   parm      *blank        xxbads
     C                   seton                                        54
     C                   if        xxbacd <> *blank
     C                   movel     xxbacd        c1bacd
     C                   endif
      *
      * Creation schedule
     C                   when      fld = 'C1CSCD'
     C                   call      'HP5034'
     C                   parm      *blank        xxcscd
     C                   parm      *blank        xxcsds
     C                   seton                                        55
     C                   if        xxcscd <> *blank
     C                   movel     xxcscd        c1cscd
     C                   endif
      *
      * Budget status
     C                   when      fld = 'C1FBSCD'
     C                   call      'HP5042'
     C                   parm      *blank        xxfbscd
     C                   parm      *blank        xxfbsds
     C                   seton                                        56
     C                   if        xxfbscd <> *blank
     C                   movel     xxfbscd       c1fbscd
     C                   endif
     C                   other
      *
      * F4 not valid for this field...issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error                                        013
     C                   movel     'HS09011'     mgid(e)
     C                   endif
      *
     C                   endsl
      *
     C                   endsr
      /EJECT
      *-----------------------------------------------------------------------------------
      * Set the subfile to redisplay at the first page that has errors on screen 1
      *-----------------------------------------------------------------------------------
      *
     C     $err1         begsr
      *
     C                   if        error = 1
     C                   eval      hdpag1 = hdrrn1
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Seton last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        lr
     C                   endsr
      *
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
     C                   parm                    version           1
      *
     C                   if        version = 'V'
     C                   eval      c1version = 'View Only Version'
     C                   endif
      *
      * Key lists
      *   None
      *
      * Default to 'no' the value for control field 'include closed budgets'
      *
     C                   move      no            c1ynfl
     C                   move      no            svynfl
      *
      * Initialize LDA fields
      *
     C                   move      *blank        ldreport
     C                   z-add     0             ldfbsn
     C                   z-add     0             ldfscd
     C                   move      *blank        ldbtcd
     C                   move      *blank        ldbacd
     C                   move      *blank        ldcscd
     C                   z-add     0             ldbtwk
     C                   z-add     0             ldfcymd
     C                   z-add     0             ldtcymd
     C                   move      *blank        ldfbscd
     C                   move      *blank        ldynfl
      *
     C                   move      no            ldhold
     C                   z-add     1             ldcopy
     C                   movel     ldoutu        ldoutq
      *
      *
      * Default so that the screen intially displays only ACTIVE records.
      *
     C                   move      'A'           c1fbscd
     C                   move      'A'           svfbscd
      *
      *
      * To support F5-Refresh, logic requires the number of lines on
      * the subfile page and also the number of lines less 1.  By
      * setting these values up as constant work fields, the processing
      * logic can be standardized between programs.
      *
     C                   z-add     8             wkplin
     C     wkplin        sub       1             wkrlin
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
      *****************************************************************
      * COMPILE TIME ARRAY 'CMD' USED IN QCMDEXC
      *****************************************************************
** CMD table 'CMD' submits listing when F7 selected
SBMJOB CMD(CALL PGM(HP4702CL)) JOB(BUDGETLST) JOBQ(__________)
