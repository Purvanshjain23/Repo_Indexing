// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDN9EFR
// ?Date: 14.08.2025 Time: 03:36:18
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?*************  Max 50 files are being used!  ****************
// PGM.*Subfile mode = CND.Truncated
PGM.*Subfile_mode = 1;

// PAR.Next Program Name = CON.PDN9EFR
PAR.Next_Program_Name = 'PDN9EFR';

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(RTV Last Seq 1 Nbr     RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1426854;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(WRK.Order_Sequence_Number);
PARAMETER(WRK.Order_Secondary_Line_Seq);
{
 //?USER: Processing if Data record not found

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Set program mode
CASE;

// IF PAR.Process Control is Process Both
IF PAR.Process_Control = *BLANK;

//?Put into Add mode if this is a new order
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Put into Add mode if this is a new order
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

ENDIF;

//?Set program mode
// IF PAR.Process Control is Process Change
IF PAR.Process_Control = 'C';

// PGM.*Program mode = CND.*CHANGE
PGM.*Program_mode = 'CHG';

//?Set program mode
// IF PAR.Process Control is Process Add
IF PAR.Process_Control = 'A';

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

ENDIF;

// PAR.USR First Time = CND.Yes
PAR.USR_First_Time = 'Y';

// Call program RTV Co. Dflt Int All   XF.
CALL PROGRAM(RTV Co. Dflt Int All   XF) ('PDSTXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(PAR.Allow_Mult_Whse_to_Order);
PARAMETER(PAR.Allow_Multi_Export_On_Ord);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(PAR.Company_Organization);
PARAMETER(NLL.CDI_Valuation_Grouping);
PARAMETER(NLL.CDI_Unused_Sts_3);
PARAMETER(NLL.CDI_Shipper);
PARAMETER(NLL.CDI_Produced_by_co);

//?fp1309 slm 4/6/2010 add dates fields from the order header
EXECUTE FUNCTION(RTV for Order Dtl Ent. RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1332418;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Type_Sales);
PARAMETER(PAR.Order_Date);
PARAMETER(PAR.Requested_Ship_Date);
PARAMETER(PAR.Comment_Print_Acknowledge);
PARAMETER(PAR.Comment_Print_Inv_Cr_Memo);
PARAMETER(PAR.Comment_Print_Pick_Slip);
PARAMETER(PAR.Comment_Print_Ship_Doc);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(PAR.Order_Value_Total);
PARAMETER(PAR.Order_Weight_Total);
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER(PAR.Requested_Delivery_Time);
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Shipping_Method);
PARAMETER(PAR.Palletize);
PARAMETER(PAR.Shrink_Wrap);
PARAMETER(PAR.Slip_Sheet);
PARAMETER(PAR.Reefer_Temperature);
PARAMETER(PAR.Load_Type);
PARAMETER(PAR.Event_Code);
PARAMETER(PAR.Trans_Contol_AS400_Plant);
PARAMETER(PAR.Billing_Activity_Type);
PARAMETER(PAR.Block_Order_Flag);
PARAMETER(PAR.Broker_Order_Status);
PARAMETER(PAR.OH_Load_Plan_Ready);
PARAMETER(PAR.HPB_Ship_to_Warehouse);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Commod. Mkt, Whse  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1354050;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(LCL.Type_Code);
PARAMETER(WRK.Warehouse_Code_Transfer);
PARAMETER(PAR.Commodity_Market_Code);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.USR Display field = CND.no
PAR.USR_Display_field = 'N';

// PAR.Display Flag = CND.No
PAR.Display_Flag = 'N';

//?Set OD Production Plan Sts display: only scheduling and Transfer orders
//?  can maintain it. Otherwise, it comes from the company item ext
// Call program Rtv User Code Model   XF.
CALL PROGRAM(Rtv User Code Model   XF) ('POYBXFR');
PARAMETER(JOB.*USER);
PARAMETER(LCL.User_Code_Model);

// WRK.User Code Model = LCL.User Code Model
WRK.User_Code_Model = LCL.User_Code_Model;

//?06/29/18 DN S13384-Added User Code Model 'PORKSCHE5'.
//?10/18/23 JM JM00035-Edit Order Detail Line for regular Order
CASE;

// IF LCL.User Code Model is Production Sched 5
IF LCL.User_Code_Model = 'PORKSCHE5';

// AND PAR.Order Type_Sales is Regular Order
AND PAR.Order_Type_Sales = 'OR';

//?10/18/23 JM JM00035-Edit Order Detail Line for regular Order
// IF *OTHERWISE
IF *OTHERWISE;

//?user code model, or user profile and user code model = is
CASE;

// IF LCL.User Code Model is Production Scheduling
IF LCL.User_Code_Model = 'PORKSCHE';

// OR LCL.User Profile Code is Production Sched 2
OR LCL.User_Profile_Code = 'PORKSCHE2';

// OR LCL.User Code Model is IS
OR LCL.User_Code_Model = 'ISBGUTI';

// OR LCL.User Code Model is STF Prod Scheduling
OR LCL.User_Code_Model = 'SPMODSCHE';

// OR LCL.User Code Model is Production Sched 5
OR LCL.User_Code_Model = 'PORKSCHE5';

CASE;

// IF JOB.*USER is PRKTEST1
IF JOB.*USER = 'PRKTEST1';

//?set up prktest1 to be like Sales will be
// LCL.User Code Model = CON.*BLANK
LCL.User_Code_Model = *BLANK;

ENDIF;

//?Only TRansfer orders can be modified
CASE;

// IF PAR.Order Type - Sales is Transfer Order
IF PAR.Order_Type_Sales = 'TR';

//?Only TRansfer orders can be modified
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.User Code Model = CON.*BLANK
LCL.User_Code_Model = *BLANK;

ENDIF;

//?user code model, or user profile and user code model = is
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.User Code Model = CON.*BLANK
LCL.User_Code_Model = *BLANK;

ENDIF;

ENDIF;

// WRK.Description Usr - 50 = CONCAT(CON.Errors are pending from u,CON.pload process,CND.*None)
WRK.Description_Usr_50 = 'Errors are pending from u' + 'pload process' (*ZERO);

//?01/12/21 DN R17029-Hide/Display 'Spot Buy' Screen Field.
CASE;

// IF PAR.Company Organization is Seaboard
IF PAR.Company_Organization = 'S';

// LCL.Hide Screen Field USR = CND.Display
LCL.Hide_Screen_Field_USR = 'D';

//?01/12/21 DN R17029-Hide/Display 'Spot Buy' Screen Field.
// IF *OTHERWISE
IF *OTHERWISE;

//?Seaboard Energy. (aka HPB)
// LCL.Hide Screen Field USR = CND.Hide
LCL.Hide_Screen_Field_USR = 'H';

ENDIF;

//?USER: Initialize subfile header

//?First Time Logic  order hdr, customer
CASE;

// IF PAR.USR First Time is Yes
IF PAR.USR_First_Time = 'Y';

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?RMC - 08/24/05  Get OH exempt code & Cust Ext Exempt code
//?Get Bill To Customer number for EDI test              E004140
//?04/30/2018 DN R12926-At Order level, get Absorbed Freight Rate from OH.
EXECUTE FUNCTION(RTV All Fields         RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1571206;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(NLL.Order_Type_Sales);
PARAMETER(NLL.AR_Customer_Number);
PARAMETER(NLL.Ship_To_Customer);
PARAMETER(CTL.Ship_To_Name);
PARAMETER(NLL.Ship_To_Address_Line_1);
PARAMETER(NLL.Ship_To_Address_Line_2);
PARAMETER(NLL.Ship_To_Address_Line_3);
PARAMETER(NLL.Ship_To_City);
PARAMETER(NLL.Ship_To_State_Code);
PARAMETER(NLL.Ship_To_Zip_Postal_Code);
PARAMETER(PAR.Bill_to_Customer);
PARAMETER(NLL.Bill_to_Name);
PARAMETER(NLL.Bill_to_Address_Line_1);
PARAMETER(NLL.Bill_to_Address_Line_2);
PARAMETER(NLL.Bill_to_Address_Line_3);
PARAMETER(NLL.Bill_to_City);
PARAMETER(NLL.Bill_to_State_Code);
PARAMETER(NLL.Bill_to_Zip_Postal_Code);
PARAMETER(PAR.Customer_Purchase_Order_#);
PARAMETER(NLL.Order_Date);
PARAMETER(NLL.Requested_Ship_Date);
PARAMETER(NLL.Actual_Shipped_Date);
PARAMETER(NLL.Cancel_Date);
PARAMETER(NLL.Terms_Code);
PARAMETER(NLL.Special_Instructions);
PARAMETER(NLL.Special_Instructions_2);
PARAMETER(NLL.Carrier_Code);
PARAMETER(NLL.Comment_Print_Acknowledge);
PARAMETER(NLL.Comment_Print_Inv_Cr_Memo);
PARAMETER(NLL.Comment_Print_Pick_Slip);
PARAMETER(NLL.Comment_Print_Ship_Doc);
PARAMETER(NLL.Reason_Code);
PARAMETER(NLL.Order_in_Use);
PARAMETER(NLL.Header_Status);
PARAMETER(NLL.Header_Status_Last);
PARAMETER(NLL.Order_Type_Print_Status);
PARAMETER(NLL.Scheduled_Ship_Date);
PARAMETER(NLL.User_Original_Entry);
PARAMETER(NLL.Date_of_Original_Entry);
PARAMETER(NLL.Order_Value_Total);
PARAMETER(NLL.Order_Weight_Total);
PARAMETER(NLL.Credit_Hold);
PARAMETER(NLL.Production_Hold);
PARAMETER(NLL.New_Customer_Hold);
PARAMETER(NLL.Requested_Delivery_Date);
PARAMETER(NLL.Requested_Delivery_Time);
PARAMETER(NLL.Accounts_Receiv_Ent_1);
PARAMETER(NLL.Accounts_Receiv_Ent_2);
PARAMETER(NLL.Load_ID);
PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
PARAMETER(NLL.Rated_Freight);
PARAMETER(NLL.LTL_Flag);
PARAMETER(NLL.Price_Audit);
PARAMETER(NLL.Price_Status);
PARAMETER(NLL.Shipping_Method);
PARAMETER(NLL.Export_Status);
PARAMETER(NLL.Palletize);
PARAMETER(NLL.Shrink_Wrap);
PARAMETER(NLL.Slip_Sheet);
PARAMETER(NLL.Age_Code);
PARAMETER(NLL.Reefer_Temperature);
PARAMETER(NLL.Load_Type);
PARAMETER(NLL.Attach_to_Invoice_Number);
PARAMETER(NLL.Load_Plan_Order);
PARAMETER(NLL.Print_Pick_Slip);
PARAMETER(NLL.Resell_Reference_Number);
PARAMETER(NLL.Special_Comment_1);
PARAMETER(NLL.Special_Comment_2);
PARAMETER(NLL.Affect_Auto_Accruals);
PARAMETER(NLL.Sales_Route_Code);
PARAMETER(NLL.Manager_Level_Code);
PARAMETER(NLL.VP_Level_Code);
PARAMETER(NLL.Attach_to_Order_Number);
PARAMETER(NLL.Reason_for_Price_Audit);
PARAMETER(NLL.Invoice_Number);
PARAMETER(NLL.Invoice_Suffix);
PARAMETER(NLL.Invoice_Date);
PARAMETER(NLL.Event_Code);
PARAMETER(NLL.Trans_Contol_AS400_Plant);
PARAMETER(NLL.Modified_Flag);
PARAMETER(NLL.A_R_order_Value_Total);
PARAMETER(NLL.Billing_Activity_Type);
PARAMETER(NLL.Block_Order_Flag);
PARAMETER(NLL.Order_Certification_Flag);
PARAMETER(NLL.Invoice_Order_Value_Tot);
PARAMETER(NLL.Process_Sts_for_3C);
PARAMETER(NLL.Order_Conf_Fax_Sts);
PARAMETER(NLL.Manifest_Fax_Sts);
PARAMETER(NLL.Invoice_Fax_Sts);
PARAMETER(NLL.Transfer_in_Storage_Ind);
PARAMETER(NLL.Email_Cust_On_Order_Ship);
PARAMETER(NLL.Order_Emailed);
PARAMETER(NLL.Export_Docs_Go_w_Driver);
PARAMETER(NLL.Shipping_Temp_Code_C_F);
PARAMETER(NLL.Broker_Order_Status);
PARAMETER(NLL.Air_Freight_Order);
PARAMETER(NLL.Order_Requires_Review);
PARAMETER(NLL.OH_Load_Plan_Ready);
PARAMETER(NLL.Export_USDA_Approved);
PARAMETER(NLL.HPB_Ship_to_Warehouse);
PARAMETER(CTL.OH_TF_Exempt_Code);
PARAMETER(NLL.OH_Appt_Confirmation_Dt);
PARAMETER(NLL.JPN_Invoice_Issuance_Date);
PARAMETER(NLL.Load_Actual_Shipped_Date);
PARAMETER(NLL.Load_BOL_Complete_Date);
PARAMETER(NLL.Load_Truck_Departure_Date);
PARAMETER(NLL.Maximum_Gross_Weight);
PARAMETER(NLL.Time_of_Original_Entry);
PARAMETER(NLL.OH_Appt_Confirmation_Tm);
PARAMETER(NLL.Load_BOL_Complete_Time);
PARAMETER(NLL.Load_Truck_Departure_Time);
PARAMETER(NLL.Act_Frt_Reference_Amount);
PARAMETER(NLL.Act_Non_Ref_Frt_Amount);
PARAMETER(NLL.OH_Fuel_Surcharge_Amount);
PARAMETER(NLL.OH_Total_Non_Ref_Frt_Amt);
PARAMETER(NLL.OH_Total_Ref_Frt_Amt);
PARAMETER(NLL.Claim_Number);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(NLL.Job_Time);
PARAMETER(NLL.User_Id);
PARAMETER(NLL.Job_Name);
PARAMETER(NLL.Job_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Customer TFEx     RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1747887;
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Customer_TF_Exempt_Code);
{
 //?USER: Initialize routine

 // PAR.Customer TF Exempt Code = WRK.BLANK
 PAR.Customer_TF_Exempt_Code = WRK.BLANK;

 //?USER: Processing if Data record not found

 // PAR.Customer TF Exempt Code = WRK.BLANK
 PAR.Customer_TF_Exempt_Code = WRK.BLANK;

 //?USER: Process Data record

 // PAR.Customer TF Exempt Code = DB1.Customer TF Exempt Code
 PAR.Customer_TF_Exempt_Code = DB1.Customer_TF_Exempt_Code;

}


// Call program Rtv Age Information   XF.
CALL PROGRAM(Rtv Age Information   XF) ('PNQCXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Item_Age_Days_Fresh);
PARAMETER(CTL.Item_Age_Days_Frozen);

//?fp1309 bring in the deadline dep date for the first record only
// Call program Rtv All Fields/1 line XF.
CALL PROGRAM(Rtv All Fields/1 line XF) ('PNQYXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(NLL.Credit_Hold);
PARAMETER(NLL.Production_Hold);
PARAMETER(NLL.Header_Status);
PARAMETER(NLL.Order_Type_Sales);
PARAMETER(NLL.Load_ID);
PARAMETER(NLL.Export_Status);
PARAMETER(NLL.Ship_To_City);
PARAMETER(NLL.Ship_To_State_Code);
PARAMETER(NLL.Order_in_Use);
PARAMETER(NLL.Order_Sequence_Number);
PARAMETER(NLL.Order_Secondary_Line_Seq);
PARAMETER(NLL.Item_Code);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(NLL.Ship_To_Customer);
PARAMETER(NLL.Order_Group_Code);
PARAMETER(NLL.Detail_Line_Status);
PARAMETER(NLL.Detail_Line_Status_Last);
PARAMETER(NLL.Billing_Detail_Cost_Dol);
PARAMETER(NLL.Billing_Detail_Gross_Dol);
PARAMETER(NLL.Billing_Detail_Net_Dol);
PARAMETER(NLL.Quantity_to_Substitute);
PARAMETER(NLL.Comment_Print_Acknowledge);
PARAMETER(NLL.Comment_Print_Inv_Cr_Memo);
PARAMETER(NLL.Comment_Print_Pick_Slip);
PARAMETER(NLL.Comment_Print_Ship_Doc);
PARAMETER(NLL.Extended_Amount);
PARAMETER(NLL.Market_Pricing_Date);
PARAMETER(NLL.Commodity_Market_Code);
PARAMETER(NLL.Date_Method_Code);
PARAMETER(NLL.Price_Method_Code);
PARAMETER(NLL.Price_Overage_Override);
PARAMETER(NLL.Contract_Number);
PARAMETER(NLL.Price_Status);
PARAMETER(NLL.Pricing_Date_Used);
PARAMETER(NLL.U_M_Base_Price);
PARAMETER(NLL.U_M_Ordered);
PARAMETER(NLL.Work_Confirm_Status);
PARAMETER(NLL.Work_Over_Short_Status);
PARAMETER(NLL.OD_Production_Plan_Sts);
PARAMETER(NLL.Order_Desc_Line_One);
PARAMETER(NLL.Order_Desc_Line_Two);
PARAMETER(NLL.Age_Code);
PARAMETER(NLL.Palletize);
PARAMETER(NLL.Slip_Sheet);
PARAMETER(NLL.Catch_Weight_Status);
PARAMETER(NLL.Price_Audit);
PARAMETER(NLL.Price_Audit_Reason_Code);
PARAMETER(NLL.Production_Date_Control);
PARAMETER(NLL.Rated_Freight);
PARAMETER(NLL.Quantity_Ordered);
PARAMETER(NLL.Weight_Ordered);
PARAMETER(NLL.Quantity_Scheduled);
PARAMETER(NLL.Weight_Scheduled);
PARAMETER(NLL.Quantity_Shipped_Total);
PARAMETER(NLL.Weight_Shipped_Total);
PARAMETER(NLL.Unit_Cost_Pricing_U_M);
PARAMETER(NLL.Unit_Cost_Per_Pound);
PARAMETER(NLL.Unit_Price);
PARAMETER(NLL.Unit_Price_Credit);
PARAMETER(NLL.Unit_Price_Ordered_U_M);
PARAMETER(NLL.Unit_Weight_Ordered_U_M);
PARAMETER(NLL.Tare_Weight_Total);
PARAMETER(NLL.Requested_Ship_Date);
PARAMETER(NLL.Scheduled_Ship_Date);
PARAMETER(NLL.Actual_Shipped_Date);
PARAMETER(NLL.Affect_Inventory_Status);
PARAMETER(NLL.Affect_Sales_Doll_Status);
PARAMETER(NLL.Affect_Sales_Pnds_Status);
PARAMETER(NLL.Item_Structure_Type_Code);
PARAMETER(NLL.Item_Structure_Group_Code);
PARAMETER(NLL.Item_Structure_Class_Code);
PARAMETER(NLL.Item_Level);
PARAMETER(NLL.Quality_Level);
PARAMETER(NLL.Pricing_Product_Class_Rep);
PARAMETER(NLL.Season_Product_Class_Repo);
PARAMETER(NLL.Date_of_Original_Entry);
PARAMETER(NLL.User_Profile_Name);
PARAMETER(NLL.Country_Code);
PARAMETER(NLL.Event_Code);
PARAMETER(NLL.Reason_Code);
PARAMETER(NLL.Sales_Route_Code);
PARAMETER(NLL.Modified_Flag);
PARAMETER(NLL.Substituted_Flag);
PARAMETER(NLL.OD_Schedule_Override_Sts);
PARAMETER(NLL.Invoice_Unit_Price);
PARAMETER(NLL.Invoice_Extended_Amt);
PARAMETER(NLL.Ham_Group_Number);
PARAMETER(NLL.OD_Adj_Type_Override);
PARAMETER(NLL.Affect_Trade_Fund);
PARAMETER(NLL.Affect_Commission);
PARAMETER(NLL.Affect_Pricing);
PARAMETER(NLL.Released_by_User_Sts_Y_N);
PARAMETER(NLL.Ord_TF_Exempt_Code);
PARAMETER(NLL.OD_Pallet_Type);
PARAMETER(NLL.Production_Warehouse);
PARAMETER(NLL.OD_Price_Type);
PARAMETER(NLL.Warehouse_Pallets_Loaded);
PARAMETER(NLL.Consumed_Item_Code);
PARAMETER(CTL.Deadline_Depart_Date_LH);
PARAMETER(NLL.OD_Price_Type_Ref_Num);
PARAMETER(NLL.OD_Firm_Date);
PARAMETER(CTL.Deadline_Depart_Time_LH);
PARAMETER(NLL.Price_Code);
PARAMETER(NLL.Maximum_Net_Weight);
PARAMETER(NLL.Substitution_Line_Number);
PARAMETER(NLL.Max_Qty_to_sched_per_day);
PARAMETER(NLL.Warehouse_Pallet_Tare);
PARAMETER(NLL.Warehouse_Avg_Pallet_Tare);
PARAMETER(NLL.OD_Item_Target_Price);
PARAMETER(NLL.OD_Estimated_Gross_Weight);
PARAMETER(NLL.OD_Maximum_Unit_Weight);
PARAMETER(NLL.Order_Gate_Final_Price);
PARAMETER(NLL.OD_Ceiling_Price);
PARAMETER(NLL.OD_Gate_Final_Price_Adj);
PARAMETER(NLL.OD_Weighted_Avg_Price);
PARAMETER(NLL.OD_Original_Ordered_Qty);
PARAMETER(NLL.OD_Cancel_Date);
PARAMETER(NLL.OD_Unused_Prc_7);
PARAMETER(NLL.OD_Unused_Prc_8);
PARAMETER(NLL.OD_MPR_Sent_to_USDA_Sts);
PARAMETER(NLL.OD_MPR_Prc_Ready_to_Send);
PARAMETER(NLL.OD_UnUsed_Price_Sts_3);
PARAMETER(NLL.Weight_Amount_Entered);
PARAMETER(NLL.Item_Age_Days);
PARAMETER(NLL.Production_Ovr_AgeDte_Fr);
PARAMETER(NLL.Production_Ovr_AgeDte_To);
PARAMETER(NLL.OD_Spot_Buy);
PARAMETER(NLL.OD_Clm_Full_Return_to_Plt);
PARAMETER(NLL.Order_Line_Error_Type);
PARAMETER(NLL.OD_Market_Begin_Date);
PARAMETER(NLL.OD_Market_Ending_Date);
PARAMETER(NLL.OD_Atch_to_Ord_ActShpDte);
PARAMETER(CTL.Requested_Delivery_Date);
PARAMETER(CTL.Requested_Delivery_Time);

MOVE *ALL (To: CTL From: PAR);

// PAR.USR First Time = CND.No
PAR.USR_First_Time = 'N';

ENDIF;

//?If change mode retrieve weight ordered and shipped
CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

EXECUTE FUNCTION(RTV Weight Ord & Sched RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1425280;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(CTL.Quantity_Ordered);
PARAMETER(CTL.Weight_Ordered);
PARAMETER(CTL.Weight_Scheduled);
{
 //?USER: Initialize routine

 // PAR.Weight Ordered = CON.*ZERO
 PAR.Weight_Ordered = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 // PAR.Quantity Ordered = CON.*ZERO
 PAR.Quantity_Ordered = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Avail/Alloc/Enter/Hold
 IF DB1.Detail_Line_Status = 'L'/'A'/'E'/'H';

 // PAR.Quantity Ordered = PAR.Quantity Ordered + DB1.Quantity Ordered
 PAR.Quantity_Ordered = PAR.Quantity_Ordered + DB1.Quantity_Ordered;

 // PAR.Weight Ordered = PAR.Weight Ordered + DB1.Weight Ordered
 PAR.Weight_Ordered = PAR.Weight_Ordered + DB1.Weight_Ordered;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + DB1.Weight Scheduled
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + DB1.Weight_Scheduled;

 ENDIF;

}


ENDIF;

//?** FP1309 Inventory Age Code by Dates               7/26/2010
//?** PK0519 Accrual Exists  12/02/03**
//?** DLY029 Accrual Exists if one exists with Affect Inv Price=Y   06/19/07
//?** FP1314 Inter-Co Sales Agreement 07/14/2009
//?WI464 DN 04/21/22-Output Parm to 'Cust Accrual Found USR' Flag.
EXECUTE FUNCTION(Val Mkt Accrual Exist RT) TYPE(RTVOBJ) FILE(OMHOREP)           AC1681638;
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(LCL.Cust_Accrual_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Accrual Info       RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1681415;
 PARAMETER(DB1.Accrual_Code);
 PARAMETER(NLL.Accrual_Description);
 PARAMETER(NLL.Automatic_Accrual_Y_N);
 PARAMETER(NLL.Print_On_Invoice_Y_N);
 PARAMETER(NLL.Rate_Usage);
 PARAMETER(NLL.Add_on_Allowance);
 PARAMETER(LCL.Accrual_Type);
 PARAMETER(NLL.Sub_Ledger_Code);
 PARAMETER(NLL.Reverse_Accrual_Code);
 PARAMETER(NLL.UOM_Primary_Dft);
 PARAMETER(LCL.Affect_Invoice_Price);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: DB1);

 }

 //?New for DLY029   6/19/07 RMC
 CASE;

 // IF LCL.Affect Invoice Price is yes
 IF LCL.Affect_Invoice_Price = 'Y';

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

 ENDIF;

}


//?Get Customer Type
EXECUTE FUNCTION(Rtv Co/Customer Type) TYPE(RTVOBJ) FILE(CAEOREP)               AC1758338;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(WRK.Type_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 // PAR.Type Code = CON.*BLANK
 PAR.Type_Code = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


// LCL.USR Display 1 = CND.No
LCL.USR_Display_1 = 'N';

//?Set Customer Type Desc Usr
CASE;

// IF WRK.Type Code is Inter Company
IF WRK.Type_Code = 'IC';

// CTL.Customer Type Desc Usr = CON.* Internal Company *
CTL.Customer_Type_Desc_Usr = * Internal Company *;

//?Set Customer Type Desc Usr
// IF WRK.Type Code is Inter-Comp Sales Agreemnt
IF WRK.Type_Code = 'IS';

//?07/14/2009 FP1314
// CTL.Customer Type Desc Usr = CON.* Inter-Co Sales Agrmnt *
CTL.Customer_Type_Desc_Usr = * Inter-Co Sales Agrmnt *;

// LCL.USR Display 1 = CND.Yes
LCL.USR_Display_1 = 'Y';

//?Set Customer Type Desc Usr
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Customer Type Desc Usr = CON.* 3rd Party *
CTL.Customer_Type_Desc_Usr = * 3rd Party *;

ENDIF;

//?Make the price override output if the customer is IC
// WRK.Prc Ovr Output Only Usr = CND.no
WRK.Prc_Ovr_Output_Only_Usr = 'N';

//?Prc Ovr Output Only Y or N
CASE;

// IF WRK.Type Code is Inter Company
IF WRK.Type_Code = 'IC';

// WRK.Prc Ovr Output Only Usr = CND.yes
WRK.Prc_Ovr_Output_Only_Usr = 'Y';

ENDIF;

EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(CTL.Company_Number);
PARAMETER('ODPRCTYPRQ');
PARAMETER(PAR.OD_Price_Type_Req_STS_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Contract Exists   RT) TYPE(RTVOBJ) FILE(POC6REP)           AC1901170;
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(LCL.Contract_Status);
{
 //?USER: Initialize routine

 // PAR.Contract Status = CND.no
 PAR.Contract_Status = 'N';

 //?USER: Process Data record

 CASE;

 // IF PAR.Scheduled Ship Date GE DB1.Price Start Date
 IF PAR.Scheduled_Ship_Date >= DB1.Price_Start_Date;

 // AND PAR.Scheduled Ship Date LE DB1.Price End Date
 AND PAR.Scheduled_Ship_Date <= DB1.Price_End_Date;

 // PAR.Contract Status = CND.yes
 PAR.Contract_Status = 'Y';

 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Discounts Exists  XF) TYPE(EXCINTFUN)                      AC2025844;
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(LCL.Discounts_Exists_USR);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Discounts Exist   RT) TYPE(RTVOBJ) FILE(OMHLREP)           AC2025841;
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Discounts_Exists_USR);
 {
  //?USER: Initialize routine

  // PAR.Discounts Exists USR = CND.No
  PAR.Discounts_Exists_USR = *BLANK;

  //?USER: Process Data record

  CASE;

  // IF DB1.Accrual Type is Discount/Allowance
  IF DB1.Accrual_Type = 'DA';

  EXECUTE FUNCTION(Rtv Discount Exists   RT) TYPE(RTVOBJ) FILE(OMHOREP)           AC2025846;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(LCL.Record_Found_USR);
  {
   //?USER: Initialize routine

   // PAR.Record Found USR = CND.Record Not Found
   PAR.Record_Found_USR = 'N';

   //?USER: Process Data record

   CASE;

   // IF PAR.Scheduled Ship Date GE DB1.Period Beginning Date
   IF PAR.Scheduled_Ship_Date >= DB1.Period_Beginning_Date;

   // AND PAR.Scheduled Ship Date LE DB1.Period Ending Date
   AND PAR.Scheduled_Ship_Date <= DB1.Period_Ending_Date;

   // PAR.Record Found USR = CND.Record Found
   PAR.Record_Found_USR = 'Y';

   QUIT;

   ENDIF;

  }

  CASE;

  // IF LCL.Record Found USR is Record Found
  IF LCL.Record_Found_USR = 'Y';

  // PAR.Discounts Exists USR = CND.Yes
  PAR.Discounts_Exists_USR = 'Y';

  QUIT;

  ENDIF;

  // IF DB1.Accrual Type is Product Discount
  IF DB1.Accrual_Type = 'PD';

  EXECUTE FUNCTION(Rtv Discounts Exist   RT) TYPE(RTVOBJ) FILE(PMD2REP)           AC2025847;
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(LCL.Record_Found_USR);
  {
   //?USER: Initialize routine

   // PAR.Record Found USR = CND.Record Not Found
   PAR.Record_Found_USR = 'N';

   //?USER: Process Data record

   CASE;

   // IF PAR.Scheduled Ship Date GE DB1.AD Period Beginning Date
   IF PAR.Scheduled_Ship_Date >= DB1.AD_Period_Beginning_Date;

   // AND PAR.Scheduled Ship Date LE DB1.AD Period Ending Date
   AND PAR.Scheduled_Ship_Date <= DB1.AD_Period_Ending_Date;

   //?CHECK: All Customers
   CASE;

   // IF DB1.AD All Customers is yes
   IF DB1.AD_All_Customers = 'Y';

   // PAR.Record Found USR = CND.Record Found
   PAR.Record_Found_USR = 'Y';

   QUIT;

   //?CHECK: All Customers
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Rtv Discount Exists   RT) TYPE(RTVOBJ) FILE(PNFJREP)           AC2025848;
   PARAMETER(DB1.Accrual_Code);
   PARAMETER(DB1.AD_Program_Number);
   PARAMETER(PAR.Ship_To_Customer);
   PARAMETER(LCL.Record_Found_USR);
   {
    //?USER: Processing if Data record not found

    // PAR.Record Found USR = CND.Record Not Found
    PAR.Record_Found_USR = 'N';

    //?USER: Process Data record

    // PAR.Record Found USR = CND.Record Found
    PAR.Record_Found_USR = 'Y';

   }

   CASE;

   // IF LCL.Record Found USR is Record Found
   IF LCL.Record_Found_USR = 'Y';

   // PAR.Record Found USR = CND.Record Found
   PAR.Record_Found_USR = 'Y';

   QUIT;

   ENDIF;

   ENDIF;

   ENDIF;

  }

  CASE;

  // IF LCL.Record Found USR is Record Found
  IF LCL.Record_Found_USR = 'Y';

  // PAR.Discounts Exists USR = CND.Yes
  PAR.Discounts_Exists_USR = 'Y';

  QUIT;

  ENDIF;

  ENDIF;

 }

}


//?USER: Initialize subfile record (existing record)

//?E4122 JJH 06/11/15 - Use Requested Ship Date for Allocation/Deallocation
//?* --- Initialize values from Order Header --- *
// RCD.Scheduled Ship Date = PAR.Scheduled Ship Date
RCD.Scheduled_Ship_Date = PAR.Scheduled_Ship_Date;

// RCD.Requested Ship Date = PAR.Requested Ship Date
RCD.Requested_Ship_Date = PAR.Requested_Ship_Date;

//?* ------------------------------------------- *
// PAR.USR Update Flag = CND.No
PAR.USR_Update_Flag = *BLANK;

// RCD.USR Item Code = DB1.Item Code
RCD.USR_Item_Code = DB1.Item_Code;

//?Quantity ordered
CASE;

// IF DB1.Order Secondary Line Seq is GT 1
IF DB1.Order_Secondary_Line_Seq > 1;

// RCD.Qty Ordered USR = DB1.Quantity to Substitute
RCD.Qty_Ordered_USR = DB1.Quantity_to_Substitute;

//?Quantity ordered
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Qty Ordered USR = DB1.Quantity Ordered
RCD.Qty_Ordered_USR = DB1.Quantity_Ordered;

ENDIF;

//?If quantity is equal to zero, flag detail line as error.
CASE;

// IF RCD.Qty Ordered USR is Equal to Zero
IF RCD.Qty_Ordered_USR = *ZERO;

//?Allow for TR Block order only
CASE;

// IF PAR.Order Type - Sales is Transfer Order
IF PAR.Order_Type_Sales = 'TR';

// AND PAR.Block Order Flag is Block Order
AND PAR.Block_Order_Flag = 'B';

//?E2393 allow for TR block order only
//?Allow for TR Block order only
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Re-read Subfile Record = CND.*YES
PGM.*Re_read_Subfile_Record = 1;

ENDIF;

ENDIF;

// RCD.Quantity 11.2 USR = RCD.Qty Ordered USR
RCD.Quantity_11_2_USR = RCD.Qty_Ordered_USR;

// RCD.USR Warehouse Code = DB1.Warehouse Code
RCD.USR_Warehouse_Code = DB1.Warehouse_Code;

// RCD.USR Age Code = DB1.Age Code
RCD.USR_Age_Code = DB1.Age_Code;

// RCD.USR Display field = PAR.USR Display field
RCD.USR_Display_field = PAR.USR_Display_field;

// RCD.USR Quantity = DB1.Quantity Scheduled
RCD.USR_Quantity = DB1.Quantity_Scheduled;

// RCD.USR Weight = DB1.Weight Scheduled
RCD.USR_Weight = DB1.Weight_Scheduled;

// RCD.Item Age Days = DB1.Item Age Days
RCD.Item_Age_Days = DB1.Item_Age_Days;

// RCD.Item age days usr = DB1.Item Age Days
RCD.Item_age_days_usr = DB1.Item_Age_Days;

// RCD.Prod OvrAge Frm Usr = DB1.Production Ovr AgeDte Fr
RCD.Prod_OvrAge_Frm_Usr = DB1.Production_Ovr_AgeDte_Fr;

// RCD.Prod OvrAge To Usr = DB1.Production Ovr AgeDte To
RCD.Prod_OvrAge_To_Usr = DB1.Production_Ovr_AgeDte_To;

//?If errors during upload, flag detail line as error.  P001251
CASE;

// IF RCD.Order Line Error Type is Upload Error Pending
IF RCD.Order_Line_Error_Type = 'DD'/'HD'/'IT'/'AC'/'WT'/'PA'/'SL'/'DT'/'ME';

// PGM.*Re-read Subfile Record = CND.*YES
PGM.*Re_read_Subfile_Record = 1;

// CTL.Description Usr - 50 = WRK.Description Usr - 50
CTL.Description_Usr_50 = WRK.Description_Usr_50;

// PAR.Display Flag = CND.Yes
PAR.Display_Flag = 'Y';

ENDIF;

//?fp1309
//?report how age is populated  by days or overridden by dates
CASE;

// IF DB1.Production Ovr AgeDte Fr is Entered
IF DB1.Production_Ovr_AgeDte_Fr <> *ZERO;

// RCD.Override Age Dates StsUsr = CND.Age Dates are Entered
RCD.Override_Age_Dates_StsUsr = 'O';

//?report how age is populated  by days or overridden by dates
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Override Age Dates StsUsr = CND.No Override Age Dates
RCD.Override_Age_Dates_StsUsr = *BLANK;

ENDIF;

// LCL.USR Country Code = DB1.Country Code
LCL.USR_Country_Code = DB1.Country_Code;

//?FOR "OR" type only ---  get it in case it has been changed
CASE;

// IF DB1.OD Production Plan Sts is Yes
IF DB1.OD_Production_Plan_Sts = *BLANK;

// RCD.OD Production Plan St USR = CND.Yes
RCD.OD_Production_Plan_St_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.OD Production Plan St USR = DB1.OD Production Plan Sts
RCD.OD_Production_Plan_St_USR = DB1.OD_Production_Plan_Sts;

ENDIF;

//?Retrieve prod plan sts                                FP1054
CASE;

// IF CTL.Order Type - Sales is Regular Order
IF CTL.Order_Type_Sales = 'OR';

//?Bypass company item ext for PORKSCHE5.
CASE;

// IF LCL.User Code Model is Production Sched 5
IF LCL.User_Code_Model = 'PORKSCHE5';

//?Bypass company item ext for PORKSCHE5.
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Rtv Plan Prod Sts All XF.
CALL PROGRAM(Rtv Plan Prod Sts All XF) ('PVBLXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(NLL.Produce_on_Sunday_Sts);
PARAMETER(NLL.Produce_on_Monday_Sts);
PARAMETER(NLL.Produce_on_Tuesday_Sts);
PARAMETER(NLL.Produce_on_Wednesday_Sts);
PARAMETER(NLL.Produce_on_Thursday_Sts);
PARAMETER(NLL.Produce_on_Friday_Sts);
PARAMETER(NLL.Produce_on_Saturday_Sts);
PARAMETER(LCL.OD_Production_Plan_Sts);
PARAMETER(NLL.Allocation_Method);
PARAMETER(NLL.Adjust_Credit_Pieces);
PARAMETER(NLL.CIE_Use_Age_Days_over_Max);
PARAMETER(NLL.CIE_MPR_Report_to_USDA);
PARAMETER(NLL.CIE_Unused_Number);
PARAMETER(NLL.CIE_Unused_Number_2);
PARAMETER(NLL.CIE_Unused_Date);
PARAMETER(NLL.CIE_TPM_Equipment_Code);
PARAMETER(NLL.CIE_Capacity_Code);
PARAMETER(NLL.Record_Status);
PARAMETER(LCL.USR_Return_Code);

CASE;

// IF LCL.USR Return Code is Exists
IF LCL.USR_Return_Code = 'E';

// RCD.OD Production Plan St USR = CND.Yes
RCD.OD_Production_Plan_St_USR = 'Y';

CASE;

// IF LCL.OD Production Plan Sts is No
IF LCL.OD_Production_Plan_Sts = 'N';

// RCD.OD Production Plan St USR = LCL.OD Production Plan Sts
RCD.OD_Production_Plan_St_USR = LCL.OD_Production_Plan_Sts;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF DB1.OD Production Plan Sts is Yes
IF DB1.OD_Production_Plan_Sts = *BLANK;

// RCD.Plan Production Sts USR = CND.Yes
RCD.Plan_Production_Sts_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Plan Production Sts USR = CND.No
RCD.Plan_Production_Sts_USR = 'N';

ENDIF;

// Call program RTV PrcMthTyp/PrcTyp  XF.
CALL PROGRAM(RTV PrcMthTyp/PrcTyp  XF) ('PNS7XFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Price_Method_Code);
PARAMETER(RCD.Price_Method_Type);
PARAMETER(LCL.PMH_Price_Type);

//?Set display/hide attributes.
DO;

//?Do not display SFLSEL for deleted lines
CASE;

// IF DB1.Detail Line Status is Cancelled
IF DB1.Detail_Line_Status = 'X';

// RCD.USR Display field = CND.no
RCD.USR_Display_field = 'N';

ENDIF;

// RCD.USR Display 1 = CND.Yes
RCD.USR_Display_1 = 'Y';

//?If cancelled, chg mode, or priced & manual price audited=don't change
CASE;

// IF RCD.Detail Line Status is Cancelled
IF RCD.Detail_Line_Status = 'X';

// OR PGM.*Program mode is *CHANGE
OR PGM.*Program_mode = 'CHG';

// OR DB1.Price Status is Priced
OR ( DB1.Price_Status = 'P';

// AND DB1.Price Audit is Manually Price Audited
AND DB1.Price_Audit = 'M' );

// RCD.USR Display 1 = CND.No
RCD.USR_Display_1 = 'N';

ENDIF;

// RCD.USR Display 2 = CND.Yes
RCD.USR_Display_2 = 'Y';

//?Priced & Audit Manually pricing fields will be output only
CASE;

// IF DB1.Price Status is Priced
IF DB1.Price_Status = 'P';

// AND DB1.Price Audit is Manually Price Audited
AND DB1.Price_Audit = 'M';

// RCD.USR Display 2 = CND.No
RCD.USR_Display_2 = 'N';

//?Priced & Audit Manually pricing fields will be output only
// IF DB1.Detail Line Status is Cancelled
IF DB1.Detail_Line_Status = 'X';

// RCD.USR Display 2 = CND.No
RCD.USR_Display_2 = 'N';

ENDIF;

//?PK0519  10/20/03 RMC
// RCD.USR Display 3 = CND.Yes
RCD.USR_Display_3 = 'Y';

//?Control:  Price Override
CASE;

// IF RCD.Price Method Code is Deviated
IF RCD.Price_Method_Code = 'DEV';

// OR RCD.USR Display 2 is No
OR RCD.USR_Display_2 = 'N';

// OR WRK.Prc Ovr Output Only Usr is yes
OR WRK.Prc_Ovr_Output_Only_Usr = 'Y';

// RCD.USR Display 3 = CND.No
RCD.USR_Display_3 = 'N';

ENDIF;

//?S00932  09/08/09 RMC
// RCD.USR Display 4 = CND.Yes
RCD.USR_Display_4 = 'Y';

//?Control:  Price Code
CASE;

// IF RCD.Price Method Type is Not Contract
IF RCD.Price_Method_Type = 'X'/'F'/'M'/'K';

// OR RCD.Detail Line Status is Cancelled
OR RCD.Detail_Line_Status = 'X';

//?dont allow entry of price code until the mthd is DEViated
//? this will force them to press enter before doing the F4 to select a code
// RCD.USR Display 4 = CND.No
RCD.USR_Display_4 = 'N';

ENDIF;

//?FP1309  04/07/10 SLM
// RCD.USR Display 5 = CND.Yes
RCD.USR_Display_5 = 'Y';

//?Control:  AGE days
CASE;

// IF RCD.Detail Line Status is Cancelled
IF RCD.Detail_Line_Status = 'X';

// OR RCD.Override Age Dates StsUsr is Age Dates are Entered
OR RCD.Override_Age_Dates_StsUsr = 'O';

//?if line is cancelled do not have age days open
//?IF user has the PRODUCTION FROM dates entered then do not allow
//?age dates to be entered.
// RCD.USR Display 5 = CND.No
RCD.USR_Display_5 = 'N';

ENDIF;

ENDDO;

//?Price Code: See if max weight exceeded.   PK0519 10/23/03 RMC
CASE;

// IF RCD.Price Code is Entered
IF RCD.Price_Code > *ZERO;

//?Do this here in case its coming from the Copy Template, or the max changed
EXECUTE FUNCTION(Clc Sum Ship/Ord Unit IF) TYPE(EXCINTFUN)                      AC1829994;
PARAMETER(RCD.Company_Number);
PARAMETER(*ZERO);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Commodity_Market_Code);
PARAMETER(RCD.Date_Method_Code);
PARAMETER(RCD.Price_Method_Code);
PARAMETER(RCD.Price_Overage_Override);
PARAMETER(RCD.U_M_Base_Price);
PARAMETER(*ZERO);
PARAMETER(RCD.Unit_Weight_Ordered_U_M);
PARAMETER(RCD.Price_Code);
PARAMETER(RCD.OD_Ceiling_Price);
PARAMETER(WRK.Error_Status);
PARAMETER(PAR.Price_Method_Type);
PARAMETER(LCL.PMH_Price_Type);
{
 //?Execute internal function

 // PAR.Error Status = CND.no
 PAR.Error_Status = 'N';

 // LCL.Weight Ordered = PAR.Quantity Ordered * PAR.Unit Weight Ordered U/M *
 LCL.Weight_Ordered = PAR.Quantity_Ordered * PAR.Unit_Weight_Ordered_U_M;

 // Call program CLC Sum Ship/Ord Unit XF.
 CALL PROGRAM(CLC Sum Ship/Ord Unit XF) ('PPA6XFR');
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Price_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Total_Weight_Ordered_USR);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Total_Quantity_Ordered);

 // PAR.Total Weight Ordered USR = PAR.Total Weight Ordered USR + LCL.Weight Ordered
 PAR.Total_Weight_Ordered_USR = PAR.Total_Weight_Ordered_USR + LCL.Weight_Ordered;

 // PAR.Total Quantity Ordered = PAR.Total Quantity Ordered + PAR.Quantity Ordered
 PAR.Total_Quantity_Ordered = PAR.Total_Quantity_Ordered + PAR.Quantity_Ordered;

 //?5/13/10 SAZ P205-Add parm for Max Unit Type;rtv Contract Unit Type
 // Call program Rtv Cust Prc hdr/dtl  XF.
 CALL PROGRAM(Rtv Cust Prc hdr/dtl  XF) ('PPA7XFR');
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Price_Code);
 PARAMETER(WRK.Price_Start_Date);
 PARAMETER(WRK.Price_End_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Maximum_Contract_Units);
 PARAMETER(PAR.Customer_Price_UM_Prc);
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(LCL.Price_Method_Code);
 PARAMETER(PAR.Date_Method_Code);
 PARAMETER(PAR.Contract_Unit_Type);

 // PAR.Price Method Code = LCL.Price Method Code
 PAR.Price_Method_Code = LCL.Price_Method_Code;

 EXECUTE FUNCTION(RTV PrcMthTyp/PrcTyp  RT) TYPE(RTVOBJ) FILE(PDIHREP)           AC1997170;
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Price_Method_Code);
 PARAMETER(PAR.Price_Method_Type);
 PARAMETER(PAR.PMH_Price_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?5/13/10 SAZ P205-Use Contract Unit Type to check Qty or Weight-Lbs
 //?Use Contract Unit Type to check Qty or Weight-Lbs
 //?VAL: Total Weight and Quantity w/Maximum
 CASE;

 // IF PAR.Contract Unit Type is Weight-LB
 IF PAR.Contract_Unit_Type = 'W';

 CASE;

 // IF PAR.Total Weight Ordered USR GT PAR.Maximum Contract Units
 IF PAR.Total_Weight_Ordered_USR > PAR.Maximum_Contract_Units;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // LCL.Weight Allocated USR = PAR.Total Weight Ordered USR - PAR.Maximum Contract Units
 LCL.Weight_Allocated_USR = PAR.Total_Weight_Ordered_USR - PAR.Maximum_Contract_Units;

 // Send error message - 'Max Units &3 for Item &4/Price Code &1 exceeded by &2.'
 ERROR(USR3320);
 MSGPARM(PAR.Price_Code);
 MSGPARM(LCL.Weight_Allocated_USR);
 MSGPARM(PAR.Maximum_Contract_Units);
 MSGPARM(PAR.Item_Code);

 ENDIF;

 //?VAL: Total Weight and Quantity w/Maximum
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?If Contract Unit type = Quantity
 CASE;

 // IF PAR.Total Quantity Ordered GT PAR.Maximum Contract Units
 IF PAR.Total_Quantity_Ordered > PAR.Maximum_Contract_Units;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // LCL.Weight Allocated USR = PAR.Total Quantity Ordered - PAR.Maximum Contract Units
 LCL.Weight_Allocated_USR = PAR.Total_Quantity_Ordered - PAR.Maximum_Contract_Units;

 // Send error message - 'Max Units &3 for Item &4/Price Code &1 exceeded by &2.'
 ERROR(USR3320);
 MSGPARM(PAR.Price_Code);
 MSGPARM(LCL.Weight_Allocated_USR);
 MSGPARM(PAR.Maximum_Contract_Units);
 MSGPARM(PAR.Item_Code);

 ENDIF;

 ENDIF;

 //?Original code
 //?OUT: No Errors
 CASE;

 // IF PAR.Error Status is no
 IF PAR.Error_Status = 'N';

 // PAR.Price Overage Override = PAR.Customer Price /UM Prc
 PAR.Price_Overage_Override = PAR.Customer_Price_UM_Prc;

 CASE;

 // IF PAR.PMH Price Type is Invoice Price
 IF PAR.PMH_Price_Type = 'I';

 // PAR.Price Overage Override = PAR.Customer Price /UM Prc
 PAR.Price_Overage_Override = PAR.Customer_Price_UM_Prc;

 // PAR.OD Ceiling Price = CON.*ZERO
 PAR.OD_Ceiling_Price = *ZERO;

 // IF PAR.PMH Price Type is Ceiling Price
 IF PAR.PMH_Price_Type = 'C';

 // PAR.Price Overage Override = CON.*ZERO
 PAR.Price_Overage_Override = *ZERO;

 // PAR.OD Ceiling Price = PAR.Customer Price /UM Prc
 PAR.OD_Ceiling_Price = PAR.Customer_Price_UM_Prc;

 ENDIF;

 ENDIF;

}


ENDIF;

EXECUTE FUNCTION(Chk Item Cntrct Exist RT) TYPE(RTVOBJ) FILE(POC7REP)           AC1886875;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Cust_Item_Cntrct_Sts_USR);
PARAMETER(RCD.Scheduled_Ship_Date);
{
 //?USER: Initialize routine

 // PAR.Cust Item Cntrct Sts USR = CND.no
 PAR.Cust_Item_Cntrct_Sts_USR = 'N';

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Cust Prc Str/End  RT) TYPE(RTVOBJ) FILE(POC6REP)           AC1677734;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Price_Code);
 PARAMETER(LCL.Price_Start_Date);
 PARAMETER(LCL.Price_End_Date);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Scheduled Ship Date GE LCL.Price Start Date
 IF PAR.Scheduled_Ship_Date >= LCL.Price_Start_Date;

 // AND PAR.Scheduled Ship Date LE LCL.Price End Date
 AND PAR.Scheduled_Ship_Date <= LCL.Price_End_Date;

 // PAR.Cust Item Cntrct Sts USR = CND.yes
 PAR.Cust_Item_Cntrct_Sts_USR = 'Y';

 QUIT;

 ENDIF;

}


// RCD.Pallet Type NOREF = RCD.OD Pallet Type
RCD.Pallet_Type_NOREF = RCD.OD_Pallet_Type;

//?INIT: Pallet Type                                 9/16/21 WI464
CASE;

// IF RCD.Pallet Type NOREF is Not entered
IF RCD.Pallet_Type_NOREF = *BLANK;

// AND RCD.Palletize is yes
AND RCD.Palletize = 'Y';

// Call program Rtv Pallet Type/Desc  XF.
CALL PROGRAM(Rtv Pallet Type/Desc  XF) ('PUTPXFR');
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Pallet_Type_NOREF);
PARAMETER(NLL.PM_Description);
PARAMETER(NLL.Record_Found_USR);

//?If Pallet Type is still blank, default to #1 Pallet
CASE;

// IF RCD.Pallet Type NOREF is Not entered
IF RCD.Pallet_Type_NOREF = *BLANK;

// RCD.Pallet Type NOREF = CON.01
RCD.Pallet_Type_NOREF = 01;

ENDIF;

ENDIF;

//?WI firm order defaults
// Call program Exc Price type        XF.
CALL PROGRAM(Exc Price type        XF) ('PUV8XFR');
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(LCL.Cust_Dft_Price_Type);

//?Cust default price type
CASE;

// IF LCL.Cust Dft Price Type is *NONE
IF LCL.Cust_Dft_Price_Type = *BLANK;

//?Cust default price type
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.OD Price Type is *NONE
IF RCD.OD_Price_Type = *BLANK;

// RCD.OD Price Type = LCL.Cust Dft Price Type
RCD.OD_Price_Type = LCL.Cust_Dft_Price_Type;

ENDIF;

ENDIF;

//?INIT: Price Type Prior Record
CASE;

// IF PAR.OD Price Type is *NONE
IF PAR.OD_Price_Type = *BLANK;

// PAR.OD Price Type = RCD.OD Price Type
PAR.OD_Price_Type = RCD.OD_Price_Type;

ENDIF;

// RCD.Scheduled Quantity = DB1.Quantity Scheduled
RCD.Scheduled_Quantity = DB1.Quantity_Scheduled;

// RCD.Unit Price (DSP)  USR = DB1.Unit Price
RCD.Unit_Price_DSP_USR = DB1.Unit_Price;

//?9/10/08 SAZ
//?INIT: Price type ref nbr Prior Record
CASE;

// IF PAR.OD Price Type Ref Num is Zero
IF PAR.OD_Price_Type_Ref_Num = 0;

// PAR.OD Price Type Ref Num = RCD.OD Price Type Ref Num
PAR.OD_Price_Type_Ref_Num = RCD.OD_Price_Type_Ref_Num;

ENDIF;

//?INIT: Palletize Prior Record
CASE;

// IF PAR.Palletize is Not Yes
IF PAR.Palletize = *BLANK/'N';

CASE;

// IF RCD.Palletize is yes
IF RCD.Palletize = 'Y';

// PAR.Palletize = RCD.Palletize
PAR.Palletize = RCD.Palletize;

ENDIF;

ENDIF;

//?changed to db1.od pallet type from rcd.
// RCD.Pallet Type NOREF = DB1.OD Pallet Type
RCD.Pallet_Type_NOREF = DB1.OD_Pallet_Type;

//?INIT: Palletize Type                                WI464 10/04/21
CASE;

// IF PAR.OD Pallet Type is None
IF PAR.OD_Pallet_Type = *BLANK;

CASE;

// IF RCD.Pallet Type NOREF is Entered
IF RCD.Pallet_Type_NOREF <> *BLANK;

// PAR.OD Pallet Type = RCD.Pallet Type NOREF
PAR.OD_Pallet_Type = RCD.Pallet_Type_NOREF;

ENDIF;

ENDIF;

//?INIT: Item Age Days
CASE;

// IF PAR.Item Age Days is Not Entered
IF PAR.Item_Age_Days = *ZERO;

// PAR.Item Age Days = RCD.Item Age Days
PAR.Item_Age_Days = RCD.Item_Age_Days;

ENDIF;

//?12/17/08 PKD
//?INIT: Pricing Method Prior Record
CASE;

// IF PAR.Price Method Code is Blank
IF PAR.Price_Method_Code = *BLANK;

// PAR.Price Method Code = RCD.Price Method Code
PAR.Price_Method_Code = RCD.Price_Method_Code;

ENDIF;

//?INIT: Date Method Code Prior Record
CASE;

// IF PAR.Date Method Code is Not Entered
IF PAR.Date_Method_Code = *BLANK;

// PAR.Date Method Code = RCD.Date Method Code
PAR.Date_Method_Code = RCD.Date_Method_Code;

ENDIF;

// Call program Rtv Deduct/Add Exist  XF.
CALL PROGRAM(Rtv Deduct/Add Exist  XF) ('PNMHXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Deduct_Add_Sts_USR);

//?Test for Company Org, MPR sent to USDA or line cancelled
CASE;

// IF PAR.Company Organization is Not Seaboard
IF PAR.Company_Organization = 'D'/'H';

// OR RCD.OD MPR Sent to USDA Sts is yes
OR RCD.OD_MPR_Sent_to_USDA_Sts = 'Y';

// OR RCD.Detail Line Status is Cancelled
OR RCD.Detail_Line_Status = 'X';

// RCD.Status Flag 21 Y/N = CND.Yes
RCD.Status_Flag_21_Y_N = 'Y';

ENDIF;

//?If EDI & DSysco or Sysco, see if item exists on EDI PO   E004140
CASE;

// IF PAR.Customer Purchase Order # is NE Blank
IF PAR.Customer_Purchase_Order_# <> *BLANK;

CASE;

// IF RCD.Item Code is Entered
IF RCD.Item_Code <> *ZERO;

CASE;

// IF RCD.Detail Line Status is Not cancelled
IF RCD.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

// PAR.Display Flag = CND.No
PAR.Display_Flag = 'N';

// Call program Rtv Trade Prtnr Info  XF.
CALL PROGRAM(Rtv Trade Prtnr Info  XF) ('PBRYXFR');
PARAMETER(LCL.ST02_TRANS_SET_CONTROL_NU);
PARAMETER(PAR.Customer_Purchase_Order_#);
PARAMETER(LCL.EDI_Trading_Partner_No);

CASE;

// IF LCL.EDI Trading Partner No. is SYSCO Dailys
IF LCL.EDI_Trading_Partner_No = 'DSYSCO';

// OR LCL.EDI Trading Partner No. is SYSCO Foods
OR LCL.EDI_Trading_Partner_No = 'SYSCO';

//?Convert Seaboards 7.0 item to EDI 14 char product id
//?Then remove leading zeros
// LCL.Item Code Txt = CVTVAR(RCD.Item Code)
LCL.Item_Code_Txt = CVTVAR(RCD.Item_Code);

// WRK.USR Hold Description = LCL.Item Code Txt
WRK.USR_Hold_Description = LCL.Item_Code_Txt;

// Execute function CLC Remove LeadZeros 30US.
EXECUTE FUNCTION(CLC Remove LeadZeros 30US) TYPE(EXCUSRSRC) ('OMNHUFR');
PARAMETER(WRK.USR_Hold_Description);
PARAMETER(WRK.USR_Description);
{
 E                    AR1        30  1               ARRAY 1
 E                    AR2        30  1               ARRAY 2
 C                     MOVEAWUCUNA    AR1              LOAD ARRAY
 C                     Z-ADD1         X       20       SET COUNTER
 C                     Z-ADD1         Y       20       SET COUNTER
 C                     MOVE 'N'       STOP    1        FLAG
 C           X         DOWLT31
 C           AR1,X     IFEQ '0'
 C           STOP      ANDEQ'N'
 C                     ADD  1         X
 C                     ELSE
 C                     MOVE AR1,X     AR2,Y
 C                     ADD  1         Y
 C                     ADD  1         X
 C                     MOVE 'Y'       STOP
 C                     END
 C                     END
 C                     MOVEAAR2       WUJNNA           LOAD OUTPUT
}


// LCL.G6806/P109 PRODUCT ID = WRK.USR Description
LCL.G6806_P109_PRODUCT_ID = WRK.USR_Description;

//?See if item exists on EDI PO Detail (we don't care about GTIN here)
// Call program RTV GTIN for SBD Prod XF.
CALL PROGRAM(RTV GTIN for SBD Prod XF) ('PBRZXFR');
PARAMETER(LCL.ST02_TRANS_SET_CONTROL_NU);
PARAMETER(LCL.G6804_P107_UPC_GTIN_CODE);
PARAMETER(LCL.G6806_P109_PRODUCT_ID);
PARAMETER(LCL.Return_Code_Usr);

CASE;

// IF LCL.Return Code Usr is *Record does not exist
IF LCL.Return_Code_Usr = 'Y2U0005';

// CTL.Description Usr - 50 = CONCAT(CON.Order contains items that,CON.are not in EDI PO Detail,CON.
CTL.Description_Usr_50 = 'Order contains items that' + 'are not in EDI PO Detail' (1);

// PAR.Display Flag = CND.Yes
PAR.Display_Flag = 'Y';

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Description Usr - 50 = CON.*BLANK
CTL.Description_Usr_50 = *BLANK;

// PAR.Display Flag = CND.No
PAR.Display_Flag = 'N';

ENDIF;

ENDIF;

ENDIF;

//?RMC 4/5/23 added this to set cursor on 1st rcd (it was setting on last rrn
CASE;

// IF PAR.USR Display field is yes
IF PAR.USR_Display_field = 'Y';

CASE;

// IF LCL.First time flag 3 is Yes
IF LCL.First_time_flag_3 = 'Y';

SET CURSOR;

// LCL.First time flag 3 = CND.No
LCL.First_time_flag_3 = 'N';

ENDIF;

ENDIF;

//?USER: Initialize subfile record (new record)

MOVE *ALL (To: RCD From: PAR);

EXECUTE FUNCTION(RTV Affect Fields      RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1264364;
PARAMETER(CTL.Order_Type_Sales);
PARAMETER(RCD.Affect_Inventory_Status);
PARAMETER(RCD.Affect_Sales_Doll_Status);
PARAMETER(RCD.Affect_Sales_Pnds_Status);
PARAMETER(WRK.Affect_Brokerage_Default);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Establish Screen Fields or clear them
DO;

// RCD.Price Status = CND.Unpriced
RCD.Price_Status = 'U';

// RCD.Date of Original Entry = JOB.*Job date
RCD.Date_of_Original_Entry = JOB.*Job_date;

// PAR.USR Update Flag = CND.No
PAR.USR_Update_Flag = *BLANK;

// RCD.USR Display field = CND.no
RCD.USR_Display_field = 'N';

// RCD.USR Display 4 = CND.No
RCD.USR_Display_4 = 'N';

// RCD.Event Code = PAR.Event Code
RCD.Event_Code = PAR.Event_Code;

// RCD.Order Sequence Number = CON.*ZERO
RCD.Order_Sequence_Number = *ZERO;

// RCD.Order Secondary Line Seq = CON.1
RCD.Order_Secondary_Line_Seq = 1;

// RCD.Affect Trade Fund = CND.yes
RCD.Affect_Trade_Fund = 'Y';

// RCD.Affect Commission = CND.yes
RCD.Affect_Commission = 'Y';

// RCD.Affect Pricing = CND.yes
RCD.Affect_Pricing = 'Y';

// RCD.Palletize = WRK.BLANK
RCD.Palletize = WRK.BLANK;

CASE;

// IF PAR.Company Organization is High Plains Biodiesel
IF PAR.Company_Organization = 'H';

// RCD.Palletize = CND.no
RCD.Palletize = 'N';

ENDIF;

// RCD.Slip Sheet = WRK.BLANK
RCD.Slip_Sheet = WRK.BLANK;

// RCD.Age Code = WRK.BLANK
RCD.Age_Code = WRK.BLANK;

//?fp1309 add 3 new fields
// RCD.Item Age Days = CON.*ZERO
RCD.Item_Age_Days = *ZERO;

// RCD.Production Ovr AgeDte Fr = CON.*ZERO
RCD.Production_Ovr_AgeDte_Fr = *ZERO;

// RCD.Production Ovr AgeDte To = CON.*ZERO
RCD.Production_Ovr_AgeDte_To = *ZERO;

// RCD.Commodity Market Code = CON.*BLANK
RCD.Commodity_Market_Code = *BLANK;

// RCD.OD Price Type = CND.*NONE
RCD.OD_Price_Type = *BLANK;

// RCD.OD Price Type Ref Num = CND.Zero
RCD.OD_Price_Type_Ref_Num = 0;

// RCD.OD Pallet Type = CND.None
RCD.OD_Pallet_Type = *BLANK;

// RCD.Pallet Type NOREF = CON.*BLANK
RCD.Pallet_Type_NOREF = *BLANK;

// RCD.Price Method Code = CND.Blank
RCD.Price_Method_Code = *BLANK;

// RCD.Date Method Code = CND.Not Entered
RCD.Date_Method_Code = *BLANK;

//?01/13/21 DN R17029-Get/Default OD Spot Buy from OHE File.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Rtv OHE Spot Buy      XF.
CALL PROGRAM(Rtv OHE Spot Buy      XF) ('PUSFXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.OHE_Spot_Buy);
PARAMETER(PAR.Company_Organization);
PARAMETER(RCD.OD_Spot_Buy);

ENDIF;

//?Get customer default pallet type  10/11/22 WI 464
// Call program Rtv Pallet Type/Desc  XF.
CALL PROGRAM(Rtv Pallet Type/Desc  XF) ('PUTPXFR');
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(LCL.PM_Pallet_Type);
PARAMETER(NLL.PM_Description);
PARAMETER(NLL.Record_Found_USR);

//?3-23-23 chg output parm to lcl.pm pallet type from par.od pallet type
//? it was overlaying the order dtl pallet type from line 1
CASE;

// IF PAR.OD Pallet Type is Blank
IF PAR.OD_Pallet_Type = *BLANK;

CASE;

// IF LCL.PM Pallet Type is Not Blank
IF LCL.PM_Pallet_Type = 'HT'/'01'/'02';

// PAR.OD Pallet Type = LCL.PM Pallet Type
PAR.OD_Pallet_Type = LCL.PM_Pallet_Type;

ENDIF;

ENDIF;

ENDDO;

CASE;

// IF WRK.Type Code is Inter Company
IF WRK.Type_Code = 'IC';

// RCD.Price Overage Override = CON.*ZERO
RCD.Price_Overage_Override = *ZERO;

// RCD.USR Display 3 = CND.No
RCD.USR_Display_3 = 'N';

ENDIF;

CASE;

// IF PAR.Company Organization is Not Seaboard
IF PAR.Company_Organization = 'D'/'H';

// RCD.Status Flag 21 Y/N = CND.Yes
RCD.Status_Flag_21_Y_N = 'Y';

ENDIF;

//?CALC: Subfile control function fields

CASE;

// IF CTL.*CMD key is *Option Toggle
IF CTL.*CMD_key = '08';

CASE;

// IF PAR.USR Display field is yes
IF PAR.USR_Display_field = 'Y';

// PAR.USR Display field = CND.no
PAR.USR_Display_field = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Display field = CND.yes
PAR.USR_Display_field = 'Y';

//?W125163 RMC 04/05/23-Override Cursor and set flag to set cursor on 1st RRN
SET CURSOR;

//?RMC set this so the cursor gets set on SFL RRN 1
// LCL.First time flag 3 = CND.Yes
LCL.First_time_flag_3 = 'Y';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Re-read Subfile Record = CND.*YES
PGM.*Re_read_Subfile_Record = 1;

ENDIF;

//?USER: Validate subfile record fields

// WRK.Status Flag 19 Y/N = CND.No
WRK.Status_Flag_19_Y_N = 'N';

//?WI firm order defaults
// Call program Exc Price type        XF.
CALL PROGRAM(Exc Price type        XF) ('PUV8XFR');
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(LCL.Cust_Dft_Price_Type);

//?Cust default price type
CASE;

// IF LCL.Cust Dft Price Type is *NONE
IF LCL.Cust_Dft_Price_Type = *BLANK;

//?Cust default price type
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.OD Price Type is *NONE
IF RCD.OD_Price_Type = *BLANK;

// RCD.OD Price Type = LCL.Cust Dft Price Type
RCD.OD_Price_Type = LCL.Cust_Dft_Price_Type;

ENDIF;

ENDIF;

//?INIT: Price Type Prior Record
CASE;

// IF PAR.OD Price Type is *NONE
IF PAR.OD_Price_Type = *BLANK;

// PAR.OD Price Type = RCD.OD Price Type
PAR.OD_Price_Type = RCD.OD_Price_Type;

ENDIF;

//?9/10/08 SAZ
//?INIT: Price type ref nbr Prior Record
CASE;

// IF PAR.OD Price Type Ref Num is Zero
IF PAR.OD_Price_Type_Ref_Num = 0;

// PAR.OD Price Type Ref Num = RCD.OD Price Type Ref Num
PAR.OD_Price_Type_Ref_Num = RCD.OD_Price_Type_Ref_Num;

ENDIF;

//?INIT: Palletize Prior Record
CASE;

// IF PAR.Palletize is Not Yes
IF PAR.Palletize = *BLANK/'N';

CASE;

// IF RCD.Palletize is yes
IF RCD.Palletize = 'Y';

// PAR.Palletize = RCD.Palletize
PAR.Palletize = RCD.Palletize;

ENDIF;

ENDIF;

//?INIT: Palletize Type  Prior record                9/16/21 WI464
CASE;

// IF PAR.OD Pallet Type is None
IF PAR.OD_Pallet_Type = *BLANK;

//?If Pallet Type is not blank, default PAR.OD Pallet Type
CASE;

// IF RCD.Pallet Type NOREF is Entered
IF RCD.Pallet_Type_NOREF <> *BLANK;

// PAR.OD Pallet Type = RCD.Pallet Type NOREF
PAR.OD_Pallet_Type = RCD.Pallet_Type_NOREF;

ENDIF;

ENDIF;

//?INIT: Item Age Days
CASE;

// IF PAR.Item Age Days is Not Entered
IF PAR.Item_Age_Days = *ZERO;

// PAR.Item Age Days = RCD.Item Age Days
PAR.Item_Age_Days = RCD.Item_Age_Days;

ENDIF;

//?INIT: Price Method Code Prior Record
CASE;

// IF PAR.Price Method Code is Blank
IF PAR.Price_Method_Code = *BLANK;

// PAR.Price Method Code = RCD.Price Method Code
PAR.Price_Method_Code = RCD.Price_Method_Code;

ENDIF;

//?INIT: Date Method Code Prior Record
CASE;

// IF PAR.Date Method Code is Not Entered
IF PAR.Date_Method_Code = *BLANK;

// PAR.Date Method Code = RCD.Date Method Code
PAR.Date_Method_Code = RCD.Date_Method_Code;

ENDIF;

EXECUTE FUNCTION(Chk Item Cntrct Exist RT) TYPE(RTVOBJ) FILE(POC7REP)           AC1886875;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Cust_Item_Cntrct_Sts_USR);
PARAMETER(RCD.Scheduled_Ship_Date);
{
 //?USER: Initialize routine

 // PAR.Cust Item Cntrct Sts USR = CND.no
 PAR.Cust_Item_Cntrct_Sts_USR = 'N';

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Cust Prc Str/End  RT) TYPE(RTVOBJ) FILE(POC6REP)           AC1677734;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Price_Code);
 PARAMETER(LCL.Price_Start_Date);
 PARAMETER(LCL.Price_End_Date);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Scheduled Ship Date GE LCL.Price Start Date
 IF PAR.Scheduled_Ship_Date >= LCL.Price_Start_Date;

 // AND PAR.Scheduled Ship Date LE LCL.Price End Date
 AND PAR.Scheduled_Ship_Date <= LCL.Price_End_Date;

 // PAR.Cust Item Cntrct Sts USR = CND.yes
 PAR.Cust_Item_Cntrct_Sts_USR = 'Y';

 QUIT;

 ENDIF;

}


//?Select on item
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> RCD.Item Code
AND PGM.*Cursor_field = RCD.Item_Code;

CASE;

// IF RCD.USR Display 1 is No
IF RCD.USR_Display_1 = 'N';

//?RMC added 9/24/19
// IF *OTHERWISE
IF *OTHERWISE;

// Call program SEL Actv FG by WHS    SR.
CALL PROGRAM(SEL Actv FG by WHS    SR) ('PNMQSRR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(PAR.Warehouse_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

ENDIF;

//?Select Price Code  PK0519 10/20/03
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> RCD.Price Code
AND PGM.*Cursor_field = RCD.Price_Code;

// LCL.Price Code = CON.*ZERO
LCL.Price_Code = *ZERO;

// Call program Sel Customer Prc Hdr  SL.
CALL PROGRAM(Sel Customer Prc Hdr  SL) ('POPOSRR');
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(LCL.Price_Code);

CASE;

// IF LCL.Price Code is Entered
IF LCL.Price_Code > *ZERO;

// RCD.Price Code = LCL.Price Code
RCD.Price_Code = LCL.Price_Code;

ENDIF;

ENDIF;

// Call program Edt OD Pricing Dflts  XF.
CALL PROGRAM(Edt OD Pricing Dflts  XF) ('PNS2XFR');
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Market_Pricing_Date);
PARAMETER(RCD.Commodity_Market_Code);
PARAMETER(RCD.Date_Method_Code);
PARAMETER(RCD.Price_Method_Code);
PARAMETER(RCD.Price_Overage_Override);
PARAMETER(RCD.Price_Code);
PARAMETER(RCD.OD_Ceiling_Price);
PARAMETER(RCD.OD_Market_Begin_Date);
PARAMETER(RCD.OD_Market_Ending_Date);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(WRK.Type_Code);

//?DEFAULT: Price Method Code w/Prior Record
CASE;

// IF RCD.Price Method Code is Blank
IF RCD.Price_Method_Code = *BLANK;

// AND RCD.Item Code is Entered
AND RCD.Item_Code <> *ZERO;

// AND PAR.Company Organization is Seaboard
AND PAR.Company_Organization = 'S';

// RCD.Price Method Code = PAR.Price Method Code
RCD.Price_Method_Code = PAR.Price_Method_Code;

ENDIF;

//?DEFAULT: Date Method Code w/Prior Record
CASE;

// IF RCD.Date Method Code is Not Entered
IF RCD.Date_Method_Code = *BLANK;

// AND RCD.Item Code is Entered
AND RCD.Item_Code <> *ZERO;

// AND PAR.Company Organization is Seaboard
AND PAR.Company_Organization = 'S';

// AND RCD.Market Pricing Date is EQ Zero
AND RCD.Market_Pricing_Date = *ZERO;

// AND RCD.OD Market Begin Date is not entered
AND RCD.OD_Market_Begin_Date = *ZERO;

// AND RCD.OD Market Ending Date is not entered
AND RCD.OD_Market_Ending_Date = *ZERO;

// RCD.Date Method Code = PAR.Date Method Code
RCD.Date_Method_Code = PAR.Date_Method_Code;

ENDIF;

//?10/30/23 JM JM00035 - Validate Prod Plan in Change mode
CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

CASE;

// IF RCD.OD Production Plan St USR is Valid values
IF RCD.OD_Production_Plan_St_USR = 'N'/'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Value must be Y/N'
ERROR(USR5334);
MSGPARM(RCD.OD_Production_Plan_St_USR);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

ENDIF;

ENDIF;

//?Defaults for Add Mode
CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

//?Add Mode Defaults.
DO;

// RCD.Detail Line Status = CND.Entered
RCD.Detail_Line_Status = 'E';

// RCD.Event Code = CND.01 Order Entry
RCD.Event_Code = '01';

//?Set Secondary Seq #
CASE;

// IF RCD.Order Secondary Line Seq is ZERO
IF RCD.Order_Secondary_Line_Seq = *ZERO;

// RCD.Order Secondary Line Seq = CON.1
RCD.Order_Secondary_Line_Seq = 1;

ENDIF;

//?Fill Palletize
CASE;

// IF RCD.Palletize EQ WRK.BLANK
IF RCD.Palletize = WRK.BLANK;

// RCD.Palletize = PAR.Palletize
RCD.Palletize = PAR.Palletize;

ENDIF;

//?Fill Slip Sheet
CASE;

// IF RCD.Slip Sheet EQ WRK.BLANK
IF RCD.Slip_Sheet = WRK.BLANK;

// RCD.Slip Sheet = PAR.Slip Sheet
RCD.Slip_Sheet = PAR.Slip_Sheet;

ENDIF;

//?Set Price Method Code based on Type code
CASE;

// IF WRK.Type Code is Inter Company
IF WRK.Type_Code = 'IC';

// RCD.Price Method Code = CND.Manual
RCD.Price_Method_Code = 'MAN';

// LCL.Status Flag 4  Y/N = CND.no
LCL.Status_Flag_4_Y_N = 'N';

//?Set Price Method Code based on Type code
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.Price Method Code is Blank
IF RCD.Price_Method_Code = *BLANK;

EXECUTE FUNCTION(RTV Dsc,U/M,PrcInf,Str RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1418320;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(WRK.Description_Line_One);
PARAMETER(NLL.Description_Line_Two);
PARAMETER(NLL.UOM_Primary);
PARAMETER(NLL.Conversion_Factor_1);
PARAMETER(NLL.Operation_Factor_1);
PARAMETER(NLL.UOM_Second);
PARAMETER(NLL.Conversion_Factor_2);
PARAMETER(NLL.Operation_Factor_2);
PARAMETER(NLL.UOM_Third);
PARAMETER(NLL.UOM_Pricing);
PARAMETER(NLL.Unit_Weight);
PARAMETER(NLL.Production_Date_Control);
PARAMETER(NLL.Catch_Weight_Status);
PARAMETER(NLL.Item_Structure_Class_Code);
PARAMETER(NLL.Item_Structure_Group_Code);
PARAMETER(NLL.Item_Structure_Type_Code);
PARAMETER(NLL.Default_Commod_Mark_basis);
PARAMETER(RCD.Price_Method_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

ENDIF;

//?02/04/2010 PKD Commented out.
//?Rtv prod plan sts. Default to No if Live w/TPM           E004019
//?Bypass Company Item Ext for PORKSCHE5
CASE;

// IF LCL.User Code Model is Production Sched 5
IF LCL.User_Code_Model = 'PORKSCHE5';

//?Bypass Company Item Ext for PORKSCHE5
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Rtv Plan Prod Sts All XF.
CALL PROGRAM(Rtv Plan Prod Sts All XF) ('PVBLXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(NLL.Produce_on_Sunday_Sts);
PARAMETER(NLL.Produce_on_Monday_Sts);
PARAMETER(NLL.Produce_on_Tuesday_Sts);
PARAMETER(NLL.Produce_on_Wednesday_Sts);
PARAMETER(NLL.Produce_on_Thursday_Sts);
PARAMETER(NLL.Produce_on_Friday_Sts);
PARAMETER(NLL.Produce_on_Saturday_Sts);
PARAMETER(LCL.OD_Production_Plan_Sts);
PARAMETER(NLL.Allocation_Method);
PARAMETER(NLL.Adjust_Credit_Pieces);
PARAMETER(NLL.CIE_Use_Age_Days_over_Max);
PARAMETER(NLL.CIE_MPR_Report_to_USDA);
PARAMETER(NLL.CIE_Unused_Number);
PARAMETER(NLL.CIE_Unused_Number_2);
PARAMETER(NLL.CIE_Unused_Date);
PARAMETER(NLL.CIE_TPM_Equipment_Code);
PARAMETER(NLL.CIE_Capacity_Code);
PARAMETER(NLL.Record_Status);
PARAMETER(LCL.USR_Return_Code);

//?Override from table
CASE;

// IF LCL.USR Return Code is Exists
IF LCL.USR_Return_Code = 'E';

// RCD.OD Production Plan St USR = CND.Yes
RCD.OD_Production_Plan_St_USR = 'Y';

CASE;

// IF LCL.OD Production Plan Sts is No
IF LCL.OD_Production_Plan_Sts = 'N';

// RCD.OD Production Plan St USR = LCL.OD Production Plan Sts
RCD.OD_Production_Plan_St_USR = LCL.OD_Production_Plan_Sts;

ENDIF;

ENDIF;

ENDIF;

//?Make default as Yes it not No
CASE;

// IF RCD.OD Production Plan St USR is No
IF RCD.OD_Production_Plan_St_USR = 'N';

//?Make default as Yes it not No
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.OD Production Plan St USR = CND.Yes
RCD.OD_Production_Plan_St_USR = 'Y';

// RCD.Plan Production Sts USR = CND.Yes
RCD.Plan_Production_Sts_USR = 'Y';

ENDIF;

//?Validate Prod plan
CASE;

// IF RCD.OD Production Plan St USR is Valid values
IF RCD.OD_Production_Plan_St_USR = 'N'/'Y';

//?Validate Prod plan
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Value must be Y/N'
ERROR(USR5334);
MSGPARM(RCD.OD_Production_Plan_St_USR);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

ENDIF;

//?Sales is Transfer Order
CASE;

// IF PAR.Order Type - Sales is Transfer Order
IF PAR.Order_Type_Sales = 'TR';

// RCD.OD Production Plan St USR = CND.No
RCD.OD_Production_Plan_St_USR = 'N';

// RCD.Plan Production Sts USR = CND.No
RCD.Plan_Production_Sts_USR = 'N';

ENDIF;

ENDDO;

//?Defaults for Add Mode
// IF *OTHERWISE
IF *OTHERWISE;

//?If "MAN" price method then save Price Status.
CASE;

// IF RCD.Price Method Code is Manual
IF RCD.Price_Method_Code = 'MAN';

// WRK.Price Status USR = RCD.Price Status
WRK.Price_Status_USR = RCD.Price_Status;

ENDIF;

ENDIF;

//?Set Default Market Code.
CASE;

// IF RCD.Price Method Code is Manual
IF RCD.Price_Method_Code = 'MAN';

// OR RCD.Price Method Code is Deviated Flat Duty Item
OR RCD.Price_Method_Code = 'DVF';

// OR RCD.Price Method Code is Deviated Gate Price
OR RCD.Price_Method_Code = 'DVG';

// RCD.Date Method Code = CND.Not Entered
RCD.Date_Method_Code = *BLANK;

// RCD.Market Pricing Date = CND.EQ Zero
RCD.Market_Pricing_Date = *ZERO;

// RCD.Commodity Market Code = CON.*BLANK
RCD.Commodity_Market_Code = *BLANK;

//?Set Default Market Code.
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.Commodity Market Code EQ WRK.BLANK
IF RCD.Commodity_Market_Code = WRK.BLANK;

// RCD.Commodity Market Code = PAR.Commodity Market Code
RCD.Commodity_Market_Code = PAR.Commodity_Market_Code;

ENDIF;

ENDIF;

//?DEFAULT: Item Age Days
CASE;

// IF RCD.Item Age Days is Not Entered
IF RCD.Item_Age_Days = *ZERO;

// AND RCD.Item Code is Entered
AND RCD.Item_Code <> *ZERO;

// AND RCD.Production Ovr AgeDte Fr is not entered
AND ( RCD.Production_Ovr_AgeDte_Fr = *ZERO;

// AND RCD.Production Ovr AgeDte To is not entered
AND RCD.Production_Ovr_AgeDte_To = *ZERO );

// RCD.Item Age Days = PAR.Item Age Days
RCD.Item_Age_Days = PAR.Item_Age_Days;

ENDIF;

//?DEFAULT: Pallet Type                              9/16/21 WI464
CASE;

// IF RCD.Palletize is yes
IF RCD.Palletize = 'Y';

//?If Pallet Type is blank
CASE;

// IF RCD.Pallet Type NOREF is Not entered
IF RCD.Pallet_Type_NOREF = *BLANK;

//?If PAR.OD Pallet Type - blank
CASE;

// IF PAR.OD Pallet Type is None
IF PAR.OD_Pallet_Type = *BLANK;

// RCD.Pallet Type NOREF = CON.02
RCD.Pallet_Type_NOREF = 02;

// RCD.OD Pallet Type = CND.#2 Pallet
RCD.OD_Pallet_Type = 02;

//?If PAR.OD Pallet Type - blank
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Pallet Type NOREF = PAR.OD Pallet Type
RCD.Pallet_Type_NOREF = PAR.OD_Pallet_Type;

// RCD.OD Pallet Type = PAR.OD Pallet Type
RCD.OD_Pallet_Type = PAR.OD_Pallet_Type;

ENDIF;

ENDIF;

//?DEFAULT: Pallet Type                              9/16/21 WI464
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Pallet Type NOREF = CND.Not entered
RCD.Pallet_Type_NOREF = *BLANK;

// RCD.OD Pallet Type = CND.None
RCD.OD_Pallet_Type = *BLANK;

ENDIF;

//?DEFAULT: LAST PRICE TYPE
CASE;

// IF PAR.OD Price Type is Valid Values
IF PAR.OD_Price_Type = 'CON'/'FRM'/'NEG'/'HDG'/'DST'/'NHT'/'TNK'/'FLR';

CASE;

// IF RCD.OD Price Type is *NONE
IF RCD.OD_Price_Type = *BLANK;

// AND RCD.Item Code is Entered
AND RCD.Item_Code <> *ZERO;

// RCD.OD Price Type = PAR.OD Price Type
RCD.OD_Price_Type = PAR.OD_Price_Type;

ENDIF;

CASE;

// IF RCD.OD Price Type is Contract
IF RCD.OD_Price_Type = 'CON';

CASE;

// IF RCD.OD Price Type Ref Num is Zero
IF RCD.OD_Price_Type_Ref_Num = 0;

// AND PAR.OD Price Type Ref Num is Entered
AND PAR.OD_Price_Type_Ref_Num <> 0;

// RCD.OD Price Type Ref Num = PAR.OD Price Type Ref Num
RCD.OD_Price_Type_Ref_Num = PAR.OD_Price_Type_Ref_Num;

// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.OD Price Type Ref Num = CON.*ZERO
RCD.OD_Price_Type_Ref_Num = *ZERO;

ENDIF;

ENDIF;

//?Default : spot buy for SE
CASE;

// IF PAR.Company Organization is Not Seaboard
IF PAR.Company_Organization = 'D'/'H';

CASE;

// IF RCD.OD Spot Buy is No-blank
IF RCD.OD_Spot_Buy = *BLANK;

//?W77844 DN 06/12/21-Default Spot Buy to 'Turn' for SE.
// RCD.OD Spot Buy = CND.Turn
RCD.OD_Spot_Buy = 'T';

ENDIF;

ENDIF;

//?Seq #
CASE;

// IF RCD.Order Sequence Number is Equal to zero
IF RCD.Order_Sequence_Number = *ZERO;

// RCD.Order Sequence Number = WRK.Order Sequence Number + CON.1
RCD.Order_Sequence_Number = WRK.Order_Sequence_Number + 1;

// WRK.Order Sequence Number = RCD.Order Sequence Number
WRK.Order_Sequence_Number = RCD.Order_Sequence_Number;

ENDIF;

//?Validate: OD MPR Prc Ready to send                  e2540 4/08/13 RMC
CASE;

// IF RCD.OD MPR Prc Ready to Send is MPR Ready Sts
IF RCD.OD_MPR_Prc_Ready_to_Send = *BLANK/'X'/'N'/'Y';

CASE;

// IF RCD.OD MPR Prc Ready to Send is yes
IF RCD.OD_MPR_Prc_Ready_to_Send = 'Y';

CASE;

// IF RCD.Price Overage Override is GT .01
IF RCD.Price_Overage_Override > .01;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Cannot Send to MPR with price &1'
ERROR(USR4591);
MSGPARM(RCD.Price_Overage_Override);

ENDIF;

ENDIF;

//?Validate: OD MPR Prc Ready to send                  e2540 4/08/13 RMC
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.OD MPR Prc Ready to Send = CND.blank
RCD.OD_MPR_Prc_Ready_to_Send = *BLANK;

ENDIF;

//?Select Pallet Type.                            9/15/21 BB WI464
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> RCD.Pallet Type NOREF
AND PGM.*Cursor_field = RCD.Pallet_Type_NOREF;

//?If Palletize flag is Yes, select Pallet Type
CASE;

// IF RCD.Palletize is yes
IF RCD.Palletize = 'Y';

// Call program Sel Pallet Master     SR.
CALL PROGRAM(Sel Pallet Master     SR) ('PUTOSRR');
PARAMETER(RCD.Pallet_Type_NOREF);
PARAMETER('N');

// RCD.OD Pallet Type = RCD.Pallet Type NOREF
RCD.OD_Pallet_Type = RCD.Pallet_Type_NOREF;

//?If Palletize flag is Yes, select Pallet Type
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed when Palletize = N.'
ERROR(USR5218);
MSGPARM(RCD.Pallet_Type_NOREF);

ENDIF;

ENDIF;

//?Validate: Pallet Type of 'PLT' only.              9/16/21 WI464
CASE;

// IF RCD.Pallet Type NOREF is Entered
IF RCD.Pallet_Type_NOREF <> *BLANK;

// Call program Chk Pallet Typ Exists XF.
CALL PROGRAM(Chk Pallet Typ Exists XF) ('PUTQXFR');
PARAMETER(RCD.Pallet_Type_NOREF);
PARAMETER(LCL.Record_Found_USR);

//?I record not found, send error message
CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'Pallet Type not found.'
ERROR(USR5214);
MSGPARM(RCD.Pallet_Type_NOREF);

ENDIF;

ENDIF;

//?Populate file quantity ordered/substitute field from screen
CASE;

// IF RCD.Order Secondary Line Seq is GT 1
IF RCD.Order_Secondary_Line_Seq > 1;

// RCD.Quantity to Substitute = RCD.Qty Ordered USR
RCD.Quantity_to_Substitute = RCD.Qty_Ordered_USR;

//?Populate file quantity ordered/substitute field from screen
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Quantity Ordered = RCD.Qty Ordered USR
RCD.Quantity_Ordered = RCD.Qty_Ordered_USR;

ENDIF;

// RCD.Quantity 11.2 USR = RCD.Qty Ordered USR
RCD.Quantity_11_2_USR = RCD.Qty_Ordered_USR;

//?Quantity is required.
CASE;

// IF RCD.Qty Ordered USR is Equal to Zero
IF RCD.Qty_Ordered_USR = *ZERO;

//?Allow for TR Block order only
CASE;

// IF PAR.Order Type - Sales is Transfer Order
IF PAR.Order_Type_Sales = 'TR';

// AND PAR.Block Order Flag is Block Order
AND PAR.Block_Order_Flag = 'B';

//?E2393 allow for TR block order only
//?Allow for TR Block order only
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Value Required.'
ERROR(USR2625);
MSGPARM(RCD.Qty_Ordered_USR);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

ENDIF;

ENDIF;

//?If not Delete request, continue w/ validations
CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

//?If not Delete request, continue w/ validations
// IF *OTHERWISE
IF *OTHERWISE;

//?Not a delete request continue validations.
DO;

//?11/04/09 PKD E00519 Warehouse and Item Access by User
// Call program Val App Whs Itm Acs   XF.
CALL PROGRAM(Val App Whs Itm Acs   XF) ('PNMOXFR');
PARAMETER(JOB.*USER);
PARAMETER('O/P');
PARAMETER(PAR.Warehouse_Code);
PARAMETER(RCD.Item_Code);
PARAMETER(LCL.WHS_Item_Access_Sts_USR);

//?VAL: Warehouse/Item Access
CASE;

// IF LCL.WHS/Item Access Sts USR is Access Denied
IF LCL.WHS_Item_Access_Sts_USR = 'D';

// Send error message - 'Access Denied to &2 for Item &1.'
ERROR(USR4202);
MSGPARM(RCD.Item_Code);
MSGPARM(JOB.*USER);

QUIT;

ENDIF;

//?Validate entered fields and load data to output record
//?Fields from Item Master Checking
// Call program RTV for Ord.Detail     XF.
CALL PROGRAM(RTV for Ord.Detail     XF) ('PDC3XFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(LCL.Order_Desc_Line_One);
PARAMETER(RCD.Order_Desc_Line_Two);
PARAMETER(RCD.U_M_Ordered);
PARAMETER(RCD.U_M_Base_Price);
PARAMETER(RCD.Unit_Weight_Ordered_U_M);
PARAMETER(RCD.Item_Level);
PARAMETER(RCD.Production_Date_Control);
PARAMETER(RCD.Catch_Weight_Status);
PARAMETER(RCD.Item_Structure_Class_Code);
PARAMETER(RCD.Item_Structure_Group_Code);
PARAMETER(RCD.Item_Structure_Type_Code);
PARAMETER(WRK.Default_Commod_Mark_basis);
PARAMETER(WRK.Transportation_Temp);
PARAMETER(WRK.Item_Type_Code);
PARAMETER(WRK.Commodity_Price_Group);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(WRK.Price_Method_Code);
PARAMETER(WRK.Fresh_Chilling_Time);
PARAMETER(WRK.Variety_Rendered_Cut);
PARAMETER(RCD.OD_Item_Target_Price);
PARAMETER(WRK.Error_Status);

// Call program Exc Priml Grp/Sold100 XF.
CALL PROGRAM(Exc Priml Grp/Sold100 XF) ('PBP9XFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(LCL.Primal_Group_Code);
PARAMETER(LCL.Sold_100_Percent_Frozen);
PARAMETER(LCL.Allocation_Method);

CASE;

// IF LCL.Primal Group Code is NE Samples or Cut Loss
IF LCL.Primal_Group_Code <> 'UNID';

// RCD.Order Desc. Line One = LCL.Order Desc. Line One
RCD.Order_Desc_Line_One = LCL.Order_Desc_Line_One;

ENDIF;

CASE;

// IF RCD.Ord TF Exempt Code is Pre Commencement
IF RCD.Ord_TF_Exempt_Code = 'PC';

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Item Def/TFExp/CO RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC1962838;
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.TF_Co_Ownership_Sts);
PARAMETER(RCD.Ord_TF_Exempt_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

EXECUTE FUNCTION(Rtv Whs Typ/FZNCHLTME IF) TYPE(EXCINTFUN)                      AC1423925;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(WRK.Warehouse_Type);
PARAMETER(WRK.Fresh_Chilling_Time);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Warehouse Type is Frozen
 IF PAR.Warehouse_Type = 'FZ';

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(PAR.Company_Number);
 PARAMETER('FZNCHLTME');
 PARAMETER(PAR.System_Value_Numeric);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.Fresh Chilling Time = PAR.System Value Numeric
 PAR.Fresh_Chilling_Time = PAR.System_Value_Numeric;

 ENDIF;

}


//?Item Not found
CASE;

// IF WRK.Error Status is yes
IF WRK.Error_Status = 'Y';

// Send error message - 'Company Item not found.'
ERROR(USR0326);
MSGPARM(WRK.Company_Number);
MSGPARM(RCD.Item_Code);

ENDIF;

//?Default Warehouse
CASE;

// IF PAR.Allow Mult Whse to Order is yes
IF PAR.Allow_Mult_Whse_to_Order = 'Y';

//?Warehouse code from Item master
CASE;

// IF RCD.Warehouse Code is Warehouse Code Blank
IF RCD.Warehouse_Code = *BLANK;

// RCD.Warehouse Code = WRK.Warehouse Code
RCD.Warehouse_Code = WRK.Warehouse_Code;

ENDIF;

//?Default Warehouse
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.Warehouse Code EQ WRK.BLANK
IF RCD.Warehouse_Code = WRK.BLANK;

// RCD.Warehouse Code = PAR.Warehouse Code
RCD.Warehouse_Code = PAR.Warehouse_Code;

ENDIF;

ENDIF;

//?Default Fresh or Frozen Days from CTL ONLY in *add mode
CASE;

// IF RCD.Production Ovr AgeDte Fr is not entered
IF RCD.Production_Ovr_AgeDte_Fr = *ZERO;

CASE;

// IF RCD.Item Age Days is Not Entered
IF RCD.Item_Age_Days = *ZERO;

CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

CASE;

// IF WRK.Warehouse Type is Fresh
IF WRK.Warehouse_Type = 'FR';

// RCD.Item Age Days = CTL.Item Age Days Fresh
RCD.Item_Age_Days = CTL.Item_Age_Days_Fresh;

// IF WRK.Warehouse Type is Frozen
IF WRK.Warehouse_Type = 'FZ';

// RCD.Item Age Days = CTL.Item Age Days Frozen
RCD.Item_Age_Days = CTL.Item_Age_Days_Frozen;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

// Call program Val ItmBal.Unit Cst    XF.
CALL PROGRAM(Val ItmBal.Unit Cst    XF) ('PDMCXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(WRK.Unit_Cost_Per_Pound);
PARAMETER(WRK.Error_Status);

//?Error if no item balance or 0 unit cost
CASE;

// IF WRK.Error Status is yes
IF WRK.Error_Status = 'Y';

// Send error message - 'Item Balance not found.'
ERROR(USR0328);
MSGPARM(RCD.Company_Number);
MSGPARM(RCD.Item_Code);
MSGPARM(RCD.Warehouse_Code);

ENDIF;

EXECUTE FUNCTION(Val Age Information   IF) TYPE(EXCINTFUN)                      AC1984951;
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(CTL.Requested_Delivery_Date);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);
PARAMETER(LCL.Production_AgeDte_Fr);
PARAMETER(LCL.Production_AgeDte_To);
PARAMETER(WRK.Error_Status);
PARAMETER(PAR.Company_Organization);
PARAMETER('V');
{
 //?Execute internal function

 // WRK.Error Flag            USR = CND.Blank
 WRK.Error_Flag_USR = *BLANK;

 // PAR.Error Status = CND.blank
 PAR.Error_Status = *BLANK;

 // WRK.Error Reason Descript 1 = CON.*BLANK
 WRK.Error_Reason_Descript_1 = *BLANK;

 // WRK.Error Reason Descript 2 = CON.*BLANK
 WRK.Error_Reason_Descript_2 = *BLANK;

 // WRK.Error Reason Descript 3 = CON.*BLANK
 WRK.Error_Reason_Descript_3 = *BLANK;

 // WRK.Error Reason Descript 4 = CON.*BLANK
 WRK.Error_Reason_Descript_4 = *BLANK;

 // WRK.Error Reason Descript 5 = CON.*BLANK
 WRK.Error_Reason_Descript_5 = *BLANK;

 CASE;

 // IF PAR.Company Organization is Seaboard
 IF PAR.Company_Organization = 'S';

 CASE;

 // IF PAR.Requested Delivery Date is not entered
 IF PAR.Requested_Delivery_Date = *ZERO;

 // Send error message - 'Requested Delv Date is required'
 ERROR(USR4329);
 MSGPARM(PAR.Requested_Delivery_Date);

 // IF PAR.Scheduled Ship Date is not entered
 IF PAR.Scheduled_Ship_Date = *ZERO;

 // Send error message - 'Scheduled Ship Date is required when orders are assigned to load.'
 ERROR(USR2230);
 MSGPARM(PAR.Scheduled_Ship_Date);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Val Age information   XF.
 CALL PROGRAM(Val Age information   XF) ('PNQNXFR');
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.Error_Flag_USR);
 PARAMETER(WRK.Error_Reason_Descript_1);
 PARAMETER(WRK.Error_Reason_Descript_2);
 PARAMETER(WRK.Error_Reason_Descript_3);
 PARAMETER(WRK.Error_Reason_Descript_4);
 PARAMETER(WRK.Error_Reason_Descript_5);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(PAR.Item_Age_Days);
 PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
 PARAMETER(PAR.Production_Ovr_AgeDte_To);
 PARAMETER(PAR.Production_AgeDte_Fr);
 PARAMETER(PAR.Production_AgeDte_To);

 //?Verify if message should be sent if validation is required
 CASE;

 // IF WRK.Error Flag            USR is Yes
 IF WRK.Error_Flag_USR = 'Y';

 // AND PAR.Production Dates Sts Usr is Validation routine
 AND PAR.Production_Dates_Sts_Usr = 'V';

 //?message 1 Product is shipped before product is made
 CASE;

 // IF WRK.Error Reason Descript 1 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_1 <> WRK.Blank_for_30_USR;

 // Send error message - 'Prd Date is invalid for requested delivery date'
 ERROR(USR4307);
 MSGPARM(PAR.Production_AgeDte_Fr);

 ENDIF;

 //?message 2 Either Days or override date but not both
 CASE;

 // IF WRK.Error Reason Descript 2 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_2 <> WRK.Blank_for_30_USR;

 // Send error message - 'Enter Age Days or Dates'
 ERROR(USR4304);
 MSGPARM(PAR.Item_Age_Days);
 MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
 MSGPARM(PAR.Production_Ovr_AgeDte_To);

 ENDIF;

 //?message 3 With Chill Days Either Days or Override Dates required
 CASE;

 // IF WRK.Error Reason Descript 3 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_3 <> WRK.Blank_for_30_USR;

 // Send error message - 'Override Dates is after shipped date'
 ERROR(USR4305);
 MSGPARM(PAR.Item_Age_Days);
 MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
 MSGPARM(PAR.Production_Ovr_AgeDte_To);

 ENDIF;

 //?message 4 From date is > then SHIP DATE
 CASE;

 // IF WRK.Error Reason Descript 4 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_4 <> WRK.Blank_for_30_USR;

 // Send error message - 'Override Dates is after shipped date'
 ERROR(USR4305);
 MSGPARM(PAR.Item_Age_Days);
 MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
 MSGPARM(PAR.Production_Ovr_AgeDte_To);

 ENDIF;

 //?message 5 To date is > then SHIP DATE
 CASE;

 // IF WRK.Error Reason Descript 5 NE WRK.Blank for 30          USR
 IF WRK.Error_Reason_Descript_5 <> WRK.Blank_for_30_USR;

 // Send error message - 'Override Dates is after shipped date'
 ERROR(USR4305);
 MSGPARM(PAR.Item_Age_Days);
 MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
 MSGPARM(PAR.Production_Ovr_AgeDte_To);

 ENDIF;

 CASE;

 // IF PAR.Production Ovr AgeDte Fr is not entered
 IF PAR.Production_Ovr_AgeDte_Fr = *ZERO;

 // Send error message - 'Invalid Item Age Days'
 ERROR(USR4309);
 MSGPARM(PAR.Item_Age_Days);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send error message - 'Invalid Production Override Age Frm/To Dates'
 ERROR(USR4310);
 MSGPARM(PAR.Production_AgeDte_Fr);
 MSGPARM(PAR.Production_AgeDte_To);

 ENDIF;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Palletize is required.
CASE;

// IF RCD.Palletize is blank
IF RCD.Palletize = *BLANK;

// Send error message - 'Value Required.'
ERROR(USR2808);
MSGPARM(RCD.Palletize);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

ENDIF;

//?Slip Sheet is required.
CASE;

// IF RCD.Slip Sheet is blank
IF RCD.Slip_Sheet = *BLANK;

// Send error message - 'Value Required.'
ERROR(USR2808);
MSGPARM(RCD.Slip_Sheet);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

ENDIF;

//?Item must be FG
CASE;

// IF WRK.Item Type Code is Not Finished Good
IF WRK.Item_Type_Code <> 'FG';

// Send error message - 'Ordered Items must be Finished Goods.'
ERROR(USR1941);
MSGPARM(RCD.Item_Code);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

ENDIF;

//?R7574 10.18.16 RMC Dont allow FZ items on FR Warehouses
CASE;

// IF PAR.Company Organization is Seaboard
IF PAR.Company_Organization = 'S';

//?Item must be sold FR or FZ like the warehouse type    RMC 11/24/14
CASE;

// IF WRK.Warehouse Type is Frozen
IF WRK.Warehouse_Type = 'FZ';

//?Item must be sold FR or FZ like the warehouse type    RMC 11/24/14
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF LCL.Sold 100% Frozen is yes
IF LCL.Sold_100_Percent_Frozen = 'Y';

// WRK.Warehouse Type USR = CND.Frozen
WRK.Warehouse_Type_USR = 'FZ';

// Send error message - 'Item &1 sold &2 does not match the warehouse type &3'
ERROR(USR4776);
MSGPARM(RCD.Item_Code);
MSGPARM(WRK.Warehouse_Type_USR);
MSGPARM(WRK.Warehouse_Type);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?Validate TO Whse's Item Balance (Transfers only)
CASE;

// IF PAR.Billing Activity Type is Warehouse Transfer
IF PAR.Billing_Activity_Type = '4';

EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
PARAMETER(WRK.Warehouse_Code_Transfer);
PARAMETER(LCL.Shipping_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Val ItmBal.Unit Cst    XF.
CALL PROGRAM(Val ItmBal.Unit Cst    XF) ('PDMCXFR');
PARAMETER(LCL.Shipping_Company);
PARAMETER(RCD.Item_Code);
PARAMETER(WRK.Warehouse_Code_Transfer);
PARAMETER(WRK.Unit_Cost_Per_Pound);
PARAMETER(WRK.Error_Status);

//?Error if no item balance
CASE;

// IF WRK.Error Status is yes
IF WRK.Error_Status = 'Y';

// Send error message - 'Item Balance for "To" transfer warehouse not found'
ERROR(USR2340);
MSGPARM(RCD.Item_Code);
MSGPARM(RCD.Warehouse_Code);

//?Error if no item balance
// IF WRK.Unit Cost Per Pound EQ WRK.ZERO
IF WRK.Unit_Cost_Per_Pound = WRK.ZERO;

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

// Send error message - 'Unit Cost for Warehouse &2 Cannot Be 0'
ERROR(USR2343);
MSGPARM(RCD.Item_Code);
MSGPARM(WRK.Warehouse_Code_Transfer);

ENDIF;

ENDIF;

//?Regular order type and Bulk item
CASE;

// IF PAR.Load Type is Regular
IF PAR.Load_Type = 'R';

// AND WRK.Variety/Rendered/Cut is Rendered
AND WRK.Variety_Rendered_Cut = 'R';

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

// Send error message - 'Bulk items can not be on regular order type.'
ERROR(USR1881);
MSGPARM(RCD.Item_Code);

ENDIF;

//?Bulk Load type and non-bulk item
CASE;

// IF PAR.Load Type is Bulk
IF PAR.Load_Type = 'B';

// AND WRK.Variety/Rendered/Cut is Not Bulk Item
AND WRK.Variety_Rendered_Cut = 'C'/*BLANK/'V';

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

// Send error message - 'Only bulk items can be on a bulk order load type.'
ERROR(USR1882);
MSGPARM(RCD.Item_Code);

ENDIF;

//?Validate Ham Group.
DO;

//?5/11/07 PKD If an Item belongs to a Ham Group, then a Group
//?            must be specified.
//?09/21/07 PKD Only Validate Ham Group for Combos
CASE;

// IF RCD.U/M - Ordered is Combos
IF RCD.U_M_Ordered = 'CB';

EXECUTE FUNCTION(VAL Item              RT) TYPE(RTVOBJ) FILE(PDM1REP)           AC1821321;
PARAMETER(RCD.Item_Code);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


//?VAL:  Ham Group
CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

CASE;

// IF RCD.Ham Group Number is Not Entered
IF RCD.Ham_Group_Number = *ZERO;

// Send error message - 'Ham Group is required for Item &1.'
ERROR(USR3717);
MSGPARM(RCD.Item_Code);

ENDIF;

ENDIF;

CASE;

// IF RCD.Ham Group Number is Entered
IF RCD.Ham_Group_Number <> *ZERO;

//?Validate Ham Group Existance.
DO;

EXECUTE FUNCTION(VAL Ham Group          RT) TYPE(RTVOBJ) FILE(PDM0REP)          AC1568017;
PARAMETER(RCD.Ham_Group_Number);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

//?Ham Group Not Found.
DO;

// Send error message - 'Ham Group not found.'
ERROR(USR2875);
MSGPARM(RCD.Ham_Group_Number);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

ENDDO;

ENDIF;

ENDDO;

//?05/11/07 PKD Error Message instead of Informational Message
//?Check for Ham Group/Item.
DO;

CASE;

// IF WRK.Error Status is no
IF WRK.Error_Status = 'N';

EXECUTE FUNCTION(Rtv Credit Item Sts   RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1326370;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(LCL.Credit_Item_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Credit Item Status is yes
IF LCL.Credit_Item_Status = 'Y';

// IF RCD.U/M - Ordered is Not Combos
IF RCD.U_M_Ordered <> 'CB';

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(VAL Ham Group/Item     RT) TYPE(RTVOBJ) FILE(PDM1REP)          AC1568020;
PARAMETER(RCD.Ham_Group_Number);
PARAMETER(RCD.Item_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

//?Ham Group/Item not found.
DO;

// Send error message - 'Item not defined in ham group.'
ERROR(USR2876);
MSGPARM(RCD.Item_Code);
MSGPARM(RCD.Ham_Group_Number);

ENDDO;

ENDIF;

ENDIF;

ENDIF;

ENDDO;

ENDIF;

ENDIF;

ENDDO;

// RCD.Country Code = PAR.Country Code
RCD.Country_Code = PAR.Country_Code;

//?04/30/2018 DN R12926-At Order level, use Absorbed Freight Rate from OH.
EXECUTE FUNCTION(RTV AbsFrtRt/Type Cde  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1582615;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(LCL.Type_Code);
PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Val Manual Price      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1581694;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(LCL.Description_Line_One);
PARAMETER(LCL.Default_Commod_Mark_basis);
PARAMETER(LCL.Market_Overage);
PARAMETER(LCL.Standard_Overage_Underage);
PARAMETER(LCL.Commodity_Price_Group);
PARAMETER(LCL.Std_Weight_Head_Var_Ren);
PARAMETER(LCL.Primal_Group_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Edt OD Pricing Validt IF) TYPE(EXCINTFUN)                      AC1994988;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Market_Pricing_Date);
PARAMETER(RCD.Commodity_Market_Code);
PARAMETER(RCD.Date_Method_Code);
PARAMETER(RCD.Price_Method_Code);
PARAMETER(RCD.Price_Overage_Override);
PARAMETER(RCD.U_M_Base_Price);
PARAMETER(RCD.Quantity_Ordered);
PARAMETER(RCD.Weight_Ordered);
PARAMETER(RCD.Unit_Price_Credit);
PARAMETER(RCD.Unit_Weight_Ordered_U_M);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Price_Code);
PARAMETER(RCD.OD_Ceiling_Price);
PARAMETER(RCD.OD_Market_Begin_Date);
PARAMETER(RCD.OD_Market_Ending_Date);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(LCL.Type_Code);
PARAMETER(LCL.Default_Commod_Mark_basis);
PARAMETER(LCL.Market_Overage);
PARAMETER(LCL.Commodity_Price_Group);
PARAMETER(LCL.Primal_Group_Code);
PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
PARAMETER(PAR.Billing_Activity_Type);
PARAMETER(RCD.USR_Display_4);
PARAMETER(WRK.Error_Status);
{
 //?Execute internal function

 // PAR.Unit Price - Credit = CON.*ZERO
 PAR.Unit_Price_Credit = *ZERO;

 // Call program RTV PrcMthTyp/PrcTyp  XF.
 CALL PROGRAM(RTV PrcMthTyp/PrcTyp  XF) ('PNS7XFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Price_Method_Code);
 PARAMETER(LCL.Price_Method_Type);
 PARAMETER(LCL.PMH_Price_Type);

 // Call program Rtv Market Dtls OrEnt XF.
 CALL PROGRAM(Rtv Market Dtls OrEnt XF) ('PNS1XFR');
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(LCL.Commodity_Price_Group);
 PARAMETER(LCL.Market_Prem_Ded);
 PARAMETER(LCL.Record_Found_USR);

 // PAR.USR Display 4 = CND.No
 PAR.USR_Display_4 = 'N';

 //?LCL.Commodity Price Group & LCL.Market Overage
 CASE;

 // IF LCL.Record Found USR is Record Found
 IF LCL.Record_Found_USR = 'Y';

 // LCL.Market Overage = LCL.Market Prem/Ded
 LCL.Market_Overage = LCL.Market_Prem_Ded;

 //?LCL.Commodity Price Group & LCL.Market Overage
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Commodity Price Group = PAR.Commodity Price Group
 LCL.Commodity_Price_Group = PAR.Commodity_Price_Group;

 // LCL.Market Overage = PAR.Market Overage
 LCL.Market_Overage = PAR.Market_Overage;

 ENDIF;

 //?VAL: Price Method Code
 CASE;

 // IF PAR.Price Method Code is Blank
 IF PAR.Price_Method_Code = *BLANK;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Value Required.'
 ERROR(USR2808);
 MSGPARM(PAR.Price_Method_Code);

 ENDIF;

 //?VAL: Price Code
 CASE;

 // IF PAR.Price Code is Entered
 IF PAR.Price_Code > *ZERO;

 //?VAL: Price Code
 CASE;

 // IF LCL.Price Method Type is Not Contract
 IF LCL.Price_Method_Type = 'X'/'F'/'M'/'K';

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Price code invalid for Pricing Method &2. Price Code must be zero,'
 ERROR(USR4338);
 MSGPARM(PAR.Price_Code);
 MSGPARM(PAR.Price_Method_Code);

 CASE;

 // IF PAR.USR Display 4 is No
 IF PAR.USR_Display_4 = 'N';

 // PAR.USR Display 4 = CND.Yes
 PAR.USR_Display_4 = 'Y';

 ENDIF;

 //?VAL: Price Code
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Rtv Cust Prc Str/End  XF.
 CALL PROGRAM(Rtv Cust Prc Str/End  XF) ('PNTAXFR');
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Price_Code);
 PARAMETER(LCL.Price_Start_Date);
 PARAMETER(LCL.Price_End_Date);

 CASE;

 // IF LCL.Price Start Date is Not Entered
 IF LCL.Price_Start_Date = *ZERO;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Price Code &1 not found for customer or invalid date range.'
 ERROR(USR3318);
 MSGPARM(PAR.Price_Code);

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?VAL: Contract Start & End Date
 CASE;

 // IF PAR.Scheduled Ship Date LT LCL.Price Start Date
 IF PAR.Scheduled_Ship_Date < LCL.Price_Start_Date;

 // OR PAR.Scheduled Ship Date GT LCL.Price End Date
 OR PAR.Scheduled_Ship_Date > LCL.Price_End_Date;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Price Code &1 not valid because of start/end dates.'
 ERROR(USR3317);
 MSGPARM(PAR.Price_Code);

 ENDIF;

 // Call program Rtv Max Wt and price  XF.
 CALL PROGRAM(Rtv Max Wt and price  XF) ('PNTBXFR');
 PARAMETER(PGM.*Return_code);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Price_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Maximum_Contract_Units);
 PARAMETER(LCL.Customer_Price_UM_Prc);
 PARAMETER(LCL.Commodity_Market_Code_USR);
 PARAMETER(LCL.Price_Method_Code_USR);
 PARAMETER(LCL.Date_Method_Code_USR);
 PARAMETER(LCL.Contract_Unit_Type);

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Price Code &1 not found for Item &2'
 ERROR(USR3319);
 MSGPARM(PAR.Price_Code);
 MSGPARM(PAR.Item_Code);

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Sum weights shipped/ordered for ship to /price code
 EXECUTE FUNCTION(Clc Sum Ship/Ord Unit IF) TYPE(EXCINTFUN)                      AC1829994;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(PAR.Date_Method_Code);
 PARAMETER(PAR.Price_Method_Code);
 PARAMETER(PAR.Price_Overage_Override);
 PARAMETER(PAR.U_M_Base_Price);
 PARAMETER(PAR.Quantity_Ordered);
 PARAMETER(PAR.Unit_Weight_Ordered_U_M);
 PARAMETER(PAR.Price_Code);
 PARAMETER(PAR.OD_Ceiling_Price);
 PARAMETER(PAR.Error_Status);
 PARAMETER(LCL.Price_Method_Type);
 PARAMETER(LCL.PMH_Price_Type);
 {
  //?Execute internal function

  // PAR.Error Status = CND.no
  PAR.Error_Status = 'N';

  // LCL.Weight Ordered = PAR.Quantity Ordered * PAR.Unit Weight Ordered U/M *
  LCL.Weight_Ordered = PAR.Quantity_Ordered * PAR.Unit_Weight_Ordered_U_M;

  // Call program CLC Sum Ship/Ord Unit XF.
  CALL PROGRAM(CLC Sum Ship/Ord Unit XF) ('PPA6XFR');
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Price_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Total_Weight_Ordered_USR);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Total_Quantity_Ordered);

  // PAR.Total Weight Ordered USR = PAR.Total Weight Ordered USR + LCL.Weight Ordered
  PAR.Total_Weight_Ordered_USR = PAR.Total_Weight_Ordered_USR + LCL.Weight_Ordered;

  // PAR.Total Quantity Ordered = PAR.Total Quantity Ordered + PAR.Quantity Ordered
  PAR.Total_Quantity_Ordered = PAR.Total_Quantity_Ordered + PAR.Quantity_Ordered;

  //?5/13/10 SAZ P205-Add parm for Max Unit Type;rtv Contract Unit Type
  // Call program Rtv Cust Prc hdr/dtl  XF.
  CALL PROGRAM(Rtv Cust Prc hdr/dtl  XF) ('PPA7XFR');
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Price_Code);
  PARAMETER(WRK.Price_Start_Date);
  PARAMETER(WRK.Price_End_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Maximum_Contract_Units);
  PARAMETER(PAR.Customer_Price_UM_Prc);
  PARAMETER(PAR.Commodity_Market_Code);
  PARAMETER(LCL.Price_Method_Code);
  PARAMETER(PAR.Date_Method_Code);
  PARAMETER(PAR.Contract_Unit_Type);

  // PAR.Price Method Code = LCL.Price Method Code
  PAR.Price_Method_Code = LCL.Price_Method_Code;

  EXECUTE FUNCTION(RTV PrcMthTyp/PrcTyp  RT) TYPE(RTVOBJ) FILE(PDIHREP)           AC1997170;
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Price_Method_Code);
  PARAMETER(PAR.Price_Method_Type);
  PARAMETER(PAR.PMH_Price_Type);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?5/13/10 SAZ P205-Use Contract Unit Type to check Qty or Weight-Lbs
  //?Use Contract Unit Type to check Qty or Weight-Lbs
  //?VAL: Total Weight and Quantity w/Maximum
  CASE;

  // IF PAR.Contract Unit Type is Weight-LB
  IF PAR.Contract_Unit_Type = 'W';

  CASE;

  // IF PAR.Total Weight Ordered USR GT PAR.Maximum Contract Units
  IF PAR.Total_Weight_Ordered_USR > PAR.Maximum_Contract_Units;

  // PAR.Error Status = CND.yes
  PAR.Error_Status = 'Y';

  // LCL.Weight Allocated USR = PAR.Total Weight Ordered USR - PAR.Maximum Contract Units
  LCL.Weight_Allocated_USR = PAR.Total_Weight_Ordered_USR - PAR.Maximum_Contract_Units;

  // Send error message - 'Max Units &3 for Item &4/Price Code &1 exceeded by &2.'
  ERROR(USR3320);
  MSGPARM(PAR.Price_Code);
  MSGPARM(LCL.Weight_Allocated_USR);
  MSGPARM(PAR.Maximum_Contract_Units);
  MSGPARM(PAR.Item_Code);

  ENDIF;

  //?VAL: Total Weight and Quantity w/Maximum
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?If Contract Unit type = Quantity
  CASE;

  // IF PAR.Total Quantity Ordered GT PAR.Maximum Contract Units
  IF PAR.Total_Quantity_Ordered > PAR.Maximum_Contract_Units;

  // PAR.Error Status = CND.yes
  PAR.Error_Status = 'Y';

  // LCL.Weight Allocated USR = PAR.Total Quantity Ordered - PAR.Maximum Contract Units
  LCL.Weight_Allocated_USR = PAR.Total_Quantity_Ordered - PAR.Maximum_Contract_Units;

  // Send error message - 'Max Units &3 for Item &4/Price Code &1 exceeded by &2.'
  ERROR(USR3320);
  MSGPARM(PAR.Price_Code);
  MSGPARM(LCL.Weight_Allocated_USR);
  MSGPARM(PAR.Maximum_Contract_Units);
  MSGPARM(PAR.Item_Code);

  ENDIF;

  ENDIF;

  //?Original code
  //?OUT: No Errors
  CASE;

  // IF PAR.Error Status is no
  IF PAR.Error_Status = 'N';

  // PAR.Price Overage Override = PAR.Customer Price /UM Prc
  PAR.Price_Overage_Override = PAR.Customer_Price_UM_Prc;

  CASE;

  // IF PAR.PMH Price Type is Invoice Price
  IF PAR.PMH_Price_Type = 'I';

  // PAR.Price Overage Override = PAR.Customer Price /UM Prc
  PAR.Price_Overage_Override = PAR.Customer_Price_UM_Prc;

  // PAR.OD Ceiling Price = CON.*ZERO
  PAR.OD_Ceiling_Price = *ZERO;

  // IF PAR.PMH Price Type is Ceiling Price
  IF PAR.PMH_Price_Type = 'C';

  // PAR.Price Overage Override = CON.*ZERO
  PAR.Price_Overage_Override = *ZERO;

  // PAR.OD Ceiling Price = PAR.Customer Price /UM Prc
  PAR.OD_Ceiling_Price = PAR.Customer_Price_UM_Prc;

  ENDIF;

  ENDIF;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?VAL: Price Code
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?VAL: Price Code Required
 CASE;

 // IF LCL.Price Method Type is Contract Pricing
 IF LCL.Price_Method_Type = 'Q';

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Price code required for Pricing Method &2'
 ERROR(USR3316);
 MSGPARM(PAR.Price_Code);
 MSGPARM(PAR.Price_Method_Code);

 CASE;

 // IF PAR.USR Display 4 is No
 IF PAR.USR_Display_4 = 'N';

 // PAR.USR Display 4 = CND.Yes
 PAR.USR_Display_4 = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

 //?VAL: Market Price Date/Range
 CASE;

 // IF PAR.Market Pricing Date is NE Zero
 IF PAR.Market_Pricing_Date <> *ZERO;

 // AND PAR.OD Market Begin Date is Entered
 AND ( PAR.OD_Market_Begin_Date <> *ZERO;

 // OR PAR.OD Market Ending Date is Entered
 OR PAR.OD_Market_Ending_Date <> *ZERO );

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'A Market Pricing Date or Market Price Date Range may be entered; not both.
 ERROR(USR4331);
 MSGPARM(PAR.Market_Pricing_Date);
 MSGPARM(PAR.OD_Market_Begin_Date);
 MSGPARM(PAR.OD_Market_Ending_Date);

 //?VAL: Market Price Date/Range
 // IF PAR.OD Market Begin Date GT PAR.OD Market Ending Date
 IF PAR.OD_Market_Begin_Date > PAR.OD_Market_Ending_Date;

 CASE;

 // IF PAR.OD Market Ending Date is not entered
 IF PAR.OD_Market_Ending_Date = *ZERO;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Market Price Date Range Invalid'
 ERROR(USR4332);
 MSGPARM(PAR.OD_Market_Begin_Date);
 MSGPARM(PAR.OD_Market_Ending_Date);

 ENDIF;

 ENDIF;

 //?VAL: Price Method Type = Published
 CASE;

 // IF LCL.Price Method Type is Published Pricing
 IF LCL.Price_Method_Type = 'P';

 //?VAL: Price Overage Override
 CASE;

 // IF PAR.Price Overage Override is Not Zeros
 IF PAR.Price_Overage_Override <> *ZERO;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Price Override not allowed with Price Method chosen'
 ERROR(USR1807);
 MSGPARM(PAR.Price_Overage_Override);

 ENDIF;

 // PAR.Commodity Market Code = CND.Seaboard
 PAR.Commodity_Market_Code = 'SBD';

 //?VAL: Date Method Code
 CASE;

 // IF PAR.Date Method Code is Entered
 IF PAR.Date_Method_Code <> *BLANK;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Date Meth Code not allowed for Price Method chosen'
 ERROR(USR1808);
 MSGPARM(PAR.Date_Method_Code);

 ENDIF;

 //?VAL: Ceiling Price
 CASE;

 // IF PAR.OD Ceiling Price is Not Zeros
 IF PAR.OD_Ceiling_Price <> *ZERO;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send information message - 'Ceiling Price invalid for Pricing Method. Changed Ceiling Price to Z
 MESSAGE(USR4333 *INFO);
 MSGPARM(PAR.OD_Ceiling_Price);

 ENDIF;

 //?VAL: Market Date or Date Range
 CASE;

 // IF PAR.OD Market Begin Date is Entered
 IF PAR.OD_Market_Begin_Date <> *ZERO;

 // OR PAR.OD Market Ending Date is Entered
 OR PAR.OD_Market_Ending_Date <> *ZERO;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Market Pricing Date Range must be zero for Pricing Method &3.'
 ERROR(USR4344);
 MSGPARM(PAR.OD_Market_Begin_Date);
 MSGPARM(PAR.OD_Market_Ending_Date);
 MSGPARM(PAR.Price_Method_Code);

 ENDIF;

 ENDIF;

 //?VAL: Price Method Type = Manual/Extended
 CASE;

 // IF LCL.Price Method Type is Manual Pricing
 IF LCL.Price_Method_Type = 'M';

 // OR LCL.Price Method Type is Extended Pricing
 OR LCL.Price_Method_Type = 'X';

 //?VAL: Price Overage Override for Price Method Type=Extended
 CASE;

 // IF PAR.Price Overage Override is Equal zero
 IF PAR.Price_Overage_Override = *ZERO;

 // AND LCL.Price Method Type is Extended Pricing
 AND LCL.Price_Method_Type = 'X';

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Price Override required for price method'
 ERROR(USR1805);
 MSGPARM(PAR.Price_Overage_Override);

 ENDIF;

 //?VAL: Commodity Market Code
 CASE;

 // IF PAR.Commodity Market Code is Entered
 IF PAR.Commodity_Market_Code <> *BLANK;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Market Code not allowed for Price Method chosen'
 ERROR(USR1809);
 MSGPARM(PAR.Commodity_Market_Code);

 ENDIF;

 //?VAL: Date Method Code
 CASE;

 // IF PAR.Date Method Code is Entered
 IF PAR.Date_Method_Code <> *BLANK;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Date Meth Code not allowed for Price Method chosen'
 ERROR(USR1808);
 MSGPARM(PAR.Date_Method_Code);

 ENDIF;

 //?VAL: Ceiling Price
 CASE;

 // IF PAR.OD Ceiling Price is Not Zeros
 IF PAR.OD_Ceiling_Price <> *ZERO;

 // Send information message - 'Ceiling Price invalid for Pricing Method. Changed Ceiling Price to Z
 MESSAGE(USR4333 *INFO);
 MSGPARM(PAR.OD_Ceiling_Price);

 // PAR.OD Ceiling Price = CON.*ZERO
 PAR.OD_Ceiling_Price = *ZERO;

 ENDIF;

 //?VAL: Market Date or Date Range
 CASE;

 // IF PAR.Market Pricing Date is NE Zero
 IF PAR.Market_Pricing_Date <> *ZERO;

 // OR PAR.OD Market Begin Date is Entered
 OR PAR.OD_Market_Begin_Date <> *ZERO;

 // OR PAR.OD Market Ending Date is Entered
 OR PAR.OD_Market_Ending_Date <> *ZERO;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Market Price Date or Market Pricing Date Range must be zero for Pricing Me
 ERROR(USR4339);
 MSGPARM(PAR.Market_Pricing_Date);
 MSGPARM(PAR.OD_Market_Begin_Date);
 MSGPARM(PAR.OD_Market_Ending_Date);
 MSGPARM(PAR.Price_Method_Code);

 ENDIF;

 //?VAL: Manual Pricing
 CASE;

 // IF LCL.Price Method Type is Manual Pricing
 IF LCL.Price_Method_Type = 'M';

 //?VAL: Manual Price Range
 CASE;

 // IF PAR.Billing Activity Type is Not Warehouse Transfer
 IF PAR.Billing_Activity_Type = '2'/'3'/'1';

 CASE;

 // IF PAR.Primal Group Code is NE Samples or Cut Loss
 IF PAR.Primal_Group_Code <> 'UNID';

 //?RMC S14013 remove chk for type n= Promo/Samples- we want them validated
 EXECUTE FUNCTION(VAL Manual Price Range IF) TYPE(EXCINTFUN)                     AC1414607;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(PAR.Price_Overage_Override);
 PARAMETER(LCL.Commodity_Price_Group);
 PARAMETER(LCL.Projected_Market_Price);
 PARAMETER(PAR.Default_Commod_Mark_basis);
 PARAMETER(LCL.Market_Overage);
 PARAMETER(LCL.Error_Status_3);
 PARAMETER(LCL.Minimum_Price_USR);
 PARAMETER(LCL.Maximum_Price_USR);
 PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
 {
  //?Execute internal function

  //?*---------------------------------------------------------------*
  //?Documentation:
  //?This internal function will determine if a manual price entered
  //?on an order detail line is within the Manual Pricing Acceptance
  //?Percentage from the Company Control file. If it does not fall
  //?within the percentage range then the market price will be used.
  //?If no market price is found then it is a manual price error
  //?*---------------------------------------------------------------*
  // PAR.Projected Market Price = CON.*ZERO
  PAR.Projected_Market_Price = *ZERO;

  // PAR.Minimum Price   USR = CON.*ZERO
  PAR.Minimum_Price_USR = *ZERO;

  // PAR.Maximum Price  USR = CON.*ZERO
  PAR.Maximum_Price_USR = *ZERO;

  // PAR.Error Status  3 = CND.Yes
  PAR.Error_Status_3 = 'Y';

  EXECUTE FUNCTION(RTV Manual Price Accpt RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1414604;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Manual_Price_Accept_Prcnt);
  PARAMETER(PAR.CoPk_FdSrv_ManPrc_Acpt_PT);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Food Service and Co-Pack Items
  CASE;

  // IF PAR.Default Commod Mark basis is Food Service
  IF PAR.Default_Commod_Mark_basis = 'FSV';

  // OR PAR.Default Commod Mark basis is Co-Pack
  OR PAR.Default_Commod_Mark_basis = 'CPK';

  // PAR.Manual Price Accept Prcnt = PAR.CoPk/FdSrv ManPrc Acpt%
  PAR.Manual_Price_Accept_Prcnt = PAR.CoPk_FdSrv_ManPrc_Acpt_PT;

  ENDIF;

  EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
  PARAMETER(PAR.Commodity_Market_Code);
  PARAMETER(PAR.Commodity_Price_Group);
  PARAMETER(9999999);
  PARAMETER(PAR.Projected_Market_Price);
  PARAMETER(WRK.USR_Date_Priced);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.Commodity Market Price = DB1.Commodity Market Price
   PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

   // PAR.USR Date Priced = DB1.Market Price Date
   PAR.USR_Date_Priced = DB1.Market_Price_Date;

   QUIT;

  }

  // Projected Market Price
  PAR.Projected_Market_Price = ( PAR.Projected_Market_Price
  + PAR.Standard_Overage_Underage ) + ( PAR.Absorbed_Freight_Rate_CWT / 100 'H' );

  //?If a market price is found for co/cust market code default
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // Minimum price allowed
  PAR.Minimum_Price_USR = ( 1 - ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) )
  * PAR.Projected_Market_Price 'H';

  // Maximum price allowed
  PAR.Maximum_Price_USR = ( ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) + 1 )
  * PAR.Projected_Market_Price 'H';

  //?If the Price Override is within the range then error status is no
  CASE;

  // IF PAR.Price Overage Override GE PAR.Minimum Price   USR
  IF PAR.Price_Overage_Override >= PAR.Minimum_Price_USR;

  // AND PAR.Price Overage Override LE PAR.Maximum Price  USR
  AND PAR.Price_Overage_Override <= PAR.Maximum_Price_USR;

  // PAR.Error Status  3 = CND.No
  PAR.Error_Status_3 = 'N';

  ENDIF;

  //?If a market price is found for co/cust market code default
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?If no price for co/cust market code then use co/item market code
  EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
  PARAMETER(PAR.Default_Commod_Mark_basis);
  PARAMETER(PAR.Commodity_Price_Group);
  PARAMETER(9999999);
  PARAMETER(PAR.Projected_Market_Price);
  PARAMETER(WRK.USR_Date_Priced);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.Commodity Market Price = DB1.Commodity Market Price
   PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

   // PAR.USR Date Priced = DB1.Market Price Date
   PAR.USR_Date_Priced = DB1.Market_Price_Date;

   QUIT;

  }

  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // Minimum price allowed
  PAR.Minimum_Price_USR = ( PAR.Manual_Price_Accept_Prcnt / 100 'H' )
  * PAR.Projected_Market_Price 'H';

  // Maximum price allowed
  PAR.Maximum_Price_USR = ( ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) + 1 )
  * PAR.Projected_Market_Price 'H';

  //?If the Price Override is within the range then error status is no
  CASE;

  // IF PAR.Price Overage Override GE PAR.Minimum Price   USR
  IF PAR.Price_Overage_Override >= PAR.Minimum_Price_USR;

  // AND PAR.Price Overage Override LE PAR.Maximum Price  USR
  AND PAR.Price_Overage_Override <= PAR.Maximum_Price_USR;

  // PAR.Error Status  3 = CND.No
  PAR.Error_Status_3 = 'N';

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Projected Market Price = CON.*ZERO
  PAR.Projected_Market_Price = *ZERO;

  ENDIF;

  ENDIF;

 }

 // PAR.Unit Price - Credit = LCL.Projected Market Price
 PAR.Unit_Price_Credit = LCL.Projected_Market_Price;

 ENDIF;

 CASE;

 // IF LCL.Error Status  3 is Yes
 IF LCL.Error_Status_3 = 'Y';

 CASE;

 // IF LCL.Projected Market Price is Not Zeros
 IF LCL.Projected_Market_Price <> *ZERO;

 // Send information message - 'Price Override not within valid range, Market Price will be defaulte
 MESSAGE(USR2351 *INFO);
 MSGPARM(PAR.Price_Overage_Override);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'No price found for market &2 and group &3. Price out of range.'
 ERROR(USR2353);
 MSGPARM(PAR.Price_Overage_Override);
 MSGPARM(PAR.Commodity_Market_Code);
 MSGPARM(PAR.Commodity_Price_Group);

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?VAL: Price Method Type = Contract
 CASE;

 // IF LCL.Price Method Type is Contract Pricing
 IF LCL.Price_Method_Type = 'Q';

 //?VAL: Commodity Market Code
 CASE;

 // IF PAR.Commodity Market Code is Entered
 IF PAR.Commodity_Market_Code <> *BLANK;

 // AND LCL.PMH Price Type is Invoice Price
 AND LCL.PMH_Price_Type = 'I';

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Market Code not allowed for Price Method chosen'
 ERROR(USR1809);
 MSGPARM(PAR.Commodity_Market_Code);

 ENDIF;

 //?VAL: Date Method Code
 CASE;

 // IF PAR.Date Method Code is Entered
 IF PAR.Date_Method_Code <> *BLANK;

 // AND LCL.PMH Price Type is Invoice Price
 AND LCL.PMH_Price_Type = 'I';

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Date Meth Code not allowed for Price Method chosen'
 ERROR(USR1808);
 MSGPARM(PAR.Date_Method_Code);

 ENDIF;

 //?VAL: Ceiling Price
 CASE;

 // IF LCL.PMH Price Type is Invoice Price
 IF LCL.PMH_Price_Type = 'I';

 //?ERR: Ceiling Price not allowed
 CASE;

 // IF PAR.OD Ceiling Price is Not Zeros
 IF PAR.OD_Ceiling_Price <> *ZERO;

 // Send information message - 'Ceiling Price invalid for Pricing Method. Changed Ceiling Price to Z
 MESSAGE(USR4333 *INFO);
 MSGPARM(PAR.OD_Ceiling_Price);

 // PAR.OD Ceiling Price = CON.*ZERO
 PAR.OD_Ceiling_Price = *ZERO;

 ENDIF;

 //?VAL: Ceiling Price
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?ERR: Ceiling Price Required
 CASE;

 // IF PAR.OD Ceiling Price is Equal zero
 IF PAR.OD_Ceiling_Price = *ZERO;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Ceiling Price is required for Pricing Method.'
 ERROR(USR4340);
 MSGPARM(PAR.OD_Ceiling_Price);

 ENDIF;

 // PAR.Unit Price - Credit = PAR.OD Ceiling Price
 PAR.Unit_Price_Credit = PAR.OD_Ceiling_Price;

 ENDIF;

 //?VAL: Market Date or Date Range
 CASE;

 // IF PAR.Market Pricing Date is NE Zero
 IF PAR.Market_Pricing_Date <> *ZERO;

 // OR PAR.OD Market Begin Date is Entered
 OR PAR.OD_Market_Begin_Date <> *ZERO;

 // OR PAR.OD Market Ending Date is Entered
 OR PAR.OD_Market_Ending_Date <> *ZERO;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Market Price Date or Market Pricing Date Range must be zero for Pricing Me
 ERROR(USR4339);
 MSGPARM(PAR.Market_Pricing_Date);
 MSGPARM(PAR.OD_Market_Begin_Date);
 MSGPARM(PAR.OD_Market_Ending_Date);
 MSGPARM(PAR.Price_Method_Code);

 ENDIF;

 ENDIF;

 //?VAL: Price Method Type = Market/Formula
 CASE;

 // IF LCL.Price Method Type is Market or Formula
 IF LCL.Price_Method_Type = 'F'/'K';

 //?VAL: Price Overage Override
 CASE;

 // IF PAR.Price Overage Override is Not Zeros
 IF PAR.Price_Overage_Override <> *ZERO;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Price Override not allowed with Price Method chosen'
 ERROR(USR1807);
 MSGPARM(PAR.Price_Overage_Override);

 ENDIF;

 //?VAL: Commodity Market Code
 CASE;

 // IF PAR.Commodity Market Code is Not Entered
 IF PAR.Commodity_Market_Code = *BLANK;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Market Code must be entered for Price method chosen.'
 ERROR(USR1750);
 MSGPARM(PAR.Commodity_Market_Code);

 ENDIF;

 //?VAL: Date Method Code
 CASE;

 // IF PAR.Date Method Code is Entered
 IF PAR.Date_Method_Code <> *BLANK;

 EXECUTE FUNCTION(VAL Date Method Exists RT) TYPE(RTVOBJ) FILE(PDIPREP)          AC1365305;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Date_Method_Code);
 PARAMETER(NLL.Date_Method_Description);
 PARAMETER('O');
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?ERR: Date Method Code Invalid
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Date Method is invalid.'
 ERROR(USR2161);
 MSGPARM(PAR.Date_Method_Code);

 ENDIF;

 ENDIF;

 //?ERR: Date Method Entered & Market Price Date/Range Entered
 CASE;

 // IF PAR.Date Method Code is Entered
 IF ( PAR.Date_Method_Code <> *BLANK;

 // AND PAR.Market Pricing Date is NE Zero
 AND PAR.Market_Pricing_Date <> *ZERO );

 // OR PAR.Date Method Code is Entered
 OR ( PAR.Date_Method_Code <> *BLANK;

 // AND PAR.OD Market Begin Date is Entered
 AND PAR.OD_Market_Begin_Date <> *ZERO;

 // AND PAR.OD Market Ending Date is Entered
 AND PAR.OD_Market_Ending_Date <> *ZERO );

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Date Method and Market Price Date or Range are not allowed.'
 ERROR(USR2097);
 MSGPARM(PAR.Market_Pricing_Date);
 MSGPARM(PAR.Date_Method_Code);

 ENDIF;

 //?ERR: Date Method = Blank and Market Price Date/Rage = Zero
 CASE;

 // IF PAR.Date Method Code is Not Entered
 IF PAR.Date_Method_Code = *BLANK;

 // AND PAR.Market Pricing Date is EQ Zero
 AND PAR.Market_Pricing_Date = *ZERO;

 // AND PAR.OD Market Begin Date is not entered
 AND PAR.OD_Market_Begin_Date = *ZERO;

 // AND PAR.OD Market Ending Date is not entered
 AND PAR.OD_Market_Ending_Date = *ZERO;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Date Method is invalid.'
 ERROR(USR2161);
 MSGPARM(PAR.Date_Method_Code);

 ENDIF;

 //?ERR: Market Price Date & Market Price Date Range Entered
 CASE;

 // IF PAR.Market Pricing Date is NE Zero
 IF PAR.Market_Pricing_Date <> *ZERO;

 // AND PAR.OD Market Begin Date is Entered
 AND ( PAR.OD_Market_Begin_Date <> *ZERO;

 // OR PAR.OD Market Ending Date is Entered
 OR PAR.OD_Market_Ending_Date <> *ZERO );

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'A Market Pricing Date or Market Price Date Range may be entered; not both.
 ERROR(USR4331);
 MSGPARM(PAR.Market_Pricing_Date);
 MSGPARM(PAR.OD_Market_Begin_Date);
 MSGPARM(PAR.OD_Market_Ending_Date);

 ENDIF;

 //?ERR: Market Price Begin Date > Market Price Ending Date
 CASE;

 // IF PAR.OD Market Begin Date GT PAR.OD Market Ending Date
 IF PAR.OD_Market_Begin_Date > PAR.OD_Market_Ending_Date;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Market Price Date Range Invalid'
 ERROR(USR4332);
 MSGPARM(PAR.OD_Market_Begin_Date);
 MSGPARM(PAR.OD_Market_Ending_Date);

 ENDIF;

 EXECUTE FUNCTION(VAL Market Cd & Group  RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1414484;
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(LCL.Commodity_Price_Group);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  QUIT;

 }

 //?VAL: Commodity Market Price Exists
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 CASE;

 // IF PAR.Commodity Market Code NE PAR.Default Commod Mark basis
 IF PAR.Commodity_Market_Code <> PAR.Default_Commod_Mark_basis;

 EXECUTE FUNCTION(VAL Market Cd & Group  RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1414484;
 PARAMETER(PAR.Default_Commod_Mark_basis);
 PARAMETER(LCL.Commodity_Price_Group);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  QUIT;

 }

 //?Use Company Item
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'No price can be found for market code &1 and group code &2.'
 ERROR(USR2349);
 MSGPARM(PAR.Commodity_Market_Code);
 MSGPARM(LCL.Commodity_Price_Group);

 //?Use Company Item
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send information message - 'No price found for market &1 and group &2, so market &3 will be used
 MESSAGE(USR2350 *INFO);
 MSGPARM(PAR.Commodity_Market_Code);
 MSGPARM(LCL.Commodity_Price_Group);
 MSGPARM(PAR.Default_Commod_Mark_basis);

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'No price can be found for market code &1 and group code &2.'
 ERROR(USR2349);
 MSGPARM(PAR.Commodity_Market_Code);
 MSGPARM(LCL.Commodity_Price_Group);

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Retrieve Contract Defaults
CASE;

// IF RCD.Contract Number is Entered
IF RCD.Contract_Number > *ZERO;

EXECUTE FUNCTION(RTV Contract Defaults  RT) TYPE(RTVOBJ) FILE(OPCIREP)          AC1277302;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.USR_Item_Description);
PARAMETER(RCD.Contract_Number);
PARAMETER(RCD.Price_Overage_Override);
PARAMETER(RCD.Market_Pricing_Date);
PARAMETER(RCD.Date_Method_Code);
PARAMETER(RCD.Price_Method_Code);
PARAMETER(RCD.Commodity_Market_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.Contract Number = RCD.Contract Number
WRK.Contract_Number = RCD.Contract_Number;

ENDIF;

//?DEV or DVG and CON then Price Code is required        E002662
CASE;

// IF RCD.Price Method Code is Deviated
IF RCD.Price_Method_Code = 'DEV';

// OR RCD.Price Method Code is Deviated Gate Price
OR ( RCD.Price_Method_Code = 'DVG';

// AND RCD.OD Price Type is Contract
AND RCD.OD_Price_Type = 'CON' );

CASE;

// IF RCD.Price Code is Not Entered
IF RCD.Price_Code = *ZERO;

// Send error message - 'Price code required for Pricing Method &2'
ERROR(USR3316);
MSGPARM(RCD.Price_Method_Code);
MSGPARM(RCD.Price_Code);

// RCD.USR Display 4 = CND.Yes
RCD.USR_Display_4 = 'Y';

ENDIF;

ENDIF;

//?Contract Number not found
CASE;

// IF RCD.Contract Number is Entered
IF RCD.Contract_Number > *ZERO;

EXECUTE FUNCTION(RTV Entered Cont #     RT) TYPE(RTVOBJ) FILE(OPCIREP)          AC1228886;
PARAMETER(CTL.Company_Number);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(RCD.Contract_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'OPP Item Contract not found in contract file.'
ERROR(USR1803);
MSGPARM(RCD.Contract_Number);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

ENDIF;

ENDIF;

// WRK.Contract Number = RCD.Contract Number
WRK.Contract_Number = RCD.Contract_Number;

EXECUTE FUNCTION(EDT Order Detail Edits IF) TYPE(EXCINTFUN)                     AC1425282;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Market_Pricing_Date);
PARAMETER(RCD.Commodity_Market_Code);
PARAMETER(RCD.Date_Method_Code);
PARAMETER(RCD.Price_Method_Code);
PARAMETER(RCD.Price_Overage_Override);
PARAMETER(WRK.Contract_Number);
PARAMETER(RCD.Pricing_Date_Used);
PARAMETER(RCD.Quantity_11_2_USR);
PARAMETER(PAR.Cntrt_Enter_no_QT_Price);
PARAMETER(PAR.Cntrt_#_does_not_Exit);
PARAMETER(PAR.Qty_ordered_Contract);
PARAMETER(PAR.Contract_Expired);
PARAMETER(PAR.Price_Override_Required);
PARAMETER(PAR.Price_Method_QT_Cntrt_0);
PARAMETER(PAR.Prc_Code_FRM_or_MKT);
PARAMETER(PAR.Mkt_Pricing_Date_not_0);
PARAMETER(PAR.Mkt_Meth_and_Date_both);
PARAMETER(PAR.Price_Override_Req_EXT);
PARAMETER(PAR.Contract_Exists_for_Item);
PARAMETER(PAR.Price_Override_not_Allowd);
PARAMETER(PAR.Order_Date);
PARAMETER(PAR.Price_Method_Type);
{
 //?Execute internal function

 // PAR.Contract Exists for Item = CND.blank
 PAR.Contract_Exists_for_Item = *BLANK;

 // PAR.Cntrt Enter no QT Price = CND.blank
 PAR.Cntrt_Enter_no_QT_Price = *BLANK;

 // PAR.Cntrt.# does not Exit = CND.blank
 PAR.Cntrt_#_does_not_Exit = *BLANK;

 // PAR.Qty ordered > Contract = CND.blank
 PAR.Qty_ordered_Contract = *BLANK;

 // PAR.Contract Expired = CND.blank
 PAR.Contract_Expired = *BLANK;

 // PAR.Price Override Required = CND.blank
 PAR.Price_Override_Required = *BLANK;

 // PAR.Price Method QT & Cntrt 0 = CND.blank
 PAR.Price_Method_QT_Cntrt_0 = *BLANK;

 // PAR.Prc Code FRM or MKT = CND.blank
 PAR.Prc_Code_FRM_or_MKT = *BLANK;

 // PAR.Mkt Pricing Date not 0 = CND.blank
 PAR.Mkt_Pricing_Date_not_0 = *BLANK;

 // PAR.Mkt Meth. and Date both = CND.blank
 PAR.Mkt_Meth_and_Date_both = *BLANK;

 // PAR.Price Override Req. EXT = CND.blank
 PAR.Price_Override_Req_EXT = *BLANK;

 // PAR.Price Override not Allowd = CND.blank
 PAR.Price_Override_not_Allowd = *BLANK;

 //?Get Price Method Type
 EXECUTE FUNCTION(RTV Prc Mth Typ by Sys RT) TYPE(RTVOBJ) FILE(PDIHREP)          AC1365458;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Price_Method_Code);
 PARAMETER(PAR.Price_Method_Type);
 PARAMETER('O');
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Check if Contract exists for Item
 //?A Contract Exists for this customer and item.
 CASE;

 // IF PAR.Contract Number is Zero
 IF PAR.Contract_Number = *ZERO;

 EXECUTE FUNCTION(RTV Edt for Existing   RT) TYPE(RTVOBJ) FILE(OPCIREP)          AC1291147;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Order_Date);
 PARAMETER(PAR.Contract_Number);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  CASE;

  // IF PAR.Effective Date GE DB1.Effective Date
  IF PAR.Effective_Date >= DB1.Effective_Date;

  // AND PAR.Effective Date LE DB1.End Date Effective
  AND PAR.Effective_Date <= DB1.End_Date_Effective;

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

  ENDIF;

  // PAR.Contract Number = DB1.Contract Number
  PAR.Contract_Number = DB1.Contract_Number;

 }

 // WRK.Contract Number = PAR.Contract Number
 WRK.Contract_Number = PAR.Contract_Number;

 CASE;

 // IF PGM.*Return code is *Record already exists
 IF PGM.*Return_code = 'Y2U0003';

 // PAR.Contract Exists for Item = CND.yes
 PAR.Contract_Exists_for_Item = 'Y';

 ENDIF;

 ENDIF;

 //?Edit Contract Number
 CASE;

 // IF PAR.Contract Number is Entered
 IF PAR.Contract_Number > *ZERO;

 EXECUTE FUNCTION(RTV Val. Contract #    RT) TYPE(RTVOBJ) FILE(OPCIREP)          AC1267683;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Effective_Date);
 PARAMETER(PAR.End_Date_Effective);
 PARAMETER(PAR.Maximum_Quantity);
 PARAMETER(PAR.Quantity_Sold);
 PARAMETER(PAR.Contract_Number);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Set Contract Error Parms
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.Cntrt.# does not Exit = CND.yes
 PAR.Cntrt_#_does_not_Exit = 'Y';

 //?Set Contract Error Parms
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Total Quantity Ordered = PAR.Quantity Sold + PAR.Quantity Ordered
 WRK.Total_Quantity_Ordered = PAR.Quantity_Sold + PAR.Quantity_Ordered;

 CASE;

 // IF WRK.Total Quantity Ordered GT PAR.Maximum Quantity
 IF WRK.Total_Quantity_Ordered > PAR.Maximum_Quantity;

 // PAR.Qty ordered > Contract = CND.yes
 PAR.Qty_ordered_Contract = 'Y';

 ENDIF;

 CASE;

 // IF PAR.End Date Effective LE PAR.Order Date
 IF PAR.End_Date_Effective <= PAR.Order_Date;

 // PAR.Contract Expired = CND.yes
 PAR.Contract_Expired = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

 //?Validity Checking
 //?Price Override and Manual Price Method
 CASE;

 // IF PAR.Price Method Type is Manual Pricing
 IF PAR.Price_Method_Type = 'M';

 // AND PAR.Price Overage Override is Equal zero
 AND PAR.Price_Overage_Override = *ZERO;

 // PAR.Price Override Required = CND.yes
 PAR.Price_Override_Required = 'Y';

 ENDIF;

 //?Price override and EXT price method
 CASE;

 // IF PAR.Price Method Type is Extended Pricing
 IF PAR.Price_Method_Type = 'X';

 // AND PAR.Price Overage Override is Equal zero
 AND PAR.Price_Overage_Override = *ZERO;

 // PAR.Price Override Req. EXT = CND.yes
 PAR.Price_Override_Req_EXT = 'Y';

 ENDIF;

 //?FRM / MKT Checks
 CASE;

 // IF PAR.Price Method Type is Market or Formula
 IF PAR.Price_Method_Type = 'F'/'K';

 //?Market Code Must be entered
 CASE;

 // IF PAR.Commodity Market Code is Not Entered
 IF PAR.Commodity_Market_Code = *BLANK;

 // PAR.Prc Code FRM or MKT = CND.yes
 PAR.Prc_Code_FRM_or_MKT = 'Y';

 ENDIF;

 //?Market Price Date field not zero
 CASE;

 // IF PAR.Market Pricing Date is NE Zero
 IF PAR.Market_Pricing_Date <> *ZERO;

 // PAR.Mkt Pricing Date not 0 = CND.yes
 PAR.Mkt_Pricing_Date_not_0 = 'Y';

 ENDIF;

 CASE;

 // IF PAR.Price Overage Override is Not Zeros
 IF PAR.Price_Overage_Override <> *ZERO;

 // PAR.Price Override not Allowd = CND.yes
 PAR.Price_Override_not_Allowd = 'Y';

 ENDIF;

 ENDIF;

 //?MKT date Method entered and Mkt Price Date both entered.
 CASE;

 // IF PAR.Date Method Code is Entered
 IF PAR.Date_Method_Code <> *BLANK;

 // AND PAR.Market Pricing Date is NE Zero
 AND PAR.Market_Pricing_Date <> *ZERO;

 // PAR.Mkt Meth. and Date both = CND.yes
 PAR.Mkt_Meth_and_Date_both = 'Y';

 ENDIF;

}


//?Contract exists for this item
CASE;

// IF PAR.Contract Exists for Item is yes
IF PAR.Contract_Exists_for_Item = 'Y';

// Send information message - 'Item &1 has Contract number &2 in effect.'
MESSAGE(USR1851 *INFO);
MSGPARM(RCD.Item_Code);
MSGPARM(WRK.Contract_Number);

ENDIF;

//?Contract not found
CASE;

// IF PAR.Cntrt.# does not Exit is yes
IF PAR.Cntrt_#_does_not_Exit = 'Y';

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

// Send error message - 'OPP Item Contract not found in contract file.'
ERROR(USR1803);
MSGPARM(RCD.Contract_Number);

ENDIF;

//?Quantity ordered exceeds contract quantity available
CASE;

// IF PAR.Qty ordered > Contract is yes
IF PAR.Qty_ordered_Contract = 'Y';

// AND RCD.Contract Number NE WRK.ZERO
AND RCD.Contract_Number <> WRK.ZERO;

// Send information message - 'Quantity Ordered > Maximum quantity on Contract &2.'
MESSAGE(USR1806 *INFO);
MSGPARM(RCD.Quantity_11_2_USR);
MSGPARM(RCD.Contract_Number);

ENDIF;

//?Contract has passed expiration date
CASE;

// IF PAR.Contract Expired is yes
IF PAR.Contract_Expired = 'Y';

// AND RCD.Contract Number is Entered
AND RCD.Contract_Number > *ZERO;

// Send information message - 'Contract Effective date has expired for this item.'
MESSAGE(USR1810 *INFO);
MSGPARM(RCD.Contract_Number);

ENDIF;

//?-------------------------------------------------
//?Market code/prc date must be entered with FRM or MKT price code
CASE;

// IF PAR.Prc Code FRM or MKT is yes
IF PAR.Prc_Code_FRM_or_MKT = 'Y';

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

// Send error message - 'Market Code must be entered for Price method chosen.'
ERROR(USR1750);
MSGPARM(RCD.Commodity_Market_Code);

ENDIF;

//?Date method/Pricing Date
CASE;

// IF PAR.Mkt Meth. and Date both is yes
IF PAR.Mkt_Meth_and_Date_both = 'Y';

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

// Send error message - 'Date Method and Market Price Date or Range are not allowed.'
ERROR(USR2097);
MSGPARM(RCD.Market_Pricing_Date);
MSGPARM(RCD.Date_Method_Code);

//?Date method/Pricing Date
//?-------------------------------------------------
EXECUTE FUNCTION(RTV Actv Descr, Ctrl   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304411;
PARAMETER(RCD.Warehouse_Code);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Trans_Contol_AS400_Plant);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Error condition warehouse not found
// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Warehouse Codes not found.'
ERROR(USR0007);
MSGPARM(RCD.Warehouse_Code);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

//?Error condition warehouse not found
// IF WRK.Trans Contol AS400/Plant NE PAR.Trans Contol AS400/Plant
IF WRK.Trans_Contol_AS400_Plant <> PAR.Trans_Contol_AS400_Plant;

// Send error message - 'Warehouse Control &2 not allowed on order with Plant/AS400 = &3.'
ERROR(USR1920);
MSGPARM(RCD.Warehouse_Code);
MSGPARM(WRK.Trans_Contol_AS400_Plant);
MSGPARM(PAR.Trans_Contol_AS400_Plant);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

ENDIF;

// RCD.Weight Ordered = RCD.Quantity Ordered * RCD.Unit Weight Ordered U/M *
RCD.Weight_Ordered = RCD.Quantity_Ordered * RCD.Unit_Weight_Ordered_U_M;

//?weight ordered
CASE;

// IF RCD.Order Secondary Line Seq is GT 1
IF RCD.Order_Secondary_Line_Seq > 1;

// RCD.Weight 11.2 USR = RCD.Quantity 11.2 USR * RCD.Unit Weight Ordered U/M *
RCD.Weight_11_2_USR = RCD.Quantity_11_2_USR * RCD.Unit_Weight_Ordered_U_M;

//?weight ordered
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Weight 11.2 USR = RCD.Weight Ordered
RCD.Weight_11_2_USR = RCD.Weight_Ordered;

ENDIF;

EXECUTE FUNCTION(Set/Val OH TF Exempt  IF) TYPE(EXCINTFUN)                      AC1960076;
PARAMETER(CTL.OH_TF_Exempt_Code);
PARAMETER(RCD.Ord_TF_Exempt_Code);
PARAMETER(RCD.Item_Code);
PARAMETER(WRK.Error_Status);
PARAMETER(CTL.Customer_TF_Exempt_Code);
PARAMETER(RCD.TF_Co_Ownership_Sts);
{
 //?Execute internal function

 //?Set / Validate TF Exempt code values              RMC 8/24/05
 CASE;

 // IF PAR.OH TF Exempt Code is Blank
 IF PAR.OH_TF_Exempt_Code = *BLANK;

 //?VAL: Customer Exempt Code  w/Item Exempt Code
 CASE;

 // IF PAR.Customer TF Exempt Code is Not Exempt
 IF PAR.Customer_TF_Exempt_Code = 'NE';

 //?VAL: Item Exempt Code
 CASE;

 // IF PAR.Ord TF Exempt Code is Item Codes
 IF PAR.Ord_TF_Exempt_Code = 'EP'/'NE';

 // PAR.OH TF Exempt Code = PAR.Ord TF Exempt Code
 PAR.OH_TF_Exempt_Code = PAR.Ord_TF_Exempt_Code;

 ENDIF;

 //?VAL: Customer Exempt Code  w/Item Exempt Code
 // IF PAR.Customer TF Exempt Code is Exempt Customer
 IF PAR.Customer_TF_Exempt_Code = 'EC';

 // PAR.OH TF Exempt Code = PAR.Customer TF Exempt Code
 PAR.OH_TF_Exempt_Code = PAR.Customer_TF_Exempt_Code;

 //?VAL: Item Exempt Code
 CASE;

 // IF PAR.Ord TF Exempt Code is Not Exempt
 IF PAR.Ord_TF_Exempt_Code = 'NE';

 CASE;

 // IF PAR.TF Co-Ownership Sts is Co-Owned
 IF PAR.TF_Co_Ownership_Sts = 'S'/'T';

 //?E00505-Prevent Co-Owned Item to be sold to Exempt Customers.
 // Send error message - 'TF Exempt Error-Item Must Be Non Co-Owned For Exempt Customer.'
 ERROR(USR4203);
 MSGPARM(PAR.Item_Code);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Ord TF Exempt Code = CND.Exempt Customer
 PAR.Ord_TF_Exempt_Code = 'EC';

 ENDIF;

 //?VAL: Item Exempt Code
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Ord TF Exempt Code = CND.Exempt Product
 PAR.Ord_TF_Exempt_Code = 'EP';

 ENDIF;

 ENDIF;

 //?Set / Validate TF Exempt code values              RMC 8/24/05
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Validate after 1 line item has been entered
 //?If not Pre-Commencement, set exempt code
 CASE;

 // IF PAR.OH TF Exempt Code is Not Pre-Commencement
 IF PAR.OH_TF_Exempt_Code = 'EC'/'EP'/'NE';

 //?VAL: Customer Exempt Code w/Item Exempt Code
 CASE;

 // IF PAR.Customer TF Exempt Code is Not Exempt
 IF PAR.Customer_TF_Exempt_Code = 'NE';

 //?Line item must eq whats in the header, else Error
 CASE;

 // IF PAR.OH TF Exempt Code NE PAR.Ord TF Exempt Code
 IF PAR.OH_TF_Exempt_Code <> PAR.Ord_TF_Exempt_Code;

 // Send error message - 'Tf Exempt error - cant mix exempt & non-exempt items for customer.'
 ERROR(USR3588);
 MSGPARM(PAR.Item_Code);

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 ENDIF;

 //?VAL: Customer Exempt Code w/Item Exempt Code
 // IF PAR.Customer TF Exempt Code is Exempt Customer
 IF PAR.Customer_TF_Exempt_Code = 'EC';

 //?VAL: Item Exempt Code
 CASE;

 // IF PAR.Ord TF Exempt Code is Not Exempt
 IF PAR.Ord_TF_Exempt_Code = 'NE';

 CASE;

 // IF PAR.TF Co-Ownership Sts is Co-Owned
 IF PAR.TF_Co_Ownership_Sts = 'S'/'T';

 //?E00505-Prevent Co-Owned Item to be sold to Exempt Customers.
 // Send error message - 'TF Exempt Error-Item Must Be Non Co-Owned For Exempt Customer.'
 ERROR(USR4203);
 MSGPARM(PAR.Item_Code);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Ord TF Exempt Code = CND.Exempt Customer
 PAR.Ord_TF_Exempt_Code = 'EC';

 ENDIF;

 //?VAL: Item Exempt Code
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Ord TF Exempt Code = CND.Exempt Product
 PAR.Ord_TF_Exempt_Code = 'EP';

 ENDIF;

 ENDIF;

 //?If not Pre-Commencement, set exempt code
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Ord TF Exempt Code = CND.Pre Commencement
 PAR.Ord_TF_Exempt_Code = 'PC';

 ENDIF;

 ENDIF;

}


//?Item structure
CASE;

// IF WRK.Error Status is yes
IF WRK.Error_Status = 'Y';

//?Item structure
// IF *OTHERWISE
IF *OTHERWISE;

//?Validate Item Level
CASE;

// IF RCD.Item Level NE WRK.BLANK
IF RCD.Item_Level <> WRK.BLANK;

EXECUTE FUNCTION(VAL Item Level Exists  RT) TYPE(RTVOBJ) FILE(PDILREP)          AC1340594;
PARAMETER(RCD.Item_Level);

//?Error if not found
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Error if not found
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Item Level not found.'
ERROR(USR2076);
MSGPARM(RCD.Item_Code);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?VAL: Price Type
CASE;

// IF RCD.OD SD Price Method is *NONE
IF RCD.OD_Price_Type = *BLANK;

// AND PAR.SD Price Mthd Req STS USR is yes
AND PAR.OD_Price_Type_Req_STS_USR = 'Y';

// AND PAR.Order Type - Sales is Regular Order
AND PAR.Order_Type_Sales = 'OR';

// Send error message - 'Price Type Required.'
ERROR(USR3952);
MSGPARM(RCD.OD_Price_Type);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

ENDIF;

//?VAL: Pallet Type                                  9/16/21 WI464
CASE;

// IF RCD.Palletize is yes
IF RCD.Palletize = 'Y';

//?If Pallet Type is blank
CASE;

// IF RCD.Pallet Type NOREF is Not entered
IF RCD.Pallet_Type_NOREF = *BLANK;

// Send error message - 'Pallet Type is required.'
ERROR(USR3954);
MSGPARM(RCD.Pallet_Type_NOREF);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

ENDIF;

ENDIF;

ENDDO;

ENDIF;

//?If all validations are fixed, clear the Upload Error flag   P001251
CASE;

// IF WRK.Error Status is Not Yes
IF WRK.Error_Status = *BLANK/'N';

// RCD.Order Line Error Type = CND.No Order Detail Failures
RCD.Order_Line_Error_Type = *BLANK;

ENDIF;

//?FP1309 Allocation & DE-Allocation
//?Processing when no error encountered (Allocation/De Allocation)
CASE;

// IF WRK.Error Status is yes
IF WRK.Error_Status = 'Y';

//?*** Error encountered. ***
//?Processing when no error encountered (Allocation/De Allocation)
// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

//?*** Delete Request. ***
DO;

//?New code
CASE;

// IF RCD.Plan Production Sts USR is Yes
IF RCD.Plan_Production_Sts_USR = 'Y';

//?if it WAS yes, then deallocate
//?E4122 JJH 06/11/15 - Use Requested Ship Date for Allocation/Deallocation
// Call program UPD Avail-To-Sell  ORD XF.
CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.USR_Item_Code);
PARAMETER(RCD.USR_Warehouse_Code);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
PARAMETER('OD');
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Item_age_days_usr);
PARAMETER(RCD.Prod_OvrAge_Frm_Usr);
PARAMETER(RCD.Prod_OvrAge_To_Usr);

//?New code
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Quantity Scheduled = CON.*ZERO
RCD.Quantity_Scheduled = *ZERO;

// RCD.Weight Scheduled = CON.*ZERO
RCD.Weight_Scheduled = *ZERO;

ENDIF;

//?*-------------------------------------------------*
ENDDO;

//?Processing when no error encountered (Allocation/De Allocation)
// IF *OTHERWISE
IF *OTHERWISE;

//?*** Update Allocations. ***
DO;

//? FP1054 4/09/09 if OD Production Plan Sts = "N", dont do the alloc,
//?  and make the schedule qty = order qty
//?FP1309 Allocation & DE-Allocation
//?TRANSFER order : Allocate or deallocate changes - fp1054
CASE;

// IF CTL.Order Type - Sales is Transfer Order
IF CTL.Order_Type_Sales = 'TR';

//?Dealloc / Realloc if...
CASE;

// IF RCD.Quantity 11.2 USR NE RCD.Quantity Scheduled
IF RCD.Quantity_11_2_USR <> RCD.Quantity_Scheduled;

// OR RCD.Warehouse Code NE RCD.USR Warehouse Code
OR RCD.Warehouse_Code <> RCD.USR_Warehouse_Code;

// OR RCD.Item Age Days NE RCD.Item age days usr
OR RCD.Item_Age_Days <> RCD.Item_age_days_usr;

// OR RCD.Production Ovr AgeDte Fr NE RCD.Prod OvrAge Frm Usr
OR RCD.Production_Ovr_AgeDte_Fr <> RCD.Prod_OvrAge_Frm_Usr;

// OR RCD.Production Ovr AgeDte To NE RCD.Prod OvrAge To Usr
OR RCD.Production_Ovr_AgeDte_To <> RCD.Prod_OvrAge_To_Usr;

// OR RCD.OD Production Plan St USR NE RCD.Plan Production Sts USR
OR RCD.OD_Production_Plan_St_USR <> RCD.Plan_Production_Sts_USR;

//?FP1309 remove age code and add item age days and from/to dates
//?Dealloc
CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

//?If the orig sts was " " = yes, then dealloc
CASE;

// IF RCD.Plan Production Sts USR is Yes
IF RCD.Plan_Production_Sts_USR = 'Y';

//?E4122 JJH 06/11/15 - Use Requested Ship Date for Allocation/Deallocation
// Call program UPD Avail-To-Sell  ORD XF.
CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.USR_Warehouse_Code);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
PARAMETER('OD');
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Item_age_days_usr);
PARAMETER(RCD.Prod_OvrAge_Frm_Usr);
PARAMETER(RCD.Prod_OvrAge_To_Usr);

//?If the orig sts was " " = yes, then dealloc
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Quantity Scheduled = CON.*ZERO
RCD.Quantity_Scheduled = *ZERO;

// RCD.Weight Scheduled = CON.*ZERO
RCD.Weight_Scheduled = *ZERO;

ENDIF;

ENDIF;

//?Alloc if ...
CASE;

// IF RCD.OD Production Plan St USR is Yes
IF RCD.OD_Production_Plan_St_USR = 'Y';

//?E4122 JJH 06/11/15 - Use Requested Ship Date for Allocation/Deallocation
// Call program UPD Avail-To-Sell  ORD XF.
CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.Quantity_11_2_USR);
PARAMETER(RCD.Weight_11_2_USR);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
PARAMETER('OA');
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);

//?Alloc if ...
// IF *OTHERWISE
IF *OTHERWISE;

//?Display Order Quantity & weight on screen.
CASE;

// IF LCL.User Code Model is Production Sched 5
IF LCL.User_Code_Model = 'PORKSCHE5';

// AND RCD.OD Production Plan St USR is No
AND RCD.OD_Production_Plan_St_USR = 'N';

// RCD.Quantity Scheduled = CON.*ZERO
RCD.Quantity_Scheduled = *ZERO;

// RCD.Weight Scheduled = CON.*ZERO
RCD.Weight_Scheduled = *ZERO;

//?Display Order Quantity & weight on screen.
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.OD Production Plan St USR is No
IF RCD.OD_Production_Plan_St_USR = 'N';

// RCD.Quantity Scheduled = RCD.Qty Ordered USR
RCD.Quantity_Scheduled = RCD.Qty_Ordered_USR;

// RCD.Weight Scheduled = RCD.Weight Ordered
RCD.Weight_Scheduled = RCD.Weight_Ordered;

ENDIF;

ENDIF;

ENDIF;

//?Dealloc / Realloc if...
// IF *OTHERWISE
IF *OTHERWISE;

//?Display Order Quantity & weight on screen.
CASE;

// IF LCL.User Code Model is Production Sched 5
IF LCL.User_Code_Model = 'PORKSCHE5';

// AND RCD.OD Production Plan St USR is No
AND RCD.OD_Production_Plan_St_USR = 'N';

// Call program EXC Qty/Wgt Sched TOT RT.
CALL PROGRAM(EXC Qty/Wgt Sched TOT RT) ('PVBZXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);

//?Display Order Quantity & weight on screen.
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.OD Production Plan St USR is No
IF RCD.OD_Production_Plan_St_USR = 'N';

// RCD.Quantity Scheduled = RCD.Qty Ordered USR
RCD.Quantity_Scheduled = RCD.Qty_Ordered_USR;

// RCD.Weight Scheduled = RCD.Weight Ordered
RCD.Weight_Scheduled = RCD.Weight_Ordered;

ENDIF;

ENDIF;

//?   no further action; quantity ordered = quantity allocated
ENDIF;

ENDIF;

//?REGULAR order : Allocate or deallocate changes - fp1054
CASE;

// IF CTL.Order Type - Sales is Regular Order
IF CTL.Order_Type_Sales = 'OR';

//?Dealloc if orig plan prod sts was Yes and new one is NO
CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

//?If the orig sts was " " = yes and new sts is NO, then dealloc
CASE;

// IF RCD.Plan Production Sts USR is Yes
IF RCD.Plan_Production_Sts_USR = 'Y';

// AND RCD.OD Production Plan St USR is No
AND RCD.OD_Production_Plan_St_USR = 'N';

//?E4122 JJH 06/11/15 - Use Requested Ship Date for Allocation/Deallocation
// Call program UPD Avail-To-Sell  ORD XF.
CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.USR_Warehouse_Code);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
PARAMETER('OD');
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);

ENDIF;

ENDIF;

//?Display Order Quantity & weight on screen.
CASE;

// IF LCL.User Code Model is Production Sched 5
IF LCL.User_Code_Model = 'PORKSCHE5';

// AND RCD.OD Production Plan St USR is No
AND RCD.OD_Production_Plan_St_USR = 'N';

// Call program EXC Qty/Wgt Sched TOT RT.
CALL PROGRAM(EXC Qty/Wgt Sched TOT RT) ('PVBZXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);

//?Display Order Quantity & weight on screen.
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.OD Production Plan St USR is No
IF RCD.OD_Production_Plan_St_USR = 'N';

// RCD.Quantity Scheduled = RCD.Qty Ordered USR
RCD.Quantity_Scheduled = RCD.Qty_Ordered_USR;

// RCD.Weight Scheduled = RCD.Weight Ordered
RCD.Weight_Scheduled = RCD.Weight_Ordered;

ENDIF;

ENDIF;

//?Allocate or deallocate changes - fp1054 for changes, deallc all orig ord
CASE;

// IF RCD.Quantity 11.2 USR NE RCD.Quantity Scheduled
IF ( RCD.Quantity_11_2_USR <> RCD.Quantity_Scheduled;

// OR RCD.Warehouse Code NE RCD.USR Warehouse Code
OR RCD.Warehouse_Code <> RCD.USR_Warehouse_Code;

// OR RCD.OD Production Plan St USR NE RCD.Plan Production Sts USR
OR RCD.OD_Production_Plan_St_USR <> RCD.Plan_Production_Sts_USR;

// OR RCD.Item Age Days NE RCD.Item age days usr
OR RCD.Item_Age_Days <> RCD.Item_age_days_usr;

// OR RCD.Production Ovr AgeDte Fr NE RCD.Prod OvrAge Frm Usr
OR RCD.Production_Ovr_AgeDte_Fr <> RCD.Prod_OvrAge_Frm_Usr;

// OR RCD.Production Ovr AgeDte To NE RCD.Prod OvrAge To Usr
OR RCD.Production_Ovr_AgeDte_To <> RCD.Prod_OvrAge_To_Usr );

// AND RCD.OD Production Plan St USR is Yes
AND RCD.OD_Production_Plan_St_USR = 'Y';

//?FP1309 remove age code and add item age days and from/to dates
//?Dealloc
CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

//?If the orig sts was " " = yes, then dealloc
CASE;

// IF RCD.Plan Production Sts USR is Yes
IF RCD.Plan_Production_Sts_USR = 'Y';

//?E4122 JJH 06/11/15 - Use Requested Ship Date for Allocation/Deallocation
// Call program UPD Avail-To-Sell  ORD XF.
CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.USR_Warehouse_Code);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
PARAMETER('OD');
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);

//?If the orig sts was " " = yes, then dealloc
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Quantity Scheduled = CON.*ZERO
RCD.Quantity_Scheduled = *ZERO;

// RCD.Weight Scheduled = CON.*ZERO
RCD.Weight_Scheduled = *ZERO;

ENDIF;

ENDIF;

//?E4122 JJH 06/11/15 - Use Requested Ship Date for Allocation/Deallocation
// Call program UPD Avail-To-Sell  ORD XF.
CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.Quantity_11_2_USR);
PARAMETER(RCD.Weight_11_2_USR);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
PARAMETER('OA');
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);

//?Allocate or deallocate changes - fp1054 for changes, deallc all orig ord
// IF *OTHERWISE
IF *OTHERWISE;

//?   no further action; quantity ordered = quantity allocated
ENDIF;

ENDIF;

//?02/21/2018 DN R11918-Throw Err Msg if QtySched < QtyOrd for Suspended Item
CASE;

// IF NOT RCD.*SFLSEL is *Delete#1
IF ! RCD.*SFLSEL = '4';

// AND RCD.OD Production Plan St USR is Yes
AND RCD.OD_Production_Plan_St_USR = 'Y';

CASE;

// IF LCL.Allocation Method is Suspended-Inventory Only
IF LCL.Allocation_Method = 'I';

CASE;

// IF RCD.Quantity Scheduled LT RCD.Quantity 11.2 USR
IF RCD.Quantity_Scheduled < RCD.Quantity_11_2_USR;

// Send error message - 'Inventory not available for Suspended Item &1.'
ERROR(USR5061);
MSGPARM(RCD.Item_Code);

QUIT;

// IF *OTHERWISE
IF *OTHERWISE;

// Send information message - 'Item &1 is Suspended for Inventory Only.'
MESSAGE(USR5060 *INFO);
MSGPARM(RCD.Item_Code);

ENDIF;

ENDIF;

ENDIF;

//?FP1054 moved to here so the a/r cr check has an order value total
// RCD.Extended Amount = RCD.Quantity Ordered * RCD.Unit Price Ordered U/M *Rounded
RCD.Extended_Amount = RCD.Quantity_Ordered * RCD.Unit_Price_Ordered_U_M 'H';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDDO;

ENDIF;

//?CALC: Subfile record function fields

CASE;

// IF PAR.Billing Activity Type is Warehouse Transfer
IF PAR.Billing_Activity_Type = '4';

// RCD.Price Status = CND.Priced
RCD.Price_Status = 'P';

ENDIF;

//?USER: Validate subfile record relations

//?If EDI & DSysco or Sysco, see if item exists on EDI PO   E004140
CASE;

// IF PAR.Customer Purchase Order # is NE Blank
IF PAR.Customer_Purchase_Order_# <> *BLANK;

CASE;

// IF RCD.Item Code is Entered
IF RCD.Item_Code <> *ZERO;

CASE;

// IF RCD.Detail Line Status is Not cancelled
IF RCD.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

// PAR.Display Flag = CND.No
PAR.Display_Flag = 'N';

// Call program Rtv Trade Prtnr Info  XF.
CALL PROGRAM(Rtv Trade Prtnr Info  XF) ('PBRYXFR');
PARAMETER(LCL.ST02_TRANS_SET_CONTROL_NU);
PARAMETER(PAR.Customer_Purchase_Order_#);
PARAMETER(LCL.EDI_Trading_Partner_No);

CASE;

// IF LCL.EDI Trading Partner No. is SYSCO Dailys
IF LCL.EDI_Trading_Partner_No = 'DSYSCO';

// OR LCL.EDI Trading Partner No. is SYSCO Foods
OR LCL.EDI_Trading_Partner_No = 'SYSCO';

//?Convert Seaboards 7.0 item to EDI 14 char product id
//?Then remove leading zeros
// LCL.Item Code Txt = CVTVAR(RCD.Item Code)
LCL.Item_Code_Txt = CVTVAR(RCD.Item_Code);

// WRK.USR Hold Description = LCL.Item Code Txt
WRK.USR_Hold_Description = LCL.Item_Code_Txt;

// Execute function CLC Remove LeadZeros 30US.
EXECUTE FUNCTION(CLC Remove LeadZeros 30US) TYPE(EXCUSRSRC) ('OMNHUFR');
PARAMETER(WRK.USR_Hold_Description);
PARAMETER(WRK.USR_Description);
{
 E                    AR1        30  1               ARRAY 1
 E                    AR2        30  1               ARRAY 2
 C                     MOVEAWUCUNA    AR1              LOAD ARRAY
 C                     Z-ADD1         X       20       SET COUNTER
 C                     Z-ADD1         Y       20       SET COUNTER
 C                     MOVE 'N'       STOP    1        FLAG
 C           X         DOWLT31
 C           AR1,X     IFEQ '0'
 C           STOP      ANDEQ'N'
 C                     ADD  1         X
 C                     ELSE
 C                     MOVE AR1,X     AR2,Y
 C                     ADD  1         Y
 C                     ADD  1         X
 C                     MOVE 'Y'       STOP
 C                     END
 C                     END
 C                     MOVEAAR2       WUJNNA           LOAD OUTPUT
}


// LCL.G6806/P109 PRODUCT ID = WRK.USR Description
LCL.G6806_P109_PRODUCT_ID = WRK.USR_Description;

//?See if item exists on EDI PO Detail (we don't care about GTIN here)
// Call program RTV GTIN for SBD Prod XF.
CALL PROGRAM(RTV GTIN for SBD Prod XF) ('PBRZXFR');
PARAMETER(LCL.ST02_TRANS_SET_CONTROL_NU);
PARAMETER(LCL.G6804_P107_UPC_GTIN_CODE);
PARAMETER(LCL.G6806_P109_PRODUCT_ID);
PARAMETER(LCL.Return_Code_Usr);

CASE;

// IF LCL.Return Code Usr is *Record does not exist
IF LCL.Return_Code_Usr = 'Y2U0005';

// CTL.Description Usr - 50 = CONCAT(CON.Order contains items that,CON.are not in EDI PO Detail,CON.
CTL.Description_Usr_50 = 'Order contains items that' + 'are not in EDI PO Detail' (1);

// PAR.Display Flag = CND.Yes
PAR.Display_Flag = 'Y';

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Description Usr - 50 = CON.*BLANK
CTL.Description_Usr_50 = *BLANK;

// PAR.Display Flag = CND.No
PAR.Display_Flag = 'N';

ENDIF;

ENDIF;

ENDIF;

//?2=EDIT the Item Age information
CASE;

// IF RCD.*SFLSEL is *Change
IF RCD.*SFLSEL = '2';

// Call program Edt Age Information   E1.
CALL PROGRAM(Edt Age Information   E1) ('PNO3E1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER('N');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?8=Comments
CASE;

// IF RCD.*SFLSEL is *Comments
IF RCD.*SFLSEL = '8'/'8';

// Call program EDT Detail Comments    EF.
CALL PROGRAM(EDT Detail Comments    EF) ('PDDWEFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Ship_To_Name);
PARAMETER(RCD.Requested_Ship_Date);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?7=Edit Pricing Details
CASE;

// IF RCD.*SFLSEL is Option 7
IF RCD.*SFLSEL = '7'/'7';

// Call program Edt OrdDtl Pricing    ER.
CALL PROGRAM(Edt OrdDtl Pricing    ER) ('PNQBE1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?9=Edit Deduction/Addition
CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

// Call program Edt Ord Dtl Accr      EF.
CALL PROGRAM(Edt Ord Dtl Accr      EF) ('PNL9EFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(CTL.Ship_To_City);
PARAMETER(CTL.Ship_To_State_Code);
PARAMETER(LCL.Shipping_Method);
PARAMETER(PAR.Billing_Activity_Type);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

CASE;

// IF RCD.OD Production Plan St USR is Yes
IF RCD.OD_Production_Plan_St_USR = 'Y';

// RCD.OD Production Plan Sts = CND.Yes
RCD.OD_Production_Plan_Sts = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.OD Production Plan Sts = CND.No
RCD.OD_Production_Plan_Sts = 'N';

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt PD Order Detail    IF) TYPE(EXCINTFUN) FILE(OPBGWKP)       AC1981662;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(RCD.Order_Group_Code);
PARAMETER(RCD.Detail_Line_Status);
PARAMETER(WRK.BLANK);
PARAMETER(RCD.Billing_Detail_Cost_Dol);
PARAMETER(RCD.Billing_Detail_Gross_Dol);
PARAMETER(RCD.Billing_Detail_Net_Dol);
PARAMETER(RCD.Quantity_to_Substitute);
PARAMETER(PAR.Comment_Print_Acknowledge);
PARAMETER(PAR.Comment_Print_Inv_Cr_Memo);
PARAMETER(PAR.Comment_Print_Pick_Slip);
PARAMETER(PAR.Comment_Print_Ship_Doc);
PARAMETER(RCD.Extended_Amount);
PARAMETER(RCD.Market_Pricing_Date);
PARAMETER(RCD.Commodity_Market_Code);
PARAMETER(RCD.Date_Method_Code);
PARAMETER(RCD.Price_Method_Code);
PARAMETER(RCD.Price_Overage_Override);
PARAMETER(RCD.Contract_Number);
PARAMETER(RCD.Price_Status);
PARAMETER(RCD.Pricing_Date_Used);
PARAMETER(RCD.U_M_Base_Price);
PARAMETER(RCD.U_M_Ordered);
PARAMETER(RCD.Work_Confirm_Status);
PARAMETER(RCD.Work_Over_Short_Status);
PARAMETER(RCD.OD_Production_Plan_Sts);
PARAMETER(RCD.Order_Desc_Line_One);
PARAMETER(RCD.Order_Desc_Line_Two);
PARAMETER(RCD.Age_Code);
PARAMETER(RCD.Palletize);
PARAMETER(RCD.Slip_Sheet);
PARAMETER(RCD.Catch_Weight_Status);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(RCD.Production_Date_Control);
PARAMETER(RCD.Rated_Freight);
PARAMETER(RCD.Quantity_Ordered);
PARAMETER(RCD.Weight_Ordered);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
PARAMETER(RCD.Quantity_Shipped_Total);
PARAMETER(RCD.Weight_Shipped_Total);
PARAMETER(RCD.Unit_Cost_Pricing_U_M);
PARAMETER(RCD.Unit_Cost_Per_Pound);
PARAMETER(RCD.Unit_Price);
PARAMETER(RCD.Unit_Price_Credit);
PARAMETER(RCD.Unit_Price_Ordered_U_M);
PARAMETER(RCD.Unit_Weight_Ordered_U_M);
PARAMETER(RCD.Tare_Weight_Total);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Affect_Inventory_Status);
PARAMETER(RCD.Affect_Sales_Doll_Status);
PARAMETER(RCD.Affect_Sales_Pnds_Status);
PARAMETER(RCD.Item_Structure_Type_Code);
PARAMETER(RCD.Item_Structure_Group_Code);
PARAMETER(RCD.Item_Structure_Class_Code);
PARAMETER(RCD.Item_Level);
PARAMETER(RCD.Quality_Level);
PARAMETER(RCD.Pricing_Product_Class_Rep);
PARAMETER(RCD.Season_Product_Class_Repo);
PARAMETER(RCD.Date_of_Original_Entry);
PARAMETER(JOB.*USER);
PARAMETER(RCD.Country_Code);
PARAMETER('01');
PARAMETER(RCD.Reason_Code);
PARAMETER(RCD.Sales_Route_Code);
PARAMETER(RCD.Modified_Flag);
PARAMETER(RCD.Substituted_Flag);
PARAMETER(RCD.OD_Schedule_Override_Sts);
PARAMETER(RCD.Invoice_Unit_Price);
PARAMETER(RCD.Invoice_Extended_Amt);
PARAMETER(RCD.Ham_Group_Number);
PARAMETER(RCD.OD_Adj_Type_Override);
PARAMETER(RCD.Affect_Trade_Fund);
PARAMETER(RCD.Affect_Commission);
PARAMETER(RCD.Affect_Pricing);
PARAMETER(RCD.Released_by_User_Sts_Y_N);
PARAMETER(RCD.Ord_TF_Exempt_Code);
PARAMETER(RCD.Pallet_Type_NOREF);
PARAMETER(RCD.Production_Warehouse);
PARAMETER(RCD.OD_Price_Type);
PARAMETER(RCD.Warehouse_Pallets_Loaded);
PARAMETER(RCD.Consumed_Item_Code);
PARAMETER(RCD.Deadline_Depart_Date_LH);
PARAMETER(RCD.OD_Price_Type_Ref_Num);
PARAMETER(RCD.OD_Firm_Date);
PARAMETER(RCD.Deadline_Depart_Time_LH);
PARAMETER(RCD.Price_Code);
PARAMETER(RCD.Maximum_Net_Weight);
PARAMETER(RCD.Substitution_Line_Number);
PARAMETER(RCD.Max_Qty_to_sched_per_day);
PARAMETER(RCD.Warehouse_Pallet_Tare);
PARAMETER(RCD.Warehouse_Avg_Pallet_Tare);
PARAMETER(RCD.OD_Item_Target_Price);
PARAMETER(RCD.OD_Estimated_Gross_Weight);
PARAMETER(RCD.OD_Maximum_Unit_Weight);
PARAMETER(RCD.Order_Gate_Final_Price);
PARAMETER(RCD.OD_Ceiling_Price);
PARAMETER(RCD.OD_Gate_Final_Price_Adj);
PARAMETER(RCD.OD_Weighted_Avg_Price);
PARAMETER(RCD.OD_Original_Ordered_Qty);
PARAMETER(RCD.OD_Cancel_Date);
PARAMETER(RCD.OD_Unused_Prc_7);
PARAMETER(RCD.OD_Unused_Prc_8);
PARAMETER(RCD.OD_MPR_Sent_to_USDA_Sts);
PARAMETER(RCD.OD_MPR_Prc_Ready_to_Send);
PARAMETER(RCD.OD_UnUsed_Price_Sts_3);
PARAMETER(RCD.Weight_Amount_Entered);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);
PARAMETER(RCD.OD_Spot_Buy);
PARAMETER(RCD.OD_Clm_Full_Return_to_Plt);
PARAMETER(RCD.Order_Line_Error_Type);
PARAMETER(RCD.OD_Market_Begin_Date);
PARAMETER(RCD.OD_Market_Ending_Date);
PARAMETER(RCD.OD_Atch_to_Ord_ActShpDte);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Job_Time);
PARAMETER(RCD.User_Id);
PARAMETER(RCD.Job_Name);
PARAMETER(RCD.Job_Date);
{
 //?Execute internal function

 EXECUTE FUNCTION(CRT PD Order Detail    CR) TYPE(CRTOBJ) FILE(OPBGWKP)          AC1425283;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Order_Group_Code);
 PARAMETER(PAR.Detail_Line_Status);
 PARAMETER(PAR.Detail_Line_Status_Last);
 PARAMETER(PAR.Billing_Detail_Cost_Dol);
 PARAMETER(PAR.Billing_Detail_Gross_Dol);
 PARAMETER(PAR.Billing_Detail_Net_Dol);
 PARAMETER(PAR.Quantity_to_Substitute);
 PARAMETER(PAR.Comment_Print_Acknowledge);
 PARAMETER(PAR.Comment_Print_Inv_Cr_Memo);
 PARAMETER(PAR.Comment_Print_Pick_Slip);
 PARAMETER(PAR.Comment_Print_Ship_Doc);
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.Market_Pricing_Date);
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(PAR.Date_Method_Code);
 PARAMETER(PAR.Price_Method_Code);
 PARAMETER(PAR.Price_Overage_Override);
 PARAMETER(PAR.Contract_Number);
 PARAMETER(PAR.Price_Status);
 PARAMETER(PAR.Pricing_Date_Used);
 PARAMETER(PAR.U_M_Base_Price);
 PARAMETER(PAR.U_M_Ordered);
 PARAMETER(PAR.Work_Confirm_Status);
 PARAMETER(PAR.Work_Over_Short_Status);
 PARAMETER(PAR.OD_Production_Plan_Sts);
 PARAMETER(PAR.Order_Desc_Line_One);
 PARAMETER(PAR.Order_Desc_Line_Two);
 PARAMETER(PAR.Age_Code);
 PARAMETER(PAR.Palletize);
 PARAMETER(PAR.Slip_Sheet);
 PARAMETER(PAR.Catch_Weight_Status);
 PARAMETER(PAR.Price_Audit);
 PARAMETER(PAR.Price_Audit_Reason_Code);
 PARAMETER(PAR.Production_Date_Control);
 PARAMETER(PAR.Rated_Freight);
 PARAMETER(PAR.Quantity_Ordered);
 PARAMETER(PAR.Weight_Ordered);
 PARAMETER(PAR.Quantity_Scheduled);
 PARAMETER(PAR.Weight_Scheduled);
 PARAMETER(PAR.Quantity_Shipped_Total);
 PARAMETER(PAR.Weight_Shipped_Total);
 PARAMETER(PAR.Unit_Cost_Pricing_U_M);
 PARAMETER(PAR.Unit_Cost_Per_Pound);
 PARAMETER(PAR.Unit_Price);
 PARAMETER(PAR.Unit_Price_Credit);
 PARAMETER(PAR.Unit_Price_Ordered_U_M);
 PARAMETER(PAR.Unit_Weight_Ordered_U_M);
 PARAMETER(PAR.Tare_Weight_Total);
 PARAMETER(PAR.Requested_Ship_Date);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER(PAR.Affect_Inventory_Status);
 PARAMETER(PAR.Affect_Sales_Doll_Status);
 PARAMETER(PAR.Affect_Sales_Pnds_Status);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Level);
 PARAMETER(PAR.Quality_Level);
 PARAMETER(PAR.Pricing_Product_Class_Rep);
 PARAMETER(PAR.Season_Product_Class_Repo);
 PARAMETER(PAR.Date_of_Original_Entry);
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Country_Code);
 PARAMETER(PAR.Event_Code);
 PARAMETER(PAR.Reason_Code);
 PARAMETER(PAR.Sales_Route_Code);
 PARAMETER(PAR.Modified_Flag);
 PARAMETER(PAR.Substituted_Flag);
 PARAMETER(PAR.OD_Schedule_Override_Sts);
 PARAMETER(PAR.Invoice_Unit_Price);
 PARAMETER(PAR.Invoice_Extended_Amt);
 PARAMETER(PAR.Ham_Group_Number);
 PARAMETER(PAR.OD_Adj_Type_Override);
 PARAMETER(PAR.Affect_Trade_Fund);
 PARAMETER(PAR.Affect_Commission);
 PARAMETER(PAR.Affect_Pricing);
 PARAMETER(PAR.Released_by_User_Sts_Y_N);
 PARAMETER(PAR.Ord_TF_Exempt_Code);
 PARAMETER(PAR.OD_Pallet_Type);
 PARAMETER(PAR.Production_Warehouse);
 PARAMETER(PAR.OD_Price_Type);
 PARAMETER(PAR.Warehouse_Pallets_Loaded);
 PARAMETER(PAR.Consumed_Item_Code);
 PARAMETER(PAR.Deadline_Depart_Date_LH);
 PARAMETER(PAR.OD_Price_Type_Ref_Num);
 PARAMETER(PAR.OD_Firm_Date);
 PARAMETER(PAR.Deadline_Depart_Time_LH);
 PARAMETER(PAR.Price_Code);
 PARAMETER(PAR.Maximum_Net_Weight);
 PARAMETER(PAR.Substitution_Line_Number);
 PARAMETER(PAR.Max_Qty_to_sched_per_day);
 PARAMETER(PAR.Warehouse_Pallet_Tare);
 PARAMETER(PAR.Warehouse_Avg_Pallet_Tare);
 PARAMETER(PAR.OD_Item_Target_Price);
 PARAMETER(PAR.OD_Estimated_Gross_Weight);
 PARAMETER(PAR.OD_Maximum_Unit_Weight);
 PARAMETER(PAR.Order_Gate_Final_Price);
 PARAMETER(PAR.OD_Ceiling_Price);
 PARAMETER(PAR.OD_Gate_Final_Price_Adj);
 PARAMETER(PAR.OD_Weighted_Avg_Price);
 PARAMETER(PAR.OD_Original_Ordered_Qty);
 PARAMETER(PAR.OD_Cancel_Date);
 PARAMETER(PAR.OD_Unused_Prc_7);
 PARAMETER(PAR.OD_Unused_Prc_8);
 PARAMETER(PAR.OD_MPR_Sent_to_USDA_Sts);
 PARAMETER(PAR.OD_MPR_Prc_Ready_to_Send);
 PARAMETER(PAR.OD_UnUsed_Price_Sts_3);
 PARAMETER(PAR.Weight_Amount_Entered);
 PARAMETER(PAR.Item_Age_Days);
 PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
 PARAMETER(PAR.Production_Ovr_AgeDte_To);
 PARAMETER(PAR.OD_Spot_Buy);
 PARAMETER(PAR.OD_Clm_Full_Return_to_Plt);
 PARAMETER(PAR.Order_Line_Error_Type);
 PARAMETER(PAR.OD_Market_Begin_Date);
 PARAMETER(PAR.OD_Market_Ending_Date);
 PARAMETER(PAR.OD_Atch_to_Ord_ActShpDte);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 {
  //?USER: Processing before Data update

  // DB1.Age Code = CND.Blank
  DB1.Age_Code = *BLANK;

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program Rtv First Consumed Itm XF.
  CALL PROGRAM(Rtv First Consumed Itm XF) ('POP1XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Consumed_Item_Code);

  EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Warehouse);
  PARAMETER(NLL.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Calc Gross Weight from tares...    copied from Dsp Gross Wgt function
  DO;

  // Call program Rtv Tare Weight        XF.
  CALL PROGRAM(Rtv Tare Weight        XF) ('PBI3XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Misc_Tare_Weight);

  //?wi464
  // Call program RTV Itm BxID & Tares  XF.
  CALL PROGRAM(RTV Itm BxID & Tares  XF) ('PBI4XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Box_Weight);
  PARAMETER(LCL.Number_Cases_On_A_Pallet);
  PARAMETER(LCL.Pallet_Tare_Weight);
  PARAMETER(LCL.Box_iD);
  PARAMETER(DB1.OD_Pallet_Type);

  // LCL.Total Tare USR = LCL.Box Weight + LCL.Misc Tare Weight
  LCL.Total_Tare_USR = LCL.Box_Weight + LCL.Misc_Tare_Weight;

  // Box + Misc Tare
  LCL.Weight_1_1_U = ( LCL.Box_Weight + LCL.Misc_Tare_Weight ) * DB1.Quantity_Ordered 'H';

  //?Pallet Tare
  CASE;

  // IF DB1.Palletize is yes
  IF DB1.Palletize = 'Y';

  CASE;

  // IF LCL.Number Cases On A Pallet is GT Zero
  IF LCL.Number_Cases_On_A_Pallet > *ZERO;

  // Pallet Weight
  LCL.Weight_1_2_U = ( DB1.Quantity_Ordered / LCL.Number_Cases_On_A_Pallet 'H' )
  * LCL.Pallet_Tare_Weight 'H';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Weight 1.2             .U = CON.*ZERO
  LCL.Weight_1_2_U = *ZERO;

  ENDIF;

  //?Pallet Tare
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Weight 1.2             .U = CON.*ZERO
  LCL.Weight_1_2_U = *ZERO;

  ENDIF;

  // Estimated Gross
  DB1.OD_Estimated_Gross_Weight = ( DB1.Weight_Ordered + LCL.Weight_1_1_U )
  + LCL.Weight_1_2_U;

  //?E00196 RMC 8/24/12 chk pfs interface SHPTRN too
  ENDDO;

  //?USER: Processing after Data update

  //?WI642   JM-02/19/25-Add load order change log on new items.
  //?WI642   JM-02/19/25-Crt chg log if dtl has been sent to MPR USDA
  CASE;

  // IF DB1.OD MPR Prc Ready to Send is yes
  IF DB1.OD_MPR_Prc_Ready_to_Send = 'Y';

  //?Always create price type log ORDPRT
  // LCL.Text 3 Length USR = DB1.Order Sequence Number
  LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

  // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,CND.Not Entered,CON.1)
  LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + *BLANK (1);

  // LCL.Change Log New Value = PAR.OD Price Type
  LCL.Change_Log_New_Value = PAR.OD_Price_Type;

  // Call program CRT Load/OrderChg n/ld XF.
  CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
  PARAMETER(*ZERO);
  PARAMETER('ORDPRT');
  PARAMETER('SLS');
  PARAMETER(LCL.Change_Log_Prior_Value);
  PARAMETER(LCL.Change_Log_New_Value);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);

  ENDIF;

  //?WI642   JM-02/19/25-If not the transfer order nbr 9999999->crt chg logs
  CASE;

  // IF DB1.Order Number is ne 9999999
  IF DB1.Order_Number <> 9999999;

  // LCL.Text 3 Length USR = DB1.Order Sequence Number
  LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

  // LCL.Weight Beg Inv usr = CND.Not Entered
  LCL.Weight_Beg_Inv_usr = *ZERO;

  // LCL.Text USR 7 = LCL.Weight Beg Inv usr
  LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

  // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
  LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

  // LCL.Weight Beg Inv usr = PAR.Weight Ordered
  LCL.Weight_Beg_Inv_usr = PAR.Weight_Ordered;

  // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
  LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

  // Call program CRT Load/OrderChg n/ld XF.
  CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
  PARAMETER(*ZERO);
  PARAMETER('ORDWGT');
  PARAMETER('SLS');
  PARAMETER(LCL.Change_Log_Prior_Value);
  PARAMETER(LCL.Change_Log_New_Value);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);

  // LCL.Weight Beg Inv usr = CND.Not Entered
  LCL.Weight_Beg_Inv_usr = *ZERO;

  // LCL.Text USR 7 = LCL.Weight Beg Inv usr
  LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

  // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
  LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

  // LCL.Weight Beg Inv usr = PAR.Quantity Ordered
  LCL.Weight_Beg_Inv_usr = PAR.Quantity_Ordered;

  // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
  LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

  // Call program CRT Load/OrderChg n/ld XF.
  CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
  PARAMETER(*ZERO);
  PARAMETER('ORDQTY');
  PARAMETER('SLS');
  PARAMETER(LCL.Change_Log_Prior_Value);
  PARAMETER(LCL.Change_Log_New_Value);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);

  ENDIF;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG PD Order Detail    IF) TYPE(EXCINTFUN) FILE(OPBGWKP)       AC1981671;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(CTL.Credit_Hold);
PARAMETER(CTL.Production_Hold);
PARAMETER(CTL.Header_Status);
PARAMETER(CTL.Order_Type_Sales);
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Export_Status);
PARAMETER(CTL.Ship_To_City);
PARAMETER(CTL.Ship_To_State_Code);
PARAMETER(CTL.Requested_Delivery_Date);
PARAMETER(CTL.Requested_Delivery_Time);
PARAMETER(CTL.Order_in_Use);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Order_Group_Code);
PARAMETER(RCD.Detail_Line_Status);
PARAMETER(RCD.Detail_Line_Status_Last);
PARAMETER(RCD.Billing_Detail_Cost_Dol);
PARAMETER(RCD.Billing_Detail_Gross_Dol);
PARAMETER(RCD.Billing_Detail_Net_Dol);
PARAMETER(RCD.Quantity_to_Substitute);
PARAMETER(RCD.Comment_Print_Acknowledge);
PARAMETER(RCD.Comment_Print_Inv_Cr_Memo);
PARAMETER(RCD.Comment_Print_Pick_Slip);
PARAMETER(RCD.Comment_Print_Ship_Doc);
PARAMETER(RCD.Extended_Amount);
PARAMETER(RCD.Market_Pricing_Date);
PARAMETER(RCD.Commodity_Market_Code);
PARAMETER(RCD.Date_Method_Code);
PARAMETER(RCD.Price_Method_Code);
PARAMETER(RCD.Price_Overage_Override);
PARAMETER(RCD.Contract_Number);
PARAMETER(RCD.Price_Status);
PARAMETER(RCD.Pricing_Date_Used);
PARAMETER(RCD.U_M_Base_Price);
PARAMETER(RCD.U_M_Ordered);
PARAMETER(RCD.Work_Confirm_Status);
PARAMETER(RCD.Work_Over_Short_Status);
PARAMETER(RCD.OD_Production_Plan_Sts);
PARAMETER(RCD.Order_Desc_Line_One);
PARAMETER(RCD.Order_Desc_Line_Two);
PARAMETER(RCD.Age_Code);
PARAMETER(RCD.Palletize);
PARAMETER(RCD.Slip_Sheet);
PARAMETER(RCD.Catch_Weight_Status);
PARAMETER(RCD.Price_Audit);
PARAMETER(RCD.Price_Audit_Reason_Code);
PARAMETER(RCD.Production_Date_Control);
PARAMETER(RCD.Rated_Freight);
PARAMETER(RCD.Quantity_Ordered);
PARAMETER(RCD.Weight_Ordered);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
PARAMETER(RCD.Quantity_Shipped_Total);
PARAMETER(RCD.Weight_Shipped_Total);
PARAMETER(RCD.Unit_Cost_Pricing_U_M);
PARAMETER(RCD.Unit_Cost_Per_Pound);
PARAMETER(RCD.Unit_Price);
PARAMETER(RCD.Unit_Price_Credit);
PARAMETER(RCD.Unit_Price_Ordered_U_M);
PARAMETER(RCD.Unit_Weight_Ordered_U_M);
PARAMETER(RCD.Tare_Weight_Total);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Affect_Inventory_Status);
PARAMETER(RCD.Affect_Sales_Doll_Status);
PARAMETER(RCD.Affect_Sales_Pnds_Status);
PARAMETER(RCD.Item_Structure_Type_Code);
PARAMETER(RCD.Item_Structure_Group_Code);
PARAMETER(RCD.Item_Structure_Class_Code);
PARAMETER(RCD.Item_Level);
PARAMETER(RCD.Quality_Level);
PARAMETER(RCD.Pricing_Product_Class_Rep);
PARAMETER(RCD.Season_Product_Class_Repo);
PARAMETER(RCD.Date_of_Original_Entry);
PARAMETER(RCD.User_Profile_Name);
PARAMETER(RCD.Country_Code);
PARAMETER(RCD.Event_Code);
PARAMETER(RCD.Reason_Code);
PARAMETER(RCD.Sales_Route_Code);
PARAMETER(RCD.Modified_Flag);
PARAMETER(RCD.Substituted_Flag);
PARAMETER(RCD.OD_Schedule_Override_Sts);
PARAMETER(RCD.Invoice_Unit_Price);
PARAMETER(RCD.Invoice_Extended_Amt);
PARAMETER(RCD.Ham_Group_Number);
PARAMETER(RCD.OD_Adj_Type_Override);
PARAMETER(RCD.Affect_Trade_Fund);
PARAMETER(RCD.Affect_Commission);
PARAMETER(RCD.Affect_Pricing);
PARAMETER(RCD.Released_by_User_Sts_Y_N);
PARAMETER(RCD.Ord_TF_Exempt_Code);
PARAMETER(RCD.Pallet_Type_NOREF);
PARAMETER(RCD.Production_Warehouse);
PARAMETER(RCD.OD_Price_Type);
PARAMETER(RCD.Warehouse_Pallets_Loaded);
PARAMETER(RCD.Consumed_Item_Code);
PARAMETER(RCD.Deadline_Depart_Date_LH);
PARAMETER(RCD.OD_Price_Type_Ref_Num);
PARAMETER(RCD.OD_Firm_Date);
PARAMETER(RCD.Deadline_Depart_Time_LH);
PARAMETER(RCD.Price_Code);
PARAMETER(RCD.Maximum_Net_Weight);
PARAMETER(RCD.Substitution_Line_Number);
PARAMETER(RCD.Max_Qty_to_sched_per_day);
PARAMETER(RCD.Warehouse_Pallet_Tare);
PARAMETER(RCD.Warehouse_Avg_Pallet_Tare);
PARAMETER(RCD.OD_Item_Target_Price);
PARAMETER(RCD.OD_Estimated_Gross_Weight);
PARAMETER(RCD.OD_Maximum_Unit_Weight);
PARAMETER(RCD.Order_Gate_Final_Price);
PARAMETER(RCD.OD_Ceiling_Price);
PARAMETER(RCD.OD_Gate_Final_Price_Adj);
PARAMETER(RCD.OD_Weighted_Avg_Price);
PARAMETER(RCD.OD_Original_Ordered_Qty);
PARAMETER(RCD.OD_Cancel_Date);
PARAMETER(RCD.OD_Unused_Prc_7);
PARAMETER(RCD.OD_Unused_Prc_8);
PARAMETER(RCD.OD_MPR_Sent_to_USDA_Sts);
PARAMETER(RCD.OD_MPR_Prc_Ready_to_Send);
PARAMETER(RCD.OD_UnUsed_Price_Sts_3);
PARAMETER(RCD.Weight_Amount_Entered);
PARAMETER(RCD.Item_Age_Days);
PARAMETER(RCD.Production_Ovr_AgeDte_Fr);
PARAMETER(RCD.Production_Ovr_AgeDte_To);
PARAMETER(RCD.OD_Spot_Buy);
PARAMETER(RCD.OD_Clm_Full_Return_to_Plt);
PARAMETER(RCD.Order_Line_Error_Type);
PARAMETER(RCD.OD_Market_Begin_Date);
PARAMETER(RCD.OD_Market_Ending_Date);
PARAMETER(RCD.OD_Atch_to_Ord_ActShpDte);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Job_Time);
PARAMETER(RCD.User_Id);
PARAMETER(RCD.Job_Name);
PARAMETER(RCD.Job_Date);
PARAMETER(RCD.Item_age_days_usr);
PARAMETER(RCD.Prod_OvrAge_Frm_Usr);
PARAMETER(RCD.Prod_OvrAge_To_Usr);
{
 //?Execute internal function

 EXECUTE FUNCTION(CHG PD Order Detail    CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1425286;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Order_Group_Code);
 PARAMETER(PAR.Detail_Line_Status);
 PARAMETER(PAR.Detail_Line_Status_Last);
 PARAMETER(PAR.Billing_Detail_Cost_Dol);
 PARAMETER(PAR.Billing_Detail_Gross_Dol);
 PARAMETER(PAR.Billing_Detail_Net_Dol);
 PARAMETER(PAR.Quantity_to_Substitute);
 PARAMETER(PAR.Comment_Print_Acknowledge);
 PARAMETER(PAR.Comment_Print_Inv_Cr_Memo);
 PARAMETER(PAR.Comment_Print_Pick_Slip);
 PARAMETER(PAR.Comment_Print_Ship_Doc);
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.Market_Pricing_Date);
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(PAR.Date_Method_Code);
 PARAMETER(PAR.Price_Method_Code);
 PARAMETER(PAR.Price_Overage_Override);
 PARAMETER(PAR.Contract_Number);
 PARAMETER(PAR.Price_Status);
 PARAMETER(PAR.Pricing_Date_Used);
 PARAMETER(PAR.U_M_Base_Price);
 PARAMETER(PAR.U_M_Ordered);
 PARAMETER(PAR.Work_Confirm_Status);
 PARAMETER(PAR.Work_Over_Short_Status);
 PARAMETER(PAR.OD_Production_Plan_Sts);
 PARAMETER(PAR.Order_Desc_Line_One);
 PARAMETER(PAR.Order_Desc_Line_Two);
 PARAMETER(PAR.Age_Code);
 PARAMETER(PAR.Palletize);
 PARAMETER(PAR.Slip_Sheet);
 PARAMETER(PAR.Catch_Weight_Status);
 PARAMETER(PAR.Price_Audit);
 PARAMETER(PAR.Price_Audit_Reason_Code);
 PARAMETER(PAR.Production_Date_Control);
 PARAMETER(PAR.Rated_Freight);
 PARAMETER(PAR.Quantity_Ordered);
 PARAMETER(PAR.Weight_Ordered);
 PARAMETER(PAR.Quantity_Scheduled);
 PARAMETER(PAR.Weight_Scheduled);
 PARAMETER(PAR.Quantity_Shipped_Total);
 PARAMETER(PAR.Weight_Shipped_Total);
 PARAMETER(PAR.Unit_Cost_Pricing_U_M);
 PARAMETER(PAR.Unit_Cost_Per_Pound);
 PARAMETER(PAR.Unit_Price);
 PARAMETER(PAR.Unit_Price_Credit);
 PARAMETER(PAR.Unit_Price_Ordered_U_M);
 PARAMETER(PAR.Unit_Weight_Ordered_U_M);
 PARAMETER(PAR.Tare_Weight_Total);
 PARAMETER(PAR.Requested_Ship_Date);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER(PAR.Affect_Inventory_Status);
 PARAMETER(PAR.Affect_Sales_Doll_Status);
 PARAMETER(PAR.Affect_Sales_Pnds_Status);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Level);
 PARAMETER(PAR.Quality_Level);
 PARAMETER(PAR.Pricing_Product_Class_Rep);
 PARAMETER(PAR.Season_Product_Class_Repo);
 PARAMETER(PAR.Date_of_Original_Entry);
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Country_Code);
 PARAMETER(PAR.Event_Code);
 PARAMETER(PAR.Reason_Code);
 PARAMETER(PAR.Sales_Route_Code);
 PARAMETER(PAR.Modified_Flag);
 PARAMETER(PAR.Substituted_Flag);
 PARAMETER(PAR.OD_Schedule_Override_Sts);
 PARAMETER(PAR.Invoice_Unit_Price);
 PARAMETER(PAR.Invoice_Extended_Amt);
 PARAMETER(PAR.Ham_Group_Number);
 PARAMETER(PAR.OD_Adj_Type_Override);
 PARAMETER(PAR.Affect_Trade_Fund);
 PARAMETER(PAR.Affect_Commission);
 PARAMETER(PAR.Affect_Pricing);
 PARAMETER(PAR.Released_by_User_Sts_Y_N);
 PARAMETER(PAR.Ord_TF_Exempt_Code);
 PARAMETER(PAR.OD_Pallet_Type);
 PARAMETER(PAR.Production_Warehouse);
 PARAMETER(PAR.OD_Price_Type);
 PARAMETER(PAR.Warehouse_Pallets_Loaded);
 PARAMETER(PAR.Consumed_Item_Code);
 PARAMETER(PAR.Deadline_Depart_Date_LH);
 PARAMETER(PAR.OD_Price_Type_Ref_Num);
 PARAMETER(PAR.OD_Firm_Date);
 PARAMETER(PAR.Deadline_Depart_Time_LH);
 PARAMETER(PAR.Price_Code);
 PARAMETER(PAR.Maximum_Net_Weight);
 PARAMETER(PAR.Substitution_Line_Number);
 PARAMETER(PAR.Max_Qty_to_sched_per_day);
 PARAMETER(PAR.Warehouse_Pallet_Tare);
 PARAMETER(PAR.Warehouse_Avg_Pallet_Tare);
 PARAMETER(PAR.OD_Item_Target_Price);
 PARAMETER(PAR.OD_Estimated_Gross_Weight);
 PARAMETER(PAR.OD_Maximum_Unit_Weight);
 PARAMETER(PAR.Order_Gate_Final_Price);
 PARAMETER(PAR.OD_Ceiling_Price);
 PARAMETER(PAR.OD_Gate_Final_Price_Adj);
 PARAMETER(PAR.OD_Weighted_Avg_Price);
 PARAMETER(PAR.OD_Original_Ordered_Qty);
 PARAMETER(PAR.OD_Cancel_Date);
 PARAMETER(PAR.OD_Unused_Prc_7);
 PARAMETER(PAR.OD_Unused_Prc_8);
 PARAMETER(PAR.OD_MPR_Sent_to_USDA_Sts);
 PARAMETER(PAR.OD_MPR_Prc_Ready_to_Send);
 PARAMETER(PAR.OD_UnUsed_Price_Sts_3);
 PARAMETER(PAR.Weight_Amount_Entered);
 PARAMETER(PAR.Item_Age_Days);
 PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
 PARAMETER(PAR.Production_Ovr_AgeDte_To);
 PARAMETER(PAR.OD_Spot_Buy);
 PARAMETER(PAR.OD_Clm_Full_Return_to_Plt);
 PARAMETER(PAR.Order_Line_Error_Type);
 PARAMETER(PAR.OD_Market_Begin_Date);
 PARAMETER(PAR.OD_Market_Ending_Date);
 PARAMETER(PAR.OD_Atch_to_Ord_ActShpDte);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 {
  //?USER: Processing after Data read

  //?E2247 RMC 10/03/12 Crt chg log if dtl has been sent to MPR USDA
  CASE;

  // IF DB1.OD MPR Sent to USDA Sts is yes
  IF DB1.OD_MPR_Sent_to_USDA_Sts = 'Y';

  //?If price type changes, then create type: ORDPRT
  CASE;

  // IF DB1.OD Price Type NE PAR.OD Price Type
  IF DB1.OD_Price_Type <> PAR.OD_Price_Type;

  //?change log prior has seq in pos 1-3, price type 5-7: '001 NEG     '
  // LCL.Text 3 Length USR = DB1.Order Sequence Number
  LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

  // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,DB1.OD Price Type,CON.1)
  LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + DB1.OD_Price_Type (1);

  // LCL.Change Log New Value = PAR.OD Price Type
  LCL.Change_Log_New_Value = PAR.OD_Price_Type;

  // Call program CRT Load/OrderChg n/ld XF.
  CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
  PARAMETER(*ZERO);
  PARAMETER('ORDPRT');
  PARAMETER('SLS');
  PARAMETER(LCL.Change_Log_Prior_Value);
  PARAMETER(LCL.Change_Log_New_Value);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);

  ENDIF;

  ENDIF;

  //?If not the transfer order nbr 9999999 -> crt chg logs
  CASE;

  // IF DB1.Order Number is ne 9999999
  IF DB1.Order_Number <> 9999999;

  //?If qty changes, then create type: ORDWGT & ORDQTY ->ALWAYS 6/14/13
  CASE;

  // IF DB1.Quantity Ordered NE PAR.Quantity Ordered
  IF DB1.Quantity_Ordered <> PAR.Quantity_Ordered;

  // OR PAR.Detail Line Status is Cancelled
  OR PAR.Detail_Line_Status = 'X';

  //?(do this off of qty, because wgt can change often since unit wgt changes)
  //?change log prior has seq in pos 1-3, weight in 5-11: '001 0000nnn'
  // LCL.Text 3 Length USR = DB1.Order Sequence Number
  LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

  // LCL.Weight Beg Inv usr = DB1.Weight Ordered
  LCL.Weight_Beg_Inv_usr = DB1.Weight_Ordered;

  // LCL.Text USR 7 = LCL.Weight Beg Inv usr
  LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

  // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
  LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

  // LCL.Weight Beg Inv usr = PAR.Weight Ordered
  LCL.Weight_Beg_Inv_usr = PAR.Weight_Ordered;

  //?WI642-For cancelled item line new weight is zero for log only.
  CASE;

  // IF PAR.Detail Line Status is Cancelled
  IF PAR.Detail_Line_Status = 'X';

  // LCL.Weight Beg Inv usr = CND.Not Entered
  LCL.Weight_Beg_Inv_usr = *ZERO;

  ENDIF;

  // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
  LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

  // Call program CRT Load/OrderChg n/ld XF.
  CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
  PARAMETER(*ZERO);
  PARAMETER('ORDWGT');
  PARAMETER('SLS');
  PARAMETER(LCL.Change_Log_Prior_Value);
  PARAMETER(LCL.Change_Log_New_Value);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);

  // LCL.Weight Beg Inv usr = DB1.Quantity Ordered
  LCL.Weight_Beg_Inv_usr = DB1.Quantity_Ordered;

  // LCL.Text USR 7 = LCL.Weight Beg Inv usr
  LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

  // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
  LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

  // LCL.Weight Beg Inv usr = PAR.Quantity Ordered
  LCL.Weight_Beg_Inv_usr = PAR.Quantity_Ordered;

  //?WI642-For cancelled item line new quantity is zero for log only.
  CASE;

  // IF PAR.Detail Line Status is Cancelled
  IF PAR.Detail_Line_Status = 'X';

  // LCL.Weight Beg Inv usr = CND.Not Entered
  LCL.Weight_Beg_Inv_usr = *ZERO;

  ENDIF;

  // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
  LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

  // Call program CRT Load/OrderChg n/ld XF.
  CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
  PARAMETER(*ZERO);
  PARAMETER('ORDQTY');
  PARAMETER('SLS');
  PARAMETER(LCL.Change_Log_Prior_Value);
  PARAMETER(LCL.Change_Log_New_Value);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);

  ENDIF;

  ENDIF;

  //?USER: Processing before Data update

  // DB1.Age Code = CND.Blank
  DB1.Age_Code = *BLANK;

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Warehouse);
  PARAMETER(NLL.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Calc Gross Weight from tares...    copied from Dsp Gross Wgt function
  DO;

  // Call program Rtv Tare Weight        XF.
  CALL PROGRAM(Rtv Tare Weight        XF) ('PBI3XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Misc_Tare_Weight);

  //?wi464 change
  // Call program RTV Itm BxID & Tares  XF.
  CALL PROGRAM(RTV Itm BxID & Tares  XF) ('PBI4XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Box_Weight);
  PARAMETER(LCL.Number_Cases_On_A_Pallet);
  PARAMETER(LCL.Pallet_Tare_Weight);
  PARAMETER(LCL.Box_iD);
  PARAMETER(DB1.OD_Pallet_Type);

  // LCL.Total Tare USR = LCL.Box Weight + LCL.Misc Tare Weight
  LCL.Total_Tare_USR = LCL.Box_Weight + LCL.Misc_Tare_Weight;

  // Box + Misc Tare
  LCL.Weight_1_1_U = ( LCL.Box_Weight + LCL.Misc_Tare_Weight ) * DB1.Quantity_Ordered 'H';

  //?Pallet Tare
  CASE;

  // IF DB1.Palletize is yes
  IF DB1.Palletize = 'Y';

  CASE;

  // IF LCL.Number Cases On A Pallet is GT Zero
  IF LCL.Number_Cases_On_A_Pallet > *ZERO;

  // Pallet Weight
  LCL.Weight_1_2_U = ( DB1.Quantity_Ordered / LCL.Number_Cases_On_A_Pallet 'H' )
  * LCL.Pallet_Tare_Weight 'H';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Weight 1.2             .U = CON.*ZERO
  LCL.Weight_1_2_U = *ZERO;

  ENDIF;

  //?Pallet Tare
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Weight 1.2             .U = CON.*ZERO
  LCL.Weight_1_2_U = *ZERO;

  ENDIF;

  // Estimated Gross
  DB1.OD_Estimated_Gross_Weight = ( DB1.Weight_Ordered + LCL.Weight_1_1_U )
  + LCL.Weight_1_2_U;

  //?E00196 RMC 8/24/12 chk pfs interface SHPTRN too
  ENDDO;

 }

}


//?USER: Extra processing after DBF update

// PAR.USR Update Flag = CND.Yes
PAR.USR_Update_Flag = 'Y';

CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// Call program CNCL Order Detail     XF.
CALL PROGRAM(CNCL Order Detail     XF) ('PNMEXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);

EXECUTE FUNCTION(Rtv & Dlt for Cncl DtlRT) TYPE(RTVOBJ) FILE(PDMSREP)           AC1612172;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Del Exp Doc Order Dtl  DL) TYPE(DLTOBJ) FILE(PDMSREP)          AC1524037;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.ED_Export_Document_Type);
 PARAMETER(DB1.Country_Code);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
}


//?Delete line or change line status
CASE;

// IF RCD.Detail Line Status is Entered
IF RCD.Detail_Line_Status = 'E';

EXECUTE FUNCTION(DLT PD Order Detail    DL) TYPE(DLTOBJ) FILE(OPBGWKP)          AC1204566;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);

//?S14158 RMC 11/29/18 also delete these files:
// Call program Rtv Dlt OD Files/CanclXF.
CALL PROGRAM(Rtv Dlt OD Files/CanclXF) ('PUKGXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);

//?Delete line or change line status
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Detail Line Status Last = RCD.Detail Line Status
RCD.Detail_Line_Status_Last = RCD.Detail_Line_Status;

// RCD.Detail Line Status = CND.Cancelled
RCD.Detail_Line_Status = 'X';

EXECUTE FUNCTION(CHG Sts,Alloc          CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1425289;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Detail_Line_Status);
PARAMETER(RCD.Detail_Line_Status_Last);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
{
 //?USER: Processing before Data update

 //?E2640 Write chg log for cancel line item
 CASE;

 // IF PAR.Detail Line Status is Cancelled
 IF PAR.Detail_Line_Status = 'X';

 // AND PAR.Detail Line Status Last is Not cancelled
 AND PAR.Detail_Line_Status_Last = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 // LCL.Text 3 Length USR = DB1.Order Sequence Number
 LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

 // LCL.Weight Beg Inv usr = DB1.Weight Ordered
 LCL.Weight_Beg_Inv_usr = DB1.Weight_Ordered;

 // LCL.Text USR 7 = LCL.Weight Beg Inv usr
 LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

 // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
 LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

 //?New value is -0- for cancel
 // LCL.Weight Beg Inv usr = CON.*ZERO
 LCL.Weight_Beg_Inv_usr = 0;

 // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
 LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

 // Call program CRT Load/OrderChg n/ld XF.
 CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
 PARAMETER(*ZERO);
 PARAMETER('ORDWGT');
 PARAMETER('SLS');
 PARAMETER(LCL.Change_Log_Prior_Value);
 PARAMETER(LCL.Change_Log_New_Value);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);

 // LCL.Weight Beg Inv usr = DB1.Quantity Ordered
 LCL.Weight_Beg_Inv_usr = DB1.Quantity_Ordered;

 // LCL.Text USR 7 = LCL.Weight Beg Inv usr
 LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

 // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
 LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

 //?New value is -0- for cancel
 // LCL.Weight Beg Inv usr = CON.*ZERO
 LCL.Weight_Beg_Inv_usr = 0;

 // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
 LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

 // Call program CRT Load/OrderChg n/ld XF.
 CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
 PARAMETER(*ZERO);
 PARAMETER('ORDQTY');
 PARAMETER('SLS');
 PARAMETER(LCL.Change_Log_Prior_Value);
 PARAMETER(LCL.Change_Log_New_Value);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);

 ENDIF;

}


EXECUTE FUNCTION(Rtv & Dlt for Cncl DtlRT) TYPE(RTVOBJ) FILE(PDMSREP)           AC1612172;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Del Exp Doc Order Dtl  DL) TYPE(DLTOBJ) FILE(PDMSREP)          AC1524037;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.ED_Export_Document_Type);
 PARAMETER(DB1.Country_Code);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
}


CASE;

// IF RCD.Substituted Flag is Substitutions Exist
IF RCD.Substituted_Flag = 'Y';

// WRK.Order Secondary Line Seq = RCD.Order Secondary Line Seq + CON.1
WRK.Order_Secondary_Line_Seq = RCD.Order_Secondary_Line_Seq + 1;

EXECUTE FUNCTION(DEL Substitutions/Line RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1441883;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(WRK.Order_Secondary_Line_Seq);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(CHG Delete Detail Line RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1426408;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER('A');
 PARAMETER(WRK.USR_Order_Value);
 PARAMETER(WRK.USR_Order_Weight);
 PARAMETER(DB1.Scheduled_Ship_Date);
 {
  //?USER: Initialize routine

  //?***** PA PROCESS - USE REQUESTED SHIP DATE FOR Ship Date USR *****
  // WRK.USR Quantity = CON.*ZERO
  WRK.USR_Quantity = *ZERO;

  //?USER: Process Data record

  //?Set control for inventory update
  // WRK.USR Status (Y/N) = CND.yes
  WRK.USR_Status_Y_N = 'Y';

  //?If negative quantity then no inventory update required
  CASE;

  // IF DB1.Quantity Ordered is Less than zero
  IF DB1.Quantity_Ordered < *ZERO;

  // WRK.USR Status (Y/N) = CND.no
  WRK.USR_Status_Y_N = 'N';

  ENDIF;

  //?Bypass if affect inventory is no
  CASE;

  // IF DB1.Affect Inventory Status is no
  IF DB1.Affect_Inventory_Status = 'N';

  // WRK.USR Status (Y/N) = CND.no
  WRK.USR_Status_Y_N = 'N';

  ENDIF;

  //?Bypass if entered status
  CASE;

  // IF DB1.Detail Line Status is Entered
  IF DB1.Detail_Line_Status = 'E';

  // WRK.USR Status (Y/N) = CND.no
  WRK.USR_Status_Y_N = 'N';

  ENDIF;

  //?Determine quantity open on this line
  DO;

  CASE;

  // IF DB1.Detail Line Status is Cancel Status Types
  IF DB1.Detail_Line_Status = 'L'/'A'/'E'/'H';

  //?If entered status force control value to N
  CASE;

  // IF DB1.Detail Line Status is Entered
  IF DB1.Detail_Line_Status = 'E';

  // WRK.USR Status (Y/N) = CND.no
  WRK.USR_Status_Y_N = 'N';

  ENDIF;

  // WRK.Quantity Ordered = DB1.Quantity Ordered - DB1.Quantity Shipped Total
  WRK.Quantity_Ordered = DB1.Quantity_Ordered - DB1.Quantity_Shipped_Total;

  // WRK.Quantity Allocated = DB1.Quantity Allocated
  WRK.Quantity_Scheduled = DB1.Quantity_Scheduled;

  // WRK.USR Order Weight = WRK.Quantity Ordered * DB1.Unit Weight Ordered U/M *Round
  WRK.USR_Order_Weight = WRK.Quantity_Ordered * DB1.Unit_Weight_Ordered_U_M 'H';

  // PAR.USR Order Weight = PAR.USR Order Weight - WRK.USR Order Weight
  PAR.USR_Order_Weight = PAR.USR_Order_Weight - WRK.USR_Order_Weight;

  // PAR.USR Order Value = PAR.USR Order Value - DB1.Extended Amount
  PAR.USR_Order_Value = PAR.USR_Order_Value - DB1.Extended_Amount;

  ENDIF;

  ENDDO;

  //?Process Inventory update if required by control field
  DO;

  // WRK.Quantity Backordered = DB1.Quantity Ordered - DB1.Quantity Scheduled
  WRK.Quantity_Backordered = DB1.Quantity_Ordered - DB1.Quantity_Scheduled;

  //?update availability  if Prod Plan sts is " " = yes - chgd fp1054 6/17/09
  CASE;

  // IF DB1.OD Production Plan Sts is Yes
  IF DB1.OD_Production_Plan_Sts = *BLANK;

  // PAR.Quantity Scheduled = DB1.Quantity Scheduled
  PAR.Quantity_Scheduled = DB1.Quantity_Scheduled;

  // PAR.Weight Scheduled = DB1.Weight Scheduled
  PAR.Weight_Scheduled = DB1.Weight_Scheduled;

  // Call program UPD Avail-To-Sell  ORD XF.
  CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Quantity_Scheduled);
  PARAMETER(PAR.Weight_Scheduled);
  PARAMETER('OD');
  PARAMETER(JOB.*PROGRAM);
  PARAMETER(DB1.Item_Age_Days);
  PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
  PARAMETER(DB1.Production_Ovr_AgeDte_To);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Quantity Scheduled = CON.*ZERO
  PAR.Quantity_Scheduled = *ZERO;

  // PAR.Weight Scheduled = CON.*ZERO
  PAR.Weight_Scheduled = *ZERO;

  ENDIF;

  ENDDO;

  //?Update detail record to indicate delete status
  DO;

  CASE;

  // IF PAR.Header Status is Entered
  IF PAR.Header_Status = 'E';

  EXECUTE FUNCTION(DLT PD Order Detail    DL) TYPE(DLTOBJ) FILE(OPBGWKP)          AC1204566;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Set status to cancelled
  // WRK.Detail Line Status Last = DB1.Detail Line Status
  WRK.Detail_Line_Status_Last = DB1.Detail_Line_Status;

  // WRK.Detail Line Status = CND.Cancelled
  WRK.Detail_Line_Status = 'X';

  EXECUTE FUNCTION(CHG PD Order Detail    CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1425286;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Order_Group_Code);
  PARAMETER(WRK.Detail_Line_Status);
  PARAMETER(WRK.Detail_Line_Status_Last);
  PARAMETER(DB1.Billing_Detail_Cost_Dol);
  PARAMETER(DB1.Billing_Detail_Gross_Dol);
  PARAMETER(DB1.Billing_Detail_Net_Dol);
  PARAMETER(DB1.Quantity_to_Substitute);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Extended_Amount);
  PARAMETER(DB1.Market_Pricing_Date);
  PARAMETER(DB1.Commodity_Market_Code);
  PARAMETER(DB1.Date_Method_Code);
  PARAMETER(DB1.Price_Method_Code);
  PARAMETER(DB1.Price_Overage_Override);
  PARAMETER(DB1.Contract_Number);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Pricing_Date_Used);
  PARAMETER(DB1.U_M_Base_Price);
  PARAMETER(DB1.U_M_Ordered);
  PARAMETER(DB1.Work_Confirm_Status);
  PARAMETER(DB1.Work_Over_Short_Status);
  PARAMETER(DB1.OD_Production_Plan_Sts);
  PARAMETER(DB1.Order_Desc_Line_One);
  PARAMETER(DB1.Order_Desc_Line_Two);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Catch_Weight_Status);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Audit_Reason_Code);
  PARAMETER(DB1.Production_Date_Control);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.Quantity_Ordered);
  PARAMETER(DB1.Weight_Ordered);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.Quantity_Shipped_Total);
  PARAMETER(DB1.Weight_Shipped_Total);
  PARAMETER(DB1.Unit_Cost_Pricing_U_M);
  PARAMETER(DB1.Unit_Cost_Per_Pound);
  PARAMETER(DB1.Unit_Price);
  PARAMETER(DB1.Unit_Price_Credit);
  PARAMETER(DB1.Unit_Price_Ordered_U_M);
  PARAMETER(DB1.Unit_Weight_Ordered_U_M);
  PARAMETER(DB1.Tare_Weight_Total);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Affect_Inventory_Status);
  PARAMETER(DB1.Affect_Sales_Doll_Status);
  PARAMETER(DB1.Affect_Sales_Pnds_Status);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Item_Level);
  PARAMETER(DB1.Quality_Level);
  PARAMETER(DB1.Pricing_Product_Class_Rep);
  PARAMETER(DB1.Season_Product_Class_Repo);
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.User_Profile_Name);
  PARAMETER(DB1.Country_Code);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.Substituted_Flag);
  PARAMETER(DB1.OD_Schedule_Override_Sts);
  PARAMETER(DB1.Invoice_Unit_Price);
  PARAMETER(DB1.Invoice_Extended_Amt);
  PARAMETER(DB1.Ham_Group_Number);
  PARAMETER(DB1.OD_Adj_Type_Override);
  PARAMETER(DB1.Affect_Trade_Fund);
  PARAMETER(DB1.Affect_Commission);
  PARAMETER(DB1.Affect_Pricing);
  PARAMETER(DB1.Released_by_User_Sts_Y_N);
  PARAMETER(DB1.Ord_TF_Exempt_Code);
  PARAMETER(DB1.OD_Pallet_Type);
  PARAMETER(DB1.Production_Warehouse);
  PARAMETER(DB1.OD_Price_Type);
  PARAMETER(DB1.Warehouse_Pallets_Loaded);
  PARAMETER(DB1.Consumed_Item_Code);
  PARAMETER(DB1.Deadline_Depart_Date_LH);
  PARAMETER(DB1.OD_Price_Type_Ref_Num);
  PARAMETER(DB1.OD_Firm_Date);
  PARAMETER(DB1.Deadline_Depart_Time_LH);
  PARAMETER(DB1.Price_Code);
  PARAMETER(DB1.Maximum_Net_Weight);
  PARAMETER(DB1.Substitution_Line_Number);
  PARAMETER(DB1.Max_Qty_to_sched_per_day);
  PARAMETER(DB1.Warehouse_Pallet_Tare);
  PARAMETER(DB1.Warehouse_Avg_Pallet_Tare);
  PARAMETER(DB1.OD_Item_Target_Price);
  PARAMETER(DB1.OD_Estimated_Gross_Weight);
  PARAMETER(DB1.OD_Maximum_Unit_Weight);
  PARAMETER(DB1.Order_Gate_Final_Price);
  PARAMETER(DB1.OD_Ceiling_Price);
  PARAMETER(DB1.OD_Gate_Final_Price_Adj);
  PARAMETER(DB1.OD_Weighted_Avg_Price);
  PARAMETER(DB1.OD_Original_Ordered_Qty);
  PARAMETER(DB1.OD_Cancel_Date);
  PARAMETER(DB1.OD_Unused_Prc_7);
  PARAMETER(DB1.OD_Unused_Prc_8);
  PARAMETER(DB1.OD_MPR_Sent_to_USDA_Sts);
  PARAMETER(DB1.OD_MPR_Prc_Ready_to_Send);
  PARAMETER(DB1.OD_UnUsed_Price_Sts_3);
  PARAMETER(DB1.Weight_Amount_Entered);
  PARAMETER(DB1.Item_Age_Days);
  PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
  PARAMETER(DB1.Production_Ovr_AgeDte_To);
  PARAMETER(DB1.OD_Spot_Buy);
  PARAMETER(DB1.OD_Clm_Full_Return_to_Plt);
  PARAMETER(DB1.Order_Line_Error_Type);
  PARAMETER(DB1.OD_Market_Begin_Date);
  PARAMETER(DB1.OD_Market_Ending_Date);
  PARAMETER(DB1.OD_Atch_to_Ord_ActShpDte);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  {
   //?USER: Processing after Data read

   //?E2247 RMC 10/03/12 Crt chg log if dtl has been sent to MPR USDA
   CASE;

   // IF DB1.OD MPR Sent to USDA Sts is yes
   IF DB1.OD_MPR_Sent_to_USDA_Sts = 'Y';

   //?If price type changes, then create type: ORDPRT
   CASE;

   // IF DB1.OD Price Type NE PAR.OD Price Type
   IF DB1.OD_Price_Type <> PAR.OD_Price_Type;

   //?change log prior has seq in pos 1-3, price type 5-7: '001 NEG     '
   // LCL.Text 3 Length USR = DB1.Order Sequence Number
   LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

   // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,DB1.OD Price Type,CON.1)
   LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + DB1.OD_Price_Type (1);

   // LCL.Change Log New Value = PAR.OD Price Type
   LCL.Change_Log_New_Value = PAR.OD_Price_Type;

   // Call program CRT Load/OrderChg n/ld XF.
   CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
   PARAMETER(*ZERO);
   PARAMETER('ORDPRT');
   PARAMETER('SLS');
   PARAMETER(LCL.Change_Log_Prior_Value);
   PARAMETER(LCL.Change_Log_New_Value);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);

   ENDIF;

   ENDIF;

   //?If not the transfer order nbr 9999999 -> crt chg logs
   CASE;

   // IF DB1.Order Number is ne 9999999
   IF DB1.Order_Number <> 9999999;

   //?If qty changes, then create type: ORDWGT & ORDQTY ->ALWAYS 6/14/13
   CASE;

   // IF DB1.Quantity Ordered NE PAR.Quantity Ordered
   IF DB1.Quantity_Ordered <> PAR.Quantity_Ordered;

   // OR PAR.Detail Line Status is Cancelled
   OR PAR.Detail_Line_Status = 'X';

   //?(do this off of qty, because wgt can change often since unit wgt changes)
   //?change log prior has seq in pos 1-3, weight in 5-11: '001 0000nnn'
   // LCL.Text 3 Length USR = DB1.Order Sequence Number
   LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

   // LCL.Weight Beg Inv usr = DB1.Weight Ordered
   LCL.Weight_Beg_Inv_usr = DB1.Weight_Ordered;

   // LCL.Text USR 7 = LCL.Weight Beg Inv usr
   LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

   // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
   LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

   // LCL.Weight Beg Inv usr = PAR.Weight Ordered
   LCL.Weight_Beg_Inv_usr = PAR.Weight_Ordered;

   //?WI642-For cancelled item line new weight is zero for log only.
   CASE;

   // IF PAR.Detail Line Status is Cancelled
   IF PAR.Detail_Line_Status = 'X';

   // LCL.Weight Beg Inv usr = CND.Not Entered
   LCL.Weight_Beg_Inv_usr = *ZERO;

   ENDIF;

   // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
   LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

   // Call program CRT Load/OrderChg n/ld XF.
   CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
   PARAMETER(*ZERO);
   PARAMETER('ORDWGT');
   PARAMETER('SLS');
   PARAMETER(LCL.Change_Log_Prior_Value);
   PARAMETER(LCL.Change_Log_New_Value);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);

   // LCL.Weight Beg Inv usr = DB1.Quantity Ordered
   LCL.Weight_Beg_Inv_usr = DB1.Quantity_Ordered;

   // LCL.Text USR 7 = LCL.Weight Beg Inv usr
   LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

   // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
   LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

   // LCL.Weight Beg Inv usr = PAR.Quantity Ordered
   LCL.Weight_Beg_Inv_usr = PAR.Quantity_Ordered;

   //?WI642-For cancelled item line new quantity is zero for log only.
   CASE;

   // IF PAR.Detail Line Status is Cancelled
   IF PAR.Detail_Line_Status = 'X';

   // LCL.Weight Beg Inv usr = CND.Not Entered
   LCL.Weight_Beg_Inv_usr = *ZERO;

   ENDIF;

   // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
   LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

   // Call program CRT Load/OrderChg n/ld XF.
   CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
   PARAMETER(*ZERO);
   PARAMETER('ORDQTY');
   PARAMETER('SLS');
   PARAMETER(LCL.Change_Log_Prior_Value);
   PARAMETER(LCL.Change_Log_New_Value);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);

   ENDIF;

   ENDIF;

   //?USER: Processing before Data update

   // DB1.Age Code = CND.Blank
   DB1.Age_Code = *BLANK;

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Production_Warehouse);
   PARAMETER(NLL.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Calc Gross Weight from tares...    copied from Dsp Gross Wgt function
   DO;

   // Call program Rtv Tare Weight        XF.
   CALL PROGRAM(Rtv Tare Weight        XF) ('PBI3XFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Misc_Tare_Weight);

   //?wi464 change
   // Call program RTV Itm BxID & Tares  XF.
   CALL PROGRAM(RTV Itm BxID & Tares  XF) ('PBI4XFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Box_Weight);
   PARAMETER(LCL.Number_Cases_On_A_Pallet);
   PARAMETER(LCL.Pallet_Tare_Weight);
   PARAMETER(LCL.Box_iD);
   PARAMETER(DB1.OD_Pallet_Type);

   // LCL.Total Tare USR = LCL.Box Weight + LCL.Misc Tare Weight
   LCL.Total_Tare_USR = LCL.Box_Weight + LCL.Misc_Tare_Weight;

   // Box + Misc Tare
   LCL.Weight_1_1_U = ( LCL.Box_Weight + LCL.Misc_Tare_Weight ) * DB1.Quantity_Ordered 'H';

   //?Pallet Tare
   CASE;

   // IF DB1.Palletize is yes
   IF DB1.Palletize = 'Y';

   CASE;

   // IF LCL.Number Cases On A Pallet is GT Zero
   IF LCL.Number_Cases_On_A_Pallet > *ZERO;

   // Pallet Weight
   LCL.Weight_1_2_U = ( DB1.Quantity_Ordered / LCL.Number_Cases_On_A_Pallet 'H' )
   * LCL.Pallet_Tare_Weight 'H';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Weight 1.2             .U = CON.*ZERO
   LCL.Weight_1_2_U = *ZERO;

   ENDIF;

   //?Pallet Tare
   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Weight 1.2             .U = CON.*ZERO
   LCL.Weight_1_2_U = *ZERO;

   ENDIF;

   // Estimated Gross
   DB1.OD_Estimated_Gross_Weight = ( DB1.Weight_Ordered + LCL.Weight_1_1_U )
   + LCL.Weight_1_2_U;

   //?E00196 RMC 8/24/12 chk pfs interface SHPTRN too
   ENDDO;

  }

  ENDIF;

  ENDDO;

 }

}


// IF RCD.Order Secondary Line Seq is GT 1
IF RCD.Order_Secondary_Line_Seq > 1;

//?this is a substitution; check if there are any others
EXECUTE FUNCTION(RTV Substitutions      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1441770;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(*ZERO);
PARAMETER(WRK.Substitution_Flag);
{
 //?USER: Initialize routine

 // PAR.Substitution Flag = CND.no
 PAR.Substitution_Flag = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Order Secondary Line Seq is GT 1
 IF DB1.Order_Secondary_Line_Seq > 1;

 // PAR.Substitution Flag = CND.yes
 PAR.Substitution_Flag = 'Y';

 QUIT;

 ENDIF;

}


//?Set substituted flag
CASE;

// IF WRK.Substitution Flag is yes
IF WRK.Substitution_Flag = 'Y';

// RCD.Substituted Flag = CND.Substitutions Exist
RCD.Substituted_Flag = 'Y';

//?Set substituted flag
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Substituted Flag = CND.No Substitutions Exist
RCD.Substituted_Flag = *BLANK;

ENDIF;

EXECUTE FUNCTION(CHG Substitution Flag  CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1440670;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(1);
PARAMETER(RCD.Substituted_Flag);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(CHG Sts,Alloc          CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1425289;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Detail_Line_Status);
PARAMETER(RCD.Detail_Line_Status_Last);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
{
 //?USER: Processing before Data update

 //?E2640 Write chg log for cancel line item
 CASE;

 // IF PAR.Detail Line Status is Cancelled
 IF PAR.Detail_Line_Status = 'X';

 // AND PAR.Detail Line Status Last is Not cancelled
 AND PAR.Detail_Line_Status_Last = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 // LCL.Text 3 Length USR = DB1.Order Sequence Number
 LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

 // LCL.Weight Beg Inv usr = DB1.Weight Ordered
 LCL.Weight_Beg_Inv_usr = DB1.Weight_Ordered;

 // LCL.Text USR 7 = LCL.Weight Beg Inv usr
 LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

 // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
 LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

 //?New value is -0- for cancel
 // LCL.Weight Beg Inv usr = CON.*ZERO
 LCL.Weight_Beg_Inv_usr = 0;

 // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
 LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

 // Call program CRT Load/OrderChg n/ld XF.
 CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
 PARAMETER(*ZERO);
 PARAMETER('ORDWGT');
 PARAMETER('SLS');
 PARAMETER(LCL.Change_Log_Prior_Value);
 PARAMETER(LCL.Change_Log_New_Value);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);

 // LCL.Weight Beg Inv usr = DB1.Quantity Ordered
 LCL.Weight_Beg_Inv_usr = DB1.Quantity_Ordered;

 // LCL.Text USR 7 = LCL.Weight Beg Inv usr
 LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

 // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
 LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

 //?New value is -0- for cancel
 // LCL.Weight Beg Inv usr = CON.*ZERO
 LCL.Weight_Beg_Inv_usr = 0;

 // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
 LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

 // Call program CRT Load/OrderChg n/ld XF.
 CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
 PARAMETER(*ZERO);
 PARAMETER('ORDQTY');
 PARAMETER('SLS');
 PARAMETER(LCL.Change_Log_Prior_Value);
 PARAMETER(LCL.Change_Log_New_Value);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);

 ENDIF;

}


// CTL.Quantity Ordered = CTL.Quantity Ordered + RCD.Quantity Ordered
CTL.Quantity_Ordered = CTL.Quantity_Ordered + RCD.Quantity_Ordered;

// CTL.Weight Ordered = CTL.Weight Ordered + RCD.Weight Ordered
CTL.Weight_Ordered = CTL.Weight_Ordered + RCD.Weight_Ordered;

// CTL.Weight Scheduled = CTL.Weight Scheduled + RCD.Weight Scheduled
CTL.Weight_Scheduled = CTL.Weight_Scheduled + RCD.Weight_Scheduled;

// LCL.USR Country Code = RCD.Country Code
LCL.USR_Country_Code = RCD.Country_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process command keys

// PAR.Display Flag = CND.No
PAR.Display_Flag = 'N';

EXECUTE FUNCTION(RTV Weight Ord & Sched RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1425280;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(CTL.Quantity_Ordered);
PARAMETER(CTL.Weight_Ordered);
PARAMETER(PAR.Order_Weight_Total);
{
 //?USER: Initialize routine

 // PAR.Weight Ordered = CON.*ZERO
 PAR.Weight_Ordered = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 // PAR.Quantity Ordered = CON.*ZERO
 PAR.Quantity_Ordered = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Avail/Alloc/Enter/Hold
 IF DB1.Detail_Line_Status = 'L'/'A'/'E'/'H';

 // PAR.Quantity Ordered = PAR.Quantity Ordered + DB1.Quantity Ordered
 PAR.Quantity_Ordered = PAR.Quantity_Ordered + DB1.Quantity_Ordered;

 // PAR.Weight Ordered = PAR.Weight Ordered + DB1.Weight Ordered
 PAR.Weight_Ordered = PAR.Weight_Ordered + DB1.Weight_Ordered;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + DB1.Weight Scheduled
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + DB1.Weight_Scheduled;

 ENDIF;

}


EXECUTE FUNCTION(CHG Order Value,Wgt,Ex CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1750017;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(PAR.Order_Value_Total);
PARAMETER(PAR.Order_Weight_Total);
PARAMETER(CTL.OH_TF_Exempt_Code);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


//?Abs.Frt/Wgt
CASE;

// IF PAR.Load ID is NE Blank
IF PAR.Load_ID <> *ZERO;

// Call program RTV UPD Ld Abs.Frt/Wgt XF.
CALL PROGRAM(RTV UPD Ld Abs.Frt/Wgt XF) ('PDE0XFR');
PARAMETER(PAR.Load_ID);
PARAMETER(WRK.Total_Load_Order_Weight);
PARAMETER(WRK.Total_Freight);

ENDIF;

//?Transfer to Order Header
CASE;

// IF CTL.*CMD key is *Order Header
IF CTL.*CMD_key = '15';

// PAR.Next Program Name = CON.PMGFE2R
PAR.Next_Program_Name = 'PMGFE2R';

RETURN;

ENDIF;

//?Transfer to More Details
CASE;

// IF CTL.*CMD key is *Order Details
IF CTL.*CMD_key = '18';

// PAR.Next Program Name = CON.PDO4EFR
PAR.Next_Program_Name = 'PDO4EFR';

RETURN;

ENDIF;

//?F16=Product Availability     Disable if Live w/TPM    E004019
CASE;

// IF CTL.*CMD key is *Product Availability
IF CTL.*CMD_key = '16';

// Call program WW Product Availablty DF.
CALL PROGRAM(WW Product Availablty DF) ('PDFPDFR');
PARAMETER(CTL.Company_Number);
PARAMETER(PAR.Warehouse_Code);

ENDIF;

//?Add Ham Group.
DO;

//?Add Ham Group.
CASE;

// IF CTL.*CMD key is CF19
IF CTL.*CMD_key = '19';

// Call program PMT Enter Ham Group    PV.
CALL PROGRAM(PMT Enter Ham Group    PV) ('PDVXPVR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(WRK.Order_Sequence_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(PAR.Country_Code);
PARAMETER(WRK.Successful_Completion_USR);

CASE;

// IF WRK.Successful Completion USR is Yes
IF WRK.Successful_Completion_USR = 'Y';

// PGM.*Program mode = CND.*CHANGE
PGM.*Program_mode = 'CHG';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PAR.USR Display field = CND.yes
PAR.USR_Display_field = 'Y';

ENDIF;

ENDIF;

ENDDO;

//?F17 = dsp fresh <-> frozen
CASE;

// IF CTL.*CMD key is CF17
IF CTL.*CMD_key = '17';

// Call program Dsp FR/FZ Item Codes  DF.
CALL PROGRAM(Dsp FR/FZ Item Codes  DF) ('PBQBDFR');

ENDIF;

// WRK.Status - Y or N = CND.yes
WRK.Status_Y_or_N = 'Y';

//?F20 = Post
CASE;

// IF CTL.*CMD key is *Post/Update Open Order
IF CTL.*CMD_key = '20';

// WRK.Print (Yes/No) USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

// WRK.Status Flag 2  Y/N = CND.No
WRK.Status_Flag_2_Y_N = 'N';

// WRK.Status Flag 3  Y/N = CND.No
WRK.Status_Flag_3_Y_N = 'N';

// WRK.Status Flag 4  Y/N = CND.no
WRK.Status_Flag_4_Y_N = 'N';

// WRK.Status Flag 5  Y/N = CND.Yes
WRK.Status_Flag_5_Y_N = 'Y';

//?** 12/05/08 LJB add Fax to Customer
// WRK.Status Flag 7  Y/N = CND.No
WRK.Status_Flag_7_Y_N = 'N';

//?** 03/12/13 slm add email on Acknowledgement by the Warehouse Dist
// WRK.Status Flag 8  Y/N = CND.No
WRK.Status_Flag_8_Y_N = 'N';

// WRK.Status Flag 12 Y/N = CND.No
WRK.Status_Flag_12_Y_N = 'N';

// WRK.Email to Warehouse Code = CON.*BLANK
WRK.Email_to_Warehouse_Code = *BLANK;

// LCL.OH Load Plan Ready = CND.Blank
LCL.OH_Load_Plan_Ready = *BLANK;

//?* Default lcl.lpr to Ord Hdr value                    E004119
//?08/21/2017 DN T11489-Added Salesperson Code/Name to Parm.
//?08/06/24 SP S312312-Start (Get field "Email to Broker Usr")
// Call program SEL Confirm Prompt     PV.
CALL PROGRAM(SEL Confirm Prompt     PV) ('PDS0PVR');
PARAMETER(WRK.Status_Y_or_N);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(PAR.Block_Order_Flag);
PARAMETER(LCL.OH_Load_Plan_Ready);
PARAMETER(WRK.Print_Yes_No_USR);
PARAMETER(WRK.Status_Flag_2_Y_N);
PARAMETER(WRK.Status_Flag_3_Y_N);
PARAMETER(WRK.Status_Flag_4_Y_N);
PARAMETER(WRK.Status_Flag_5_Y_N);
PARAMETER(WRK.Status_Flag_6_Y_N);
PARAMETER(WRK.Status_Flag_7_Y_N);
PARAMETER(WRK.Status_Flag_8_Y_N);
PARAMETER(WRK.Status_Flag_12_Y_N);
PARAMETER(WRK.Email_to_Warehouse_Code);
PARAMETER(WRK.Email_Selection_usr);
PARAMETER(PAR.Salesperson_Code);
PARAMETER(LCL.Salesperson_Name);
PARAMETER(LCL.Email_to_Broker_Usr);
PARAMETER(LCL.Email_to_Salesperson_Usr);

//?08/06/24 SP S312312-End
CASE;

// IF WRK.Status - Y or N is no
IF WRK.Status_Y_or_N = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Next Program Name = CON.*BLANK
PAR.Next_Program_Name = *BLANK;

// Call program EDT Post Open Orders 2 XF.
CALL PROGRAM(EDT Post Open Orders 2 XF) ('POI4XFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(LCL.USR_Country_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER('OE');

//?Print Acknowledgement if flag is yes from the confirm prompt
CASE;

// IF WRK.Print (Yes/No) USR is Yes
IF WRK.Print_Yes_No_USR = 'Y';

// OR WRK.Status Flag 8  Y/N is Yes
OR WRK.Status_Flag_8_Y_N = 'Y';

// OR LCL.Email to Salesperson Usr is Yes
OR LCL.Email_to_Salesperson_Usr = 'Y';

//?or if email is requested
// WRK.PRT Night Queue Run Sts = CND.no
WRK.PRT_Night_Queue_Run_Sts = 'N';

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Print Acknowledgement');
PARAMETER(WRK.PRT_Printer_Device);
PARAMETER(WRK.PRT_Hold_Output_Sts);
PARAMETER(WRK.PRT_Save_Output_Sts);
PARAMETER(WRK.PRT_Number_of_Copies);
PARAMETER(WRK.PRT_Night_Queue_Run_Sts);
PARAMETER(WRK.PRT_Night_Queue);
PARAMETER('OMS');
PARAMETER(*MISSING);
PARAMETER(WRK.Paper_Type_USR);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF WRK.Print (Yes/No) USR is No
IF WRK.Print_Yes_No_USR = 'N';

// WRK.PRT Printer Device = CON.*BLANK
WRK.PRT_Printer_Device = *BLANK;

ENDIF;

// Call program PRT Acknowledgements UP.
SBMJOB;
CALL PROGRAM(PRT Acknowledgements UP) ('PDJWPCLP');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(WRK.Blank_for_4_USR);
PARAMETER(1);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER('S');
PARAMETER(WRK.PRT_Printer_Device);
PARAMETER(WRK.PRT_Hold_Output_Sts);
PARAMETER(WRK.PRT_Save_Output_Sts);
PARAMETER(WRK.PRT_Number_of_Copies);
PARAMETER(*JOBD);
PARAMETER(*ZERO);
PARAMETER(WRK.Email_To_Whs);
PARAMETER(WRK.Email_to_Warehouse_Code);
PARAMETER(LCL.Email_to_Salesperson_Usr);
SBMJOBOVR JOB(ORDER_ACK);
SBMJOBEND;

ENDIF;

ENDIF;

//?Print Get Ready Report if flag is yes from the confirm prompt
CASE;

// IF WRK.Status Flag 5  Y/N is Yes
IF WRK.Status_Flag_5_Y_N = 'Y';

// WRK.PRT Night Queue Run Sts = CND.no
WRK.PRT_Night_Queue_Run_Sts = 'N';

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Print Get Ready Report');
PARAMETER(WRK.PRT_Printer_Device);
PARAMETER(WRK.PRT_Hold_Output_Sts);
PARAMETER(WRK.PRT_Save_Output_Sts);
PARAMETER(WRK.PRT_Number_of_Copies);
PARAMETER(WRK.PRT_Night_Queue_Run_Sts);
PARAMETER(WRK.PRT_Night_Queue);
PARAMETER('OMS');
PARAMETER(*MISSING);
PARAMETER(WRK.Paper_Type_USR);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Zzz Get Ready Report   UP.
SBMJOB;
CALL PROGRAM(Zzz Get Ready Report   UP) ('PMH5UPC');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.PRT_Printer_Device);
PARAMETER(WRK.PRT_Hold_Output_Sts);
PARAMETER(WRK.PRT_Save_Output_Sts);
PARAMETER(WRK.PRT_Number_of_Copies);
PARAMETER(*JOBD);
PARAMETER(*BLANK);
SBMJOBOVR JOB(GETREADY);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

ENDIF;

ENDIF;

//?08/06/24 SP S312312-Start (Add new condition c5)
//?Fax Acknwlgmnt to buyer/fld/brkr/cust if flag=yes f/confirm pmt  12/03/08
CASE;

// IF WRK.Status Flag 4  Y/N is yes
IF WRK.Status_Flag_4_Y_N = 'Y';

// OR WRK.Status Flag 2  Y/N is Yes
OR WRK.Status_Flag_2_Y_N = 'Y';

// OR WRK.Status Flag 3  Y/N is Yes
OR WRK.Status_Flag_3_Y_N = 'Y';

// OR WRK.Status Flag 7  Y/N is Yes
OR WRK.Status_Flag_7_Y_N = 'Y';

// OR LCL.Email to Broker Usr is Yes
OR LCL.Email_to_Broker_Usr = 'Y';

//?RMC  06/23/04      LJB 12/03/2008
//?** Status Flag 2=Buyer Fax/email, Status Flag 3=Regional Sales Manager
//?** Status Flag 4=Broker Fax-which is not used at this level
//?** Status Flag 7=Customer Fax
//?08/21/2017 DN T11489-Added Salesperson Code to Parm.
// Call program EXC Fax Acknwgmnt     XF.
CALL PROGRAM(EXC Fax Acknwgmnt     XF) ('PPFDXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(PAR.HPB_Ship_to_Warehouse);
PARAMETER(PAR.Salesperson_Code);
PARAMETER(WRK.Status_Flag_2_Y_N);
PARAMETER(WRK.Status_Flag_3_Y_N);
PARAMETER(WRK.Status_Flag_4_Y_N);
PARAMETER(WRK.Status_Flag_7_Y_N);
PARAMETER(LCL.Email_to_Broker_Usr);

ENDIF;

//?08/06/24 SP S312312-End
RETURN;

ENDIF;

ENDIF;

//?F22 = Post/Price -- return to this pgm
CASE;

// IF CTL.*CMD key is CF22
IF CTL.*CMD_key = '22';

// WRK.Print (Yes/No) USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

// WRK.Status Flag 5  Y/N = CND.Yes
WRK.Status_Flag_5_Y_N = 'Y';

// Call program EDT Post Open Orders 2 XF.
CALL PROGRAM(EDT Post Open Orders 2 XF) ('POI4XFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(LCL.USR_Country_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER('OE');

// PAR.Next Program Name = CND.Order Detail Program
PAR.Next_Program_Name = 'PDN9EFR';

RETURN;

ENDIF;

//?USER: Exit program processing

//?Disable *Exit key
CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

// Send error message - 'Function not allowed.'
ERROR(USR1833);

QUIT;

ENDIF;

