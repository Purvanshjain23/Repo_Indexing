// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDA9EFR
// ?Date: 14.08.2025 Time: 03:33:53
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification history
DO;

//? 6/10/19 JBB E15106 - Remove prompting from Purge screens
//?                      Remove + signs from Group Code, Library,
//?                      and Application Code.  Also change these
//?                      fields to output only (protect).
ENDDO;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('C/S');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

//?USER: Initialize subfile header

//?** First time processing
CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// CTL.PCG Code = PAR.PCG Code
CTL.PCG_Code = PAR.PCG_Code;

// CTL.PCG Library = PAR.PCG Library
CTL.PCG_From_Library = PAR.PCG_From_Library;

// CTL.Purge Application Code = PAR.Purge Application Code
CTL.Purge_Application_Code = PAR.Purge_Application_Code;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDIF;

//?USER: Initialize subfile record (existing record)

//?** F4=Prompt
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

//?** F4 on Application Code
CASE;

// IF PGM.*Cursor field <IS> CTL.Purge Application Code
IF PGM.*Cursor_field = CTL.Purge_Application_Code;

// Call program SEL Select Appl.       SR.
CALL PROGRAM(SEL Select Appl.       SR) ('PDY6SRR');
PARAMETER(CTL.Purge_Application_Code);

ENDIF;

//?** F4 on Group Code or Library
CASE;

// IF PGM.*Cursor field <IS> CTL.PCG Code
IF PGM.*Cursor_field = CTL.PCG_Code;

// OR PGM.*Cursor field <IS> CTL.PCG Library
OR PGM.*Cursor_field = CTL.PCG_From_Library;

// Call program SEL Purge Ctl Group    SL.
CALL PROGRAM(SEL Purge Ctl Group    SL) ('PMKMSRR');
PARAMETER(RCD.PCG_Code);
PARAMETER(RCD.PCG_From_Library);

ENDIF;

ENDIF;

//?** Select Group Code if entered
CASE;

// IF PAR.PCG Code is Not Blank
IF PAR.PCG_Code <> *BLANK;

CASE;

// IF DB1.PCG Code NE PAR.PCG Code
IF DB1.PCG_Code <> PAR.PCG_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** Select Library if entered
CASE;

// IF PAR.PCG Library NE WRK.Blank 6 USR
IF PAR.PCG_From_Library <> WRK.Blank_6_USR;

CASE;

// IF DB1.PCG Library NE PAR.PCG Library
IF DB1.PCG_From_Library <> PAR.PCG_From_Library;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** Select Application Code if entered
CASE;

// IF PAR.Purge Application Code is Not Blank
IF PAR.Purge_Application_Code <> *BLANK;

CASE;

// IF DB1.Purge Application Code NE PAR.Purge Application Code
IF DB1.Purge_Application_Code <> PAR.Purge_Application_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Initialize subfile record (new record)

// RCD.Record Status = CND.Active
RCD.Record_Status = 'A';

// RCD.PCG Code = CTL.PCG Code
RCD.PCG_Code = CTL.PCG_Code;

// RCD.PCG Library = CTL.PCG Library
RCD.PCG_From_Library = CTL.PCG_From_Library;

// RCD.Purge Application Code = CTL.Purge Application Code
RCD.Purge_Application_Code = CTL.Purge_Application_Code;

//?** F4=Prompt
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

//?** F4 on Application Code
CASE;

// IF PGM.*Cursor field <IS> CTL.Purge Application Code
IF PGM.*Cursor_field = CTL.Purge_Application_Code;

// Call program SEL Select Appl.       SR.
CALL PROGRAM(SEL Select Appl.       SR) ('PDY6SRR');
PARAMETER(CTL.Purge_Application_Code);

ENDIF;

//?** F4 on Group Code or Library
CASE;

// IF PGM.*Cursor field <IS> CTL.PCG Code
IF PGM.*Cursor_field = CTL.PCG_Code;

// OR PGM.*Cursor field <IS> CTL.PCG Library
OR PGM.*Cursor_field = CTL.PCG_From_Library;

// Call program SEL Purge Ctl Group    SL.
CALL PROGRAM(SEL Purge Ctl Group    SL) ('PMKMSRR');
PARAMETER(RCD.PCG_Code);
PARAMETER(RCD.PCG_From_Library);

ENDIF;

ENDIF;

//?USER: Validate subfile record relations

CASE;

// IF RCD.File Name is Not Blanks
IF RCD.File_Name <> *BLANK;

//?** Record status cannot be blanks
CASE;

// IF RCD.Record Status is *blank
IF RCD.Record_Status = *BLANK;

// Send error message - 'Record Status cannot be blanks'
ERROR(USR3777);
MSGPARM(RCD.Record_Status);

ENDIF;

// Call program RTV File Mbr Descript  CL.
CALL PROGRAM(RTV File Mbr Descript  CL) ('PMOKUPC');
PARAMETER(RCD.File_Name);
PARAMETER(RCD.Description);
PARAMETER(LCL.Return_Code_Usr);

//?** Error if file is not found
CASE;

// IF LCL.Return Code Usr is *Record does not exist
IF LCL.Return_Code_Usr = 'Y2U0005';

// Send error message - 'File Not Found.'
ERROR(USR3794);
MSGPARM(RCD.File_Name);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

CASE;

// IF RCD.Date Format NE WRK.BLANK 1               USR
IF RCD.Date_Format <> WRK.BLANK_1_USR;

//?** Field Name cannot be blank if date format is entered
CASE;

// IF RCD.Field Name is Blanks
IF RCD.Field_Name = *BLANK;

// Send error message - 'Field name cannot be blank if date format is entered.'
ERROR(USR3821);
MSGPARM(RCD.Field_Name);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Purge Files Affct CR) TYPE(CRTOBJ) FILE(PDLQREP)           AC1477943;
PARAMETER(CTL.PCG_Code);
PARAMETER(CTL.PCG_From_Library);
PARAMETER(CTL.Purge_Application_Code);
PARAMETER(RCD.File_Name);
PARAMETER(RCD.Description);
PARAMETER(RCD.Purge_Logical);
PARAMETER(RCD.Purge_Tape_Physical);
PARAMETER(RCD.Field_Name);
PARAMETER(RCD.Date_Format);
PARAMETER(RCD.Unused_Text_1);
PARAMETER(RCD.Unused_Date);
PARAMETER(RCD.SSI_Download_Flag);
PARAMETER(RCD.unused_status_2);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Create_Date);
PARAMETER(RCD.Create_Time);
PARAMETER(RCD.Create_User);
PARAMETER(RCD.Create_Program);
PARAMETER(RCD.Change_Date);
PARAMETER(RCD.Change_Time);
PARAMETER(RCD.Change_User);
PARAMETER(RCD.Change_Program);

//?USER: Delete DBF record

EXECUTE FUNCTION(Del Purge Files Affct DL) TYPE(DLTOBJ) FILE(PDLQREP)           AC1477945;
PARAMETER(CTL.PCG_Code);
PARAMETER(CTL.PCG_From_Library);
PARAMETER(CTL.Purge_Application_Code);
PARAMETER(RCD.File_Name);

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Purge Files Affct CH) TYPE(CHGOBJ) FILE(PDLQREP)           AC1477944;
PARAMETER(CTL.PCG_Code);
PARAMETER(CTL.PCG_From_Library);
PARAMETER(CTL.Purge_Application_Code);
PARAMETER(RCD.File_Name);
PARAMETER(RCD.Description);
PARAMETER(RCD.Purge_Logical);
PARAMETER(RCD.Purge_Tape_Physical);
PARAMETER(RCD.Field_Name);
PARAMETER(RCD.Date_Format);
PARAMETER(RCD.Unused_Text_1);
PARAMETER(RCD.Unused_Date);
PARAMETER(RCD.SSI_Download_Flag);
PARAMETER(RCD.unused_status_2);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Create_Date);
PARAMETER(RCD.Create_Time);
PARAMETER(RCD.Create_User);
PARAMETER(RCD.Create_Program);
PARAMETER(RCD.Change_Date);
PARAMETER(RCD.Change_Time);
PARAMETER(RCD.Change_User);
PARAMETER(RCD.Change_Program);

