// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDTBE1R
// ?Date: 14.08.2025 Time: 03:29:45
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?RMC Added Rcd Sts as input capable   5/22/08
EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.USR Display field = CND.no
PAR.USR_Display_field = 'N';

//?***** Change Log and comments
DO;

//?JBB WI440  4/14/21 - M3 to JDE E1 Financials
//?- Retrieve E1LIVE flag from Company Values.  If the value is "Y",
//?- do not allow F15=Sel M3 G/L Acct Id.
//?** 06/14/2017 RMC R9083 add m3 gl acct id sel for accts not in
//?** jde -- like company 440s
//?** 02/18/2010 LJB E000512   New parm added to VAL JDE Account No.s UP
//?** receive and recompile
ENDDO;

//?JBB WI440  4/14/21 - M3 to JDE E1 Financials
EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(PAR.Company_Number);
PARAMETER('E1LIVE');
PARAMETER(LCL.Live_with_E1_usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize key screen

// KEY.Company Number = PAR.Company Number
KEY.Company_Number = PAR.Company_Number;

// KEY.Adjustment Type Code = PAR.Adjustment Type Code
KEY.Adjustment_Type_Code = PAR.Adjustment_Type_Code;

CASE;

// IF PAR.Adjustment Type Code is Not Entered
IF PAR.Adjustment_Type_Code = *BLANK;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

ENDIF;

//?USER: Initialize detail screen (new record)

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(KEY.Company_Number);
PARAMETER(DTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

// PAR.USR Display field = CND.no
PAR.USR_Display_field = 'N';

//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DB1.Company_Number);
PARAMETER(DTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.USR Display field = CND.yes
PAR.USR_Display_field = 'Y';

// LCL.G/L Account Id USR = DB1.G/L ID Code JDE
LCL.G_L_Account_Id_USR = DB1.G_L_ID_Code_JDE;

// Call program VAL Acct ID JDE-8 dgt  UP.
CALL PROGRAM(VAL Acct ID JDE-8 dgt  UP) ('ARACTRET');
PARAMETER(DTL.G_L_ID_Code_JDE);
PARAMETER(DTL.Cost_Center);
PARAMETER(DTL.Object_Account);
PARAMETER(DTL.Subsidiary);
PARAMETER(DTL.Description);
PARAMETER(WRK.G_L_Posting_Company);
PARAMETER(LCL.JDE_Posting_Edit_Code_USR);
PARAMETER(LCL.Error_Return_text);

CASE;

// IF LCL.Error Return text is Error Return
IF LCL.Error_Return_text = 'ERR';

//?CC in error come back with the gl acct id in the field. blank it out
CASE;

// IF DTL.Cost Center. . . . . . . EQ DTL.G/L ID Code JDE
IF DTL.Cost_Center = DTL.G_L_ID_Code_JDE;

// DTL.Cost Center. . . . . . . = CON.*BLANK
DTL.Cost_Center = *BLANK;

ENDIF;

// DTL.G/L ID Code JDE = LCL.G/L Account Id USR
DTL.G_L_ID_Code_JDE = LCL.G_L_Account_Id_USR;

// Call program Exc M3 DIM/Dsc f/co/id XF.
CALL PROGRAM(Exc M3 DIM/Dsc f/co/id XF) ('PWC9XFR');
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.G_L_ID_Code_JDE);
PARAMETER(LCL.MCR_M3_Dimension_1);
PARAMETER(LCL.MCR_M3_Dimension_2);
PARAMETER(LCL.MCR_M3_Dimension_3);
PARAMETER(LCL.MCR_M3_Dimension_4);
PARAMETER(LCL.MCR_M3_Dimension_5);
PARAMETER(LCL.MCR_M3_Dimension_6);
PARAMETER(LCL.MCR_M3_Dimension_7);
PARAMETER(DTL.Description);

ENDIF;

// DTL.Condition Desc. 1  USR = Condition name of DTL.Record Status
DTL.Condition_Desc_1_USR = RTVCND(DTL.Record_Status);

//?USER: Validate detail screen fields

//?F13 Select JDE E1 Account
CASE;

// IF DTL.*CMD key is CF13
IF DTL.*CMD_key = '13';

CASE;

// IF LCL.Live with E1 usr is No
IF LCL.Live_with_E1_usr = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Company Number Alpha = CVTVAR(DTL.Company Number)
PAR.Company_Number_Alpha = CVTVAR(DTL.Company_Number);

// Call program SEL Chart of Accounts  UP.
CALL PROGRAM(SEL Chart of Accounts  UP) ('ARACTSEL');
PARAMETER(PAR.Company_Number_Alpha);
PARAMETER(LCL.Cost_Center);
PARAMETER(LCL.Object_Account);
PARAMETER(LCL.Subsidiary);
PARAMETER(LCL.G_L_ID_Code_JDE);
PARAMETER(LCL.Description);
PARAMETER(WRK.Error_Return_text);

CASE;

// IF LCL.Cost Center. . . . . . . is Entered
IF LCL.Cost_Center > *BLANK;

// DTL.Cost Center. . . . . . . = LCL.Cost Center. . . . . . .
DTL.Cost_Center = LCL.Cost_Center;

// DTL.Object Account . . . . . = LCL.Object Account . . . . .
DTL.Object_Account = LCL.Object_Account;

// DTL.Subsidiary . . . . . . . = LCL.Subsidiary . . . . . . .
DTL.Subsidiary = LCL.Subsidiary;

// DTL.Description = LCL.Description
DTL.Description = LCL.Description;

// DTL.G/L ID Code JDE = LCL.G/L ID Code JDE
DTL.G_L_ID_Code_JDE = LCL.G_L_ID_Code_JDE;

ENDIF;

CASE;

// IF WRK.Error Return text is Error Return
IF WRK.Error_Return_text = 'ERR';

// Send error message - 'No G/L Account Codes to Select.'
ERROR(USR2072);

ENDIF;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?F15 M3 GL Acct Id Selection.  Do not allow if Live with E1=Yes
CASE;

// IF DTL.*CMD key is CF15
IF DTL.*CMD_key = '15';

CASE;

// IF LCL.Live with E1 usr is No
IF LCL.Live_with_E1_usr = 'N';

// PAR.Company Number Alpha = CVTVAR(DTL.Company Number)
PAR.Company_Number_Alpha = CVTVAR(DTL.Company_Number);

// Call program Sel G/L ACCT ID f M3  SL.
CALL PROGRAM(Sel G/L ACCT ID f M3  SL) ('PWC8SRR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.G_L_ID_Code_JDE);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Function Key is not allowed for companies that are live with JDE Enterprise
ERROR(USR5200);

ENDIF;

ENDIF;

//?Select program on G/L Account Codes
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Cost Center. . . . . . .
AND PGM.*Cursor_field = DTL.Cost_Center;

// PAR.Company Number Alpha = CVTVAR(DTL.Company Number)
PAR.Company_Number_Alpha = CVTVAR(DTL.Company_Number);

// Call program SEL Chart of Accounts  UP.
CALL PROGRAM(SEL Chart of Accounts  UP) ('ARACTSEL');
PARAMETER(PAR.Company_Number_Alpha);
PARAMETER(LCL.Cost_Center);
PARAMETER(LCL.Object_Account);
PARAMETER(LCL.Subsidiary);
PARAMETER(LCL.G_L_ID_Code_JDE);
PARAMETER(LCL.Description);
PARAMETER(WRK.Error_Return_text);

CASE;

// IF LCL.Cost Center. . . . . . . is Entered
IF LCL.Cost_Center > *BLANK;

// DTL.Cost Center. . . . . . . = LCL.Cost Center. . . . . . .
DTL.Cost_Center = LCL.Cost_Center;

// DTL.Object Account . . . . . = LCL.Object Account . . . . .
DTL.Object_Account = LCL.Object_Account;

// DTL.Subsidiary . . . . . . . = LCL.Subsidiary . . . . . . .
DTL.Subsidiary = LCL.Subsidiary;

// DTL.Description = LCL.Description
DTL.Description = LCL.Description;

// DTL.G/L ID Code JDE = LCL.G/L ID Code JDE
DTL.G_L_ID_Code_JDE = LCL.G_L_ID_Code_JDE;

ENDIF;

CASE;

// IF WRK.Error Return text is Error Return
IF WRK.Error_Return_text = 'ERR';

// Send error message - 'No G/L Account Codes to Select.'
ERROR(USR2072);

ENDIF;

// WRK.Error Return text = CND.Blank
WRK.Error_Return_text = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

CASE;

// IF DTL.User Enter G/L Status is no
IF DTL.User_Enter_G_L_Status = 'N';

//?Validate G/L JDE Account Code
CASE;

// IF DTL.Cost Center. . . . . . . is Not Entered
IF DTL.Cost_Center = *BLANK;

// AND DTL.Object Account . . . . . is Not Entered
AND DTL.Object_Account = *BLANK;

// AND DTL.Subsidiary . . . . . . . is Not Entered
AND DTL.Subsidiary = *BLANK;

// AND DTL.G/L ID Code JDE is *Blanks
AND DTL.G_L_ID_Code_JDE = *blanks;

// Send error message - 'G/L Account Codes must be entered.  They must agree with the JDE Chart of A
ERROR(USR2071);

//?Validate G/L JDE Account Code
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Company Number Alpha = CVTVAR(DTL.Company Number)
PAR.Company_Number_Alpha = CVTVAR(DTL.Company_Number);

//?Validate CC/OBJ
CASE;

// IF DTL.Cost Center. . . . . . . is Entered
IF DTL.Cost_Center > *BLANK;

// AND DTL.Object Account . . . . . is Entered
AND DTL.Object_Account <> *BLANK;

// Call program VAL JDE Account No.s   UP.
CALL PROGRAM(VAL JDE Account No.s   UP) ('ARACTEDT');
PARAMETER(PAR.Company_Number_Alpha);
PARAMETER(DTL.Cost_Center);
PARAMETER(DTL.Object_Account);
PARAMETER(DTL.Subsidiary);
PARAMETER(DTL.G_L_ID_Code_JDE);
PARAMETER(PAR.JDE_Posting_Edit_Code_USR);
PARAMETER(DTL.Description);
PARAMETER(WRK.Error_Return_text);

CASE;

// IF WRK.Error Return text is Error Return
IF WRK.Error_Return_text = 'ERR';

// Send error message - 'G/L Code is in Error'
ERROR(USR2147);
MSGPARM(DTL.Cost_Center);

ENDIF;

ENDIF;

//?Validate GL Acct Id
CASE;

// IF DTL.G/L ID Code JDE is Entered
IF DTL.G_L_ID_Code_JDE <> *BLANK;

// Call program Exc M3 DIM/Dsc f/co/id XF.
CALL PROGRAM(Exc M3 DIM/Dsc f/co/id XF) ('PWC9XFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.G_L_ID_Code_JDE);
PARAMETER(LCL.MCR_M3_Dimension_1);
PARAMETER(LCL.MCR_M3_Dimension_2);
PARAMETER(LCL.MCR_M3_Dimension_3);
PARAMETER(LCL.MCR_M3_Dimension_4);
PARAMETER(LCL.MCR_M3_Dimension_5);
PARAMETER(LCL.MCR_M3_Dimension_6);
PARAMETER(LCL.MCR_M3_Dimension_7);
PARAMETER(DTL.Description);

CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'G/L Code is in Error'
ERROR(USR2147);
MSGPARM(DTL.G_L_ID_Code_JDE);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?If G/L account entered edit is performed
CASE;

// IF DTL.Cost Center. . . . . . . is Entered
IF DTL.Cost_Center > *BLANK;

// OR DTL.Object Account . . . . . is Entered
OR DTL.Object_Account <> *BLANK;

// PAR.Company Number Alpha = CVTVAR(DTL.Company Number)
PAR.Company_Number_Alpha = CVTVAR(DTL.Company_Number);

// Call program VAL JDE Account No.s   UP.
CALL PROGRAM(VAL JDE Account No.s   UP) ('ARACTEDT');
PARAMETER(PAR.Company_Number_Alpha);
PARAMETER(DTL.Cost_Center);
PARAMETER(DTL.Object_Account);
PARAMETER(DTL.Subsidiary);
PARAMETER(DTL.G_L_ID_Code_JDE);
PARAMETER(PAR.JDE_Posting_Edit_Code_USR);
PARAMETER(DTL.Description);
PARAMETER(WRK.Error_Return_text);

CASE;

// IF WRK.Error Return text is Error Return
IF WRK.Error_Return_text = 'ERR';

// Call program Exc M3 DIM/Dsc f/co/id XF.
CALL PROGRAM(Exc M3 DIM/Dsc f/co/id XF) ('PWC9XFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.G_L_ID_Code_JDE);
PARAMETER(LCL.MCR_M3_Dimension_1);
PARAMETER(LCL.MCR_M3_Dimension_2);
PARAMETER(LCL.MCR_M3_Dimension_3);
PARAMETER(LCL.MCR_M3_Dimension_4);
PARAMETER(LCL.MCR_M3_Dimension_5);
PARAMETER(LCL.MCR_M3_Dimension_6);
PARAMETER(LCL.MCR_M3_Dimension_7);
PARAMETER(DTL.Description);

CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'G/L Code is in Error'
ERROR(USR2147);
MSGPARM(DTL.Cost_Center);

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Error Return text = CND.Blank
WRK.Error_Return_text = *BLANK;

ENDIF;

ENDIF;

//?If G/L account entered edit is performed
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Exc M3 DIM/Dsc f/co/id XF.
CALL PROGRAM(Exc M3 DIM/Dsc f/co/id XF) ('PWC9XFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.G_L_ID_Code_JDE);
PARAMETER(LCL.MCR_M3_Dimension_1);
PARAMETER(LCL.MCR_M3_Dimension_2);
PARAMETER(LCL.MCR_M3_Dimension_3);
PARAMETER(LCL.MCR_M3_Dimension_4);
PARAMETER(LCL.MCR_M3_Dimension_5);
PARAMETER(LCL.MCR_M3_Dimension_6);
PARAMETER(LCL.MCR_M3_Dimension_7);
PARAMETER(DTL.Description);

CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'G/L Code is in Error'
ERROR(USR2147);
MSGPARM(DTL.Cost_Center);

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Error Return text = CND.Blank
WRK.Error_Return_text = *BLANK;

ENDIF;

ENDIF;

// DTL.Condition Desc. 1  USR = Condition name of DTL.Record Status
DTL.Condition_Desc_1_USR = RTVCND(DTL.Record_Status);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?USER: Create DBF record

EXECUTE FUNCTION(CRT AR A/R Adjustment  CR) TYPE(CRTOBJ) FILE(PDJ3CPP)          AC1333288;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Adjustment_Type_Code);
PARAMETER(DTL.Adjustment_Description);
PARAMETER(DTL.Effect_on_Account);
PARAMETER(DTL.G_L_ID_Code_JDE);
PARAMETER(DTL.Adjustment_Limit_Amount);
PARAMETER(DTL.Cash_Adj);
PARAMETER(DTL.User_Enter_G_L_Status);
PARAMETER('U');
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER('A');
PARAMETER(DTL.Job_Time);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Job_Date);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG AR A/R Adjustment  CH) TYPE(CHGOBJ) FILE(PDJ3CPP)          AC1333289;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Adjustment_Type_Code);
PARAMETER(DTL.Adjustment_Description);
PARAMETER(DTL.Effect_on_Account);
PARAMETER(DTL.G_L_ID_Code_JDE);
PARAMETER(DTL.Adjustment_Limit_Amount);
PARAMETER(DTL.Cash_Adj);
PARAMETER(DTL.User_Enter_G_L_Status);
PARAMETER(DTL.System_Control);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Job_Time);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Job_Date);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


