// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PWHRDFR
// ?Date: 14.08.2025 Time: 02:56:29
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification history
DO;

//?12/28/2023 JM  S000219- Fix unintentional deletion of Carcass Detail &
//?                        Tattoo Ded/Add.
//? 4/22/2019 JBB E14892 - Set Repayment Status to 'N' when F19
//?                        Use CHGOBJ "Chg Pymt Proc Parms   CH" so
//?                        that the Repayment Status is changed to 'N'.
//? 4/17/2019 JBB E14820 - Add Site ID to Tattoo Difference report
//?                        Function modified to input the current
//?                        Company Code into the Display Payment
//?                        Processing Parms function (F15 - PWINPVR)
//? 4/16/2019 JBB E14855 - Fix Payment Date when F6 to select records
//?- Function modified to use the date returned to update the current
//?  payment date with the most recent Kill Date from the selected
//?  records.
//?12/12/2018 JBB E14234 - Changes to Repayments Phase 2
//?- Function created.  This work with screen will display records
//?  From the Tattoo Header Job Sel file PKDOREP.  It restricts on the
//?  Company and Name = "REPAY".
//?11/02/2020 ISE H16853 - CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
ENDDO;

// PGM.*Scan limit = CND.No Max
PGM.*Scan_limit = 999999;

//?Restrict on Repayment records
// PAR.Tattoo Job Sel Name = CND.Repayments
PAR.Tattoo_Job_Sel_Name = 'REPAY';

//?Retrieve the default company for the User ID
// Call program RTV Default Co No App XF.
CALL PROGRAM(RTV Default Co No App XF) ('PMD4XFR');
PARAMETER(LCL.Company_Number_Alpha_Usr);

// LCL.BOH Company Number = CVTVAR(LCL.Company Number Alpha Usr)
LCL.BOH_Company_Number = CVTVAR(LCL.Company_Number_Alpha_Usr);

//?Default Payment Status to All
// LCL.First Time Flag Usr = CND.Yes
LCL.First_Time_Flag_Usr = 'Y';

// LCL.Text 2 USR = CON.TR
LCL.Text_2_USR = 'TR';

//?USER: Initialize subfile control

// CTL.BOH Company Number = CVTVAR(LCL.Company Number Alpha Usr)
CTL.BOH_Company_Number = CVTVAR(LCL.Company_Number_Alpha_Usr);

//?If First Time, display all records
CASE;

// IF LCL.First Time Flag Usr is Yes
IF LCL.First_Time_Flag_Usr = 'Y';

// LCL.First Time Flag Usr = CND.No
LCL.First_Time_Flag_Usr = 'N';

// CTL.Tattoo Job Sel Perm/Temp = CND.Not Entered
CTL.Repayment_Status = *BLANK;

ENDIF;

EXECUTE FUNCTION(Rtv Payment Processing RT) TYPE(RTVOBJ) FILE(PKC4REP)          AB1147409;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(LCL.Pmt_Current_Payment_Date);
PARAMETER(CTL.@Sequence_1_0);
PARAMETER(NLL.PP_Commission_Paym_Error);
PARAMETER(NLL.PP_Payment_Error);
PARAMETER(NLL.PP_Unused_Nbr_1);
PARAMETER(NLL.PP_Repayment_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.Pmt Current Payment Date = LCL.Pmt Current Payment Date
CTL.Pmt_Current_Payment_Date = LCL.Pmt_Current_Payment_Date;

//?Retrieve current file backup status
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER('HPEREPAYBU');
PARAMETER(LCL.System_Value_Alpha_USR);

//?Breakout Repayment Backup file values
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?1. Backup Status (position 1)
// LCL.File Backup Status USR = SUBSTRING(LCL.System Value Alpha    USR,CON.1,CON.1)
LCL.File_Backup_Status_USR = SUBSTRING(LCL.System_Value_Alpha_USR:1:1);

//?2. Date of Backup (positions 2-8)
// LCL.Date Alpha USR = SUBSTRING(LCL.System Value Alpha    USR,CON.2,CON.7)
LCL.Date_Alpha_USR = SUBSTRING(LCL.System_Value_Alpha_USR:2:7);

// LCL.Last Run Date = CVTVAR(LCL.Date Alpha USR)
LCL.Last_Run_Date = CVTVAR(LCL.Date_Alpha_USR);

// LCL.Date From Convert USR = CVTVAR(LCL.Last Run Date)
LCL.Date_From_Convert_USR = CVTVAR(LCL.Last_Run_Date);

//?3. Last file backed up (positions 9 - 18)
// LCL.File = SUBSTRING(LCL.System Value Alpha    USR,CON.9,CON.10)
LCL.File = SUBSTRING(LCL.System_Value_Alpha_USR:9:10);

ENDIF;

//?Determine screen backup message
CASE;

// IF LCL.File Backup Status USR is Backup completed
IF LCL.File_Backup_Status_USR = 'C';

//?If Backup Date <> Job Date, files not bakced up
CASE;

// IF LCL.Last Run Date NE JOB.*Job date
IF LCL.Last_Run_Date <> JOB.*Job_date;

// CTL.Text description = CONCAT(CON.Repayment files not backe,CON.d for a repayment today.,CND.*Non
CTL.Text_description = 'Repayment files not backe' + 'd for a repayment today.' (*ZERO);

//?If Backup Date <> Job Date, files not bakced up
// IF LCL.Last Run Date EQ JOB.*Job date
IF LCL.Last_Run_Date = JOB.*Job_date;

// CTL.Text description = CONCAT(CON.Repayment files are backe,CON.d up.,CND.*None)
CTL.Text_description = 'Repayment files are backe' + 'd up.' (*ZERO);

ENDIF;

//?Determine screen backup message
// IF LCL.File Backup Status USR is Backup in progress
IF LCL.File_Backup_Status_USR = 'P';

// CTL.Text description = CONCAT(CON.Repayment file backup in,CON.progress, step,CND.*One)
CTL.Text_description = 'Repayment file backup in' + 'progress, step' (1);

// CTL.Text description = CONCAT(CTL.Text description,LCL.File,CND.*One)
CTL.Text_description = CTL.Text_description + LCL.File (1);

//?Determine screen backup message
// IF LCL.File Backup Status USR is Error during backup
IF LCL.File_Backup_Status_USR = 'E';

// CTL.Text description = CONCAT(CON.Error backing up Repaymen,CON.t file,CND.*None)
CTL.Text_description = 'Error backing up Repaymen' + 't file' (*ZERO);

// CTL.Text description = CONCAT(CTL.Text description,LCL.File,CND.*One)
CTL.Text_description = CTL.Text_description + LCL.File (1);

ENDIF;

ENDIF;

//?Load Payment Status description
CASE;

// IF CTL.Tattoo Job Sel Perm/Temp is Not Entered
IF CTL.Repayment_Status = *BLANK;

// CTL.Text 10 1 USR = CON.ALL
CTL.Text_10_1_USR = 'ALL';

//?Load Payment Status description
// IF CTL.Tattoo Job Sel Perm/Temp is Unpaid
IF CTL.Repayment_Status = 'U';

// CTL.Text 10 1 USR = CON.Unpaid
CTL.Text_10_1_USR = 'Unpaid';

//?Load Payment Status description
// IF CTL.Tattoo Job Sel Perm/Temp is Repaid
IF CTL.Repayment_Status = 'R';

// CTL.Text 10 1 USR = CON.Repaid
CTL.Text_10_1_USR = 'Repaid';

//?Load Payment Status description
// IF CTL.Tattoo Job Sel Perm/Temp is Paid
IF CTL.Repayment_Status = 'P';

// CTL.Text 10 1 USR = CON.Paid
CTL.Text_10_1_USR = 'Paid';

//?Load Payment Status description
// IF CTL.Tattoo Job Sel Perm/Temp is Transferred
IF CTL.Repayment_Status = 'T';

// CTL.Text 10 1 USR = CON.Transfer
CTL.Text_10_1_USR = 'Transfer';

ENDIF;

//?Save the current values of the positioner fields
// LCL.Kill Date Usr = CTL.TH Kill Date
LCL.Kill_Date_Usr = CTL.TH_Kill_Date;

// LCL.Buy Order Number USR = CTL.BOH Buy Order Number
LCL.Buy_Order_Number_USR = CTL.BOH_Buy_Order_Number;

// LCL.Load Number = CTL.BOL Load Number
LCL.Load_Number = CTL.BOL_Load_Number;

// LCL.Tattoo Number USR = CTL.TH Tattoo Number
LCL.Tattoo_Number_USR = CTL.TH_Tattoo_Number;

//?USER: Initialize subfile record from DBF record

//?Select records for the current Company Number
CASE;

// IF RCD.BOH Company Number NE CTL.BOH Company Number
IF RCD.BOH_Company_Number <> CTL.BOH_Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?Select records for the current Company Number
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv TH for Repayment) TYPE(RTVOBJ) FILE(PKA1CPP)               AB1350040;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TH_Head_Received);
PARAMETER(RCD.TH_Payment_Sts);
PARAMETER(RCD.TH_Held_Over_Record);
PARAMETER(RCD.TH_Hog_Class_Type);
PARAMETER(RCD.THP_Process_Code);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Select record if Payment Sts = Payment Sts selector
CASE;

// IF NOT CTL.Tattoo Job Sel Perm/Temp is Not Entered
IF ! CTL.Repayment_Status = *BLANK;

// AND CTL.Tattoo Job Sel Perm/Temp NE RCD.Tattoo Job Sel Perm/Temp
AND CTL.Repayment_Status <> RCD.Repayment_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?Select record if Payment Sts = Payment Sts selector
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv BOH Lock Sts      RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1251842;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOH_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Load Status Description
CASE;

// IF RCD.Tattoo Job Sel Perm/Temp is Repaid
IF RCD.Repayment_Status = 'R';

// RCD.Text 10 1 USR = CON.Repaid
RCD.Text_10_1_USR = 'Repaid';

//?Load Status Description
// IF RCD.Tattoo Job Sel Perm/Temp is Unpaid
IF RCD.Repayment_Status = 'U';

// RCD.Text 10 1 USR = CON.Unpaid
RCD.Text_10_1_USR = 'Unpaid';

//?Load Status Description
// IF RCD.Tattoo Job Sel Perm/Temp is Paid
IF RCD.Repayment_Status = 'P';

// RCD.Text 10 1 USR = CON.Paid
RCD.Text_10_1_USR = 'Paid';

//?Load Status Description
// IF RCD.Tattoo Job Sel Perm/Temp is Transferred
IF RCD.Repayment_Status = 'T';

// RCD.Text 10 1 USR = CON.Transfer
RCD.Text_10_1_USR = 'Transfer';

//?Load Status Description
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Text 10 1 USR = CON.*BLANK
RCD.Text_10_1_USR = *BLANK;

ENDIF;

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?If Company Number = 0, ERROR; OTHERWISE Check Function Keys
CASE;

// IF CTL.BOH Company Number is *ZERO
IF CTL.BOH_Company_Number = *ZERO;

// Send error message - 'Company Number required'
ERROR(PRK0826);
MSGPARM(CTL.BOH_Company_Number);

//?If Company Number = 0, ERROR; OTHERWISE Check Function Keys
// IF CTL.TH Kill Date NE LCL.Kill Date Usr
IF CTL.TH_Kill_Date <> LCL.Kill_Date_Usr;

// OR CTL.BOH Buy Order Number NE LCL.Buy Order Number USR
OR CTL.BOH_Buy_Order_Number <> LCL.Buy_Order_Number_USR;

// OR CTL.BOL Load Number NE LCL.Load Number
OR CTL.BOL_Load_Number <> LCL.Load_Number;

// OR CTL.TH Tattoo Number NE LCL.Tattoo Number USR
OR CTL.TH_Tattoo_Number <> LCL.Tattoo_Number_USR;

//?Update CTL values to saved values and set Repayment Status to ALL
DO;

//?Save the current values of the positioner fields
// LCL.Kill Date Usr = CTL.TH Kill Date
LCL.Kill_Date_Usr = CTL.TH_Kill_Date;

// LCL.Buy Order Number USR = CTL.BOH Buy Order Number
LCL.Buy_Order_Number_USR = CTL.BOH_Buy_Order_Number;

// LCL.Load Number = CTL.BOL Load Number
LCL.Load_Number = CTL.BOL_Load_Number;

// LCL.Tattoo Number USR = CTL.TH Tattoo Number
LCL.Tattoo_Number_USR = CTL.TH_Tattoo_Number;

//?Reset Toggle to ALL records
// CTL.Tattoo Job Sel Perm/Temp = CND.Not Entered
CTL.Repayment_Status = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDDO;

//?If Company Number = 0, ERROR; OTHERWISE Check Function Keys
// IF *OTHERWISE
IF *OTHERWISE;

//?Process Fkeys
CASE;

// IF CTL.*CMD key is CF05
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Process Fkeys
// IF CTL.*CMD key is CF06
IF CTL.*CMD_key = '06';

//?Create new records
DO;

// LCL.Pmt Current Payment Date = CTL.Pmt Current Payment Date
LCL.Pmt_Current_Payment_Date = CTL.Pmt_Current_Payment_Date;

// Call program Sel Tattoo Hdr Repay  DF.
CALL PROGRAM(Sel Tattoo Hdr Repay  DF) ('PWIJDFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(LCL.Count_USR_2);

//?If counter not zero, set Payment Date and reload subfile
CASE;

// IF LCL.Count USR 2 is Entered
IF LCL.Count_USR_2 <> *ZERO;

//?Set Parm Payment Date
CASE;

// IF CTL.Pmt Current Payment Date EQ JOB.*Job date
IF CTL.Pmt_Current_Payment_Date = JOB.*Job_date;

//?If returned Kill Date < Payment Parm Date
CASE;

// IF CTL.TH Kill Date LT CTL.Pmt Current Payment Date
IF CTL.TH_Kill_Date < CTL.Pmt_Current_Payment_Date;

// CTL.Pmt Current Payment Date = CTL.TH Kill Date
CTL.Pmt_Current_Payment_Date = CTL.TH_Kill_Date;

ENDIF;

//?Set Parm Payment Date
// IF CTL.TH Kill Date GT CTL.Pmt Current Payment Date
IF CTL.TH_Kill_Date > CTL.Pmt_Current_Payment_Date;

// CTL.Pmt Current Payment Date = CTL.TH Kill Date
CTL.Pmt_Current_Payment_Date = CTL.TH_Kill_Date;

ENDIF;

EXECUTE FUNCTION(Chg Pymt Proc Parms   CH) TYPE(CHGOBJ) FILE(PKC4REP)           AB1327880;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.Pmt_Current_Payment_Date);
PARAMETER(1);
PARAMETER('N');
PARAMETER('N');
PARAMETER(*ZERO);
PARAMETER('Y');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?If returned Kill Date is zero, reset to current payment date
CASE;

// IF CTL.TH Kill Date is Not Entered
IF CTL.TH_Kill_Date = *ZERO;

// CTL.Pmt Current Payment Date = LCL.Pmt Current Payment Date
CTL.Pmt_Current_Payment_Date = LCL.Pmt_Current_Payment_Date;

ENDIF;

ENDDO;

//?Process Fkeys
// IF CTL.*CMD key is Toggle
IF CTL.*CMD_key = '10';

//?Toggle processing
DO;

//?Toggle CTL value
CASE;

// IF CTL.Tattoo Job Sel Perm/Temp is Not Entered
IF CTL.Repayment_Status = *BLANK;

// CTL.Tattoo Job Sel Perm/Temp = CND.Unpaid
CTL.Repayment_Status = 'U';

//?Toggle CTL value
// IF CTL.Tattoo Job Sel Perm/Temp is Unpaid
IF CTL.Repayment_Status = 'U';

// CTL.Tattoo Job Sel Perm/Temp = CND.Paid
CTL.Repayment_Status = 'P';

//?Toggle CTL value
// IF CTL.Tattoo Job Sel Perm/Temp is Paid
IF CTL.Repayment_Status = 'P';

// CTL.Tattoo Job Sel Perm/Temp = CND.Repaid
CTL.Repayment_Status = 'R';

//?Toggle CTL value
// IF CTL.Tattoo Job Sel Perm/Temp is Repaid
IF CTL.Repayment_Status = 'R';

// CTL.Tattoo Job Sel Perm/Temp = CND.Transferred
CTL.Repayment_Status = 'T';

//?Toggle CTL value
// IF CTL.Tattoo Job Sel Perm/Temp is Transferred
IF CTL.Repayment_Status = 'T';

// CTL.Tattoo Job Sel Perm/Temp = CND.Not Entered
CTL.Repayment_Status = *BLANK;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDDO;

//?Process Fkeys
// IF CTL.*CMD key is CF11
IF CTL.*CMD_key = '11';

//?Edit User Profile
DO;

// Call program EDT User Profile OMS  E1.
CALL PROGRAM(EDT User Profile OMS  E1) ('PDZBE1R');
PARAMETER(JOB.*USER);
PARAMETER(LCL.User_Code_Model_USR);

// Call program RTV Default Co No App XF.
CALL PROGRAM(RTV Default Co No App XF) ('PMD4XFR');
PARAMETER(LCL.Company_Number_Alpha_Usr);

// LCL.BOH Company Number = CVTVAR(LCL.Company Number Alpha Usr)
LCL.BOH_Company_Number = CVTVAR(LCL.Company_Number_Alpha_Usr);

// CTL.BOH Company Number = CVTVAR(LCL.Company Number Alpha Usr)
CTL.BOH_Company_Number = CVTVAR(LCL.Company_Number_Alpha_Usr);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDDO;

//?Process Fkeys
// IF CTL.*CMD key is CF13
IF CTL.*CMD_key = '13';

//?Edit Payment Date and Step
DO;

// Call program Edt Payment Process   E1.
CALL PROGRAM(Edt Payment Process   E1) ('PKSPE1R');
PARAMETER(CTL.BOH_Company_Number);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDDO;

//?Process Fkeys
// IF CTL.*CMD key is CF14
IF CTL.*CMD_key = '14';

//?Call Payment Edit/Post Process
DO;

// Call program PMT Payment Process   PV.
CALL PROGRAM(PMT Payment Process   PV) ('PKXAPVR');
PARAMETER(*ZERO);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDDO;

//?Process Fkeys
// IF CTL.*CMD key is CF15
IF CTL.*CMD_key = '15';

//?Show Payment Current Payment Dates
DO;

// Call program Edt Pymt Proc Parms   PV.
CALL PROGRAM(Edt Pymt Proc Parms   PV) ('PWINPVR');
PARAMETER(CTL.BOH_Company_Number);

ENDDO;

//?Process Fkeys
// IF CTL.*CMD key is CF17
IF CTL.*CMD_key = '17';

//?Backup Repayment files
DO;

// Call program Pmt Repay File Backup PV.
CALL PROGRAM(Pmt Repay File Backup PV) ('PWHEPVR');
PARAMETER(CTL.BOH_Company_Number);

//?If Backup submitted, change warning message
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// LCL.File Backup Status USR = CND.Backup in progress
LCL.File_Backup_Status_USR = 'P';

// CTL.Text description = CONCAT(CON.Repayment files backup su,CON.bmitted.,CND.*None)
CTL.Text_description = 'Repayment files backup su' + 'bmitted.' (*ZERO);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDDO;

//?Process Fkeys
// IF CTL.*CMD key is CF19
IF CTL.*CMD_key = '19';

//?Mark Unpaid records to interim Paid
DO;

//?Note: F19 is used to set the Payment Status to Paid on the Tattoo
//?      Header, set the Buy Order Status to Locked, and set the
//?      Repayment Status to Paid.  After this step is performed, the
//?      user will run the sequel view to attach to the email that is
//?      sent to the requestor to show them that the Tattoo is paid
//?      and the Payment Date/Step has been changed to the current
//?      date and step 1.  Also, the Payment Date and Step will be
//?      changed to the current date and step 1.
EXECUTE FUNCTION(Rtv Chg Repay Sts     RT) TYPE(RTVOBJ) FILE(PKDOREP)           AB1349615;
PARAMETER('REPAY');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER('P');
PARAMETER(LCL.Count_USR);
{
 //?USER: Initialize routine

 // PAR.Count USR = CON.*ZERO
 PAR.Count_USR = *ZERO;

 // LCL.BOH Buy Order Number = CON.*ZERO
 LCL.BOH_Buy_Order_Number = *ZERO;

 // LCL.First Time Flag Usr = CND.Yes
 LCL.First_Time_Flag_Usr = 'Y';

 //?USER: Process Data record

 //?If request is to change records to interim Paid
 CASE;

 // IF PAR.Tattoo Job Sel Perm/Temp is Paid
 IF PAR.Repayment_Status = 'P';

 //?If Repayment Status is Unpaid, change to Interim Paid
 CASE;

 // IF DB1.Tattoo Job Sel Perm/Temp is Unpaid
 IF DB1.Repayment_Status = 'U';

 EXECUTE FUNCTION(RTV Tattoo Record     RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1111223;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(NLL.TH_Purchase_Date);
 PARAMETER(NLL.TH_Group_Reference);
 PARAMETER(NLL.TH_Live_Purchase_UOM);
 PARAMETER(NLL.TH_Live_Purchase_Price);
 PARAMETER(NLL.TH_Resale_UOM);
 PARAMETER(NLL.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(NLL.TH_Pricing_Date);
 PARAMETER(NLL.TH_Resale_Spread_Sts);
 PARAMETER(NLL.TH_Dead_On_Arrival);
 PARAMETER(NLL.TH_Head_Received);
 PARAMETER(NLL.TH_Yard_Deads);
 PARAMETER(NLL.TH_Held_Over);
 PARAMETER(NLL.TH_Head_Condemned);
 PARAMETER(NLL.TH_Head_Killed);
 PARAMETER(NLL.TH_Head_Adds);
 PARAMETER(NLL.TH_Head_Accepted);
 PARAMETER(NLL.TH_Live_Wgt);
 PARAMETER(NLL.TH_Hot_Wgt);
 PARAMETER(NLL.TH_Tot_Loin_Eye_Depth);
 PARAMETER(NLL.TH_Tot_Backfat_Inches);
 PARAMETER(NLL.TH_Tot_Light_Reflectance);
 PARAMETER(NLL.TH_Avg_Live_Wgt);
 PARAMETER(NLL.TH_Avg_Hot_Wgt);
 PARAMETER(NLL.TH_Avg_Light_Reflectance);
 PARAMETER(NLL.TH_Avg_Lean_Percent);
 PARAMETER(NLL.TH_Avg_Loin_Eye_Depth);
 PARAMETER(NLL.TH_Avg_Backfat);
 PARAMETER(NLL.TH_Std_Yield_Percent);
 PARAMETER(NLL.TH_Actual_Yield);
 PARAMETER(NLL.TH_Yield_Difference);
 PARAMETER(NLL.TH_Recalc_Live_Wgt);
 PARAMETER(NLL.TH_CM_Base_Mkt_Price);
 PARAMETER(NLL.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(NLL.TH_CM_Sort_Discount_Amt);
 PARAMETER(NLL.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(NLL.TH_CM_Base_Carcass_Value);
 PARAMETER(NLL.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(NLL.TH_CM_Carcass_Gross_Amt);
 PARAMETER(NLL.TH_Deduction_Amt);
 PARAMETER(NLL.TH_Total_Net_WO_Adds);
 PARAMETER(NLL.TH_Carcass_Net_Amt);
 PARAMETER(NLL.TH_Additions_Amt);
 PARAMETER(NLL.TH_Accrual_Amount);
 PARAMETER(NLL.TH_Fixed_Cost_Amount);
 PARAMETER(LCL.TH_Payment_Sts);
 PARAMETER(NLL.TH_Header_Error_Sts);
 PARAMETER(NLL.TH_Detail_Error_Sts);
 PARAMETER(NLL.TH_Kill_Balancing_Sts);
 PARAMETER(NLL.TH_Bal_to_Kill_Gen);
 PARAMETER(NLL.TH_Commission_A_P_Voucher);
 PARAMETER(NLL.TH_Voucher_Payment_Date);
 PARAMETER(NLL.TH_User_Error_Override);
 PARAMETER(NLL.TH_Held_Over_Record);
 PARAMETER(NLL.TH_Sex);
 PARAMETER(NLL.TH_Held_Ovr_Completed_Dte);
 PARAMETER(NLL.TH_Commission_Paid_Date);
 PARAMETER(NLL.TH_Actual_Check_Date);
 PARAMETER(NLL.TH_Shipped_Weight);
 PARAMETER(NLL.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(NLL.TH_FFLI);
 PARAMETER(NLL.TH_Kill_Product_Value);
 PARAMETER(NLL.TH_Cut_Product_Value);
 PARAMETER(NLL.TH_Render_Product_Value);
 PARAMETER(NLL.TH_Shift_Held_Over_Head);
 PARAMETER(NLL.DF_Defect_Code);
 PARAMETER(LCL.THP_Process_Code);
 PARAMETER(NLL.HB_Buyer_Code);
 PARAMETER(NLL.GN_Genetic_Code);
 PARAMETER(NLL.HC_Class_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv BOH Lock Sts      RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1251842;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(LCL.BOH_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?If record unpaid, mark it as Interim Paid
 CASE;

 // IF LCL.TH Payment Sts is Unpaid Producer
 IF LCL.TH_Payment_Sts = 'ML'/'SL'/'SC'/'IC'/'IL'/*BLANK;

 // AND NOT LCL.THP Process Code is Slaughter
 AND ! LCL.THP_Process_Code = 'SLG';

 //?When Buy Order Number changes value, update Buy Order Header
 CASE;

 // IF LCL.BOH Buy Order Number NE DB1.BOH Buy Order Number
 IF LCL.BOH_Buy_Order_Number <> DB1.BOH_Buy_Order_Number;

 //?Update previous Buy Order Header record to Locked
 EXECUTE FUNCTION(Chg BOH Status-Repay  CH) TYPE(CHGOBJ) FILE(PKAWCPP)           AB1347375;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER('L');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 // LCL.BOH Buy Order Number = DB1.BOH Buy Order Number
 LCL.BOH_Buy_Order_Number = DB1.BOH_Buy_Order_Number;

 ENDIF;

 //?Determine Payment Sts value
 CASE;

 // IF LCL.TH Payment Sts is Select Live
 IF LCL.TH_Payment_Sts = 'SL';

 // LCL.TH Payment Sts = CND.Paid Live
 LCL.TH_Payment_Sts = 'PL';

 //?Determine Payment Sts value
 // IF LCL.TH Payment Sts is Sl Carcass Merit
 IF LCL.TH_Payment_Sts = 'SC';

 // LCL.TH Payment Sts = CND.PD Carcass Merit
 LCL.TH_Payment_Sts = 'PC';

 //?Determine Payment Sts value
 // IF LCL.TH Payment Sts is Sl Int Carc
 IF LCL.TH_Payment_Sts = 'IC';

 // LCL.TH Payment Sts = CND.Post Int Carc
 LCL.TH_Payment_Sts = 'NC';

 //?Determine Payment Sts value
 // IF LCL.TH Payment Sts is Sl Int Live
 IF LCL.TH_Payment_Sts = 'IL';

 // LCL.TH Payment Sts = CND.Post Int Live
 LCL.TH_Payment_Sts = 'NL';

 ENDIF;

 EXECUTE FUNCTION(Chg Pay Sts           CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1156796;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(LCL.TH_Payment_Sts);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

  EXECUTE FUNCTION(Chg/Crt Tatto/Spc Flds IF) TYPE(EXCINTFUN)                     AB1189848;
  PARAMETER(DB1.TH_Payment_Sts);
  PARAMETER(DB1.TH_Payment_Type);
  {
   //?Execute internal function

   EXECUTE FUNCTION(HPE056 Payment Type) TYPE(EXCINTFUN)                           AB1189849;
   {
    //?Execute internal function

    //?1/10/96  HPE056   Allow payment type to be update based on
    //?                  what the payment status is at the time this
    //?                  tattoo is being updated
   }

   //?Function Description:  If there are any fields that need to be
   //?Changed/Created during the Change functions or Create function
   //?Presently: Payment Type
   //?Add this routine to all of the change objects and create object
   //?that update the Payment Type
   CASE;

   // IF PAR.TH Payment Sts is Live anything
   IF PAR.TH_Payment_Sts = 'ML'/'PL'/'NL'/'SL'/'IL';

   // PAR.TH Payment Type = CND.Live
   PAR.TH_Payment_Type = 'L';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.TH Payment Type = CND.Carcass Merit
   PAR.TH_Payment_Type = 'C';

   ENDIF;

  }

 }

 EXECUTE FUNCTION(Chg Tattoo Header Job CH) TYPE(CHGOBJ) FILE(PKDOREP)           AB1177568;
 PARAMETER(DB1.Tattoo_Job_Sel_Name);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.Tattoo_Job_Sel_Sort_Fld);
 PARAMETER('P');
 PARAMETER(LCL.PD_Producer_Code);
 PARAMETER(LCL.PL_Location_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 // PAR.Count USR = PAR.Count USR + CON.1
 PAR.Count_USR = PAR.Count_USR + 1;

 ENDIF;

 ENDIF;

 //?If request is to change records to interim Paid
 // IF PAR.Tattoo Job Sel Perm/Temp is Repaid
 IF PAR.Repayment_Status = 'R';

 //?If Repayment Status is Interim Paid, change to Repaid
 CASE;

 // IF DB1.Tattoo Job Sel Perm/Temp is Paid
 IF DB1.Repayment_Status = 'P';

 EXECUTE FUNCTION(Chg Tattoo Header Job CH) TYPE(CHGOBJ) FILE(PKDOREP)           AB1177568;
 PARAMETER(DB1.Tattoo_Job_Sel_Name);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.Tattoo_Job_Sel_Sort_Fld);
 PARAMETER('R');
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 // PAR.Count USR = PAR.Count USR + CON.1
 PAR.Count_USR = PAR.Count_USR + 1;

 ENDIF;

 ENDIF;

 //?USER: Exit processing

 //?Update the Payment Parms to the current date
 CASE;

 // IF PAR.Count USR is Greater than 1
 IF PAR.Count_USR > 1;

 // AND PAR.Tattoo Job Sel Perm/Temp is Paid
 AND PAR.Repayment_Status = 'P';

 EXECUTE FUNCTION(Chg Payment Processing CH) TYPE(CHGOBJ) FILE(PKC4REP)          AB1146791;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(JOB.*Job_date);
 PARAMETER(1);
 PARAMETER('N');
 PARAMETER('N');
 PARAMETER(*ZERO);
 PARAMETER('N');
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 ENDIF;

}


// Send information message - '&2 Repayment records marked as &1'
MESSAGE(PRK1534 *INFO);
MSGPARM('Paid');
MSGPARM(LCL.Count_USR);

//?If Count > 0, update repayment status
CASE;

// IF LCL.Count USR is GT Zero
IF LCL.Count_USR > *ZERO;

EXECUTE FUNCTION(Upd Pymt Prc Prm Repay RT) TYPE(RTVOBJ) FILE(PKC4REP)          AB1349911;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(JOB.*Job_date);
PARAMETER(1);
PARAMETER('N');
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Pymt Proc Parms   CH) TYPE(CHGOBJ) FILE(PKC4REP)           AB1327880;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(PAR.Pmt_Current_Payment_Date);
 PARAMETER(PAR.Pmt_Current_Payment_Step);
 PARAMETER(DB1.PP_Commission_Paym_Error);
 PARAMETER(DB1.PP_Payment_Error);
 PARAMETER(DB1.PP_Unused_Nbr_1);
 PARAMETER(PAR.PP_Repayment_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDDO;

//?Process Fkeys
// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

//?Mark interim Paid records to Repaid
DO;

//?Note: F21 is used to set the Repayment Status to Repaid after
//?      sending the email to the requestor.  This is the last step
//?      in the repayment process.
// Call program Pmt Mark Paid to RepaidPV.
CALL PROGRAM(Pmt Mark Paid to RepaidPV) ('PWIZPVR');
PARAMETER(LCL.Select_Y_N_USR_1);

CASE;

// IF LCL.Select Y/N USR 1 is Yes
IF LCL.Select_Y_N_USR_1 = 'Y';

EXECUTE FUNCTION(Rtv Chg Repay Sts     RT) TYPE(RTVOBJ) FILE(PKDOREP)           AB1349615;
PARAMETER('REPAY');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER('R');
PARAMETER(LCL.Count_USR);
{
 //?USER: Initialize routine

 // PAR.Count USR = CON.*ZERO
 PAR.Count_USR = *ZERO;

 // LCL.BOH Buy Order Number = CON.*ZERO
 LCL.BOH_Buy_Order_Number = *ZERO;

 // LCL.First Time Flag Usr = CND.Yes
 LCL.First_Time_Flag_Usr = 'Y';

 //?USER: Process Data record

 //?If request is to change records to interim Paid
 CASE;

 // IF PAR.Tattoo Job Sel Perm/Temp is Paid
 IF PAR.Repayment_Status = 'P';

 //?If Repayment Status is Unpaid, change to Interim Paid
 CASE;

 // IF DB1.Tattoo Job Sel Perm/Temp is Unpaid
 IF DB1.Repayment_Status = 'U';

 EXECUTE FUNCTION(RTV Tattoo Record     RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1111223;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(NLL.TH_Purchase_Date);
 PARAMETER(NLL.TH_Group_Reference);
 PARAMETER(NLL.TH_Live_Purchase_UOM);
 PARAMETER(NLL.TH_Live_Purchase_Price);
 PARAMETER(NLL.TH_Resale_UOM);
 PARAMETER(NLL.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(NLL.TH_Pricing_Date);
 PARAMETER(NLL.TH_Resale_Spread_Sts);
 PARAMETER(NLL.TH_Dead_On_Arrival);
 PARAMETER(NLL.TH_Head_Received);
 PARAMETER(NLL.TH_Yard_Deads);
 PARAMETER(NLL.TH_Held_Over);
 PARAMETER(NLL.TH_Head_Condemned);
 PARAMETER(NLL.TH_Head_Killed);
 PARAMETER(NLL.TH_Head_Adds);
 PARAMETER(NLL.TH_Head_Accepted);
 PARAMETER(NLL.TH_Live_Wgt);
 PARAMETER(NLL.TH_Hot_Wgt);
 PARAMETER(NLL.TH_Tot_Loin_Eye_Depth);
 PARAMETER(NLL.TH_Tot_Backfat_Inches);
 PARAMETER(NLL.TH_Tot_Light_Reflectance);
 PARAMETER(NLL.TH_Avg_Live_Wgt);
 PARAMETER(NLL.TH_Avg_Hot_Wgt);
 PARAMETER(NLL.TH_Avg_Light_Reflectance);
 PARAMETER(NLL.TH_Avg_Lean_Percent);
 PARAMETER(NLL.TH_Avg_Loin_Eye_Depth);
 PARAMETER(NLL.TH_Avg_Backfat);
 PARAMETER(NLL.TH_Std_Yield_Percent);
 PARAMETER(NLL.TH_Actual_Yield);
 PARAMETER(NLL.TH_Yield_Difference);
 PARAMETER(NLL.TH_Recalc_Live_Wgt);
 PARAMETER(NLL.TH_CM_Base_Mkt_Price);
 PARAMETER(NLL.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(NLL.TH_CM_Sort_Discount_Amt);
 PARAMETER(NLL.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(NLL.TH_CM_Base_Carcass_Value);
 PARAMETER(NLL.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(NLL.TH_CM_Carcass_Gross_Amt);
 PARAMETER(NLL.TH_Deduction_Amt);
 PARAMETER(NLL.TH_Total_Net_WO_Adds);
 PARAMETER(NLL.TH_Carcass_Net_Amt);
 PARAMETER(NLL.TH_Additions_Amt);
 PARAMETER(NLL.TH_Accrual_Amount);
 PARAMETER(NLL.TH_Fixed_Cost_Amount);
 PARAMETER(LCL.TH_Payment_Sts);
 PARAMETER(NLL.TH_Header_Error_Sts);
 PARAMETER(NLL.TH_Detail_Error_Sts);
 PARAMETER(NLL.TH_Kill_Balancing_Sts);
 PARAMETER(NLL.TH_Bal_to_Kill_Gen);
 PARAMETER(NLL.TH_Commission_A_P_Voucher);
 PARAMETER(NLL.TH_Voucher_Payment_Date);
 PARAMETER(NLL.TH_User_Error_Override);
 PARAMETER(NLL.TH_Held_Over_Record);
 PARAMETER(NLL.TH_Sex);
 PARAMETER(NLL.TH_Held_Ovr_Completed_Dte);
 PARAMETER(NLL.TH_Commission_Paid_Date);
 PARAMETER(NLL.TH_Actual_Check_Date);
 PARAMETER(NLL.TH_Shipped_Weight);
 PARAMETER(NLL.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(NLL.TH_FFLI);
 PARAMETER(NLL.TH_Kill_Product_Value);
 PARAMETER(NLL.TH_Cut_Product_Value);
 PARAMETER(NLL.TH_Render_Product_Value);
 PARAMETER(NLL.TH_Shift_Held_Over_Head);
 PARAMETER(NLL.DF_Defect_Code);
 PARAMETER(LCL.THP_Process_Code);
 PARAMETER(NLL.HB_Buyer_Code);
 PARAMETER(NLL.GN_Genetic_Code);
 PARAMETER(NLL.HC_Class_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv BOH Lock Sts      RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1251842;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(LCL.BOH_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?If record unpaid, mark it as Interim Paid
 CASE;

 // IF LCL.TH Payment Sts is Unpaid Producer
 IF LCL.TH_Payment_Sts = 'ML'/'SL'/'SC'/'IC'/'IL'/*BLANK;

 // AND NOT LCL.THP Process Code is Slaughter
 AND ! LCL.THP_Process_Code = 'SLG';

 //?When Buy Order Number changes value, update Buy Order Header
 CASE;

 // IF LCL.BOH Buy Order Number NE DB1.BOH Buy Order Number
 IF LCL.BOH_Buy_Order_Number <> DB1.BOH_Buy_Order_Number;

 //?Update previous Buy Order Header record to Locked
 EXECUTE FUNCTION(Chg BOH Status-Repay  CH) TYPE(CHGOBJ) FILE(PKAWCPP)           AB1347375;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER('L');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 // LCL.BOH Buy Order Number = DB1.BOH Buy Order Number
 LCL.BOH_Buy_Order_Number = DB1.BOH_Buy_Order_Number;

 ENDIF;

 //?Determine Payment Sts value
 CASE;

 // IF LCL.TH Payment Sts is Select Live
 IF LCL.TH_Payment_Sts = 'SL';

 // LCL.TH Payment Sts = CND.Paid Live
 LCL.TH_Payment_Sts = 'PL';

 //?Determine Payment Sts value
 // IF LCL.TH Payment Sts is Sl Carcass Merit
 IF LCL.TH_Payment_Sts = 'SC';

 // LCL.TH Payment Sts = CND.PD Carcass Merit
 LCL.TH_Payment_Sts = 'PC';

 //?Determine Payment Sts value
 // IF LCL.TH Payment Sts is Sl Int Carc
 IF LCL.TH_Payment_Sts = 'IC';

 // LCL.TH Payment Sts = CND.Post Int Carc
 LCL.TH_Payment_Sts = 'NC';

 //?Determine Payment Sts value
 // IF LCL.TH Payment Sts is Sl Int Live
 IF LCL.TH_Payment_Sts = 'IL';

 // LCL.TH Payment Sts = CND.Post Int Live
 LCL.TH_Payment_Sts = 'NL';

 ENDIF;

 EXECUTE FUNCTION(Chg Pay Sts           CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1156796;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(LCL.TH_Payment_Sts);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

  EXECUTE FUNCTION(Chg/Crt Tatto/Spc Flds IF) TYPE(EXCINTFUN)                     AB1189848;
  PARAMETER(DB1.TH_Payment_Sts);
  PARAMETER(DB1.TH_Payment_Type);
  {
   //?Execute internal function

   EXECUTE FUNCTION(HPE056 Payment Type) TYPE(EXCINTFUN)                           AB1189849;
   {
    //?Execute internal function

    //?1/10/96  HPE056   Allow payment type to be update based on
    //?                  what the payment status is at the time this
    //?                  tattoo is being updated
   }

   //?Function Description:  If there are any fields that need to be
   //?Changed/Created during the Change functions or Create function
   //?Presently: Payment Type
   //?Add this routine to all of the change objects and create object
   //?that update the Payment Type
   CASE;

   // IF PAR.TH Payment Sts is Live anything
   IF PAR.TH_Payment_Sts = 'ML'/'PL'/'NL'/'SL'/'IL';

   // PAR.TH Payment Type = CND.Live
   PAR.TH_Payment_Type = 'L';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.TH Payment Type = CND.Carcass Merit
   PAR.TH_Payment_Type = 'C';

   ENDIF;

  }

 }

 EXECUTE FUNCTION(Chg Tattoo Header Job CH) TYPE(CHGOBJ) FILE(PKDOREP)           AB1177568;
 PARAMETER(DB1.Tattoo_Job_Sel_Name);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.Tattoo_Job_Sel_Sort_Fld);
 PARAMETER('P');
 PARAMETER(LCL.PD_Producer_Code);
 PARAMETER(LCL.PL_Location_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 // PAR.Count USR = PAR.Count USR + CON.1
 PAR.Count_USR = PAR.Count_USR + 1;

 ENDIF;

 ENDIF;

 //?If request is to change records to interim Paid
 // IF PAR.Tattoo Job Sel Perm/Temp is Repaid
 IF PAR.Repayment_Status = 'R';

 //?If Repayment Status is Interim Paid, change to Repaid
 CASE;

 // IF DB1.Tattoo Job Sel Perm/Temp is Paid
 IF DB1.Repayment_Status = 'P';

 EXECUTE FUNCTION(Chg Tattoo Header Job CH) TYPE(CHGOBJ) FILE(PKDOREP)           AB1177568;
 PARAMETER(DB1.Tattoo_Job_Sel_Name);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.Tattoo_Job_Sel_Sort_Fld);
 PARAMETER('R');
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 // PAR.Count USR = PAR.Count USR + CON.1
 PAR.Count_USR = PAR.Count_USR + 1;

 ENDIF;

 ENDIF;

 //?USER: Exit processing

 //?Update the Payment Parms to the current date
 CASE;

 // IF PAR.Count USR is Greater than 1
 IF PAR.Count_USR > 1;

 // AND PAR.Tattoo Job Sel Perm/Temp is Paid
 AND PAR.Repayment_Status = 'P';

 EXECUTE FUNCTION(Chg Payment Processing CH) TYPE(CHGOBJ) FILE(PKC4REP)          AB1146791;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(JOB.*Job_date);
 PARAMETER(1);
 PARAMETER('N');
 PARAMETER('N');
 PARAMETER(*ZERO);
 PARAMETER('N');
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 ENDIF;

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// Send information message - '&2 Repayment records marked as &1'
MESSAGE(PRK1534 *INFO);
MSGPARM('Repaid');
MSGPARM(LCL.Count_USR);

ENDIF;

ENDDO;

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

CASE;

// IF RCD.*SFLSEL is Select Option 5
IF RCD.*SFLSEL = '5'/'5';

//?Display record
DO;

// Call program Dsp Ttto Hdr Job Sel  PV.
CALL PROGRAM(Dsp Ttto Hdr Job Sel  PV) ('PWIBPVR');
PARAMETER(CTL.Tattoo_Job_Sel_Name);
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);

ENDDO;

// IF RCD.*SFLSEL is Select Option 6
IF RCD.*SFLSEL = '6'/'6';

//?Unpay Tattoo
DO;

CASE;

// IF RCD.Tattoo Job Sel Perm/Temp is Eligible to Unpay
IF RCD.Repayment_Status = *BLANK/'P'/'R';

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER('HPEREPAYBU');
PARAMETER(LCL.System_Value_Alpha_USR);

//?Breakout Repayment Backup file values
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?1. Backup Status (position 1)
// LCL.File Backup Status USR = SUBSTRING(LCL.System Value Alpha    USR,CON.1,CON.1)
LCL.File_Backup_Status_USR = SUBSTRING(LCL.System_Value_Alpha_USR:1:1);

//?2. Date of Backup (positions 2-8)
// LCL.Date Alpha USR = SUBSTRING(LCL.System Value Alpha    USR,CON.2,CON.7)
LCL.Date_Alpha_USR = SUBSTRING(LCL.System_Value_Alpha_USR:2:7);

// LCL.Last Run Date = CVTVAR(LCL.Date Alpha USR)
LCL.Last_Run_Date = CVTVAR(LCL.Date_Alpha_USR);

// LCL.Date From Convert USR = CVTVAR(LCL.Last Run Date)
LCL.Date_From_Convert_USR = CVTVAR(LCL.Last_Run_Date);

//?3. Last file backed up (positions 9 - 18)
// LCL.File = SUBSTRING(LCL.System Value Alpha    USR,CON.9,CON.10)
LCL.File = SUBSTRING(LCL.System_Value_Alpha_USR:9:10);

ENDIF;

//?Determine screen backup message
CASE;

// IF LCL.File Backup Status USR is Backup completed
IF LCL.File_Backup_Status_USR = 'C';

//?If Backup Date <> Job Date, files not backed up
CASE;

// IF LCL.Last Run Date NE JOB.*Job date
IF LCL.Last_Run_Date <> JOB.*Job_date;

// Send error message - 'Cannot unpay Tattoo.  Repayment file backup not completed.'
ERROR(PRK1519);
MSGPARM(RCD.*SFLSEL);

//?If Backup Date <> Job Date, files not backed up
// IF LCL.Last Run Date EQ JOB.*Job date
IF LCL.Last_Run_Date = JOB.*Job_date;

//?If record is paid, make it unpaid
CASE;

// IF RCD.TH Payment Sts is Paid Producer
IF RCD.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

// OR RCD.TH Payment Sts is Unpaid Producer
OR RCD.TH_Payment_Sts = 'ML'/'SL'/'SC'/'IC'/'IL'/*BLANK;

// Call program Pmt Sel Re-Ev/Tattoo  PV.
CALL PROGRAM(Pmt Sel Re-Ev/Tattoo  PV) ('PKBAPVR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(*NO);

//?If F3 pressed, do not reload subfile; ELSE update record
CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// RCD.*SFLSEL = CND.*Reset to blanks
RCD.*SFLSEL = *BLANK;

//?If F3 pressed, do not reload subfile; ELSE update record
// IF *OTHERWISE
IF *OTHERWISE;

//?Use RTVOBJ to update Payment Processing Parms with Date
//?Use RTVOBJ to update held over record if there is one
EXECUTE FUNCTION(Chg Tattoo Hdr JS HO  RT) TYPE(RTVOBJ) FILE(PKDOREP)           AB1349705;
PARAMETER(RCD.Tattoo_Job_Sel_Name);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.Tattoo_Job_Sel_Sort_Fld);
PARAMETER('U');
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Tattoo Header Job CH) TYPE(CHGOBJ) FILE(PKDOREP)           AB1177568;
 PARAMETER(PAR.Tattoo_Job_Sel_Name);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.Tattoo_Job_Sel_Sort_Fld);
 PARAMETER(PAR.Repayment_Status);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?If record is paid, make it unpaid
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Tattoo is already unpaid.'
ERROR(PRK1516);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?Determine screen backup message
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Cannot unpay Tattoo.  Repayment file backup not completed.'
ERROR(PRK1519);
MSGPARM(RCD.*SFLSEL);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Cannot unpay Tattoo.  Status is already Unpaid or the Tattoo is Transferred
ERROR(PRK1528);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDDO;

// IF RCD.*SFLSEL is Select Option 9
IF RCD.*SFLSEL = '9'/'9';

//?Mark Trucker as Paid
DO;

EXECUTE FUNCTION(Chg Trucker Pymt Sts  CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1348770;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER('PT');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


ENDDO;

// IF RCD.*SFLSEL is Lock
IF RCD.*SFLSEL = 'L';

//?Lock Buy Order Header
DO;

EXECUTE FUNCTION(Chg BOH Status-Repay  CH) TYPE(CHGOBJ) FILE(PKAWCPP)           AB1347375;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER('L');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


// RCD.BOH Status = CND.Locked
RCD.BOH_Status = 'L';

ENDDO;

// IF RCD.*SFLSEL is Slaughter
IF RCD.*SFLSEL = 'S';

//?Mark Tattoo Process Code as Slaughter
DO;

//?If Unpaid AND Process Code is Payment AND Repayment Sts is Unpaid
CASE;

// IF RCD.TH Payment Sts is Unpaid Producer
IF RCD.TH_Payment_Sts = 'ML'/'SL'/'SC'/'IC'/'IL'/*BLANK;

// AND RCD.THP Process Code is Payment
AND RCD.THP_Process_Code = 'PAYMNT';

// AND RCD.Repayment Status is Unpaid
AND RCD.Repayment_Status = 'U';

EXECUTE FUNCTION(Chg TH Process Code   CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1351659;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER('SLG');

// RCD.THP Process Code = CND.Slaughter
RCD.THP_Process_Code = 'SLG';

ENDIF;

ENDDO;

// IF RCD.*SFLSEL is Payment
IF RCD.*SFLSEL = 'P';

//?Mark Tattoo Process Code as Payment
DO;

//?If Unpaid AND Process Code is Payment AND Repayment Sts is Unpaid
CASE;

// IF RCD.TH Payment Sts is Unpaid Producer
IF RCD.TH_Payment_Sts = 'ML'/'SL'/'SC'/'IC'/'IL'/*BLANK;

// AND RCD.THP Process Code is Slaughter
AND RCD.THP_Process_Code = 'SLG';

// AND RCD.Repayment Status is Unpaid
AND RCD.Repayment_Status = 'U';

EXECUTE FUNCTION(Chg TH Process Code   CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1351659;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER('PAYMNT');

// RCD.THP Process Code = CND.Payment
RCD.THP_Process_Code = 'PAYMNT';

ENDIF;

ENDDO;

ENDIF;

