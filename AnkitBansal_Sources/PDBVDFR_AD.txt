// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDBVDFR
// ?Date: 14.08.2025 Time: 03:33:55
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

//?***** Change Log and Comments
DO;

//?** 04/12/2010 LJB P000198  Changed Fax processing to Fax and/or
//?** Change Fax Invoice Flag to always default to "Y".
//?** Flag needs to be set so the wf record is not deleted before
//?** the invoice is faxed or emailed.
ENDDO;

//?USER: Initialize subfile control

CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
PARAMETER(CTL.Company_Number);
PARAMETER('INVPASTDUE');
PARAMETER(PAR.Days_Past_Due_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.Days Past Due  USR = PAR.Days Past Due  USR * CON.-1 *
PAR.Days_Past_Due_USR = PAR.Days_Past_Due_USR * -1;

// CTL.Due Date = JOB.*Job date + PAR.Days Past Due  USR *DAYS
CTL.Due_Date = DATEINCR(JOB.*Job_date PAR.Days_Past_Due_USR 'DY' 1111111 'NONE' 'N' 1);

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDIF;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize subfile record from DBF record

//?Select by Company and Due Date
CASE;

// IF DB1.Company Number EQ CTL.Company Number
IF DB1.Company_Number = CTL.Company_Number;

// AND DB1.Due Date LE CTL.Due Date
AND ( DB1.Due_Date <= CTL.Due_Date;

// OR CTL.Due Date is not entered
OR CTL.Due_Date = *ZERO );

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(RCD.AR_Customer_Number);
PARAMETER(RCD.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

//?Select by Company and Due Date
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// PAR.Status - Y or N = CND.blank
PAR.Status_Y_or_N = *BLANK;

//?** Search if customer name is not blanks
CASE;

// IF CTL.Customer Name is Not Blank
IF CTL.Customer_Name <> *BLANK;

//?** Change the input to ctl context and output to wrk context then
//?** pass the work field to the qclscan program   09/06/06 LJB L60906A
//?** Then test the results of the qclscan search
// LCL.First Letter 1 USR = SUBSTRING(CTL.Customer Name,CON.1,CON.1)
LCL.First_Letter_1_USR = SUBSTRING(CTL.Customer_Name:1:1);

// Execute function CVT Str to Upper Alpha US.
EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
PARAMETER(CTL.Customer_Name);
PARAMETER(WRK.Case_Upper_Field);
{
 PDWEUFR:  PGM PARM(&STRIN &STROUT)

 CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
}


CASE;

// IF LCL.First Letter 1 USR is *
IF LCL.First_Letter_1_USR = *;

// Call program CLC Call Qclscan       UP.
CALL PROGRAM(CLC Call Qclscan       UP) ('QCLSCAN');
PARAMETER(RCD.Name);
PARAMETER(30);
PARAMETER(1);
PARAMETER(WRK.Case_Upper_Field);
PARAMETER(30);
PARAMETER(1);
PARAMETER(1);
PARAMETER(*);
PARAMETER(WRK.USR_Qclscan_Result);

CASE;

// IF WRK.USR Qclscan Result ? is Does contain
IF WRK.USR_Qclscan_Result > 0;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Execute function CVT Str to Upper Alpha US.
EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
PARAMETER(RCD.Name);
PARAMETER(RCD.USR_Name);
{
 PDWEUFR:  PGM PARM(&STRIN &STROUT)

 CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
}


CASE;

// IF RCD.USR Name LT WRK.Case Upper Field
IF RCD.USR_Name < WRK.Case_Upper_Field;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

// RCD.Remaining Bal 8.2 USR = RCD.Remaining Balance Due
RCD.Remaining_Bal_8_2_USR = RCD.Remaining_Balance_Due;

//?USER: Process subfile control (Pre-confirm)

//?Select Company
CASE;

// IF CTL.*CMD key is CF04
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Company Number
AND PGM.*Cursor_field = CTL.Company_Number;

// Call program SEL Co By Number       SR.
CALL PROGRAM(SEL Co By Number       SR) ('PDMESRR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Company_Name);

ENDIF;

EXECUTE FUNCTION(RTV Chk Company Exist  RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1192393;
PARAMETER(CTL.Company_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Company not found or Invalid.'
ERROR(USR2270);
MSGPARM(CTL.Company_Number);

ENDIF;

CASE;

// IF CTL.USR Name NE CTL.Customer Name
IF CTL.USR_Name <> CTL.Customer_Name;

// CTL.USR Name = CTL.Customer Name
CTL.USR_Name = CTL.Customer_Name;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?Reprint Invoice
CASE;

// IF RCD.*SFLSEL is *Print
IF RCD.*SFLSEL = '6'/'6';

// PAR.Company Number Pass   USR = RCD.Company Number
PAR.Company_Number_Pass_USR = RCD.Company_Number;

// PAR.Order Number 2  PASS  USR = RCD.Order Number Ref
PAR.Order_Number_2_PASS_USR = RCD.Order_Number_Ref;

//?Use Usr Active Flag to signal Invoice print is a reprint
// WRK.USR Active Flag = CND.Record Found
WRK.USR_Active_Flag = 'Y';

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// LCL.A/R Customer Num Pass USR = RCD.A/R Customer Number
LCL.A_R_Customer_Num_Pass_USR = RCD.AR_Customer_Number;

EXECUTE FUNCTION(Rtv One Invoice /PO   RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1801817;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(LCL.One_Invoice_Per_PO);
{
 //?USER: Processing if Data record not found

 // PAR.One Invoice Per PO = CND.No
 PAR.One_Invoice_Per_PO = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.Job Name CDE = JOB.*JOB
PAR.Job_Name_CDE = JOB.*JOB;

CASE;

// IF LCL.One Invoice Per PO is Yes
IF LCL.One_Invoice_Per_PO = 'Y';

// LCL.Job Number USR = CVTVAR(JOB.*Job number)
LCL.Job_Number_USR = CVTVAR(JOB.*Job_number);

EXECUTE FUNCTION(RTV Info for Invc Prt  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1324121;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number_Ref);
PARAMETER(LCL.Order_Type_Sales);
PARAMETER(LCL.AR_Customer_Number);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(LCL.Ship_To_Name);
PARAMETER(LCL.Ship_To_Address_Line_1);
PARAMETER(LCL.Ship_To_Address_Line_2);
PARAMETER(LCL.Ship_To_Address_Line_3);
PARAMETER(LCL.Ship_To_City);
PARAMETER(LCL.Ship_To_State_Code);
PARAMETER(LCL.Ship_To_Zip_Postal_Code);
PARAMETER(LCL.Bill_to_Customer);
PARAMETER(LCL.Bill_to_Name);
PARAMETER(LCL.Bill_to_Address_Line_1);
PARAMETER(LCL.Bill_to_Address_Line_2);
PARAMETER(LCL.Bill_to_Address_Line_3);
PARAMETER(LCL.Bill_to_City);
PARAMETER(LCL.Bill_to_State_Code);
PARAMETER(LCL.Bill_to_Zip_Postal_Code);
PARAMETER(LCL.Customer_Purchase_Order_#);
PARAMETER(LCL.Order_Date);
PARAMETER(LCL.Actual_Shipped_Date);
PARAMETER(LCL.Terms_Code);
PARAMETER(LCL.Carrier_Code);
PARAMETER(LCL.Order_Value_Total);
PARAMETER(LCL.Order_Weight_Total);
PARAMETER(LCL.Load_ID);
PARAMETER(LCL.Sales_Route_Code);
PARAMETER(LCL.Invoice_Number);
PARAMETER(LCL.Invoice_Date);
PARAMETER(LCL.Billing_Activity_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Crt WF Invoice/Combine CR) TYPE(CRTOBJ) FILE(PMAFCPP)          AC1802039;
PARAMETER(PAR.Job_Name_CDE);
PARAMETER(LCL.Job_Number_USR);
PARAMETER(RCD.Order_Number_Ref);
PARAMETER(LCL.Bill_to_Name);
PARAMETER(LCL.Order_Value_Total);
PARAMETER(LCL.Order_Weight_Total);
PARAMETER(LCL.Ship_To_Name);
PARAMETER(WRK.Fax_Invoice_Flag);
PARAMETER(LCL.One_Invoice_Per_PO);
PARAMETER(LCL.Customer_Purchase_Order_#);
PARAMETER('N');
PARAMETER(LCL.Billing_Activity_Type);
PARAMETER(LCL.Actual_Shipped_Date);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(LCL.Bill_to_Customer);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER('A');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  //?*** Set RECORD STATUS field. ***
  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  //?*** Set CREATE fields. ***
  // PAR.Create Date = JOB.*Job date
  PAR.Create_Date = JOB.*Job_date;

  // PAR.Create Time = JOB.*Job time
  PAR.Create_Time = JOB.*Job_time;

  // PAR.Create User = JOB.*USER
  PAR.Create_User = JOB.*USER;

  // PAR.Create Program = JOB.*PROGRAM
  PAR.Create_Program = JOB.*PROGRAM;

  //?*** Set CHANGE fields. ***
  // PAR.Change Date = CON.*ZERO
  PAR.Change_Date = *ZERO;

  // PAR.Change Time = CON.*ZERO
  PAR.Change_Time = *ZERO;

  // PAR.Change User = CON.*BLANK
  PAR.Change_User = *BLANK;

  // PAR.Change Program = CON.*BLANK
  PAR.Change_Program = *BLANK;

 }

}


ENDIF;

// Call program PRT Invc/Pre-Invc Reg  UP.
CALL PROGRAM(PRT Invc/Pre-Invc Reg  UP) ('PDTLUPR');
PARAMETER(PGM.*Return_code);
PARAMETER('PDR4PCLP');
PARAMETER(JOB.*JOB);
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Job_Name_CDE);
PARAMETER(LCL.Job_Number_USR);
PARAMETER(1);
PARAMETER('Reprint Invoice');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Order_Number_2_PASS_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(WRK.USR_Active_Flag);
PARAMETER('N');
PARAMETER('N');
PARAMETER('I');
PARAMETER(LCL.A_R_Customer_Num_Pass_USR);
PARAMETER('OR');

//?Message if printed
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Fax/Email Invoice
CASE;

// IF RCD.*SFLSEL is Fax
IF RCD.*SFLSEL = '7'/'7';

//?** Don't check flag. If customer is in the file, send   P000198
//?** Flag needs to be set here so the wf record is not
//?** deleted before the invoice is faxed or emailed.
// WRK.Fax Invoice Flag = CND.Automatically Fax Invoice
WRK.Fax_Invoice_Flag = 'Y';

//?Fax or email if requested                             P000198
CASE;

// IF WRK.Fax Invoice Flag is No Automatic Fax Invoice
IF WRK.Fax_Invoice_Flag = 'N';

// Send error message - 'Fax Invoice Flag is set to NO for A/R Customer &1'
ERROR(USR2898);
MSGPARM(RCD.AR_Customer_Number);

//?Fax or email if requested                             P000198
// IF *OTHERWISE
IF *OTHERWISE;

//?First time only:  prompt for night run
CASE;

// IF PAR.PRT Night Queue  USR is Not entered
IF PAR.PRT_Night_Queue_USR = *BLANK;

// AND PAR.Status - Y or N is blank
AND PAR.Status_Y_or_N = *BLANK;

// Call program PMT Print Opts Nightq  PV.
CALL PROGRAM(PMT Print Opts Nightq  PV) ('PDXOPVR');
PARAMETER('Fax/Email Invc Reminder');
PARAMETER(PAR.PRT_Night_Queue_USR);
PARAMETER('OMS');

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// PAR.Status - Y or N = CND.no
PAR.Status_Y_or_N = 'N';

ENDIF;

ENDIF;

//?Set night queue
CASE;

// IF PAR.PRT Night Queue  USR is JOBD
IF PAR.PRT_Night_Queue_USR = *JOBD;

// PAR.Job Name CDE = JOB.*JOB
PAR.Job_Name_CDE = JOB.*JOB;

//?Set night queue
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Job Name CDE = CON.NIGHTFAXR
PAR.Job_Name_CDE = 'NIGHTFAXR';

ENDIF;

CASE;

// IF PAR.Status - Y or N is no
IF PAR.Status_Y_or_N = 'N';

//?     don't do anything; this means they're not going to do this.
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Company Number Pass   USR = RCD.Company Number
PAR.Company_Number_Pass_USR = RCD.Company_Number;

// PAR.Order Number 2  PASS  USR = RCD.Order Number Ref
PAR.Order_Number_2_PASS_USR = RCD.Order_Number_Ref;

// PAR.Customer Number Pass  USR = RCD.A/R Customer Number
PAR.Customer_Number_Pass_USR = RCD.AR_Customer_Number;

//?Use Usr Active Flag to signal Invoice print is a Reprint
// WRK.USR Active Flag = CND.Record Found
WRK.USR_Active_Flag = 'Y';

EXECUTE FUNCTION(RTV Info for Invc Prt  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1324121;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number_Ref);
PARAMETER(LCL.Order_Type_Sales);
PARAMETER(LCL.AR_Customer_Number);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(LCL.Ship_To_Name);
PARAMETER(LCL.Ship_To_Address_Line_1);
PARAMETER(LCL.Ship_To_Address_Line_2);
PARAMETER(LCL.Ship_To_Address_Line_3);
PARAMETER(LCL.Ship_To_City);
PARAMETER(LCL.Ship_To_State_Code);
PARAMETER(LCL.Ship_To_Zip_Postal_Code);
PARAMETER(LCL.Bill_to_Customer);
PARAMETER(LCL.Bill_to_Name);
PARAMETER(LCL.Bill_to_Address_Line_1);
PARAMETER(LCL.Bill_to_Address_Line_2);
PARAMETER(LCL.Bill_to_Address_Line_3);
PARAMETER(LCL.Bill_to_City);
PARAMETER(LCL.Bill_to_State_Code);
PARAMETER(LCL.Bill_to_Zip_Postal_Code);
PARAMETER(LCL.Customer_Purchase_Order_#);
PARAMETER(LCL.Order_Date);
PARAMETER(LCL.Actual_Shipped_Date);
PARAMETER(LCL.Terms_Code);
PARAMETER(LCL.Carrier_Code);
PARAMETER(LCL.Order_Value_Total);
PARAMETER(LCL.Order_Weight_Total);
PARAMETER(LCL.Load_ID);
PARAMETER(LCL.Sales_Route_Code);
PARAMETER(LCL.Invoice_Number);
PARAMETER(LCL.Invoice_Date);
PARAMETER(LCL.Billing_Activity_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(CRT PD Invoice List Wk CR) TYPE(CRTOBJ) FILE(PDJ4CPP)          AC1339739;
PARAMETER(PAR.Job_Name_CDE);
PARAMETER(RCD.Order_Number_Ref);
PARAMETER(LCL.Order_Value_Total);
PARAMETER(LCL.Order_Weight_Total);
PARAMETER(LCL.Ship_To_Name);
PARAMETER(LCL.Bill_to_Name);
PARAMETER(WRK.Fax_Invoice_Flag);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.AR_Customer_Number);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
{
 //?USER: Processing if Data record already exists

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// PAR.Status - Y or N = CND.yes
PAR.Status_Y_or_N = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send information message - 'Invoice &1 already waiting to Fax'
MESSAGE(USR2509 *INFO);
MSGPARM(RCD.Invoice_Number);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?USER: Final processing (Pre-confirm)

//?Fax/Email Invoice
CASE;

// IF PAR.Status - Y or N is yes
IF PAR.Status_Y_or_N = 'Y';

// PAR.Cover Sheet Name = CON.'SI'
PAR.Cover_Sheet_Name = ''SI'';

// PAR.Use Credit Contact Info = CND.yes
PAR.Use_Credit_Contact_Info = 'Y';

// Call program PRC Fax Invoice        UP.
CALL PROGRAM(PRC Fax Invoice        UP) ('PDVMUPC');
PARAMETER(PGM.*Return_code);
PARAMETER('PDVMPCLP');
PARAMETER('OMS');
PARAMETER('Fax/Email Invoice');
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Customer_Number_Pass_USR);
PARAMETER(WRK.Order_Number_2_PASS_USR);
PARAMETER(WRK.USR_Active_Flag);
PARAMETER(PAR.PRT_Night_Queue_USR);
PARAMETER(PAR.Job_Name_CDE);
PARAMETER(PAR.Cover_Sheet_Name);
PARAMETER(PAR.Use_Credit_Contact_Info);

//?Message if printed
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Send information message - 'Fax invoices have been submitted to print.'
MESSAGE(USR2446 *INFO);

ENDIF;

ENDIF;

// PAR.PRT Printer Device = CON.*BLANK
PAR.PRT_Printer_Device = *BLANK;

// PAR.Status - Y or N = CND.blank
PAR.Status_Y_or_N = *BLANK;

// PAR.PRT Night Queue  USR = CON.*BLANK
PAR.PRT_Night_Queue_USR = *BLANK;

