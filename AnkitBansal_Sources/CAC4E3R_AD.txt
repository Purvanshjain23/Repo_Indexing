// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for CAC4E3R
// ?Date: 14.08.2025 Time: 03:28:00
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('C/S');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.USR Display field = CND.no
PAR.USR_Display_field = 'N';

// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Printer Device = CND.Not entered
PAR.PRT_Printer_Device = *BLANK;

//?USER: Initialize key screen

// KEY.Accounting Company Number = PAR.Accounting Company Number
KEY.Company_Number = PAR.Company_Number;

EXECUTE FUNCTION(RTV Installation Qst   RT) TYPE(RTVOBJ) FILE(CAAAREP)          AC1102976;
PARAMETER('GY');
PARAMETER(PAR.Inventory_Status);
PARAMETER(PAR.Order_Processing_Status);
PARAMETER(WRK.Sales_Analysis_Status);
PARAMETER(PAR.Purchasing_Status);
PARAMETER(PAR.General_Ledger_Status);
PARAMETER(PAR.Accounts_Payable_Status);
PARAMETER(PAR.Accounts_Receivable_Sts);
PARAMETER(WRK.Payroll_Status);
PARAMETER(WRK.Serialized_Inventory_Sts);
PARAMETER(WRK.Single_Level_Kit_Status);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Validate key screen

// Execute function SET Move 'V1' Co Nbr   US.
EXECUTE FUNCTION(SET Move 'V1' Co Nbr   US) TYPE(EXCUSRSRC) ('PDGAUFR');
PARAMETER(WRK.USR_Search_Request);
{
 C                     MOVELV1AIC3    #OELST
}


CASE;

// IF WRK.USR Search Request is Search requested
IF WRK.USR_Search_Request = '?';

// Call program SEL Company by Number  SR.
CALL PROGRAM(SEL Company by Number  SR) ('CAAJSRR');
PARAMETER(KEY.Company_Number);

ENDIF;

//?USER: Initialize detail screen (new record)

// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

// DTL.Status Description = Condition name of DTL.Record Status
DTL.Status_Description = RTVCND(DTL.Record_Status);

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(KEY.Company_Number);
PARAMETER(DTL.USR_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Set defaults if A/R is active
CASE;

// IF PAR.Accounts Receivable Sts is yes
IF PAR.Accounts_Receivable_Sts = 'Y';

// DTL.A/R Open Item/Balance Fwd = CND.Open Item
DTL.A_R_Open_Item_Balance_Fwd = 'O';

ENDIF;

EXECUTE FUNCTION(RTV Text Value         RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1142687;
PARAMETER('DFTCS');
PARAMETER(WRK.System_Value_Alpha);
{
 //?USER: Process Data record

 // PAR.System Value Alpha = DB1.System Value Alpha
 PAR.System_Value_Alpha = DB1.System_Value_Alpha;

}


//?Load contract status based on system value
CASE;

// IF WRK.System Value Alpha is Equal to Y
IF WRK.System_Value_Alpha = 'Y';

// DTL.Contract Status = CND.yes
DTL.Contract_Status = 'Y';

//?Load contract status based on system value
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Contract Status = CND.no
DTL.Contract_Status = 'N';

ENDIF;

// DTL.Catch Weight Status = CND.no
DTL.Catch_Weight_Status = 'N';

EXECUTE FUNCTION(RTV Text Value         RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1142687;
PARAMETER('ENBCWP');
PARAMETER(WRK.System_Value_Alpha);
{
 //?USER: Process Data record

 // PAR.System Value Alpha = DB1.System Value Alpha
 PAR.System_Value_Alpha = DB1.System_Value_Alpha;

}


//?Load catchweight status based on system value
CASE;

// IF WRK.System Value Alpha is Equal to Y
IF WRK.System_Value_Alpha = 'Y';

EXECUTE FUNCTION(RTV Text Value         RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1142687;
PARAMETER('DFTCWP');
PARAMETER(WRK.System_Value_Alpha);
{
 //?USER: Process Data record

 // PAR.System Value Alpha = DB1.System Value Alpha
 PAR.System_Value_Alpha = DB1.System_Value_Alpha;

}


CASE;

// IF WRK.System Value Alpha is Equal to Y
IF WRK.System_Value_Alpha = 'Y';

// DTL.Catch Weight Status = CND.yes
DTL.Catch_Weight_Status = 'Y';

ENDIF;

ENDIF;

//?Set defaults if P/O is active
CASE;

// IF PAR.Purchasing Status is yes
IF PAR.Purchasing_Status = 'Y';

// DTL.PO Matching Required = CND.yes
DTL.PO_Matching_Required = 'Y';

//?Set defaults if P/O is active
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.PO Matching Required = CND.no
DTL.PO_Matching_Required = 'N';

ENDIF;

//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.USR_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV SR Desc,person     RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1270657;
PARAMETER(DB1.Sales_Route_Code);
PARAMETER(WRK.Sales_Route_Description);
PARAMETER(WRK.Salesperson_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
PARAMETER(WRK.Salesperson_Code);
PARAMETER(DTL.USR_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Terms              RT) TYPE(RTVOBJ) FILE(CAAOREP)          AC1103643;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Customer_Terms_Code);
PARAMETER(DTL.Customer_Terms_Code_Descr);
PARAMETER(WRK.Terms_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Terms              RT) TYPE(RTVOBJ) FILE(CAAOREP)          AC1103643;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Vendor_Terms_Code);
PARAMETER(DTL.Vendor_Terms_Code_Descrip);
PARAMETER(WRK.Terms_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Manager Descript   RT) TYPE(RTVOBJ) FILE(CAALREP)          AC1160582;
PARAMETER(DB1.Manager_Level_Code);
PARAMETER(DTL.Sales_Territory_Descripti);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Name, Status       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1260598;
PARAMETER(DB1.Carrier_Code);
PARAMETER(DTL.Name);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Active Description RT) TYPE(RTVOBJ) FILE(CAACREP)          AC1287387;
PARAMETER(DB1.Alt_Remittance_State);
PARAMETER(2ND.State_Description);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.USR Description - 15 = Condition name of DB1.A/R Open Item/Balance Fwd
DTL.USR_Description_15 = RTVCND(DB1.A_R_Open_Item_Balance_Fwd);

// DTL.Yes/No Description = Condition name of DB1.Contract Status
DTL.Yes_No_Description = RTVCND(DB1.Contract_Status);

// DTL.Yes/No Description 2 = DB1.Catch Weight Status
DTL.Yes_No_Description_2 = DB1.Catch_Weight_Status;

// DTL.Status Description = Condition name of DTL.Record Status
DTL.Status_Description = RTVCND(DTL.Record_Status);

EXECUTE FUNCTION(Rtv Price Method Desc  RT) TYPE(RTVOBJ) FILE(PDIHREP)          AC1298165;
PARAMETER(2ND.Price_Method_Default_C_M);
PARAMETER(2ND.Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Price Method Desc  RT) TYPE(RTVOBJ) FILE(PDIHREP)          AC1298165;
PARAMETER(2ND.Price_Method_Default_D_M);
PARAMETER(2ND.Description_Line_Two);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Validate detail screen fields

//?Select state
CASE;

// IF DTL.*CMD key is *Prompt
IF ( DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> 2ND.Alt Remittance State
AND PGM.*Cursor_field = 2ND.Alt_Remittance_State );

// OR 2ND.Alt Remittance State is Select State
OR 2ND.Alt_Remittance_State = '?';

// OR 2ND.Alt Remittance State is Select State 2
OR 2ND.Alt_Remittance_State = ' ?';

// Call program SEL State              SR.
CALL PROGRAM(SEL State              SR) ('CAAHSRR');
PARAMETER(2ND.Alt_Remittance_State);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

// DTL.USR Description - 15 = Condition name of DTL.A/R Open Item/Balance Fwd
DTL.USR_Description_15 = RTVCND(DTL.A_R_Open_Item_Balance_Fwd);

// DTL.Yes/No Description = Condition name of DTL.Contract Status
DTL.Yes_No_Description = RTVCND(DTL.Contract_Status);

// DTL.Yes/No Description 2 = DTL.Catch Weight Status
DTL.Yes_No_Description_2 = DTL.Catch_Weight_Status;

// DTL.Status Description = Condition name of DTL.Record Status
DTL.Status_Description = RTVCND(DTL.Record_Status);

EXECUTE FUNCTION(RTV Prc MthTyp,Dsc-Sys RT) TYPE(RTVOBJ) FILE(PDIHREP)          AC1366707;
PARAMETER(DTL.Company_Number);
PARAMETER(2ND.Price_Method_Default_C_M);
PARAMETER(2ND.Description);
PARAMETER(WRK.Price_Method_Type);
PARAMETER('O');
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Validate C/M default
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

CASE;

// IF WRK.Price Method Type is Extended or Manual
IF WRK.Price_Method_Type = 'X'/'M';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Price Method is invalid for Credit/Debit memos'
ERROR(USR1971);
MSGPARM(2ND.Price_Method_Default_C_M);

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Prc MthTyp,Dsc-Sys RT) TYPE(RTVOBJ) FILE(PDIHREP)          AC1366707;
PARAMETER(DTL.Company_Number);
PARAMETER(2ND.Price_Method_Default_D_M);
PARAMETER(2ND.Description_Line_Two);
PARAMETER(WRK.Price_Method_Type);
PARAMETER('O');
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Validate D/M default
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

CASE;

// IF WRK.Price Method Type is Extended or Manual
IF WRK.Price_Method_Type = 'X'/'M';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Price Method is invalid for Credit/Debit memos'
ERROR(USR1971);
MSGPARM(2ND.Price_Method_Default_D_M);

ENDIF;

ENDIF;

//?USER: Validate detail screen relations

//?Vendor terms must be entered if A/P installed
CASE;

// IF PAR.Accounts Payable Status is yes
IF PAR.Accounts_Payable_Status = 'Y';

CASE;

// IF DTL.Vendor Terms Code is blank
IF DTL.Vendor_Terms_Code = *BLANK;

// Send error message - 'Accounts Payable is installed, must enter vendor terms code.'
ERROR(USR0349);
MSGPARM(DTL.Vendor_Terms_Code);

ENDIF;

ENDIF;

//?Customer terms must be entered if A/R installed
CASE;

// IF PAR.Accounts Receivable Sts is yes
IF PAR.Accounts_Receivable_Sts = 'Y';

CASE;

// IF DTL.Customer Terms Code is blank
IF DTL.Customer_Terms_Code = *BLANK;

// Send error message - 'Accounts Receivable is installed, must enter customer terms code.'
ERROR(USR0350);
MSGPARM(DTL.Customer_Terms_Code);

ENDIF;

ENDIF;

//?If OP installed, must enter Region
CASE;

// IF PAR.Order Processing Status is yes
IF PAR.Order_Processing_Status = 'Y';

CASE;

// IF DTL.Region Code is blanks
IF DTL.Manager_Level_Code = *BLANK;

// Send error message - 'Order Processing is installed, please enter sales territory.'
ERROR(USR0077);
MSGPARM(DTL.Manager_Level_Code);

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV SR Desc,person     RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1270657;
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(WRK.Sales_Route_Description);
PARAMETER(WRK.Salesperson_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
PARAMETER(WRK.Salesperson_Code);
PARAMETER(DTL.USR_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Terms              RT) TYPE(RTVOBJ) FILE(CAAOREP)          AC1103643;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Customer_Terms_Code);
PARAMETER(DTL.Customer_Terms_Code_Descr);
PARAMETER(WRK.Terms_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Terms              RT) TYPE(RTVOBJ) FILE(CAAOREP)          AC1103643;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Vendor_Terms_Code);
PARAMETER(DTL.Vendor_Terms_Code_Descrip);
PARAMETER(WRK.Terms_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Manager Descript   RT) TYPE(RTVOBJ) FILE(CAALREP)          AC1160582;
PARAMETER(DTL.Manager_Level_Code);
PARAMETER(DTL.Sales_Territory_Descripti);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Name, Status       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1260598;
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Name);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Process F11=Purge
CASE;

// IF DTL.*CMD key is CF11
IF DTL.*CMD_key = '11';

// DTL.Record Status = CND.Deleted
DTL.Record_Status = 'D';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(CRT Company Defaults   CR) TYPE(CRTOBJ) FILE(CAAQREP)          AC1102537;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Credit_Limit);
PARAMETER(DTL.A_R_Open_Item_Balance_Fwd);
PARAMETER(DTL.Contract_Status);
PARAMETER(DTL.Catch_Weight_Status);
PARAMETER(DTL.Special_Instructions_2);
PARAMETER(DTL.Special_Instructions);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.PO_Matching_Required);
PARAMETER(DTL.Alt_Remittance_Address_1);
PARAMETER(DTL.Alt_Remittance_Address_2);
PARAMETER(DTL.Alt_Remittance_Address_3);
PARAMETER(DTL.Alt_Remittance_City);
PARAMETER(DTL.Alt_Remittance_State);
PARAMETER(DTL.Alt_Remittance_Zip);
PARAMETER(DTL.Cooler_Shrink_Percent);
PARAMETER(DTL.Manager_Level_Code);
PARAMETER(DTL.Customer_Terms_Code);
PARAMETER(DTL.Vendor_Terms_Code);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG Company Defaults   CH) TYPE(CHGOBJ) FILE(CAAQREP)          AC1102538;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Credit_Limit);
PARAMETER(DTL.A_R_Open_Item_Balance_Fwd);
PARAMETER(DTL.Contract_Status);
PARAMETER(DTL.Catch_Weight_Status);
PARAMETER(DTL.Special_Instructions_2);
PARAMETER(DTL.Special_Instructions);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.PO_Matching_Required);
PARAMETER(DTL.Alt_Remittance_Address_1);
PARAMETER(DTL.Alt_Remittance_Address_2);
PARAMETER(DTL.Alt_Remittance_Address_3);
PARAMETER(DTL.Alt_Remittance_City);
PARAMETER(DTL.Alt_Remittance_State);
PARAMETER(DTL.Alt_Remittance_Zip);
PARAMETER(DTL.Cooler_Shrink_Percent);
PARAMETER(DTL.Manager_Level_Code);
PARAMETER(DTL.Customer_Terms_Code);
PARAMETER(DTL.Vendor_Terms_Code);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


