// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POKDXFR
// ?Date: 14.08.2025 Time: 03:37:43
// ?------------------------------------------------------------------------------------------------

//?Execute user function

CASE;

// IF PAR.Quarter               USR is 1st quarter
IF PAR.Quarter_USR = '1';

// LCL.Order Date = CON.1030101
LCL.Order_Date = 1030101;

// LCL.To Date               USR = CON.1030331
LCL.To_Date_USR = 1030331;

// IF PAR.Quarter               USR is 2nd quarter
IF PAR.Quarter_USR = '2';

// LCL.Order Date = CON.1030401
LCL.Order_Date = 1030401;

// LCL.To Date               USR = CON.1030630
LCL.To_Date_USR = 1030630;

// IF PAR.Quarter               USR is 3rd quarter
IF PAR.Quarter_USR = '3';

// LCL.Order Date = CON.1030701
LCL.Order_Date = 1030701;

// LCL.To Date               USR = CON.1030930
LCL.To_Date_USR = 1030930;

// IF PAR.Quarter               USR is 4th quarter
IF PAR.Quarter_USR = '4';

// LCL.Order Date = CON.1031001
LCL.Order_Date = 1031001;

// LCL.To Date               USR = CON.1031231
LCL.To_Date_USR = 1031231;

ENDIF;

EXECUTE FUNCTION(RTV default Company    IF) TYPE(EXCINTFUN)                     AC1592222;
PARAMETER(PAR.Company_Number);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
 PARAMETER(JOB.*USER);
 PARAMETER(PAR.User_Code_Model);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.User Code Model is equal to blank
 IF PAR.User_Code_Model = *BLANK;

 EXECUTE FUNCTION(RTV Appl. Default Co   RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143068;
 PARAMETER(JOB.*USER);
 PARAMETER('P/S');
 PARAMETER(PAR.Company_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Appl. Default Co   RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143068;
 PARAMETER(PAR.User_Code_Model);
 PARAMETER('P/S');
 PARAMETER(PAR.Company_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

}


// PAR.Forward Sales Plcy-Fixed = CND.no
PAR.Forward_Sales_Plcy_Fixed = 'N';

// PAR.Forward Sales Plcy-Formul = CND.no
PAR.Forward_Sales_Plcy_Formul = 'N';

EXECUTE FUNCTION(Rtv Forward Sls Qrtly RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1621674;
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Order_Date);
PARAMETER(PAR.Forward_Sales_Plcy_Fixed);
PARAMETER(PAR.Forward_Sales_Plcy_Formul);
PARAMETER(LCL.To_Date_USR);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Order Date GE PAR.Order Date
 IF DB1.Order_Date >= PAR.Order_Date;

 // AND DB1.Order Date LE PAR.To Date               USR
 AND DB1.Order_Date <= PAR.To_Date_USR;

 // WRK.Date To               USR = DB1.Order Date + CON.30 *DAYS
 WRK.Date_To_USR = DATEINCR(DB1.Order_Date 30 'DY' 1111111 'NONE' 'N' 1);

 // WRK.Date Used for Calculation = DB1.Order Date + CON.90 *DAYS
 WRK.Date_Used_for_Calculation = DATEINCR(DB1.Order_Date 90 'DY' 1111111 'NONE' 'N' 1);

 EXECUTE FUNCTION(RTV Forward Sls Policy RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1620790;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(WRK.Date_To_USR);
 PARAMETER(WRK.Date_Used_for_Calculation);
 PARAMETER(PAR.Forward_Sales_Plcy_Fixed);
 PARAMETER(PAR.Forward_Sales_Plcy_Formul);
 {
  //?USER: Process Data record

  // WRK.Record Selected       USR = CND.no
  WRK.Record_Selected_USR = 'N';

  CASE;

  // IF DB1.Detail Line Status is Not cancelled
  IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

  CASE;

  // IF DB1.Extended Amount is not equal to zeros
  IF DB1.Extended_Amount <> *ZERO;

  // AND DB1.Unit Price is GT .01
  AND DB1.Unit_Price > .01;

  //?Fixed Rate Basis report Criteria
  CASE;

  // IF DB1.Requested Ship Date GE PAR.Date To               USR
  IF DB1.Requested_Ship_Date >= PAR.Date_To_USR;

  // AND DB1.Price Method Code is Manual
  AND DB1.Price_Method_Code = 'MAN';

  // WRK.Record Selected       USR = CND.yes
  WRK.Record_Selected_USR = 'Y';

  // PAR.Forward Sales Plcy-Fixed = CND.yes
  PAR.Forward_Sales_Plcy_Fixed = 'Y';

  ENDIF;

  //?Formula Based report Criteria
  CASE;

  // IF DB1.Requested Ship Date GE PAR.Date Used for Calculation
  IF DB1.Requested_Ship_Date >= PAR.Date_Used_for_Calculation;

  // AND DB1.Price Method Code is Market
  AND DB1.Price_Method_Code = 'MKT';

  // WRK.Record Selected       USR = CND.yes
  WRK.Record_Selected_USR = 'Y';

  // PAR.Forward Sales Plcy-Formul = CND.yes
  PAR.Forward_Sales_Plcy_Formul = 'Y';

  ENDIF;

  CASE;

  // IF WRK.Record Selected       USR is yes
  IF WRK.Record_Selected_USR = 'Y';

  EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
  PARAMETER(PAR.Sales_Route_Code);
  PARAMETER(LCL.Salesperson_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV Name, status       RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1260515;
  PARAMETER(LCL.Salesperson_Code);
  PARAMETER(LCL.Salesperson_Name);
  PARAMETER(LCL.Record_Status);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // LCL.Salesperson Name 12 = LCL.Salesperson Name
  LCL.Salesperson_Name_12 = LCL.Salesperson_Name;

  CASE;

  // IF DB1.Weight Ordered is Not equal zero
  IF DB1.Weight_Ordered <> *ZERO;

  // LCL.Weight Ordered = DB1.Weight Ordered / CON.100 *
  LCL.Weight_Ordered = DB1.Weight_Ordered / 100;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Weight Ordered = CON.*ZERO
  LCL.Weight_Ordered = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(Crt W013 Forward Sls  CR) TYPE(CRTOBJ) FILE(POA5CPP)           AC1620818;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Block_Order_Flag);
  PARAMETER(PAR.Order_Date);
  PARAMETER(PAR.Header_Status);
  PARAMETER(PAR.Order_Type_Sales);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Ship_To_Name);
  PARAMETER(PAR.Ship_To_City);
  PARAMETER(PAR.Ship_To_State_Code);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Quantity_Ordered);
  PARAMETER(DB1.Unit_Price);
  PARAMETER(DB1.Price_Method_Code);
  PARAMETER(LCL.Salesperson_Name_12);
  PARAMETER(LCL.Weight_Ordered);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set RECORD STATUS field. ***
    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

  }

  ENDIF;

  ENDIF;

  ENDIF;

 }

 ENDIF;

}


