// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDFLDFR
// ?Date: 14.08.2025 Time: 03:32:31
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Change Log
DO;

EXECUTE FUNCTION(E00519 Access by WHS  IF) TYPE(EXCINTFUN)                      AC1960775;
{
 //?Execute internal function

 //?---------- November 2009 PKD ----------
 //?*****  WW Cust/Order Inq O.E.  *****
 //?- Do not allow Transfer Co if Application WHS Restrict = Y.
 //?***** Edit Order Header ***** -TESTED 11/10/09
 //?-  Added validation on Warehouse Code.  If Application WHS Restrict
 //?is Yes, then only the Warehouse Code for O/P Application Code
 //?are allowed.  If the Application WHS Restrict is No, then the
 //?User is allowed access to all Active Warehouses.
 //?-  Changed the F4=Prompt to only display the Warehouses the
 //?User has access to if the Application WHS Restrict is Yes.
 //?***** Edit Order Detail Lines & Copy Order Template ***** TESTED 11/10
 //?-  Added validation for Item Code. For each application and
 //?Warehouse, addtional access control is defined for TF Exempt Code.
 //?Users that are restricted by Warehouse, they may also be restricted
 //?on the Items they are able to sell.
 //?-  Added validation on Order TF Exempt Code.  If the Customer is
 //?is Exempt, then they can only sell Exempt Product. (E00505)
 //?***** Edit Load Plan Order Entry *****
 //?-  Added WHS Code to the Control Context and Record Context.
 //?For Users that are Application WHS Restrict = Yes,
 //?the CTL.Warehouse Code will be restricted to the
 //?Warehouses that they have access to.
 //?-  CTL.Warehouse Code will be required for Users with
 //?Application Warehouse Controlled.
 //?-  Added Delivery State Code (Sail Port State) to the screen.
 //?It will default to the Ship To State Code.  It will be overriden
 //?to the Sail Port State if the Shipping Line and Port Delivery
 //?Terminal are entered in the Order Header Extent.
 //?-  Added subfile select for WHS and Delv ST.
 //?***** Edit Load Plan *****
 //?-  For Users that are Application WHS Restrict = Yes,
 //?the CTL.Warehouse Code will be restricted to the
 //?Warehouses that they have access to.
 //?-  CTL.Warehouse Code will be required for Users with
 //?Application Warehouse Controlled.
 //?-  CTL.USR Load Type---Default from the CTL.USR Warehosue Code
 //?for users that are Application WHS Restrict.
 //?***** Display Change Log/Accept Load (PDAOXFR) *****
 //?-  Deletes will not be accepted by Application WHS Restricted
 //?users because we do not know the Warehouse that was on the Load.
 //?-  If Application WHS Restrict is Yes, then only select the load
 //?for acceptance if at least one order on the load has a warehouse
 //?where the user has access.
 //?-  Reverse imaged Warehouse Code on the Display. The Users with
 //?Application WHS Restrict of No will be able to see all Loads.
 //?***** Edit Load Plan *****
 //?- Added Warehouse Code to the Control and Detail Context with
 //?appropriate validations.
 //?***** Work With Load Confirmation *****
 //?- Added Warehouse Code as a parameter from the Work With Load
 //?Plan All screen for selection of the Loads to Display on the
 //?screen.  Added selection for Warehouse Code if one passed in.
 //?If the Load is not to be selected due to not matching the Whs,
 //?a record is created for the load in the array (exception array).
 //?- Added Warehouse Code to the Subfile.
 //?***** Order Status Report Prompt *****
 //?- Added Warehouse Code restriction on the prompt.
 //?***** Work With Orders Price Audit/Maintenance *****
 //?- Added Warehouse Code restriction.
 //?***** Work With Orders - Edit Ship Date  *****
 //?- Added Warehouse Code restriction.
}


//?  Load Accounting for the Plant and Load Balancing.
//?- Changed 'RTV UM/Whs Code Lmt,Bx RT - Order Detail'.
ENDDO;

// PGM.*Scan limit = CND.9999999
PGM.*Scan_limit = 9999999;

// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.USR Update Flag = CND.No
PAR.USR_Update_Flag = *BLANK;

// WRK.USR Assigned This Load = CND.Blank
WRK.USR_Assigned_This_Load = *BLANK;

EXECUTE FUNCTION(RTV Load No. Status    RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1197430;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Auto_Load_Numbering);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If load id passed = 0 (add mode), get next load id for auto load numbering
CASE;

// IF PAR.Load ID is Blank
IF PAR.Load_ID = *ZERO;

//?If auto = Y, retrieve next load #
CASE;

// IF PAR.Auto Load Numbering? is Yes
IF PAR.Auto_Load_Numbering = 'Y';

//?RMC - get next load from '000' company rcd     1/3/05
EXECUTE FUNCTION(RTV Next Load No.      CH) TYPE(CHGOBJ) FILE(CAASREP)          AC1197433;
PARAMETER(*ZERO);
PARAMETER(PAR.USR_Load_ID);
{
 //?USER: Processing before Data update

 // PGM.*Record Data Changed = CND.*YES
 PGM.*Record_Data_Changed = 'Y';

 // PAR.Load ID = DB1.Next Load ID
 PAR.Load_ID = DB1.Next_Load_ID;

 // DB1.Next Load ID = DB1.Next Load ID + CON.1
 DB1.Next_Load_ID = DB1.Next_Load_ID + 1;

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

//?If load id passed = 0 (add mode), get next load id for auto load numbering
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Stop/Drop Seq.    RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1197876;
PARAMETER(PAR.Load_ID);
PARAMETER(WRK.Stop_Drop_Sequence_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 //?Find the ending sequence number for the load
 CASE;

 // IF DB1.Stop/Drop Sequence Number GT PAR.Stop/Drop Sequence Number
 IF DB1.Stop_Drop_Sequence_Number > PAR.Stop_Drop_Sequence_Number;

 // PAR.Stop/Drop Sequence Number = DB1.Stop/Drop Sequence Number
 PAR.Stop_Drop_Sequence_Number = DB1.Stop_Drop_Sequence_Number;

 ENDIF;

}


ENDIF;

// WRK.Order Number = CON.*ZERO
WRK.Order_Number = *ZERO;

// WRK.Requested Ship Date = CON.*ZERO
WRK.Requested_Ship_Date = *ZERO;

// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// LCL.Load Create Sts USR = CND.no
LCL.Load_Create_Sts_USR = 'N';

//?PK0302
//?Get Company Value to determine if the Max Sched Ship Wt edit is done.
EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(PAR.Company_Number);
PARAMETER('MAXFLAG');
PARAMETER(LCL.Max_Schd_Shp_Wt_Edit_Flg);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Set status flag 4 y/n to *Yes instead of blanks    E002102
// LCL.Status Flag 4  Y/N = CND.yes
LCL.Status_Flag_4_Y_N = 'Y';

// LCL.First Order Assigned = CND.yes
LCL.First_Order_Assigned = 'Y';

// LCL.Order Number Saved USR = CND.Equal to zeros
LCL.Order_Number_Saved_USR = *ZERO;

// PGM.*Subfile mode = CND.Truncated
PGM.*Subfile_mode = 1;

EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(CTL.Company_Number);
PARAMETER('AUTOCMBLD');
PARAMETER(LCL.Auto_Combine_Loads_STS);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Appl Whs Restrict  RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1959551;
PARAMETER(JOB.*USER);
PARAMETER(LCL.Application_WHS_Restrict);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Set flag to require DDD/T test against Warehouse Control file  W288
// PAR.Access Limited Sts USR = CND.yes
PAR.Access_Limited_Sts_USR = 'Y';

// Call program EXC Rtv Status        XF.
CALL PROGRAM(EXC Rtv Status        XF) ('PBXNXFR');
PARAMETER(PAR.Company_Number);
PARAMETER('TMSLDP');
PARAMETER(LCL.PFS_Carlisle_Active);

// Call program EXC Rtv Status-AS     XF.
CALL PROGRAM(EXC Rtv Status-AS     XF) ('PBX2XFR');
PARAMETER(PAR.Company_Number);
PARAMETER('TMSLDP');
PARAMETER(LCL.PFS_AccuSort_Active);

//?USER: Initialize subfile control

//?if load id passed = zero-Rtv next load id, else rtv stop number
CASE;

// IF PAR.Load ID is Blank
IF PAR.Load_ID = *ZERO;

//?If auto = Y, retrieve next load #
CASE;

// IF PAR.Auto Load Numbering? is Yes
IF PAR.Auto_Load_Numbering = 'Y';

// CTL.Load ID = PAR.USR Load ID
CTL.Load_ID = PAR.USR_Load_ID;

ENDIF;

// Call program RTV Co. Dflt Int All   XF.
CALL PROGRAM(RTV Co. Dflt Int All   XF) ('PDSTXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Load_Type);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(NLL.Company_Organization);
PARAMETER(NLL.CDI_Valuation_Grouping);
PARAMETER(NLL.CDI_Unused_Sts_3);
PARAMETER(NLL.CDI_Shipper);
PARAMETER(NLL.CDI_Produced_by_co);

//?if load id passed = zero-Rtv next load id, else rtv stop number
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Stop/Drop Seq.    RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1197876;
PARAMETER(PAR.Load_ID);
PARAMETER(WRK.Stop_Drop_Sequence_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 //?Find the ending sequence number for the load
 CASE;

 // IF DB1.Stop/Drop Sequence Number GT PAR.Stop/Drop Sequence Number
 IF DB1.Stop_Drop_Sequence_Number > PAR.Stop_Drop_Sequence_Number;

 // PAR.Stop/Drop Sequence Number = DB1.Stop/Drop Sequence Number
 PAR.Stop_Drop_Sequence_Number = DB1.Stop_Drop_Sequence_Number;

 ENDIF;

}


ENDIF;

//?If auto number is yes or in change mode, make Load ID display only
CASE;

// IF PAR.Auto Load Numbering? is Yes
IF PAR.Auto_Load_Numbering = 'Y';

// OR PAR.Load ID is NE Blank
OR PAR.Load_ID <> *ZERO;

// PAR.Display Flag = CND.No
PAR.Display_Flag = 'N';

//?If auto number is yes or in change mode, make Load ID display only
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Display Flag = CND.Yes
PAR.Display_Flag = 'Y';

ENDIF;

//?If change mode, update control fields with load header info
CASE;

// IF PAR.Load ID is NE Blank
IF PAR.Load_ID <> *ZERO;

//?** RTV Total Load Miles into WRK context, Override into PAR   E00207
EXECUTE FUNCTION(RTV Load for Load Plan RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1264653;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Scheduled_Ship_Date_USR);
PARAMETER(CTL.Load_Status);
PARAMETER(PAR.Reefer_Temperature);
PARAMETER(CTL.Total_Load_Order_Weight);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(CTL.Allocate_By_Pound_or_Mile);
PARAMETER(CTL.Carrier_Code);
PARAMETER(CTL.Truck_Size);
PARAMETER(CTL.Rated_Freight);
PARAMETER(WRK.Load_Type);
PARAMETER(LCL.Schedule_Sequence_Number);
PARAMETER(WRK.Total_Load_Miles);
PARAMETER(CTL.USR_Shipping_Method);
PARAMETER(LCL.Ship_From_Warehouse);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Carrier_Broker);
PARAMETER(CTL.Load_Acceptance_Flag);
PARAMETER(PAR.Override_Total_Load_Miles);
PARAMETER(WRK.Shipping_Temp_C_F_txt);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Update CTL miles with correct value
CASE;

// IF PAR.Override Total Load Miles is Entered
IF PAR.Override_Total_Load_Miles <> *ZERO;

// CTL.Total Load Miles = PAR.Override Total Load Miles
CTL.Total_Load_Miles = PAR.Override_Total_Load_Miles;

//?** Update CTL miles with correct value
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Total Load Miles = WRK.Total Load Miles
CTL.Total_Load_Miles = WRK.Total_Load_Miles;

ENDIF;

//?If any orders on load, cannot change load type
EXECUTE FUNCTION(RTV Chk any ords on Ld RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1296397;
PARAMETER(CTL.Load_ID);
PARAMETER(PAR.USR_Check_Y_N_Status);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 // PAR.USR Check Y/N Status = CND.blank
 PAR.USR_Check_Y_N_Status = *BLANK;

 //?USER: Process Data record

 // PAR.USR Check Y/N Status = CND.yes
 PAR.USR_Check_Y_N_Status = 'Y';

 QUIT;

}


//?If change mode, update control fields with load header info
// IF *OTHERWISE
IF *OTHERWISE;

//?Add Mode
// CTL.Load Status = CND.Entered
CTL.Load_Status = 'E';

ENDIF;

// CTL.Status Description 2 = Condition name of CTL.Load Status
CTL.Status_Description_2 = RTVCND(CTL.Load_Status);

//?Retrieve default Truck to edit weight
EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(PAR.Company_Number);
PARAMETER('DFTTRUCK');
PARAMETER(WRK.System_Value_Alpha);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.Truck Size = WRK.System Value Alpha
WRK.Truck_Size = WRK.System_Value_Alpha;

//?Retrieve Truck weight
CASE;

// IF WRK.Truck Size is Entered
IF WRK.Truck_Size <> *BLANK;

EXECUTE FUNCTION(Rtv Min & Max Pounds  RT) TYPE(RTVOBJ) FILE(OMFKREP)           AC1197715;
PARAMETER(WRK.Truck_Size);
PARAMETER(PAR.Maximum_pounds);
PARAMETER(PAR.Minimum_pounds);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Retrieve Truck weight
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Maximum pounds = CON.*ZERO
PAR.Maximum_pounds = *ZERO;

// PAR.Minimum pounds = CON.*ZERO
PAR.Minimum_pounds = *ZERO;

ENDIF;

//?Edit gross weight
//?*-----------------------------------------------------------------*
EXECUTE FUNCTION(RTV GrsWgt w/PltTr Ld RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1601442;
PARAMETER(CTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(PAR.Trailer_IN_Weight);
PARAMETER(CTL.Load_Status);
{
 //?USER: Initialize routine

 // PAR.USR Weight Accumulated = CON.*ZERO
 PAR.USR_Weight_Accumulated = *ZERO;

 CASE;

 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 EXECUTE FUNCTION(RTV Pallet/Tare        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1585842;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Pallets_Loaded);
 PARAMETER(LCL.Avg_Pallet_Tare);
 PARAMETER(LCL.Tot_Pallet_Tare);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?***** Change log and comments
 DO;

 //?** 01/18/2010 PKD E000261 Pass the Average Pallet Tare
 ENDDO;

 //?USER: Process Data record

 //?01/18/10 PKD E000261 SEND in LCL.Avg Pallet Tare
 // Call program RTV Gross Wgt/Qty     XF.
 CALL PROGRAM(RTV Gross Wgt/Qty     XF) ('PQPQXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.USR_Weight_Accumulated);
 PARAMETER(LCL.Order_Quantity);
 PARAMETER(LCL.Avg_Pallet_Tare);

 //?USER: Exit processing

 CASE;

 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 EXECUTE FUNCTION(RTV Pallet/Tare        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1585842;
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.Pallets_Loaded);
 PARAMETER(LCL.Avg_Pallet_Tare);
 PARAMETER(LCL.Tot_Pallet_Tare);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.USR Weight Accumulated = PAR.USR Weight Accumulated + LCL.Tot Pallet Tare
 PAR.USR_Weight_Accumulated = PAR.USR_Weight_Accumulated + LCL.Tot_Pallet_Tare;

 ENDIF;

}


//?*-----------------------------------------------------------------*
// CTL.Weight Adjust = PAR.Trailer IN Weight
CTL.Weight_Adjust = PAR.Trailer_IN_Weight;

//?Maximum message
CASE;

// IF CTL.Weight Adjust GT PAR.Maximum pounds
IF CTL.Weight_Adjust > PAR.Maximum_pounds;

// AND PAR.Maximum pounds NE WRK.ZERO
AND PAR.Maximum_pounds <> WRK.ZERO;

// Send information message - 'Load weight is greater than maximum pounds allowed.'
MESSAGE(USR1261 *INFO);

ENDIF;

// WRK.Total Weight Work = CON.*ZERO
WRK.Total_Weight_Work = *ZERO;

//?First time processing
CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

// CTL.Load Type = WRK.Load Type
CTL.Load_Type = WRK.Load_Type;

// PAR.Load Type = CTL.Load Type
PAR.Load_Type = CTL.Load_Type;

// WRK.USR Shipping Method = CTL.USR Shipping Method
WRK.USR_Shipping_Method = CTL.USR_Shipping_Method;

// CTL.Scheduled Ship Date = CTL.Scheduled Ship Date USR
CTL.Scheduled_Ship_Date = CTL.Scheduled_Ship_Date_USR;

// WRK.Scheduled Ship Date = CTL.Scheduled Ship Date USR
WRK.Scheduled_Ship_Date = CTL.Scheduled_Ship_Date_USR;

// WRK.Status Flag 3  Y/N = CND.No
WRK.Status_Flag_3_Y_N = 'N';

// PAR.Status - Y or N = CND.yes
PAR.Status_Y_or_N = 'Y';

// CTL.USR Company Number = PAR.Company Number
CTL.USR_Company_Number = PAR.Company_Number;

ENDIF;

// CTL.Status Description = Condition name of CTL.Load Type
CTL.Status_Description = RTVCND(CTL.Load_Type);

// WRK.USR Company Number = CTL.USR Company Number
WRK.USR_Company_Number = CTL.USR_Company_Number;

//?11/10/09 PKD E00519 Access by Warehouse
//?DEFAULT: CTL.Warehouse Code                           E00519
CASE;

// IF LCL.Application WHS Restrict is yes
IF LCL.Application_WHS_Restrict = 'Y';

CASE;

// IF CTL.Warehouse Code is Blanks
IF CTL.Warehouse_Code = *BLANK;

EXECUTE FUNCTION(Rtv 1st Warehouse     RT) TYPE(RTVOBJ) FILE(PNFOREP)           AC1960292;
PARAMETER(JOB.*USER);
PARAMETER('O/P');
PARAMETER(CTL.Warehouse_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

EXECUTE FUNCTION(RTV WhsTyp/Ctrl/LdTyp RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1959790;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(NLL.Warehouse_Type);
PARAMETER(NLL.Trans_Contol_AS400_Plant);
PARAMETER(CTL.Load_Type);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// LCL.Warehouse Code = CTL.Warehouse Code
LCL.Warehouse_Code = CTL.Warehouse_Code;

// LCL.Sail Port State = CTL.Sail Port State
LCL.Sail_Port_State = CTL.Sail_Port_State;

// Call program Rtv Plant Co/Org      XF.
CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(WRK.Company_Organization);

//?USER: Initialize subfile record from DBF record

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

EXECUTE FUNCTION(RTV OHE Appt Cnfrm fld RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2018604;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.OHE_Appt_Confirmation_#);
PARAMETER(RCD.OHE_Appt_Confirmation_Nm);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Type              RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC2100377;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.OHE_Override_Type_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Get stop if this load
CASE;

// IF DB1.Load ID EQ CTL.Load ID
IF DB1.Load_ID = CTL.Load_ID;

EXECUTE FUNCTION(RTV Stop Number       RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1197795;
PARAMETER(DB1.Load_ID);
PARAMETER(RCD.USR_Stop);
PARAMETER(DB1.Order_Number);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
{
 //?USER: Initialize routine

 // PAR.Stop/Drop = CON.*ZERO
 PAR.Stop_Drop = *ZERO;

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?If order number is found, retrieve stop number
 CASE;

 // IF PAR.Order Number EQ DB1.Order Number
 IF PAR.Order_Number = DB1.Order_Number;

 // PAR.Stop/Drop = DB1.Stop/Drop
 PAR.Stop_Drop = DB1.Stop_Drop;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


ENDIF;

EXECUTE FUNCTION(RTV 1st Warehouse/UOM  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1568424;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(NLL.U_M_Ordered);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Record selection
DO;

CASE;

// IF PAR.Load ID is NE Blank
IF PAR.Load_ID <> *ZERO;

//?Select orders matching load id
CASE;

// IF CTL.Load ID EQ DB1.Load ID
IF CTL.Load_ID = DB1.Load_ID;

CASE;

// IF CTL.USR Stop NE WRK.ZERO
IF CTL.USR_Stop <> WRK.ZERO;

CASE;

// IF RCD.USR Stop GE CTL.USR Stop
IF RCD.USR_Stop >= CTL.USR_Stop;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

ENDIF;

//?Select orders matching load id
// IF DB1.Load ID EQ WRK.ZERO
IF DB1.Load_ID = WRK.ZERO;

//?Only select if no CTL stop entered
CASE;

// IF CTL.USR Stop EQ WRK.ZERO
IF CTL.USR_Stop = WRK.ZERO;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?Select orders not on load - exclude Confirm,Complete,Cancel;multi-event ON
CASE;

// IF DB1.Load ID is Blank
IF DB1.Load_ID = *ZERO;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

CASE;

// IF CTL.USR Stop NE WRK.ZERO
IF CTL.USR_Stop <> WRK.ZERO;

//?(should only select orders with a stop assigned)
// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Exclude Confirmed,Complete,Cancelled.
CASE;

// IF DB1.Header Status is Conf/Comp/Canc
IF DB1.Header_Status = 'X'/'C'/'R';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Exclude orders set for non-load plan
CASE;

// IF DB1.Load Plan Order is no
IF DB1.Load_Plan_Order = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Exclude orders with mismatching load types
CASE;

// IF CTL.Load Type is Bulk or Regular
IF CTL.Load_Type = 'B'/'R';

// AND DB1.Load Type NE CTL.Load Type
AND DB1.Load_Type <> CTL.Load_Type;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Exclude Block Orders
CASE;

// IF DB1.Block Order Flag is Block Order
IF DB1.Block_Order_Flag = 'B';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?If TMSLDP is live for domestic only, only allow ES stay on as400
CASE;

// IF LCL.PFS Carlisle Active is Yes
IF LCL.PFS_Carlisle_Active = 'Y';

// AND LCL.PFS AccuSort Active is Yes
AND LCL.PFS_AccuSort_Active = 'Y';

CASE;

// IF LCL.OHE Override Type Code is ES
IF LCL.OHE_Override_Type_Code = 'ES';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDDO;

//?If CTL assigned to load set, order must match
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?Set up Assigned to load
CASE;

// IF DB1.Load ID EQ CTL.Load ID
IF DB1.Load_ID = CTL.Load_ID;

// RCD.USR Assigned This Load = CND.Yes
RCD.USR_Assigned_This_Load = 'Y';

//?Set up Assigned to load
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.USR Assigned This Load = CND.No
RCD.USR_Assigned_This_Load = 'N';

ENDIF;

CASE;

// IF CTL.USR Assigned This Load is Blank
IF CTL.USR_Assigned_This_Load = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.USR Assigned This Load NE CTL.USR Assigned This Load
IF RCD.USR_Assigned_This_Load <> CTL.USR_Assigned_This_Load;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?If Record selected
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?If CTL.Usr Company Number entered...     PKTR01 8/02/04
CASE;

// IF CTL.USR Company Number is not equal to zero
IF CTL.USR_Company_Number <> *ZERO;

// AND CTL.USR Company Number NE DB1.Company Number
AND CTL.USR_Company_Number <> DB1.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL: CTL.Warehouse Code                                  E00519
CASE;

// IF CTL.Warehouse Code is Not Blanks
IF CTL.Warehouse_Code <> *BLANK;

// AND CTL.Warehouse Code NE RCD.Warehouse Code
AND CTL.Warehouse_Code <> RCD.Warehouse_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

EXECUTE FUNCTION(RTV Region for State   RT) TYPE(RTVOBJ) FILE(PDKGREP)          AC1381891;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Region_Code);
PARAMETER(RCD.Ship_To_State_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// RCD.USR Weight, 5.0 = DB1.Order Weight Total
RCD.USR_Weight_5_0 = DB1.Order_Weight_Total;

//?If control weight is entered, select only weight LE
CASE;

// IF CTL.USR Weight, 5.0 is NE Zeros
IF CTL.USR_Weight_5_0 <> *ZERO;

// AND RCD.USR Weight, 5.0 GT CTL.USR Weight, 5.0
AND RCD.USR_Weight_5_0 > CTL.USR_Weight_5_0;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?If control region code is entered, then select regions equal to
CASE;

// IF CTL.Region Code is Entered
IF CTL.Region_Code <> *BLANK;

// AND RCD.Region Code NE CTL.Region Code
AND RCD.Region_Code <> CTL.Region_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Mark Picked orders
DO;

// RCD.USR Picked = CON.*BLANK
RCD.USR_Picked = *BLANK;

EXECUTE FUNCTION(RTV Check Pick Event   RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1198676;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('03');
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


//?If Order has been picked, then mark as picked
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// RCD.USR Picked = CON.Picked
RCD.USR_Picked = 'Picked';

ENDIF;

ENDDO;

EXECUTE FUNCTION(RTV State Description  RT) TYPE(RTVOBJ) FILE(CAACREP)          AC1227485;
PARAMETER(DB1.Ship_To_State_Code);
PARAMETER(RCD.USR_State_Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Load up stop customer array
CASE;

// IF RCD.USR Stop NE WRK.ZERO
IF RCD.USR_Stop <> WRK.ZERO;

// AND PGM.*Record selected is *YES
AND PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(CRT Load Plan Stop Cst CR) TYPE(CRTOBJ) ARRAY(Load_Planning_StoAC1378310;
PARAMETER(RCD.USR_Stop);
PARAMETER(DB1.Ship_To_Customer);
{
 //?USER: Processing if Data record already exists

 QUIT;

}


// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

ENDIF;

EXECUTE FUNCTION(RTV Shipping Co Dft    RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1701590;
PARAMETER(WRK.Company_Number_041743);
PARAMETER(RCD.Ship_To_Customer);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Default Shipping Co Sts is Yes
 IF DB1.Default_Shipping_Co_Sts = 'Y';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


//?RMC - 1/3/05 - (HI) the company if not the ship to's default co
CASE;

// IF WRK.Company Number     041743 NE RCD.Company Number
IF WRK.Company_Number_041743 <> RCD.Company_Number;

// RCD.USR Display 1 = CND.Yes
RCD.USR_Display_1 = 'Y';

//?RMC - 1/3/05 - (HI) the company if not the ship to's default co
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.USR Display 1 = CND.No
RCD.USR_Display_1 = 'N';

ENDIF;

// Call program Rtv Delivery State    XF.
CALL PROGRAM(Rtv Delivery State    XF) ('PNMYXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(RCD.Sail_Port_State);

//?SEL: CTL.Sail Port State                               E00519
CASE;

// IF CTL.Sail Port State is State code not Blanks
IF CTL.Sail_Port_State <> *BLANK;

// AND CTL.Sail Port State NE RCD.Sail Port State
AND CTL.Sail_Port_State <> RCD.Sail_Port_State;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?If record is selected & assigned to load then accumulate weight
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

// AND RCD.USR Stop is Entered
AND RCD.USR_Stop <> *ZERO;

// WRK.Total Weight Work = WRK.Total Weight Work + RCD.USR Weight, 9.0
WRK.Total_Weight_Work = WRK.Total_Weight_Work + RCD.USR_Weight_9_0;

//?RMC -- 1/3/05 save to test that one order exists with the load start co.
CASE;

// IF RCD.Company Number EQ CTL.Company Number
IF RCD.Company_Number = CTL.Company_Number;

// AND WRK.Status Flag 3  Y/N is No
AND WRK.Status_Flag_3_Y_N = 'N';

// WRK.Status Flag 3  Y/N = CND.Yes
WRK.Status_Flag_3_Y_N = 'Y';

ENDIF;

//?02/09/09 PKD S00660 Save the Earliest Deadline Departure Date
ENDIF;

// RCD.USR Update Flag = CND.No
RCD.USR_Update_Flag = *BLANK;

// RCD.Month/Day Display     USR = DB1.Requested Delivery Date
RCD.Month_Day_Display_USR = DB1.Requested_Delivery_Date;

//?CALC: Subfile control function fields

//?Prompt processing
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

//?Region code
CASE;

// IF PGM.*Cursor field <IS> CTL.Region Code
IF PGM.*Cursor_field = CTL.Region_Code;

// Call program SEL Active Region      SR.
CALL PROGRAM(SEL Active Region      SR) ('PDDOSRR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Region_Code);

ENDIF;

//?Usr company number        PKTR01 08/02/04
CASE;

// IF PGM.*Cursor field <IS> CTL.USR Company Number
IF PGM.*Cursor_field = CTL.USR_Company_Number;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(CTL.USR_Company_Number);

ENDIF;

//?SHIP TO CUSTOMER          PKTR01 08/02/04
CASE;

// IF PGM.*Cursor field <IS> CTL.Ship To Customer
IF PGM.*Cursor_field = CTL.Ship_To_Customer;

// Call program SEL Cust/ShpTo Flag 'Y'SR.
CALL PROGRAM(SEL Cust/ShpTo Flag 'Y'SR) ('PDYSSRR');
PARAMETER(CTL.Ship_To_Customer);

ENDIF;

//?SHIP TO state             PKTR01 08/02/04
CASE;

// IF PGM.*Cursor field <IS> CTL.Ship To State Code
IF PGM.*Cursor_field = CTL.Ship_To_State_Code;

// Call program SEL State              SR.
CALL PROGRAM(SEL State              SR) ('CAAHSRR');
PARAMETER(CTL.Ship_To_State_Code);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

//?F20:Edit traffic comments
CASE;

// IF CTL.*CMD key is CF20
IF CTL.*CMD_key = '20';

// Call program EDT PD Traffic Comment EF.
CALL PROGRAM(EDT PD Traffic Comment EF) ('PDCZEFR');
PARAMETER(CTL.Load_ID);

ENDIF;

//?Must enter load # if auto numbering = no
CASE;

// IF PAR.Auto Load Numbering? is No
IF PAR.Auto_Load_Numbering = 'N';

// AND PAR.Load ID is Blank
AND PAR.Load_ID = *ZERO;

CASE;

// IF CTL.Load ID is Blank
IF CTL.Load_ID = *ZERO;

// Send error message - 'Automatic numbering not in effect, please enter a Load Number'
ERROR(USR1249);
MSGPARM(CTL.Load_ID);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(VAL Load Exist        RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1197457;
PARAMETER(CTL.Load_ID);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Send error message - 'Load ID already exists'
ERROR(USR1251);
MSGPARM(CTL.Load_ID);

ENDIF;

ENDIF;

ENDIF;

//?Load type cannot be blank
CASE;

// IF CTL.Load Type is Blank
IF CTL.Load_Type = *BLANK;

// Send error message - 'Load Type cannnot be BLANK.'
ERROR(USR1813);
MSGPARM(CTL.Load_Type);

ENDIF;

//?02/12/07 PKD Remove hard coding of Company Number.
EXECUTE FUNCTION(Rtv Plant Co Status   RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1761084;
PARAMETER(CTL.USR_Company_Number);
PARAMETER(LCL.Plant_Company_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Validate usr company    PKTR01
CASE;

// IF CTL.USR Company Number is Equal to zero
IF CTL.USR_Company_Number = *ZERO;

// OR LCL.Plant Company Sts is Plant Company
OR LCL.Plant_Company_Sts = 'P';

//?Validate usr company    PKTR01
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid Company Number'
ERROR(USR1783);
MSGPARM(CTL.USR_Company_Number);

ENDIF;

//?Validate region code
CASE;

// IF CTL.Region Code is Entered
IF CTL.Region_Code <> *BLANK;

EXECUTE FUNCTION(VAL Active Region      RT) TYPE(RTVOBJ) FILE(PDKFREP)          AC1378942;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Region_Code);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'PD Region not found'
ERROR(USR2225);
MSGPARM(CTL.Company_Number);
MSGPARM(CTL.Region_Code);

ENDIF;

ENDIF;

// PAR.Scheduled Ship Date = CTL.Scheduled Ship Date USR
PAR.Scheduled_Ship_Date = CTL.Scheduled_Ship_Date_USR;

EXECUTE FUNCTION(RTV Load Total Weight  RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1384160;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Total_Load_Order_Weight);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Process subfile control (Pre-confirm)

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PGM.*Reload subfile = CND.*NO
PGM.*Reload_subfile = 'N';

// PAR.Shipping Method = CTL.USR Shipping Method
PAR.Shipping_Method = CTL.USR_Shipping_Method;

//?F4=Prompt
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

//?CTL.Warehouse Code
CASE;

// IF PGM.*Cursor field <IS> CTL.Warehouse Code
IF PGM.*Cursor_field = CTL.Warehouse_Code;

CASE;

// IF LCL.Application WHS Restrict is yes
IF LCL.Application_WHS_Restrict = 'Y';

// Call program Sel User Appl Whs     SR.
CALL PROGRAM(Sel User Appl Whs     SR) ('PNMMSRR');
PARAMETER(JOB.*USER);
PARAMETER('O/P');
PARAMETER(CTL.Warehouse_Code);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(CTL.Warehouse_Code);

ENDIF;

ENDIF;

ENDIF;

EXECUTE FUNCTION(Val Warehouse         IF) TYPE(EXCINTFUN)                      AC1961537;
PARAMETER(LCL.Application_WHS_Restrict);
PARAMETER(CTL.Warehouse_Code);
PARAMETER('O/P');
{
 //?Execute internal function

 //?VAL: Warehouse Code
 CASE;

 // IF PAR.Application WHS Restrict is yes
 IF PAR.Application_WHS_Restrict = 'Y';

 CASE;

 // IF PAR.Warehouse Code is Blanks
 IF PAR.Warehouse_Code = *BLANK;

 // Send error message - 'Warehouse Code is required.'
 ERROR(USR2015);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Val App Whs Itm Acs   XF.
 CALL PROGRAM(Val App Whs Itm Acs   XF) ('PNMOXFR');
 PARAMETER(JOB.*USER);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(*ZERO);
 PARAMETER(LCL.WHS_Item_Access_Sts_USR);

 CASE;

 // IF LCL.WHS/Item Access Sts USR is Access Denied
 IF LCL.WHS_Item_Access_Sts_USR = 'D';

 // Send error message - 'Access Denied to &1 for Warehouse &2.'
 ERROR(USR2776);
 MSGPARM(JOB.*USER);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 ENDIF;

 ENDIF;

 //?VAL: Warehouse Code
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Warehouse Code is Not Blanks
 IF PAR.Warehouse_Code <> *BLANK;

 EXECUTE FUNCTION(Val Warehouse Exists   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1323885;
 PARAMETER(PAR.Warehouse_Code);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // Send error message - 'Warehouse Codes not found.'
 ERROR(USR0007);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Reload if CTL positioners/selectors changed
CASE;

// IF CTL.Order Number NE WRK.Order Number
IF CTL.Order_Number <> WRK.Order_Number;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload if CTL positioners/selectors changed
// IF CTL.USR Company Number NE WRK.USR Company Number
IF CTL.USR_Company_Number <> WRK.USR_Company_Number;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload if CTL positioners/selectors changed
// IF CTL.Warehouse Code NE LCL.Warehouse Code
IF CTL.Warehouse_Code <> LCL.Warehouse_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload if CTL positioners/selectors changed
// IF CTL.USR Stop NE PAR.Stop/Drop
IF CTL.USR_Stop <> PAR.Stop_Drop;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload if CTL positioners/selectors changed
// IF CTL.Scheduled Ship Date NE WRK.Scheduled Ship Date
IF CTL.Scheduled_Ship_Date <> WRK.Scheduled_Ship_Date;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload if CTL positioners/selectors changed
// IF CTL.USR Assigned This Load NE WRK.USR Assigned This Load
IF CTL.USR_Assigned_This_Load <> WRK.USR_Assigned_This_Load;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload if CTL positioners/selectors changed
// IF CTL.USR Weight, 5.0 NE WRK.USR Weight, 5.0
IF CTL.USR_Weight_5_0 <> WRK.USR_Weight_5_0;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload if CTL positioners/selectors changed
// IF CTL.LTL Flag NE PAR.LTL Flag
IF CTL.LTL_Flag <> PAR.LTL_Flag;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload if CTL positioners/selectors changed
// IF CTL.Ship To State Code NE WRK.Ship To State Code
IF CTL.Ship_To_State_Code <> WRK.Ship_To_State_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload if CTL positioners/selectors changed
// IF CTL.Ship To Customer NE WRK.Ship To Customer
IF CTL.Ship_To_Customer <> WRK.Ship_To_Customer;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload if CTL positioners/selectors changed
// IF CTL.Region Code NE WRK.Region Code
IF CTL.Region_Code <> WRK.Region_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload if CTL positioners/selectors changed
// IF CTL.Reefer Temperature NE WRK.Reefer Temperature
IF CTL.Reefer_Temperature <> WRK.Reefer_Temperature;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload if CTL positioners/selectors changed
// IF CTL.Header Status NE WRK.Header Status
IF CTL.Header_Status <> WRK.Header_Status;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload if CTL positioners/selectors changed
// IF CTL.USR Shipping Method NE WRK.Shipping Method
IF CTL.USR_Shipping_Method <> WRK.Shipping_Method;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload if CTL positioners/selectors changed
// IF CTL.Customer Purchase Order # NE WRK.Customer Purchase Order #
IF CTL.Customer_Purchase_Order_# <> WRK.Customer_Purchase_Order_#;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Reload if CTL positioners/selectors changed
// IF CTL.Load Type NE PAR.Load Type
IF CTL.Load_Type <> PAR.Load_Type;

//?** E00118 03/12/2008
// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Update "last" ctl fields
DO;

// WRK.Order Number = CTL.Order Number
WRK.Order_Number = CTL.Order_Number;

// WRK.USR Company Number = CTL.USR Company Number
WRK.USR_Company_Number = CTL.USR_Company_Number;

// PAR.Stop/Drop = CTL.USR Stop
PAR.Stop_Drop = CTL.USR_Stop;

// WRK.Scheduled Ship Date = CTL.Scheduled Ship Date
WRK.Scheduled_Ship_Date = CTL.Scheduled_Ship_Date;

// WRK.USR Assigned This Load = CTL.USR Assigned This Load
WRK.USR_Assigned_This_Load = CTL.USR_Assigned_This_Load;

// WRK.USR Weight, 5.0 = CTL.USR Weight, 5.0
WRK.USR_Weight_5_0 = CTL.USR_Weight_5_0;

// PAR.USR Weight, 9.0 = CTL.USR Weight, 9.0
PAR.USR_Weight_9_0 = CTL.USR_Weight_9_0;

// PAR.LTL Flag = CTL.LTL Flag
PAR.LTL_Flag = CTL.LTL_Flag;

// WRK.Ship To Customer = CTL.Ship To Customer
WRK.Ship_To_Customer = CTL.Ship_To_Customer;

// WRK.Ship To State Code = CTL.Ship To State Code
WRK.Ship_To_State_Code = CTL.Ship_To_State_Code;

// WRK.Region Code = CTL.Region Code
WRK.Region_Code = CTL.Region_Code;

// WRK.Reefer Temperature = CTL.Reefer Temperature
WRK.Reefer_Temperature = CTL.Reefer_Temperature;

// WRK.Header Status = CTL.Header Status
WRK.Header_Status = CTL.Header_Status;

// WRK.Shipping Method = CTL.USR Shipping Method
WRK.Shipping_Method = CTL.USR_Shipping_Method;

//?** Default carrier to BUY if ship method is Collect
CASE;

// IF CTL.USR Shipping Method is Collect
IF CTL.USR_Shipping_Method = 'CR'/'CT';

// CTL.Carrier Code = CND.Buyer's Truck
CTL.Carrier_Code = 'BUY';

// WRK.Carrier Code = CND.Buyer's Truck
WRK.Carrier_Code = 'BUY';

//?** Default carrier to BUY if ship method is Collect
// IF *OTHERWISE
IF *OTHERWISE;

//?RMC added 5/29/08
CASE;

// IF CTL.Carrier Code is Buyer's Truck
IF CTL.Carrier_Code = 'BUY';

// CTL.Carrier Code = CND.not entered
CTL.Carrier_Code = *BLANK;

// WRK.Carrier Code = CND.not entered
WRK.Carrier_Code = *BLANK;

ENDIF;

ENDIF;

// WRK.Customer Purchase Order # = CTL.Customer Purchase Order #
WRK.Customer_Purchase_Order_# = CTL.Customer_Purchase_Order_#;

//?** E00118 LJB 03/12/2008
// WRK.Load Type = CTL.Load Type
WRK.Load_Type = CTL.Load_Type;

ENDDO;

// CTL.Status Description = Condition name of CTL.Load Type
CTL.Status_Description = RTVCND(CTL.Load_Type);

//?Update if CTL load type or CTL Shipping method changed
CASE;

// IF CTL.Load Type NE PAR.Load Type
IF CTL.Load_Type <> PAR.Load_Type;

// OR CTL.USR Shipping Method NE WRK.USR Shipping Method
OR CTL.USR_Shipping_Method <> WRK.USR_Shipping_Method;

//?PAR updated after update
EXECUTE FUNCTION(VAL Load Exist        RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1197457;
PARAMETER(CTL.Load_ID);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


//?If load is found then change
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?RMC S00255 update carrier here too
EXECUTE FUNCTION(CHG Ld Typ/Shp Mth/Alc CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1418759;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Allocate_By_Pound_or_Mile);
PARAMETER(CTL.Carrier_Code);
PARAMETER(CTL.Load_Type);
PARAMETER(CTL.USR_Shipping_Method);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

// WRK.USR Shipping Method = CTL.USR Shipping Method
WRK.USR_Shipping_Method = CTL.USR_Shipping_Method;

// PAR.Load Type = CTL.Load Type
PAR.Load_Type = CTL.Load_Type;

ENDIF;

//?OMS132:Dflt Bulk loads to Pounds allocation; regular loads to Miles
CASE;

// IF CTL.Load Type is Regular
IF CTL.Load_Type = 'R';

// CTL.Allocate By Pound or Mile = CND.Miles
CTL.Allocate_By_Pound_or_Mile = 'M';

//?OMS132:Dflt Bulk loads to Pounds allocation; regular loads to Miles
// IF CTL.Load Type is Bulk
IF CTL.Load_Type = 'B';

// CTL.Allocate By Pound or Mile = CND.Tons
CTL.Allocate_By_Pound_or_Mile = 'T';

//?OMS132:Dflt Bulk loads to Pounds allocation; regular loads to Miles
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Allocate By Pound or Mile = CND.Miles
CTL.Allocate_By_Pound_or_Mile = 'M';

ENDIF;

EXECUTE FUNCTION(RTV Del All Stop Custs RT) TYPE(RTVOBJ) ARRAY(Load_Planning_StoAC1378538;
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DEL Stop Cust          DL) TYPE(DLTOBJ) ARRAY(Load_Planning_StoAC1378539;
 PARAMETER(DB1.Stop_Drop);
}


//?Ensure that load id is entered
CASE;

// IF CTL.Load ID EQ WRK.ZERO
IF CTL.Load_ID = WRK.ZERO;

// Send error message - 'Value Required'
ERROR(USR1962);
MSGPARM(CTL.Load_ID);

ENDIF;

//?If add mode, make confirm yes
CASE;

// IF PAR.Load ID EQ WRK.ZERO
IF PAR.Load_ID = WRK.ZERO;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

//?set confirm to yes so can create header without adding orders
ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?Ensure we're showing current order data
DO;

EXECUTE FUNCTION(RTV All Header Fields  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1326885;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Type_Sales);
PARAMETER(RCD.AR_Customer_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Ship_To_Name);
PARAMETER(RCD.Ship_To_Address_Line_1);
PARAMETER(RCD.Ship_To_Address_Line_2);
PARAMETER(RCD.Ship_To_Address_Line_3);
PARAMETER(RCD.Ship_To_City);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(RCD.Ship_To_Zip_Postal_Code);
PARAMETER(RCD.Bill_to_Customer);
PARAMETER(RCD.Bill_to_Name);
PARAMETER(RCD.Bill_to_Address_Line_1);
PARAMETER(RCD.Bill_to_Address_Line_2);
PARAMETER(RCD.Bill_to_Address_Line_3);
PARAMETER(RCD.Bill_to_City);
PARAMETER(RCD.Bill_to_State_Code);
PARAMETER(RCD.Bill_to_Zip_Postal_Code);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(RCD.Order_Date);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Cancel_Date);
PARAMETER(RCD.Terms_Code);
PARAMETER(RCD.Special_Instructions);
PARAMETER(RCD.Special_Instructions_2);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Comment_Print_Acknowledge);
PARAMETER(RCD.Comment_Print_Inv_Cr_Memo);
PARAMETER(RCD.Comment_Print_Pick_Slip);
PARAMETER(RCD.Comment_Print_Ship_Doc);
PARAMETER(RCD.Reason_Code);
PARAMETER(RCD.Order_in_Use);
PARAMETER(RCD.Header_Status);
PARAMETER(RCD.Header_Status_Last);
PARAMETER(RCD.Order_Type_Print_Status);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.User_Original_Entry);
PARAMETER(RCD.Date_of_Original_Entry);
PARAMETER(RCD.Order_Value_Total);
PARAMETER(RCD.Order_Weight_Total);
PARAMETER(RCD.Credit_Hold);
PARAMETER(RCD.Production_Hold);
PARAMETER(RCD.New_Customer_Hold);
PARAMETER(RCD.Requested_Delivery_Date);
PARAMETER(RCD.Requested_Delivery_Time);
PARAMETER(RCD.Accounts_Receiv_Ent_1);
PARAMETER(RCD.Accounts_Receiv_Ent_2);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Absorbed_Freight_Rate_CWT);
PARAMETER(RCD.Rated_Freight);
PARAMETER(RCD.LTL_Flag);
PARAMETER(RCD.Price_Audit);
PARAMETER(RCD.Price_Status);
PARAMETER(RCD.Shipping_Method);
PARAMETER(RCD.Export_Status);
PARAMETER(RCD.Palletize);
PARAMETER(RCD.Shrink_Wrap);
PARAMETER(RCD.Slip_Sheet);
PARAMETER(RCD.Age_Code);
PARAMETER(RCD.Reefer_Temperature);
PARAMETER(RCD.Load_Type);
PARAMETER(RCD.Attach_to_Invoice_Number);
PARAMETER(RCD.Load_Plan_Order);
PARAMETER(RCD.Print_Pick_Slip);
PARAMETER(RCD.Resell_Reference_Number);
PARAMETER(RCD.Special_Comment_1);
PARAMETER(RCD.Special_Comment_2);
PARAMETER(RCD.Affect_Auto_Accruals);
PARAMETER(RCD.Sales_Route_Code);
PARAMETER(RCD.Manager_Level_Code);
PARAMETER(RCD.VP_Level_Code);
PARAMETER(RCD.Attach_to_Order_Number);
PARAMETER(RCD.Reason_for_Price_Audit);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER(RCD.Invoice_Date);
PARAMETER(RCD.Event_Code);
PARAMETER(RCD.Trans_Contol_AS400_Plant);
PARAMETER(RCD.Modified_Flag);
PARAMETER(RCD.A_R_order_Value_Total);
PARAMETER(RCD.Billing_Activity_Type);
PARAMETER(RCD.Block_Order_Flag);
PARAMETER(RCD.Order_Certification_Flag);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Region for State   RT) TYPE(RTVOBJ) FILE(PDKGREP)          AC1381891;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Region_Code);
PARAMETER(RCD.Ship_To_State_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// RCD.USR Weight, 9.0 = RCD.Order Weight Total
RCD.USR_Weight_9_0 = RCD.Order_Weight_Total;

//?02/09/09 PKD S00660 Do not allow change of Scheduled Ship Date
ENDDO;

// Execute function Clr Program Message Q  US.
EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
{
 * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
 C                     CALL 'Y2CLMSC'
 C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
 C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
 * RESET FIRST MESSAGE ONLY FLAG.
 C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
}


//?PK0302 --Set Fields to null on for Sched Wt Exceeded processing
CASE;

// IF LCL.First Order Assigned is yes
IF LCL.First_Order_Assigned = 'Y';

// LCL.Slot Type f/load USR = WRK.Blank 6 USR
LCL.Slot_Type_f_load_USR = WRK.Blank_6_USR;

// LCL.Warehouse Code Assigned = WRK.Blank 6 USR
LCL.Warehouse_Code_Assigned = WRK.Blank_6_USR;

// LCL.Warehouse Type Assigned = WRK.Blank 6 USR
LCL.Warehouse_Type_Assigned = WRK.Blank_6_USR;

// LCL.Order Weight Assigned = CON.*ZERO
LCL.Order_Weight_Assigned = *ZERO;

// LCL.First Order Assigned = CND.no
LCL.First_Order_Assigned = 'N';

ENDIF;

//?Checks
CASE;

// IF WRK.USR Display 1 is *blank
IF WRK.USR_Display_1 = *BLANK;

//?Check shipping method
CASE;

// IF RCD.Shipping Method is Buyers Truck
IF RCD.Shipping_Method = 'CR'/'CT';

// WRK.USR Display 1 = CND.Yes
WRK.USR_Display_1 = 'Y';

//?** Default carrier code to BUY for collect shipments   FP1251
// CTL.Carrier Code = CND.Buyer's Truck
CTL.Carrier_Code = 'BUY';

// WRK.Carrier Code = CND.Buyer's Truck
WRK.Carrier_Code = 'BUY';

ENDIF;

//?** (DDD/T will be zeros if no Miles Between Cities record)
//?Determining that order can arrive on time.
CASE;

// IF RCD.Shipping Method is Prepaid
IF RCD.Shipping_Method = 'PR'/'PT';

// AND RCD.*SFLSEL is *Assign to Load
AND RCD.*SFLSEL = '1';

EXECUTE FUNCTION(RTV Deadln DepartDT/TM RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1497302;
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.Deadline_Depart_DT_HDR);
PARAMETER(WRK.Deadline_Depart_Time_HDR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?** Get country, if international, skip miles between cities test
EXECUTE FUNCTION(RTV Country Code       RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1395144;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(LCL.Country_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Retrieve the full city name to pass to the clc pgm    FP1251 2/8/2008
EXECUTE FUNCTION(RTV Ship To City/State RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1454149;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.USR_City);
PARAMETER(NLL.Ship_To_State_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.Warehouse Code PASS   USR = CON.*BLANK
WRK.Warehouse_Code_PASS_USR = *BLANK;

// Call program CLC Must Ship Date     XF.
CALL PROGRAM(CLC Must Ship Date     XF) ('PDJBXFR');
PARAMETER(WRK.Must_Ship_Error);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.USR_City);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Requested_Delivery_Date);
PARAMETER(RCD.Requested_Delivery_Time);
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.Warehouse_Code_PASS_USR);
PARAMETER(WRK.Must_Ship_Date_USR);
PARAMETER(WRK.Must_Ship_Time_USR);

//?Process date order error
CASE;

// IF WRK.Must Ship Error is No Error
IF WRK.Must_Ship_Error = *BLANK;

// OR WRK.Must Ship Error is Req Ship should =Must Shp
OR WRK.Must_Ship_Error = 'RSD';

// OR LCL.Country Code is Entered
OR ( LCL.Country_Code <> *BLANK;

// AND LCL.Country Code is Not USA
AND LCL.Country_Code <> 'USA' );

//?** Requested Ship = Must Ship is not an error here.     FP1251
// WRK.USR Display 1 = CND.Yes
WRK.USR_Display_1 = 'Y';

// WRK.Must Ship Error = CND.No Error
WRK.Must_Ship_Error = *BLANK;

//?Process date order error
// IF WRK.Must Ship Error is Miles to Next=Zeros
IF WRK.Must_Ship_Error = 'MTN';

//?** DDD/T will be zeros if no Miles Between Cities record
//?** as well as the Must Ship Date in wrk context.
//?** Create the record - Total load miles will be set to zeros.
// Send information message - 'Miles to &1, &2 not found in the Mileage file.'
MESSAGE(USR2834 *INFO);
MSGPARM(WRK.Port_City);
MSGPARM(WRK.Sail_Port_State);

// WRK.USR Display 1 = CND.Yes
WRK.USR_Display_1 = 'Y';

//?Process date order error
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'This order cannot arrive on time.'
ERROR(USR2688);
MSGPARM(RCD.USR_Stop);

// WRK.USR Display 1 = CND.No
WRK.USR_Display_1 = 'N';

ENDIF;

ENDIF;

ENDIF;

//?PROCESS
CASE;

// IF WRK.USR Display 1 is Yes
IF WRK.USR_Display_1 = 'Y';

//?If assign to load request, display pending message
CASE;

// IF RCD.*SFLSEL is *Assign to Load
IF RCD.*SFLSEL = '1';

// WRK.USR Display 2 = CND.No
WRK.USR_Display_2 = 'N';

//?If load is locked, cannot assign orders to it
CASE;

// IF CTL.Load Status is Locked thru Invoiced
IF CTL.Load_Status = 'I'/'L'/'S';

// Send error message - 'This load is locked you cannot assign orders to it'
ERROR(USR1268);
MSGPARM(CTL.Load_Status);
MSGPARM(WRK.USR_Stop);

// WRK.USR Display 2 = CND.Yes
WRK.USR_Display_2 = 'Y';

//?If load is locked, cannot assign orders to it
// IF RCD.Load ID is GT Zero
IF RCD.Load_ID > *ZERO;

// Send error message - 'Order has already been assigned to this load, you may delete to reassign th
ERROR(USR1267);

// WRK.USR Display 2 = CND.Yes
WRK.USR_Display_2 = 'Y';

//?If load is locked, cannot assign orders to it
// IF RCD.Load Type NE CTL.Load Type
IF RCD.Load_Type <> CTL.Load_Type;

// Send error message - 'Load type on order must match load type.'
ERROR(USR1867);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.USR_Stop);

// WRK.USR Display 2 = CND.Yes
WRK.USR_Display_2 = 'Y';

//?If load is locked, cannot assign orders to it
// IF PAR.Shipping Method NE WRK.BLANK
IF PAR.Shipping_Method <> WRK.BLANK;

// AND PAR.Shipping Method NE RCD.Shipping Method
AND PAR.Shipping_Method <> RCD.Shipping_Method;

// Send error message - 'Shipping Method on order must match load shipping method.'
ERROR(USR2227);
MSGPARM(RCD.*SFLSEL);

// WRK.USR Display 2 = CND.Yes
WRK.USR_Display_2 = 'Y';

//?If load is locked, cannot assign orders to it
// IF RCD.Order in Use is yes
IF RCD.Order_in_Use = 'Y';

// AND RCD.Order Number NE PAR.USR Order Number
AND RCD.Order_Number <> PAR.USR_Order_Number;

// Send error message - 'Order &1 is in use by another user'
ERROR(USR0508);
MSGPARM(RCD.Order_Number);

//?If load is locked, cannot assign orders to it
// IF RCD.Scheduled Ship Date LT JOB.*Job date
IF RCD.Scheduled_Ship_Date < JOB.*Job_date;

// AND PAR.Scheduled Ship Date is not entered
AND PAR.Scheduled_Ship_Date = *ZERO;

// Send error message - 'Ship Date must be after or equal to the current date.'
ERROR(USR4001);
MSGPARM(RCD.*SFLSEL);

// WRK.USR Display 2 = CND.Yes
WRK.USR_Display_2 = 'Y';

//?If load is locked, cannot assign orders to it
// IF PAR.Scheduled Ship Date is entered
IF PAR.Scheduled_Ship_Date <> *ZERO;

// AND PAR.Scheduled Ship Date NE RCD.Scheduled Ship Date
AND PAR.Scheduled_Ship_Date <> RCD.Scheduled_Ship_Date;

// Send error message - 'The order schedule ship date does not equal the load schedule ship date.'
ERROR(USR2330);
MSGPARM(RCD.*SFLSEL);

// WRK.USR Display 2 = CND.Yes
WRK.USR_Display_2 = 'Y';

//?If load is locked, cannot assign orders to it
// IF RCD.USR Stop is Not Entered
IF RCD.USR_Stop = *ZERO;

// Send error message - 'Stop number must be entered to assign order to load'
ERROR(USR1256);
MSGPARM(RCD.USR_Stop);

// WRK.USR Display 2 = CND.Yes
WRK.USR_Display_2 = 'Y';

//?If load is locked, cannot assign orders to it
// IF *OTHERWISE
IF *OTHERWISE;

//?Process
CASE;

// IF RCD.USR Stop NE WRK.ZERO
IF RCD.USR_Stop <> WRK.ZERO;

// WRK.Error Status = CND.blank
WRK.Error_Status = *BLANK;

EXECUTE FUNCTION(RTV Stop Customer      RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1292489;
PARAMETER(CTL.Load_ID);
PARAMETER(RCD.USR_Stop);
PARAMETER(WRK.Customer_Number_NBR);
{
 //?USER: Processing if Data record not found

 // PAR.Customer Number       NBR = CON.*ZERO
 PAR.Customer_Number_NBR = *ZERO;

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Customer Number    RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1292494;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Customer_Number_NBR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?Only 1 customer allowed per stop
CASE;

// IF WRK.Customer Number       NBR NE RCD.Ship To Customer
IF WRK.Customer_Number_NBR <> RCD.Ship_To_Customer;

// AND WRK.Customer Number       NBR NE WRK.ZERO
AND WRK.Customer_Number_NBR <> WRK.ZERO;

// Send error message - 'Customer does not match existing customer for selected stop.'
ERROR(USR1853);
MSGPARM(RCD.*SFLSEL);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

//?Only 1 customer allowed per stop
// IF WRK.Customer Number       NBR EQ WRK.ZERO
IF WRK.Customer_Number_NBR = WRK.ZERO;

EXECUTE FUNCTION(RTV Stop Customer      RT) TYPE(RTVOBJ) ARRAY(Load_Planning_StoAC1378309;
PARAMETER(RCD.USR_Stop);
PARAMETER(WRK.Customer_Number_NBR);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Error if customer mismatch
CASE;

// IF WRK.Customer Number       NBR NE WRK.ZERO
IF WRK.Customer_Number_NBR <> WRK.ZERO;

// AND WRK.Customer Number       NBR NE RCD.Ship To Customer
AND WRK.Customer_Number_NBR <> RCD.Ship_To_Customer;

// Send error message - 'Customer does not match existing customer for selected stop.'
ERROR(USR1853);
MSGPARM(RCD.*SFLSEL);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

//?Error if customer mismatch
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Shipping Method EQ WRK.BLANK
IF PAR.Shipping_Method = WRK.BLANK;

// PAR.Shipping Method = RCD.Shipping Method
PAR.Shipping_Method = RCD.Shipping_Method;

ENDIF;

ENDIF;

ENDIF;

//?PK0302 Gather Data to perform Max Sched Ship Wt flag is Y & all Trucks
CASE;

// IF LCL.Max Schd Shp Wt Edit Flg is Yes
IF LCL.Max_Schd_Shp_Wt_Edit_Flg = 'Y';

// AND RCD.Shipping Method is Not Rail
AND RCD.Shipping_Method = 'CT'/'PT';

// LCL.Boxes Day 1 Quantity = CON.*ZERO
LCL.Boxes_Day_1_Quantity = *ZERO;

EXECUTE FUNCTION(RTV UM/Whs Code Lmt,Bx RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1625251;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(1);
PARAMETER(1);
PARAMETER(WRK.Warehouse_Code_Assigned);
PARAMETER(LCL.Slot_Type_f_New_Ords_USR);
PARAMETER(LCL.Boxes_Day_1_Quantity);
PARAMETER(WRK.USR_Weight_9_1_3);
{
 //?USER: Initialize routine

 // WRK.First Time Flag = CND.Yes
 WRK.First_Time_Flag = 'Y';

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 //?PF3280 -- add "Cases" to the case-stmt
 // PAR.Warehouse Code = DB1.Warehouse Code
 PAR.Warehouse_Code = DB1.Warehouse_Code;

 CASE;

 // IF DB1.U/M - Ordered is Combos
 IF DB1.U_M_Ordered = 'CB';

 // OR DB1.U/M - Ordered is EQ Boxes
 OR DB1.U_M_Ordered = 'BX';

 // OR DB1.U/M - Ordered is Mixed
 OR DB1.U_M_Ordered = 'MX';

 // OR DB1.U/M - Ordered is Cases
 OR DB1.U_M_Ordered = 'CS';

 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?S17054 DN 04/09/21-Beyond this point, changed all 'U/M - Ordered'
 //?  to reference LCL Context instead of DB1.
 //?S17054 DN 04/09/21-Count Type 'Cases' (CS) as 'Boxes' (BX).
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.U/M - Ordered = DB1.U/M - Ordered
 LCL.U_M_Ordered = DB1.U_M_Ordered;

 CASE;

 // IF LCL.U/M - Ordered is Cases
 IF LCL.U_M_Ordered = 'CS';

 // LCL.U/M - Ordered = CND.EQ Boxes
 LCL.U_M_Ordered = 'BX';

 ENDIF;

 ENDIF;

 //?Accumulate the Box Quantity for slotting consideration 6/12/01
 CASE;

 // IF LCL.U/M - Ordered is EQ Boxes
 IF LCL.U_M_Ordered = 'BX';

 // PAR.Boxes Total Quantity = PAR.Boxes Total Quantity + DB1.Quantity Ordered
 PAR.Boxes_Total_Quantity = PAR.Boxes_Total_Quantity + DB1.Quantity_Ordered;

 ENDIF;

 // PAR.USR Weight   9.1  3 = PAR.USR Weight   9.1  3 + DB1.Weight Scheduled
 PAR.USR_Weight_9_1_3 = PAR.USR_Weight_9_1_3 + DB1.Weight_Scheduled;

 CASE;

 // IF PAR.USR Unit of Measure is *Blank
 IF PAR.USR_Unit_of_Measure = *BLANK;

 // PAR.USR Unit of Measure = LCL.U/M - Ordered
 PAR.USR_Unit_of_Measure = LCL.U_M_Ordered;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.U/M - Ordered EQ PAR.USR Unit of Measure
 IF LCL.U_M_Ordered = PAR.USR_Unit_of_Measure;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.U/M - Ordered = CND.Mixed
 WRK.U_M_Ordered = 'MX';

 // PAR.USR Unit of Measure = WRK.U/M - Ordered
 PAR.USR_Unit_of_Measure = WRK.U_M_Ordered;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?USER: Exit processing

 CASE;

 // IF PAR.USR Unit of Measure is Mixed
 IF PAR.USR_Unit_of_Measure = 'MX';

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(PAR.Company_Number);
 PARAMETER('BOXLOAD');
 PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
 IF PAR.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

 // PAR.USR Unit of Measure = CND.Combos
 PAR.USR_Unit_of_Measure = 'CB';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Unit of Measure = CND.Boxed
 PAR.USR_Unit_of_Measure = 'BX';

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
PARAMETER(WRK.Warehouse_Code_Assigned);
PARAMETER(WRK.Warehouse_Type_Assigned);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Fresh Orders on a Load make the Load FRESH.
CASE;

// IF WRK.Warehouse Type Assigned is Fresh
IF WRK.Warehouse_Type_Assigned = 'FR';

CASE;

// IF LCL.Warehouse Type Assigned is Frozen
IF LCL.Warehouse_Type_Assigned = 'FZ';

// OR LCL.Warehouse Type Assigned is Equal blank
OR LCL.Warehouse_Type_Assigned = *BLANK;

// LCL.Warehouse Type Assigned = WRK.Warehouse Type Assigned
LCL.Warehouse_Type_Assigned = WRK.Warehouse_Type_Assigned;

// LCL.Warehouse Code Assigned = WRK.Warehouse Code Assigned
LCL.Warehouse_Code_Assigned = WRK.Warehouse_Code_Assigned;

ENDIF;

//?Fresh Orders on a Load make the Load FRESH.
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF LCL.Warehouse Type Assigned is Equal blank
IF LCL.Warehouse_Type_Assigned = *BLANK;

// LCL.Warehouse Type Assigned = WRK.Warehouse Type Assigned
LCL.Warehouse_Type_Assigned = WRK.Warehouse_Type_Assigned;

// LCL.Warehouse Code Assigned = WRK.Warehouse Code Assigned
LCL.Warehouse_Code_Assigned = WRK.Warehouse_Code_Assigned;

ENDIF;

ENDIF;

// LCL.Order Weight Assigned = LCL.Order Weight Assigned + RCD.Order Weight Total
LCL.Order_Weight_Assigned = LCL.Order_Weight_Assigned + RCD.Order_Weight_Total;

// LCL.Boxes Total Quantity = LCL.Boxes Total Quantity + LCL.Boxes Day 1 Quantity
LCL.Boxes_Total_Quantity = LCL.Boxes_Total_Quantity + LCL.Boxes_Day_1_Quantity;

EXECUTE FUNCTION(Clc Load Slot Type    IF) TYPE(EXCINTFUN)                      AC1625751;
PARAMETER(LCL.Slot_Type_f_load_USR);
PARAMETER(LCL.Slot_Type_f_New_Ords_USR);
PARAMETER(RCD.Export_Status);
PARAMETER(LCL.Boxes_Total_Quantity);
{
 //?Execute internal function

 //?RMC E2706 9/11/13- No more MX, if MX and boxqty<BOXLOAD Comp value,
 //?   then CB Else BX
 //?Set UM based on Orders to be assgnd- Priority- CB,EX,BX,MX
 CASE;

 // IF PAR.Slot Type f/New Ords USR is Combo
 IF PAR.Slot_Type_f_New_Ords_USR = 'CB';

 // AND PAR.Slot Type f/load USR is Combo
 AND ( PAR.Slot_Type_f_load_USR = 'CB';

 // OR PAR.Slot Type f/load USR EQ WRK.Blank 6 USR
 OR PAR.Slot_Type_f_load_USR = WRK.Blank_6_USR );

 // PAR.Slot Type f/load USR = CND.Combo
 PAR.Slot_Type_f_load_USR = 'CB';

 //?Set UM based on Orders to be assgnd- Priority- CB,EX,BX,MX
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Slot Type f/New Ords USR is Export
 IF PAR.Slot_Type_f_New_Ords_USR = 'EX';

 // OR PAR.Slot Type f/load USR is Export
 OR PAR.Slot_Type_f_load_USR = 'EX';

 // OR PAR.Export Status is yes
 OR PAR.Export_Status = 'Y';

 // PAR.Slot Type f/load USR = CND.Export
 PAR.Slot_Type_f_load_USR = 'EX';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Slot Type f/New Ords USR is Box
 IF PAR.Slot_Type_f_New_Ords_USR = 'BX';

 // AND PAR.Slot Type f/load USR is Box
 AND ( PAR.Slot_Type_f_load_USR = 'BX';

 // OR PAR.Slot Type f/load USR EQ WRK.Blank 6 USR
 OR PAR.Slot_Type_f_load_USR = WRK.Blank_6_USR );

 // PAR.Slot Type f/load USR = CND.Box
 PAR.Slot_Type_f_load_USR = 'BX';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Slot Type f/load USR = CND.Mixed
 PAR.Slot_Type_f_load_USR = 'MX';

 ENDIF;

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Slot Type f/load USR is Mixed
 IF PAR.Slot_Type_f_load_USR = 'MX';

 EXECUTE FUNCTION(RTV Default Co No App IF) TYPE(EXCINTFUN)                      AC1628378;
 PARAMETER(LCL.Company_Number);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(JOB.*USER);
  PARAMETER(NLL.Allow_Multi_Company);
  PARAMETER(NLL.Default_Printer);
  PARAMETER(NLL.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Company Number is Equal to zero
  IF LCL.Company_Number = *ZERO;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV First Default Co  RT) TYPE(RTVOBJ) FILE(CADTREP)           AC1628379;
  PARAMETER(JOB.*USER);
  PARAMETER(PAR.Company_Number);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV First Default Co  RT) TYPE(RTVOBJ) FILE(CADTREP)           AC1628379;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Company_Number);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  ENDIF;

 }

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(LCL.Company_Number);
 PARAMETER('BOXLOAD');
 PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
 IF PAR.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

 // PAR.Slot Type f/load USR = CND.Combo
 PAR.Slot_Type_f_load_USR = 'CB';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Slot Type f/load USR = CND.Box
 PAR.Slot_Type_f_load_USR = 'BX';

 ENDIF;

 ENDIF;

}


// LCL.Scheduled Ship Dt Assgnd = RCD.Scheduled Ship Date
LCL.Scheduled_Ship_Dt_Assgnd = RCD.Scheduled_Ship_Date;

ENDIF;

//?RMC -- 1/3/05 save to test that one order exists with the load start co.
CASE;

// IF RCD.Company Number EQ CTL.Company Number
IF RCD.Company_Number = CTL.Company_Number;

// AND WRK.Status Flag 3  Y/N is No
AND WRK.Status_Flag_3_Y_N = 'N';

// WRK.Status Flag 3  Y/N = CND.Yes
WRK.Status_Flag_3_Y_N = 'Y';

ENDIF;

//?****
CASE;

// IF WRK.Error Status is blank
IF WRK.Error_Status = *BLANK;

// CTL.Total Load Order Weight = CTL.Total Load Order Weight + RCD.Order Weight Total
CTL.Total_Load_Order_Weight = CTL.Total_Load_Order_Weight + RCD.Order_Weight_Total;

// WRK.Total Weight Work = WRK.Total Weight Work + RCD.Order Weight Total
WRK.Total_Weight_Work = WRK.Total_Weight_Work + RCD.Order_Weight_Total;

// WRK.USR Percent Work, 7.4 = RCD.Freight Rate Per U/M / CON.100 *Rounded
WRK.USR_Percent_Work_7_4 = RCD.Absorbed_Freight_Rate_CWT / 100 'H';

// WRK.USR Freight Amount 1 = RCD.Order Weight Total * WRK.USR Percent Work, 7.4 *R
WRK.USR_Freight_Amount_1 = RCD.Order_Weight_Total * WRK.USR_Percent_Work_7_4 'H';

// CTL.Total Freight = CTL.Total Freight + WRK.USR Freight Amount 1
CTL.Total_Freight = CTL.Total_Freight + WRK.USR_Freight_Amount_1;

EXECUTE FUNCTION(CRT Load Plan Stop Cst CR) TYPE(CRTOBJ) ARRAY(Load_Planning_StoAC1378310;
PARAMETER(RCD.USR_Stop);
PARAMETER(RCD.Ship_To_Customer);
{
 //?USER: Processing if Data record already exists

 QUIT;

}


//?Update gross weight field for display
// WRK.USR Display 1 = CND.Yes
WRK.USR_Display_1 = 'Y';

//?If there is no scheduled ship date for the load, fill it in
CASE;

// IF PAR.Scheduled Ship Date EQ WRK.ZERO
IF PAR.Scheduled_Ship_Date = WRK.ZERO;

// PAR.Scheduled Ship Date = RCD.Scheduled Ship Date
PAR.Scheduled_Ship_Date = RCD.Scheduled_Ship_Date;

ENDIF;

//?Default:  Load Shipping Method with Order Shipping Method.
CASE;

// IF PAR.Shipping Method EQ WRK.BLANK
IF PAR.Shipping_Method = WRK.BLANK;

// PAR.Shipping Method = RCD.Shipping Method
PAR.Shipping_Method = RCD.Shipping_Method;

ENDIF;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?If delete from load request, display pending message
CASE;

// IF RCD.*SFLSEL is *Delete from Load
IF RCD.*SFLSEL = '4';

//?RMC PFS017 dont allow if order is picked.
EXECUTE FUNCTION(PFS Val Order Picked  RT) TYPE(RTVOBJ) FILE(PPBKCPP)           AC1754282;
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.Pick_Status_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Pick Status USR = CND.Not Picked
 PAR.Pick_Status_USR = 'N';

 //?USER: Process Data record

 // PAR.Pick Status USR = CND.Picked
 PAR.Pick_Status_USR = 'Y';

 QUIT;

}


//?If load is locked, don't allow delete    OR Picked-RMC 6/14/06
CASE;

// IF CTL.Load Status is Lock
IF CTL.Load_Status = 'L';

// Send error message - 'This load is locked; Delete is invalid'
ERROR(USR1269);
MSGPARM(CTL.Load_Status);
MSGPARM(WRK.USR_Stop);

//?If load is locked, don't allow delete    OR Picked-RMC 6/14/06
// IF WRK.Pick Status USR is Picked
IF WRK.Pick_Status_USR = 'Y';

// Send error message - 'Invalid option for picked order.'
ERROR(USR3633);
MSGPARM(RCD.*SFLSEL);

//?If load is locked, don't allow delete    OR Picked-RMC 6/14/06
// IF RCD.Order in Use is yes
IF RCD.Order_in_Use = 'Y';

// AND RCD.Order Number NE PAR.USR Order Number
AND RCD.Order_Number <> PAR.USR_Order_Number;

// Send error message - 'Order &1 is in use by another user'
ERROR(USR0508);
MSGPARM(RCD.Order_Number);

//?If load is locked, don't allow delete    OR Picked-RMC 6/14/06
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Stop Number       RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1197795;
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.Stop_Drop);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
{
 //?USER: Initialize routine

 // PAR.Stop/Drop = CON.*ZERO
 PAR.Stop_Drop = *ZERO;

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?If order number is found, retrieve stop number
 CASE;

 // IF PAR.Order Number EQ DB1.Order Number
 IF PAR.Order_Number = DB1.Order_Number;

 // PAR.Stop/Drop = DB1.Stop/Drop
 PAR.Stop_Drop = DB1.Stop_Drop;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


//?If order is not assigned to load, will not allow delete
CASE;

// IF RCD.Load ID is Blank
IF RCD.Load_ID = *ZERO;

// Send error message - 'Order not assigned to load.'
ERROR(USR1874);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Order_Number);

//?If order is not assigned to load, will not allow delete
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Total Weight = CTL.Total Weight - RCD.Order Weight Total
CTL.Total_Load_Order_Weight = CTL.Total_Load_Order_Weight - RCD.Order_Weight_Total;

// WRK.Total Weight Work = WRK.Total Weight Work - RCD.Order Weight Total
WRK.Total_Weight_Work = WRK.Total_Weight_Work - RCD.Order_Weight_Total;

// WRK.USR Percent Work, 7.4 = RCD.Freight Rate Per U/M / CON.100 *Rounded
WRK.USR_Percent_Work_7_4 = RCD.Absorbed_Freight_Rate_CWT / 100 'H';

// WRK.USR Freight Amount 1 = RCD.Order Weight Total * WRK.USR Percent Work, 7.4 *R
WRK.USR_Freight_Amount_1 = RCD.Order_Weight_Total * WRK.USR_Percent_Work_7_4 'H';

// CTL.Total Freight = CTL.Total Freight - WRK.USR Freight Amount 1
CTL.Total_Freight = CTL.Total_Freight - WRK.USR_Freight_Amount_1;

//?Update gross weight field for display
// Send information message - 'Delete from load pending'
MESSAGE(USR1265 *INFO);

ENDIF;

ENDIF;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

//?5=view order
CASE;

// IF RCD.*SFLSEL is *View Order
IF RCD.*SFLSEL = '5';

// Call program Dsp Order Header       PV.
CALL PROGRAM(Dsp Order Header       PV) ('OMB5PVR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(RCD.Date_of_Original_Entry);
PARAMETER(RCD.Requested_Delivery_Time);
PARAMETER(PAR.Application_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Load up stop customer array to check stop sequence per delivery date
CASE;

// IF RCD.USR Stop is Entered
IF RCD.USR_Stop <> *ZERO;

EXECUTE FUNCTION(CRT Load Stop Array    CR) TYPE(CRTOBJ) ARRAY(Load_Planning_StoAC1425823;
PARAMETER(RCD.USR_Stop);
PARAMETER(RCD.Requested_Delivery_Date);
{
 //?USER: Processing if Data record already exists

 QUIT;

}


// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

ENDIF;

//?Adjust Control Weight
CASE;

// IF RCD.USR Stop is Entered
IF RCD.USR_Stop <> *ZERO;

//?TPA 10/03/07 - These need to be Gross and not Net weights.
// LCL.USR Weight Accumulated = CON.*ZERO
LCL.USR_Weight_Accumulated = *ZERO;

//?** Retrieve average pallet tare                   E000261
EXECUTE FUNCTION(RTV Pallet/Tare        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1585842;
PARAMETER(RCD.Load_ID);
PARAMETER(NLL.Pallets_Loaded);
PARAMETER(LCL.Avg_Pallet_Tare);
PARAMETER(NLL.Tot_Pallet_Tare);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program RTV Gross Wgt/Qty     XF.
CALL PROGRAM(RTV Gross Wgt/Qty     XF) ('PQPQXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.USR_Weight_Accumulated);
PARAMETER(LCL.Order_Quantity);
PARAMETER(LCL.Avg_Pallet_Tare);

CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

// PAR.Weight Adjust = PAR.Weight Adjust - LCL.USR Weight Accumulated
PAR.Weight_Adjust = PAR.Weight_Adjust - LCL.USR_Weight_Accumulated;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.USR Assigned This Load is No
IF RCD.USR_Assigned_This_Load = 'N';

// PAR.Weight Adjust = PAR.Weight Adjust + LCL.USR Weight Accumulated
PAR.Weight_Adjust = PAR.Weight_Adjust + LCL.USR_Weight_Accumulated;

ENDIF;

ENDIF;

ENDIF;

//?USER: Final processing (Pre-confirm)

//?Retrieve current stops for load and update *Array with Delivery Dates
EXECUTE FUNCTION(RTV Stop/Drop & Order# RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1426428;
PARAMETER(CTL.Load_ID);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Delivery Date     RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1409517;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Requested_Delivery_Date);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(CRT Load Stop Array    CR) TYPE(CRTOBJ) ARRAY(Load_Planning_StoAC1425823;
 PARAMETER(DB1.Stop_Drop);
 PARAMETER(PAR.Requested_Delivery_Date);
 {
  //?USER: Processing if Data record already exists

  QUIT;

 }

}


//?Retrieve array to edit stop/delivery date sequence
// WRK.Scheduled Delivery Date = CON.*ZERO
WRK.Requested_Delivery_Date = *ZERO;

EXECUTE FUNCTION(RTV Stops/Chk Dte Seq  RT) TYPE(RTVOBJ) ARRAY(Load_Planning_StoAC1425288;
PARAMETER(1);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 CASE;

 // IF DB1.Scheduled Delivery Date LT WRK.Scheduled Delivery Date
 IF DB1.Requested_Delivery_Date < WRK.Requested_Delivery_Date;

 // PGM.*Return code = CND.Check Error
 PGM.*Return_code = 'CHKERR';

 QUIT;

 ENDIF;

 // WRK.Scheduled Delivery Date = DB1.Scheduled Delivery Date
 WRK.Requested_Delivery_Date = DB1.Requested_Delivery_Date;

}


//?Check Error?
CASE;

// IF PGM.*Return code is Check Error
IF PGM.*Return_code = 'CHKERR';

// Send error message - 'Stop sequences are invalid in relation to their Delivery Dates.'
ERROR(USR2372);
MSGPARM(PAR.Stop_Drop);

ENDIF;

EXECUTE FUNCTION(RTV Del All Stops      RT) TYPE(RTVOBJ) ARRAY(Load_Planning_StoAC1425779;
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DEL All Stops          DL) TYPE(DLTOBJ) ARRAY(Load_Planning_StoAC1425778;
 PARAMETER(DB1.Stop_Drop);
}


EXECUTE FUNCTION(RTV Deliv Dts for Edt  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1425976;
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER(CTL.Load_ID);
{
 //?USER: Initialize routine

 //?05/12/04 SLM PKTR01 Multi-Company - Function was changed
 //?                                    to remove Company RST or Pos
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?TPA 10/03/07 - If add mode, CTL Gross weight is calc in subfile
//?Change mode so go to Load and then Order to get Gross weights
CASE;

// IF PAR.Load ID is Blank
IF PAR.Load_ID = *ZERO;

//?Change mode so go to Load and then Order to get Gross weights
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV GrsWgt w/PltTr Ld RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1601442;
PARAMETER(CTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(PAR.Trailer_IN_Weight);
PARAMETER(CTL.Load_Status);
{
 //?USER: Initialize routine

 // PAR.USR Weight Accumulated = CON.*ZERO
 PAR.USR_Weight_Accumulated = *ZERO;

 CASE;

 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 EXECUTE FUNCTION(RTV Pallet/Tare        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1585842;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Pallets_Loaded);
 PARAMETER(LCL.Avg_Pallet_Tare);
 PARAMETER(LCL.Tot_Pallet_Tare);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?***** Change log and comments
 DO;

 //?** 01/18/2010 PKD E000261 Pass the Average Pallet Tare
 ENDDO;

 //?USER: Process Data record

 //?01/18/10 PKD E000261 SEND in LCL.Avg Pallet Tare
 // Call program RTV Gross Wgt/Qty     XF.
 CALL PROGRAM(RTV Gross Wgt/Qty     XF) ('PQPQXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.USR_Weight_Accumulated);
 PARAMETER(LCL.Order_Quantity);
 PARAMETER(LCL.Avg_Pallet_Tare);

 //?USER: Exit processing

 CASE;

 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 EXECUTE FUNCTION(RTV Pallet/Tare        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1585842;
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.Pallets_Loaded);
 PARAMETER(LCL.Avg_Pallet_Tare);
 PARAMETER(LCL.Tot_Pallet_Tare);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.USR Weight Accumulated = PAR.USR Weight Accumulated + LCL.Tot Pallet Tare
 PAR.USR_Weight_Accumulated = PAR.USR_Weight_Accumulated + LCL.Tot_Pallet_Tare;

 ENDIF;

}


// PAR.Weight Adjust = PAR.Weight Adjust + PAR.Trailer IN Weight
PAR.Weight_Adjust = PAR.Weight_Adjust + PAR.Trailer_IN_Weight;

ENDIF;

// CTL.Weight Adjust = CON.1 * PAR.Weight Adjust *Rounded
CTL.Weight_Adjust = 1 * PAR.Weight_Adjust 'H';

// PAR.Weight Adjust = CON.*ZERO
PAR.Weight_Adjust = *ZERO;

//?Maximum message
CASE;

// IF CTL.Weight Adjust GT PAR.Maximum pounds
IF CTL.Weight_Adjust > PAR.Maximum_pounds;

// AND PAR.Maximum pounds NE WRK.ZERO
AND PAR.Maximum_pounds <> WRK.ZERO;

// Send information message - 'Load weight is greater than maximum pounds allowed.'
MESSAGE(USR1261 *INFO);

ENDIF;

//?* C0480 -- 6/16/15 do here as it was
//?PK0302 Perform Max Sched Ship Wt flag is Y & ship method is Truck
CASE;

// IF LCL.Max Schd Shp Wt Edit Flg is Yes
IF LCL.Max_Schd_Shp_Wt_Edit_Flg = 'Y';

// AND PAR.Shipping Method is Not Rail
AND PAR.Shipping_Method = 'CT'/'PT';

CASE;

// IF LCL.Order Weight Assigned is Greater than zero
IF LCL.Order_Weight_Assigned > *ZERO;

CASE;

// IF WRK.Company Organization is Seaboard
IF WRK.Company_Organization = 'S';

//?** Flag to update SSD if it is changed                E002102
// Call program SEL Sched Loads Cnfrm  PV.
CALL PROGRAM(SEL Sched Loads Cnfrm  PV) ('POJSPVR');
PARAMETER(PAR.Status_Y_or_N);
PARAMETER(CTL.Load_ID);
PARAMETER(LCL.Scheduled_Ship_Dt_Assgnd);
PARAMETER(PAR.Deadline_Depart_Date_LH);
PARAMETER(WRK.USR_Return_Code);
PARAMETER(LCL.Scheduled_Ship_Date_USR);
PARAMETER(LCL.Order_Weight_Assigned);
PARAMETER(WRK.Warehouse_Code_Assigned);
PARAMETER(WRK.Warehouse_Type_Assigned);
PARAMETER(LCL.Slot_Type_f_New_Ords_USR);
PARAMETER(LCL.Boxes_Total_Quantity);
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER(CTL.Order_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Return Code = CND.Not Returned
WRK.USR_Return_Code = *BLANK;

ENDIF;

CASE;

// IF WRK.USR Return Code is Exists
IF WRK.USR_Return_Code = 'E';

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

// WRK.USR Display 2 = CND.Yes
WRK.USR_Display_2 = 'Y';

// WRK.USR Display 1 = CND.*blank
WRK.USR_Display_1 = *BLANK;

// PAR.Deadline Depart Date LH = CON.*ZERO
PAR.Deadline_Depart_Date_LH = *ZERO;

// PAR.Deadline Depart Time LH = CON.*ZERO
PAR.Deadline_Depart_Time_LH = *ZERO;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// WRK.Error Status = CND.blank
WRK.Error_Status = *BLANK;

//?Determine if dates are in correct order on load
CASE;

// IF PAR.Shipping Method is Buyers Truck
IF PAR.Shipping_Method = 'CR'/'CT';

//?Determine if dates are in correct order on load
// IF LCL.Scheduled Ship Date USR is Entered
IF LCL.Scheduled_Ship_Date_USR <> *ZERO;

// WRK.Warehouse Code PASS   USR = CON.*BLANK
WRK.Warehouse_Code_PASS_USR = *BLANK;

//?** Change to use the XF instead of the RT             E00495
//?** Use carrier appt date/time if entered, else RSD/T  E00495
// Call program CLC Must Ship/Load     XF.
CALL PROGRAM(CLC Must Ship/Load     XF) ('PMQAXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(WRK.Must_Ship_Error);
PARAMETER(PAR.Warehouse_Code);

CASE;

// IF WRK.Must Ship Error is No Error
IF WRK.Must_Ship_Error = *BLANK;

// IF WRK.Must Ship Error is Req Ship should =Must Shp
IF WRK.Must_Ship_Error = 'RSD';

// IF *OTHERWISE
IF *OTHERWISE;

//?Display program will log the deadline errors
// Call program DSP Must Ship Err/Load DF.
CALL PROGRAM(DSP Must Ship Err/Load DF) ('PDMBDFR');
PARAMETER(CTL.Load_ID);
PARAMETER(LCL.Scheduled_Ship_Date_USR);

// WRK.USR Exit Program = CND.no
WRK.USR_Exit_Program = 'N';

ENDIF;

ENDIF;

ENDIF;

// LCL.First Order Assigned = CND.yes
LCL.First_Order_Assigned = 'Y';

ENDIF;

ENDIF;

//?RMC 1/3/05 - Order not on load matching load start co
CASE;

// IF WRK.Status Flag 3  Y/N is No
IF WRK.Status_Flag_3_Y_N = 'N';

// AND LCL.Order Weight Assigned is Greater than zero
AND LCL.Order_Weight_Assigned > *ZERO;

// Send error message - 'Invalid Load set up. Order not found with Load Start Co.'
ERROR(USR3403);
MSGPARM(CTL.Company_Number);

ENDIF;

//?If no errors, display assign message
CASE;

// IF WRK.USR Display 2 is Yes
IF WRK.USR_Display_2 = 'Y';

//?If no errors, display assign message
// IF *OTHERWISE
IF *OTHERWISE;

//?Assign message
CASE;

// IF WRK.USR Display 1 is Yes
IF WRK.USR_Display_1 = 'Y';

// Send information message - 'Assign load pending'
MESSAGE(USR1258 *INFO);

// WRK.USR Display 1 = CND.*blank
WRK.USR_Display_1 = *BLANK;

//?Assign message
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF WRK.USR Display 1 is No
IF WRK.USR_Display_1 = 'N';

// Send error message - 'This order cannot arrive on time.'
ERROR(USR2688);
MSGPARM(WRK.USR_Stop);

ENDIF;

// WRK.USR Display 1 = CND.*blank
WRK.USR_Display_1 = *BLANK;

// PAR.Status - Y or N = CND.no
PAR.Status_Y_or_N = 'N';

ENDIF;

ENDIF;

//?USER: Process subfile control (Post-confirm)

//?Fill in shipping method
CASE;

// IF CTL.USR Shipping Method EQ WRK.BLANK
IF CTL.USR_Shipping_Method = WRK.BLANK;

// CTL.USR Shipping Method = PAR.Shipping Method
CTL.USR_Shipping_Method = PAR.Shipping_Method;

CASE;

// IF CTL.USR Shipping Method is Collect
IF CTL.USR_Shipping_Method = 'CR'/'CT';

// CTL.Carrier Code = CND.Buyer's Truck
CTL.Carrier_Code = 'BUY';

// WRK.Carrier Code = CND.Buyer's Truck
WRK.Carrier_Code = 'BUY';

// IF *OTHERWISE
IF *OTHERWISE;

//?RMC added 5/29/08
CASE;

// IF CTL.Carrier Code is Buyer's Truck
IF CTL.Carrier_Code = 'BUY';

// CTL.Carrier Code = CND.not entered
CTL.Carrier_Code = *BLANK;

// WRK.Carrier Code = CND.not entered
WRK.Carrier_Code = *BLANK;

ENDIF;

ENDIF;

ENDIF;

EXECUTE FUNCTION(VAL Load Exist        RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1197457;
PARAMETER(CTL.Load_ID);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


//?If header doesn't exist, create it
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

CASE;

// IF WRK.Company Organization is Seaboard
IF WRK.Company_Organization = 'S';

//?** Default shag/ wash flags to "No" for Collect, else, "Yes"  E00495
CASE;

// IF CTL.USR Shipping Method is Collect
IF CTL.USR_Shipping_Method = 'CR'/'CT';

// WRK.Load Shag Flag = CND.no
WRK.Load_Shag_Flag = 'N';

// WRK.Load Wash Flag = CND.no
WRK.Load_Wash_Flag = 'N';

//?** Default shag/ wash flags to "No" for Collect, else, "Yes"  E00495
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Load Shag Flag = CND.yes
WRK.Load_Shag_Flag = 'Y';

// WRK.Load Wash Flag = CND.yes
WRK.Load_Wash_Flag = 'Y';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Load Shag Flag = CND.no
WRK.Load_Shag_Flag = 'N';

// WRK.Load Wash Flag = CND.no
WRK.Load_Wash_Flag = 'N';

ENDIF;

EXECUTE FUNCTION(CRT Load Header        CR) TYPE(CRTOBJ) FILE(OMFJCPP)          AC1183329;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Scheduled_Ship_Date_USR);
PARAMETER(WRK.LTL_Flag);
PARAMETER('E');
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(CTL.Total_Load_Order_Weight);
PARAMETER(*ZERO);
PARAMETER(CTL.Allocate_By_Pound_or_Mile);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(CTL.Carrier_Code);
PARAMETER(CTL.Truck_Size);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('O');
PARAMETER(CTL.Load_Type);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(CTL.USR_Shipping_Method);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.BLANK);
PARAMETER(WRK.BLANK);
PARAMETER(*ZERO);
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(WRK.Load_Shag_Flag);
PARAMETER(WRK.Load_Wash_Flag);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('N');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.BLANK);
PARAMETER(WRK.BLANK);
PARAMETER('N');
PARAMETER(WRK.BLANK);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER('N');
PARAMETER(WRK.Blank_for_3_USR);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?***** Change Log and Comments
 DO;

 //?** 06/28/2006 LJB TRF011
 //?** Added 3 char LH On-Time Reason Code as an input parm to
 //?** replace the 1 char On Time Reason parm
 //?*****
 //?** 09/19/2006 LJB PK0036
 //?** Added 3 char LH Heldover Reason Code as an input parm to
 //?** replace the 1 char Held Over Reason parm
 //?*****
 ENDDO;

}


// PAR.Load ID = CTL.Load ID
PAR.Load_ID = CTL.Load_ID;

// PAR.Display Flag = CND.No
PAR.Display_Flag = 'N';

// LCL.Load Create Sts USR = CND.yes
LCL.Load_Create_Sts_USR = 'Y';

ENDIF;

//?------------
// Send status message - 'Processing...'
MESSAGE(USR2303 *STATUS);

//?USER: Process subfile record (Post-confirm)

//?Process assign to load
CASE;

// IF RCD.*SFLSEL is *Assign to Load
IF RCD.*SFLSEL = '1';

// CTL.Scheduled Ship Date USR = PAR.Scheduled Ship Date
CTL.Scheduled_Ship_Date_USR = PAR.Scheduled_Ship_Date;

// WRK.Stop/Drop Sequence Number = WRK.Stop/Drop Sequence Number + CON.1
WRK.Stop_Drop_Sequence_Number = WRK.Stop_Drop_Sequence_Number + 1;

// RCD.USR Status (Y/N) = CND.yes
RCD.USR_Status_Y_N = 'Y';

//?***** Determine Load Change Type *****
EXECUTE FUNCTION(Val Stop Existance    RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1554002;
PARAMETER(CTL.Load_ID);
PARAMETER(RCD.USR_Stop);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


//?Load Change Type (Original -Purva 10/5/99)
CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// LCL.Load Change Type = CND.Add Order/Stop to Load
LCL.Load_Change_Type = 'ADDSTP';

EXECUTE FUNCTION(VAL No Stops on Load  RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1585430;
PARAMETER(*MISSING);
PARAMETER(CTL.Load_ID);
PARAMETER(LCL.Status_Y_or_N);
{
 //?USER: Initialize routine

 // PAR.Status - Y or N = CND.no
 PAR.Status_Y_or_N = 'N';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PAR.Status - Y or N = CND.yes
 PAR.Status_Y_or_N = 'Y';

 QUIT;

}


CASE;

// IF LCL.Status - Y or N is no
IF LCL.Status_Y_or_N = 'N';

// LCL.Load Change Type = CND.Add Order to Load
LCL.Load_Change_Type = 'ADDORD';

ENDIF;

//?Load Change Type (Original -Purva 10/5/99)
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Load Change Type = CND.Add Order to Load
LCL.Load_Change_Type = 'ADDORD';

ENDIF;

//?**************************************
//?E01488 RMC 5/19/11 upd Appt conf fields (were going out -0-, blank)
// LCL.LD Carrier Appt Date = CON.*ZERO
LCL.LD_Carrier_Appt_Date = *ZERO;

// LCL.LD Carrier Appt Time = CON.*ZERO
LCL.LD_Carrier_Appt_Time = *ZERO;

//?Output Carrier appt if appt conf was made on order before load tied
CASE;

// IF RCD.OH Appt Confirmation Dt is Entered
IF RCD.OH_Appt_Confirmation_Dt > *ZERO;

// LCL.LD Carrier Appt Date = RCD.Requested Delivery Date
LCL.LD_Carrier_Appt_Date = RCD.Requested_Delivery_Date;

// LCL.LD Carrier Appt Time = CON.100 * RCD.Requested Delivery Time *
LCL.LD_Carrier_Appt_Time = 100 * RCD.Requested_Delivery_Time;

ENDIF;

EXECUTE FUNCTION(CRT Load Detail        CR) TYPE(CRTOBJ) FILE(OMFLCPP)          AC1183326;
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.Stop_Drop_Sequence_Number);
PARAMETER(RCD.USR_Stop);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(RCD.Rated_Freight);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('O');
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(RCD.OHE_Appt_Confirmation_Nm);
PARAMETER(RCD.OHE_Appt_Confirmation_#);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.BLANK);
PARAMETER(WRK.BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(LCL.LD_Carrier_Appt_Date);
PARAMETER(RCD.OH_Appt_Confirmation_Dt);
PARAMETER(*ZERO);
PARAMETER(LCL.LD_Carrier_Appt_Time);
PARAMETER(RCD.OH_Appt_Confirmation_Tm);
PARAMETER(*ZERO);
PARAMETER(WRK.Miles_Error_Sts);
PARAMETER(WRK.LD_Unused_Sts_2);
PARAMETER(WRK.HPB_Transload_Station);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?** Update OHE record with Load ID/Stop Seq if it exists  FP1303
// Call program VAL CHG OHE for ld pln XF.
CALL PROGRAM(VAL CHG OHE for ld pln XF) ('PMDMXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.Stop_Drop_Sequence_Number);

//?If buyers truck, default carrier and trk size, and if PT and dft carr exst
DO;

CASE;

// IF CTL.USR Shipping Method is Buyers Truck
IF CTL.USR_Shipping_Method = 'CR'/'CT';

//?9/4/2007 Slm FP1061 - WEB030 TRF-Misc Requests for WEB Page Changes
//?    if changes to carrier or sched ship date, write log record
//?Change to Carrier
//?Default Carrier
CASE;

// IF CTL.Carrier Code EQ WRK.BLANK
IF CTL.Carrier_Code = WRK.BLANK;

// CTL.Carrier Code = CON.BUY
CTL.Carrier_Code = 'BUY';

// WRK.Carrier Broker = CTL.Carrier Code
WRK.Carrier_Broker = CTL.Carrier_Code;

ENDIF;

//?Default Truck Size
CASE;

// IF CTL.Load Type is Regular
IF CTL.Load_Type = 'R';

// CTL.Truck Size = CND.Standard
CTL.Truck_Size = 'T';

//?Default Truck Size
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.Load Type is Bulk
IF CTL.Load_Type = 'B';

// CTL.Truck Size = CND.Bulk
CTL.Truck_Size = 'B';

ENDIF;

ENDIF;

EXECUTE FUNCTION(CHG Carrier/Truck Size CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1522897;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Carrier_Code);
PARAMETER(CTL.Truck_Size);
PARAMETER(CTL.Carrier_Code);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?Output the Load Header changes to Load order change log
DO;

//?Change to Carrier
// WRK.Load Change Type = CND.Carrier Change
WRK.Load_Change_Type = 'CARCHG';

// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// WRK.Change Log Prior Val Usr1 = CVTVAR(CON.*BLANK)
WRK.Change_Log_Prior_Val_Usr1 = CVTVAR(*BLANK);

// WRK.Change Log New VL Usr 2 = CVTVAR(CTL.Carrier Code)
WRK.Change_Log_New_VL_Usr_2 = CVTVAR(CTL.Carrier_Code);

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(WRK.Change_Log_Prior_Val_Usr1);
PARAMETER(WRK.Change_Log_New_VL_Usr_2);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(CTL.Carrier_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(*ZERO);

ENDDO;

// IF *OTHERWISE
IF *OTHERWISE;

//?RMC Added 5/29/08
CASE;

// IF CTL.Carrier Code is Buyer's Truck
IF CTL.Carrier_Code = 'BUY';

// CTL.Carrier Code = CND.not entered
CTL.Carrier_Code = *BLANK;

// WRK.Carrier Broker = CND.not entered
WRK.Carrier_Broker = *BLANK;

ENDIF;

//?RMC added 3/08/11  E01325 default carrier from whs for "OR" type onl
CASE;

// IF CTL.Carrier Code is not entered
IF CTL.Carrier_Code = *BLANK;

EXECUTE FUNCTION(Rtv Carrier Dft      RT) TYPE(RTVOBJ) FILE(CAADREP)            AC2012337;
PARAMETER(RCD.Warehouse_Code);
PARAMETER(LCL.Default_Carrier_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Default Carrier Code is Entered
IF LCL.Default_Carrier_Code <> *BLANK;

CASE;

// IF RCD.Order Type - Sales is Regular Order
IF RCD.Order_Type_Sales = 'OR';

// CTL.Carrier Code = LCL.Default Carrier Code
CTL.Carrier_Code = LCL.Default_Carrier_Code;

// WRK.Carrier Code = LCL.Default Carrier Code
WRK.Carrier_Code = LCL.Default_Carrier_Code;

//?Default Truck Size
CASE;

// IF CTL.Load Type is Regular
IF CTL.Load_Type = 'R';

// CTL.Truck Size = CND.Standard
CTL.Truck_Size = 'T';

//?Default Truck Size
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.Load Type is Bulk
IF CTL.Load_Type = 'B';

// CTL.Truck Size = CND.Bulk
CTL.Truck_Size = 'B';

ENDIF;

ENDIF;

EXECUTE FUNCTION(CHG Carrier/Truck Size CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1522897;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Carrier_Code);
PARAMETER(CTL.Truck_Size);
PARAMETER(CTL.Carrier_Code);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?Output the Load Header changes to Load order change log
DO;

//?Change to Carrier
// WRK.Load Change Type = CND.Carrier Change
WRK.Load_Change_Type = 'CARCHG';

// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// WRK.Change Log Prior Val Usr1 = CVTVAR(CON.*BLANK)
WRK.Change_Log_Prior_Val_Usr1 = CVTVAR(*BLANK);

// WRK.Change Log New VL Usr 2 = CVTVAR(CTL.Carrier Code)
WRK.Change_Log_New_VL_Usr_2 = CVTVAR(CTL.Carrier_Code);

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(WRK.Change_Log_Prior_Val_Usr1);
PARAMETER(WRK.Change_Log_New_VL_Usr_2);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(CTL.Carrier_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(*ZERO);

ENDDO;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDDO;

EXECUTE FUNCTION(UPD Load Information   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1325557;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(CTL.Carrier_Code);
PARAMETER(CTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER('02');
{
 //?USER: Process Data record

 EXECUTE FUNCTION(UPD Event: Ship Detail RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1335289;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Event_Code);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(CHG Shipping Event     CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1325667;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Event_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 EXECUTE FUNCTION(Chg Load Information   CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1197376;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Rated_Freight);
 PARAMETER(PAR.Event_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program TRG Order Hdr CHG Trig XT.
  CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Ship_To_Name);
  PARAMETER(DB1.Ship_To_Address_Line_1);
  PARAMETER(DB1.Ship_To_Address_Line_2);
  PARAMETER(DB1.Ship_To_Address_Line_3);
  PARAMETER(DB1.Ship_To_City);
  PARAMETER(DB1.Ship_To_State_Code);
  PARAMETER(DB1.Ship_To_Zip_Postal_Code);
  PARAMETER(DB1.Bill_to_Customer);
  PARAMETER(DB1.Bill_to_Name);
  PARAMETER(DB1.Bill_to_Address_Line_1);
  PARAMETER(DB1.Bill_to_Address_Line_2);
  PARAMETER(DB1.Bill_to_Address_Line_3);
  PARAMETER(DB1.Bill_to_City);
  PARAMETER(DB1.Bill_to_State_Code);
  PARAMETER(DB1.Bill_to_Zip_Postal_Code);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Order_Date);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Cancel_Date);
  PARAMETER(DB1.Terms_Code);
  PARAMETER(DB1.Special_Instructions);
  PARAMETER(DB1.Special_Instructions_2);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Order_in_Use);
  PARAMETER(DB1.Header_Status);
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER(DB1.Order_Type_Print_Status);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.User_Original_Entry);
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.Order_Value_Total);
  PARAMETER(DB1.Order_Weight_Total);
  PARAMETER(DB1.Credit_Hold);
  PARAMETER(DB1.Production_Hold);
  PARAMETER(DB1.New_Customer_Hold);
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(DB1.Requested_Delivery_Time);
  PARAMETER(DB1.Accounts_Receiv_Ent_1);
  PARAMETER(DB1.Accounts_Receiv_Ent_2);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.LTL_Flag);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Shrink_Wrap);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Reefer_Temperature);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Attach_to_Invoice_Number);
  PARAMETER(DB1.Load_Plan_Order);
  PARAMETER(DB1.Print_Pick_Slip);
  PARAMETER(DB1.Resell_Reference_Number);
  PARAMETER(DB1.Special_Comment_1);
  PARAMETER(DB1.Special_Comment_2);
  PARAMETER(DB1.Affect_Auto_Accruals);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Manager_Level_Code);
  PARAMETER(DB1.VP_Level_Code);
  PARAMETER(DB1.Attach_to_Order_Number);
  PARAMETER(DB1.Reason_for_Price_Audit);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Invoice_Date);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Trans_Contol_AS400_Plant);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.A_R_order_Value_Total);
  PARAMETER(DB1.Billing_Activity_Type);
  PARAMETER(DB1.Block_Order_Flag);
  PARAMETER(DB1.Order_Certification_Flag);
  PARAMETER(DB1.Invoice_Order_Value_Tot);
  PARAMETER(DB1.Process_Sts_for_3C);
  PARAMETER(DB1.Order_Conf_Fax_Sts);
  PARAMETER(DB1.Manifest_Fax_Sts);
  PARAMETER(DB1.Invoice_Fax_Sts);
  PARAMETER(DB1.Transfer_in_Storage_Ind);
  PARAMETER(DB1.Email_Cust_On_Order_Ship);
  PARAMETER(DB1.Order_Emailed);
  PARAMETER(DB1.Export_Docs_Go_w_Driver);
  PARAMETER(DB1.Shipping_Temp_Code_C_F);
  PARAMETER(DB1.Broker_Order_Status);
  PARAMETER(DB1.Air_Freight_Order);
  PARAMETER(DB1.Order_Requires_Review);
  PARAMETER(DB1.OH_Load_Plan_Ready);
  PARAMETER(DB1.Export_USDA_Approved);
  PARAMETER(DB1.HPB_Ship_to_Warehouse);
  PARAMETER(DB1.OH_TF_Exempt_Code);
  PARAMETER(DB1.OH_Appt_Confirmation_Dt);
  PARAMETER(DB1.JPN_Invoice_Issuance_Date);
  PARAMETER(DB1.Load_Actual_Shipped_Date);
  PARAMETER(DB1.Load_BOL_Complete_Date);
  PARAMETER(DB1.Load_Truck_Departure_Date);
  PARAMETER(DB1.Maximum_Gross_Weight);
  PARAMETER(DB1.Time_of_Original_Entry);
  PARAMETER(DB1.OH_Appt_Confirmation_Tm);
  PARAMETER(DB1.Load_BOL_Complete_Time);
  PARAMETER(DB1.Load_Truck_Departure_Time);
  PARAMETER(DB1.Act_Frt_Reference_Amount);
  PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
  PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
  PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
  PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);

 }

}


EXECUTE FUNCTION(RTV 1st Export Order   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1502454;
PARAMETER(CTL.Load_ID);
PARAMETER(1);
PARAMETER(WRK.Order_Number_Saved_USR);
PARAMETER(NLL.MPC_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?*** If Export Order, then Stop Search and Return Order #
 EXECUTE FUNCTION(RTV Exprt Sts/ShipCust RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1502609;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Export_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Export Status is yes
 IF PAR.Export_Status = 'Y';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 ENDIF;

}


EXECUTE FUNCTION(Rtv Min Temp Ld,shiptoRT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1683646;
PARAMETER(WRK.Ship_To_City);
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.Shipping_Temp_Code_C_F);
PARAMETER(WRK.USR_Temperature_3_1);
PARAMETER(WRK.Order_Number_Saved_USR);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 // PAR.USR Temperature 3.1 = CND.Low
 PAR.USR_Temperature_3_1 = -99;

 // PAR.Shipping Temp Code C/F = WRK.Blank for 4           USR
 PAR.Shipping_Temp_Code_C_F = WRK.Blank_for_4_USR;

 //?USER: Process Data record

 //?**** new 7/19/02
 //?If db1 doesnt match par, convert db1 temp to par temp C or F
 CASE;

 // IF PAR.Shipping Temp Code C/F NE WRK.Blank for 4           USR
 IF PAR.Shipping_Temp_Code_C_F <> WRK.Blank_for_4_USR;

 // AND PAR.Shipping Temp Code C/F NE DB1.Shipping Temp Code C/F
 AND PAR.Shipping_Temp_Code_C_F <> DB1.Shipping_Temp_Code_C_F;

 CASE;

 // IF PAR.Shipping Temp Code C/F is Celsius
 IF PAR.Shipping_Temp_Code_C_F = 'C';

 //?Convert DB1 to Celsius
 // Compute Cels from Fahr
 LCL.USR_Temperature_3_1 = ( ( DB1.Reefer_Temperature - 32 ) * 5 ) / 9 'H';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Convert DB1 to Fahr
 // Compute Fahr from Cels
 LCL.USR_Temperature_3_1 = ( ( DB1.Reefer_Temperature * 9 ) / 5 'H' ) + 32;

 ENDIF;

 //?If db1 doesnt match par, convert db1 temp to par temp C or F
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.USR Temperature 3.1 = DB1.Reefer Temperature
 LCL.USR_Temperature_3_1 = DB1.Reefer_Temperature;

 ENDIF;

 CASE;

 // IF LCL.USR Temperature 3.1 GT PAR.USR Temperature 3.1
 IF LCL.USR_Temperature_3_1 > PAR.USR_Temperature_3_1;

 // PAR.USR Temperature 3.1 = DB1.Reefer Temperature
 PAR.USR_Temperature_3_1 = DB1.Reefer_Temperature;

 // PAR.Shipping Temp Code C/F = DB1.Shipping Temp Code C/F
 PAR.Shipping_Temp_Code_C_F = DB1.Shipping_Temp_Code_C_F;

 ENDIF;

 //?Output 1st Ship to city for Discharge Port   2/13/04    RMC
 CASE;

 // IF DB1.Export Status is yes
 IF DB1.Export_Status = 'Y';

 CASE;

 // IF DB1.Order Number EQ PAR.Order Number Saved USR
 IF DB1.Order_Number = PAR.Order_Number_Saved_USR;

 // PAR.Ship To City = DB1.Ship To City
 PAR.Ship_To_City = DB1.Ship_To_City;

 ENDIF;

 ENDIF;

 //?USER: Exit processing

 CASE;

 // IF PAR.USR Temperature 3.1 is Low
 IF PAR.USR_Temperature_3_1 = -99;

 // PAR.USR Temperature 3.1 = CON.*ZERO
 PAR.USR_Temperature_3_1 = *ZERO;

 ENDIF;

}


EXECUTE FUNCTION(Rtv 1st Ord Delv Date RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1409516;
PARAMETER(CTL.Load_ID);
PARAMETER(1);
PARAMETER(PAR.Requested_Delivery_Date);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Delivery Date     RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1409517;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Requested_Delivery_Date);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 QUIT;

}


EXECUTE FUNCTION(CHG Temp & Req Dlv Dte CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1487688;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Scheduled_Ship_Date_USR);
PARAMETER(WRK.USR_Temperature_3_1);
PARAMETER(*ZERO);
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER(WRK.Shipping_Temp_Code_C_F);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(Crt Load Plan Event    RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1295306;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Ship_To_Customer);
{
 //?USER: Initialize routine

 // PAR.Event Number = CON.*ZERO
 PAR.Event_Number = *ZERO;

 EXECUTE FUNCTION(RTV Latest Event/Date  RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1280294;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Event_Number);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?USER: Processing if Data record not found

 // WRK.Event Number = WRK.Event Number + CON.1
 WRK.Event_Number = WRK.Event_Number + 1;

 EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(WRK.Event_Number);
 PARAMETER('01');
 PARAMETER(PAR.Company_Number);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(JOB.*Job_date);
 PARAMETER('Y');
 PARAMETER('N');
 PARAMETER('Y');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 // WRK.Event Number = WRK.Event Number + CON.1
 WRK.Event_Number = WRK.Event_Number + 1;

 EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(WRK.Event_Number);
 PARAMETER('02');
 PARAMETER(PAR.Company_Number);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(JOB.*Job_date);
 PARAMETER('Y');
 PARAMETER('N');
 PARAMETER('Y');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?USER: Process Data record

 // PAR.Event Number = PAR.Event Number + CON.1
 PAR.Event_Number = PAR.Event_Number + 1;

 EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Event_Number);
 PARAMETER('02');
 PARAMETER(DB1.Invoice_Memo_Company);
 PARAMETER(DB1.Invoice_Memo_Number);
 PARAMETER(DB1.Invoice_Memo_Suffix);
 PARAMETER(JOB.*Job_date);
 PARAMETER(DB1.Activity_Completion);
 PARAMETER(DB1.Activity_Hold);
 PARAMETER(DB1.Post_Cash_Complete);
 PARAMETER(DB1.Cross_Event_Ref_Comp);
 PARAMETER(DB1.Cross_Event_Ref_Order);
 PARAMETER(DB1.Cross_Event_Ref_Event);
 PARAMETER(DB1.Ship_To_Customer);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 QUIT;

}


//?OMS315/C4121: log add to load
// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(RCD.USR_Stop);
PARAMETER(LCL.Load_Change_Type);
PARAMETER('TRF');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Carrier_Code);
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Order_Number);

// Execute function Clr Program Message Q  US.
EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
{
 * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
 C                     CALL 'Y2CLMSC'
 C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
 C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
 * RESET FIRST MESSAGE ONLY FLAG.
 C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
}


//?**************************************************************************
//?*OMS273
//?**************************************************************************
EXECUTE FUNCTION(Rtv 1st Ord Delv Date RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1409516;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.USR_Stop);
PARAMETER(RCD.Requested_Delivery_Date);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Delivery Date     RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1409517;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Requested_Delivery_Date);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 QUIT;

}


// WRK.Load Added/Deleted     .U = CND.*Added
WRK.Load_Added_Deleted_U = 1;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PAR.USR Update Flag = CND.Yes
PAR.USR_Update_Flag = 'Y';

ENDIF;

//?Process delete from load
CASE;

// IF RCD.*SFLSEL is *Delete from Load
IF RCD.*SFLSEL = '4';

// RCD.USR Status (Y/N) = CND.no
RCD.USR_Status_Y_N = 'N';

EXECUTE FUNCTION(DLT Single Load Dtl   RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1197805;
PARAMETER(CTL.Load_ID);
PARAMETER(RCD.Order_Number);
{
 //?USER: Process Data record

 CASE;

 // IF PAR.Order Number EQ DB1.Order Number
 IF PAR.Order_Number = DB1.Order_Number;

 EXECUTE FUNCTION(DLT Load Detail        DL) TYPE(DLTOBJ) FILE(OMFLCPP)          AC1183328;
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Stop_Drop_Sequence_Number);
 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(Dlt Event by Event Cde RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1295307;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('02');
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DLT OP Order Events    DL) TYPE(DLTOBJ) FILE(OPEYCPP)          AC1170143;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Event_Number);
 QUIT;

}


EXECUTE FUNCTION(RTV Latest Event/Date  RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1280294;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.Event_Number);
PARAMETER(RCD.Event_Code);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(RCD.Ship_To_Customer);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(UPD Load Information   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1325557;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(RCD.Event_Code);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(UPD Event: Ship Detail RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1335289;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Event_Code);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(CHG Shipping Event     CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1325667;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Event_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 EXECUTE FUNCTION(Chg Load Information   CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1197376;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Rated_Freight);
 PARAMETER(PAR.Event_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program TRG Order Hdr CHG Trig XT.
  CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Ship_To_Name);
  PARAMETER(DB1.Ship_To_Address_Line_1);
  PARAMETER(DB1.Ship_To_Address_Line_2);
  PARAMETER(DB1.Ship_To_Address_Line_3);
  PARAMETER(DB1.Ship_To_City);
  PARAMETER(DB1.Ship_To_State_Code);
  PARAMETER(DB1.Ship_To_Zip_Postal_Code);
  PARAMETER(DB1.Bill_to_Customer);
  PARAMETER(DB1.Bill_to_Name);
  PARAMETER(DB1.Bill_to_Address_Line_1);
  PARAMETER(DB1.Bill_to_Address_Line_2);
  PARAMETER(DB1.Bill_to_Address_Line_3);
  PARAMETER(DB1.Bill_to_City);
  PARAMETER(DB1.Bill_to_State_Code);
  PARAMETER(DB1.Bill_to_Zip_Postal_Code);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Order_Date);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Cancel_Date);
  PARAMETER(DB1.Terms_Code);
  PARAMETER(DB1.Special_Instructions);
  PARAMETER(DB1.Special_Instructions_2);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Order_in_Use);
  PARAMETER(DB1.Header_Status);
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER(DB1.Order_Type_Print_Status);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.User_Original_Entry);
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.Order_Value_Total);
  PARAMETER(DB1.Order_Weight_Total);
  PARAMETER(DB1.Credit_Hold);
  PARAMETER(DB1.Production_Hold);
  PARAMETER(DB1.New_Customer_Hold);
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(DB1.Requested_Delivery_Time);
  PARAMETER(DB1.Accounts_Receiv_Ent_1);
  PARAMETER(DB1.Accounts_Receiv_Ent_2);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.LTL_Flag);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Shrink_Wrap);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Reefer_Temperature);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Attach_to_Invoice_Number);
  PARAMETER(DB1.Load_Plan_Order);
  PARAMETER(DB1.Print_Pick_Slip);
  PARAMETER(DB1.Resell_Reference_Number);
  PARAMETER(DB1.Special_Comment_1);
  PARAMETER(DB1.Special_Comment_2);
  PARAMETER(DB1.Affect_Auto_Accruals);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Manager_Level_Code);
  PARAMETER(DB1.VP_Level_Code);
  PARAMETER(DB1.Attach_to_Order_Number);
  PARAMETER(DB1.Reason_for_Price_Audit);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Invoice_Date);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Trans_Contol_AS400_Plant);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.A_R_order_Value_Total);
  PARAMETER(DB1.Billing_Activity_Type);
  PARAMETER(DB1.Block_Order_Flag);
  PARAMETER(DB1.Order_Certification_Flag);
  PARAMETER(DB1.Invoice_Order_Value_Tot);
  PARAMETER(DB1.Process_Sts_for_3C);
  PARAMETER(DB1.Order_Conf_Fax_Sts);
  PARAMETER(DB1.Manifest_Fax_Sts);
  PARAMETER(DB1.Invoice_Fax_Sts);
  PARAMETER(DB1.Transfer_in_Storage_Ind);
  PARAMETER(DB1.Email_Cust_On_Order_Ship);
  PARAMETER(DB1.Order_Emailed);
  PARAMETER(DB1.Export_Docs_Go_w_Driver);
  PARAMETER(DB1.Shipping_Temp_Code_C_F);
  PARAMETER(DB1.Broker_Order_Status);
  PARAMETER(DB1.Air_Freight_Order);
  PARAMETER(DB1.Order_Requires_Review);
  PARAMETER(DB1.OH_Load_Plan_Ready);
  PARAMETER(DB1.Export_USDA_Approved);
  PARAMETER(DB1.HPB_Ship_to_Warehouse);
  PARAMETER(DB1.OH_TF_Exempt_Code);
  PARAMETER(DB1.OH_Appt_Confirmation_Dt);
  PARAMETER(DB1.JPN_Invoice_Issuance_Date);
  PARAMETER(DB1.Load_Actual_Shipped_Date);
  PARAMETER(DB1.Load_BOL_Complete_Date);
  PARAMETER(DB1.Load_Truck_Departure_Date);
  PARAMETER(DB1.Maximum_Gross_Weight);
  PARAMETER(DB1.Time_of_Original_Entry);
  PARAMETER(DB1.OH_Appt_Confirmation_Tm);
  PARAMETER(DB1.Load_BOL_Complete_Time);
  PARAMETER(DB1.Load_Truck_Departure_Time);
  PARAMETER(DB1.Act_Frt_Reference_Amount);
  PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
  PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
  PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
  PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);

 }

}


//?*------------------------------------------------------*
//?* 07/18/02 PKP When the Order is removed from the Load, change
//?*              the Deadline Departure Date and Time to zero.
// Call program CLC Deadln Depart Dt  XF.
CALL PROGRAM(CLC Deadln Depart Dt  XF) ('POSCXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Ship_To_City);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(RCD.Requested_Delivery_Date);
PARAMETER(RCD.Requested_Delivery_Time);
PARAMETER(LCL.Deadline_Depart_DT_HDR);
PARAMETER(LCL.Deadline_Depart_Time_HDR);

EXECUTE FUNCTION(Upd Deadline Dte/Tme  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1648968;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.Deadline_Depart_DT_HDR);
PARAMETER(LCL.Deadline_Depart_Time_HDR);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Deadline Dte/Tme  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1648969;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Deadline_Depart_Date_LH);
 PARAMETER(PAR.Deadline_Depart_Time_LH);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


//?*------------------------------------------------------*
//?OMS315/C4121:  add log entry for loads in E status
// WRK.Change Log Prior Value = CVTVAR(RCD.USR Stop)
WRK.Change_Log_Prior_Value = CVTVAR(RCD.USR_Stop);

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(RCD.USR_Stop);
PARAMETER('DELORD');
PARAMETER('TRF');
PARAMETER(WRK.Change_Log_Prior_Value);
PARAMETER(*BLANK);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Carrier_Code);
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Order_Number);

// WRK.Change Log Prior Value = CVTVAR(CON.*BLANK)
WRK.Change_Log_Prior_Value = CVTVAR(*BLANK);

EXECUTE FUNCTION(RTV 1st Export Order   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1502454;
PARAMETER(RCD.Load_ID);
PARAMETER(1);
PARAMETER(WRK.Order_Number_Saved_USR);
PARAMETER(NLL.MPC_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?*** If Export Order, then Stop Search and Return Order #
 EXECUTE FUNCTION(RTV Exprt Sts/ShipCust RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1502609;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Export_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Export Status is yes
 IF PAR.Export_Status = 'Y';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 ENDIF;

}


EXECUTE FUNCTION(Rtv Min Temp Ld,shiptoRT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1683646;
PARAMETER(WRK.Ship_To_City);
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.Shipping_Temp_Code_C_F);
PARAMETER(WRK.USR_Temperature_3_1);
PARAMETER(WRK.Order_Number_Saved_USR);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 // PAR.USR Temperature 3.1 = CND.Low
 PAR.USR_Temperature_3_1 = -99;

 // PAR.Shipping Temp Code C/F = WRK.Blank for 4           USR
 PAR.Shipping_Temp_Code_C_F = WRK.Blank_for_4_USR;

 //?USER: Process Data record

 //?**** new 7/19/02
 //?If db1 doesnt match par, convert db1 temp to par temp C or F
 CASE;

 // IF PAR.Shipping Temp Code C/F NE WRK.Blank for 4           USR
 IF PAR.Shipping_Temp_Code_C_F <> WRK.Blank_for_4_USR;

 // AND PAR.Shipping Temp Code C/F NE DB1.Shipping Temp Code C/F
 AND PAR.Shipping_Temp_Code_C_F <> DB1.Shipping_Temp_Code_C_F;

 CASE;

 // IF PAR.Shipping Temp Code C/F is Celsius
 IF PAR.Shipping_Temp_Code_C_F = 'C';

 //?Convert DB1 to Celsius
 // Compute Cels from Fahr
 LCL.USR_Temperature_3_1 = ( ( DB1.Reefer_Temperature - 32 ) * 5 ) / 9 'H';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Convert DB1 to Fahr
 // Compute Fahr from Cels
 LCL.USR_Temperature_3_1 = ( ( DB1.Reefer_Temperature * 9 ) / 5 'H' ) + 32;

 ENDIF;

 //?If db1 doesnt match par, convert db1 temp to par temp C or F
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.USR Temperature 3.1 = DB1.Reefer Temperature
 LCL.USR_Temperature_3_1 = DB1.Reefer_Temperature;

 ENDIF;

 CASE;

 // IF LCL.USR Temperature 3.1 GT PAR.USR Temperature 3.1
 IF LCL.USR_Temperature_3_1 > PAR.USR_Temperature_3_1;

 // PAR.USR Temperature 3.1 = DB1.Reefer Temperature
 PAR.USR_Temperature_3_1 = DB1.Reefer_Temperature;

 // PAR.Shipping Temp Code C/F = DB1.Shipping Temp Code C/F
 PAR.Shipping_Temp_Code_C_F = DB1.Shipping_Temp_Code_C_F;

 ENDIF;

 //?Output 1st Ship to city for Discharge Port   2/13/04    RMC
 CASE;

 // IF DB1.Export Status is yes
 IF DB1.Export_Status = 'Y';

 CASE;

 // IF DB1.Order Number EQ PAR.Order Number Saved USR
 IF DB1.Order_Number = PAR.Order_Number_Saved_USR;

 // PAR.Ship To City = DB1.Ship To City
 PAR.Ship_To_City = DB1.Ship_To_City;

 ENDIF;

 ENDIF;

 //?USER: Exit processing

 CASE;

 // IF PAR.USR Temperature 3.1 is Low
 IF PAR.USR_Temperature_3_1 = -99;

 // PAR.USR Temperature 3.1 = CON.*ZERO
 PAR.USR_Temperature_3_1 = *ZERO;

 ENDIF;

}


EXECUTE FUNCTION(Rtv 1st Ord Delv Date RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1409516;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.USR_Stop);
PARAMETER(RCD.Requested_Delivery_Date);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Delivery Date     RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1409517;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Requested_Delivery_Date);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 QUIT;

}


EXECUTE FUNCTION(CHG Temp & Req Dlv Dte CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1487688;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(WRK.USR_Temperature_3_1);
PARAMETER(RCD.Rated_Freight);
PARAMETER(RCD.Requested_Delivery_Date);
PARAMETER(WRK.Shipping_Temp_Code_C_F);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(RTV Chk any ords on Ld RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1296397;
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.USR_Check_Y_N_Status);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 // PAR.USR Check Y/N Status = CND.blank
 PAR.USR_Check_Y_N_Status = *BLANK;

 //?USER: Process Data record

 // PAR.USR Check Y/N Status = CND.yes
 PAR.USR_Check_Y_N_Status = 'Y';

 QUIT;

}


//?If no more orders on load check default carrier & clear schd shp dt
CASE;

// IF WRK.USR Check Y/N Status is Not Yes
IF WRK.USR_Check_Y_N_Status = *BLANK/'N';

EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(CTL.Company_Number);
PARAMETER('DFTCARRIER');
PARAMETER(WRK.System_Value_Alpha);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.Carrier Code = WRK.System Value Alpha
WRK.Carrier_Code = WRK.System_Value_Alpha;

//?If carrier EQ default carrier,blank carrier/schd shp dt else just shp dt
CASE;

// IF CTL.Carrier Code EQ WRK.Carrier Code
IF CTL.Carrier_Code = WRK.Carrier_Code;

EXECUTE FUNCTION(CHG Carrier/Schd Sp Dt CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1397691;
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// CTL.Carrier Code = CON.*BLANK
CTL.Carrier_Code = *BLANK;

//?9/4/2007 Slm FP1061 - WEB030 TRF-Misc Requests for WEB Page Changes
//?             Changes due to the Carrier is being changed
// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
PARAMETER('CARCHG');
PARAMETER('TRF');
PARAMETER(WRK.Carrier_Code);
PARAMETER(CTL.Carrier_Code);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(CTL.Carrier_Code);
PARAMETER(CTL.Company_Number);
PARAMETER(*ZERO);

//?If carrier EQ default carrier,blank carrier/schd shp dt else just shp dt
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(CHG Schedule Ship Date CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1411293;
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
{
 //?USER: Processing after Data read

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

// CTL.Scheduled Ship Date USR = CON.*ZERO
CTL.Scheduled_Ship_Date_USR = *ZERO;

ENDIF;

// WRK.Load Added/Deleted     .U = CND.*Deleted
WRK.Load_Added_Deleted_U = 2;

// Execute function Clr Program Message Q  US.
EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
{
 * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
 C                     CALL 'Y2CLMSC'
 C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
 C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
 * RESET FIRST MESSAGE ONLY FLAG.
 C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
}


// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PAR.USR Update Flag = CND.Yes
PAR.USR_Update_Flag = 'Y';

//?CRT: TMS Order Header Trigger
CASE;

// IF RCD.OH Load Plan Ready is Yes
IF RCD.OH_Load_Plan_Ready = 'Y';

// Call program Rtv Crt OH Trigger    XF.
CALL PROGRAM(Rtv Crt OH Trigger    XF) ('PBWVXFR');
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Company_Number);

ENDIF;

ENDIF;

//?USER: Final processing (Post-confirm)

//?PK0302 -- Change sched ship dt
CASE;

// IF LCL.Status Flag 4  Y/N is yes
IF LCL.Status_Flag_4_Y_N = 'Y';

CASE;

// IF LCL.Scheduled Ship Date USR is Entered
IF LCL.Scheduled_Ship_Date_USR <> *ZERO;

EXECUTE FUNCTION(Rtv/Chg Sched Shp Dt   RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1610740;
PARAMETER(CTL.Load_ID);
PARAMETER(LCL.Scheduled_Ship_Date_USR);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(CHG Schedule Ship Date CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1411293;
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.Scheduled_Ship_Date_USR);
 {
  //?USER: Processing after Data read

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


// WRK.Load Change Type = CND.Scheduled Ship Date
WRK.Load_Change_Type = 'SCHSHP';

// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// WRK.Change Log Prior Value = CVTVAR(PAR.Scheduled Ship Date)
WRK.Change_Log_Prior_Value = CVTVAR(PAR.Scheduled_Ship_Date);

// WRK.Change Log New Value = CVTVAR(LCL.Scheduled Ship Date USR)
WRK.Change_Log_New_Value = CVTVAR(LCL.Scheduled_Ship_Date_USR);

// CTL.Scheduled Ship Date USR = LCL.Scheduled Ship Date USR
CTL.Scheduled_Ship_Date_USR = LCL.Scheduled_Ship_Date_USR;

EXECUTE FUNCTION(RTV Load for Date Chg  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1610489;
PARAMETER(CTL.Load_ID);
PARAMETER(LCL.Scheduled_Ship_Date_USR);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(WRK.Change_Log_Prior_Value);
PARAMETER(WRK.Change_Log_New_Value);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(CTL.Carrier_Code);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 //?06/09/2015 PKD/JH E4122 Changed RTV to include Hdr Sts=A|H|L for
 //?                        changing the Requested Ship Date.
 //?USER: Process Data record

 //?06/09/2015 PKD/JH e4122 Save Requested Ship Date for Change Log.
 // LCL.Requested Ship Date = DB1.Requested Ship Date
 LCL.Requested_Ship_Date = DB1.Requested_Ship_Date;

 //?06/09/2015 E4122 Change Req Ship Date for Header Sts=E|A|H|L
 CASE;

 // IF DB1.Header Status is Avail/Alloc/Enter/Hold
 IF DB1.Header_Status = 'L'/'A'/'E'/'H';

 // WRK.Requested Ship Date = PAR.Scheduled Ship Date USR
 WRK.Requested_Ship_Date = PAR.Scheduled_Ship_Date_USR;

 //?06/09/2015 E4122 Change Req Ship Date for Header Sts=E|A|H|L
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Requested Ship Date = DB1.Requested Ship Date
 WRK.Requested_Ship_Date = DB1.Requested_Ship_Date;

 ENDIF;

 //?06/17/2015 Added Deallocate/Allocate process before change to OD.
 EXECUTE FUNCTION(RTV Orders for Dt Chg RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1610490;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(WRK.Requested_Ship_Date);
 PARAMETER(PAR.Scheduled_Ship_Date_USR);
 {
  //?USER: Initialize routine

  //?06/09/2015 PKD/JH E4122 Added Deallocate and Allocate Process
  //?USER: Process Data record

  //?DEALLOCATE
  // LCL.Quantity Scheduled = DB1.Quantity Scheduled
  LCL.Quantity_Scheduled = DB1.Quantity_Scheduled;

  // LCL.Weight Scheduled = DB1.Weight Scheduled
  LCL.Weight_Scheduled = DB1.Weight_Scheduled;

  // Call program UPD Avail-To-Sell  ORD XF.
  CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Quantity_Scheduled);
  PARAMETER(LCL.Weight_Scheduled);
  PARAMETER('OD');
  PARAMETER(JOB.*PROGRAM);
  PARAMETER(DB1.Item_Age_Days);
  PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
  PARAMETER(DB1.Production_Ovr_AgeDte_To);

  //?ALLOCATE
  // LCL.Quantity Scheduled = CON.*ZERO
  LCL.Quantity_Scheduled = *ZERO;

  // LCL.Weight Scheduled = CON.*ZERO
  LCL.Weight_Scheduled = *ZERO;

  // Call program UPD Avail-To-Sell  ORD XF.
  CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Requested_Ship_Date);
  PARAMETER(DB1.Quantity_Ordered);
  PARAMETER(DB1.Weight_Ordered);
  PARAMETER(LCL.Quantity_Scheduled);
  PARAMETER(LCL.Weight_Scheduled);
  PARAMETER('OA');
  PARAMETER(JOB.*PROGRAM);
  PARAMETER(DB1.Item_Age_Days);
  PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
  PARAMETER(DB1.Production_Ovr_AgeDte_To);

  EXECUTE FUNCTION(Chg SchShip/ReqShp Dt CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1702966;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Requested_Ship_Date);
  PARAMETER(PAR.Scheduled_Ship_Date_USR);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 EXECUTE FUNCTION(CHG Sch Shp & Req Shp CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1702497;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Requested_Ship_Date);
 PARAMETER(PAR.Scheduled_Ship_Date_USR);
 {
  //?USER: Processing after Data read

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program TRG Order Hdr CHG Trig XT.
  CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Ship_To_Name);
  PARAMETER(DB1.Ship_To_Address_Line_1);
  PARAMETER(DB1.Ship_To_Address_Line_2);
  PARAMETER(DB1.Ship_To_Address_Line_3);
  PARAMETER(DB1.Ship_To_City);
  PARAMETER(DB1.Ship_To_State_Code);
  PARAMETER(DB1.Ship_To_Zip_Postal_Code);
  PARAMETER(DB1.Bill_to_Customer);
  PARAMETER(DB1.Bill_to_Name);
  PARAMETER(DB1.Bill_to_Address_Line_1);
  PARAMETER(DB1.Bill_to_Address_Line_2);
  PARAMETER(DB1.Bill_to_Address_Line_3);
  PARAMETER(DB1.Bill_to_City);
  PARAMETER(DB1.Bill_to_State_Code);
  PARAMETER(DB1.Bill_to_Zip_Postal_Code);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Order_Date);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Cancel_Date);
  PARAMETER(DB1.Terms_Code);
  PARAMETER(DB1.Special_Instructions);
  PARAMETER(DB1.Special_Instructions_2);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Order_in_Use);
  PARAMETER(DB1.Header_Status);
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER(DB1.Order_Type_Print_Status);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.User_Original_Entry);
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.Order_Value_Total);
  PARAMETER(DB1.Order_Weight_Total);
  PARAMETER(DB1.Credit_Hold);
  PARAMETER(DB1.Production_Hold);
  PARAMETER(DB1.New_Customer_Hold);
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(DB1.Requested_Delivery_Time);
  PARAMETER(DB1.Accounts_Receiv_Ent_1);
  PARAMETER(DB1.Accounts_Receiv_Ent_2);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.LTL_Flag);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Shrink_Wrap);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Reefer_Temperature);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Attach_to_Invoice_Number);
  PARAMETER(DB1.Load_Plan_Order);
  PARAMETER(DB1.Print_Pick_Slip);
  PARAMETER(DB1.Resell_Reference_Number);
  PARAMETER(DB1.Special_Comment_1);
  PARAMETER(DB1.Special_Comment_2);
  PARAMETER(DB1.Affect_Auto_Accruals);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Manager_Level_Code);
  PARAMETER(DB1.VP_Level_Code);
  PARAMETER(DB1.Attach_to_Order_Number);
  PARAMETER(DB1.Reason_for_Price_Audit);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Invoice_Date);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Trans_Contol_AS400_Plant);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.A_R_order_Value_Total);
  PARAMETER(DB1.Billing_Activity_Type);
  PARAMETER(DB1.Block_Order_Flag);
  PARAMETER(DB1.Order_Certification_Flag);
  PARAMETER(DB1.Invoice_Order_Value_Tot);
  PARAMETER(DB1.Process_Sts_for_3C);
  PARAMETER(DB1.Order_Conf_Fax_Sts);
  PARAMETER(DB1.Manifest_Fax_Sts);
  PARAMETER(DB1.Invoice_Fax_Sts);
  PARAMETER(DB1.Transfer_in_Storage_Ind);
  PARAMETER(DB1.Email_Cust_On_Order_Ship);
  PARAMETER(DB1.Order_Emailed);
  PARAMETER(DB1.Export_Docs_Go_w_Driver);
  PARAMETER(DB1.Shipping_Temp_Code_C_F);
  PARAMETER(DB1.Broker_Order_Status);
  PARAMETER(DB1.Air_Freight_Order);
  PARAMETER(DB1.Order_Requires_Review);
  PARAMETER(DB1.OH_Load_Plan_Ready);
  PARAMETER(DB1.Export_USDA_Approved);
  PARAMETER(DB1.HPB_Ship_to_Warehouse);
  PARAMETER(DB1.OH_TF_Exempt_Code);
  PARAMETER(DB1.OH_Appt_Confirmation_Dt);
  PARAMETER(DB1.JPN_Invoice_Issuance_Date);
  PARAMETER(DB1.Load_Actual_Shipped_Date);
  PARAMETER(DB1.Load_BOL_Complete_Date);
  PARAMETER(DB1.Load_Truck_Departure_Date);
  PARAMETER(DB1.Maximum_Gross_Weight);
  PARAMETER(DB1.Time_of_Original_Entry);
  PARAMETER(DB1.OH_Appt_Confirmation_Tm);
  PARAMETER(DB1.Load_BOL_Complete_Time);
  PARAMETER(DB1.Load_Truck_Departure_Time);
  PARAMETER(DB1.Act_Frt_Reference_Amount);
  PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
  PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
  PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
  PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);

 }

 // Call program CRT Load/Order Chg Log XF.
 CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Load_Change_Type);
 PARAMETER(PAR.Department_Control_Code);
 PARAMETER(PAR.Change_Log_Prior_Value);
 PARAMETER(PAR.Change_Log_New_Value);
 PARAMETER(PAR.*USER);
 PARAMETER(PAR.*PROGRAM);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);

 //?06/09/2015 PKD/JH E4122 Added Change Log for Requested Ship Date
 // LCL.Change Log Prior Value = CVTVAR(LCL.Requested Ship Date)
 LCL.Change_Log_Prior_Value = CVTVAR(LCL.Requested_Ship_Date);

 // LCL.Change Log New Value = CVTVAR(WRK.Requested Ship Date)
 LCL.Change_Log_New_Value = CVTVAR(WRK.Requested_Ship_Date);

 // Call program CRT Load/Order Chg Log XF.
 CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER('RQSSHP');
 PARAMETER(PAR.Department_Control_Code);
 PARAMETER(LCL.Change_Log_Prior_Value);
 PARAMETER(LCL.Change_Log_New_Value);
 PARAMETER(PAR.*USER);
 PARAMETER(PAR.*PROGRAM);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);

}


// CTL.Scheduled Ship Date = LCL.Scheduled Ship Date USR
CTL.Scheduled_Ship_Date = LCL.Scheduled_Ship_Date_USR;

// WRK.Scheduled Ship Date = LCL.Scheduled Ship Date USR
WRK.Scheduled_Ship_Date = LCL.Scheduled_Ship_Date_USR;

ENDIF;

ENDIF;

//?Get load weight from orders on load
EXECUTE FUNCTION(Rtv Sum Ld Abs.Frt/Wgt RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1294689;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Total_Freight);
PARAMETER(CTL.Total_Load_Order_Weight);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 // PAR.Total Freight = CON.*ZERO
 PAR.Total_Freight = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 //?USER: Process Data record

 // PAR.USR Percent Work, 7.4   1 = DB1.Freight Rate / CON.100 *Rounded
 PAR.USR_Percent_Work_7_4_1 = DB1.Absorbed_Freight_Rate_CWT / 100 'H';

 // PAR.Freight Amount = DB1.Order Weight Total * PAR.USR Percent Work, 7.4   1 *Rou
 PAR.Freight_Amount = DB1.Order_Weight_Total * PAR.USR_Percent_Work_7_4_1 'H';

 // PAR.Total Freight = PAR.Total Freight + PAR.Freight Amount
 PAR.Total_Freight = PAR.Total_Freight + PAR.Freight_Amount;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + DB1.Order Weight Total
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + DB1.Order_Weight_Total;

}


//?If load weight > maximum pounds for truck, LTL for load is N else Y
CASE;

// IF CTL.Weight Adjust GE PAR.Maximum pounds
IF CTL.Weight_Adjust >= PAR.Maximum_pounds;

// WRK.LTL Flag = CND.No
WRK.LTL_Flag = 'N';

//?If load weight > maximum pounds for truck, LTL for load is N else Y
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.LTL Flag = CND.Yes
WRK.LTL_Flag = 'Y';

ENDIF;

// WRK.Total Stops = CON.*ZERO
WRK.Total_Stops = *ZERO;

EXECUTE FUNCTION(RTV No. of Stops      RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1197874;
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.Total_Stops);
PARAMETER(WRK.Multi_Company_Load);
{
 //?USER: Initialize routine

 // PAR.USR Stop = CON.*ZERO
 PAR.USR_Stop = *ZERO;

 // PAR.Multi Company Load = CND.no
 PAR.Multi_Company_Load = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Stop/Drop NE PAR.USR Stop
 IF DB1.Stop_Drop <> PAR.USR_Stop;

 // PAR.Total Stops = PAR.Total Stops + CON.1
 PAR.Total_Stops = PAR.Total_Stops + 1;

 // PAR.USR Stop = DB1.Stop/Drop
 PAR.USR_Stop = DB1.Stop_Drop;

 ENDIF;

 CASE;

 // IF WRK.Company Number     041405 is Equal to zero
 IF WRK.Company_Number_041405 = *ZERO;

 // WRK.Company Number     041405 = DB1.Company Number
 WRK.Company_Number_041405 = DB1.Company_Number;

 ENDIF;

 //?Multi Company Load?               PKTR01 8/5/04
 CASE;

 // IF DB1.Company Number NE WRK.Company Number     041405
 IF DB1.Company_Number <> WRK.Company_Number_041405;

 // PAR.Multi Company Load = CND.yes
 PAR.Multi_Company_Load = 'Y';

 ENDIF;

}


EXECUTE FUNCTION(RTV Export Ords for LD RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1448885;
PARAMETER(CTL.Load_ID);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


//?Change export status to yes if export order found on load
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// PAR.Export Status = CND.no
PAR.Export_Status = 'N';

//?Change export status to yes if export order found on load
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Export Status = CND.yes
PAR.Export_Status = 'Y';

ENDIF;

EXECUTE FUNCTION(RTV First Order Whse   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1397882;
PARAMETER(CTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(WRK.Ship_From_Warehouse);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.TXT_field_not_needed);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 QUIT;

}


EXECUTE FUNCTION(CHG Ship Fr Whs,Multi CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC1704085;
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.Ship_From_Warehouse);
PARAMETER(WRK.Multi_Company_Load);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?** We should be passing zeros to CLC Deadline Depart Date
//?calc deadline departure date/time if order was added
CASE;

// IF WRK.Load Added/Deleted     .U is *No
IF WRK.Load_Added_Deleted_U = '0';

//?calc deadline departure date/time if order was added
// IF *OTHERWISE
IF *OTHERWISE;

//?** Use Web version of DDD/T calcs                     W288
// WRK.USR Load Id ALpha = CVTVAR(CTL.Load ID)
WRK.USR_Load_Id_ALpha = CVTVAR(CTL.Load_ID);

// Call program CLC Depart Date f/web  XF.
CALL PROGRAM(CLC Depart Date f/web  XF) ('PNMAXFR');
PARAMETER(WRK.USR_Load_Id_ALpha);

ENDIF;

//?** Deadline Departure Date/Time Restrictions          W288
DO;

// Call program RTV Co. Dflt Int All   XF.
CALL PROGRAM(RTV Co. Dflt Int All   XF) ('PDSTXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(NLL.Shipping_Method_Dft);
PARAMETER(NLL.Load_Type_Dft);
PARAMETER(NLL.LTL_Flag_Dft);
PARAMETER(NLL.Export_Status_Dft);
PARAMETER(NLL.Shrink_Wrap_Dft);
PARAMETER(NLL.Departure_Time_DFT);
PARAMETER(NLL.Export_Code_Dft);
PARAMETER(NLL.Allow_Mult_Whse_to_Order);
PARAMETER(NLL.Allow_Multi_Export_On_Ord);
PARAMETER(NLL.Slip_Sheet_Dft);
PARAMETER(NLL.Palletize_Dft);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);
PARAMETER(NLL.CDI_Valuation_Grouping);
PARAMETER(NLL.CDI_Unused_Sts_3);
PARAMETER(NLL.CDI_Shipper);
PARAMETER(NLL.CDI_Produced_by_co);

//?Seaboard only
CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

//?** Retrieve the hours that Shipping is restricted from loading
// Call program RTV Dock Unavail Range XF.
CALL PROGRAM(RTV Dock Unavail Range XF) ('PNNIXFR');
PARAMETER(WRK.Ship_From_Warehouse);
PARAMETER(WRK.Dock_Unavail_Start_Time);
PARAMETER(WRK.Dock_Unavail_End_Time);

//?** Retrieve Deadline Departure Date/Time from Load Header
EXECUTE FUNCTION(RTV Deadln DepartDT/TM RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1497302;
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.Deadline_Depart_Date_LH);
PARAMETER(WRK.Deadline_Depart_Time_LH);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?** Validate if hours are entered for a warehouse
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

//?      skip - not an error if no record
//?** Validate if hours are entered for a warehouse
// IF WRK.Dock Unavail Start Time is Zeros
IF WRK.Dock_Unavail_Start_Time = *ZERO;

// AND WRK.Dock Unavail End Time is Zeros
AND WRK.Dock_Unavail_End_Time = *ZERO;

//?      skip - not an error if times are zeros
//?** Validate if hours are entered for a warehouse
// IF *OTHERWISE
IF *OTHERWISE;

//?** If SSD = DDD the enforce the Restricted Time Range   W288
CASE;

// IF WRK.Deadline Depart Date LH EQ CTL.Scheduled Ship Date USR
IF WRK.Deadline_Depart_Date_LH = CTL.Scheduled_Ship_Date_USR;

//?** Error if DDT is during restriced hours             W288
CASE;

// IF WRK.Deadline Depart Time LH GE WRK.Dock Unavail Start Time
IF WRK.Deadline_Depart_Time_LH >= WRK.Dock_Unavail_Start_Time;

// AND WRK.Deadline Depart Time LH LE WRK.Dock Unavail End Time
AND WRK.Deadline_Depart_Time_LH <= WRK.Dock_Unavail_End_Time;

// Send error message - 'Invalid SSD & DDD/T - during Restricted Hours-chg Dlvry Time, see Schedulin
ERROR(USR4223);
MSGPARM(CTL.Scheduled_Ship_Date_USR);

// Call program Edt Load/Orders        DF.
CALL PROGRAM(Edt Load/Orders        DF) ('PDLTDFR');
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Scheduled_Ship_Date_USR);
PARAMETER(WRK.Name);
PARAMETER(PAR.Access_Limited_Sts_USR);

ENDIF;

ENDIF;

ENDIF;

//?** Error if date puts DDD/T in the past. Truck will not have
//?** time to load and leave. Send an error message.
// Call program RTV System Date/Time   UP.
CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
PARAMETER(WRK.Current_System_Date);
PARAMETER(WRK.Current_System_Time);

//?** Error if DDD = Today & DDT is before system time   W288
CASE;

// IF WRK.Deadline Depart Date LH EQ WRK.Current System Date
IF WRK.Deadline_Depart_Date_LH = WRK.Current_System_Date;

// AND WRK.Deadline Depart Time LH LE WRK.Current System Time
AND WRK.Deadline_Depart_Time_LH <= WRK.Current_System_Time;

// Send error message - 'DDD/Time must be later than NOW, Chg Ship Date or Deliv Time'
ERROR(USR4233);
MSGPARM(LCL.Scheduled_Ship_Date_USR);

// Call program Edt Load/Orders        DF.
CALL PROGRAM(Edt Load/Orders        DF) ('PDLTDFR');
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Load_ID);
PARAMETER(LCL.Scheduled_Ship_Date_USR);
PARAMETER(WRK.Name);
PARAMETER(PAR.Access_Limited_Sts_USR);

ENDIF;

ENDIF;

ENDDO;

EXECUTE FUNCTION(RTV Default Load Seq  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1591587;
PARAMETER(WRK.Ship_From_Warehouse);
PARAMETER(LCL.Default_Load_Sequence);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Default Load Sequence = Yes?
CASE;

// IF LCL.Default Load Sequence is yes
IF LCL.Default_Load_Sequence = 'Y';

// LCL.Schedule Sequence Number = CON.1
LCL.Schedule_Sequence_Number = 1;

ENDIF;

//?Calculate Total Load Miles
DO;

//?** 11/20/2007 LJB FP1251 Total Load Miles = zeros if no
//?** Miles Between Cities record exists
//?** Include Override miles in the change routine    E00207
// Call program CLC Total Load Miles   XF.
CALL PROGRAM(CLC Total Load Miles   XF) ('PDW3XFR');
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.Total_Load_Miles);
PARAMETER(PAR.Override_Total_Load_Miles);

EXECUTE FUNCTION(CHG Total Load Miles   CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1455677;
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.Total_Load_Miles);
PARAMETER(PAR.Override_Total_Load_Miles);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDDO;

//?** Moved from before the calc routine to after.
//?** Changed update to use wrk.total load miles     E00207
//?Calc Load U/M           -- RMC 4/17/14 e3067
DO;

//?** All boxes=BX, All combos=CB, Any mix of the two=MX   E00239 11/12/08
// Call program RTV UM/Whs Code,BX Qty XF.
CALL PROGRAM(RTV UM/Whs Code,BX Qty XF) ('PPYXXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(LCL.Load_U_M);

ENDDO;

EXECUTE FUNCTION(CHG for Load Plan O.E. CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1273443;
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.LTL_Flag);
PARAMETER(CTL.Total_Load_Order_Weight);
PARAMETER(WRK.Total_Stops);
PARAMETER(CTL.Carrier_Code);
PARAMETER(CTL.Load_Type);
PARAMETER(LCL.Schedule_Sequence_Number);
PARAMETER(WRK.Total_Load_Miles);
PARAMETER(CTL.USR_Shipping_Method);
PARAMETER(WRK.Carrier_Broker);
PARAMETER(PAR.Export_Status);
PARAMETER(PAR.Override_Total_Load_Miles);
PARAMETER(LCL.Load_U_M);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?Change header; if in add mode, have already added it
//?** Update ship to state for exports               E002128
CASE;

// IF PAR.Export Status is yes
IF PAR.Export_Status = 'Y';

// Call program RTV ExpOrd Info for LD XF.
CALL PROGRAM(RTV ExpOrd Info for LD XF) ('PMJMXFR');
PARAMETER(NLL.Order_Number);
PARAMETER(NLL.Ship_To_Customer);
PARAMETER(NLL.Ship_To_Name);
PARAMETER(NLL.Ship_To_Address_Line_1);
PARAMETER(NLL.Ship_To_Address_Line_2);
PARAMETER(NLL.Ship_To_Address_Line_3);
PARAMETER(NLL.Ship_To_City);
PARAMETER(PAR.Ship_To_State_Code);
PARAMETER(NLL.Ship_To_Zip_Postal_Code);
PARAMETER(NLL.Carrier_Code);
PARAMETER(CTL.Load_ID);
PARAMETER(NLL.Export_Status);
PARAMETER(NLL.Export_Docs_Go_w_Driver);
PARAMETER(NLL.Air_Freight_Order);
PARAMETER(NLL.Export_USDA_Approved);
PARAMETER(NLL.Company_Number);
PARAMETER(NLL.Stop_Drop_Sequence_Number);
PARAMETER(NLL.Shipping_Line);
PARAMETER(NLL.Port_Delv_Terminal);
PARAMETER(NLL.OHE_City);
PARAMETER(NLL.OHE_Vessel_Airline);
PARAMETER(NLL.OHE_Voyage_Flight);
PARAMETER(NLL.OHE_Booking_Number);
PARAMETER(NLL.OHE_Discharge_Port_Airprt);
PARAMETER(NLL.OHE_Sail_Flight_Date);
PARAMETER(NLL.OHE_Port_Cut_Date);
PARAMETER(NLL.OHE_Arrival_Date);
PARAMETER(NLL.OHE_Late_Delivery_Code);
PARAMETER(NLL.OHE_Ship_Status);
PARAMETER(NLL.OHE_Container_Number);
PARAMETER(NLL.OHE_Comment_1);
PARAMETER(NLL.OHE_Comment_2);
PARAMETER(NLL.Port_City);
PARAMETER(NLL.Port_Address_Line_1);
PARAMETER(NLL.Port_Address_Line_2);
PARAMETER(NLL.Sail_Port_State);
PARAMETER(NLL.Port_Zip_Postal_Code);
PARAMETER(NLL.Port_Phone_Number);
PARAMETER(NLL.Port_Fax_Number);

EXECUTE FUNCTION(CHG Ship To St-Exports CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC2044782;
PARAMETER(CTL.Load_ID);
PARAMETER(PAR.Ship_To_State_Code);
{
 //?USER: Processing after Data read

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

// WRK.USR Shipping Method = CTL.USR Shipping Method
WRK.USR_Shipping_Method = CTL.USR_Shipping_Method;

// PAR.Load Type = CTL.Load Type
PAR.Load_Type = CTL.Load_Type;

//?Send message that the load was created for the current date.
CASE;

// IF LCL.Load Create Sts USR is yes
IF LCL.Load_Create_Sts_USR = 'Y';

// LCL.Office Message USR = CON.*BLANK
LCL.Office_Message_USR = *BLANK;

EXECUTE FUNCTION(SndMsg Ld Crt -Cur Dt IF) TYPE(EXCINTFUN)                      AC1591279;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Scheduled_Ship_Date_USR);
PARAMETER(LCL.Office_Message_USR);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
 PARAMETER(PAR.Company_Number);
 PARAMETER('LOADMSG');
 PARAMETER(PAR.System_Value_Alpha);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // WRK.DL List ID = PAR.System Value Alpha
 WRK.DL_List_ID = PAR.System_Value_Alpha;

 CASE;

 // IF PAR.Scheduled Ship Date EQ JOB.*Job date
 IF PAR.Scheduled_Ship_Date = JOB.*Job_date;

 EXECUTE FUNCTION(Rtv Date Display Fmt  IF) TYPE(EXCINTFUN)                      AC1591295;
 PARAMETER(PAR.Dsp_Date_99_99_99_USR);
 PARAMETER(PAR.Scheduled_Ship_Date);
 {
  //?Execute internal function

  // LCL.Date (Alpha) USR = CVTVAR(PAR.Date In)
  LCL.Date_Alpha_USR = CVTVAR(PAR.Date_In);

  //?99/
  // LCL.Date Component Alpha  USR = SUBSTRING(LCL.Date (Alpha) USR,CON.4,CON.2)
  LCL.Date_Component_Alpha_USR = SUBSTRING(LCL.Date_Alpha_USR:4:2);

  // PAR.Dsp Date (99/99/99)   USR = CONCAT(LCL.Date Component Alpha  USR,CON./,CND.*None)
  PAR.Dsp_Date_99_99_99_USR = LCL.Date_Component_Alpha_USR + '/' (*ZERO);

  //?99/99/
  // LCL.Date Component Alpha  USR = SUBSTRING(LCL.Date (Alpha) USR,CON.6,CON.2)
  LCL.Date_Component_Alpha_USR = SUBSTRING(LCL.Date_Alpha_USR:6:2);

  // PAR.Dsp Date (99/99/99)   USR = CONCAT(PAR.Dsp Date (99/99/99)   USR,LCL.Date Component Alpha
  PAR.Dsp_Date_99_99_99_USR = PAR.Dsp_Date_99_99_99_USR + LCL.Date_Component_Alpha_USR (*ZERO);

  // PAR.Dsp Date (99/99/99)   USR = CONCAT(PAR.Dsp Date (99/99/99)   USR,CON./,CND.*None)
  PAR.Dsp_Date_99_99_99_USR = PAR.Dsp_Date_99_99_99_USR + '/' (*ZERO);

  //?99/99/99
  // LCL.Date Component Alpha  USR = SUBSTRING(LCL.Date (Alpha) USR,CON.2,CON.2)
  LCL.Date_Component_Alpha_USR = SUBSTRING(LCL.Date_Alpha_USR:2:2);

  // PAR.Dsp Date (99/99/99)   USR = CONCAT(PAR.Dsp Date (99/99/99)   USR,LCL.Date Component Alpha
  PAR.Dsp_Date_99_99_99_USR = PAR.Dsp_Date_99_99_99_USR + LCL.Date_Component_Alpha_USR (*ZERO);

 }

 // Retrieve message - 'Load &1 with Scheduled Ship &3 created/changed today for Company &4 by &2.'
 PAR.Office_Message_USR = RTVMSG(USR2945);
 PARAMETER(PAR.Load_ID);
 PARAMETER(JOB.*USER);
 PARAMETER(PAR.Dsp_Date_99_99_99_USR);
 PARAMETER(PAR.Company_Number);

 // Call program SND Pager Msg (MPLUS) UP.
 CALL PROGRAM(SND Pager Msg (MPLUS) UP) ('POMSUPC');
 PARAMETER(WRK.DL_List_ID);
 PARAMETER(PAR.Office_Message_USR);

 ENDIF;

 ENDIF;

 //?***** Change log and comments
 DO;

 //?** 06/10/2009 LJB E00328 Pass the formatted message back to
 //?** the calling program to be used by ESEND
 ENDDO;

}


CASE;

// IF CTL.Company Number is not equal to zero
IF CTL.Company_Number <> *ZERO;

//?** Retrieve ESEND email list by company           E00328
// Call program Rtv Alpha Value       XF.
CALL PROGRAM(Rtv Alpha Value       XF) ('POMTXFR');
PARAMETER(CTL.Company_Number);
PARAMETER('LOADADDONS');
PARAMETER(LCL.System_Value_Alpha);

CASE;

// IF LCL.System Value Alpha is Not equal to Blank
IF LCL.System_Value_Alpha <> *BLANK;

CASE;

// IF LCL.Office Message USR NE WRK.Blank for 30          USR
IF LCL.Office_Message_USR <> WRK.Blank_for_30_USR;

// LCL.Subject Line USR = CONCAT(CON.Same Day Load Add-Ons,CON.Notification Alert,CON.1)
LCL.Subject_Line_USR = 'Same Day Load Add-Ons' + 'Notification Alert' (1);

// Call program CLP Exe ESNDMAIL Cmd   UP.
CALL PROGRAM(CLP Exe ESNDMAIL Cmd   UP) ('PPW6UPC');
PARAMETER(LCL.Return_Code_Usr);
PARAMETER(LCL.System_Value_Alpha);
PARAMETER(LCL.Subject_Line_USR);
PARAMETER(LCL.Office_Message_USR);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Auto Combine Load
CASE;

// IF LCL.Auto Combine Loads STS is yes
IF LCL.Auto_Combine_Loads_STS = 'Y';

// OR CTL.Shipping Method is Collect
OR CTL.Shipping_Method = 'CR'/'CT';

//?Get latest updated version of Load Header
EXECUTE FUNCTION(RTV WW Screen Fields   RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1384832;
PARAMETER(CTL.Load_ID);
PARAMETER(LCL.Scheduled_Ship_Date);
PARAMETER(LCL.Load_Status);
PARAMETER(LCL.Total_Load_Order_Weight);
PARAMETER(LCL.Flat_Amount);
PARAMETER(NLL.Allocate_Pounds_Miles);
PARAMETER(NLL.Trailer_Id);
PARAMETER(LCL.Carrier_Code);
PARAMETER(LCL.Truck_Size);
PARAMETER(LCL.Load_Type);
PARAMETER(NLL.Schedule_Sequence_Number);
PARAMETER(LCL.Total_Load_Miles);
PARAMETER(LCL.Shipping_Method);
PARAMETER(LCL.Ship_From_Warehouse);
PARAMETER(LCL.Ship_To_State_Code);
PARAMETER(LCL.Load_Acceptance_Flag);
PARAMETER(NLL.Tot_Pallet_Tare);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Total Ld Mi/Sts    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1496186;
PARAMETER(CTL.Load_ID);
PARAMETER(NLL.Load_Status);
PARAMETER(LCL.Total_Load_Miles);
PARAMETER(PAR.Override_Total_Load_Miles);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Verify Ship From Warehouse present
CASE;

// IF LCL.Ship From Warehouse is Warehouse Code Blank
IF LCL.Ship_From_Warehouse = *BLANK;

EXECUTE FUNCTION(RTV First Order Whse   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1397882;
PARAMETER(CTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(LCL.Ship_From_Warehouse);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.TXT_field_not_needed);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 QUIT;

}


ENDIF;

//?Can load be combined?
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Continue (Yes/No) USR = CND.No
LCL.Continue_Yes_No_USR = 'N';

//?Load Status = Entered?
CASE;

// IF CTL.Load Status is Entered
IF CTL.Load_Status = 'E';

EXECUTE FUNCTION(RTV Any Ord/Blk  on Ld RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1448300;
PARAMETER(CTL.Load_ID);
PARAMETER(PAR.USR_Check_Y_N_Status);
PARAMETER(LCL.Block_Order_Flag);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 // PAR.USR Check Y/N Status = CND.blank
 PAR.USR_Check_Y_N_Status = *BLANK;

 //?OMS203:  need to know if there are any Block orders on load
 // PAR.Block Order Flag = CND.Firm Order
 PAR.Block_Order_Flag = 'F';

 //?USER: Process Data record

 // PAR.USR Check Y/N Status = CND.yes
 PAR.USR_Check_Y_N_Status = 'Y';

 CASE;

 // IF DB1.Block Order Flag is Block Order
 IF DB1.Block_Order_Flag = 'B';

 // PAR.Block Order Flag = DB1.Block Order Flag
 PAR.Block_Order_Flag = DB1.Block_Order_Flag;

 QUIT;

 ENDIF;

}


//?Block order error/minimum load weight msg
CASE;

// IF LCL.Block Order Flag is Block Order
IF LCL.Block_Order_Flag = 'B';

// Send error message - 'Load &2 has block orders tied to it; cannot be combined'
ERROR(USR2440);
MSGPARM(LCL.*SFLSEL);
MSGPARM(CTL.Load_ID);

//?Block order error/minimum load weight msg
// IF PAR.USR Check Y/N Status is yes
IF PAR.USR_Check_Y_N_Status = 'Y';

// LCL.Continue (Yes/No) USR = CND.Yes
LCL.Continue_Yes_No_USR = 'Y';

//?Block order error/minimum load weight msg
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Load &2 has no orders tied to it; cannot be combined'
ERROR(USR2198);
MSGPARM(LCL.*SFLSEL);
MSGPARM(CTL.Load_ID);

ENDIF;

//?Load Status = Entered?
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Load status has changed for load &1; cannot change load.'
ERROR(USR1875);
MSGPARM(CTL.Load_ID);
MSGPARM(LCL.*SFLSEL);

ENDIF;

//?Combine Load if edits are passed
CASE;

// IF LCL.Continue (Yes/No) USR is Yes
IF LCL.Continue_Yes_No_USR = 'Y';

//?Combine Load
CASE;

// IF LCL.Max Schd Shp Wt Edit Flg is NO
IF ( LCL.Max_Schd_Shp_Wt_Edit_Flg = 'N';

// OR LCL.Shipping Method is Collect or Rail
OR LCL.Shipping_Method = 'CR'/'CT'/'PR' );

// OR LCL.Max Schd Shp Wt Edit Flg is Yes
OR ( LCL.Max_Schd_Shp_Wt_Edit_Flg = 'Y';

// AND LCL.Shipping Method is Not Rail
AND LCL.Shipping_Method = 'CT'/'PT' );

// Call program CLC Deadline Date/Time XF.
CALL PROGRAM(CLC Deadline Date/Time XF) ('PMP9XFR');
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.Deadline_Departure_Date);
PARAMETER(WRK.Deadline_Departure_Time);
PARAMETER(NLL.Requested_Delivery_Date);

//?OMS304
//?TPA 091907 - Only combine the load if it passes min weight test
//?If Load weight under min leave sts as 'E' else set to 'C'
CASE;

// IF PAR.USR Check Y/N Status is yes
IF PAR.USR_Check_Y_N_Status = 'Y';

CASE;

// IF LCL.Total Load Order Weight LT PAR.Minimum pounds
IF LCL.Total_Load_Order_Weight < PAR.Minimum_pounds;

// AND PAR.Minimum pounds NE WRK.ZERO
AND PAR.Minimum_pounds <> WRK.ZERO;

EXECUTE FUNCTION(CHG Ld Sts/Dpt D/T Whs CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1490785;
PARAMETER(CTL.Load_ID);
PARAMETER(LCL.Scheduled_Ship_Date);
PARAMETER('E');
PARAMETER(LCL.Ship_From_Warehouse);
PARAMETER(WRK.Deadline_Departure_Date);
PARAMETER(WRK.Deadline_Departure_Time);
{
 //?USER: Processing before Data update

 // DB1.Job Time = JOB.*Job time
 DB1.Job_Time = JOB.*Job_time;

 // DB1.User Id = JOB.*USER
 DB1.User_Id = JOB.*USER;

 // DB1.Job Name = JOB.*JOB
 DB1.Job_Name = JOB.*JOB;

 // DB1.Job Date = JOB.*Job date
 DB1.Job_Date = JOB.*Job_date;

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(CHG Ld Sts/Dpt D/T Whs CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1490785;
PARAMETER(CTL.Load_ID);
PARAMETER(LCL.Scheduled_Ship_Date);
PARAMETER('C');
PARAMETER(LCL.Ship_From_Warehouse);
PARAMETER(WRK.Deadline_Departure_Date);
PARAMETER(WRK.Deadline_Departure_Time);
{
 //?USER: Processing before Data update

 // DB1.Job Time = JOB.*Job time
 DB1.Job_Time = JOB.*Job_time;

 // DB1.User Id = JOB.*USER
 DB1.User_Id = JOB.*USER;

 // DB1.Job Name = JOB.*JOB
 DB1.Job_Name = JOB.*JOB;

 // DB1.Job Date = JOB.*Job date
 DB1.Job_Date = JOB.*Job_date;

}


//?01/21/08 RMC  Create Change Log for Combine process - 1st order only
//?06/26/08 RMC  Pass in 'cmblod' here  - E00180
EXECUTE FUNCTION(RTV All Ords f/CMBLOD RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1864334;
PARAMETER(CTL.Load_ID);
PARAMETER('CMBLOD');
PARAMETER('INT');
{
 //?USER: Process Data record

 //?01/21/08 RMC  Create Change Log for Combine process- 1st order on load
 //?01/21/08 RMC  Use load chg type from Par instead of 'CMBLOD' always
 // Call program CRT Load/Order Chg Log XF.
 CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Stop_Drop);
 PARAMETER(PAR.Load_Change_Type);
 PARAMETER(PAR.Department_Control_Code);
 PARAMETER('E');
 PARAMETER('C');
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(*BLANK);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);

 QUIT;

}


ENDIF;

ENDIF;

EXECUTE FUNCTION(CHG Deadline Date/Time RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1496989;
PARAMETER(CTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(WRK.Deadline_Departure_Date);
PARAMETER(WRK.Deadline_Departure_Time);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 QUIT;

 //?USER: Process Data record

 EXECUTE FUNCTION(CHG Deadline Date/Time CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1496963;
 PARAMETER(PAR.Load_ID);
 PARAMETER(DB1.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.Deadline_Depart_DT_HDR);
 PARAMETER(PAR.Deadline_Depart_Time_HDR);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(Upd Deadline Dte/Tme  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1648968;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Deadline_Depart_DT_HDR);
  PARAMETER(DB1.Deadline_Depart_Time_HDR);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Deadline Dte/Tme  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1648969;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

 }

}


ENDIF;

//?Perform post combine routines?
CASE;

// IF LCL.Max Schd Shp Wt Edit Flg is Yes
IF LCL.Max_Schd_Shp_Wt_Edit_Flg = 'Y';

// AND LCL.Shipping Method is Not Rail
AND LCL.Shipping_Method = 'CT'/'PT';

//?Can Load Arrive On time?       4/26/01 RMC
CASE;

// IF LCL.Scheduled Ship Date USR is Entered
IF LCL.Scheduled_Ship_Date_USR <> *ZERO;

CASE;

// IF LCL.Scheduled Ship Date USR GT WRK.Deadline Departure Date
IF LCL.Scheduled_Ship_Date_USR > WRK.Deadline_Departure_Date;

// Send information message - 'Sched Ship Dt is AFTER Deadline Departure. Load &1 cannot arrive on t
MESSAGE(USR3046 *INFO);
MSGPARM(CTL.Load_ID);

ENDIF;

//?Can Load Arrive On time?       4/26/01 RMC
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF LCL.Scheduled Ship Date GT WRK.Deadline Departure Date
IF LCL.Scheduled_Ship_Date > WRK.Deadline_Departure_Date;

// Send information message - 'Sched Ship Dt is AFTER Deadline Departure. Load &1 cannot arrive on t
MESSAGE(USR3046 *INFO);
MSGPARM(CTL.Load_ID);

ENDIF;

ENDIF;

//?Load Weight LT Minimum information message
CASE;

// IF PAR.USR Check Y/N Status is yes
IF PAR.USR_Check_Y_N_Status = 'Y';

CASE;

// IF LCL.Total Load Order Weight LT PAR.Minimum pounds
IF LCL.Total_Load_Order_Weight < PAR.Minimum_pounds;

// AND PAR.Minimum pounds NE WRK.ZERO
AND PAR.Minimum_pounds <> WRK.ZERO;

// Send information message - 'Load weight is less than the minimum weight allowed for load &1.'
MESSAGE(USR1262 *INFO);
MSGPARM(CTL.Load_ID);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?If Collect (Buyer's) Truck, default Load Status to Unlock.  E001859
CASE;

// IF LCL.Shipping Method is Collect
IF LCL.Shipping_Method = 'CR'/'CT';

//?Create Change Log for Unlock process - 1st order only
//?Pass Load Status back to the calling program
// LCL.Load Status = CND.Unlock
LCL.Load_Status = 'U';

EXECUTE FUNCTION(CHG Ld Sts/Dpt D/T Whs CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1490785;
PARAMETER(CTL.Load_ID);
PARAMETER(LCL.Scheduled_Ship_Date);
PARAMETER(LCL.Load_Status);
PARAMETER(LCL.Ship_From_Warehouse);
PARAMETER(WRK.Deadline_Departure_Date);
PARAMETER(WRK.Deadline_Departure_Time);
{
 //?USER: Processing before Data update

 // DB1.Job Time = JOB.*Job time
 DB1.Job_Time = JOB.*Job_time;

 // DB1.User Id = JOB.*USER
 DB1.User_Id = JOB.*USER;

 // DB1.Job Name = JOB.*JOB
 DB1.Job_Name = JOB.*JOB;

 // DB1.Job Date = JOB.*Job date
 DB1.Job_Date = JOB.*Job_date;

}


EXECUTE FUNCTION(RTV All Coll Ords-Accp RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC2038649;
PARAMETER(CTL.Load_ID);
PARAMETER('UNLOCK');
PARAMETER('INT');
{
 //?USER: Process Data record

 //?Use Load CHG Type from PAR. Load Status will be "U"nlock
 // Call program CRT Load/Order Chg Log XF.
 CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Stop_Drop);
 PARAMETER(PAR.Load_Change_Type);
 PARAMETER(PAR.Department_Control_Code);
 PARAMETER('E');
 PARAMETER('U');
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(*BLANK);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);

 QUIT;

}


ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

RETURN;

