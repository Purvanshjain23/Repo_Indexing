// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMTRXFR
// ?Date: 14.08.2025 Time: 03:44:06
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?F1110 - EPA Annual Reporting -- Report RFS0300
//?     RFS Annual Compliance Rpt - send annually to the EPA
//?Due Feb 28 for the previous year's activity
//?Set field values that wont change per batch:
// PAR.RFS Report Form ID = CND.RFS0300
PAR.RFS_Report_Form_ID = 'RFS0300';

// PAR.RFS CBI = CND.Non Confidential Business
PAR.RFS_CBI = 'N';

//?Format report date: MM/DD/YYYY
EXECUTE FUNCTION(Clc Fmt Dt MM/DD/YYYY IF) TYPE(EXCINTFUN)                      AC1874414;
PARAMETER(JOB.*Job_date);
PARAMETER(PAR.RFS_Report_Date);
{
 //?Execute internal function

 //?Format input date as : MM/DD/YYYY
 // PAR.Date 7A              USR = CVTVAR(PAR.Date In)
 PAR.Date_7A_USR = CVTVAR(PAR.Date_In);

 // WRK.Month (Char) USR = SUBSTRING(PAR.Date 7A              USR,CON.4,CON.2)
 WRK.Month_Char_USR = SUBSTRING(PAR.Date_7A_USR:4:2);

 // WRK.Day (Alpha) USR = SUBSTRING(PAR.Date 7A              USR,CON.6,CON.2)
 WRK.Day_Alpha_USR = SUBSTRING(PAR.Date_7A_USR:6:2);

 // WRK.Year Code = PAR.Date In *YEAR
 WRK.Year_Code = DATEDTLS(PAR.Date_In 'YR' 1111111 'NONE' 'N' 1);

 // WRK.Year USR = WRK.Year Code
 WRK.Year_USR = WRK.Year_Code;

 // WRK.Month MM/  3A = CONCAT(WRK.Month (Char) USR,CON./,CON.*ZERO)
 WRK.Month_MM_3A = WRK.Month_Char_USR + '/' (*ZERO);

 // WRK.Day DD/  3A = CONCAT(WRK.Day (Alpha) USR,CON./,CON.*ZERO)
 WRK.Day_DD_3A = WRK.Day_Alpha_USR + '/' (*ZERO);

 // WRK.Month/Day MM/DD/ = CONCAT(WRK.Month MM/  3A,WRK.Day DD/  3A,CON.*ZERO)
 WRK.Month_Day_MM_DD = WRK.Month_MM_3A + WRK.Day_DD_3A (*ZERO);

 // PAR.MMDDYYYY Usr = CONCAT(WRK.Month/Day MM/DD/,WRK.Year USR,CON.*ZERO)
 PAR.MMDDYYYY_Usr = WRK.Month_Day_MM_DD + WRK.Year_USR (*ZERO);

}


// WRK.Year Alpha (YY) USR = SUBSTRING(PAR.RFS Report Year,CON.3,CON.2)
WRK.Year_Alpha_YY_USR = SUBSTRING(PAR.RFS_Report_Year:3:2);

// WRK.Text 3 Length USR = CONCAT(CON.1,WRK.Year Alpha (YY) USR,CON.*ZERO)
WRK.Text_3_Length_USR = '1' + WRK.Year_Alpha_YY_USR (*ZERO);

// WRK.Date From Alpha       USR = CONCAT(WRK.Text 3 Length USR,CON.0101,CON.*ZERO)
WRK.Date_From_Alpha_USR = WRK.Text_3_Length_USR + '0101' (*ZERO);

// WRK.Date To Alpha         USR = CONCAT(WRK.Text 3 Length USR,CON.1231,CON.*ZERO)
WRK.Date_To_Alpha_USR = WRK.Text_3_Length_USR + '1231' (*ZERO);

// PAR.Date From             USR = CVTVAR(WRK.Date From Alpha       USR)
PAR.Date_From_USR = CVTVAR(WRK.Date_From_Alpha_USR);

// PAR.Date To               USR = CVTVAR(WRK.Date To Alpha         USR)
PAR.Date_To_USR = CVTVAR(WRK.Date_To_Alpha_USR);

//?Get Company Info:
EXECUTE FUNCTION(RTV for RFS EPA Rpts  RT) TYPE(RTVOBJ) FILE(PMCAREP)           AC1874383;
PARAMETER(PAR.Company_Number);
PARAMETER('B100');
PARAMETER(LCL.COA_Bio_dsl_Fuel_Cd_Descr);
PARAMETER(LCL.COA_Producer_Regist_Nbr);
PARAMETER(LCL.COA_Employer_ID);
PARAMETER(LCL.COA_Sold_From_Name);
PARAMETER(LCL.COA_ULSD_Company_#);
PARAMETER(LCL.COA_ULSD_Facility_#);
PARAMETER(LCL.COA_RIN_Equivalence_Valu);
PARAMETER(LCL.COA_RIN_Renewable_Enrgy);
PARAMETER(LCL.COA_RIN_Type_Flag);
PARAMETER(LCL.COA_Density_Loadout);
PARAMETER(LCL.COA_BOL_Percent);
PARAMETER(LCL.COA_RFS_Renew_Fuel_Code);
PARAMETER(LCL.COA_RFS_Rnwbl_Feedstock);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Calc RVO: Renewable Volume Obligation= n.nn% of annual volume
//?  Will change every year -- so make this a parm.
//?  2008 = 7.76% of annual volume
//?  2009 = 10.21% of annual volume
EXECUTE FUNCTION(RTV RFS Annual Compl  RT) TYPE(RTVOBJ) FILE(PMCCCPP)           AC1875227;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Date_From_USR);
PARAMETER(PAR.Date_To_USR);
PARAMETER(PAR.Date_From_USR);
PARAMETER(PAR.RFS_Renew_Vol_Oblgtn_RVO);
{
 //?USER: Process Data record

 //?Accum Volume of each batch
 CASE;

 // IF DB1.COA Batch Production Date GE PAR.Date From             USR
 IF DB1.COA_Batch_Production_Date >= PAR.Date_From_USR;

 // AND DB1.COA Batch Production Date LE PAR.Date To               USR
 AND DB1.COA_Batch_Production_Date <= PAR.Date_To_USR;

 CASE;

 // IF DB1.COA Gallons Used is GT Zero
 IF DB1.COA_Gallons_Used > *ZERO;

 // PAR.RFS Renew Vol Oblgtn-RVO = PAR.RFS Renew Vol Oblgtn-RVO + DB1.COA Batch Volume
 PAR.RFS_Renew_Vol_Oblgtn_RVO = PAR.RFS_Renew_Vol_Oblgtn_RVO + DB1.COA_Batch_Volume;

 ENDIF;

 ENDIF;

}


// compute:rvo
PAR.RFS_Renew_Vol_Oblgtn_RVO = PAR.RFS_Renew_Vol_Oblgtn_RVO * (                                    +
PAR.RFS_Renew_Fuel_Std_Pct / 100 );

//?Accum Number of gal-RINs sold and retired for the period:
// LCL.RFS RIN Status = CND.Assigned RINs
LCL.RFS_RIN_Status = 1;

EXECUTE FUNCTION(Rtv RFS Activity Rpt  RT) TYPE(RTVOBJ) FILE(PMDACPP)           AC1874705;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Date_From_USR);
PARAMETER(PAR.Date_From_USR);
PARAMETER(PAR.Date_To_USR);
PARAMETER(LCL.RFS_RIN_Status);
PARAMETER(LCL.RFS_Cur_RFS2_Gl_RINS_Prch);
PARAMETER(LCL.RFS_Cur_RFS2_Gl_RINS_Sold);
PARAMETER(LCL.RFS_Cur_RFS2_Gl_RINS_Rtrd);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.COA RIN Transaction Date GE PAR.Date From             USR
 IF DB1.COA_RIN_Transaction_Date >= PAR.Date_From_USR;

 // AND DB1.COA RIN Transaction Date LE PAR.Date To               USR
 AND DB1.COA_RIN_Transaction_Date <= PAR.Date_To_USR;

 //?E00382 RMC 04/01/09 Customers may buy fuel without getting a RIN
 CASE;

 // IF DB1.COA RIN SSSSSSSS is GT 00000000
 IF DB1.COA_RIN_SSSSSSSS > 0;

 //?E00382 RMC 04/01/09  so only accum from records with a RIN
 //?FP1322 RMC 03/11/10  accum according to Assigned(1) /Separated Sts (2)
 CASE;

 // IF PAR.RFS RIN Status EQ DB1.COA RIN Type Flag
 IF PAR.RFS_RIN_Status = DB1.COA_RIN_Type_Flag;

 //?use COA Rin Quantity instead of COA RIN Volume in Gallons
 //?Accum into RFS1 or RFS2 buckets
 CASE;

 // IF DB1.COA BHR RFS Version Nbr is RFS 1
 IF DB1.COA_BHR_RFS_Version_Nbr = '1';

 //?Accum into RFS1 or RFS2 buckets
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?look at emts date sent
 CASE;

 // IF DB1.COA RIN EMTS Date Sent GE PAR.Date From             USR
 IF DB1.COA_RIN_EMTS_Date_Sent >= PAR.Date_From_USR;

 // AND DB1.COA RIN EMTS Date Sent LE PAR.Date To               USR
 AND DB1.COA_RIN_EMTS_Date_Sent <= PAR.Date_To_USR;

 CASE;

 // IF DB1.RFS Transaction Type is Sold or Delivered
 IF DB1.RFS_Transaction_Type = 'SEL';

 // PAR.RFS Cur RFS2 Gl RINS Sold = PAR.RFS Cur RFS2 Gl RINS Sold + DB1.COA RIN Quantity
 PAR.RFS_Cur_RFS2_Gl_RINS_Sold = PAR.RFS_Cur_RFS2_Gl_RINS_Sold + DB1.COA_RIN_Quantity;

 CASE;

 // IF DB1.Company Number is High Plains
 IF DB1.Company_Number = 361;

 // PAR.RFS Cur RFS2 RINS Genertd = PAR.RFS Cur RFS2 RINS Genertd + DB1.COA RIN Quantity
 PAR.RFS_Cur_RFS2_RINS_Genertd = PAR.RFS_Cur_RFS2_RINS_Genertd + DB1.COA_RIN_Quantity;

 ENDIF;

 // IF DB1.RFS Transaction Type is Retired
 IF DB1.RFS_Transaction_Type = 'RET';

 // PAR.RFS Cur RFS2 Gl RINS Rtrd = PAR.RFS Cur RFS2 Gl RINS Rtrd + DB1.COA RIN Quantity
 PAR.RFS_Cur_RFS2_Gl_RINS_Rtrd = PAR.RFS_Cur_RFS2_Gl_RINS_Rtrd + DB1.COA_RIN_Quantity;

 ENDIF;

 ENDIF;

 CASE;

 // IF DB1.RFS Transaction Type is Buy
 IF DB1.RFS_Transaction_Type = 'BUY';

 // PAR.RFS Cur RFS2 Gl RINS Prch = PAR.RFS Cur RFS2 Gl RINS Prch + DB1.COA RIN Quantity
 PAR.RFS_Cur_RFS2_Gl_RINS_Prch = PAR.RFS_Cur_RFS2_Gl_RINS_Prch + DB1.COA_RIN_Quantity;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

}


// PAR.RFS Curr Gal RINS Own Str = LCL.RFS Curr Yr Gal RINS Sold + LCL.RFS Curr YR Gal RINS Rtrd
PAR.RFS_2009_RFS1_RIN_Own_Str = LCL.RFS_2009_RFS1_RINS_Sold                                        +
+ LCL.RFS_2009_RFS1_RINS_Retrd;

//?Get Prior Year deficit for this yr & prior yr gal-RINS used
// WRK.Year Code = CVTVAR(PAR.RFS Report Year)
WRK.Year_Code = CVTVAR(PAR.RFS_Report_Year);

// WRK.Year Code = WRK.Year Code - CON.1
WRK.Year_Code = WRK.Year_Code - 1;

// WRK.Year USR = CVTVAR(WRK.RFS Report Year)
WRK.Year_USR = CVTVAR(WRK.RFS_Report_Year);

EXECUTE FUNCTION(Rtv Prior Yr RVO Dfct RT) TYPE(RTVOBJ) FILE(PMDOCPP)           AC1875242;
PARAMETER(PAR.RFS_Report_Form_ID);
PARAMETER(WRK.Year_USR);
PARAMETER(PAR.RFS_Prior_Yr_Deficit_RVO);
{
 //?USER: Process Data record

 // PAR.RFS Deficit RVO f/Nxt Yr = DB1.RFS Deficit RVO f/Nxt Yr
 PAR.RFS_Deficit_RVO_f_Nxt_Yr = DB1.RFS_Deficit_RVO_f_Nxt_Yr;

}


//??? Was any fuel made last yr sold as gal-RINS this yr?
//?Calc this year deficit RVO to carry to next yr:
// Compute: deficit RVO
PAR.RFS_Deficit_RVO_f_Nxt_Yr = ( PAR.RFS_Renew_Vol_Oblgtn_RVO                                      +
- PAR.RFS_2009_RFS1_RIN_Own_Str ) + PAR.RFS_Prior_Yr_Gal_RINS_Nb;

//?Create the record
EXECUTE FUNCTION(Crt RFS Annual Compl  CR) TYPE(CRTOBJ) FILE(PMDOCPP)           AC1874231;
PARAMETER(PAR.RFS_Report_Form_ID);
PARAMETER(PAR.RFS_Report_Type);
PARAMETER(PAR.RFS_CBI);
PARAMETER(PAR.RFS_Report_Date);
PARAMETER(PAR.RFS_Report_Year);
PARAMETER(LCL.COA_ULSD_Company_#);
PARAMETER(LCL.COA_Sold_From_Name);
PARAMETER(LCL.COA_ULSD_Facility_#);
PARAMETER(*ZERO);
PARAMETER(PAR.RFS_Renew_Fuel_Std_Pct);
PARAMETER(PAR.RFS_Renew_Vol_Oblgtn_RVO);
PARAMETER(PAR.RFS_Prior_Yr_Deficit_RVO);
PARAMETER(PAR.RFS_2009_RFS1_RIN_Own_Str);
PARAMETER(PAR.RFS_Prior_Yr_Gal_RINS_Nb);
PARAMETER(PAR.RFS_Deficit_RVO_f_Nxt_Yr);

