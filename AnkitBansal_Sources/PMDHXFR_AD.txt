// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMDHXFR
// ?Date: 14.08.2025 Time: 03:44:47
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?RMC 5/19/16 E4119 dont chk live with tpm
// LCL.Carrier Code = PAR.Carrier Code
LCL.Carrier_Code = PAR.Carrier_Code;

CASE;

// IF PAR.Load ID is GT Zero
IF PAR.Load_ID > *ZERO;

EXECUTE FUNCTION(RTV Carrier Code       RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1486426;
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.Carrier_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// LCL.Print Pick Slip = PAR.Print Pick Slip
LCL.Print_Pick_Slip = PAR.Print_Pick_Slip;

CASE;

// IF PAR.Company Number is Missoula
IF PAR.Company_Number = 363;

// LCL.Print Pick Slip = CND.no
LCL.Print_Pick_Slip = 'N';

ENDIF;

//?11/29/16 Use latest value in OH -- ORDER COULD HAVE BEEN SWEPT ALREADY
EXECUTE FUNCTION(RTV Load Plan Ready   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2066018;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(NLL.Load_ID);
PARAMETER(LCL.OH_Load_Plan_Ready);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV OH Info before Upd RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC2155508;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Shipping_Method);
PARAMETER(LCL.Block_Order_Flag);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?06/22/18 DN R12926-Get Co Cust AFR if Block Order Change from B to F.
CASE;

// IF LCL.Block Order Flag is Block Order
IF LCL.Block_Order_Flag = 'B';

// AND PAR.Block Order Flag is Firm Order
AND PAR.Block_Order_Flag = 'F';

// AND LCL.Shipping Method EQ PAR.Shipping Method
AND LCL.Shipping_Method = PAR.Shipping_Method;

// AND PAR.Shipping Method is Prepaid
AND PAR.Shipping_Method = 'PR'/'PT';

//?If Shipping Method did NOT change & must be either PT or PR then
//?get Co Cust AFR to update Order's AFR.
//?If Shipping Method did change to (PT/PR), then we
//?will already have the Co Cust AFR in PAR.Absorbed Freight Rate CWT.
// LCL.Block Order Chg B to F = CND.Yes
LCL.Block_Order_Chg_B_to_F = 'Y';

EXECUTE FUNCTION(RTV Abs Freight Rate   RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1391554;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?06/22/18 DN R12926-Get Co Cust AFR if Block Order Change from B to F.
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Block Order Chg B to F = CND.No
LCL.Block_Order_Chg_B_to_F = 'N';

// LCL.Absorbed Freight Rate CWT = PAR.Absorbed Freight Rate CWT
LCL.Absorbed_Freight_Rate_CWT = PAR.Absorbed_Freight_Rate_CWT;

ENDIF;

//?06/22/18 DN R12926-Use LCL.Absorbed Freight Rate CWT to Order's AFR.
EXECUTE FUNCTION(Chg Order Header       CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1113751;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Type_Sales);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Ship_To_Name);
PARAMETER(PAR.Ship_To_Address_Line_1);
PARAMETER(PAR.Ship_To_Address_Line_2);
PARAMETER(PAR.Ship_To_Address_Line_3);
PARAMETER(PAR.Ship_To_City);
PARAMETER(PAR.Ship_To_State_Code);
PARAMETER(PAR.Ship_To_Zip_Postal_Code);
PARAMETER(PAR.Bill_to_Customer);
PARAMETER(PAR.Bill_to_Name);
PARAMETER(PAR.Bill_to_Address_Line_1);
PARAMETER(PAR.Bill_to_Address_Line_2);
PARAMETER(PAR.Bill_to_Address_Line_3);
PARAMETER(PAR.Bill_to_City);
PARAMETER(PAR.Bill_to_State_Code);
PARAMETER(PAR.Bill_to_Zip_Postal_Code);
PARAMETER(PAR.Customer_Purchase_Order_#);
PARAMETER(PAR.Order_Date);
PARAMETER(PAR.Requested_Ship_Date);
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER(PAR.Cancel_Date);
PARAMETER(PAR.Terms_Code);
PARAMETER(PAR.Special_Instructions);
PARAMETER(PAR.Special_Instructions_2);
PARAMETER(LCL.Carrier_Code);
PARAMETER(PAR.Comment_Print_Acknowledge);
PARAMETER(PAR.Comment_Print_Inv_Cr_Memo);
PARAMETER(PAR.Comment_Print_Pick_Slip);
PARAMETER(PAR.Comment_Print_Ship_Doc);
PARAMETER(PAR.Reason_Code);
PARAMETER(PAR.Order_in_Use);
PARAMETER(PAR.Header_Status);
PARAMETER(PAR.Header_Status_Last);
PARAMETER(PAR.Order_Type_Print_Status);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(PAR.User_Original_Entry);
PARAMETER(PAR.Date_of_Original_Entry);
PARAMETER(PAR.Order_Value_Total);
PARAMETER(PAR.Order_Weight_Total);
PARAMETER(PAR.Credit_Hold);
PARAMETER(PAR.Production_Hold);
PARAMETER(PAR.New_Customer_Hold);
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER(PAR.Requested_Delivery_Time);
PARAMETER(PAR.Accounts_Receiv_Ent_1);
PARAMETER(PAR.Accounts_Receiv_Ent_2);
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
PARAMETER(PAR.Rated_Freight);
PARAMETER(PAR.LTL_Flag);
PARAMETER(PAR.Price_Audit);
PARAMETER(PAR.Price_Status);
PARAMETER(PAR.Shipping_Method);
PARAMETER(PAR.Export_Status);
PARAMETER(PAR.Palletize);
PARAMETER(PAR.Shrink_Wrap);
PARAMETER(PAR.Slip_Sheet);
PARAMETER(PAR.Age_Code);
PARAMETER(PAR.Reefer_Temperature);
PARAMETER(PAR.Load_Type);
PARAMETER(PAR.Attach_to_Invoice_Number);
PARAMETER(PAR.Load_Plan_Order);
PARAMETER(LCL.Print_Pick_Slip);
PARAMETER(PAR.Resell_Reference_Number);
PARAMETER(PAR.Special_Comment_1);
PARAMETER(PAR.Special_Comment_2);
PARAMETER(PAR.Affect_Auto_Accruals);
PARAMETER(PAR.Sales_Route_Code);
PARAMETER(PAR.Manager_Level_Code);
PARAMETER(PAR.VP_Level_Code);
PARAMETER(PAR.Attach_to_Order_Number);
PARAMETER(PAR.Reason_for_Price_Audit);
PARAMETER(PAR.Invoice_Number);
PARAMETER(PAR.Invoice_Suffix);
PARAMETER(PAR.Invoice_Date);
PARAMETER(PAR.Event_Code);
PARAMETER(PAR.Trans_Contol_AS400_Plant);
PARAMETER(PAR.Modified_Flag);
PARAMETER(PAR.A_R_order_Value_Total);
PARAMETER(PAR.Billing_Activity_Type);
PARAMETER(PAR.Block_Order_Flag);
PARAMETER(PAR.Order_Certification_Flag);
PARAMETER(PAR.Invoice_Order_Value_Tot);
PARAMETER(PAR.Process_Sts_for_3C);
PARAMETER(PAR.Order_Conf_Fax_Sts);
PARAMETER(PAR.Manifest_Fax_Sts);
PARAMETER(PAR.Invoice_Fax_Sts);
PARAMETER(PAR.Transfer_in_Storage_Ind);
PARAMETER(PAR.Email_Cust_On_Order_Ship);
PARAMETER(PAR.Order_Emailed);
PARAMETER(PAR.Export_Docs_Go_w_Driver);
PARAMETER(PAR.Shipping_Temp_Code_C_F);
PARAMETER(PAR.Broker_Order_Status);
PARAMETER(PAR.Air_Freight_Order);
PARAMETER(PAR.Order_Requires_Review);
PARAMETER(LCL.OH_Load_Plan_Ready);
PARAMETER(PAR.Export_USDA_Approved);
PARAMETER(PAR.HPB_Ship_to_Warehouse);
PARAMETER(PAR.OH_TF_Exempt_Code);
PARAMETER(PAR.OH_Appt_Confirmation_Dt);
PARAMETER(PAR.JPN_Invoice_Issuance_Date);
PARAMETER(PAR.Load_Actual_Shipped_Date);
PARAMETER(PAR.Load_BOL_Complete_Date);
PARAMETER(PAR.Load_Truck_Departure_Date);
PARAMETER(PAR.Maximum_Gross_Weight);
PARAMETER(PAR.Time_of_Original_Entry);
PARAMETER(PAR.OH_Appt_Confirmation_Tm);
PARAMETER(PAR.Load_BOL_Complete_Time);
PARAMETER(PAR.Load_Truck_Departure_Time);
PARAMETER(PAR.Act_Frt_Reference_Amount);
PARAMETER(PAR.Act_Non_Ref_Frt_Amount);
PARAMETER(PAR.OH_Fuel_Surcharge_Amount);
PARAMETER(PAR.OH_Total_Non_Ref_Frt_Amt);
PARAMETER(PAR.OH_Total_Ref_Frt_Amt);
PARAMETER(PAR.Claim_Number);
PARAMETER(PAR.EDI_Status_1);
PARAMETER(PAR.EDI_Status_2);
PARAMETER(PAR.EDI_Status_3);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Processing after Data read

 //?01/22/09 RMC  move here from "before Data update" spot
 //?06/23/00 PKD Added the update of the Export Status on the Load
 //?             if the Export Status on the Order is changed to Y,
 //?Change the Export Status.
 CASE;

 // IF PAR.Export Status NE DB1.Export Status
 IF PAR.Export_Status <> DB1.Export_Status;

 // AND PAR.Export Status is yes
 AND PAR.Export_Status = 'Y';

 CASE;

 // IF DB1.Load ID is NE Blank
 IF DB1.Load_ID <> *ZERO;

 // AND DB1.Load Plan Order is yes
 AND DB1.Load_Plan_Order = 'Y';

 EXECUTE FUNCTION(Chg Export Status     CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC1540180;
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.Export_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 ENDIF;

 // LCL.Status Flag 1  Y/N = CND.No
 LCL.Status_Flag_1_Y_N = 'N';

 //?Email Requested Delv Change msg is changed and Appt exists.
 CASE;

 // IF PAR.Requested Delivery Date NE DB1.Requested Delivery Date
 IF ( PAR.Requested_Delivery_Date <> DB1.Requested_Delivery_Date;

 // OR PAR.Requested Delivery Time NE DB1.Requested Delivery Time
 OR PAR.Requested_Delivery_Time <> DB1.Requested_Delivery_Time );

 // AND DB1.OH Appt Confirmation Dt is Entered
 AND DB1.OH_Appt_Confirmation_Dt > *ZERO;

 // LCL.Status Flag 1  Y/N = CND.Yes
 LCL.Status_Flag_1_Y_N = 'Y';

 ENDIF;

 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

 //?------------------------------------------------------------------
 //?------------------------------------------------------------------
 //?USER: Processing after Data update

 //?Email Requested Delv Change msg is changed and Appt exists.
 CASE;

 // IF LCL.Status Flag 1  Y/N is Yes
 IF LCL.Status_Flag_1_Y_N = 'Y';

 // Call program Exc Email Ord RqDtChg XF.
 CALL PROGRAM(Exc Email Ord RqDtChg XF) ('PBEPXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Sales_Route_Code);

 ENDIF;

}


//?** If OHE record exists, update, else, add    FP1303
//?06/13/18 DN R12926-Get OHE Abs Freight Info.
EXECUTE FUNCTION(RTV OHE for Ord Entry2 RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2154800;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(WRK.Delivery_P_O_Number);
PARAMETER(LCL.OHE_Abs_Rate_Override_Rsn);
PARAMETER(LCL.OHE_Orig_ABS_Freight_Rate);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

//?07/31/19 DN R15161-Replaced OHE CRTOBJ to Not Call CHGOBJ.
EXECUTE FUNCTION(CRT Order Header Extsn CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC2173922;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Load_ID);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(LCL.OHE_Ship_Status);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.OHE_HPB_RIN_Equiv_Value);
PARAMETER(PAR.OHE_HPB_RIN_Price);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.OHE_Carrier_SCAC_Code);
PARAMETER(PAR.OHE_Spot_Buy);
PARAMETER(LCL.OHE_PO_ACK_Flag);
PARAMETER(PAR.OHE_Override_Type_Code);
PARAMETER(LCL.OHE_Backhaul_Status);
PARAMETER(LCL.OHE_Backhaul_ETA_AM_PM);
PARAMETER(LCL.OHE_Load_Haul_Type);
PARAMETER(LCL.OHE_Backhaul_Carrier_Code);
PARAMETER(LCL.OHE_Bookings_Confirmed);
PARAMETER(LCL.OHE_EDI_Error_Reasons);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(*ZERO);
PARAMETER(PAR.Delivery_P_O_Number);
PARAMETER(PAR.OHE_Intended_for_ExportCC);
PARAMETER(LCL.OHE_EDI_943_Action);
PARAMETER(LCL.OHE_EDI_944_Action);
PARAMETER(LCL.OHE_EDI_940_Action);
PARAMETER(LCL.OHE_EDI_945_Action);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(PAR.OHE_Appt_Confirmation_#);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(PAR.OHE_Appt_Confirmation_Nm);
PARAMETER(*BLANK);
PARAMETER(PAR.Letter_of_Credit_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(LCL.Blank_1_USR);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.EDI_Status_1);
PARAMETER(LCL.EDI_Status_2);
PARAMETER(LCL.EDI_Status_3);
PARAMETER('A');
PARAMETER(JOB.*Job_time);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(JOB.*Job_date);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp 2 IF) TYPE(EXCINTFUN)                      AC2165057;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing if Data update error

 RETURN;

}


// IF *OTHERWISE
IF *OTHERWISE;

//?Chk Ship Method or Block Order Chgs then set OHE Orig AFR to Order's AFR.
CASE;

// IF PAR.Shipping Method NE LCL.Shipping Method
IF PAR.Shipping_Method <> LCL.Shipping_Method;

// OR LCL.Block Order Chg B to F is Yes
OR LCL.Block_Order_Chg_B_to_F = 'Y';

// LCL.OHE Orig ABS Freight Rate = LCL.Absorbed Freight Rate CWT
LCL.OHE_Orig_ABS_Freight_Rate = LCL.Absorbed_Freight_Rate_CWT;

// LCL.OHE Abs Rate Override Rsn = CON.*BLANK
LCL.OHE_Abs_Rate_Override_Rsn = *BLANK;

//?Chk Ship Method or Block Order Chgs then set OHE Orig AFR to Order's AFR.
// IF *OTHERWISE
IF *OTHERWISE;

//?dont change OHE abs fields
ENDIF;

EXECUTE FUNCTION(CHG OE Fields        CH) TYPE(CHGOBJ) FILE(PMAMREP)            AC1915121;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.OHE_HPB_RIN_Equiv_Value);
PARAMETER(PAR.OHE_HPB_RIN_Price);
PARAMETER(PAR.OHE_Spot_Buy);
PARAMETER(PAR.OHE_Override_Type_Code);
PARAMETER(PAR.Delivery_P_O_Number);
PARAMETER(PAR.OHE_Intended_for_ExportCC);
PARAMETER(LCL.OHE_Abs_Rate_Override_Rsn);
PARAMETER(PAR.OHE_Appt_Confirmation_#);
PARAMETER(PAR.OHE_Appt_Confirmation_Nm);
PARAMETER(PAR.Letter_of_Credit_Number);
PARAMETER(LCL.OHE_Orig_ABS_Freight_Rate);
{
 //?USER: Processing before Data update

 // DB1.Job Time = JOB.*Job time
 DB1.Job_Time = JOB.*Job_time;

 // DB1.Job Date = JOB.*Job date
 DB1.Job_Date = JOB.*Job_date;

 // DB1.Job Name = JOB.*PROGRAM
 DB1.Job_Name = JOB.*PROGRAM;

 // DB1.User Id = JOB.*USER
 DB1.User_Id = JOB.*USER;

}


ENDIF;

CASE;

// IF PAR.Load ID is GT Zero
IF PAR.Load_ID > *ZERO;

EXECUTE FUNCTION(RTV Chg LD APPT/CNFRM RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC2030690;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.OHE_Appt_Confirmation_Nm);
PARAMETER(PAR.OHE_Appt_Confirmation_#);
PARAMETER(PAR.OH_Appt_Confirmation_Dt);
PARAMETER(PAR.OH_Appt_Confirmation_Tm);
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER(PAR.Requested_Delivery_Time);
{
 //?USER: Process Data record

 // LCL.LD Carrier Appt Date = DB1.LD Carrier Appt Date
 LCL.LD_Carrier_Appt_Date = DB1.LD_Carrier_Appt_Date;

 // LCL.LD Carrier Appt Time = DB1.LD Carrier Appt Time
 LCL.LD_Carrier_Appt_Time = DB1.LD_Carrier_Appt_Time;

 //?Upd Ld Carr Appt if Sls Appt is entered
 CASE;

 // IF PAR.LD Sls Appt Confirm Dt is Entered
 IF PAR.LD_Unused_Date_2 > *ZERO;

 // LCL.LD Carrier Appt Date = PAR.Requested Delivery Date
 LCL.LD_Carrier_Appt_Date = PAR.Requested_Delivery_Date;

 // LCL.LD Carrier Appt Time = PAR.Requested Delivery Time * CON.100 *
 LCL.LD_Carrier_Appt_Time = PAR.Requested_Delivery_Time * 100;

 ENDIF;

 //?Blank out Ld Carr Appt if Sls Appt is now blank AND WAS entered before
 CASE;

 // IF PAR.LD Sls Appt Confirm Dt is Zero
 IF PAR.LD_Unused_Date_2 = *ZERO;

 // AND DB1.LD Sls Appt Confirm Dt is Entered
 AND DB1.LD_Unused_Date_2 > *ZERO;

 // LCL.LD Carrier Appt Date = CON.*ZERO
 LCL.LD_Carrier_Appt_Date = *ZERO;

 // LCL.LD Carrier Appt Time = CON.*ZERO
 LCL.LD_Carrier_Appt_Time = *ZERO;

 ENDIF;

 EXECUTE FUNCTION(Chg LD APPT/CNFRM    CH) TYPE(CHGOBJ) FILE(OMFLCPP)            AC2030693;
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Stop_Drop_Sequence_Number);
 PARAMETER(DB1.Stop_Drop);
 PARAMETER(PAR.Confirmation_Made_With);
 PARAMETER(PAR.Confirmation_Number);
 PARAMETER(LCL.LD_Carrier_Appt_Date);
 PARAMETER(PAR.LD_Unused_Date_2);
 PARAMETER(LCL.LD_Carrier_Appt_Time);
 PARAMETER(PAR.LD_Unused_Time_2);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


ENDIF;

