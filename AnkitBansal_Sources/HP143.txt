      *****************  RPG PROGRAM HEADING  ************************
      * SYSTEM:      HOG PRODUCTION
      * PROGRAM:     HP143
      * TITLE:       REOPEN A VOIDED HOG GROUP
      * PROGRAMMER:  LEANNE FEDOR
      * CREATED:     10/25/94
      *
      * FUNCTION: USES AN EDIT RECORD FORMAT TO DISPLAY A VOIDED
      *           GROUP TO THE USER. WHEN THE USER PRESSES ENTER,
      *           THE STATUS OF THE VOIDED GROUP IS RESET TO OPEN.
      *           THE USER IS NOT ALLOWED TO CHANGE ANY DATA ON THE
      *           GROUP THROUGH THIS PROGRAM.  THEY MUST ACCESS THE
      *           REOPENED GROUP THROUGH WORK WITH ACTIVE HOG GROUPS
      *           TO CHANGE INFORMATION ON THE GROUP.
      *
      *           THIS PROGRAM IS CALLED FROM HP441 - WORK WITH
      *           CLOSED/VOIDED HOG GROUPS.
      *
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 04/20/95  LEANNE FEDOR
      *           CHANGED FARM SITE CODE FROM ALPHA TO NUMERIC
      *
      * 04/06/04  LeAnne Fedor
      *           We found/fixed a bug in the original VOID logic in program HP140.
      *           The original deletion logic apparently checked for existing
      *           movements--but then did not issue a message or stop the user!!  This
      *           bug would only have occurred when the user attempted to delete an OPEN
      *           group with NO feed and NO expenses.
      *
      *           So, with this bug fixed, any group that is REOPENED should, logically,
      *           be reset to a status of CR=created.  But, to handle all situations, we
      *           now conditionally reset the status: if the group has an OPEN date, we
      *           reset to OP=Open; otherwise, we reset to CR=Created.
      *
      * 07/06/09  LeAnne Ramsey
      *           Recompile only. Added new field 'Continuous Flow Flag' to Hog Group file.
      *
      * 10/15/13  LeAnne Ramsey (E2831)
      *           Recompile only. Added field 'MTech Reference'.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     FHPD143    CF   E             WORKSTN INFDS(IOFEED)
      *
      *
     FHSP018    IF   E           K DISK
      *    FARM SITE
      *
      *
     FHSP019    IF   E           K DISK
      *    FARM BUILDINGS
      *
      *
     FHSP031    IF   E           K DISK
      *    BREED STOCK
      *
      *
     FHSL034D   UF   E           K DISK
      *    HOG GROUP
      *
      /EJECT
      ****************************************************************
      * Definition Specifications
      ****************************************************************
      *
      *---------------------------------------------------------------
      * STANDARD ERROR MESSAGE HANDLING DATA STRUCTURES
      *---------------------------------------------------------------
      *
      * FOR ERROR MESSAGE HANDLING, A PACKED INDEX (E) IS REQUIRED.
      * FOR PROGRAM READABILITY, DEFINE A CORRESPONDING ERROR COUNT
      * FIELD CALLED 'ERROR'. ALSO, DEFINE CURSOR LOCATION FIELDS.
      *
     D                 DS                  INZ
     D  ERROR                  1      2P 0
     D  E                      1      2P 0
      *
      * THIS DATA STRUCTURE SUPPLIES THE NAME OF THE MESSAGE FILE TO
      * THE MESSAGE HANDLING CL PROGRAM.  THE FIELD NAME MSGFIL MUST BE
      * CONSTANT. THE VALUE IN QUOTES IS THE NAME OF THE SPECIFIC
      * MESSAGE FILE CONTAINING THE USER DEFINED MESSAGES.
      *
     D                 DS                  INZ
     D  MSGFIL                 1     10    INZ('HSMSGF    ')
      *
      * THE FOLLOWING 3 DATA STRUCTURES ARE USED TO SPEED MESSAGE
      * HANDLING SINCE IT IS FASTER TO CLEAR DATA STRUCTURES THAN
      * ARRAYS.  EACH IS ASSOCIATED WITH A STANDARD MESSAGE ARRAY.
      *
     D MGI             DS           140    INZ
     D  MGID                   1    140
     D                                     DIM(20)                              MSG ID ARRAY
      *
     D MGD             DS          1000    INZ
     D  MGDT                   1   1000
     D                                     DIM(20)                              MSG PARMS
      *
     D MGWK            DS            50    INZ
     D  MGW                    1     50
     D                                     DIM(50)                              MSG WORK PARMS
      *
      *---------------------------------------------------------------
      * STANDARD PROGRAM STATUS DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTPGFR (RECORD FORMAT: PGMDSR)
     D PGMDS         ESDS                  EXTNAME(UTPGFR)
      *
      *---------------------------------------------------------------
      * STANDARD WORKSTATION INFORMATION DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTWSFR (RECORD FORMAT: UTIDFRR)
     D IOFEED        E DS                  EXTNAME(UTWSFR)
      *
      *---------------------------------------------------------------
      *  NAMED CONSTANTS
      *---------------------------------------------------------------
      *
     D SET1            C                   CONST('SET1  ')
     D SCRN1           C                   CONST('SCRN1 ')
     D EXIT            C                   CONST('EXIT  ')
     D UPDATE          C                   CONST('UPDATE')
     D YES             C                   CONST('Y')
     D NO              C                   CONST('N')
      *
      *---------------------------------------------------------------
      *  DATE FORMATS
      *---------------------------------------------------------------
      *
      * DATE IN MMDDYY FORMAT
      *
     D                 DS
     D  WKMDY                  1      6  0
     D  WKMM                   1      2  0
     D  WKDD                   3      4  0
     D  WKYY                   5      6  0
      *
      * DATE IN CCYYMMDD FORMAT
      *
     D                 DS
     D  WKCYMD                 1      8  0
     D  WKCEN                  1      2  0
     D  WKYER                  3      4  0
     D  WKMON                  5      6  0
     D  WKDAY                  7      8  0
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAIN LINE
      ****************************************************************
      *
     C                   MOVEL     SET1          ROUTNE
      *
     C     *INLR         DOWEQ     *OFF                                         MAIN DO LOOP
     C     ROUTNE        CASEQ     SET1          $SET1
     C     ROUTNE        CASEQ     SCRN1         $SCRN1
     C     ROUTNE        CASEQ     UPDATE        $UPD1
     C     ROUTNE        CASEQ     EXIT          $EXIT
     C                   ENDCS
     C                   ENDDO                                                  MAIN DO LOOP
      /EJECT
      *----------------------------------------------------------------
      * $SET1 - SUBROUTINE TO SET ENVIRONMENT FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $SET1         BEGSR
      *
      * RETRIEVE THE HOG GROUP INFORMATION. DO NOT LOCK THE RECORD.
      *
     C     WKHGSN        CHAIN(N)  HSL034D                            62
     C     *IN62         IFEQ      *OFF                                         IF FOUND
     C                   MOVEL     HGHGCD        DFHGCD
     C                   Z-ADD     HGHGSN        DFHGSN
     C                   Z-ADD     HGFSCD        DFFSCD
     C                   MOVEL     HGBLCD        DFBLCD
     C                   MOVEL     HGRMCD        DFRMCD
     C                   MOVEL     HGGSCD        DFGSCD
     C                   MOVEL     HGBSCD        DFBSCD
     C                   MOVEL     HGGNCD        DFGNCD
      *
      * EXECUTE THE SUBROUTINE TO RETRIEVE VARIOUS 'DESCRIPTIONS' TO
      * DISPLAY ON THE SCREEN.
      *
     C                   EXSR      $DESC1
      *
      * FLIP THE DATES FROM CCYYMMDD TO MMDDYY FOR DISPLAY PURPOSES
      *
     C                   EXSR      $FLIP1
     C                   ELSE
      *
      * HOG GROUP NOT FOUND
      *
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00262'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVEA     DFHGCD        MGW(1)
     C                   MOVEA     MGW           MGDT(E)
     C                   ENDIF
     C                   ENDIF                                                  IF FOUND
      *
     C                   MOVEL     SCRN1         ROUTNE
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $SCRN1 - SUBROUTINE TO PERFORM OPERATOR I/O FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $SCRN1        BEGSR
      *
      *  WRITE MESSAGES FROM ARRAYS TO MESSAGE SUBFILE
      *
     C                   EXSR      $WRMSG
      *
      * WRITE SCREEN 1 TO CRT
      *
     C                   WRITE     HP143K1
     C                   WRITE     HP143EC
     C                   EXFMT     HP143R1
      *
      * CLEAR MESSAGES
      *
     C                   EXSR      $CLMSG
      *
      * GET USER'S INPUT AND SET ROUTINE
      *
     C                   SELECT
      *
     C     *IN03         WHENEQ    *ON                                          F3=EXIT
     C                   MOVEL     '03'          RTNCD
     C                   MOVEL     EXIT          ROUTNE
      *
     C     *IN12         WHENEQ    *ON                                          F12-PREVIOUS
     C                   MOVEL     '12'          RTNCD
     C                   MOVEL     EXIT          ROUTNE
     C                   OTHER
      *
      * USER HAS PRESSED ENTER
      * *IN62 WILL BE ON IF THE RECORD THE USER IS TRYING TO ACCESS
      * HAS BEEN DELETED BY ANOTHER USER.  SO, ONLY PERFORM THE
      * UPDATE OF THE RECORD IF *IN62 IS OFF
      *
     C     *IN62         IFEQ      *OFF                                         IF HERE
     C                   MOVEL     UPDATE        ROUTNE
     C                   ENDIF                                                  IF HERE
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $BSCD - SUBROUTINE TO RETRIEVE BREED STOCK DESCRIPTION
      *----------------------------------------------------------------
      *
     C     $BSDS         BEGSR
      *
     C     DFBSCD        CHAIN     HSP031                             98
     C     *IN98         IFEQ      *OFF                                         IF GOOD BRED
     C                   MOVEL(P)  BSBSDS        DFBSDS
     C                   ELSE
     C                   MOVEL(P)  'UNKNOWN'     DFBSDS
     C                   ENDIF                                                  IF GOOD BRED
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $UPD1  - SUBROUTINE TO UPDATE DATABASE FILE
      *----------------------------------------------------------------
      *
     C     $UPD1         BEGSR
      *
      * CHECK THAT THE RECORD STILL EXISTS PRIOR TO ATTEMPTING TO
      * UPDATE.  LOCK THE RECORD FOR UPDATE.
      *
     C     ERROR         IFEQ      0                                            IF GOOD
     C     WKHGSN        CHAIN     HSL034D                            93
     C     *IN93         IFEQ      *ON                                          IF NOT FOUND
     C                   SETON                                        62
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09008'     MGID(E)
     C                   ENDIF
     C                   ENDIF                                                  IF NOT FOUND
     C                   ENDIF                                                  IF GOOD
      *
      *
      *  IF THERE ARE NO ERRORS, REVISE THE RECORD
      *
     C     ERROR         IFEQ      0                                            IF NO ERR
      *
     C                   if        hgopdt = 0
     C                   movel     'CR'          HGGSCD
     C                   else
     C                   movel     'OP'          HGGSCD
     C                   endif
      *
     C                   Z-ADD     0             HGVDDT
     C                   UPDATE    HGREC
     C                   ENDIF                                                  IF NO ERR
      *
      *  IF THERE ARE ANY ERRORS, REDISPLAY THE SCREEN; OTHERWISE, EXIT
      *  THE PROGRAM AUTOMATICALLY. (THE USER DOES NOT HAVE TO TAKE
      *  ANY FUNCTION KEY TO EXIT)
      *
     C     ERROR         IFGT      0
     C                   MOVEL     SCRN1         ROUTNE
     C                   ELSE
     C                   MOVEL     EXIT          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $DESC1- SUBROUTINE TO RETRIEVE VARIOUS DESCRIPTIONS FOR SCREEN1
      *---------------------------------------------------------------
      *
     C     $DESC1        BEGSR
      *
      * RETRIEVE FARM SITE DESCRIPTION
      *
     C     DFFSCD        CHAIN     HSP018                             96
     C     *IN96         IFEQ      *OFF                                         IF FOUND
     C                   MOVEL     FSFSNM        DFFSNM
     C                   ELSE
     C                   MOVEL(P)  'UNKNOWN'     DFFSNM
     C                   ENDIF                                                  IF FOUND
      *
      * RETRIEVE BUILDING DESCRIPTION
      *
     C     K2P019        CHAIN     HSP019                             97
     C     *IN97         IFEQ      *OFF                                         IF FOUND
     C                   MOVEL     FBBLDS        DFBLDS
     C                   ELSE
     C                   MOVEL(P)  'UNKNOWN'     DFBLDS
     C                   ENDIF                                                  IF FOUND
      *
      * RETRIEVE BREED STOCK DESCRIPTION
      *
     C     DFBSCD        IFNE      *BLANK
     C                   EXSR      $BSDS
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *****************************************************************
      *  $FLIP1 - FLIP DATES FROM CCYYMMDD TO MMDDYY
      *****************************************************************
      *
     C     $FLIP1        BEGSR
      *
      * FLIP CREATE DATE
      *
     C                   Z-ADD     HGCRDT        WKCYMD
     C                   EXSR      $TOMDY
     C                   Z-ADD     WKMDY         DFCRDT
      *
      * FLIP DATE OPENED
      *
     C                   Z-ADD     HGOPDT        WKCYMD
     C                   EXSR      $TOMDY
     C                   Z-ADD     WKMDY         DFOPDT
      *
      * FLIP DATE VOIDED
      *
     C                   Z-ADD     HGVDDT        WKCYMD
     C                   EXSR      $TOMDY
     C                   Z-ADD     WKMDY         DFVDDT
      *
     C                   ENDSR
      /EJECT
      *****************************************************************
      * $TOMDY   FLIP DATE FROM YYMMDD TO MMDDYY
      *****************************************************************
      *
     C     $TOMDY        BEGSR
      *
     C                   Z-ADD     WKMON         WKMM
     C                   Z-ADD     WKDAY         WKDD
     C                   Z-ADD     WKYER         WKYY
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $WRMSG - SUBROUTINE TO WRITE ERROR MESSAGES
      *---------------------------------------------------------------
      *
     C     $WRMSG        BEGSR
      *
     C                   CALL      'UT80045J'                           43
     C                   PARM                    MGID
     C                   PARM                    MGDT
     C                   PARM                    ERROR
     C                   PARM      SDPGM         PGM
     C                   PARM      MSGFIL        MSGFL
      *
      * IF CALL TO UT80045J FAILED, A MESSAGE HARDCODED IN THE DSPF
      * COMMAND KEY RECORD WILL BE SET ON. SO, REDISPLAY SCREEN TO USER
      *
     C     *IN43         IFEQ      *ON
     C                   MOVEL     SET1          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      *
      *----------------------------------------------------------------
      * $CLMSG - SUBROUTINE TO CLEAR MESSAGES
      *----------------------------------------------------------------
      *
     C     $CLMSG        BEGSR
      *
     C                   CALL      'UT80045J'                           43
     C                   PARM      *BLANKS       MGI
     C                   PARM      *BLANKS       MGD
     C                   PARM      *ZEROS        ERROR
     C                   PARM      SDPGM         PGM
     C                   PARM      MSGFIL        MSGFL
      *
      * IF CALL TO UT80045J FAILED, A MESSAGE HARDCODED IN THE DSPF
      * COMMAND KEY RECORD WILL BE SET ON. SO, REDISPLAY SCREEN TO USER
      *
     C     *IN43         IFEQ      *ON
     C                   MOVEL     SET1          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      *
      *----------------------------------------------------------------
      * $EXIT - SUBROUTINE TO SET ON LR AND END JOB
      *----------------------------------------------------------------
      *
     C     $EXIT         BEGSR
     C                   SETON                                        LR
     C                   ENDSR
      *
      /EJECT
      *---------------------------------------------------------------
      * *INZSR - INITIALIZATION SUBROUTINE
      *---------------------------------------------------------------
      *
     C     *INZSR        BEGSR
      *
      * FARM BUILDING
      *
     C     K2P019        KLIST
     C                   KFLD                    DFFSCD
     C                   KFLD                    DFBLCD
      *
      * PARM LISTS
      *
     C     *ENTRY        PLIST
     C                   PARM                    DFFSBO
     C                   PARM                    DFBODS
     C                   PARM                    DFHGCD
     C                   PARM                    WKHGSN
     C                   PARM                    RTNCD
      *
     C     *LIKE         DEFINE    HGHGSN        WKHGSN
      *
      * GLOBAL DEFINES
      *
     C                   MOVE      *BLANK        PGM              10            USED IN MSG
     C                   MOVE      *BLANK        MSGFL            10            USED IN MSG
     C                   MOVE      *BLANK        ROUTNE            6
     C                   MOVEL     'REOPEN'      DFMODE
     C                   MOVEL     '00'          RTNCD             2            RETURN CODE
      *
      * THE FOLLOWING STANDARD CODE MUST BE INCLUDED TO MAKE THE
      * STANDARD ERROR MESSAGE HANDLING PROGRAM FUNCTION PROPERLY.
      * THIS CODE SETS AND CLEARS THE PROGRAM MESSAGE QUEUE.
      *
     C                   Z-ADD     20            MAXMSG            2 0
     C                   MOVEL     '*'           MSGPGM                         SET QUEUE
     C                   EXSR      $CLMSG                                       CLEAR MSG
      *
     C                   ENDSR
      /EJECT
