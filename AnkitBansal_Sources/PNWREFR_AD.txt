// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNWREFR
// ?Date: 14.08.2025 Time: 03:46:51
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize subfile header

//?Update CTL fields from PAR
DO;

// CTL.DATE = PAR.Date 1          PASS  USR
CTL.DATE = PAR.Date_1_PASS_USR;

// CTL.Thru Date, 8.0 ATR = PAR.Date 2          PASS  USR
CTL.Thru_Date_8_0_ATR = PAR.Date_2_PASS_USR;

// CTL.Vessel Name = PAR.OHE Vessel/Airline
CTL.Vessel_Name = PAR.OHE_Vessel_Airline;

// CTL.Voyage = PAR.OHE Voyage/Flight
CTL.Voyage = PAR.OHE_Voyage_Flight;

// CTL.Load ID USR = PAR.Load ID
CTL.Load_ID_USR = PAR.Load_ID;

// CTL.Order Number = PAR.Order Number
CTL.Order_Number = PAR.Order_Number;

// CTL.Carrier Code = PAR.Carrier Code
CTL.Carrier_Code = PAR.Carrier_Code;

// CTL.Booking Number = PAR.OHE Booking Number
CTL.Booking_Number = PAR.OHE_Booking_Number;

// CTL.Container Number = PAR.Container Number
CTL.Container_Number = PAR.Container_Number;

// CTL.Shipping Line = PAR.Shipping Line
CTL.Shipping_Line = PAR.Shipping_Line;

// CTL.Delivery Terminal USR = PAR.Port Delv Terminal
CTL.Delivery_Terminal_USR = PAR.Port_Delv_Terminal;

// CTL.Discharge Port = PAR.OHE Discharge Port/Airprt
CTL.Discharge_Port = PAR.OHE_Discharge_Port_Airprt;

// CTL.Port City = PAR.OHE City
CTL.Port_City = PAR.OHE_City;

// CTL.OHE Load Haul Type = PAR.OHE Load Haul Type
CTL.OHE_Load_Haul_Type = PAR.OHE_Load_Haul_Type;

ENDDO;

EXECUTE FUNCTION(RTV All Hdr flds /ord2 RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC2072108;
PARAMETER(NLL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(NLL.Order_Type_Sales);
PARAMETER(NLL.AR_Customer_Number);
PARAMETER(NLL.Ship_To_Customer);
PARAMETER(NLL.Ship_To_Name);
PARAMETER(NLL.Ship_To_Address_Line_1);
PARAMETER(NLL.Ship_To_Address_Line_2);
PARAMETER(NLL.Ship_To_Address_Line_3);
PARAMETER(NLL.Ship_To_City);
PARAMETER(NLL.Ship_To_State_Code);
PARAMETER(NLL.Ship_To_Zip_Postal_Code);
PARAMETER(NLL.Bill_to_Customer);
PARAMETER(NLL.Bill_to_Name);
PARAMETER(NLL.Bill_to_Address_Line_1);
PARAMETER(NLL.Bill_to_Address_Line_2);
PARAMETER(NLL.Bill_to_Address_Line_3);
PARAMETER(NLL.Bill_to_City);
PARAMETER(NLL.Bill_to_State_Code);
PARAMETER(NLL.Bill_to_Zip_Postal_Code);
PARAMETER(NLL.Customer_Purchase_Order_#);
PARAMETER(NLL.Order_Date);
PARAMETER(NLL.Requested_Ship_Date);
PARAMETER(NLL.Actual_Shipped_Date);
PARAMETER(NLL.Cancel_Date);
PARAMETER(NLL.Terms_Code);
PARAMETER(NLL.Special_Instructions);
PARAMETER(NLL.Special_Instructions_2);
PARAMETER(CTL.Carrier_Code);
PARAMETER(NLL.Comment_Print_Acknowledge);
PARAMETER(NLL.Comment_Print_Inv_Cr_Memo);
PARAMETER(NLL.Comment_Print_Pick_Slip);
PARAMETER(NLL.Comment_Print_Ship_Doc);
PARAMETER(NLL.Reason_Code);
PARAMETER(NLL.Order_in_Use);
PARAMETER(NLL.Header_Status);
PARAMETER(NLL.Header_Status_Last);
PARAMETER(NLL.Order_Type_Print_Status);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(NLL.User_Original_Entry);
PARAMETER(NLL.Date_of_Original_Entry);
PARAMETER(NLL.Order_Value_Total);
PARAMETER(NLL.Order_Weight_Total);
PARAMETER(NLL.Credit_Hold);
PARAMETER(NLL.Production_Hold);
PARAMETER(NLL.New_Customer_Hold);
PARAMETER(NLL.Requested_Delivery_Date);
PARAMETER(NLL.Requested_Delivery_Time);
PARAMETER(NLL.Accounts_Receiv_Ent_1);
PARAMETER(NLL.Accounts_Receiv_Ent_2);
PARAMETER(LCL.Load_ID);
PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
PARAMETER(NLL.Rated_Freight);
PARAMETER(NLL.LTL_Flag);
PARAMETER(NLL.Price_Audit);
PARAMETER(NLL.Price_Status);
PARAMETER(NLL.Shipping_Method);
PARAMETER(NLL.Export_Status);
PARAMETER(NLL.Palletize);
PARAMETER(NLL.Shrink_Wrap);
PARAMETER(NLL.Slip_Sheet);
PARAMETER(NLL.Age_Code);
PARAMETER(NLL.Reefer_Temperature);
PARAMETER(NLL.Load_Type);
PARAMETER(NLL.Attach_to_Invoice_Number);
PARAMETER(NLL.Load_Plan_Order);
PARAMETER(NLL.Print_Pick_Slip);
PARAMETER(NLL.Resell_Reference_Number);
PARAMETER(NLL.Special_Comment_1);
PARAMETER(NLL.Special_Comment_2);
PARAMETER(NLL.Affect_Auto_Accruals);
PARAMETER(NLL.Sales_Route_Code);
PARAMETER(NLL.Manager_Level_Code);
PARAMETER(NLL.VP_Level_Code);
PARAMETER(NLL.Attach_to_Order_Number);
PARAMETER(NLL.Reason_for_Price_Audit);
PARAMETER(NLL.Invoice_Number);
PARAMETER(NLL.Invoice_Suffix);
PARAMETER(NLL.Invoice_Date);
PARAMETER(NLL.Event_Code);
PARAMETER(NLL.Trans_Contol_AS400_Plant);
PARAMETER(NLL.Modified_Flag);
PARAMETER(NLL.A_R_order_Value_Total);
PARAMETER(NLL.Billing_Activity_Type);
PARAMETER(NLL.Block_Order_Flag);
PARAMETER(NLL.Order_Certification_Flag);
PARAMETER(NLL.Invoice_Order_Value_Tot);
PARAMETER(NLL.Process_Sts_for_3C);
PARAMETER(NLL.Order_Conf_Fax_Sts);
PARAMETER(NLL.Manifest_Fax_Sts);
PARAMETER(NLL.Invoice_Fax_Sts);
PARAMETER(NLL.Transfer_in_Storage_Ind);
PARAMETER(NLL.Email_Cust_On_Order_Ship);
PARAMETER(NLL.Order_Emailed);
PARAMETER(NLL.Export_Docs_Go_w_Driver);
PARAMETER(NLL.Shipping_Temp_Code_C_F);
PARAMETER(NLL.Broker_Order_Status);
PARAMETER(NLL.Air_Freight_Order);
PARAMETER(NLL.Order_Requires_Review);
PARAMETER(NLL.OH_Load_Plan_Ready);
PARAMETER(NLL.Export_USDA_Approved);
PARAMETER(NLL.HPB_Ship_to_Warehouse);
PARAMETER(NLL.OH_TF_Exempt_Code);
PARAMETER(NLL.OH_Appt_Confirmation_Dt);
PARAMETER(NLL.JPN_Invoice_Issuance_Date);
PARAMETER(NLL.Load_Actual_Shipped_Date);
PARAMETER(NLL.Load_BOL_Complete_Date);
PARAMETER(NLL.Load_Truck_Departure_Date);
PARAMETER(NLL.Maximum_Gross_Weight);
PARAMETER(NLL.Time_of_Original_Entry);
PARAMETER(NLL.OH_Appt_Confirmation_Tm);
PARAMETER(NLL.Load_BOL_Complete_Time);
PARAMETER(NLL.Load_Truck_Departure_Time);
PARAMETER(NLL.Act_Frt_Reference_Amount);
PARAMETER(NLL.Act_Non_Ref_Frt_Amount);
PARAMETER(NLL.OH_Fuel_Surcharge_Amount);
PARAMETER(NLL.OH_Total_Non_Ref_Frt_Amt);
PARAMETER(NLL.OH_Total_Ref_Frt_Amt);
PARAMETER(NLL.Claim_Number);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV 1st Warehouse      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1575817;
PARAMETER(PAR.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(1);
PARAMETER(1);
PARAMETER(PAR.Warehouse_Code);
{
 //?USER: Process Data record

 // PAR.Warehouse Code = DB1.Warehouse Code
 PAR.Warehouse_Code = DB1.Warehouse_Code;

 QUIT;

}


EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
PARAMETER(PAR.Warehouse_Code);
PARAMETER(CTL.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(CTL.Carrier_Code);
PARAMETER(CTL.Description);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Warehouse type description
CASE;

// IF CTL.Warehouse Type is Frozen
IF CTL.Warehouse_Type = 'FZ';

// CTL.Description 14A      USR = CON.Frozen
CTL.Description_14A_USR = 'Frozen';

//?Warehouse type description
// IF CTL.Warehouse Type is Fresh
IF CTL.Warehouse_Type = 'FR';

// CTL.Description 14A      USR = CON.Chilled
CTL.Description_14A_USR = 'Chilled';

//?Warehouse type description
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Description 14A      USR = CON.*BLANK
CTL.Description_14A_USR = *BLANK;

ENDIF;

//?USER: Initialize subfile record (existing record)

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?** Select matching only if entered
CASE;

// IF WRK.Carrier Code is not entered
IF WRK.Carrier_Code = *BLANK;

// AND DB1.OHE Booking Number is Not Entered
AND DB1.OHE_Booking_Number = *BLANK;

// AND DB1.OHE Container Number is Not Entered
AND DB1.OHE_Container_Number = *BLANK;

// AND DB1.Load ID is GT Zero
AND DB1.Load_ID > *ZERO;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

ENDIF;

//?CALC: Subfile control function fields

//?** Refresh subfile if requested
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Validate subfile control

//?** F4=Prompt
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Shipping Line
IF PGM.*Cursor_field = CTL.Shipping_Line;

// Call program SEL Shipping Line/PortsSR.
CALL PROGRAM(SEL Shipping Line/PortsSR) ('PDUMSRR');
PARAMETER(CTL.Shipping_Line);
PARAMETER(LCL.Port_Delv_Terminal);
PARAMETER(LCL.Port_City);

ENDIF;

ENDIF;

//?** At least one change field must be entered
CASE;

// IF CTL.Vessel Name is blanks
IF CTL.Vessel_Name = *BLANK;

// AND CTL.Voyage is Zeros
AND CTL.Voyage = *ZERO;

// AND CTL.Container Number is Not Entered
AND CTL.Container_Number = *BLANK;

// AND CTL.Booking Number is Not Entered
AND CTL.Booking_Number = *BLANK;

// AND CTL.Sail Date is not entered
AND CTL.Sail_Date = *ZERO;

// AND CTL.Arrival Date is Zeros
AND CTL.Arrival_Date = *ZERO;

// AND CTL.Usr Date 1 is Not Entered
AND CTL.Usr_Date_1 = *ZERO;

// AND CTL.Shipping Line is not entered
AND CTL.Shipping_Line = *BLANK;

// AND CTL.Discharge Port is Blank
AND CTL.Discharge_Port = *BLANK;

// AND CTL.OHE Port Cut Date is not entered
AND CTL.OHE_Port_Cut_Date = *ZERO;

// Send error message - 'At least one entry req'd to reassign Ocean Carrier Information'
ERROR(USR4393);
MSGPARM(CTL.Vessel_Name);
MSGPARM(CTL.Voyage);
MSGPARM(CTL.Sail_Date);
MSGPARM(CTL.Booking_Number);
MSGPARM(CTL.Container_Number);
MSGPARM(CTL.Arrival_Date);
MSGPARM(CTL.Usr_Date_1);

ENDIF;

//?** Validate Sail Date is today or later
CASE;

// IF CTL.Sail Date is Entered
IF CTL.Sail_Date <> *ZERO;

CASE;

// IF JOB.*Job date GT CTL.Sail Date
IF JOB.*Job_date > CTL.Sail_Date;

// Send error message - 'Date &1 cannot be before date &2'
ERROR(USR3945);
MSGPARM(CTL.Sail_Date);
MSGPARM(JOB.*Job_date);

ENDIF;

ENDIF;

//?** Validate Arrival Date is today or later
CASE;

// IF CTL.Arrival Date is Not Zeros
IF CTL.Arrival_Date <> *ZERO;

CASE;

// IF JOB.*Job date GT CTL.Arrival Date
IF JOB.*Job_date > CTL.Arrival_Date;

// Send error message - 'Date &1 cannot be before date &2'
ERROR(USR3945);
MSGPARM(CTL.Arrival_Date);
MSGPARM(JOB.*Job_date);

ENDIF;

ENDIF;

//?** Validate Final Destination Date is today or later
CASE;

// IF CTL.Usr Date 1 is Entered
IF CTL.Usr_Date_1 <> *ZERO;

CASE;

// IF JOB.*Job date GT CTL.Usr Date 1
IF JOB.*Job_date > CTL.Usr_Date_1;

// Send error message - 'Date &1 cannot be before date &2'
ERROR(USR3945);
MSGPARM(CTL.Usr_Date_1);
MSGPARM(JOB.*Job_date);

ENDIF;

ENDIF;

//?** Validate Sail Date is today or later
CASE;

// IF CTL.OHE Port Cut Date is Entered
IF CTL.OHE_Port_Cut_Date <> *ZERO;

CASE;

// IF JOB.*Job date GT CTL.OHE Port Cut Date
IF JOB.*Job_date > CTL.OHE_Port_Cut_Date;

// Send error message - 'Date &1 cannot be before date &2'
ERROR(USR3945);
MSGPARM(CTL.OHE_Port_Cut_Date);
MSGPARM(JOB.*Job_date);

ENDIF;

ENDIF;

//?USER: Validate subfile record relations

CASE;

// IF RCD.*SFLSEL is *Select
IF RCD.*SFLSEL = '1'/'1';

//?** Only update change fields if something is entered, otherwise
//?** leave as they were.
//?** Vessel Name
CASE;

// IF CTL.Vessel Name is blanks
IF CTL.Vessel_Name = *BLANK;

// LCL.Vessel Name = RCD.OHE Vessel/Airline
LCL.Vessel_Name = RCD.OHE_Vessel_Airline;

//?** Vessel Name
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Vessel Name = CTL.Vessel Name
LCL.Vessel_Name = CTL.Vessel_Name;

ENDIF;

//?** Voyage
CASE;

// IF CTL.Voyage is Zeros
IF CTL.Voyage = *ZERO;

// LCL.Voyage = RCD.OHE Voyage/Flight
LCL.Voyage = RCD.OHE_Voyage_Flight;

//?** Voyage
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Voyage = CTL.Voyage
LCL.Voyage = CTL.Voyage;

ENDIF;

//?** Shipping Line
CASE;

// IF CTL.Shipping Line is not entered
IF CTL.Shipping_Line = *BLANK;

// LCL.Shipping Line = RCD.Shipping Line
LCL.Shipping_Line = RCD.Shipping_Line;

// LCL.Port Delv Terminal = RCD.Port Delv Terminal
LCL.Port_Delv_Terminal = RCD.Port_Delv_Terminal;

// LCL.Port City = RCD.OHE City
LCL.Port_City = RCD.OHE_City;

//?** Shipping Line
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Shipping Line = CTL.Shipping Line
LCL.Shipping_Line = CTL.Shipping_Line;

ENDIF;

//?** Discharge Port
CASE;

// IF CTL.Discharge Port is Blank
IF CTL.Discharge_Port = *BLANK;

// LCL.Discharge Port = RCD.OHE Discharge Port/Airprt
LCL.Discharge_Port = RCD.OHE_Discharge_Port_Airprt;

//?** Discharge Port
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Discharge Port = CTL.Discharge Port
LCL.Discharge_Port = CTL.Discharge_Port;

ENDIF;

//?** Container Number
CASE;

// IF CTL.Container Number is Not Entered
IF CTL.Container_Number = *BLANK;

// LCL.Container Number = RCD.OHE Container Number
LCL.Container_Number = RCD.OHE_Container_Number;

//?** Container Number
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Container Number = CTL.Container Number
LCL.Container_Number = CTL.Container_Number;

ENDIF;

//?** Booking Number
CASE;

// IF CTL.Booking Number is Not Entered
IF CTL.Booking_Number = *BLANK;

// LCL.Booking Number = RCD.OHE Booking Number
LCL.Booking_Number = RCD.OHE_Booking_Number;

//?** Booking Number
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Booking Number = CTL.Booking Number
LCL.Booking_Number = CTL.Booking_Number;

ENDIF;

//?** Sail Date
CASE;

// IF CTL.Sail Date is not entered
IF CTL.Sail_Date = *ZERO;

// LCL.Sail Date = RCD.OHE Sail/Flight Date
LCL.Sail_Date = RCD.OHE_Sail_Flight_Date;

//?** Sail Date
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Sail Date = CTL.Sail Date
LCL.Sail_Date = CTL.Sail_Date;

ENDIF;

//?** Arrival Date
CASE;

// IF CTL.Arrival Date is Zeros
IF CTL.Arrival_Date = *ZERO;

// LCL.Arrival Date = RCD.OHE Arrival Date
LCL.Arrival_Date = RCD.OHE_Arrival_Date;

//?** Arrival Date
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Arrival Date = CTL.Arrival Date
LCL.Arrival_Date = CTL.Arrival_Date;

ENDIF;

//?** Final Destination Date
CASE;

// IF CTL.Usr Date 1 is Not Entered
IF CTL.Usr_Date_1 = *ZERO;

// LCL.Usr Date 1 = RCD.OHE Est Arrv at Dest Date
LCL.Usr_Date_1 = RCD.OHE_Est_Arrv_at_Dest_Date;

//?** Final Destination Date
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Usr Date 1 = CTL.Usr Date 1
LCL.Usr_Date_1 = CTL.Usr_Date_1;

ENDIF;

//?** OHE Port Cut Date
CASE;

// IF CTL.OHE Port Cut Date is not entered
IF CTL.OHE_Port_Cut_Date = *ZERO;

// LCL.OHE Port Cut Date = RCD.OHE Port Cut Date
LCL.OHE_Port_Cut_Date = RCD.OHE_Port_Cut_Date;

//?** OHE Port Cut Date
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.OHE Port Cut Date = CTL.OHE Port Cut Date
LCL.OHE_Port_Cut_Date = CTL.OHE_Port_Cut_Date;

ENDIF;

//?** Re-Calculate the total load miles using the updated sail port
//?** city. Update the load header.
//?** Total Load Miles will be zeros if any leg of the journey
//?** is missing a Miles Between Cities record.
//?** Include Override Total Load Miles. If entered, they will
//?** take precedence
// Call program CLC Total Load Miles   XF.
CALL PROGRAM(CLC Total Load Miles   XF) ('PDW3XFR');
PARAMETER(PAR.Load_ID);
PARAMETER(WRK.Total_Load_Miles);
PARAMETER(WRK.Override_Total_Load_Miles);

// Call program CHG Total Load Miles   XF.
CALL PROGRAM(CHG Total Load Miles   XF) ('PMFSXFR');
PARAMETER(PAR.Load_ID);
PARAMETER(WRK.Total_Load_Miles);
PARAMETER(WRK.Override_Total_Load_Miles);

// Call program CLC Deadline Date/Time XF.
CALL PROGRAM(CLC Deadline Date/Time XF) ('PMP9XFR');
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.Deadline_Departure_Date);
PARAMETER(LCL.Deadline_Departure_Time);
PARAMETER(LCL.Requested_Delivery_Date);

EXECUTE FUNCTION(CHG Deadline Dep D/T   CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1493670;
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.Deadline_Departure_Date);
PARAMETER(LCL.Deadline_Departure_Time);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(CHG Deadline Date/Time RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1496989;
PARAMETER(PAR.Load_ID);
PARAMETER(*ZERO);
PARAMETER(LCL.Deadline_Departure_Date);
PARAMETER(LCL.Deadline_Departure_Time);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 QUIT;

 //?USER: Process Data record

 EXECUTE FUNCTION(CHG Deadline Date/Time CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1496963;
 PARAMETER(PAR.Load_ID);
 PARAMETER(DB1.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.Deadline_Depart_DT_HDR);
 PARAMETER(PAR.Deadline_Depart_Time_HDR);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(Upd Deadline Dte/Tme  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1648968;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Deadline_Depart_DT_HDR);
  PARAMETER(DB1.Deadline_Depart_Time_HDR);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Deadline Dte/Tme  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1648969;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

 }

}


//?** Fax load confirmation to Ship Line &/or Transloader, if entered
CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// WRK.USR Exit Program = CND.yes
WRK.USR_Exit_Program = 'Y';

//?** Fax load confirmation to Ship Line &/or Transloader, if entered
// IF *OTHERWISE
IF *OTHERWISE;

//?** Can only fax confirmation if Carrier is assigned to the load
CASE;

// IF RCD.Carrier Code is entered
IF RCD.Carrier_Code <> *BLANK;

//?** wrk.status-Y or N is to control faxing to PowerPro in the
//?** case of a carrier change.
// WRK.Status - Y or N = CND.yes
WRK.Status_Y_or_N = 'Y';

// WRK.Job Name CDE = JOB.*JOB
WRK.Job_Name_CDE = JOB.*JOB;

// Call program PMT Fax Load Confirmtn PV.
CALL PROGRAM(PMT Fax Load Confirmtn PV) ('POICPVR');
PARAMETER(RCD.Load_ID);
PARAMETER(CTL.Company);
PARAMETER(LCL.Transloader_Carrier_Code);
PARAMETER(RCD.Carrier_Code);
PARAMETER(PAR.Shipping_Line);
PARAMETER(LCL.OHE_Carrier_SCAC_Code);
PARAMETER(WRK.Status_Y_or_N);

ENDIF;

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(CRT Order Header Exten CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC1814351;
{
 //?USER: Processing before Data update

 // DB1.Job Time = JOB.*Job time
 DB1.Job_Time = JOB.*Job_time;

 // DB1.Job Date = JOB.*Job date
 DB1.Job_Date = JOB.*Job_date;

 // DB1.Job Name = JOB.*PROGRAM
 DB1.Job_Name = JOB.*PROGRAM;

 // DB1.User Id = JOB.*USER
 DB1.User_Id = JOB.*USER;

 //?USER: Processing if Data record already exists

 //?R15161 DN 07/31/19-Commented Out.
 //?USER: Processing if Data update error

 RETURN;

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG Vessel/Voyage      CH) TYPE(CHGOBJ) FILE(PMAMREP)          AC2014824;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.Shipping_Line);
PARAMETER(LCL.Port_Delv_Terminal);
PARAMETER(LCL.OHE_City);
PARAMETER(LCL.Vessel_Name);
PARAMETER(LCL.Voyage);
PARAMETER(LCL.Booking_Number);
PARAMETER(LCL.Discharge_Port);
PARAMETER(LCL.Sail_Date);
PARAMETER(LCL.OHE_Port_Cut_Date);
PARAMETER(LCL.Arrival_Date);
PARAMETER(LCL.Container_Number);
PARAMETER(LCL.Usr_Date_1);
{
 //?USER: Processing before Data update

 // DB1.Job Time = JOB.*Job time
 DB1.Job_Time = JOB.*Job_time;

 // DB1.Job Date = JOB.*Job date
 DB1.Job_Date = JOB.*Job_date;

 // DB1.Job Name = JOB.*PROGRAM
 DB1.Job_Name = JOB.*PROGRAM;

 // DB1.User Id = JOB.*USER
 DB1.User_Id = JOB.*USER;

}


//?USER: Extra processing after DBF update

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?USER: Process command keys

//?** Print list of New Vessel/Voyage with newly assign orders
CASE;

// IF CTL.*CMD key is *Print List
IF CTL.*CMD_key = '21';

// Call program Zzz Reassgn Shppr Ords PF.
CALL PROGRAM(Zzz Reassgn Shppr Ords PF) ('PNWBPFR');
PARAMETER(CTL.Vessel_Name);
PARAMETER(CTL.Voyage);
PARAMETER(CTL.DATE);
PARAMETER(CTL.Thru_Date_8_0_ATR);

// Send information message - 'Report has been printed.'
MESSAGE(USR2100 *INFO);

ENDIF;

