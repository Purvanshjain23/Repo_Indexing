      *****************  RPG PROGRAM HEADING  ***********************
      *
      * SYSTEM:      HOG PRODUCTION
      * PROGRAM:     HP158
      * TITLE:       MAINTAIN INVENTORY ADJUSTMENTS
      * PROGRAMMER:  LEANNE FEDOR
      * CREATED:     05/10/95
      *
      * FUNCTION: THIS PROGRAM USES A SUBFILE TO MAINTAIN INVENTORY
      *           ADJUSTMENTS FOR A HOG GROUP.
      *
      *           THE PROGRAM WILL CREATE, DELETE AND UPDATE RECORDS
      *
      *           THIS PROGRAM IS CALLED FROM HP440-WORK WITH ACTIVE
      *           HOG GROUPS.
      *
      *           RESTRICTORS:  HOG GROUP
      *           POSITIONERS:  INVENTORY ADJUSTMENT DATE
      *           SELECTORS:    MOVEMENT STATUS
      *                         MOVEMENT NUMBER
      *
      *           IT DOES HAVE F4-PROMPT LOGIC.
      *           IT LOADS THE SUBFILE A PAGE AT A TIME.
      *           IT USES THE STANDARD MESSAGE HANDLING PROGRAM.
      *           IT HAS STANDARD SUBFILE OPTION EDITING.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      * 10/19/95  LEANNE FEDOR
      *           FIXED BUG.  LOGIC WAS WRITING ADJUSTMENT RECORDS FOR
      *           SUBFILE RECORD WHERE AN ENTRY HAD BEEN MADE AND THEN
      *           BLANKED THROUGH. SO, IT WAS POSSIBLE TO GET AN
      *           ADJUSTMENT WITH NOTHING BY A MOVEMENT NUMBER AND
      *           STATUS.
      *
      * 11/01/95  LEANNE FEDOR
      *           RECOMPILE ONLY. NEW FIELD 'GROUP TYPE' ADDED TO
      *           HOG GROUP FILE.
      *
      * 03/19/97  LEANNE FEDOR
      *           ADDED AN UPDATE TIME STAMP TO THE MOVEMENT EVENT FILE.
      *
      * 06/03/97  LEANNE FEDOR
      *           RECOMPILE ONLY. NEW FIELDS 'PURGE FLAG' AND 'DATE OF
      *           FIRST PURGE' ADDED TO HOG GROUP FILE.
      *
      * 04/13/98  LeAnne Fedor
      *           Recompile only. New field 'state' added to farm site file.
      *
      * 10/27/99  LeAnne Fedor
      *           This function was originally called only from W/W Active Hog Groups.
      *           It is now also called from Dispose Open Hog Groups.  When it is
      *           called from Dispose Open Hog Groups, I wanted to display the dispose
      *           date and remaining head in the control record. This display will be
      *           conditioned on whether incoming parms of date and/or head are zero.
      *
      * 11/11/99  LeAnne Fedor
      *           Changed the function key that 'toggles' between revise and create
      *           to be F10 instead of F9. This keeps it consistent with the Daily
      *           Death function which also 'toggles' but now has to have an 'accept'
      *           function key.
      *
      * 06/05/01  LeAnne Fedor
      *           Recompile only. New field 'multisite' added to Farm Site file.
      *
      * 06/26/01  LeAnne Fedor
      *           Recompile only.
      *           Three fields (manager/supervisor/multisite) renamed in Farm Site file.
      *           Manager and supervisor fields removed from Hog Group file.
      *
      * 09/04/01  LeAnne Fedor
      *           Recompile only. New 'square feet' fields added to Farm Site file.
      *
      * 12/04/02  LeAnne Fedor
      *           Removed Production Type and Phase from the Inventory Adjustment file.
      *           Removed corresponding logic in this program.
      *
      * 07/02/09  LeAnne Ramsey
      *           Recompile only. Added new field 'Continuous Flow Flag' to Hog Group file.
      *
      * 10/15/13  LeAnne Ramsey (E2831)
      *           Recompile only. Added field 'MTech Reference'.
      /EJECT
      ****************************************************************
      * FILE SPECIFICAITONS
      ****************************************************************
      *
     FHPD158    CF   E             WORKSTN
     F                                     SFILE(HP158S1:HDRRN1)
     F                                     INFDS(IOFEED)
      *
     FHSP018    IF   E           K DISK
      *    FARM SITE                  (KEY: FSFSCD)
      *
     FHSP034    IF   E           K DISK
      *    HOG GROUP                  (KEY: HGHGCD)
      *
     FHSP053    IF   E           K DISK
      *    MOVEMENT STATUS CODES      (KEY: MSMSCD)
      *
     FHSP058    UF A E           K DISK
      *  MOVEMENT EVENT               (KEY: MEMVSN)
      *
     FHSL069A   IF   E           K DISK
     F                                     RENAME(IAREC:IARECA)
     F                                     INFDS(DBFEED)
      *  INVENTORY ADJUSTMENTS        (KEY: IAHGSN IAIADT)
      *
     FHSL069C   IF   E           K DISK
     F                                     RENAME(IAREC:IARECC)
      *  INVENTORY ADJUSTMENTS        (KEY: IAIADT IAHGSN)
      *
     FHSP069    UF A E           K DISK
      *  INVENTORY ADJUSTMENT         (KEY: IAMVSN)
      *
      /EJECT
      ****************************************************************
      * TABLE AND ARRAY SPECIFICATIONS
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  STANDARD MESSAGE ARRAYS
      *---------------------------------------------------------------
      *
      /EJECT
      ****************************************************************
      * INPUT SPECIFICATIONS
      ****************************************************************
      *
      *---------------------------------------------------------------
      * STANDARD ERROR MESSAGE HANDLING DATA STRUCTURES
      *---------------------------------------------------------------
      *
      * FOR ERROR MESSAGE HANDLING, A PACKED INDEX (E) IS REQUIRED.
      * FOR PROGRAM READABILITY, DEFINE A CORRESPONDING ERROR COUNT
      * FIELD CALLED 'ERROR'. ALSO DEFINE CURSOR LOCATION FIELDS.
      *
     D                 DS                  INZ
     D  ERROR                  1      2P 0
     D  E                      1      2P 0
      *
      * THIS DATA STRUCTURE SUPPLIES THE NAME OF THE MESSAGE FILE TO
      * THE MESSAGE HANDLING CL PROGRAM.  THE FIELD NAME MSGFIL MUST BE
      * CONSTANT. THE VALUE IN QUOTES IS THE NAME OF THE SPECIFIC
      * MESSAGE FILE CONTAINING THE USER DEFINED MESSAGES.
      *
     D                 DS                  INZ
     D  MSGFIL                 1     10    INZ('HSMSGF    ')
      *
      * THE FOLLOWING 3 DATA STRUCTURES ARE USED TO SPEED MESSAGE
      * HANDLING SINCE IT IS FASTER TO CLEAR DATA STRUCTURES THAN
      * ARRAYS.  EACH IS ASSOCIATED WITH A STANDARD MESSAGE ARRAY.
      *
     D MGI             DS           140    INZ
     D  MGID                   1    140
     D                                     DIM(20)                              MSG ID ARRAY
      *
     D MGD             DS          1000    INZ
     D  MGDT                   1   1000
     D                                     DIM(20)                              MSG PARMS
      *
     D MGWK            DS            50    INZ
     D  MGW                    1     50
     D                                     DIM(50)                              MSG WORK PARMS
      *
      *---------------------------------------------------------------
      * STANDARD PROGRAM STATUS DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTPGFR (RECORD FORMAT: PGMDSR)
     D PGMDS         ESDS                  EXTNAME(UTPGFR)
      *
      *---------------------------------------------------------------
      * STANDARD WORKSTATION INFORMATION DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTWSFR (RECORD FORMAT: UTIDFRR)
     D IOFEED        E DS                  EXTNAME(UTWSFR)
      *
      *---------------------------------------------------------------
      * STANDARD DATABASE FILE INFORMATION DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTDBFR (RECORD FORMAT: FDBCKD)
     D DBFEED        E DS                  EXTNAME(UTDBFR)
      *
      *---------------------------------------------------------------
      * STANDARD SUBFILE OPTION CONVERSION
      *---------------------------------------------------------------
     D                 DS
     D  DFOPT                  1      2
     D  WKOPT1                 1      1
     D  WKOPT2                 2      2
      *
      *---------------------------------------------------------------
      *  DATE FORMATS
      *---------------------------------------------------------------
      *
      * DATE IN MMDDYY FORMAT
      *
     D                 DS
     D  WKMDY                  1      6  0
     D  WKMM                   1      2  0
     D  WKDD                   3      4  0
     D  WKYY                   5      6  0
      * DATE IN CCYYMMDD FORMAT
      *
     D                 DS
     D  WKCYMD                 1      8  0
     D  WKCEN                  1      2  0
     D  WKYER                  3      4  0
     D  WKMON                  5      6  0
     D  WKDAY                  7      8  0
      *
      *---------------------------------------------------------------
      *  DATA AREA FOR NEXT MOVEMENT NUMBER
      *---------------------------------------------------------------
      *
     D                 DS
     D  DAMVSN                 1      7  0
      *
      *---------------------------------------------------------------
      *  DEFINITION FOR EXTERNAL DATA AREA 'DAAPER'
      *---------------------------------------------------------------
     D                 DS
     D  DAAPER                 1     24
     D  DACCYY                 1      4
     D  DAPER                  5      6
     D  DABPDT                 7     14  0
     D  DAEPDT                15     22  0
     D  DAPGFL                23     23
     D  DAPPFL                24     24
      *
      *
      *---------------------------------------------------------------
      *  NAMED CONSTANTS
      *---------------------------------------------------------------
      *
     D CREATE          C                   CONST('CREATE')
     D REVISE          C                   CONST('REVISE')
     D DELETE          C                   CONST('DELETE')
     D VIEW            C                   CONST('VIEW  ')
     D SELECT          C                   CONST('SELECT')
     D YES             C                   CONST('Y')
     D NO              C                   CONST('N')
     D SET1            C                   CONST('SET1  ')
     D EDIT1           C                   CONST('EDIT1 ')
     D SCRN1           C                   CONST('SCRN1 ')
     D EXIT            C                   CONST('EXIT  ')
     D UPDATE          C                   CONST('UPDATE')
      *
      *
      * Workfields for date manipulation
      *
     D wkcymdiso       s               D   datfmt(*iso)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   MOVEL     SET1          ROUTNE
      *
     C     *INLR         DOWEQ     *OFF                                         MAIN DO LOOP
      *
     C     ROUTNE        CASEQ     SET1          $SET1
     C     ROUTNE        CASEQ     SCRN1         $SCRN1
     C     ROUTNE        CASEQ     EDIT1         $EDIT1
      *
     C     ROUTNE        CASEQ     EXIT          $EXIT
     C                   ENDCS
     C                   ENDDO                                                  MAIN DO LOOP
      /EJECT
      *----------------------------------------------------------------
      * $SET1 - SUBROUTINE TO SET ENVIRONMENT FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $SET1         BEGSR
      *
      * BRING IN THE DATA AREA THAT CONTAINS THE CURRENT ACCOUNTING
      * PERIOD FOR EDITING AGAINST THE INVENTORY ADJUSTMENT DATE.
      * (BRING THE DATA AREA IN HERE BECAUSE THE EDITS CHECK TO SEE IF
      * THE PERIOD END PROGRAMS ARE CURRENTLY RUNNING.)
      *
     C                   IN        DAAPER
      *
      * VERIFY THAT THE HOG GROUP THAT THE USER SELECTED STILL EXISTS.
      *
     C     C1HGCD        CHAIN     HSP034                             90
     C     *IN90         IFEQ      *ON                                          IF NOT FOUND
     C                   MOVEL     YES           NOTFLG
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00262'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVEA     C1HGCD        MGW(1)
     C                   MOVEA     MGW           MGDT(E)
     C                   ENDIF
     C                   ENDIF                                                  IF NOT FOUND
      *
      *  CLEAR/FILL THE SUBFILE
      *
     C                   EXSR      $CLR1
     C                   EXSR      $FRSH1
      *
      *  SET ROUTINE TO DISPLAY SCREEN
      *
     C                   MOVEL     SCRN1         ROUTNE
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $SCRN1 - SUBROUTINE TO PERFORM OPERATOR I/O FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $SCRN1        BEGSR
      *
      * RESET INDICATORS
     C                   EXSR      $IND
      *
      * WRITE THE ERROR MESSAGES FROM THE ERROR ARRAYS TO THE
      * ERROR MESSAGE SUBFILE
      *
     C                   EXSR      $WRMSG
      *
      *  WRITE SCREEN 1 TO CRT
      *
     C                   WRITE     HP158K1
     C                   WRITE     HP158EC
     C                   EXFMT     HP158C1
      *
      * SET THE 'RESET' FLAG TO NO.  THIS FLAG IS USED TO DETERMINE
      * WHETHER TO REPOSITION THE USER TO A PARTICULAR PLACE IN THE
      * SUBFILE (RESET=YES) OR TO PLACE THE USER AT THE BEGINNNING OF
      * THE SUBFILE (RESET=NO)
      *
     C                   MOVEL     NO            RESET
      *
      * RETRIEVE THE LOWEST SUBFILE RRN ON THE SCREEN FROM THE DSPF
      * FEEDBACK AREA (IDFLOW) AND MOVE IT TO A WORK FIELD.  THIS VALUE
      * WILL BE USED LATER TO CONTROL THE REPOSITIONING OF THE SUBFILE.
      *
     C                   Z-ADD     IDFLOW        WKFLOW
      *
      * CLEAR ALL MESSAGES
      *
     C                   EXSR      $CLMSG
      *
      * GET USER'S ENTRY AND RESET STANDARD RESPONSE
      *
     C                   SELECT
     C     *IN03         WHENEQ    *ON                                          F3-EXIT
     C                   MOVEL     '03'          RTNCD
     C                   MOVEL     EXIT          ROUTNE
      *
     C     *IN04         WHENEQ    *ON                                          F4-PROMPT
     C                   EXSR      $F4S1
      *
      * USER PROMPTED IN CONTROL RECORD SO CHECK TO SEE IF YOU
      * NEED TO REFILL THE SUBFILE TO MATCH HIS NEW SELECTORS.
      *
     C     FLD           IFEQ      'C1MSCD'
     C                   EXSR      $CHKSV
     C                   ELSE
      *
      * USER PROMPTED IN SUBFILE, JUST REDISPLAY SCREEN.
      *
     C                   MOVEL     SCRN1         ROUTNE
     C                   ENDIF
      *
     C     *IN05         WHENEQ    *ON                                          F5-REFRESH
     C     MODE          IFEQ      REVISE
     C                   MOVEL     YES           RESET
     C                   ENDIF
     C                   MOVEL     SET1          ROUTNE
      *
     C     *IN10         WHENEQ    *ON                                          F10-TOGGLE
     C     MODE          IFEQ      CREATE
     C                   MOVEL     REVISE        MODE
     C                   MOVEL     REVISE        DFMODE
     C                   ELSE
     C                   MOVEL     CREATE        MODE
     C                   MOVEL     CREATE        DFMODE
     C                   ENDIF
     C                   MOVEL     SET1          ROUTNE
      *
     C     *IN12         WHENEQ    *ON                                          F12-PREVIOUS
     C                   MOVEL     '12'          RTNCD
     C                   MOVEL     EXIT          ROUTNE
      *
      * REPOSITION THE SUBFILE IF THE USER HAS CHANGED ANY OF THE
      * POSITIONERS OR SELECTORS IN THE CONTROL RECORD.
      *
     C     SVMDY         WHENNE    C1MDY                                        WH CHANGE
     C     SVMVSN        ORNE      C1MVSN
     C     SVMSCD        ORNE      C1MSCD
     C                   EXSR      $CHKSV
     C                   MOVEL     NO            RESET
     C                   MOVEL     SET1          ROUTNE
     C                   Z-ADD     C1MDY         SVMDY
     C                   Z-ADD     C1MVSN        SVMVSN
     C                   MOVEL     C1MSCD        SVMSCD
      *
      * FLIP THE DATE FROM MMDDYY TO CCYYMMDD FOR KEYING PURPOSES
      *
     C                   Z-ADD     0             WKIADT
     C     C1MDY         IFNE      0                                            IF DATE
     C                   Z-ADD     C1MDY         PFRM8
     C                   EXSR      $DATE
     C     PRTRN         IFNE      *BLANK                                       IF INVALID
     C                   ELSE
     C                   Z-ADD     PTO8          WKIADT
     C                   ENDIF                                                  IF INVALID
     C                   ENDIF                                                  IF DATE
      *
     C     *IN25         WHENEQ    *ON                                          F25-ROLLUP
     C                   EXSR      $LOAD1
     C                   MOVEL     SCRN1         ROUTNE
     C                   OTHER
      *
      * USER PRESSED 'ENTER'
      *
     C     MODE          IFEQ      REVISE                                       IF NOTHING
     C     HDRRN1        ANDEQ     0
     C                   MOVEL     SCRN1         ROUTNE
     C                   ELSE
     C                   MOVEL     EDIT1         ROUTNE
     C                   ENDIF                                                  IF NOTHING
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $CHKSV - CHECK TO SEE IF CONTROL RECORD FIELDS ARE CHANGED
      *----------------------------------------------------------------
      *
     C     $CHKSV        BEGSR
      *
     C                   MOVEL     NO            RESET
     C                   MOVEL     SET1          ROUTNE
     C                   Z-ADD     C1MDY         SVMDY
     C                   Z-ADD     C1MVSN        SVMVSN
     C                   MOVEL     C1MSCD        SVMSCD
      *
      * FLIP THE DATE FROM MMDDYY TO CCYYMMDD FOR KEYING PURPOSES
      *
     C                   Z-ADD     0             WKIADT
     C     C1MDY         IFNE      SVMDY                                        IF DIFF DATE
     C     C1MDY         ANDNE     0
     C                   Z-ADD     C1MDY         PFRM8
     C                   EXSR      $DATE
     C     PRTRN         IFNE      *BLANK                                       IF INVALID
     C                   ELSE
     C                   Z-ADD     PTO8          WKIADT
     C                   ENDIF                                                  IF INVALID
     C                   ENDIF                                                  IF DIFF DATE
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $EDIT1 - SUBROUTINE TO EDIT INPUT FIELDS FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $EDIT1        BEGSR
      *
      * CLEAR CALLED PROGRAM FLAG
      *
     C                   MOVEL     NO            CALFLG
      *
      * FIRST, EDIT ALL THE SELECTIONS ENTERED BY THE USER IN THE
      * SUBFILE OPTION FIELD, TO SEE THAT VALID SELECTIONS WERE INPUT
      *
     C     MODE          IFEQ      REVISE
     C                   EXSR      $EDOP1
     C                   ENDIF
      *
      * IF THERE ARE NO ERRORS IN THE SUBFILE OPTION SELECTORS ENTERED
      * BY THE USER, THEN READ THE SELECTED SUBFILE RECORDS AND PROCESS
      *
     C     ERROR         IFEQ      0
     C                   EXSR      $PROC1
     C                   ENDIF
      *
      * SET THE NEXT ROUTINE
      *
     C                   SELECT
     C     ERROR         WHENNE    0
     C                   MOVEL     SCRN1         ROUTNE
      *
     C     MODE          WHENEQ    CREATE
     C                   MOVEL     SET1          ROUTNE
      *
     C     RTNCD         WHENEQ    '12'
     C                   Z-ADD     WKFLOW        HDPAG1
     C                   MOVEL     SCRN1         ROUTNE
      *
     C     RTNCD         WHENEQ    '03'
     C                   MOVEL     EXIT          ROUTNE
      *
     C     CALFLG        WHENEQ    YES
     C                   Z-ADD     WKFLOW        HDPAG1
     C                   MOVEL     SCRN1         ROUTNE
      *
     C     DELFLG        WHENEQ    YES
     C                   MOVEL     NO            DELFLG
     C                   MOVEL     YES           RESET
     C                   MOVEL     SET1          ROUTNE
     C                   OTHER
      *
     C                   MOVEL     YES           RESET
     C                   MOVEL     SET1          ROUTNE
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $CLR1  - SUBROUTINE TO CLEAR THE SUBFILE ON SCREEN 1
      *---------------------------------------------------------------
      *
     C     $CLR1         BEGSR
      *
     C                   Z-ADD     0             SVRRN1
      *
     C                   CLEAR                   HP158S1
     C                   SETON                                        83        SFLCLR
     C                   WRITE     HP158C1
     C                   SETOFF                                       818283
      *                                                    81=SFLDSP
      *                                                    82=SFLEND
      *                                                    83=SFLCLR
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $FRSH1 - SUBROUTINE TO REFRESH/FILL THE SUBFILE FOR SCREEN 1
      *---------------------------------------------------------------
      *
     C     $FRSH1        BEGSR
      *
     C                   EXSR      $IND
      *
      * SET INDICATORS TO CONTROL DSPF DISPLAY
      *
     C     MODE          IFEQ      CREATE
     C                   SETOFF                                       60
     C                   SETON                                        61
     C                   Z-ADD     0             C1MDY
     C                   Z-ADD     0             C1MVSN
     C                   Z-ADD     0             SVMDY
     C                   Z-ADD     0             SVMVSN
     C                   MOVE      *BLANK        SVMSCD
     C                   ELSE
      * REVISE MODE
     C                   SETOFF                                       61
     C                   SETON                                        60
      *
      * POSITION ON GROUP AND INVENTORY ADJUSTMENT DATE
      *
     C     C1MDY         IFEQ      0
     C     WKHGSN        SETLL     HSL069A
     C                   ELSE
     C     K1L069        SETLL     HSL069A
     C                   ENDIF
     C                   ENDIF
      *
      * THE FIELD 'RESET' IS A FLAG FIELD TO INDICATE WHETHER YOU ARE
      * ATTEMPTING TO REPOSITION THE USER CLOSE TO WHERE HE WAS IN THE
      * SUBFILE.
      * THE LOWEST SUBFILE RRN ON THE SCREEN FROM THE DSPF
      * FEEDBACK AREA (IDFLOW) WAS RETRIEVED EARLIER AND PUT IN WKFLOW.
      * ADD TO WKFLOW THE NUMBER OF LINES ON YOUR SUBFILE PAGE OR THE
      * NUMBER LESS 1 TO DETERMINE A SUBFILE RRN TO REPOSITION TO.
      * IF RESET IS 'NO', DON'T REPOSITION THE USER; JUST START OVER
      *
     C     RESET         IFEQ      YES
     C     WKFLOW        ADD       WKRLIN        MAXRRN
     C                   ELSE
     C                   Z-ADD     WKPLIN        MAXRRN
     C                   ENDIF
      *
      * LOAD THE SUBFILE UNTIL YOU HAVE THE REQUIRED NUMBER OF RECORDS
      * BY COMPARING THE HIDDEN RRN IN THE SUBFILE TO DESIRED MAXIMUM.
      * THE MAXIMUM WILL DEPEND ON WHETHER YOU ARE REPOSITIONING THE
      * SUBFILE OR NOT. STOP IF YOU GET TO THE END OF THE SUBFILE.
      *
     C     SVRRN1        DOUGE     MAXRRN
     C     *IN82         OREQ      *ON
     C                   EXSR      $LOAD1
     C                   ENDDO
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $LOAD1- SUBROUTINE TO LOAD THE SUBFILE FOR SCREEN 1
      *---------------------------------------------------------------
      *
     C     $LOAD1        BEGSR
      *
     C                   Z-ADD     SVRRN1        HDRRN1
      *
      * SET THE COUNT OF RECORDS ON THE SUBFILE PAGE TO ZERO.
      * COUNT IS USED TO COUNT THE RECORDS WRITTEN TO THE SUBFILE.
      *
     C                   Z-ADD     0             COUNT
      *
      * FILL THE SUBFILE UNTIL THE END OF THE DATABASE FILE OR YOU
      * HAVE FILLED ALL THE LINES ON THE SUBFILE PAGE
      *
     C                   SETOFF                                       82
     C     *IN82         DOUEQ     *ON                                          DO FILL LOOP
     C     COUNT         ORGE      WKPLIN
      *
      * CLEAR SUBFILE FIELDS
     C                   Z-ADD     0             HDIADT
     C                   Z-ADD     0             DFMDY
     C                   Z-ADD     0             DFIAHD
      *
     C                   EXSR      $IND
      *
     C                   SELECT
     C     MODE          WHENEQ    CREATE                                       WH CREATE
     C                   SETOFF                                       85
     C                   ADD       1             COUNT
     C                   ADD       1             HDRRN1
     C                   WRITE     HP158S1
     C                   SETON                                        81
     C                   Z-ADD     HDRRN1        HDPAG1
      *
      * IF IN REVISE MODE, READ RECORDS FOR THE GROUP
      *
     C     MODE          WHENEQ    REVISE                                       WH REVISE
     C     WKHGSN        READE     HSL069A                                82
     C     *IN82         IFEQ      *OFF                                          IF FOUND
      *
      * ONLY INCLUDE RECORDS THAT MATCH THE USER'S SELECTORS
      *
     C     C1MVSN        IFNE      0                                             IF MOVEMENT
     C     C1MVSN        ANDNE     IAMVSN
     C                   ELSE
      *
     C     C1MSCD        IFNE      *BLANK                                        IF STATUS
     C     C1MSCD        ANDNE     IAMSCD
     C                   ELSE
      *
     C                   Z-ADD     IAIADT        HDIADT
     C                   Z-ADD     IAIAHD        DFIAHD
     C                   MOVEL     IAMSCD        DFMSCD
     C                   Z-ADD     IAMVSN        DFMVSN
      *
      * FLIP INVENTORY ADJUSTMENT DATE TO MMDDYY
      *
     C                   Z-ADD     IAIADT        WKCYMD
     C                   EXSR      $TOMDY
     C                   Z-ADD     WKMDY         DFMDY
      *
      * PROTECT ALL FIELDS IF THIS ADJUSTMENT HAS A MOVEMENT
      * STATUS CODE THAT IS POSTED.
      *
     C     DFMSCD        CHAIN     HSP053                             92
     C     *IN92         IFEQ      *OFF
     C     MSPOFL        ANDEQ     YES
     C                   SETON                                        64
     C                   ELSE
     C                   SETOFF                                       64
     C                   ENDIF
      *
     C                   ADD       1             COUNT
     C                   ADD       1             HDRRN1
     C                   WRITE     HP158S1
     C                   SETON                                        81
     C                   Z-ADD     HDRRN1        HDPAG1
     C                   ENDIF                                                   IF STATUS
     C                   ENDIF                                                   IF MOVEMENT
     C                   ENDIF                                                   IF FOUND
     C                   ENDSL
      *
     C                   ENDDO                                                  DO FILL LOOP
      *
      * IF NO RECORDS WERE WRITTEN TO THE SUBFILE, THEN ISSUE
      * THE STANDARD ERROR MESSAGE OF NO DATA FOUND. ALSO, SET ON
      * THE INDICATOR THAT WILL KEEP THE POSITIONER/SELECTOR FIELDS
      * FROM DISPLAYING.
      *
     C     HDRRN1        IFEQ      0
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09002'     MGID(E)
     C                   ENDIF
     C                   ENDIF
      *
     C                   Z-ADD     HDRRN1        SVRRN1
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $EDOP1 - SUBROUTINE TO READ CHANGED RECORDS IN SUBFILE AND
      *          EDIT FOR VALID SUBFILE OPTIONS ON SCREEN 1
      *---------------------------------------------------------------
      *
     C     $EDOP1        BEGSR
      *
      * READ ALL THE CHANGED SUBFILE RECORDS EDITING FOR VALID SUBFILE
      * OPTIONS
      *
     C     *IN80         DOUEQ     *ON                                          DO READ C
     C                   READC     HP158S1                                80
     C     *IN80         IFEQ      *OFF                                         IF REC READ
      *
      * SETON MODIFIED DATA TAG
      * SET OFF ERROR INDICATOR FOR SUBFILE OPTION
      *
     C                   SETON                                        85
     C                   SETOFF                                       30
      *
      * CONVERT OPTION USER ENTERED TO STANDARD FORMAT. FOR EXAMPLE,
      * A ' 1', '01', AND '1 ' MUST BE STANDARDIZED TO ' 1'.
      *
     C     WKOPT2        IFEQ      *BLANK                                       IF 2 = BLANK
     C                   MOVE      WKOPT1        WKOPT2
     C                   MOVE      *BLANK        WKOPT1
     C                   ENDIF                                                  IF 2 = BLANK
      *
     C     WKOPT1        IFEQ      *ZERO                                        IF 1 IS ZERO
     C                   MOVE      *BLANK        WKOPT1
     C                   ENDIF                                                  IF 1 IS ZERO
      *
      * TEST FOR VALID SUBFILE OPTION ENTRY ON ALL CHANGED RECORDS
      *
     C     DFOPT         IFNE      ' 4'                                         IF INVALID
     C     DFOPT         ANDNE     '  '
     C                   SETON                                        30
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09006'     MGID(E)
     C                   ENDIF
     C                   EXSR      $ERR1
     C                   ENDIF                                                  IF INVALID
      *
     C                   UPDATE    HP158S1
      *
      * SET OFF ERROR INDICATOR FOR SUBFILE OPTION
      *
     C                   SETOFF                                       30
     C                   ENDIF                                                  IF REC READ
     C                   ENDDO                                                  DO READ C
      * RESET MDT
     C                   SETOFF                                       85
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $PROC1 - SUBROUTINE TO READ AND EDIT CHANGED SUBFILE RECORDS
      *          FOR SCREEN 1
      *---------------------------------------------------------------
      *
     C     $PROC1        BEGSR
      *
     C                   MOVEL     '00'          RTNCD
      *
      * READ ALL THE CHANGED SUBFILE RECORDS PROCESSING THE SUBFILE
      * SELECTION
      *
     C                   SETOFF                                       80
     C     *IN80         DOUEQ     *ON                                          DO PROCESS
     C                   READC     HP158S1                                80
     C     *IN80         IFEQ      *OFF                                         IF REC READ
      *
      * SET ON MDT
      * SET OFF ERROR INDICATORS
      *
     C                   SETON                                        85
     C                   EXSR      $SETOF
      *
     C     RTNCD         IFEQ      '00'                                         IF ENTER
     C                   MOVEL     NO            ERRFLG
      *
      * PERFORM EDIT SUBROUTINE
      *
     C                   SELECT
     C     MODE          WHENEQ    CREATE                                       WH CREATE
     C     DFMDY         IFNE      0
     C     DFIAHD        ORNE      0
     C                   EXSR      $EDAL1
     C                   ENDIF
      *
     C     MODE          WHENEQ    REVISE                                       WH REVISE
     C     DFOPT         ANDNE     ' 4'
     C                   EXSR      $EDAL1
     C                   ENDSL
      *
      * IF THERE ARE NO ERRORS AND USER HAS ENTERED DATA,
      * EXECUTE THE SUBROUTINE TO UPDATE/WRITE A RECORD.
      *
     C     ERRFLG        IFEQ      NO
     C                   EXSR      $UPDAT
     C                   ENDIF
      *
      *  IF THERE WERE NO ERRORS, SET THE SFLNXTCHG INDICATOR OFF SO
      *  THAT THE PROGRAM WILL NOT REPROCESS THE SUBFILE RECORD.
      *  REWRITE THE SUBFILE RECORD.
      *
     C     ERRFLG        IFEQ      NO
     C                   SETOFF                                       85
     C                   ENDIF
     C                   ENDIF                                                  IF ENTER
      *
     C                   UPDATE    HP158S1
      *
      * SET OFF THE ERROR INDICATORS
      *
     C                   EXSR      $SETOF
     C                   ENDIF                                                  IF REC READ
     C                   ENDDO                                                  DO PROCESS
      * SET MDT
     C                   SETOFF                                       85
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $UPDAT - UPDATE DATABASE
      *----------------------------------------------------------------
      *
     C     $UPDAT        BEGSR
      *
      *----------------------------------------------------------------
      * CREATING A NEW RECORD:
      *----------------------------------------------------------------
      *   1) SET ON INDICATOR 62 TO PROTECT THE SUBFILE RECORD FIELDS.
      *      THIS IS SO THAT IF SOME SUBFILE RECORDS HAVE ERRORS AND
      *      THE SCREEN IS REDISPLAYED WITH ERROR MESSAGES, THE USER
      *      WILL NOT BE ABLE TO CHANGE THE DATA IN THE RECORDS THAT
      *      WERE SUCCESSFULLY CREATED.
      *
      *   2) ASSIGN A MOVEMENT NUMBER BY RETRIEVING THE LAST NUMBER
      *      FROM THE DATA AREA AND INCREMENTING IT.
      *
      *   3) WRITE THE NEW INVENTORY ADJUSTMENT RECORD
      *
      *   4) CREATE A MOVEMENT EVENT RECORD
      *
     C                   SELECT
     C     MODE          WHENEQ    CREATE                                       WH CREATE
     C     DFMDY         ANDNE     0
     C     DFIAHD        ANDNE     0
     C                   SETON                                        62
     C                   EXSR      $SETUP
      *
     C     *LOCK         IN        DAMVSN                                                       3
     C                   ADD       1             DAMVSN                                     T #
     C                   OUT       DAMVSN
      *
     C                   Z-ADD     DAMVSN        IAMVSN
     C                   Z-ADD     DAMVSN        DFMVSN
     C                   MOVEL     'EN'          DFMSCD
     C                   MOVEL     'EN'          IAMSCD
     C                   WRITE     IAREC
     C                   EXSR      $CRTME
      *
      *----------------------------------------------------------------
      * REVISING A RECORD
      *----------------------------------------------------------------
      *
      * RETRIEVE RECORD AND LOCK BEFORE UPDATE/DELETE
      *
     C     MODE          WHENEQ    REVISE                                       WH REVISE
     C     DFMVSN        CHAIN     HSP069                             94
     C     *IN94         IFEQ      *OFF                                         IF FOUND
      *
      *
      * WHEN DELETING A RECORD:
      *
      *   1) SET ON THE INDICATOR 63 TO PROTECT
      *      THE SUBFILE RECORD FIELDS AND MAKE THEM NONDISPLAY.
      *      THIS IS DONE SO THAT IF SOME SUBFILE RECORDS HAVE ERRORS
      *      AND THE SCREEN IS REDISPLAYED WITH ERROR MESSAGES, THE
      *      USER WILL NOT BE ABLE TO CHANGE A DELETED RECORD.
      *
      *   2) DELETE THE INVENTORY ADJUSTMENT RECORD
      *
      *   3) DELETE THE MOVEMENT EVENT RECORD
      *
     C     DFOPT         IFEQ      ' 4'                                         IF DEL
     C                   MOVEL     YES           DELFLG
     C                   DELETE    IAREC
     C                   SETON                                        63
     C                   EXSR      $DLTME
     C                   MOVE      *BLANK        DFOPT
     C                   Z-ADD     0             HDIADT
     C                   ELSE
      *
      * WHEN CHANGING A RECORD:
      *   1) UPDATE THE INVENTORY ADJUSTMENT RECORD
      *   2) DELETE THE OLD MOVEMENT EVENT RECORD
      *   3) WRITE A NEW MOVEMENT EVENT RECORD
      *
     C                   SETOFF                                       63
     C                   EXSR      $SETUP
     C                   UPDATE    IAREC
     C                   EXSR      $DLTME
     C                   EXSR      $CRTME
     C                   ENDIF                                                  IF DEL
     C                   ENDIF                                                  IF FOUND
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $DLTME - DELETE AN EXISTING MOVEMENT EVENT RECORD
      *----------------------------------------------------------------
      *
     C     $DLTME        BEGSR
      *
     C     DFMVSN        CHAIN     HSP058                             91
     C     *IN91         IFEQ      *OFF
     C                   DELETE    MEREC
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $CRTME - CREATE A MOVEMENT EVENT RECORD
      *----------------------------------------------------------------
      *
     C     $CRTME        BEGSR
      *
      * SET UP UPDATE TIME STAMP
      *
     C                   Z-ADD     WKUDT         MEUPDT
     C                   TIME                    MEUPTM
     C                   MOVEL     SDUSR         MEUSCD
     C                   MOVEL     SDPGM         MEPGM
      *
     C                   Z-ADD     DFMVSN        MEMVSN
     C                   MOVEL     'A'           MEMTCD
     C                   Z-ADD     WKHGSN        MEHGSN
     C                   Z-ADD     HDIADT        MEMEDT
     C                   MOVEL     'O'           MEODFL
     C                   Z-ADD     0             MEHSN
     C                   Z-ADD     0             MECVNO
     C                   Z-ADD     0             MELNNO
      *
     C                   WRITE     MEREC
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $SETUP - SUBROUTINE TO SETUP DATABASE FIELDS FROM SCREEN FIELDS
      *----------------------------------------------------------------
      *
     C     $SETUP        BEGSR
      *
      * MOVE VALUES FROM HIDDEN SUBFILE FIELDS
      *
     C                   Z-ADD     HDIADT        IAIADT
      *
      * MOVE VALUES FROM GROUP FIELDS THAT WERE PASSED INTO THIS
      * PROGRAM WITH THE SELECTED GROUP
      *
     C                   Z-ADD     WKHGSN        IAHGSN
     C                   MOVEL     XXFSBO        IAFSBO
      *
      * MOVE VALUES FROM SCREEN FIELDS
      *
     C                   Z-ADD     C1FSCD        IAFSCD
     C                   Z-ADD     DFIAHD        IAIAHD
      *
      * SET UP DEFAULT VALUES
      *
     C                   Z-ADD     0             IAEPDT
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $SETOF - SUBROUTINE TO SET OFF ERROR INDICATORS FOR SUBFILE
      *----------------------------------------------------------------
      *
     C     $SETOF        BEGSR
      *
     C                   SETOFF                                       303134
     C                   SETOFF                                       6263
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $EDAL1 - SUBROUTINE TO EDIT SUBFILE RECORDS FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $EDAL1        BEGSR
      *
      * VALIDATE THE INVENTORY ADJUSTMENT DATE
      *
     C                   EXSR      $IADT
      *
      * VALIDATE ADJUSTED HEAD
      *
     C     DFIAHD        IFEQ      0
     C                   SETON                                        34
     C                   MOVEL     YES           ERRFLG
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09001'     MGID(E)
     C                   EXSR      $ERR1
     C                   ENDIF
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $IADT - VALIDATE THE INVENTORY ADJUSTMENT DATE
      *---------------------------------------------------------------
      *
     C     $IADT         BEGSR
      *
     C                   Z-ADD     DFMDY         PFRM8
     C                   EXSR      $DATE
     C     PRTRN         IFNE      *BLANK                                       IF INVALID
     C                   SETON                                        31
     C                   MOVEL     YES           ERRFLG
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVE      'HS09004'     MGID(E)
     C                   EXSR      $ERR1
     C                   ENDIF
     C                   ELSE
      *
      * IF THE DATE IS VALID,
      *   CHECK THAT IT IS NOT GREATER THAN TODAY'S DATE
      *   CHECK THAT IT IS NOT IN A CLOSED PERIOD
      *   IF IT IS IN THE CURRENT PERIOD,
      *       CHECK THAT THE PERIOD CLOSE PROGRAMS ARE NOT RUNNING
      *   CHECK THAT PIGS HAD BEEN DELIVERED TO THE GROUP ON OR BEFORE
      *        THE ADJUSTMENT DATE
      *
     C                   SELECT
     C     PTO8          WHENGT    WKUDT                                        WH FUTURE
     C                   SETON                                        31
     C                   MOVEL     YES           ERRFLG
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00426'     MGID(E)
     C                   EXSR      $ERR1
     C                   ENDIF
      *
     C     PTO8          WHENLT    DABPDT                                       WH CLOSED
     C                   SETON                                        31
     C                   MOVEL     YES           ERRFLG
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09007'     MGID(E)
     C                   ENDIF
      *
     C     PTO8          WHENGE    DABPDT                                       WH RUNNING
     C     PTO8          ANDLE     DAEPDT
     C     DAPPFL        ANDNE     *BLANK
     C                   SETON                                        31
     C                   MOVEL     YES           ERRFLG
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09016'     MGID(E)
     C                   ENDIF
     C                   ENDSL
      *
      * IF THERE ARE NO ERRORS SO FAR, CHECK THAT THE GROUP HAD
      * OPENED ON OR BEFORE THE DATE OF THE ADJUSTMENT.
      *
     C     *IN31         IFEQ      *OFF                                         IF GOOD DATE
     C     PTO8          ANDLT     HGOPDT
     C                   SETON                                        31
     C                   MOVEL     YES           ERRFLG
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00683'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVEA     C1HGCD        MGW(1)
      *
      * FLIP THE OPENED DATE
     C                   Z-ADD     HGOPDT        WKCYMD
     C                   EXSR      $TOMDY
     C                   MOVEL     WKMDY         XXMDY
      *
     C                   MOVEA     XXMDY         MGW(8)
     C                   MOVEL     DFMDY         XXMDY
     C                   MOVEA     XXMDY         MGW(14)
     C                   MOVEA     MGW           MGDT(E)
     C                   EXSR      $ERR1
     C                   ENDIF
     C                   ENDIF                                                  IF GOOD DATE
      *
      * IF THERE ARE NO ERRORS ON THE DATE, MOVE IT TO THE
      * HIDDEN SUBFILE FIELD.
      *
     C     *IN31         IFEQ      *OFF                                         IF ALL OK
     C                   Z-ADD     PTO8          HDIADT
      *
      * ONLY ONE ADJUSTMENT RECORD CAN BE ENTERED PER GROUP
      * PER DAY. SO, IF YOU'RE CREATING AND A RECORD ALREADY
      * EXISTS OR YOU'RE REVISING AND THE EXISTING RECORD IS
      * NOT THE ONE YOU'RE CHANGING, THEN ISSUE AN ERROR MESSAGE.
      *
     C     K2L069        CHAIN     HSL069C                            91
     C     *IN91         IFEQ      *OFF                                         IF FOUND
     C     MODE          IFEQ      CREATE                                       IF NOT SAME
     C     DFMVSN        ORNE      IAMVSN
     C                   SETON                                        31
     C                   MOVEL     YES           ERRFLG
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00591'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVE      IAMVSN        XXMVSN
     C                   MOVEA     XXMVSN        MGW(1)
     C                   MOVEA     MGW           MGDT(E)
     C                   EXSR      $ERR1
     C                   ENDIF
     C                   ENDIF                                                  IF NOT SAME
     C                   ENDIF                                                  IF FOUND
     C                   ENDIF                                                  IF ALL OK
      *
     C                   ENDIF                                                  IF INVALID
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $F4S1 - F4 PROMPT ON SCREEN 1
      *---------------------------------------------------------------
      *
     C     $F4S1         BEGSR
      *
      * MOVEMENT STATUS
      *
     C                   SELECT
     C     FLD           WHENEQ    'C1MSCD'
     C                   MOVEL     'A'           XXMTCD
     C                   MOVE      *BLANK        XXMSCD
     C                   MOVE      *BLANK        XXMSDS
     C                   CALL      'HP542'
     C                   PARM                    XXMTCD
     C                   PARM                    XXMSCD
     C                   PARM                    XXMSDS
     C                   SETON                                        56
     C     XXMSCD        IFNE      *BLANK                                       IF SELECTED
     C                   MOVEL     XXMSCD        C1MSCD
     C                   ENDIF                                                  IF SELECTED
     C                   OTHER
      *
      * F4 NOT VALID FOR THIS FIELD SO ISSUE MESSAGE
      *
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09011'     MGID(E)
     C                   ENDIF
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $IND - RESET INDICATORS
      *----------------------------------------------------------------
      *
     C     $IND          BEGSR
      *
      * IF THE GROUP WAS DELETED OUT FROM UNDER THE USER, THEN SET
      * *IN90 BACK ON TO CONTROL AVAILABLE FUNCTION KEYS AND INPUT
      * FIELDS.
      *
     C     NOTFLG        IFEQ      YES                                          IF NOT FOUND
     C                   SETON                                        90
     C                   ENDIF                                                  IF NOT FOUND
      *
      *
      * IF THIS PROGRAM WAS CALLED FROM THE DIPSPOSE HOG GROUP FUNCTION,
      * YOU WILL TYPICALLY HAVE INCOMING PARM VALUES FOR DATE AND OR HEAD.
      * IF YOU HAVE VALUES, SET ON THE INDICATOR TO DISPLAY THESE IN THE
      * CONTROL RECORD.
      *
     C                   if        c1hd <> 0 or c1mdydsdt <> 0
     C                   seton                                        89
     C                   endif                                                  IF NOT FOUND
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $DATE -  MANIPULATE DATES WITH DATE UTILITY
      *----------------------------------------------------------------
      *
     C     $DATE         BEGSR
      *
     C                   Z-ADD     0             PTO8
     C                   MOVEL     'MDY '        PFRFMT
     C                   MOVEL     'CYMD'        PTOFMT
     C                   Z-ADD     0             PDAYS
     C                   MOVE      *BLANK        PCODE
     C                   MOVE      *BLANK        PRTRN
     C                   CALL      'UT80060R'
     C                   PARM                    PFRM8             8 0
     C                   PARM                    PTO8              8 0
     C                   PARM                    PFRFMT            4
     C                   PARM                    PTOFMT            4
     C                   PARM                    PDAYS             4 0
     C                   PARM                    PCODE             1
     C                   PARM                    PRTRN             1
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $TOMDY - FLIP DATE TO MMDDYY
      *----------------------------------------------------------------
      *
     C     $TOMDY        BEGSR
      *
     C                   Z-ADD     WKMON         WKMM
     C                   Z-ADD     WKDAY         WKDD
     C                   Z-ADD     WKYER         WKYY
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $ERR1  - SUBROUTINE TO SET THE SUBFILE TO REDISPLAY AT
      *          THE FIRST SCREEN THAT HAS ERRORS ON SCREEN 1
      *---------------------------------------------------------------
      *
     C     $ERR1         BEGSR
      *
     C     ERROR         IFEQ      1
     C                   Z-ADD     HDRRN1        HDPAG1
     C                   ENDIF
      *
     C                   ENDSR
      *
      *---------------------------------------------------------------
      * $EXIT - SUBROUTINE TO SET ON LR AND END JOB
      *---------------------------------------------------------------
      *
     C     $EXIT         BEGSR
     C                   SETON                                        LR
     C                   ENDSR
      *
      *---------------------------------------------------------------
      * $WRMSG - SUBROUTINE TO WRITE ERROR MESSAGES
      *---------------------------------------------------------------
      *
     C     $WRMSG        BEGSR
      *
     C                   CALL      'UT80045J'                           43
     C                   PARM                    MGID
     C                   PARM                    MGDT
     C                   PARM                    ERROR
     C                   PARM      SDPGM         PGM
     C                   PARM      MSGFIL        MSGFL
      *
      * IF CALL TO UT80045J FAILED, A MESSAGE HARDCODED IN THE DSPF
      * COMMAND KEY RECORD WILL BE SET ON. SO, REDISPLAY SCREEN TO USER
      *
     C     *IN43         IFEQ      *ON
     C                   MOVEL     SET1          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      *
      *----------------------------------------------------------------
      * $CLMSG - SUBROUTINE TO CLEAR MESSAGES
      *----------------------------------------------------------------
      *
     C     $CLMSG        BEGSR
      *
     C                   CALL      'UT80045J'                           43
     C                   PARM      *BLANK        MGI
     C                   PARM      *BLANK        MGD
     C                   PARM      *ZEROS        ERROR
     C                   PARM      SDPGM         PGM
     C                   PARM      MSGFIL        MSGFL
      *
      * IF CALL TO UT80045J FAILED, A MESSAGE HARDCODED IN THE DSPF
      * COMMAND KEY RECORD WILL BE SET ON. SO, REDISPLAY SCREEN TO USER
      *
     C     *IN43         IFEQ      *ON
     C                   MOVEL     SET1          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * *INZSR - INITIALIZATION SUBROUTINE
      *---------------------------------------------------------------
      *
     C     *INZSR        BEGSR
      *
      * INVENTORY ADJUSMTENTS
      *
     C     K1L069        KLIST
     C                   KFLD                    WKHGSN
     C                   KFLD                    WKIADT
      *
     C     K2L069        KLIST
     C                   KFLD                    HDIADT
     C                   KFLD                    WKHGSN
      *
      *
      * PARM LISTS
      *
     C     *ENTRY        PLIST
     C                   PARM                    XXFSBO
     C                   PARM                    C1FSCD
     C                   PARM                    C1HGCD
     C                   PARM                    WKHGSN
     C                   PARM                    C1MDYDSDT
     C                   PARM                    C1HD
     C                   PARM                    RTNCD
      *
      * GLOBAL DEFINES
      *
     C                   MOVE      *BLANK        PGM              10            USED IN MSG
     C                   MOVE      *BLANK        MSGFL            10            USED IN MSG
     C                   MOVE      *BLANK        ROUTNE            6            ROUTINE
     C                   Z-ADD     0             MAXRRN            4 0          REPOSITION
     C                   MOVEL     NO            RESET             1            REPOSITION
     C                   MOVEL     NO            ERRFLG            1
     C                   MOVEL     NO            NOTFLG            1
     C                   MOVEL     NO            CALFLG            1
     C                   MOVEL     NO            DELFLG            1
     C     *LIKE         DEFINE    DFMODE        MODE                           SFL POSITION
     C     *LIKE         DEFINE    IDFLOW        WKFLOW                         SFL POSITION
     C                   MOVEL     '00'          RTNCD             2            RETURN CODE
     C     *LIKE         DEFINE    HDRRN1        SVRRN1                         F4-PROMPT
     C                   Z-ADD     0             COUNT             2 0
      *
      * SAVE FIELDS FOR CONTROLLING REPOSITIONING ON
      * POSITIONERS AND SELECTORS
      *
     C     *LIKE         DEFINE    C1MDY         SVMDY
     C     *LIKE         DEFINE    C1MVSN        SVMVSN
     C     *LIKE         DEFINE    C1MSCD        SVMSCD
      *
      * ALPHA PARM FIELDS USED IN CALLS TO/FROM OTHER PROGRAMS
      *
     C     *LIKE         DEFINE    IAFSBO        XXFSBO
     C     *LIKE         DEFINE    HGHGSN        WKHGSN
     C     *LIKE         DEFINE    C1MSCD        XXMSCD
     C                   MOVE      *BLANK        XXMSDS           20
     C                   MOVE      *BLANK        XXMTCD            1
     C                   MOVE      *BLANK        XXMVSN            7
     C                   MOVE      *BLANK        XXMDY             6
      *
      * WORK FIELDS
     C     *LIKE         DEFINE    IAIADT        WKIADT
      *
      * TO SUPPORT F5-REFRESH, LOGIC REQUIRES THE NUMBER OF LINES ON
      * THE SUBFILE PAGE AND ALSO THE NUMBER OF LINES LESS 1.  BY
      * SETTING THESE VALUES UP AS CONSTANT WORK FIELDS, THE PROCESSING
      * LOGIC CAN BE STANDARDIZED BETWEEN PROGRAMS.
      *
     C                   Z-ADD     9             WKPLIN            2 0          SFLPAG(0009)
     C     WKPLIN        SUB       1             WKRLIN            2 0          SFLPAG - 1
      *
      * DETERMINE THE INITIAL MODE--REVISE IF THERE ARE
      * ADJUSTMENTS FOR THE GROUP; CREATE MODE IF THERE ARE NOT.
      *
     C     WKHGSN        CHAIN     HSL069A                            91
     C     *IN91         IFEQ      *OFF
     C                   MOVEL     REVISE        MODE
     C                   MOVEL     REVISE        DFMODE
     C                   ELSE
     C                   MOVEL     CREATE        MODE
     C                   MOVEL     CREATE        DFMODE
     C                   ENDIF
      *
      * RETRIEVE FARM SITE NAME FOR SCREEN
      *
     C     C1FSCD        CHAIN     HSP018                             91
     C     *IN91         IFEQ      *OFF
     C                   MOVEL     FSFSNM        C1FSNM
     C                   ELSE
     C                   MOVEL     'UNKNOWN'     C1FSNM
     C                   ENDIF
      *
      * THE SYSTEM DATE IS REQUIRED IN CCYYMMDD FORMAT FOR
      * EDITING  SO, FLIP THE DATE.
      *
     C                   Z-ADD     UDATE         PFRM8
     C                   EXSR      $DATE
     C     PRTRN         IFEQ      *BLANK                                       IF VALID
     C                   Z-ADD     PTO8          WKUDT             8 0
     C                   ELSE
     C                   Z-ADD     0             WKUDT
     C                   ENDIF                                                  IF VALID
      *
      * DEFINE THE DATA AREAS THAT CONTAINS THE MOVEMENT
      * NUMBER AND THE CURRENT ACCOUNTING PERIOD.
      *
     C     *DTAARA       DEFINE                  DAMVSN
     C     *DTAARA       DEFINE                  DAAPER
      *
      * THE FOLLOWING STANDARD CODE MUST BE INCLUDED TO MAKE THE
      * STANDARD ERROR MESSAGE HANDLING PROGRAM FUNCTION PROPERLY.
      * THIS CODE SETS AND CLEARS THE PROGRAM MESSAGE QUEUE.
      *
     C                   Z-ADD     20            MAXMSG            2 0
     C                   MOVEL     '*'           MSGPGM                         SET QUEUE
     C                   EXSR      $CLMSG                                       CLEAR MSG
      *
     C                   ENDSR
      /EJECT
