// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNLWDFR
// ?Date: 14.08.2025 Time: 03:45:33
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('I/C');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PGM.*Scan limit = CON.9999999
PGM.*Scan_limit = 9999999;

//?***** Change Log and Comments
DO;

//?** FP1127 LJB 01/08/2009
//?** Add F5 to refresh the screen and display the amount changes.
//?** FP1309 SLM AGE CODE USE ITEM AGE DAYS
ENDDO;

// PGM.*Subfile mode = CND.Truncated
PGM.*Subfile_mode = 1;

//?USER: Initialize subfile control

//?FIRST TIME
CASE;

// IF PAR.First Time Flag EQ WRK.BLANK
IF PAR.First_Time_Flag = WRK.BLANK;

//?05/28/08 PKD Replaced Company Number (Shipping Company) w/
//?             Accounting Company.
// CTL.Warehouse Code = PAR.Warehouse Code
CTL.Warehouse_Code = PAR.Warehouse_Code;

// CTL.Record Status = CND.Active
CTL.Record_Status = 'A';

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

SET CURSOR;

ENDIF;

EXECUTE FUNCTION(Rtv Lot Tracking Flag RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1506123;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.Lot_Tracking_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?-----------------
//?05/28/08 PKD Replaced Company Number (Shipping Company) w/
//?             Accounting Company.
//?-----------------
CASE;

// IF CTL.Warehouse Code is Warehouse Code not Blank
IF CTL.Warehouse_Code <> *BLANK;

// AND PAR.Salesperson Code is not entered
AND PAR.Salesperson_Code = *BLANK;

EXECUTE FUNCTION(Val User Whs Access   IF) TYPE(EXCINTFUN)                      AC1531984;
PARAMETER(JOB.*USER);
PARAMETER(CTL.Warehouse_Code);
PARAMETER('I');
PARAMETER('R');
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.User_Code_Model);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Retrieve User Warehouse Access Type
 CASE;

 // IF PAR.User Code Model is equal to blank
 IF PAR.User_Code_Model = *BLANK;

 EXECUTE FUNCTION(Rtv User Whs Access   RT) TYPE(RTVOBJ) FILE(PDL1REP)           AC1531985;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.UWA_Inventory_Trans);
 PARAMETER(PAR.UWA_Lot_Loc_Trans);
 PARAMETER(PAR.UWA_Shipping_Trans);
 PARAMETER(PAR.UWA_Cross_Applications);
 PARAMETER(PAR.UWA_Unused_Status_1);
 PARAMETER(PAR.UWA_Unused_Status_2);
 PARAMETER(PAR.UWA_Unused_Sts_3);
 PARAMETER(PAR.UWA_Unused_Sts_4);
 PARAMETER(PAR.UWA_Unused_Sts_5);
 PARAMETER(PAR.UWA_Unused_Sts_6);
 PARAMETER(PAR.UWA_Unused_Sts_7);
 PARAMETER(PAR.UWA_Unused_Sts_8);
 PARAMETER(PAR.UWA_Unused_Sts_9);
 PARAMETER(PAR.UWA_Unused_Sts_10);
 PARAMETER(PAR.UWA_Unused_Sts_11);
 PARAMETER(PAR.UWA_Unused_Sts_12);
 PARAMETER(PAR.UWA_Unused_Sts_13);
 PARAMETER(PAR.UWA_Unused_Sts_14);
 PARAMETER(PAR.UWA_Unused_Sts_15);
 PARAMETER(PAR.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Retrieve User Warehouse Access Type
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv User Whs Access   RT) TYPE(RTVOBJ) FILE(PDL1REP)           AC1531985;
 PARAMETER(PAR.User_Code_Model);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.UWA_Inventory_Trans);
 PARAMETER(PAR.UWA_Lot_Loc_Trans);
 PARAMETER(PAR.UWA_Shipping_Trans);
 PARAMETER(PAR.UWA_Cross_Applications);
 PARAMETER(PAR.UWA_Unused_Status_1);
 PARAMETER(PAR.UWA_Unused_Status_2);
 PARAMETER(PAR.UWA_Unused_Sts_3);
 PARAMETER(PAR.UWA_Unused_Sts_4);
 PARAMETER(PAR.UWA_Unused_Sts_5);
 PARAMETER(PAR.UWA_Unused_Sts_6);
 PARAMETER(PAR.UWA_Unused_Sts_7);
 PARAMETER(PAR.UWA_Unused_Sts_8);
 PARAMETER(PAR.UWA_Unused_Sts_9);
 PARAMETER(PAR.UWA_Unused_Sts_10);
 PARAMETER(PAR.UWA_Unused_Sts_11);
 PARAMETER(PAR.UWA_Unused_Sts_12);
 PARAMETER(PAR.UWA_Unused_Sts_13);
 PARAMETER(PAR.UWA_Unused_Sts_14);
 PARAMETER(PAR.UWA_Unused_Sts_15);
 PARAMETER(PAR.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 ENDIF;

 //?Validate Access
 CASE;

 // IF PAR.Record Found USR is Record Not Found
 IF PAR.Record_Found_USR = 'N';

 // Send error message - 'Access Denied to &1 for Warehouse &2.'
 ERROR(USR2776);
 MSGPARM(PAR.User_Profile_Name);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 //?Validate Access
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Inventory Transactions
 CASE;

 // IF PAR.Access Area Needed USR is Inventory Transactions
 IF PAR.Access_Area_Needed_USR = 'I';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Inventory Trans is *Not Update
 IF PAR.UWA_Inventory_Trans = 'N'/'R';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Inventory Trans is None
 IF PAR.UWA_Inventory_Trans = 'N';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?Lot Loc Transactions
 CASE;

 // IF PAR.Access Area Needed USR is Lot Loc Transactions
 IF PAR.Access_Area_Needed_USR = 'L';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Lot Loc Trans is *Not Update
 IF PAR.UWA_Lot_Loc_Trans = 'N'/'R';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Lot Loc Trans is None
 IF PAR.UWA_Lot_Loc_Trans = 'N';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?Shipping Transactions
 CASE;

 // IF PAR.Access Area Needed USR is Shipping Transactions
 IF PAR.Access_Area_Needed_USR = 'S';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Shipping Trans is *Not Update
 IF PAR.UWA_Shipping_Trans = 'N'/'R';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Shipping Trans is None
 IF PAR.UWA_Shipping_Trans = 'N';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?Cross Applications
 CASE;

 // IF PAR.Access Area Needed USR is Cross Applications
 IF PAR.Access_Area_Needed_USR = 'C';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Unused Sts is *Not Update
 IF PAR.UWA_Cross_Applications = 'N'/'R';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Unused Sts is None
 IF PAR.UWA_Cross_Applications = 'N';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

}


ENDIF;

//?USER: Initialize subfile record from DBF record

CASE;

// IF RCD.Company Number is St. Joseph
IF RCD.Company_Number = 960;

// LCL.@Calc 10,0 = CON.2
LCL.@Calc_100 = 2;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.@Calc 10,0 = CON.1
LCL.@Calc_100 = 1;

ENDIF;

CASE;

// IF RCD.Warehouse Code is Guymon Fresh
IF RCD.Warehouse_Code = 'GP1';

// LCL.@Numeric 2,0 = CON.8
LCL.@Numeric_20 = 8;

// IF RCD.Warehouse Code is Cloverleaf Freezer
IF RCD.Warehouse_Code = 'CF1';

// LCL.@Numeric 2,0 = CON.17
LCL.@Numeric_20 = 17;

// IF RCD.Warehouse Code is St. Joseph
IF RCD.Warehouse_Code = 'SJ1';

// LCL.@Numeric 2,0 = CON.44
LCL.@Numeric_20 = 44;

// IF RCD.Warehouse Code is St. Joseph Cold Storage
IF RCD.Warehouse_Code = 'SF1';

// LCL.@Numeric 2,0 = CON.46
LCL.@Numeric_20 = 46;

ENDIF;

// Call program Rtv Inv from SQL file UP.
CALL PROGRAM(Rtv Inv from SQL file UP) ('PNLXUPR');
PARAMETER(LCL.@Calc_100);
PARAMETER(LCL.@Numeric_20);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.On_Hand_UOM1_Summary);
PARAMETER(RCD.On_Hand_Weight_Summary);

// RCD.Quantity Inv On-Hand USR = RCD.On Hand U/M1 Summary
RCD.Quantity_Inv_On_Hand_USR = RCD.On_Hand_UOM1_Summary;

// RCD.Weight Inv On-Hand USR = RCD.On Hand Weight Summary
RCD.Weight_Inv_On_Hand_USR = RCD.On_Hand_Weight_Summary;

EXECUTE FUNCTION(Rtv Desc/Primal Group RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1651658;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Item_Description);
PARAMETER(NLL.Item_Type_Code);
PARAMETER(RCD.Primal_Group_Code);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Acct Co,Lot Trck RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802488;
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Lot_Tracking_Flag);
PARAMETER(RCD.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Lot Tracking Totals
CASE;

// IF RCD.Lot Tracking Flag is yes
IF RCD.Lot_Tracking_Flag = 'Y';

// Call program Rtv Loc/Fzn/Avl Qt/Wt XF.
CALL PROGRAM(Rtv Loc/Fzn/Avl Qt/Wt XF) ('PDSRXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(RCD.Quantity_Loc_On_Hand_USR);
PARAMETER(RCD.Quantity_Loc_Trans_USR);
PARAMETER(RCD.Quantity_Loc_Alloc_USR);
PARAMETER(RCD.Quantity_Loc_Avail_USR);
PARAMETER(RCD.Quantity_Loc_Hold_USR);
PARAMETER(WRK.Weight_Open_7_0_USR);
PARAMETER(WRK.Unit_Weight);
PARAMETER(WRK.Item_age_days_usr);
PARAMETER(*ZERO);
PARAMETER(WRK.BLANK);
PARAMETER(*BLANK);

ENDIF;

//?----------------------
//?OMT: Invalid Items
CASE;

// IF RCD.Item Description is equal to blank
IF RCD.Item_Description = *BLANK;

// OR RCD.Primal Group Code is Scale Check
OR RCD.Primal_Group_Code = 'SCALE';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?----------------------
EXECUTE FUNCTION(Sel by WHS Access     IF) TYPE(EXCINTFUN)                      AC1930135;
PARAMETER(PGM.*Record_selected);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 CASE;

 // IF PAR.Salesperson Code is not entered
 IF PAR.Salesperson_Code = *BLANK;

 EXECUTE FUNCTION(Rtv User Whs Access   IF) TYPE(EXCINTFUN)                      AC1535148;
 PARAMETER(JOB.*USER);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER('I');
 PARAMETER('R');
 PARAMETER(LCL.Access_Denied_Y_N);
 {
  //?Execute internal function

  // PAR.Access Denied (Y/N) = CND.no
  PAR.Access_Denied_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Retrieve User Warehouse Access Type
  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(Rtv User Whs Access   RT) TYPE(RTVOBJ) FILE(PDL1REP)           AC1531985;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.UWA_Inventory_Trans);
  PARAMETER(PAR.UWA_Lot_Loc_Trans);
  PARAMETER(PAR.UWA_Shipping_Trans);
  PARAMETER(PAR.UWA_Cross_Applications);
  PARAMETER(PAR.UWA_Unused_Status_1);
  PARAMETER(PAR.UWA_Unused_Status_2);
  PARAMETER(PAR.UWA_Unused_Sts_3);
  PARAMETER(PAR.UWA_Unused_Sts_4);
  PARAMETER(PAR.UWA_Unused_Sts_5);
  PARAMETER(PAR.UWA_Unused_Sts_6);
  PARAMETER(PAR.UWA_Unused_Sts_7);
  PARAMETER(PAR.UWA_Unused_Sts_8);
  PARAMETER(PAR.UWA_Unused_Sts_9);
  PARAMETER(PAR.UWA_Unused_Sts_10);
  PARAMETER(PAR.UWA_Unused_Sts_11);
  PARAMETER(PAR.UWA_Unused_Sts_12);
  PARAMETER(PAR.UWA_Unused_Sts_13);
  PARAMETER(PAR.UWA_Unused_Sts_14);
  PARAMETER(PAR.UWA_Unused_Sts_15);
  PARAMETER(PAR.Record_Found_USR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PAR.Record Found USR = CND.Record Not Found
   PAR.Record_Found_USR = 'N';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PAR.Record Found USR = CND.Record Found
   PAR.Record_Found_USR = 'Y';

  }

  //?Retrieve User Warehouse Access Type
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv User Whs Access   RT) TYPE(RTVOBJ) FILE(PDL1REP)           AC1531985;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.UWA_Inventory_Trans);
  PARAMETER(PAR.UWA_Lot_Loc_Trans);
  PARAMETER(PAR.UWA_Shipping_Trans);
  PARAMETER(PAR.UWA_Cross_Applications);
  PARAMETER(PAR.UWA_Unused_Status_1);
  PARAMETER(PAR.UWA_Unused_Status_2);
  PARAMETER(PAR.UWA_Unused_Sts_3);
  PARAMETER(PAR.UWA_Unused_Sts_4);
  PARAMETER(PAR.UWA_Unused_Sts_5);
  PARAMETER(PAR.UWA_Unused_Sts_6);
  PARAMETER(PAR.UWA_Unused_Sts_7);
  PARAMETER(PAR.UWA_Unused_Sts_8);
  PARAMETER(PAR.UWA_Unused_Sts_9);
  PARAMETER(PAR.UWA_Unused_Sts_10);
  PARAMETER(PAR.UWA_Unused_Sts_11);
  PARAMETER(PAR.UWA_Unused_Sts_12);
  PARAMETER(PAR.UWA_Unused_Sts_13);
  PARAMETER(PAR.UWA_Unused_Sts_14);
  PARAMETER(PAR.UWA_Unused_Sts_15);
  PARAMETER(PAR.Record_Found_USR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PAR.Record Found USR = CND.Record Not Found
   PAR.Record_Found_USR = 'N';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PAR.Record Found USR = CND.Record Found
   PAR.Record_Found_USR = 'Y';

  }

  ENDIF;

  //?Validate Access
  CASE;

  // IF PAR.Record Found USR is Record Not Found
  IF PAR.Record_Found_USR = 'N';

  // PAR.Access Denied (Y/N) = CND.yes
  PAR.Access_Denied_Y_N = 'Y';

  //?Validate Access
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Inventory Transactions
  CASE;

  // IF PAR.Access Area Needed USR is Inventory Transactions
  IF PAR.Access_Area_Needed_USR = 'I';

  CASE;

  // IF PAR.Access Needed USR is Update
  IF PAR.Access_Needed_USR = 'U';

  CASE;

  // IF PAR.UWA Inventory Trans is *Not Update
  IF PAR.UWA_Inventory_Trans = 'N'/'R';

  // PAR.Access Denied (Y/N) = CND.yes
  PAR.Access_Denied_Y_N = 'Y';

  ENDIF;

  // IF PAR.Access Needed USR is Read
  IF PAR.Access_Needed_USR = 'R';

  CASE;

  // IF PAR.UWA Inventory Trans is None
  IF PAR.UWA_Inventory_Trans = 'N';

  // PAR.Access Denied (Y/N) = CND.yes
  PAR.Access_Denied_Y_N = 'Y';

  ENDIF;

  ENDIF;

  ENDIF;

  //?Lot Loc Transactions
  CASE;

  // IF PAR.Access Area Needed USR is Lot Loc Transactions
  IF PAR.Access_Area_Needed_USR = 'L';

  CASE;

  // IF PAR.Access Needed USR is Update
  IF PAR.Access_Needed_USR = 'U';

  CASE;

  // IF PAR.UWA Lot Loc Trans is *Not Update
  IF PAR.UWA_Lot_Loc_Trans = 'N'/'R';

  // PAR.Access Denied (Y/N) = CND.yes
  PAR.Access_Denied_Y_N = 'Y';

  ENDIF;

  // IF PAR.Access Needed USR is Read
  IF PAR.Access_Needed_USR = 'R';

  CASE;

  // IF PAR.UWA Lot Loc Trans is None
  IF PAR.UWA_Lot_Loc_Trans = 'N';

  // PAR.Access Denied (Y/N) = CND.yes
  PAR.Access_Denied_Y_N = 'Y';

  ENDIF;

  ENDIF;

  ENDIF;

  //?Shipping Transactions
  CASE;

  // IF PAR.Access Area Needed USR is Shipping Transactions
  IF PAR.Access_Area_Needed_USR = 'S';

  CASE;

  // IF PAR.Access Needed USR is Update
  IF PAR.Access_Needed_USR = 'U';

  CASE;

  // IF PAR.UWA Shipping Trans is *Not Update
  IF PAR.UWA_Shipping_Trans = 'N'/'R';

  // PAR.Access Denied (Y/N) = CND.yes
  PAR.Access_Denied_Y_N = 'Y';

  ENDIF;

  // IF PAR.Access Needed USR is Read
  IF PAR.Access_Needed_USR = 'R';

  CASE;

  // IF PAR.UWA Shipping Trans is None
  IF PAR.UWA_Shipping_Trans = 'N';

  // PAR.Access Denied (Y/N) = CND.yes
  PAR.Access_Denied_Y_N = 'Y';

  ENDIF;

  ENDIF;

  ENDIF;

  //?Cross Applications
  CASE;

  // IF PAR.Access Area Needed USR is Cross Applications
  IF PAR.Access_Area_Needed_USR = 'C';

  CASE;

  // IF PAR.Access Needed USR is Update
  IF PAR.Access_Needed_USR = 'U';

  CASE;

  // IF PAR.UWA Cross Applications is *Not Update
  IF PAR.UWA_Cross_Applications = 'N'/'R';

  // PAR.Access Denied (Y/N) = CND.yes
  PAR.Access_Denied_Y_N = 'Y';

  ENDIF;

  // IF PAR.Access Needed USR is Read
  IF PAR.Access_Needed_USR = 'R';

  CASE;

  // IF PAR.UWA Cross Applications is None
  IF PAR.UWA_Cross_Applications = 'N';

  // PAR.Access Denied (Y/N) = CND.yes
  PAR.Access_Denied_Y_N = 'Y';

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

 }

 CASE;

 // IF LCL.Access Denied (Y/N) is yes
 IF LCL.Access_Denied_Y_N = 'Y';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

}


//?Selected control Warehouse Code
CASE;

// IF CTL.Warehouse Code is Warehouse Code not Blank
IF CTL.Warehouse_Code <> *BLANK;

// AND CTL.Warehouse Code NE DB1.Warehouse Code
AND CTL.Warehouse_Code <> DB1.Warehouse_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?F5=Refresh screen         FP1127
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F21=Print Freezer Inventory Reports
CASE;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

// Call program Prt Lot/Loc Avail Inv  PV.
CALL PROGRAM(Prt Lot/Loc Avail Inv  PV) ('PDPVPVR');
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(CTL.Warehouse_Code);

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?Display Item Detail
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

// LCL.*Initial call = CND.*YES
LCL.*Initial_call = 'Y';

CASE;

// IF RCD.Lot Tracking Flag is yes
IF RCD.Lot_Tracking_Flag = 'Y';

// Call program Dsp Item Lot Locs     DF.
CALL PROGRAM(Dsp Item Lot Locs     DF) ('PDH2DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(*ZERO);
PARAMETER(LCL.*Initial_call);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Desc,U/Ms,CWT,PrcM RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1315777;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(WRK.Description_Line_One);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(WRK.UOM_Primary);
PARAMETER(WRK.Conversion_Factor_1);
PARAMETER(WRK.Operation_Factor_1);
PARAMETER(WRK.UOM_Second);
PARAMETER(WRK.Conversion_Factor_2);
PARAMETER(WRK.Operation_Factor_2);
PARAMETER(WRK.UOM_Third);
PARAMETER(WRK.UOM_Pricing);
PARAMETER(WRK.Unit_Weight);
PARAMETER(WRK.Production_Date_Control);
PARAMETER(WRK.Catch_Weight_Status);
PARAMETER(WRK.Default_Commod_Mark_basis);
PARAMETER(WRK.Price_Method_Default);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Dsp Item/Whse Inqy Dtl DF.
CALL PROGRAM(Dsp Item/Whse Inqy Dtl DF) ('ICQ9DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(WRK.Description_Line_One);
PARAMETER(WRK.UOM_Primary);
PARAMETER(WRK.Conversion_Factor_1);
PARAMETER(WRK.Operation_Factor_1);
PARAMETER(WRK.UOM_Second);
PARAMETER(WRK.Conversion_Factor_2);
PARAMETER(WRK.Operation_Factor_2);
PARAMETER(WRK.UOM_Third);
PARAMETER(WRK.Unit_Weight);
PARAMETER(WRK.Production_Date_Control);
PARAMETER(WRK.Catch_Weight_Status);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(PAR.Warehouse_Description);
PARAMETER(PAR.Name);
PARAMETER(LCL.*Initial_call);

ENDIF;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Display Item Transaction Detail
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(RCD.Warehouse_Code);
PARAMETER(PAR.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


// Call program Dsp Transaction Dtl    DF.
CALL PROGRAM(Dsp Transaction Dtl    DF) ('ICR6DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Item_Description);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(PAR.Warehouse_Description);
PARAMETER(PAR.Name);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

