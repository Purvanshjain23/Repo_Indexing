     h option(*SRCSTMT:*NODEBUGIO)
      *
      * ENVIRONMENT: Pork Division
      * SYSTEM:      Resource Optimization
      * PROGRAM:     RO219
      * TITLE:       Calculate Item Weekly BOM Yield Overrides
      * PROGRAMMER:  Alice Brownfield
      * CREATED:     03/08/07
      *
      * FUNCTION:    This program processes the Meat Cost Item Processing file
      *              to calculate a WEEKLY Yield % for the Ham items.
      *
      *              The data that this program creates is used as an
      *              Override to the Item BOM yield data when calculating the
      *              Item's Meat Costs.
      *
      *              This program runs as part of the Meat Cost calculations.
      *
      ********************************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 10/31/07  Alice Brownfield
      *           Complete re-write based on new requirements.
      *
      * 11/05/07  LeAnne Ramsey
      *           Logic changes for ROP106-Ham Group Matrix Summary:
      *              Write a record for the Item (when it is itself)
      *              Populate new Component Item Code field
      *              Removed Sales Yield % from file
      *              Removed Pounds fields from file
      *              Changed field names/text on MSCGCD and MSCGSYPC to contain
      *                "Component Item"
      *
      * 11/28/07  Alice Brownfield
      *           Changes when we combined the Credit Item Meat Costs with the
      *           Byproduct MIX processing/files.
      *
      * 06/06/08  LeAnne Ramsey
      *           Recompile only.
      *           New fields (Ingredient and Other Cost) added to multiple files.
      *
      * 10/01/08  LeAnne Ramsey
      *           Damon Ginther wants to start using TRIM (67010) as the "catchall"
      *           instead of FAT (94109).
      *
      * 11/20/08  LeAnne Ramsey
      *           As a prep for synchronizing the TFS and Meat Cost LDAs, we
      *           removed the unused LDA fields.
      *
      * 11/21/08  LeAnne Ramsey
      *           As part of synchronizing the LDAs between the TFS Margin Adjustment Close
      *           and the Meat Costing, we changed the LDA positions.
      *
      * 12/31/08  LeAnne Ramsey
      *           Added 'Meat Cost Subgroup' to the klist on KEY03 which retrieves data
      *           from ROP101-ByProduct Values Summary.
      *
      * 04/02/09  LeAnne Ramsey
      *           Recompile only. Field 'Producing Company' added to Byproduct Detail.
      *
      * 11/09/11  LeAnne Ramsey  (E1804)
      *           Damon Ginther wants to start using SPECIAL TRIM (61410) as the "catchall"
      *           instead of SPECIAL HAM TRIM (67010). So, changed the hardcoding.
      *           ALSO, replaced the hardcoding of T72B with T72A in $wrt107.
      *
      * 05/08/12  LeAnne Ramsey  (E2096)
      *           Damon Ginther wants to start using REGULAR TRIM (61210) as the "catchall"
      *           instead of SPECIAL TRIM (61410). So, changed the hardcoding.
      *           ALSO, replaced the hardcoding of T72A with TRGA in $wrt107.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATION
      ****************************************************************
      *
     frop300    if   e           k disk
      *  Item Processing Sequence
      *
      *
     frol122a   if   e           k disk
      *  ByProduct Detail
      *
      *
     frol101a   if   e           k disk
      *  Byproduct Values Summary
      *
      *
     fpdiorel4  if   e           k disk
      *  Item BOM file
      *  (selects 'A'ctive & 'P'roduced records only)
      *
      *
     frop106    o    e           k disk
      *  Ham Group Matrix Summary
      *
      *
     frop107    o    e           k disk
      *  BOM Yield Overrides
      /eject
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Control fields
      *
     D write107        s              1    inz('Y')
     D rollup          s              1    inz('N')
      *
      *
      * Workfields
      *
     D wksypc          s                   like(gmsypc)
     D svsypc          s                   like(gmsypc)
     D svcgcd          s                   like(gmcgcd)
      *
      *
      * Accumulators
      *
     d totsypc         s                   like(gmsypc)
     d totsypcall      s                   like(gmsypc)
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *---------------------------------------------------------------
      * Local data area
      *---------------------------------------------------------------
      *
     Dlda             uds                  dtaara(*lda)
     D  ldwedt                29     36  0
      *
     D  ldcono                82     84  0
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      **********************************************************************************
      * Mainline
      **********************************************************************************
      *
      * Process all records in Workfile: Item Processing Sequence.
      * The Open Query selects only the Company/Week that we want and
      * only Primal Groups of HAMC.
      *
     C                   dou       *in90 = *on                                  Main do
     C                   read      rop300                                 90
     C                   if        *in90 = *off                                 If not EOF
      *
      * Retrieve the basic info about this item
      *
     C                   exsr      $item
      *
      * Process this item's BOM and write the BOM override records
      *
     C                   exsr      $wrt107
      *
      * Write a Yield record where the Component Item is equal to the Item.
      *
     C                   exsr      $wrt107item
      *
      * Write a Yield record for the TRIM Component Item.
      *
     C                   exsr      $wrt107trim
      *
     C                   endif                                                  If not EOF
     C                   enddo                                                  Main do
      *
      * EOF processing
      *
     C                   seton                                        lr
      /eject
      *-----------------------------------------------------------------------------------
      * Retrieve the basic info about the item you are processing
      *-----------------------------------------------------------------------------------
      *
     C     $item         begsr
      *
     C                   z-add     0             totsypc
     C                   z-add     0             totsypcall
      *
      * Determine if this item is in a Meat Cost Group and save its Group Code.
      *
     C     key04         chain     rol122a                            92
     C                   if        *in92 = *off
     c                   move      ydcgcd        svcgcd
     C                   else
     c                   move      *blank        svcgcd
     C                   endif
      *
      * If this item is in any of the Groups below, we want to set the flag to
      * trigger a "rollup" of the Yield %. (For a "rollup", we will sum the
      * average Yield %'s of these groups into the item's total Yield %
      * instead of using them separately.)
      *
     C                   if        svcgcd = 'INSD' or svcgcd = 'OUSD' or
     C                             svcgcd = 'KNCK' or svcgcd = 'LTBT' or
     C                             svcgcd = 'HCOM'
     c                   move      yes           rollup
     C                   else
     c                   move      no            rollup
     C                   endif
      *
     C                   endsr
      /eject
      *-----------------------------------------------------------------------------------
      * Process the items BOM and write the BOM Override records
      *-----------------------------------------------------------------------------------
      *
     C     $wrt107       begsr
      *
     C                   move      *blank        gmcgcd
     C                   z-add     0             wksypc
     C                   z-add     0             svsypc
      *
      * Process the BOM for this Item and write a record to the BOM Yield Override
      * file for each 'P'roduced record where:
      *   1.  Sales Yield % not = 0
      *   2.  Item NOT = Component Item
      *   3.  the rollup flag = YES
      *
     C     key01         setll     pdiorel4
      *
     C                   dou       *in91 = *on                                  Do loop
     C     key01         reade     pdiorel4                               91
     C                   if        *in91 = *off and iobopr <> 0                 If not EOF
      *
      * Save the Yield % of the record where the Item Code equals the
      * Component Item Code.
      *
     C                   if        ioc9nb = iohgcd                              If itself
     c                   z-add     iobopr        svsypc
     c                   exsr      $wrt106
     C                   else
      *
     C                   move      yes           write107
      *
      * Populate fields
      *
      * Make 2 retrievals to get the Yield % for this Meat Cost Group
      * 1) Retrieve the Meat Cost Group for this Component Item Code from the
      *    ByProduct Detail file
      * 2) Then use the retrieved Meat Cost Group Code to retrieve a
      *     Sales Yield Percent from the ByProduct Values Summary file
      *
     C     key02         chain     rol122a                            92
     C                   if        *in92 = *off
     C     key03         chain     rol101a                            92
     C                   if        *in92 = *off
     c                   z-add     gmsypc        wksypc
     C                   endif
     C                   endif
      *
      * Determine which Yield % to use based on the following rules:
      *   1. if WKSYPC from the CI Meat Cost Group record is 0 = use BOM Sales Yield %
      *   2. if Meat Cost Group = TRGA never write the record here - it is handled
      *             in $wtr107trim
      *   3. "INSH" and "OUSH", use the BOM Sales Yield %
      *             Prior to WEDT 20091219 we used the ByProduct Values Summary %
      *                                                z-add     wksypc        bosypc
      *   4. "INSD", OUSD, KNCK, LTBT =
      *      the rollup flag = YES we just accumulate the yield for later processing
      *                          and we write a record to ROP106 as the backup for our total
      *                      = NO we write the record with the average yield
      *   5. "HCOM"
      *      the rollup flag = YES we just accumulate the yield for later processing
      *                          and we write a record to ROP106 as the backup for our total
      *                      = NO we write the record with the average yield
      *   6. All others use the BOM Sales Yield %
      *
     c                   select
      * 1.
     c                   when      wksypc = 0
     C                   z-add     iobopr        bosypc
      * 2.
     c                   when      gmcgcd = 'TRGA'
     C                   move      no            write107
      * 3.
     C                   when      gmcgcd = 'INSH' or gmcgcd = 'OUSH'
     C                   z-add     iobopr        bosypc
      * 4.
     C                   when      gmcgcd = 'INSD' or gmcgcd = 'OUSD' or
     C                             gmcgcd = 'KNCK' or  gmcgcd = 'LTBT'
     C                   if        rollup = yes
     C                   move      no            write107
     c                   add       wksypc        totsypc
     c                   exsr      $wrt106
     C                   else
     c                   z-add     wksypc        bosypc
     C                   endif
      * 5.
     C                   when      gmcgcd = 'HCOM'
     C                   if        rollup = yes
     C                   move      no            write107
     c                   add       iobopr        totsypc
     c                   z-add     iobopr        wksypc
     c                   exsr      $wrt106
     C                   else
     c                   z-add     iobopr        bosypc
     C                   endif
      * 6.
     c                   other
     C                   z-add     iobopr        bosypc
     C                   endsl
      *
      * Accumulate total % to be used later
      * Write record
     c                   if        write107 = yes
     C                   z-add     ldcono        bocono
     C                   z-add     ldwedt        bowedt
     C                   z-add     w1itcd        boitcd
     c                   z-add     ioc9nb        bociitcd
      *
     C                   add       bosypc        totsypcall
     C                   write     borec
     C                   clear                   borec
     C                   endif
      *
     C                   endif                                                  If itself
      *
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do loop
      *
     C                   endsr
      /eject
      *-----------------------------------------------------------------------------------
      * Write a Ham Group Matrix Summary record if none exists already
      *-----------------------------------------------------------------------------------
      *
     C     $wrt106       begsr
      *
     C                   z-add     ldcono        mscono
     C                   z-add     ldwedt        mswedt
     C                   z-add     w1itcd        msitcd
     c                   z-add     ioc9nb        msciitcd
      *
     C                   if        msitcd = msciitcd                            If itself
     C                   z-add     svsypc        mscisypc
     C                   move      svcgcd        mscicgcd
     C                   else
     C                   z-add     wksypc        mscisypc
     C                   move      gmcgcd        mscicgcd
     C                   endif                                                  If itself
      *
     C                   write     msrec
     C                   clear                   msrec
      *
     C                   endsr
      /eject
      *-----------------------------------------------------------------------------------
      * Write a Yield record where Component Item is equal to the Item
      *-----------------------------------------------------------------------------------
      *
     C     $wrt107item   begsr
      *
     C                   z-add     ldcono        bocono
     C                   z-add     ldwedt        bowedt
     C                   z-add     w1itcd        boitcd
     c                   z-add     w1itcd        bociitcd
     C     svsypc        add       totsypc       bosypc
      *
      * If the Yield % is still zero after this, then use the BOM Yield %
      *
     c                   if        bosypc = 0
     C                   z-add     svsypc        bosypc
     C                   endif
      *
     C                   add       bosypc        totsypcall
      *
      * Write summarized record
      *
     C                   write     borec
     C                   clear                   borec
      *
     C                   endsr
      /eject
      *-----------------------------------------------------------------------------------
      * Write a Yield record for the TRIM Component Item
      *-----------------------------------------------------------------------------------
      *
     C     $wrt107trim   begsr
      *
     C                   z-add     ldcono        bocono
     C                   z-add     ldwedt        bowedt
     C                   z-add     w1itcd        boitcd
     c                   z-add     61210         bociitcd
     C     100           sub       totsypcall    bosypc
      *
      * Write summarized record
      *
     C                   write     borec
     C                   clear                   borec
      *
      * Clear accumulators
     C                   z-add     0             totsypc
     C                   z-add     0             totsypcall
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    ldcono
     C                   kfld                    w1itcd
      *
     C     key02         klist
     C                   kfld                    ldwedt
     C                   kfld                    ioc9nb
      *
     C     key03         klist
     C                   kfld                    ldcono
     C                   kfld                    ldwedt
     C                   kfld                    ydcgcd
     C                   kfld                    ydsgcd
      *
     C     key04         klist
     C                   kfld                    ldwedt
     C                   kfld                    w1itcd
      *
     C                   endsr
      /eject
