// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPK2DFR
// ?Date: 14.08.2025 Time: 03:41:18
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PGM.*Scan limit = CND.9999999
PGM.*Scan_limit = 9999999;

//?*** Setup Security & Company Title ***
// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?size of the number of lines in the subfile.
// Execute function SFL Fold/Drop  RPG    US.
EXECUTE FUNCTION(SFL Fold/Drop  RPG    US) TYPE(EXCUSRSRC) ('POBHUFU');
PARAMETER(12);
{
 ) find text=#SFLCTL
 ) insert
 A                                      SFLDROP(CF07)
 A* 07                                  SFLFOLD(CF07)
}


//?*** Do not display purged/posted deposits. ***
// WRK.Display Flag = CND.No
WRK.Display_Flag = 'N';

// WRK.PRT Night Queue Run Sts = CND.no
WRK.PRT_Night_Queue_Run_Sts = 'N';

// LCL.Display Prt Opt Pmt USR = CND.*YES
LCL.Display_Prt_Opt_Pmt_USR = *YES;

// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

//?==>CCMRLS2 ACK 02/17/25 - Disable new claims creation from IBMi
EXECUTE FUNCTION(Rtv Module Release Sts RT) TYPE(RTVOBJ) FILE(PUC6REP)          AC2212908;
PARAMETER('CCM');
PARAMETER(1);
PARAMETER(LCL.Module_Release_Status);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 MOVE *ALL (To: PAR From: DB1);

 ENDIF;

}


//?<==CCMRLS2 ACK 02/17/25 - Disable new claims creation from IBMi
//?CHANGE LOG HISTORY
DO;

//?***** Change Log
//?** 3/31/2008 slm E00104 add changes to the Clm dist
//?** 3/31/2008 slm E00104 add changes claim notes
//?                 user will now have internal notes
//?                 & system generated notes
//?** 3/31/2008 slm E00104 add NEW logic to store claim audit
//?                 records in the claim notes file
//?                 then read these records for action processing
//?                 1st action will be to email if comments are chg
//?   4/21/2008 slm if other functions triger changes to claims
//?                 that are executed from this WW then at the
//?                 end of the subfile record being process we
//?                 see if there are any actions that need to be
//?                 processed
//?                 The other review of these actions are done
//?                 in the claim flow
//?** 4/21/2008 slm Cleanup of selection on the X's was not
//?                 working in omsdevgen nor in production
//?*****
//?** 3/03/2008 LJB E00094
//?** Add Status Flag, set to "Y" if New and to "N" if Existing.
//?** If New, don't email to St. Joe. Pass the flag to all programs
//?** when F8 or F7 to go to next or previous program
//?** Status Flag is added to "Crt A/R Claim Flow XF", as well.
//?*****
//?** 2/22/06 LJB
//?** For 960 only, if existing claim is changed to "Pending" or
//?** if a new claim is set to "Pending", print the claim report
//?** then email it to all on the St. Joseph distribution list
//?*****
//?** 2/23/06 LJB
//?** If Allow Multi-Co is "NO" then only display records that
//?** match the user profile company number.
//?*****
//?8/7/2006 SLM -- Add Expense only claim process.
//?     This is a Claim that will only have expenses and never
//?     a claim product nor a claim resale.
//?*****
//?5/16/07 SLM -- Add option 17 WW Sales Person Claims
//?               Only allow if the user application has SAPCLM
//?** 11/02/2007 FT133 LJB
//?** Add option 18 Reprint Credit Memos and option 19 reprint
//?** Debit Memos.
//?E3387 JJH 09/09/14 - Recompiled due to Shipping Method added to
//? A/R Claim Resale file.
//?P30337 ACK 02/04/25 - Disable editing for claims created from P2P
//?CCMRLS2 ACK 02/17/25 - Disable new claims creation from IBMi
//?*****
ENDDO;

//?USER: Initialize subfile control

CASE;

// IF PAR.Edit/Display Usr is Edit Allowed
IF PAR.Edit_Display_Usr = 'E';

// Retrieve message - '2=Edit  6=Print Claim  7=Edt Claim Product  8=Edt Comment  9=WW Resale  10=WW
CTL.Option_Variable_Text_1 = RTVMSG(USR3538);

// Retrieve message - '14=Approve for Memo  15=Display Claim  16=Compl for Expense Only  17=Appv/Den
CTL.Option_Variable_Text_2 = RTVMSG(USR3539);

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Option Variable Text 1 = CON.6=Prt Claim
CTL.Option_Variable_Text_1 = '6=Prt Claim';

// CTL.Option Variable Text 1 = CONCAT(CTL.Option Variable Text 1,CON.15=Display Claim,CON.2)
CTL.Option_Variable_Text_1 = CTL.Option_Variable_Text_1 + '15=Display Claim' (2);

// CTL.Option Variable Text 2 = CON.*BLANK
CTL.Option_Variable_Text_2 = *BLANK;

ENDIF;

//?If selecting by Claim Status, show all claims.
DO;

CASE;

// IF CTL.Claim Status is Blank
IF CTL.Claim_Status = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Display Flag = CND.Yes
WRK.Display_Flag = 'Y';

ENDIF;

ENDDO;

CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

// CTL.Salesperson to Rvw Claim = PAR.Salesperson Code
CTL.Salesperson_to_Rvw_Claim = PAR.Salesperson_Code;

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

ENDIF;

CASE;

// IF CTL.Salesperson to Rvw Claim is not entered
IF CTL.Salesperson_to_Rvw_Claim = *BLANK;

// CTL.Salesperson Name DRV = CON.*ALL
CTL.Salesperson_Name_DRV = *ALL;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Salesperson Name DRV) TYPE(DRVFLD)                             AC1828552;
PARAMETER(CTL.Salesperson_Name_DRV);
PARAMETER(CTL.Salesperson_to_Rvw_Claim);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Salesperson NmeOnlyRT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1739999;
 PARAMETER(PAR.Salesperson_Code);
 PARAMETER(PAR.Salesperson_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


ENDIF;

//?Save User fields to see if they changed
// LCL.Clm Dta Steps-Clm Usr = CTL.Clm Dta Steps-Clm Usr
LCL.Clm_Dta_Steps_Clm_Usr = CTL.Clm_Dta_Steps_Clm_Usr;

// LCL.Clm Dta Steps-Com Usr = CTL.Clm Dta Steps-Com Usr
LCL.Clm_Dta_Steps_Com_Usr = CTL.Clm_Dta_Steps_Com_Usr;

// LCL.Clm Dta Steps-Int Usr = CTL.Clm Dta Steps-Int Usr
LCL.Clm_Dta_Steps_Int_Usr = CTL.Clm_Dta_Steps_Int_Usr;

// LCL.Clm Dta Steps-Rsl Usr = CTL.Clm Dta Steps-Rsl Usr
LCL.Clm_Dta_Steps_Rsl_Usr = CTL.Clm_Dta_Steps_Rsl_Usr;

// LCL.Clm Dta Steps-Exp Usr = CTL.Clm Dta Steps-Exp Usr
LCL.Clm_Dta_Steps_Exp_Usr = CTL.Clm_Dta_Steps_Exp_Usr;

//?USER: Initialize subfile record from DBF record

//?Display approved/denied records (yes or no)
DO;

CASE;

// IF DB1.Claim Number EQ CTL.Claim Number
IF DB1.Claim_Number = CTL.Claim_Number;

//?*** show claim for entered claim number. ***
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF WRK.Display Flag is No
IF WRK.Display_Flag = 'N';

// AND RCD.Claim Status is Completed
AND ( RCD.Claim_Status = 'C';

// OR RCD.Claim Status is Denied
OR RCD.Claim_Status = 'D';

// OR RCD.Claim Status is Voided
OR RCD.Claim_Status = 'V' );

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDDO;

//?** Only display user profile company if multi-co = No   2/23/06 LJB
CASE;

// IF PAR.Allow Multi-Company is no
IF PAR.Allow_Multi_Company = 'N';

// AND DB1.Claim Company Number NE PAR.Company Number
AND DB1.Claim_Company_Number <> PAR.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// RCD.Clm Dta Steps-Clm Usr = CVTVAR(CND.No Data Exists)
RCD.Clm_Dta_Steps_Clm_Usr = CVTVAR(*BLANK);

// RCD.Clm Dta Steps-Com Usr = CVTVAR(CND.Does not have any)
RCD.Clm_Dta_Steps_Com_Usr = CVTVAR(*BLANK);

// RCD.Clm Dta Steps-Int Usr = CVTVAR(CND.Does not have any)
RCD.Clm_Dta_Steps_Int_Usr = CVTVAR(*BLANK);

// RCD.Clm Dta Steps-Rsl Usr = CVTVAR(CND.No Data Exists)
RCD.Clm_Dta_Steps_Rsl_Usr = CVTVAR(*BLANK);

// RCD.Clm Dta Steps-Exp Usr = CVTVAR(CND.No Data Exists)
RCD.Clm_Dta_Steps_Exp_Usr = CVTVAR(*BLANK);

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?CLM, CMT, RESALE, EXPENSES
DO;

EXECUTE FUNCTION(Vry Clm Product        RT) TYPE(RTVOBJ) FILE(PDMOCPP)          AC1725521;
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(RCD.Clm_Dta_Steps_Clm_Usr);
{
 //?USER: Processing if Data record not found

 // PAR.Clm Dta Steps-Clm Usr = CND.No Data Exists
 PAR.Clm_Dta_Steps_Clm_Usr = *BLANK;

 //?USER: Process Data record

 // PAR.Clm Dta Steps-Clm Usr = CVTVAR(CND.There is Data)
 PAR.Clm_Dta_Steps_Clm_Usr = CVTVAR('X');

 QUIT;

}


//?verify the clm product
CASE;

// IF CTL.Clm Dta Steps-Clm Usr is There is Data
IF CTL.Clm_Dta_Steps_Clm_Usr = 'X';

//?Verify there is a Claim Product
CASE;

// IF RCD.Clm Dta Steps-Clm Usr EQ CTL.Clm Dta Steps-Clm Usr
IF RCD.Clm_Dta_Steps_Clm_Usr = CTL.Clm_Dta_Steps_Clm_Usr;

//?Verify there is a Claim Product
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(Vry Clm ExplanAtLeast1 RT) TYPE(RTVOBJ) FILE(PDMNCPP)          AC1877817;
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Clm_Dta_Steps_Com_Usr);
{
 //?USER: Processing if Data record not found

 // PAR.Clm Dta Steps-Cmt Usr = CND.No Data Exists
 PAR.Clm_Dta_Steps_Com_Usr = *BLANK;

 //?USER: Process Data record

 // PAR.Clm Dta Steps-Com Usr = CVTVAR(CND.Data Found)
 PAR.Clm_Dta_Steps_Com_Usr = CVTVAR('X');

 QUIT;

}


//?verify the comments
CASE;

// IF CTL.Clm Dta Steps-Com Usr is Data Found
IF CTL.Clm_Dta_Steps_Com_Usr = 'X';

CASE;

// IF RCD.Clm Dta Steps-Com Usr EQ CTL.Clm Dta Steps-Com Usr
IF RCD.Clm_Dta_Steps_Com_Usr = CTL.Clm_Dta_Steps_Com_Usr;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(Vry Clm ExpIntAtLeast1 RT) TYPE(RTVOBJ) FILE(PDMNCPP)          AC1879408;
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Clm_Dta_Steps_Int_Usr);
{
 //?USER: Processing if Data record not found

 // PAR.Clm Dta Steps-Cmt Usr = CND.No Data Exists
 PAR.Clm_Dta_Steps_Com_Usr = *BLANK;

 //?USER: Process Data record

 // PAR.Clm Dta Steps-Com Usr = CVTVAR(CND.Data Found)
 PAR.Clm_Dta_Steps_Com_Usr = CVTVAR('X');

 QUIT;

}


//?verify the comments
CASE;

// IF CTL.Clm Dta Steps-Int Usr is Data Found
IF CTL.Clm_Dta_Steps_Int_Usr = 'X';

CASE;

// IF RCD.Clm Dta Steps-Int Usr EQ CTL.Clm Dta Steps-Int Usr
IF RCD.Clm_Dta_Steps_Int_Usr = CTL.Clm_Dta_Steps_Int_Usr;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(Vry Clm Resale         RT) TYPE(RTVOBJ) FILE(PPA3CPP)          AC1724237;
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Clm_Dta_Steps_Rsl_Usr);
{
 //?USER: Processing if Data record not found

 // PAR.Clm Dta Steps-Rsl Usr = CND.No Data Exists
 PAR.Clm_Dta_Steps_Rsl_Usr = *BLANK;

 //?USER: Process Data record

 // PAR.Clm Dta Steps-Rsl Usr = CVTVAR(CND.There is Data)
 PAR.Clm_Dta_Steps_Rsl_Usr = CVTVAR('X');

 QUIT;

}


//?verify the resale
CASE;

// IF CTL.Clm Dta Steps-Rsl Usr is There is Data
IF CTL.Clm_Dta_Steps_Rsl_Usr = 'X';

CASE;

// IF RCD.Clm Dta Steps-Rsl Usr EQ CTL.Clm Dta Steps-Rsl Usr
IF RCD.Clm_Dta_Steps_Rsl_Usr = CTL.Clm_Dta_Steps_Rsl_Usr;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(Vry Clm Expense       RT) TYPE(RTVOBJ) FILE(PPA1CPP)           AC1724244;
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Clm_Dta_Steps_Exp_Usr);
{
 //?USER: Processing if Data record not found

 // PAR.Clm Dta Steps-Exp Usr = CND.No Data Exists
 PAR.Clm_Dta_Steps_Exp_Usr = *BLANK;

 //?USER: Process Data record

 // PAR.Clm Dta Steps-Exp Usr = CVTVAR(CND.There is Data)
 PAR.Clm_Dta_Steps_Exp_Usr = CVTVAR('X');

 QUIT;

}


//?verify the exp
CASE;

// IF CTL.Clm Dta Steps-Exp Usr is There is Data
IF CTL.Clm_Dta_Steps_Exp_Usr = 'X';

CASE;

// IF RCD.Clm Dta Steps-Exp Usr EQ CTL.Clm Dta Steps-Exp Usr
IF RCD.Clm_Dta_Steps_Exp_Usr = CTL.Clm_Dta_Steps_Exp_Usr;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDDO;

ENDIF;

EXECUTE FUNCTION(Chk DEV Priced Ord    RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1681538;
PARAMETER(PAR.Company_Number);
PARAMETER(RCD.Claim_Order_Number);
PARAMETER(RCD.Record_Found_OrdDtlUSR);
{
 //?USER: Initialize routine

 // PAR.Record Found -OrdDtlUSR = CND.Record Not Found
 PAR.Record_Found_OrdDtlUSR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 CASE;

 // IF DB1.Price Method Code is Deviated
 IF DB1.Price_Method_Code = 'DEV';

 // PAR.Record Found -OrdDtlUSR = CND.Record Found
 PAR.Record_Found_OrdDtlUSR = 'Y';

 QUIT;

 ENDIF;

 ENDIF;

}


// RCD.Claim Memo # Line Usr = CON.*BLANK
RCD.Claim_Memo_#_Line_Usr = *BLANK;

// LCL.Note Text = CON.Product =
LCL.Note_Text = 'Product =';

// RCD.Claim Memo # Line Usr = CONCAT(RCD.Claim Memo # Line Usr,LCL.Note Text,CON.1)
RCD.Claim_Memo_#_Line_Usr = RCD.Claim_Memo_#_Line_Usr + LCL.Note_Text (1);

EXECUTE FUNCTION(Rtv MemoNumber Prod   RT) TYPE(RTVOBJ) FILE(PDMOCPP)           AC1734774;
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Claim_Memo_#_Line_Usr);
{
 //?USER: Initialize routine

 // LCL.Claim Memo Number = CON.*ZERO
 LCL.Claim_Memo_Number = *ZERO;

 //?USER: Processing if Data record not found

 // PAR.Claim Memo # Line Usr = CON.*BLANK
 PAR.Claim_Memo_#_Line_Usr = *BLANK;

 //?USER: Process Data record

 CASE;

 // IF DB1.Claim Memo Number is Not equal to zeros
 IF DB1.Claim_Memo_Number <> *ZERO;

 CASE;

 // IF LCL.Claim Memo Number NE DB1.Claim Memo Number
 IF LCL.Claim_Memo_Number <> DB1.Claim_Memo_Number;

 // LCL.Claim Memo Number = DB1.Claim Memo Number
 LCL.Claim_Memo_Number = DB1.Claim_Memo_Number;

 // LCL.Claim Number (Alpha) USR = CVTVAR(DB1.Claim Memo Number)
 LCL.Claim_Number_Alpha_USR = CVTVAR(DB1.Claim_Memo_Number);

 // PAR.Claim Memo # Line Usr = CONCAT(PAR.Claim Memo # Line Usr,LCL.Claim Number (Alpha) USR,CON.1)
 PAR.Claim_Memo_#_Line_Usr = PAR.Claim_Memo_#_Line_Usr + LCL.Claim_Number_Alpha_USR (1);

 ENDIF;

 ENDIF;

}


// LCL.Claim Memo # Line Usr = CON.*BLANK
LCL.Claim_Memo_#_Line_Usr = *BLANK;

// LCL.Note Text = CON.Resale =
LCL.Note_Text = 'Resale =';

// LCL.Claim Memo # Line Usr = CONCAT(LCL.Claim Memo # Line Usr,LCL.Note Text,CON.1)
LCL.Claim_Memo_#_Line_Usr = LCL.Claim_Memo_#_Line_Usr + LCL.Note_Text (1);

EXECUTE FUNCTION(Rtv MemoNumber Resale RT) TYPE(RTVOBJ) FILE(PPA3CPP)           AC1734775;
PARAMETER(RCD.Claim_Number);
PARAMETER(LCL.Claim_Memo_#_Line_Usr);
{
 //?USER: Initialize routine

 // LCL.Resale Memo Number = CON.*ZERO
 LCL.Resale_Memo_Number = *ZERO;

 //?USER: Processing if Data record not found

 // PAR.Claim Memo # Line Usr = CON.*BLANK
 PAR.Claim_Memo_#_Line_Usr = *BLANK;

 //?USER: Process Data record

 CASE;

 // IF DB1.Resale Memo Number is Not equal to zeros
 IF DB1.Resale_Memo_Number <> *ZERO;

 CASE;

 // IF LCL.Resale Memo Number NE DB1.Resale Memo Number
 IF LCL.Resale_Memo_Number <> DB1.Resale_Memo_Number;

 // LCL.Claim Number (Alpha) USR = CVTVAR(DB1.Resale Memo Number)
 LCL.Claim_Number_Alpha_USR = CVTVAR(DB1.Resale_Memo_Number);

 // PAR.Claim Memo # Line Usr = CONCAT(PAR.Claim Memo # Line Usr,LCL.Claim Number (Alpha) USR,CON.1)
 PAR.Claim_Memo_#_Line_Usr = PAR.Claim_Memo_#_Line_Usr + LCL.Claim_Number_Alpha_USR (1);

 ENDIF;

 ENDIF;

}


// RCD.Claim Memo # Line Usr = CONCAT(RCD.Claim Memo # Line Usr,LCL.Claim Memo # Line Usr,CON.1)
RCD.Claim_Memo_#_Line_Usr = RCD.Claim_Memo_#_Line_Usr + LCL.Claim_Memo_#_Line_Usr (1);

// Execute function SFL Fold/Drop  RPG 2  US.
EXECUTE FUNCTION(SFL Fold/Drop  RPG 2  US) TYPE(EXCUSRSRC) ('POBKUFR');
{
 C     MODE          IFEQ      '0'
 C                   SETON                                        89
 C                   ELSE
 C                   SETOFF                                       89
 C                   ENDIF
}


//?USER: Process subfile control (Pre-confirm)

//?SEL: Salesperson
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Salesperson to Rvw Claim
AND PGM.*Cursor_field = CTL.Salesperson_to_Rvw_Claim;

// Call program SEL Salesperson        SR.
CALL PROGRAM(SEL Salesperson        SR) ('PDE6SRR');
PARAMETER(CTL.Salesperson_to_Rvw_Claim);

ENDIF;

//?CHGL: Clm Dta Steps if any of these change then reload
CASE;

// IF LCL.Clm Dta Steps-Clm Usr NE CTL.Clm Dta Steps-Clm Usr
IF LCL.Clm_Dta_Steps_Clm_Usr <> CTL.Clm_Dta_Steps_Clm_Usr;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?CHGL: Clm Dta Steps if any of these change then reload
// IF LCL.Clm Dta Steps-Com Usr NE CTL.Clm Dta Steps-Com Usr
IF LCL.Clm_Dta_Steps_Com_Usr <> CTL.Clm_Dta_Steps_Com_Usr;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?CHGL: Clm Dta Steps if any of these change then reload
// IF LCL.Clm Dta Steps-Int Usr NE CTL.Clm Dta Steps-Int Usr
IF LCL.Clm_Dta_Steps_Int_Usr <> CTL.Clm_Dta_Steps_Int_Usr;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?CHGL: Clm Dta Steps if any of these change then reload
// IF LCL.Clm Dta Steps-Rsl Usr NE CTL.Clm Dta Steps-Rsl Usr
IF LCL.Clm_Dta_Steps_Rsl_Usr <> CTL.Clm_Dta_Steps_Rsl_Usr;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?CHGL: Clm Dta Steps if any of these change then reload
// IF LCL.Clm Dta Steps-Exp Usr NE CTL.Clm Dta Steps-Exp Usr
IF LCL.Clm_Dta_Steps_Exp_Usr <> CTL.Clm_Dta_Steps_Exp_Usr;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?033108 SLM ADD FUNCTION - E00104
//?Establish Claim Audit
DO;

// PAR.Claim Audit Selection Usr = CND.blank
PAR.Claim_Audit_Selection_Usr = *BLANK;

// PAR.Approval Claim Audit Eml = CON.*BLANK
PAR.Approval_Claim_Audit_Eml = *BLANK;

// PAR.Claim Audit Co Value Usr = CND.Claim Audit Distribution
PAR.Claim_Audit_Co_Value_Usr = 'CLMDIST';

EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(PAR.Claim_Audit_Co_Value_Usr);
PARAMETER(LCL.System_Value_Alpha);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.System Value Alpha is *NONE
IF LCL.System_Value_Alpha = *NONE;

// OR LCL.System Value Alpha is Equal to Blank
OR LCL.System_Value_Alpha = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Approval Claim Audit Eml = LCL.System Value Alpha
PAR.Approval_Claim_Audit_Eml = LCL.System_Value_Alpha;

// PAR.Claim Audit Selection Usr = CND.yes
PAR.Claim_Audit_Selection_Usr = 'Y';

ENDIF;

ENDDO;

// LCL.Ship To Customer = CON.*ZERO
LCL.Ship_To_Customer = *ZERO;

// LCL.Sequence Number = CON.*ZERO
LCL.Sequence_Number = *ZERO;

// LCL.Sequence Number    044215 = CON.*ZERO
LCL.Sequence_Number_044215 = *ZERO;

//?051607 SLM ADD FUNCTION - DLY029
//?==>P30337 ACK 02/04/25 - Disable editing for claims created from P2P
//?** Subfile Selections
CASE;

// IF PAR.Edit/Dispaly Usr is Displayed Only
IF PAR.Edit_Display_Usr = 'D';

CASE;

// IF RCD.*SFLSEL is Display Claim
IF RCD.*SFLSEL = '15';

//?15=Display Claim
// Call program Dsp Claim Detail       D1.
CALL PROGRAM(Dsp Claim Detail       D1) ('PPNVD1R');
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(RCD.Claim_Order_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Claim_Ship_to_Customer);
PARAMETER(RCD.Claim_Customer_Name);
PARAMETER(PAR.Return_Command_USR);
PARAMETER(LCL.Clm_Program_USR);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF RCD.*SFLSEL is *Print
IF RCD.*SFLSEL = '6'/'6';

//?slm 041608 e00104 changes due to claim audit and internal note
//?6=Print Claim for Display Only validation
// PAR.Status - Y or N = CND.yes
PAR.Status_Y_or_N = 'Y';

//?Print Claim.
DO;

// Call program PMT Print Option  SHR  PV.
CALL PROGRAM(PMT Print Option  SHR  PV) ('PDG0PVR');
PARAMETER('Customer Claim Paper');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(WRK.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Select the Report.
DO;

//?Dynamically override the SBMJOB command
//?with the job queue from the Print Options screen.
// PGM.*Sbmjob override string = CONCAT(CON.JOBQ(,PAR.PRT Night Queue,CND.*None)
PGM.*Sbmjob_override_string = 'JOBQ(' + PAR.PRT_Night_Queue (*ZERO);

// PGM.*Sbmjob override string = CONCAT(PGM.*Sbmjob override string,CON.),CND.*None)
PGM.*Sbmjob_override_string = PGM.*Sbmjob_override_string + ')' (*ZERO);

//?Submit the Report.
//?** Don't print text and don't send to St Joe
// PAR.Status - Y or N = CND.yes
PAR.Status_Y_or_N = 'Y';

//?Pass information for regular claim and no internal notes
// Call program Prt Claim-Claim All   XF.
SBMJOB;
CALL PROGRAM(Prt Claim-Claim All   XF) ('PPL7XFR');
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.Status_Y_or_N);
PARAMETER('N');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*NO);
PARAMETER(*NO);
PARAMETER('R');
SBMJOBOVR JOB(PRTCLAIMFM);
SBMJOBEND;

//?Send submit message to user.
// Send information message - 'The report has been submitted.'
MESSAGE(USR2720 *INFO);

ENDDO;

ENDIF;

ENDDO;

// IF RCD.*SFLSEL NE WRK.BLANK
IF RCD.*SFLSEL <> WRK.BLANK;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

//?** Subfile Selections
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.Created Program Name is P2P
IF RCD.Created_Program_Name = 'P2P';

//?Subfile options other than Display are not allowed for P2P claims
CASE;

// IF RCD.*SFLSEL is Display Claim
IF RCD.*SFLSEL = '15';

// Call program Dsp Claim Detail       D1.
CALL PROGRAM(Dsp Claim Detail       D1) ('PPNVD1R');
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(RCD.Claim_Order_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Claim_Ship_to_Customer);
PARAMETER(RCD.Claim_Customer_Name);
PARAMETER(PAR.Return_Command_USR);
PARAMETER(LCL.Clm_Program_USR);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Subfile options other than Display are not allowed for P2P claims
// IF RCD.*SFLSEL is *Edit
IF RCD.*SFLSEL = '2'/'2';

// OR RCD.*SFLSEL is *Print
OR RCD.*SFLSEL = '6'/'6';

// OR RCD.*SFLSEL is Edit Claim Product
OR RCD.*SFLSEL = '7'/'7';

// OR RCD.*SFLSEL is Edt Comment
OR RCD.*SFLSEL = '8'/'8';

// OR RCD.*SFLSEL is Work With Resale
OR RCD.*SFLSEL = '9'/'9';

// OR RCD.*SFLSEL is Work With Expense
OR RCD.*SFLSEL = '10';

// OR RCD.*SFLSEL is Option 11
OR RCD.*SFLSEL = '11';

// OR RCD.*SFLSEL is Void Claim-New
OR RCD.*SFLSEL = '12';

// OR RCD.*SFLSEL is *Pending
OR RCD.*SFLSEL = '13';

// OR RCD.*SFLSEL is Option 14
OR RCD.*SFLSEL = '14';

// OR RCD.*SFLSEL is *Complete for Exp Only
OR RCD.*SFLSEL = '16';

// OR RCD.*SFLSEL is Option 17
OR RCD.*SFLSEL = '17';

// OR RCD.*SFLSEL is Option 18
OR RCD.*SFLSEL = '18';

// OR RCD.*SFLSEL is Option 19
OR RCD.*SFLSEL = '19';

// Send error message - 'Selection not allowed on a Claim that is created from P2P'
ERROR(USR5538);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.Claim Status is Expenses Allowed
IF RCD.Claim_Status = 'C'/'M';

// OR RCD.Claim Status is Denied
OR RCD.Claim_Status = 'D';

CASE;

// IF RCD.*SFLSEL is Internal/System Notes
IF RCD.*SFLSEL = '18';

// IF RCD.*SFLSEL is Work With Expense
IF RCD.*SFLSEL = '10';

// IF RCD.*SFLSEL is *Print
IF RCD.*SFLSEL = '6'/'6';

// IF RCD.*SFLSEL is Display Claim
IF RCD.*SFLSEL = '15';

// Call program Dsp Claim Detail       D1.
CALL PROGRAM(Dsp Claim Detail       D1) ('PPNVD1R');
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(RCD.Claim_Order_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Claim_Ship_to_Customer);
PARAMETER(RCD.Claim_Customer_Name);
PARAMETER(PAR.Return_Command_USR);
PARAMETER(LCL.Clm_Program_USR);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Selection not allowed on a Claim that has Memo Process as its status'
ERROR(USR3457);

QUIT;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.*SFLSEL is *Print
IF RCD.*SFLSEL = '6'/'6';

// IF RCD.*SFLSEL is Internal/System Notes
IF RCD.*SFLSEL = '18';

// IF RCD.*SFLSEL is Work With Expense
IF RCD.*SFLSEL = '10';

// IF RCD.*SFLSEL is *Edit
IF RCD.*SFLSEL = '2'/'2';

//?Edit Claim   -- OMS012A
CASE;

// IF RCD.Claim Status is Pending
IF RCD.Claim_Status = 'P';

// OR RCD.Claim Status is Sls Approved
OR RCD.Claim_Status = 'S';

// OR RCD.Claim Status is Reprocess
OR RCD.Claim_Status = 'R';

// OR RCD.Claim Status is Approved
OR RCD.Claim_Status = 'A';

// OR RCD.Claim Status is New
OR RCD.Claim_Status = 'N';

//?Only "Pending","Sales Approved","Approved" claims can be edited
// LCL.Clm Program USR = CND.Edit Claim
LCL.Clm_Program_USR = 'ECL';

// Call program Crt A/R Claim Flow    XF.
CALL PROGRAM(Crt A/R Claim Flow    XF) ('PPLRXFR');
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(RCD.Claim_Order_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Claim_Ship_to_Customer);
PARAMETER(RCD.Claim_Customer_Name);
PARAMETER(RCD.Claim_Status);
PARAMETER(RCD.AC_Shipping_Method);
PARAMETER(RCD.Record_Status);
PARAMETER(LCL.Clm_Program_USR);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(RCD.Resale_Purchase_Order_Nbr);
PARAMETER(LCL.Expense_Code);
PARAMETER(LCL.Sequence_Number);
PARAMETER(LCL.Sequence_Number_044215);
PARAMETER(PAR.Claim_Audit_Selection_Usr);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Edit Claim   -- OMS012A
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Only "Pending", "Sales Approved", & "Approved" claims can be edited.'
ERROR(USR2785);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

ENDIF;

// LCL.Expense Code = CON.*BLANK
LCL.Expense_Code = *BLANK;

// LCL.Sequence Number = CON.*ZERO
LCL.Sequence_Number = *ZERO;

CASE;

// IF RCD.*SFLSEL is Display Claim
IF RCD.*SFLSEL = '15';

//?15=Display Claim
// Call program Dsp Claim Detail       D1.
CALL PROGRAM(Dsp Claim Detail       D1) ('PPNVD1R');
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(RCD.Claim_Order_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Claim_Ship_to_Customer);
PARAMETER(RCD.Claim_Customer_Name);
PARAMETER(PAR.Return_Command_USR);
PARAMETER(LCL.Clm_Program_USR);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF RCD.*SFLSEL is Edit Claim Product
IF RCD.*SFLSEL = '7'/'7';

//?7=Edt Claim Product
//?Edit Claim Product
DO;

CASE;

// IF RCD.Claim Status is New
IF RCD.Claim_Status = 'N';

// OR RCD.Claim Status is Pending
OR RCD.Claim_Status = 'P';

// OR RCD.Claim Status is Sls Approved
OR RCD.Claim_Status = 'S';

// OR RCD.Claim Status is Reprocess
OR RCD.Claim_Status = 'R';

// OR RCD.Claim Status is Approved
OR RCD.Claim_Status = 'A';

// LCL.Clm Program USR = CND.Edit Claim Product
LCL.Clm_Program_USR = 'ECP';

// Call program Crt A/R Claim Flow    XF.
CALL PROGRAM(Crt A/R Claim Flow    XF) ('PPLRXFR');
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(RCD.Claim_Order_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Claim_Ship_to_Customer);
PARAMETER(RCD.Claim_Customer_Name);
PARAMETER(RCD.Claim_Status);
PARAMETER(RCD.AC_Shipping_Method);
PARAMETER(RCD.Record_Status);
PARAMETER(LCL.Clm_Program_USR);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(RCD.Resale_Purchase_Order_Nbr);
PARAMETER(LCL.Expense_Code);
PARAMETER(LCL.Sequence_Number);
PARAMETER(LCL.Sequence_Number_044215);
PARAMETER(PAR.Claim_Audit_Selection_Usr);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Only "Pending", "Sales Approved", & "Approved" claims can be edited.'
ERROR(USR2785);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDDO;

// IF RCD.*SFLSEL is Work With Resale
IF RCD.*SFLSEL = '9'/'9';

//?9=WW Resale
// LCL.Clm Program USR = CND.Work With Resale
LCL.Clm_Program_USR = 'WWR';

// Call program Crt A/R Claim Flow    XF.
CALL PROGRAM(Crt A/R Claim Flow    XF) ('PPLRXFR');
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(RCD.Claim_Order_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Claim_Ship_to_Customer);
PARAMETER(RCD.Claim_Customer_Name);
PARAMETER(RCD.Claim_Status);
PARAMETER(RCD.AC_Shipping_Method);
PARAMETER(RCD.Record_Status);
PARAMETER(LCL.Clm_Program_USR);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(RCD.Resale_Purchase_Order_Nbr);
PARAMETER(LCL.Expense_Code);
PARAMETER(LCL.Sequence_Number);
PARAMETER(LCL.Sequence_Number_044215);
PARAMETER(PAR.Claim_Audit_Selection_Usr);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF RCD.*SFLSEL is *Print
IF RCD.*SFLSEL = '6'/'6';

//?6=Print Claim   (Not emailed to St Joe)
//?Print Claim.
DO;

CASE;

// IF LCL.Display Prt Opt Pmt USR is *YES
IF LCL.Display_Prt_Opt_Pmt_USR = *YES;

// Call program PMT Print Option  SHR  PV.
CALL PROGRAM(PMT Print Option  SHR  PV) ('PDG0PVR');
PARAMETER('Customer Claim Paper');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(WRK.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);

// LCL.Display Prt Opt Pmt USR = CND.*NO
LCL.Display_Prt_Opt_Pmt_USR = *NO;

ENDIF;

//?** Set flag to control email to distro list
CASE;

// IF RCD.Claim Status is New
IF RCD.Claim_Status = 'N';

//?** New claims will not be emailed to distro list
// PAR.Status - Y or N = CND.yes
PAR.Status_Y_or_N = 'Y';

//?** Set flag to control email to distro list
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Status - Y or N = CND.no
PAR.Status_Y_or_N = 'N';

ENDIF;

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Select the Report.
DO;

//?Dynamically override the SBMJOB command
//?with the job queue from the Print Options screen.
// PGM.*Sbmjob override string = CONCAT(CON.JOBQ(,PAR.PRT Night Queue,CND.*None)
PGM.*Sbmjob_override_string = 'JOBQ(' + PAR.PRT_Night_Queue (*ZERO);

// PGM.*Sbmjob override string = CONCAT(PGM.*Sbmjob override string,CON.),CND.*None)
PGM.*Sbmjob_override_string = PGM.*Sbmjob_override_string + ')' (*ZERO);

//?Submit the Report.
// PAR.@Claim Status = CND.Blank
PAR.@Claim_Status = *BLANK;

// Call program Prt Claim-Claim All   XF.
SBMJOB;
CALL PROGRAM(Prt Claim-Claim All   XF) ('PPL7XFR');
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.Status_Y_or_N);
PARAMETER('N');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(PAR.Claim_Audit_Selection_Usr);
PARAMETER(PAR.Claim_Audit_Co_Value_Usr);
PARAMETER(PAR.Approval_Claim_Audit_Eml);
PARAMETER(*NO);
PARAMETER(*NO);
PARAMETER('R');
SBMJOBOVR JOB(PRTCLAIMFM);
SBMJOBEND;

//?Send submit message to user.
// Send information message - 'The report has been submitted.'
MESSAGE(USR2720 *INFO);

// Call program Crt A/R Claim ExpComSG XF.
CALL PROGRAM(Crt A/R Claim ExpComSG XF) ('PMTNXFR');
PARAMETER(RCD.Claim_Number);
PARAMETER('Claim was printed');
PARAMETER('S');
PARAMETER('CLMPRINT');
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
PARAMETER('CAR');

ENDDO;

ENDIF;

ENDDO;

// IF RCD.*SFLSEL is Edt Comment
IF RCD.*SFLSEL = '8'/'8';

//?8=Edt Comment
//?Edt Comment
DO;

CASE;

// IF RCD.Claim Status is New
IF RCD.Claim_Status = 'N';

// OR RCD.Claim Status is Pending
OR RCD.Claim_Status = 'P';

// LCL.Clm Program USR = CND.Edit Claim Comment
LCL.Clm_Program_USR = 'ECC';

// Call program Crt A/R Claim Flow    XF.
CALL PROGRAM(Crt A/R Claim Flow    XF) ('PPLRXFR');
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(RCD.Claim_Order_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Claim_Ship_to_Customer);
PARAMETER(RCD.Claim_Customer_Name);
PARAMETER(RCD.Claim_Status);
PARAMETER(RCD.AC_Shipping_Method);
PARAMETER(RCD.Record_Status);
PARAMETER(LCL.Clm_Program_USR);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(RCD.Resale_Purchase_Order_Nbr);
PARAMETER(LCL.Expense_Code);
PARAMETER(LCL.Sequence_Number);
PARAMETER(LCL.Sequence_Number_044215);
PARAMETER(PAR.Claim_Audit_Selection_Usr);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Status does not allow the claim comment to be  changed.'
ERROR(USR3453);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDDO;

// IF RCD.*SFLSEL is Void Claim-New
IF RCD.*SFLSEL = '12';

//?12=Void Claim
//?Void Claim.
DO;

CASE;

// IF RCD.Claim Status is New
IF RCD.Claim_Status = 'N';

// OR RCD.Claim Status is Pending
OR RCD.Claim_Status = 'P';

// OR RCD.Claim Status is Approved
OR RCD.Claim_Status = 'A';

// OR RCD.Claim Status is Sls Approved
OR RCD.Claim_Status = 'S';

//?RMC 8/2/06 added approved & sls approved conditions so this matches
//?           what the error msg says below.
// Call program Resolve Claim (Void)   E1.
CALL PROGRAM(Resolve Claim (Void)   E1) ('PDT3E1R');
PARAMETER(RCD.Claim_Number);
PARAMETER(PAR.Claim_Audit_Selection_Usr);
PARAMETER(PAR.Claim_Audit_Co_Value_Usr);
PARAMETER(PAR.Approval_Claim_Audit_Eml);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Only "Pending", "Sales Approved", & "Approved" claims can be voided.'
ERROR(USR2829);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDDO;

//?Performs a Claim Audit outside of the Claim Flow
// IF RCD.*SFLSEL is Work With Expense
IF RCD.*SFLSEL = '10';

//?10=WW Expense
// LCL.Clm Program USR = CND.Work With Expense
LCL.Clm_Program_USR = 'WWE';

// Call program Crt A/R Claim Flow    XF.
CALL PROGRAM(Crt A/R Claim Flow    XF) ('PPLRXFR');
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(RCD.Claim_Order_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Claim_Ship_to_Customer);
PARAMETER(RCD.Claim_Customer_Name);
PARAMETER(RCD.Claim_Status);
PARAMETER(RCD.AC_Shipping_Method);
PARAMETER(RCD.Record_Status);
PARAMETER(LCL.Clm_Program_USR);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(RCD.Resale_Purchase_Order_Nbr);
PARAMETER(LCL.Expense_Code);
PARAMETER(LCL.Sequence_Number);
PARAMETER(LCL.Sequence_Number_044215);
PARAMETER(PAR.Claim_Audit_Selection_Usr);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF RCD.*SFLSEL is Option 11
IF RCD.*SFLSEL = '11';

//?11=ww Approval Dist
//?WW A/R Claim Approval
DO;

// Call program Crt A/R Claim Apprl   XF.
CALL PROGRAM(Crt A/R Claim Apprl   XF) ('PPMIXFR');
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Salesperson_to_Rvw_Claim);
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(RCD.Claim_Order_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Claim_Ship_to_Customer);
PARAMETER(RCD.Claim_Customer_Name);
PARAMETER(RCD.Claim_Type);
PARAMETER(RCD.Claim_Status);

// LCL.Claim Department Code = CON.*BLANK
LCL.Claim_Department_Code = *BLANK;

// Call program WW Claim Approval     DF.
CALL PROGRAM(WW Claim Approval     DF) ('PPMHDFR');
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(RCD.Claim_Order_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Claim_Ship_to_Customer);
PARAMETER(RCD.Claim_Customer_Name);
PARAMETER(LCL.Claim_Department_Code);
PARAMETER(PAR.Claim_Audit_Selection_Usr);
PARAMETER(PAR.Claim_Audit_Co_Value_Usr);
PARAMETER(PAR.Approval_Claim_Audit_Eml);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDDO;

//?Performs a Claim Audit outside of the Claim Flow
// IF RCD.*SFLSEL is Option 17
IF RCD.*SFLSEL = '17';

//?Validate use of Option 17  sales deny/ approval
DO;

CASE;

// IF PAR.Edit/Display Usr is Edit Allowed
IF PAR.Edit_Display_Usr = 'E';

CASE;

// IF RCD.Claim Status is Pending
IF RCD.Claim_Status = 'P';

// LCL.User Profile Name = JOB.*USER
LCL.User_Profile_Name = JOB.*USER;

EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
PARAMETER(LCL.User_Profile_Name);
PARAMETER('SAPCLM');
PARAMETER(NLL.Company_Number);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(NLL.Allow_Multi_Company);
PARAMETER(NLL.Default_Printer);
PARAMETER(NLL.Salesperson_Code);
{
 //?Execute internal function

 //?RMC 5/11/09 Rtv default company from user profile --
 //?  Override user code model company if it exists
 EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 PARAMETER(LCL.Company_Number);
 PARAMETER(PAR.User_Code_Model);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?User Profile Record Not found
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // Execute function SET Message Queue Dest US.
 EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
 {
  C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
 }

 // Send completion message - 'Application access denied for user &1 in application area &2'
 MESSAGE(USR0810 *COMPLETION);
 MSGPARM(PAR.User_Profile_Name);
 MSGPARM(PAR.Application_Code);

 PGM.*Return_code = 'Y2U9999';

 RETURN;

 ENDIF;

 CASE;

 // IF PAR.User Code Model is equal to blank
 IF PAR.User_Code_Model = *BLANK;

 EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Warehouse_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
 PARAMETER(PAR.User_Code_Model);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Warehouse_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 // PAR.Warehouse Code = LCL.Warehouse Code
 PAR.Warehouse_Code = LCL.Warehouse_Code;

 //?Return code when not normal for Application Profile
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 //?Return code when not normal for Application Profile
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function SET Message Queue Dest US.
 EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
 {
  C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
 }

 // Send completion message - 'Application access denied for user &1 in application area &2'
 MESSAGE(USR0810 *COMPLETION);
 MSGPARM(PAR.User_Profile_Name);
 MSGPARM(PAR.Application_Code);

 PGM.*Return_code = 'Y2U9999';

 RETURN;

 ENDIF;

 //?Override company with User profile control's company if found
 CASE;

 // IF LCL.Company Number is not equal to zero
 IF LCL.Company_Number <> *ZERO;

 // PAR.Company Number = LCL.Company Number
 PAR.Company_Number = LCL.Company_Number;

 //?Get prod warehouse, if the appl got a warehouse
 CASE;

 // IF LCL.Warehouse Code is Not Blanks
 IF LCL.Warehouse_Code <> *BLANK;

 // Call program RTV Prod Whse for Co  XF.
 CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(LCL.Company_Number);

 ENDIF;

 ENDIF;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?051607 SLM ADD FUNCTION - DLY029
//?Sales Deny/Approved
DO;

EXECUTE FUNCTION(RTV Salesperson Type   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1205126;
PARAMETER(RCD.Salesperson_to_Rvw_Claim);
PARAMETER(LCL.Sales_Type_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Claim Resolution Explan. = RCD.Claim Resolution Explan.
LCL.Claim_Resolution_Explan = RCD.Claim_Resolution_Explan;

// Call program Dsp Approve/Deny Clm  DF.
CALL PROGRAM(Dsp Approve/Deny Clm  DF) ('PPABDFR');
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(RCD.Claim_Order_Number);
PARAMETER(RCD.Claim_Ship_to_Customer);
PARAMETER(RCD.Claim_Status);
PARAMETER(RCD.Claim_Amount);
PARAMETER(LCL.Claim_Resolution_Explan);
PARAMETER(PAR.Company_Number);
PARAMETER(RCD.Salesperson_to_Rvw_Claim);
PARAMETER(LCL.Sales_Type_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDDO;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

QUIT;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Claim Status Must Be Pending to select option.'
ERROR(USR3720);
MSGPARM(RCD.*SFLSEL);

QUIT;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

QUIT;

ENDIF;

ENDDO;

// IF RCD.*SFLSEL is Option 18
IF RCD.*SFLSEL = '18';

//?Allow changes or entry of Internal notes and review of system notes
DO;

//?Edit Internal Notes at any time and all review of system notes
DO;

// Call program Edt Claim Comm InternalEF.
CALL PROGRAM(Edt Claim Comm InternalEF) ('PMTKEFR');
PARAMETER(RCD.Claim_Number);
PARAMETER(NLL.Return_Command_USR);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDDO;

ENDDO;

// IF RCD.*SFLSEL is Option 14
IF RCD.*SFLSEL = '14';

//?Resolve Claim.-- which is approval or denial for memo
DO;

CASE;

// IF RCD.Claim Status is Sls Approved
IF RCD.Claim_Status = 'S';

// OR RCD.Claim Status is Reprocess
OR RCD.Claim_Status = 'R';

// Call program Resolve Claim          E1.
CALL PROGRAM(Resolve Claim          E1) ('PDN8E1R');
PARAMETER(RCD.Claim_Number);
PARAMETER(PAR.Claim_Audit_Selection_Usr);
PARAMETER(PAR.Claim_Audit_Co_Value_Usr);
PARAMETER(PAR.Approval_Claim_Audit_Eml);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Only "Sales Approved Claims" can be resolved.'
ERROR(USR2786);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDDO;

//?Performs a Claim Audit outside of the Claim Flow
// IF RCD.*SFLSEL is *Complete for Exp Only
IF RCD.*SFLSEL = '16';

//?16=Compl for Expense Only
//?Completed Claim for Expense records only
DO;

// Call program Edt Completed Claim    E1.
CALL PROGRAM(Edt Completed Claim    E1) ('PLBDE1R');
PARAMETER(RCD.Claim_Number);
PARAMETER(PAR.Claim_Audit_Selection_Usr);
PARAMETER(PAR.Claim_Audit_Co_Value_Usr);
PARAMETER(PAR.Approval_Claim_Audit_Eml);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDDO;

//?Performs a Claim Audit outside of the Claim Flow
// IF RCD.*SFLSEL is *Pending
IF RCD.*SFLSEL = '13';

//?13=Pending
//?Pending Claim.
DO;

CASE;

// IF RCD.Claim Status is New
IF RCD.Claim_Status = 'N';

//?Purge out the Claim Exp System records not need at this point
DO;

//?Claims Exp System records are created when changes occur
//?If pending or new purge these records.
//?as records are created after pending and new status then these will
//?will trigger to send emails to the distr list if this
//?feature was requested
EXECUTE FUNCTION(Dlt Claim ExpSysPrToPndRT) TYPE(RTVOBJ) FILE(PDMNCPP)          AC1878354;
PARAMETER(RCD.Claim_Number);
PARAMETER('CLMCHANGE');
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DLT A/R Claim Explan   DL) TYPE(DLTOBJ) FILE(PDMNCPP)          AC1523482;
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.Claim_Explanation_Line_No);
}


ENDDO;

// Call program Crt A/R Claim Pend FlowXF.
CALL PROGRAM(Crt A/R Claim Pend FlowXF) ('PPNTXFR');
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Salesperson_to_Rvw_Claim);
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(RCD.Claim_Order_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Claim_Ship_to_Customer);
PARAMETER(RCD.Claim_Customer_Name);
PARAMETER(RCD.Claim_Type);
PARAMETER(RCD.Claim_Status);

EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(RCD.Claim_Company_Number);
PARAMETER('CLMDIST');
PARAMETER(LCL.System_Value_Alpha);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.System Value Alpha is *NONE
IF LCL.System_Value_Alpha = *NONE;

// OR LCL.System Value Alpha is Equal to Blank
OR LCL.System_Value_Alpha = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

//?Select the Report.
DO;

//?Dynamically override the SBMJOB command
//?with the job queue from the Print Options screen.
// PGM.*Sbmjob override string = CONCAT(CON.JOBQ(,CON.*JOBD,CND.*None)
PGM.*Sbmjob_override_string = 'JOBQ(' + '*JOBD' (*ZERO);

// PGM.*Sbmjob override string = CONCAT(PGM.*Sbmjob override string,CON.),CND.*None)
PGM.*Sbmjob_override_string = PGM.*Sbmjob_override_string + ')' (*ZERO);

//?** Send report to all on the distribution list   2/22/06 LJB
// WRK.Approval Person Email = LCL.System Value Alpha
WRK.Approval_Person_Email = LCL.System_Value_Alpha;

//?** Set flag to "N" (not new), and set text for report
// PAR.Status - Y or N = CND.no
PAR.Status_Y_or_N = 'N';

// PAR.@Claim Status = CND.Pending
PAR.@Claim_Status = 'P';

//?SLM 041708 E00104 Modifications on parms
//?Submit the Report. Regular claim
// Call program Prt Claim-Claim All   XF.
SBMJOB;
CALL PROGRAM(Prt Claim-Claim All   XF) ('PPL7XFR');
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(*JOB);
PARAMETER(*YES);
PARAMETER(*NO);
PARAMETER(1);
PARAMETER(PAR.Status_Y_or_N);
PARAMETER('N');
PARAMETER('E');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(WRK.Approval_Person_Email);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*NO);
PARAMETER(*NO);
PARAMETER('R');
SBMJOBOVR JOB(PRTCLAIMFM);
SBMJOBEND;

//?Send system message that a pend claim was printed
// Call program Crt A/R Claim ExpComSG XF.
CALL PROGRAM(Crt A/R Claim ExpComSG XF) ('PMTNXFR');
PARAMETER(RCD.Claim_Number);
PARAMETER('Pending Process Prt Claim');
PARAMETER('S');
PARAMETER('CLMPENDING');
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
PARAMETER('CAR');

ENDDO;

ENDIF;

// Send information message - 'Claim &1 is now pending'
MESSAGE(USR3518 *INFO);
MSGPARM(RCD.Claim_Number);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Claim &1 Status of &2 is not allowed for this process.'
ERROR(USR3519);
MSGPARM(RCD.Claim_Number);
MSGPARM(RCD.Claim_Status);

ENDIF;

ENDDO;

// IF RCD.*SFLSEL is Option 19
IF RCD.*SFLSEL = '19';

//?19=Reset to Pending
//?Reset to Pending
DO;

CASE;

// IF RCD.Claim Status is Valid Reset to Pending
IF RCD.Claim_Status = 'S'/'V'/'D'/'A';

EXECUTE FUNCTION(CHG Status only        CH) TYPE(CHGOBJ) FILE(PDMKCPP)          AC1573743;
PARAMETER(RCD.Claim_Number);
PARAMETER('P');
{
 //?USER: Processing after Data read

 CASE;

 // IF PAR.Claim Status is Completed
 IF PAR.Claim_Status = 'C';

 // AND PAR.Claim Status NE DB1.Claim Status
 AND PAR.Claim_Status <> DB1.Claim_Status;

 // DB1.Memo Post Date = JOB.*Job date
 DB1.Memo_Post_Date = JOB.*Job_date;

 // DB1.Memo Post Time = JOB.*Job time
 DB1.Memo_Post_Time = JOB.*Job_time;

 // IF PAR.Claim Status is Memo Processing
 IF PAR.Claim_Status = 'M';

 // AND PAR.Claim Status NE DB1.Claim Status
 AND PAR.Claim_Status <> DB1.Claim_Status;

 // DB1.Memo Created = CND.Yes
 DB1.Memo_Created = 'Y';

 // DB1.Memo Created Date = JOB.*Job date
 DB1.Memo_Created_Date = JOB.*Job_date;

 // DB1.Memo Created Time = JOB.*Job time
 DB1.Memo_Created_Time = JOB.*Job_time;

 // DB1.Memo Created User = JOB.*USER
 DB1.Memo_Created_User = JOB.*USER;

 ENDIF;

 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

}


// Send information message - 'Claim &1 is now pending'
MESSAGE(USR3518 *INFO);
MSGPARM(RCD.Claim_Number);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Claim &1 Status of &2 is not allowed for this process.'
ERROR(USR3519);
MSGPARM(RCD.Claim_Number);
MSGPARM(RCD.Claim_Status);

ENDIF;

ENDDO;

ENDIF;

ENDIF;

ENDIF;

//?<==P30337 ACK 02/04/25 - Disable editing for claims created from P2P
//?Performs a Claim Audit outside of the Claim Flow
CASE;

// IF PAR.Claim Audit Selection Usr is yes
IF PAR.Claim_Audit_Selection_Usr = 'Y';

EXECUTE FUNCTION(Prc Claim Audit Rcds   IF) TYPE(EXCINTFUN)                     AC1879587;
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Claim_Company_Number);
PARAMETER(PAR.Claim_Audit_Selection_Usr);
PARAMETER(PAR.Claim_Audit_Co_Value_Usr);
PARAMETER(PAR.Approval_Claim_Audit_Eml);
{
 //?Execute internal function

 //?Claim Audit - If Claim Audit Records found then prompt the user
 DO;

 //?Description of processing action records
 DO;

 //?  1. Routine that will read the Claim Audit Records for THIS
 //?     Claim, if one record is found then display pmt for user to
 //?     to decide the action to be taken
 //?  2. Email Action
 //?     If the user select to process the email then do so
 //?     Create a system note that email WAS sent
 //?     or
 //?     Create a system note that email NOT sent
 //?  3. Regardless read these action records and flag that they
 //?     were reviewed for processed.
 //?     If the user selects not to send email these records will
 //?     still be processed.
 ENDDO;

 //?Action: Review the CLMCHANGE records
 // LCL.Claim Expl Action = CND.Claim was changed
 LCL.Claim_Expl_Action = 'CLMCHANGE';

 EXECUTE FUNCTION(Vry Clm ExpSysAtLeast1 RT) TYPE(RTVOBJ) FILE(PDMNCPP)          AC1878378;
 PARAMETER(PAR.Claim_Number);
 PARAMETER(LCL.Claim_Expl_Action);
 PARAMETER(LCL.Clm_Dta_Steps_Com_Usr);
 {
  //?USER: Processing if Data record not found

  // PAR.Clm Dta Steps-Cmt Usr = CND.No Data Exists
  PAR.Clm_Dta_Steps_Com_Usr = *BLANK;

  //?USER: Process Data record

  // PAR.Clm Dta Steps-Com Usr = CVTVAR(CND.Data Found)
  PAR.Clm_Dta_Steps_Com_Usr = CVTVAR('X');

  QUIT;

 }

 CASE;

 // IF LCL.Clm Dta Steps-Com Usr is Data Found
 IF LCL.Clm_Dta_Steps_Com_Usr = 'X';

 //?will prompt user send email, create system note if yes or no
 //?and flag system notes action as completed
 // Call program PMT Email Claim Rpt Y/NPV.
 CALL PROGRAM(PMT Email Claim Rpt Y/NPV) ('PMSAPVR');
 PARAMETER(PAR.Claim_Number);
 PARAMETER(PAR.Claim_Company_Number);
 PARAMETER(PAR.Claim_Audit_Selection_Usr);
 PARAMETER(PAR.Claim_Audit_Co_Value_Usr);
 PARAMETER(PAR.Approval_Claim_Audit_Eml);
 PARAMETER(*YES);
 PARAMETER(*NO);
 PARAMETER('A');

 ENDIF;

 ENDDO;

}


ENDIF;

EXECUTE FUNCTION(RTV Claim Amounts      RT) TYPE(RTVOBJ) FILE(PDMKCPP)          AC1569708;
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Claim_Amount);
PARAMETER(RCD.Claim_Net_Loss);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Final processing (Pre-confirm)

// LCL.Display Prt Opt Pmt USR = CND.*YES
LCL.Display_Prt_Opt_Pmt_USR = *YES;

//?USER: Process command keys

// LCL.Ship To Customer = CON.*ZERO
LCL.Ship_To_Customer = *ZERO;

// LCL.Sequence Number = CON.*ZERO
LCL.Sequence_Number = *ZERO;

// LCL.Sequence Number    044215 = CON.*ZERO
LCL.Sequence_Number_044215 = *ZERO;

CASE;

// IF PAR.Edit/Dispaly Usr is Displayed Only
IF PAR.Edit_Display_Usr = 'D';

CASE;

// IF CTL.*CMD key is CF15
IF CTL.*CMD_key = '15';

//?Display or ND denied/approved records.
DO;

CASE;

// IF WRK.Display Flag is Yes
IF WRK.Display_Flag = 'Y';

// WRK.Display Flag = CND.No
WRK.Display_Flag = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Display Flag = CND.Yes
WRK.Display_Flag = 'Y';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDDO;

// IF CTL.*CMD key is CF06
IF CTL.*CMD_key = '06';

// Send error message - 'Function not allowed.'
ERROR(USR1833);

// IF CTL.*CMD key is CF09
IF CTL.*CMD_key = '09';

// Send error message - 'Function not allowed.'
ERROR(USR1833);

ENDIF;

// IF PAR.Edit/Dispaly Usr is Edit Allowed
IF PAR.Edit_Display_Usr = 'E';

CASE;

// IF CTL.*CMD key is CF06
IF CTL.*CMD_key = '06';

//?==>CCMRLS2 ACK 02/17/25 - Disable new claims creation from IBMi
//?Once CCM is live, cannot create claims from IBMi anymore
CASE;

// IF LCL.Module Release Status is Is Live
IF LCL.Module_Release_Status = 'Y';

// Send error message - 'Creation of new claims records is blocked. Please use the P2P system to cre
ERROR(USR5539);

//?Once CCM is live, cannot create claims from IBMi anymore
// IF *OTHERWISE
IF *OTHERWISE;

//?New Claim
DO;

// LCL.Clm Program USR = CND.Create Claim
LCL.Clm_Program_USR = 'CCL';

// LCL.Claim Company Number = CON.*ZERO
LCL.Claim_Company_Number = *ZERO;

// LCL.Claim Order Number = CON.*ZERO
LCL.Claim_Order_Number = *ZERO;

// LCL.Claim Number = CON.*ZERO
LCL.Claim_Number = *ZERO;

// LCL.Load ID = CON.*ZERO
LCL.Load_ID = *ZERO;

// LCL.Claim Ship to Customer = CON.*ZERO
LCL.Claim_Ship_to_Customer = *ZERO;

// LCL.Claim Customer Name = CON.*ZERO
LCL.Claim_Customer_Name = *ZERO;

//?E3387 JJH 09/09/14 - Add LCL.A/C Shipping Method
// Call program Crt A/R Claim Flow    XF.
CALL PROGRAM(Crt A/R Claim Flow    XF) ('PPLRXFR');
PARAMETER(LCL.Claim_Number);
PARAMETER(LCL.Claim_Company_Number);
PARAMETER(LCL.Claim_Order_Number);
PARAMETER(LCL.Load_ID);
PARAMETER(LCL.Claim_Ship_to_Customer);
PARAMETER(LCL.Claim_Customer_Name);
PARAMETER(LCL.Claim_Status);
PARAMETER(LCL.AC_Shipping_Method);
PARAMETER(LCL.Record_Status);
PARAMETER(LCL.Clm_Program_USR);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(LCL.Resale_Purchase_Order_Nbr);
PARAMETER(LCL.Expense_Code);
PARAMETER(LCL.Sequence_Number);
PARAMETER(LCL.Sequence_Number_044215);
PARAMETER(PAR.Claim_Audit_Selection_Usr);

//?I THINK THIS STAYS * OUT NOT FOR SURE......SUSAN
// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDDO;

ENDIF;

//?<==CCMRLS2 ACK 02/17/25 - Disable new claims creation from IBMi
// IF CTL.*CMD key is CF09
IF CTL.*CMD_key = '09';

//?==>CCMRLS2 ACK 02/17/25 - Disable new claims creation from IBMi
//?Once CCM is live, cannot create claims from IBMi anymore
CASE;

// IF LCL.Module Release Status is Is Live
IF LCL.Module_Release_Status = 'Y';

// Send error message - 'Creation of new claims records is blocked. Please use the P2P system to cre
ERROR(USR5539);

//?Once CCM is live, cannot create claims from IBMi anymore
// IF *OTHERWISE
IF *OTHERWISE;

//?Resale Claim
DO;

// LCL.Claim Company Number = CON.*ZERO
LCL.Claim_Company_Number = *ZERO;

// LCL.Claim Number = CON.*ZERO
LCL.Claim_Number = *ZERO;

// LCL.Claim Order Number = CON.*ZERO
LCL.Claim_Order_Number = *ZERO;

// LCL.Clm Program USR = CND.Create Resale Only
LCL.Clm_Program_USR = 'CRO';

// LCL.Load ID = CON.*ZERO
LCL.Load_ID = *ZERO;

// LCL.Claim Ship to Customer = CON.*ZERO
LCL.Claim_Ship_to_Customer = *ZERO;

// LCL.Claim Customer Name = CON.*ZERO
LCL.Claim_Customer_Name = *ZERO;

// Call program Crt A/R Claim Flow    XF.
CALL PROGRAM(Crt A/R Claim Flow    XF) ('PPLRXFR');
PARAMETER(LCL.Claim_Number);
PARAMETER(LCL.Claim_Company_Number);
PARAMETER(LCL.Claim_Order_Number);
PARAMETER(LCL.Load_ID);
PARAMETER(LCL.Claim_Ship_to_Customer);
PARAMETER(LCL.Claim_Customer_Name);
PARAMETER(LCL.Claim_Status);
PARAMETER(LCL.AC_Shipping_Method);
PARAMETER(LCL.Record_Status);
PARAMETER(LCL.Clm_Program_USR);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(LCL.Resale_Purchase_Order_Nbr);
PARAMETER(LCL.Expense_Code);
PARAMETER(LCL.Sequence_Number);
PARAMETER(LCL.Sequence_Number_044215);
PARAMETER(PAR.Claim_Audit_Selection_Usr);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDDO;

ENDIF;

//?<==CCMRLS2 ACK 02/17/25 - Disable new claims creation from IBMi
// IF CTL.*CMD key is CF15
IF CTL.*CMD_key = '15';

//?Hide or Show denied/approved records.
DO;

CASE;

// IF WRK.Display Flag is Yes
IF WRK.Display_Flag = 'Y';

// WRK.Display Flag = CND.No
WRK.Display_Flag = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Display Flag = CND.Yes
WRK.Display_Flag = 'Y';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDDO;

ENDIF;

ENDIF;

CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

EXECUTE FUNCTION(Prt Claim Exp Pnd Prd IF) TYPE(EXCINTFUN)                      AC1792843;
PARAMETER(*BLANK);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(WRK.Nbr_of_Copies_Alpha_USR);
{
 //?Execute internal function

 // LCL.PRT Night Queue Run Sts = CND.no
 LCL.PRT_Night_Queue_Run_Sts = 'N';

 CASE;

 // IF PAR.Email Selection usr is Email Selected
 IF PAR.Email_Selection_usr = 'E';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program PMT Print Option  SHR  PV.
 CALL PROGRAM(PMT Print Option  SHR  PV) ('PDG0PVR');
 PARAMETER('Claim Expense Pending Rpt');
 PARAMETER(PAR.PRT_Printer_Device);
 PARAMETER(PAR.PRT_Hold_Output_Sts);
 PARAMETER(PAR.PRT_Save_Output_Sts);
 PARAMETER(PAR.PRT_Number_of_Copies);
 PARAMETER(LCL.PRT_Night_Queue_Run_Sts);
 PARAMETER(PAR.PRT_Night_Queue);
 PARAMETER('OMS');

 ENDIF;

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 //?Select the Report.
 DO;

 //?Dynamically override the SBMJOB command
 //?with the job queue from the Print Options screen.
 // PGM.*Sbmjob override string = CONCAT(CON.JOBQ(,PAR.PRT Night Queue,CND.*None)
 PGM.*Sbmjob_override_string = 'JOBQ(' + PAR.PRT_Night_Queue (*ZERO);

 // PGM.*Sbmjob override string = CONCAT(PGM.*Sbmjob override string,CON.),CND.*None)
 PGM.*Sbmjob_override_string = PGM.*Sbmjob_override_string + ')' (*ZERO);

 //?Submit the Report.
 //?Prt Claim Expense Pending report
 CASE;

 // IF PAR.Email Selection usr is Email Selected
 IF PAR.Email_Selection_usr = 'E';

 //?PRINT OPTIONS WILL BE PLUG DUE TO THE FACT THIS IS EMAIL
 // Call program Prt Claim Exp Pnd SbmJXF.
 SBMJOB;
 CALL PROGRAM(Prt Claim Exp Pnd SbmJXF) ('PLA1XFR');
 PARAMETER(PAR.PRT_Printer_Device);
 PARAMETER(PAR.PRT_Hold_Output_Sts);
 PARAMETER(PAR.PRT_Save_Output_Sts);
 PARAMETER(PAR.PRT_Number_of_Copies);
 PARAMETER(PAR.Email_Selection_usr);
 SBMJOBOVR JOB(CLMEXPPND);
 SBMJOBOVR JOBD(*USRPRF);
 SBMJOBEND;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Prt Claim Exp Pnd SbmJXF.
 SBMJOB;
 CALL PROGRAM(Prt Claim Exp Pnd SbmJXF) ('PLA1XFR');
 PARAMETER(PAR.PRT_Printer_Device);
 PARAMETER(PAR.PRT_Hold_Output_Sts);
 PARAMETER(PAR.PRT_Save_Output_Sts);
 PARAMETER(PAR.PRT_Number_of_Copies);
 PARAMETER(PAR.Email_Selection_usr);
 SBMJOBOVR JOB(CLMEXPPND);
 SBMJOBOVR JOBD(*USRPRF);
 SBMJOBEND;

 ENDIF;

 //?Send submit message to user.
 // Send information message - 'The report has been submitted.'
 MESSAGE(USR2720 *INFO);

 ENDDO;

 ENDIF;

}


// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

// LCL.Load Id Pass = CTL.Load ID
LCL.Load_Id_Pass = CTL.Load_ID;

// LCL.Claim Number Pass Usr = CTL.Claim Number
LCL.Claim_Number_Pass_Usr = CTL.Claim_Number;

// LCL.Date 1          PASS  USR = CTL.Claim Entry Date
LCL.Date_1_PASS_USR = CTL.Claim_Entry_Date;

// LCL.Ship to Customer Pass USR = CTL.Claim Ship to Customer
LCL.Ship_to_Customer_Pass_USR = CTL.Claim_Ship_to_Customer;

// LCL.Company Number Pass   USR = CTL.Claim Company Number
LCL.Company_Number_Pass_USR = CTL.Claim_Company_Number;

// LCL.Order Number 1  PASS  USR = CTL.Claim Order Number
LCL.Order_Number_1_PASS_USR = CTL.Claim_Order_Number;

// Call program PRT Customer ClaimInAcCLP.
CALL PROGRAM(PRT Customer ClaimInAcCLP) ('PPPPUPC');
PARAMETER(LCL.Return_Code_Usr);
PARAMETER(PAR.Application_Code);
PARAMETER('Prt Customer Claim');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(LCL.Load_Id_Pass);
PARAMETER(LCL.Claim_Number_Pass_Usr);
PARAMETER(CTL.Claim_Type);
PARAMETER(CTL.Claim_Status);
PARAMETER(LCL.Date_1_PASS_USR);
PARAMETER(CTL.Claim_Customer_Name);
PARAMETER(LCL.Ship_to_Customer_Pass_USR);
PARAMETER(LCL.Company_Number_Pass_USR);
PARAMETER(LCL.Order_Number_1_PASS_USR);
PARAMETER(CTL.Clm_Dta_Steps_Clm_Usr);
PARAMETER(CTL.Clm_Dta_Steps_Com_Usr);
PARAMETER(CTL.Clm_Dta_Steps_Rsl_Usr);
PARAMETER(CTL.Clm_Dta_Steps_Exp_Usr);

ENDIF;

