// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLBGPVR
// ?Date: 14.08.2025 Time: 02:53:38
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?MODIFICATIONS
//?11/02/2020 ISE H16853 - CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


//?USER: Load screen

EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PD_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.PL_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: User defined action

//?031606 SLM ADD THE VALIDATION OF THE TATTOO HEADER PRIOR
//?       TO ALLOWING THIS FUNCTION TO PERFORM THE DELETE TO THE
//?       BUY ORDER LOAD.....
//?031417 SLM ADD THE new fields for the delivery sched detail
EXECUTE FUNCTION(Rtv BOL Tattoo Info   RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1213937;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(NLL.TH_HPS_Movement_Ref_#);
PARAMETER(LCL.Record_Found_TH_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found TH USR = CND.Record Not Found
 PAR.Record_Found_TH_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found TH USR = CND.Record Found
 PAR.Record_Found_TH_USR = 'Y';

 QUIT;

}


CASE;

// IF LCL.Record Found TH USR is Record Found
IF LCL.Record_Found_TH_USR = 'Y';

// Send error message - 'A Tattoo Header is using the record.  Delete is invalid.'
ERROR(PRK0262);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.BOH Buy Order Number is NE Zero
IF DTL.BOH_Buy_Order_Number <> *ZERO;

EXECUTE FUNCTION(Rtv/Dlt BOL f/DSD     RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1245616;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Dlt Buy Order Detail  DL) TYPE(DLTOBJ) FILE(PKAXCPP)           AB1100532;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
}


ENDIF;

//?10/15/03 blank Transfer Sts field
EXECUTE FUNCTION(Chg Clear Slot EXT   CH) TYPE(CHGOBJ) FILE(PLAECPP)            AB1251029;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.DSH_Kill_Date);
PARAMETER(DTL.DSD_Delivery_Date);
PARAMETER(DTL.DSD_Delivery_Time);
PARAMETER(DTL.DSD_Delivery_Time_Seq);
PARAMETER(DTL.DSD_Farm_Site_Code);
PARAMETER(DTL.DSD_Building);
PARAMETER(DTL.DSD_Room);
PARAMETER(DTL.DSD_Sire_Line_Code);
PARAMETER(DTL.DSD_Hog_Group_Code);
PARAMETER(DTL.DSD_Unused_Head);
PARAMETER(DTL.DSD_Scheduled_Delv_Head);
PARAMETER(DTL.DSD_Transportation_Office);
PARAMETER(DTL.DSD_Trucker_Code_HPS);
PARAMETER(DTL.DSD_Driver);
PARAMETER(DTL.DSD_Loading_Crew);
PARAMETER(DTL.CHR_Code);
PARAMETER(DTL.DSD_Load_Type);
PARAMETER('F');
PARAMETER(DTL.DSD_Movement_Number);
PARAMETER(DTL.DSD_Truck_ID);
PARAMETER(DTL.DSD_Trailer_ID);
PARAMETER('N');
PARAMETER(DTL.DSD_Sched_Route_Start_Pnt);
PARAMETER(DTL.DSD_Sched_Route_Start_Dte);
PARAMETER(DTL.DSD_Sched_Route_Start_Tim);
PARAMETER(DTL.DSD_Sch_Farm_Arrival_Date);
PARAMETER(DTL.DSD_Sch_Farm_Arrival_Time);
PARAMETER(DTL.DSD_Sch_Start_Load_Date);
PARAMETER(DTL.DSD_Sch_Start_Load_Time);
PARAMETER('N');
PARAMETER('N');
PARAMETER('O');
PARAMETER(WRK.Blank_Usr_2);
PARAMETER(WRK.Blank_Usr_2);
PARAMETER(DTL.DSD_Unused_Date);
PARAMETER(DTL.DSD_Unused_Time);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


ENDIF;

