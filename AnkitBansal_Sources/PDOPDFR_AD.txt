// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDOPDFR
// ?Date: 14.08.2025 Time: 03:29:08
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize subfile control

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.Item Code USR = PAR.Item Code
CTL.Item_Code_USR = PAR.Item_Code;

EXECUTE FUNCTION(Rtv Descriptions      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1140665;
PARAMETER(CTL.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(CTL.Item_Description);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(WRK.UOM_Primary);
PARAMETER(WRK.UOM_Second);
PARAMETER(WRK.UOM_Third);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Initialize CTL Amounts
DO;

// Call program Zzz Formula Details    XF.
CALL PROGRAM(Zzz Formula Details    XF) ('PDORXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
PARAMETER(CTL.PRC_STRITM_Field_USR);
PARAMETER(CTL.PRC_CIDIFF_Field_USR);
PARAMETER(CTL.PRC_TOTAL_1_USR);
PARAMETER(CTL.PRC_SUBCRD_USR);
PARAMETER(CTL.PRC_TOTAL_2_USR);
PARAMETER(CTL.PRC_TOTAL_3_USR);
PARAMETER(CTL.PRC_MSCYLD_USR);
PARAMETER(CTL.PRC_CALCED_TOTAL_USR);
PARAMETER(CTL.PRC_CIFMPF_USR);
PARAMETER(CTL.PRC_IOVRFM_USR);
PARAMETER(CTL.PRC_CFRTOV_USR);
PARAMETER(CTL.PRC_OVERAGES_USR);
PARAMETER(CTL.PRC_TOTAL_PRICE_USR);
PARAMETER(**);

ENDDO;

//?USER: Initialize subfile record from DBF record

//?Load BOM Type
CASE;

// IF DB1.Price Method Componant is STRITM
IF DB1.Price_Method_Componant = 'STRITM';

// RCD.BOM Type = CND.Consumed - Meat
RCD.BOM_Type = 'C';

//?Load BOM Type
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.BOM Type = CND.Produced - Meat
RCD.BOM_Type = 'P';

ENDIF;

EXECUTE FUNCTION(Rtv Descriptions      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1140665;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(RCD.Item_Description);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// RCD.Sales Net Amount = DB1.Sales Yield * CON.1 *Rounded
RCD.Sales_Net_Amount = DB1.Sales_Yield * 1 'H';

// RCD.USR Market Value = DB1.Market Value * CON.1 *Rounded
RCD.USR_Market_Value = DB1.Market_Value * 1 'H';

// RCD.USR Credit Amount = DB1.Credit Value * CON.1 *Rounded
RCD.USR_Credit_Amount = DB1.Credit_Value * 1 'H';

//?USER: Process subfile record (Pre-confirm)

CASE;

// IF RCD.*SFLSEL is *Change Status
IF RCD.*SFLSEL = '2'/'2';

// Call program Zzz Detail Formula Wrk E1.
CALL PROGRAM(Zzz Detail Formula Wrk E1) ('PDOTE1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Price_Method_Componant);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Pricing_Sequence_Number);
PARAMETER(RCD.Credit_Value);
PARAMETER(PAR.USR_Record_Updated);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

