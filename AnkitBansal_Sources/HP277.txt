      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      Hog Production System
      * PROGRAM:     HP277
      * TITLE:       SYNON/WEB: Edit/Post Scheduled Sales into HPS
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     01/20/03
      *
      * FUNCTION:    This program is part of the Market Hog Delivery
      *              Scheduling System.  This program is called when
      *              the function to "POST" the delivery schedule is
      *              selected from the WEB or the HPE screens.
      *
      *              It reads all of the Delivery Schedule records that
      *              have a status of "D"elete, "N"ot Posted, "R"e-Post.
      *              The logical file handles this selection.
      *
      *              Please review document "WEB-SYNON-HPS Sales Movements"
      *              W:\AS400\HPS\Interfaces...  for details.
      *
      * FUNCTION:  Batch program to:
      *            a) edit scheduled sales movements entered via SYNON/WEB
      *            b) write records without errors to HPS as sales movements
      *            c) update some Market Hog Delivery Schedule files
      *
      *            This program is submitted through HP277CL.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 05/16/03  Alice
      *           Changed to read the Delivery Schedule Detail file
      *           by Company and Kill Date instead of reading
      *           all records and comparing on Kill date equal.
      *
      * 04/01/04  LeAnne Fedor
      *           You can no longer have Nursery groups since we no longer
      *           allow Nursery Groups on Market Sales.
      *
      * 01/24/05  LeAnne Fedor
      *           The WEB will now send us Hog Group Code as well as farm/bldg/room.
      *           (Prior to this, we defaulted the oldest Hog Group in the bldg/room.)
      *           We have not been and will not edit bldg/room.
      *           We will overlay the bldg/room that they send us with the bldg/room
      *           of the Hog Group that they send when the Group is valid.
      *
      * 04/16/09  LeAnne Ramsey
      *           If we have an Error, we will flag the Delivery Schedule Line as an E=Error,
      *           even if the record was tagged as Delete.
      *
      * 07/02/09  LeAnne Ramsey
      *           Recompile only. Added new field 'Continuous Flow Flag' to Hog Group file.
      *
      * 08/22/11  LeAnne Ramsey (E1705)
      *           Per Susan Mason/Purva Droge, I will no longer blank out AEW0ST-Source Type
      *           in the PLAECPL1-Delivery Schedule Detail record in subroutine $updsynon.
      *           I was blanking it out in the delete logic below:
      *                  when      svstatus = 'D'
      *                  move      'N'           aexnst
      *                  z-add     0             aeh3a1
      *                  move      *blank        aew0st
      *
      * 10/15/13  LeAnne Ramsey (E2831)
      *           Recompile only. Added field 'MTech Reference'.
      *
      * 11/03/20  ISE           (H16853)
      *           Recompile only. Increased the length of Buy Order field length from 5 to 7.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fplaecpl5  if   e           k disk
      *  Delivery schedule detail
      *          Selects ONLY, Post status = D, N, R and only Internals
      *          Key = Company and Scheduled Kill date
      *
     Fplaecpl1  uf   e           k disk
      *  Delivery schedule detail
      *
      *
     Fplagcpl1  uf   e           k disk
      *  Delivery schedule split
      *
      *
     Fhsp018    if   e           k disk
      *    Farm site
      *
      *
     Fhsp034    if   e           k disk
      *    Hog group
      *
      *
     Fhsp046    if   e           k disk
      *    Trucker
      *
      *
     Fhsp058    uf a e           k disk
      *   Movement event
      *
      *
     Fhsp067    if   e           k disk
      *    Load type
      *
      *
     Fhsp084    uf a e           k disk
      *   Sales movement header
      *
      *
     Fhsp085    uf a e           k disk
      *   Sales movement detail
      *
      *
     Fhsp080    o    e             disk
      *  Deleted movements
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      * These arrays are used to edit/update the Synon split records.
      *
     D arhgsn          s              7  0 dim(100)
     D arschd          s              5  0 dim(100)
     D arhgcd          s              7    dim(100)
     D arblcd          s              5    dim(100)
     D arrmcd          s              5    dim(100)
     D arsicd          s              5    dim(100)
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Control fields
      *
     D svstatus        s                   like(aexnst)
     D svsplit         s                   like(aew2st)
      *
      *
      * Workfields
      *
     D wkstatus        s              1
      *
     D wkfsbo          s                   like(fsfsbo)
     D wkfscd          s                   like(fsfscd)
     D wktocd          s                   like(fstocd)
      *
     D wkhgsn          s                   like(hghgsn)
     D wkhgcd          s                   like(hghgcd)
     D wksicd          s                   like(hggncd)
     D wkblcd          s                   like(hgblcd)
     D wkrmcd          s                   like(hgrmcd)
      *
     D wkscdt          s                   like(shscdt)
     D wksckldt        s                   like(shsckldt)
     D wkmvsn          s                   like(shmvsn)
     D wkltcd          s                   like(shltcd)
     D wkticd          s                   like(shticd)
     D wkptct          s                   like(shptct)
     D wkcvno          s                   like(shcvno) inz(360516)
     D wkhonb          s                   like(aehonb) inz(360)
      *
     D wkschd          s                   like(sgschd)
      *
      *
      * Workfields for date manipulation
      *
     D wkhhmmss        s              6  0
     D wkudate         s                   like(shscdt)
     D wksynondt       s              7  0
     D wkcymdiso       s               D   datfmt(*iso)
      *
      *
      * Parms
      *
     D xxcyymmdd       s              7  0
     D xxsynondt       s              7  0
     D xxccyymmdd      s              8  0
      *
      *
      * Array indexes
      *
     D x               s              3  0
     D y               s              3  0
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Definition for external data area DAMVSN-Movement number
      *---------------------------------------------------------------
     D
     D                 ds
     D  damvsn                 1      7  0
      *
      *----------------------------------------------------------------------
      * Definition for external data area 'DAAPER-Current Accounting Period'
      *----------------------------------------------------------------------
     D
     D daaper          ds                  dtaara(daaper)
     D  daccyy                 1      4  0
     D  daper                  5      6  0
     D  dabpdt                 7     14  0
     D  daepdt                15     22  0
     D  dapgfl                23     23
     D  dappfl                24     24
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
      * Read all records selected by the Delivery Schedule Detail Logical file
      * for the incoming "scheduled kill date".
      *
     C     key01         setll     plaecpl5
      *
     C                   dou       *in90 = *on                                  Main do
     C     key01         reade     plaecpl5                               90
     C                   if        *in90 = *off                                 If not EOF
      *
      * Initialize workfields
      *
     C                   exsr      $clear
      *
      * If there is a movement number, check the HPS movement.
     C
     C                   if        wkmvsn <> 0
     C                   exsr      $checknbr
     C                   endif
      *
      * Continue processing the record if there is no Error so far.
      *
     C                   if        wkstatus = ' '                               If continue
      *
      * If Post Status is 'delete'
      *
     C                   select
     C                   when      svstatus = 'D'
     C                   move      'N'           wkstatus
     C                   exsr      $delete
     C                   other
      *
      * If Post Status is not 'delete', then edit the data; create an HPS movement
      * if the data has no errors.
      *
     C                   exsr      $edit
      *
     C                   if        wkstatus = ' '                               If no errors
     C                   exsr      $movement
     C                   endif                                                  If no errors
     C                   endsl
      *
     C                   endif                                                  If continue
      *
      * Always update the MKT Hog Delivery Scheduling files
      *
     C                   exsr      $updsynon
      *
     C                   endif                                                  If not EOF
     C                   enddo                                                  Main do
      *
      * EOF processing
      *
     C                   seton                                        lr
      /eject
      *---------------------------------------------------------------
      * Clear/populate workfields
      *---------------------------------------------------------------
      *
      * Synon fields are difficult to work with. SO, we will move values into
      * recognizable workfields.
      *
     C     $clear        begsr
      *
     C                   move      *blank        wkstatus
     C                   move      aexnst        svstatus
     C                   move      aew2st        svsplit
      *
     C                   z-add     aeh3a1        wkmvsn
     C                   z-add     aeh1a1        wkfscd
     C                   move      aej4cd        wkblcd
     C                   move      aej5cd        wkrmcd
     C                   move      aelccd        wkhgcd
     C                   move      aelbcd        wksicd
     C                   move      aew1st        wkltcd
     C                   move      aek8cd        wkticd
     C                   z-add     aeh2a1        wkschd
      *
     C                   z-add     0             wkptct
     C                   z-add     0             wkscdt
     C                   z-add     0             wksckldt
     C                   z-add     0             wkhgsn
     C                   move      *blank        wkfsbo
     C                   move      *blank        wktocd
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Edit subroutine
      *---------------------------------------------------------------
      *
     C     $edit         begsr
      *
      * Validate fields that are always in the Delivery Schedule Detail file:
      * (Stop validations once you get the first error.)
      *     1) farm site
      *     2) load type
      *     3) trucker
      *     4) scheduled ship date
      *     5) scheduled kill date
      *
     C                   exsr      $fscd
      *
     C                   if        wkstatus = ' '
     C                   exsr      $ltcd
     C                   endif
      *
     C                   if        wkstatus = ' '
     C                   exsr      $ticd
     C                   endif
      *
     C                   if        wkstatus = ' '
     C                   exsr      $scdt
     C                   endif
      *
     C                   if        wkstatus = ' '
     C                   exsr      $sckldt
     C                   endif
      *
      *
      * If there are no errors so far, then validate Hog Group and Scheduled Head.
      * The tricky part is, if this is a 'split' then these fields are in
      * multiple records in a different file. If it is not a 'split' these
      * fields are in the record you are already validating!
      *
     C                   if        wkstatus = ' '                               If still OK
      *
     C                   if        svsplit = 'S'
     C                   exsr      $splits
     C                   else
     C                   exsr      $schd
     C                   exsr      $hgcd
     C                   endif
      *
     C                   endif                                                  If still OK
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Farm Site
      *---------------------------------------------------------------
      *
     C     $fscd         begsr
      *
     C     wkfscd        chain     hsp018                             92
     C                   if        *in92 = *on                                  If no hit
     C                   move      'E'           wkstatus
     C                   else
     C                   move      fsfsbo        wkfsbo
     C                   move      fstocd        wktocd
     C                   endif                                                  If no hit
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Load Type
      *---------------------------------------------------------------
      *
     C     $ltcd         begsr
      *
     C     wkltcd        chain     hsp067                             92
     C                   if        *in92 = *on                                  If no hit
     C                   move      'E'           wkstatus
     C                   endif                                                  If no hit
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Trucker
      *---------------------------------------------------------------
      *
      * Note: Trucker is not required
      *
     C     $ticd         begsr
      *
     C                   if        wkticd <> *blank
      *
     C     wkticd        chain     hsp046                             92
     C                   if        *in92 = *on or tiaist <> 'A'
     C                   move      'E'           wkstatus
     C                   endif
      *
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Scheduled Ship Date (Scheduled Start Loading Date)
      *---------------------------------------------------------------
      *
     C     $scdt         begsr
      *
     C                   if        aee8dt = 0                                   If no date
     C                   move      'E'           wkstatus
     C                   else
      * Validate date
     C                   z-add     aee8dt        xxsynondt
     C                   exsr      $dates
     C                   z-add     xxccyymmdd    wkscdt
      *
     C                   if        wkstatus = ' '
     C                   z-add     xxccyymmdd    wkscdt
     C                   endif
      *
     C                   endif                                                  If no date
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Scheduled Kill Date
      *---------------------------------------------------------------
      *
     C     $sckldt       begsr
      *
     C                   if        aee0dt = 0                                   If zero date
     C                   move      'E'           wkstatus
     C                   else
      * Validate date
     C                   z-add     aee0dt        xxsynondt
     C                   exsr      $dates
      *
     C                   if        wkstatus = ' '
     C                   z-add     xxccyymmdd    wksckldt
     C                   endif
      *
     C                   endif                                                  If zero date
      *
      * If both Scheduled Ship Date and Scheduled Kill Date are valid, check
      * that Scheduled Kill Date is not earlier than Scheduled Ship Date
      *
     C                   if        wkscdt <> 0 and
     C                             wksckldt <> 0 and
     C                             wksckldt < wkscdt
     C                   move      'E'           wkstatus
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate scheduled head
      *---------------------------------------------------------------
      *
     C     $schd         begsr
      *
     C                   if        wkschd <= 0
     C                   move      'E'           wkstatus
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Hog Group
      *---------------------------------------------------------------
      *
     C     $hgcd         begsr
      *
     C                   z-add     0             wkhgsn
      *
     C     wkhgcd        chain     hsp034                             92
     C                   if        *in92 = *off and
     C                             hggscd = 'OP' and
     C                             hgopdt <= wkscdt and
     C                             hgppcd <> 'NUR  ' and
     C                             hgfscd = wkfscd
     C                   z-add     hghgsn        wkhgsn
     C                   move      hggncd        wksicd
     C                   move      hgblcd        wkblcd
     C                   move      hgrmcd        wkrmcd
     C                   else
      *
     C                   move      'E'           wkstatus
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate dates
      *---------------------------------------------------------------
      *
     C     $dates        begsr
      *
      * Get Synon date into CCYYMMDD format
      *
     C                   call      'HP8011'
     C                   parm                    xxsynondt
     C                   parm      0             xxccyymmdd
      *
      * Date validations:
      *   1) date must be a valid date
      *   2) date cannot be in a closed period
      *   3) if the date is in the current period, the period close programs
      *      cannot be running
      *
     C     *iso          test(d)                 xxccyymmdd             92
     C                   if        *in92 = *on                                  If bad date
     C                   move      'E'           wkstatus
     C                   else
      *
     C                   in        daaper
      *
     C                   if        xxccyymmdd < dabpdt or
     C                             (xxccyymmdd >= dabpdt and
     C                              xxccyymmdd <= daepdt and
     C                              dappfl <> *blank)
     C                   move      'E'           wkstatus
     C                   endif
      *
     C                   endif                                                  If bad date
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Edit logic for 'split' movements
      *---------------------------------------------------------------
      *
     C     $splits       begsr
      *
      * Initialize the arrays and indexes
      *
     C                   z-add     0             arhgsn
     C                   z-add     0             arschd
     C                   move      *blank        arhgcd
     C                   move      *blank        arblcd
     C                   move      *blank        arrmcd
     C                   move      *blank        arsicd
     C                   z-add     0             x
     C                   z-add     0             y
      *
      * Process the Delivery Schedule Split file. If you don't have any
      * split records, something is wrong ...  just get out.
      *
     C     key02         setll     plagcpl1                               92
     C                   if        *in92 = *off                                 If no splits
     C                   move      'E'           wkstatus
     C                   else
      *
     C                   dou       *in91 = *on or wkstatus = 'E'                Do split loop
     C     key02         reade(n)  plagcpl1                               91
     C                   if        *in91 = *off and wkstatus = ' '              If not EOF
      *
      * Check head. Continue editing if Scheduled Head is OK.
      *
     C                   z-add     agh6a1        wkschd
     C                   exsr      $schd
      *
      * Validate Hog Group.
      *
     C                   if        wkstatus = ' '                               If still OK
      *
     C                   move      agkncd        wkblcd
     C                   move      agkocd        wkrmcd
     C                   move      aglecd        wkhgcd
      *
     C                   exsr      $hgcd
      *
      * If Hog Group is valid, check for duplicates.
      *
     C                   if        wkstatus = ' '                               If good group
     C                   eval      x = 1
     C     wkhgsn        lookup    arhgsn(x)                              92
     C                   if        *in92 = *on                                  If dup
     C                   move      'E'           wkstatus
     C                   else
      *
      * This was not a duplicate record; so, set up the array entries.
      *
     C                   add       1             y
     C                   z-add     wkhgsn        arhgsn(y)
     C                   z-add     wkschd        arschd(y)
     C                   move      wkhgcd        arhgcd(y)
     C                   move      wkblcd        arblcd(y)
     C                   move      wkrmcd        arrmcd(y)
     C                   move      wksicd        arsicd(y)
     C                   endif                                                  If dup
     C                   endif                                                  If good group
      *
     C                   endif                                                  If still OK
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do split loop
      *
     C                   endif                                                  If no splits
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Create HPS Movement
      *---------------------------------------------------------------
      *
     C     $movement     begsr
      *
      * If you do not have a movement number, then:
      *     1) get a new HPS movement number and write records
      * If you have a movement number, then:
      *     1) delete existing HPS movement and rewrite with the same number
      *
      * New movement
     C                   select
     C                   when      wkmvsn = 0
      *
     C     *lock         in        damvsn
     C                   add       1             damvsn
     C                   out       damvsn
     C                   z-add     damvsn        wkmvsn
      *
     C                   exsr      $create
      *
      * Movement already exists
      *
     C                   other
     C                   exsr      $delete
     C                   exsr      $create
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Delete existing movements
      *---------------------------------------------------------------
      *
     C     $delete       begsr
      *
     C                   exsr      $dltsh
     C                   exsr      $dltsd
     C                   exsr      $dltme
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Delete Sales Movement Header record
      *----------------------------------------------------------------
      *
     C     $dltsh        begsr
      *
     C     wkmvsn        chain     hsp084                             92
     C                   if        *in92 = *off
      *
      *
      * If the user is deleting an existing movement, write an audit
      * record to the 'deleted movement' file prior to deleting the
      * header record.
      *
     C                   if        svstatus = 'D'
     C                   exsr      $crtdm
     C                   endif
      *
      * Delete header
     C                   delete    shrec
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Delete Sales Movement Detail Records
      *----------------------------------------------------------------
      *
     C     $dltsd        begsr
      *
     C     wkmvsn        setll     hsp085
      *
     C                   dou       *in91 = *on                                  Do detail
     C     wkmvsn        reade     hsp085                                 91
     C                   if        *in91 = *off                                 If not EOF
     C                   delete    sgrec
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do detail
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Delete Movement Event records
      *----------------------------------------------------------------
      *
     C     $dltme        begsr
      *
     C     wkmvsn        setll     hsp058
      *
     C                   dou       *in91 = *on                                  Do events
     C     wkmvsn        reade     hsp058                                 91
     C                   if        *in91 = *off                                 If not EOF
     C                   delete    merec
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do events
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Create HPS movement records
      *---------------------------------------------------------------
      *
     C     $create       begsr
      *
      * Always create a single Sales Movement Header record
      *
     C                   exsr      $crtsh
      *
      * If this is a split, you will be creating multiple detail records;
      * otherwise, create a single detail record.
      *
     C                   if        svsplit = 'S'
     C                   exsr      $arrays
     C                   else
     C                   exsr      $crtsd
     C                   exsr      $crtme
     C                   endif
      *
     C                   endsr
      /eject
      *-----------------------------------------------------------------------------------
      * Read the array entries for the split records and create HPS detail records
      *-----------------------------------------------------------------------------------
      *
     C     $arrays       begsr
      *
     C                   z-add     0             x
      *
      * Process the arrays for this split
      *
     C                   do        y                                            Do arrays
     C                   add       1             x
     C                   z-add     arhgsn(x)     wkhgsn
     C                   z-add     arschd(x)     wkschd
     C                   exsr      $crtsd
     C                   exsr      $crtme
     C                   enddo                                                  Do arrays
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Create HPS Sales movement header
      *---------------------------------------------------------------
      *
     C     $crtsh        begsr
      *
     C                   z-add     wkmvsn        shmvsn
     C                   z-add     wkfscd        shfscd
     C                   z-add     wkscdt        shscdt
     C                   z-add     wksckldt      shsckldt
     C                   move      wkfsbo        shfsbo
     C                   move      wkltcd        shltcd
     C                   move      wkticd        shticd
     C                   z-add     wkptct        shptct
      *
     C                   move      'SC'          shmscd
     C                   move      'MRKTS'       shstcd
     C                   z-add     wkcvno        shcvno
      *
     C                   move      *blank        shtpcd
     C                   z-add     0             shshdt
     C                   z-add     0             shrcdt
     C                   z-add     0             shepdt
     C                   z-add     0             shpodt
      *
     C                   z-add     wkudate       shupdt
     C                   time                    shuptm
     C                   movel     sdpgm         shpgm
      *
     C                   write     shrec
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------------------------
      * Create HPS Sales movement detail records
      *-------------------------------------------------------------------------------------
      *
     C     $crtsd        begsr
      *
     C                   z-add     wkmvsn        sgmvsn
     C                   z-add     wkhgsn        sghgsn
     C                   z-add     wkschd        sgschd
      *
     C                   z-add     0             sgshhd
     C                   z-add     0             sgshlb
      *
     C                   z-add     0             sglvhd
     C                   z-add     0             sglvlb
      *
     C                   z-add     0             sgdohd
     C                   z-add     0             sgdolb
      *
     C                   z-add     0             sgcdhd
     C                   z-add     0             sgcdlb
      *
     C                   z-add     0             sgydhd
     C                   z-add     0             sgydlb
      *
     C                   write     sgrec
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------------------------
      * Create HPS Movement Event records
      *-------------------------------------------------------------------------------------
      *
     C     $crtme        begsr
      *
     C                   z-add     wkudate       meupdt
     C                   time                    meuptm
     C                   movel     sdusr         meuscd
     C                   movel     sdpgm         mepgm
      *
     C                   z-add     wkmvsn        memvsn
     C                   z-add     0             mehsn
     C                   z-add     wkcvno        mecvno
     C                   z-add     0             melnno
      *
     C                   z-add     wkhgsn        mehgsn
     C                   movel     'S'           memtcd
     C                   movel     'O'           meodfl
     C                   z-add     wksckldt      memedt
      *
     C                   write     merec
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------------------------
      * Update MKT Hog Delivery Schedule record
      *-------------------------------------------------------------------------------------
      *
     C     $updsynon     begsr
      *
      * Retrieve the record from the 'update' file; then, update it!
      *
     C     key02         chain     plaecpl1                           92
     C                   if        *in92 = *off                                 If detail
      *
     C                   select
     C                   when      wkstatus = 'E'
     C                   move      'E'           aexnst
      *
     C                   when      svstatus = 'D'
     C                   move      'N'           aexnst
     C                   z-add     0             aeh3a1
      *
     C                   when      wkstatus = ' '
     C                   move      'P'           aexnst
     C                   z-add     wkmvsn        aeh3a1
     C                   move      wktocd        aek9cd
     C                   endsl
      *
      * If there are no splits, put the Bldg/Room/Sire Line Code
      * into this record.
      *
     C                   if        svsplit <> 'S'
     C                   move      wkblcd        aej4cd
     C                   move      wkrmcd        aej5cd
     C                   move      wksicd        aelbcd
     C                   endif
      *
      * Update time stamp
     C                   movel(p)  sdusr         aeaavn
     C                   z-add     wksynondt     aeaadt
     C                   time                    aeamtm
      *
     C                   update    @aecpih
     C                   endif                                                  If detail
      *
      *
      * If you: 1) had splits 2) were not deleting 3) had no errors,
      * then go retrieve/update the split records.
      *
     C                   if        svsplit = 'S' and                            If splits
     C                             svstatus <> 'D' and
     C                             wkstatus = ' '
     C                   exsr      $updsplits
     C                   endif                                                  If splits
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Retrieve and update Split records
      *---------------------------------------------------------------
      *
     C     $updsplits    begsr
      *
     C     key02         setll     plagcpl1
      *
     C                   dou       *in93 = *on                                  Do split upd
     C     key02         reade     plagcpl1                               93
     C                   if        *in93 = *off                                 If not EOF
      *
      * Retrieve group info from the arrays built during editing.
      *
     C     aglecd        chain     hsp034                             92
     C                   if        *in92 = *off and
     C                             hgopdt <= wkscdt and
     C                             hgppcd <> 'NUR  ' and
     C                             hgfscd = wkfscd
     C                   endif
      *
     C                   eval      x = 1
     C     aglecd        lookup    arhgcd(x)                              92
     C                   if        *in92 = *on                                  If found
     C                   movel     arblcd(x)     agkncd
     C                   movel     arrmcd(x)     agkocd
     C                   movel     arsicd(x)     agldcd
     C                   endif                                                  If found
      *
      * Update time stamp
     C                   movel(p)  sdusr         agaavn
     C                   z-add     wksynondt     agaadt
     C                   time                    agamtm
      *
     C                   update    @agcpim
      *
      *
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do split upd
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Create an audit record for a deleted movement
      *----------------------------------------------------------------
      *
     C     $crtdm        begsr
      *
     C                   z-add     shmvsn        dmmvsn
     C                   movel     sdusr         dmuscd
     C                   z-add     wkudate       dmdmdt
     C                   time                    wkhhmmss
     C     .01           mult      wkhhmmss      dmdmtm
     C                   eval      dmdmcm = 'Deleted by WEB/SYNON'
      *
     C                   movel     'S'           dmmtcd
     C                   movel     shmscd        dmmscd
     C                   z-add     shscdt        dmscdt
     C                   z-add     shshdt        dmshdt
     C                   z-add     shrcdt        dmrcdt
     C                   z-add     shcvno        dmcvno
      *
     C                   movel     shfsbo        dmorbo
     C                   z-add     shfscd        dmorfs
     C                   move      *blank        dmorpt
     C                   movel     *blank        dmorpp
      *
     C                   move      *blank        dmdnbo
     C                   move      *blank        dmdnpt
     C                   move      *blank        dmdnpp
     C                   z-add     0             dmdnfs
      *
     C                   write     dmrec
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Movement number was already in the record
      *---------------------------------------------------------------
      *
      * Check the status and save the BOL print count.
      *
     C     $checknbr     begsr
      *
     C     wkmvsn        chain(n)  hsp084                             92
     C                   select
      *
      * this movement should really exist in the HPS files, but if it doesn't
      * I guess it doesn't matter because we are going to delete it and
      * re-write it anyway with the same movement #.
      * SO NOT HAVING THE MOVEMENT NUMBER IN THE HPS FILES IS NOT AN ERROR
      *
     C                   when      *in92 = *on
      *
     C                   when      shmscd <> 'SC'
     C                   move      'E'           wkstatus
     C                   other
      *
     C                   z-add     shptct        wkptct
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
     C     *entry        plist
     C                   parm                    xxcyymmdd
      *
      * Key lists
      *
      *
     C     key01         klist
     C                   kfld                    wkhonb                         Co # = 360
     C                   kfld                    xxcyymmdd                      Kill Date Parm
      *
      *
     C     key02         klist
     C                   kfld                    aehonb
     C                   kfld                    aee0dt
     C                   kfld                    aee6dt
     C                   kfld                    aeagth
     C                   kfld                    aehza1
      *
      * Flip system date to CCYYMMDD for populating update dates in HPS records.
      *
     C     *mdy          move      udate         wkcymdiso
     C                   move      wkcymdiso     wkudate
      *
      * Now, get this system date into the SYNON format for updating SYNON records.
      *
     C                   call      'HP8008'
     C                   parm      wkudate       xxccyymmdd
     C     wksynondt     parm      0             xxsynondt
      *
      *
      * Define the Data Area that contains the Movement number
      *
     C     *dtaara       define                  damvsn
      *
     C                   endsr
      /EJECT
