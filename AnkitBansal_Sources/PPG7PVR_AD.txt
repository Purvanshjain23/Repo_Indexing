// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPG7PVR
// ?Date: 14.08.2025 Time: 03:40:35
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(WRK.Allow_Multi_Company);
PARAMETER(WRK.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.PRT Printer Device = CON.*BLANK
PAR.PRT_Printer_Device = *BLANK;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

//?USER: Load screen

//?>>> Retrieve name and parent credit limit
EXECUTE FUNCTION(RTV Cust Aged Inv Info RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1392617;
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.Customer_Name);
PARAMETER(WRK.City);
PARAMETER(WRK.State_Code);
PARAMETER(PAR.Parent_Customer);
PARAMETER(PAR.Order_Entry_Hold);
PARAMETER(DTL.Parent_Credit_Limit);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?>>> Move Company Name or ALL out to screen
CASE;

// IF PAR.Company Number is Equal to zero
IF PAR.Company_Number = *ZERO;

// DTL.Company Name = CON.ALL
DTL.Company_Name = 'ALL';

//?>>> Move Company Name or ALL out to screen
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Company Name Only  RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1100959;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Company_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?>>> Retrieve customer summary information (one co. or all)
//?>>> Default Date of First Sale to High Values for compare purposes
//?>>> to see which is the earlist first sale date.
// DTL.Date of First Shipment = CND.High Values
DTL.Date_of_First_Shipment = 9999999;

CASE;

// IF DTL.A/R Customer Number EQ PAR.Parent Customer
IF DTL.AR_Customer_Number = PAR.Parent_Customer;

//?05/31/24 SP S303457-Start
EXECUTE FUNCTION(RTV Parents Cust Summ RT) TYPE(RTVOBJ) FILE(CABBREP)           AC1708805;
PARAMETER(PAR.Parent_Customer);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Age_Due_Current_CB);
PARAMETER(DTL.Age_Due_Aging_1_CB);
PARAMETER(DTL.Age_Due_Aging_2_CB);
PARAMETER(DTL.Age_Due_Aging_3_CB);
PARAMETER(DTL.Age_Due_Aging_4_CB);
PARAMETER(DTL.Age_Due_Aging_5_CB);
PARAMETER(DTL.Age_Due_Current_W_O_CB);
PARAMETER(DTL.Age_Due_Aging_1_W_O_CB);
PARAMETER(DTL.Age_Due_Aging_2_W_O_CB);
PARAMETER(DTL.Age_Due_Aging_3_W_O_CB);
PARAMETER(DTL.Age_Due_Aging_4_W_O_CB);
PARAMETER(DTL.Age_Due_Aging_5_W_O_CB);
PARAMETER(DTL.Value_of_Open_Orders);
PARAMETER(DTL.Time_of_Last_Aging);
PARAMETER(DTL.Date_of_First_Shipment);
PARAMETER(DTL.Date_of_Last_Shipment);
PARAMETER(DTL.Amount_of_Last_Shipment);
PARAMETER(DTL.Date_of_Last_Payment);
PARAMETER(DTL.Amount_of_Last_Payment);
PARAMETER(DTL.Date_of_Highest_A_R_Bal);
PARAMETER(DTL.Amount_of_Highest_A_R_Bal);
PARAMETER(DTL.Number_of_Invoices_YTD);
PARAMETER(DTL.Number_of_Orders_YTD);
PARAMETER(DTL.Number_of_Credits_YTD);
PARAMETER(DTL.Number_of_Payments);
PARAMETER(DTL.Date_of_Last_Aging);
PARAMETER(DTL.Last_YTD_Nbr_of_Orders);
PARAMETER(DTL.Last_YTD_Nbr_of_Credits);
PARAMETER(DTL.Last_YTD_Nbr_of_Payments);
PARAMETER(DTL.Last_YTD_Nbr_of_Invoices);
PARAMETER(DTL.MTD_Invoices_Paid);
PARAMETER(DTL.YTD_Invoices_Paid);
PARAMETER(DTL.MTD_Days_Paid);
PARAMETER(DTL.YTD_Days_Paid);
PARAMETER(DTL.YTD_Sales_Invoiced);
PARAMETER(DTL.Last_Year_Sales_Invoiced);
PARAMETER(DTL.Current_Month);
PARAMETER(LCL.YTD_Invoices_Paid_USR);
PARAMETER(LCL.YTD_Days_Paid_USR);
{
 //?USER: Initialize routine

 //?>>> Clear all fields coming in to be calculated
 MOVE *ALL (To: PAR From: CON);

 //?>>> Default Date of First Sale to High Values for compare purposes
 //?>>> to see which is the earlist first sale date.
 //?>>> (For 'All' companies processing.)
 // PAR.Date of First Shipment = CND.High Values
 PAR.Date_of_First_Shipment = 9999999;

 //?05/31/24 SP S303457-Start
 // PAR.YTD Invoices Paid     USR = CND.*Zero
 PAR.YTD_Invoices_Paid_USR = *ZERO;

 // PAR.YTD Days Paid         USR = CND.*Zero
 PAR.YTD_Days_Paid_USR = *ZERO;

 //?05/31/24 SP S303457-End
 //?USER: Process Data record

 CASE;

 // IF DB1.Ship To Customer EQ DB1.A/R Customer Number
 IF DB1.Ship_To_Customer = DB1.AR_Customer_Number;

 //?05/31/24 SP S303457-Start
 EXECUTE FUNCTION(RTV Inquiry totals     RT) TYPE(RTVOBJ) FILE(ARBCREP)          AC1113184;
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(PAR.Age_Due_Current_CB);
 PARAMETER(PAR.Age_Due_Aging_1_CB);
 PARAMETER(PAR.Age_Due_Aging_2_CB);
 PARAMETER(PAR.Age_Due_Aging_3_CB);
 PARAMETER(PAR.Age_Due_Aging_4_CB);
 PARAMETER(PAR.Age_Due_Aging_5_CB);
 PARAMETER(PAR.Age_Due_Current_W_O_CB);
 PARAMETER(PAR.Age_Due_Aging_1_W_O_CB);
 PARAMETER(PAR.Age_Due_Aging_2_W_O_CB);
 PARAMETER(PAR.Age_Due_Aging_3_W_O_CB);
 PARAMETER(PAR.Age_Due_Aging_4_W_O_CB);
 PARAMETER(PAR.Age_Due_Aging_5_W_O_CB);
 PARAMETER(PAR.Value_of_Open_Orders);
 PARAMETER(PAR.Time_of_Last_Aging);
 PARAMETER(PAR.Date_of_First_Shipment);
 PARAMETER(PAR.Date_of_Last_Shipment);
 PARAMETER(PAR.Amount_of_Last_Shipment);
 PARAMETER(PAR.Date_of_Last_Payment);
 PARAMETER(PAR.Amount_of_Last_Payment);
 PARAMETER(PAR.Date_of_Highest_A_R_Bal);
 PARAMETER(PAR.Amount_of_Highest_A_R_Bal);
 PARAMETER(PAR.Number_of_Invoices_YTD);
 PARAMETER(PAR.Number_of_Orders_YTD);
 PARAMETER(PAR.Number_of_Credits_YTD);
 PARAMETER(PAR.Number_of_Payments);
 PARAMETER(PAR.Date_of_Last_Aging);
 PARAMETER(PAR.Last_YTD_Nbr_of_Orders);
 PARAMETER(PAR.Last_YTD_Nbr_of_Credits);
 PARAMETER(PAR.Last_YTD_Nbr_of_Payments);
 PARAMETER(PAR.Last_YTD_Nbr_of_Invoices);
 PARAMETER(PAR.MTD_Invoices_Paid);
 PARAMETER(PAR.YTD_Invoices_Paid);
 PARAMETER(PAR.MTD_Days_Paid);
 PARAMETER(PAR.YTD_Days_Paid);
 PARAMETER(PAR.YTD_Sales_Invoiced);
 PARAMETER(PAR.Last_Year_Sales_Invoiced);
 PARAMETER(PAR.Current_Month);
 PARAMETER(PAR.YTD_Invoices_Paid_USR);
 PARAMETER(PAR.YTD_Days_Paid_USR);
 {
  //?USER: Initialize routine

  // WRK.Company count = CON.*ZERO
  WRK.Company_count = *ZERO;

  //?05/31/24 SP S303457-Start
  // PAR.YTD Invoices Paid     USR = CND.*Zero
  PAR.YTD_Invoices_Paid_USR = *ZERO;

  // PAR.YTD Days Paid         USR = CND.*Zero
  PAR.YTD_Days_Paid_USR = *ZERO;

  //?05/31/24 SP S303457-End
  //?USER: Process Data record

  CASE;

  // IF PAR.Company Number is not equal to zero
  IF PAR.Company_Number <> *ZERO;

  CASE;

  // IF DB1.Company Number NE PAR.Company Number
  IF DB1.Company_Number <> PAR.Company_Number;

  QUIT;

  ENDIF;

  ENDIF;

  //?>>> For 'All' companies,
  //?>>> determine 1st and last dates for display.
  //?>>> Determine Date of Last Aging across companies
  CASE;

  // IF DB1.Date of Last Aging GT PAR.Date of Last Aging
  IF DB1.Date_of_Last_Aging > PAR.Date_of_Last_Aging;

  // PAR.Date of Last Aging = DB1.Date of Last Aging
  PAR.Date_of_Last_Aging = DB1.Date_of_Last_Aging;

  ENDIF;

  //?>>> Determine Time of Last Aging across companies
  CASE;

  // IF DB1.Time of Last Aging GT PAR.Time of Last Aging
  IF DB1.Time_of_Last_Aging > PAR.Time_of_Last_Aging;

  // PAR.Time of Last Aging = DB1.Time of Last Aging
  PAR.Time_of_Last_Aging = DB1.Time_of_Last_Aging;

  ENDIF;

  //?>>> Determine Date and Amount of First Sale across companies
  CASE;

  // IF DB1.Date of First Shipment is entered
  IF DB1.Date_of_First_Shipment <> *ZERO;

  CASE;

  // IF DB1.Date of First Shipment LT PAR.Date of First Shipment
  IF DB1.Date_of_First_Shipment < PAR.Date_of_First_Shipment;

  // PAR.Date of First Shipment = DB1.Date of First Shipment
  PAR.Date_of_First_Shipment = DB1.Date_of_First_Shipment;

  ENDIF;

  //?>>> Determine Date and Amount of First Sale across companies
  //?>>> Determine Date and Amount of Last Sale across companies
  // IF DB1.Date of Last Shipment GT PAR.Date of Last Shipment
  IF DB1.Date_of_Last_Shipment > PAR.Date_of_Last_Shipment;

  // PAR.Date of Last Shipment = DB1.Date of Last Shipment
  PAR.Date_of_Last_Shipment = DB1.Date_of_Last_Shipment;

  // PAR.Amount of Last Shipment = DB1.Amount of Last Shipment
  PAR.Amount_of_Last_Shipment = DB1.Amount_of_Last_Shipment;

  ENDIF;

  //?>>> Determine Date and Amount of Last Payment across companies
  CASE;

  // IF DB1.Date of Last Payment GT PAR.Date of Last Payment
  IF DB1.Date_of_Last_Payment > PAR.Date_of_Last_Payment;

  // PAR.Date of Last Payment = DB1.Date of Last Payment
  PAR.Date_of_Last_Payment = DB1.Date_of_Last_Payment;

  // PAR.Amount of Last Payment = DB1.Amount of Last Payment
  PAR.Amount_of_Last_Payment = DB1.Amount_of_Last_Payment;

  ENDIF;

  //?>>> Determine Amount of Highest A/R Balance across companies
  CASE;

  // IF DB1.Amount of Highest A/R Bal GT PAR.Amount of Highest A/R Bal
  IF DB1.Amount_of_Highest_A_R_Bal > PAR.Amount_of_Highest_A_R_Bal;

  // PAR.Date of Highest A/R Bal. = DB1.Date of Highest A/R Bal.
  PAR.Date_of_Highest_A_R_Bal = DB1.Date_of_Highest_A_R_Bal;

  // PAR.Amount of Highest A/R Bal = DB1.Amount of Highest A/R Bal
  PAR.Amount_of_Highest_A_R_Bal = DB1.Amount_of_Highest_A_R_Bal;

  ENDIF;

  //?>>> Accumulate number of invoices, etc.
  // PAR.Number of Invoices YTD = DB1.Number of Invoices YTD + PAR.Number of Invoices
  PAR.Number_of_Invoices_YTD = DB1.Number_of_Invoices_YTD + PAR.Number_of_Invoices_YTD;

  // PAR.Number of Orders YTD = DB1.Number of Orders YTD + PAR.Number of Orders YTD
  PAR.Number_of_Orders_YTD = DB1.Number_of_Orders_YTD + PAR.Number_of_Orders_YTD;

  // PAR.Number of Credits YTD = DB1.Number of Credits YTD + PAR.Number of Credits YT
  PAR.Number_of_Credits_YTD = DB1.Number_of_Credits_YTD + PAR.Number_of_Credits_YTD;

  // PAR.Number of Payments = DB1.Number of Payments + PAR.Number of Payments
  PAR.Number_of_Payments = DB1.Number_of_Payments + PAR.Number_of_Payments;

  // PAR.Value of Open Orders = DB1.Value of Open Orders + PAR.Value of Open Orders
  PAR.Value_of_Open_Orders = DB1.Value_of_Open_Orders + PAR.Value_of_Open_Orders;

  // PAR.Last YTD Nbr of Orders = PAR.Last YTD Nbr of Orders + DB1.Last YTD Nbr of Or
  PAR.Last_YTD_Nbr_of_Orders = PAR.Last_YTD_Nbr_of_Orders + DB1.Last_YTD_Nbr_of_Orders;

  // PAR.Last YTD Nbr of Credits = PAR.Last YTD Nbr of Credits + DB1.Last YTD Nbr of
  PAR.Last_YTD_Nbr_of_Credits = PAR.Last_YTD_Nbr_of_Credits + DB1.Last_YTD_Nbr_of_Credits;

  // PAR.Last YTD Nbr of Payments = PAR.Last YTD Nbr of Payments + DB1.Last YTD Nbr o
  PAR.Last_YTD_Nbr_of_Payments = PAR.Last_YTD_Nbr_of_Payments
  + DB1.Last_YTD_Nbr_of_Payments;

  // PAR.Last YTD Nbr of Invoices = PAR.Last YTD Nbr of Invoices + DB1.Last YTD Nbr o
  PAR.Last_YTD_Nbr_of_Invoices = PAR.Last_YTD_Nbr_of_Invoices
  + DB1.Last_YTD_Nbr_of_Invoices;

  // PAR.MTD Invoices Paid = PAR.MTD Invoices Paid + DB1.MTD Invoices Paid
  PAR.MTD_Invoices_Paid = PAR.MTD_Invoices_Paid + DB1.MTD_Invoices_Paid;

  //?05/31/24 SP S303457-Start
  // PAR.YTD Invoices Paid     USR = PAR.YTD Invoices Paid     USR + DB1.YTD Invoices Paid
  PAR.YTD_Invoices_Paid_USR = PAR.YTD_Invoices_Paid_USR + DB1.YTD_Invoices_Paid;

  //?05/31/24 SP S303457-End
  // PAR.MTD Days Paid = PAR.MTD Days Paid + DB1.MTD Days Paid
  PAR.MTD_Days_Paid = PAR.MTD_Days_Paid + DB1.MTD_Days_Paid;

  //?05/31/24 SP S303457-Start
  // PAR.YTD Days Paid         USR = PAR.YTD Days Paid         USR + DB1.YTD Days Paid
  PAR.YTD_Days_Paid_USR = PAR.YTD_Days_Paid_USR + DB1.YTD_Days_Paid;

  //?05/31/24 SP S303457-End
  // PAR.Last Year Sales Invoiced = PAR.Last Year Sales Invoiced + DB1.Last Year Sale
  PAR.Last_Year_Sales_Invoiced = PAR.Last_Year_Sales_Invoiced
  + DB1.Last_Year_Sales_Invoiced;

  // PAR.YTD Sales Invoiced = PAR.YTD Sales Invoiced + DB1.YTD Sales Invoiced
  PAR.YTD_Sales_Invoiced = PAR.YTD_Sales_Invoiced + DB1.YTD_Sales_Invoiced;

  // PAR.Current Month = DB1.Current Month
  PAR.Current_Month = DB1.Current_Month;

  //?>>> Sum Aging Due $
  DO;

  // PAR.Age $ Due - Current - CB = PAR.Age $ Due - Current - CB + DB1.Age $ Due - Cu
  PAR.Age_Due_Current_CB = PAR.Age_Due_Current_CB + DB1.Age_Due_Current_CB;

  // PAR.Age $ Due - Aging 1 - CB = PAR.Age $ Due - Aging 1 - CB + DB1.Age $ Due - Ag
  PAR.Age_Due_Aging_1_CB = PAR.Age_Due_Aging_1_CB + DB1.Age_Due_Aging_1_CB;

  // PAR.Age $ Due - Aging 2 - CB = PAR.Age $ Due - Aging 2 - CB + DB1.Age $ Due - Ag
  PAR.Age_Due_Aging_2_CB = PAR.Age_Due_Aging_2_CB + DB1.Age_Due_Aging_2_CB;

  // PAR.Age $ Due - Aging 3 - CB = PAR.Age $ Due - Aging 3 - CB + DB1.Age $ Due - Ag
  PAR.Age_Due_Aging_3_CB = PAR.Age_Due_Aging_3_CB + DB1.Age_Due_Aging_3_CB;

  // PAR.Age $ Due - Aging 4 - CB = PAR.Age $ Due - Aging 4 - CB + DB1.Age $ Due - Ag
  PAR.Age_Due_Aging_4_CB = PAR.Age_Due_Aging_4_CB + DB1.Age_Due_Aging_4_CB;

  // PAR.Age $ Due - Aging 5 - CB = PAR.Age $ Due - Aging 5 - CB + DB1.Age $ Due - Ag
  PAR.Age_Due_Aging_5_CB = PAR.Age_Due_Aging_5_CB + DB1.Age_Due_Aging_5_CB;

  // PAR.Age $ Due-Current-W/O CB = PAR.Age $ Due-Current-W/O CB + DB1.Age $ Due-Curr
  PAR.Age_Due_Current_W_O_CB = PAR.Age_Due_Current_W_O_CB + DB1.Age_Due_Current_W_O_CB;

  // PAR.Age $ Due-Aging 1-W/O CB = PAR.Age $ Due-Aging 1-W/O CB + DB1.Age $ Due-Agin
  PAR.Age_Due_Aging_1_W_O_CB = PAR.Age_Due_Aging_1_W_O_CB + DB1.Age_Due_Aging_1_W_O_CB;

  // PAR.Age $ Due-Aging 2-W/O CB = PAR.Age $ Due-Aging 2-W/O CB + DB1.Age $ Due-Agin
  PAR.Age_Due_Aging_2_W_O_CB = PAR.Age_Due_Aging_2_W_O_CB + DB1.Age_Due_Aging_2_W_O_CB;

  // PAR.Age $ Due-Aging 3-W/O CB = PAR.Age $ Due-Aging 3-W/O CB + DB1.Age $ Due-Agin
  PAR.Age_Due_Aging_3_W_O_CB = PAR.Age_Due_Aging_3_W_O_CB + DB1.Age_Due_Aging_3_W_O_CB;

  // PAR.Age $ Due-Aging 4-W/O CB = PAR.Age $ Due-Aging 4-W/O CB + DB1.Age $ Due-Agin
  PAR.Age_Due_Aging_4_W_O_CB = PAR.Age_Due_Aging_4_W_O_CB + DB1.Age_Due_Aging_4_W_O_CB;

  // PAR.Age $ Due-Aging 5-W/O CB = PAR.Age $ Due-Aging 5-W/O CB + DB1.Age $ Due-Agin
  PAR.Age_Due_Aging_5_W_O_CB = PAR.Age_Due_Aging_5_W_O_CB + DB1.Age_Due_Aging_5_W_O_CB;

  ENDDO;

  // WRK.Company count = CON.1 + WRK.Company count
  WRK.Company_count = 1 + WRK.Company_count;

 }

 //?05/31/24 SP S303457-End
 ENDIF;

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Inquiry totals     RT) TYPE(RTVOBJ) FILE(ARBCREP)          AC1113184;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.Age_Due_Current_CB);
PARAMETER(DTL.Age_Due_Aging_1_CB);
PARAMETER(DTL.Age_Due_Aging_2_CB);
PARAMETER(DTL.Age_Due_Aging_3_CB);
PARAMETER(DTL.Age_Due_Aging_4_CB);
PARAMETER(DTL.Age_Due_Aging_5_CB);
PARAMETER(DTL.Age_Due_Current_W_O_CB);
PARAMETER(DTL.Age_Due_Aging_1_W_O_CB);
PARAMETER(DTL.Age_Due_Aging_2_W_O_CB);
PARAMETER(DTL.Age_Due_Aging_3_W_O_CB);
PARAMETER(DTL.Age_Due_Aging_4_W_O_CB);
PARAMETER(DTL.Age_Due_Aging_5_W_O_CB);
PARAMETER(DTL.Value_of_Open_Orders);
PARAMETER(DTL.Time_of_Last_Aging);
PARAMETER(DTL.Date_of_First_Shipment);
PARAMETER(DTL.Date_of_Last_Shipment);
PARAMETER(DTL.Amount_of_Last_Shipment);
PARAMETER(DTL.Date_of_Last_Payment);
PARAMETER(DTL.Amount_of_Last_Payment);
PARAMETER(DTL.Date_of_Highest_A_R_Bal);
PARAMETER(DTL.Amount_of_Highest_A_R_Bal);
PARAMETER(DTL.Number_of_Invoices_YTD);
PARAMETER(DTL.Number_of_Orders_YTD);
PARAMETER(DTL.Number_of_Credits_YTD);
PARAMETER(DTL.Number_of_Payments);
PARAMETER(DTL.Date_of_Last_Aging);
PARAMETER(DTL.Last_YTD_Nbr_of_Orders);
PARAMETER(DTL.Last_YTD_Nbr_of_Credits);
PARAMETER(DTL.Last_YTD_Nbr_of_Payments);
PARAMETER(DTL.Last_YTD_Nbr_of_Invoices);
PARAMETER(DTL.MTD_Invoices_Paid);
PARAMETER(DTL.YTD_Invoices_Paid);
PARAMETER(DTL.MTD_Days_Paid);
PARAMETER(DTL.YTD_Days_Paid);
PARAMETER(DTL.YTD_Sales_Invoiced);
PARAMETER(DTL.Last_Year_Sales_Invoiced);
PARAMETER(DTL.Current_Month);
PARAMETER(LCL.YTD_Invoices_Paid_USR);
PARAMETER(LCL.YTD_Days_Paid_USR);
{
 //?USER: Initialize routine

 // WRK.Company count = CON.*ZERO
 WRK.Company_count = *ZERO;

 //?05/31/24 SP S303457-Start
 // PAR.YTD Invoices Paid     USR = CND.*Zero
 PAR.YTD_Invoices_Paid_USR = *ZERO;

 // PAR.YTD Days Paid         USR = CND.*Zero
 PAR.YTD_Days_Paid_USR = *ZERO;

 //?05/31/24 SP S303457-End
 //?USER: Process Data record

 CASE;

 // IF PAR.Company Number is not equal to zero
 IF PAR.Company_Number <> *ZERO;

 CASE;

 // IF DB1.Company Number NE PAR.Company Number
 IF DB1.Company_Number <> PAR.Company_Number;

 QUIT;

 ENDIF;

 ENDIF;

 //?>>> For 'All' companies,
 //?>>> determine 1st and last dates for display.
 //?>>> Determine Date of Last Aging across companies
 CASE;

 // IF DB1.Date of Last Aging GT PAR.Date of Last Aging
 IF DB1.Date_of_Last_Aging > PAR.Date_of_Last_Aging;

 // PAR.Date of Last Aging = DB1.Date of Last Aging
 PAR.Date_of_Last_Aging = DB1.Date_of_Last_Aging;

 ENDIF;

 //?>>> Determine Time of Last Aging across companies
 CASE;

 // IF DB1.Time of Last Aging GT PAR.Time of Last Aging
 IF DB1.Time_of_Last_Aging > PAR.Time_of_Last_Aging;

 // PAR.Time of Last Aging = DB1.Time of Last Aging
 PAR.Time_of_Last_Aging = DB1.Time_of_Last_Aging;

 ENDIF;

 //?>>> Determine Date and Amount of First Sale across companies
 CASE;

 // IF DB1.Date of First Shipment is entered
 IF DB1.Date_of_First_Shipment <> *ZERO;

 CASE;

 // IF DB1.Date of First Shipment LT PAR.Date of First Shipment
 IF DB1.Date_of_First_Shipment < PAR.Date_of_First_Shipment;

 // PAR.Date of First Shipment = DB1.Date of First Shipment
 PAR.Date_of_First_Shipment = DB1.Date_of_First_Shipment;

 ENDIF;

 //?>>> Determine Date and Amount of First Sale across companies
 //?>>> Determine Date and Amount of Last Sale across companies
 // IF DB1.Date of Last Shipment GT PAR.Date of Last Shipment
 IF DB1.Date_of_Last_Shipment > PAR.Date_of_Last_Shipment;

 // PAR.Date of Last Shipment = DB1.Date of Last Shipment
 PAR.Date_of_Last_Shipment = DB1.Date_of_Last_Shipment;

 // PAR.Amount of Last Shipment = DB1.Amount of Last Shipment
 PAR.Amount_of_Last_Shipment = DB1.Amount_of_Last_Shipment;

 ENDIF;

 //?>>> Determine Date and Amount of Last Payment across companies
 CASE;

 // IF DB1.Date of Last Payment GT PAR.Date of Last Payment
 IF DB1.Date_of_Last_Payment > PAR.Date_of_Last_Payment;

 // PAR.Date of Last Payment = DB1.Date of Last Payment
 PAR.Date_of_Last_Payment = DB1.Date_of_Last_Payment;

 // PAR.Amount of Last Payment = DB1.Amount of Last Payment
 PAR.Amount_of_Last_Payment = DB1.Amount_of_Last_Payment;

 ENDIF;

 //?>>> Determine Amount of Highest A/R Balance across companies
 CASE;

 // IF DB1.Amount of Highest A/R Bal GT PAR.Amount of Highest A/R Bal
 IF DB1.Amount_of_Highest_A_R_Bal > PAR.Amount_of_Highest_A_R_Bal;

 // PAR.Date of Highest A/R Bal. = DB1.Date of Highest A/R Bal.
 PAR.Date_of_Highest_A_R_Bal = DB1.Date_of_Highest_A_R_Bal;

 // PAR.Amount of Highest A/R Bal = DB1.Amount of Highest A/R Bal
 PAR.Amount_of_Highest_A_R_Bal = DB1.Amount_of_Highest_A_R_Bal;

 ENDIF;

 //?>>> Accumulate number of invoices, etc.
 // PAR.Number of Invoices YTD = DB1.Number of Invoices YTD + PAR.Number of Invoices
 PAR.Number_of_Invoices_YTD = DB1.Number_of_Invoices_YTD + PAR.Number_of_Invoices_YTD;

 // PAR.Number of Orders YTD = DB1.Number of Orders YTD + PAR.Number of Orders YTD
 PAR.Number_of_Orders_YTD = DB1.Number_of_Orders_YTD + PAR.Number_of_Orders_YTD;

 // PAR.Number of Credits YTD = DB1.Number of Credits YTD + PAR.Number of Credits YT
 PAR.Number_of_Credits_YTD = DB1.Number_of_Credits_YTD + PAR.Number_of_Credits_YTD;

 // PAR.Number of Payments = DB1.Number of Payments + PAR.Number of Payments
 PAR.Number_of_Payments = DB1.Number_of_Payments + PAR.Number_of_Payments;

 // PAR.Value of Open Orders = DB1.Value of Open Orders + PAR.Value of Open Orders
 PAR.Value_of_Open_Orders = DB1.Value_of_Open_Orders + PAR.Value_of_Open_Orders;

 // PAR.Last YTD Nbr of Orders = PAR.Last YTD Nbr of Orders + DB1.Last YTD Nbr of Or
 PAR.Last_YTD_Nbr_of_Orders = PAR.Last_YTD_Nbr_of_Orders + DB1.Last_YTD_Nbr_of_Orders;

 // PAR.Last YTD Nbr of Credits = PAR.Last YTD Nbr of Credits + DB1.Last YTD Nbr of
 PAR.Last_YTD_Nbr_of_Credits = PAR.Last_YTD_Nbr_of_Credits + DB1.Last_YTD_Nbr_of_Credits;

 // PAR.Last YTD Nbr of Payments = PAR.Last YTD Nbr of Payments + DB1.Last YTD Nbr o
 PAR.Last_YTD_Nbr_of_Payments = PAR.Last_YTD_Nbr_of_Payments
 + DB1.Last_YTD_Nbr_of_Payments;

 // PAR.Last YTD Nbr of Invoices = PAR.Last YTD Nbr of Invoices + DB1.Last YTD Nbr o
 PAR.Last_YTD_Nbr_of_Invoices = PAR.Last_YTD_Nbr_of_Invoices
 + DB1.Last_YTD_Nbr_of_Invoices;

 // PAR.MTD Invoices Paid = PAR.MTD Invoices Paid + DB1.MTD Invoices Paid
 PAR.MTD_Invoices_Paid = PAR.MTD_Invoices_Paid + DB1.MTD_Invoices_Paid;

 //?05/31/24 SP S303457-Start
 // PAR.YTD Invoices Paid     USR = PAR.YTD Invoices Paid     USR + DB1.YTD Invoices Paid
 PAR.YTD_Invoices_Paid_USR = PAR.YTD_Invoices_Paid_USR + DB1.YTD_Invoices_Paid;

 //?05/31/24 SP S303457-End
 // PAR.MTD Days Paid = PAR.MTD Days Paid + DB1.MTD Days Paid
 PAR.MTD_Days_Paid = PAR.MTD_Days_Paid + DB1.MTD_Days_Paid;

 //?05/31/24 SP S303457-Start
 // PAR.YTD Days Paid         USR = PAR.YTD Days Paid         USR + DB1.YTD Days Paid
 PAR.YTD_Days_Paid_USR = PAR.YTD_Days_Paid_USR + DB1.YTD_Days_Paid;

 //?05/31/24 SP S303457-End
 // PAR.Last Year Sales Invoiced = PAR.Last Year Sales Invoiced + DB1.Last Year Sale
 PAR.Last_Year_Sales_Invoiced = PAR.Last_Year_Sales_Invoiced
 + DB1.Last_Year_Sales_Invoiced;

 // PAR.YTD Sales Invoiced = PAR.YTD Sales Invoiced + DB1.YTD Sales Invoiced
 PAR.YTD_Sales_Invoiced = PAR.YTD_Sales_Invoiced + DB1.YTD_Sales_Invoiced;

 // PAR.Current Month = DB1.Current Month
 PAR.Current_Month = DB1.Current_Month;

 //?>>> Sum Aging Due $
 DO;

 // PAR.Age $ Due - Current - CB = PAR.Age $ Due - Current - CB + DB1.Age $ Due - Cu
 PAR.Age_Due_Current_CB = PAR.Age_Due_Current_CB + DB1.Age_Due_Current_CB;

 // PAR.Age $ Due - Aging 1 - CB = PAR.Age $ Due - Aging 1 - CB + DB1.Age $ Due - Ag
 PAR.Age_Due_Aging_1_CB = PAR.Age_Due_Aging_1_CB + DB1.Age_Due_Aging_1_CB;

 // PAR.Age $ Due - Aging 2 - CB = PAR.Age $ Due - Aging 2 - CB + DB1.Age $ Due - Ag
 PAR.Age_Due_Aging_2_CB = PAR.Age_Due_Aging_2_CB + DB1.Age_Due_Aging_2_CB;

 // PAR.Age $ Due - Aging 3 - CB = PAR.Age $ Due - Aging 3 - CB + DB1.Age $ Due - Ag
 PAR.Age_Due_Aging_3_CB = PAR.Age_Due_Aging_3_CB + DB1.Age_Due_Aging_3_CB;

 // PAR.Age $ Due - Aging 4 - CB = PAR.Age $ Due - Aging 4 - CB + DB1.Age $ Due - Ag
 PAR.Age_Due_Aging_4_CB = PAR.Age_Due_Aging_4_CB + DB1.Age_Due_Aging_4_CB;

 // PAR.Age $ Due - Aging 5 - CB = PAR.Age $ Due - Aging 5 - CB + DB1.Age $ Due - Ag
 PAR.Age_Due_Aging_5_CB = PAR.Age_Due_Aging_5_CB + DB1.Age_Due_Aging_5_CB;

 // PAR.Age $ Due-Current-W/O CB = PAR.Age $ Due-Current-W/O CB + DB1.Age $ Due-Curr
 PAR.Age_Due_Current_W_O_CB = PAR.Age_Due_Current_W_O_CB + DB1.Age_Due_Current_W_O_CB;

 // PAR.Age $ Due-Aging 1-W/O CB = PAR.Age $ Due-Aging 1-W/O CB + DB1.Age $ Due-Agin
 PAR.Age_Due_Aging_1_W_O_CB = PAR.Age_Due_Aging_1_W_O_CB + DB1.Age_Due_Aging_1_W_O_CB;

 // PAR.Age $ Due-Aging 2-W/O CB = PAR.Age $ Due-Aging 2-W/O CB + DB1.Age $ Due-Agin
 PAR.Age_Due_Aging_2_W_O_CB = PAR.Age_Due_Aging_2_W_O_CB + DB1.Age_Due_Aging_2_W_O_CB;

 // PAR.Age $ Due-Aging 3-W/O CB = PAR.Age $ Due-Aging 3-W/O CB + DB1.Age $ Due-Agin
 PAR.Age_Due_Aging_3_W_O_CB = PAR.Age_Due_Aging_3_W_O_CB + DB1.Age_Due_Aging_3_W_O_CB;

 // PAR.Age $ Due-Aging 4-W/O CB = PAR.Age $ Due-Aging 4-W/O CB + DB1.Age $ Due-Agin
 PAR.Age_Due_Aging_4_W_O_CB = PAR.Age_Due_Aging_4_W_O_CB + DB1.Age_Due_Aging_4_W_O_CB;

 // PAR.Age $ Due-Aging 5-W/O CB = PAR.Age $ Due-Aging 5-W/O CB + DB1.Age $ Due-Agin
 PAR.Age_Due_Aging_5_W_O_CB = PAR.Age_Due_Aging_5_W_O_CB + DB1.Age_Due_Aging_5_W_O_CB;

 ENDDO;

 // WRK.Company count = CON.1 + WRK.Company count
 WRK.Company_count = 1 + WRK.Company_count;

}


//?05/31/24 SP S303457-End
ENDIF;

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'AR Summarys not found.'
ERROR(USR0172);

ENDIF;

//?Put on hold description on the screen
CASE;

// IF PAR.Order Entry Hold is New Order Hold
IF PAR.Order_Entry_Hold = 'Y';

// DTL.Hold Description Field = CND.*Hold*
DTL.Hold_Description_Field = '*Hold*';

//?Put on hold description on the screen
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Hold Description Field = CND.Blank
DTL.Hold_Description_Field = *BLANK;

ENDIF;

//?Build Aging Header Information
//?** Retrieve information for the Default Aging Code in the new
//?** A/R Aging Control file. Change 2.0 headings usr age heading D & H
//?** to 3.0 aging day 3 & 4              12/01/2006 LJB PK0039
// WRK.A/R Aging Code = CND.Not Entered
WRK.A_R_Aging_Code = *BLANK;

EXECUTE FUNCTION(RTV Default Aging Code RT) TYPE(RTVOBJ) FILE(PMADCPP)          AC1801040;
PARAMETER(WRK.A_R_Aging_Code);
PARAMETER(DTL.A_R_Aging_Days_1);
PARAMETER(DTL.A_R_Aging_Days_2);
PARAMETER(DTL.A_R_Aging_Days_3);
PARAMETER(DTL.A_R_Aging_Days_4);
PARAMETER(WRK.Age_by_Trans_or_Due_Date);
PARAMETER(WRK.Default_Y_N);
PARAMETER(WRK.Record_Status);
{
 //?USER: Initialize routine

 // PAR.A/R Aging Code = CND.Not Entered
 PAR.A_R_Aging_Code = *BLANK;

 //?USER: Process Data record

 // PAR.A/R Aging Code = DB1.A/R Aging Code
 PAR.A_R_Aging_Code = DB1.A_R_Aging_Code;

 CASE;

 // IF DB1.Default Y/N is yes
 IF DB1.Default_Y_N = 'Y';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


// DTL.USR Aging Days 1 = DTL.A/R Aging Days - 1
DTL.USR_Aging_Days_1 = DTL.A_R_Aging_Days_1;

// DTL.USR Aging Days 2 = DTL.A/R Aging Days - 2
DTL.USR_Aging_Days_2 = DTL.A_R_Aging_Days_2;

// DTL.USR aging days 3 = DTL.A/R Aging Days - 3
DTL.USR_aging_days_3 = DTL.A_R_Aging_Days_3;

// DTL.USR aging days 4 = DTL.A/R Aging Days - 4
DTL.USR_aging_days_4 = DTL.A_R_Aging_Days_4;

// DTL.USR Age Heading A = DTL.A/R Aging Days - 1 + CON.1
DTL.USR_Age_Heading_A = DTL.A_R_Aging_Days_1 + 1;

// DTL.USR Age Heading B = DTL.A/R Aging Days - 2 + CON.1
DTL.USR_Age_Heading_B = DTL.A_R_Aging_Days_2 + 1;

// DTL.USR Age Heading C = DTL.A/R Aging Days - 3 + CON.1
DTL.USR_Age_Heading_C = DTL.A_R_Aging_Days_3 + 1;

// DTL.Aging Day 3 = DTL.A/R Aging Days - 4
DTL.Aging_Day_3 = DTL.A_R_Aging_Days_4;

// DTL.USR Age Heading E = DTL.USR Age Heading A
DTL.USR_Age_Heading_E = DTL.USR_Age_Heading_A;

// DTL.USR Age Heading F = DTL.USR Age Heading B
DTL.USR_Age_Heading_F = DTL.USR_Age_Heading_B;

// DTL.USR Age Heading G = DTL.USR Age Heading C
DTL.USR_Age_Heading_G = DTL.USR_Age_Heading_C;

// DTL.Aging Day 4 = DTL.Aging Day 3
DTL.Aging_Day_4 = DTL.Aging_Day_3;

//?Total Past Due for CB
// DTL.USR Tot Past Due CB = DTL.Age $ Due - Aging 1 - CB + DTL.Age $ Due - Aging 2 - CB
DTL.USR_Tot_Past_Due_CB = DTL.Age_Due_Aging_1_CB + DTL.Age_Due_Aging_2_CB;

// DTL.USR Tot Past Due CB = DTL.USR Tot Past Due CB + DTL.Age $ Due - Aging 3 - CB
DTL.USR_Tot_Past_Due_CB = DTL.USR_Tot_Past_Due_CB + DTL.Age_Due_Aging_3_CB;

// DTL.USR Tot Past Due CB = DTL.USR Tot Past Due CB + DTL.Age $ Due - Aging 4 - CB
DTL.USR_Tot_Past_Due_CB = DTL.USR_Tot_Past_Due_CB + DTL.Age_Due_Aging_4_CB;

// DTL.USR Tot Past Due CB = DTL.USR Tot Past Due CB + DTL.Age $ Due - Aging 5 - CB
DTL.USR_Tot_Past_Due_CB = DTL.USR_Tot_Past_Due_CB + DTL.Age_Due_Aging_5_CB;

//?Total Due for CB
// DTL.USR Tot. Due with CB = DTL.Age $ Due - Current - CB + DTL.USR Tot Past Due CB
DTL.USR_Tot_Due_with_CB = DTL.Age_Due_Current_CB + DTL.USR_Tot_Past_Due_CB;

//?Total Past Due w/o CB
// DTL.USR tot past due W/CB = DTL.Age $ Due-Aging 1-W/O CB + DTL.Age $ Due-Aging 2-W/O CB
DTL.USR_tot_past_due_W_CB = DTL.Age_Due_Aging_1_W_O_CB + DTL.Age_Due_Aging_2_W_O_CB;

// DTL.USR tot past due W/CB = DTL.USR tot past due W/CB + DTL.Age $ Due-Aging 3-W/O CB
DTL.USR_tot_past_due_W_CB = DTL.USR_tot_past_due_W_CB + DTL.Age_Due_Aging_3_W_O_CB;

// DTL.USR tot past due W/CB = DTL.USR tot past due W/CB + DTL.Age $ Due-Aging 4-W/O CB
DTL.USR_tot_past_due_W_CB = DTL.USR_tot_past_due_W_CB + DTL.Age_Due_Aging_4_W_O_CB;

// DTL.USR tot past due W/CB = DTL.USR tot past due W/CB + DTL.Age $ Due-Aging 5-W/O CB
DTL.USR_tot_past_due_W_CB = DTL.USR_tot_past_due_W_CB + DTL.Age_Due_Aging_5_W_O_CB;

//?Total due w/o CB
// DTL.USR Tot. Due W/O CB = DTL.USR tot past due W/CB + DTL.Age $ Due-Current-W/O CB
DTL.USR_Tot_Due_W_O_CB = DTL.USR_tot_past_due_W_CB + DTL.Age_Due_Current_W_O_CB;

