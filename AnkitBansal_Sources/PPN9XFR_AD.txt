// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPN9XFR
// ?Date: 14.08.2025 Time: 03:41:22
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(PFS Ship Order Detail RT) TYPE(RTVOBJ) FILE(PPBMCPP)           AC1735898;
PARAMETER(PAR.PFS_Company_Number);
PARAMETER(PAR.PFS_Order_Number);
PARAMETER(PAR.Error_Status);
PARAMETER(PAR.Close_Order_PrePass_STS);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 // PAR.Company Number = PAR.PFS Company Number
 PAR.Company_Number = PAR.PFS_Company_Number;

 // PAR.Order Number = PAR.PFS Order Number
 PAR.Order_Number = PAR.PFS_Order_Number;

 // PAR.Error Status = CND.no
 PAR.Error_Status = 'N';

 EXECUTE FUNCTION(RTV Order Info PFS    RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1735857;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Type_Sales);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Header_Status);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Event_Code);
 PARAMETER(PAR.Trans_Contol_AS400_Plant);
 PARAMETER(PAR.Billing_Activity_Type);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 // PAR.PFS Process Status = DB1.PFS Process Status
 PAR.PFS_Process_Status = DB1.PFS_Process_Status;

 // PAR.PFS Error Reason = CND.No Error
 PAR.PFS_Error_Reason = *BLANK;

 //?VALIDATE
 DO;

 // PAR.Order Sequence Number = DB1.PFS Order Line Item #
 PAR.Order_Sequence_Number = DB1.PFS_Order_Line_Item_Nbr;

 // PAR.Order Secondary Line Seq = CON.1
 PAR.Order_Secondary_Line_Seq = 1;

 // PAR.Item Code = DB1.PFS Item Code
 PAR.Item_Code = DB1.PFS_Item_Code;

 //?04/02/09 PKD Use IF instead of CL to convert date.
 EXECUTE FUNCTION(CVT *YYMD to *CYMD    IF) TYPE(EXCINTFUN)                      AC1929228;
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER(DB1.PFS_Actual_Shipped_Date);
 {
  //?Execute internal function

  //?** YEAR **
  // PAR.Year Code = PAR.DATE / CON.10000 *
  PAR.Year_Code = PAR.DATE / 10000;

  // PAR.Year  NBR USR = PAR.Year Code
  PAR.Year_NBR_USR = PAR.Year_Code;

  // PAR.Year  (Char) USR = CVTVAR(PAR.Year  NBR USR)
  PAR.Year_Char_USR = CVTVAR(PAR.Year_NBR_USR);

  //?** MONTH **
  // PAR.Month                 USR = PAR.DATE / CON.100 *
  PAR.Month_USR = PAR.DATE / 100;

  // PAR.Month (Char) USR = CVTVAR(PAR.Month                 USR)
  PAR.Month_Char_USR = CVTVAR(PAR.Month_USR);

  //?** DAY **
  // PAR.Day of Month USR = PAR.DATE
  PAR.Day_of_Month_USR = PAR.DATE;

  // PAR.Day   (Char) USR = CVTVAR(PAR.Day of Month USR)
  PAR.Day_Char_USR = CVTVAR(PAR.Day_of_Month_USR);

  //?CENTURY+YEAR
  CASE;

  // IF PAR.Year Code is Twentieth Century
  IF PAR.Year_Code <= 1999;

  // PAR.Date (Alpha) USR = CONCAT(CON.0,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '0' + PAR.Year_Char_USR (*ZERO);

  //?CENTURY+YEAR
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date (Alpha) USR = CONCAT(CON.1,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '1' + PAR.Year_Char_USR (*ZERO);

  ENDIF;

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Month (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Month_Char_USR (*ZERO);

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Day   (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date                  USR = CVTVAR(PAR.Date (Alpha) USR)
  PAR.Date_USR = CVTVAR(PAR.Date_Alpha_USR);

 }

 EXECUTE FUNCTION(RTV Qty/Wgt Ord/Sched RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1648058;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Detail_Line_Status);
 PARAMETER(NLL.Quantity_Ordered);
 PARAMETER(NLL.Weight_Ordered);
 PARAMETER(PAR.Quantity_Scheduled);
 PARAMETER(PAR.Weight_Scheduled);
 PARAMETER(NLL.Requested_Ship_Date);
 PARAMETER(NLL.Consumed_Item_Code);
 PARAMETER(NLL.Item_Age_Days);
 PARAMETER(NLL.Production_Ovr_AgeDte_Fr);
 PARAMETER(NLL.Production_Ovr_AgeDte_To);
 PARAMETER(LCL.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?VAL:  Order Detail Exists
 CASE;

 // IF LCL.Record Found USR is Record Not Found
 IF ( LCL.Record_Found_USR = 'N';

 // AND DB1.PFS Shipped Quantity is GT Zero
 AND DB1.PFS_Shipped_Quantity > *ZERO );

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Order Detail Not Found
 PAR.PFS_Error_Reason = 'ORDTNF';

 //?VAL:  Order Detail Exists
 // IF PAR.Detail Line Status is Cancelled
 IF PAR.Detail_Line_Status = 'X';

 // AND DB1.PFS Shipped Quantity is GT Zero
 AND DB1.PFS_Shipped_Quantity > *ZERO;

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Order Detail Cancelled
 PAR.PFS_Error_Reason = 'DTLCAN';

 ENDIF;

 //?11/03/08 PKD Commenting out to avoid confusion.  Not and error.
 //?             Informational only.
 EXECUTE FUNCTION(PFS Rtv Total Shipped RT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC1735994;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Quantity_Shipped_Total);
 PARAMETER(PAR.Weight_Shipped_Total);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Quantity Shipped Total = PAR.Quantity Shipped Total + DB1.Case Quantity
  PAR.Quantity_Shipped_Total = PAR.Quantity_Shipped_Total + DB1.Case_Quantity;

  // PAR.Weight Shipped Total = PAR.Weight Shipped Total + DB1.Case Weight
  PAR.Weight_Shipped_Total = PAR.Weight_Shipped_Total + DB1.Case_Weight;

 }

 //?VAL:  Shipped Quantity
 CASE;

 // IF DB1.PFS Shipped Quantity NE PAR.Quantity Shipped Total
 IF DB1.PFS_Shipped_Quantity <> PAR.Quantity_Shipped_Total;

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Shipped Quantity
 PAR.PFS_Error_Reason = 'SHPQTY';

 ENDIF;

 //?VAL:  Shipped Weight
 CASE;

 // IF DB1.PFS Shipped Weight NE PAR.Weight Shipped Total
 IF DB1.PFS_Shipped_Weight <> PAR.Weight_Shipped_Total;

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Shipped Weight
 PAR.PFS_Error_Reason = 'SHPWGT';

 ENDIF;

 //?ERR:  Do not select Record
 CASE;

 // IF PAR.PFS Process Status is Error
 IF PAR.PFS_Process_Status = 2;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 ENDIF;

 ENDDO;

 //?PROCESS:  Selected Record
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // AND PAR.Close Order PrePass STS is Post
 AND PAR.Close_Order_PrePass_STS = 'PS';

 // PAR.Detail Line Status = CND.Confirmed
 PAR.Detail_Line_Status = 'R';

 EXECUTE FUNCTION(PFS Upd Order Detail  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1736044;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Detail_Line_Status);
 PARAMETER(PAR.Quantity_Shipped_Total);
 PARAMETER(PAR.Weight_Shipped_Total);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER(PAR.Reason_Code);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Not cancelled
  IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

  // PAR.Ship To Customer = DB1.Ship To Customer
  PAR.Ship_To_Customer = DB1.Ship_To_Customer;

  // PAR.Work Over/Short Status = CND.*Blank
  PAR.Work_Over_Short_Status = *BLANK;

  //?INIT:  Work Over/Short Reason
  CASE;

  // IF DB1.Quantity Scheduled LT PAR.Quantity Shipped Total
  IF DB1.Quantity_Scheduled < PAR.Quantity_Shipped_Total;

  // PAR.Work Over/Short Status = CND.Overage
  PAR.Work_Over_Short_Status = 'O';

  //?INIT:  Work Over/Short Reason
  // IF DB1.Quantity Scheduled GT PAR.Quantity Shipped Total
  IF DB1.Quantity_Scheduled > PAR.Quantity_Shipped_Total;

  // PAR.Work Over/Short Status = CND.Short
  PAR.Work_Over_Short_Status = 'S';

  ENDIF;

  // PAR.Work Confirm Status = CND.Processed
  PAR.Work_Confirm_Status = 'P';

  EXECUTE FUNCTION(PFS Chg Order Detail  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1736045;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Detail_Line_Status);
  PARAMETER(DB1.Detail_Line_Status_Last);
  PARAMETER(PAR.Work_Confirm_Status);
  PARAMETER(PAR.Work_Over_Short_Status);
  PARAMETER(PAR.Quantity_Shipped_Total);
  PARAMETER(PAR.Weight_Shipped_Total);
  PARAMETER(PAR.Actual_Shipped_Date);
  PARAMETER('04');
  PARAMETER(PAR.Reason_Code);
  CASE;

  // IF PAR.Quantity Shipped Total is Equal to zero
  IF PAR.Quantity_Shipped_Total = *ZERO;

  EXECUTE FUNCTION(Crt Manifest Detail   IF) TYPE(EXCINTFUN)                      AC1513153;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(*ZERO);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Next Case Seq#    RT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC1513160;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Case_Sequence_Number);
   {
    //?USER: Processing if Data record not found

    // PAR.Case Sequence Number = CON.1
    PAR.Case_Sequence_Number = 1;

    //?USER: Process Data record

    // PAR.Case Sequence Number = DB1.Case Sequence Number + CON.1
    PAR.Case_Sequence_Number = DB1.Case_Sequence_Number + 1;

    QUIT;

   }

   CASE;

   // IF PAR.Production Date is entered
   IF PAR.Production_Date <> *ZERO;

   EXECUTE FUNCTION(RTV Label Date         RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1479448;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Label_Date);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

   //?R11974 DN 10/31/17-Calc/Update Net Weight in Kg for Seaboard Organization.
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?NOTE: Incoming Case Weight can be zero.
   // PAR.Manifest Net Weight - Kg = CON.*ZERO
   PAR.Manifest_Net_Weight_Kg = *ZERO;

   EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
   PARAMETER(PAR.Company_Number);
   PARAMETER(NLL.Plant_Company_Sts);
   PARAMETER(LCL.Company_Organization);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.Company Organization is Seaboard
   IF LCL.Company_Organization = 'S';

   CASE;

   // IF PAR.Case Weight is NE *ZERO
   IF PAR.Case_Weight <> *ZERO;

   EXECUTE FUNCTION(Clc Weight to Kilogram IF) TYPE(EXCINTFUN)                     AC2145548;
   PARAMETER(PAR.Case_Weight);
   PARAMETER(PAR.Manifest_Net_Weight_Kg);
   {
    //?Execute internal function

    //?Round Case Weight to 1 Decimal Place.
    //?RMC 10/14/19 increase precision - DO NOT DO THIS  10/16/19 PER AARON C
    // LCL.Net Weight Kg USR 11.4 = PAR.Case Weight * CON..45359 *
    LCL.Net_Weight_Kg_USR_11_4 = PAR.Case_Weight * .45359;

    // LCL.Net Weight Kilograms = LCL.Net Weight Kg USR 11.4 * CON.1 *Rounded
    LCL.Net_Weight_Kilograms = LCL.Net_Weight_Kg_USR_11_4 * 1 'H';

    // PAR.Manifest Net Weight - Kg = LCL.Net Weight Kilograms
    PAR.Manifest_Net_Weight_Kg = LCL.Net_Weight_Kilograms;

   }

   ENDIF;

   ENDIF;

   ENDIF;

   //?R11974 DN 10/31/17-Set Manifest Net Weight - Kg.
   EXECUTE FUNCTION(Crt Manifest Detail   CR) TYPE(CRTOBJ) FILE(OMFNCPP)           AC1513165;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Case_Sequence_Number);
   PARAMETER(PAR.Case_Quantity);
   PARAMETER(PAR.Case_Weight);
   PARAMETER(PAR.Inventory_Updated_Flag);
   PARAMETER(PAR.Label_Date);
   PARAMETER(PAR.PT_Serial_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(WRK.Manifest_Shift);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Manifest_Net_Weight_Kg);
   PARAMETER(WRK.Manifest_Unused_Status_1A);
   PARAMETER(WRK.Manifest_Unused_Status_2A);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  ENDIF;

  ENDIF;

 }

 //?VAL:  Average Shipped Weight
 CASE;

 // IF PAR.Quantity Shipped Total is not equal zero
 IF PAR.Quantity_Shipped_Total <> *ZERO;

 // PAR.Weight Display 1 = PAR.Weight Shipped Total / PAR.Quantity Shipped Total *
 PAR.Weight_Display_1 = PAR.Weight_Shipped_Total / PAR.Quantity_Shipped_Total;

 EXECUTE FUNCTION(RTV Qty Min/Max        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1402211;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Minimum_Weight_Per_Case);
 PARAMETER(LCL.Maximum_Weight_Per_Case);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Weight Display 1 LT LCL.Minimum Weight Per Case
 IF PAR.Weight_Display_1 < LCL.Minimum_Weight_Per_Case;

 // OR PAR.Weight Display 1 GT LCL.Maximum Weight Per Case
 OR PAR.Weight_Display_1 > LCL.Maximum_Weight_Per_Case;

 EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
 PARAMETER(PAR.Company_Number);
 PARAMETER('MINMAXWGT');
 PARAMETER(LCL.System_Value_Alpha);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // WRK.DL List ID = LCL.System Value Alpha
 WRK.DL_List_ID = LCL.System_Value_Alpha;

 // Retrieve message - 'Load: &1 Order: &2 Item: &3  Average Min/Max Weight Exceeded.'
 LCL.Office_Message_USR = RTVMSG(USR3287);
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Item_Code);

 // Call program SND Pager Msg (MPLUS) UP.
 CALL PROGRAM(SND Pager Msg (MPLUS) UP) ('POMSUPC');
 PARAMETER(WRK.DL_List_ID);
 PARAMETER(LCL.Office_Message_USR);

 ENDIF;

 ENDIF;

 ENDIF;

 // PAR.PFS Process Status = CND.Processed
 PAR.PFS_Process_Status = 1;

 ENDIF;

 CASE;

 // IF PAR.Close Order PrePass STS is Pre-Pass
 IF PAR.Close_Order_PrePass_STS = 'PP';

 // PAR.PFS Process Status = CND.Not Processed
 PAR.PFS_Process_Status = *ZERO;

 ENDIF;

 EXECUTE FUNCTION(Chg PrcSts/ErrRsn     CH) TYPE(CHGOBJ) FILE(PPBMCPP)           AC1736042;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER(DB1.PFS_Transaction_Date);
 PARAMETER(DB1.PFS_Transaction_Time);
 PARAMETER(DB1.PFS_Transaction_Seq);
 PARAMETER(DB1.PFS_Order_Number);
 PARAMETER(DB1.PFS_Order_Line_Item_Nbr);
 PARAMETER(DB1.PFS_Substitution_Line_Nbr);
 PARAMETER(PAR.PFS_Process_Status);
 PARAMETER(PAR.PFS_Error_Reason);
 //?USER: Exit processing

 CASE;

 // IF PAR.Error Status is no
 IF PAR.Error_Status = 'N';

 // AND PAR.Close Order PrePass STS is Post
 AND PAR.Close_Order_PrePass_STS = 'PS';

 // WRK.Event Number = CND.Equal zero
 WRK.Event_Number = *ZERO;

 EXECUTE FUNCTION(RTV Next Event Number  RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1306444;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(WRK.Event_Number);
 {
  //?USER: Processing if Data record not found

  // PAR.Event Number = CON.1
  PAR.Event_Number = 1;

  //?USER: Process Data record

  // PAR.Event Number = DB1.Event Number
  PAR.Event_Number = DB1.Event_Number;

 }

 // WRK.Event Number = WRK.Event Number + CON.1
 WRK.Event_Number = WRK.Event_Number + 1;

 EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(WRK.Event_Number);
 PARAMETER('04');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('IN');
 PARAMETER(JOB.*Job_date);
 PARAMETER('N');
 PARAMETER('N');
 PARAMETER('N');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Ship_To_Customer);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 EXECUTE FUNCTION(CHG Ord Event & Stat.  CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1306469;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER('R');
 PARAMETER(LCL.Header_Status_Last);
 PARAMETER('04');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program TRG Order Hdr CHG Trig XT.
  CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Ship_To_Name);
  PARAMETER(DB1.Ship_To_Address_Line_1);
  PARAMETER(DB1.Ship_To_Address_Line_2);
  PARAMETER(DB1.Ship_To_Address_Line_3);
  PARAMETER(DB1.Ship_To_City);
  PARAMETER(DB1.Ship_To_State_Code);
  PARAMETER(DB1.Ship_To_Zip_Postal_Code);
  PARAMETER(DB1.Bill_to_Customer);
  PARAMETER(DB1.Bill_to_Name);
  PARAMETER(DB1.Bill_to_Address_Line_1);
  PARAMETER(DB1.Bill_to_Address_Line_2);
  PARAMETER(DB1.Bill_to_Address_Line_3);
  PARAMETER(DB1.Bill_to_City);
  PARAMETER(DB1.Bill_to_State_Code);
  PARAMETER(DB1.Bill_to_Zip_Postal_Code);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Order_Date);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Cancel_Date);
  PARAMETER(DB1.Terms_Code);
  PARAMETER(DB1.Special_Instructions);
  PARAMETER(DB1.Special_Instructions_2);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Order_in_Use);
  PARAMETER(DB1.Header_Status);
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER(DB1.Order_Type_Print_Status);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.User_Original_Entry);
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.Order_Value_Total);
  PARAMETER(DB1.Order_Weight_Total);
  PARAMETER(DB1.Credit_Hold);
  PARAMETER(DB1.Production_Hold);
  PARAMETER(DB1.New_Customer_Hold);
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(DB1.Requested_Delivery_Time);
  PARAMETER(DB1.Accounts_Receiv_Ent_1);
  PARAMETER(DB1.Accounts_Receiv_Ent_2);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.LTL_Flag);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Shrink_Wrap);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Reefer_Temperature);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Attach_to_Invoice_Number);
  PARAMETER(DB1.Load_Plan_Order);
  PARAMETER(DB1.Print_Pick_Slip);
  PARAMETER(DB1.Resell_Reference_Number);
  PARAMETER(DB1.Special_Comment_1);
  PARAMETER(DB1.Special_Comment_2);
  PARAMETER(DB1.Affect_Auto_Accruals);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Manager_Level_Code);
  PARAMETER(DB1.VP_Level_Code);
  PARAMETER(DB1.Attach_to_Order_Number);
  PARAMETER(DB1.Reason_for_Price_Audit);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Invoice_Date);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Trans_Contol_AS400_Plant);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.A_R_order_Value_Total);
  PARAMETER(DB1.Billing_Activity_Type);
  PARAMETER(DB1.Block_Order_Flag);
  PARAMETER(DB1.Order_Certification_Flag);
  PARAMETER(DB1.Invoice_Order_Value_Tot);
  PARAMETER(DB1.Process_Sts_for_3C);
  PARAMETER(DB1.Order_Conf_Fax_Sts);
  PARAMETER(DB1.Manifest_Fax_Sts);
  PARAMETER(DB1.Invoice_Fax_Sts);
  PARAMETER(DB1.Transfer_in_Storage_Ind);
  PARAMETER(DB1.Email_Cust_On_Order_Ship);
  PARAMETER(DB1.Order_Emailed);
  PARAMETER(DB1.Export_Docs_Go_w_Driver);
  PARAMETER(DB1.Shipping_Temp_Code_C_F);
  PARAMETER(DB1.Broker_Order_Status);
  PARAMETER(DB1.Air_Freight_Order);
  PARAMETER(DB1.Order_Requires_Review);
  PARAMETER(DB1.OH_Load_Plan_Ready);
  PARAMETER(DB1.Export_USDA_Approved);
  PARAMETER(DB1.HPB_Ship_to_Warehouse);
  PARAMETER(DB1.OH_TF_Exempt_Code);
  PARAMETER(DB1.OH_Appt_Confirmation_Dt);
  PARAMETER(DB1.JPN_Invoice_Issuance_Date);
  PARAMETER(DB1.Load_Actual_Shipped_Date);
  PARAMETER(DB1.Load_BOL_Complete_Date);
  PARAMETER(DB1.Load_Truck_Departure_Date);
  PARAMETER(DB1.Maximum_Gross_Weight);
  PARAMETER(DB1.Time_of_Original_Entry);
  PARAMETER(DB1.OH_Appt_Confirmation_Tm);
  PARAMETER(DB1.Load_BOL_Complete_Time);
  PARAMETER(DB1.Load_Truck_Departure_Time);
  PARAMETER(DB1.Act_Frt_Reference_Amount);
  PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
  PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
  PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
  PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);

 }

 // Call program ADD Ready to Confirm   XF.
 CALL PROGRAM(ADD Ready to Confirm   XF) ('PDN2XFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER(LCL.Access_Denied_Y_N);
 PARAMETER(PAR.Scheduled_Ship_Date);

 ENDIF;

}


