// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBLEE1R
// ?Date: 14.08.2025 Time: 03:48:24
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize key screen

MOVE *ALL (To: KEY From: PAR);

//?USER: Validate key screen

EXECUTE FUNCTION(Rtv HPS Qtr B/E Dte   RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1919711;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Accounting_Year);
PARAMETER(PAR.Period_Ending_Date);
PARAMETER(LCL.Period_Beginning_Date);
PARAMETER(LCL.Period_Ending_Date);
{
 //?USER: Initialize routine

 // LCL.First Time Flag = CND.Yes
 LCL.First_Time_Flag = 'Y';

 // LCL.Count USR = CON.*ZERO
 LCL.Count_USR = *ZERO;

 // LCL.Day NBR USR = CON.*ZERO
 LCL.Day_NBR_USR = *ZERO;

 // LCL.Accounting Quarter = CON.*ZERO
 LCL.Accounting_Quarter = *ZERO;

 //?USER: Process Data record

 //?FIRST TIME
 CASE;

 // IF LCL.First Time Flag is Yes
 IF LCL.First_Time_Flag = 'Y';

 // LCL.Count USR = CON.1
 LCL.Count_USR = 1;

 // LCL.Day NBR USR = CON.1
 LCL.Day_NBR_USR = 1;

 // LCL.HPS Calendar Week = DB1.HPS Calendar Week
 LCL.HPS_Calendar_Week = DB1.HPS_Calendar_Week;

 // PAR.Period Beginning Date = DB1.Post to G/L Date
 PAR.Period_Beginning_Date = DB1.Post_to_G_L_Date;

 // LCL.First Time Flag = CND.NO
 LCL.First_Time_Flag = 'N';

 ENDIF;

 //?CHG: HPS Calendar Week
 CASE;

 // IF DB1.HPS Calendar Week NE LCL.HPS Calendar Week
 IF DB1.HPS_Calendar_Week <> LCL.HPS_Calendar_Week;

 // LCL.Count USR = LCL.Count USR + CON.1
 LCL.Count_USR = LCL.Count_USR + 1;

 // LCL.Day NBR USR = CON.1
 LCL.Day_NBR_USR = 1;

 // LCL.HPS Calendar Week = DB1.HPS Calendar Week
 LCL.HPS_Calendar_Week = DB1.HPS_Calendar_Week;

 CASE;

 // IF LCL.Count USR is One
 IF LCL.Count_USR = 1;

 // PAR.Period Beginning Date = DB1.Post to G/L Date
 PAR.Period_Beginning_Date = DB1.Post_to_G_L_Date;

 ENDIF;

 //?CHG: HPS Calendar Week
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Day NBR USR = LCL.Day NBR USR + CON.1
 LCL.Day_NBR_USR = LCL.Day_NBR_USR + 1;

 ENDIF;

 //?Last Day of the 13th Week
 CASE;

 // IF LCL.Count USR is Thirteen
 IF LCL.Count_USR = 13;

 // AND LCL.Day NBR USR is Seven
 AND LCL.Day_NBR_USR = 7;

 // LCL.Accounting Quarter = LCL.Accounting Quarter + CON.1
 LCL.Accounting_Quarter = LCL.Accounting_Quarter + 1;

 CASE;

 // IF LCL.Accounting Quarter EQ PAR.Accounting Quarter
 IF LCL.Accounting_Quarter = PAR.Accounting_Quarter;

 // PAR.Period Ending Date = DB1.Post to G/L Date
 PAR.Period_Ending_Date = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

 // LCL.Count USR = CON.*ZERO
 LCL.Count_USR = *ZERO;

 ENDIF;

 //?USER: Exit processing

 // PAR.Period Ending Date = DB1.Post to G/L Date
 PAR.Period_Ending_Date = DB1.Post_to_G_L_Date;

}


//?USER: Initialize detail screen (new record)

MOVE *ALL (To: DTL From: PAR);

//?USER: Initialize detail screen (existing record)

MOVE *ALL (To: DTL From: PAR);

//?USER: Validate detail screen fields

CASE;

// IF DTL.Lift % From Prior Year is not equal to zeros
IF DTL.Percent_of_Prior_Yr_Vol <> *ZERO;

CASE;

// IF DTL.Sales Volume Prior Yr Act is Zeros
IF DTL.Prior_Year_Actual_Volume = *ZERO;

// Send error message - 'Prior Year Sales Volume is Required.'
ERROR(USR4680);
MSGPARM(DTL.Prior_Year_Actual_Volume);

ENDIF;

ENDIF;

//?CALC: Detail screen function fields

EXECUTE FUNCTION(Market Desc DRV) TYPE(DRVFLD)                                  AC1904224;
PARAMETER(DTL.Market_Desc_DRV);
PARAMETER(DTL.Market_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Description       RT) TYPE(RTVOBJ) FILE(PMDDREP)           AC1859875;
 PARAMETER(PAR.Market_Code);
 PARAMETER(PAR.Market_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Validate detail screen relations

//?CALC: Sales Volume Quota
CASE;

// IF DTL.Lift % From Prior Year is Greater than zero
IF DTL.Percent_of_Prior_Yr_Vol > *ZERO;

// Sales Volume Quota
DTL.Sales_Volume_Target_Quota = DTL.Prior_Year_Actual_Volume * (                                   +
DTL.Percent_of_Prior_Yr_Vol / 100 'H' ) 'H';

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt SM Qtrly Quota    CR) TYPE(CRTOBJ) FILE(PMDHREP)           AC1863984;
PARAMETER(DTL.Market_Code);
PARAMETER(DTL.Product_Type_Code);
PARAMETER(DTL.Period_Ending_Date);
PARAMETER(DTL.Accounting_Year);
PARAMETER(DTL.Accounting_Quarter);
PARAMETER(DTL.Prior_Year_Actual_Volume);
PARAMETER(DTL.Sales_Quota_Type_NOT_USED);
PARAMETER(DTL.Percent_of_Prior_Yr_Vol);
PARAMETER(DTL.Sales_Volume_Target_Quota);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  //?*** Set RECORD STATUS field. ***
  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  //?*** Set CREATE fields. ***
  // PAR.Create Date = JOB.*Job date
  PAR.Create_Date = JOB.*Job_date;

  // PAR.Create Time = JOB.*Job time
  PAR.Create_Time = JOB.*Job_time;

  // PAR.Create User = JOB.*USER
  PAR.Create_User = JOB.*USER;

  // PAR.Create Program = JOB.*PROGRAM
  PAR.Create_Program = JOB.*PROGRAM;

  //?*** Set CHANGE fields. ***
  // PAR.Change Date = CON.*ZERO
  PAR.Change_Date = *ZERO;

  // PAR.Change Time = CON.*ZERO
  PAR.Change_Time = *ZERO;

  // PAR.Change User = CON.*BLANK
  PAR.Change_User = *BLANK;

  // PAR.Change Program = CON.*BLANK
  PAR.Change_Program = *BLANK;

 }

 //?USER: Processing after Data update

 // Call program Bld Weekly Quota      XF.
 CALL PROGRAM(Bld Weekly Quota      XF) ('PMRRXFR');
 PARAMETER(PAR.Market_Code);
 PARAMETER(PAR.Product_Type_Code);
 PARAMETER(PAR.Period_Ending_Date);
 PARAMETER(PAR.Accounting_Year);
 PARAMETER(PAR.Accounting_Quarter);

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg SM Qtrly Quota    CH) TYPE(CHGOBJ) FILE(PMDHREP)           AC1863985;
PARAMETER(DTL.Market_Code);
PARAMETER(DTL.Product_Type_Code);
PARAMETER(DTL.Period_Ending_Date);
PARAMETER(DTL.Accounting_Year);
PARAMETER(DTL.Accounting_Quarter);
PARAMETER(DTL.Prior_Year_Actual_Volume);
PARAMETER(DTL.Sales_Quota_Type_NOT_USED);
PARAMETER(DTL.Percent_of_Prior_Yr_Vol);
PARAMETER(DTL.Sales_Volume_Target_Quota);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

 //?USER: Processing after Data update

 // Call program Bld Weekly Quota      XF.
 CALL PROGRAM(Bld Weekly Quota      XF) ('PMRRXFR');
 PARAMETER(PAR.Market_Code);
 PARAMETER(PAR.Product_Type_Code);
 PARAMETER(PAR.Period_Ending_Date);
 PARAMETER(PAR.Accounting_Year);
 PARAMETER(PAR.Accounting_Quarter);

}


//?USER: Process command keys

// PGM.*Continue transaction = CND.*NO
PGM.*Continue_transaction = 'N';

//?USER: Exit program processing

CASE;

// IF KEY.*CMD key is *Exit
IF KEY.*CMD_key = '03';

// PAR.*Reload subfile = CND.*NO
PAR.*Reload_subfile = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.*Reload subfile = CND.*YES
PAR.*Reload_subfile = 'Y';

ENDIF;

