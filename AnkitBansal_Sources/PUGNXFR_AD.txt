// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PUGNXFR
// ?Date: 14.08.2025 Time: 03:50:20
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Explanation of Auto Post Inventory Restoration
DO;

//?The purpose of this function is to Auto-Post Inventory Restoration.
//?This program will be invoked from a Job sched job:
//?It is performing the same functionality as option 1=Process
//?Carlisle Upload File on the Work With Plant Floor Restoration for
//?EDI Warehouse for the selected Company with the EDI Interchange
//? WHSINQ set to Active
//?Next, it performs the same functionality as option 10=Post on the
//?Work With Physical Count (OMJHDFR) function.  Only records in the
//?Physical Count Control file with a Cycle Status of O=Open are
//?processed.
//?When completed Send Email based on ESEND INVRSTGUY or INVRSTSTJ
ENDDO;

//?Process EID 846 Upload File - that was written to PFS Inventory Rst file
EXECUTE FUNCTION(PRC EDI Post Inv Rest  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC2148606;
PARAMETER(PAR.Warehouse_Code);
{
 //?USER: Process Data record

 //?Programmer Explanation
 DO;

 //?The Auto Inv Restoration flag designates if the Warehouse is to
 //?be processed with the Automated Inventory Restoration process.
 //?This is the same logic as 1=Process Upload File on the
 //?Work With Plant Floor Restoration (PPT1DFR) program.
 //?This process will create records in the Physical Count Control
 //?file with a Cycle Status of O=Open.
 ENDDO;

 //?Set LCL fields used in calculation to Zero
 DO;

 // LCL.Quantity Adjustment 2 USR = CON.*ZERO
 LCL.Quantity_Adjustment_2_USR = *ZERO;

 // LCL.Weight 1.1             .U = CON.*ZERO
 LCL.Weight_1_1_U = *ZERO;

 // LCL.Quantity Inv On-Hand USR = CON.*ZERO
 LCL.Quantity_Inv_On_Hand_USR = *ZERO;

 // LCL.Weight 1.2             .U = CON.*ZERO
 LCL.Weight_1_2_U = *ZERO;

 ENDDO;

 EXECUTE FUNCTION(Rtv Total Qty,Wgt     RT) TYPE(RTVOBJ) FILE(PPB0CPP)           AC1769894;
 PARAMETER(DB1.Shipping_Company);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(LCL.Quantity_Adjustment_2_USR);
 PARAMETER(LCL.Weight_1_1_U);
 PARAMETER(LCL.PFS_Transaction_Date);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  // WRK.First Time Flag = CND.Yes
  WRK.First_Time_Flag = 'Y';

  //?USER: Process Data record

  // PAR.Quantity Adjustment 2 USR = PAR.Quantity Adjustment 2 USR + DB1.PFS On Hand Quantity
  PAR.Quantity_Adjustment_2_USR = PAR.Quantity_Adjustment_2_USR + DB1.PFS_On_Hand_Quantity;

  // PAR.Weight 1.1             .U = PAR.Weight 1.1             .U + DB1.PFS On Hand Weight
  PAR.Weight_1_1_U = PAR.Weight_1_1_U + DB1.PFS_On_Hand_Weight;

  CASE;

  // IF WRK.First Time Flag is Yes
  IF WRK.First_Time_Flag = 'Y';

  // PAR.PFS Transaction Date = DB1.PFS Transaction Date
  PAR.PFS_Transaction_Date = DB1.PFS_Transaction_Date;

  // WRK.First Time Flag = CND.NO
  WRK.First_Time_Flag = 'N';

  ENDIF;

 }

 CASE;

 // IF DB1.Lot Tracking Flag is yes
 IF DB1.Lot_Tracking_Flag = 'Y';

 EXECUTE FUNCTION(Rtv Item Loc Qty,Wgt  RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC1769896;
 PARAMETER(DB1.Shipping_Company);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(LCL.Quantity_Inv_On_Hand_USR);
 PARAMETER(LCL.Weight_1_2_U);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Quantity Inv On-Hand USR = PAR.Quantity Inv On-Hand USR + DB1.ILL Item Qty On-Hand
  PAR.Quantity_Inv_On_Hand_USR = PAR.Quantity_Inv_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

  // PAR.Weight 1.2             .U = PAR.Weight 1.2             .U + DB1.ILl Item Wgt On-Hand
  PAR.Weight_1_2_U = PAR.Weight_1_2_U + DB1.ILL_Item_Wgt_On_Hand;

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Whse OH Qty/Wgt   RT) TYPE(RTVOBJ) FILE(CAB1REP)           AC1769903;
 PARAMETER(DB1.Shipping_Company);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(LCL.Weight_1_2_U);
 PARAMETER(LCL.Quantity_Inv_On_Hand_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Quantity on Hand - Weight = PAR.Quantity on Hand - Weight + DB1.Quantity on Hand - Weight
  PAR.Quantity_on_Hand_Weight = PAR.Quantity_on_Hand_Weight + DB1.Quantity_on_Hand_Weight;

  // PAR.Quantity Inv On-Hand USR = PAR.Quantity Inv On-Hand USR + DB1.Quantity on Hand - U/M1
  PAR.Quantity_Inv_On_Hand_USR = PAR.Quantity_Inv_On_Hand_USR + DB1.Quantity_on_Hand_UOM1;

 }

 ENDIF;

 // LCL.Quantity Loc Var USR = LCL.Quantity Adjustment 2 USR - LCL.Quantity Inv On-Hand USR
 LCL.Quantity_Loc_Var_USR = LCL.Quantity_Adjustment_2_USR - LCL.Quantity_Inv_On_Hand_USR;

 // LCL.Weight 1.3             .U = LCL.Weight 1.1             .U - LCL.Weight 1.2             .U
 LCL.Weight_1_3_U = LCL.Weight_1_1_U - LCL.Weight_1_2_U;

 CASE;

 // IF LCL.Quantity Adjustment 2 USR is Equal to Zero
 IF LCL.Quantity_Adjustment_2_USR = *ZERO;

 // AND PAR.Warehouse Code is Not NA3
 AND PAR.Warehouse_Code <> 'NA3';

 // AND PAR.Warehouse Code is Not NA5
 AND PAR.Warehouse_Code <> 'NA5';

 //?Do not process
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Fresh  / or Frozen
 CASE;

 // IF DB1.Warehouse Type is Fresh
 IF DB1.Warehouse_Type = 'FR';

 // Call program PFS Inv Physical FRSH XF.
 CALL PROGRAM(PFS Inv Physical FRSH XF) ('PPTSXFR');
 PARAMETER(DB1.Shipping_Company);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER('EDI846');

 //?Fresh  / or Frozen
 // IF DB1.Warehouse Type is Frozen
 IF DB1.Warehouse_Type = 'FZ';

 CASE;

 // IF DB1.Lot Tracking Flag is yes
 IF DB1.Lot_Tracking_Flag = 'Y';

 // Call program PFS Inventory Rst FRZ XF.
 CALL PROGRAM(PFS Inventory Rst FRZ XF) ('PPSEXFR');
 PARAMETER(DB1.Shipping_Company);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER('EDI846');

 // Call program PRC AutoPost LotTrkWhs XF.
 CALL PROGRAM(PRC AutoPost LotTrkWhs XF) ('POLJXFR');
 PARAMETER(DB1.Shipping_Company);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(*BLANK);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program PFS Inv Physical FRSH XF.
 CALL PROGRAM(PFS Inv Physical FRSH XF) ('PPTSXFR');
 PARAMETER(DB1.Shipping_Company);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER('EDI846');

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Post Open Physcial Count Control records
EXECUTE FUNCTION(PRC EDI Post Inv Rest  RT) TYPE(RTVOBJ) FILE(OMHCCPP)          AC2148607;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
{
 //?USER: Process Data record

 //?E3191 JJH 08/21/14 Print Physical to Book Comparison
 // Call program Rtv Alpha Value       XF.
 CALL PROGRAM(Rtv Alpha Value       XF) ('POMTXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER('INVRSTPT');
 PARAMETER(LCL.PRT_Printer_Device);

 // Call program EXC Command OVRPRTF    UP.
 CALL PROGRAM(EXC Command OVRPRTF    UP) ('PDQVUPC');
 PARAMETER('ICPYPFR$');
 PARAMETER(LCL.PRT_Printer_Device);
 PARAMETER(*YES);
 PARAMETER(*YES);
 PARAMETER(1);

 // Call program Prt Phys to Book Cmpar PF.
 CALL PROGRAM(Prt Phys to Book Cmpar PF) ('ICPYPFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Cycle_Count_Code);
 PARAMETER('Y');

 //?Post Inventory Restoration for each Company/Warehouse O=Open
 // LCL.Company Number Pass   USR = PAR.Company Number
 LCL.Company_Number_Pass_USR = PAR.Company_Number;

 // LCL.Date 1          PASS  USR = DB1.Physical Start Date
 LCL.Date_1_PASS_USR = DB1.Physical_Start_Date;

 // LCL.Warehouse Code = DB1.Warehouse Code
 LCL.Warehouse_Code = DB1.Warehouse_Code;

 // LCL.Cycle Count Code - IB = DB1.Cycle Count Code
 LCL.Cycle_Count_Code_IB = DB1.Cycle_Count_Code;

 // Call program PMT Pmt/Pas Co/Wh/Cy/D UP.
 CALL PROGRAM(PMT Pmt/Pas Co/Wh/Cy/D UP) ('PDW3UPR');
 PARAMETER(LCL.Return_Code_Usr);
 PARAMETER('I/C');
 PARAMETER('PDW7CLP');
 PARAMETER(LCL.Company_Number_Pass_USR);
 PARAMETER(LCL.Date_1_PASS_USR);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(LCL.Cycle_Count_Code_IB);
 PARAMETER(1);

 //?Change physical status to posted
 EXECUTE FUNCTION(CHG Physical Count Sts CH) TYPE(CHGOBJ) FILE(OMHCCPP)          AC1218174;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Physical_Start_Date);
 PARAMETER(DB1.Cycle_Count_Code);
 PARAMETER('P');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?Send Email Message
 // Call program Rtv Alpha Value       XF.
 CALL PROGRAM(Rtv Alpha Value       XF) ('POMTXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER('INVRST');
 PARAMETER(LCL.Email_Address);

 CASE;

 // IF LCL.Email Address is Entered
 IF LCL.Email_Address <> *BLANK;

 // LCL.Text USR 43 = CONCAT(CON.Inventory Restoration,CON.Posted for:,CON.1)
 LCL.Text_USR_43 = 'Inventory Restoration' + 'Posted for:' (1);

 // LCL.Office Message USR = CONCAT(LCL.Text USR 43,DB1.Warehouse Code,CON.2)
 LCL.Office_Message_USR = LCL.Text_USR_43 + DB1.Warehouse_Code (2);

 // Execute command - 'ESNDMAIL'
 EXECUTE COMMAND(USR4703);
 PARAMETER(LCL.Email_Address);
 PARAMETER(LCL.Office_Message_USR);

 ENDIF;

}


