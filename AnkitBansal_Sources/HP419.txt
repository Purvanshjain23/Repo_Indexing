      *
      * SYSTEM:      Hog Production System
      * PROGRAM:     HP419
      * TITLE:       Specify Options for HPE/HPS Comparison Listing
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     09/05/00
      *
      *
      * FUNCTION: This Specify uses an edit record format to allow the user
      *           to specify options for generating the listing.
      *           This specify is called from the menu.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      * 11/08/17  Brad Baden    E010812
      *           Added Business Office as a selection field on the
      *           screen.  A value is required in the field.
      *
      ****************************************************************
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhpd419    cf   e             workstn
     F                                     infds(iofeed)
      *
      *
     Fhsp002    if   e           k disk
      *    Functions
      *
      *
     FHSP009    IF   E           K DISK
      * BUSINESS OFFICE
      *
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  Compile time array for SBMJOB used in QCMDEXC
      *---------------------------------------------------------------
     D cmd             s              1    dim(80) ctdata perrcd(80)
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D rtncd           s              2    inz('00')
     D maxmsg          s              2  0  inz(20)
      *
      *
      *  Parms for use with QCMDEXC.  'LENGTH' is the length of the
      *  command that will be issued with QCMDEXC.  QCMDEXC requires
      *  the field containing length to be defined as 15 with 5 decimal
      *  positions.  The field 'CMDSBM' will hold the values of the
      *  submit job command when passed as a parm on the call to
      *  QCMDEXC.
      *
     D length          s             15  5 inz(80)
     D cmdsbm          s             80
      *
      *
      * Control fields
      *
     D termfl          s              1    inz('N')
      *
      *
      * Parm fields
      *
     D infncd          s             10
     D inbobo          s              5
     D indvfl          s              1
     D inbofl          s              1
     D oubobo          s              5
     D oubods          s             30
     D oudvcd          s              5
     D secfl           s              1
     D oubofl          s              1
     D ourmfl          s              1
      *
     D xxjobq          s             10    inz('*JOBD     ')
     D xxnite          s              1    inz('N')
     D xxcopy          s              1  0
      *
      *
      * Workfields for dates
      *
     D wkcymdiso       s               d   datfmt(*iso)
     D wkfcymd         s                   like(ldfcymd)
     D wktcymd         s                   like(ldtcymd)
      *
      *
      * Other workfields
     D wkdvcd          s                   like(oudvcd)
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Data areas
      *---------------------------------------------------------------
      *
      *---------------------------------------------------------------
      * Local data area.
      *---------------------------------------------------------------
      *
     Dlda             uds                  dtaara(*lda)
     D  ldfcymd                1      8  0
     D  ldtcymd                9     16  0
     D  ldfsbo                17     21
      *
     D  ldfmdy               104    109  0
     D  ldtmdy               110    115  0
      *
     D  ldoutu               401    410
     D  ldhold               411    411
     D  ldcopy               412    412  0
     D  ldoutq               413    422
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
     C
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * $set1 - set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $scrn1 - perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * If the user failed the initial security checks, set on indicator
      * to protect input fields and invalidate function keys.
      *
     C                   if        termfl = yes
     C                   seton                                        99
     C                   endif
      *
      * Write the error messages from the error arrays to the error
      * message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to CRT.
      *
      *
     C                   write     hp419k1
     C                   write     hp419ec
     C                   exfmt     hp419r1
      *
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on or  termfl = yes                 F3-exit
     C                   eval      routne = exit
      *
     C     *in04         wheneq    *on                                          F4-PROMPT
     C                   exsr      $f4s
     C                   movel     scrn1         routne
      *
     C                   when      *in17 = *on                                  F17-print opt
     C                   eval      routne = scrn1
     C                   call      'HP451'
     C                   parm                    sdpgm
     C     ldcopy        parm      ldcopy        xxcopy
     C                   parm                    ldhold
     C                   parm                    ldoutq
     C                   parm                    xxnite
     C                   parm                    xxjobq
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                       API
     C                   eval      routne = scrn1
     C                   other
      *
     C                   eval      routne = edit1
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $edit1 - edit screen 1 input fields
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      *
      * Validate Business Office
      *  1) must be entered
      *  2) must be either IFLIV or OKLIV
      *
      *
     C                   if        d1fsbo = *blanks
     C                   eval      *in37 = *on
     C                   if        error < maxmsg
     C                   eval      error += 1
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
      *
     C                   else
     C     d1fsbo        chain     hsp009
     C                   if        not %found
     C                   eval      *in37 = *on
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09260'
     C                   endif
      *
     C                   else
     C                   eval      ldfsbo = d1fsbo
     C                   eval      d1bods = bobods
     C                   endif
     C                   endif
      *
      * Validate from date
      *  1) cannot be zero
      *  2) cannot be negative
      *  3) must be a valid date
      *
     C                   eval      wkfcymd = 0
      *
     C                   select
     C                   when      d1fmdy = 0                                   Wh no from
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
      *
     C                   when      d1fmdy < 0                                   Wh negative from
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
      *
     C                   when      d1fmdy > 0                                   Wh date entered
     C     *mdy          test(d)                 d1fmdy                 92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      *
     C                   eval      ldfmdy = d1fmdy
      *
      * flip date from mmddyy to ccyymmdd using the 'date format' field
      * to add the century value
      *
     C     *mdy          move      d1fmdy        wkcymdiso
     C                   move      wkcymdiso     wkfcymd
      *
     C                   endif                                                  If bad date
     C                   endsl
      *
      *
      * Validate to date
      *  1) cannot be zero
      *  2) cannot be negative
      *  3) must be a valid date
      *  4) cannot be earlier than from date
      *
      *
     C                   eval      wktcymd = 0
      *
     C                   select
     C                   when      d1tmdy = 0                                   Wh no to
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
      *
     C                   when      d1tmdy < 0                                   Wh negative to
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
      *
     C                   when      d1tmdy > 0                                   Wh date entered
     C     *mdy          test(d)                 d1tmdy                 92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
     C                   eval      ldtmdy = d1tmdy
      *
      * flip date from mmddyy to ccyymmdd using the 'date format' field
      * to add the century value.
      *
     C     *mdy          move      d1tmdy        wkcymdiso
     C                   move      wkcymdiso     wktcymd
      *
     C                   endif                                                  If bad date
     C                   endsl
      *
      *
      * The 'to' date is valid; check that it is not 'earlier' than
      * the 'from' date.
      *
     C                   if        *in35 = *off and                             If earlier
     C                             *in36 = *off and
     C                             wktcymd < wkfcymd
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09009'
     C                   endif
     C                   endif                                                  If earlier
      *
      *
      * If there are no errors, execute the subroutine to submit the
      * report.
      *
     C                   if        error = 0                                    If no error
     C                   if        *in44 = *off                                 If no F8
     C                   seton                                        44
     C                   else
     C                   if        *in08 = *on                                  If F8=submit
     C                   exsr      $proc1
     C                   endif                                                  If F8=submit
     C                   endif                                                  If no F8
     C                   else
     C                   setoff                                       44
     C                   endif                                                  If no error
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $f4s  - F4 prompt on screen
      *----------------------------------------------------------------
      *
     C     $f4s          begsr
      *
     C                   select
      *
      * If Business Office
      *
     C                   when      fld = 'D1FSBO'
     C                   call      'HP503'
     C                   parm                    d1fsbo                         Business office
     C                   parm      *blank        d1bods                         BO description
     C                   parm      'LIVE '       wkdvcd                         BO division
     C                   other
      *
      * F4 not valid for this field so issue message
      *
     C     error         iflt      maxmsg
     C                   add       1             error
     C                   movel     'HS09011'     mgid(e)
     C                   endif
      *
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Call security program
      *---------------------------------------------------------------
      *
     C     $sec          begsr
      *
      * Set up the fields to send into the security program
      *
     C                   movel     sdpgm         infncd                         PGM NAME
      *
     C                   move      *blank        oubobo                         BO CODE
     C                   move      *blank        oubods                         BO DESC
     C                   move      *blank        oudvcd                         FUNCTION DIV
     C                   movel     no            termfl                         TERMINAL FLG
      *
     C                   call      'HPSEC  '
      **** IN
     C                   parm                    mgid                           MSGID ARRAY
     C                   parm                    mgdt                           MSGDTA DATA
     C                   parm                    error                          # OF errorS
     C                   parm                    infncd                         FUNC CODE
     C                   parm                    inbobo                         BO CODE
     C                   parm                    indvfl                         CHECK DIV?
     C                   parm                    inbofl                         CHECK B.O.?
      **** OUT
     C                   parm                    oubobo                         BO CODE
     C                   parm                    oubods                         BO DESC.
     C                   parm                    oudvcd                         DIV CODE
     C                   parm                    secfl                          SEC ERR FLAG
     C                   parm                    oubofl                         B.O. ERR FLG
     C                   parm                    ourmfl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $proc1 - process user's request
      *---------------------------------------------------------------
      *
      * This subroutine is only executed if the user submits the listing
      *
     C     $proc1        begsr
      *
     C                   eval      ldfmdy = d1fmdy
     C                   eval      ldfcymd = wkfcymd
     C                   eval      ldtmdy = d1tmdy
     C                   eval      ldtcymd = wktcymd
      *
      * Move the 80-character compile time array 'CMD' to an
      * 80-character field for passing as a parm with QCMDEXC.
      *
      *
     C                   out       lda
     C                   movea     xxjobq        cmd(50)
     C                   movea     cmd           cmdsbm
     C                   call      'QCMDEXC'
     C                   parm                    cmdsbm
     C                   parm                    length
      *
      * Issue the standard request submission message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09003'
     C                   endif
      *
     C                   endsr
      *
      /EJECT
      *---------------------------------------------------------------
      * $wrmsg - write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * $clmsg - clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *
      /eject
      *---------------------------------------------------------------
      * $exit - seton last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * *inzsr - initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *   none
      *
      * Key lists
      *    None
      *
      * Initialize LDA fields
      *
     C                   move      *blank        ldhold
     C                   z-add     0             ldcopy
     C                   movel     ldoutu        ldoutq
      *
      * Get this functions' number of copies, etc.
      *
     C     sdpgm         chain     hsp002                             92
     C                   if        *in92 = *off
     C                   z-add     fncopy        ldcopy
     C                   movel     fnhold        ldhold
     C                   endif
      *
     C                   if        ldcopy = 0
     C                   z-add     1             ldcopy
     C                   endif
      *
     C                   if        ldhold = *blank
     C                   movel     no            ldhold
     C                   endif
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
      * Execute the security subroutine to determine the user's
      * authorizations.
      *
     C                   movel     no            inbofl
     C                   exsr      $sec
     C                   movel     yes           inbofl
      *
     C                   eval      d1fsbo = oubobo
     C                   eval      d1bods = oubods
      *
      * If errors on initial call, set the terminal flag to yes.
      *
     C                   if        secfl = yes
     C                   move      yes           termfl
     C                   endif
      *
     C                   endsr
      /EJECT
      *****************************************************************
      * COMPILE TIME ARRAY 'CMD' USED IN QCMDEXC
      *****************************************************************
** CMD table 'CMD' submits listing when F8 selected
SBMJOB CMD(CALL PGM(HP419CL)) JOB(HPEHPSLT) JOBQ(__________)
