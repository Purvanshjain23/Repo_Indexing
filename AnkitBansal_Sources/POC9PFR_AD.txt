// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POC9PFR
// ?Date: 14.08.2025 Time: 12:06:06
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

// PAR.Shipped Item Code = CON.*ZERO
PAR.Shipped_Item_Code = *ZERO;

//?USER: Record selection processing

//?New item
CASE;

// IF PAR.Shipped Item Code NE DB1.Shipped Item Code
IF PAR.Shipped_Item_Code <> DB1.Shipped_Item_Code;

// PAR.Shipped Item Code = DB1.Shipped Item Code
PAR.Shipped_Item_Code = DB1.Shipped_Item_Code;

EXECUTE FUNCTION(RTV Print Realization  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1387825;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Shipped_Item_Code);
PARAMETER(WRK.Commodity_Market_Code);
PARAMETER(PAR.Print_on_Realization_Rpt);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Co Default Market code is Yes Move Defult USDA Otherwise Do Existing Logic
CASE;

// IF PAR.USR Flag 3 is Yes
IF PAR.USR_Flag_3 = 'Y';

// WRK.Commodity Market Code = PAR.Commodity Market Code
WRK.Commodity_Market_Code = PAR.Commodity_Market_Code;

//?Co Default Market code is Yes Move Defult USDA Otherwise Do Existing Logic
// IF *OTHERWISE
IF *OTHERWISE;

//?Load WRK.Commodity Market Code 1=History file, 2=Company/Item 3=Parms
CASE;

// IF DB1.Commodity Market Code is Entered
IF DB1.Commodity_Market_Code <> *BLANK;

// WRK.Commodity Market Code = DB1.Commodity Market Code
WRK.Commodity_Market_Code = DB1.Commodity_Market_Code;

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF DB1.Actual Shipped Date LT PAR.USR From Date
IF DB1.Actual_Shipped_Date < PAR.USR_From_Date;

// OR DB1.Actual Shipped Date GT PAR.USR Through Date
OR DB1.Actual_Shipped_Date > PAR.USR_Through_Date;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

//?Check Sales flags
CASE;

// IF PAR.USR Include all Products is NO
IF PAR.USR_Include_all_Products = 'N';

// AND PAR.Print on Realization Rpt is No
AND PAR.Print_on_Realization_Rpt = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?Check Sales flags
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
PARAMETER(DB1.Order_Type_Sales);
PARAMETER(PAR.Billing_Activity_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.Billing Activity Type is Credit or Debit Memo
IF PAR.Billing_Activity_Type = '2'/'3';

// AND PAR.USR Sales Realiz. Flag is None
AND PAR.USR_Sales_Realiz_Flag = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?USER: On print of first page format

MOVE *ALL (To: 1PG From: PAR);

// 1PG.Salesperson Code = PAR.Sales Route Code
X1PG_Salesperson_Code = PAR.Sales_Route_Code;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.USR Description - 15 = Condition name of PAR.USR Sales Realiz. Flags
X1PG_USR_Description_15 = RTVCND(PAR.USR_Sales_Realiz_Flag);

// 1PG.Condition Desc. 1  USR = Condition name of 1PG.Export Sales
X1PG_Condition_Desc_1_USR = RTVCND(X1PG_Export_Sales);

//?Select Report conditions
CASE;

// IF PAR.USR Detail or Summary is Report Selection 1
IF PAR.USR_Detail_or_Summary = '1';

// 1PG.Condition Desc. 2  USR = CON.Item Group
X1PG_Condition_Desc_2_USR = 'Item Group';

//?Select Report conditions
// IF PAR.USR Detail or Summary is Report Selection 2
IF PAR.USR_Detail_or_Summary = '2';

// 1PG.Condition Desc. 2  USR = CON.Salesperson
X1PG_Condition_Desc_2_USR = 'Salesperson';

//?Select Report conditions
// IF PAR.USR Detail or Summary is Report Selection 3
IF PAR.USR_Detail_or_Summary = '3';

// 1PG.Condition Desc. 2  USR = CON.Salesperson/Customer
X1PG_Condition_Desc_2_USR = 'Salesperson/Customer';

ENDIF;

//?Retrieve ship to customer name if entered.
CASE;

// IF PAR.Ship To Customer is not equal to zero
IF PAR.Ship_To_Customer <> *ZERO;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(X1PG_Ship_To_Customer);
PARAMETER(X1PG_Ship_To_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Retrieve ship to customer name if entered.
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Ship To Name = CON.*All
X1PG_Ship_To_Name = *All;

ENDIF;

//?Retrieve salesperson name if entered
CASE;

// IF PAR.Sales Route Code is entered
IF PAR.Sales_Route_Code <> *BLANK;

EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
PARAMETER(X1PG_Salesperson_Code);
PARAMETER(X1PG_Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Retrieve salesperson name if entered
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Salesperson Name = CON.*All
X1PG_Salesperson_Name = *All;

ENDIF;

//?Retrieve zone description if entered
CASE;

// IF PAR.Shipping Zone Code NE WRK.BLANK
IF PAR.Shipping_Zone_Code <> WRK.BLANK;

EXECUTE FUNCTION(RTV Shipping Zone Desc RT) TYPE(RTVOBJ) FILE(PDLTREP)          AC1488059;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Shipping_Zone_Code);
PARAMETER(X1PG_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Retrieve zone description if entered
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Description = CON.*All
X1PG_Description = *All;

ENDIF;

//?USER: Null report processing

// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


//?USER: Print required level headings

CASE;

IF NEW Company_Number;
CASE;

// IF PAR.USR Flag 3 is Yes
IF PAR.USR_Flag_3 = 'Y';

// CUR.Zip Code for Fax = CON.Co.Def.Prc
CUR.Zip_Code_for_Fax = 'Co.Def.Prc';

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Zip Code for Fax = CON.Mkt Price
CUR.Zip_Code_for_Fax = 'Mkt Price';

ENDIF;

// Print Company Number header format
PRINT Company Number header format;

ENDIF;

// SUPPRESSED PRINT U/M - Base Price header format

// SUPPRESSED PRINT Sales Route Code header format

// SUPPRESSED PRINT Shipped Item Code header format

//?USER: On print of detail format

EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
PARAMETER(CUR.Order_Type_Sales);
PARAMETER(PAR.Billing_Activity_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?FOB amount and weight
CASE;

// IF PAR.Billing Activity Type is Invoice
IF PAR.Billing_Activity_Type = '1';

CASE;

// IF DB1.Affect Sales Doll Status is no
IF DB1.Affect_Sales_Doll_Status = 'N';

// CUR.FOB Gross Amount = CON.*ZERO
CUR.FOB_Gross_Amount = *ZERO;

// CUR.USR Billing Dtl Net Dol 2 = CON.*ZERO
CUR.USR_Billing_Dtl_Net_Dol_2 = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Billing Dtl Net Dol 2 = DB1.FOB Gross Amount
CUR.USR_Billing_Dtl_Net_Dol_2 = DB1.FOB_Gross_Amount;

ENDIF;

CASE;

// IF DB1.Affect Sales Pnds Status is no
IF DB1.Affect_Sales_Pnds_Status = 'N';

// CUR.Weight Billed = CON.*ZERO
CUR.Weight_Billed = *ZERO;

ENDIF;

//?FOB amount and weight
// IF *OTHERWISE
IF *OTHERWISE;

//?Credit or Debit memo
CASE;

// IF PAR.USR Sales Realiz. Flag is Process by Flags
IF PAR.USR_Sales_Realiz_Flag = 'P';

CASE;

// IF DB1.Affect Sales Doll Status is no
IF DB1.Affect_Sales_Doll_Status = 'N';

// CUR.FOB Gross Amount = CON.*ZERO
CUR.FOB_Gross_Amount = *ZERO;

// CUR.USR Billing Dtl Net Dol 2 = CON.*ZERO
CUR.USR_Billing_Dtl_Net_Dol_2 = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Billing Dtl Net Dol 2 = DB1.FOB Gross Amount
CUR.USR_Billing_Dtl_Net_Dol_2 = DB1.FOB_Gross_Amount;

ENDIF;

CASE;

// IF DB1.Affect Sales Pnds Status is no
IF DB1.Affect_Sales_Pnds_Status = 'N';

// CUR.Weight Billed = CON.*ZERO
CUR.Weight_Billed = *ZERO;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.USR Sales Realiz. Flag is All
IF PAR.USR_Sales_Realiz_Flag = 'A';

CASE;

// IF DB1.Affect Sales Doll Status is no
IF DB1.Affect_Sales_Doll_Status = 'N';

// AND DB1.Affect Sales Pnds Status is yes
AND DB1.Affect_Sales_Pnds_Status = 'Y';

// CUR.FOB Gross Amount = CON.*ZERO
CUR.FOB_Gross_Amount = *ZERO;

// CUR.USR Billing Dtl Net Dol 2 = CON.*ZERO
CUR.USR_Billing_Dtl_Net_Dol_2 = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Billing Dtl Net Dol 2 = DB1.FOB Gross Amount
CUR.USR_Billing_Dtl_Net_Dol_2 = DB1.FOB_Gross_Amount;

ENDIF;

CASE;

// IF DB1.Affect Sales Pnds Status is no
IF DB1.Affect_Sales_Pnds_Status = 'N';

// AND DB1.Affect Sales Doll Status is yes
AND DB1.Affect_Sales_Doll_Status = 'Y';

// CUR.Weight Billed = CON.*ZERO
CUR.Weight_Billed = *ZERO;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?reverse sign if credit memo and positive
CASE;

// IF PAR.Billing Activity Type is Credit Memo
IF PAR.Billing_Activity_Type = '2';

// AND CUR.Weight Billed GT WRK.ZERO
AND CUR.Weight_Billed > WRK.ZERO;

// CUR.Weight Billed = CON.*ZERO - CUR.Weight Billed
CUR.Weight_Billed = *ZERO - CUR.Weight_Billed;

ENDIF;

EXECUTE FUNCTION(RTV Print Realization  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1387825;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Shipped_Item_Code);
PARAMETER(WRK.Commodity_Market_Code);
PARAMETER(WRK.Print_on_Realization_Rpt);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Market Code
CASE;

// IF PAR.Billing Activity Type is Invoice
IF PAR.Billing_Activity_Type = '1';

CASE;

// IF DB1.Affect Sales Doll Status is no
IF DB1.Affect_Sales_Doll_Status = 'N';

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// Call program RTV Item Details       XF.
CALL PROGRAM(RTV Item Details       XF) ('PDKAXFR');
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Shipped_Item_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(PAR.UOM_Pricing);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.Market_Overage);
PARAMETER(WRK.Standard_Overage_Underage);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(PAR.Item_Pricing_Operation);
PARAMETER(PAR.Item_Pricing_Constant);

//?Get (USDA/Mkt) commodity price for entry prior to ship date
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Compute market price
CASE;

// IF DB1.U/M - Base Price EQ PAR.U/M - Primary
IF DB1.U_M_Base_Price = PAR.UOM_Primary;

// OR DB1.U/M - Base Price EQ PAR.U/M - Second
OR DB1.U_M_Base_Price = PAR.UOM_Second;

// OR DB1.U/M - Base Price EQ PAR.U/M - Third
OR DB1.U_M_Base_Price = PAR.UOM_Third;

//?subtract 1 from actual shipped date for starting point
// WRK.Actual Shipped Date = DB1.Actual Shipped Date + CON.-1 *DAYS
WRK.Actual_Shipped_Date = DATEINCR(DB1.Actual_Shipped_Date '-1' 'DY' 1111111 'NONE' 'N'            +
1);

EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
PARAMETER(WRK.Commodity_Market_Code);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(WRK.Actual_Shipped_Date);
PARAMETER(WRK.Commodity_Market_Price);
PARAMETER(WRK.USR_Date_Priced);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Commodity Market Price = DB1.Commodity Market Price
 PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

 // PAR.USR Date Priced = DB1.Market Price Date
 PAR.USR_Date_Priced = DB1.Market_Price_Date;

 QUIT;

}


// WRK.U/M - Base Price = DB1.U/M - Base Price
WRK.U_M_Base_Price = DB1.U_M_Base_Price;

// Call program CLC Convert Price Qtys XF.
CALL PROGRAM(CLC Convert Price Qtys XF) ('PDKGXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(DB1.Shipped_Item_Code);
PARAMETER(WRK.U_M_Base_Price);
PARAMETER(WRK.Price_based_on_U_M1_S);
PARAMETER(WRK.Price_based_on_U_M2_S);
PARAMETER(WRK.Price_based_on_U_M3_S);
PARAMETER(WRK.Commodity_Market_Price);

//?Compute Market Price
CASE;

// IF PAR.Unit Weight EQ WRK.ZERO
IF PAR.Unit_Weight = WRK.ZERO;

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

//?Compute Market Price
// IF *OTHERWISE
IF *OTHERWISE;

// Synon (17,9) work field =       * Compute Market Prc/LB
PGM.*Synon_179_work_field = ( WRK.Price_based_on_U_M1_S / PAR.Unit_Weight 'H' )                    +
* DB1.Weight_Billed 'H';

// CUR.USR Market Value Price = PGM.*Synon (17,9) work field
CUR.USR_Market_Value_Price = PGM.*Synon_179_work_field;

ENDIF;

//?Compute market price
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

ENDIF;

//?reverse sign if credit memo and positive
CASE;

// IF PAR.Billing Activity Type is Credit Memo
IF PAR.Billing_Activity_Type = '2';

// AND CUR.USR Market Value Price GT WRK.ZERO
AND CUR.USR_Market_Value_Price > WRK.ZERO;

// CUR.USR Market Value Price = CON.*ZERO - CUR.USR Market Value Price
CUR.USR_Market_Value_Price = *ZERO - CUR.USR_Market_Value_Price;

ENDIF;

//?Get (USDA/Mkt) commodity price for entry prior to ship date
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

ENDIF;

ENDIF;

//?Market Code
// IF *OTHERWISE
IF *OTHERWISE;

//?Credit or Debit memo
CASE;

// IF PAR.USR Sales Realiz. Flag is Process by Flags
IF PAR.USR_Sales_Realiz_Flag = 'P';

CASE;

// IF DB1.Affect Sales Doll Status is no
IF DB1.Affect_Sales_Doll_Status = 'N';

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// Call program RTV Item Details       XF.
CALL PROGRAM(RTV Item Details       XF) ('PDKAXFR');
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Shipped_Item_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(PAR.UOM_Pricing);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.Market_Overage);
PARAMETER(WRK.Standard_Overage_Underage);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(PAR.Item_Pricing_Operation);
PARAMETER(PAR.Item_Pricing_Constant);

//?Get (USDA/Mkt) commodity price for entry prior to ship date
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Compute market price
CASE;

// IF DB1.U/M - Base Price EQ PAR.U/M - Primary
IF DB1.U_M_Base_Price = PAR.UOM_Primary;

// OR DB1.U/M - Base Price EQ PAR.U/M - Second
OR DB1.U_M_Base_Price = PAR.UOM_Second;

// OR DB1.U/M - Base Price EQ PAR.U/M - Third
OR DB1.U_M_Base_Price = PAR.UOM_Third;

//?subtract 1 from actual shipped date for starting point
// WRK.Actual Shipped Date = DB1.Actual Shipped Date + CON.-1 *DAYS
WRK.Actual_Shipped_Date = DATEINCR(DB1.Actual_Shipped_Date '-1' 'DY' 1111111 'NONE' 'N'            +
1);

EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
PARAMETER(WRK.Commodity_Market_Code);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(WRK.Actual_Shipped_Date);
PARAMETER(WRK.Commodity_Market_Price);
PARAMETER(WRK.USR_Date_Priced);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Commodity Market Price = DB1.Commodity Market Price
 PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

 // PAR.USR Date Priced = DB1.Market Price Date
 PAR.USR_Date_Priced = DB1.Market_Price_Date;

 QUIT;

}


// WRK.U/M - Base Price = DB1.U/M - Base Price
WRK.U_M_Base_Price = DB1.U_M_Base_Price;

// Call program CLC Convert Price Qtys XF.
CALL PROGRAM(CLC Convert Price Qtys XF) ('PDKGXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(DB1.Shipped_Item_Code);
PARAMETER(WRK.U_M_Base_Price);
PARAMETER(WRK.Price_based_on_U_M1_S);
PARAMETER(WRK.Price_based_on_U_M2_S);
PARAMETER(WRK.Price_based_on_U_M3_S);
PARAMETER(WRK.Commodity_Market_Price);

//?Compute Market Price
CASE;

// IF PAR.Unit Weight EQ WRK.ZERO
IF PAR.Unit_Weight = WRK.ZERO;

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

//?Compute Market Price
// IF *OTHERWISE
IF *OTHERWISE;

// Synon (17,9) work field =       * Compute Market Prc/LB
PGM.*Synon_179_work_field = ( WRK.Price_based_on_U_M1_S / PAR.Unit_Weight 'H' )                    +
* DB1.Weight_Billed 'H';

// CUR.USR Market Value Price = PGM.*Synon (17,9) work field
CUR.USR_Market_Value_Price = PGM.*Synon_179_work_field;

ENDIF;

//?Compute market price
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

ENDIF;

//?reverse sign if credit memo and positive
CASE;

// IF PAR.Billing Activity Type is Credit Memo
IF PAR.Billing_Activity_Type = '2';

// AND CUR.USR Market Value Price GT WRK.ZERO
AND CUR.USR_Market_Value_Price > WRK.ZERO;

// CUR.USR Market Value Price = CON.*ZERO - CUR.USR Market Value Price
CUR.USR_Market_Value_Price = *ZERO - CUR.USR_Market_Value_Price;

ENDIF;

//?Get (USDA/Mkt) commodity price for entry prior to ship date
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.USR Sales Realiz. Flag is All
IF PAR.USR_Sales_Realiz_Flag = 'A';

CASE;

// IF DB1.Affect Sales Doll Status is no
IF DB1.Affect_Sales_Doll_Status = 'N';

// AND DB1.Affect Sales Pnds Status is yes
AND DB1.Affect_Sales_Pnds_Status = 'Y';

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// Call program RTV Item Details       XF.
CALL PROGRAM(RTV Item Details       XF) ('PDKAXFR');
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Shipped_Item_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(PAR.UOM_Pricing);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.Market_Overage);
PARAMETER(WRK.Standard_Overage_Underage);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(PAR.Item_Pricing_Operation);
PARAMETER(PAR.Item_Pricing_Constant);

//?Get (USDA/Mkt) commodity price for entry prior to ship date
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Compute market price
CASE;

// IF DB1.U/M - Base Price EQ PAR.U/M - Primary
IF DB1.U_M_Base_Price = PAR.UOM_Primary;

// OR DB1.U/M - Base Price EQ PAR.U/M - Second
OR DB1.U_M_Base_Price = PAR.UOM_Second;

// OR DB1.U/M - Base Price EQ PAR.U/M - Third
OR DB1.U_M_Base_Price = PAR.UOM_Third;

//?subtract 1 from actual shipped date for starting point
// WRK.Actual Shipped Date = DB1.Actual Shipped Date + CON.-1 *DAYS
WRK.Actual_Shipped_Date = DATEINCR(DB1.Actual_Shipped_Date '-1' 'DY' 1111111 'NONE' 'N'            +
1);

EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
PARAMETER(WRK.Commodity_Market_Code);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(WRK.Actual_Shipped_Date);
PARAMETER(WRK.Commodity_Market_Price);
PARAMETER(WRK.USR_Date_Priced);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Commodity Market Price = DB1.Commodity Market Price
 PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

 // PAR.USR Date Priced = DB1.Market Price Date
 PAR.USR_Date_Priced = DB1.Market_Price_Date;

 QUIT;

}


// WRK.U/M - Base Price = DB1.U/M - Base Price
WRK.U_M_Base_Price = DB1.U_M_Base_Price;

// Call program CLC Convert Price Qtys XF.
CALL PROGRAM(CLC Convert Price Qtys XF) ('PDKGXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(DB1.Shipped_Item_Code);
PARAMETER(WRK.U_M_Base_Price);
PARAMETER(WRK.Price_based_on_U_M1_S);
PARAMETER(WRK.Price_based_on_U_M2_S);
PARAMETER(WRK.Price_based_on_U_M3_S);
PARAMETER(WRK.Commodity_Market_Price);

//?Compute Market Price
CASE;

// IF PAR.Unit Weight EQ WRK.ZERO
IF PAR.Unit_Weight = WRK.ZERO;

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

//?Compute Market Price
// IF *OTHERWISE
IF *OTHERWISE;

// Synon (17,9) work field =       * Compute Market Prc/LB
PGM.*Synon_179_work_field = ( WRK.Price_based_on_U_M1_S / PAR.Unit_Weight 'H' )                    +
* DB1.Weight_Billed 'H';

// CUR.USR Market Value Price = PGM.*Synon (17,9) work field
CUR.USR_Market_Value_Price = PGM.*Synon_179_work_field;

ENDIF;

//?Compute market price
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

ENDIF;

//?reverse sign if credit memo and positive
CASE;

// IF PAR.Billing Activity Type is Credit Memo
IF PAR.Billing_Activity_Type = '2';

// AND CUR.USR Market Value Price GT WRK.ZERO
AND CUR.USR_Market_Value_Price > WRK.ZERO;

// CUR.USR Market Value Price = CON.*ZERO - CUR.USR Market Value Price
CUR.USR_Market_Value_Price = *ZERO - CUR.USR_Market_Value_Price;

ENDIF;

//?Get (USDA/Mkt) commodity price for entry prior to ship date
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Do not calculate Market Price is Weight is zero
CASE;

// IF CUR.Weight Billed is Equal to zero
IF CUR.Weight_Billed = *ZERO;

// CUR.USR Market Value Price = CND.Equal zero
CUR.USR_Market_Value_Price = *ZERO;

ENDIF;

// PAR.U/M - Base Price = DB1.U/M - Base Price
PAR.U_M_Base_Price = DB1.U_M_Base_Price;

//?USER: Process after print of detail format

NXT.USR_FOB_Sales_Price = SUM(CUR.FOB_Gross_Amount);

NXT.USR_Market_Value_SUM_13_4 = SUM(CUR.USR_Market_Value_Price);

NXT.Standard_Overage_SUM = SUM(CUR.Standard_Overage_Amount);

NXT.Weight_Billed_SUM = SUM(CUR.Weight_Billed);

// NXT.USR Billing Dtl Net Dol 2 = NXT.USR Billing Dtl Net Dol 2 + CUR.USR Billing
NXT.USR_Billing_Dtl_Net_Dol_2 = NXT.USR_Billing_Dtl_Net_Dol_2                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_2;

//?USER: Print required level totals

CASE;

IF NEW Shipped_Item_Code;
CASE;

// IF CUR.Sales Route Code EQ WRK.Sales Route Code
IF CUR.Sales_Route_Code = WRK.Sales_Route_Code;

// PAR.USR Display field = CND.no
PAR.USR_Display_field = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Display field = CND.yes
PAR.USR_Display_field = 'Y';

ENDIF;

EXECUTE FUNCTION(RTV Print Realization  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1387825;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Shipped_Item_Code);
PARAMETER(WRK.Commodity_Market_Code);
PARAMETER(WRK.Print_on_Realization_Rpt);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Print Asterisk if All Products Yes and Sales Realization Flag Yes
CASE;

// IF PAR.USR Include all Products is YES
IF PAR.USR_Include_all_Products = 'Y';

// AND WRK.Print on Realization Rpt is Yes
AND WRK.Print_on_Realization_Rpt = 'Y';

// CUR.USR Asterisk = CND.asterisk
CUR.USR_Asterisk = *;

//?Print Asterisk if All Products Yes and Sales Realization Flag Yes
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Asterisk = CND.blank
CUR.USR_Asterisk = *BLANK;

ENDIF;

EXECUTE FUNCTION(Rtv Descriptions      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1140665;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Shipped_Item_Code);
PARAMETER(CUR.Description_Line_One);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Change calculations to use weight shipped SUM as displayed in
//?field Shipped Net Weight per call C0000707
//?Compute FOB Sales Price (CWT) & Standard Overage (CWT)
CASE;

// IF CUR.Weight Billed SUM NE WRK.ZERO
IF CUR.Weight_Billed_SUM <> WRK.ZERO;

// Synon (17,9) work field =       * Compute FOB Sales Prc CWT
PGM.*Synon_179_work_field = ( CUR.USR_FOB_Sales_Price / CUR.Weight_Billed_SUM 'H' ) * 100          +
'H';

//?compute FOB Gross Amount
CASE;

// IF CUR.USR FOB Sales Price LT WRK.ZERO
IF CUR.USR_FOB_Sales_Price < WRK.ZERO;

// AND CUR.Weight Billed SUM LT WRK.ZERO
AND CUR.Weight_Billed_SUM < WRK.ZERO;

// CUR.FOB Gross Amount = PGM.*Synon (17,9) work field * CON.-1 *Rounded
CUR.FOB_Gross_Amount = PGM.*Synon_179_work_field * -1 'H';

//?compute FOB Gross Amount
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.FOB Gross Amount = PGM.*Synon (17,9) work field * CON.1 *Rounded
CUR.FOB_Gross_Amount = PGM.*Synon_179_work_field * 1 'H';

ENDIF;

// Standard Overage Amt CWT
CUR.Standard_Overage_Amount = ( CUR.Standard_Overage_SUM / CUR.Weight_Billed_SUM 'H' )             +
* 100 'H';

//?Compute FOB Sales Price (CWT) & Standard Overage (CWT)
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.FOB Gross Amount = CON.*ZERO
CUR.FOB_Gross_Amount = *ZERO;

// CUR.Standard Overage Amount = CON.*ZERO
CUR.Standard_Overage_Amount = *ZERO;

ENDIF;

//?Compute Market Price (CWT)
CASE;

// IF CUR.Weight Billed SUM NE WRK.ZERO
IF CUR.Weight_Billed_SUM <> WRK.ZERO;

// Synon (17,9) work field =       * Compute Market Price CWT
PGM.*Synon_179_work_field = ( CUR.USR_Market_Value_SUM_13_4 / CUR.Weight_Billed_SUM 'H' )          +
* 100 'H';

//?compute usr market value
CASE;

// IF CUR.USR Market Value SUM 13.4 LT WRK.ZERO
IF CUR.USR_Market_Value_SUM_13_4 < WRK.ZERO;

// AND CUR.Weight Billed SUM LT WRK.ZERO
AND CUR.Weight_Billed_SUM < WRK.ZERO;

// CUR.USR Market Value = PGM.*Synon (17,9) work field * CON.-1 *Rounded
CUR.USR_Market_Value = PGM.*Synon_179_work_field * -1 'H';

//?compute usr market value
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Market Value = PGM.*Synon (17,9) work field * CON.1 *Rounded
CUR.USR_Market_Value = PGM.*Synon_179_work_field * 1 'H';

ENDIF;

//?Compute Market Price (CWT)
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Market Value = CON.*ZERO
CUR.USR_Market_Value = *ZERO;

ENDIF;

//?-------------------------------------------------------------
//?03/19/03 PKD Changed to use Sales History Standard Overage Amount.
//?-------------------------------------------------------------
//?compute overage achieved
// CUR.USR Amount Remaining = CUR.FOB Gross Amount - CUR.USR Market Value
CUR.USR_Amount_Remaining = CUR.FOB_Gross_Amount - CUR.USR_Market_Value;

//?compute var/CWT
// CUR.Variance amount 1     USR = CUR.USR Amount Remaining - CUR.Standard Overage
CUR.Variance_amount_1_USR = CUR.USR_Amount_Remaining - CUR.Standard_Overage_Amount;

//?Compute Dollar Variance
// Synon (17,9) work field =       * Convert to CWT
PGM.*Synon_179_work_field = CUR.Variance_amount_1_USR * ( CUR.Weight_Billed_SUM / 100              +
'H' ) 'H';

// CUR.Variance Amount 2     USR = PGM.*Synon (17,9) work field * CON.1 *Rounded
CUR.Variance_Amount_2_USR = PGM.*Synon_179_work_field * 1 'H';

// Print Shipped Item Code totals format
PRINT Shipped Item Code totals format;

// WRK.Sales Route Code = CUR.Sales Route Code
WRK.Sales_Route_Code = CUR.Sales_Route_Code;

// NXT.Variance Amount 2     USR = NXT.Variance Amount 2     USR + CUR.Variance Amo
NXT.Variance_Amount_2_USR = NXT.Variance_Amount_2_USR + CUR.Variance_Amount_2_USR;

// CUR.Variance Amount 2     USR = CON.*ZERO
CUR.Variance_Amount_2_USR = *ZERO;

// NXT.USR Billing Dtl Net Dol 2 = NXT.USR Billing Dtl Net Dol 2 + CUR.USR Billing
NXT.USR_Billing_Dtl_Net_Dol_2 = NXT.USR_Billing_Dtl_Net_Dol_2                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_2;

NXT.Weight_Billed_SUM = SUM(CUR.Weight_Billed_SUM);

ENDIF;

CASE;

IF NEW Sales_Route_Code;
EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
PARAMETER(CUR.Sales_Route_Code);
PARAMETER(CUR.Sales_Route_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Print Sales Route Code totals format
PRINT Sales Route Code totals format;

// NXT.Variance Amount 2     USR = NXT.Variance Amount 2     USR + CUR.Variance Amo
NXT.Variance_Amount_2_USR = NXT.Variance_Amount_2_USR + CUR.Variance_Amount_2_USR;

// NXT.USR Billing Dtl Net Dol 2 = NXT.USR Billing Dtl Net Dol 2 + CUR.USR Billing
NXT.USR_Billing_Dtl_Net_Dol_2 = NXT.USR_Billing_Dtl_Net_Dol_2                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_2;

NXT.Weight_Billed_SUM = SUM(CUR.Weight_Billed_SUM);

ENDIF;

// SUPPRESSED PRINT U/M - Base Price totals format

// SUPPRESSED PRINT Company Number totals format

//?USER: On print of final totals format

//?compute overage achieved
//?compute var/CWT
//?Compute Dollar Variance
