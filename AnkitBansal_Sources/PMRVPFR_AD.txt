// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMRVPFR
// ?Date: 14.08.2025 Time: 12:05:43
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('P/S');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// PAR.USR Update Flag = CND.Yes
PAR.USR_Update_Flag = 'Y';

//?***** Change log and comments
//?** 01/25/2008 LJB FP1235
//?** Add 3 fields: Request Make = the Scheduled Quantity,
//?** Actual Make = the Item Transaction Amount from CAB7CPP,
//?** and Remain to Make = the difference.
//?** Report Type input parm "M" = Make Sheet.
//?** This report will be printed by the Job Scheduler multiple
//?** times a day. It can also be printed on demand
//?** from multiple Scheduling Menus.
//?**
//?** 03/26/2009 SLM S00726
//?** Production Reports with Divide by Zero on Calculations
//?** will be installed with PA project FP1054
//?USER: Record selection processing

EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(WRK.Description_Line_One);
PARAMETER(WRK.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.Item_Structure_Class_Code);
PARAMETER(WRK.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(WRK.Item_Type_Code);
PARAMETER(WRK.Default_Warehouse);
PARAMETER(WRK.Fresh_Chilling_Time);
PARAMETER(WRK.Base_Conv_Loss_Item);
PARAMETER(WRK.Variety_Rendered_Cut);
PARAMETER(WRK.Credit_Item_Status);
PARAMETER(WRK.Std_Weight_Head_Var_Ren);
PARAMETER(WRK.Pieces_Per_Head);
PARAMETER(WRK.Department_Code);
PARAMETER(WRK.Group_for_Packaging);
PARAMETER(WRK.Seconds_Item);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(WRK.Export_Domestic);
PARAMETER(PAR.Print_On_Schedule);
PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
PARAMETER(WRK.Fresh_Sched_As_Ordered);
PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
PARAMETER(WRK.Primal_Group_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Skip if not flagged to print on the Make Sheet
CASE;

// IF PAR.Print On Schedule is Not Yes
IF PAR.Print_On_Schedule = *BLANK/'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// Is there Weight Scheduled
WRK.Weight_Sched_Prod_USR = ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )                    +
- DB1.PS_Weight_Converted;

// Are Pieces Scheduled
WRK.Pieces_Scheduled = ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )                         +
- DB1.PS_Pieces_Converted;

//?** Determine if this record should be selected
CASE;

// IF WRK.Weight Sched Prod USR is LE Zero
IF WRK.Weight_Sched_Prod_USR <= *ZERO;

// AND WRK.Pieces Scheduled is LE Zero
AND WRK.Pieces_Scheduled <= *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?** Determine if this record should be selected
// IF DB1.Item Code EQ WRK.Item Code
IF DB1.Item_Code = WRK.Item_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process top of page

MOVE *ALL (To: TOP From: PAR);

// TOP.Condition Desc. 1  USR = Condition name of PAR.Production Type
TOP_Condition_Desc_1_USR = RTVCND(PAR.Production_Type);

// TOP.Condition Desc. 3  USR = Condition name of PAR.Report Type Schedule  USR
TOP_Condition_Desc_3_USR = RTVCND(PAR.Report_Type_Schedule_USR);

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(TOP_Company_Number);
PARAMETER(TOP_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Print required level headings

// SUPPRESSED PRINT Accounting Company Number header format

// SUPPRESSED PRINT Production Type header format

// SUPPRESSED PRINT Production Date header format

CASE;

IF NEW Department_Code;
EXECUTE FUNCTION(Rtv Prod Dept Name    RT) TYPE(RTVOBJ) FILE(PDI5REP)           AC1286709;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Department_Code);
PARAMETER(CUR.Department_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Print Department Code header format
PRINT Department Code header format;

ENDIF;

// SUPPRESSED PRINT Item Code header format

// SUPPRESSED PRINT Warehouse Code header format

//?USER: Process before print of detail format

EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Description_Line_One);
PARAMETER(CUR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.Item_Structure_Class_Code);
PARAMETER(WRK.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(WRK.Item_Type_Code);
PARAMETER(WRK.Default_Warehouse);
PARAMETER(WRK.Fresh_Chilling_Time);
PARAMETER(WRK.Base_Conv_Loss_Item);
PARAMETER(WRK.Variety_Rendered_Cut);
PARAMETER(WRK.Credit_Item_Status);
PARAMETER(WRK.Std_Weight_Head_Var_Ren);
PARAMETER(WRK.Pieces_Per_Head);
PARAMETER(WRK.Department_Code);
PARAMETER(WRK.Group_for_Packaging);
PARAMETER(WRK.Seconds_Item);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(WRK.Export_Domestic);
PARAMETER(PAR.Print_On_Schedule);
PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
PARAMETER(WRK.Fresh_Sched_As_Ordered);
PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
PARAMETER(WRK.Primal_Group_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV BOX ID FOR ITEM    RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1396535;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(WRK.Component_Item_Code);
PARAMETER(NLL.Unit_Weight);
PARAMETER(CUR.Box_Description);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // WRK.Unit Weight = CON.*ZERO
 WRK.Unit_Weight = *ZERO;

 EXECUTE FUNCTION(RTV Item Type & PckCD  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1396536;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Component_Item_Code);
 PARAMETER(WRK.Description_Line_One);
 PARAMETER(WRK.Unit_Weight);
 PARAMETER(WRK.Item_Type_Code);
 PARAMETER(PAR.Package_Type_Code);
 PARAMETER(WRK.Pallet_Tare_Weight);
 PARAMETER(WRK.Misc_Tare_Weight);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Package Type Code is Box
 IF PAR.Package_Type_Code = 'B';

 // PAR.Box Description = WRK.Description Line One
 PAR.Box_Description = WRK.Description_Line_One;

 // PAR.Unit Weight = WRK.Unit Weight
 PAR.Unit_Weight = WRK.Unit_Weight;

 // PAR.Box iD = DB1.Component Item Code * CON.1 *
 PAR.Box_iD = DB1.Component_Item_Code * 1;

 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(RTV Itm Bag Code      RT) TYPE(RTVOBJ) FILE(POAZCPP)           AC1790992;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Packaging_Item_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(RTV Packaging Item    RT) TYPE(RTVOBJ) FILE(POARREP)           AC1602514;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Packaging_Item_Code);
PARAMETER(CUR.Pckg_Item_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Weight Requested (Sched)
WRK.Weight_Sched_Prod_USR = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )                  +
- DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

// Pieces Requested (Sched)
WRK.Pieces_Scheduled = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )                       +
- DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

//?** Calculate the weight & pieces that are scheduled to be produced
EXECUTE FUNCTION(Rtv Prodtn-Co,Ty,Dt,It IF) TYPE(EXCINTFUN)                     AC1876463;
PARAMETER(PAR.Company_Number);
PARAMETER('S');
PARAMETER(PAR.Production_Date);
PARAMETER(CUR.Item_Code);
PARAMETER(WRK.Weight_Sched_Prod_USR);
PARAMETER(WRK.Pieces_Scheduled);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Prodtn-Co,Ty,Dt,It RT) TYPE(RTVOBJ) FILE(PDI8CPP)          AC1864731;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Weight_Production_USR);
 PARAMETER(PAR.Pieces_Production_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // Weight Production
  WRK.Weight_Production_USR = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
  - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // PAR.Weight Production USR = PAR.Weight Production USR + WRK.Weight Production USR
  PAR.Weight_Production_USR = PAR.Weight_Production_USR + WRK.Weight_Production_USR;

  // Pieces Production
  WRK.Pieces_Production_USR = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
  - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // PAR.Pieces Production USR = PAR.Pieces Production USR + WRK.Pieces Production USR
  PAR.Pieces_Production_USR = PAR.Pieces_Production_USR + WRK.Pieces_Production_USR;

 }

}


//?correction on divide by zero
// CUR.Text USR 40 = CON.*BLANK
CUR.Text_USR_40 = *BLANK;

//?** Calculate the Quantity Requested/Scheduled to print on the report
CASE;

// IF PAR.Piece Count Item is yes
IF PAR.Piece_Count_Item = 'Y';

//?** This is the Requested Quantity that needs to be produced today
CASE;

// IF PAR.Bags Per Unit is EQ Zero
IF PAR.Bags_Per_Unit = *ZERO;

// OR PAR.Pieces Per Bag is EQ Zero
OR PAR.Pieces_Per_Bag = *ZERO;

// CUR.Production Quantity USR = CON.*ZERO
CUR.Production_Quantity_USR = *ZERO;

// CUR.Text USR 40 = CON.Warning: Piece Count Item
CUR.Text_USR_40 = 'Warning: Piece Count Item';

// CUR.Text USR 40 = CONCAT(CUR.Text USR 40,CON.Flag Modified,CON.1)
CUR.Text_USR_40 = CUR.Text_USR_40 + 'Flag Modified' (1);

// IF *OTHERWISE
IF *OTHERWISE;

// Requested Pieces by U/M
CUR.Production_Quantity_USR = WRK.Pieces_Scheduled / ( PAR.Pieces_Per_Bag                          +
* PAR.Bags_Per_Unit );

ENDIF;

//?** Calculate the Quantity Requested/Scheduled to print on the report
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Unit Weight is Equal to zero
IF PAR.Unit_Weight = *ZERO;

// CUR.Production Quantity USR = CON.*ZERO
CUR.Production_Quantity_USR = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// Requested units by weight
CUR.Production_Quantity_USR = WRK.Weight_Sched_Prod_USR / PAR.Unit_Weight;

ENDIF;

ENDIF;

//?** Retrieve Actual Production for an item by company and date
//?** Put actual quantity produced onto the report
EXECUTE FUNCTION(Rtv Actual Prod-C/I/Dt RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1864696;
PARAMETER(PAR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(PAR.Production_Date);
PARAMETER(WRK.Production_Weight_USR);
PARAMETER(CUR.Actual_Production);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?***** Change Log and Comments
 DO;

 //?** FP1235 LJB 04/04/2008
 //?** This routine provides production information for an item by
 //?** company for a single date - no warehouse info
 //?** Only select the item if Label Date matches the Production Date
 ENDDO;

 //?USER: Process Data record

 //?** Only select if Label Date equals the Production Date
 CASE;

 // IF DB1.Label Date EQ PAR.Production Date
 IF DB1.Label_Date = PAR.Production_Date;

 // PAR.Production Weight USR = PAR.Production Weight USR + DB1.Transaction Weight
 PAR.Production_Weight_USR = PAR.Production_Weight_USR + DB1.Transaction_Weight;

 // PAR.Production Quantity USR = PAR.Production Quantity USR + DB1.Transaction Quantity
 PAR.Production_Quantity_USR = PAR.Production_Quantity_USR + DB1.Transaction_Quantity;

 ENDIF;

}


//?***** Calculate the Variance
//?** Calculate planned quantity left to produce
//?** Multiply Variance by -1 to reverse the sign (per Steve Burke)
//?** First thing in the morning, actual should be zeros
// CUR.Variance Qty 1 = CUR.Production Quantity USR - CUR.Actual Production
CUR.Variance_Qty_1 = CUR.Production_Quantity_USR - CUR.Actual_Production;

//?USER: On print of detail format

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

// WRK.Item Code = DB1.Item Code
WRK.Item_Code = DB1.Item_Code;

//?** Print all products unless told otherwise
CASE;

// IF PAR.USR Update Flag is Yes
IF PAR.USR_Update_Flag = 'Y';

//?** Determine if this record should be printed
CASE;

// IF CUR.Production Quantity USR is LE Zero
IF CUR.Production_Quantity_USR <= *ZERO;

// OR PAR.Print On Schedule is Not Yes
OR PAR.Print_On_Schedule = *BLANK/'N';

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

ENDIF;

//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : Prt Item Comments-All  PO
//?** Change to select production type of "P", planned
EXECUTE FUNCTION(Prt Item Comments-All  PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER('P');
PARAMETER(CUR.Production_Date);
PARAMETER(CUR.Item_Code);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?***** Change Log and Comments
 DO;

 //?** FP1235 LJB 04/04/2008
 //?** This routine provides production information for an item by
 //?** company for a single date - no warehouse info
 //?** Only select the item if Label Date matches the Production Date
 ENDDO;

 //?USER: Process Data record

 //?** Only select if Label Date equals the Production Date
 CASE;

 // IF DB1.Label Date EQ PAR.Production Date
 IF DB1.Label_Date = PAR.Production_Date;

 // PAR.Production Weight USR = PAR.Production Weight USR + DB1.Transaction Weight
 PAR.Production_Weight_USR = PAR.Production_Weight_USR + DB1.Transaction_Weight;

 // PAR.Production Quantity USR = PAR.Production Quantity USR + DB1.Transaction Quantity
 PAR.Production_Quantity_USR = PAR.Production_Quantity_USR + DB1.Transaction_Quantity;

 ENDIF;

}


//?USER: Print required level totals

// SUPPRESSED PRINT Warehouse Code totals format

// SUPPRESSED PRINT Item Code totals format

// SUPPRESSED PRINT Department Code totals format

// SUPPRESSED PRINT Production Date totals format

// SUPPRESSED PRINT Production Type totals format

// SUPPRESSED PRINT Accounting Company Number totals format

