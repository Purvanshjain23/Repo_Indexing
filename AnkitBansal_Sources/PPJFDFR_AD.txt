// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPJFDFR
// ?Date: 14.08.2025 Time: 03:40:47
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// PAR.User Profile Name = JOB.*USER
PAR.User_Profile_Name = JOB.*USER;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
PARAMETER(CTL.Company_Number);
PARAMETER('BOXLOAD');
PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize subfile control

CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// CTL.Include/Exclude Option = CND.Include
CTL.Include_Exclude_Option = 'INC';

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

// CTL.Scheduled Ship Date = JOB.*Job date
CTL.Scheduled_Ship_Date = JOB.*Job_date;

// CTL.Status - Y or N = CND.no
CTL.Status_Y_or_N = 'N';

ENDIF;

SET CURSOR;

//?USER: Initialize subfile record from DBF record

//?Select load id =  0
CASE;

// IF CTL.Status - Y or N is yes
IF CTL.Status_Y_or_N = 'Y';

CASE;

// IF DB1.Load ID is GT Zero
IF DB1.Load_ID > *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Whse/Non Cancelled RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428700;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(1);
PARAMETER(1);
PARAMETER(RCD.Warehouse_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?C2748:  Changed RTV Warehouse Code RT to exclude Cancelled lines.
 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF *OTHERWISE
 IF *OTHERWISE;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


//?Select warehouse
CASE;

// IF CTL.Warehouse Code is Warehouse Code not Blank
IF CTL.Warehouse_Code <> *BLANK;

// AND CTL.Warehouse Code NE RCD.Warehouse Code
AND CTL.Warehouse_Code <> RCD.Warehouse_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// LCL.Boxes Total Quantity = CON.*ZERO
LCL.Boxes_Total_Quantity = *ZERO;

EXECUTE FUNCTION(RTV UM/Whs Code,BX Qty RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1625244;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(1);
PARAMETER(RCD.U_M_Load_Scheduling_USR);
PARAMETER(LCL.Boxes_Total_Quantity);
{
 //?USER: Initialize routine

 // WRK.First Time Flag = CND.Yes
 WRK.First_Time_Flag = 'Y';

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?S17054 DN 04/08/21-Beyond this point, changed all 'U/M - Ordered'
 //?  to reference LCL Context instead of DB1.
 //?S17054 DN 04/08/21-Count Type 'Cases' (CS) as 'Boxes' (BX).
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.U/M - Ordered = DB1.U/M - Ordered
 LCL.U_M_Ordered = DB1.U_M_Ordered;

 CASE;

 // IF LCL.U/M - Ordered is Cases
 IF LCL.U_M_Ordered = 'CS';

 // LCL.U/M - Ordered = CND.EQ Boxes
 LCL.U_M_Ordered = 'BX';

 ENDIF;

 ENDIF;

 //?Accumulate the Box Quantity for slotting consideration  6/12/01
 CASE;

 // IF LCL.U/M - Ordered is EQ Boxes
 IF LCL.U_M_Ordered = 'BX';

 // PAR.Boxes Total Quantity = PAR.Boxes Total Quantity + DB1.Quantity Ordered
 PAR.Boxes_Total_Quantity = PAR.Boxes_Total_Quantity + DB1.Quantity_Ordered;

 ENDIF;

 CASE;

 // IF PAR.USR Unit of Measure is *Blank
 IF PAR.USR_Unit_of_Measure = *BLANK;

 // PAR.USR Unit of Measure = LCL.U/M - Ordered
 PAR.USR_Unit_of_Measure = LCL.U_M_Ordered;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.U/M - Ordered EQ PAR.USR Unit of Measure
 IF LCL.U_M_Ordered = PAR.USR_Unit_of_Measure;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Unit of Measure = CND.Mixed
 PAR.USR_Unit_of_Measure = 'MX';

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Chg MX to BX or CB
CASE;

// IF RCD.U/M - Load Scheduling USR is Mixed
IF RCD.U_M_Load_Scheduling_USR = 'MX';

CASE;

// IF LCL.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
IF LCL.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

// RCD.U/M - Load Scheduling USR = CND.Combo
RCD.U_M_Load_Scheduling_USR = 'CB';

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.U/M - Load Scheduling USR = CND.Box
RCD.U_M_Load_Scheduling_USR = 'BX';

ENDIF;

ENDIF;

//?Select Slot u/m
CASE;

// IF CTL.U/M - Load Scheduling USR is Not Blank
IF CTL.U_M_Load_Scheduling_USR = 'BX'/'CB'/'MX';

// AND CTL.U/M - Load Scheduling USR NE RCD.U/M - Load Scheduling USR
AND CTL.U_M_Load_Scheduling_USR <> RCD.U_M_Load_Scheduling_USR;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?*Hidden fields
EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF RCD.Export Status is yes
IF RCD.Export_Status = 'Y';

EXECUTE FUNCTION(RTV Booking # f/ord   RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC2069357;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.OHE_Booking_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(RTV Country Code only  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1531787;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Country_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


ENDIF;

CASE;

// IF CTL.OH Load Plan Ready is Blank
IF CTL.OH_Load_Plan_Ready = *BLANK;

// IF CTL.Include/Exclude Option is Include
IF CTL.Include_Exclude_Option = 'INC';

//?Select only records which match CTL load status
CASE;

// IF DB1.OH Load Plan Ready NE CTL.OH Load Plan Ready
IF DB1.OH_Load_Plan_Ready <> CTL.OH_Load_Plan_Ready;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// IF CTL.Include/Exclude Option is Exclude
IF CTL.Include_Exclude_Option = 'EXC';

//?Select only records which do NOT match CTL load status
CASE;

// IF DB1.OH Load Plan Ready EQ CTL.OH Load Plan Ready
IF DB1.OH_Load_Plan_Ready = CTL.OH_Load_Plan_Ready;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

//?Prompt on company
CASE;

// IF PGM.*Cursor field <IS> CTL.Company Number
IF PGM.*Cursor_field = CTL.Company_Number;

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(CTL.Company_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

ENDIF;

ENDIF;

//?Prompt on customer
CASE;

// IF PGM.*Cursor field <IS> CTL.Ship To Customer
IF PGM.*Cursor_field = CTL.Ship_To_Customer;

// Call program SEL Cust/ShpTo Flag 'Y'SR.
CALL PROGRAM(SEL Cust/ShpTo Flag 'Y'SR) ('PDYSSRR');
PARAMETER(CTL.Ship_To_Customer);

ENDIF;

//?Prompt on warehouse
CASE;

// IF PGM.*Cursor field <IS> CTL.Warehouse Code
IF PGM.*Cursor_field = CTL.Warehouse_Code;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(CTL.Warehouse_Code);

ENDIF;

//?Prompt on state
CASE;

// IF PGM.*Cursor field <IS> CTL.Ship To State Code
IF PGM.*Cursor_field = CTL.Ship_To_State_Code;

// Call program SEL State              SR.
CALL PROGRAM(SEL State              SR) ('CAAHSRR');
PARAMETER(CTL.Ship_To_State_Code);

ENDIF;

//?Prompt on sales route
CASE;

// IF PGM.*Cursor field <IS> CTL.Sales Route Code
IF PGM.*Cursor_field = CTL.Sales_Route_Code;

// Call program SEL PD Sales Route Act SR.
CALL PROGRAM(SEL PD Sales Route Act SR) ('PDFWSRR');
PARAMETER(CTL.Sales_Route_Code);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?If CTL select load=0 changes then reload subfile
CASE;

// IF LCL.Status - Y or N NE CTL.Status - Y or N
IF LCL.Status_Y_or_N <> CTL.Status_Y_or_N;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// LCL.Status - Y or N = CTL.Status - Y or N
LCL.Status_Y_or_N = CTL.Status_Y_or_N;

ENDIF;

//?If CTL warehouse code changes then reload subfile
CASE;

// IF PAR.Warehouse Code NE CTL.Warehouse Code
IF PAR.Warehouse_Code <> CTL.Warehouse_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PAR.Warehouse Code = CTL.Warehouse Code
PAR.Warehouse_Code = CTL.Warehouse_Code;

ENDIF;

//?If CTL slot u/m changes then reload subfile
CASE;

// IF PAR.U/M - Load Scheduling USR NE CTL.U/M - Load Scheduling USR
IF PAR.U_M_Load_Scheduling_USR <> CTL.U_M_Load_Scheduling_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PAR.U/M - Load Scheduling USR = CTL.U/M - Load Scheduling USR
PAR.U_M_Load_Scheduling_USR = CTL.U_M_Load_Scheduling_USR;

ENDIF;

//?F5=refresh
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F8=Toggle Include/Exclude
CASE;

// IF CTL.*CMD key is *Option Toggle
IF CTL.*CMD_key = '08';

CASE;

// IF CTL.Include/Exclude Option is Include
IF CTL.Include_Exclude_Option = 'INC';

// CTL.Include/Exclude Option = CND.Exclude
CTL.Include_Exclude_Option = 'EXC';

// IF CTL.Include/Exclude Option is Exclude
IF CTL.Include_Exclude_Option = 'EXC';

// CTL.Include/Exclude Option = CND.Include
CTL.Include_Exclude_Option = 'INC';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F21=Print listing
CASE;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

CASE;

// IF CTL.Company Number is Equal to zero
IF CTL.Company_Number = *ZERO;

// Send error message - 'Company Number is required.'
ERROR(USR2183);
MSGPARM(CTL.Company_Number);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.Include/Exclude Option is Include
IF CTL.Include_Exclude_Option = 'INC';

// LCL.USR Select/Omit Flag = CND.Select
LCL.USR_Select_Omit_Flag = 'S';

// IF CTL.Include/Exclude Option is Exclude
IF CTL.Include_Exclude_Option = 'EXC';

// LCL.USR Select/Omit Flag = CND.Omit
LCL.USR_Select_Omit_Flag = 'O';

ENDIF;

// Call program PMT Unbooked Orders Rp PV.
CALL PROGRAM(PMT Unbooked Orders Rp PV) ('PBJLPVR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Scheduled_Ship_Date);
PARAMETER(CTL.Sales_Route_Code);
PARAMETER(CTL.OH_Load_Plan_Ready);
PARAMETER(LCL.USR_Select_Omit_Flag);
PARAMETER(CTL.Status_Y_or_N);

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?1=Sel Ready for Load Planning
CASE;

// IF RCD.*SFLSEL is *Select
IF RCD.*SFLSEL = '1'/'1';

CASE;

// IF RCD.OH Load Plan Ready is Not Sent to TMS
IF RCD.OH_Load_Plan_Ready = *BLANK/'N';

//?JPN Booking done?  AND   not Block
CASE;

// IF RCD.Country Code is Japan
IF RCD.Country_Code = 'JPN';

// AND RCD.Warehouse Type is Fresh
AND RCD.Warehouse_Type = 'FR';

// AND RCD.OHE Booking Number is Not Entered
AND RCD.OHE_Booking_Number = *BLANK;

// Send error message - 'Not Ready for Shipment Planning: Order is not Booked'
ERROR(USR4623);
MSGPARM(WRK.Blank_for_3_USR);

//?JPN Booking done?  AND   not Block
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.Block Order Flag is Block Order
IF RCD.Block_Order_Flag = 'B';

// Send error message - 'Block Order &2 cant be load planned.'
ERROR(USR4661);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Order_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Live With TMS: Option &1 Invalid.'
ERROR(USR4601);
MSGPARM(RCD.*SFLSEL);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?2=Edt Exp Instr
CASE;

// IF RCD.*SFLSEL is *Edit
IF RCD.*SFLSEL = '2'/'2';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?5=dsp order inq
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

// Call program DSP Ord Inquiry Detail DF.
CALL PROGRAM(DSP Ord Inquiry Detail DF) ('PDPZDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.Order_Sequence_Number);
PARAMETER(LCL.Order_Secondary_Line_Seq);
PARAMETER(PAR.Application_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Post-confirm)

//?1=Sel Ready for Load Planning
CASE;

// IF RCD.*SFLSEL is *Select
IF RCD.*SFLSEL = '1'/'1';

// LCL.OH Load Plan Ready = RCD.OH Load Plan Ready
LCL.OH_Load_Plan_Ready = RCD.OH_Load_Plan_Ready;

CASE;

// IF RCD.OH Load Plan Ready is Blank
IF RCD.OH_Load_Plan_Ready = *BLANK;

// LCL.OH Load Plan Ready = CND.Select for Planning
LCL.OH_Load_Plan_Ready = 'S';

// Call program Zzz CHG TMS Order Sts  XF.
CALL PROGRAM(Zzz CHG TMS Order Sts  XF) ('PBITXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.OH_Load_Plan_Ready);

// Call program CRT Load/OrderChg n/ld XF.
CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
PARAMETER(RCD.Load_ID);
PARAMETER('SNDTPM');
PARAMETER('SLS');
PARAMETER(RCD.OH_Load_Plan_Ready);
PARAMETER(LCL.OH_Load_Plan_Ready);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

