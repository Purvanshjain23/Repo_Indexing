// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PWLKDFR
// ?Date: 14.08.2025 Time: 02:56:46
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification history
DO;

//?12/28/2023 JM  S000219 - Fix unintentional deletion of Carcass Detail &
//?                         Tattoo Ded/Add.
//? 8/30/2021 JBB HD83251 - Allow Repayment on Previous Day
//?                         Function modified. Allow the business user
//?                         to perform a repayment on the previous
//?                         business day.
//? 5/05/2021 JBB F17058 - Tattoo Repayments by Business User
//?                        Function created.
ENDDO;

// Call program Rtv User Class        UP.
CALL PROGRAM(Rtv User Class        UP) ('PKU3UPR');
PARAMETER(LCL.User_Class_f_usrprf_USR);

//?USER: Initialize subfile control

// CTL.CC Company Number = PAR.CC Company Number
CTL.CC_Company_Number = PAR.CC_Company_Number;

// CTL.BOH Company Number = PAR.CC Company Number
CTL.BOH_Company_Number = PAR.CC_Company_Number;

// CTL.TRH Repayment ID = PAR.TRH Repayment ID
CTL.TRH_Repayment_ID = PAR.TRH_Repayment_ID;

EXECUTE FUNCTION(Cvt Repay Sts to Text IF) TYPE(EXCINTFUN)                      AB1368656;
PARAMETER(PAR.TRH_Repayment_Status);
PARAMETER(CTL.TRH_Repay_Status_Text);
{
 //?Execute internal function

 CASE;

 // IF PAR.TRH Repayment Status is Cancelled
 IF PAR.TRH_Repayment_Status = 'X';

 // PAR.TRH Repay Status Text = CON.Cancelled
 PAR.TRH_Repay_Status_Text = 'Cancelled';

 // IF PAR.TRH Repayment Status is Created
 IF PAR.TRH_Repayment_Status = 'C';

 // PAR.TRH Repay Status Text = CON.Created
 PAR.TRH_Repay_Status_Text = 'Created';

 // IF PAR.TRH Repayment Status is In Progress
 IF PAR.TRH_Repayment_Status = 'I';

 // PAR.TRH Repay Status Text = CON.In progress
 PAR.TRH_Repay_Status_Text = 'In progress';

 // IF PAR.TRH Repayment Status is Repaid
 IF PAR.TRH_Repayment_Status = 'R';

 // PAR.TRH Repay Status Text = CON.Repaid
 PAR.TRH_Repay_Status_Text = 'Repaid';

 ENDIF;

}


// CTL.Pmt Current Payment Date = PAR.TRH Payment Date
CTL.Pmt_Current_Payment_Date = PAR.TRH_Payment_Date;

EXECUTE FUNCTION(Rtv Payment Processing RT) TYPE(RTVOBJ) FILE(PKC4REP)          AB1147409;
PARAMETER(CTL.CC_Company_Number);
PARAMETER(LCL.Pmt_Current_Payment_Date);
PARAMETER(LCL.Pmt_Current_Payment_Step);
PARAMETER(NLL.PP_Commission_Paym_Error);
PARAMETER(LCL.PP_Payment_Error);
PARAMETER(NLL.PP_Unused_Nbr_1);
PARAMETER(LCL.PP_Repayment_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Determine Payment Step
CASE;

// IF LCL.Pmt Current Payment Date EQ PAR.TRH Payment Date
IF LCL.Pmt_Current_Payment_Date = PAR.TRH_Payment_Date;

// CTL.@Sequence 1.0 = LCL.Pmt Current Payment Step
CTL.@Sequence_1_0 = LCL.Pmt_Current_Payment_Step;

//?Determine Payment Step
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.@Sequence 1.0 = CON.1
CTL.@Sequence_1_0 = 1;

ENDIF;

//?Retrieve current file backup status
CASE;

// IF LCL.User Class f/usrprf   USR is *PGMR
IF LCL.User_Class_f_usrprf_USR = *PGMR;

// CTL.Text description = CONCAT(CON.Repayment files are backe,CON.d up.,CND.*None)
CTL.Text_description = 'Repayment files are backe' + 'd up.' (*ZERO);

// CTL.File Backup Status USR = CND.Backup completed
CTL.File_Backup_Status_USR = 'C';

//?Retrieve current file backup status
// IF PAR.TRH Repayment Status is Cancelled or Repaid
IF PAR.TRH_Repayment_Status = 'X'/'R';

//?Retrieve current file backup status
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER('HPEREPAYBU');
PARAMETER(LCL.System_Value_Alpha_USR);

//?Breakout Repayment Backup file values
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?1. Backup Status (position 1)
// CTL.File Backup Status USR = SUBSTRING(LCL.System Value Alpha    USR,CON.1,CON.1)
CTL.File_Backup_Status_USR = SUBSTRING(LCL.System_Value_Alpha_USR:1:1);

//?2. Date of Backup (positions 2-8)
// LCL.Date Alpha USR = SUBSTRING(LCL.System Value Alpha    USR,CON.2,CON.7)
LCL.Date_Alpha_USR = SUBSTRING(LCL.System_Value_Alpha_USR:2:7);

// LCL.Last Run Date = CVTVAR(LCL.Date Alpha USR)
LCL.Last_Run_Date = CVTVAR(LCL.Date_Alpha_USR);

// LCL.Date From Convert USR = CVTVAR(LCL.Last Run Date)
LCL.Date_From_Convert_USR = CVTVAR(LCL.Last_Run_Date);

//?3. Last file backed up (positions 9 - 18)
// LCL.File = SUBSTRING(LCL.System Value Alpha    USR,CON.9,CON.10)
LCL.File = SUBSTRING(LCL.System_Value_Alpha_USR:9:10);

ENDIF;

//?Determine screen backup message
CASE;

// IF CTL.File Backup Status USR is Backup completed
IF CTL.File_Backup_Status_USR = 'C';

//?If Backup Date <> Job Date, files not backed up
CASE;

// IF LCL.Last Run Date NE JOB.*Job date
IF LCL.Last_Run_Date <> JOB.*Job_date;

// CTL.Text description = CONCAT(CON.Repayment files not backe,CON.d for a repayment today.,CND.*Non
CTL.Text_description = 'Repayment files not backe' + 'd for a repayment today.' (*ZERO);

//?If Backup Date <> Job Date, files not backed up
// IF LCL.Last Run Date EQ JOB.*Job date
IF LCL.Last_Run_Date = JOB.*Job_date;

// CTL.Text description = CONCAT(CON.Repayment files are backe,CON.d up.,CND.*None)
CTL.Text_description = 'Repayment files are backe' + 'd up.' (*ZERO);

ENDIF;

//?Determine screen backup message
// IF CTL.File Backup Status USR is Backup in progress
IF CTL.File_Backup_Status_USR = 'P';

// CTL.Text description = CONCAT(CON.Repayment file backup in,CON.progress, step,CND.*One)
CTL.Text_description = 'Repayment file backup in' + 'progress, step' (1);

// CTL.Text description = CONCAT(CTL.Text description,LCL.File,CND.*One)
CTL.Text_description = CTL.Text_description + LCL.File (1);

// CTL.File Backup Status USR = CND.File not backed up
CTL.File_Backup_Status_USR = 'N';

//?Determine screen backup message
// IF CTL.File Backup Status USR is Error during backup
IF CTL.File_Backup_Status_USR = 'E';

// CTL.Text description = CONCAT(CON.Error backing up Repaymen,CON.t file,CND.*None)
CTL.Text_description = 'Error backing up Repaymen' + 't file' (*ZERO);

// CTL.Text description = CONCAT(CTL.Text description,LCL.File,CND.*One)
CTL.Text_description = CTL.Text_description + LCL.File (1);

ENDIF;

ENDIF;

//?USER: Initialize subfile record from DBF record

EXECUTE FUNCTION(Rtv BOH Lock Sts      RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1251842;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOH_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Determine Buy Order Status description
CASE;

// IF RCD.BOH Status is Locked
IF RCD.BOH_Status = 'L';

// RCD.Buy Order Status Desc = CON.Lock
RCD.Buy_Order_Status_Desc = 'Lock';

//?Determine Buy Order Status description
// IF RCD.BOH Status is Open
IF RCD.BOH_Status = 'O';

// RCD.Buy Order Status Desc = CON.Open
RCD.Buy_Order_Status_Desc = 'Open';

ENDIF;

EXECUTE FUNCTION(Rtv All Values) TYPE(RTVOBJ) FILE(PKA1CPP)                     AB1366550;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(NLL.TH_Purchase_Date);
PARAMETER(NLL.TH_Group_Reference);
PARAMETER(NLL.TH_Live_Purchase_UOM);
PARAMETER(NLL.TH_Live_Purchase_Price);
PARAMETER(NLL.TH_Live_Gross_Amt);
PARAMETER(NLL.TH_LIve_Net_Amt);
PARAMETER(NLL.TH_Resale_UOM);
PARAMETER(NLL.TH_Recalc_Live_Wgt_Yld);
PARAMETER(NLL.TH_Pricing_Date);
PARAMETER(NLL.TH_Resale_Spread_Sts);
PARAMETER(NLL.TH_Dead_On_Arrival);
PARAMETER(NLL.TH_Head_Received);
PARAMETER(NLL.TH_Yard_Deads);
PARAMETER(NLL.TH_Held_Over);
PARAMETER(NLL.TH_Head_Condemned);
PARAMETER(NLL.TH_Head_Killed);
PARAMETER(NLL.TH_Head_Adds);
PARAMETER(NLL.TH_Head_Accepted);
PARAMETER(NLL.TH_Live_Wgt);
PARAMETER(NLL.TH_Adj_Live_Wgt);
PARAMETER(NLL.TH_Hot_Wgt);
PARAMETER(NLL.TH_Tot_Loin_Eye_Depth);
PARAMETER(NLL.TH_Tot_Backfat_Inches);
PARAMETER(NLL.TH_Tot_Light_Reflectance);
PARAMETER(NLL.TH_Avg_Live_Wgt);
PARAMETER(NLL.TH_Avg_Hot_Wgt);
PARAMETER(NLL.TH_Avg_Light_Reflectance);
PARAMETER(NLL.TH_Avg_Lean_Percent);
PARAMETER(NLL.TH_Avg_Loin_Eye_Depth);
PARAMETER(NLL.TH_Avg_Backfat);
PARAMETER(NLL.TH_Std_Yield_Percent);
PARAMETER(NLL.TH_Actual_Yield);
PARAMETER(NLL.TH_Adj_Actual_Yield);
PARAMETER(NLL.TH_Yield_Difference);
PARAMETER(NLL.TH_Recalc_Live_Wgt);
PARAMETER(NLL.TH_CM_Market_Price);
PARAMETER(NLL.TH_CM_Base_Mkt_Price);
PARAMETER(NLL.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(NLL.TH_CM_Sort_Discount_Amt);
PARAMETER(NLL.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(NLL.TH_CM_Base_Carcass_Value);
PARAMETER(NLL.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(NLL.TH_CM_Carcass_Gross_Amt);
PARAMETER(NLL.TH_Deduction_Amt);
PARAMETER(NLL.TH_Total_Net_WO_Adds);
PARAMETER(NLL.TH_Carcass_Net_Amt);
PARAMETER(NLL.TH_Additions_Amt);
PARAMETER(NLL.TH_Payment_Gross);
PARAMETER(NLL.Th_Payment_Net_Amt);
PARAMETER(NLL.TH_AP_Voucher_Document#);
PARAMETER(NLL.TH_Freight_Amount);
PARAMETER(NLL.TH_Accrual_Amount);
PARAMETER(NLL.TH_Fixed_Cost_Amount);
PARAMETER(NLL.TH_Calc_Net_Sts);
PARAMETER(RCD.TH_Payment_Sts);
PARAMETER(NLL.TH_Header_Error_Sts);
PARAMETER(NLL.TH_Detail_Error_Sts);
PARAMETER(NLL.TH_Kill_Balancing_Sts);
PARAMETER(NLL.TH_Bal_to_Kill_Gen);
PARAMETER(NLL.TH_Commission_A_P_Voucher);
PARAMETER(NLL.TH_Voucher_Payment_Date);
PARAMETER(NLL.TH_User_Error_Override);
PARAMETER(RCD.TH_Held_Over_Record);
PARAMETER(NLL.TH_Sex);
PARAMETER(NLL.TH_Held_Ovr_Completed_Dte);
PARAMETER(NLL.TH_Commission_Paid_Date);
PARAMETER(NLL.TH_Actual_Check_Date);
PARAMETER(NLL.TH_Shipped_Weight);
PARAMETER(NLL.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(NLL.TH_FFLI);
PARAMETER(NLL.TH_Kill_Product_Value);
PARAMETER(NLL.TH_Cut_Product_Value);
PARAMETER(NLL.TH_Render_Product_Value);
PARAMETER(NLL.TH_Head_Excluded);
PARAMETER(NLL.TH_CM_Bse_Mkt_Live_CWT);
PARAMETER(NLL.TH_CM_Bse_Mkt_Carc_CWT);
PARAMETER(NLL.TH_CM_Srt_Dsc_Live_CWT);
PARAMETER(NLL.TH_CM_Srt_Dsc_Carc_CWT);
PARAMETER(NLL.TH_CM_Yld_G_L_Live_CWT);
PARAMETER(NLL.TH_CM_Yld_G_L_Carc_CWT);
PARAMETER(NLL.TH_CM_Crc_Val_Live_CWT);
PARAMETER(NLL.TH_CM_Crc_Val_Carc_CWT);
PARAMETER(NLL.TH_CM_Lean_Prem_Live_CWT);
PARAMETER(NLL.TH_CM_Lean_Prem_Carc_CWT);
PARAMETER(NLL.TH_CM_Gross_Live_CWT);
PARAMETER(NLL.TH_CM_Gross_Carc_CWT);
PARAMETER(NLL.TH_Source_Type);
PARAMETER(NLL.TH_Scale_Ticket_Sts);
PARAMETER(NLL.TH_Payment_Type);
PARAMETER(NLL.TH_HPS_Movement_Ref_#);
PARAMETER(NLL.TH_Source_Code);
PARAMETER(NLL.TH_Hog_Class_Type);
PARAMETER(NLL.TH_Posted_to_HPS_Flag);
PARAMETER(NLL.TH_Schedule_Kill_Shift);
PARAMETER(NLL.TH_Shift_Held_Over);
PARAMETER(NLL.TH_State);
PARAMETER(NLL.TH_Unused_Code);
PARAMETER(NLL.TH_Unused_Sts_2_Pos);
PARAMETER(NLL.TH_Commission_Status);
PARAMETER(NLL.TH_Paid_2_Week_Avg_Y_N);
PARAMETER(NLL.TH_Unused_Sts_1_Pos_3);
PARAMETER(NLL.TH_DOA_Weight);
PARAMETER(NLL.TH_Avg_Lean_EXC_ADD);
PARAMETER(NLL.TH_HPS_Farm_Site);
PARAMETER(NLL.TH_Shift_Held_Over_Head);
PARAMETER(NLL.TH_Sorting_Amount);
PARAMETER(NLL.TH_Head_Identified);
PARAMETER(NLL.TH_Percent_Identified);
PARAMETER(NLL.TH_Percent_Accepted);
PARAMETER(NLL.TH_Head_Adjusted_LN);
PARAMETER(NLL.TH_PHA_Head_Adds);
PARAMETER(NLL.TH_PHA_Add_Type);
PARAMETER(NLL.TH_PHA_Average_Type);
PARAMETER(NLL.TH_PHA_Add_Reason);
PARAMETER(NLL.TH_PHA_Yield_Percent);
PARAMETER(NLL.TH_PHA_Lean_Prm_Crc_CWT);
PARAMETER(NLL.TH_VC_Gross_Value_HD);
PARAMETER(NLL.TH_Excluded_Gross_Value);
PARAMETER(NLL.TH_Avg_Lean);
PARAMETER(NLL.TH_Broken_Back_Hd_Count);
PARAMETER(NLL.TH_Hot_Scl_Upload_Time);
PARAMETER(NLL.TH_Unused_Nbr_4);
PARAMETER(NLL.TH_Excluded_Carc_Val);
PARAMETER(NLL.TH_Excluded_Premium);
PARAMETER(NLL.TH_Unused_Nbr_7);
PARAMETER(NLL.TH_Unused_Nbr_8);
PARAMETER(NLL.TH_Unused_Nbr_9);
PARAMETER(NLL.TH_Unused_Nbr_10);
PARAMETER(NLL.TH_Break_Even_Price_CWT);
PARAMETER(NLL.TH_Meat_Value_Factor_Amt);
PARAMETER(NLL.TH_Yld_Parm_Adj_Yield);
PARAMETER(NLL.TH_PHA_Sort_Disc_Fctr);
PARAMETER(NLL.TH_Avg_Loin_Eye_2_dec);
PARAMETER(NLL.TH_Avg_Backfat_2_Dec);
PARAMETER(NLL.TH_HITCH_Old_Pay_Net_Amt);
PARAMETER(NLL.TH_MPR_Sort_Loss);
PARAMETER(NLL.TH_Unused_Nbr_19);
PARAMETER(NLL.TH_Unused_Nbr_20);
PARAMETER(NLL.TH_Cold_Scl_Upload_Date);
PARAMETER(NLL.TH_Cold_Scl_Upload_Time);
PARAMETER(NLL.TH_Head_LFT);
PARAMETER(NLL.TH_Head_EUT_KOA);
PARAMETER(NLL.TH_Unused_Date_5);
PARAMETER(NLL.TH_Unused_Sts_1);
PARAMETER(NLL.TH_Unused_Sts_2);
PARAMETER(NLL.TH_Unused_Sts_3);
PARAMETER(NLL.TH_Unused_Sts_4);
PARAMETER(NLL.TH_Unused_Sts_5);
PARAMETER(NLL.TH_Unused_Sts_6);
PARAMETER(NLL.TH_Unused_Sts_7);
PARAMETER(NLL.TH_Unused_Sts_8);
PARAMETER(NLL.DF_Defect_Code);
PARAMETER(RCD.THP_Process_Code);
PARAMETER(NLL.PD_Producer_Code);
PARAMETER(NLL.PL_Location_Code);
PARAMETER(NLL.HB_Buyer_Code);
PARAMETER(NLL.GN_Genetic_Code);
PARAMETER(NLL.HC_Class_Code);
PARAMETER(NLL.RS_User_Changed);
PARAMETER(NLL.RS_Date_Changed);
PARAMETER(NLL.RS_Time_Changed);
PARAMETER(NLL.RS_Record_Status);
PARAMETER(NLL.RS_Job);
PARAMETER(NLL.RS_Program);
PARAMETER(NLL.RS_User_Added);
PARAMETER(NLL.RS_Date_Added);
PARAMETER(NLL.RS_Time_Added);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If Repayment Detail Status is Payment Edit Executed
CASE;

// IF RCD.TRD Repayment Status is Payment Edit Executed
IF RCD.TRD_Repayment_Status = 'X';

//?If Step = 5 and Payment Errors = No Errors
CASE;

// IF LCL.Pmt Current Payment Date EQ CTL.Pmt Current Payment Date
IF LCL.Pmt_Current_Payment_Date = CTL.Pmt_Current_Payment_Date;

// AND LCL.Pmt Current Payment Step is 00005 Payment Listing
AND LCL.Pmt_Current_Payment_Step = 00005;

// AND LCL.PP Payment Error is No Error/No val
AND LCL.PP_Payment_Error = 'N'/*BLANK;

// RCD.TRD Repayment Status = CND.Payment Edit Complete
RCD.TRD_Repayment_Status = 'P';

//?If Step = 5 and Payment Errors = No Errors
// IF LCL.Pmt Current Payment Date EQ CTL.Pmt Current Payment Date
IF LCL.Pmt_Current_Payment_Date = CTL.Pmt_Current_Payment_Date;

// AND LCL.Pmt Current Payment Step is 00005 Payment Listing
AND LCL.Pmt_Current_Payment_Step = 00005;

// AND LCL.PP Payment Error is Errors
AND LCL.PP_Payment_Error = 'E';

// RCD.TRD Repayment Status = CND.Payment Edit Executed
RCD.TRD_Repayment_Status = 'X';

//?If Step = 5 and Payment Errors = No Errors
// IF LCL.Pmt Current Payment Date EQ CTL.Pmt Current Payment Date
IF LCL.Pmt_Current_Payment_Date = CTL.Pmt_Current_Payment_Date;

// AND LCL.Pmt Current Payment Step is Less or Equal to Step 4
AND LCL.Pmt_Current_Payment_Step <= 00004;

// RCD.TRD Repayment Status = CND.Payment Edit Executed
RCD.TRD_Repayment_Status = 'X';

ENDIF;

// Call program Upd All Repay Dtl Sts XF.
CALL PROGRAM(Upd All Repay Dtl Sts XF) ('PWNSXFR');
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.TRH_Repayment_ID);
PARAMETER(RCD.TRD_Repayment_Status);

ENDIF;

//?Determine Tattoo Repayment Detail Status description
CASE;

// IF RCD.TRD Repayment Status is Created
IF RCD.TRD_Repayment_Status = 'C';

// RCD.Tattoo Repay Dtl Sts Desc = CON.Created
RCD.Tattoo_Repay_Dtl_Sts_Desc = 'Created';

//?Determine Tattoo Repayment Detail Status description
// IF RCD.TRD Repayment Status is Unpaid
IF RCD.TRD_Repayment_Status = 'U';

// RCD.Tattoo Repay Dtl Sts Desc = CON.Unpaid
RCD.Tattoo_Repay_Dtl_Sts_Desc = 'Unpaid';

//?Determine Tattoo Repayment Detail Status description
// IF RCD.TRD Repayment Status is Difference Query Executed
IF RCD.TRD_Repayment_Status = 'D';

// RCD.Tattoo Repay Dtl Sts Desc = CON.DifRpt
RCD.Tattoo_Repay_Dtl_Sts_Desc = 'DifRpt';

//?Determine Tattoo Repayment Detail Status description
// IF RCD.TRD Repayment Status is Edited
IF RCD.TRD_Repayment_Status = 'E';

// RCD.Tattoo Repay Dtl Sts Desc = CON.Edited
RCD.Tattoo_Repay_Dtl_Sts_Desc = 'Edited';

//?Determine Tattoo Repayment Detail Status description
// IF RCD.TRD Repayment Status is Transfered
IF RCD.TRD_Repayment_Status = 'T';

// RCD.Tattoo Repay Dtl Sts Desc = CON.Transfer
RCD.Tattoo_Repay_Dtl_Sts_Desc = 'Transfer';

//?Determine Tattoo Repayment Detail Status description
// IF RCD.TRD Repayment Status is Payment Edit Executed
IF RCD.TRD_Repayment_Status = 'X';

// RCD.Tattoo Repay Dtl Sts Desc = CON.PayEdtEx
RCD.Tattoo_Repay_Dtl_Sts_Desc = 'PayEdtEx';

//?Determine Tattoo Repayment Detail Status description
// IF RCD.TRD Repayment Status is Payment Edit Complete
IF RCD.TRD_Repayment_Status = 'P';

// RCD.Tattoo Repay Dtl Sts Desc = CON.PayEdtCm
RCD.Tattoo_Repay_Dtl_Sts_Desc = 'PayEdtCm';

//?Determine Tattoo Repayment Detail Status description
// IF RCD.TRD Repayment Status is Payment Edit Error
IF RCD.TRD_Repayment_Status = 'Q';

// RCD.Tattoo Repay Dtl Sts Desc = CON.PayEdtEr
RCD.Tattoo_Repay_Dtl_Sts_Desc = 'PayEdtEr';

//?Determine Tattoo Repayment Detail Status description
// IF RCD.TRD Repayment Status is Payment Edit Incomplete
IF RCD.TRD_Repayment_Status = 'I';

// RCD.Tattoo Repay Dtl Sts Desc = CON.PayEdtIc
RCD.Tattoo_Repay_Dtl_Sts_Desc = 'PayEdtIc';

//?Determine Tattoo Repayment Detail Status description
// IF RCD.TRD Repayment Status is Repaid
IF RCD.TRD_Repayment_Status = 'R';

// RCD.Tattoo Repay Dtl Sts Desc = CON.Repaid
RCD.Tattoo_Repay_Dtl_Sts_Desc = 'Repaid';

ENDIF;

// CTL.Repay Detail Highest Sts = RCD.TRD Repayment Status
CTL.Repay_Detail_Highest_Sts = RCD.TRD_Repayment_Status;

//?USER: Process subfile control (Pre-confirm)

//?Process command keys - check status
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Process command keys - check status
// IF PAR.TRH Repayment Status is Repaid
IF PAR.TRH_Repayment_Status = 'R';

// Send error message - 'Function key not allowed because the Repayment is &1'
ERROR(PRK1597);
MSGPARM('Completed.');

//?Process command keys - check status
// IF PAR.TRH Repayment Status is Cancelled
IF PAR.TRH_Repayment_Status = 'X';

// AND CTL.*CMD key is CF06
AND ( CTL.*CMD_key = '06';

// OR CTL.*CMD key is CF08
OR CTL.*CMD_key = '08';

// OR CTL.*CMD key is CF10
OR CTL.*CMD_key = '10';

// OR CTL.*CMD key is CF14
OR CTL.*CMD_key = '14';

// OR CTL.*CMD key is CF16
OR CTL.*CMD_key = '16';

// OR CTL.*CMD key is CF17
OR CTL.*CMD_key = '17' );

// Send error message - 'Function key not allowed because the Repayment is &1'
ERROR(PRK1597);
MSGPARM('Cancelled.');

//?Process command keys - check status
// IF *OTHERWISE
IF *OTHERWISE;

//?Process command keys
CASE;

// IF CTL.*CMD key is CF06
IF CTL.*CMD_key = '06';

//?Select Tattoos for Repayment
DO;

//?If File Back Up completed, perform Tattoo Select
CASE;

// IF CTL.File Backup Status USR is Backup completed
IF CTL.File_Backup_Status_USR = 'C';

EXECUTE FUNCTION(Rtv Tattoo Repay Hdr  RT) TYPE(RTVOBJ) FILE(PWAWCPP)           AB1367208;
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.TRH_Repayment_ID);
PARAMETER(LCL.TRH_Repayment_Status);
PARAMETER(NLL.TRH_Date_Start);
PARAMETER(NLL.TRH_Time_Start);
PARAMETER(NLL.TRH_Date_Complete);
PARAMETER(NLL.TRH_Time_Complete);
PARAMETER(NLL.TRH_Payment_Date);
PARAMETER(NLL.TRH_Payment_Step);
PARAMETER(NLL.TRH_Backup_File_Prefix);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If Tattoo Repayment Header Status is Not Repaid, select Tattoos
CASE;

// IF NOT LCL.TRH Repayment Status is Repaid
IF ! LCL.TRH_Repayment_Status = 'R';

// Call program Sel Tattoo BU Repay   DF.
CALL PROGRAM(Sel Tattoo BU Repay   DF) ('PWLODFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.Pmt_Current_Payment_Date);
PARAMETER(CTL.TRH_Repayment_ID);
PARAMETER(LCL.Count_USR_2);

//?Update Tattoo Repayment Header status to In progress
CASE;

// IF PAR.TRH Repayment Status is Created
IF PAR.TRH_Repayment_Status = 'C';

// AND LCL.Count USR 2 is Entered
AND LCL.Count_USR_2 <> *ZERO;

EXECUTE FUNCTION(Chg Tattoo Repay Hdr  CH) TYPE(CHGOBJ) FILE(PWAWCPP)           AB1364805;
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.TRH_Repayment_ID);
PARAMETER('I');
PARAMETER(PAR.TRH_Date_Start);
PARAMETER(PAR.TRH_Time_Start);
PARAMETER(PAR.TRH_Date_Complete);
PARAMETER(PAR.TRH_Time_Complete);
PARAMETER(PAR.TRH_Payment_Date);
PARAMETER(PAR.TRH_Payment_Step);
PARAMETER(PAR.TRH_Backup_File_Prefix);
PARAMETER('A');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


//?RMC Added upd to par so screen will be updated
// PAR.TRH Repayment Status = CND.In Progress
PAR.TRH_Repayment_Status = 'I';

//?Update Tattoo Repayment Detail record status to Created
// LCL.Tattoo Number Alpha = CVTVAR(CTL.TH Tattoo Number)
LCL.Tattoo_Number_Alpha = CVTVAR(CTL.TH_Tattoo_Number);

// LCL.TRC Comment = CONCAT(CON.Tattoo Repayment In Progr,CON.ess.,CND.*None)
LCL.TRC_Comment = 'Tattoo Repayment In Progr' + 'ess.' (*ZERO);

EXECUTE FUNCTION(Crt Tattoo Repay Cmnt CR) TYPE(CRTOBJ) FILE(PWAYCPP)           AB1364775;
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.TRH_Repayment_ID);
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(LCL.TRC_Comment);
PARAMETER('S');
{
 //?USER: Processing before Data update

 //?Make sure BOH Company Number is populated
 CASE;

 // IF PAR.BOH Company Number is *ZERO
 IF PAR.BOH_Company_Number = *ZERO;

 // DB1.BOH Company Number = PAR.CC Company Number
 DB1.BOH_Company_Number = PAR.CC_Company_Number;

 ENDIF;

 EXECUTE FUNCTION(Rtv Next Comment Seq# RT) TYPE(RTVOBJ) FILE(PWAYCPP)           AB1366735;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.TRH_Repayment_ID);
 PARAMETER(DB1.TRC_Sequence);
 {
  //?USER: Processing if Data record not found

  // PAR.TRC Sequence = CON.1
  PAR.TRC_Sequence = 1;

  //?USER: Process Data record

  // PAR.TRC Sequence = DB1.TRC Sequence + CON.1
  PAR.TRC_Sequence = DB1.TRC_Sequence + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?If File Back Up completed, perform Tattoo Select
// IF CTL.File Backup Status USR is Error during backup
IF CTL.File_Backup_Status_USR = 'E';

// Send error message - 'Cannot unpay Tattoos.  Repayment file backup error occured.'
ERROR(PRK1578);

//?If File Back Up completed, perform Tattoo Select
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Cannot unpay Tattoos.  Repayment file backup not started.'
ERROR(PRK1579);

ENDIF;

ENDDO;

//?Process command keys
// IF CTL.*CMD key is CF08
IF CTL.*CMD_key = '08';

//?Unpay all selected tattoos
DO;

//?If file backup completed
CASE;

// IF CTL.File Backup Status USR is Backup completed
IF CTL.File_Backup_Status_USR = 'C';

// Call program Rtv Pymt Parms+Repay  XF.
CALL PROGRAM(Rtv Pymt Parms+Repay  XF) ('PWIOXFR');
PARAMETER(CTL.CC_Company_Number);
PARAMETER(LCL.Pmt_Current_Payment_Date);
PARAMETER(LCL.Pmt_Current_Payment_Step);
PARAMETER(LCL.PP_Repayment_Status);

//?Check Date/Step/Repay Sts combination
CASE;

// IF LCL.PP Repayment Status is Yes
IF LCL.PP_Repayment_Status = 'Y';

//?Check Date/Step/Repay Sts combination
// IF LCL.Pmt Current Payment Date EQ JOB.*Job date
IF LCL.Pmt_Current_Payment_Date = JOB.*Job_date;

// AND LCL.Pmt Current Payment Step is Less or Equal to Step 1
AND LCL.Pmt_Current_Payment_Step <= 00001;

// AND LCL.PP Repayment Status is No
AND LCL.PP_Repayment_Status = 'N';

//?Check Date/Step/Repay Sts combination
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Cannot unpay Tattoo.  The daily Payment Edit has not completed.'
ERROR(PRK1602);

QUIT;

ENDIF;

// Call program Chk Status for Unpay  XF.
CALL PROGRAM(Chk Status for Unpay  XF) ('PWM3XFR');
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.TRH_Repayment_ID);
PARAMETER(LCL.Continue_Process_USR);

//?If Continue Flag = No, send error message
CASE;

// IF LCL.Continue Process USR is No
IF LCL.Continue_Process_USR = 'N';

// Send error message - 'Cannot unpay Tattoo.  All Tattoos must be in a status of Created or Unpaid.
ERROR(PRK1576);

QUIT;

ENDIF;

// Call program Exc Unpay Tattoos     XF.
CALL PROGRAM(Exc Unpay Tattoos     XF) ('PWM5XFR');
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.TRH_Repayment_ID);
PARAMETER(PAR.TRH_Payment_Date);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDDO;

//?Process command keys
// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

//?Backup Files for Repayment
DO;

//?If user class is *PGMR, do not backup files. Instead, update
//?Company Values file for HPEREPAYBU with completion value.
// Call program Rtv User Class        UP.
CALL PROGRAM(Rtv User Class        UP) ('PKU3UPR');
PARAMETER(LCL.User_Class_f_usrprf_USR);

//?Check if Backup completed.  If not, then submit backup process
CASE;

// IF CTL.File Backup Status USR is Backup completed
IF CTL.File_Backup_Status_USR = 'C';

// Send error message - 'Repayment backup has already completed.'
ERROR(PRK1580);

//?Check if Backup completed.  If not, then submit backup process
// IF LCL.User Class f/usrprf   USR is *PGMR
IF LCL.User_Class_f_usrprf_USR = *PGMR;

// LCL.Display Warning on Screen = CND.No
LCL.Display_Warning_on_Screen = 'N';

// LCL.Date Alpha USR = CVTVAR(JOB.*Job date)
LCL.Date_Alpha_USR = CVTVAR(JOB.*Job_date);

// LCL.System Value Alpha    USR = CONCAT(CON.C,LCL.Date Alpha USR,CND.*None)
LCL.System_Value_Alpha_USR = 'C' + LCL.Date_Alpha_USR (*ZERO);

// Call program Upd Repayment Backup  XF.
CALL PROGRAM(Upd Repayment Backup  XF) ('PUKMXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPEREPAYBU');
PARAMETER(LCL.System_Value_Alpha_USR);

//?Check if Backup completed.  If not, then submit backup process
// IF *OTHERWISE
IF *OTHERWISE;

//?Perform backups
DO;

//?Retrieve From and To library names for backup files and Co# Abbrev
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(CTL.CC_Company_Number);
PARAMETER('HPEREPAYLB');
PARAMETER(LCL.Libraries_From_To);

//?If From and To libraries found, break them out; build suffix
CASE;

// IF LCL.Libraries: From/To is Entered
IF LCL.Libraries_From_To <> *BLANK;

// LCL.Library From USR = SUBSTRING(LCL.Libraries: From/To,CON.1,CON.10)
LCL.Library_From_USR = SUBSTRING(LCL.Libraries_From_To:1:10);

// LCL.Library To USR = SUBSTRING(LCL.Libraries: From/To,CON.11,CON.10)
LCL.Library_To_USR = SUBSTRING(LCL.Libraries_From_To:11:10);

//?Build backup file prefix
DO;

//?The files will be named as follows: LLMMDDFFFF    ex: GU0505PKAW
//?LL   = Location abreviation:  GU, ST, TF, or T2
//?MM   = Month
//?DD   = Day
//?FFFF = first four characters of the file name
//?Breakout date and make it MMDD alpha
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Month USR = JOB.*Job date *MONTH
LCL.Month_USR = DATEDTLS(JOB.*Job_date 'MO' 1111111 'NONE' 'N' 1);

// LCL.Day of Month USR = JOB.*Job date *DAY OF MONTH
LCL.Day_of_Month_USR = DATEDTLS(JOB.*Job_date 'DM' 1111111 'NONE' 'N' 1);

// Month and Day combined
LCL.Month_and_Day_4_0 = ( LCL.Month_USR * 100 ) + LCL.Day_of_Month_USR;

// LCL.@Text 4 = CVTVAR(LCL.Month and Day 4.0)
LCL.@Text_4 = CVTVAR(LCL.Month_and_Day_4_0);

ENDIF;

//?Build file prefix: Company abbreviation + MMDD
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Build file suffix for specific companies
CASE;

// IF PAR.CC Company Number is SBD Farms of Guymon, Ok
IF PAR.CC_Company_Number = 360;

// LCL.Backup File Prefix = CONCAT(CON.GU,LCL.@Text 4,CND.*None)
LCL.Backup_File_Prefix = 'GU' + LCL.@Text_4 (*ZERO);

//?Build file suffix for specific companies
// IF PAR.CC Company Number is Sioux City
IF PAR.CC_Company_Number = 440;

// LCL.Backup File Prefix = CONCAT(CON.ST,LCL.@Text 4,CND.*None)
LCL.Backup_File_Prefix = 'ST' + LCL.@Text_4 (*ZERO);

//?Build file suffix for specific companies
// IF PAR.CC Company Number is Triumph Foods Market
IF PAR.CC_Company_Number = 960;

// OR PAR.CC Company Number is Triumph Foods-2
OR PAR.CC_Company_Number = 961;

// LCL.Backup File Prefix = CONCAT(CON.TF,LCL.@Text 4,CND.*None)
LCL.Backup_File_Prefix = 'TF' + LCL.@Text_4 (*ZERO);

ENDIF;

ENDIF;

ENDDO;

//?If From and To libraries found, break them out; build suffix
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'From and To library names are blank.  Contact I/T.'
ERROR(PRK1573);

QUIT;

ENDIF;

// LCL.Back Up Date From = JOB.*Job date + CON.-14 *DAYS
LCL.Back_Up_Date_From = DATEINCR(JOB.*Job_date '-14' 'DY' 1111111 'NONE' 'N' 1);

// Call program Exc Repay File Backup CL.
SBMJOB;
CALL PROGRAM(Exc Repay File Backup CL) ('PWMWUPC');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(LCL.Library_From_USR);
PARAMETER(LCL.Library_To_USR);
PARAMETER(LCL.Backup_File_Prefix);
PARAMETER(JOB.*Job_date);
PARAMETER(LCL.Back_Up_Date_From);
PARAMETER(CTL.Pmt_Current_Payment_Date);
SBMJOBOVR JOB(REPAYBKUP);
SBMJOBOVR LOG(4;
SBMJOBOVR 00;
SBMJOBOVR *SECLVL);
SBMJOBEND;

// Send information message - 'Repayment files backup process submitted.'
MESSAGE(PRK1574 *INFO);

ENDDO;

ENDIF;

ENDDO;

//?Process command keys
// IF CTL.*CMD key is CF14
IF CTL.*CMD_key = '14';

//?Run Payment Edit
DO;

//?1. Validate all records are ready to be paid
EXECUTE FUNCTION(Chk All Rcds Edited   RT) TYPE(RTVOBJ) FILE(PWAXCPP)           AB1367563;
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.TRH_Repayment_ID);
PARAMETER(LCL.All_Tattoos_Edited_Y_N);
{
 //?USER: Initialize routine

 //?Assume all Tattoos are unpaid.  Change to No if not true.
 // PAR.All Tattoos Edited Y/N = CND.Yes
 PAR.All_Tattoos_Edited_Y_N = 'Y';

 //?USER: Processing if Data record not found

 // PAR.All Tattoos Edited Y/N = CND.No
 PAR.All_Tattoos_Edited_Y_N = 'N';

 //?USER: Process Data record

 //?If record not Edited, set Y/N flag to No
 CASE;

 // IF DB1.TRD Repayment Status is Transfered
 IF DB1.TRD_Repayment_Status = 'T';

 //?If record not Edited, set Y/N flag to No
 // IF DB1.TRD Repayment Status is Valid for Payment Edit
 IF DB1.TRD_Repayment_Status = 'D'/'E'/'P'/'Q'/'X'/'I';

 //?If record not Edited, set Y/N flag to No
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.All Tattoos Edited Y/N = CND.No
 PAR.All_Tattoos_Edited_Y_N = 'N';

 QUIT;

 ENDIF;

}


//?If any Tattoos in a status other than Edited, send error message
CASE;

// IF LCL.All Tattoos Edited Y/N is No
IF LCL.All_Tattoos_Edited_Y_N = 'N';

// Send error message - 'Cannot run Payment Edit due to current record status.'
ERROR(PRK1588);

QUIT;

ENDIF;

//?2. Validate regular daily Payment process completed
EXECUTE FUNCTION(Rtv Payment Processing RT) TYPE(RTVOBJ) FILE(PKC4REP)          AB1147409;
PARAMETER(CTL.CC_Company_Number);
PARAMETER(LCL.Pmt_Current_Payment_Date);
PARAMETER(LCL.Pmt_Current_Payment_Step);
PARAMETER(LCL.PP_Commission_Paym_Error);
PARAMETER(LCL.PP_Payment_Error);
PARAMETER(NLL.PP_Unused_Nbr_1);
PARAMETER(LCL.PP_Repayment_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Payment Date/Step validation
CASE;

// IF LCL.PP Repayment Status is Yes
IF LCL.PP_Repayment_Status = 'Y';

// AND LCL.Pmt Current Payment Date EQ CTL.Pmt Current Payment Date
AND LCL.Pmt_Current_Payment_Date = CTL.Pmt_Current_Payment_Date;

//?Payment Date/Step validation
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Cannot run Payment Edit until daily Payment Post completes.'
ERROR(PRK1584);

QUIT;

ENDIF;

//?3. Delete Carcass Detail and Tattoo D/A (except FRT records)
DO;

ENDDO;

//?4. Run Payment Edit process
//?Run the Payment Edit process
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Chg Payment Date/Step  CH) TYPE(CHGOBJ) FILE(PKC4REP)          AB1147408;
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.Pmt_Current_Payment_Date);
PARAMETER(1);
PARAMETER(LCL.PP_Commission_Paym_Error);
PARAMETER(LCL.PP_Payment_Error);
{
 //?USER: Processing before Data read

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


// LCL.Payment Status - Saved = CTL.TRD Payment Sts
LCL.Payment_Status_Saved = CTL.TRD_Payment_Sts;

// Call program Chg Process Code-Repay XF.
CALL PROGRAM(Chg Process Code-Repay XF) ('PWN9XFR');
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.TRH_Repayment_ID);
PARAMETER('SLG');
PARAMETER(LCL.Process_Code_Saved);

// Call program PMT Payment Process   PV.
CALL PROGRAM(PMT Payment Process   PV) ('PKXAPVR');
PARAMETER(CTL.TRH_Repayment_ID);

//?If F3 pressed from previous program, skip message create
CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// Call program Chg Process Code-Repay XF.
CALL PROGRAM(Chg Process Code-Repay XF) ('PWN9XFR');
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.TRH_Repayment_ID);
PARAMETER(LCL.Process_Code_Saved);
PARAMETER(NLL.Process_Code_Saved);

//?If F3 pressed from previous program, skip message create
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Upd All Repay Dtl Sts XF.
CALL PROGRAM(Upd All Repay Dtl Sts XF) ('PWNSXFR');
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.TRH_Repayment_ID);
PARAMETER('X');

// CTL.Repay Detail Highest Sts = CND.Payment Edit Executed
CTL.Repay_Detail_Highest_Sts = 'X';

// LCL.TRC Comment = CONCAT(CON.The Payment Edit has been,CON.executed,CND.*One)
LCL.TRC_Comment = 'The Payment Edit has been' + 'executed' (1);

EXECUTE FUNCTION(Crt Tattoo Repay Cmnt CR) TYPE(CRTOBJ) FILE(PWAYCPP)           AB1364775;
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.TRH_Repayment_ID);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.TRC_Comment);
PARAMETER('S');
{
 //?USER: Processing before Data update

 //?Make sure BOH Company Number is populated
 CASE;

 // IF PAR.BOH Company Number is *ZERO
 IF PAR.BOH_Company_Number = *ZERO;

 // DB1.BOH Company Number = PAR.CC Company Number
 DB1.BOH_Company_Number = PAR.CC_Company_Number;

 ENDIF;

 EXECUTE FUNCTION(Rtv Next Comment Seq# RT) TYPE(RTVOBJ) FILE(PWAYCPP)           AB1366735;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.TRH_Repayment_ID);
 PARAMETER(DB1.TRC_Sequence);
 {
  //?USER: Processing if Data record not found

  // PAR.TRC Sequence = CON.1
  PAR.TRC_Sequence = 1;

  //?USER: Process Data record

  // PAR.TRC Sequence = DB1.TRC Sequence + CON.1
  PAR.TRC_Sequence = DB1.TRC_Sequence + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


// Call program Rtv Pymt Parms+Repay  XF.
CALL PROGRAM(Rtv Pymt Parms+Repay  XF) ('PWIOXFR');
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.Pmt_Current_Payment_Date);
PARAMETER(LCL.Pmt_Current_Payment_Step);
PARAMETER(NLL.PP_Repayment_Status);

//?Update Payment Step
CASE;

// IF LCL.Pmt Current Payment Step GT CTL.@Sequence 1.0
IF LCL.Pmt_Current_Payment_Step > CTL.@Sequence_1_0;

// CTL.@Sequence 1.0 = LCL.Pmt Current Payment Step
CTL.@Sequence_1_0 = LCL.Pmt_Current_Payment_Step;

ENDIF;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDDO;

//?Process command keys
// IF CTL.*CMD key is CF16
IF CTL.*CMD_key = '16';

//?Run Payment Difference Queries
DO;

//?Update the Tattoo Repayment Header Payment Step
EXECUTE FUNCTION(Rtv Payment Processing RT) TYPE(RTVOBJ) FILE(PKC4REP)          AB1147409;
PARAMETER(CTL.CC_Company_Number);
PARAMETER(LCL.Pmt_Current_Payment_Date);
PARAMETER(LCL.Pmt_Current_Payment_Step);
PARAMETER(NLL.PP_Commission_Paym_Error);
PARAMETER(LCL.PP_Payment_Error);
PARAMETER(NLL.PP_Unused_Nbr_1);
PARAMETER(LCL.PP_Repayment_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.@Sequence 1.0 = LCL.Pmt Current Payment Step
CTL.@Sequence_1_0 = LCL.Pmt_Current_Payment_Step;

EXECUTE FUNCTION(Chg Tattoo Repay Step CH) TYPE(CHGOBJ) FILE(PWAWCPP)           AB1368894;
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.TRH_Repayment_ID);
PARAMETER(LCL.Pmt_Current_Payment_Step);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


//?Determine if Payment Edit completed successfully
CASE;

// IF LCL.PP Payment Error is Errors
IF LCL.PP_Payment_Error = 'E';

// CTL.Repay Detail Highest Sts = CND.Payment Edit Error
CTL.Repay_Detail_Highest_Sts = 'Q';

// Send error message - 'Cannot run differences.  The Payment Edit run ended in with errors.'
ERROR(PRK1605);

QUIT;

//?Determine if Payment Edit completed successfully
// IF LCL.Pmt Current Payment Step is Less or Equal to Step 4
IF LCL.Pmt_Current_Payment_Step <= 00004;

// CTL.Repay Detail Highest Sts = CND.Payment Edit Incomplete
CTL.Repay_Detail_Highest_Sts = 'I';

// Send error message - 'Cannot run differences.  The Payment Edit run did not complete.'
ERROR(PRK1606);

QUIT;

//?Determine if Payment Edit completed successfully
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Repay Detail Highest Sts = CND.Payment Edit Complete
CTL.Repay_Detail_Highest_Sts = 'P';

ENDIF;

// Call program Chk Status for Apprvl XF.
CALL PROGRAM(Chk Status for Apprvl XF) ('PWN3XFR');
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.TRH_Repayment_ID);
PARAMETER(LCL.Continue_Process_USR);
PARAMETER(LCL.TRD_Payment_Sts);

//?If Continue flag is Yes, prompt for Approval Listing
CASE;

// IF LCL.Continue Process USR is Yes
IF LCL.Continue_Process_USR = 'Y';

//?Run Payment Difference listing
DO;

// Call program Prt Repay Diff Report PV.
CALL PROGRAM(Prt Repay Diff Report PV) ('PWNNPVR');
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.TRH_Repayment_ID);
PARAMETER(PAR.TRH_Payment_Date);

//?If F3 not pressed, continue
CASE;

// IF NOT PGM.*Return code is *User QUIT requested
IF ! PGM.*Return_code = 'Y2U9999';

// Call program Upd All Repay Dtl Sts XF.
CALL PROGRAM(Upd All Repay Dtl Sts XF) ('PWNSXFR');
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.TRH_Repayment_ID);
PARAMETER('D');

// CTL.Repay Detail Highest Sts = CND.Difference Query Executed
CTL.Repay_Detail_Highest_Sts = 'D';

// LCL.TRC Comment = CONCAT(CON.Tattoo Repayment Differen,CON.ce Sequel executed,CND.*None)
LCL.TRC_Comment = 'Tattoo Repayment Differen' + 'ce Sequel executed' (*ZERO);

EXECUTE FUNCTION(Crt Tattoo Repay Cmnt CR) TYPE(CRTOBJ) FILE(PWAYCPP)           AB1364775;
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.TRH_Repayment_ID);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.TRC_Comment);
PARAMETER('S');
{
 //?USER: Processing before Data update

 //?Make sure BOH Company Number is populated
 CASE;

 // IF PAR.BOH Company Number is *ZERO
 IF PAR.BOH_Company_Number = *ZERO;

 // DB1.BOH Company Number = PAR.CC Company Number
 DB1.BOH_Company_Number = PAR.CC_Company_Number;

 ENDIF;

 EXECUTE FUNCTION(Rtv Next Comment Seq# RT) TYPE(RTVOBJ) FILE(PWAYCPP)           AB1366735;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.TRH_Repayment_ID);
 PARAMETER(DB1.TRC_Sequence);
 {
  //?USER: Processing if Data record not found

  // PAR.TRC Sequence = CON.1
  PAR.TRC_Sequence = 1;

  //?USER: Process Data record

  // PAR.TRC Sequence = DB1.TRC Sequence + CON.1
  PAR.TRC_Sequence = DB1.TRC_Sequence + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


ENDIF;

ENDDO;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDDO;

//?Process command keys
// IF CTL.*CMD key is CF17
IF CTL.*CMD_key = '17';

//?Approve differences, mark tattoos and repayment as Repaid
DO;

// Call program Chk Status for Repaid XF.
CALL PROGRAM(Chk Status for Repaid XF) ('PWN4XFR');
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.TRH_Repayment_ID);
PARAMETER(LCL.Continue_Process_USR);
PARAMETER(LCL.TRD_Payment_Sts);

//?If Approval sequel has been executed
CASE;

// IF LCL.Continue Process USR is Yes
IF LCL.Continue_Process_USR = 'Y';

// CTL.Repay Detail Highest Sts = CND.Difference Query Executed
CTL.Repay_Detail_Highest_Sts = 'D';

// Call program Pmt Repay Approval    PV.
CALL PROGRAM(Pmt Repay Approval    PV) ('PWMSPVR');
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.TRH_Repayment_ID);
PARAMETER(CTL.Pmt_Current_Payment_Date);

EXECUTE FUNCTION(Rtv Tattoo RepHdrSts  RT) TYPE(RTVOBJ) FILE(PWAWCPP)           AB1371322;
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.TRH_Repayment_ID);
PARAMETER(PAR.TRH_Repayment_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?If Approval sequel has been executed
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Cannot approve differences until the Difference Sequel is run.'
ERROR(PRK1600);

ENDIF;

ENDDO;

//?Process command keys
ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?4=Remove  5=Display  7=Edit Tattoo  9=Edit/View Comments  E=Mark Edited
CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

//?Remove tattoo
DO;

//?If record is in a created status, delete the record
CASE;

// IF PAR.TRH Repayment Status is Cancelled
IF PAR.TRH_Repayment_Status = 'X';

// Send error message - 'Subfile option not allowed because Repayment is cancelled.'
ERROR(PRK1598);
MSGPARM(RCD.*SFLSEL);

//?If record is in a created status, delete the record
// IF RCD.TRD Repayment Status is Created
IF RCD.TRD_Repayment_Status = 'C';

//?Remove Tattoo Repayment Detail record
DO;

// Call program Dlt Tattoo Repay Dtl  PV.
CALL PROGRAM(Dlt Tattoo Repay Dtl  PV) ('PWM6PVR');
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.TRH_Repayment_ID);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TRD_Repayment_Status);
PARAMETER(RCD.TRD_Pen_Head);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PS_Site_ID);
PARAMETER(RCD.SR_Source_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(RCD.PC_Contract_Code);
PARAMETER(RCD.PSC_Sub_Contract_Code);

// LCL.TRC Comment = CONCAT(CON.Tattoo Repayment Detail r,CON.ecord removed from list.,CND.*None)
LCL.TRC_Comment = 'Tattoo Repayment Detail r' + 'ecord removed from list.' (*ZERO);

EXECUTE FUNCTION(Crt Tattoo Repay Cmnt CR) TYPE(CRTOBJ) FILE(PWAYCPP)           AB1364775;
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.TRH_Repayment_ID);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(LCL.TRC_Comment);
PARAMETER('S');
{
 //?USER: Processing before Data update

 //?Make sure BOH Company Number is populated
 CASE;

 // IF PAR.BOH Company Number is *ZERO
 IF PAR.BOH_Company_Number = *ZERO;

 // DB1.BOH Company Number = PAR.CC Company Number
 DB1.BOH_Company_Number = PAR.CC_Company_Number;

 ENDIF;

 EXECUTE FUNCTION(Rtv Next Comment Seq# RT) TYPE(RTVOBJ) FILE(PWAYCPP)           AB1366735;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.TRH_Repayment_ID);
 PARAMETER(DB1.TRC_Sequence);
 {
  //?USER: Processing if Data record not found

  // PAR.TRC Sequence = CON.1
  PAR.TRC_Sequence = 1;

  //?USER: Process Data record

  // PAR.TRC Sequence = DB1.TRC Sequence + CON.1
  PAR.TRC_Sequence = DB1.TRC_Sequence + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDDO;

//?If record is in a created status, delete the record
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Cannot Delete Tattoo Repayment Detail record.  Repayment is in progress.'
ERROR(PRK1581);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDDO;

//?4=Remove  5=Display  7=Edit Tattoo  9=Edit/View Comments  E=Mark Edited
// IF RCD.*SFLSEL is *Option 5 request
IF RCD.*SFLSEL = '5'/'5';

// Call program Dsp Tattoo Repay Dtl  DR.
CALL PROGRAM(Dsp Tattoo Repay Dtl  DR) ('PWOHD1R');
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.TRH_Repayment_ID);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);

//?4=Remove  5=Display  7=Edit Tattoo  9=Edit/View Comments  E=Mark Edited
// IF RCD.*SFLSEL is *Option 7 request
IF RCD.*SFLSEL = '7'/'7';

//?Edit tattoo
DO;

//?If Tattoo record is Unpaid or Edited, go to Edit screen
CASE;

// IF PAR.TRH Repayment Status is Cancelled
IF PAR.TRH_Repayment_Status = 'X';

// Send error message - 'Subfile option not allowed because Repayment is cancelled.'
ERROR(PRK1598);
MSGPARM(RCD.*SFLSEL);

//?If Tattoo record is Unpaid or Edited, go to Edit screen
// IF RCD.TRD Repayment Status is Transfered
IF RCD.TRD_Repayment_Status = 'T';

// Send error message - 'Subfile option not allowed because Tattoo has been Transfered.'
ERROR(PRK1609);
MSGPARM(RCD.*SFLSEL);

//?If Tattoo record is Unpaid or Edited, go to Edit screen
// IF RCD.TRD Repayment Status is Unpaid
IF RCD.TRD_Repayment_Status = 'U';

// OR RCD.TRD Repayment Status is Edited
OR RCD.TRD_Repayment_Status = 'E';

// OR RCD.TRD Repayment Status is In Payment Edit Process
OR RCD.TRD_Repayment_Status = 'Q'/'I'/'P'/'X';

// OR RCD.TRD Repayment Status is Difference Query Executed
OR RCD.TRD_Repayment_Status = 'D';

//?Perform pre-repayment Edits
DO;

// Call program Pmt Pre-Repay Edits   PV.
CALL PROGRAM(Pmt Pre-Repay Edits   PV) ('PWL3PVR');
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.TRH_Repayment_ID);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TRD_Repayment_Status);
PARAMETER(RCD.TRD_Pen_Head);
PARAMETER(RCD.TRD_Payment_Sts);
PARAMETER(RCD.TRD_Process_Code);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PS_Site_ID);
PARAMETER(RCD.SR_Source_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(RCD.PC_Contract_Code);
PARAMETER(RCD.PSC_Sub_Contract_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDDO;

//?If Tattoo record is Unpaid or Edited, go to Edit screen
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Tattoos must be Unpaid before editing the values.'
ERROR(PRK1594);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDDO;

//?4=Remove  5=Display  7=Edit Tattoo  9=Edit/View Comments  E=Mark Edited
// IF RCD.*SFLSEL is *option 9 request
IF RCD.*SFLSEL = '9'/'9';

//?Display or Edit Comments
DO;

//?If Repayment is cancelled, only display the comments
CASE;

// IF PAR.TRH Repayment Status is Cancelled
IF PAR.TRH_Repayment_Status = 'X';

// Call program Dsp Tattoo Repay Cmnt DF.
CALL PROGRAM(Dsp Tattoo Repay Cmnt DF) ('PWMGDFR');
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.TRH_Repayment_ID);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);

//?If Repayment is cancelled, only display the comments
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Edt Tattoo Repay Cmnt EF.
CALL PROGRAM(Edt Tattoo Repay Cmnt EF) ('PWLJEFR');
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.TRH_Repayment_ID);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);

ENDIF;

ENDDO;

//?4=Remove  5=Display  7=Edit Tattoo  9=Edit/View Comments  E=Mark Edited
// IF RCD.*SFLSEL is Edited
IF RCD.*SFLSEL = 'E';

//?No Change, Mark as Edited
DO;

CASE;

// IF RCD.TRD Repayment Status is Unpaid
IF RCD.TRD_Repayment_Status = 'U';

EXECUTE FUNCTION(Chg Tattoo Repay Dtl  CH) TYPE(CHGOBJ) FILE(PWAXCPP)           AB1364796;
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.TRH_Repayment_ID);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.Transfer_Buy_Order_Number);
PARAMETER(RCD.Transfer_Buy_Order_Load);
PARAMETER(RCD.Transfer_Tattoo_Number);
PARAMETER(RCD.Transfer_Kill_Date);
PARAMETER(RCD.Transfer_Site_ID);
PARAMETER(RCD.Transfer_Subsidiary_Code);
PARAMETER(RCD.Transfer_State_Code);
PARAMETER('E');
PARAMETER(RCD.TRD_Pen_Head);
PARAMETER(RCD.TRD_Payment_Sts);
PARAMETER(RCD.TRD_Process_Code);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PS_Site_ID);
PARAMETER(RCD.TRD_Trucker_Payment_Sts);
PARAMETER(RCD.SR_Source_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(RCD.PC_Contract_Code);
PARAMETER(RCD.PSC_Sub_Contract_Code);
PARAMETER(RCD.RS_Record_Status);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


// LCL.TRC Comment = CONCAT(CON.No edit needed, mark as E,CON.dited for Payment Edit.,CND.*None)
LCL.TRC_Comment = 'No edit needed, mark as E' + 'dited for Payment Edit.' (*ZERO);

EXECUTE FUNCTION(Crt Tattoo Repay Cmnt CR) TYPE(CRTOBJ) FILE(PWAYCPP)           AB1364775;
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.TRH_Repayment_ID);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(LCL.TRC_Comment);
PARAMETER('S');
{
 //?USER: Processing before Data update

 //?Make sure BOH Company Number is populated
 CASE;

 // IF PAR.BOH Company Number is *ZERO
 IF PAR.BOH_Company_Number = *ZERO;

 // DB1.BOH Company Number = PAR.CC Company Number
 DB1.BOH_Company_Number = PAR.CC_Company_Number;

 ENDIF;

 EXECUTE FUNCTION(Rtv Next Comment Seq# RT) TYPE(RTVOBJ) FILE(PWAYCPP)           AB1366735;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.TRH_Repayment_ID);
 PARAMETER(DB1.TRC_Sequence);
 {
  //?USER: Processing if Data record not found

  // PAR.TRC Sequence = CON.1
  PAR.TRC_Sequence = 1;

  //?USER: Process Data record

  // PAR.TRC Sequence = DB1.TRC Sequence + CON.1
  PAR.TRC_Sequence = DB1.TRC_Sequence + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Cannot mark Tattoo as Edited unless current status is Unpaid.'
ERROR(PRK1613);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDDO;

ENDIF;

