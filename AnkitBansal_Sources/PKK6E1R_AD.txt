// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKK6E1R
// ?Date: 14.08.2025 Time: 02:49:49
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


// Call program Val Application/User  XF.
CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
PARAMETER(LCL.Oms_Warehouse_Code);
PARAMETER(LCL.BOH_Company_Number);
PARAMETER('HPE');
PARAMETER(LCL.Oms_SalesPerson_Code);
PARAMETER(LCL.Oms_Allow_Multi_Company);
PARAMETER(LCL.Oms_Default_Printer);
PARAMETER(LCL.Oms_Name);
PARAMETER(LCL.Oms_System_Value_Alpha);
PARAMETER(LCL.Oms_Access_Denied_Y_N);

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(LCL.BOH_Company_Number);
PARAMETER('M3VEND');
PARAMETER(PAR.Live_with_M3_USR);

//?USER: Initialize detail screen (existing record)

//?M3 Live or parallel
CASE;

// IF PAR.Live with M3   USR is Yes
IF PAR.Live_with_M3_USR = 'Y';

// OR PAR.Live with M3   USR is Parallel
OR PAR.Live_with_M3_USR = 'P';

CASE;

// IF PAR.Live with M3   USR is Yes
IF PAR.Live_with_M3_USR = 'Y';

EXECUTE FUNCTION(Rtv Get M3 Supplier   IF) TYPE(EXCINTFUN)                      AB1322091;
PARAMETER(DB1.PD_Producer_Code);
PARAMETER(DTL.M3_Supplier_ID);
PARAMETER(DTL.PD_Name);
PARAMETER(DTL.Producer_Address_1_USR);
PARAMETER(DTL.Producer_Address_2_USR);
PARAMETER(DTL.Producer_Address_3_USR);
PARAMETER(DTL.Producer_City_USR);
PARAMETER(DTL.Producer_State_USR);
PARAMETER(DTL.Producer_Zip_10_USR);
PARAMETER(LCL.M3_Telephone_No_1);
PARAMETER(LCL.M3_Telephone_No_2);
PARAMETER(LCL.M3_Fax_Telephone);
PARAMETER(DTL.Vendor_Tax_Id);
PARAMETER(DTL.Country_Code_Usr);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Producer EXT2     RT) TYPE(RTVOBJ) FILE(PLB4REP)           AB1322079;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.M3_Supplier_ID);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv M# Supplier       RT) TYPE(RTVOBJ) FILE(PLB2REP)           AB1322067;
 PARAMETER(PAR.M3_Supplier_ID);
 PARAMETER(PAR.M3_Supplier_Name);
 PARAMETER(PAR.M3_Address_Line_1);
 PARAMETER(PAR.M3_Address_Line_2);
 PARAMETER(PAR.M3_Address_Line_3);
 PARAMETER(PAR.M3_City);
 PARAMETER(PAR.M3_State);
 PARAMETER(PAR.M3_Postal_Code);
 PARAMETER(PAR.M3_Telephone_No_1);
 PARAMETER(PAR.M3_Telephone_No_2);
 PARAMETER(PAR.M3_Fax_Telephone);
 PARAMETER(PAR.M3_Supplier_Tax_ID);
 PARAMETER(PAR.M3_Country_Code);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// DTL.Producer Area Code    USR = SUBSTRING(LCL.M3 Telephone No 1,CON.1,CON.3)
DTL.Producer_Area_Code_USR = SUBSTRING(LCL.M3_Telephone_No_1:1:3);

// DTL.Producer Phone Number USR = SUBSTRING(LCL.M3 Telephone No 1,CON.5,CON.8)
DTL.Producer_Phone_Number_USR = SUBSTRING(LCL.M3_Telephone_No_1:5:8);

// DTL.Producer Fax Area Cd  USR = SUBSTRING(LCL.M3 Fax Telephone,CON.1,CON.3)
DTL.Producer_Fax_Area_Cd_USR = SUBSTRING(LCL.M3_Fax_Telephone:1:3);

// DTL.Producer Fax Phone #  USR = SUBSTRING(LCL.M3 Fax Telephone,CON.5,CON.8)
DTL.Producer_Fax_Phone_#_USR = SUBSTRING(LCL.M3_Fax_Telephone:5:8);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Get M3 Supplier   IF) TYPE(EXCINTFUN)                      AB1322091;
PARAMETER(DB1.PD_Producer_Code);
PARAMETER(DTL.M3_Supplier_ID);
PARAMETER(LCL.PD_Name);
PARAMETER(LCL.Producer_Address_1_USR);
PARAMETER(LCL.Producer_Address_2_USR);
PARAMETER(LCL.Producer_Address_3_USR);
PARAMETER(LCL.Producer_City_USR);
PARAMETER(LCL.Producer_State_USR);
PARAMETER(LCL.Producer_Zip_10_USR);
PARAMETER(LCL.M3_Telephone_No_1);
PARAMETER(LCL.M3_Telephone_No_2);
PARAMETER(LCL.M3_Fax_Telephone);
PARAMETER(LCL.Vendor_Tax_Id);
PARAMETER(LCL.Country_Code_Usr);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Producer EXT2     RT) TYPE(RTVOBJ) FILE(PLB4REP)           AB1322079;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.M3_Supplier_ID);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv M# Supplier       RT) TYPE(RTVOBJ) FILE(PLB2REP)           AB1322067;
 PARAMETER(PAR.M3_Supplier_ID);
 PARAMETER(PAR.M3_Supplier_Name);
 PARAMETER(PAR.M3_Address_Line_1);
 PARAMETER(PAR.M3_Address_Line_2);
 PARAMETER(PAR.M3_Address_Line_3);
 PARAMETER(PAR.M3_City);
 PARAMETER(PAR.M3_State);
 PARAMETER(PAR.M3_Postal_Code);
 PARAMETER(PAR.M3_Telephone_No_1);
 PARAMETER(PAR.M3_Telephone_No_2);
 PARAMETER(PAR.M3_Fax_Telephone);
 PARAMETER(PAR.M3_Supplier_Tax_ID);
 PARAMETER(PAR.M3_Country_Code);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


ENDIF;

// DTL.Vendor 1099 = CND.No
DTL.Vendor_1099 = 'N';

//?M3 Live or parallel
// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

//?M3 NO or parallel -- get JDE
CASE;

// IF PAR.Live with M3   USR is No
IF PAR.Live_with_M3_USR = 'N';

// OR PAR.Live with M3   USR is Parallel
OR PAR.Live_with_M3_USR = 'P';

// Call program Get Vendor Address    RT.
CALL PROGRAM(Get Vendor Address    RT) ('VNDFAXR');
PARAMETER(PGM.*Return_code);
PARAMETER(DTL.PD_VND_Address_Number);
PARAMETER(DTL.PD_Name);
PARAMETER(DTL.Producer_Address_1_USR);
PARAMETER(DTL.Producer_Address_2_USR);
PARAMETER(DTL.Producer_Address_3_USR);
PARAMETER(DTL.Producer_City_USR);
PARAMETER(DTL.Producer_State_USR);
PARAMETER(DTL.Producer_Zip_10_USR);
PARAMETER(DTL.Producer_Area_Code_USR);
PARAMETER(DTL.Producer_Phone_Number_USR);
PARAMETER(DTL.Producer_Fax_Area_Cd_USR);
PARAMETER(DTL.Producer_Fax_Phone_#_USR);
PARAMETER(DTL.Fax_Area_Code_#);
PARAMETER(DTL.Fax_Telephone);
PARAMETER(DTL.Vendor_1099);
PARAMETER(DTL.Vendor_Tax_Id);
PARAMETER(DTL.Country_Code_Usr);
PARAMETER('P');

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.PD VND Address Number = CON.*ZERO
DTL.PD_VND_Address_Number = *ZERO;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

ENDIF;

//?Fax Attn 1
CASE;

// IF DTL.Producer Fax Area Cd  USR is Not Blank
IF DTL.Producer_Fax_Area_Cd_USR <> *BLANK;

// OR DTL.Producer Fax Phone #  USR is Not Blank
OR DTL.Producer_Fax_Phone_#_USR <> *BLANK;

EXECUTE FUNCTION(Rtv Fax Detail        RT) TYPE(RTVOBJ) FILE(PKEAREP)           AB1206181;
PARAMETER('HPE');
PARAMETER(DTL.Producer_Fax_Area_Cd_USR);
PARAMETER(DTL.Producer_Fax_Phone_#_USR);
PARAMETER(DTL.Fax_Attn_1);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Fax Attn 2
CASE;

// IF DTL.Fax Area Code # is Not Blank
IF DTL.Fax_Area_Code_# <> *BLANK;

// OR DTL.Fax Telephone is Not Blank
OR DTL.Fax_Telephone <> *BLANK;

EXECUTE FUNCTION(Rtv Fax Detail        RT) TYPE(RTVOBJ) FILE(PKEAREP)           AB1206181;
PARAMETER('HPE');
PARAMETER(DTL.Fax_Area_Code_#);
PARAMETER(DTL.Fax_Telephone);
PARAMETER(DTL.Fax_Attn_2);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

ENDIF;

// DTL.Record Status Desc Usr = Condition name of DB1.RS Record Status
DTL.Record_Status_Desc_Usr = RTVCND(DB1.RS_Record_Status);

EXECUTE FUNCTION(Rtv Source Desc       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1124642;
PARAMETER(DB1.SR_Source_Code);
PARAMETER(DTL.SR_Description);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Hog Buyer Name    RT) TYPE(RTVOBJ) FILE(PKADREP)           AB1124643;
PARAMETER(DB1.HB_Buyer_Code);
PARAMETER(DTL.Name_USR);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
PARAMETER(DB1.Commission_Producer_Payee);
PARAMETER(DTL.Name_Producer_USR);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Frt Exp Pay By Desc Usr = Condition name of DTL.PD Freight Exp Paid By
DTL.Frt_Exp_Pay_By_Desc_Usr = RTVCND(DTL.PD_Freight_Exp_Paid_By);

EXECUTE FUNCTION(RTV MPR Prdcr Purch TpRT) TYPE(RTVOBJ) FILE(PKE3CPP)           AB1235599;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.MPR_Purchase_Type_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?USER: Validate detail screen fields

//?F4=Prompt    PK0254
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.MPR Purchase Type Code
IF PGM.*Cursor_field = DTL.MPR_Purchase_Type_Code;

// LCL.MPR Purchase Type Code = CON.*ZERO
LCL.MPR_Purchase_Type_Code = *ZERO;

// Call program Sel MPR Purchase Type SR.
CALL PROGRAM(Sel MPR Purchase Type SR) ('PKV8SRR');
PARAMETER(LCL.MPR_Purchase_Type_Code);

CASE;

// IF LCL.MPR Purchase Type Code NE DTL.MPR Purchase Type Code
IF LCL.MPR_Purchase_Type_Code <> DTL.MPR_Purchase_Type_Code;

// AND LCL.MPR Purchase Type Code is Entered
AND LCL.MPR_Purchase_Type_Code > 0;

// DTL.MPR Purchase Type Code = LCL.MPR Purchase Type Code
DTL.MPR_Purchase_Type_Code = LCL.MPR_Purchase_Type_Code;

ENDIF;

ENDIF;

ENDIF;

// DTL.Record Status Desc Usr = Condition name of DTL.RS Record Status
DTL.Record_Status_Desc_Usr = RTVCND(DTL.RS_Record_Status);

EXECUTE FUNCTION(Rtv Source Desc       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1124642;
PARAMETER(DTL.SR_Source_Code);
PARAMETER(DTL.SR_Description);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Hog Buyer Name    RT) TYPE(RTVOBJ) FILE(PKADREP)           AB1124643;
PARAMETER(DTL.HB_Buyer_Code);
PARAMETER(DTL.Name_USR);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
PARAMETER(DTL.Commission_Producer_Payee);
PARAMETER(DTL.Name_Producer_USR);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?E3580 CGL 11/11/14 - M3 Producer/vendor interface changes, add CASE stmt
CASE;

// IF PAR.Live with M3   USR is Yes
IF PAR.Live_with_M3_USR = 'Y';

//?E3580 CGL 11/11/14 - M3 Producer/vendor interface changes, add CASE stmt
// IF *OTHERWISE
IF *OTHERWISE;

//?Validate state code if entered
CASE;

// IF DTL.Producer State        USR NE WRK.Blank USR
IF DTL.Producer_State_USR <> WRK.Blank_USR;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// Call program Val Vndr State Code   UP.
CALL PROGRAM(Val Vndr State Code   UP) ('VENDSTA');
PARAMETER(PGM.*Return_code);
PARAMETER(DTL.Producer_State_USR);

//?State code error
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?State code error
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'State Code is Invalid'
ERROR(PRK0308);
MSGPARM(DTL.Producer_State_USR);

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Return_code = *BLANK;

ENDIF;

ENDIF;

//?Validate country code if entered
CASE;

// IF DTL.Country Code Usr NE WRK.Blank USR
IF DTL.Country_Code_Usr <> WRK.Blank_USR;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// Call program Val Vndr Country Code UP.
CALL PROGRAM(Val Vndr Country Code UP) ('VENDCTR');
PARAMETER(PGM.*Return_code);
PARAMETER(DTL.Country_Code_Usr);

//?Country code error
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Country code error
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Country code &1 invalid.'
ERROR(PRK0559);
MSGPARM(DTL.Country_Code_Usr);

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Return_code = *BLANK;

ENDIF;

ENDIF;

ENDIF;

//?Validate MPR Purchase Type Code    PK0254
CASE;

// IF DTL.MPR Purchase Type Code NE WRK.Zero USR
IF DTL.MPR_Purchase_Type_Code <> WRK.Zero_USR;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(Val MPR Purchase Type RT) TYPE(RTVOBJ) FILE(PKE2REP)           AB1235592;
PARAMETER(DTL.MPR_Purchase_Type_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'MPR Purchase Type not found.'
ERROR(PRK0965);
MSGPARM(DTL.MPR_Purchase_Type_Code);

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

ENDIF;

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Producer/Vend     IF) TYPE(EXCINTFUN) FILE(PKACREP)        AB1122538;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PD_Name);
PARAMETER(DTL.PD_Production_Capacity);
PARAMETER(DTL.PD_Std_Delv_Time);
PARAMETER(DTL.PD_Std_Truck_Size);
PARAMETER(DTL.PD_Freight_Exp_Paid_By);
PARAMETER(DTL.PD_Fax_Status);
PARAMETER(DTL.PD_VND_Address_Number);
PARAMETER(DTL.PD_EDI_Trading_Partner_#);
PARAMETER(DTL.PD_VND_Category);
PARAMETER(DTL.SR_Source_Code);
PARAMETER(DTL.HB_Buyer_Code);
PARAMETER(DTL.Commission_Producer_Payee);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
PARAMETER(DTL.PD_Name);
PARAMETER(DTL.Producer_Address_1_USR);
PARAMETER(DTL.Producer_Address_2_USR);
PARAMETER(DTL.Producer_Address_3_USR);
PARAMETER(DTL.Producer_City_USR);
PARAMETER(DTL.Producer_State_USR);
PARAMETER(DTL.Producer_Zip_10_USR);
PARAMETER(DTL.Producer_Area_Code_USR);
PARAMETER(DTL.Producer_Phone_Number_USR);
PARAMETER(DTL.Producer_Fax_Area_Cd_USR);
PARAMETER(DTL.Producer_Fax_Phone_#_USR);
PARAMETER(DTL.Fax_Attn_1);
PARAMETER(DTL.Fax_Area_Code_#);
PARAMETER(DTL.Fax_Telephone);
PARAMETER(DTL.Fax_Attn_2);
PARAMETER(DTL.Vendor_1099);
PARAMETER(DTL.Vendor_Tax_Id);
PARAMETER(DTL.Country_Code_Usr);
PARAMETER(DTL.MPR_Purchase_Type_Code);
PARAMETER(PAR.Live_with_M3_USR);
PARAMETER(DTL.M3_Supplier_ID);
{
 //?Execute internal function

 //?M3 =  Not live or parallel
 CASE;

 // IF PAR.Live with M3   USR is No
 IF PAR.Live_with_M3_USR = 'N';

 // OR PAR.Live with M3   USR is Parallel
 OR PAR.Live_with_M3_USR = 'P';

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 // Call program Edt Vndr Address Rtn  UP.
 CALL PROGRAM(Edt Vndr Address Rtn  UP) ('VENDMOD');
 PARAMETER(PGM.*Return_code);
 PARAMETER(PAR.PD_VND_Address_Number);
 PARAMETER(PAR.Pass_Name);
 PARAMETER(PAR.Address_1);
 PARAMETER(PAR.Address_2);
 PARAMETER(PAR.Address_3);
 PARAMETER(PAR.City);
 PARAMETER(PAR.State);
 PARAMETER(PAR.Zip);
 PARAMETER(PAR.Area_Code);
 PARAMETER(PAR.Telephone);
 PARAMETER(PAR.Fax_Area_Code_#);
 PARAMETER(PAR.Fax_Telephone);
 PARAMETER(PAR.Fax_Area_Code_#_2);
 PARAMETER(PAR.Fax_Telephone_2);
 PARAMETER(PAR.Vendor_1099);
 PARAMETER(PAR.Vendor_Tax_Id);
 PARAMETER(PAR.Country_Code);
 PARAMETER('P');

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 EXECUTE FUNCTION(Chg Producer          CH) TYPE(CHGOBJ) FILE(PKACREP)           AB1101532;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.Pass_Name);
 PARAMETER(PAR.PD_Production_Capacity);
 PARAMETER(PAR.PD_Std_Delv_Time);
 PARAMETER(PAR.PD_Std_Truck_Size);
 PARAMETER(PAR.PD_Freight_Exp_Paid_By);
 PARAMETER(PAR.PD_Fax_Status);
 PARAMETER(PAR.PD_VND_Address_Number);
 PARAMETER(PAR.PD_EDI_Trading_Partner_#);
 PARAMETER(PAR.PD_VND_Category);
 PARAMETER(PAR.SR_Source_Code);
 PARAMETER(PAR.HB_Buyer_Code);
 PARAMETER(PAR.Commission_Producer_Payee);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 //?Fax Attn 1
 CASE;

 // IF PAR.Fax Area Code # is Not Blank
 IF PAR.Fax_Area_Code_# <> *BLANK;

 // OR PAR.Fax Telephone is Not Blank
 OR PAR.Fax_Telephone <> *BLANK;

 EXECUTE FUNCTION(Upd Fax Detail        RT) TYPE(RTVOBJ) FILE(PKEAREP)           AB1206264;
 PARAMETER('HPE');
 PARAMETER(PAR.Fax_Area_Code_#);
 PARAMETER(PAR.Fax_Telephone);
 PARAMETER(PAR.Fax_Attn_1);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Create Fax Detail) TYPE(CRTOBJ) FILE(PKEAREP)                  AB1206170;
  PARAMETER(PAR.FD_Application_Code);
  PARAMETER(PAR.FD_Fax_Area_Code);
  PARAMETER(PAR.FD_Fax_Number);
  PARAMETER(PAR.FD_Fax_Attention);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER(PAR.RS_Record_Status);
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Change Fax Detail) TYPE(CHGOBJ) FILE(PKEAREP)                  AB1206171;
  PARAMETER(DB1.FD_Application_Code);
  PARAMETER(DB1.FD_Fax_Area_Code);
  PARAMETER(DB1.FD_Fax_Number);
  PARAMETER(PAR.FD_Fax_Attention);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 //?Fax Attn 2
 CASE;

 // IF PAR.Fax Area Code # 2 is Not Blank
 IF PAR.Fax_Area_Code_#_2 <> *BLANK;

 // OR PAR.Fax Telephone 2 is Not Blank
 OR PAR.Fax_Telephone_2 <> *BLANK;

 EXECUTE FUNCTION(Upd Fax Detail        RT) TYPE(RTVOBJ) FILE(PKEAREP)           AB1206264;
 PARAMETER('HPE');
 PARAMETER(PAR.Fax_Area_Code_#_2);
 PARAMETER(PAR.Fax_Telephone_2);
 PARAMETER(PAR.Fax_Attn_2);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Create Fax Detail) TYPE(CRTOBJ) FILE(PKEAREP)                  AB1206170;
  PARAMETER(PAR.FD_Application_Code);
  PARAMETER(PAR.FD_Fax_Area_Code);
  PARAMETER(PAR.FD_Fax_Number);
  PARAMETER(PAR.FD_Fax_Attention);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER(PAR.RS_Record_Status);
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Change Fax Detail) TYPE(CHGOBJ) FILE(PKEAREP)                  AB1206171;
  PARAMETER(DB1.FD_Application_Code);
  PARAMETER(DB1.FD_Fax_Area_Code);
  PARAMETER(DB1.FD_Fax_Number);
  PARAMETER(PAR.FD_Fax_Attention);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Send messages -- Invalid Vendor
 // Send error message - 'Producer Vendor# Invalid'
 ERROR(PRK0258);
 MSGPARM(PAR.PD_VND_Address_Number);

 ENDIF;

 ENDIF;

 //?M3 Parallel
 CASE;

 // IF PAR.Live with M3   USR is Parallel
 IF PAR.Live_with_M3_USR = 'P';

 EXECUTE FUNCTION(Chg Producer EXT2     CH) TYPE(CHGOBJ) FILE(PLB4REP)           AB1322069;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.M3_Supplier_ID);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Producer EXT2     CT) TYPE(CRTOBJ) FILE(PLB4REP)           AB1322068;
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.M3_Supplier_ID);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

 //?M3 Live
 CASE;

 // IF PAR.Live with M3   USR is Yes
 IF PAR.Live_with_M3_USR = 'Y';

 EXECUTE FUNCTION(Rtv M# Supplier       RT) TYPE(RTVOBJ) FILE(PLB2REP)           AB1322067;
 PARAMETER(PAR.M3_Supplier_ID);
 PARAMETER(LCL.M3_Supplier_Name);
 PARAMETER(LCL.M3_Address_Line_1);
 PARAMETER(LCL.M3_Address_Line_2);
 PARAMETER(LCL.M3_Address_Line_3);
 PARAMETER(LCL.M3_City);
 PARAMETER(LCL.M3_State);
 PARAMETER(LCL.M3_Postal_Code);
 PARAMETER(LCL.M3_Telephone_No_1);
 PARAMETER(LCL.M3_Telephone_No_2);
 PARAMETER(LCL.M3_Fax_Telephone);
 PARAMETER(LCL.M3_Supplier_Tax_ID);
 PARAMETER(LCL.M3_Country_Code);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // LCL.Fax Area Code # = SUBSTRING(LCL.M3 Fax Telephone,CON.1,CON.3)
 LCL.Fax_Area_Code_# = SUBSTRING(LCL.M3_Fax_Telephone:1:3);

 // LCL.Fax Telephone = SUBSTRING(LCL.M3 Fax Telephone,CON.5,CON.8)
 LCL.Fax_Telephone = SUBSTRING(LCL.M3_Fax_Telephone:5:8);

 EXECUTE FUNCTION(Chg Producer          CH) TYPE(CHGOBJ) FILE(PKACREP)           AB1101532;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(LCL.M3_Supplier_Name);
 PARAMETER(PAR.PD_Production_Capacity);
 PARAMETER(PAR.PD_Std_Delv_Time);
 PARAMETER(PAR.PD_Std_Truck_Size);
 PARAMETER(PAR.PD_Freight_Exp_Paid_By);
 PARAMETER(PAR.PD_Fax_Status);
 PARAMETER(PAR.PD_VND_Address_Number);
 PARAMETER(PAR.PD_EDI_Trading_Partner_#);
 PARAMETER(PAR.PD_VND_Category);
 PARAMETER(PAR.SR_Source_Code);
 PARAMETER(PAR.HB_Buyer_Code);
 PARAMETER(PAR.Commission_Producer_Payee);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 EXECUTE FUNCTION(Chg Producer EXT2     CH) TYPE(CHGOBJ) FILE(PLB4REP)           AB1322069;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.M3_Supplier_ID);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Producer EXT2     CT) TYPE(CRTOBJ) FILE(PLB4REP)           AB1322068;
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.M3_Supplier_ID);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 //?Fax Attn 1
 CASE;

 // IF LCL.Fax Area Code # is Not Blank
 IF LCL.Fax_Area_Code_# <> *BLANK;

 // OR LCL.Fax Telephone is Not Blank
 OR LCL.Fax_Telephone <> *BLANK;

 EXECUTE FUNCTION(Upd Fax Detail        RT) TYPE(RTVOBJ) FILE(PKEAREP)           AB1206264;
 PARAMETER('HPE');
 PARAMETER(LCL.Fax_Area_Code_#);
 PARAMETER(LCL.Fax_Telephone);
 PARAMETER(*BLANK);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Create Fax Detail) TYPE(CRTOBJ) FILE(PKEAREP)                  AB1206170;
  PARAMETER(PAR.FD_Application_Code);
  PARAMETER(PAR.FD_Fax_Area_Code);
  PARAMETER(PAR.FD_Fax_Number);
  PARAMETER(PAR.FD_Fax_Attention);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER(PAR.RS_Record_Status);
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Change Fax Detail) TYPE(CHGOBJ) FILE(PKEAREP)                  AB1206171;
  PARAMETER(DB1.FD_Application_Code);
  PARAMETER(DB1.FD_Fax_Area_Code);
  PARAMETER(DB1.FD_Fax_Number);
  PARAMETER(PAR.FD_Fax_Attention);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Send messages -- Vendor Not Found
 // Send error message - 'M3 Supplier not found.'
 ERROR(PRK1325);

 ENDIF;

 ENDIF;

 //?MPR Producer Purchase Type   PK0254
 CASE;

 // IF PAR.MPR Purchase Type Code is Entered
 IF PAR.MPR_Purchase_Type_Code > 0;

 EXECUTE FUNCTION(Rtv/Crt/Chg MPR PrPur RT) TYPE(RTVOBJ) FILE(PKE3CPP)           AB1235598;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.MPR_Purchase_Type_Code);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt MPR Prdcr Purch   CR) TYPE(CRTOBJ) FILE(PKE3CPP)           AB1235460;
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.MPR_Purchase_Type_Code);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  CASE;

  // IF PAR.MPR Purchase Type Code NE DB1.MPR Purchase Type Code
  IF PAR.MPR_Purchase_Type_Code <> DB1.MPR_Purchase_Type_Code;

  EXECUTE FUNCTION(Del MPR Prdcr Purch   DL) TYPE(DLTOBJ) FILE(PKE3CPP)           AB1235462;
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.MPR_Purchase_Type_Code);
  EXECUTE FUNCTION(Crt MPR Prdcr Purch   CR) TYPE(CRTOBJ) FILE(PKE3CPP)           AB1235460;
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.MPR_Purchase_Type_Code);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER('A');
  PARAMETER(PAR.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDIF;

 }

 ENDIF;

}


