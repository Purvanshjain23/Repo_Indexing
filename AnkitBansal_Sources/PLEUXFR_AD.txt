// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLEUXFR
// ?Date: 14.08.2025 Time: 02:53:57
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?JJH 01/23/19 E14409 - Save the PLARCPP file into PRKFSAVF before
//?    clearing the file.
//?RMC 06/01/04  Read Vande Berg Cold Scale upload and create Primal Scl Dtl
//?RMC 10/26/04  & Kick off the Product Trace Tattoo match job
//?RMC 05/18/06  use tattoo on rcd for St Jo
//?RMC 11/15/07  use trolley tracking for St Jo too per Dan Norman
//?RMC 07/11/08  S00321 when getting tattoo from Eval Trans Upl, if its not
//?   valid, then get the next Eval Trans Upl rcd per Co/Kill/Ru date/time
//?   if not found for date, get prev tattoo per RU Time
//?RMC 01/18/10  dont cpyf plarcpp to save file for Tf
//?RMC 10/27/11 C1787  For 960 -  the weight doesnt have the decimal place
//?   so expect it as '01798' instead of '179.8'
//?RMC 12/13/17 S12202 For 440 -  the weight doesnt have the decimal place
//?   so expect it as '01798' instead of '179.8' -- like TFs
//?H16853 ISE 11/05/2020 - Recompiled due to change in Buy Order Number
//?PIO 04/16/24 CHANGED FILE NAME FROM PKCPCPLI TO PKCPCPLK
// Call program Val Application/User  XF.
CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
PARAMETER(WRK.Oms_Warehouse_Code);
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(WRK.Oms_SalesPerson_Code);
PARAMETER(WRK.Oms_Allow_Multi_Company);
PARAMETER(WRK.Oms_Default_Printer);
PARAMETER(WRK.Oms_Name);
PARAMETER(WRK.Oms_System_Value_Alpha);
PARAMETER(WRK.Oms_Access_Denied_Y_N);

EXECUTE FUNCTION(Rtv Crt Primal Scl Dt RT) TYPE(RTVOBJ) FILE(PLARCPP)           AB1260623;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.Date_2_USR);
PARAMETER(PAR.Date_USR);
PARAMETER(PAR.Production_Date_UPL);
{
 //?USER: Initialize routine

 // Call program Rtv Last Prd/Shft OMS XF.
 CALL PROGRAM(Rtv Last Prd/Shft OMS XF) ('POVEXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(LCL.Production_Date);
 PARAMETER(LCL.KP_Shift);
 PARAMETER('PM');

 //?USER: Process Data record

 //?Check Numeric
 DO;

 // WRK.Error Type Found = CND.No
 WRK.Error_Type_Found = 'N';

 // WRK.Text 5                USR = DB1.CS Hog Count
 WRK.Text_5_USR = DB1.CS_Hog_Count;

 // Execute function RPG Testn for 5 pos   US.
 EXECUTE FUNCTION(RPG Testn for 5 pos   US) TYPE(EXCUSRSRC) ('PLFBUFR');
 PARAMETER(WRK.Text_5_USR);
 {
  C                     TESTN          WUKPTX  5  60
  C           *IN60     IFEQ '0'
  C                     MOVE 'ERROR  ' WULMST
  C                     ELSE
  C                     MOVE '       ' WULMST
  C                     END
 }

 //?Count
 CASE;

 // IF WRK.Return Code USR is Error Found
 IF WRK.Return_Code_USR = 'ERROR';

 // WRK.Error Type Found = CND.Critical Error
 WRK.Error_Type_Found = 'Y';

 ENDIF;

 // WRK.Text 2 USR = DB1.CS Scale ID
 WRK.Text_2_USR = DB1.CS_Scale_ID;

 // Execute function RPG Testn for 2 pos   US.
 EXECUTE FUNCTION(RPG Testn for 2 pos   US) TYPE(EXCUSRSRC) ('PLFCUFR');
 PARAMETER(WRK.Text_2_USR);
 {
  C                     TESTN          WUFRCD  2  60
  C           *IN60     IFEQ '0'
  C                     MOVE 'ERROR  ' WULMST
  C                     ELSE
  C                     MOVE '       ' WULMST
  C                     END
 }

 //?Scale Id
 CASE;

 // IF WRK.Return Code USR is Error Found
 IF WRK.Return_Code_USR = 'ERROR';

 // WRK.Error Type Found = CND.Critical Error
 WRK.Error_Type_Found = 'Y';

 ENDIF;

 // WRK.Text 3 USR = SUBSTRING(DB1.CS Weight,CON.1,CON.3)
 WRK.Text_3_USR = SUBSTRING(DB1.CS_Weight:1:3);

 // WRK.Text 1 USR = SUBSTRING(DB1.CS Weight,CON.5,CON.1)
 WRK.Text_1_USR = SUBSTRING(DB1.CS_Weight:5:1);

 //?Weight
 CASE;

 // IF WRK.Text 3 USR is Numeric
 IF WRK.Text_3_USR >= '000';
 AND WRK.Text_3_USR <= '999';

 // AND WRK.Text 1 USR is Numeric
 AND WRK.Text_1_USR >= '0';
 AND WRK.Text_1_USR <= '9';

 //?Weight
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Error Type Found = CND.Critical Error
 WRK.Error_Type_Found = 'Y';

 ENDIF;

 //?Calendar date
 CASE;

 // IF DB1.CS Calendar Date is Numeric
 IF DB1.CS_Calendar_Date >= '00000000';
 AND DB1.CS_Calendar_Date <= '99999999';

 //?Calendar date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Error Type Found = CND.Critical Error
 WRK.Error_Type_Found = 'Y';

 ENDIF;

 //?Business date
 CASE;

 // IF DB1.CS Date is Numeric
 IF DB1.CS_Date >= '00000000';
 AND DB1.CS_Date <= '99999999';

 //?Business date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Error Type Found = CND.Critical Error
 WRK.Error_Type_Found = 'Y';

 ENDIF;

 //?Time
 CASE;

 // IF DB1.CS Time is Numeric
 IF DB1.CS_Time >= '000000';
 AND DB1.CS_Time <= '999999';

 //?Time
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Error Type Found = CND.Critical Error
 WRK.Error_Type_Found = 'Y';

 ENDIF;

 ENDDO;

 //?Setup/Create Detail Record From Cold Scale Upl
 CASE;

 // IF WRK.Error Type Found is Critical Error
 IF WRK.Error_Type_Found = 'Y';

 //?Setup/Create Detail Record From Cold Scale Upl
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PSA Scale ID = DB1.CS Scale ID
 PAR.PSA_Scale_ID = DB1.CS_Scale_ID;

 //?Default a 00 scale id to 07
 CASE;

 // IF DB1.CS Scale ID is eq 00
 IF DB1.CS_Scale_ID = '00';

 // PAR.PSA Scale ID = CND.Cold Scale
 PAR.PSA_Scale_ID = 46;

 ENDIF;

 // WRK.Date Num 6 Usr = CVTVAR(DB1.CS Date)
 WRK.Date_Num_6_Usr = CVTVAR(DB1.CS_Date);

 // WRK.End date USR = CVTVAR(WRK.Date Num 6 Usr)
 WRK.End_date_USR = CVTVAR(WRK.Date_Num_6_Usr);

 // WRK.Date Alpha USR = CONCAT(CON.1,WRK.End date USR,CON.*ZERO)
 WRK.Date_Alpha_USR = '1' + WRK.End_date_USR (*ZERO);

 // PAR.PSA Cut Date = CVTVAR(WRK.Date Alpha USR)
 PAR.PSA_Cut_Date = CVTVAR(WRK.Date_Alpha_USR);

 // PAR.PSA Cut Time = CVTVAR(DB1.CS Time)
 PAR.PSA_Cut_Time = CVTVAR(DB1.CS_Time);

 // PAR.PSA Sequence = PAR.PSA Sequence + CON.1
 PAR.PSA_Sequence = PAR.PSA_Sequence + 1;

 // PAR.PSA Count = CVTVAR(DB1.CS Hog Count)
 PAR.PSA_Count = CVTVAR(DB1.CS_Hog_Count);

 //?Grab weight when dec point sent (360) and not sent (960,440)
 CASE;

 // IF PAR.CC Company Number is Triumph Foods Market
 IF PAR.CC_Company_Number = 960;

 // OR PAR.CC Company Number is Sioux City
 OR PAR.CC_Company_Number = 440;

 //?sent as '01798'
 // WRK.Text 3 USR = SUBSTRING(DB1.CS Weight,CON.2,CON.3)
 WRK.Text_3_USR = SUBSTRING(DB1.CS_Weight:2:3);

 //?Grab weight when dec point sent (360) and not sent (960,440)
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?sent as '179.8'
 // WRK.Text 3 USR = SUBSTRING(DB1.CS Weight,CON.1,CON.3)
 WRK.Text_3_USR = SUBSTRING(DB1.CS_Weight:1:3);

 ENDIF;

 // WRK.Carcass number        USR = CVTVAR(WRK.Text 3 USR)
 WRK.Carcass_number_USR = CVTVAR(WRK.Text_3_USR);

 // WRK.Text 1 USR = SUBSTRING(DB1.CS Weight,CON.5,CON.1)
 WRK.Text_1_USR = SUBSTRING(DB1.CS_Weight:5:1);

 // WRK.Number 1 USR = CVTVAR(WRK.Text 1 USR)
 WRK.Number_1_USR = CVTVAR(WRK.Text_1_USR);

 // PSA Weight
 PAR.PSA_Weight = WRK.Carcass_number_USR + ( WRK.Number_1_USR / 10 );

 // PAR.PSA Trolley Id = DB1.CS Trolley Id
 PAR.PSA_Trolley_Id = DB1.CS_Trolley_Id;

 CASE;

 // IF PAR.CC Company Number is SBD Farms of Guymon, Ok
 IF PAR.CC_Company_Number = 360;

 //?**** Get tattoo from Eval Trans Upl per Trolley/Kill dt
 // Call program Rtv Prev Kill Date    XF.
 CALL PROGRAM(Rtv Prev Kill Date    XF) ('PDRUXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.PSA_Cut_Date);
 PARAMETER(PAR.Date_USR);

 EXECUTE FUNCTION(Rtv Tattoo f/trolley  RT) TYPE(RTVOBJ) FILE(PKCPCPP)           AB1260632;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Date_USR);
 PARAMETER(PAR.PSA_Tattoo);
 PARAMETER(DB1.CS_Trolley_Id);
 {
  //?USER: Initialize routine

  // PAR.EA Tattoo Number = CON.*ZERO
  PAR.EA_Tattoo_Number = *ZERO;

  //?USER: Process Data record

  //?Look for a match on trolley id going back only 2 days.
  CASE;

  // IF DB1.EA Kill Date NE PAR.EA Kill Date
  IF DB1.EA_Kill_Date <> PAR.EA_Kill_Date;

  // WRK.Days USR = DB1.EA Kill Date - PAR.EA Kill Date *DAYS
  WRK.Days_USR = DURATION(DB1.EA_Kill_Date PAR.EA_Kill_Date 'DY' 1111110 'NONE' 'N' 1);

  CASE;

  // IF WRK.Days USR is GT 2
  IF WRK.Days_USR > 2;

  QUIT;

  ENDIF;

  ENDIF;

  //?S00321 RMC 7/11/08 If tattoo found within 2 days, validate it.
  EXECUTE FUNCTION(Rtv Val Ttt,Kll Dt    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1154371;
  PARAMETER(DB1.EA_Company_Number);
  PARAMETER(DB1.EA_Kill_Date);
  PARAMETER(DB1.EA_Tattoo_Number);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

  }

  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  //?S00321 RMC 7/11/08
  //?if its not valid, get next Eval Trans Upl rcd per RU Date/Time
  EXECUTE FUNCTION(Rtv Tattoo f/RU Dt/Tm RT) TYPE(RTVOBJ) FILE(PKCPCPP)           AB1287961;
  PARAMETER(DB1.EA_Company_Number);
  PARAMETER(DB1.EA_Kill_Date);
  PARAMETER(LCL.EA_Tattoo_Number);
  PARAMETER(DB1.RU_Date);
  PARAMETER(DB1.RU_Time);
  {
   //?USER: Initialize routine

   // PAR.EA Tattoo Number = CON.*ZERO
   PAR.EA_Tattoo_Number = *ZERO;

   //?USER: Process Data record

   //?S00321 RMC new -- Validate tattoo number - quit when valid
   EXECUTE FUNCTION(Rtv Val Ttt,Kll Dt    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1154371;
   PARAMETER(DB1.EA_Company_Number);
   PARAMETER(DB1.EA_Kill_Date);
   PARAMETER(DB1.EA_Tattoo_Number);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

   }

   CASE;

   // IF PGM.*Return code is *Record does not exist
   IF PGM.*Return_code = 'Y2U0005';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.EA Tattoo Number = DB1.EA Tattoo Number
   PAR.EA_Tattoo_Number = DB1.EA_Tattoo_Number;

   QUIT;

   ENDIF;

  }

  CASE;

  // IF LCL.EA Tattoo Number is Not found
  IF LCL.EA_Tattoo_Number = 0;

  //?if one later isnt found, get prev Eval Trans Upl rcd per RU Time
  EXECUTE FUNCTION(Rtv Tattoo f/RU DtTmD RT) TYPE(RTVOBJ) FILE(PKCPCPP)           AB1288070;
  PARAMETER(DB1.EA_Company_Number);
  PARAMETER(DB1.EA_Kill_Date);
  PARAMETER(LCL.EA_Tattoo_Number);
  PARAMETER(DB1.RU_Date);
  PARAMETER(DB1.RU_Time);
  {
   //?USER: Initialize routine

   //?get prev ru date/time rcd
   // PAR.EA Tattoo Number = CON.*ZERO
   PAR.EA_Tattoo_Number = *ZERO;

   //?USER: Process Data record

   //?S00321 RMC new -- Validate tattoo number - quit when valid
   EXECUTE FUNCTION(Rtv Val Ttt,Kll Dt    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1154371;
   PARAMETER(DB1.EA_Company_Number);
   PARAMETER(DB1.EA_Kill_Date);
   PARAMETER(DB1.EA_Tattoo_Number);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

   }

   CASE;

   // IF PGM.*Return code is *Record does not exist
   IF PGM.*Return_code = 'Y2U0005';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.EA Tattoo Number = DB1.EA Tattoo Number
   PAR.EA_Tattoo_Number = DB1.EA_Tattoo_Number;

   QUIT;

   ENDIF;

  }

  ENDIF;

  // PAR.EA Tattoo Number = LCL.EA Tattoo Number
  PAR.EA_Tattoo_Number = LCL.EA_Tattoo_Number;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.EA Tattoo Number = DB1.EA Tattoo Number
  PAR.EA_Tattoo_Number = DB1.EA_Tattoo_Number;

  ENDIF;

  QUIT;

 }

 //?****
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?RMC 11/15/07 Tf changed to Trolley Tracking per Dan Norman
 //?**** Get tattoo from Eval Trans Upl per Trolley/Kill dt
 // Call program Rtv Prev Kill Date    XF.
 CALL PROGRAM(Rtv Prev Kill Date    XF) ('PDRUXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.PSA_Cut_Date);
 PARAMETER(PAR.Date_USR);

 EXECUTE FUNCTION(Rtv Tattoo f/trolley  RT) TYPE(RTVOBJ) FILE(PKCPCPP)           AB1260632;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Date_USR);
 PARAMETER(PAR.PSA_Tattoo);
 PARAMETER(DB1.CS_Trolley_Id);
 {
  //?USER: Initialize routine

  // PAR.EA Tattoo Number = CON.*ZERO
  PAR.EA_Tattoo_Number = *ZERO;

  //?USER: Process Data record

  //?Look for a match on trolley id going back only 2 days.
  CASE;

  // IF DB1.EA Kill Date NE PAR.EA Kill Date
  IF DB1.EA_Kill_Date <> PAR.EA_Kill_Date;

  // WRK.Days USR = DB1.EA Kill Date - PAR.EA Kill Date *DAYS
  WRK.Days_USR = DURATION(DB1.EA_Kill_Date PAR.EA_Kill_Date 'DY' 1111110 'NONE' 'N' 1);

  CASE;

  // IF WRK.Days USR is GT 2
  IF WRK.Days_USR > 2;

  QUIT;

  ENDIF;

  ENDIF;

  //?S00321 RMC 7/11/08 If tattoo found within 2 days, validate it.
  EXECUTE FUNCTION(Rtv Val Ttt,Kll Dt    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1154371;
  PARAMETER(DB1.EA_Company_Number);
  PARAMETER(DB1.EA_Kill_Date);
  PARAMETER(DB1.EA_Tattoo_Number);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

  }

  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  //?S00321 RMC 7/11/08
  //?if its not valid, get next Eval Trans Upl rcd per RU Date/Time
  EXECUTE FUNCTION(Rtv Tattoo f/RU Dt/Tm RT) TYPE(RTVOBJ) FILE(PKCPCPP)           AB1287961;
  PARAMETER(DB1.EA_Company_Number);
  PARAMETER(DB1.EA_Kill_Date);
  PARAMETER(LCL.EA_Tattoo_Number);
  PARAMETER(DB1.RU_Date);
  PARAMETER(DB1.RU_Time);
  {
   //?USER: Initialize routine

   // PAR.EA Tattoo Number = CON.*ZERO
   PAR.EA_Tattoo_Number = *ZERO;

   //?USER: Process Data record

   //?S00321 RMC new -- Validate tattoo number - quit when valid
   EXECUTE FUNCTION(Rtv Val Ttt,Kll Dt    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1154371;
   PARAMETER(DB1.EA_Company_Number);
   PARAMETER(DB1.EA_Kill_Date);
   PARAMETER(DB1.EA_Tattoo_Number);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

   }

   CASE;

   // IF PGM.*Return code is *Record does not exist
   IF PGM.*Return_code = 'Y2U0005';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.EA Tattoo Number = DB1.EA Tattoo Number
   PAR.EA_Tattoo_Number = DB1.EA_Tattoo_Number;

   QUIT;

   ENDIF;

  }

  CASE;

  // IF LCL.EA Tattoo Number is Not found
  IF LCL.EA_Tattoo_Number = 0;

  //?if one later isnt found, get prev Eval Trans Upl rcd per RU Time
  EXECUTE FUNCTION(Rtv Tattoo f/RU DtTmD RT) TYPE(RTVOBJ) FILE(PKCPCPP)           AB1288070;
  PARAMETER(DB1.EA_Company_Number);
  PARAMETER(DB1.EA_Kill_Date);
  PARAMETER(LCL.EA_Tattoo_Number);
  PARAMETER(DB1.RU_Date);
  PARAMETER(DB1.RU_Time);
  {
   //?USER: Initialize routine

   //?get prev ru date/time rcd
   // PAR.EA Tattoo Number = CON.*ZERO
   PAR.EA_Tattoo_Number = *ZERO;

   //?USER: Process Data record

   //?S00321 RMC new -- Validate tattoo number - quit when valid
   EXECUTE FUNCTION(Rtv Val Ttt,Kll Dt    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1154371;
   PARAMETER(DB1.EA_Company_Number);
   PARAMETER(DB1.EA_Kill_Date);
   PARAMETER(DB1.EA_Tattoo_Number);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

   }

   CASE;

   // IF PGM.*Return code is *Record does not exist
   IF PGM.*Return_code = 'Y2U0005';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.EA Tattoo Number = DB1.EA Tattoo Number
   PAR.EA_Tattoo_Number = DB1.EA_Tattoo_Number;

   QUIT;

   ENDIF;

  }

  ENDIF;

  // PAR.EA Tattoo Number = LCL.EA Tattoo Number
  PAR.EA_Tattoo_Number = LCL.EA_Tattoo_Number;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.EA Tattoo Number = DB1.EA Tattoo Number
  PAR.EA_Tattoo_Number = DB1.EA_Tattoo_Number;

  ENDIF;

  QUIT;

 }

 ENDIF;

 // PAR.PSA Shift = DB1.CS Shift
 PAR.PSA_Shift = DB1.CS_Shift;

 EXECUTE FUNCTION(Crt Primal Scale Dtl  CR) TYPE(CRTOBJ) FILE(PKDLCPP)           AB1174498;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.PSA_Scale_ID);
 PARAMETER(PAR.PSA_Cut_Date);
 PARAMETER(PAR.PSA_Cut_Time);
 PARAMETER(PAR.PSA_Sequence);
 PARAMETER(PAR.PSA_Count);
 PARAMETER(PAR.PSA_Weight);
 PARAMETER(PAR.PSA_Tattoo);
 PARAMETER(PAR.PSA_Shift);
 PARAMETER(PAR.PSA_Trolley_Id);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 //?4/10/02 -- Save the cut dates for creating the Primal Summary
 CASE;

 // IF PAR.Date USR is Eq 0
 IF PAR.Date_USR = 0;

 // PAR.Date USR = PAR.PSA Cut Date
 PAR.Date_USR = PAR.PSA_Cut_Date;

 //?4/10/02 -- Save the cut dates for creating the Primal Summary
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.PSA Cut Date NE PAR.Date USR
 IF PAR.PSA_Cut_Date <> PAR.Date_USR;

 // PAR.Date 2 USR = PAR.PSA Cut Date
 PAR.Date_2_USR = PAR.PSA_Cut_Date;

 ENDIF;

 ENDIF;

 //?10/27/04 -- Save the earliest cut date for positioning prod trace job
 CASE;

 // IF PAR.Production Date UPL is Zero
 IF PAR.Production_Date_UPL = 0;

 // PAR.Production Date UPL = CVTVAR(DB1.CS Date)
 PAR.Production_Date_UPL = CVTVAR(DB1.CS_Date);

 //?10/27/04 -- Save the earliest cut date for positioning prod trace job
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Production Date UPL = CVTVAR(DB1.CS Date)
 WRK.Production_Date_UPL = CVTVAR(DB1.CS_Date);

 CASE;

 // IF WRK.Production Date UPL LT PAR.Production Date UPL
 IF WRK.Production_Date_UPL < PAR.Production_Date_UPL;

 // PAR.Production Date UPL = WRK.Production Date UPL
 PAR.Production_Date_UPL = WRK.Production_Date_UPL;

 ENDIF;

 ENDIF;

 ENDIF;

}


//?4/03/02   BUILD EXPORT LOIN WEIGHT RANGE SUMMARY FOR THE CUT DATE(S)
CASE;

// IF PAR.Date USR is NE 0
IF PAR.Date_USR <> 0;

//?Susan look at this with a debug
// Call program Rtv Loin Range Count  XF.
CALL PROGRAM(Rtv Loin Range Count  XF) ('PKYMXFR');
PARAMETER(PAR.Date_USR);

ENDIF;

CASE;

// IF PAR.Date 2 USR is NE 0
IF PAR.Date_2_USR <> 0;

//?Susan look at this with a debug
// Call program Rtv Loin Range Count  XF.
CALL PROGRAM(Rtv Loin Range Count  XF) ('PKYMXFR');
PARAMETER(PAR.Date_2_USR);

ENDIF;

// Call program Ext Prod Trace Upd TT XF.
SBMJOB;
CALL PROGRAM(Ext Prod Trace Upd TT XF) ('POP7XFR');
PARAMETER(PAR.Production_Date_UPL);
SBMJOBOVR JOB(PRODTRACE);
SBMJOBEND;

//?E14409 JJH 01/23/19 - SAVF PLARCPP into PRKFSAVF/PLARxxx
//?CPYF PLARCPP to PRKFSAV before CLRPFM
CASE;

// IF JOB.*USER is PorkISTesting
IF JOB.*USER = 'PRKTEST'/'ISPPATE'/'ISSMASO'/'ISRCENT'/'ISPURVAP'/'ISROSEM'/'ISSHARONZ'            +
/'ISSZURN'/'ISJHIGH'/'ISJBADE'/'ISJAMESB'/'ISDNGUY'/'ISDANNYN'/'PRKTESTGU'/'PRKTESTST'             +
/'PRKTESTTF'/'TPMTEST'/'TFTST961'/'ISSUSANM'/'ISJULIUSH'/'ISBGUTI'/'ISBARBG'/'ISBBARK'             +
/'ISNFOY'/'ISNATHANF'/'ISDREDD'/'ISABANS';

//?Do not copy PLARCPP to PRKFSAV
//?CPYF PLARCPP to PRKFSAV before CLRPFM
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Cpy Cold Scale UPL    XF.
CALL PROGRAM(Cpy Cold Scale UPL    XF) ('PWIGXFR');
PARAMETER(PAR.CC_Company_Number);

ENDIF;

// Execute command - 'Clear Physical File Member'
EXECUTE COMMAND(PRK0481);
PARAMETER('PLARCPP');
PARAMETER('CLRPKDJ');

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('PRKPRMUP');
PARAMETER(WRK.Office_Dist_List_USR);

// Retrieve message - 'Primal Cold Scale Transactions has been uploaded  &2 &1'
WRK.Office_Dist_Message_USR = RTVMSG(PRK1122);
PARAMETER(JOB.*Job_date);
PARAMETER(PAR.CC_Company_Number);

// Call program Snd Pager Msg (MPLUS) UP.
CALL PROGRAM(Snd Pager Msg (MPLUS) UP) ('POMSUPC');
PARAMETER(WRK.Office_Dist_List_USR);
PARAMETER(WRK.Office_Dist_Message_USR);

