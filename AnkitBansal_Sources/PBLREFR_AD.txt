// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBLREFR
// ?Date: 14.08.2025 Time: 03:48:26
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize subfile header

//?Update CTL fields from PAR
DO;

MOVE *ALL (To: CTL From: PAR);

// CTL.Company = PAR.Company Number
CTL.Company = PAR.Company_Number;

// CTL.Load ID USR = PAR.Load ID
CTL.Load_ID_USR = PAR.Load_ID;

// CTL.Scheduled Ship Date USR = PAR.Scheduled Ship Date USR
CTL.Scheduled_Ship_Date_USR = PAR.Scheduled_Ship_Date_USR;

// CTL.Carrier Code = PAR.Carrier Code
CTL.Carrier_Code = PAR.Carrier_Code;

// CTL.Delivery Terminal USR = PAR.Port Delv Terminal
CTL.Delivery_Terminal_USR = PAR.Port_Delv_Terminal;

//?Format "Include Status" text
CASE;

// IF PAR.Include Sts is All Items
IF PAR.Include_Sts = 'A';

// CTL.USR 15 Text           USR = CON.Include All
CTL.USR_15_Text_USR = 'Include All';

//?Format "Include Status" text
// IF PAR.Include Sts is Booked Only
IF PAR.Include_Sts = 'B';

// CTL.USR 15 Text           USR = CON.Booked Only
CTL.USR_15_Text_USR = 'Booked Only';

//?Format "Include Status" text
// IF PAR.Include Sts is Unbooked Only
IF PAR.Include_Sts = 'U';

// CTL.USR 15 Text           USR = CON.Unbooked Only
CTL.USR_15_Text_USR = 'Unbooked Only';

ENDIF;

//?Format "Include Warehouse Type" text
CASE;

// IF PAR.Warehouse Type is Fresh
IF PAR.Warehouse_Type = 'FR';

// CTL.USR 15 Text           USR = CON.Include All
CTL.USR_15_Text_USR = 'Include All';

//?Format "Include Warehouse Type" text
// IF PAR.Include Sts is Booked Only
IF PAR.Include_Sts = 'B';

// CTL.USR 15 Text           USR = CON.Booked Only
CTL.USR_15_Text_USR = 'Booked Only';

//?Format "Include Warehouse Type" text
// IF PAR.Include Sts is Unbooked Only
IF PAR.Include_Sts = 'U';

// CTL.USR 15 Text           USR = CON.Unbooked Only
CTL.USR_15_Text_USR = 'Unbooked Only';

ENDIF;

ENDDO;

//?* Retrieve warehouse code from order detail
EXECUTE FUNCTION(Rtv Warehouse wo/Quit RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1788808;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Warehouse_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Warehouse Code = DB1.Warehouse Code
 PAR.Warehouse_Code = DB1.Warehouse_Code;

 ENDIF;

}


EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
PARAMETER(PAR.Warehouse_Code);
PARAMETER(CTL.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Retrieve Warehouse type description
CASE;

// IF CTL.Warehouse Type is Frozen
IF CTL.Warehouse_Type = 'FZ';

// CTL.Description 14A      USR = CON.Frozen
CTL.Description_14A_USR = 'Frozen';

//?Retrieve Warehouse type description
// IF CTL.Warehouse Type is Fresh
IF CTL.Warehouse_Type = 'FR';

// CTL.Description 14A      USR = CON.Chilled
CTL.Description_14A_USR = 'Chilled';

//?Retrieve Warehouse type description
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Description 14A      USR = CON.*BLANK
CTL.Description_14A_USR = *BLANK;

ENDIF;

//?* Retrieve Shipping Line name
EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(CTL.Carrier_Code);
PARAMETER(CTL.Description_21A_Usr);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?USER: Initialize subfile record (existing record)

// LCL.Order Number = CON.1
LCL.Order_Number = 1;

//?Select by date range
CASE;

// IF DB1.Scheduled Ship Date LT PAR.Scheduled Ship Date
IF ( DB1.Scheduled_Ship_Date < PAR.Scheduled_Ship_Date;

// OR DB1.Scheduled Ship Date GT PAR.Scheduled Ship Date USR
OR DB1.Scheduled_Ship_Date > PAR.Scheduled_Ship_Date_USR );

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select Exports only
CASE;

// IF DB1.Export Status is Not Yes
IF DB1.Export_Status = *BLANK/'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select Warehouse Type only
CASE;

// IF PAR.Warehouse Type NE WRK.Blank for 3          USR
IF PAR.Warehouse_Type <> WRK.Blank_for_3_USR;

EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
PARAMETER(DB1.Ship_From_Warehouse);
PARAMETER(LCL.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Warehouse Type NE PAR.Warehouse Type
IF LCL.Warehouse_Type <> PAR.Warehouse_Type;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select Type Code only
CASE;

// IF PAR.Type Code is Entered
IF PAR.Type_Code <> *BLANK;

// WRK.Ship To Customer = CND.equal to zero
WRK.Ship_To_Customer = *ZERO;

EXECUTE FUNCTION(RTV Type Cd by Ord     RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC2061178;
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.Ship_To_Customer);
PARAMETER(PAR.Type_Code);
PARAMETER(LCL.Record_Selected_USR);
{
 //?USER: Process Data record

 CASE;

 // IF PAR.Ship To Customer is not equal to zero
 IF PAR.Ship_To_Customer <> *ZERO;

 //?Validate type code for selected customer
 CASE;

 // IF DB1.Ship To Customer EQ PAR.Ship To Customer
 IF DB1.Ship_To_Customer = PAR.Ship_To_Customer;

 EXECUTE FUNCTION(RTV Type Code by Cust  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1625687;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(LCL.Type_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Type Code NE PAR.Trans Type 1 PASS     USR
 IF LCL.Type_Code <> PAR.Trans_Type_1_PASS_USR;

 // PAR.Record Selected       USR = CND.no
 PAR.Record_Selected_USR = 'N';

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Record Selected       USR = CND.yes
 PAR.Record_Selected_USR = 'Y';

 QUIT;

 ENDIF;

 ENDIF;

 // IF PAR.Ship To Customer is equal to zero
 IF PAR.Ship_To_Customer = *ZERO;

 // PAR.Record Selected       USR = CND.no
 PAR.Record_Selected_USR = 'N';

 EXECUTE FUNCTION(Rtv Cust&CType-LdOrd  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2061218;
 PARAMETER(DB1.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Trans_Type_1_PASS_USR);
 PARAMETER(PAR.Record_Selected_USR);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Type Code by Cust  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1625687;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(PAR.Type_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.Type Code EQ PAR.Trans Type 1 PASS     USR
  IF PAR.Type_Code = PAR.Trans_Type_1_PASS_USR;

  // PAR.Record Selected       USR = CND.yes
  PAR.Record_Selected_USR = 'Y';

  QUIT;

  ENDIF;

 }

 //?Flag if at least 1 order on the load has matching type code
 CASE;

 // IF PAR.Record Selected       USR is yes
 IF PAR.Record_Selected_USR = 'Y';

 QUIT;

 ENDIF;

 ENDIF;

}


CASE;

// IF LCL.Record Selected       USR is Not Yes
IF LCL.Record_Selected_USR = *BLANK/'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select Company matches ctl.company
CASE;

// IF DB1.Company Number NE CTL.Company
IF DB1.Company_Number <> CTL.Company;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select Booked or Unbooked, unless "All" is requested
CASE;

// IF PAR.Include Sts is Not All Booking
IF PAR.Include_Sts = 'B'/'U';

EXECUTE FUNCTION(VAL Bkg#/Cntnr by Load RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2082575;
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.OHE Booking Number is Not Entered
 IF DB1.OHE_Booking_Number = *BLANK;

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 ENDIF;

 //?USER: Exit processing

 //?This is not an error
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 ENDIF;

}


//?Booked Only
CASE;

// IF PAR.Include Sts is Booked Only
IF PAR.Include_Sts = 'B';

CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Unbooked Only
CASE;

// IF PAR.Include Sts is Unbooked Only
IF PAR.Include_Sts = 'U';

CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Skip Shipped or Invoiced loads
CASE;

// IF DB1.Load Status is Shipped or Invoiced
IF DB1.Load_Status = 'I'/'S';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Skip Buyers Truck
CASE;

// IF RCD.Carrier Code is Buyer's Truck
IF RCD.Carrier_Code = 'BUY';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Update subfile record
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
PARAMETER(DB1.Ship_From_Warehouse);
PARAMETER(RCD.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


MOVE *ALL (To: RCD From: DB1);

//?* Save Carrier Code in hidden field to check if it has changed
CASE;

// IF RCD.Carrier Code Usr is not entered
IF RCD.Carrier_Code_Usr = *BLANK;

// OR RCD.Carrier Code is not entered
OR RCD.Carrier_Code = *BLANK;

// RCD.Carrier Code Usr = DB1.Carrier Code
RCD.Carrier_Code_Usr = DB1.Carrier_Code;

// RCD.Carrier Code = DB1.Carrier Code
RCD.Carrier_Code = DB1.Carrier_Code;

ENDIF;

//?R15161 DN 7/17/19-Replaced Booking Number usr 1 w/ 'OHE Booking Number USR
EXECUTE FUNCTION(RTV Book info by load  RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2082502;
PARAMETER(LCL.Order_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.OHE_Vessel_Airline);
PARAMETER(RCD.OHE_Voyage_Flight);
PARAMETER(RCD.OHE_Booking_Number_USR);
PARAMETER(RCD.Container_Number_usr_1);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// RCD.Trailer Id            USR = RCD.Container Number usr 1
RCD.Trailer_Id_USR = RCD.Container_Number_usr_1;

// RCD.Trailer Id = DB1.Trailer Id
RCD.Trailer_Id = DB1.Trailer_Id;

//?R15161 DN 7/17/19-Commented Out, No Purpose.
// RCD.Type Code = PAR.Type Code
RCD.Type_Code = PAR.Type_Code;

ENDIF;

//?CALC: Subfile control function fields

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(CTL.Carrier_Code);
PARAMETER(CTL.Description_21A_Usr);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?USER: Validate subfile control

//?Warning if no Booking fields contain data
CASE;

// IF CTL.OHE Booking Number is Not Entered
IF CTL.OHE_Booking_Number = *BLANK;

// AND CTL.Carrier Code is not entered
AND CTL.Carrier_Code = *BLANK;

// AND CTL.OHE Vessel/Airline is blanks
AND CTL.OHE_Vessel_Airline = *BLANK;

// AND CTL.OHE Voyage/Flight is Zeros
AND CTL.OHE_Voyage_Flight = *ZERO;

// AND CTL.Shipping Line is not entered
AND CTL.Shipping_Line = *BLANK;

// AND CTL.Delivery Terminal USR is Not Entered
AND CTL.Delivery_Terminal_USR = *BLANK;

// AND CTL.OHE Discharge Port/Airprt is Blank
AND CTL.OHE_Discharge_Port_Airprt = *BLANK;

// AND CTL.OHE City is Not Entered
AND CTL.OHE_City = *BLANK;

// Send information message - 'No information to assign to loads. Warning only.'
MESSAGE(USR4688 *INFO);

ENDIF;

//?Exit without update
CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

// PAR.Record Activity Sts USR = CND.*Blank
PAR.Record_Activity_Sts_USR = *BLANK;

RETURN;

ENDIF;

//?USER: Validate subfile record fields

//?Carrier must be valid if entered
CASE;

// IF RCD.Carrier Code is entered
IF RCD.Carrier_Code <> *BLANK;

EXECUTE FUNCTION(Val Carrier           RT) TYPE(RTVOBJ) FILE(OMFFREP)           AC1197583;
PARAMETER(RCD.Carrier_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carrier doesn't exist'
ERROR(USR1252);
MSGPARM(RCD.Carrier_Code);

ENDIF;

ENDIF;

//?Carrier required to enter a container number
CASE;

// IF RCD.Carrier Code is not entered
IF RCD.Carrier_Code = *BLANK;

// AND RCD.Container Number usr 1 is Entered
AND RCD.Container_Number_usr_1 <> *BLANK;

// Send error message - 'Carrier is required to enter a trailer.'
ERROR(USR2668);
MSGPARM(RCD.Carrier_Code);

ENDIF;

//?Validate Carrier/Trailer-Container. Create new if needed
CASE;

// IF RCD.Container Number usr 1 is Entered
IF RCD.Container_Number_usr_1 <> *BLANK;

// AND RCD.Carrier Code is entered
AND RCD.Carrier_Code <> *BLANK;

EXECUTE FUNCTION(Rtv Trailer            RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC1498208;
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Container_Number_usr_1);
PARAMETER(NLL.Company_Number);
PARAMETER(LCL.USR_Load_Type);
PARAMETER(LCL.Trailer_Type);
PARAMETER(LCL.Seaboard_Owned_Status);
PARAMETER(LCL.On_Yard_Status);
PARAMETER(LCL.On_Yard_Date);
PARAMETER(LCL.On_Yard_Time);
PARAMETER(LCL.Assigned_Status);
PARAMETER(LCL.Available_Status);
PARAMETER(LCL.Not_Available_Reason_Code);
PARAMETER(LCL.Comment_Line);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Create if Trailer does not exist
CASE;

// IF LCL.USR Load Type is Blank
IF LCL.USR_Load_Type = *BLANK;

// Send information message - 'Trailer doesn't exist; it will be added.'
MESSAGE(USR2667 *INFO);

//?* Populate container fields
// LCL.Assigned Status = CND.yes
LCL.Assigned_Status = 'Y';

// LCL.Trailer Type = CND.Reefer
LCL.Trailer_Type = 'R';

// LCL.On Yard Status = CND.yes
LCL.On_Yard_Status = 'Y';

// LCL.On Yard Date = JOB.*Job date
LCL.On_Yard_Date = JOB.*Job_date;

// LCL.On Yard Time = JOB.*Job time
LCL.On_Yard_Time = JOB.*Job_time;

// LCL.Available Status = CND.no
LCL.Available_Status = 'N';

//?default load type, if blanks
CASE;

// IF RCD.Load Type is Blank
IF RCD.Load_Type = *BLANK;

// LCL.Load Type = CND.Regular
LCL.Load_Type = 'R';

//?default load type, if blanks
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Load Type = RCD.Load Type
LCL.Load_Type = RCD.Load_Type;

ENDIF;

EXECUTE FUNCTION(Crt PD Trailer         CR) TYPE(CRTOBJ) FILE(PDLYREP)          AC1496468;
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Container_Number_usr_1);
PARAMETER(CTL.Company);
PARAMETER(LCL.Load_Type);
PARAMETER(LCL.Trailer_Type);
PARAMETER('N');
PARAMETER(LCL.On_Yard_Status);
PARAMETER(LCL.On_Yard_Date);
PARAMETER(LCL.On_Yard_Time);
PARAMETER(LCL.Assigned_Status);
PARAMETER(LCL.Available_Status);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(LCL.Status_Unused_1);
PARAMETER(LCL.Status_Unused_2);
PARAMETER(LCL.Status_Unused_3);
PARAMETER(LCL.Status_Unused_4);
PARAMETER(LCL.Status_Unused_5);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER('A');
PARAMETER(RCD.Job_Time);
PARAMETER(RCD.User_Id);
PARAMETER(RCD.Job_Name);
PARAMETER(RCD.Job_Date);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
PARAMETER('ASNTRL');
PARAMETER('TRF');
PARAMETER(*BLANK);
PARAMETER(RCD.Container_Number_usr_1);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Carrier_Code);
PARAMETER(CTL.Company);
PARAMETER(*ZERO);

//?* Save container in case it changes later on
// WRK.OHE Container Number = RCD.Container Number usr 1
WRK.OHE_Container_Number = RCD.Container_Number_usr_1;

//?** Retrieve fields for newly added Trailer
EXECUTE FUNCTION(Rtv Trailer            RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC1498208;
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Container_Number_usr_1);
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.USR_Load_Type);
PARAMETER(LCL.Trailer_Type);
PARAMETER(LCL.Seaboard_Owned_Status);
PARAMETER(LCL.On_Yard_Status);
PARAMETER(LCL.On_Yard_Date);
PARAMETER(LCL.On_Yard_Time);
PARAMETER(LCL.Assigned_Status);
PARAMETER(LCL.Available_Status);
PARAMETER(LCL.Not_Available_Reason_Code);
PARAMETER(LCL.Comment_Line);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

//?Clear usr load id
// LCL.Load ID USR = CND.Not entered
LCL.Load_ID_USR = *ZERO;

// LCL.Load Id 2 = RCD.Load ID
LCL.Load_Id_2 = RCD.Load_ID;

EXECUTE FUNCTION(VAL Trailer assignmnt RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC2031954;
PARAMETER(*ZERO);
PARAMETER(RCD.Container_Number_usr_1);
PARAMETER(RCD.Carrier_Code);
PARAMETER(LCL.Load_Id_3);
PARAMETER(LCL.Load_Id_2);
{
 //?USER: Initialize routine

 //?***** Changes and comments
 DO;

 //?** 05/14/2012 LJB E002105
 //?** Restrict to Carrier/Trailer, okay if multiple carriers have
 //?** the same trailer id
 ENDDO;

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.Trailer Available to assn
 PGM.*Return_code = 'TRLRAVL';

 //?USER: Process Data record

 CASE;

 // IF DB1.Load ID NE PAR.Load Id 2
 IF DB1.Load_ID <> PAR.Load_Id_2;

 CASE;

 // IF DB1.Load Status is Prior to Shipped
 IF DB1.Load_Status = 'C'/'E'/'L'/'U';

 // PGM.*Return code = CND.Trailer already assigned
 PGM.*Return_code = 'TRLRASN';

 // PAR.USR Load ID = DB1.Load ID
 PAR.USR_Load_ID = DB1.Load_ID;

 QUIT;

 ENDIF;

 ENDIF;

}


//?* Skip error checks if trailer is assigned to rcd.load id
CASE;

// IF LCL.Load Id 3 is NE Blank
IF LCL.Load_Id_3 <> *ZERO;

//?load, carrier, trailer tests
CASE;

// IF LCL.Load Status is Shipped or Invoiced
IF LCL.Load_Status = 'I'/'S';

//?** No error if Load HDR is Shipped or Invoiced
//?load, carrier, trailer tests
// IF PGM.*Return code is Trailer already assigned
IF PGM.*Return_code = 'TRLRASN';

//?** Trailer exists in Order Header Extension file
// Send error message - 'Trailer is already assigned to load &2'
ERROR(USR2618);
MSGPARM(RCD.Container_Number_usr_1);
MSGPARM(LCL.Load_Id_3);

//?load, carrier, trailer tests
// IF PGM.*Return code is Trailer Available to assn
IF PGM.*Return_code = 'TRLRAVL';

//?** OKAY if:
//?** Trailer exists but w/diff carrier or it doesn't exist
//?** in either the OHE or Load Header file
//?load, carrier, trailer tests
// IF LCL.USR Load Type NE RCD.Load Type
IF LCL.USR_Load_Type <> RCD.Load_Type;

//?* Error message moved up above Info messages
// Send error message - 'Trailer Load Type &2 disagrees with Load Type &1 on the Load.'
ERROR(USR2613);
MSGPARM(RCD.Load_Type);
MSGPARM(LCL.USR_Load_Type);
MSGPARM(RCD.Container_Number_usr_1);

//?load, carrier, trailer tests
// IF LCL.Available Status is Not Yes
IF LCL.Available_Status = *BLANK/'N';

// AND LCL.Load Id 3 NE RCD.Load ID
AND LCL.Load_Id_3 <> RCD.Load_ID;

// Send information message - 'Warning: Trailer is not Available for assignment.'
MESSAGE(USR2616 *INFO);
MSGPARM(RCD.Container_Number_usr_1);

//?load, carrier, trailer tests
// IF LCL.Seaboard Owned Status is yes
IF LCL.Seaboard_Owned_Status = 'Y';

// Send information message - 'Warning:  Trailer is Seaboard Owned.'
MESSAGE(USR2617 *INFO);
MSGPARM(RCD.Container_Number_usr_1);

//?load, carrier, trailer tests
// IF LCL.On Yard Date is not entered
IF LCL.On_Yard_Date = *ZERO;

// Send information message - 'Warning: Trailer is not On Yard.'
MESSAGE(USR2619 *INFO);
MSGPARM(RCD.Container_Number_usr_1);

//?load, carrier, trailer tests
// IF LCL.Company Number NE CTL.Company
IF LCL.Company_Number <> CTL.Company;

//?* Info error moved to bottom of list of tests
// Send information message - 'Trailer Co# & Load Start Co# do not match-Press enter'
MESSAGE(USR3902 *INFO);
MSGPARM(RCD.Container_Number_usr_1);

ENDIF;

ENDIF;

ENDIF;

//?USER: Validate subfile record relations

CASE;

// IF RCD.*SFLSEL is *Select
IF RCD.*SFLSEL = '1'/'1';

//?R15161 DN 7/17/19-Replaced Booking Number usr 1 parm w/ OHE Booking Number
//?  Dropped Booking Number parm, no purpose.
EXECUTE FUNCTION(CHG LH, OHE, OH        CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC2083218;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.LTL_Flag);
PARAMETER(RCD.Load_Status);
PARAMETER(RCD.Reefer_Temperature);
PARAMETER(RCD.Seal_1);
PARAMETER(RCD.Seal_2);
PARAMETER(RCD.Seal_3);
PARAMETER(RCD.Total_Load_Order_Weight);
PARAMETER(RCD.Flat_Amount);
PARAMETER(RCD.Allocate_Pounds_Miles);
PARAMETER(RCD.Total_Stops);
PARAMETER(RCD.Container_Number_usr_1);
PARAMETER(RCD.Transloader_Carrier_Code);
PARAMETER(RCD.BOL_Time);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Truck_Size);
PARAMETER(RCD.Ld_Hdr_Ld_Dtl_Unused);
PARAMETER(RCD.Rated_Freight);
PARAMETER(RCD.Ship_Status);
PARAMETER(RCD.Load_Type);
PARAMETER(RCD.Number_Pallets_Received);
PARAMETER(RCD.Number_Pallets_Loaded);
PARAMETER(RCD.Load_Carrier_Pay_Amt);
PARAMETER(RCD.Estimated_Arrival_Time);
PARAMETER(RCD.Actual_Arrival_Date);
PARAMETER(RCD.Actual_Arrival_Time);
PARAMETER(RCD.Trailer_IN_Weight);
PARAMETER(RCD.Trailer_OUT_Weight);
PARAMETER(RCD.Actual_Departure_Date);
PARAMETER(RCD.Departure_Time);
PARAMETER(RCD.Schedule_Sequence_Number);
PARAMETER(RCD.Product_Temperature);
PARAMETER(RCD.Number_Spacers_Loaded);
PARAMETER(RCD.Car_Veh_Initials);
PARAMETER(RCD.Total_Load_Miles);
PARAMETER(RCD.Recorder_ID);
PARAMETER(RCD.Ship_From_Warehouse);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(RCD.Gross_Weight);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Export_Status);
PARAMETER(RCD.Actual_Ship_Date);
PARAMETER(RCD.On_Time_Y_N);
PARAMETER(RCD.Truck_Ready_Date);
PARAMETER(RCD.Truck_Ready_Time);
PARAMETER(RCD.Spotted_Date);
PARAMETER(RCD.Spotted_Time);
PARAMETER(RCD.Load_Finished_Date);
PARAMETER(RCD.Load_Finished_Time);
PARAMETER(RCD.BOL_Complete_Date);
PARAMETER(RCD.BOL_Complete_Time);
PARAMETER(RCD.BOL_Received_Date);
PARAMETER(RCD.BOL_Received_Time);
PARAMETER(RCD.Truck_Departure_Date);
PARAMETER(RCD.Truck_Departure_Time);
PARAMETER(RCD.Adjusted_Departure_Date);
PARAMETER(RCD.Adjusted_Departure_Time);
PARAMETER(RCD.Date_In);
PARAMETER(RCD.Time_In);
PARAMETER(RCD.Date_Out);
PARAMETER(RCD.Time_Out);
PARAMETER(RCD.Load_Total_Freight);
PARAMETER(RCD.Scheduled_Delivery_Date);
PARAMETER(RCD.LH_Unused_Sts);
PARAMETER(RCD.LH_Carrier_Payment_Sts);
PARAMETER(RCD.Bring_Back_Miles);
PARAMETER(RCD.Requested_Delivery_Date);
PARAMETER(RCD.Load_Acceptance_Flag);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.On_Yard_Date);
PARAMETER(RCD.On_Yard_Time);
PARAMETER(RCD.Deadline_Departure_Date);
PARAMETER(RCD.Deadline_Departure_Time);
PARAMETER(RCD.Load_Held_Over);
PARAMETER(RCD.Load_Held_Over_Reason);
PARAMETER(RCD.Load_Held_Over_Rsn_Cmt);
PARAMETER(RCD.Ocean_BOL_Number);
PARAMETER(RCD.Express_Mail_Number);
PARAMETER(RCD.Express_Mail_Date);
PARAMETER(RCD.Load_Shag_Flag);
PARAMETER(RCD.Load_Wash_Flag);
PARAMETER(RCD.Product_Complete_Date);
PARAMETER(RCD.Product_Complete_Time);
PARAMETER(RCD.Pallets_Loaded);
PARAMETER(RCD.Avg_Pallet_Tare);
PARAMETER(RCD.Tot_Pallet_Tare);
PARAMETER(RCD.Load_Confirmed_Sts);
PARAMETER(RCD.Load_Confirmed_Contact);
PARAMETER(RCD.Load_Confirmation_Time);
PARAMETER(RCD.Load_Door_1);
PARAMETER(RCD.Override_Total_Load_Miles);
PARAMETER(RCD.Load_Door_2);
PARAMETER(RCD.Partial_Load);
PARAMETER(RCD.Load_Confirmation_Fax_Sts);
PARAMETER(RCD.Export_Load_USDA_OK);
PARAMETER(RCD.Late_Delivery_Email_Flag);
PARAMETER(RCD.Load_Actual_Freight);
PARAMETER(RCD.Hide_on_WW_Load_Sts);
PARAMETER(RCD.Late_Billing_Email_Flag);
PARAMETER(RCD.Shipping_Temp_C_F_txt);
PARAMETER(RCD.LH_Held_Over_Rsn_Cmt);
PARAMETER(RCD.Multi_Company_Load);
PARAMETER(RCD.Fax_Sent_to_SSI_Carrier);
PARAMETER(RCD.Schedule_Pos_Load_Grade);
PARAMETER(RCD.LH_Power_Only_Load);
PARAMETER(RCD.MG_Created_Load);
PARAMETER(RCD.LH_Unused_Sts_5);
PARAMETER(RCD.Load_U_M);
PARAMETER(RCD.TPM_Shipment_Status);
PARAMETER(RCD.LH_Unused_Sts_8);
PARAMETER(RCD.LH_On_Time_Reason_Code);
PARAMETER(RCD.LH_Held_Over_Reason);
PARAMETER(RCD.LH_Carrier_Paid_Dte);
PARAMETER(RCD.LH_Carrier_Paid_Time);
PARAMETER(RCD.LH_Last_Combo_Prod_Date);
PARAMETER(RCD.LH_Last_Combo_Prod_Time);
PARAMETER(RCD.LPT_Load_Plan_Start_Dt);
PARAMETER(RCD.LPT_Load_Plan_Start_Tm);
PARAMETER(RCD.TPM_Planned_Ship_Date);
PARAMETER(RCD.LH_Unused_Time_4);
PARAMETER(RCD.LH_Unused_Date_5);
PARAMETER(RCD.LH_Unused_Time_5);
PARAMETER(RCD.LH_Unused_Date_6);
PARAMETER(RCD.LH_Unused_Time_6);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(CTL.OHE_City);
PARAMETER(CTL.OHE_Load_Haul_Type);
PARAMETER(PAR.OHE_Arrival_Date);
PARAMETER(CTL.Shipping_Line);
PARAMETER(CTL.Delivery_Terminal_USR);
PARAMETER(1);
PARAMETER(RCD.Load_ID);
PARAMETER(CTL.Company);
PARAMETER(1);
PARAMETER(RCD.OHE_Booking_Number_USR);
PARAMETER(RCD.Container_Number_usr_1);
PARAMETER(RCD.Trailer_Id);
PARAMETER(RCD.Carrier_Code_Usr);
PARAMETER(CTL.OHE_Discharge_Port_Airprt);
PARAMETER(PAR.OHE_Sail_Flight_Date);
PARAMETER(CTL.OHE_Vessel_Airline);
PARAMETER(CTL.OHE_Voyage_Flight);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing after Data update

 //?R15161 DN 07/17/19-Replaced Voyage with OHE Voyage/Flight &
 //?  Booking Number with OHE Booking Number.
 EXECUTE FUNCTION(RTV Chg Bkg by Load    RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2082411;
 PARAMETER(PAR.Order_Number_1_usr);
 PARAMETER(PAR.Load_ID_USR);
 PARAMETER(PAR.OHE_Voyage_Flight);
 PARAMETER(PAR.OHE_Booking_Number);
 PARAMETER(PAR.Shipping_Line_1_USR);
 PARAMETER(PAR.Delivery_Terminal_USR);
 PARAMETER(PAR.OHE_Vessel_Airline);
 PARAMETER(PAR.OHE_Sail_Flight_Date);
 PARAMETER(PAR.OHE_Discharge_Port_Airprt);
 PARAMETER(PAR.Container_Number_usr_1);
 PARAMETER(PAR.Ship_Status);
 PARAMETER(PAR.USR_City_25);
 PARAMETER(PAR.OHE_Load_Haul_Type);
 PARAMETER(PAR.OHE_Arrival_Date);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  //?Update export order header extension record
  CASE;

  // IF DB1.Load ID EQ PAR.Load ID
  IF DB1.Load_ID = PAR.Load_ID;

  //?R15161 DN 07/17/19-Replaced Booking Number w/ OHE Booking Number.
  //?Update booking # from # entered on the screen, including blanks
  CASE;

  // IF DB1.OHE Booking Number NE PAR.OHE Booking Number
  IF DB1.OHE_Booking_Number <> PAR.OHE_Booking_Number;

  // LCL.OHE Booking Number = PAR.OHE Booking Number
  LCL.OHE_Booking_Number = PAR.OHE_Booking_Number;

  //?Update booking # from # entered on the screen, including blanks
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.OHE Booking Number = DB1.OHE Booking Number
  LCL.OHE_Booking_Number = DB1.OHE_Booking_Number;

  ENDIF;

  //?Update container # from # entered on the screen, including blanks
  CASE;

  // IF DB1.OHE Container Number NE PAR.Container Number
  IF DB1.OHE_Container_Number <> PAR.Container_Number;

  // LCL.OHE Container Number = PAR.Container Number
  LCL.OHE_Container_Number = PAR.Container_Number;

  //?Update container # from # entered on the screen, including blanks
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.OHE Container Number = DB1.OHE Container Number
  LCL.OHE_Container_Number = DB1.OHE_Container_Number;

  ENDIF;

  //?R15161 DN 07/17/19-Replaced Voyage with OHE Voyage/Flight.
  EXECUTE FUNCTION(CHG Existing OHE       CH) TYPE(CHGOBJ) FILE(PMAMREP)          AC1816935;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Load_ID);
  PARAMETER(DB1.Stop_Drop_Sequence_Number);
  PARAMETER(PAR.Shipping_Line);
  PARAMETER(PAR.Port_Delv_Terminal);
  PARAMETER(PAR.USR_City_25);
  PARAMETER(PAR.Vessel_Name);
  PARAMETER(PAR.OHE_Voyage_Flight);
  PARAMETER(LCL.OHE_Booking_Number);
  PARAMETER(PAR.Discharge_Port);
  PARAMETER(PAR.Sail_Date);
  PARAMETER(DB1.OHE_Port_Cut_Date);
  PARAMETER(PAR.OHE_Arrival_Date);
  PARAMETER(DB1.OHE_Late_Delivery_Code);
  PARAMETER(PAR.Ship_Status);
  PARAMETER(LCL.OHE_Container_Number);
  PARAMETER(DB1.OHE_Comment_1);
  PARAMETER(DB1.OHE_Comment_2);
  PARAMETER(DB1.OHE_Unused_Number_1_11_0);
  PARAMETER(DB1.OHE_Unused_Number_2_11_0);
  PARAMETER(DB1.OHE_Unused_Number_3_11_0);
  PARAMETER(DB1.OHE_Unused_Number_4_11_0);
  PARAMETER(DB1.OHE_HPB_RIN_Equiv_Value);
  PARAMETER(DB1.OHE_HPB_RIN_Price);
  PARAMETER(DB1.Transload_Terminal_Fees);
  PARAMETER(DB1.OHE_Est_Arrv_at_Dest_Date);
  PARAMETER(DB1.OHE_Backhaul_ETA_RtrnDate);
  PARAMETER(DB1.OHE_Port_Pier_Paid_Date);
  PARAMETER(DB1.OHE_Actual_Ship_Date);
  PARAMETER(DB1.OHE_Carrier_SCAC_Code);
  PARAMETER(DB1.OHE_Spot_Buy);
  PARAMETER(DB1.OHE_PO_ACK_Flag);
  PARAMETER(DB1.OHE_Override_Type_Code);
  PARAMETER(DB1.OHE_Backhaul_Status);
  PARAMETER(DB1.OHE_Backhaul_ETA_AM_PM);
  PARAMETER(PAR.OHE_Load_Haul_Type);
  PARAMETER(DB1.OHE_Backhaul_Carrier_Code);
  PARAMETER(DB1.OHE_Bookings_Confirmed);
  PARAMETER(DB1.OHE_EDI_Error_Reasons);
  PARAMETER(DB1.OHE_EDI_Error_Reasons_2);
  PARAMETER(DB1.HPB_COA_Batch_Number);
  PARAMETER(DB1.Delivery_P_O_Number);
  PARAMETER(DB1.OHE_Intended_for_ExportCC);
  PARAMETER(DB1.OHE_EDI_943_Action);
  PARAMETER(DB1.OHE_EDI_944_Action);
  PARAMETER(DB1.OHE_EDI_940_Action);
  PARAMETER(DB1.OHE_EDI_945_Action);
  PARAMETER(DB1.OHE_EDI_856_Action);
  PARAMETER(DB1.OHE_EDI_824_Action);
  PARAMETER(DB1.OHE_Transload_Seal_Nbr);
  PARAMETER(DB1.OHE_Abs_Rate_Override_Rsn);
  PARAMETER(DB1.OHE_Appt_Confirmation_#);
  PARAMETER(DB1.OHE_Backhaul_Container#);
  PARAMETER(DB1.OHE_Backhaul_Chassis_#);
  PARAMETER(DB1.OHE_Transload_Container#);
  PARAMETER(DB1.OHE_Pier_Pass_Invoice);
  PARAMETER(DB1.OHE_Carrier_Nm);
  PARAMETER(DB1.OHE_Appt_Confirmation_Nm);
  PARAMETER(DB1.OHE_Backhaul_Comment);
  PARAMETER(DB1.Letter_of_Credit_Number);
  PARAMETER(DB1.OHE_Backhaul_Return_to_Co);
  PARAMETER(DB1.LD_Stop_Drop);
  PARAMETER(DB1.OHE_Unused_Number_3_0);
  PARAMETER(DB1.OHE_Pier_Pass_Fee_Amount);
  PARAMETER(DB1.OHE_Port_Check_Fee_Amount);
  PARAMETER(DB1.OHE_Port_Cut_Time);
  PARAMETER(DB1.OHE_Backhaul_Truck_Number);
  PARAMETER(DB1.OHE_Load_Sched_Seq_Num);
  PARAMETER(DB1.Original_Appointment_Date);
  PARAMETER(DB1.Original_Appointment_Time);
  PARAMETER(DB1.OHE_PowerPro_Load#_Outbnd);
  PARAMETER(DB1.OHE_PowerPro_Load#_Bckhl);
  PARAMETER(DB1.OHE_Unused_Numeric_9_0_3);
  PARAMETER(DB1.OHE_Orig_ABS_Freight_Rate);
  PARAMETER(DB1.OHE_Genset_Number);
  PARAMETER(DB1.OHE_Email_BOL_Sent);
  PARAMETER(DB1.OHE_EDI_Order_Automated);
  PARAMETER(DB1.OHE_EDI_601_Action);
  PARAMETER(DB1.OHE_Unused_Status_4);
  PARAMETER(DB1.OHE_Unused_Text_1);
  PARAMETER(DB1.OHE_Unused_Text_2);
  PARAMETER(DB1.OHE_Customer_Vendor_f_PO);
  PARAMETER(DB1.OHE_EDI_824_AES_ITN_#);
  PARAMETER(DB1.OHE_Unused_Text_5);
  PARAMETER(DB1.OHE_Unused_Date_1);
  PARAMETER(DB1.OHE_Unused_Date_2);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

   // DB1.Job Name = JOB.*PROGRAM
   DB1.Job_Name = JOB.*PROGRAM;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

  }

  ENDIF;

 }

 CASE;

 // IF PAR.Carrier Code NE PAR.Carrier Code Usr
 IF PAR.Carrier_Code <> PAR.Carrier_Code_Usr;

 // LCL.Load Confirmation Fax Sts = CND.Not Entered
 LCL.Load_Confirmation_Fax_Sts = *BLANK;

 // LCL.Load Confirmed Contact = CND.Blank
 LCL.Load_Confirmed_Contact = *BLANK;

 // LCL.Load Confirmation Time = CND.Not Entered
 LCL.Load_Confirmation_Time = *ZERO;

 // LCL.Load Confirmed Sts = CND.blank
 LCL.Load_Confirmed_Sts = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Load Confirmation Fax Sts = PAR.Load Confirmation Fax Sts
 LCL.Load_Confirmation_Fax_Sts = PAR.Load_Confirmation_Fax_Sts;

 // LCL.Load Confirmed Contact = PAR.Load Confirmed Contact
 LCL.Load_Confirmed_Contact = PAR.Load_Confirmed_Contact;

 // LCL.Load Confirmation Time = PAR.Load Confirmation Time
 LCL.Load_Confirmation_Time = PAR.Load_Confirmation_Time;

 // LCL.Load Confirmed Sts = PAR.Load Confirmed Sts
 LCL.Load_Confirmed_Sts = PAR.Load_Confirmed_Sts;

 ENDIF;

 //?** Re-Calculate the total load miles using the updated sail port
 //?** city. Update the load header.
 //?** Total Load Miles will be zeros if any leg of the journey
 //?** is missing a Miles Between Cities record.
 //?** Include Override Total Load Miles. If entered, they will
 //?** take precedence
 // Call program CLC Total Load Miles   XF.
 CALL PROGRAM(CLC Total Load Miles   XF) ('PDW3XFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(WRK.Total_Load_Miles);
 PARAMETER(WRK.Override_Total_Load_Miles);

 // Call program CHG Total Load Miles   XF.
 CALL PROGRAM(CHG Total Load Miles   XF) ('PMFSXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(WRK.Total_Load_Miles);
 PARAMETER(WRK.Override_Total_Load_Miles);

 // Call program CLC Deadline Date/Time XF.
 CALL PROGRAM(CLC Deadline Date/Time XF) ('PMP9XFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Deadline_Departure_Date);
 PARAMETER(LCL.Deadline_Departure_Time);
 PARAMETER(LCL.Requested_Delivery_Date);

 EXECUTE FUNCTION(CHG Deadline Dep D/T   CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1493670;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Deadline_Departure_Date);
 PARAMETER(LCL.Deadline_Departure_Time);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 EXECUTE FUNCTION(CHG Deadline Date/Time RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1496989;
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Deadline_Departure_Date);
 PARAMETER(LCL.Deadline_Departure_Time);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  QUIT;

  //?USER: Process Data record

  EXECUTE FUNCTION(CHG Deadline Date/Time CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1496963;
  PARAMETER(PAR.Load_ID);
  PARAMETER(DB1.Stop_Drop_Sequence_Number);
  PARAMETER(PAR.Deadline_Depart_DT_HDR);
  PARAMETER(PAR.Deadline_Depart_Time_HDR);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   //?USER: Processing after Data update

   EXECUTE FUNCTION(Upd Deadline Dte/Tme  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1648968;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Deadline_Depart_DT_HDR);
   PARAMETER(DB1.Deadline_Depart_Time_HDR);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(Chg Deadline Dte/Tme  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1648969;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Deadline_Depart_Date_LH);
    PARAMETER(PAR.Deadline_Depart_Time_LH);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

   }

  }

 }

 //?** Fax load confirmation to Ship Line &/or Carrier, if entered
 //?** Only fax confirmation if Carrier is assigned to the load
 CASE;

 // IF PAR.Carrier Code is entered
 IF PAR.Carrier_Code <> *BLANK;

 //?If carrier broker is blank, default broker
 CASE;

 // IF PAR.Carrier Broker is not entered
 IF PAR.Carrier_Broker = *BLANK;

 // PAR.Carrier Broker = PAR.Carrier Code
 PAR.Carrier_Broker = PAR.Carrier_Code;

 ENDIF;

 //?Update order header with changed carrier, flag to fax booking confirmation
 CASE;

 // IF PAR.Carrier Code Usr NE PAR.Carrier Code
 IF PAR.Carrier_Code_Usr <> PAR.Carrier_Code;

 EXECUTE FUNCTION(Chg Carrier           RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1206533;
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Load_ID);
 {
  //?USER: Initialize routine

  //?05/13/04 SLM PKTR01 Multi-Company - Function was changed
  //?                                   to remove Company RST or Pos
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Load Information   CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1197376;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Carrier_Code);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.Event_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // Call program TRG Order Hdr CHG Trig XT.
   CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Type_Sales);
   PARAMETER(DB1.AR_Customer_Number);
   PARAMETER(DB1.Ship_To_Customer);
   PARAMETER(DB1.Ship_To_Name);
   PARAMETER(DB1.Ship_To_Address_Line_1);
   PARAMETER(DB1.Ship_To_Address_Line_2);
   PARAMETER(DB1.Ship_To_Address_Line_3);
   PARAMETER(DB1.Ship_To_City);
   PARAMETER(DB1.Ship_To_State_Code);
   PARAMETER(DB1.Ship_To_Zip_Postal_Code);
   PARAMETER(DB1.Bill_to_Customer);
   PARAMETER(DB1.Bill_to_Name);
   PARAMETER(DB1.Bill_to_Address_Line_1);
   PARAMETER(DB1.Bill_to_Address_Line_2);
   PARAMETER(DB1.Bill_to_Address_Line_3);
   PARAMETER(DB1.Bill_to_City);
   PARAMETER(DB1.Bill_to_State_Code);
   PARAMETER(DB1.Bill_to_Zip_Postal_Code);
   PARAMETER(DB1.Customer_Purchase_Order_#);
   PARAMETER(DB1.Order_Date);
   PARAMETER(DB1.Requested_Ship_Date);
   PARAMETER(DB1.Actual_Shipped_Date);
   PARAMETER(DB1.Cancel_Date);
   PARAMETER(DB1.Terms_Code);
   PARAMETER(DB1.Special_Instructions);
   PARAMETER(DB1.Special_Instructions_2);
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Comment_Print_Acknowledge);
   PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
   PARAMETER(DB1.Comment_Print_Pick_Slip);
   PARAMETER(DB1.Comment_Print_Ship_Doc);
   PARAMETER(DB1.Reason_Code);
   PARAMETER(DB1.Order_in_Use);
   PARAMETER(DB1.Header_Status);
   PARAMETER(DB1.Header_Status_Last);
   PARAMETER(DB1.Order_Type_Print_Status);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.User_Original_Entry);
   PARAMETER(DB1.Date_of_Original_Entry);
   PARAMETER(DB1.Order_Value_Total);
   PARAMETER(DB1.Order_Weight_Total);
   PARAMETER(DB1.Credit_Hold);
   PARAMETER(DB1.Production_Hold);
   PARAMETER(DB1.New_Customer_Hold);
   PARAMETER(DB1.Requested_Delivery_Date);
   PARAMETER(DB1.Requested_Delivery_Time);
   PARAMETER(DB1.Accounts_Receiv_Ent_1);
   PARAMETER(DB1.Accounts_Receiv_Ent_2);
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
   PARAMETER(DB1.Rated_Freight);
   PARAMETER(DB1.LTL_Flag);
   PARAMETER(DB1.Price_Audit);
   PARAMETER(DB1.Price_Status);
   PARAMETER(DB1.Shipping_Method);
   PARAMETER(DB1.Export_Status);
   PARAMETER(DB1.Palletize);
   PARAMETER(DB1.Shrink_Wrap);
   PARAMETER(DB1.Slip_Sheet);
   PARAMETER(DB1.Age_Code);
   PARAMETER(DB1.Reefer_Temperature);
   PARAMETER(DB1.Load_Type);
   PARAMETER(DB1.Attach_to_Invoice_Number);
   PARAMETER(DB1.Load_Plan_Order);
   PARAMETER(DB1.Print_Pick_Slip);
   PARAMETER(DB1.Resell_Reference_Number);
   PARAMETER(DB1.Special_Comment_1);
   PARAMETER(DB1.Special_Comment_2);
   PARAMETER(DB1.Affect_Auto_Accruals);
   PARAMETER(DB1.Sales_Route_Code);
   PARAMETER(DB1.Manager_Level_Code);
   PARAMETER(DB1.VP_Level_Code);
   PARAMETER(DB1.Attach_to_Order_Number);
   PARAMETER(DB1.Reason_for_Price_Audit);
   PARAMETER(DB1.Invoice_Number);
   PARAMETER(DB1.Invoice_Suffix);
   PARAMETER(DB1.Invoice_Date);
   PARAMETER(DB1.Event_Code);
   PARAMETER(DB1.Trans_Contol_AS400_Plant);
   PARAMETER(DB1.Modified_Flag);
   PARAMETER(DB1.A_R_order_Value_Total);
   PARAMETER(DB1.Billing_Activity_Type);
   PARAMETER(DB1.Block_Order_Flag);
   PARAMETER(DB1.Order_Certification_Flag);
   PARAMETER(DB1.Invoice_Order_Value_Tot);
   PARAMETER(DB1.Process_Sts_for_3C);
   PARAMETER(DB1.Order_Conf_Fax_Sts);
   PARAMETER(DB1.Manifest_Fax_Sts);
   PARAMETER(DB1.Invoice_Fax_Sts);
   PARAMETER(DB1.Transfer_in_Storage_Ind);
   PARAMETER(DB1.Email_Cust_On_Order_Ship);
   PARAMETER(DB1.Order_Emailed);
   PARAMETER(DB1.Export_Docs_Go_w_Driver);
   PARAMETER(DB1.Shipping_Temp_Code_C_F);
   PARAMETER(DB1.Broker_Order_Status);
   PARAMETER(DB1.Air_Freight_Order);
   PARAMETER(DB1.Order_Requires_Review);
   PARAMETER(DB1.OH_Load_Plan_Ready);
   PARAMETER(DB1.Export_USDA_Approved);
   PARAMETER(DB1.HPB_Ship_to_Warehouse);
   PARAMETER(DB1.OH_TF_Exempt_Code);
   PARAMETER(DB1.OH_Appt_Confirmation_Dt);
   PARAMETER(DB1.JPN_Invoice_Issuance_Date);
   PARAMETER(DB1.Load_Actual_Shipped_Date);
   PARAMETER(DB1.Load_BOL_Complete_Date);
   PARAMETER(DB1.Load_Truck_Departure_Date);
   PARAMETER(DB1.Maximum_Gross_Weight);
   PARAMETER(DB1.Time_of_Original_Entry);
   PARAMETER(DB1.OH_Appt_Confirmation_Tm);
   PARAMETER(DB1.Load_BOL_Complete_Time);
   PARAMETER(DB1.Load_Truck_Departure_Time);
   PARAMETER(DB1.Act_Frt_Reference_Amount);
   PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
   PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
   PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
   PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
   PARAMETER(DB1.Claim_Number);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);

  }

 }

 ENDIF;

 //?** wrk.status-Y or N is to control faxing to PowerPro in the
 //?** case of a carrier change.
 // WRK.Status - Y or N = CND.yes
 WRK.Status_Y_or_N = 'Y';

 // WRK.Job Name CDE = JOB.*JOB
 WRK.Job_Name_CDE = JOB.*JOB;

 // Call program PMT Fax Load Confirmtn PV.
 CALL PROGRAM(PMT Fax Load Confirmtn PV) ('POICPVR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Transloader_Carrier_Code);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Shipping_Line_1_USR);
 PARAMETER(WRK.OHE_Carrier_SCAC_Code);
 PARAMETER(WRK.Status_Y_or_N);

 //?* Carrier Code = original carrier, Carrier Code usr = rcd.cc (changed)
 //?** If Fax to Carrier is "Y" then check SSI/PowerPro also
 CASE;

 // IF WRK.Status - Y or N is yes
 IF WRK.Status_Y_or_N = 'Y';

 //?** Only send to SSI if SSI download flag is set to Yes
 EXECUTE FUNCTION(RTV SSI Carrier flag   RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1904336;
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(WRK.SSI_Download_Flag);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?** Handle deletes for SSI Carriers
 CASE;

 // IF WRK.SSI Download Flag is Yes, Download to SSI
 IF WRK.SSI_Download_Flag = 'Y';

 EXECUTE FUNCTION(RTV SSI Fax'd Flag     RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1906598;
 PARAMETER(PAR.Load_ID);
 PARAMETER(WRK.Fax_Sent_to_SSI_Carrier);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?** Carrier is new or changed to SBD
 CASE;

 // IF WRK.Fax Sent to SSI Carrier is Not Fax'd to Carrier
 IF WRK.Fax_Sent_to_SSI_Carrier = *BLANK/'N';

 // WRK.SSI Add, Chg, Delete flag = CND.Add
 WRK.SSI_Add_Chg_Delete_flag = 00;

 // Call program BLD SSI Download       XF.
 CALL PROGRAM(BLD SSI Download       XF) ('PNPNXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(WRK.SSI_Add_Chg_Delete_flag);

 //?** Carrier is new or changed to SBD
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.SSI Add, Chg, Delete flag = CND.Change
 WRK.SSI_Add_Chg_Delete_flag = 04;

 // Call program BLD SSI Download       XF.
 CALL PROGRAM(BLD SSI Download       XF) ('PNPNXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(WRK.SSI_Add_Chg_Delete_flag);

 ENDIF;

 //?** Handle deletes for SSI Carriers
 // IF WRK.SSI Download Flag is No
 IF WRK.SSI_Download_Flag = 'N';

 // OR WRK.SSI Download Flag is Not Entered
 OR WRK.SSI_Download_Flag = *BLANK;

 //?** If old carrier is SBD, send a delete record to SSI
 //?** New/Changes for SBD will be sent from the Accept Screen
 EXECUTE FUNCTION(RTV SSI Carrier flag   RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1904336;
 PARAMETER(PAR.Carrier_Code_Usr);
 PARAMETER(WRK.SSI_Download_Flag);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?** Only send to SSI if SSI download flag is set to Yes
 CASE;

 // IF WRK.SSI Download Flag is Yes, Download to SSI
 IF WRK.SSI_Download_Flag = 'Y';

 //?** Only send "Delete" record if a fax was previously sent
 CASE;

 // IF WRK.Fax Sent to SSI Carrier is Yes, Fax'd to Carrier
 IF WRK.Fax_Sent_to_SSI_Carrier = 'Y';

 //?** Carrier was changed from SBD to someone else
 // WRK.SSI Add, Chg, Delete flag = CND.Delete
 WRK.SSI_Add_Chg_Delete_flag = 01;

 // Call program BLD SSI Download       XF.
 CALL PROGRAM(BLD SSI Download       XF) ('PNPNXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Carrier_Code_Usr);
 PARAMETER(WRK.SSI_Add_Chg_Delete_flag);

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?Update the original Assigned trailer if load has been re-assigned
 CASE;

 // IF PAR.Container Number usr 1 NE PAR.Trailer Id            USR
 IF ( PAR.Container_Number_usr_1 <> PAR.Trailer_Id_USR;

 // AND PAR.Container Number usr 1 NE WRK.Blank for 12          USR
 AND PAR.Container_Number_usr_1 <> WRK.Blank_for_12_USR );

 // OR PAR.Carrier Code NE PAR.Carrier Code Usr
 OR PAR.Carrier_Code <> PAR.Carrier_Code_Usr;

 //?IF trailer was changed, update original to Assigned = N
 EXECUTE FUNCTION(Rtv/Chg Orig Trailer   RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC1498579;
 PARAMETER(PAR.Carrier_Code_Usr);
 PARAMETER(PAR.Trailer_Id_USR);
 PARAMETER('N');
 PARAMETER('Y');
 {
  //?USER: Processing if Data record not found

  //?** Not an error if no record exists.       E001558
  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg PD Trailer         CH) TYPE(CHGOBJ) FILE(PDLYREP)          AC1496469;
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Trailer_Id);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Trailer_Type);
  PARAMETER(DB1.Seaboard_Owned_Status);
  PARAMETER(DB1.On_Yard_Status);
  PARAMETER(DB1.On_Yard_Date);
  PARAMETER(DB1.On_Yard_Time);
  PARAMETER(PAR.Assigned_Status);
  PARAMETER(PAR.Available_Status);
  PARAMETER(DB1.Not_Available_Reason_Code);
  PARAMETER(DB1.Comment_Line);
  PARAMETER(DB1.Status_Unused_1);
  PARAMETER(DB1.Status_Unused_2);
  PARAMETER(DB1.Status_Unused_3);
  PARAMETER(DB1.Status_Unused_4);
  PARAMETER(DB1.Status_Unused_5);
  PARAMETER(DB1.Date_Unused_1);
  PARAMETER(DB1.Date_Unused_2);
  PARAMETER(DB1.Date_Unused_3);
  PARAMETER(DB1.Date_Unused_4);
  PARAMETER(DB1.Date_Unused_5);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 ENDIF;

 //?Update the (new/changed) Trailer/Container if assigned
 CASE;

 // IF PAR.Container Number usr 1 NE WRK.Blank for 12          USR
 IF PAR.Container_Number_usr_1 <> WRK.Blank_for_12_USR;

 EXECUTE FUNCTION(Rtv/Chg Orig Trailer   RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC1498579;
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Container_Number_usr_1);
 PARAMETER('Y');
 PARAMETER('N');
 {
  //?USER: Processing if Data record not found

  //?** Not an error if no record exists.       E001558
  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg PD Trailer         CH) TYPE(CHGOBJ) FILE(PDLYREP)          AC1496469;
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Trailer_Id);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Trailer_Type);
  PARAMETER(DB1.Seaboard_Owned_Status);
  PARAMETER(DB1.On_Yard_Status);
  PARAMETER(DB1.On_Yard_Date);
  PARAMETER(DB1.On_Yard_Time);
  PARAMETER(PAR.Assigned_Status);
  PARAMETER(PAR.Available_Status);
  PARAMETER(DB1.Not_Available_Reason_Code);
  PARAMETER(DB1.Comment_Line);
  PARAMETER(DB1.Status_Unused_1);
  PARAMETER(DB1.Status_Unused_2);
  PARAMETER(DB1.Status_Unused_3);
  PARAMETER(DB1.Status_Unused_4);
  PARAMETER(DB1.Status_Unused_5);
  PARAMETER(DB1.Date_Unused_1);
  PARAMETER(DB1.Date_Unused_2);
  PARAMETER(DB1.Date_Unused_3);
  PARAMETER(DB1.Date_Unused_4);
  PARAMETER(DB1.Date_Unused_5);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 ENDIF;

 ENDIF;

}


// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(CHG LH, OHE, OH        CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC2083218;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.LTL_Flag);
PARAMETER(RCD.Load_Status);
PARAMETER(RCD.Reefer_Temperature);
PARAMETER(RCD.Seal_1);
PARAMETER(RCD.Seal_2);
PARAMETER(RCD.Seal_3);
PARAMETER(RCD.Total_Load_Order_Weight);
PARAMETER(RCD.Flat_Amount);
PARAMETER(RCD.Allocate_Pounds_Miles);
PARAMETER(RCD.Total_Stops);
PARAMETER(RCD.Container_Number_usr_1);
PARAMETER(RCD.Transloader_Carrier_Code);
PARAMETER(RCD.BOL_Time);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Truck_Size);
PARAMETER(RCD.Ld_Hdr_Ld_Dtl_Unused);
PARAMETER(RCD.Rated_Freight);
PARAMETER(RCD.Ship_Status);
PARAMETER(RCD.Load_Type);
PARAMETER(RCD.Number_Pallets_Received);
PARAMETER(RCD.Number_Pallets_Loaded);
PARAMETER(RCD.Load_Carrier_Pay_Amt);
PARAMETER(RCD.Estimated_Arrival_Time);
PARAMETER(RCD.Actual_Arrival_Date);
PARAMETER(RCD.Actual_Arrival_Time);
PARAMETER(RCD.Trailer_IN_Weight);
PARAMETER(RCD.Trailer_OUT_Weight);
PARAMETER(RCD.Actual_Departure_Date);
PARAMETER(RCD.Departure_Time);
PARAMETER(RCD.Schedule_Sequence_Number);
PARAMETER(RCD.Product_Temperature);
PARAMETER(RCD.Number_Spacers_Loaded);
PARAMETER(RCD.Car_Veh_Initials);
PARAMETER(RCD.Total_Load_Miles);
PARAMETER(RCD.Recorder_ID);
PARAMETER(RCD.Ship_From_Warehouse);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(RCD.Gross_Weight);
PARAMETER(RCD.Carrier_Broker);
PARAMETER(RCD.Export_Status);
PARAMETER(RCD.Actual_Ship_Date);
PARAMETER(RCD.On_Time_Y_N);
PARAMETER(RCD.Truck_Ready_Date);
PARAMETER(RCD.Truck_Ready_Time);
PARAMETER(RCD.Spotted_Date);
PARAMETER(RCD.Spotted_Time);
PARAMETER(RCD.Load_Finished_Date);
PARAMETER(RCD.Load_Finished_Time);
PARAMETER(RCD.BOL_Complete_Date);
PARAMETER(RCD.BOL_Complete_Time);
PARAMETER(RCD.BOL_Received_Date);
PARAMETER(RCD.BOL_Received_Time);
PARAMETER(RCD.Truck_Departure_Date);
PARAMETER(RCD.Truck_Departure_Time);
PARAMETER(RCD.Adjusted_Departure_Date);
PARAMETER(RCD.Adjusted_Departure_Time);
PARAMETER(RCD.Date_In);
PARAMETER(RCD.Time_In);
PARAMETER(RCD.Date_Out);
PARAMETER(RCD.Time_Out);
PARAMETER(RCD.Load_Total_Freight);
PARAMETER(RCD.Scheduled_Delivery_Date);
PARAMETER(RCD.LH_Unused_Sts);
PARAMETER(RCD.LH_Carrier_Payment_Sts);
PARAMETER(RCD.Bring_Back_Miles);
PARAMETER(RCD.Requested_Delivery_Date);
PARAMETER(RCD.Load_Acceptance_Flag);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.On_Yard_Date);
PARAMETER(RCD.On_Yard_Time);
PARAMETER(RCD.Deadline_Departure_Date);
PARAMETER(RCD.Deadline_Departure_Time);
PARAMETER(RCD.Load_Held_Over);
PARAMETER(RCD.Load_Held_Over_Reason);
PARAMETER(RCD.Load_Held_Over_Rsn_Cmt);
PARAMETER(RCD.Ocean_BOL_Number);
PARAMETER(RCD.Express_Mail_Number);
PARAMETER(RCD.Express_Mail_Date);
PARAMETER(RCD.Load_Shag_Flag);
PARAMETER(RCD.Load_Wash_Flag);
PARAMETER(RCD.Product_Complete_Date);
PARAMETER(RCD.Product_Complete_Time);
PARAMETER(RCD.Pallets_Loaded);
PARAMETER(RCD.Avg_Pallet_Tare);
PARAMETER(RCD.Tot_Pallet_Tare);
PARAMETER(RCD.Load_Confirmed_Sts);
PARAMETER(RCD.Load_Confirmed_Contact);
PARAMETER(RCD.Load_Confirmation_Time);
PARAMETER(RCD.Load_Door_1);
PARAMETER(RCD.Override_Total_Load_Miles);
PARAMETER(RCD.Load_Door_2);
PARAMETER(RCD.Partial_Load);
PARAMETER(RCD.Load_Confirmation_Fax_Sts);
PARAMETER(RCD.Export_Load_USDA_OK);
PARAMETER(RCD.Late_Delivery_Email_Flag);
PARAMETER(RCD.Load_Actual_Freight);
PARAMETER(RCD.Hide_on_WW_Load_Sts);
PARAMETER(RCD.Late_Billing_Email_Flag);
PARAMETER(RCD.Shipping_Temp_C_F_txt);
PARAMETER(RCD.LH_Held_Over_Rsn_Cmt);
PARAMETER(RCD.Multi_Company_Load);
PARAMETER(RCD.Fax_Sent_to_SSI_Carrier);
PARAMETER(RCD.Schedule_Pos_Load_Grade);
PARAMETER(RCD.LH_Power_Only_Load);
PARAMETER(RCD.MG_Created_Load);
PARAMETER(RCD.LH_Unused_Sts_5);
PARAMETER(RCD.Load_U_M);
PARAMETER(RCD.TPM_Shipment_Status);
PARAMETER(RCD.LH_Unused_Sts_8);
PARAMETER(RCD.LH_On_Time_Reason_Code);
PARAMETER(RCD.LH_Held_Over_Reason);
PARAMETER(RCD.LH_Carrier_Paid_Dte);
PARAMETER(RCD.LH_Carrier_Paid_Time);
PARAMETER(RCD.LH_Last_Combo_Prod_Date);
PARAMETER(RCD.LH_Last_Combo_Prod_Time);
PARAMETER(RCD.LPT_Load_Plan_Start_Dt);
PARAMETER(RCD.LPT_Load_Plan_Start_Tm);
PARAMETER(RCD.TPM_Planned_Ship_Date);
PARAMETER(RCD.LH_Unused_Time_4);
PARAMETER(RCD.LH_Unused_Date_5);
PARAMETER(RCD.LH_Unused_Time_5);
PARAMETER(RCD.LH_Unused_Date_6);
PARAMETER(RCD.LH_Unused_Time_6);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(CTL.OHE_City);
PARAMETER(CTL.OHE_Load_Haul_Type);
PARAMETER(PAR.OHE_Arrival_Date);
PARAMETER(CTL.Shipping_Line);
PARAMETER(CTL.Delivery_Terminal_USR);
PARAMETER(1);
PARAMETER(RCD.Load_ID);
PARAMETER(CTL.Company);
PARAMETER(1);
PARAMETER(RCD.OHE_Booking_Number_USR);
PARAMETER(RCD.Container_Number_usr_1);
PARAMETER(RCD.Trailer_Id);
PARAMETER(RCD.Carrier_Code_Usr);
PARAMETER(CTL.OHE_Discharge_Port_Airprt);
PARAMETER(PAR.OHE_Sail_Flight_Date);
PARAMETER(CTL.OHE_Vessel_Airline);
PARAMETER(CTL.OHE_Voyage_Flight);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing after Data update

 //?R15161 DN 07/17/19-Replaced Voyage with OHE Voyage/Flight &
 //?  Booking Number with OHE Booking Number.
 EXECUTE FUNCTION(RTV Chg Bkg by Load    RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2082411;
 PARAMETER(PAR.Order_Number_1_usr);
 PARAMETER(PAR.Load_ID_USR);
 PARAMETER(PAR.OHE_Voyage_Flight);
 PARAMETER(PAR.OHE_Booking_Number);
 PARAMETER(PAR.Shipping_Line_1_USR);
 PARAMETER(PAR.Delivery_Terminal_USR);
 PARAMETER(PAR.OHE_Vessel_Airline);
 PARAMETER(PAR.OHE_Sail_Flight_Date);
 PARAMETER(PAR.OHE_Discharge_Port_Airprt);
 PARAMETER(PAR.Container_Number_usr_1);
 PARAMETER(PAR.Ship_Status);
 PARAMETER(PAR.USR_City_25);
 PARAMETER(PAR.OHE_Load_Haul_Type);
 PARAMETER(PAR.OHE_Arrival_Date);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  //?Update export order header extension record
  CASE;

  // IF DB1.Load ID EQ PAR.Load ID
  IF DB1.Load_ID = PAR.Load_ID;

  //?R15161 DN 07/17/19-Replaced Booking Number w/ OHE Booking Number.
  //?Update booking # from # entered on the screen, including blanks
  CASE;

  // IF DB1.OHE Booking Number NE PAR.OHE Booking Number
  IF DB1.OHE_Booking_Number <> PAR.OHE_Booking_Number;

  // LCL.OHE Booking Number = PAR.OHE Booking Number
  LCL.OHE_Booking_Number = PAR.OHE_Booking_Number;

  //?Update booking # from # entered on the screen, including blanks
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.OHE Booking Number = DB1.OHE Booking Number
  LCL.OHE_Booking_Number = DB1.OHE_Booking_Number;

  ENDIF;

  //?Update container # from # entered on the screen, including blanks
  CASE;

  // IF DB1.OHE Container Number NE PAR.Container Number
  IF DB1.OHE_Container_Number <> PAR.Container_Number;

  // LCL.OHE Container Number = PAR.Container Number
  LCL.OHE_Container_Number = PAR.Container_Number;

  //?Update container # from # entered on the screen, including blanks
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.OHE Container Number = DB1.OHE Container Number
  LCL.OHE_Container_Number = DB1.OHE_Container_Number;

  ENDIF;

  //?R15161 DN 07/17/19-Replaced Voyage with OHE Voyage/Flight.
  EXECUTE FUNCTION(CHG Existing OHE       CH) TYPE(CHGOBJ) FILE(PMAMREP)          AC1816935;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Load_ID);
  PARAMETER(DB1.Stop_Drop_Sequence_Number);
  PARAMETER(PAR.Shipping_Line);
  PARAMETER(PAR.Port_Delv_Terminal);
  PARAMETER(PAR.USR_City_25);
  PARAMETER(PAR.Vessel_Name);
  PARAMETER(PAR.OHE_Voyage_Flight);
  PARAMETER(LCL.OHE_Booking_Number);
  PARAMETER(PAR.Discharge_Port);
  PARAMETER(PAR.Sail_Date);
  PARAMETER(DB1.OHE_Port_Cut_Date);
  PARAMETER(PAR.OHE_Arrival_Date);
  PARAMETER(DB1.OHE_Late_Delivery_Code);
  PARAMETER(PAR.Ship_Status);
  PARAMETER(LCL.OHE_Container_Number);
  PARAMETER(DB1.OHE_Comment_1);
  PARAMETER(DB1.OHE_Comment_2);
  PARAMETER(DB1.OHE_Unused_Number_1_11_0);
  PARAMETER(DB1.OHE_Unused_Number_2_11_0);
  PARAMETER(DB1.OHE_Unused_Number_3_11_0);
  PARAMETER(DB1.OHE_Unused_Number_4_11_0);
  PARAMETER(DB1.OHE_HPB_RIN_Equiv_Value);
  PARAMETER(DB1.OHE_HPB_RIN_Price);
  PARAMETER(DB1.Transload_Terminal_Fees);
  PARAMETER(DB1.OHE_Est_Arrv_at_Dest_Date);
  PARAMETER(DB1.OHE_Backhaul_ETA_RtrnDate);
  PARAMETER(DB1.OHE_Port_Pier_Paid_Date);
  PARAMETER(DB1.OHE_Actual_Ship_Date);
  PARAMETER(DB1.OHE_Carrier_SCAC_Code);
  PARAMETER(DB1.OHE_Spot_Buy);
  PARAMETER(DB1.OHE_PO_ACK_Flag);
  PARAMETER(DB1.OHE_Override_Type_Code);
  PARAMETER(DB1.OHE_Backhaul_Status);
  PARAMETER(DB1.OHE_Backhaul_ETA_AM_PM);
  PARAMETER(PAR.OHE_Load_Haul_Type);
  PARAMETER(DB1.OHE_Backhaul_Carrier_Code);
  PARAMETER(DB1.OHE_Bookings_Confirmed);
  PARAMETER(DB1.OHE_EDI_Error_Reasons);
  PARAMETER(DB1.OHE_EDI_Error_Reasons_2);
  PARAMETER(DB1.HPB_COA_Batch_Number);
  PARAMETER(DB1.Delivery_P_O_Number);
  PARAMETER(DB1.OHE_Intended_for_ExportCC);
  PARAMETER(DB1.OHE_EDI_943_Action);
  PARAMETER(DB1.OHE_EDI_944_Action);
  PARAMETER(DB1.OHE_EDI_940_Action);
  PARAMETER(DB1.OHE_EDI_945_Action);
  PARAMETER(DB1.OHE_EDI_856_Action);
  PARAMETER(DB1.OHE_EDI_824_Action);
  PARAMETER(DB1.OHE_Transload_Seal_Nbr);
  PARAMETER(DB1.OHE_Abs_Rate_Override_Rsn);
  PARAMETER(DB1.OHE_Appt_Confirmation_#);
  PARAMETER(DB1.OHE_Backhaul_Container#);
  PARAMETER(DB1.OHE_Backhaul_Chassis_#);
  PARAMETER(DB1.OHE_Transload_Container#);
  PARAMETER(DB1.OHE_Pier_Pass_Invoice);
  PARAMETER(DB1.OHE_Carrier_Nm);
  PARAMETER(DB1.OHE_Appt_Confirmation_Nm);
  PARAMETER(DB1.OHE_Backhaul_Comment);
  PARAMETER(DB1.Letter_of_Credit_Number);
  PARAMETER(DB1.OHE_Backhaul_Return_to_Co);
  PARAMETER(DB1.LD_Stop_Drop);
  PARAMETER(DB1.OHE_Unused_Number_3_0);
  PARAMETER(DB1.OHE_Pier_Pass_Fee_Amount);
  PARAMETER(DB1.OHE_Port_Check_Fee_Amount);
  PARAMETER(DB1.OHE_Port_Cut_Time);
  PARAMETER(DB1.OHE_Backhaul_Truck_Number);
  PARAMETER(DB1.OHE_Load_Sched_Seq_Num);
  PARAMETER(DB1.Original_Appointment_Date);
  PARAMETER(DB1.Original_Appointment_Time);
  PARAMETER(DB1.OHE_PowerPro_Load#_Outbnd);
  PARAMETER(DB1.OHE_PowerPro_Load#_Bckhl);
  PARAMETER(DB1.OHE_Unused_Numeric_9_0_3);
  PARAMETER(DB1.OHE_Orig_ABS_Freight_Rate);
  PARAMETER(DB1.OHE_Genset_Number);
  PARAMETER(DB1.OHE_Email_BOL_Sent);
  PARAMETER(DB1.OHE_EDI_Order_Automated);
  PARAMETER(DB1.OHE_EDI_601_Action);
  PARAMETER(DB1.OHE_Unused_Status_4);
  PARAMETER(DB1.OHE_Unused_Text_1);
  PARAMETER(DB1.OHE_Unused_Text_2);
  PARAMETER(DB1.OHE_Customer_Vendor_f_PO);
  PARAMETER(DB1.OHE_EDI_824_AES_ITN_#);
  PARAMETER(DB1.OHE_Unused_Text_5);
  PARAMETER(DB1.OHE_Unused_Date_1);
  PARAMETER(DB1.OHE_Unused_Date_2);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

   // DB1.Job Name = JOB.*PROGRAM
   DB1.Job_Name = JOB.*PROGRAM;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

  }

  ENDIF;

 }

 CASE;

 // IF PAR.Carrier Code NE PAR.Carrier Code Usr
 IF PAR.Carrier_Code <> PAR.Carrier_Code_Usr;

 // LCL.Load Confirmation Fax Sts = CND.Not Entered
 LCL.Load_Confirmation_Fax_Sts = *BLANK;

 // LCL.Load Confirmed Contact = CND.Blank
 LCL.Load_Confirmed_Contact = *BLANK;

 // LCL.Load Confirmation Time = CND.Not Entered
 LCL.Load_Confirmation_Time = *ZERO;

 // LCL.Load Confirmed Sts = CND.blank
 LCL.Load_Confirmed_Sts = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Load Confirmation Fax Sts = PAR.Load Confirmation Fax Sts
 LCL.Load_Confirmation_Fax_Sts = PAR.Load_Confirmation_Fax_Sts;

 // LCL.Load Confirmed Contact = PAR.Load Confirmed Contact
 LCL.Load_Confirmed_Contact = PAR.Load_Confirmed_Contact;

 // LCL.Load Confirmation Time = PAR.Load Confirmation Time
 LCL.Load_Confirmation_Time = PAR.Load_Confirmation_Time;

 // LCL.Load Confirmed Sts = PAR.Load Confirmed Sts
 LCL.Load_Confirmed_Sts = PAR.Load_Confirmed_Sts;

 ENDIF;

 //?** Re-Calculate the total load miles using the updated sail port
 //?** city. Update the load header.
 //?** Total Load Miles will be zeros if any leg of the journey
 //?** is missing a Miles Between Cities record.
 //?** Include Override Total Load Miles. If entered, they will
 //?** take precedence
 // Call program CLC Total Load Miles   XF.
 CALL PROGRAM(CLC Total Load Miles   XF) ('PDW3XFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(WRK.Total_Load_Miles);
 PARAMETER(WRK.Override_Total_Load_Miles);

 // Call program CHG Total Load Miles   XF.
 CALL PROGRAM(CHG Total Load Miles   XF) ('PMFSXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(WRK.Total_Load_Miles);
 PARAMETER(WRK.Override_Total_Load_Miles);

 // Call program CLC Deadline Date/Time XF.
 CALL PROGRAM(CLC Deadline Date/Time XF) ('PMP9XFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Deadline_Departure_Date);
 PARAMETER(LCL.Deadline_Departure_Time);
 PARAMETER(LCL.Requested_Delivery_Date);

 EXECUTE FUNCTION(CHG Deadline Dep D/T   CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1493670;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Deadline_Departure_Date);
 PARAMETER(LCL.Deadline_Departure_Time);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 EXECUTE FUNCTION(CHG Deadline Date/Time RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1496989;
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Deadline_Departure_Date);
 PARAMETER(LCL.Deadline_Departure_Time);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  QUIT;

  //?USER: Process Data record

  EXECUTE FUNCTION(CHG Deadline Date/Time CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1496963;
  PARAMETER(PAR.Load_ID);
  PARAMETER(DB1.Stop_Drop_Sequence_Number);
  PARAMETER(PAR.Deadline_Depart_DT_HDR);
  PARAMETER(PAR.Deadline_Depart_Time_HDR);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   //?USER: Processing after Data update

   EXECUTE FUNCTION(Upd Deadline Dte/Tme  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1648968;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Deadline_Depart_DT_HDR);
   PARAMETER(DB1.Deadline_Depart_Time_HDR);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(Chg Deadline Dte/Tme  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1648969;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Deadline_Depart_Date_LH);
    PARAMETER(PAR.Deadline_Depart_Time_LH);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

   }

  }

 }

 //?** Fax load confirmation to Ship Line &/or Carrier, if entered
 //?** Only fax confirmation if Carrier is assigned to the load
 CASE;

 // IF PAR.Carrier Code is entered
 IF PAR.Carrier_Code <> *BLANK;

 //?If carrier broker is blank, default broker
 CASE;

 // IF PAR.Carrier Broker is not entered
 IF PAR.Carrier_Broker = *BLANK;

 // PAR.Carrier Broker = PAR.Carrier Code
 PAR.Carrier_Broker = PAR.Carrier_Code;

 ENDIF;

 //?Update order header with changed carrier, flag to fax booking confirmation
 CASE;

 // IF PAR.Carrier Code Usr NE PAR.Carrier Code
 IF PAR.Carrier_Code_Usr <> PAR.Carrier_Code;

 EXECUTE FUNCTION(Chg Carrier           RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1206533;
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Load_ID);
 {
  //?USER: Initialize routine

  //?05/13/04 SLM PKTR01 Multi-Company - Function was changed
  //?                                   to remove Company RST or Pos
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Load Information   CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1197376;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Carrier_Code);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.Event_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // Call program TRG Order Hdr CHG Trig XT.
   CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Type_Sales);
   PARAMETER(DB1.AR_Customer_Number);
   PARAMETER(DB1.Ship_To_Customer);
   PARAMETER(DB1.Ship_To_Name);
   PARAMETER(DB1.Ship_To_Address_Line_1);
   PARAMETER(DB1.Ship_To_Address_Line_2);
   PARAMETER(DB1.Ship_To_Address_Line_3);
   PARAMETER(DB1.Ship_To_City);
   PARAMETER(DB1.Ship_To_State_Code);
   PARAMETER(DB1.Ship_To_Zip_Postal_Code);
   PARAMETER(DB1.Bill_to_Customer);
   PARAMETER(DB1.Bill_to_Name);
   PARAMETER(DB1.Bill_to_Address_Line_1);
   PARAMETER(DB1.Bill_to_Address_Line_2);
   PARAMETER(DB1.Bill_to_Address_Line_3);
   PARAMETER(DB1.Bill_to_City);
   PARAMETER(DB1.Bill_to_State_Code);
   PARAMETER(DB1.Bill_to_Zip_Postal_Code);
   PARAMETER(DB1.Customer_Purchase_Order_#);
   PARAMETER(DB1.Order_Date);
   PARAMETER(DB1.Requested_Ship_Date);
   PARAMETER(DB1.Actual_Shipped_Date);
   PARAMETER(DB1.Cancel_Date);
   PARAMETER(DB1.Terms_Code);
   PARAMETER(DB1.Special_Instructions);
   PARAMETER(DB1.Special_Instructions_2);
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Comment_Print_Acknowledge);
   PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
   PARAMETER(DB1.Comment_Print_Pick_Slip);
   PARAMETER(DB1.Comment_Print_Ship_Doc);
   PARAMETER(DB1.Reason_Code);
   PARAMETER(DB1.Order_in_Use);
   PARAMETER(DB1.Header_Status);
   PARAMETER(DB1.Header_Status_Last);
   PARAMETER(DB1.Order_Type_Print_Status);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.User_Original_Entry);
   PARAMETER(DB1.Date_of_Original_Entry);
   PARAMETER(DB1.Order_Value_Total);
   PARAMETER(DB1.Order_Weight_Total);
   PARAMETER(DB1.Credit_Hold);
   PARAMETER(DB1.Production_Hold);
   PARAMETER(DB1.New_Customer_Hold);
   PARAMETER(DB1.Requested_Delivery_Date);
   PARAMETER(DB1.Requested_Delivery_Time);
   PARAMETER(DB1.Accounts_Receiv_Ent_1);
   PARAMETER(DB1.Accounts_Receiv_Ent_2);
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
   PARAMETER(DB1.Rated_Freight);
   PARAMETER(DB1.LTL_Flag);
   PARAMETER(DB1.Price_Audit);
   PARAMETER(DB1.Price_Status);
   PARAMETER(DB1.Shipping_Method);
   PARAMETER(DB1.Export_Status);
   PARAMETER(DB1.Palletize);
   PARAMETER(DB1.Shrink_Wrap);
   PARAMETER(DB1.Slip_Sheet);
   PARAMETER(DB1.Age_Code);
   PARAMETER(DB1.Reefer_Temperature);
   PARAMETER(DB1.Load_Type);
   PARAMETER(DB1.Attach_to_Invoice_Number);
   PARAMETER(DB1.Load_Plan_Order);
   PARAMETER(DB1.Print_Pick_Slip);
   PARAMETER(DB1.Resell_Reference_Number);
   PARAMETER(DB1.Special_Comment_1);
   PARAMETER(DB1.Special_Comment_2);
   PARAMETER(DB1.Affect_Auto_Accruals);
   PARAMETER(DB1.Sales_Route_Code);
   PARAMETER(DB1.Manager_Level_Code);
   PARAMETER(DB1.VP_Level_Code);
   PARAMETER(DB1.Attach_to_Order_Number);
   PARAMETER(DB1.Reason_for_Price_Audit);
   PARAMETER(DB1.Invoice_Number);
   PARAMETER(DB1.Invoice_Suffix);
   PARAMETER(DB1.Invoice_Date);
   PARAMETER(DB1.Event_Code);
   PARAMETER(DB1.Trans_Contol_AS400_Plant);
   PARAMETER(DB1.Modified_Flag);
   PARAMETER(DB1.A_R_order_Value_Total);
   PARAMETER(DB1.Billing_Activity_Type);
   PARAMETER(DB1.Block_Order_Flag);
   PARAMETER(DB1.Order_Certification_Flag);
   PARAMETER(DB1.Invoice_Order_Value_Tot);
   PARAMETER(DB1.Process_Sts_for_3C);
   PARAMETER(DB1.Order_Conf_Fax_Sts);
   PARAMETER(DB1.Manifest_Fax_Sts);
   PARAMETER(DB1.Invoice_Fax_Sts);
   PARAMETER(DB1.Transfer_in_Storage_Ind);
   PARAMETER(DB1.Email_Cust_On_Order_Ship);
   PARAMETER(DB1.Order_Emailed);
   PARAMETER(DB1.Export_Docs_Go_w_Driver);
   PARAMETER(DB1.Shipping_Temp_Code_C_F);
   PARAMETER(DB1.Broker_Order_Status);
   PARAMETER(DB1.Air_Freight_Order);
   PARAMETER(DB1.Order_Requires_Review);
   PARAMETER(DB1.OH_Load_Plan_Ready);
   PARAMETER(DB1.Export_USDA_Approved);
   PARAMETER(DB1.HPB_Ship_to_Warehouse);
   PARAMETER(DB1.OH_TF_Exempt_Code);
   PARAMETER(DB1.OH_Appt_Confirmation_Dt);
   PARAMETER(DB1.JPN_Invoice_Issuance_Date);
   PARAMETER(DB1.Load_Actual_Shipped_Date);
   PARAMETER(DB1.Load_BOL_Complete_Date);
   PARAMETER(DB1.Load_Truck_Departure_Date);
   PARAMETER(DB1.Maximum_Gross_Weight);
   PARAMETER(DB1.Time_of_Original_Entry);
   PARAMETER(DB1.OH_Appt_Confirmation_Tm);
   PARAMETER(DB1.Load_BOL_Complete_Time);
   PARAMETER(DB1.Load_Truck_Departure_Time);
   PARAMETER(DB1.Act_Frt_Reference_Amount);
   PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
   PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
   PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
   PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
   PARAMETER(DB1.Claim_Number);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);

  }

 }

 ENDIF;

 //?** wrk.status-Y or N is to control faxing to PowerPro in the
 //?** case of a carrier change.
 // WRK.Status - Y or N = CND.yes
 WRK.Status_Y_or_N = 'Y';

 // WRK.Job Name CDE = JOB.*JOB
 WRK.Job_Name_CDE = JOB.*JOB;

 // Call program PMT Fax Load Confirmtn PV.
 CALL PROGRAM(PMT Fax Load Confirmtn PV) ('POICPVR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Transloader_Carrier_Code);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Shipping_Line_1_USR);
 PARAMETER(WRK.OHE_Carrier_SCAC_Code);
 PARAMETER(WRK.Status_Y_or_N);

 //?* Carrier Code = original carrier, Carrier Code usr = rcd.cc (changed)
 //?** If Fax to Carrier is "Y" then check SSI/PowerPro also
 CASE;

 // IF WRK.Status - Y or N is yes
 IF WRK.Status_Y_or_N = 'Y';

 //?** Only send to SSI if SSI download flag is set to Yes
 EXECUTE FUNCTION(RTV SSI Carrier flag   RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1904336;
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(WRK.SSI_Download_Flag);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?** Handle deletes for SSI Carriers
 CASE;

 // IF WRK.SSI Download Flag is Yes, Download to SSI
 IF WRK.SSI_Download_Flag = 'Y';

 EXECUTE FUNCTION(RTV SSI Fax'd Flag     RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1906598;
 PARAMETER(PAR.Load_ID);
 PARAMETER(WRK.Fax_Sent_to_SSI_Carrier);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?** Carrier is new or changed to SBD
 CASE;

 // IF WRK.Fax Sent to SSI Carrier is Not Fax'd to Carrier
 IF WRK.Fax_Sent_to_SSI_Carrier = *BLANK/'N';

 // WRK.SSI Add, Chg, Delete flag = CND.Add
 WRK.SSI_Add_Chg_Delete_flag = 00;

 // Call program BLD SSI Download       XF.
 CALL PROGRAM(BLD SSI Download       XF) ('PNPNXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(WRK.SSI_Add_Chg_Delete_flag);

 //?** Carrier is new or changed to SBD
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.SSI Add, Chg, Delete flag = CND.Change
 WRK.SSI_Add_Chg_Delete_flag = 04;

 // Call program BLD SSI Download       XF.
 CALL PROGRAM(BLD SSI Download       XF) ('PNPNXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(WRK.SSI_Add_Chg_Delete_flag);

 ENDIF;

 //?** Handle deletes for SSI Carriers
 // IF WRK.SSI Download Flag is No
 IF WRK.SSI_Download_Flag = 'N';

 // OR WRK.SSI Download Flag is Not Entered
 OR WRK.SSI_Download_Flag = *BLANK;

 //?** If old carrier is SBD, send a delete record to SSI
 //?** New/Changes for SBD will be sent from the Accept Screen
 EXECUTE FUNCTION(RTV SSI Carrier flag   RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1904336;
 PARAMETER(PAR.Carrier_Code_Usr);
 PARAMETER(WRK.SSI_Download_Flag);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?** Only send to SSI if SSI download flag is set to Yes
 CASE;

 // IF WRK.SSI Download Flag is Yes, Download to SSI
 IF WRK.SSI_Download_Flag = 'Y';

 //?** Only send "Delete" record if a fax was previously sent
 CASE;

 // IF WRK.Fax Sent to SSI Carrier is Yes, Fax'd to Carrier
 IF WRK.Fax_Sent_to_SSI_Carrier = 'Y';

 //?** Carrier was changed from SBD to someone else
 // WRK.SSI Add, Chg, Delete flag = CND.Delete
 WRK.SSI_Add_Chg_Delete_flag = 01;

 // Call program BLD SSI Download       XF.
 CALL PROGRAM(BLD SSI Download       XF) ('PNPNXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Carrier_Code_Usr);
 PARAMETER(WRK.SSI_Add_Chg_Delete_flag);

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?Update the original Assigned trailer if load has been re-assigned
 CASE;

 // IF PAR.Container Number usr 1 NE PAR.Trailer Id            USR
 IF ( PAR.Container_Number_usr_1 <> PAR.Trailer_Id_USR;

 // AND PAR.Container Number usr 1 NE WRK.Blank for 12          USR
 AND PAR.Container_Number_usr_1 <> WRK.Blank_for_12_USR );

 // OR PAR.Carrier Code NE PAR.Carrier Code Usr
 OR PAR.Carrier_Code <> PAR.Carrier_Code_Usr;

 //?IF trailer was changed, update original to Assigned = N
 EXECUTE FUNCTION(Rtv/Chg Orig Trailer   RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC1498579;
 PARAMETER(PAR.Carrier_Code_Usr);
 PARAMETER(PAR.Trailer_Id_USR);
 PARAMETER('N');
 PARAMETER('Y');
 {
  //?USER: Processing if Data record not found

  //?** Not an error if no record exists.       E001558
  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg PD Trailer         CH) TYPE(CHGOBJ) FILE(PDLYREP)          AC1496469;
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Trailer_Id);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Trailer_Type);
  PARAMETER(DB1.Seaboard_Owned_Status);
  PARAMETER(DB1.On_Yard_Status);
  PARAMETER(DB1.On_Yard_Date);
  PARAMETER(DB1.On_Yard_Time);
  PARAMETER(PAR.Assigned_Status);
  PARAMETER(PAR.Available_Status);
  PARAMETER(DB1.Not_Available_Reason_Code);
  PARAMETER(DB1.Comment_Line);
  PARAMETER(DB1.Status_Unused_1);
  PARAMETER(DB1.Status_Unused_2);
  PARAMETER(DB1.Status_Unused_3);
  PARAMETER(DB1.Status_Unused_4);
  PARAMETER(DB1.Status_Unused_5);
  PARAMETER(DB1.Date_Unused_1);
  PARAMETER(DB1.Date_Unused_2);
  PARAMETER(DB1.Date_Unused_3);
  PARAMETER(DB1.Date_Unused_4);
  PARAMETER(DB1.Date_Unused_5);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 ENDIF;

 //?Update the (new/changed) Trailer/Container if assigned
 CASE;

 // IF PAR.Container Number usr 1 NE WRK.Blank for 12          USR
 IF PAR.Container_Number_usr_1 <> WRK.Blank_for_12_USR;

 EXECUTE FUNCTION(Rtv/Chg Orig Trailer   RT) TYPE(RTVOBJ) FILE(PDLYREP)          AC1498579;
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Container_Number_usr_1);
 PARAMETER('Y');
 PARAMETER('N');
 {
  //?USER: Processing if Data record not found

  //?** Not an error if no record exists.       E001558
  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg PD Trailer         CH) TYPE(CHGOBJ) FILE(PDLYREP)          AC1496469;
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Trailer_Id);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Trailer_Type);
  PARAMETER(DB1.Seaboard_Owned_Status);
  PARAMETER(DB1.On_Yard_Status);
  PARAMETER(DB1.On_Yard_Date);
  PARAMETER(DB1.On_Yard_Time);
  PARAMETER(PAR.Assigned_Status);
  PARAMETER(PAR.Available_Status);
  PARAMETER(DB1.Not_Available_Reason_Code);
  PARAMETER(DB1.Comment_Line);
  PARAMETER(DB1.Status_Unused_1);
  PARAMETER(DB1.Status_Unused_2);
  PARAMETER(DB1.Status_Unused_3);
  PARAMETER(DB1.Status_Unused_4);
  PARAMETER(DB1.Status_Unused_5);
  PARAMETER(DB1.Date_Unused_1);
  PARAMETER(DB1.Date_Unused_2);
  PARAMETER(DB1.Date_Unused_3);
  PARAMETER(DB1.Date_Unused_4);
  PARAMETER(DB1.Date_Unused_5);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 ENDIF;

 ENDIF;

}


//?USER: Extra processing after DBF update

// RCD.Carrier Code Usr = RCD.Carrier Code
RCD.Carrier_Code_Usr = RCD.Carrier_Code;

// PAR.Record Activity Sts USR = CND.Add
PAR.Record_Activity_Sts_USR = 'A';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?USER: Process command keys

//?R15161 DN 08/09/19-Commented Out. Does Not Work Nor PBL2UPC is not in PROD
