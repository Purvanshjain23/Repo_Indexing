// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPWKPFR
// ?Date: 14.08.2025 Time: 12:06:43
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

CASE;

// IF PAR.Update Exception Status is yes
IF PAR.Update_Exception_Status = 'Y';

// WRK.Description Usr - 50 = CON.*************  Update to
WRK.Description_Usr_50 = '*************  Update to';

// WRK.Description Usr - 50 = CONCAT(WRK.Description Usr - 50,CON.Ord Hdr, Ord Dtl TFExempt,CON.1)
WRK.Description_Usr_50 = WRK.Description_Usr_50 + 'Ord Hdr, Ord Dtl TFExempt' (1);

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Description Usr - 50 = CON.*BLANK
WRK.Description_Usr_50 = *BLANK;

ENDIF;

//?USER: Record selection processing

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// WRK.From Date             USR = CON.1060101
WRK.From_Date_USR = 1060101;

// WRK.To Date               USR = CON.1061231
WRK.To_Date_USR = 1061231;

//?header is a PC, billing activity type no credit memo
//?Rec sel: date ranage, pc, HDR STS avail &conv
CASE;

// IF DB1.Billing Activity Type is Not Credit Memo
IF DB1.Billing_Activity_Type = '3'/'1'/'5'/'4';

// WRK.OH TF Exempt Code = CND.Pre-Commencement
WRK.OH_TF_Exempt_Code = 'PC';

//?non pc checking will not be view
CASE;

// IF DB1.OH TF Exempt Code NE WRK.OH TF Exempt Code
IF DB1.OH_TF_Exempt_Code <> WRK.OH_TF_Exempt_Code;

CASE;

// IF DB1.Header Status is Available
IF DB1.Header_Status = 'A';

// OR DB1.Header Status is Confirmed
OR DB1.Header_Status = 'R';

// OR DB1.Header Status is Complete
OR DB1.Header_Status = 'C';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?non pc checking will not be view
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Rec sel: date ranage, pc, HDR STS avail &conv
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF DB1.Actual Shipped Date GE WRK.From Date             USR
IF DB1.Actual_Shipped_Date >= WRK.From_Date_USR;

// AND DB1.Actual Shipped Date LE WRK.To Date               USR
AND DB1.Actual_Shipped_Date <= WRK.To_Date_USR;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Process top of page

// TOP.Description Usr - 50 = WRK.Description Usr - 50
TOP_Description_Usr_50 = WRK.Description_Usr_50;

//?USER: Print required level headings

// SUPPRESSED PRINT Company Number header format

// WRK.Count Records         USR = WRK.Count Records         USR + CON.1
WRK.Count_Records_USR = WRK.Count_Records_USR + 1;

// SUPPRESSED PRINT Order Number header format

// SUPPRESSED PRINT Order Date header format

//?USER: On print of detail format

EXECUTE FUNCTION(Rtv Customer TFEx     RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1747887;
PARAMETER(CUR.Ship_To_Customer);
PARAMETER(LCL.Customer_TF_Exempt_Code);
{
 //?USER: Initialize routine

 // PAR.Customer TF Exempt Code = WRK.BLANK
 PAR.Customer_TF_Exempt_Code = WRK.BLANK;

 //?USER: Processing if Data record not found

 // PAR.Customer TF Exempt Code = WRK.BLANK
 PAR.Customer_TF_Exempt_Code = WRK.BLANK;

 //?USER: Process Data record

 // PAR.Customer TF Exempt Code = DB1.Customer TF Exempt Code
 PAR.Customer_TF_Exempt_Code = DB1.Customer_TF_Exempt_Code;

}


// CUR.Customer TF Exempt Code = LCL.Customer TF Exempt Code
CUR.Customer_TF_Exempt_Code = LCL.Customer_TF_Exempt_Code;

// LCL.OH TF Exempt Code = CUR.OH TF Exempt Code
LCL.OH_TF_Exempt_Code = CUR.OH_TF_Exempt_Code;

//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : PRT ORDDTL TFEXEMPT   PO
EXECUTE FUNCTION(PRT ORDDTL TFEXEMPT   PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(LCL.OH_TF_Exempt_Code);
PARAMETER(LCL.Customer_TF_Exempt_Code);
PARAMETER(PAR.Update_Exception_Status);
{
 //?USER: Initialize routine

 // PAR.Customer TF Exempt Code = WRK.BLANK
 PAR.Customer_TF_Exempt_Code = WRK.BLANK;

 //?USER: Processing if Data record not found

 // PAR.Customer TF Exempt Code = WRK.BLANK
 PAR.Customer_TF_Exempt_Code = WRK.BLANK;

 //?USER: Process Data record

 // PAR.Customer TF Exempt Code = DB1.Customer TF Exempt Code
 PAR.Customer_TF_Exempt_Code = DB1.Customer_TF_Exempt_Code;

}


//?USER: Print required level totals

// SUPPRESSED PRINT Order Date totals format

NXT.Count_Records_USR = CNT();

CASE;

IF NEW Order_Number;
// CUR.Count Records         USR = WRK.Count Records         USR
CUR.Count_Records_USR = WRK.Count_Records_USR;

CASE;

// IF CUR.OH TF Exempt Code NE LCL.OH TF Exempt Code
IF CUR.OH_TF_Exempt_Code <> LCL.OH_TF_Exempt_Code;

// WRK.Upd/Del Sts USR = CND.Update
WRK.Upd_Del_Sts_USR = 'U';

ENDIF;

// CUR.OH TF Exempt Code = LCL.OH TF Exempt Code
CUR.OH_TF_Exempt_Code = LCL.OH_TF_Exempt_Code;

CASE;

// IF PAR.Update Exception Status is yes
IF PAR.Update_Exception_Status = 'Y';

EXECUTE FUNCTION(Chg TF Exempt         CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1750711;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(CUR.OH_TF_Exempt_Code);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

// Print Order Number totals format
PRINT Order Number totals format;

ENDIF;

// SUPPRESSED PRINT Company Number totals format

