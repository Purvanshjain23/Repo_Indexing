// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDL2PFR
// ?Date: 14.08.2025 Time: 12:04:05
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// LCL.Print Selections = CND.Yes
LCL.Print_Selections = 'Y';

// PAR.Application Code = CND.Accounts Receivable
PAR.Application_Code = 'A/R';

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER(PAR.Application_Code);
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


//?*** Determine Date Selection. ***
// PAR.From Date             USR = CVTVAR(PAR.From Date (alpha)     USR)
PAR.From_Date_USR = CVTVAR(PAR.From_Date_alpha_USR);

// PAR.To Date               USR = CVTVAR(PAR.To Date (alpha)       USR)
PAR.To_Date_USR = CVTVAR(PAR.To_Date_alpha_USR);

CASE;

// IF PAR.To Date               USR is Zero
IF PAR.To_Date_USR = *ZERO;

// PAR.From Month 2          USR = PAR.From Date             USR *MONTH
PAR.From_Month_2_USR = DATEDTLS(PAR.From_Date_USR 'MO' 1111111 'NONE' 'N' 1);

// PAR.From Date             USR = CND.Zero
PAR.From_Date_USR = *ZERO;

// PAR.To Date               USR = CND.Zero
PAR.To_Date_USR = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.From Month 2          USR = CND.Zero
PAR.From_Month_2_USR = *ZERO;

ENDIF;

//?Create months for Past monthly Trend using job date Month 1-6
// LCL.Month 1 USR = JOB.*Job date *MONTH
LCL.Month_1_USR = DATEDTLS(JOB.*Job_date 'MO' 1111111 'NONE' 'N' 1);

// LCL.A/R Balance Year = JOB.*Job date *YEAR
LCL.A_R_Balance_Year = DATEDTLS(JOB.*Job_date 'YR' 1111111 'NONE' 'N' 1);

// LCL.Month 1 USR = LCL.Month 1 USR - CON.1
LCL.Month_1_USR = LCL.Month_1_USR - 1;

// LCL.YEAR 1 USR = LCL.A/R Balance Year
LCL.YEAR_1_USR = LCL.A_R_Balance_Year;

CASE;

// IF LCL.Month 1 USR is Zero
IF LCL.Month_1_USR = *ZERO;

// LCL.Month 1 USR = CON.12
LCL.Month_1_USR = 12;

// LCL.YEAR 1 USR = LCL.A/R Balance Year - CON.1
LCL.YEAR_1_USR = LCL.A_R_Balance_Year - 1;

// LCL.A/R Balance Year = LCL.A/R Balance Year - CON.1
LCL.A_R_Balance_Year = LCL.A_R_Balance_Year - 1;

ENDIF;

// LCL.Month 2 USR = LCL.Month 1 USR - CON.1
LCL.Month_2_USR = LCL.Month_1_USR - 1;

// LCL.YEAR 2 USR = LCL.A/R Balance Year
LCL.YEAR_2_USR = LCL.A_R_Balance_Year;

CASE;

// IF LCL.Month 2 USR is Zero
IF LCL.Month_2_USR = *ZERO;

// LCL.Month 2 USR = CON.12
LCL.Month_2_USR = 12;

// LCL.YEAR 2 USR = LCL.A/R Balance Year - CON.1
LCL.YEAR_2_USR = LCL.A_R_Balance_Year - 1;

// LCL.A/R Balance Year = LCL.A/R Balance Year - CON.1
LCL.A_R_Balance_Year = LCL.A_R_Balance_Year - 1;

ENDIF;

// LCL.Month 3 USR = LCL.Month 2 USR - CON.1
LCL.Month_3_USR = LCL.Month_2_USR - 1;

// LCL.YEAR 3 USR = LCL.A/R Balance Year
LCL.YEAR_3_USR = LCL.A_R_Balance_Year;

CASE;

// IF LCL.Month 3 USR is Zero
IF LCL.Month_3_USR = *ZERO;

// LCL.Month 3 USR = CON.12
LCL.Month_3_USR = 12;

// LCL.YEAR 3 USR = LCL.A/R Balance Year - CON.1
LCL.YEAR_3_USR = LCL.A_R_Balance_Year - 1;

// LCL.A/R Balance Year = LCL.A/R Balance Year - CON.1
LCL.A_R_Balance_Year = LCL.A_R_Balance_Year - 1;

ENDIF;

// LCL.Month 4 USR = LCL.Month 3 USR - CON.1
LCL.Month_4_USR = LCL.Month_3_USR - 1;

// LCL.YEAR 4 USR = LCL.A/R Balance Year
LCL.YEAR_4_USR = LCL.A_R_Balance_Year;

CASE;

// IF LCL.Month 4 USR is Zero
IF LCL.Month_4_USR = *ZERO;

// LCL.Month 4 USR = CON.12
LCL.Month_4_USR = 12;

// LCL.YEAR 4 USR = LCL.A/R Balance Year - CON.1
LCL.YEAR_4_USR = LCL.A_R_Balance_Year - 1;

// LCL.A/R Balance Year = LCL.A/R Balance Year - CON.1
LCL.A_R_Balance_Year = LCL.A_R_Balance_Year - 1;

ENDIF;

// LCL.Month 5 USR = LCL.Month 4 USR - CON.1
LCL.Month_5_USR = LCL.Month_4_USR - 1;

// LCL.YEAR 5 USR = LCL.A/R Balance Year
LCL.YEAR_5_USR = LCL.A_R_Balance_Year;

CASE;

// IF LCL.Month 5 USR is Zero
IF LCL.Month_5_USR = *ZERO;

// LCL.Month 5 USR = CON.12
LCL.Month_5_USR = 12;

// LCL.YEAR 5 USR = LCL.A/R Balance Year - CON.1
LCL.YEAR_5_USR = LCL.A_R_Balance_Year - 1;

// LCL.A/R Balance Year = LCL.A/R Balance Year - CON.1
LCL.A_R_Balance_Year = LCL.A_R_Balance_Year - 1;

ENDIF;

// LCL.Month 6 USR = LCL.Month 5 USR - CON.1
LCL.Month_6_USR = LCL.Month_5_USR - 1;

// LCL.YEAR 6 USR = LCL.A/R Balance Year
LCL.YEAR_6_USR = LCL.A_R_Balance_Year;

CASE;

// IF LCL.Month 6 USR is Zero
IF LCL.Month_6_USR = *ZERO;

// LCL.Month 6 USR = CON.12
LCL.Month_6_USR = 12;

// LCL.YEAR 6 USR = LCL.A/R Balance Year - CON.1
LCL.YEAR_6_USR = LCL.A_R_Balance_Year - 1;

// LCL.A/R Balance Year = LCL.A/R Balance Year - CON.1
LCL.A_R_Balance_Year = LCL.A_R_Balance_Year - 1;

ENDIF;

//?***** Change Log and Comments
//?06/15/04
//?06/15/04 SLM -- Add OE HOLD AND Days to pay to report.  Also correct
//?           the process using the hard coded value of 360.
//?           Report will not be select for a specific company
//?           or for all companies.
//?           Add STD for Report Selections.
//?05/19/2006
//?** 05/19/2006 LJB T00009
//?** Size of the Days to Pay User fields has been changed from
//?** 3.0 to 5.0 to prevent truncating when accumulating for
//?** large volume customers.
//?*****
//?02/25/2008
//?** 02/25/2008 blg and rmc
//?** Fixed problem of Past Monthly Trend buckets not being calculated
//?** correctly when selection spans two years
//?*****
//?USER: Record selection processing

CASE;

// IF DB1.Record Status is Active
IF DB1.Record_Status = 'A';

//?Verify Credit Line Expiration Date Selection.
CASE;

// IF PAR.From Month 2          USR is Zero
IF PAR.From_Month_2_USR = *ZERO;

//?"Date Range" Selection.
CASE;

// IF DB1.Credit Line Expire Date GE PAR.From Date             USR
IF DB1.Credit_Line_Expire_Date >= PAR.From_Date_USR;

// AND DB1.Credit Line Expire Date LE PAR.To Date               USR
AND DB1.Credit_Line_Expire_Date <= PAR.To_Date_USR;

//?*** In range! Select record. ***
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?"Month Only" Selection.
// PAR.Compare Month         USR = DB1.Credit Line Expire Date *MONTH
PAR.Compare_Month_USR = DATEDTLS(DB1.Credit_Line_Expire_Date 'MO' 1111111 'NONE' 'N' 1);

CASE;

// IF PAR.Compare Month         USR NE PAR.From Month 2          USR
IF PAR.Compare_Month_USR <> PAR.From_Month_2_USR;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Verify Parent Customer Selection.
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

// Call program VAL Determ. If Parent  XF.
CALL PROGRAM(VAL Determ. If Parent  XF) ('PDL5XFR');
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(PAR.Parent_Status_USR);

CASE;

// IF PAR.Parent Status         USR is Not a Parent Customer
IF PAR.Parent_Status_USR = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process top of page

CASE;

// IF LCL.Print Selections is Yes
IF LCL.Print_Selections = 'Y';

// TOP.From Date             USR = PAR.From Date             USR
TOP_From_Date_USR = PAR.From_Date_USR;

// TOP.To Date               USR = PAR.To Date               USR
TOP_To_Date_USR = PAR.To_Date_USR;

EXECUTE FUNCTION(Load Month Description) TYPE(EXCINTFUN)                        AC1520585;
PARAMETER(PAR.From_Month_2_USR);
PARAMETER(TOP_Month_Description_USR);
{
 //?Execute internal function

 // PAR.Month Description     USR = CND.NOT ENTERED
 PAR.Month_Description_USR = *BLANK;

 CASE;

 // IF PAR.Month                 USR is January
 IF PAR.Month_USR = 01;

 // PAR.Month Description     USR = CON.January
 PAR.Month_Description_USR = 'January';

 // IF PAR.Month                 USR is February
 IF PAR.Month_USR = 02;

 // PAR.Month Description     USR = CON.February
 PAR.Month_Description_USR = 'February';

 // IF PAR.Month                 USR is March
 IF PAR.Month_USR = 03;

 // PAR.Month Description     USR = CON.March
 PAR.Month_Description_USR = 'March';

 // IF PAR.Month                 USR is April
 IF PAR.Month_USR = 04;

 // PAR.Month Description     USR = CON.April
 PAR.Month_Description_USR = 'April';

 // IF PAR.Month                 USR is May
 IF PAR.Month_USR = 05;

 // PAR.Month Description     USR = CON.May
 PAR.Month_Description_USR = 'May';

 // IF PAR.Month                 USR is June
 IF PAR.Month_USR = 06;

 // PAR.Month Description     USR = CON.June
 PAR.Month_Description_USR = 'June';

 // IF PAR.Month                 USR is July
 IF PAR.Month_USR = 07;

 // PAR.Month Description     USR = CON.July
 PAR.Month_Description_USR = 'July';

 // IF PAR.Month                 USR is August
 IF PAR.Month_USR = 08;

 // PAR.Month Description     USR = CON.August
 PAR.Month_Description_USR = 'August';

 // IF PAR.Month                 USR is September
 IF PAR.Month_USR = 09;

 // PAR.Month Description     USR = CON.September
 PAR.Month_Description_USR = 'September';

 // IF PAR.Month                 USR is October
 IF PAR.Month_USR = 10;

 // PAR.Month Description     USR = CON.October
 PAR.Month_Description_USR = 'October';

 // IF PAR.Month                 USR is November
 IF PAR.Month_USR = 11;

 // PAR.Month Description     USR = CON.November
 PAR.Month_Description_USR = 'November';

 // IF PAR.Month                 USR is December
 IF PAR.Month_USR = 12;

 // PAR.Month Description     USR = CON.December
 PAR.Month_Description_USR = 'December';

 ENDIF;

}


ENDIF;

// TOP.Month 1 USR = LCL.Month 1 USR
TOP_Month_1_USR = LCL.Month_1_USR;

// TOP.Month 2 USR = LCL.Month 2 USR
TOP_Month_2_USR = LCL.Month_2_USR;

// TOP.Month 3 USR = LCL.Month 3 USR
TOP_Month_3_USR = LCL.Month_3_USR;

// TOP.Month 4 USR = LCL.Month 4 USR
TOP_Month_4_USR = LCL.Month_4_USR;

// TOP.Month 5 USR = LCL.Month 5 USR
TOP_Month_5_USR = LCL.Month_5_USR;

// TOP.Month 6 USR = LCL.Month 6 USR
TOP_Month_6_USR = LCL.Month_6_USR;

//?USER: On print of first page format

// LCL.Print Selections = CND.No
LCL.Print_Selections = 'N';

//?USER: Print required level headings

// SUPPRESSED PRINT Parent Credit Limit header format

// SUPPRESSED PRINT Customer Name header format

// SUPPRESSED PRINT Ship To Customer header format

//?USER: On print of detail format

//?06/15/04 SLM Change the following process to work for
//?             all companies for a customer
//?Get Highest A/R Balanc for Parent in Last 12 Months
EXECUTE FUNCTION(RTV highest bal-parent RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1519660;
PARAMETER(CUR.Ship_To_Customer);
PARAMETER(CUR.A_R_Balance_Year);
PARAMETER(CUR.A_R_Balance_Month);
PARAMETER(CUR.Amount_of_Highest_A_R_Bal);
{
 //?USER: Initialize routine

 // PAR.Save A/R Customer Nbr USR = CND.equal to zero
 PAR.Save_A_R_Customer_Nbr_USR = *ZERO;

 //?Prepare Array.
 DO;

 EXECUTE FUNCTION(CLR Highest Bal Array  DL) TYPE(DLTOBJ) ARRAY(Highest_A_R_BalanAC1519664;
 //?Determine Start Month and Year.
 DO;

 // PAR.Date                  USR = JOB.*Job date
 PAR.Date_USR = JOB.*Job_date;

 // PAR.A/R Balance Month = JOB.*Job month
 PAR.A_R_Balance_Month = JOB.*Job_month;

 // PAR.A/R Balance Year = JOB.*Job date *YEAR
 PAR.A_R_Balance_Year = DATEDTLS(JOB.*Job_date 'YR' 1111111 'NONE' 'N' 1);

 ENDDO;

 // PAR.Count USR = CND.One
 PAR.Count_USR = 1;

 // DOW PAR.Count USR is LE 12
 DOW PAR.Count_USR <= 12;

 EXECUTE FUNCTION(CRT Highest Bal Array  CR) TYPE(CRTOBJ) ARRAY(Highest_A_R_BalanAC1519670;
 PARAMETER(PAR.A_R_Balance_Year);
 PARAMETER(PAR.A_R_Balance_Month);
 PARAMETER(*ZERO);
 CASE;

 // IF PAR.Count USR is LT 12
 IF PAR.Count_USR < 12;

 //?Adjust Date.
 DO;

 //?Subtract 1 Month from Date.
 // PAR.Date                  USR = PAR.Date                  USR + CON.-1 *MONTHS
 PAR.Date_USR = DATEINCR(PAR.Date_USR '-1' 'MO' 1111111 'NONE' 'N' 1);

 //?Extract Month and Year from Date.
 // PAR.A/R Balance Month = PAR.Date                  USR *MONTH
 PAR.A_R_Balance_Month = DATEDTLS(PAR.Date_USR 'MO' 1111111 'NONE' 'N' 1);

 // PAR.A/R Balance Year = PAR.Date                  USR *YEAR
 PAR.A_R_Balance_Year = DATEDTLS(PAR.Date_USR 'YR' 1111111 'NONE' 'N' 1);

 ENDDO;

 ENDIF;

 // PAR.Count USR = PAR.Count USR + CND.One
 PAR.Count_USR = PAR.Count_USR + 1;

 ENDDO;

 ENDDO;

 //?USER: Processing if Data record not found

 // PAR.A/R Balance Year = CND.equal to zero
 PAR.A_R_Balance_Year = *ZERO;

 // PAR.A/R Balance Month = CND.Zero
 PAR.A_R_Balance_Month = *ZERO;

 // PAR.Amount of Highest A/R Bal = CND.equal to zero
 PAR.Amount_of_Highest_A_R_Bal = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.A/R Customer Number NE PAR.Save A/R Customer Nbr USR
 IF DB1.AR_Customer_Number <> PAR.Save_A_R_Customer_Nbr_USR;

 //?Calculate Highest Bal for A/R Cust & Add to Array.
 DO;

 EXECUTE FUNCTION(UPD Highest Bal Array  RT) TYPE(RTVOBJ) ARRAY(Highest_A_R_BalanAC1519674;
 PARAMETER(DB1.AR_Customer_Number);
 {
  //?USER: Process Data record

  //?06/16/04 slm Change this RTV to accumulate all companies for a
  //?             specific customer and date year and date month
  //?             NEW Logical file
  EXECUTE FUNCTION(RTV Highest Bal-Parent RT) TYPE(RTVOBJ) FILE(PDLDCPP)          AC1519666;
  PARAMETER(PAR.AR_Customer_Number);
  PARAMETER(DB1.A_R_Balance_Year);
  PARAMETER(DB1.A_R_Balance_Month);
  PARAMETER(PAR.Amount_of_Highest_A_R_Bal);
  {
   //?USER: Initialize routine

   //?06/16/04 slm -- Change this process to accumulate for all companies
   // LCL.Amount of Highest A/R Bal = CON.*ZERO
   LCL.Amount_of_Highest_A_R_Bal = *ZERO;

   //?USER: Process Data record

   // LCL.Amount of Highest A/R Bal = DB1.Amount of Highest A/R Bal + LCL.Amount of Highest A/R Bal
   LCL.Amount_of_Highest_A_R_Bal = DB1.Amount_of_Highest_A_R_Bal
   + LCL.Amount_of_Highest_A_R_Bal;

   //?USER: Exit processing

   // PAR.Amount of Highest A/R Bal = LCL.Amount of Highest A/R Bal
   PAR.Amount_of_Highest_A_R_Bal = LCL.Amount_of_Highest_A_R_Bal;

  }

  // PAR.Amount of Highest A/R Bal = PAR.Amount of Highest A/R Bal + DB1.Amount of Highest A/R Bal
  PAR.Amount_of_Highest_A_R_Bal = PAR.Amount_of_Highest_A_R_Bal
  + DB1.Amount_of_Highest_A_R_Bal;

  EXECUTE FUNCTION(CHG Highest Bal Array  CH) TYPE(CHGOBJ) ARRAY(Highest_A_R_BalanAC1519675;
  PARAMETER(DB1.A_R_Balance_Year);
  PARAMETER(DB1.A_R_Balance_Month);
  PARAMETER(PAR.Amount_of_Highest_A_R_Bal);
 }

 ENDDO;

 ENDIF;

 // PAR.Save A/R Customer Nbr USR = DB1.A/R Customer Number
 PAR.Save_A_R_Customer_Nbr_USR = DB1.AR_Customer_Number;

 //?USER: Exit processing

 //?Find & Return Highest Balance and Date.
 EXECUTE FUNCTION(RTV Highest A/R Bal    RT) TYPE(RTVOBJ) ARRAY(Highest_A_R_BalanAC1519679;
 PARAMETER(PAR.A_R_Balance_Year);
 PARAMETER(PAR.A_R_Balance_Month);
 PARAMETER(PAR.Amount_of_Highest_A_R_Bal);
 {
  //?USER: Initialize routine

  // PAR.A/R Balance Year = CND.equal to zero
  PAR.A_R_Balance_Year = *ZERO;

  // PAR.A/R Balance Month = CND.Zero
  PAR.A_R_Balance_Month = *ZERO;

  // PAR.Amount of Highest A/R Bal = CND.equal to zero
  PAR.Amount_of_Highest_A_R_Bal = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF DB1.Amount of Highest A/R Bal GT PAR.Amount of Highest A/R Bal
  IF DB1.Amount_of_Highest_A_R_Bal > PAR.Amount_of_Highest_A_R_Bal;

  // PAR.A/R Balance Year = DB1.A/R Balance Year
  PAR.A_R_Balance_Year = DB1.A_R_Balance_Year;

  // PAR.A/R Balance Month = DB1.A/R Balance Month
  PAR.A_R_Balance_Month = DB1.A_R_Balance_Month;

  // PAR.Amount of Highest A/R Bal = DB1.Amount of Highest A/R Bal
  PAR.Amount_of_Highest_A_R_Bal = DB1.Amount_of_Highest_A_R_Bal;

  ENDIF;

 }

}


//?06/15/04 SLM Add routine to get the 6 period averages.
//?05/19/06 Field size changed from 3.0 to 5.0
//?Get Pas 6 Avg Days Pay - A/R Balance File
// Call program Rtv Past 6-12 AvgDys PyXF.
CALL PROGRAM(Rtv Past 6-12 AvgDys PyXF) ('PPFBXFR');
PARAMETER(LCL.Month_1_USR);
PARAMETER(CUR.Days_to_Pay_1_USR);
PARAMETER(LCL.Month_2_USR);
PARAMETER(CUR.Days_to_Pay_2_USR);
PARAMETER(LCL.Month_3_USR);
PARAMETER(CUR.Days_to_Pay_3_USR);
PARAMETER(LCL.Month_4_USR);
PARAMETER(CUR.Days_to_Pay_4_USR);
PARAMETER(LCL.Month_5_USR);
PARAMETER(CUR.Days_to_Pay_5_USR);
PARAMETER(LCL.Month_6_USR);
PARAMETER(CUR.Days_to_Pay_6_USR);
PARAMETER(*ZERO);
PARAMETER(LCL.Days_to_Pay_7_USR);
PARAMETER(*ZERO);
PARAMETER(LCL.Days_to_Pay_8_USR);
PARAMETER(*ZERO);
PARAMETER(LCL.Days_to_Pay_9_USR);
PARAMETER(*ZERO);
PARAMETER(LCL.Days_to_Pay_10_USR);
PARAMETER(LCL.YEAR_1_USR);
PARAMETER(LCL.YEAR_2_USR);
PARAMETER(LCL.YEAR_3_USR);
PARAMETER(LCL.YEAR_4_USR);
PARAMETER(LCL.YEAR_5_USR);
PARAMETER(LCL.YEAR_6_USR);
PARAMETER(LCL.YEAR_7_USR);
PARAMETER(LCL.YEAR_8_USR);
PARAMETER(LCL.YEAR_9_USR);
PARAMETER(LCL.YEAR_10_USR);
PARAMETER(LCL.YEAR_11_USR);
PARAMETER(LCL.YEAR_12_USR);
PARAMETER(*ZERO);
PARAMETER(WRK.Days_to_Pay_11_USR);
PARAMETER(0);
PARAMETER(LCL.Days_to_Pay_12_USR);
PARAMETER(WRK.Company_Number);
PARAMETER(DB1.AR_Customer_Number);
PARAMETER(CUR.A_R_Balance_Year);
PARAMETER(6);

//?USER: Process after print of detail format

NXT.Count_Records_USR = CNT();

//?USER: Print required level totals

// SUPPRESSED PRINT Ship To Customer totals format

// SUPPRESSED PRINT Customer Name totals format

// SUPPRESSED PRINT Parent Credit Limit totals format

