// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKU5XFR
// ?Date: 14.08.2025 Time: 02:50:33
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modifications and Comments
DO;

//?H16853 ISE 11/09/2020 - Recompiled due to change in Buy Order Number
ENDDO;

EXECUTE FUNCTION(HPE085) TYPE(EXCINTFUN)                                        AB1189549;
{
 //?Execute internal function

 //?Hog Pop by farm site
}


EXECUTE FUNCTION(Rtv Hog Popltn Rpt    RT) TYPE(RTVOBJ) FILE(PKDACPP)           AB1154961;
PARAMETER(PAR.HRH_Type_Of_Distribution);
PARAMETER(PAR.HRH_Report_Break);
PARAMETER(WRK.HRH_Company_Number);
PARAMETER(WRK.HRH_Source_Type);
PARAMETER(WRK.HRH_Payment_Type);
PARAMETER(WRK.HRH_Tattoo_Number);
PARAMETER(WRK.HRH_From_Kill_Date);
PARAMETER(WRK.HRH_To_Kill_Date);
PARAMETER(WRK.HRH_Farm_Site);
PARAMETER(WRK.HRH_Kill_Shift);
PARAMETER(WRK.HRH_Carcass_Hdr_01);
PARAMETER(WRK.HRH_Carcass_Hdr_02);
PARAMETER(WRK.HRH_Carcass_Hdr_03);
PARAMETER(WRK.HRH_Carcass_Hdr_04);
PARAMETER(WRK.HRH_Carcass_Hdr_05);
PARAMETER(WRK.HRH_Carcass_Hdr_06);
PARAMETER(WRK.HRH_Carcass_Hdr_07);
PARAMETER(WRK.HRH_Carcass_Hdr_08);
PARAMETER(WRK.HRH_Carcass_Hdr_09);
PARAMETER(WRK.HRH_Carcass_Hdr_10);
PARAMETER(WRK.HRH_Carcass_Hdr_11);
PARAMETER(WRK.HRH_Carcass_Hdr_12);
PARAMETER(WRK.HRH_Carcass_Hdr_13);
PARAMETER(WRK.HRH_Carcass_Hdr_14);
PARAMETER(WRK.HRH_Carcass_Hdr_15);
PARAMETER(WRK.HRH_Carcass_Hdr_16);
PARAMETER(WRK.HRH_Carcass_Hdr_17);
PARAMETER(WRK.HRH_Carcass_Hdr_18);
PARAMETER(WRK.HRH_Carcass_Hdr_19);
PARAMETER(WRK.HRH_Head_Killed);
PARAMETER(WRK.HRH_AVG_Hot_Weight);
PARAMETER(WRK.HRH_Avg_Live_Wgt);
PARAMETER(WRK.HRH_Avg_Light_Rfl);
PARAMETER(WRK.HRH_Avg_Loin_Eye);
PARAMETER(WRK.HRH_Avg_Back_Fat);
PARAMETER(WRK.HRH_Avg_Lean);
PARAMETER(WRK.HRH_Adjusted);
PARAMETER(WRK.SR_Source_Code);
PARAMETER(WRK.PD_Producer_Code);
PARAMETER(WRK.HRH_Prdcr_Location_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Tattoo by Producer,source type, payment type, tattoo number, all
CASE;

// IF PAR.Report Type Usr is Producer
IF PAR.Report_Type_Usr = 'P';

EXECUTE FUNCTION(Rtv Hog Pop Rpt-Prd   RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1154431;
PARAMETER(WRK.HRH_Company_Number);
PARAMETER(WRK.PD_Producer_Code);
PARAMETER(WRK.HRH_From_Kill_Date);
PARAMETER(PAR.HRH_Type_Of_Distribution);
PARAMETER(PAR.HRH_Report_Break);
PARAMETER(WRK.HRH_Company_Number);
PARAMETER(WRK.HRH_Source_Type);
PARAMETER(WRK.HRH_Payment_Type);
PARAMETER(WRK.HRH_Tattoo_Number);
PARAMETER(WRK.HRH_From_Kill_Date);
PARAMETER(WRK.HRH_To_Kill_Date);
PARAMETER(WRK.HRH_Farm_Site);
PARAMETER(WRK.HRH_Kill_Shift);
PARAMETER(WRK.SR_Source_Code);
PARAMETER(WRK.HRH_Prdcr_Location_Code);
PARAMETER(PAR.Report_Type_Usr);
{
 //?USER: Initialize routine

 //?E2423 Mtech Live or Not Live *** Interfaces to HPS ***
 //?Get the MTech Live Yes or No
 DO;

 //?Mtech Live Yes or no
 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER('MTECHLIVE');
 PARAMETER(WRK.System_Value_Alpha_USR);

 // LCL.MTech Live Yes or No = WRK.System Value Alpha    USR
 LCL.MTech_Live_Yes_or_No = WRK.System_Value_Alpha_USR;

 ENDDO;

 //?USER: Process Data record

 //?Selection
 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 CASE;

 // IF DB1.TH Hog Class Type is Resale
 IF DB1.TH_Hog_Class_Type = 'R';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 CASE;

 // IF DB1.TH Payment Sts is Paid Producer
 IF DB1.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?Date selection
 CASE;

 // IF DB1.TH Kill Date LT PAR.HRH From Kill Date
 IF DB1.TH_Kill_Date < PAR.HRH_From_Kill_Date;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 //?Date selection
 // IF DB1.TH Kill Date GT PAR.HRH To Kill Date
 IF DB1.TH_Kill_Date > PAR.HRH_To_Kill_Date;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 CASE;

 // IF WRK.Record Found USR is Record Found
 IF WRK.Record_Found_USR = 'Y';

 EXECUTE FUNCTION(Upd Hog Popltn Rpt    IF) TYPE(EXCINTFUN)                      AB1154541;
 PARAMETER(PAR.HRH_Type_Of_Distribution);
 PARAMETER(PAR.HRH_Report_Break);
 PARAMETER(WRK.Head_Killed_Total_Usr);
 PARAMETER(WRK.Hot_Weight_Tot_USR);
 PARAMETER(WRK.Backfat_Wgt_USR);
 PARAMETER(WRK.Loin_Eye_Wgt_USR);
 PARAMETER(WRK.Light_Refl_Wgt_Usr);
 PARAMETER(WRK.Lean_Wgt_USR);
 PARAMETER(WRK.Head_Adds_SUM);
 PARAMETER(WRK.Live_wgt_total_11_1_USR);
 PARAMETER(WRK.Head_Total_USR);
 {
  //?Execute internal function

  CASE;

  // IF PAR.HRH Head Killed NE WRK.Zero USR
  IF PAR.HRH_Head_Killed <> WRK.Zero_USR;

  // WRK.HRH AVG Hot Weight = PAR.Hot Weight Tot USR / PAR.HRH Head Killed *
  WRK.HRH_AVG_Hot_Weight = PAR.Hot_Weight_Tot_USR / PAR.HRH_Head_Killed;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH AVG Hot Weight = CON.*ZERO
  WRK.HRH_AVG_Hot_Weight = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.Head Total USR NE WRK.Zero USR
  IF PAR.Head_Total_USR <> WRK.Zero_USR;

  // WRK.HRH Avg Live Wgt = PAR.Live wgt total 11.1   USR / PAR.Head Total USR *
  WRK.HRH_Avg_Live_Wgt = PAR.Live_wgt_total_11_1_USR / PAR.Head_Total_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH Avg Live Wgt = CON.*ZERO
  WRK.HRH_Avg_Live_Wgt = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.Hot Weight Tot USR NE WRK.Zero USR
  IF PAR.Hot_Weight_Tot_USR <> WRK.Zero_USR;

  // WRK.HRH Avg Back Fat = PAR.Backfat * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Back_Fat = PAR.Backfat_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Loin Eye = PAR.Loin-Eye * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Loin_Eye = PAR.Loin_Eye_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Lean % = PAR.Lean % * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Lean = PAR.Lean_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Light Rfl = PAR.Light Refl * Wgt Usr / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Light_Rfl = PAR.Light_Refl_Wgt_Usr / PAR.Hot_Weight_Tot_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH Avg Back Fat = CON.*ZERO
  WRK.HRH_Avg_Back_Fat = *ZERO;

  // WRK.HRH Avg Loin Eye = CON.*ZERO
  WRK.HRH_Avg_Loin_Eye = *ZERO;

  // WRK.HRH Avg Lean % = CON.*ZERO
  WRK.HRH_Avg_Lean = *ZERO;

  // WRK.HRH Avg Light Rfl = CON.*ZERO
  WRK.HRH_Avg_Light_Rfl = *ZERO;

  ENDIF;

  //?Percent Adjusted
  CASE;

  // IF PAR.HRH Head Killed is Greater then Zero
  IF PAR.HRH_Head_Killed > *ZERO;

  // Percent Adjusted
  WRK.HRH_Adjusted = ( PAR.Head_Adds_SUM / PAR.HRH_Head_Killed ) * 100;

  //?Percent Adjusted
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH % Adjusted = CON.*ZERO
  WRK.HRH_Adjusted = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(Chg Hog Ppltn Rpt-Tat  CH) TYPE(CHGOBJ) FILE(PKDACPP)          AB1154609;
  PARAMETER(PAR.HRH_Type_Of_Distribution);
  PARAMETER(PAR.HRH_Report_Break);
  PARAMETER(PAR.HRH_Head_Killed);
  PARAMETER(WRK.HRH_AVG_Hot_Weight);
  PARAMETER(WRK.HRH_Avg_Live_Wgt);
  PARAMETER(WRK.HRH_Avg_Light_Rfl);
  PARAMETER(WRK.HRH_Avg_Loin_Eye);
  PARAMETER(WRK.HRH_Avg_Back_Fat);
  PARAMETER(WRK.HRH_Avg_Lean);
  PARAMETER(WRK.HRH_Adjusted);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 QUIT;

 ENDIF;

 //?producer location
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Prdcr Location Code EQ WRK.Blank USR
 IF PAR.HRH_Prdcr_Location_Code = WRK.Blank_USR;

 // IF DB1.PL Location Code EQ PAR.HRH Prdcr Location Code
 IF DB1.PL_Location_Code = PAR.HRH_Prdcr_Location_Code;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Shift
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Kill Shift EQ WRK.Blank USR
 IF PAR.HRH_Kill_Shift = WRK.Blank_USR;

 // IF DB1.TH Schedule Kill Shift EQ PAR.HRH Kill Shift
 IF DB1.TH_Schedule_Kill_Shift = PAR.HRH_Kill_Shift;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Source Type
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Source Type EQ WRK.Blank USR
 IF PAR.HRH_Source_Type = WRK.Blank_USR;

 // IF DB1.TH Source Type EQ PAR.HRH Source Type
 IF DB1.TH_Source_Type = PAR.HRH_Source_Type;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Source Code
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.SR Source Code EQ WRK.Blank USR
 IF PAR.SR_Source_Code = WRK.Blank_USR;

 // IF DB1.TH Source Code EQ PAR.SR Source Code
 IF DB1.TH_Source_Code = PAR.SR_Source_Code;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Payment type
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Payment Type EQ WRK.Blank USR
 IF PAR.HRH_Payment_Type = WRK.Blank_USR;

 // IF DB1.TH Payment Type EQ PAR.HRH Payment Type
 IF DB1.TH_Payment_Type = PAR.HRH_Payment_Type;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Farm Site
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Farm Site NE WRK.Zero USR
 IF PAR.HRH_Farm_Site <> WRK.Zero_USR;

 CASE;

 // IF DB1.TH Source Type is External
 IF DB1.TH_Source_Type = 'E';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.MTech Live Yes or No is No MTech not Live
 IF LCL.MTech_Live_Yes_or_No = 'N';

 //?* 01/27/03 PKD PK0495 Replaced HP255 with HP249.
 // Call program Z1v HPS Farm Info     UP.
 CALL PROGRAM(Z1v HPS Farm Info     UP) ('HP249');
 PARAMETER(PGM.*Return_code);
 PARAMETER(DB1.TH_HPS_Movement_Ref_#);
 PARAMETER(WRK.Farm_site_Name_f_HPS_USR);
 PARAMETER(WRK.Farm_Site_USR);
 PARAMETER(WRK.HPS_FS_Comp_Relation_USR);
 PARAMETER(WRK.State);

 CASE;

 // IF WRK.Farm Site USR NE PAR.HRH Farm Site
 IF WRK.Farm_Site_USR <> PAR.HRH_Farm_Site;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 // IF LCL.MTech Live Yes or No is Yes MTech is Live
 IF LCL.MTech_Live_Yes_or_No = 'Y';

 // WRK.Farm Site State USR = DB1.TH HPS Farm Site
 WRK.Farm_Site_State_USR = DB1.TH_HPS_Farm_Site;

 CASE;

 // IF WRK.Farm Site USR NE PAR.HRH Farm Site
 IF WRK.Farm_Site_USR <> PAR.HRH_Farm_Site;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?Tattoo number
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Tattoo Number EQ WRK.Zero USR
 IF PAR.HRH_Tattoo_Number = WRK.Zero_USR;

 // IF DB1.TH Tattoo Number EQ PAR.HRH Tattoo Number
 IF DB1.TH_Tattoo_Number = PAR.HRH_Tattoo_Number;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // WRK.Record Found USR = CND.Record Found
 WRK.Record_Found_USR = 'Y';

 // WRK.Weighted Avg Sum = DB1.TH Avg Backfat * DB1.TH Hot Wgt *
 WRK.Weighted_Avg_Sum = DB1.TH_Avg_Backfat * DB1.TH_Hot_Wgt;

 // WRK.Backfat * Wgt USR = WRK.Backfat * Wgt USR + WRK.Weighted Avg Sum
 WRK.Backfat_Wgt_USR = WRK.Backfat_Wgt_USR + WRK.Weighted_Avg_Sum;

 // WRK.Weighted Avg Sum = DB1.TH Avg Loin Eye Depth * DB1.TH Hot Wgt *
 WRK.Weighted_Avg_Sum = DB1.TH_Avg_Loin_Eye_Depth * DB1.TH_Hot_Wgt;

 // WRK.Loin-Eye * Wgt USR = WRK.Loin-Eye * Wgt USR + WRK.Weighted Avg Sum
 WRK.Loin_Eye_Wgt_USR = WRK.Loin_Eye_Wgt_USR + WRK.Weighted_Avg_Sum;

 // WRK.Weighted Avg Sum = DB1.TH Avg Lean Percent * DB1.TH Hot Wgt *
 WRK.Weighted_Avg_Sum = DB1.TH_Avg_Lean_Percent * DB1.TH_Hot_Wgt;

 // WRK.Lean % * Wgt USR = WRK.Lean % * Wgt USR + WRK.Weighted Avg Sum
 WRK.Lean_Wgt_USR = WRK.Lean_Wgt_USR + WRK.Weighted_Avg_Sum;

 // WRK.Weighted Avg Sum = DB1.TH Avg Light Reflectance * DB1.TH Hot Wgt *
 WRK.Weighted_Avg_Sum = DB1.TH_Avg_Light_Reflectance * DB1.TH_Hot_Wgt;

 // WRK.Light Refl * Wgt Usr = WRK.Light Refl * Wgt Usr + WRK.Weighted Avg Sum
 WRK.Light_Refl_Wgt_Usr = WRK.Light_Refl_Wgt_Usr + WRK.Weighted_Avg_Sum;

 // WRK.Hot Weight Tot USR = WRK.Hot Weight Tot USR + DB1.TH Hot Wgt
 WRK.Hot_Weight_Tot_USR = WRK.Hot_Weight_Tot_USR + DB1.TH_Hot_Wgt;

 // WRK.Head Killed Total Usr = WRK.Head Killed Total Usr + DB1.TH Head Killed
 WRK.Head_Killed_Total_Usr = WRK.Head_Killed_Total_Usr + DB1.TH_Head_Killed;

 // WRK.Head Adds             SUM = WRK.Head Adds             SUM + DB1.TH Head Adds
 WRK.Head_Adds_SUM = WRK.Head_Adds_SUM + DB1.TH_Head_Adds;

 // WRK.Live wgt total 11.1   USR = WRK.Live wgt total 11.1   USR + DB1.TH Live Wgt
 WRK.Live_wgt_total_11_1_USR = WRK.Live_wgt_total_11_1_USR + DB1.TH_Live_Wgt;

 // WRK.Head Total USR = WRK.Head Total USR + DB1.TH Head Received
 WRK.Head_Total_USR = WRK.Head_Total_USR + DB1.TH_Head_Received;

 ENDIF;

 //?USER: Exit processing

 CASE;

 // IF WRK.Record Found USR is Record Found
 IF WRK.Record_Found_USR = 'Y';

 EXECUTE FUNCTION(Upd Hog Popltn Rpt    IF) TYPE(EXCINTFUN)                      AB1154541;
 PARAMETER(PAR.HRH_Type_Of_Distribution);
 PARAMETER(PAR.HRH_Report_Break);
 PARAMETER(WRK.Head_Killed_Total_Usr);
 PARAMETER(WRK.Hot_Weight_Tot_USR);
 PARAMETER(WRK.Backfat_Wgt_USR);
 PARAMETER(WRK.Loin_Eye_Wgt_USR);
 PARAMETER(WRK.Light_Refl_Wgt_Usr);
 PARAMETER(WRK.Lean_Wgt_USR);
 PARAMETER(WRK.Head_Adds_SUM);
 PARAMETER(WRK.Live_wgt_total_11_1_USR);
 PARAMETER(WRK.Head_Total_USR);
 {
  //?Execute internal function

  CASE;

  // IF PAR.HRH Head Killed NE WRK.Zero USR
  IF PAR.HRH_Head_Killed <> WRK.Zero_USR;

  // WRK.HRH AVG Hot Weight = PAR.Hot Weight Tot USR / PAR.HRH Head Killed *
  WRK.HRH_AVG_Hot_Weight = PAR.Hot_Weight_Tot_USR / PAR.HRH_Head_Killed;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH AVG Hot Weight = CON.*ZERO
  WRK.HRH_AVG_Hot_Weight = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.Head Total USR NE WRK.Zero USR
  IF PAR.Head_Total_USR <> WRK.Zero_USR;

  // WRK.HRH Avg Live Wgt = PAR.Live wgt total 11.1   USR / PAR.Head Total USR *
  WRK.HRH_Avg_Live_Wgt = PAR.Live_wgt_total_11_1_USR / PAR.Head_Total_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH Avg Live Wgt = CON.*ZERO
  WRK.HRH_Avg_Live_Wgt = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.Hot Weight Tot USR NE WRK.Zero USR
  IF PAR.Hot_Weight_Tot_USR <> WRK.Zero_USR;

  // WRK.HRH Avg Back Fat = PAR.Backfat * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Back_Fat = PAR.Backfat_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Loin Eye = PAR.Loin-Eye * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Loin_Eye = PAR.Loin_Eye_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Lean % = PAR.Lean % * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Lean = PAR.Lean_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Light Rfl = PAR.Light Refl * Wgt Usr / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Light_Rfl = PAR.Light_Refl_Wgt_Usr / PAR.Hot_Weight_Tot_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH Avg Back Fat = CON.*ZERO
  WRK.HRH_Avg_Back_Fat = *ZERO;

  // WRK.HRH Avg Loin Eye = CON.*ZERO
  WRK.HRH_Avg_Loin_Eye = *ZERO;

  // WRK.HRH Avg Lean % = CON.*ZERO
  WRK.HRH_Avg_Lean = *ZERO;

  // WRK.HRH Avg Light Rfl = CON.*ZERO
  WRK.HRH_Avg_Light_Rfl = *ZERO;

  ENDIF;

  //?Percent Adjusted
  CASE;

  // IF PAR.HRH Head Killed is Greater then Zero
  IF PAR.HRH_Head_Killed > *ZERO;

  // Percent Adjusted
  WRK.HRH_Adjusted = ( PAR.Head_Adds_SUM / PAR.HRH_Head_Killed ) * 100;

  //?Percent Adjusted
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH % Adjusted = CON.*ZERO
  WRK.HRH_Adjusted = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(Chg Hog Ppltn Rpt-Tat  CH) TYPE(CHGOBJ) FILE(PKDACPP)          AB1154609;
  PARAMETER(PAR.HRH_Type_Of_Distribution);
  PARAMETER(PAR.HRH_Report_Break);
  PARAMETER(PAR.HRH_Head_Killed);
  PARAMETER(WRK.HRH_AVG_Hot_Weight);
  PARAMETER(WRK.HRH_Avg_Live_Wgt);
  PARAMETER(WRK.HRH_Avg_Light_Rfl);
  PARAMETER(WRK.HRH_Avg_Loin_Eye);
  PARAMETER(WRK.HRH_Avg_Back_Fat);
  PARAMETER(WRK.HRH_Avg_Lean);
  PARAMETER(WRK.HRH_Adjusted);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

}


//?Tattoo by Producer,source type, payment type, tattoo number, all
// IF PAR.Report Type Usr is Producer/Location
IF PAR.Report_Type_Usr = 'L';

EXECUTE FUNCTION(Rtv Hog Pop Rpt-Pr/Lc RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1226339;
PARAMETER(WRK.HRH_Company_Number);
PARAMETER(WRK.PD_Producer_Code);
PARAMETER(WRK.HRH_Prdcr_Location_Code);
PARAMETER(WRK.HRH_From_Kill_Date);
PARAMETER(PAR.HRH_Type_Of_Distribution);
PARAMETER(PAR.HRH_Report_Break);
PARAMETER(WRK.HRH_Company_Number);
PARAMETER(WRK.HRH_Source_Type);
PARAMETER(WRK.HRH_Payment_Type);
PARAMETER(WRK.HRH_Tattoo_Number);
PARAMETER(WRK.HRH_From_Kill_Date);
PARAMETER(WRK.HRH_To_Kill_Date);
PARAMETER(WRK.HRH_Farm_Site);
PARAMETER(WRK.HRH_Kill_Shift);
PARAMETER(WRK.SR_Source_Code);
PARAMETER(PAR.Report_Type_Usr);
{
 //?USER: Initialize routine

 //?E2423 Mtech Live or Not Live *** Interfaces to HPS ***
 //?Get the MTech Live Yes or No
 DO;

 //?Mtech Live Yes or no
 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER('MTECHLIVE');
 PARAMETER(WRK.System_Value_Alpha_USR);

 // LCL.MTech Live Yes or No = WRK.System Value Alpha    USR
 LCL.MTech_Live_Yes_or_No = WRK.System_Value_Alpha_USR;

 ENDDO;

 //?USER: Process Data record

 //?Selection
 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 CASE;

 // IF DB1.TH Hog Class Type is Resale
 IF DB1.TH_Hog_Class_Type = 'R';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 CASE;

 // IF DB1.TH Payment Sts is Paid Producer
 IF DB1.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?Date selection
 CASE;

 // IF DB1.TH Kill Date LT PAR.HRH From Kill Date
 IF DB1.TH_Kill_Date < PAR.HRH_From_Kill_Date;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 //?Date selection
 // IF DB1.TH Kill Date GT PAR.HRH To Kill Date
 IF DB1.TH_Kill_Date > PAR.HRH_To_Kill_Date;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 CASE;

 // IF WRK.Record Found USR is Record Found
 IF WRK.Record_Found_USR = 'Y';

 EXECUTE FUNCTION(Upd Hog Popltn Rpt    IF) TYPE(EXCINTFUN)                      AB1154541;
 PARAMETER(PAR.HRH_Type_Of_Distribution);
 PARAMETER(PAR.HRH_Report_Break);
 PARAMETER(WRK.Head_Killed_Total_Usr);
 PARAMETER(WRK.Hot_Weight_Tot_USR);
 PARAMETER(WRK.Backfat_Wgt_USR);
 PARAMETER(WRK.Loin_Eye_Wgt_USR);
 PARAMETER(WRK.Light_Refl_Wgt_Usr);
 PARAMETER(WRK.Lean_Wgt_USR);
 PARAMETER(WRK.Head_Adds_SUM);
 PARAMETER(WRK.Live_wgt_total_11_1_USR);
 PARAMETER(WRK.Head_Total_USR);
 {
  //?Execute internal function

  CASE;

  // IF PAR.HRH Head Killed NE WRK.Zero USR
  IF PAR.HRH_Head_Killed <> WRK.Zero_USR;

  // WRK.HRH AVG Hot Weight = PAR.Hot Weight Tot USR / PAR.HRH Head Killed *
  WRK.HRH_AVG_Hot_Weight = PAR.Hot_Weight_Tot_USR / PAR.HRH_Head_Killed;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH AVG Hot Weight = CON.*ZERO
  WRK.HRH_AVG_Hot_Weight = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.Head Total USR NE WRK.Zero USR
  IF PAR.Head_Total_USR <> WRK.Zero_USR;

  // WRK.HRH Avg Live Wgt = PAR.Live wgt total 11.1   USR / PAR.Head Total USR *
  WRK.HRH_Avg_Live_Wgt = PAR.Live_wgt_total_11_1_USR / PAR.Head_Total_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH Avg Live Wgt = CON.*ZERO
  WRK.HRH_Avg_Live_Wgt = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.Hot Weight Tot USR NE WRK.Zero USR
  IF PAR.Hot_Weight_Tot_USR <> WRK.Zero_USR;

  // WRK.HRH Avg Back Fat = PAR.Backfat * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Back_Fat = PAR.Backfat_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Loin Eye = PAR.Loin-Eye * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Loin_Eye = PAR.Loin_Eye_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Lean % = PAR.Lean % * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Lean = PAR.Lean_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Light Rfl = PAR.Light Refl * Wgt Usr / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Light_Rfl = PAR.Light_Refl_Wgt_Usr / PAR.Hot_Weight_Tot_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH Avg Back Fat = CON.*ZERO
  WRK.HRH_Avg_Back_Fat = *ZERO;

  // WRK.HRH Avg Loin Eye = CON.*ZERO
  WRK.HRH_Avg_Loin_Eye = *ZERO;

  // WRK.HRH Avg Lean % = CON.*ZERO
  WRK.HRH_Avg_Lean = *ZERO;

  // WRK.HRH Avg Light Rfl = CON.*ZERO
  WRK.HRH_Avg_Light_Rfl = *ZERO;

  ENDIF;

  //?Percent Adjusted
  CASE;

  // IF PAR.HRH Head Killed is Greater then Zero
  IF PAR.HRH_Head_Killed > *ZERO;

  // Percent Adjusted
  WRK.HRH_Adjusted = ( PAR.Head_Adds_SUM / PAR.HRH_Head_Killed ) * 100;

  //?Percent Adjusted
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH % Adjusted = CON.*ZERO
  WRK.HRH_Adjusted = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(Chg Hog Ppltn Rpt-Tat  CH) TYPE(CHGOBJ) FILE(PKDACPP)          AB1154609;
  PARAMETER(PAR.HRH_Type_Of_Distribution);
  PARAMETER(PAR.HRH_Report_Break);
  PARAMETER(PAR.HRH_Head_Killed);
  PARAMETER(WRK.HRH_AVG_Hot_Weight);
  PARAMETER(WRK.HRH_Avg_Live_Wgt);
  PARAMETER(WRK.HRH_Avg_Light_Rfl);
  PARAMETER(WRK.HRH_Avg_Loin_Eye);
  PARAMETER(WRK.HRH_Avg_Back_Fat);
  PARAMETER(WRK.HRH_Avg_Lean);
  PARAMETER(WRK.HRH_Adjusted);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 QUIT;

 ENDIF;

 //?Shift
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Kill Shift EQ WRK.Blank USR
 IF PAR.HRH_Kill_Shift = WRK.Blank_USR;

 // IF DB1.TH Schedule Kill Shift EQ PAR.HRH Kill Shift
 IF DB1.TH_Schedule_Kill_Shift = PAR.HRH_Kill_Shift;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Source Type
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Source Type EQ WRK.Blank USR
 IF PAR.HRH_Source_Type = WRK.Blank_USR;

 // IF DB1.TH Source Type EQ PAR.HRH Source Type
 IF DB1.TH_Source_Type = PAR.HRH_Source_Type;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Source Code
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.SR Source Code EQ WRK.Blank USR
 IF PAR.SR_Source_Code = WRK.Blank_USR;

 // IF DB1.TH Source Code EQ PAR.SR Source Code
 IF DB1.TH_Source_Code = PAR.SR_Source_Code;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Payment type
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Payment Type EQ WRK.Blank USR
 IF PAR.HRH_Payment_Type = WRK.Blank_USR;

 // IF DB1.TH Payment Type EQ PAR.HRH Payment Type
 IF DB1.TH_Payment_Type = PAR.HRH_Payment_Type;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Farm Site
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Farm Site NE WRK.Zero USR
 IF PAR.HRH_Farm_Site <> WRK.Zero_USR;

 CASE;

 // IF DB1.TH Source Type is External
 IF DB1.TH_Source_Type = 'E';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.MTech Live Yes or No is No MTech not Live
 IF LCL.MTech_Live_Yes_or_No = 'N';

 //?* 01/27/03 PKD PK0495 Replaced HP255 with HP249.
 // Call program Z1v HPS Farm Info     UP.
 CALL PROGRAM(Z1v HPS Farm Info     UP) ('HP249');
 PARAMETER(PGM.*Return_code);
 PARAMETER(DB1.TH_HPS_Movement_Ref_#);
 PARAMETER(WRK.Farm_site_Name_f_HPS_USR);
 PARAMETER(WRK.Farm_Site_USR);
 PARAMETER(WRK.HPS_FS_Comp_Relation_USR);
 PARAMETER(WRK.State);

 CASE;

 // IF WRK.Farm Site USR NE PAR.HRH Farm Site
 IF WRK.Farm_Site_USR <> PAR.HRH_Farm_Site;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 // IF LCL.MTech Live Yes or No is Yes MTech is Live
 IF LCL.MTech_Live_Yes_or_No = 'Y';

 // WRK.Farm Site USR = DB1.TH HPS Farm Site
 WRK.Farm_Site_USR = DB1.TH_HPS_Farm_Site;

 CASE;

 // IF WRK.Farm Site USR NE PAR.HRH Farm Site
 IF WRK.Farm_Site_USR <> PAR.HRH_Farm_Site;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?Tattoo number
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Tattoo Number EQ WRK.Zero USR
 IF PAR.HRH_Tattoo_Number = WRK.Zero_USR;

 // IF DB1.TH Tattoo Number EQ PAR.HRH Tattoo Number
 IF DB1.TH_Tattoo_Number = PAR.HRH_Tattoo_Number;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // WRK.Record Found USR = CND.Record Found
 WRK.Record_Found_USR = 'Y';

 // WRK.Weighted Avg Sum = DB1.TH Avg Backfat * DB1.TH Hot Wgt *
 WRK.Weighted_Avg_Sum = DB1.TH_Avg_Backfat * DB1.TH_Hot_Wgt;

 // WRK.Backfat * Wgt USR = WRK.Backfat * Wgt USR + WRK.Weighted Avg Sum
 WRK.Backfat_Wgt_USR = WRK.Backfat_Wgt_USR + WRK.Weighted_Avg_Sum;

 // WRK.Weighted Avg Sum = DB1.TH Avg Loin Eye Depth * DB1.TH Hot Wgt *
 WRK.Weighted_Avg_Sum = DB1.TH_Avg_Loin_Eye_Depth * DB1.TH_Hot_Wgt;

 // WRK.Loin-Eye * Wgt USR = WRK.Loin-Eye * Wgt USR + WRK.Weighted Avg Sum
 WRK.Loin_Eye_Wgt_USR = WRK.Loin_Eye_Wgt_USR + WRK.Weighted_Avg_Sum;

 // WRK.Weighted Avg Sum = DB1.TH Avg Lean Percent * DB1.TH Hot Wgt *
 WRK.Weighted_Avg_Sum = DB1.TH_Avg_Lean_Percent * DB1.TH_Hot_Wgt;

 // WRK.Lean % * Wgt USR = WRK.Lean % * Wgt USR + WRK.Weighted Avg Sum
 WRK.Lean_Wgt_USR = WRK.Lean_Wgt_USR + WRK.Weighted_Avg_Sum;

 // WRK.Weighted Avg Sum = DB1.TH Avg Light Reflectance * DB1.TH Hot Wgt *
 WRK.Weighted_Avg_Sum = DB1.TH_Avg_Light_Reflectance * DB1.TH_Hot_Wgt;

 // WRK.Light Refl * Wgt Usr = WRK.Light Refl * Wgt Usr + WRK.Weighted Avg Sum
 WRK.Light_Refl_Wgt_Usr = WRK.Light_Refl_Wgt_Usr + WRK.Weighted_Avg_Sum;

 // WRK.Hot Weight Tot USR = WRK.Hot Weight Tot USR + DB1.TH Hot Wgt
 WRK.Hot_Weight_Tot_USR = WRK.Hot_Weight_Tot_USR + DB1.TH_Hot_Wgt;

 // WRK.Head Killed Total Usr = WRK.Head Killed Total Usr + DB1.TH Head Killed
 WRK.Head_Killed_Total_Usr = WRK.Head_Killed_Total_Usr + DB1.TH_Head_Killed;

 // WRK.Head Adds             SUM = WRK.Head Adds             SUM + DB1.TH Head Adds
 WRK.Head_Adds_SUM = WRK.Head_Adds_SUM + DB1.TH_Head_Adds;

 // WRK.Live wgt total 11.1   USR = WRK.Live wgt total 11.1   USR + DB1.TH Live Wgt
 WRK.Live_wgt_total_11_1_USR = WRK.Live_wgt_total_11_1_USR + DB1.TH_Live_Wgt;

 // WRK.Head Total USR = WRK.Head Total USR + DB1.TH Head Received
 WRK.Head_Total_USR = WRK.Head_Total_USR + DB1.TH_Head_Received;

 ENDIF;

 //?USER: Exit processing

 CASE;

 // IF WRK.Record Found USR is Record Found
 IF WRK.Record_Found_USR = 'Y';

 EXECUTE FUNCTION(Upd Hog Popltn Rpt    IF) TYPE(EXCINTFUN)                      AB1154541;
 PARAMETER(PAR.HRH_Type_Of_Distribution);
 PARAMETER(PAR.HRH_Report_Break);
 PARAMETER(WRK.Head_Killed_Total_Usr);
 PARAMETER(WRK.Hot_Weight_Tot_USR);
 PARAMETER(WRK.Backfat_Wgt_USR);
 PARAMETER(WRK.Loin_Eye_Wgt_USR);
 PARAMETER(WRK.Light_Refl_Wgt_Usr);
 PARAMETER(WRK.Lean_Wgt_USR);
 PARAMETER(WRK.Head_Adds_SUM);
 PARAMETER(WRK.Live_wgt_total_11_1_USR);
 PARAMETER(WRK.Head_Total_USR);
 {
  //?Execute internal function

  CASE;

  // IF PAR.HRH Head Killed NE WRK.Zero USR
  IF PAR.HRH_Head_Killed <> WRK.Zero_USR;

  // WRK.HRH AVG Hot Weight = PAR.Hot Weight Tot USR / PAR.HRH Head Killed *
  WRK.HRH_AVG_Hot_Weight = PAR.Hot_Weight_Tot_USR / PAR.HRH_Head_Killed;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH AVG Hot Weight = CON.*ZERO
  WRK.HRH_AVG_Hot_Weight = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.Head Total USR NE WRK.Zero USR
  IF PAR.Head_Total_USR <> WRK.Zero_USR;

  // WRK.HRH Avg Live Wgt = PAR.Live wgt total 11.1   USR / PAR.Head Total USR *
  WRK.HRH_Avg_Live_Wgt = PAR.Live_wgt_total_11_1_USR / PAR.Head_Total_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH Avg Live Wgt = CON.*ZERO
  WRK.HRH_Avg_Live_Wgt = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.Hot Weight Tot USR NE WRK.Zero USR
  IF PAR.Hot_Weight_Tot_USR <> WRK.Zero_USR;

  // WRK.HRH Avg Back Fat = PAR.Backfat * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Back_Fat = PAR.Backfat_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Loin Eye = PAR.Loin-Eye * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Loin_Eye = PAR.Loin_Eye_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Lean % = PAR.Lean % * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Lean = PAR.Lean_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Light Rfl = PAR.Light Refl * Wgt Usr / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Light_Rfl = PAR.Light_Refl_Wgt_Usr / PAR.Hot_Weight_Tot_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH Avg Back Fat = CON.*ZERO
  WRK.HRH_Avg_Back_Fat = *ZERO;

  // WRK.HRH Avg Loin Eye = CON.*ZERO
  WRK.HRH_Avg_Loin_Eye = *ZERO;

  // WRK.HRH Avg Lean % = CON.*ZERO
  WRK.HRH_Avg_Lean = *ZERO;

  // WRK.HRH Avg Light Rfl = CON.*ZERO
  WRK.HRH_Avg_Light_Rfl = *ZERO;

  ENDIF;

  //?Percent Adjusted
  CASE;

  // IF PAR.HRH Head Killed is Greater then Zero
  IF PAR.HRH_Head_Killed > *ZERO;

  // Percent Adjusted
  WRK.HRH_Adjusted = ( PAR.Head_Adds_SUM / PAR.HRH_Head_Killed ) * 100;

  //?Percent Adjusted
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH % Adjusted = CON.*ZERO
  WRK.HRH_Adjusted = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(Chg Hog Ppltn Rpt-Tat  CH) TYPE(CHGOBJ) FILE(PKDACPP)          AB1154609;
  PARAMETER(PAR.HRH_Type_Of_Distribution);
  PARAMETER(PAR.HRH_Report_Break);
  PARAMETER(PAR.HRH_Head_Killed);
  PARAMETER(WRK.HRH_AVG_Hot_Weight);
  PARAMETER(WRK.HRH_Avg_Live_Wgt);
  PARAMETER(WRK.HRH_Avg_Light_Rfl);
  PARAMETER(WRK.HRH_Avg_Loin_Eye);
  PARAMETER(WRK.HRH_Avg_Back_Fat);
  PARAMETER(WRK.HRH_Avg_Lean);
  PARAMETER(WRK.HRH_Adjusted);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

}


//?Tattoo by Producer,source type, payment type, tattoo number, all
// IF PAR.Report Type Usr is Source Code
IF PAR.Report_Type_Usr = 'S';

EXECUTE FUNCTION(Rtv Hog Pop Rpt-SrCde RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1159760;
PARAMETER(WRK.HRH_Company_Number);
PARAMETER(WRK.SR_Source_Code);
PARAMETER(WRK.HRH_From_Kill_Date);
PARAMETER(PAR.HRH_Type_Of_Distribution);
PARAMETER(PAR.HRH_Report_Break);
PARAMETER(WRK.HRH_Company_Number);
PARAMETER(WRK.HRH_Source_Type);
PARAMETER(WRK.HRH_Payment_Type);
PARAMETER(WRK.HRH_Tattoo_Number);
PARAMETER(WRK.HRH_From_Kill_Date);
PARAMETER(WRK.HRH_To_Kill_Date);
PARAMETER(WRK.HRH_Farm_Site);
PARAMETER(WRK.HRH_Kill_Shift);
PARAMETER(WRK.SR_Source_Code);
PARAMETER(WRK.PD_Producer_Code);
PARAMETER(WRK.HRH_Prdcr_Location_Code);
PARAMETER(PAR.Report_Type_Usr);
{
 //?USER: Initialize routine

 //?E2423 Mtech Live or Not Live *** Interfaces to HPS ***
 //?Get the MTech Live Yes or No
 DO;

 //?Mtech Live Yes or no
 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER('MTECHLIVE');
 PARAMETER(WRK.System_Value_Alpha_USR);

 // LCL.MTech Live Yes or No = WRK.System Value Alpha    USR
 LCL.MTech_Live_Yes_or_No = WRK.System_Value_Alpha_USR;

 ENDDO;

 //?USER: Process Data record

 //?Selection
 // WRK.Company Number Alpha Usr = DB1.BOH Company Number
 WRK.Company_Number_Alpha_Usr = DB1.BOH_Company_Number;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 CASE;

 // IF DB1.TH Hog Class Type is Resale
 IF DB1.TH_Hog_Class_Type = 'R';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 CASE;

 // IF DB1.TH Payment Sts is Paid Producer
 IF DB1.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?Date selection
 CASE;

 // IF DB1.TH Kill Date LT PAR.HRH From Kill Date
 IF DB1.TH_Kill_Date < PAR.HRH_From_Kill_Date;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 //?Date selection
 // IF DB1.TH Kill Date GT PAR.HRH To Kill Date
 IF DB1.TH_Kill_Date > PAR.HRH_To_Kill_Date;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 CASE;

 // IF WRK.Record Found USR is Record Found
 IF WRK.Record_Found_USR = 'Y';

 EXECUTE FUNCTION(Upd Hog Popltn Rpt    IF) TYPE(EXCINTFUN)                      AB1154541;
 PARAMETER(PAR.HRH_Type_Of_Distribution);
 PARAMETER(PAR.HRH_Report_Break);
 PARAMETER(WRK.Head_Killed_Total_Usr);
 PARAMETER(WRK.Hot_Weight_Tot_USR);
 PARAMETER(WRK.Backfat_Wgt_USR);
 PARAMETER(WRK.Loin_Eye_Wgt_USR);
 PARAMETER(WRK.Light_Refl_Wgt_Usr);
 PARAMETER(WRK.Lean_Wgt_USR);
 PARAMETER(WRK.Head_Adds_SUM);
 PARAMETER(WRK.Live_wgt_total_11_1_USR);
 PARAMETER(WRK.Head_Total_USR);
 {
  //?Execute internal function

  CASE;

  // IF PAR.HRH Head Killed NE WRK.Zero USR
  IF PAR.HRH_Head_Killed <> WRK.Zero_USR;

  // WRK.HRH AVG Hot Weight = PAR.Hot Weight Tot USR / PAR.HRH Head Killed *
  WRK.HRH_AVG_Hot_Weight = PAR.Hot_Weight_Tot_USR / PAR.HRH_Head_Killed;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH AVG Hot Weight = CON.*ZERO
  WRK.HRH_AVG_Hot_Weight = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.Head Total USR NE WRK.Zero USR
  IF PAR.Head_Total_USR <> WRK.Zero_USR;

  // WRK.HRH Avg Live Wgt = PAR.Live wgt total 11.1   USR / PAR.Head Total USR *
  WRK.HRH_Avg_Live_Wgt = PAR.Live_wgt_total_11_1_USR / PAR.Head_Total_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH Avg Live Wgt = CON.*ZERO
  WRK.HRH_Avg_Live_Wgt = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.Hot Weight Tot USR NE WRK.Zero USR
  IF PAR.Hot_Weight_Tot_USR <> WRK.Zero_USR;

  // WRK.HRH Avg Back Fat = PAR.Backfat * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Back_Fat = PAR.Backfat_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Loin Eye = PAR.Loin-Eye * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Loin_Eye = PAR.Loin_Eye_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Lean % = PAR.Lean % * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Lean = PAR.Lean_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Light Rfl = PAR.Light Refl * Wgt Usr / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Light_Rfl = PAR.Light_Refl_Wgt_Usr / PAR.Hot_Weight_Tot_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH Avg Back Fat = CON.*ZERO
  WRK.HRH_Avg_Back_Fat = *ZERO;

  // WRK.HRH Avg Loin Eye = CON.*ZERO
  WRK.HRH_Avg_Loin_Eye = *ZERO;

  // WRK.HRH Avg Lean % = CON.*ZERO
  WRK.HRH_Avg_Lean = *ZERO;

  // WRK.HRH Avg Light Rfl = CON.*ZERO
  WRK.HRH_Avg_Light_Rfl = *ZERO;

  ENDIF;

  //?Percent Adjusted
  CASE;

  // IF PAR.HRH Head Killed is Greater then Zero
  IF PAR.HRH_Head_Killed > *ZERO;

  // Percent Adjusted
  WRK.HRH_Adjusted = ( PAR.Head_Adds_SUM / PAR.HRH_Head_Killed ) * 100;

  //?Percent Adjusted
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH % Adjusted = CON.*ZERO
  WRK.HRH_Adjusted = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(Chg Hog Ppltn Rpt-Tat  CH) TYPE(CHGOBJ) FILE(PKDACPP)          AB1154609;
  PARAMETER(PAR.HRH_Type_Of_Distribution);
  PARAMETER(PAR.HRH_Report_Break);
  PARAMETER(PAR.HRH_Head_Killed);
  PARAMETER(WRK.HRH_AVG_Hot_Weight);
  PARAMETER(WRK.HRH_Avg_Live_Wgt);
  PARAMETER(WRK.HRH_Avg_Light_Rfl);
  PARAMETER(WRK.HRH_Avg_Loin_Eye);
  PARAMETER(WRK.HRH_Avg_Back_Fat);
  PARAMETER(WRK.HRH_Avg_Lean);
  PARAMETER(WRK.HRH_Adjusted);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 QUIT;

 ENDIF;

 //?Source Type
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Source Type EQ WRK.Blank USR
 IF PAR.HRH_Source_Type = WRK.Blank_USR;

 // IF DB1.TH Source Type EQ PAR.HRH Source Type
 IF DB1.TH_Source_Type = PAR.HRH_Source_Type;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Payment type
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Payment Type EQ WRK.Blank USR
 IF PAR.HRH_Payment_Type = WRK.Blank_USR;

 // IF DB1.TH Payment Type EQ PAR.HRH Payment Type
 IF DB1.TH_Payment_Type = PAR.HRH_Payment_Type;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Producer / location
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.PD Producer Code EQ WRK.Blank USR
 IF PAR.PD_Producer_Code = WRK.Blank_USR;

 // IF PAR.PD Producer Code EQ DB1.PD Producer Code
 IF PAR.PD_Producer_Code = DB1.PD_Producer_Code;

 //?Location
 CASE;

 // IF DB1.PD Producer Code EQ PAR.PD Producer Code
 IF DB1.PD_Producer_Code = PAR.PD_Producer_Code;

 CASE;

 // IF PAR.HRH Prdcr Location Code EQ WRK.Blank USR
 IF PAR.HRH_Prdcr_Location_Code = WRK.Blank_USR;

 // IF DB1.PL Location Code EQ PAR.HRH Prdcr Location Code
 IF DB1.PL_Location_Code = PAR.HRH_Prdcr_Location_Code;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Shift
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Kill Shift EQ WRK.Blank USR
 IF PAR.HRH_Kill_Shift = WRK.Blank_USR;

 // IF DB1.TH Schedule Kill Shift EQ PAR.HRH Kill Shift
 IF DB1.TH_Schedule_Kill_Shift = PAR.HRH_Kill_Shift;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Tattoo number
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Tattoo Number EQ WRK.Zero USR
 IF PAR.HRH_Tattoo_Number = WRK.Zero_USR;

 // IF DB1.TH Tattoo Number EQ PAR.HRH Tattoo Number
 IF DB1.TH_Tattoo_Number = PAR.HRH_Tattoo_Number;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Farm Site
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Farm Site NE WRK.Zero USR
 IF PAR.HRH_Farm_Site <> WRK.Zero_USR;

 CASE;

 // IF DB1.TH Source Type is External
 IF DB1.TH_Source_Type = 'E';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.MTech Live Yes or No is No MTech not Live
 IF LCL.MTech_Live_Yes_or_No = 'N';

 //?* 01/27/03 PKD PK0495 Replaced HP255 with HP249.
 // Call program Z1v HPS Farm Info     UP.
 CALL PROGRAM(Z1v HPS Farm Info     UP) ('HP249');
 PARAMETER(PGM.*Return_code);
 PARAMETER(DB1.TH_HPS_Movement_Ref_#);
 PARAMETER(WRK.Farm_site_Name_f_HPS_USR);
 PARAMETER(WRK.Farm_Site_USR);
 PARAMETER(WRK.HPS_FS_Comp_Relation_USR);
 PARAMETER(WRK.State);

 CASE;

 // IF WRK.Farm Site USR NE PAR.HRH Farm Site
 IF WRK.Farm_Site_USR <> PAR.HRH_Farm_Site;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 // IF LCL.MTech Live Yes or No is Yes MTech is Live
 IF LCL.MTech_Live_Yes_or_No = 'Y';

 // WRK.Farm Site USR = DB1.TH HPS Farm Site
 WRK.Farm_Site_USR = DB1.TH_HPS_Farm_Site;

 CASE;

 // IF WRK.Farm Site USR NE PAR.HRH Farm Site
 IF WRK.Farm_Site_USR <> PAR.HRH_Farm_Site;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // WRK.Record Found USR = CND.Record Found
 WRK.Record_Found_USR = 'Y';

 // WRK.Weighted Avg Sum = DB1.TH Avg Backfat * DB1.TH Hot Wgt *
 WRK.Weighted_Avg_Sum = DB1.TH_Avg_Backfat * DB1.TH_Hot_Wgt;

 // WRK.Backfat * Wgt USR = WRK.Backfat * Wgt USR + WRK.Weighted Avg Sum
 WRK.Backfat_Wgt_USR = WRK.Backfat_Wgt_USR + WRK.Weighted_Avg_Sum;

 // WRK.Weighted Avg Sum = DB1.TH Avg Loin Eye Depth * DB1.TH Hot Wgt *
 WRK.Weighted_Avg_Sum = DB1.TH_Avg_Loin_Eye_Depth * DB1.TH_Hot_Wgt;

 // WRK.Loin-Eye * Wgt USR = WRK.Loin-Eye * Wgt USR + WRK.Weighted Avg Sum
 WRK.Loin_Eye_Wgt_USR = WRK.Loin_Eye_Wgt_USR + WRK.Weighted_Avg_Sum;

 // WRK.Weighted Avg Sum = DB1.TH Avg Lean Percent * DB1.TH Hot Wgt *
 WRK.Weighted_Avg_Sum = DB1.TH_Avg_Lean_Percent * DB1.TH_Hot_Wgt;

 // WRK.Lean % * Wgt USR = WRK.Lean % * Wgt USR + WRK.Weighted Avg Sum
 WRK.Lean_Wgt_USR = WRK.Lean_Wgt_USR + WRK.Weighted_Avg_Sum;

 // WRK.Weighted Avg Sum = DB1.TH Avg Light Reflectance * DB1.TH Hot Wgt *
 WRK.Weighted_Avg_Sum = DB1.TH_Avg_Light_Reflectance * DB1.TH_Hot_Wgt;

 // WRK.Light Refl * Wgt Usr = WRK.Light Refl * Wgt Usr + WRK.Weighted Avg Sum
 WRK.Light_Refl_Wgt_Usr = WRK.Light_Refl_Wgt_Usr + WRK.Weighted_Avg_Sum;

 // WRK.Hot Weight Tot USR = WRK.Hot Weight Tot USR + DB1.TH Hot Wgt
 WRK.Hot_Weight_Tot_USR = WRK.Hot_Weight_Tot_USR + DB1.TH_Hot_Wgt;

 // WRK.Head Killed Total Usr = WRK.Head Killed Total Usr + DB1.TH Head Killed
 WRK.Head_Killed_Total_Usr = WRK.Head_Killed_Total_Usr + DB1.TH_Head_Killed;

 // WRK.Head Adds             SUM = WRK.Head Adds             SUM + DB1.TH Head Adds
 WRK.Head_Adds_SUM = WRK.Head_Adds_SUM + DB1.TH_Head_Adds;

 // WRK.Live wgt total 11.1   USR = WRK.Live wgt total 11.1   USR + DB1.TH Live Wgt
 WRK.Live_wgt_total_11_1_USR = WRK.Live_wgt_total_11_1_USR + DB1.TH_Live_Wgt;

 // WRK.Head Total USR = WRK.Head Total USR + DB1.TH Head Received
 WRK.Head_Total_USR = WRK.Head_Total_USR + DB1.TH_Head_Received;

 ENDIF;

 //?USER: Exit processing

 CASE;

 // IF WRK.Record Found USR is Record Found
 IF WRK.Record_Found_USR = 'Y';

 EXECUTE FUNCTION(Upd Hog Popltn Rpt    IF) TYPE(EXCINTFUN)                      AB1154541;
 PARAMETER(PAR.HRH_Type_Of_Distribution);
 PARAMETER(PAR.HRH_Report_Break);
 PARAMETER(WRK.Head_Killed_Total_Usr);
 PARAMETER(WRK.Hot_Weight_Tot_USR);
 PARAMETER(WRK.Backfat_Wgt_USR);
 PARAMETER(WRK.Loin_Eye_Wgt_USR);
 PARAMETER(WRK.Light_Refl_Wgt_Usr);
 PARAMETER(WRK.Lean_Wgt_USR);
 PARAMETER(WRK.Head_Adds_SUM);
 PARAMETER(WRK.Live_wgt_total_11_1_USR);
 PARAMETER(WRK.Head_Total_USR);
 {
  //?Execute internal function

  CASE;

  // IF PAR.HRH Head Killed NE WRK.Zero USR
  IF PAR.HRH_Head_Killed <> WRK.Zero_USR;

  // WRK.HRH AVG Hot Weight = PAR.Hot Weight Tot USR / PAR.HRH Head Killed *
  WRK.HRH_AVG_Hot_Weight = PAR.Hot_Weight_Tot_USR / PAR.HRH_Head_Killed;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH AVG Hot Weight = CON.*ZERO
  WRK.HRH_AVG_Hot_Weight = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.Head Total USR NE WRK.Zero USR
  IF PAR.Head_Total_USR <> WRK.Zero_USR;

  // WRK.HRH Avg Live Wgt = PAR.Live wgt total 11.1   USR / PAR.Head Total USR *
  WRK.HRH_Avg_Live_Wgt = PAR.Live_wgt_total_11_1_USR / PAR.Head_Total_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH Avg Live Wgt = CON.*ZERO
  WRK.HRH_Avg_Live_Wgt = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.Hot Weight Tot USR NE WRK.Zero USR
  IF PAR.Hot_Weight_Tot_USR <> WRK.Zero_USR;

  // WRK.HRH Avg Back Fat = PAR.Backfat * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Back_Fat = PAR.Backfat_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Loin Eye = PAR.Loin-Eye * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Loin_Eye = PAR.Loin_Eye_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Lean % = PAR.Lean % * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Lean = PAR.Lean_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Light Rfl = PAR.Light Refl * Wgt Usr / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Light_Rfl = PAR.Light_Refl_Wgt_Usr / PAR.Hot_Weight_Tot_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH Avg Back Fat = CON.*ZERO
  WRK.HRH_Avg_Back_Fat = *ZERO;

  // WRK.HRH Avg Loin Eye = CON.*ZERO
  WRK.HRH_Avg_Loin_Eye = *ZERO;

  // WRK.HRH Avg Lean % = CON.*ZERO
  WRK.HRH_Avg_Lean = *ZERO;

  // WRK.HRH Avg Light Rfl = CON.*ZERO
  WRK.HRH_Avg_Light_Rfl = *ZERO;

  ENDIF;

  //?Percent Adjusted
  CASE;

  // IF PAR.HRH Head Killed is Greater then Zero
  IF PAR.HRH_Head_Killed > *ZERO;

  // Percent Adjusted
  WRK.HRH_Adjusted = ( PAR.Head_Adds_SUM / PAR.HRH_Head_Killed ) * 100;

  //?Percent Adjusted
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH % Adjusted = CON.*ZERO
  WRK.HRH_Adjusted = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(Chg Hog Ppltn Rpt-Tat  CH) TYPE(CHGOBJ) FILE(PKDACPP)          AB1154609;
  PARAMETER(PAR.HRH_Type_Of_Distribution);
  PARAMETER(PAR.HRH_Report_Break);
  PARAMETER(PAR.HRH_Head_Killed);
  PARAMETER(WRK.HRH_AVG_Hot_Weight);
  PARAMETER(WRK.HRH_Avg_Live_Wgt);
  PARAMETER(WRK.HRH_Avg_Light_Rfl);
  PARAMETER(WRK.HRH_Avg_Loin_Eye);
  PARAMETER(WRK.HRH_Avg_Back_Fat);
  PARAMETER(WRK.HRH_Avg_Lean);
  PARAMETER(WRK.HRH_Adjusted);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

}


//?Tattoo by Producer,source type, payment type, tattoo number, all
// IF PAR.Report Type Usr is Source Type
IF PAR.Report_Type_Usr = 'A';

EXECUTE FUNCTION(Rtv Hog Pop Rpt-SrTy  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1154790;
PARAMETER(WRK.HRH_Company_Number);
PARAMETER(WRK.HRH_Source_Type);
PARAMETER(WRK.HRH_From_Kill_Date);
PARAMETER(PAR.HRH_Type_Of_Distribution);
PARAMETER(PAR.HRH_Report_Break);
PARAMETER(WRK.HRH_Company_Number);
PARAMETER(WRK.HRH_Source_Type);
PARAMETER(WRK.HRH_Payment_Type);
PARAMETER(WRK.HRH_Tattoo_Number);
PARAMETER(WRK.HRH_From_Kill_Date);
PARAMETER(WRK.HRH_To_Kill_Date);
PARAMETER(WRK.HRH_Farm_Site);
PARAMETER(WRK.HRH_Kill_Shift);
PARAMETER(WRK.SR_Source_Code);
PARAMETER(WRK.PD_Producer_Code);
PARAMETER(WRK.HRH_Prdcr_Location_Code);
PARAMETER(PAR.Report_Type_Usr);
{
 //?USER: Initialize routine

 //?E2423 Mtech Live or Not Live *** Interfaces to HPS ***
 //?Get the MTech Live Yes or No
 DO;

 //?Mtech Live Yes or no
 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER('MTECHLIVE');
 PARAMETER(WRK.System_Value_Alpha_USR);

 // LCL.MTech Live Yes or No = WRK.System Value Alpha    USR
 LCL.MTech_Live_Yes_or_No = WRK.System_Value_Alpha_USR;

 ENDDO;

 //?USER: Process Data record

 //?Selection
 // WRK.Company Number Alpha Usr = DB1.BOH Company Number
 WRK.Company_Number_Alpha_Usr = DB1.BOH_Company_Number;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 CASE;

 // IF DB1.TH Hog Class Type is Resale
 IF DB1.TH_Hog_Class_Type = 'R';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 CASE;

 // IF DB1.TH Payment Sts is Paid Producer
 IF DB1.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?Date selection
 CASE;

 // IF DB1.TH Kill Date LT PAR.HRH From Kill Date
 IF DB1.TH_Kill_Date < PAR.HRH_From_Kill_Date;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 //?Date selection
 // IF DB1.TH Kill Date GT PAR.HRH To Kill Date
 IF DB1.TH_Kill_Date > PAR.HRH_To_Kill_Date;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 CASE;

 // IF WRK.Record Found USR is Record Found
 IF WRK.Record_Found_USR = 'Y';

 EXECUTE FUNCTION(Upd Hog Popltn Rpt    IF) TYPE(EXCINTFUN)                      AB1154541;
 PARAMETER(PAR.HRH_Type_Of_Distribution);
 PARAMETER(PAR.HRH_Report_Break);
 PARAMETER(WRK.Head_Killed_Total_Usr);
 PARAMETER(WRK.Hot_Weight_Tot_USR);
 PARAMETER(WRK.Backfat_Wgt_USR);
 PARAMETER(WRK.Loin_Eye_Wgt_USR);
 PARAMETER(WRK.Light_Refl_Wgt_Usr);
 PARAMETER(WRK.Lean_Wgt_USR);
 PARAMETER(WRK.Head_Adds_SUM);
 PARAMETER(WRK.Live_wgt_total_11_1_USR);
 PARAMETER(WRK.Head_Total_USR);
 {
  //?Execute internal function

  CASE;

  // IF PAR.HRH Head Killed NE WRK.Zero USR
  IF PAR.HRH_Head_Killed <> WRK.Zero_USR;

  // WRK.HRH AVG Hot Weight = PAR.Hot Weight Tot USR / PAR.HRH Head Killed *
  WRK.HRH_AVG_Hot_Weight = PAR.Hot_Weight_Tot_USR / PAR.HRH_Head_Killed;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH AVG Hot Weight = CON.*ZERO
  WRK.HRH_AVG_Hot_Weight = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.Head Total USR NE WRK.Zero USR
  IF PAR.Head_Total_USR <> WRK.Zero_USR;

  // WRK.HRH Avg Live Wgt = PAR.Live wgt total 11.1   USR / PAR.Head Total USR *
  WRK.HRH_Avg_Live_Wgt = PAR.Live_wgt_total_11_1_USR / PAR.Head_Total_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH Avg Live Wgt = CON.*ZERO
  WRK.HRH_Avg_Live_Wgt = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.Hot Weight Tot USR NE WRK.Zero USR
  IF PAR.Hot_Weight_Tot_USR <> WRK.Zero_USR;

  // WRK.HRH Avg Back Fat = PAR.Backfat * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Back_Fat = PAR.Backfat_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Loin Eye = PAR.Loin-Eye * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Loin_Eye = PAR.Loin_Eye_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Lean % = PAR.Lean % * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Lean = PAR.Lean_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Light Rfl = PAR.Light Refl * Wgt Usr / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Light_Rfl = PAR.Light_Refl_Wgt_Usr / PAR.Hot_Weight_Tot_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH Avg Back Fat = CON.*ZERO
  WRK.HRH_Avg_Back_Fat = *ZERO;

  // WRK.HRH Avg Loin Eye = CON.*ZERO
  WRK.HRH_Avg_Loin_Eye = *ZERO;

  // WRK.HRH Avg Lean % = CON.*ZERO
  WRK.HRH_Avg_Lean = *ZERO;

  // WRK.HRH Avg Light Rfl = CON.*ZERO
  WRK.HRH_Avg_Light_Rfl = *ZERO;

  ENDIF;

  //?Percent Adjusted
  CASE;

  // IF PAR.HRH Head Killed is Greater then Zero
  IF PAR.HRH_Head_Killed > *ZERO;

  // Percent Adjusted
  WRK.HRH_Adjusted = ( PAR.Head_Adds_SUM / PAR.HRH_Head_Killed ) * 100;

  //?Percent Adjusted
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH % Adjusted = CON.*ZERO
  WRK.HRH_Adjusted = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(Chg Hog Ppltn Rpt-Tat  CH) TYPE(CHGOBJ) FILE(PKDACPP)          AB1154609;
  PARAMETER(PAR.HRH_Type_Of_Distribution);
  PARAMETER(PAR.HRH_Report_Break);
  PARAMETER(PAR.HRH_Head_Killed);
  PARAMETER(WRK.HRH_AVG_Hot_Weight);
  PARAMETER(WRK.HRH_Avg_Live_Wgt);
  PARAMETER(WRK.HRH_Avg_Light_Rfl);
  PARAMETER(WRK.HRH_Avg_Loin_Eye);
  PARAMETER(WRK.HRH_Avg_Back_Fat);
  PARAMETER(WRK.HRH_Avg_Lean);
  PARAMETER(WRK.HRH_Adjusted);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 QUIT;

 ENDIF;

 //?Source Code
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.SR Source Code EQ WRK.Blank USR
 IF PAR.SR_Source_Code = WRK.Blank_USR;

 // IF DB1.TH Source Code EQ PAR.SR Source Code
 IF DB1.TH_Source_Code = PAR.SR_Source_Code;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Payment type
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Payment Type EQ WRK.Blank USR
 IF PAR.HRH_Payment_Type = WRK.Blank_USR;

 // IF DB1.TH Payment Type EQ PAR.HRH Payment Type
 IF DB1.TH_Payment_Type = PAR.HRH_Payment_Type;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Producer / location
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.PD Producer Code EQ WRK.Blank USR
 IF PAR.PD_Producer_Code = WRK.Blank_USR;

 // IF PAR.PD Producer Code EQ DB1.PD Producer Code
 IF PAR.PD_Producer_Code = DB1.PD_Producer_Code;

 //?Location
 CASE;

 // IF DB1.PD Producer Code EQ PAR.PD Producer Code
 IF DB1.PD_Producer_Code = PAR.PD_Producer_Code;

 CASE;

 // IF PAR.HRH Prdcr Location Code EQ WRK.Blank USR
 IF PAR.HRH_Prdcr_Location_Code = WRK.Blank_USR;

 // IF DB1.PL Location Code EQ PAR.HRH Prdcr Location Code
 IF DB1.PL_Location_Code = PAR.HRH_Prdcr_Location_Code;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Shift
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Kill Shift EQ WRK.Blank USR
 IF PAR.HRH_Kill_Shift = WRK.Blank_USR;

 // IF DB1.TH Schedule Kill Shift EQ PAR.HRH Kill Shift
 IF DB1.TH_Schedule_Kill_Shift = PAR.HRH_Kill_Shift;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Tattoo number
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Tattoo Number EQ WRK.Zero USR
 IF PAR.HRH_Tattoo_Number = WRK.Zero_USR;

 // IF DB1.TH Tattoo Number EQ PAR.HRH Tattoo Number
 IF DB1.TH_Tattoo_Number = PAR.HRH_Tattoo_Number;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Farm Site
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Farm Site NE WRK.Zero USR
 IF PAR.HRH_Farm_Site <> WRK.Zero_USR;

 CASE;

 // IF DB1.TH Source Type is External
 IF DB1.TH_Source_Type = 'E';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.MTech Live Yes or No is No MTech not Live
 IF LCL.MTech_Live_Yes_or_No = 'N';

 //?* 01/27/03 PKD PK0495 Replaced HP255 with HP249.
 // Call program Z1v HPS Farm Info     UP.
 CALL PROGRAM(Z1v HPS Farm Info     UP) ('HP249');
 PARAMETER(PGM.*Return_code);
 PARAMETER(DB1.TH_HPS_Movement_Ref_#);
 PARAMETER(WRK.Farm_site_Name_f_HPS_USR);
 PARAMETER(WRK.Farm_Site_USR);
 PARAMETER(WRK.HPS_FS_Comp_Relation_USR);
 PARAMETER(WRK.State);

 // WRK.Farm Site USR = DB1.TH HPS Farm Site
 WRK.Farm_Site_USR = DB1.TH_HPS_Farm_Site;

 CASE;

 // IF WRK.Farm Site USR NE PAR.HRH Farm Site
 IF WRK.Farm_Site_USR <> PAR.HRH_Farm_Site;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 // IF LCL.MTech Live Yes or No is Yes MTech is Live
 IF LCL.MTech_Live_Yes_or_No = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // WRK.Record Found USR = CND.Record Found
 WRK.Record_Found_USR = 'Y';

 // WRK.Weighted Avg Sum = DB1.TH Avg Backfat * DB1.TH Hot Wgt *
 WRK.Weighted_Avg_Sum = DB1.TH_Avg_Backfat * DB1.TH_Hot_Wgt;

 // WRK.Backfat * Wgt USR = WRK.Backfat * Wgt USR + WRK.Weighted Avg Sum
 WRK.Backfat_Wgt_USR = WRK.Backfat_Wgt_USR + WRK.Weighted_Avg_Sum;

 // WRK.Weighted Avg Sum = DB1.TH Avg Loin Eye Depth * DB1.TH Hot Wgt *
 WRK.Weighted_Avg_Sum = DB1.TH_Avg_Loin_Eye_Depth * DB1.TH_Hot_Wgt;

 // WRK.Loin-Eye * Wgt USR = WRK.Loin-Eye * Wgt USR + WRK.Weighted Avg Sum
 WRK.Loin_Eye_Wgt_USR = WRK.Loin_Eye_Wgt_USR + WRK.Weighted_Avg_Sum;

 // WRK.Weighted Avg Sum = DB1.TH Avg Lean Percent * DB1.TH Hot Wgt *
 WRK.Weighted_Avg_Sum = DB1.TH_Avg_Lean_Percent * DB1.TH_Hot_Wgt;

 // WRK.Lean % * Wgt USR = WRK.Lean % * Wgt USR + WRK.Weighted Avg Sum
 WRK.Lean_Wgt_USR = WRK.Lean_Wgt_USR + WRK.Weighted_Avg_Sum;

 // WRK.Weighted Avg Sum = DB1.TH Avg Light Reflectance * DB1.TH Hot Wgt *
 WRK.Weighted_Avg_Sum = DB1.TH_Avg_Light_Reflectance * DB1.TH_Hot_Wgt;

 // WRK.Light Refl * Wgt Usr = WRK.Light Refl * Wgt Usr + WRK.Weighted Avg Sum
 WRK.Light_Refl_Wgt_Usr = WRK.Light_Refl_Wgt_Usr + WRK.Weighted_Avg_Sum;

 // WRK.Hot Weight Tot USR = WRK.Hot Weight Tot USR + DB1.TH Hot Wgt
 WRK.Hot_Weight_Tot_USR = WRK.Hot_Weight_Tot_USR + DB1.TH_Hot_Wgt;

 // WRK.Head Killed Total Usr = WRK.Head Killed Total Usr + DB1.TH Head Killed
 WRK.Head_Killed_Total_Usr = WRK.Head_Killed_Total_Usr + DB1.TH_Head_Killed;

 // WRK.Head Adds             SUM = WRK.Head Adds             SUM + DB1.TH Head Adds
 WRK.Head_Adds_SUM = WRK.Head_Adds_SUM + DB1.TH_Head_Adds;

 // WRK.Live wgt total 11.1   USR = WRK.Live wgt total 11.1   USR + DB1.TH Live Wgt
 WRK.Live_wgt_total_11_1_USR = WRK.Live_wgt_total_11_1_USR + DB1.TH_Live_Wgt;

 // WRK.Head Total USR = WRK.Head Total USR + DB1.TH Head Received
 WRK.Head_Total_USR = WRK.Head_Total_USR + DB1.TH_Head_Received;

 ENDIF;

 //?USER: Exit processing

 CASE;

 // IF WRK.Record Found USR is Record Found
 IF WRK.Record_Found_USR = 'Y';

 EXECUTE FUNCTION(Upd Hog Popltn Rpt    IF) TYPE(EXCINTFUN)                      AB1154541;
 PARAMETER(PAR.HRH_Type_Of_Distribution);
 PARAMETER(PAR.HRH_Report_Break);
 PARAMETER(WRK.Head_Killed_Total_Usr);
 PARAMETER(WRK.Hot_Weight_Tot_USR);
 PARAMETER(WRK.Backfat_Wgt_USR);
 PARAMETER(WRK.Loin_Eye_Wgt_USR);
 PARAMETER(WRK.Light_Refl_Wgt_Usr);
 PARAMETER(WRK.Lean_Wgt_USR);
 PARAMETER(WRK.Head_Adds_SUM);
 PARAMETER(WRK.Live_wgt_total_11_1_USR);
 PARAMETER(WRK.Head_Total_USR);
 {
  //?Execute internal function

  CASE;

  // IF PAR.HRH Head Killed NE WRK.Zero USR
  IF PAR.HRH_Head_Killed <> WRK.Zero_USR;

  // WRK.HRH AVG Hot Weight = PAR.Hot Weight Tot USR / PAR.HRH Head Killed *
  WRK.HRH_AVG_Hot_Weight = PAR.Hot_Weight_Tot_USR / PAR.HRH_Head_Killed;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH AVG Hot Weight = CON.*ZERO
  WRK.HRH_AVG_Hot_Weight = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.Head Total USR NE WRK.Zero USR
  IF PAR.Head_Total_USR <> WRK.Zero_USR;

  // WRK.HRH Avg Live Wgt = PAR.Live wgt total 11.1   USR / PAR.Head Total USR *
  WRK.HRH_Avg_Live_Wgt = PAR.Live_wgt_total_11_1_USR / PAR.Head_Total_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH Avg Live Wgt = CON.*ZERO
  WRK.HRH_Avg_Live_Wgt = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.Hot Weight Tot USR NE WRK.Zero USR
  IF PAR.Hot_Weight_Tot_USR <> WRK.Zero_USR;

  // WRK.HRH Avg Back Fat = PAR.Backfat * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Back_Fat = PAR.Backfat_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Loin Eye = PAR.Loin-Eye * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Loin_Eye = PAR.Loin_Eye_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Lean % = PAR.Lean % * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Lean = PAR.Lean_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Light Rfl = PAR.Light Refl * Wgt Usr / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Light_Rfl = PAR.Light_Refl_Wgt_Usr / PAR.Hot_Weight_Tot_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH Avg Back Fat = CON.*ZERO
  WRK.HRH_Avg_Back_Fat = *ZERO;

  // WRK.HRH Avg Loin Eye = CON.*ZERO
  WRK.HRH_Avg_Loin_Eye = *ZERO;

  // WRK.HRH Avg Lean % = CON.*ZERO
  WRK.HRH_Avg_Lean = *ZERO;

  // WRK.HRH Avg Light Rfl = CON.*ZERO
  WRK.HRH_Avg_Light_Rfl = *ZERO;

  ENDIF;

  //?Percent Adjusted
  CASE;

  // IF PAR.HRH Head Killed is Greater then Zero
  IF PAR.HRH_Head_Killed > *ZERO;

  // Percent Adjusted
  WRK.HRH_Adjusted = ( PAR.Head_Adds_SUM / PAR.HRH_Head_Killed ) * 100;

  //?Percent Adjusted
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH % Adjusted = CON.*ZERO
  WRK.HRH_Adjusted = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(Chg Hog Ppltn Rpt-Tat  CH) TYPE(CHGOBJ) FILE(PKDACPP)          AB1154609;
  PARAMETER(PAR.HRH_Type_Of_Distribution);
  PARAMETER(PAR.HRH_Report_Break);
  PARAMETER(PAR.HRH_Head_Killed);
  PARAMETER(WRK.HRH_AVG_Hot_Weight);
  PARAMETER(WRK.HRH_Avg_Live_Wgt);
  PARAMETER(WRK.HRH_Avg_Light_Rfl);
  PARAMETER(WRK.HRH_Avg_Loin_Eye);
  PARAMETER(WRK.HRH_Avg_Back_Fat);
  PARAMETER(WRK.HRH_Avg_Lean);
  PARAMETER(WRK.HRH_Adjusted);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

}


//?Tattoo by Producer,source type, payment type, tattoo number, all
// IF PAR.Report Type Usr is Payment Type
IF PAR.Report_Type_Usr = 'B';

EXECUTE FUNCTION(Rtv Hog Pop Rpt-PyT   RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1155004;
PARAMETER(WRK.HRH_Company_Number);
PARAMETER(WRK.HRH_Payment_Type);
PARAMETER(WRK.HRH_From_Kill_Date);
PARAMETER(PAR.HRH_Type_Of_Distribution);
PARAMETER(PAR.HRH_Report_Break);
PARAMETER(WRK.HRH_Company_Number);
PARAMETER(WRK.HRH_Source_Type);
PARAMETER(WRK.HRH_Payment_Type);
PARAMETER(WRK.HRH_Tattoo_Number);
PARAMETER(WRK.HRH_From_Kill_Date);
PARAMETER(WRK.HRH_To_Kill_Date);
PARAMETER(WRK.HRH_Farm_Site);
PARAMETER(WRK.HRH_Kill_Shift);
PARAMETER(WRK.SR_Source_Code);
PARAMETER(WRK.PD_Producer_Code);
PARAMETER(WRK.HRH_Prdcr_Location_Code);
PARAMETER(PAR.Report_Type_Usr);
{
 //?USER: Initialize routine

 //?E2423 Mtech Live or Not Live *** Interfaces to HPS ***
 //?Get the MTech Live Yes or No
 DO;

 //?Mtech Live Yes or no
 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER('MTECHLIVE');
 PARAMETER(WRK.System_Value_Alpha_USR);

 // LCL.MTech Live Yes or No = WRK.System Value Alpha    USR
 LCL.MTech_Live_Yes_or_No = WRK.System_Value_Alpha_USR;

 ENDDO;

 //?USER: Process Data record

 //?Selection
 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 CASE;

 // IF DB1.TH Hog Class Type is Resale
 IF DB1.TH_Hog_Class_Type = 'R';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 CASE;

 // IF DB1.TH Payment Sts is Paid Producer
 IF DB1.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?Date selection
 CASE;

 // IF DB1.TH Kill Date LT PAR.HRH From Kill Date
 IF DB1.TH_Kill_Date < PAR.HRH_From_Kill_Date;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 //?Date selection
 // IF DB1.TH Kill Date GT PAR.HRH To Kill Date
 IF DB1.TH_Kill_Date > PAR.HRH_To_Kill_Date;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 CASE;

 // IF WRK.Record Found USR is Record Found
 IF WRK.Record_Found_USR = 'Y';

 EXECUTE FUNCTION(Upd Hog Popltn Rpt    IF) TYPE(EXCINTFUN)                      AB1154541;
 PARAMETER(PAR.HRH_Type_Of_Distribution);
 PARAMETER(PAR.HRH_Report_Break);
 PARAMETER(WRK.Head_Killed_Total_Usr);
 PARAMETER(WRK.Hot_Weight_Tot_USR);
 PARAMETER(WRK.Backfat_Wgt_USR);
 PARAMETER(WRK.Loin_Eye_Wgt_USR);
 PARAMETER(WRK.Light_Refl_Wgt_Usr);
 PARAMETER(WRK.Lean_Wgt_USR);
 PARAMETER(WRK.Head_Adds_SUM);
 PARAMETER(WRK.Live_wgt_total_11_1_USR);
 PARAMETER(WRK.Head_Total_USR);
 {
  //?Execute internal function

  CASE;

  // IF PAR.HRH Head Killed NE WRK.Zero USR
  IF PAR.HRH_Head_Killed <> WRK.Zero_USR;

  // WRK.HRH AVG Hot Weight = PAR.Hot Weight Tot USR / PAR.HRH Head Killed *
  WRK.HRH_AVG_Hot_Weight = PAR.Hot_Weight_Tot_USR / PAR.HRH_Head_Killed;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH AVG Hot Weight = CON.*ZERO
  WRK.HRH_AVG_Hot_Weight = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.Head Total USR NE WRK.Zero USR
  IF PAR.Head_Total_USR <> WRK.Zero_USR;

  // WRK.HRH Avg Live Wgt = PAR.Live wgt total 11.1   USR / PAR.Head Total USR *
  WRK.HRH_Avg_Live_Wgt = PAR.Live_wgt_total_11_1_USR / PAR.Head_Total_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH Avg Live Wgt = CON.*ZERO
  WRK.HRH_Avg_Live_Wgt = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.Hot Weight Tot USR NE WRK.Zero USR
  IF PAR.Hot_Weight_Tot_USR <> WRK.Zero_USR;

  // WRK.HRH Avg Back Fat = PAR.Backfat * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Back_Fat = PAR.Backfat_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Loin Eye = PAR.Loin-Eye * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Loin_Eye = PAR.Loin_Eye_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Lean % = PAR.Lean % * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Lean = PAR.Lean_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Light Rfl = PAR.Light Refl * Wgt Usr / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Light_Rfl = PAR.Light_Refl_Wgt_Usr / PAR.Hot_Weight_Tot_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH Avg Back Fat = CON.*ZERO
  WRK.HRH_Avg_Back_Fat = *ZERO;

  // WRK.HRH Avg Loin Eye = CON.*ZERO
  WRK.HRH_Avg_Loin_Eye = *ZERO;

  // WRK.HRH Avg Lean % = CON.*ZERO
  WRK.HRH_Avg_Lean = *ZERO;

  // WRK.HRH Avg Light Rfl = CON.*ZERO
  WRK.HRH_Avg_Light_Rfl = *ZERO;

  ENDIF;

  //?Percent Adjusted
  CASE;

  // IF PAR.HRH Head Killed is Greater then Zero
  IF PAR.HRH_Head_Killed > *ZERO;

  // Percent Adjusted
  WRK.HRH_Adjusted = ( PAR.Head_Adds_SUM / PAR.HRH_Head_Killed ) * 100;

  //?Percent Adjusted
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH % Adjusted = CON.*ZERO
  WRK.HRH_Adjusted = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(Chg Hog Ppltn Rpt-Tat  CH) TYPE(CHGOBJ) FILE(PKDACPP)          AB1154609;
  PARAMETER(PAR.HRH_Type_Of_Distribution);
  PARAMETER(PAR.HRH_Report_Break);
  PARAMETER(PAR.HRH_Head_Killed);
  PARAMETER(WRK.HRH_AVG_Hot_Weight);
  PARAMETER(WRK.HRH_Avg_Live_Wgt);
  PARAMETER(WRK.HRH_Avg_Light_Rfl);
  PARAMETER(WRK.HRH_Avg_Loin_Eye);
  PARAMETER(WRK.HRH_Avg_Back_Fat);
  PARAMETER(WRK.HRH_Avg_Lean);
  PARAMETER(WRK.HRH_Adjusted);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 QUIT;

 ENDIF;

 //?Source Type
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Source Type EQ WRK.Blank USR
 IF PAR.HRH_Source_Type = WRK.Blank_USR;

 // IF DB1.TH Source Type EQ PAR.HRH Source Type
 IF DB1.TH_Source_Type = PAR.HRH_Source_Type;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Source Code
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.SR Source Code EQ WRK.Blank USR
 IF PAR.SR_Source_Code = WRK.Blank_USR;

 // IF DB1.TH Source Code EQ PAR.SR Source Code
 IF DB1.TH_Source_Code = PAR.SR_Source_Code;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Producer / location
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.PD Producer Code EQ WRK.Blank USR
 IF PAR.PD_Producer_Code = WRK.Blank_USR;

 // IF PAR.PD Producer Code EQ DB1.PD Producer Code
 IF PAR.PD_Producer_Code = DB1.PD_Producer_Code;

 //?Location
 CASE;

 // IF DB1.PD Producer Code EQ PAR.PD Producer Code
 IF DB1.PD_Producer_Code = PAR.PD_Producer_Code;

 CASE;

 // IF PAR.HRH Prdcr Location Code EQ WRK.Blank USR
 IF PAR.HRH_Prdcr_Location_Code = WRK.Blank_USR;

 // IF DB1.PL Location Code EQ PAR.HRH Prdcr Location Code
 IF DB1.PL_Location_Code = PAR.HRH_Prdcr_Location_Code;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Shift
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Kill Shift EQ WRK.Blank USR
 IF PAR.HRH_Kill_Shift = WRK.Blank_USR;

 // IF DB1.TH Schedule Kill Shift EQ PAR.HRH Kill Shift
 IF DB1.TH_Schedule_Kill_Shift = PAR.HRH_Kill_Shift;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Tattoo number
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Tattoo Number EQ WRK.Zero USR
 IF PAR.HRH_Tattoo_Number = WRK.Zero_USR;

 // IF DB1.TH Tattoo Number EQ PAR.HRH Tattoo Number
 IF DB1.TH_Tattoo_Number = PAR.HRH_Tattoo_Number;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Farm Site
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Farm Site NE WRK.Zero USR
 IF PAR.HRH_Farm_Site <> WRK.Zero_USR;

 CASE;

 // IF DB1.TH Source Type is External
 IF DB1.TH_Source_Type = 'E';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.MTech Live Yes or No is No MTech not Live
 IF LCL.MTech_Live_Yes_or_No = 'N';

 //?* 01/27/03 PKD PK0495 Replaced HP255 with HP249.
 // Call program Z1v HPS Farm Info     UP.
 CALL PROGRAM(Z1v HPS Farm Info     UP) ('HP249');
 PARAMETER(PGM.*Return_code);
 PARAMETER(DB1.TH_HPS_Movement_Ref_#);
 PARAMETER(WRK.Farm_site_Name_f_HPS_USR);
 PARAMETER(WRK.Farm_Site_USR);
 PARAMETER(WRK.HPS_FS_Comp_Relation_USR);
 PARAMETER(WRK.State);

 CASE;

 // IF WRK.Farm Site USR NE PAR.HRH Farm Site
 IF WRK.Farm_Site_USR <> PAR.HRH_Farm_Site;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 // IF LCL.MTech Live Yes or No is Yes MTech is Live
 IF LCL.MTech_Live_Yes_or_No = 'Y';

 // WRK.Farm Site USR = DB1.TH HPS Farm Site
 WRK.Farm_Site_USR = DB1.TH_HPS_Farm_Site;

 CASE;

 // IF WRK.Farm Site USR NE PAR.HRH Farm Site
 IF WRK.Farm_Site_USR <> PAR.HRH_Farm_Site;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // WRK.Record Found USR = CND.Record Found
 WRK.Record_Found_USR = 'Y';

 // WRK.Weighted Avg Sum = DB1.TH Avg Backfat * DB1.TH Hot Wgt *
 WRK.Weighted_Avg_Sum = DB1.TH_Avg_Backfat * DB1.TH_Hot_Wgt;

 // WRK.Backfat * Wgt USR = WRK.Backfat * Wgt USR + WRK.Weighted Avg Sum
 WRK.Backfat_Wgt_USR = WRK.Backfat_Wgt_USR + WRK.Weighted_Avg_Sum;

 // WRK.Weighted Avg Sum = DB1.TH Avg Loin Eye Depth * DB1.TH Hot Wgt *
 WRK.Weighted_Avg_Sum = DB1.TH_Avg_Loin_Eye_Depth * DB1.TH_Hot_Wgt;

 // WRK.Loin-Eye * Wgt USR = WRK.Loin-Eye * Wgt USR + WRK.Weighted Avg Sum
 WRK.Loin_Eye_Wgt_USR = WRK.Loin_Eye_Wgt_USR + WRK.Weighted_Avg_Sum;

 // WRK.Weighted Avg Sum = DB1.TH Avg Lean Percent * DB1.TH Hot Wgt *
 WRK.Weighted_Avg_Sum = DB1.TH_Avg_Lean_Percent * DB1.TH_Hot_Wgt;

 // WRK.Lean % * Wgt USR = WRK.Lean % * Wgt USR + WRK.Weighted Avg Sum
 WRK.Lean_Wgt_USR = WRK.Lean_Wgt_USR + WRK.Weighted_Avg_Sum;

 // WRK.Weighted Avg Sum = DB1.TH Avg Light Reflectance * DB1.TH Hot Wgt *
 WRK.Weighted_Avg_Sum = DB1.TH_Avg_Light_Reflectance * DB1.TH_Hot_Wgt;

 // WRK.Light Refl * Wgt Usr = WRK.Light Refl * Wgt Usr + WRK.Weighted Avg Sum
 WRK.Light_Refl_Wgt_Usr = WRK.Light_Refl_Wgt_Usr + WRK.Weighted_Avg_Sum;

 // WRK.Hot Weight Tot USR = WRK.Hot Weight Tot USR + DB1.TH Hot Wgt
 WRK.Hot_Weight_Tot_USR = WRK.Hot_Weight_Tot_USR + DB1.TH_Hot_Wgt;

 // WRK.Head Killed Total Usr = WRK.Head Killed Total Usr + DB1.TH Head Killed
 WRK.Head_Killed_Total_Usr = WRK.Head_Killed_Total_Usr + DB1.TH_Head_Killed;

 // WRK.Head Adds             SUM = WRK.Head Adds             SUM + DB1.TH Head Adds
 WRK.Head_Adds_SUM = WRK.Head_Adds_SUM + DB1.TH_Head_Adds;

 // WRK.Live wgt total 11.1   USR = WRK.Live wgt total 11.1   USR + DB1.TH Live Wgt
 WRK.Live_wgt_total_11_1_USR = WRK.Live_wgt_total_11_1_USR + DB1.TH_Live_Wgt;

 // WRK.Head Total USR = WRK.Head Total USR + DB1.TH Head Received
 WRK.Head_Total_USR = WRK.Head_Total_USR + DB1.TH_Head_Received;

 ENDIF;

 //?USER: Exit processing

 CASE;

 // IF WRK.Record Found USR is Record Found
 IF WRK.Record_Found_USR = 'Y';

 EXECUTE FUNCTION(Upd Hog Popltn Rpt    IF) TYPE(EXCINTFUN)                      AB1154541;
 PARAMETER(PAR.HRH_Type_Of_Distribution);
 PARAMETER(PAR.HRH_Report_Break);
 PARAMETER(WRK.Head_Killed_Total_Usr);
 PARAMETER(WRK.Hot_Weight_Tot_USR);
 PARAMETER(WRK.Backfat_Wgt_USR);
 PARAMETER(WRK.Loin_Eye_Wgt_USR);
 PARAMETER(WRK.Light_Refl_Wgt_Usr);
 PARAMETER(WRK.Lean_Wgt_USR);
 PARAMETER(WRK.Head_Adds_SUM);
 PARAMETER(WRK.Live_wgt_total_11_1_USR);
 PARAMETER(WRK.Head_Total_USR);
 {
  //?Execute internal function

  CASE;

  // IF PAR.HRH Head Killed NE WRK.Zero USR
  IF PAR.HRH_Head_Killed <> WRK.Zero_USR;

  // WRK.HRH AVG Hot Weight = PAR.Hot Weight Tot USR / PAR.HRH Head Killed *
  WRK.HRH_AVG_Hot_Weight = PAR.Hot_Weight_Tot_USR / PAR.HRH_Head_Killed;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH AVG Hot Weight = CON.*ZERO
  WRK.HRH_AVG_Hot_Weight = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.Head Total USR NE WRK.Zero USR
  IF PAR.Head_Total_USR <> WRK.Zero_USR;

  // WRK.HRH Avg Live Wgt = PAR.Live wgt total 11.1   USR / PAR.Head Total USR *
  WRK.HRH_Avg_Live_Wgt = PAR.Live_wgt_total_11_1_USR / PAR.Head_Total_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH Avg Live Wgt = CON.*ZERO
  WRK.HRH_Avg_Live_Wgt = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.Hot Weight Tot USR NE WRK.Zero USR
  IF PAR.Hot_Weight_Tot_USR <> WRK.Zero_USR;

  // WRK.HRH Avg Back Fat = PAR.Backfat * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Back_Fat = PAR.Backfat_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Loin Eye = PAR.Loin-Eye * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Loin_Eye = PAR.Loin_Eye_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Lean % = PAR.Lean % * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Lean = PAR.Lean_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Light Rfl = PAR.Light Refl * Wgt Usr / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Light_Rfl = PAR.Light_Refl_Wgt_Usr / PAR.Hot_Weight_Tot_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH Avg Back Fat = CON.*ZERO
  WRK.HRH_Avg_Back_Fat = *ZERO;

  // WRK.HRH Avg Loin Eye = CON.*ZERO
  WRK.HRH_Avg_Loin_Eye = *ZERO;

  // WRK.HRH Avg Lean % = CON.*ZERO
  WRK.HRH_Avg_Lean = *ZERO;

  // WRK.HRH Avg Light Rfl = CON.*ZERO
  WRK.HRH_Avg_Light_Rfl = *ZERO;

  ENDIF;

  //?Percent Adjusted
  CASE;

  // IF PAR.HRH Head Killed is Greater then Zero
  IF PAR.HRH_Head_Killed > *ZERO;

  // Percent Adjusted
  WRK.HRH_Adjusted = ( PAR.Head_Adds_SUM / PAR.HRH_Head_Killed ) * 100;

  //?Percent Adjusted
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH % Adjusted = CON.*ZERO
  WRK.HRH_Adjusted = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(Chg Hog Ppltn Rpt-Tat  CH) TYPE(CHGOBJ) FILE(PKDACPP)          AB1154609;
  PARAMETER(PAR.HRH_Type_Of_Distribution);
  PARAMETER(PAR.HRH_Report_Break);
  PARAMETER(PAR.HRH_Head_Killed);
  PARAMETER(WRK.HRH_AVG_Hot_Weight);
  PARAMETER(WRK.HRH_Avg_Live_Wgt);
  PARAMETER(WRK.HRH_Avg_Light_Rfl);
  PARAMETER(WRK.HRH_Avg_Loin_Eye);
  PARAMETER(WRK.HRH_Avg_Back_Fat);
  PARAMETER(WRK.HRH_Avg_Lean);
  PARAMETER(WRK.HRH_Adjusted);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

}


//?Tattoo by Producer,source type, payment type, tattoo number, all
// IF PAR.Report Type Usr is Tattoo
IF PAR.Report_Type_Usr = 'T';

EXECUTE FUNCTION(Rtv Hog Pop Rpt-Tatto Rt) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1155324;
PARAMETER(WRK.HRH_Company_Number);
PARAMETER(WRK.HRH_From_Kill_Date);
PARAMETER(WRK.HRH_Tattoo_Number);
PARAMETER(PAR.HRH_Type_Of_Distribution);
PARAMETER(PAR.HRH_Report_Break);
PARAMETER(WRK.HRH_Company_Number);
PARAMETER(WRK.HRH_Source_Type);
PARAMETER(WRK.HRH_Payment_Type);
PARAMETER(WRK.HRH_Tattoo_Number);
PARAMETER(WRK.HRH_From_Kill_Date);
PARAMETER(WRK.HRH_To_Kill_Date);
PARAMETER(WRK.HRH_Farm_Site);
PARAMETER(WRK.HRH_Kill_Shift);
PARAMETER(WRK.SR_Source_Code);
PARAMETER(WRK.PD_Producer_Code);
PARAMETER(WRK.HRH_Prdcr_Location_Code);
PARAMETER(PAR.Report_Type_Usr);
{
 //?USER: Initialize routine

 //?E2423 Mtech Live or Not Live *** Interfaces to HPS ***
 //?Get the MTech Live Yes or No
 DO;

 //?Mtech Live Yes or no
 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER('MTECHLIVE');
 PARAMETER(WRK.System_Value_Alpha_USR);

 // LCL.MTech Live Yes or No = WRK.System Value Alpha    USR
 LCL.MTech_Live_Yes_or_No = WRK.System_Value_Alpha_USR;

 ENDDO;

 //?USER: Process Data record

 //?Selection
 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 CASE;

 // IF DB1.TH Hog Class Type is Resale
 IF DB1.TH_Hog_Class_Type = 'R';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 CASE;

 // IF DB1.TH Payment Sts is Paid Producer
 IF DB1.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?Date selection
 CASE;

 // IF DB1.TH Kill Date LT PAR.HRH From Kill Date
 IF DB1.TH_Kill_Date < PAR.HRH_From_Kill_Date;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 //?Date selection
 // IF DB1.TH Kill Date GT PAR.HRH To Kill Date
 IF DB1.TH_Kill_Date > PAR.HRH_To_Kill_Date;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 CASE;

 // IF WRK.Record Found USR is Record Found
 IF WRK.Record_Found_USR = 'Y';

 EXECUTE FUNCTION(Upd Hog Popltn Rpt    IF) TYPE(EXCINTFUN)                      AB1154541;
 PARAMETER(PAR.HRH_Type_Of_Distribution);
 PARAMETER(PAR.HRH_Report_Break);
 PARAMETER(WRK.Head_Killed_Total_Usr);
 PARAMETER(WRK.Hot_Weight_Tot_USR);
 PARAMETER(WRK.Backfat_Wgt_USR);
 PARAMETER(WRK.Loin_Eye_Wgt_USR);
 PARAMETER(WRK.Light_Refl_Wgt_Usr);
 PARAMETER(WRK.Lean_Wgt_USR);
 PARAMETER(WRK.Head_Adds_SUM);
 PARAMETER(WRK.Live_wgt_total_11_1_USR);
 PARAMETER(WRK.Head_Total_USR);
 {
  //?Execute internal function

  CASE;

  // IF PAR.HRH Head Killed NE WRK.Zero USR
  IF PAR.HRH_Head_Killed <> WRK.Zero_USR;

  // WRK.HRH AVG Hot Weight = PAR.Hot Weight Tot USR / PAR.HRH Head Killed *
  WRK.HRH_AVG_Hot_Weight = PAR.Hot_Weight_Tot_USR / PAR.HRH_Head_Killed;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH AVG Hot Weight = CON.*ZERO
  WRK.HRH_AVG_Hot_Weight = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.Head Total USR NE WRK.Zero USR
  IF PAR.Head_Total_USR <> WRK.Zero_USR;

  // WRK.HRH Avg Live Wgt = PAR.Live wgt total 11.1   USR / PAR.Head Total USR *
  WRK.HRH_Avg_Live_Wgt = PAR.Live_wgt_total_11_1_USR / PAR.Head_Total_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH Avg Live Wgt = CON.*ZERO
  WRK.HRH_Avg_Live_Wgt = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.Hot Weight Tot USR NE WRK.Zero USR
  IF PAR.Hot_Weight_Tot_USR <> WRK.Zero_USR;

  // WRK.HRH Avg Back Fat = PAR.Backfat * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Back_Fat = PAR.Backfat_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Loin Eye = PAR.Loin-Eye * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Loin_Eye = PAR.Loin_Eye_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Lean % = PAR.Lean % * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Lean = PAR.Lean_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Light Rfl = PAR.Light Refl * Wgt Usr / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Light_Rfl = PAR.Light_Refl_Wgt_Usr / PAR.Hot_Weight_Tot_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH Avg Back Fat = CON.*ZERO
  WRK.HRH_Avg_Back_Fat = *ZERO;

  // WRK.HRH Avg Loin Eye = CON.*ZERO
  WRK.HRH_Avg_Loin_Eye = *ZERO;

  // WRK.HRH Avg Lean % = CON.*ZERO
  WRK.HRH_Avg_Lean = *ZERO;

  // WRK.HRH Avg Light Rfl = CON.*ZERO
  WRK.HRH_Avg_Light_Rfl = *ZERO;

  ENDIF;

  //?Percent Adjusted
  CASE;

  // IF PAR.HRH Head Killed is Greater then Zero
  IF PAR.HRH_Head_Killed > *ZERO;

  // Percent Adjusted
  WRK.HRH_Adjusted = ( PAR.Head_Adds_SUM / PAR.HRH_Head_Killed ) * 100;

  //?Percent Adjusted
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH % Adjusted = CON.*ZERO
  WRK.HRH_Adjusted = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(Chg Hog Ppltn Rpt-Tat  CH) TYPE(CHGOBJ) FILE(PKDACPP)          AB1154609;
  PARAMETER(PAR.HRH_Type_Of_Distribution);
  PARAMETER(PAR.HRH_Report_Break);
  PARAMETER(PAR.HRH_Head_Killed);
  PARAMETER(WRK.HRH_AVG_Hot_Weight);
  PARAMETER(WRK.HRH_Avg_Live_Wgt);
  PARAMETER(WRK.HRH_Avg_Light_Rfl);
  PARAMETER(WRK.HRH_Avg_Loin_Eye);
  PARAMETER(WRK.HRH_Avg_Back_Fat);
  PARAMETER(WRK.HRH_Avg_Lean);
  PARAMETER(WRK.HRH_Adjusted);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 QUIT;

 ENDIF;

 //?Source Type
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Source Type EQ WRK.Blank USR
 IF PAR.HRH_Source_Type = WRK.Blank_USR;

 // IF DB1.TH Source Type EQ PAR.HRH Source Type
 IF DB1.TH_Source_Type = PAR.HRH_Source_Type;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Source Code
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.SR Source Code EQ WRK.Blank USR
 IF PAR.SR_Source_Code = WRK.Blank_USR;

 // IF DB1.TH Source Code EQ PAR.SR Source Code
 IF DB1.TH_Source_Code = PAR.SR_Source_Code;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Payment type
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Payment Type EQ WRK.Blank USR
 IF PAR.HRH_Payment_Type = WRK.Blank_USR;

 // IF DB1.TH Payment Type EQ PAR.HRH Payment Type
 IF DB1.TH_Payment_Type = PAR.HRH_Payment_Type;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Producer / location
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.PD Producer Code EQ WRK.Blank USR
 IF PAR.PD_Producer_Code = WRK.Blank_USR;

 // IF PAR.PD Producer Code EQ DB1.PD Producer Code
 IF PAR.PD_Producer_Code = DB1.PD_Producer_Code;

 //?Location
 CASE;

 // IF DB1.PD Producer Code EQ PAR.PD Producer Code
 IF DB1.PD_Producer_Code = PAR.PD_Producer_Code;

 CASE;

 // IF PAR.HRH Prdcr Location Code EQ WRK.Blank USR
 IF PAR.HRH_Prdcr_Location_Code = WRK.Blank_USR;

 // IF DB1.PL Location Code EQ PAR.HRH Prdcr Location Code
 IF DB1.PL_Location_Code = PAR.HRH_Prdcr_Location_Code;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Shift
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Kill Shift EQ WRK.Blank USR
 IF PAR.HRH_Kill_Shift = WRK.Blank_USR;

 // IF DB1.TH Schedule Kill Shift EQ PAR.HRH Kill Shift
 IF DB1.TH_Schedule_Kill_Shift = PAR.HRH_Kill_Shift;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Farm Site
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Farm Site NE WRK.Zero USR
 IF PAR.HRH_Farm_Site <> WRK.Zero_USR;

 CASE;

 // IF DB1.TH Source Type is External
 IF DB1.TH_Source_Type = 'E';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.MTech Live Yes or No is No MTech not Live
 IF LCL.MTech_Live_Yes_or_No = 'N';

 //?* 01/27/03 PKD PK0495 Replaced HP255 with HP249.
 // Call program Z1v HPS Farm Info     UP.
 CALL PROGRAM(Z1v HPS Farm Info     UP) ('HP249');
 PARAMETER(PGM.*Return_code);
 PARAMETER(DB1.TH_HPS_Movement_Ref_#);
 PARAMETER(WRK.Farm_site_Name_f_HPS_USR);
 PARAMETER(WRK.Farm_Site_USR);
 PARAMETER(WRK.HPS_FS_Comp_Relation_USR);
 PARAMETER(WRK.State);

 CASE;

 // IF WRK.Farm Site USR NE PAR.HRH Farm Site
 IF WRK.Farm_Site_USR <> PAR.HRH_Farm_Site;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 // IF LCL.MTech Live Yes or No is Yes MTech is Live
 IF LCL.MTech_Live_Yes_or_No = 'Y';

 // WRK.Farm Site USR = DB1.TH HPS Farm Site
 WRK.Farm_Site_USR = DB1.TH_HPS_Farm_Site;

 CASE;

 // IF WRK.Farm Site USR NE PAR.HRH Farm Site
 IF WRK.Farm_Site_USR <> PAR.HRH_Farm_Site;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // WRK.Record Found USR = CND.Record Found
 WRK.Record_Found_USR = 'Y';

 // WRK.Backfat * Wgt USR = DB1.TH Avg Backfat * DB1.TH Hot Wgt *
 WRK.Backfat_Wgt_USR = DB1.TH_Avg_Backfat * DB1.TH_Hot_Wgt;

 // WRK.Loin-Eye * Wgt USR = DB1.TH Avg Loin Eye Depth * DB1.TH Hot Wgt *
 WRK.Loin_Eye_Wgt_USR = DB1.TH_Avg_Loin_Eye_Depth * DB1.TH_Hot_Wgt;

 // WRK.Lean % * Wgt USR = DB1.TH Avg Lean Percent * DB1.TH Hot Wgt *
 WRK.Lean_Wgt_USR = DB1.TH_Avg_Lean_Percent * DB1.TH_Hot_Wgt;

 // WRK.Light Refl * Wgt Usr = DB1.TH Avg Light Reflectance * DB1.TH Hot Wgt *
 WRK.Light_Refl_Wgt_Usr = DB1.TH_Avg_Light_Reflectance * DB1.TH_Hot_Wgt;

 // WRK.Hot Weight Tot USR = WRK.Hot Weight Tot USR + DB1.TH Hot Wgt
 WRK.Hot_Weight_Tot_USR = WRK.Hot_Weight_Tot_USR + DB1.TH_Hot_Wgt;

 // WRK.Head Killed Total Usr = WRK.Head Killed Total Usr + DB1.TH Head Killed
 WRK.Head_Killed_Total_Usr = WRK.Head_Killed_Total_Usr + DB1.TH_Head_Killed;

 // WRK.Head Adds             SUM = WRK.Head Adds             SUM + DB1.TH Head Adds
 WRK.Head_Adds_SUM = WRK.Head_Adds_SUM + DB1.TH_Head_Adds;

 // WRK.Live wgt total 11.1   USR = WRK.Live wgt total 11.1   USR + DB1.TH Live Wgt
 WRK.Live_wgt_total_11_1_USR = WRK.Live_wgt_total_11_1_USR + DB1.TH_Live_Wgt;

 // WRK.Head Total USR = WRK.Head Total USR + DB1.TH Head Received
 WRK.Head_Total_USR = WRK.Head_Total_USR + DB1.TH_Head_Received;

 ENDIF;

 //?USER: Exit processing

 CASE;

 // IF WRK.Record Found USR is Record Found
 IF WRK.Record_Found_USR = 'Y';

 EXECUTE FUNCTION(Upd Hog Popltn Rpt    IF) TYPE(EXCINTFUN)                      AB1154541;
 PARAMETER(PAR.HRH_Type_Of_Distribution);
 PARAMETER(PAR.HRH_Report_Break);
 PARAMETER(WRK.Head_Killed_Total_Usr);
 PARAMETER(WRK.Hot_Weight_Tot_USR);
 PARAMETER(WRK.Backfat_Wgt_USR);
 PARAMETER(WRK.Loin_Eye_Wgt_USR);
 PARAMETER(WRK.Light_Refl_Wgt_Usr);
 PARAMETER(WRK.Lean_Wgt_USR);
 PARAMETER(WRK.Head_Adds_SUM);
 PARAMETER(WRK.Live_wgt_total_11_1_USR);
 PARAMETER(WRK.Head_Total_USR);
 {
  //?Execute internal function

  CASE;

  // IF PAR.HRH Head Killed NE WRK.Zero USR
  IF PAR.HRH_Head_Killed <> WRK.Zero_USR;

  // WRK.HRH AVG Hot Weight = PAR.Hot Weight Tot USR / PAR.HRH Head Killed *
  WRK.HRH_AVG_Hot_Weight = PAR.Hot_Weight_Tot_USR / PAR.HRH_Head_Killed;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH AVG Hot Weight = CON.*ZERO
  WRK.HRH_AVG_Hot_Weight = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.Head Total USR NE WRK.Zero USR
  IF PAR.Head_Total_USR <> WRK.Zero_USR;

  // WRK.HRH Avg Live Wgt = PAR.Live wgt total 11.1   USR / PAR.Head Total USR *
  WRK.HRH_Avg_Live_Wgt = PAR.Live_wgt_total_11_1_USR / PAR.Head_Total_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH Avg Live Wgt = CON.*ZERO
  WRK.HRH_Avg_Live_Wgt = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.Hot Weight Tot USR NE WRK.Zero USR
  IF PAR.Hot_Weight_Tot_USR <> WRK.Zero_USR;

  // WRK.HRH Avg Back Fat = PAR.Backfat * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Back_Fat = PAR.Backfat_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Loin Eye = PAR.Loin-Eye * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Loin_Eye = PAR.Loin_Eye_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Lean % = PAR.Lean % * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Lean = PAR.Lean_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Light Rfl = PAR.Light Refl * Wgt Usr / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Light_Rfl = PAR.Light_Refl_Wgt_Usr / PAR.Hot_Weight_Tot_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH Avg Back Fat = CON.*ZERO
  WRK.HRH_Avg_Back_Fat = *ZERO;

  // WRK.HRH Avg Loin Eye = CON.*ZERO
  WRK.HRH_Avg_Loin_Eye = *ZERO;

  // WRK.HRH Avg Lean % = CON.*ZERO
  WRK.HRH_Avg_Lean = *ZERO;

  // WRK.HRH Avg Light Rfl = CON.*ZERO
  WRK.HRH_Avg_Light_Rfl = *ZERO;

  ENDIF;

  //?Percent Adjusted
  CASE;

  // IF PAR.HRH Head Killed is Greater then Zero
  IF PAR.HRH_Head_Killed > *ZERO;

  // Percent Adjusted
  WRK.HRH_Adjusted = ( PAR.Head_Adds_SUM / PAR.HRH_Head_Killed ) * 100;

  //?Percent Adjusted
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH % Adjusted = CON.*ZERO
  WRK.HRH_Adjusted = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(Chg Hog Ppltn Rpt-Tat  CH) TYPE(CHGOBJ) FILE(PKDACPP)          AB1154609;
  PARAMETER(PAR.HRH_Type_Of_Distribution);
  PARAMETER(PAR.HRH_Report_Break);
  PARAMETER(PAR.HRH_Head_Killed);
  PARAMETER(WRK.HRH_AVG_Hot_Weight);
  PARAMETER(WRK.HRH_Avg_Live_Wgt);
  PARAMETER(WRK.HRH_Avg_Light_Rfl);
  PARAMETER(WRK.HRH_Avg_Loin_Eye);
  PARAMETER(WRK.HRH_Avg_Back_Fat);
  PARAMETER(WRK.HRH_Avg_Lean);
  PARAMETER(WRK.HRH_Adjusted);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

}


//?Tattoo by Producer,source type, payment type, tattoo number, all
// IF PAR.Report Type Usr is Shift
IF PAR.Report_Type_Usr = 'H';

EXECUTE FUNCTION(Rtv Hog Pop Rpt-Shift RT) TYPE(RTVOBJ) FILE(PKB1CPP)           AB1217173;
PARAMETER(WRK.HRH_Company_Number);
PARAMETER(WRK.HRH_Kill_Shift);
PARAMETER(WRK.HRH_From_Kill_Date);
PARAMETER(PAR.HRH_Type_Of_Distribution);
PARAMETER(PAR.HRH_Report_Break);
PARAMETER(WRK.HRH_Company_Number);
PARAMETER(WRK.HRH_Source_Type);
PARAMETER(WRK.HRH_Payment_Type);
PARAMETER(WRK.HRH_Tattoo_Number);
PARAMETER(WRK.HRH_From_Kill_Date);
PARAMETER(WRK.HRH_To_Kill_Date);
PARAMETER(WRK.HRH_Farm_Site);
PARAMETER(WRK.HRH_Kill_Shift);
PARAMETER(WRK.SR_Source_Code);
PARAMETER(WRK.PD_Producer_Code);
PARAMETER(WRK.HRH_Prdcr_Location_Code);
PARAMETER(PAR.Report_Type_Usr);
{
 //?USER: Initialize routine

 // WRK.Hot Weight Tot USR = CON.*ZERO
 WRK.Hot_Weight_Tot_USR = *ZERO;

 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?Date selection
 CASE;

 // IF DB1.TH Kill Date LT PAR.HRH From Kill Date
 IF DB1.TH_Kill_Date < PAR.HRH_From_Kill_Date;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 //?Date selection
 // IF DB1.TH Kill Date GT PAR.HRH To Kill Date
 IF DB1.TH_Kill_Date > PAR.HRH_To_Kill_Date;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 CASE;

 // IF WRK.Record Found USR is Record Found
 IF WRK.Record_Found_USR = 'Y';

 EXECUTE FUNCTION(Upd Hog Popltn Rpt    IF) TYPE(EXCINTFUN)                      AB1154541;
 PARAMETER(PAR.HRH_Type_Of_Distribution);
 PARAMETER(PAR.HRH_Report_Break);
 PARAMETER(WRK.Head_Killed_Total_Usr);
 PARAMETER(WRK.Hot_Weight_Tot_USR);
 PARAMETER(WRK.Backfat_Wgt_USR);
 PARAMETER(WRK.Loin_Eye_Wgt_USR);
 PARAMETER(WRK.Light_Refl_Wgt_Usr);
 PARAMETER(WRK.Lean_Wgt_USR);
 PARAMETER(WRK.Head_Adds_SUM);
 PARAMETER(WRK.Live_wgt_total_11_1_USR);
 PARAMETER(WRK.Head_Total_USR);
 {
  //?Execute internal function

  CASE;

  // IF PAR.HRH Head Killed NE WRK.Zero USR
  IF PAR.HRH_Head_Killed <> WRK.Zero_USR;

  // WRK.HRH AVG Hot Weight = PAR.Hot Weight Tot USR / PAR.HRH Head Killed *
  WRK.HRH_AVG_Hot_Weight = PAR.Hot_Weight_Tot_USR / PAR.HRH_Head_Killed;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH AVG Hot Weight = CON.*ZERO
  WRK.HRH_AVG_Hot_Weight = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.Head Total USR NE WRK.Zero USR
  IF PAR.Head_Total_USR <> WRK.Zero_USR;

  // WRK.HRH Avg Live Wgt = PAR.Live wgt total 11.1   USR / PAR.Head Total USR *
  WRK.HRH_Avg_Live_Wgt = PAR.Live_wgt_total_11_1_USR / PAR.Head_Total_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH Avg Live Wgt = CON.*ZERO
  WRK.HRH_Avg_Live_Wgt = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.Hot Weight Tot USR NE WRK.Zero USR
  IF PAR.Hot_Weight_Tot_USR <> WRK.Zero_USR;

  // WRK.HRH Avg Back Fat = PAR.Backfat * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Back_Fat = PAR.Backfat_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Loin Eye = PAR.Loin-Eye * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Loin_Eye = PAR.Loin_Eye_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Lean % = PAR.Lean % * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Lean = PAR.Lean_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Light Rfl = PAR.Light Refl * Wgt Usr / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Light_Rfl = PAR.Light_Refl_Wgt_Usr / PAR.Hot_Weight_Tot_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH Avg Back Fat = CON.*ZERO
  WRK.HRH_Avg_Back_Fat = *ZERO;

  // WRK.HRH Avg Loin Eye = CON.*ZERO
  WRK.HRH_Avg_Loin_Eye = *ZERO;

  // WRK.HRH Avg Lean % = CON.*ZERO
  WRK.HRH_Avg_Lean = *ZERO;

  // WRK.HRH Avg Light Rfl = CON.*ZERO
  WRK.HRH_Avg_Light_Rfl = *ZERO;

  ENDIF;

  //?Percent Adjusted
  CASE;

  // IF PAR.HRH Head Killed is Greater then Zero
  IF PAR.HRH_Head_Killed > *ZERO;

  // Percent Adjusted
  WRK.HRH_Adjusted = ( PAR.Head_Adds_SUM / PAR.HRH_Head_Killed ) * 100;

  //?Percent Adjusted
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH % Adjusted = CON.*ZERO
  WRK.HRH_Adjusted = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(Chg Hog Ppltn Rpt-Tat  CH) TYPE(CHGOBJ) FILE(PKDACPP)          AB1154609;
  PARAMETER(PAR.HRH_Type_Of_Distribution);
  PARAMETER(PAR.HRH_Report_Break);
  PARAMETER(PAR.HRH_Head_Killed);
  PARAMETER(WRK.HRH_AVG_Hot_Weight);
  PARAMETER(WRK.HRH_Avg_Live_Wgt);
  PARAMETER(WRK.HRH_Avg_Light_Rfl);
  PARAMETER(WRK.HRH_Avg_Loin_Eye);
  PARAMETER(WRK.HRH_Avg_Back_Fat);
  PARAMETER(WRK.HRH_Avg_Lean);
  PARAMETER(WRK.HRH_Adjusted);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 QUIT;

 ENDIF;

 //?Valid records for total.
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF DB1.CD Record Add/Del Sts is Valid Records for Totals
 IF DB1.CD_Record_Add_Del_Sts = 'A'/*BLANK;

 // AND DB1.RS Record Status is Active
 AND DB1.RS_Record_Status = 'A';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Source Type
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Source Type EQ WRK.Blank USR
 IF PAR.HRH_Source_Type = WRK.Blank_USR;

 // IF DB1.CD Source Type EQ PAR.HRH Source Type
 IF DB1.CD_Source_Type = PAR.HRH_Source_Type;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Source Code
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.SR Source Code EQ WRK.Blank USR
 IF PAR.SR_Source_Code = WRK.Blank_USR;

 // IF DB1.SR Source Code EQ PAR.SR Source Code
 IF DB1.SR_Source_Code = PAR.SR_Source_Code;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Payment type
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Payment Type EQ WRK.Blank USR
 IF PAR.HRH_Payment_Type = WRK.Blank_USR;

 // IF DB1.CD Payment Type EQ PAR.HRH Payment Type
 IF DB1.CD_Payment_Type = PAR.HRH_Payment_Type;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Producer / location
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.PD Producer Code EQ WRK.Blank USR
 IF PAR.PD_Producer_Code = WRK.Blank_USR;

 // IF PAR.PD Producer Code EQ DB1.PD Producer Code
 IF PAR.PD_Producer_Code = DB1.PD_Producer_Code;

 //?Location
 CASE;

 // IF DB1.PD Producer Code EQ PAR.PD Producer Code
 IF DB1.PD_Producer_Code = PAR.PD_Producer_Code;

 CASE;

 // IF PAR.HRH Prdcr Location Code EQ WRK.Blank USR
 IF PAR.HRH_Prdcr_Location_Code = WRK.Blank_USR;

 // IF DB1.CD Producer Loc/Farm EQ PAR.HRH Prdcr Location Code
 IF DB1.CD_Producer_Loc_Farm = PAR.HRH_Prdcr_Location_Code;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Tattoo
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Tattoo Number EQ WRK.Zero USR
 IF PAR.HRH_Tattoo_Number = WRK.Zero_USR;

 // IF DB1.TH Tattoo Number EQ PAR.HRH Tattoo Number
 IF DB1.TH_Tattoo_Number = PAR.HRH_Tattoo_Number;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // WRK.Record Found USR = CND.Record Found
 WRK.Record_Found_USR = 'Y';

 // WRK.Weighted Avg Sum = DB1.CD Backfat Thickness Inch * DB1.CD Carcass/Hot Weight
 WRK.Weighted_Avg_Sum = DB1.CD_Backfat_Thickness_Inch * DB1.CD_Carcass_Hot_Weight;

 // WRK.Backfat * Wgt USR = WRK.Backfat * Wgt USR + WRK.Weighted Avg Sum
 WRK.Backfat_Wgt_USR = WRK.Backfat_Wgt_USR + WRK.Weighted_Avg_Sum;

 // WRK.Weighted Avg Sum = DB1.CD Loin-Eye Depth Inch * DB1.CD Carcass/Hot Weight *
 WRK.Weighted_Avg_Sum = DB1.CD_Loin_Eye_Depth_Inch * DB1.CD_Carcass_Hot_Weight;

 // WRK.Loin-Eye * Wgt USR = WRK.Loin-Eye * Wgt USR + WRK.Weighted Avg Sum
 WRK.Loin_Eye_Wgt_USR = WRK.Loin_Eye_Wgt_USR + WRK.Weighted_Avg_Sum;

 // WRK.Weighted Avg Sum = DB1.CD Lean Percent * DB1.CD Carcass/Hot Weight *
 WRK.Weighted_Avg_Sum = DB1.CD_Lean_Percent * DB1.CD_Carcass_Hot_Weight;

 // WRK.Lean % * Wgt USR = WRK.Lean % * Wgt USR + WRK.Weighted Avg Sum
 WRK.Lean_Wgt_USR = WRK.Lean_Wgt_USR + WRK.Weighted_Avg_Sum;

 // WRK.Weighted Avg Sum = DB1.CD Light Reflectance * DB1.CD Carcass/Hot Weight *
 WRK.Weighted_Avg_Sum = DB1.CD_Light_Reflectance * DB1.CD_Carcass_Hot_Weight;

 // WRK.Light Refl * Wgt Usr = WRK.Light Refl * Wgt Usr + WRK.Weighted Avg Sum
 WRK.Light_Refl_Wgt_Usr = WRK.Light_Refl_Wgt_Usr + WRK.Weighted_Avg_Sum;

 // WRK.Hot Weight Tot USR = WRK.Hot Weight Tot USR + DB1.CD Carcass/Hot Weight
 WRK.Hot_Weight_Tot_USR = WRK.Hot_Weight_Tot_USR + DB1.CD_Carcass_Hot_Weight;

 // WRK.Head Killed Total Usr = WRK.Head Killed Total Usr + CON.1
 WRK.Head_Killed_Total_Usr = WRK.Head_Killed_Total_Usr + 1;

 // WRK.Head Adds             SUM = CON.*ZERO
 WRK.Head_Adds_SUM = *ZERO;

 // WRK.Live wgt total 11.1   USR = CON.*ZERO
 WRK.Live_wgt_total_11_1_USR = *ZERO;

 // WRK.Head Total USR = WRK.Head Killed Total Usr
 WRK.Head_Total_USR = WRK.Head_Killed_Total_Usr;

 ENDIF;

 //?USER: Exit processing

 CASE;

 // IF WRK.Record Found USR is Record Found
 IF WRK.Record_Found_USR = 'Y';

 EXECUTE FUNCTION(Upd Hog Popltn Rpt    IF) TYPE(EXCINTFUN)                      AB1154541;
 PARAMETER(PAR.HRH_Type_Of_Distribution);
 PARAMETER(PAR.HRH_Report_Break);
 PARAMETER(WRK.Head_Killed_Total_Usr);
 PARAMETER(WRK.Hot_Weight_Tot_USR);
 PARAMETER(WRK.Backfat_Wgt_USR);
 PARAMETER(WRK.Loin_Eye_Wgt_USR);
 PARAMETER(WRK.Light_Refl_Wgt_Usr);
 PARAMETER(WRK.Lean_Wgt_USR);
 PARAMETER(WRK.Head_Adds_SUM);
 PARAMETER(WRK.Live_wgt_total_11_1_USR);
 PARAMETER(WRK.Head_Total_USR);
 {
  //?Execute internal function

  CASE;

  // IF PAR.HRH Head Killed NE WRK.Zero USR
  IF PAR.HRH_Head_Killed <> WRK.Zero_USR;

  // WRK.HRH AVG Hot Weight = PAR.Hot Weight Tot USR / PAR.HRH Head Killed *
  WRK.HRH_AVG_Hot_Weight = PAR.Hot_Weight_Tot_USR / PAR.HRH_Head_Killed;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH AVG Hot Weight = CON.*ZERO
  WRK.HRH_AVG_Hot_Weight = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.Head Total USR NE WRK.Zero USR
  IF PAR.Head_Total_USR <> WRK.Zero_USR;

  // WRK.HRH Avg Live Wgt = PAR.Live wgt total 11.1   USR / PAR.Head Total USR *
  WRK.HRH_Avg_Live_Wgt = PAR.Live_wgt_total_11_1_USR / PAR.Head_Total_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH Avg Live Wgt = CON.*ZERO
  WRK.HRH_Avg_Live_Wgt = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.Hot Weight Tot USR NE WRK.Zero USR
  IF PAR.Hot_Weight_Tot_USR <> WRK.Zero_USR;

  // WRK.HRH Avg Back Fat = PAR.Backfat * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Back_Fat = PAR.Backfat_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Loin Eye = PAR.Loin-Eye * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Loin_Eye = PAR.Loin_Eye_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Lean % = PAR.Lean % * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Lean = PAR.Lean_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Light Rfl = PAR.Light Refl * Wgt Usr / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Light_Rfl = PAR.Light_Refl_Wgt_Usr / PAR.Hot_Weight_Tot_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH Avg Back Fat = CON.*ZERO
  WRK.HRH_Avg_Back_Fat = *ZERO;

  // WRK.HRH Avg Loin Eye = CON.*ZERO
  WRK.HRH_Avg_Loin_Eye = *ZERO;

  // WRK.HRH Avg Lean % = CON.*ZERO
  WRK.HRH_Avg_Lean = *ZERO;

  // WRK.HRH Avg Light Rfl = CON.*ZERO
  WRK.HRH_Avg_Light_Rfl = *ZERO;

  ENDIF;

  //?Percent Adjusted
  CASE;

  // IF PAR.HRH Head Killed is Greater then Zero
  IF PAR.HRH_Head_Killed > *ZERO;

  // Percent Adjusted
  WRK.HRH_Adjusted = ( PAR.Head_Adds_SUM / PAR.HRH_Head_Killed ) * 100;

  //?Percent Adjusted
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH % Adjusted = CON.*ZERO
  WRK.HRH_Adjusted = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(Chg Hog Ppltn Rpt-Tat  CH) TYPE(CHGOBJ) FILE(PKDACPP)          AB1154609;
  PARAMETER(PAR.HRH_Type_Of_Distribution);
  PARAMETER(PAR.HRH_Report_Break);
  PARAMETER(PAR.HRH_Head_Killed);
  PARAMETER(WRK.HRH_AVG_Hot_Weight);
  PARAMETER(WRK.HRH_Avg_Live_Wgt);
  PARAMETER(WRK.HRH_Avg_Light_Rfl);
  PARAMETER(WRK.HRH_Avg_Loin_Eye);
  PARAMETER(WRK.HRH_Avg_Back_Fat);
  PARAMETER(WRK.HRH_Avg_Lean);
  PARAMETER(WRK.HRH_Adjusted);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

}


//?Tattoo by Producer,source type, payment type, tattoo number, all
// IF *OTHERWISE
IF *OTHERWISE;

//?This will include farm site    HPE085
EXECUTE FUNCTION(Rtv Hog Pop Rpt-Dte   Rt) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1154966;
PARAMETER(WRK.HRH_Company_Number);
PARAMETER(WRK.HRH_From_Kill_Date);
PARAMETER(PAR.HRH_Type_Of_Distribution);
PARAMETER(PAR.HRH_Report_Break);
PARAMETER(WRK.HRH_Company_Number);
PARAMETER(WRK.HRH_Source_Type);
PARAMETER(WRK.HRH_Payment_Type);
PARAMETER(WRK.HRH_Tattoo_Number);
PARAMETER(WRK.HRH_From_Kill_Date);
PARAMETER(WRK.HRH_To_Kill_Date);
PARAMETER(WRK.HRH_Farm_Site);
PARAMETER(WRK.SR_Source_Code);
PARAMETER(WRK.PD_Producer_Code);
PARAMETER(WRK.HRH_Prdcr_Location_Code);
PARAMETER(PAR.Report_Type_Usr);
{
 //?USER: Initialize routine

 //?E2423 Mtech Live or Not Live *** Interfaces to HPS ***
 //?Get the MTech Live Yes or No
 DO;

 //?Mtech Live Yes or no
 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER('MTECHLIVE');
 PARAMETER(WRK.System_Value_Alpha_USR);

 // LCL.MTech Live Yes or No = WRK.System Value Alpha    USR
 LCL.MTech_Live_Yes_or_No = WRK.System_Value_Alpha_USR;

 ENDDO;

 //?USER: Process Data record

 //?Selection
 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?Farm Site
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Farm Site NE WRK.Zero USR
 IF PAR.HRH_Farm_Site <> WRK.Zero_USR;

 CASE;

 // IF DB1.TH Source Type is External
 IF DB1.TH_Source_Type = 'E';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.MTech Live Yes or No is No MTech not Live
 IF LCL.MTech_Live_Yes_or_No = 'N';

 //?* 01/27/03 PKD PK0495 Replaced HP255 with HP249.
 // Call program Z1v HPS Farm Info     UP.
 CALL PROGRAM(Z1v HPS Farm Info     UP) ('HP249');
 PARAMETER(PGM.*Return_code);
 PARAMETER(DB1.TH_HPS_Movement_Ref_#);
 PARAMETER(WRK.Farm_site_Name_f_HPS_USR);
 PARAMETER(WRK.Farm_Site_USR);
 PARAMETER(WRK.HPS_FS_Comp_Relation_USR);
 PARAMETER(WRK.State);

 CASE;

 // IF WRK.Farm Site USR NE PAR.HRH Farm Site
 IF WRK.Farm_Site_USR <> PAR.HRH_Farm_Site;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 // IF LCL.MTech Live Yes or No is Yes MTech is Live
 IF LCL.MTech_Live_Yes_or_No = 'Y';

 // WRK.Farm Site USR = DB1.TH HPS Farm Site
 WRK.Farm_Site_USR = DB1.TH_HPS_Farm_Site;

 CASE;

 // IF WRK.Farm Site USR NE PAR.HRH Farm Site
 IF WRK.Farm_Site_USR <> PAR.HRH_Farm_Site;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 CASE;

 // IF DB1.TH Hog Class Type is Resale
 IF DB1.TH_Hog_Class_Type = 'R';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 CASE;

 // IF DB1.TH Payment Sts is Paid Producer
 IF DB1.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?Date selection
 CASE;

 // IF DB1.TH Kill Date LT PAR.HRH From Kill Date
 IF DB1.TH_Kill_Date < PAR.HRH_From_Kill_Date;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 //?Date selection
 // IF DB1.TH Kill Date GT PAR.HRH To Kill Date
 IF DB1.TH_Kill_Date > PAR.HRH_To_Kill_Date;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 CASE;

 // IF WRK.Record Found USR is Record Found
 IF WRK.Record_Found_USR = 'Y';

 EXECUTE FUNCTION(Upd Hog Popltn Rpt    IF) TYPE(EXCINTFUN)                      AB1154541;
 PARAMETER(PAR.HRH_Type_Of_Distribution);
 PARAMETER(PAR.HRH_Report_Break);
 PARAMETER(WRK.Head_Killed_Total_Usr);
 PARAMETER(WRK.Hot_Weight_Tot_USR);
 PARAMETER(WRK.Backfat_Wgt_USR);
 PARAMETER(WRK.Loin_Eye_Wgt_USR);
 PARAMETER(WRK.Light_Refl_Wgt_Usr);
 PARAMETER(WRK.Lean_Wgt_USR);
 PARAMETER(WRK.Head_Adds_SUM);
 PARAMETER(WRK.Live_wgt_total_11_1_USR);
 PARAMETER(WRK.Head_Total_USR);
 {
  //?Execute internal function

  CASE;

  // IF PAR.HRH Head Killed NE WRK.Zero USR
  IF PAR.HRH_Head_Killed <> WRK.Zero_USR;

  // WRK.HRH AVG Hot Weight = PAR.Hot Weight Tot USR / PAR.HRH Head Killed *
  WRK.HRH_AVG_Hot_Weight = PAR.Hot_Weight_Tot_USR / PAR.HRH_Head_Killed;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH AVG Hot Weight = CON.*ZERO
  WRK.HRH_AVG_Hot_Weight = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.Head Total USR NE WRK.Zero USR
  IF PAR.Head_Total_USR <> WRK.Zero_USR;

  // WRK.HRH Avg Live Wgt = PAR.Live wgt total 11.1   USR / PAR.Head Total USR *
  WRK.HRH_Avg_Live_Wgt = PAR.Live_wgt_total_11_1_USR / PAR.Head_Total_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH Avg Live Wgt = CON.*ZERO
  WRK.HRH_Avg_Live_Wgt = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.Hot Weight Tot USR NE WRK.Zero USR
  IF PAR.Hot_Weight_Tot_USR <> WRK.Zero_USR;

  // WRK.HRH Avg Back Fat = PAR.Backfat * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Back_Fat = PAR.Backfat_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Loin Eye = PAR.Loin-Eye * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Loin_Eye = PAR.Loin_Eye_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Lean % = PAR.Lean % * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Lean = PAR.Lean_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Light Rfl = PAR.Light Refl * Wgt Usr / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Light_Rfl = PAR.Light_Refl_Wgt_Usr / PAR.Hot_Weight_Tot_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH Avg Back Fat = CON.*ZERO
  WRK.HRH_Avg_Back_Fat = *ZERO;

  // WRK.HRH Avg Loin Eye = CON.*ZERO
  WRK.HRH_Avg_Loin_Eye = *ZERO;

  // WRK.HRH Avg Lean % = CON.*ZERO
  WRK.HRH_Avg_Lean = *ZERO;

  // WRK.HRH Avg Light Rfl = CON.*ZERO
  WRK.HRH_Avg_Light_Rfl = *ZERO;

  ENDIF;

  //?Percent Adjusted
  CASE;

  // IF PAR.HRH Head Killed is Greater then Zero
  IF PAR.HRH_Head_Killed > *ZERO;

  // Percent Adjusted
  WRK.HRH_Adjusted = ( PAR.Head_Adds_SUM / PAR.HRH_Head_Killed ) * 100;

  //?Percent Adjusted
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH % Adjusted = CON.*ZERO
  WRK.HRH_Adjusted = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(Chg Hog Ppltn Rpt-Tat  CH) TYPE(CHGOBJ) FILE(PKDACPP)          AB1154609;
  PARAMETER(PAR.HRH_Type_Of_Distribution);
  PARAMETER(PAR.HRH_Report_Break);
  PARAMETER(PAR.HRH_Head_Killed);
  PARAMETER(WRK.HRH_AVG_Hot_Weight);
  PARAMETER(WRK.HRH_Avg_Live_Wgt);
  PARAMETER(WRK.HRH_Avg_Light_Rfl);
  PARAMETER(WRK.HRH_Avg_Loin_Eye);
  PARAMETER(WRK.HRH_Avg_Back_Fat);
  PARAMETER(WRK.HRH_Avg_Lean);
  PARAMETER(WRK.HRH_Adjusted);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 QUIT;

 ENDIF;

 //?Source Type
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Source Type EQ WRK.Blank USR
 IF PAR.HRH_Source_Type = WRK.Blank_USR;

 // IF DB1.TH Source Type EQ PAR.HRH Source Type
 IF DB1.TH_Source_Type = PAR.HRH_Source_Type;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Source Code
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.SR Source Code EQ WRK.Blank USR
 IF PAR.SR_Source_Code = WRK.Blank_USR;

 // IF DB1.TH Source Code EQ PAR.SR Source Code
 IF DB1.TH_Source_Code = PAR.SR_Source_Code;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Payment type
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Payment Type EQ WRK.Blank USR
 IF PAR.HRH_Payment_Type = WRK.Blank_USR;

 // IF DB1.TH Payment Type EQ PAR.HRH Payment Type
 IF DB1.TH_Payment_Type = PAR.HRH_Payment_Type;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Producer / location
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.PD Producer Code EQ WRK.Blank USR
 IF PAR.PD_Producer_Code = WRK.Blank_USR;

 // IF PAR.PD Producer Code EQ DB1.PD Producer Code
 IF PAR.PD_Producer_Code = DB1.PD_Producer_Code;

 //?Location
 CASE;

 // IF DB1.PD Producer Code EQ PAR.PD Producer Code
 IF DB1.PD_Producer_Code = PAR.PD_Producer_Code;

 CASE;

 // IF PAR.HRH Prdcr Location Code EQ WRK.Blank USR
 IF PAR.HRH_Prdcr_Location_Code = WRK.Blank_USR;

 // IF DB1.PL Location Code EQ PAR.HRH Prdcr Location Code
 IF DB1.PL_Location_Code = PAR.HRH_Prdcr_Location_Code;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Tattoo number
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.HRH Tattoo Number EQ WRK.Zero USR
 IF PAR.HRH_Tattoo_Number = WRK.Zero_USR;

 // IF DB1.TH Tattoo Number EQ PAR.HRH Tattoo Number
 IF DB1.TH_Tattoo_Number = PAR.HRH_Tattoo_Number;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // WRK.Record Found USR = CND.Record Found
 WRK.Record_Found_USR = 'Y';

 // WRK.Weighted Avg Sum = DB1.TH Avg Backfat * DB1.TH Hot Wgt *
 WRK.Weighted_Avg_Sum = DB1.TH_Avg_Backfat * DB1.TH_Hot_Wgt;

 // WRK.Backfat * Wgt USR = WRK.Backfat * Wgt USR + WRK.Weighted Avg Sum
 WRK.Backfat_Wgt_USR = WRK.Backfat_Wgt_USR + WRK.Weighted_Avg_Sum;

 // WRK.Weighted Avg Sum = DB1.TH Avg Loin Eye Depth * DB1.TH Hot Wgt *
 WRK.Weighted_Avg_Sum = DB1.TH_Avg_Loin_Eye_Depth * DB1.TH_Hot_Wgt;

 // WRK.Loin-Eye * Wgt USR = WRK.Loin-Eye * Wgt USR + WRK.Weighted Avg Sum
 WRK.Loin_Eye_Wgt_USR = WRK.Loin_Eye_Wgt_USR + WRK.Weighted_Avg_Sum;

 // WRK.Weighted Avg Sum = DB1.TH Avg Lean Percent * DB1.TH Hot Wgt *
 WRK.Weighted_Avg_Sum = DB1.TH_Avg_Lean_Percent * DB1.TH_Hot_Wgt;

 // WRK.Lean % * Wgt USR = WRK.Lean % * Wgt USR + WRK.Weighted Avg Sum
 WRK.Lean_Wgt_USR = WRK.Lean_Wgt_USR + WRK.Weighted_Avg_Sum;

 // WRK.Weighted Avg Sum = DB1.TH Avg Light Reflectance * DB1.TH Hot Wgt *
 WRK.Weighted_Avg_Sum = DB1.TH_Avg_Light_Reflectance * DB1.TH_Hot_Wgt;

 // WRK.Light Refl * Wgt Usr = WRK.Light Refl * Wgt Usr + WRK.Weighted Avg Sum
 WRK.Light_Refl_Wgt_Usr = WRK.Light_Refl_Wgt_Usr + WRK.Weighted_Avg_Sum;

 // WRK.Hot Weight Tot USR = WRK.Hot Weight Tot USR + DB1.TH Hot Wgt
 WRK.Hot_Weight_Tot_USR = WRK.Hot_Weight_Tot_USR + DB1.TH_Hot_Wgt;

 // WRK.Head Killed Total Usr = WRK.Head Killed Total Usr + DB1.TH Head Killed
 WRK.Head_Killed_Total_Usr = WRK.Head_Killed_Total_Usr + DB1.TH_Head_Killed;

 // WRK.Head Adds             SUM = WRK.Head Adds             SUM + DB1.TH Head Adds
 WRK.Head_Adds_SUM = WRK.Head_Adds_SUM + DB1.TH_Head_Adds;

 // WRK.Live wgt total 11.1   USR = WRK.Live wgt total 11.1   USR + DB1.TH Live Wgt
 WRK.Live_wgt_total_11_1_USR = WRK.Live_wgt_total_11_1_USR + DB1.TH_Live_Wgt;

 // WRK.Head Total USR = WRK.Head Total USR + DB1.TH Head Received
 WRK.Head_Total_USR = WRK.Head_Total_USR + DB1.TH_Head_Received;

 ENDIF;

 //?USER: Exit processing

 CASE;

 // IF WRK.Record Found USR is Record Found
 IF WRK.Record_Found_USR = 'Y';

 EXECUTE FUNCTION(Upd Hog Popltn Rpt    IF) TYPE(EXCINTFUN)                      AB1154541;
 PARAMETER(PAR.HRH_Type_Of_Distribution);
 PARAMETER(PAR.HRH_Report_Break);
 PARAMETER(WRK.Head_Killed_Total_Usr);
 PARAMETER(WRK.Hot_Weight_Tot_USR);
 PARAMETER(WRK.Backfat_Wgt_USR);
 PARAMETER(WRK.Loin_Eye_Wgt_USR);
 PARAMETER(WRK.Light_Refl_Wgt_Usr);
 PARAMETER(WRK.Lean_Wgt_USR);
 PARAMETER(WRK.Head_Adds_SUM);
 PARAMETER(WRK.Live_wgt_total_11_1_USR);
 PARAMETER(WRK.Head_Total_USR);
 {
  //?Execute internal function

  CASE;

  // IF PAR.HRH Head Killed NE WRK.Zero USR
  IF PAR.HRH_Head_Killed <> WRK.Zero_USR;

  // WRK.HRH AVG Hot Weight = PAR.Hot Weight Tot USR / PAR.HRH Head Killed *
  WRK.HRH_AVG_Hot_Weight = PAR.Hot_Weight_Tot_USR / PAR.HRH_Head_Killed;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH AVG Hot Weight = CON.*ZERO
  WRK.HRH_AVG_Hot_Weight = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.Head Total USR NE WRK.Zero USR
  IF PAR.Head_Total_USR <> WRK.Zero_USR;

  // WRK.HRH Avg Live Wgt = PAR.Live wgt total 11.1   USR / PAR.Head Total USR *
  WRK.HRH_Avg_Live_Wgt = PAR.Live_wgt_total_11_1_USR / PAR.Head_Total_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH Avg Live Wgt = CON.*ZERO
  WRK.HRH_Avg_Live_Wgt = *ZERO;

  ENDIF;

  CASE;

  // IF PAR.Hot Weight Tot USR NE WRK.Zero USR
  IF PAR.Hot_Weight_Tot_USR <> WRK.Zero_USR;

  // WRK.HRH Avg Back Fat = PAR.Backfat * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Back_Fat = PAR.Backfat_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Loin Eye = PAR.Loin-Eye * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Loin_Eye = PAR.Loin_Eye_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Lean % = PAR.Lean % * Wgt USR / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Lean = PAR.Lean_Wgt_USR / PAR.Hot_Weight_Tot_USR;

  // WRK.HRH Avg Light Rfl = PAR.Light Refl * Wgt Usr / PAR.Hot Weight Tot USR *
  WRK.HRH_Avg_Light_Rfl = PAR.Light_Refl_Wgt_Usr / PAR.Hot_Weight_Tot_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH Avg Back Fat = CON.*ZERO
  WRK.HRH_Avg_Back_Fat = *ZERO;

  // WRK.HRH Avg Loin Eye = CON.*ZERO
  WRK.HRH_Avg_Loin_Eye = *ZERO;

  // WRK.HRH Avg Lean % = CON.*ZERO
  WRK.HRH_Avg_Lean = *ZERO;

  // WRK.HRH Avg Light Rfl = CON.*ZERO
  WRK.HRH_Avg_Light_Rfl = *ZERO;

  ENDIF;

  //?Percent Adjusted
  CASE;

  // IF PAR.HRH Head Killed is Greater then Zero
  IF PAR.HRH_Head_Killed > *ZERO;

  // Percent Adjusted
  WRK.HRH_Adjusted = ( PAR.Head_Adds_SUM / PAR.HRH_Head_Killed ) * 100;

  //?Percent Adjusted
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.HRH % Adjusted = CON.*ZERO
  WRK.HRH_Adjusted = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(Chg Hog Ppltn Rpt-Tat  CH) TYPE(CHGOBJ) FILE(PKDACPP)          AB1154609;
  PARAMETER(PAR.HRH_Type_Of_Distribution);
  PARAMETER(PAR.HRH_Report_Break);
  PARAMETER(PAR.HRH_Head_Killed);
  PARAMETER(WRK.HRH_AVG_Hot_Weight);
  PARAMETER(WRK.HRH_Avg_Live_Wgt);
  PARAMETER(WRK.HRH_Avg_Light_Rfl);
  PARAMETER(WRK.HRH_Avg_Loin_Eye);
  PARAMETER(WRK.HRH_Avg_Back_Fat);
  PARAMETER(WRK.HRH_Avg_Lean);
  PARAMETER(WRK.HRH_Adjusted);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

}


ENDIF;

