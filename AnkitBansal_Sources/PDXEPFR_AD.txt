// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDXEPFR
// ?Date: 14.08.2025 Time: 12:04:43
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?E3276 RMC 8/4/14 for Sold 100% FZ, try to get 6 prod days going back
//?2 months.If we cant get 6, then use the FR Equiv's 6 days prod for the avg
EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER(PAR.Application_Code);
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// PAR.USR Display 1 = CND.No
PAR.USR_Display_1 = 'N';

//?10/23/18 DN S13968-Get 'AVGPRDPCT' Flag to Bypass Vairance % Check.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Alpha Value 2     RT) TYPE(RTVOBJ) FILE(PDKMREP)           AC2134765;
PARAMETER(PAR.Company_Number);
PARAMETER('AVGPRDPCT');
PARAMETER(LCL.Chk_Variance_Limit_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?USER: Record selection processing

//?Catch Weight Status
CASE;

// IF PAR.Catch Weight Status is Y/N Values
IF PAR.Catch_Weight_Status = 'N'/'Y';

// AND PAR.Catch Weight Status NE DB1.Catch Weight Status
AND PAR.Catch_Weight_Status <> DB1.Catch_Weight_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Item structure class selected
CASE;

// IF PAR.Item Structure Class Code is Entered
IF PAR.Item_Structure_Class_Code <> *ZERO;

// AND PAR.Item Structure Class Code NE DB1.Item Structure Class Code
AND PAR.Item_Structure_Class_Code <> DB1.Item_Structure_Class_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Item structure group selected
CASE;

// IF PAR.Item Structure Group Code is Entered
IF PAR.Item_Structure_Group_Code <> *ZERO;

// AND PAR.Item Structure Group Code NE DB1.Item Structure Group Code
AND PAR.Item_Structure_Group_Code <> DB1.Item_Structure_Group_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Item structure type selected
CASE;

// IF PAR.Item Structure Type Code is Entered
IF PAR.Item_Structure_Type_Code <> *ZERO;

// AND PAR.Item Structure Type Code NE DB1.Item Structure Type Code
AND PAR.Item_Structure_Type_Code <> DB1.Item_Structure_Type_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: On print of first page format

MOVE *ALL (To: 1PG From: PAR);

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Condition Desc. 3  USR = Condition name of 1PG.Report Type USR
X1PG_Condition_Desc_3_USR = RTVCND(X1PG_Report_Type_USR);

//?Selected Catch Weight Status
CASE;

// IF PAR.Catch Weight Status is blank
IF PAR.Catch_Weight_Status = *BLANK;

// 1PG.Condition Desc. 2  USR = CON.*All
X1PG_Condition_Desc_2_USR = *All;

//?Selected Catch Weight Status
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Condition Desc. 2  USR = Condition name of 1PG.Catch Weight Status
X1PG_Condition_Desc_2_USR = RTVCND(X1PG_Catch_Weight_Status);

ENDIF;

//?Selected Item Structure Class
CASE;

// IF PAR.Item Structure Class Code is Equal Zero
IF PAR.Item_Structure_Class_Code = *ZERO;

// 1PG.Item Structure Class Desc = CON.*All
X1PG_Item_Structure_Class_Desc = *All;

//?Selected Item Structure Class
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Item Class Desc    RT) TYPE(RTVOBJ) FILE(OMFAREP)          AC1205440;
PARAMETER(X1PG_Item_Structure_Class_Code);
PARAMETER(X1PG_Item_Structure_Class_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Selected Item Structure Group
CASE;

// IF PAR.Item Structure Group Code is Not Entered
IF PAR.Item_Structure_Group_Code = *ZERO;

// 1PG.Item Structure Group Desc = CON.*All
X1PG_Item_Structure_Group_Desc = *All;

//?Selected Item Structure Group
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Group Description  RT) TYPE(RTVOBJ) FILE(OME9REP)          AC1202656;
PARAMETER(X1PG_Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(X1PG_Item_Structure_Group_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Selected Item Structure Type
CASE;

// IF PAR.Item Structure Type Code is *Select Requested
IF PAR.Item_Structure_Type_Code = *ZERO;

// 1PG.Item Structure Type Desc = CON.*All
X1PG_Item_Structure_Type_Desc = *All;

//?Selected Item Structure Type
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV  Description       RT) TYPE(RTVOBJ) FILE(OME8REP)          AC1219219;
PARAMETER(X1PG_Item_Structure_Type_Code);
PARAMETER(X1PG_Item_Structure_Type_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

CASE;

// IF PAR.Update Unit Weight    USR is No -- edit report only
IF PAR.Update_Unit_Weight_USR = 'N';

// 1PG.Text 10A USR = CON.* Edit *
X1PG_Text_10A_USR = * Edit *;

// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Text 10A USR = CON.* Update *
X1PG_Text_10A_USR = * Update *;

ENDIF;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// PAR.USR Display 1 = CND.Yes
PAR.USR_Display_1 = 'Y';

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
// SUPPRESSED PRINT Company Number header format

ENDIF;

CASE;

IF NEW Catch_Weight_Status;
// Print Catch Weight Status header format
PRINT Catch Weight Status header format;

ENDIF;

CASE;

IF NEW Item_Code;
// SUPPRESSED PRINT Item Code header format

ENDIF;

//?USER: Process before print of detail format

CASE;

// IF DB1.Sold 100% Frozen is yes
IF DB1.Sold_100_Percent_Frozen = 'Y';

// LCL.Production Date RGF = JOB.*Job date + CON.-60 *DAYS
LCL.Production_Date_RGF = DATEINCR(JOB.*Job_date '-60' 'DY' 1111111 'NONE' 'N' 1);

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Production Date RGF = CON.*ZERO
LCL.Production_Date_RGF = *ZERO;

ENDIF;

// PAR.Count USR = CON.*ZERO
PAR.Count_USR = 0;

EXECUTE FUNCTION(Rtv 6 Days Production  RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1456329;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(PAR.Weight_Total_13_2_USR);
PARAMETER(PAR.Quantity_Total_13_2_USR);
PARAMETER(PAR.Count_USR);
PARAMETER(LCL.Production_Date_RGF);
{
 //?USER: Initialize routine

 // PAR.Weight Total 13.2     USR = CON.*ZERO
 PAR.Weight_Total_13_2_USR = *ZERO;

 // PAR.Quantity Total 13.2   USR = CON.*ZERO
 PAR.Quantity_Total_13_2_USR = *ZERO;

 // PAR.First Time Flag = CND.Yes
 PAR.First_Time_Flag = 'Y';

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?First Time Processing
 CASE;

 // IF PAR.First Time Flag is Yes
 IF PAR.First_Time_Flag = 'Y';

 // PAR.Production Date USR = DB1.Production Date
 PAR.Production_Date_USR = DB1.Production_Date;

 // PAR.Count USR = CND.EQ 1
 PAR.Count_USR = 1;

 // PAR.First Time Flag = CND.NO
 PAR.First_Time_Flag = 'N';

 ENDIF;

 //?Production Date Change Processing
 CASE;

 // IF PAR.Production Date USR NE DB1.Production Date
 IF PAR.Production_Date_USR <> DB1.Production_Date;

 // PAR.Count USR = PAR.Count USR + CON.1
 PAR.Count_USR = PAR.Count_USR + 1;

 // PAR.Production Date USR = DB1.Production Date
 PAR.Production_Date_USR = DB1.Production_Date;

 ENDIF;

 //?Quit When Number of Production Dates processed is > 6
 CASE;

 // IF PAR.Count USR is GT 6
 IF PAR.Count_USR > 6;

 QUIT;

 ENDIF;

 //?Quit IF FZ item and production date is back more than 60 days
 CASE;

 // IF PAR.Production Date RGF is GT 0
 IF PAR.Production_Date_RGF > 0;

 // AND DB1.Production Date LT PAR.Production Date RGF
 AND DB1.Production_Date < PAR.Production_Date_RGF;

 QUIT;

 ENDIF;

 CASE;

 // IF DB1.Reason Code is Accu-Sort Adj Phs Delete
 IF DB1.Reason_Code = 'IDL';

 // OR DB1.Reason Code is Delete Rework-AccuSort
 OR DB1.Reason_Code = 'DLR';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Weight Total 13.2     USR = PAR.Weight Total 13.2     USR + DB1.Transaction
 PAR.Weight_Total_13_2_USR = PAR.Weight_Total_13_2_USR + DB1.Transaction_Weight;

 // PAR.Quantity Total 13.2   USR = PAR.Quantity Total 13.2   USR + DB1.Transaction
 PAR.Quantity_Total_13_2_USR = PAR.Quantity_Total_13_2_USR + DB1.Transaction_Quantity;

 ENDIF;

}


// CUR.Quantity Total 13.2   USR = PAR.Quantity Total 13.2   USR
CUR.Quantity_Total_13_2_USR = PAR.Quantity_Total_13_2_USR;

// CUR.Weight Total 13.2     USR = PAR.Weight Total 13.2     USR
CUR.Weight_Total_13_2_USR = PAR.Weight_Total_13_2_USR;

//?If FZ and 6 days prod not found, then use FR Equiv
CASE;

// IF DB1.Sold 100% Frozen is yes
IF DB1.Sold_100_Percent_Frozen = 'Y';

EXECUTE FUNCTION(RTV FR Equiv for FZ   RT) TYPE(RTVOBJ) FILE(PBA2REP)           AC2094130;
PARAMETER(CUR.Item_Code_USR);
PARAMETER(NLL.Key_Sold_100_Pct_Frozen);
PARAMETER(CUR.Item_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.Count USR is LE 5
IF PAR.Count_USR <= 5;

// PAR.Count USR = CON.*ZERO
PAR.Count_USR = 0;

// CUR.Text 1 Length USR = CON.*
CUR.Text_1_Length_USR = *;

// CUR.Quantity Total 13.2   USR = CON.*ZERO
CUR.Quantity_Total_13_2_USR = 0;

// CUR.Weight Total 13.2     USR = CON.*ZERO
CUR.Weight_Total_13_2_USR = 0;

// LCL.Production Date RGF = CON.*ZERO
LCL.Production_Date_RGF = *ZERO;

EXECUTE FUNCTION(Rtv 6 Days Production  RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1456329;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code_USR);
PARAMETER(PAR.Weight_Total_13_2_USR);
PARAMETER(PAR.Quantity_Total_13_2_USR);
PARAMETER(PAR.Count_USR);
PARAMETER(LCL.Production_Date_RGF);
{
 //?USER: Initialize routine

 // PAR.Weight Total 13.2     USR = CON.*ZERO
 PAR.Weight_Total_13_2_USR = *ZERO;

 // PAR.Quantity Total 13.2   USR = CON.*ZERO
 PAR.Quantity_Total_13_2_USR = *ZERO;

 // PAR.First Time Flag = CND.Yes
 PAR.First_Time_Flag = 'Y';

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?First Time Processing
 CASE;

 // IF PAR.First Time Flag is Yes
 IF PAR.First_Time_Flag = 'Y';

 // PAR.Production Date USR = DB1.Production Date
 PAR.Production_Date_USR = DB1.Production_Date;

 // PAR.Count USR = CND.EQ 1
 PAR.Count_USR = 1;

 // PAR.First Time Flag = CND.NO
 PAR.First_Time_Flag = 'N';

 ENDIF;

 //?Production Date Change Processing
 CASE;

 // IF PAR.Production Date USR NE DB1.Production Date
 IF PAR.Production_Date_USR <> DB1.Production_Date;

 // PAR.Count USR = PAR.Count USR + CON.1
 PAR.Count_USR = PAR.Count_USR + 1;

 // PAR.Production Date USR = DB1.Production Date
 PAR.Production_Date_USR = DB1.Production_Date;

 ENDIF;

 //?Quit When Number of Production Dates processed is > 6
 CASE;

 // IF PAR.Count USR is GT 6
 IF PAR.Count_USR > 6;

 QUIT;

 ENDIF;

 //?Quit IF FZ item and production date is back more than 60 days
 CASE;

 // IF PAR.Production Date RGF is GT 0
 IF PAR.Production_Date_RGF > 0;

 // AND DB1.Production Date LT PAR.Production Date RGF
 AND DB1.Production_Date < PAR.Production_Date_RGF;

 QUIT;

 ENDIF;

 CASE;

 // IF DB1.Reason Code is Accu-Sort Adj Phs Delete
 IF DB1.Reason_Code = 'IDL';

 // OR DB1.Reason Code is Delete Rework-AccuSort
 OR DB1.Reason_Code = 'DLR';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Weight Total 13.2     USR = PAR.Weight Total 13.2     USR + DB1.Transaction
 PAR.Weight_Total_13_2_USR = PAR.Weight_Total_13_2_USR + DB1.Transaction_Weight;

 // PAR.Quantity Total 13.2   USR = PAR.Quantity Total 13.2   USR + DB1.Transaction
 PAR.Quantity_Total_13_2_USR = PAR.Quantity_Total_13_2_USR + DB1.Transaction_Quantity;

 ENDIF;

}


// CUR.Quantity Total 13.2   USR = PAR.Quantity Total 13.2   USR
CUR.Quantity_Total_13_2_USR = PAR.Quantity_Total_13_2_USR;

// CUR.Weight Total 13.2     USR = PAR.Weight Total 13.2     USR
CUR.Weight_Total_13_2_USR = PAR.Weight_Total_13_2_USR;

ENDIF;

ENDIF;

CASE;

// IF CUR.Quantity Total 13.2   USR is Entered
IF CUR.Quantity_Total_13_2_USR <> *ZERO;

// CUR.Weight 11.2 USR = CUR.Weight Total 13.2     USR / CUR.Quantity Total 13.2   USR *Rounded
CUR.Weight_11_2_USR = CUR.Weight_Total_13_2_USR / CUR.Quantity_Total_13_2_USR 'H';

//?--------------------------------------------------------------
//?01/07/02 PKD PK0367 Calculate the New Unit Weight by averaging
//?             the average of the production and the current Unit
//?             that is stored in the Company Item file.
// New Unit Weight
CUR.Weight_11_2_USR = ( CUR.Weight_11_2_USR + CUR.Unit_Weight ) / 2 'H';

//?--------------------------------------------------------------
ENDIF;

// CUR.Weight 9.2 USR = CUR.Unit Weight - CUR.Weight 11.2 USR
CUR.Weight_9_2_USR = CUR.Unit_Weight - CUR.Weight_11_2_USR;

CASE;

// IF CUR.Unit Weight is Not equal zero
IF CUR.Unit_Weight <> *ZERO;

// Calc: Variance %
CUR.Variance_Percent = ( CUR.Weight_9_2_USR / CUR.Unit_Weight ) * 100;

ENDIF;

//?Set flag if percent exceeds the limit of 12% +/-
CASE;

// IF CUR.Variance Percent is Greater than 12 pct
IF CUR.Variance_Percent > 12;

// OR CUR.Variance Percent is Less than -12 pct
OR CUR.Variance_Percent < -12;

// CUR.Variance over limit   USR = CON.*
CUR.Variance_over_limit_USR = *;

//?Set flag if percent exceeds the limit of 12% +/-
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Variance over limit   USR = CON.*BLANK
CUR.Variance_over_limit_USR = *BLANK;

ENDIF;

//?USER: On print of detail format

CASE;

// IF CUR.Weight 11.2 USR is Equal to zero
IF CUR.Weight_11_2_USR = *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

//?Update Unit Weight in files if:
CASE;

// IF PAR.Update Unit Weight    USR is Yes
IF PAR.Update_Unit_Weight_USR = 'Y';

// AND CUR.Weight 11.2 USR is Not equal zero
AND CUR.Weight_11_2_USR <> *ZERO;

// AND CUR.Unit Weight NE CUR.Weight 11.2 USR
AND CUR.Unit_Weight <> CUR.Weight_11_2_USR;

//?10/23/18 DN S13968-Commented Out & Moved Logic Below.
//?10/23/18 DN S13968-And If variance percent is within the limit.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Allow for Update USR = CND.Yes
LCL.Allow_for_Update_USR = 'Y';

//?Check Variance % Limit Flag & Range if able to Update Unit Weight.
CASE;

// IF LCL.Chk Variance % Limit USR is Yes
IF LCL.Chk_Variance_Limit_USR = 'Y';

//?Do NOT Allow Update if Variance Percent range is outside 12% +/-.
CASE;

// IF CUR.Variance Percent is Greater than 12 pct
IF CUR.Variance_Percent > 12;

// OR CUR.Variance Percent is Less than -12 pct
OR CUR.Variance_Percent < -12;

// LCL.Allow for Update USR = CND.No
LCL.Allow_for_Update_USR = 'N';

ENDIF;

ENDIF;

//?Update Unit Weight?
CASE;

// IF LCL.Allow for Update USR is Yes
IF LCL.Allow_for_Update_USR = 'Y';

// WRK.Conversion Factor 1 = DB1.Conversion Factor 1
WRK.Conversion_Factor_1 = DB1.Conversion_Factor_1;

// WRK.Conversion Factor 2 = DB1.Conversion Factor 2
WRK.Conversion_Factor_2 = DB1.Conversion_Factor_2;

//?Update the Conversion Factor who's Unit of Measure is LB
CASE;

// IF DB1.U/M - Second is Pounds
IF DB1.UOM_Second = 'LB';

// WRK.Conversion Factor 1 = CUR.Weight 11.2 USR
WRK.Conversion_Factor_1 = CUR.Weight_11_2_USR;

//?Update the Conversion Factor who's Unit of Measure is LB
// IF DB1.U/M - Third is Pounds
IF DB1.UOM_Third = 'LB';

// WRK.Conversion Factor 2 = CUR.Weight 11.2 USR
WRK.Conversion_Factor_2 = CUR.Weight_11_2_USR;

ENDIF;

EXECUTE FUNCTION(Chg Unit Wgt& Chg Sts CH) TYPE(CHGOBJ) FILE(CABZREP)           AC1465397;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(WRK.Conversion_Factor_1);
PARAMETER(WRK.Conversion_Factor_2);
PARAMETER(CUR.Weight_11_2_USR);
PARAMETER('YES');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(Rtv/Chg Unt wgt,sts    RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1465399;
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Weight_11_2_USR);
PARAMETER('YES');
{
 //?USER: Process Data record

 // WRK.Conversion Factor 1 = DB1.Conversion Factor 1
 WRK.Conversion_Factor_1 = DB1.Conversion_Factor_1;

 // WRK.Conversion Factor 2 = DB1.Conversion Factor 2
 WRK.Conversion_Factor_2 = DB1.Conversion_Factor_2;

 //?IF Update the Conversion Factor who's unit of measure = LB
 CASE;

 // IF DB1.U/M - Second Dft is Pounds
 IF DB1.UOM_Second_Dft = 'LB';

 // WRK.Conversion Factor 1 = PAR.Unit Weight
 WRK.Conversion_Factor_1 = PAR.Unit_Weight;

 //?IF Update the Conversion Factor who's unit of measure = LB
 // IF DB1.U/M - Third Dft is Pounds
 IF DB1.UOM_Third_Dft = 'LB';

 // WRK.Conversion Factor 2 = PAR.Unit Weight
 WRK.Conversion_Factor_2 = PAR.Unit_Weight;

 ENDIF;

 EXECUTE FUNCTION(Chg Unt Wgt & chg sts CH) TYPE(CHGOBJ) FILE(OMBYREP)           AC1465398;
 PARAMETER(DB1.Item_Code);
 PARAMETER(WRK.Conversion_Factor_1);
 PARAMETER(WRK.Conversion_Factor_2);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Unit_Weight_Change_Sts);
}


// Call program PFS One Product       XF.
CALL PROGRAM(PFS One Product       XF) ('PPMVXFR');
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);

ENDIF;

ENDIF;

ENDIF;

//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : Prt Item Avg Prod     PO
CASE;

// IF PAR.Report Type USR is Summary
IF PAR.Report_Type_USR = 'S';

// OR CUR.Weight 11.2 USR is Equal to zero
OR CUR.Weight_11_2_USR = *ZERO;

QUIT;

ENDIF;

// LCL.Item Code USR = CUR.Item Code
LCL.Item_Code_USR = CUR.Item_Code;

CASE;

// IF CUR.Text 1 Length USR is eq *
IF CUR.Text_1_Length_USR = *;

// LCL.Item Code USR = CUR.Item Code USR
LCL.Item_Code_USR = CUR.Item_Code_USR;

ENDIF;

EXECUTE FUNCTION(Prt Item Avg Prod     PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(LCL.Item_Code_USR);
PARAMETER(CUR.Unit_Weight);

//?USER: Print required level totals

CASE;

IF NEW Item_Code;
// SUPPRESSED PRINT Item Code totals format

ENDIF;

CASE;

IF NEW Catch_Weight_Status;
// SUPPRESSED PRINT Catch Weight Status totals format

ENDIF;

CASE;

IF NEW Company_Number;
// SUPPRESSED PRINT Company Number totals format

ENDIF;

