// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLB8EFR
// ?Date: 14.08.2025 Time: 02:53:43
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?H16853 ISE 11/05/2020-Recompiled due to change in Buy Order Number
EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.BOH_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


//?USER: Create DBF record

EXECUTE FUNCTION(Crt Delv Sched Split  CR) TYPE(CRTOBJ) FILE(PLAGCPP)           AB1244776;
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


//?USER: Delete DBF record

EXECUTE FUNCTION(Del Delv Sched Split  DL) TYPE(DLTOBJ) FILE(PLAGCPP)           AB1244778;

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Delv Sched Split  CH) TYPE(CHGOBJ) FILE(PLAGCPP)           AB1244777;
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

 EXECUTE FUNCTION(Rtv Chg Post Sts      RT) TYPE(RTVOBJ) FILE(PLAECPP)           AB1249412;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.DSH_Kill_Date);
 PARAMETER(DB1.DSD_Delivery_Date);
 PARAMETER(DB1.DSD_Delivery_Time);
 PARAMETER(DB1.DSD_Delivery_Time_Seq);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.DSD HPS Post Status is Error
  IF DB1.DSD_HPS_Post_Status = 'E';

  // OR DB1.DSD HPS Post Status is Posted
  OR DB1.DSD_HPS_Post_Status = 'P';

  // LCL.DSD Movement Printed = DB1.DSD Movement Printed
  LCL.DSD_Movement_Printed = DB1.DSD_Movement_Printed;

  CASE;

  // IF DB1.DSD Movement Printed is Printed
  IF DB1.DSD_Movement_Printed = 'P';

  // LCL.DSD Movement Printed = CND.Reprint
  LCL.DSD_Movement_Printed = 'R';

  ENDIF;

  EXECUTE FUNCTION(Chg Delv Sched Dtl    CH) TYPE(CHGOBJ) FILE(PLAECPP)           AB1244728;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.DSH_Kill_Date);
  PARAMETER(DB1.DSD_Delivery_Date);
  PARAMETER(DB1.DSD_Delivery_Time);
  PARAMETER(DB1.DSD_Delivery_Time_Seq);
  PARAMETER(DB1.DSD_Scheduled_Hour);
  PARAMETER(DB1.DSD_Farm_Site_Code);
  PARAMETER(DB1.DSD_Building);
  PARAMETER(DB1.DSD_Room);
  PARAMETER(DB1.DSD_Sire_Line_Code);
  PARAMETER(DB1.DSD_Hog_Group_Code);
  PARAMETER(DB1.DSD_Unused_Head);
  PARAMETER(DB1.DSD_Scheduled_Delv_Head);
  PARAMETER(DB1.DSD_Scheduled_Kill_Head);
  PARAMETER(DB1.DSD_Transportation_Office);
  PARAMETER(DB1.DSD_Trucker_Code_HPS);
  PARAMETER(DB1.DSD_Driver);
  PARAMETER(DB1.DSD_Loading_Crew);
  PARAMETER(DB1.CHR_Code);
  PARAMETER(DB1.DSD_Load_Type);
  PARAMETER(DB1.DSD_Full_Split_Load);
  PARAMETER(DB1.DSD_Movement_Number);
  PARAMETER(DB1.DSD_Truck_ID);
  PARAMETER(DB1.DSD_Trailer_ID);
  PARAMETER(LCL.DSD_Movement_Printed);
  PARAMETER(DB1.DSD_Sched_Route_Start_Pnt);
  PARAMETER(DB1.DSD_Sched_Route_Start_Dte);
  PARAMETER(DB1.DSD_Sched_Route_Start_Tim);
  PARAMETER(DB1.DSD_Sch_Farm_Arrival_Date);
  PARAMETER(DB1.DSD_Sch_Farm_Arrival_Time);
  PARAMETER(DB1.DSD_Sch_Start_Load_Date);
  PARAMETER(DB1.DSD_Sch_Start_Load_Time);
  PARAMETER(DB1.DSD_Receiving_Shift);
  PARAMETER(DB1.DSD_Kill_Shift);
  PARAMETER(DB1.DSD_BOL_Kill_Shift);
  PARAMETER('R');
  PARAMETER(DB1.DSD_HPE_Post_Status);
  PARAMETER(DB1.DSD_Lock_Status);
  PARAMETER(DB1.DSD_Source_Type);
  PARAMETER(DB1.DSD_Transfer_Sts);
  PARAMETER(DB1.DSD_Unused_Date);
  PARAMETER(DB1.DSD_Unused_Time);
  PARAMETER(DB1.SR_Source_Code);
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.PL_Location_Code);
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.DSD_PRD_Srv_Batch_ID);
  PARAMETER(DB1.DSD_PRD_Srv_Sched_ID);
  PARAMETER(DB1.DSD_Ref_1);
  PARAMETER(DB1.DSD_Ref_2);
  PARAMETER(DB1.DSD_Ref_Status);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  ENDIF;

 }

}


