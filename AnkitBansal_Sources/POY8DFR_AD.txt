// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POY8DFR
// ?Date: 14.08.2025 Time: 03:39:36
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// CTL.*Subfile mode = CND.Truncated
CTL.*Subfile_mode = 1;

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

//?USER: Initialize subfile control

CASE;

// IF LCL.First Time Flag is NO
IF LCL.First_Time_Flag = 'N';

// CTL.Record Status = CND.Active
CTL.Record_Status = 'A';

// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

ENDIF;

CASE;

// IF PAR.Edit/Display Usr is Edit Allowed
IF PAR.Edit_Display_Usr = 'E';

// Retrieve message - '2=Edit 4=Delete 6=Print 7=WW Brkr Customer 8=Print Exhibit 9=WW Cust Mkt'
CTL.Option_Variable_Text_75 = RTVMSG(USR3998);

// IF *OTHERWISE
IF *OTHERWISE;

// Retrieve message - '6=Print 7=WW Brkr Customer 8=Print Exhibit 9=WW Cust Mkt'
CTL.Option_Variable_Text_75 = RTVMSG(USR3999);

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?F4=Prompt
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Salesperson Code
IF PGM.*Cursor_field = CTL.Salesperson_Code;

// Call program SEL PD Sales Route Act SR.
CALL PROGRAM(SEL PD Sales Route Act SR) ('PDFWSRR');
PARAMETER(CTL.Salesperson_Code);

ENDIF;

ENDIF;

//?082008 slm Edit/Display user
//?F6=Create  & Edit Allowed  else issue message
CASE;

// IF CTL.*CMD key is *Create
IF CTL.*CMD_key = '06';

// AND PAR.Edit/Display Usr is Edit Allowed
AND PAR.Edit_Display_Usr = 'E';

// Call program Edt Broker            ER.
CALL PROGRAM(Edt Broker            ER) ('POY9E1R');
PARAMETER(*BLANK);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?F6=Create  & Edit Allowed  else issue message
// IF CTL.*CMD key is *Create
IF CTL.*CMD_key = '06';

// AND PAR.Edit/Display Usr is Displayed Only
AND PAR.Edit_Display_Usr = 'D';

// Send error message - 'Function not allowed.'
ERROR(USR1833);

ENDIF;

//?F9=WW SLS Mkt - to allow view only
CASE;

// IF CTL.*CMD key is CF09
IF CTL.*CMD_key = '09';

// Call program Edt Customer Market   EF.
CALL PROGRAM(Edt Customer Market   EF) ('PMQZEFR');
PARAMETER('D');
PARAMETER(CTL.Broker_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F21=Print
CASE;

// IF CTL.*CMD key is *Print List
IF CTL.*CMD_key = '21';

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Broker List');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);
PARAMETER(*MISSING);
PARAMETER(1);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.System Value Numeric = PAR.PRT Number of Copies
PAR.System_Value_Numeric = PAR.PRT_Number_of_Copies;

// Call program PRT Broker Custs       UP.
SBMJOB;
CALL PROGRAM(PRT Broker Custs       UP) ('PPAEUPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(CTL.Broker_Code);
PARAMETER(CTL.Payee_Type);
PARAMETER(CTL.Record_Status);
SBMJOBOVR JOB(BRKLIST);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

CASE;

// IF PAR.Edit/Display Usr is Edit Allowed
IF PAR.Edit_Display_Usr = 'E';

//?2=Edit
CASE;

// IF RCD.*SFLSEL is *Edit
IF RCD.*SFLSEL = '2'/'2';

// Call program Edt Broker            ER.
CALL PROGRAM(Edt Broker            ER) ('POY9E1R');
PARAMETER(RCD.Broker_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?4=Delete
CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

// LCL.Record Status = CND.Deleted
LCL.Record_Status = 'D';

// Call program Del Verification      XF.
CALL PROGRAM(Del Verification      XF) ('PPIVXFR');
PARAMETER(RCD.Broker_Code);
PARAMETER(LCL.Record_Status);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// AND LCL.Record Status is Deleted
AND LCL.Record_Status = 'D';

EXECUTE FUNCTION(Del Broker            DL) TYPE(DLTOBJ) FILE(POC5REP)           AC1675585;
PARAMETER(RCD.Broker_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// AND LCL.Record Status is Inactive
AND LCL.Record_Status = 'I';

//?Update the status to I for the Broker to be Inactive.
EXECUTE FUNCTION(Chg Broker            CH) TYPE(CHGOBJ) FILE(POC5REP)           AC1675584;
PARAMETER(RCD.Broker_Code);
PARAMETER(RCD.Broker_Name);
PARAMETER(RCD.Broker_Address_Line_1);
PARAMETER(RCD.Broker_Address_Line_2);
PARAMETER(RCD.Broker_City);
PARAMETER(RCD.Broker_State);
PARAMETER(RCD.Broker_Zip);
PARAMETER(RCD.Broker_Office_Manager);
PARAMETER(RCD.Broker_Telephone_Number);
PARAMETER(RCD.Broker_Fax_Number);
PARAMETER(RCD.Broker_Email_Address);
PARAMETER(RCD.Broker_G_L_Vendor_Number);
PARAMETER(RCD.Broker_unused_txt_1);
PARAMETER(RCD.Broker_M3_Supplier);
PARAMETER(RCD.Broker_EDI_Trade_Partner);
PARAMETER(RCD.Broker_Fax_Email_Inv);
PARAMETER(RCD.Broker_Fax_Email_Prc_Sht);
PARAMETER(RCD.Payee_Type);
PARAMETER(RCD.Broker_unused_sts_4);
PARAMETER(RCD.Salesperson_Code);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(LCL.Record_Status);
PARAMETER(RCD.Job_Time);
PARAMETER(RCD.User_Id);
PARAMETER(RCD.Job_Name);
PARAMETER(RCD.Job_Date);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// Send information message - 'Broker &1 is chg to Inactive = &2'
MESSAGE(USR3415 *INFO);
MSGPARM(RCD.Record_Status);
MSGPARM(RCD.Broker_Code);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Broker &1 cannot be deleted because orders exist.'
ERROR(USR3300);
MSGPARM(RCD.Broker_Code);

ENDIF;

ENDIF;

ENDIF;

//?6=Print record
CASE;

// IF RCD.*SFLSEL is *Print
IF RCD.*SFLSEL = '6'/'6';

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Broker List');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);
PARAMETER(*MISSING);
PARAMETER(1);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.System Value Numeric = PAR.PRT Number of Copies
PAR.System_Value_Numeric = PAR.PRT_Number_of_Copies;

// Call program PRT Broker Custs       UP.
SBMJOB;
CALL PROGRAM(PRT Broker Custs       UP) ('PPAEUPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(RCD.Broker_Code);
PARAMETER(WRK.Blank_for_4_USR);
PARAMETER(*BLANK);
SBMJOBOVR JOB(BRKLIST);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?8=Print Exhibits
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Broker List');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);
PARAMETER(*MISSING);
PARAMETER(1);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.System Value Numeric = PAR.PRT Number of Copies
PAR.System_Value_Numeric = PAR.PRT_Number_of_Copies;

// Call program PRT Broker Exhibits    XF.
SBMJOB;
CALL PROGRAM(PRT Broker Exhibits    XF) ('PMJGXFR');
PARAMETER(RCD.Broker_Code);
PARAMETER(RCD.Payee_Type);
PARAMETER(*BLANK);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER('D');
PARAMETER(LCL.Status_Y_or_N);
SBMJOBOVR JOB(BROKREXHIB);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?7=WW Customers
CASE;

// IF RCD.*SFLSEL is Option 7
IF RCD.*SFLSEL = '7'/'7';

// Call program WW Broker Custs       DF.
CALL PROGRAM(WW Broker Custs       DF) ('PMHBDFR');
PARAMETER(RCD.Broker_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?9=Display Sale Markets -- for Broker
CASE;

// IF RCD.*SFLSEL is 9
IF RCD.*SFLSEL = '9';

// Call program Edt Customer Market   EF.
CALL PROGRAM(Edt Customer Market   EF) ('PMQZEFR');
PARAMETER('D');
PARAMETER(RCD.Broker_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

