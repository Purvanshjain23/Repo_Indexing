// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDFIPFR
// ?Date: 14.08.2025 Time: 12:03:46
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.Record Selected       USR = CND.blank
PAR.Record_Selected_USR = *BLANK;

//?Get Current Year & Month.
// PAR.Current Year  USR = JOB.*Job date *YEAR
PAR.Current_Year_USR = DATEDTLS(JOB.*Job_date 'YR' 1111111 'NONE' 'N' 1);

// PAR.Current Month USR = JOB.*Job date *MONTH
PAR.Current_Month_USR = DATEDTLS(JOB.*Job_date 'MO' 1111111 'NONE' 'N' 1);

//?Determine Comparison Dates.
// PAR.This Month  (MM) USR = PAR.Date - ATR *MONTH
PAR.This_Month_MM_USR = DATEDTLS(PAR.Date_ATR 'MO' 1111111 'NONE' 'N' 1);

// PAR.This Year (YYYY) USR = PAR.Date - ATR *YEAR
PAR.This_Year_YYYY_USR = DATEDTLS(PAR.Date_ATR 'YR' 1111111 'NONE' 'N' 1);

// PAR.Last Year (YYYY) USR = PAR.This Year (YYYY) USR - CON.1
PAR.Last_Year_YYYY_USR = PAR.This_Year_YYYY_USR - 1;

//?Format Heading Year (Example: '98)
//?Last Year
// PAR.Year Alpha (YYYY) USR = CVTVAR(PAR.Last Year (YYYY) USR)
PAR.Year_Alpha_YYYY_USR = CVTVAR(PAR.Last_Year_YYYY_USR);

// PAR.Year Alpha (YY) USR = SUBSTRING(PAR.Year Alpha (YYYY) USR,CON.3,CON.2)
PAR.Year_Alpha_YY_USR = SUBSTRING(PAR.Year_Alpha_YYYY_USR:3:2);

// PAR.Alpha Zeroes 3        USR = CONCAT(CON.',PAR.Year Alpha (YY) USR,CON.*ZERO)
PAR.Alpha_Zeroes_3_USR = '''' + PAR.Year_Alpha_YY_USR (*ZERO);

//?This Year
// PAR.Year Alpha (YYYY) USR = CVTVAR(PAR.This Year (YYYY) USR)
PAR.Year_Alpha_YYYY_USR = CVTVAR(PAR.This_Year_YYYY_USR);

// PAR.Year Alpha (YY) USR = SUBSTRING(PAR.Year Alpha (YYYY) USR,CON.3,CON.2)
PAR.Year_Alpha_YY_USR = SUBSTRING(PAR.Year_Alpha_YYYY_USR:3:2);

// PAR.USR Work Field 3A = CONCAT(CON.',PAR.Year Alpha (YY) USR,CON.*ZERO)
PAR.USR_Work_Field_3A = '''' + PAR.Year_Alpha_YY_USR (*ZERO);

//?Format Heading "MM/YY".
// PAR.Year  NBR USR = PAR.Date - ATR *YEAR
PAR.Year_NBR_USR = DATEDTLS(PAR.Date_ATR 'YR' 1111111 'NONE' 'N' 1);

// PAR.Month NBR USR = PAR.Date - ATR *MONTH
PAR.Month_NBR_USR = DATEDTLS(PAR.Date_ATR 'MO' 1111111 'NONE' 'N' 1);

// PAR.TXT Month Number      USR = CVTVAR(PAR.Month NBR USR)
PAR.TXT_Month_Number_USR = CVTVAR(PAR.Month_NBR_USR);

// PAR.TXT Year Number       USR = CVTVAR(PAR.Year  NBR USR)
PAR.TXT_Year_Number_USR = CVTVAR(PAR.Year_NBR_USR);

// PAR.TXT MM/YY             USR = CONCAT(PAR.TXT Month Number      USR,CON./,CON.*
PAR.TXT_MM_YY_USR = PAR.TXT_Month_Number_USR + '/' (*ZERO);

// PAR.TXT MM/YY             USR = CONCAT(PAR.TXT MM/YY             USR,PAR.TXT Yea
PAR.TXT_MM_YY_USR = PAR.TXT_MM_YY_USR + PAR.TXT_Year_Number_USR (*ZERO);

// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


EXECUTE FUNCTION(Load State/Territory *Arr) TYPE(RTVOBJ) FILE(CAACREP)          AC1493769;
PARAMETER(*BLANK);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Territory using St RT) TYPE(RTVOBJ) FILE(PDLWREP)          AC1494008;
 PARAMETER(DB1.State_Code);
 PARAMETER(WRK.Territory_Code);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  QUIT;

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Load State/Territory   CO) TYPE(CRTOBJ) ARRAY(Territory_State) AC1493767;
 PARAMETER(DB1.State_Code);
 PARAMETER(WRK.Territory_Code);
 ENDIF;

}


// PAR.Z Ship to State Code = CON.XX
PAR.State_Code = 'XX';

// WRK.Print Yes/No          USR = CND.No
WRK.Print_Yes_No_USR = 'N';

//?USER: Record selection processing

// PAR.Actual Shipped Month USR = DB1.Actual Shipped Date *MONTH
PAR.Actual_Shipped_Month_USR = DATEDTLS(DB1.Actual_Shipped_Date 'MO' 1111111 'NONE' 'N'            +
1);

// PAR.Actual Shipped Day USR = DB1.Actual Shipped Date *DAY OF MONTH
PAR.Actual_Shipped_Day_USR = DATEDTLS(DB1.Actual_Shipped_Date 'DM' 1111111 'NONE' 'N' 1);

// PAR.Actual Shipped Year USR = DB1.Actual Shipped Date *YEAR
PAR.Actual_Shipped_Year_USR = DATEDTLS(DB1.Actual_Shipped_Date 'YR' 1111111 'NONE' 'N' 1);

//?Current Year Check
CASE;

// IF PAR.Actual Shipped Year USR EQ PAR.This Year (YYYY) USR
IF PAR.Actual_Shipped_Year_USR = PAR.This_Year_YYYY_USR;

// PAR.Record Selected       USR = CND.yes
PAR.Record_Selected_USR = 'Y';

//?Current Year Check
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Actual Shipped Year USR EQ PAR.Last Year (YYYY) USR
IF PAR.Actual_Shipped_Year_USR = PAR.Last_Year_YYYY_USR;

// PAR.Record Selected       USR = CND.yes
PAR.Record_Selected_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Record Selected       USR = CND.no
PAR.Record_Selected_USR = 'N';

ENDIF;

ENDIF;

//?Company Number Check
CASE;

// IF PAR.Record Selected       USR is yes
IF PAR.Record_Selected_USR = 'Y';

CASE;

// IF PAR.Company Number is Equal to zero
IF PAR.Company_Number = *ZERO;

// PAR.Record Selected       USR = CND.yes
PAR.Record_Selected_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Company Number EQ DB1.Company Number
IF PAR.Company_Number = DB1.Company_Number;

// PAR.Record Selected       USR = CND.yes
PAR.Record_Selected_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Record Selected       USR = CND.no
PAR.Record_Selected_USR = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Parent Number Check
CASE;

// IF PAR.A/R Customer Number is equal to zero
IF PAR.AR_Customer_Number = *ZERO;

//?Parent Customer Check
CASE;

// IF PAR.Record Selected       USR is yes
IF PAR.Record_Selected_USR = 'Y';

CASE;

// IF PAR.Parent Customer is equal to zero
IF PAR.Parent_Customer = *ZERO;

// PAR.Record Selected       USR = CND.yes
PAR.Record_Selected_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Parent Customer EQ DB1.Parent Customer
IF PAR.Parent_Customer = DB1.Parent_Customer;

// PAR.Record Selected       USR = CND.yes
PAR.Record_Selected_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Record Selected       USR = CND.no
PAR.Record_Selected_USR = 'N';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?A/R Customer Number
CASE;

// IF PAR.Record Selected       USR is yes
IF PAR.Record_Selected_USR = 'Y';

CASE;

// IF PAR.A/R Customer Number is equal to zero
IF PAR.AR_Customer_Number = *ZERO;

EXECUTE FUNCTION(RTV All fields) TYPE(RTVOBJ) FILE(CAEOREP)                     AC1478596;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.AR_Customer_Number);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(PAR.Sales_Route_Code_Ref_USR);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(PAR.Type_Code);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(PAR.Record_Status);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Type_Code);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.Record Selected       USR = CND.yes
PAR.Record_Selected_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.A/R Customer Number EQ DB1.A/R Customer Number
IF PAR.AR_Customer_Number = DB1.AR_Customer_Number;

EXECUTE FUNCTION(RTV All fields) TYPE(RTVOBJ) FILE(CAEOREP)                     AC1478596;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.AR_Customer_Number);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(PAR.Sales_Route_Code_Ref_USR);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(PAR.Type_Code);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(PAR.Record_Status);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Type_Code);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.Record Selected       USR = CND.yes
PAR.Record_Selected_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Record Selected       USR = CND.no
PAR.Record_Selected_USR = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Verify Record Status
CASE;

// IF PAR.Record Selected       USR is yes
IF PAR.Record_Selected_USR = 'Y';

CASE;

// IF PAR.Record Status is Active
IF PAR.Record_Status = 'A';

// PAR.Record Selected       USR = CND.yes
PAR.Record_Selected_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Record Selected       USR = CND.no
PAR.Record_Selected_USR = 'N';

ENDIF;

ENDIF;

//?Improved State Code Selection
CASE;

// IF PAR.Record Selected       USR is yes
IF PAR.Record_Selected_USR = 'Y';

CASE;

// IF PAR.Territory Code is *All
IF PAR.Territory_Code = *ALL;

// PAR.Record Selected       USR = CND.yes
PAR.Record_Selected_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.A/R State EQ PAR.Z Ship to State Code
IF DB1.A_R_State = PAR.State_Code;

// PAR.Record Selected       USR = CND.yes
PAR.Record_Selected_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV State/Territory    RT) TYPE(RTVOBJ) ARRAY(Territory_State) AC1493768;
PARAMETER(DB1.A_R_State);
PARAMETER(WRK.Territory_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// PAR.Record Selected       USR = CND.no
PAR.Record_Selected_USR = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Territory Code EQ WRK.Territory Code
IF PAR.Territory_Code = WRK.Territory_Code;

// PAR.Z Ship to State Code = DB1.A/R State
PAR.State_Code = DB1.A_R_State;

// PAR.Record Selected       USR = CND.yes
PAR.Record_Selected_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Record Selected       USR = CND.no
PAR.Record_Selected_USR = 'N';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Debit/Credit
CASE;

// IF PAR.Record Selected       USR is yes
IF PAR.Record_Selected_USR = 'Y';

EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
PARAMETER(DB1.Order_Type_Sales);
PARAMETER(WRK.Billing_Activity_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.Billing Activity Type is Credit or Debit Memo
IF WRK.Billing_Activity_Type = '2'/'3';

// PAR.Record Selected       USR = CND.no
PAR.Record_Selected_USR = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Record Selected       USR = CND.yes
PAR.Record_Selected_USR = 'Y';

ENDIF;

ENDIF;

//?Sales Route Select
CASE;

// IF PAR.Record Selected       USR is yes
IF PAR.Record_Selected_USR = 'Y';

CASE;

// IF PAR.Sales Route Code is *All
IF PAR.Sales_Route_Code = 'ALL';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Sales Route Code EQ PAR.Sales Route Code Ref  USR
IF PAR.Sales_Route_Code = PAR.Sales_Route_Code_Ref_USR;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Record Selected       USR = CND.no
PAR.Record_Selected_USR = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Validate Company
CASE;

// IF PAR.Record Selected       USR is yes
IF PAR.Record_Selected_USR = 'Y';

EXECUTE FUNCTION(RTV Check Existence    RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1524178;
PARAMETER(DB1.Parent_Customer);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// PAR.Record Selected       USR = CND.no
PAR.Record_Selected_USR = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Check Existence    RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1524178;
PARAMETER(DB1.AR_Customer_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// PAR.Record Selected       USR = CND.no
PAR.Record_Selected_USR = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Select Record or Not.
CASE;

// IF PAR.Record Selected       USR is yes
IF PAR.Record_Selected_USR = 'Y';

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

//?Select Record or Not.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process top of page

// TOP.TXT MM/YY             USR = PAR.TXT MM/YY             USR
TOP_TXT_MM_YY_USR = PAR.TXT_MM_YY_USR;

//?USER: On print of first page format

MOVE *ALL (To: 1PG From: PAR);

//?Company
CASE;

// IF PAR.Company Number is Equal to zero
IF PAR.Company_Number = *ZERO;

// 1PG.Company Name = CON.All Companies
X1PG_Company_Name = 'All Companies';

//?Company
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Company Name Only  RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1100959;
PARAMETER(PAR.Company_Number);
PARAMETER(X1PG_Company_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Parent Customer
CASE;

// IF PAR.Parent Customer is equal to zero
IF PAR.Parent_Customer = *ZERO;

// 1PG.Z Ship To Name = CON.ALL PARENT CUSTOMERS
X1PG_Name = 'ALL PARENT CUSTOMERS';

//?Parent Customer
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Name Only          RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1493704;
PARAMETER(PAR.Parent_Customer);
PARAMETER(X1PG_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

//?A/R Customer Number
CASE;

// IF PAR.A/R Customer Number is equal to zero
IF PAR.AR_Customer_Number = *ZERO;

// 1PG.A/R Customer Name = CON.All A/R Customers
X1PG_AR_Customer_Name = 'All A/R Customers';

//?A/R Customer Number
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(X1PG_AR_Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Ship To Customer
CASE;

// IF PAR.Ship To Customer is equal to zero
IF PAR.Ship_To_Customer = *ZERO;

// 1PG.Ship To Name          DRV = CON.All Ship To Customers
X1PG_Ship_To_Name_DRV = 'All Ship To Customers';

//?Ship To Customer
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Ship To Name          DRV) TYPE(DRVFLD)                        AC1573561;
PARAMETER(X1PG_Ship_To_Name_DRV);
PARAMETER(X1PG_Ship_To_Customer);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


ENDIF;

//?Sales Route Code
CASE;

// IF PAR.Sales Route Code is *All
IF PAR.Sales_Route_Code = 'ALL';

// 1PG.Sales Route Code = CND.not entered
X1PG_Sales_Route_Code = *BLANK;

// 1PG.Sales Route Description = CON.All Sales Route Codes
X1PG_Sales_Route_Description = 'All Sales Route Codes';

//?Sales Route Code
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1270614;
PARAMETER(PAR.Sales_Route_Code);
PARAMETER(X1PG_Sales_Route_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Territory Code
CASE;

// IF PAR.Territory Code is *All
IF PAR.Territory_Code = *ALL;

// 1PG.Territory Code = CND.*Blank
X1PG_Territory_Code = *BLANK;

// 1PG.Territory Description = CON.All Territories
X1PG_Territory_Description = 'All Territories';

//?Territory Code
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV All                RT) TYPE(RTVOBJ) FILE(PDLVREP)          AC1489002;
PARAMETER(PAR.Territory_Code);
PARAMETER(X1PG_Territory_Description);
PARAMETER(LCL.TER_Unused_Sts_1);
PARAMETER(LCL.TER_Unused_Sts_2);
PARAMETER(LCL.TER_Unused_Sts_3);
PARAMETER(LCL.TER_Unused_Sts_4);
PARAMETER(LCL.Regional_Salesperson_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

// 1PG.TXT MM/YY             USR = PAR.TXT MM/YY             USR
X1PG_TXT_MM_YY_USR = PAR.TXT_MM_YY_USR;

// 1PG.USR Work Field 5A     USR = Condition name of PAR.Sale Type             USR
X1PG_USR_Work_Field_5A_USR = RTVCND(PAR.Sale_Type_USR);

// 1PG.USR Work Field 7A = Condition name of PAR.Report Type Both      USR
X1PG_USR_Work_Field_7A = RTVCND(PAR.Report_Type_Both_USR);

// 1PG.USR Work Field 3A = Condition name of 1PG.Print Yes/No          USR
X1PG_USR_Work_Field_3A = RTVCND(X1PG_Print_Yes_No_USR);

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
// Print Company Number header format
PRINT Company Number header format;

ENDIF;

// SUPPRESSED PRINT Parent Customer header format

CASE;

IF NEW AR_Customer_Number;
// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

// WRK.Print Yes/No          USR = CND.No
WRK.Print_Yes_No_USR = 'N';

// SUPPRESSED PRINT A/R Customer Number header format

ENDIF;

// SUPPRESSED PRINT Sales Route Code header format

//?USER: On print of detail format

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

//?USER: Process after print of detail format

//?This Year.
//?January
CASE;

// IF PAR.Actual Shipped Month USR is January
IF PAR.Actual_Shipped_Month_USR = 01;

// AND PAR.Actual Shipped Year USR EQ PAR.This Year (YYYY) USR
AND PAR.Actual_Shipped_Year_USR = PAR.This_Year_YYYY_USR;

CASE;

// IF DB1.Weight Billed is Equal to zero
IF DB1.Weight_Billed = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Print Yes/No          USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

ENDIF;

//?Week 1
CASE;

// IF PAR.Actual Shipped Day USR is GE 1
IF PAR.Actual_Shipped_Day_USR >= 1;

// AND PAR.Actual Shipped Day USR is LE 7
AND PAR.Actual_Shipped_Day_USR <= 7;

NXT.Weight_1_1_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 2
CASE;

// IF PAR.Actual Shipped Day USR is GE 8
IF PAR.Actual_Shipped_Day_USR >= 8;

// AND PAR.Actual Shipped Day USR is LE 14
AND PAR.Actual_Shipped_Day_USR <= 14;

NXT.Weight_1_2_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 3
CASE;

// IF PAR.Actual Shipped Day USR is GE 15
IF PAR.Actual_Shipped_Day_USR >= 15;

// AND PAR.Actual Shipped Day USR is LE 21
AND PAR.Actual_Shipped_Day_USR <= 21;

NXT.Weight_1_3_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 4
CASE;

// IF PAR.Actual Shipped Day USR is GE 22
IF PAR.Actual_Shipped_Day_USR >= 22;

// AND PAR.Actual Shipped Day USR is LE 28
AND PAR.Actual_Shipped_Day_USR <= 28;

NXT.Weight_1_4_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 5
CASE;

// IF PAR.Actual Shipped Day USR is GE 29
IF PAR.Actual_Shipped_Day_USR >= 29;

NXT.Weight_1_5_SUM = SUM(DB1.Weight_Billed);

ENDIF;

ENDIF;

//?February
CASE;

// IF PAR.Actual Shipped Month USR is February
IF PAR.Actual_Shipped_Month_USR = 02;

// AND PAR.Actual Shipped Year USR EQ PAR.This Year (YYYY) USR
AND PAR.Actual_Shipped_Year_USR = PAR.This_Year_YYYY_USR;

CASE;

// IF DB1.Weight Billed is Equal to zero
IF DB1.Weight_Billed = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Print Yes/No          USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

ENDIF;

//?Week 1
CASE;

// IF PAR.Actual Shipped Day USR is GE 1
IF PAR.Actual_Shipped_Day_USR >= 1;

// AND PAR.Actual Shipped Day USR is LE 7
AND PAR.Actual_Shipped_Day_USR <= 7;

NXT.Weight_2_1_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 2
CASE;

// IF PAR.Actual Shipped Day USR is GE 8
IF PAR.Actual_Shipped_Day_USR >= 8;

// AND PAR.Actual Shipped Day USR is LE 14
AND PAR.Actual_Shipped_Day_USR <= 14;

NXT.Weight_2_2_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 3
CASE;

// IF PAR.Actual Shipped Day USR is GE 15
IF PAR.Actual_Shipped_Day_USR >= 15;

// AND PAR.Actual Shipped Day USR is LE 21
AND PAR.Actual_Shipped_Day_USR <= 21;

NXT.Weight_2_3_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 4
CASE;

// IF PAR.Actual Shipped Day USR is GE 22
IF PAR.Actual_Shipped_Day_USR >= 22;

// AND PAR.Actual Shipped Day USR is LE 28
AND PAR.Actual_Shipped_Day_USR <= 28;

NXT.Weight_2_4_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 5
CASE;

// IF PAR.Actual Shipped Day USR is GE 29
IF PAR.Actual_Shipped_Day_USR >= 29;

NXT.Weight_2_5_SUM = SUM(DB1.Weight_Billed);

ENDIF;

ENDIF;

//?March
CASE;

// IF PAR.Actual Shipped Month USR is March
IF PAR.Actual_Shipped_Month_USR = 03;

// AND PAR.Actual Shipped Year USR EQ PAR.This Year (YYYY) USR
AND PAR.Actual_Shipped_Year_USR = PAR.This_Year_YYYY_USR;

CASE;

// IF DB1.Weight Billed is Equal to zero
IF DB1.Weight_Billed = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Print Yes/No          USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

ENDIF;

//?Week 1
CASE;

// IF PAR.Actual Shipped Day USR is GE 1
IF PAR.Actual_Shipped_Day_USR >= 1;

// AND PAR.Actual Shipped Day USR is LE 7
AND PAR.Actual_Shipped_Day_USR <= 7;

NXT.Weight_3_1_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 2
CASE;

// IF PAR.Actual Shipped Day USR is GE 8
IF PAR.Actual_Shipped_Day_USR >= 8;

// AND PAR.Actual Shipped Day USR is LE 14
AND PAR.Actual_Shipped_Day_USR <= 14;

NXT.Weight_3_2_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 3
CASE;

// IF PAR.Actual Shipped Day USR is GE 15
IF PAR.Actual_Shipped_Day_USR >= 15;

// AND PAR.Actual Shipped Day USR is LE 21
AND PAR.Actual_Shipped_Day_USR <= 21;

NXT.Weight_3_3_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 4
CASE;

// IF PAR.Actual Shipped Day USR is GE 22
IF PAR.Actual_Shipped_Day_USR >= 22;

// AND PAR.Actual Shipped Day USR is LE 28
AND PAR.Actual_Shipped_Day_USR <= 28;

NXT.Weight_3_4_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 5
CASE;

// IF PAR.Actual Shipped Day USR is GE 29
IF PAR.Actual_Shipped_Day_USR >= 29;

NXT.Weight_3_5_SUM = SUM(DB1.Weight_Billed);

ENDIF;

ENDIF;

//?April
CASE;

// IF PAR.Actual Shipped Month USR is April
IF PAR.Actual_Shipped_Month_USR = 04;

// AND PAR.Actual Shipped Year USR EQ PAR.This Year (YYYY) USR
AND PAR.Actual_Shipped_Year_USR = PAR.This_Year_YYYY_USR;

CASE;

// IF DB1.Weight Billed is Equal to zero
IF DB1.Weight_Billed = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Print Yes/No          USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

ENDIF;

//?Week 1
CASE;

// IF PAR.Actual Shipped Day USR is GE 1
IF PAR.Actual_Shipped_Day_USR >= 1;

// AND PAR.Actual Shipped Day USR is LE 7
AND PAR.Actual_Shipped_Day_USR <= 7;

NXT.Weight_4_1_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 2
CASE;

// IF PAR.Actual Shipped Day USR is GE 8
IF PAR.Actual_Shipped_Day_USR >= 8;

// AND PAR.Actual Shipped Day USR is LE 14
AND PAR.Actual_Shipped_Day_USR <= 14;

NXT.Weight_4_2_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 3
CASE;

// IF PAR.Actual Shipped Day USR is GE 15
IF PAR.Actual_Shipped_Day_USR >= 15;

// AND PAR.Actual Shipped Day USR is LE 21
AND PAR.Actual_Shipped_Day_USR <= 21;

NXT.Weight_4_3_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 4
CASE;

// IF PAR.Actual Shipped Day USR is GE 22
IF PAR.Actual_Shipped_Day_USR >= 22;

// AND PAR.Actual Shipped Day USR is LE 28
AND PAR.Actual_Shipped_Day_USR <= 28;

NXT.Weight_4_4_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 5
CASE;

// IF PAR.Actual Shipped Day USR is GE 29
IF PAR.Actual_Shipped_Day_USR >= 29;

NXT.Weight_4_5_SUM = SUM(DB1.Weight_Billed);

ENDIF;

ENDIF;

//?May
CASE;

// IF PAR.Actual Shipped Month USR is May
IF PAR.Actual_Shipped_Month_USR = 05;

// AND PAR.Actual Shipped Year USR EQ PAR.This Year (YYYY) USR
AND PAR.Actual_Shipped_Year_USR = PAR.This_Year_YYYY_USR;

CASE;

// IF DB1.Weight Billed is Equal to zero
IF DB1.Weight_Billed = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Print Yes/No          USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

ENDIF;

//?Week 1
CASE;

// IF PAR.Actual Shipped Day USR is GE 1
IF PAR.Actual_Shipped_Day_USR >= 1;

// AND PAR.Actual Shipped Day USR is LE 7
AND PAR.Actual_Shipped_Day_USR <= 7;

NXT.Weight_5_1_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 2
CASE;

// IF PAR.Actual Shipped Day USR is GE 8
IF PAR.Actual_Shipped_Day_USR >= 8;

// AND PAR.Actual Shipped Day USR is LE 14
AND PAR.Actual_Shipped_Day_USR <= 14;

NXT.Weight_5_2_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 3
CASE;

// IF PAR.Actual Shipped Day USR is GE 15
IF PAR.Actual_Shipped_Day_USR >= 15;

// AND PAR.Actual Shipped Day USR is LE 21
AND PAR.Actual_Shipped_Day_USR <= 21;

NXT.Weight_5_3_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 4
CASE;

// IF PAR.Actual Shipped Day USR is GE 22
IF PAR.Actual_Shipped_Day_USR >= 22;

// AND PAR.Actual Shipped Day USR is LE 28
AND PAR.Actual_Shipped_Day_USR <= 28;

NXT.Weight_5_4_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 5
CASE;

// IF PAR.Actual Shipped Day USR is GE 29
IF PAR.Actual_Shipped_Day_USR >= 29;

NXT.Weight_5_5_SUM = SUM(DB1.Weight_Billed);

ENDIF;

ENDIF;

//?June
CASE;

// IF PAR.Actual Shipped Month USR is June
IF PAR.Actual_Shipped_Month_USR = 06;

// AND PAR.Actual Shipped Year USR EQ PAR.This Year (YYYY) USR
AND PAR.Actual_Shipped_Year_USR = PAR.This_Year_YYYY_USR;

CASE;

// IF DB1.Weight Billed is Equal to zero
IF DB1.Weight_Billed = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Print Yes/No          USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

ENDIF;

//?Week 1
CASE;

// IF PAR.Actual Shipped Day USR is GE 1
IF PAR.Actual_Shipped_Day_USR >= 1;

// AND PAR.Actual Shipped Day USR is LE 7
AND PAR.Actual_Shipped_Day_USR <= 7;

NXT.Weight_6_1_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 2
CASE;

// IF PAR.Actual Shipped Day USR is GE 8
IF PAR.Actual_Shipped_Day_USR >= 8;

// AND PAR.Actual Shipped Day USR is LE 14
AND PAR.Actual_Shipped_Day_USR <= 14;

NXT.Weight_6_2_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 3
CASE;

// IF PAR.Actual Shipped Day USR is GE 15
IF PAR.Actual_Shipped_Day_USR >= 15;

// AND PAR.Actual Shipped Day USR is LE 21
AND PAR.Actual_Shipped_Day_USR <= 21;

NXT.Weight_6_3_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 4
CASE;

// IF PAR.Actual Shipped Day USR is GE 22
IF PAR.Actual_Shipped_Day_USR >= 22;

// AND PAR.Actual Shipped Day USR is LE 28
AND PAR.Actual_Shipped_Day_USR <= 28;

NXT.Weight_6_4_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 5
CASE;

// IF PAR.Actual Shipped Day USR is GE 29
IF PAR.Actual_Shipped_Day_USR >= 29;

NXT.Weight_6_5_SUM = SUM(DB1.Weight_Billed);

ENDIF;

ENDIF;

//?July
CASE;

// IF PAR.Actual Shipped Month USR is July
IF PAR.Actual_Shipped_Month_USR = 07;

// AND PAR.Actual Shipped Year USR EQ PAR.This Year (YYYY) USR
AND PAR.Actual_Shipped_Year_USR = PAR.This_Year_YYYY_USR;

CASE;

// IF DB1.Weight Billed is Equal to zero
IF DB1.Weight_Billed = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Print Yes/No          USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

ENDIF;

//?Week 1
CASE;

// IF PAR.Actual Shipped Day USR is GE 1
IF PAR.Actual_Shipped_Day_USR >= 1;

// AND PAR.Actual Shipped Day USR is LE 7
AND PAR.Actual_Shipped_Day_USR <= 7;

NXT.Weight_7_1_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 2
CASE;

// IF PAR.Actual Shipped Day USR is GE 8
IF PAR.Actual_Shipped_Day_USR >= 8;

// AND PAR.Actual Shipped Day USR is LE 14
AND PAR.Actual_Shipped_Day_USR <= 14;

NXT.Weight_7_2_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 3
CASE;

// IF PAR.Actual Shipped Day USR is GE 15
IF PAR.Actual_Shipped_Day_USR >= 15;

// AND PAR.Actual Shipped Day USR is LE 21
AND PAR.Actual_Shipped_Day_USR <= 21;

NXT.Weight_7_3_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 4
CASE;

// IF PAR.Actual Shipped Day USR is GE 22
IF PAR.Actual_Shipped_Day_USR >= 22;

// AND PAR.Actual Shipped Day USR is LE 28
AND PAR.Actual_Shipped_Day_USR <= 28;

NXT.Weight_7_4_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 5
CASE;

// IF PAR.Actual Shipped Day USR is GE 29
IF PAR.Actual_Shipped_Day_USR >= 29;

NXT.Weight_7_5_SUM = SUM(DB1.Weight_Billed);

ENDIF;

ENDIF;

//?August
CASE;

// IF PAR.Actual Shipped Month USR is August
IF PAR.Actual_Shipped_Month_USR = 08;

// AND PAR.Actual Shipped Year USR EQ PAR.This Year (YYYY) USR
AND PAR.Actual_Shipped_Year_USR = PAR.This_Year_YYYY_USR;

CASE;

// IF DB1.Weight Billed is Equal to zero
IF DB1.Weight_Billed = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Print Yes/No          USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

ENDIF;

//?Week 1
CASE;

// IF PAR.Actual Shipped Day USR is GE 1
IF PAR.Actual_Shipped_Day_USR >= 1;

// AND PAR.Actual Shipped Day USR is LE 7
AND PAR.Actual_Shipped_Day_USR <= 7;

NXT.Weight_8_1_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 2
CASE;

// IF PAR.Actual Shipped Day USR is GE 8
IF PAR.Actual_Shipped_Day_USR >= 8;

// AND PAR.Actual Shipped Day USR is LE 14
AND PAR.Actual_Shipped_Day_USR <= 14;

NXT.Weight_8_2_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 3
CASE;

// IF PAR.Actual Shipped Day USR is GE 15
IF PAR.Actual_Shipped_Day_USR >= 15;

// AND PAR.Actual Shipped Day USR is LE 21
AND PAR.Actual_Shipped_Day_USR <= 21;

NXT.Weight_8_3_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 4
CASE;

// IF PAR.Actual Shipped Day USR is GE 22
IF PAR.Actual_Shipped_Day_USR >= 22;

// AND PAR.Actual Shipped Day USR is LE 28
AND PAR.Actual_Shipped_Day_USR <= 28;

NXT.Weight_8_4_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 5
CASE;

// IF PAR.Actual Shipped Day USR is GE 29
IF PAR.Actual_Shipped_Day_USR >= 29;

NXT.Weight_8_5_SUM = SUM(DB1.Weight_Billed);

ENDIF;

ENDIF;

//?September
CASE;

// IF PAR.Actual Shipped Month USR is September
IF PAR.Actual_Shipped_Month_USR = 09;

// AND PAR.Actual Shipped Year USR EQ PAR.This Year (YYYY) USR
AND PAR.Actual_Shipped_Year_USR = PAR.This_Year_YYYY_USR;

CASE;

// IF DB1.Weight Billed is Equal to zero
IF DB1.Weight_Billed = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Print Yes/No          USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

ENDIF;

//?Week 1
CASE;

// IF PAR.Actual Shipped Day USR is GE 1
IF PAR.Actual_Shipped_Day_USR >= 1;

// AND PAR.Actual Shipped Day USR is LE 7
AND PAR.Actual_Shipped_Day_USR <= 7;

NXT.Weight_9_1_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 2
CASE;

// IF PAR.Actual Shipped Day USR is GE 8
IF PAR.Actual_Shipped_Day_USR >= 8;

// AND PAR.Actual Shipped Day USR is LE 14
AND PAR.Actual_Shipped_Day_USR <= 14;

NXT.Weight_9_2_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 3
CASE;

// IF PAR.Actual Shipped Day USR is GE 15
IF PAR.Actual_Shipped_Day_USR >= 15;

// AND PAR.Actual Shipped Day USR is LE 21
AND PAR.Actual_Shipped_Day_USR <= 21;

NXT.Weight_9_3_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 4
CASE;

// IF PAR.Actual Shipped Day USR is GE 22
IF PAR.Actual_Shipped_Day_USR >= 22;

// AND PAR.Actual Shipped Day USR is LE 28
AND PAR.Actual_Shipped_Day_USR <= 28;

NXT.Weight_9_4_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 5
CASE;

// IF PAR.Actual Shipped Day USR is GE 29
IF PAR.Actual_Shipped_Day_USR >= 29;

NXT.Weight_9_5_SUM = SUM(DB1.Weight_Billed);

ENDIF;

ENDIF;

//?October
CASE;

// IF PAR.Actual Shipped Month USR is October
IF PAR.Actual_Shipped_Month_USR = 10;

// AND PAR.Actual Shipped Year USR EQ PAR.This Year (YYYY) USR
AND PAR.Actual_Shipped_Year_USR = PAR.This_Year_YYYY_USR;

CASE;

// IF DB1.Weight Billed is Equal to zero
IF DB1.Weight_Billed = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Print Yes/No          USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

ENDIF;

//?Week 1
CASE;

// IF PAR.Actual Shipped Day USR is GE 1
IF PAR.Actual_Shipped_Day_USR >= 1;

// AND PAR.Actual Shipped Day USR is LE 7
AND PAR.Actual_Shipped_Day_USR <= 7;

NXT.Weight_10_1_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 2
CASE;

// IF PAR.Actual Shipped Day USR is GE 8
IF PAR.Actual_Shipped_Day_USR >= 8;

// AND PAR.Actual Shipped Day USR is LE 14
AND PAR.Actual_Shipped_Day_USR <= 14;

NXT.Weight_10_2_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 3
CASE;

// IF PAR.Actual Shipped Day USR is GE 15
IF PAR.Actual_Shipped_Day_USR >= 15;

// AND PAR.Actual Shipped Day USR is LE 21
AND PAR.Actual_Shipped_Day_USR <= 21;

NXT.Weight_10_3_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 4
CASE;

// IF PAR.Actual Shipped Day USR is GE 22
IF PAR.Actual_Shipped_Day_USR >= 22;

// AND PAR.Actual Shipped Day USR is LE 28
AND PAR.Actual_Shipped_Day_USR <= 28;

NXT.Weight_10_4_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 5
CASE;

// IF PAR.Actual Shipped Day USR is GE 29
IF PAR.Actual_Shipped_Day_USR >= 29;

NXT.Weight_10_5_SUM = SUM(DB1.Weight_Billed);

ENDIF;

ENDIF;

//?November
CASE;

// IF PAR.Actual Shipped Month USR is November
IF PAR.Actual_Shipped_Month_USR = 11;

// AND PAR.Actual Shipped Year USR EQ PAR.This Year (YYYY) USR
AND PAR.Actual_Shipped_Year_USR = PAR.This_Year_YYYY_USR;

CASE;

// IF DB1.Weight Billed is Equal to zero
IF DB1.Weight_Billed = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Print Yes/No          USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

ENDIF;

//?Week 1
CASE;

// IF PAR.Actual Shipped Day USR is GE 1
IF PAR.Actual_Shipped_Day_USR >= 1;

// AND PAR.Actual Shipped Day USR is LE 7
AND PAR.Actual_Shipped_Day_USR <= 7;

NXT.Weight_11_1_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 2
CASE;

// IF PAR.Actual Shipped Day USR is GE 8
IF PAR.Actual_Shipped_Day_USR >= 8;

// AND PAR.Actual Shipped Day USR is LE 14
AND PAR.Actual_Shipped_Day_USR <= 14;

NXT.Weight_11_2_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 3
CASE;

// IF PAR.Actual Shipped Day USR is GE 15
IF PAR.Actual_Shipped_Day_USR >= 15;

// AND PAR.Actual Shipped Day USR is LE 21
AND PAR.Actual_Shipped_Day_USR <= 21;

NXT.Weight_11_3_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 4
CASE;

// IF PAR.Actual Shipped Day USR is GE 22
IF PAR.Actual_Shipped_Day_USR >= 22;

// AND PAR.Actual Shipped Day USR is LE 28
AND PAR.Actual_Shipped_Day_USR <= 28;

NXT.Weight_11_4_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 5
CASE;

// IF PAR.Actual Shipped Day USR is GE 29
IF PAR.Actual_Shipped_Day_USR >= 29;

NXT.Weight_11_5_SUM = SUM(DB1.Weight_Billed);

ENDIF;

ENDIF;

//?December
CASE;

// IF PAR.Actual Shipped Month USR is December
IF PAR.Actual_Shipped_Month_USR = 12;

// AND PAR.Actual Shipped Year USR EQ PAR.This Year (YYYY) USR
AND PAR.Actual_Shipped_Year_USR = PAR.This_Year_YYYY_USR;

CASE;

// IF DB1.Weight Billed is Equal to zero
IF DB1.Weight_Billed = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Print Yes/No          USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

ENDIF;

//?Week 1
CASE;

// IF PAR.Actual Shipped Day USR is GE 1
IF PAR.Actual_Shipped_Day_USR >= 1;

// AND PAR.Actual Shipped Day USR is LE 7
AND PAR.Actual_Shipped_Day_USR <= 7;

NXT.Weight_12_1_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 2
CASE;

// IF PAR.Actual Shipped Day USR is GE 8
IF PAR.Actual_Shipped_Day_USR >= 8;

// AND PAR.Actual Shipped Day USR is LE 14
AND PAR.Actual_Shipped_Day_USR <= 14;

NXT.Weight_12_2_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 3
CASE;

// IF PAR.Actual Shipped Day USR is GE 15
IF PAR.Actual_Shipped_Day_USR >= 15;

// AND PAR.Actual Shipped Day USR is LE 21
AND PAR.Actual_Shipped_Day_USR <= 21;

NXT.Weight_12_3_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 4
CASE;

// IF PAR.Actual Shipped Day USR is GE 22
IF PAR.Actual_Shipped_Day_USR >= 22;

// AND PAR.Actual Shipped Day USR is LE 28
AND PAR.Actual_Shipped_Day_USR <= 28;

NXT.Weight_12_4_SUM = SUM(DB1.Weight_Billed);

ENDIF;

//?Week 5
CASE;

// IF PAR.Actual Shipped Day USR is GE 29
IF PAR.Actual_Shipped_Day_USR >= 29;

NXT.Weight_12_5_SUM = SUM(DB1.Weight_Billed);

ENDIF;

ENDIF;

//?Last Year.
//?Last January
CASE;

// IF PAR.This Month  (MM) USR is >= January
IF PAR.This_Month_MM_USR >= 1;

//?Last January
CASE;

// IF PAR.Actual Shipped Month USR is January
IF PAR.Actual_Shipped_Month_USR = 01;

// AND PAR.Actual Shipped Year USR EQ PAR.Last Year (YYYY) USR
AND PAR.Actual_Shipped_Year_USR = PAR.Last_Year_YYYY_USR;

NXT.Last_Jan_Weight_SUM = SUM(DB1.Weight_Billed);

CASE;

// IF DB1.Weight Billed is Equal to zero
IF DB1.Weight_Billed = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Print Yes/No          USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?Last February
CASE;

// IF PAR.This Month  (MM) USR is >= February
IF PAR.This_Month_MM_USR >= 2;

//?Last February
CASE;

// IF PAR.Actual Shipped Month USR is February
IF PAR.Actual_Shipped_Month_USR = 02;

// AND PAR.Actual Shipped Year USR EQ PAR.Last Year (YYYY) USR
AND PAR.Actual_Shipped_Year_USR = PAR.Last_Year_YYYY_USR;

NXT.Last_Feb_Weight_SUM = SUM(DB1.Weight_Billed);

CASE;

// IF DB1.Weight Billed is Equal to zero
IF DB1.Weight_Billed = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Print Yes/No          USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?Last March
CASE;

// IF PAR.This Month  (MM) USR is >= March
IF PAR.This_Month_MM_USR >= 3;

//?Last March
CASE;

// IF PAR.Actual Shipped Month USR is March
IF PAR.Actual_Shipped_Month_USR = 03;

// AND PAR.Actual Shipped Year USR EQ PAR.Last Year (YYYY) USR
AND PAR.Actual_Shipped_Year_USR = PAR.Last_Year_YYYY_USR;

NXT.Last_Mar_Weight_SUM = SUM(DB1.Weight_Billed);

CASE;

// IF DB1.Weight Billed is Equal to zero
IF DB1.Weight_Billed = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Print Yes/No          USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?Last April
CASE;

// IF PAR.This Month  (MM) USR is >= April
IF PAR.This_Month_MM_USR >= 4;

//?Last April
CASE;

// IF PAR.Actual Shipped Month USR is April
IF PAR.Actual_Shipped_Month_USR = 04;

// AND PAR.Actual Shipped Year USR EQ PAR.Last Year (YYYY) USR
AND PAR.Actual_Shipped_Year_USR = PAR.Last_Year_YYYY_USR;

NXT.Last_Apr_Weight_SUM = SUM(DB1.Weight_Billed);

CASE;

// IF DB1.Weight Billed is Equal to zero
IF DB1.Weight_Billed = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Print Yes/No          USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?Last May
CASE;

// IF PAR.This Month  (MM) USR is >= May
IF PAR.This_Month_MM_USR >= 5;

//?Last May
CASE;

// IF PAR.Actual Shipped Month USR is May
IF PAR.Actual_Shipped_Month_USR = 05;

// AND PAR.Actual Shipped Year USR EQ PAR.Last Year (YYYY) USR
AND PAR.Actual_Shipped_Year_USR = PAR.Last_Year_YYYY_USR;

NXT.Last_May_Weight_SUM = SUM(DB1.Weight_Billed);

CASE;

// IF DB1.Weight Billed is Equal to zero
IF DB1.Weight_Billed = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Print Yes/No          USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?Last June
CASE;

// IF PAR.This Month  (MM) USR is >= June
IF PAR.This_Month_MM_USR >= 6;

//?Last June
CASE;

// IF PAR.Actual Shipped Month USR is June
IF PAR.Actual_Shipped_Month_USR = 06;

// AND PAR.Actual Shipped Year USR EQ PAR.Last Year (YYYY) USR
AND PAR.Actual_Shipped_Year_USR = PAR.Last_Year_YYYY_USR;

NXT.Last_Jun_Weight_SUM = SUM(DB1.Weight_Billed);

CASE;

// IF DB1.Weight Billed is Equal to zero
IF DB1.Weight_Billed = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Print Yes/No          USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?Last July
CASE;

// IF PAR.This Month  (MM) USR is >= July
IF PAR.This_Month_MM_USR >= 7;

//?Last July
CASE;

// IF PAR.Actual Shipped Month USR is July
IF PAR.Actual_Shipped_Month_USR = 07;

// AND PAR.Actual Shipped Year USR EQ PAR.Last Year (YYYY) USR
AND PAR.Actual_Shipped_Year_USR = PAR.Last_Year_YYYY_USR;

NXT.Last_Jul_Weight_SUM = SUM(DB1.Weight_Billed);

CASE;

// IF DB1.Weight Billed is Equal to zero
IF DB1.Weight_Billed = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Print Yes/No          USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?Last August
CASE;

// IF PAR.This Month  (MM) USR is >= August
IF PAR.This_Month_MM_USR >= 8;

//?Last August
CASE;

// IF PAR.Actual Shipped Month USR is August
IF PAR.Actual_Shipped_Month_USR = 08;

// AND PAR.Actual Shipped Year USR EQ PAR.Last Year (YYYY) USR
AND PAR.Actual_Shipped_Year_USR = PAR.Last_Year_YYYY_USR;

NXT.Last_Aug_Weight_SUM = SUM(DB1.Weight_Billed);

CASE;

// IF DB1.Weight Billed is Equal to zero
IF DB1.Weight_Billed = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Print Yes/No          USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?Last September
CASE;

// IF PAR.This Month  (MM) USR is >= September
IF PAR.This_Month_MM_USR >= 9;

//?Last September
CASE;

// IF PAR.Actual Shipped Month USR is September
IF PAR.Actual_Shipped_Month_USR = 09;

// AND PAR.Actual Shipped Year USR EQ PAR.Last Year (YYYY) USR
AND PAR.Actual_Shipped_Year_USR = PAR.Last_Year_YYYY_USR;

NXT.Last_Sep_Weight_SUM = SUM(DB1.Weight_Billed);

CASE;

// IF DB1.Weight Billed is Equal to zero
IF DB1.Weight_Billed = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Print Yes/No          USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?Last October
CASE;

// IF PAR.This Month  (MM) USR is >= October
IF PAR.This_Month_MM_USR >= 10;

//?Last October
CASE;

// IF PAR.Actual Shipped Month USR is October
IF PAR.Actual_Shipped_Month_USR = 10;

// AND PAR.Actual Shipped Year USR EQ PAR.Last Year (YYYY) USR
AND PAR.Actual_Shipped_Year_USR = PAR.Last_Year_YYYY_USR;

NXT.Last_Oct_Weight_SUM = SUM(DB1.Weight_Billed);

CASE;

// IF DB1.Weight Billed is Equal to zero
IF DB1.Weight_Billed = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Print Yes/No          USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?Last November
CASE;

// IF PAR.This Month  (MM) USR is >= November
IF PAR.This_Month_MM_USR >= 11;

//?Last November
CASE;

// IF PAR.Actual Shipped Month USR is November
IF PAR.Actual_Shipped_Month_USR = 11;

// AND PAR.Actual Shipped Year USR EQ PAR.Last Year (YYYY) USR
AND PAR.Actual_Shipped_Year_USR = PAR.Last_Year_YYYY_USR;

NXT.Last_Nov_Weight_SUM = SUM(DB1.Weight_Billed);

CASE;

// IF DB1.Weight Billed is Equal to zero
IF DB1.Weight_Billed = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Print Yes/No          USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?Last December
CASE;

// IF PAR.This Month  (MM) USR is >= December
IF PAR.This_Month_MM_USR >= 12;

//?Last December
CASE;

// IF PAR.Actual Shipped Month USR is December
IF PAR.Actual_Shipped_Month_USR = 12;

// AND PAR.Actual Shipped Year USR EQ PAR.Last Year (YYYY) USR
AND PAR.Actual_Shipped_Year_USR = PAR.Last_Year_YYYY_USR;

NXT.Last_Dec_Weight_SUM = SUM(DB1.Weight_Billed);

CASE;

// IF DB1.Weight Billed is Equal to zero
IF DB1.Weight_Billed = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Print Yes/No          USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?USER: Print required level totals

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

// SUPPRESSED PRINT Sales Route Code totals format

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

// SUPPRESSED PRINT A/R Customer Number totals format

CASE;

IF NEW Parent_Customer;
CASE;

// IF PAR.Parent Customer is equal to zero
IF PAR.Parent_Customer = *ZERO;

CASE;

// IF PAR.A/R Customer Number is equal to zero
IF PAR.AR_Customer_Number = *ZERO;

CASE;

// IF PAR.Ship To Customer is not equal to zero
IF PAR.Ship_To_Customer <> *ZERO;

// CUR.Parent Customer = PAR.Ship To Customer
CUR.Parent_Customer = PAR.Ship_To_Customer;

EXECUTE FUNCTION(RTV Name.Address,Fax   RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1449132;
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(CUR.Parent_Customer_Name_USR);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(CUR.City);
PARAMETER(CUR.State);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

ENDIF;

ENDIF;

//?*** Print Zeroes??? ***
CASE;

// IF PAR.Print Yes/No          USR is Yes
IF PAR.Print_Yes_No_USR = 'Y';

// PGM.*Print format = CND.Print format
PGM.*Print_format = 'Y';

//?*** Print Zeroes??? ***
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF WRK.Print Yes/No          USR is Yes
IF WRK.Print_Yes_No_USR = 'Y';

// PGM.*Print format = CND.Print format
PGM.*Print_format = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

ENDIF;

//?Print Headers
// CUR.Sales Route Code = PAR.Sales Route Code Ref  USR
CUR.Sales_Route_Code = PAR.Sales_Route_Code_Ref_USR;

EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1270614;
PARAMETER(CUR.Sales_Route_Code);
PARAMETER(CUR.Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CUR.Type Code = PAR.Type Code
CUR.Type_Code = PAR.Type_Code;

EXECUTE FUNCTION(RTV Type Code Desc.    RT) TYPE(RTVOBJ) FILE(CAAJREP)          AC1249965;
PARAMETER(PAR.Type_Code);
PARAMETER(CUR.Description);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CUR.Accounting Year Code = PAR.This Year (YYYY) USR
CUR.Accounting_Year_Code = PAR.This_Year_YYYY_USR;

// CUR.USR Accounting Year = PAR.Last Year (YYYY) USR
CUR.USR_Accounting_Year = PAR.Last_Year_YYYY_USR;

// CUR.Alpha Zeroes 3        USR = PAR.Alpha Zeroes 3        USR
CUR.Alpha_Zeroes_3_USR = PAR.Alpha_Zeroes_3_USR;

// CUR.USR Work Field 3A = PAR.USR Work Field 3A
CUR.USR_Work_Field_3A = PAR.USR_Work_Field_3A;

CASE;

// IF PAR.A/R Customer Number is not equal to zero
IF PAR.AR_Customer_Number <> *ZERO;

// CUR.Parent Customer = PAR.A/R Customer Number
CUR.Parent_Customer = PAR.AR_Customer_Number;

ENDIF;

EXECUTE FUNCTION(RTV Name.Address,Fax   RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1449132;
PARAMETER(CUR.Parent_Customer);
PARAMETER(CUR.Parent_Customer_Name_USR);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(CUR.City);
PARAMETER(PAR.State_Code);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CUR.State = PAR.Z Ship to State Code
CUR.State = PAR.State_Code;

EXECUTE FUNCTION(RTV Territory using St RT) TYPE(RTVOBJ) FILE(PDLWREP)          AC1494008;
PARAMETER(PAR.State_Code);
PARAMETER(CUR.Territory_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(RTV All                RT) TYPE(RTVOBJ) FILE(PDLVREP)          AC1489002;
PARAMETER(CUR.Territory_Code);
PARAMETER(CUR.Territory_Description);
PARAMETER(LCL.TER_Unused_Sts_1);
PARAMETER(LCL.TER_Unused_Sts_2);
PARAMETER(LCL.TER_Unused_Sts_3);
PARAMETER(LCL.TER_Unused_Sts_4);
PARAMETER(LCL.Regional_Salesperson_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF PAR.Sale Type             USR is CWT
IF PAR.Sale_Type_USR = 'C';

// CUR.USR Work Field 5A     USR = CON.  CWT
CUR.USR_Work_Field_5A_USR = 'CWT';

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Work Field 5A     USR = Condition name of PAR.Sale Type             USR
CUR.USR_Work_Field_5A_USR = RTVCND(PAR.Sale_Type_USR);

ENDIF;

// CUR.USR Work Field 5A ref USR = CUR.USR Work Field 5A     USR
CUR.USR_Work_Field_5A_ref_USR = CUR.USR_Work_Field_5A_USR;

//?Retrieving Truck Size
CASE;

// IF PAR.Sale Type             USR is Loads
IF PAR.Sale_Type_USR = 'L';

EXECUTE FUNCTION(RTV Truck Size         RT) TYPE(RTVOBJ) FILE(OMFKREP)          AC1525544;
PARAMETER('S');
PARAMETER(PAR.Maximum_pounds);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Calculate Weights.
CASE;

// IF PAR.This Month  (MM) USR LE PAR.Current Month USR
IF PAR.This_Month_MM_USR <= PAR.Current_Month_USR;

// OR PAR.Actual Shipped Year USR LE PAR.Current Year  USR
OR PAR.Actual_Shipped_Year_USR <= PAR.Current_Year_USR;

//?January Check
CASE;

// IF PAR.This Month  (MM) USR is >= January
IF PAR.This_Month_MM_USR >= 1;

CASE;

// IF PAR.Sale Type             USR is CWT
IF PAR.Sale_Type_USR = 'C';

//?CWT Weight
// CUR.Weight 1.1             .U = CUR.Weight 1.1            SUM / CON.100 *Rounded
CUR.Weight_1_1_U = CUR.Weight_1_1_SUM / 100 'H';

// CUR.Weight 1.2             .U = CUR.Weight 1.2            SUM / CON.100 *Rounded
CUR.Weight_1_2_U = CUR.Weight_1_2_SUM / 100 'H';

// CUR.Weight 1.3             .U = CUR.Weight 1.3            SUM / CON.100 *Rounded
CUR.Weight_1_3_U = CUR.Weight_1_3_SUM / 100 'H';

// CUR.Weight 1.4             .U = CUR.Weight 1.4            SUM / CON.100 *Rounded
CUR.Weight_1_4_U = CUR.Weight_1_4_SUM / 100 'H';

// CUR.Weight 1.5             .U = CUR.Weight 1.5            SUM / CON.100 *Rounded
CUR.Weight_1_5_U = CUR.Weight_1_5_SUM / 100 'H';

// Calculating Jan's Weight
CUR.Current_Jan_Weight_USR = ( ( ( ( CUR.Weight_1_1_SUM + CUR.Weight_1_2_SUM )                     +
+ CUR.Weight_1_3_SUM ) + CUR.Weight_1_4_SUM ) + CUR.Weight_1_5_SUM ) / 100 'H';

// CUR.Last Jan Weight       USR = CUR.Last Jan Weight       SUM / CON.100 *Rounded
CUR.Last_Jan_Weight_USR = CUR.Last_Jan_Weight_SUM / 100 'H';

// IF *OTHERWISE
IF *OTHERWISE;

//?Loads Weight
// CUR.Weight 1.1             .U = CUR.Weight 1.1            SUM / PAR.Maximum poun
CUR.Weight_1_1_U = CUR.Weight_1_1_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 1.2             .U = CUR.Weight 1.2            SUM / PAR.Maximum poun
CUR.Weight_1_2_U = CUR.Weight_1_2_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 1.3             .U = CUR.Weight 1.3            SUM / PAR.Maximum poun
CUR.Weight_1_3_U = CUR.Weight_1_3_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 1.4             .U = CUR.Weight 1.4            SUM / PAR.Maximum poun
CUR.Weight_1_4_U = CUR.Weight_1_4_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 1.5             .U = CUR.Weight 1.5            SUM / PAR.Maximum poun
CUR.Weight_1_5_U = CUR.Weight_1_5_SUM / PAR.Maximum_pounds 'H';

// Calculating Jan's Weight
CUR.Current_Jan_Weight_USR = ( ( ( CUR.Weight_1_1_U + CUR.Weight_1_2_U )                           +
+ CUR.Weight_1_3_U ) + CUR.Weight_1_4_U ) + CUR.Weight_1_5_U;

// CUR.Last Jan Weight       USR = CUR.Last Jan Weight       SUM / PAR.Maximum poun
CUR.Last_Jan_Weight_USR = CUR.Last_Jan_Weight_SUM / PAR.Maximum_pounds 'H';

ENDIF;

// CUR.Last Jan Change       USR = CUR.Current Jan Weight    USR - CUR.Last Jan Wei
CUR.Last_Jan_Change_USR = CUR.Current_Jan_Weight_USR - CUR.Last_Jan_Weight_USR;

// CUR.Current Jan Change    USR = CUR.Last Jan Change       USR
CUR.Current_Jan_Change_USR = CUR.Last_Jan_Change_USR;

ENDIF;

//?February Check
CASE;

// IF PAR.This Month  (MM) USR is >= February
IF PAR.This_Month_MM_USR >= 2;

CASE;

// IF PAR.Sale Type             USR is CWT
IF PAR.Sale_Type_USR = 'C';

//?CWT Weight
// CUR.Weight 2.1             .U = CUR.Weight 2.1            SUM / CON.100 *Rounded
CUR.Weight_2_1_U = CUR.Weight_2_1_SUM / 100 'H';

// CUR.Weight 2.2             .U = CUR.Weight 2.2            SUM / CON.100 *Rounded
CUR.Weight_2_2_U = CUR.Weight_2_2_SUM / 100 'H';

// CUR.Weight 2.3             .U = CUR.Weight 2.3            SUM / CON.100 *Rounded
CUR.Weight_2_3_U = CUR.Weight_2_3_SUM / 100 'H';

// CUR.Weight 2.4             .U = CUR.Weight 2.4            SUM / CON.100 *Rounded
CUR.Weight_2_4_U = CUR.Weight_2_4_SUM / 100 'H';

// CUR.Weight 2.5             .U = CUR.Weight 2.5            SUM / CON.100 *Rounded
CUR.Weight_2_5_U = CUR.Weight_2_5_SUM / 100 'H';

// Calculating Feb's Weight
CUR.Current_Feb_Weight_USR = ( ( ( ( CUR.Weight_2_1_SUM + CUR.Weight_2_2_SUM )                     +
+ CUR.Weight_2_3_SUM ) + CUR.Weight_2_4_SUM ) + CUR.Weight_2_5_SUM ) / 100 'H';

// CUR.Last Feb Weight       USR = CUR.Last Feb Weight       SUM / CON.100 *Rounded
CUR.Last_Feb_Weight_USR = CUR.Last_Feb_Weight_SUM / 100 'H';

// IF *OTHERWISE
IF *OTHERWISE;

//?Load Weight
// CUR.Weight 2.1             .U = CUR.Weight 2.1            SUM / PAR.Maximum poun
CUR.Weight_2_1_U = CUR.Weight_2_1_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 2.2             .U = CUR.Weight 2.2            SUM / PAR.Maximum poun
CUR.Weight_2_2_U = CUR.Weight_2_2_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 2.3             .U = CUR.Weight 2.3            SUM / PAR.Maximum poun
CUR.Weight_2_3_U = CUR.Weight_2_3_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 2.4             .U = CUR.Weight 2.4            SUM / PAR.Maximum poun
CUR.Weight_2_4_U = CUR.Weight_2_4_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 2.5             .U = CUR.Weight 2.5            SUM / PAR.Maximum poun
CUR.Weight_2_5_U = CUR.Weight_2_5_SUM / PAR.Maximum_pounds 'H';

// Calculating Feb's Weight
CUR.Current_Feb_Weight_USR = ( ( ( CUR.Weight_2_1_U + CUR.Weight_2_2_U )                           +
+ CUR.Weight_2_3_U ) + CUR.Weight_2_4_U ) + CUR.Weight_2_5_U;

// CUR.Last Feb Weight       USR = CUR.Last Feb Weight       SUM / PAR.Maximum poun
CUR.Last_Feb_Weight_USR = CUR.Last_Feb_Weight_SUM / PAR.Maximum_pounds 'H';

ENDIF;

// CUR.Last Feb Change       USR = CUR.Current Feb Weight    USR - CUR.Last Feb Wei
CUR.Last_Feb_Change_USR = CUR.Current_Feb_Weight_USR - CUR.Last_Feb_Weight_USR;

// CUR.Current Feb Change    USR = CUR.Current Jan Change    USR + CUR.Last Feb Cha
CUR.Current_Feb_Change_USR = CUR.Current_Jan_Change_USR + CUR.Last_Feb_Change_USR;

ENDIF;

//?March Check
CASE;

// IF PAR.This Month  (MM) USR is >= March
IF PAR.This_Month_MM_USR >= 3;

CASE;

// IF PAR.Sale Type             USR is CWT
IF PAR.Sale_Type_USR = 'C';

//?CWT Weight
// CUR.Weight 3.1             .U = CUR.Weight 3.1            SUM / CON.100 *Rounded
CUR.Weight_3_1_U = CUR.Weight_3_1_SUM / 100 'H';

// CUR.Weight 3.2             .U = CUR.Weight 3.2            SUM / CON.100 *Rounded
CUR.Weight_3_2_U = CUR.Weight_3_2_SUM / 100 'H';

// CUR.Weight 3.3             .U = CUR.Weight 3.3            SUM / CON.100 *Rounded
CUR.Weight_3_3_U = CUR.Weight_3_3_SUM / 100 'H';

// CUR.Weight 3.4             .U = CUR.Weight 3.4            SUM / CON.100 *Rounded
CUR.Weight_3_4_U = CUR.Weight_3_4_SUM / 100 'H';

// CUR.Weight 3.5             .U = CUR.Weight 3.5            SUM / CON.100 *Rounded
CUR.Weight_3_5_U = CUR.Weight_3_5_SUM / 100 'H';

// Calculating Mar's Weight
CUR.Current_Mar_Weight_USR = ( ( ( ( CUR.Weight_3_1_SUM + CUR.Weight_3_2_SUM )                     +
+ CUR.Weight_3_3_SUM ) + CUR.Weight_3_4_SUM ) + CUR.Weight_3_5_SUM ) / 100 'H';

// CUR.Last Mar Weight       USR = CUR.Last Mar Weight       SUM / CON.100 *Rounded
CUR.Last_Mar_Weight_USR = CUR.Last_Mar_Weight_SUM / 100 'H';

// IF *OTHERWISE
IF *OTHERWISE;

//?Loads Weight
// CUR.Weight 3.1             .U = CUR.Weight 3.1            SUM / PAR.Maximum poun
CUR.Weight_3_1_U = CUR.Weight_3_1_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 3.2             .U = CUR.Weight 3.2            SUM / PAR.Maximum poun
CUR.Weight_3_2_U = CUR.Weight_3_2_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 3.3             .U = CUR.Weight 3.3            SUM / PAR.Maximum poun
CUR.Weight_3_3_U = CUR.Weight_3_3_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 3.4             .U = CUR.Weight 3.4            SUM / PAR.Maximum poun
CUR.Weight_3_4_U = CUR.Weight_3_4_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 3.5             .U = CUR.Weight 3.5            SUM / PAR.Maximum poun
CUR.Weight_3_5_U = CUR.Weight_3_5_SUM / PAR.Maximum_pounds 'H';

// Calculating Mar's Weight
CUR.Current_Mar_Weight_USR = ( ( ( CUR.Weight_3_1_U + CUR.Weight_3_2_U )                           +
+ CUR.Weight_3_3_U ) + CUR.Weight_3_4_U ) + CUR.Weight_3_5_U;

// CUR.Last Mar Weight       USR = CUR.Last Mar Weight       SUM / PAR.Maximum poun
CUR.Last_Mar_Weight_USR = CUR.Last_Mar_Weight_SUM / PAR.Maximum_pounds 'H';

ENDIF;

// CUR.Last Mar Change       USR = CUR.Current Mar Weight    USR - CUR.Last Mar Wei
CUR.Last_Mar_Change_USR = CUR.Current_Mar_Weight_USR - CUR.Last_Mar_Weight_USR;

// CUR.Current Mar Change    USR = CUR.Current Feb Change    USR + CUR.Last Mar Cha
CUR.Current_Mar_Change_USR = CUR.Current_Feb_Change_USR + CUR.Last_Mar_Change_USR;

ENDIF;

//?April Check
CASE;

// IF PAR.This Month  (MM) USR is >= April
IF PAR.This_Month_MM_USR >= 4;

CASE;

// IF PAR.Sale Type             USR is CWT
IF PAR.Sale_Type_USR = 'C';

//?CWT Weight
// CUR.Weight 4.1             .U = CUR.Weight 4.1            SUM / CON.100 *Rounded
CUR.Weight_4_1_U = CUR.Weight_4_1_SUM / 100 'H';

// CUR.Weight 4.2             .U = CUR.Weight 4.2            SUM / CON.100 *Rounded
CUR.Weight_4_2_U = CUR.Weight_4_2_SUM / 100 'H';

// CUR.Weight 4.3             .U = CUR.Weight 4.3            SUM / CON.100 *Rounded
CUR.Weight_4_3_U = CUR.Weight_4_3_SUM / 100 'H';

// CUR.Weight 4.4             .U = CUR.Weight 4.4            SUM / CON.100 *Rounded
CUR.Weight_4_4_U = CUR.Weight_4_4_SUM / 100 'H';

// CUR.Weight 4.5             .U = CUR.Weight 4.5            SUM / CON.100 *Rounded
CUR.Weight_4_5_U = CUR.Weight_4_5_SUM / 100 'H';

// Calculating Apr's Weight
CUR.Current_Apr_Weight_USR = ( ( ( ( CUR.Weight_4_1_SUM + CUR.Weight_4_2_SUM )                     +
+ CUR.Weight_4_3_SUM ) + CUR.Weight_4_4_SUM ) + CUR.Weight_4_5_SUM ) / 100 'H';

// CUR.Last Apr Weight       USR = CUR.Last Apr Weight       SUM / CON.100 *Rounded
CUR.Last_Apr_Weight_USR = CUR.Last_Apr_Weight_SUM / 100 'H';

// IF *OTHERWISE
IF *OTHERWISE;

//?Loads Weight
// CUR.Weight 4.1             .U = CUR.Weight 4.1            SUM / PAR.Maximum poun
CUR.Weight_4_1_U = CUR.Weight_4_1_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 4.2             .U = CUR.Weight 4.2            SUM / PAR.Maximum poun
CUR.Weight_4_2_U = CUR.Weight_4_2_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 4.3             .U = CUR.Weight 4.3            SUM / PAR.Maximum poun
CUR.Weight_4_3_U = CUR.Weight_4_3_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 4.4             .U = CUR.Weight 4.4            SUM / PAR.Maximum poun
CUR.Weight_4_4_U = CUR.Weight_4_4_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 4.5             .U = CUR.Weight 4.5            SUM / PAR.Maximum poun
CUR.Weight_4_5_U = CUR.Weight_4_5_SUM / PAR.Maximum_pounds 'H';

// Calculating Apr's Weight
CUR.Current_Apr_Weight_USR = ( ( ( CUR.Weight_4_1_U + CUR.Weight_4_2_U )                           +
+ CUR.Weight_4_3_U ) + CUR.Weight_4_4_U ) + CUR.Weight_4_5_U;

// CUR.Last Apr Weight       USR = CUR.Last Apr Weight       SUM / PAR.Maximum poun
CUR.Last_Apr_Weight_USR = CUR.Last_Apr_Weight_SUM / PAR.Maximum_pounds 'H';

ENDIF;

// CUR.Last Apr Change       USR = CUR.Current Apr Weight    USR - CUR.Last Apr Wei
CUR.Last_Apr_Change_USR = CUR.Current_Apr_Weight_USR - CUR.Last_Apr_Weight_USR;

// CUR.Current Apr Change    USR = CUR.Current Mar Change    USR + CUR.Last Apr Cha
CUR.Current_Apr_Change_USR = CUR.Current_Mar_Change_USR + CUR.Last_Apr_Change_USR;

ENDIF;

//?May Check
CASE;

// IF PAR.This Month  (MM) USR is >= May
IF PAR.This_Month_MM_USR >= 5;

CASE;

// IF PAR.Sale Type             USR is CWT
IF PAR.Sale_Type_USR = 'C';

//?CWT Weight
// CUR.Weight 5.1             .U = CUR.Weight 5.1            SUM / CON.100 *Rounded
CUR.Weight_5_1_U = CUR.Weight_5_1_SUM / 100 'H';

// CUR.Weight 5.2             .U = CUR.Weight 5.2            SUM / CON.100 *Rounded
CUR.Weight_5_2_U = CUR.Weight_5_2_SUM / 100 'H';

// CUR.Weight 5.3             .U = CUR.Weight 5.3            SUM / CON.100 *Rounded
CUR.Weight_5_3_U = CUR.Weight_5_3_SUM / 100 'H';

// CUR.Weight 5.4             .U = CUR.Weight 5.4            SUM / CON.100 *Rounded
CUR.Weight_5_4_U = CUR.Weight_5_4_SUM / 100 'H';

// CUR.Weight 5.5             .U = CUR.Weight 5.5            SUM / CON.100 *Rounded
CUR.Weight_5_5_U = CUR.Weight_5_5_SUM / 100 'H';

// Calculating May's Weight
CUR.Current_May_Weight_USR = ( ( ( ( CUR.Weight_5_1_SUM + CUR.Weight_5_2_SUM )                     +
+ CUR.Weight_5_3_SUM ) + CUR.Weight_5_4_SUM ) + CUR.Weight_5_5_SUM ) / 100 'H';

// CUR.Last May Weight       USR = CUR.Last May Weight       SUM / CON.100 *Rounded
CUR.Last_May_Weight_USR = CUR.Last_May_Weight_SUM / 100 'H';

// IF *OTHERWISE
IF *OTHERWISE;

//?Loads Weight
// CUR.Weight 5.1             .U = CUR.Weight 5.1            SUM / PAR.Maximum poun
CUR.Weight_5_1_U = CUR.Weight_5_1_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 5.2             .U = CUR.Weight 5.2            SUM / PAR.Maximum poun
CUR.Weight_5_2_U = CUR.Weight_5_2_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 5.3             .U = CUR.Weight 5.3            SUM / PAR.Maximum poun
CUR.Weight_5_3_U = CUR.Weight_5_3_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 5.4             .U = CUR.Weight 5.4            SUM / PAR.Maximum poun
CUR.Weight_5_4_U = CUR.Weight_5_4_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 5.5             .U = CUR.Weight 5.5            SUM / PAR.Maximum poun
CUR.Weight_5_5_U = CUR.Weight_5_5_SUM / PAR.Maximum_pounds 'H';

// Calculating May's Weight
CUR.Current_May_Weight_USR = ( ( ( CUR.Weight_5_1_U + CUR.Weight_5_2_U )                           +
+ CUR.Weight_5_3_U ) + CUR.Weight_5_4_U ) + CUR.Weight_5_5_U;

// CUR.Last May Weight       USR = CUR.Last May Weight       SUM / PAR.Maximum poun
CUR.Last_May_Weight_USR = CUR.Last_May_Weight_SUM / PAR.Maximum_pounds 'H';

ENDIF;

// CUR.Last May Change       USR = CUR.Current May Weight    USR - CUR.Last May Wei
CUR.Last_May_Change_USR = CUR.Current_May_Weight_USR - CUR.Last_May_Weight_USR;

// CUR.Current May Change    USR = CUR.Current Apr Change    USR + CUR.Last May Cha
CUR.Current_May_Change_USR = CUR.Current_Apr_Change_USR + CUR.Last_May_Change_USR;

ENDIF;

//?June Check
CASE;

// IF PAR.This Month  (MM) USR is >= June
IF PAR.This_Month_MM_USR >= 6;

CASE;

// IF PAR.Sale Type             USR is CWT
IF PAR.Sale_Type_USR = 'C';

//?CWT Weight
// CUR.Weight 6.1             .U = CUR.Weight 6.1            SUM / CON.100 *Rounded
CUR.Weight_6_1_U = CUR.Weight_6_1_SUM / 100 'H';

// CUR.Weight 6.2             .U = CUR.Weight 6.2            SUM / CON.100 *Rounded
CUR.Weight_6_2_U = CUR.Weight_6_2_SUM / 100 'H';

// CUR.Weight 6.3             .U = CUR.Weight 6.3            SUM / CON.100 *Rounded
CUR.Weight_6_3_U = CUR.Weight_6_3_SUM / 100 'H';

// CUR.Weight 6.4             .U = CUR.Weight 6.4            SUM / CON.100 *Rounded
CUR.Weight_6_4_U = CUR.Weight_6_4_SUM / 100 'H';

// CUR.Weight 6.5             .U = CUR.Weight 6.5            SUM / CON.100 *Rounded
CUR.Weight_6_5_U = CUR.Weight_6_5_SUM / 100 'H';

// Calculating Jun's Weight
CUR.Current_Jun_Weight_USR = ( ( ( ( CUR.Weight_6_1_SUM + CUR.Weight_6_2_SUM )                     +
+ CUR.Weight_6_3_SUM ) + CUR.Weight_6_4_SUM ) + CUR.Weight_6_5_SUM ) / 100 'H';

// CUR.Last Jun Weight       USR = CUR.Last Jun Weight       SUM / CON.100 *Rounded
CUR.Last_Jun_Weight_USR = CUR.Last_Jun_Weight_SUM / 100 'H';

// IF *OTHERWISE
IF *OTHERWISE;

//?Loads Weight
// CUR.Weight 6.1             .U = CUR.Weight 6.1            SUM / PAR.Maximum poun
CUR.Weight_6_1_U = CUR.Weight_6_1_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 6.2             .U = CUR.Weight 6.2            SUM / PAR.Maximum poun
CUR.Weight_6_2_U = CUR.Weight_6_2_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 6.3             .U = CUR.Weight 6.3            SUM / PAR.Maximum poun
CUR.Weight_6_3_U = CUR.Weight_6_3_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 6.4             .U = CUR.Weight 6.4            SUM / PAR.Maximum poun
CUR.Weight_6_4_U = CUR.Weight_6_4_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 6.5             .U = CUR.Weight 6.5            SUM / PAR.Maximum poun
CUR.Weight_6_5_U = CUR.Weight_6_5_SUM / PAR.Maximum_pounds 'H';

// Calculating Jun's Weight
CUR.Current_Jun_Weight_USR = ( ( ( CUR.Weight_6_1_U + CUR.Weight_6_2_U )                           +
+ CUR.Weight_6_3_U ) + CUR.Weight_6_4_U ) + CUR.Weight_6_5_U;

// CUR.Last Jun Weight       USR = CUR.Last Jun Weight       SUM / PAR.Maximum poun
CUR.Last_Jun_Weight_USR = CUR.Last_Jun_Weight_SUM / PAR.Maximum_pounds 'H';

ENDIF;

// CUR.Last Jun Change       USR = CUR.Current Jun Weight    USR - CUR.Last Jun Wei
CUR.Last_Jun_Change_USR = CUR.Current_Jun_Weight_USR - CUR.Last_Jun_Weight_USR;

// CUR.Current Jun Change    USR = CUR.Current May Change    USR + CUR.Last Jun Cha
CUR.Current_Jun_Change_USR = CUR.Current_May_Change_USR + CUR.Last_Jun_Change_USR;

ENDIF;

//?July Check
CASE;

// IF PAR.This Month  (MM) USR is >= July
IF PAR.This_Month_MM_USR >= 7;

CASE;

// IF PAR.Sale Type             USR is CWT
IF PAR.Sale_Type_USR = 'C';

//?CWT Weight
// CUR.Weight 7.1             .U = CUR.Weight 7.1            SUM / CON.100 *Rounded
CUR.Weight_7_1_U = CUR.Weight_7_1_SUM / 100 'H';

// CUR.Weight 7.2             .U = CUR.Weight 7.2            SUM / CON.100 *Rounded
CUR.Weight_7_2_U = CUR.Weight_7_2_SUM / 100 'H';

// CUR.Weight 7.3             .U = CUR.Weight 7.3            SUM / CON.100 *Rounded
CUR.Weight_7_3_U = CUR.Weight_7_3_SUM / 100 'H';

// CUR.Weight 7.4             .U = CUR.Weight 7.4            SUM / CON.100 *Rounded
CUR.Weight_7_4_U = CUR.Weight_7_4_SUM / 100 'H';

// CUR.Weight 7.5             .U = CUR.Weight 7.5            SUM / CON.100 *Rounded
CUR.Weight_7_5_U = CUR.Weight_7_5_SUM / 100 'H';

// Calculating Jul's Weight
CUR.Current_Jul_Weight_USR = ( ( ( ( CUR.Weight_7_1_SUM + CUR.Weight_7_2_SUM )                     +
+ CUR.Weight_7_3_SUM ) + CUR.Weight_7_4_SUM ) + CUR.Weight_7_5_SUM ) / 100 'H';

// CUR.Last Jul Weight       USR = CUR.Last Jul Weight       SUM / CON.100 *Rounded
CUR.Last_Jul_Weight_USR = CUR.Last_Jul_Weight_SUM / 100 'H';

// IF *OTHERWISE
IF *OTHERWISE;

//?Load Weight
// CUR.Weight 7.1             .U = CUR.Weight 7.1            SUM / PAR.Maximum poun
CUR.Weight_7_1_U = CUR.Weight_7_1_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 7.2             .U = CUR.Weight 7.2            SUM / PAR.Maximum poun
CUR.Weight_7_2_U = CUR.Weight_7_2_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 7.3             .U = CUR.Weight 7.3            SUM / PAR.Maximum poun
CUR.Weight_7_3_U = CUR.Weight_7_3_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 7.4             .U = CUR.Weight 7.4            SUM / PAR.Maximum poun
CUR.Weight_7_4_U = CUR.Weight_7_4_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 7.5             .U = CUR.Weight 7.5            SUM / PAR.Maximum poun
CUR.Weight_7_5_U = CUR.Weight_7_5_SUM / PAR.Maximum_pounds 'H';

// Calculating Jul's Weight
CUR.Current_Jul_Weight_USR = ( ( ( CUR.Weight_7_1_U + CUR.Weight_7_2_U )                           +
+ CUR.Weight_7_3_U ) + CUR.Weight_7_4_U ) + CUR.Weight_7_5_U;

// CUR.Last Jul Weight       USR = CUR.Last Jul Weight       SUM / PAR.Maximum poun
CUR.Last_Jul_Weight_USR = CUR.Last_Jul_Weight_SUM / PAR.Maximum_pounds 'H';

ENDIF;

// CUR.Last Jul Change       USR = CUR.Current Jul Weight    USR - CUR.Last Jul Wei
CUR.Last_Jul_Change_USR = CUR.Current_Jul_Weight_USR - CUR.Last_Jul_Weight_USR;

// CUR.Current Jul Change    USR = CUR.Current Jun Change    USR + CUR.Last Jul Cha
CUR.Current_Jul_Change_USR = CUR.Current_Jun_Change_USR + CUR.Last_Jul_Change_USR;

ENDIF;

//?August Check
CASE;

// IF PAR.This Month  (MM) USR is >= August
IF PAR.This_Month_MM_USR >= 8;

CASE;

// IF PAR.Sale Type             USR is CWT
IF PAR.Sale_Type_USR = 'C';

//?CWT Loads
// CUR.Weight 8.1            USR = CUR.Weight 8.1            SUM / CON.100 *Rounded
CUR.Weight_8_1_USR = CUR.Weight_8_1_SUM / 100 'H';

// CUR.Weight 8.2            USR = CUR.Weight 8.2            SUM / CON.100 *Rounded
CUR.Weight_8_2_USR = CUR.Weight_8_2_SUM / 100 'H';

// CUR.Weight 8.3            USR = CUR.Weight 8.3            SUM / CON.100 *Rounded
CUR.Weight_8_3_USR = CUR.Weight_8_3_SUM / 100 'H';

// CUR.Weight 8.4            USR = CUR.Weight 8.4            SUM / CON.100 *Rounded
CUR.Weight_8_4_USR = CUR.Weight_8_4_SUM / 100 'H';

// CUR.Weight 8.5            USR = CUR.Weight 8.5            SUM / CON.100 *Rounded
CUR.Weight_8_5_USR = CUR.Weight_8_5_SUM / 100 'H';

// Calculating Aug's Weight
CUR.Current_Aug_Weight_USR = ( ( ( ( CUR.Weight_8_1_SUM + CUR.Weight_8_2_SUM )                     +
+ CUR.Weight_8_3_SUM ) + CUR.Weight_8_4_SUM ) + CUR.Weight_8_5_SUM ) / 100 'H';

// CUR.Last Aug Weight       USR = CUR.Last Aug Weight       SUM / CON.100 *Rounded
CUR.Last_Aug_Weight_USR = CUR.Last_Aug_Weight_SUM / 100 'H';

// IF *OTHERWISE
IF *OTHERWISE;

//?Weight Loads
// CUR.Weight 8.1            USR = CUR.Weight 8.1            SUM / PAR.Maximum poun
CUR.Weight_8_1_USR = CUR.Weight_8_1_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 8.2            USR = CUR.Weight 8.2            SUM / PAR.Maximum poun
CUR.Weight_8_2_USR = CUR.Weight_8_2_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 8.3            USR = CUR.Weight 8.3            SUM / PAR.Maximum poun
CUR.Weight_8_3_USR = CUR.Weight_8_3_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 8.4            USR = CUR.Weight 8.4            SUM / PAR.Maximum poun
CUR.Weight_8_4_USR = CUR.Weight_8_4_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 8.5            USR = CUR.Weight 8.5            SUM / PAR.Maximum poun
CUR.Weight_8_5_USR = CUR.Weight_8_5_SUM / PAR.Maximum_pounds 'H';

// Calculating Aug's Weight
CUR.Current_Aug_Weight_USR = ( ( ( CUR.Weight_8_1_USR + CUR.Weight_8_2_USR )                       +
+ CUR.Weight_8_3_USR ) + CUR.Weight_8_4_USR ) + CUR.Weight_8_5_USR;

// CUR.Last Aug Weight       USR = CUR.Last Aug Weight       SUM / PAR.Maximum poun
CUR.Last_Aug_Weight_USR = CUR.Last_Aug_Weight_SUM / PAR.Maximum_pounds 'H';

ENDIF;

// CUR.Last Aug Change       USR = CUR.Current Aug Weight    USR - CUR.Last Aug Wei
CUR.Last_Aug_Change_USR = CUR.Current_Aug_Weight_USR - CUR.Last_Aug_Weight_USR;

// CUR.Current Aug Change    USR = CUR.Current Jul Change    USR + CUR.Last Aug Cha
CUR.Current_Aug_Change_USR = CUR.Current_Jul_Change_USR + CUR.Last_Aug_Change_USR;

ENDIF;

//?September Check
CASE;

// IF PAR.This Month  (MM) USR is >= September
IF PAR.This_Month_MM_USR >= 9;

CASE;

// IF PAR.Sale Type             USR is CWT
IF PAR.Sale_Type_USR = 'C';

//?CWT Weight
// CUR.Weight 9.1            USR = CUR.Weight 9.1            SUM / CON.100 *Rounded
CUR.Weight_9_1_USR = CUR.Weight_9_1_SUM / 100 'H';

// CUR.Weight 9.2            USR = CUR.Weight 9.2            SUM / CON.100 *Rounded
CUR.Weight_9_2_USR = CUR.Weight_9_2_SUM / 100 'H';

// CUR.Weight 9.3            USR = CUR.Weight 9.3            SUM / CON.100 *Rounded
CUR.Weight_9_3_USR = CUR.Weight_9_3_SUM / 100 'H';

// CUR.Weight 9.4            USR = CUR.Weight 9.4            SUM / CON.100 *Rounded
CUR.Weight_9_4_USR = CUR.Weight_9_4_SUM / 100 'H';

// CUR.Weight 9.5            USR = CUR.Weight 9.5            SUM / CON.100 *Rounded
CUR.Weight_9_5_USR = CUR.Weight_9_5_SUM / 100 'H';

// Calculating Sep's Weight
CUR.Current_Sep_Weight_USR = ( ( ( ( CUR.Weight_9_1_SUM + CUR.Weight_9_2_SUM )                     +
+ CUR.Weight_9_3_SUM ) + CUR.Weight_9_4_SUM ) + CUR.Weight_9_5_SUM ) / 100 'H';

// CUR.Last Sep Weight       USR = CUR.Last Sep Weight       SUM / CON.100 *Rounded
CUR.Last_Sep_Weight_USR = CUR.Last_Sep_Weight_SUM / 100 'H';

// IF *OTHERWISE
IF *OTHERWISE;

//?Load Weights
// CUR.Weight 9.1            USR = CUR.Weight 9.1            SUM / PAR.Maximum poun
CUR.Weight_9_1_USR = CUR.Weight_9_1_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 9.2            USR = CUR.Weight 9.2            SUM / PAR.Maximum poun
CUR.Weight_9_2_USR = CUR.Weight_9_2_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 9.3            USR = CUR.Weight 9.3            SUM / PAR.Maximum poun
CUR.Weight_9_3_USR = CUR.Weight_9_3_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 9.4            USR = CUR.Weight 9.4            SUM / PAR.Maximum poun
CUR.Weight_9_4_USR = CUR.Weight_9_4_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 9.5            USR = CUR.Weight 9.5            SUM / PAR.Maximum poun
CUR.Weight_9_5_USR = CUR.Weight_9_5_SUM / PAR.Maximum_pounds 'H';

// Calculating Sep's Weight
CUR.Current_Sep_Weight_USR = ( ( ( CUR.Weight_9_1_USR + CUR.Weight_9_2_USR )                       +
+ CUR.Weight_9_3_USR ) + CUR.Weight_9_4_USR ) + CUR.Weight_9_5_USR;

// CUR.Last Sep Weight       USR = CUR.Last Sep Weight       SUM / PAR.Maximum poun
CUR.Last_Sep_Weight_USR = CUR.Last_Sep_Weight_SUM / PAR.Maximum_pounds 'H';

ENDIF;

// CUR.Last Sep Change       USR = CUR.Current Sep Weight    USR - CUR.Last Sep Wei
CUR.Last_Sep_Change_USR = CUR.Current_Sep_Weight_USR - CUR.Last_Sep_Weight_USR;

// CUR.Current Sep Change    USR = CUR.Current Aug Change    USR + CUR.Last Sep Cha
CUR.Current_Sep_Change_USR = CUR.Current_Aug_Change_USR + CUR.Last_Sep_Change_USR;

ENDIF;

//?October Check
CASE;

// IF PAR.This Month  (MM) USR is >= October
IF PAR.This_Month_MM_USR >= 10;

CASE;

// IF PAR.Sale Type             USR is CWT
IF PAR.Sale_Type_USR = 'C';

//?CWT Weight
// CUR.Weight 10.1           USR = CUR.Weight 10.1           SUM / CON.100 *Rounded
CUR.Weight_10_1_USR = CUR.Weight_10_1_SUM / 100 'H';

// CUR.Weight 10.2           usr = CUR.Weight 10.2           SUM / CON.100 *Rounded
CUR.Weight_10_2_usr = CUR.Weight_10_2_SUM / 100 'H';

// CUR.Weight 10.3           USR = CUR.Weight 10.3           SUM / CON.100 *Rounded
CUR.Weight_10_3_USR = CUR.Weight_10_3_SUM / 100 'H';

// CUR.Weight 10.4           USR = CUR.Weight 10.4           SUM / CON.100 *Rounded
CUR.Weight_10_4_USR = CUR.Weight_10_4_SUM / 100 'H';

// CUR.Weight 10.5           USR = CUR.Weight 10.5           SUM / CON.100 *Rounded
CUR.Weight_10_5_USR = CUR.Weight_10_5_SUM / 100 'H';

// Calculating Oct's Weight
CUR.Current_Oct_Weight_USR = ( ( ( ( CUR.Weight_10_1_SUM + CUR.Weight_10_2_SUM )                   +
+ CUR.Weight_10_3_SUM ) + CUR.Weight_10_4_SUM ) + CUR.Weight_10_5_SUM ) / 100 'H';

// CUR.Last Oct Weight       USR = CUR.Last Oct Weight       SUM / CON.100 *Rounded
CUR.Last_Oct_Weight_USR = CUR.Last_Oct_Weight_SUM / 100 'H';

// IF *OTHERWISE
IF *OTHERWISE;

//?Load Weight
// CUR.Weight 10.1           USR = CUR.Weight 10.1           SUM / PAR.Maximum poun
CUR.Weight_10_1_USR = CUR.Weight_10_1_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 10.2           usr = CUR.Weight 10.2           SUM / PAR.Maximum poun
CUR.Weight_10_2_usr = CUR.Weight_10_2_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 10.3           USR = CUR.Weight 10.3           SUM / PAR.Maximum poun
CUR.Weight_10_3_USR = CUR.Weight_10_3_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 10.4           USR = CUR.Weight 10.4           SUM / PAR.Maximum poun
CUR.Weight_10_4_USR = CUR.Weight_10_4_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 10.5           USR = CUR.Weight 10.5           SUM / PAR.Maximum poun
CUR.Weight_10_5_USR = CUR.Weight_10_5_SUM / PAR.Maximum_pounds 'H';

// Calculating Oct's Weight
CUR.Current_Oct_Weight_USR = ( ( ( CUR.Weight_10_1_USR + CUR.Weight_10_2_usr )                     +
+ CUR.Weight_10_3_USR ) + CUR.Weight_10_4_USR ) + CUR.Weight_10_5_USR;

// CUR.Last Oct Weight       USR = CUR.Last Oct Weight       SUM / PAR.Maximum poun
CUR.Last_Oct_Weight_USR = CUR.Last_Oct_Weight_SUM / PAR.Maximum_pounds 'H';

ENDIF;

// CUR.Last Oct Change       USR = CUR.Current Oct Weight    USR - CUR.Last Oct Wei
CUR.Last_Oct_Change_USR = CUR.Current_Oct_Weight_USR - CUR.Last_Oct_Weight_USR;

// CUR.Current Oct Change    USR = CUR.Current Sep Change    USR + CUR.Last Oct Cha
CUR.Current_Oct_Change_USR = CUR.Current_Sep_Change_USR + CUR.Last_Oct_Change_USR;

ENDIF;

//?November Check
CASE;

// IF PAR.This Month  (MM) USR is >= November
IF PAR.This_Month_MM_USR >= 11;

CASE;

// IF PAR.Sale Type             USR is CWT
IF PAR.Sale_Type_USR = 'C';

//?CWT Weight
// CUR.Weight 11.1           USR = CUR.Weight 11.1           SUM / CON.100 *Rounded
CUR.Weight_11_1_USR = CUR.Weight_11_1_SUM / 100 'H';

// CUR.Weight 11.2           USR = CUR.Weight 11.2           SUM / CON.100 *Rounded
CUR.Weight_11_2_USR = CUR.Weight_11_2_SUM / 100 'H';

// CUR.Weight 11.3           USR = CUR.Weight 11.3           SUM / CON.100 *Rounded
CUR.Weight_11_3_USR = CUR.Weight_11_3_SUM / 100 'H';

// CUR.Weight 11.4           USR = CUR.Weight 11.4           SUM / CON.100 *Rounded
CUR.Weight_11_4_USR = CUR.Weight_11_4_SUM / 100 'H';

// CUR.Weight 11.5           USR = CUR.Weight 11.5           SUM / CON.100 *Rounded
CUR.Weight_11_5_USR = CUR.Weight_11_5_SUM / 100 'H';

// Calculating Nov's Weight
CUR.Current_Nov_Weight_USR = ( ( ( ( CUR.Weight_11_1_SUM + CUR.Weight_11_2_SUM )                   +
+ CUR.Weight_11_3_SUM ) + CUR.Weight_11_4_SUM ) + CUR.Weight_11_5_SUM ) / 100 'H';

// CUR.Last Nov Weight       USR = CUR.Last Nov Weight       SUM / CON.100 *Rounded
CUR.Last_Nov_Weight_USR = CUR.Last_Nov_Weight_SUM / 100 'H';

// IF *OTHERWISE
IF *OTHERWISE;

//?Load Weight
// CUR.Weight 11.1           USR = CUR.Weight 11.1           SUM / PAR.Maximum poun
CUR.Weight_11_1_USR = CUR.Weight_11_1_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 11.2           USR = CUR.Weight 11.2           SUM / PAR.Maximum poun
CUR.Weight_11_2_USR = CUR.Weight_11_2_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 11.3           USR = CUR.Weight 11.3           SUM / PAR.Maximum poun
CUR.Weight_11_3_USR = CUR.Weight_11_3_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 11.4           USR = CUR.Weight 11.4           SUM / PAR.Maximum poun
CUR.Weight_11_4_USR = CUR.Weight_11_4_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 11.5           USR = CUR.Weight 11.5           SUM / PAR.Maximum poun
CUR.Weight_11_5_USR = CUR.Weight_11_5_SUM / PAR.Maximum_pounds 'H';

// Calculating Nov's Weight
CUR.Current_Nov_Weight_USR = ( ( ( CUR.Weight_11_1_USR + CUR.Weight_11_2_USR )                     +
+ CUR.Weight_11_3_USR ) + CUR.Weight_11_4_USR ) + CUR.Weight_11_5_USR;

// CUR.Last Nov Weight       USR = CUR.Last Nov Weight       SUM / PAR.Maximum poun
CUR.Last_Nov_Weight_USR = CUR.Last_Nov_Weight_SUM / PAR.Maximum_pounds 'H';

ENDIF;

// CUR.Last Nov Change       USR = CUR.Current Nov Weight    USR - CUR.Last Nov Wei
CUR.Last_Nov_Change_USR = CUR.Current_Nov_Weight_USR - CUR.Last_Nov_Weight_USR;

// CUR.Current Nov Change    USR = CUR.Current Oct Change    USR + CUR.Last Nov Cha
CUR.Current_Nov_Change_USR = CUR.Current_Oct_Change_USR + CUR.Last_Nov_Change_USR;

ENDIF;

//?December Check
CASE;

// IF PAR.This Month  (MM) USR is >= December
IF PAR.This_Month_MM_USR >= 12;

CASE;

// IF PAR.Sale Type             USR is CWT
IF PAR.Sale_Type_USR = 'C';

//?CWT Loads
// CUR.Weight 12.1           USR = CUR.Weight 12.1           SUM / CON.100 *Rounded
CUR.Weight_12_1_USR = CUR.Weight_12_1_SUM / 100 'H';

// CUR.Weight 12.2           USR = CUR.Weight 12.2           SUM / CON.100 *Rounded
CUR.Weight_12_2_USR = CUR.Weight_12_2_SUM / 100 'H';

// CUR.Weight 12.3           USR = CUR.Weight 12.3           SUM / CON.100 *Rounded
CUR.Weight_12_3_USR = CUR.Weight_12_3_SUM / 100 'H';

// CUR.Weight 12.4           USR = CUR.Weight 12.4           SUM / CON.100 *Rounded
CUR.Weight_12_4_USR = CUR.Weight_12_4_SUM / 100 'H';

// CUR.Weight 12.5           USR = CUR.Weight 12.5           SUM / CON.100 *Rounded
CUR.Weight_12_5_USR = CUR.Weight_12_5_SUM / 100 'H';

// Calculating Dec's Weight
CUR.Current_Dec_Weight_USR = ( ( ( ( CUR.Weight_12_1_SUM + CUR.Weight_12_2_SUM )                   +
+ CUR.Weight_12_3_SUM ) + CUR.Weight_12_4_SUM ) + CUR.Weight_12_5_SUM ) / 100 'H';

// CUR.Last Dec Weight       USR = CUR.Last Dec Weight       SUM / CON.100 *Rounded
CUR.Last_Dec_Weight_USR = CUR.Last_Dec_Weight_SUM / 100 'H';

// IF *OTHERWISE
IF *OTHERWISE;

//?Weight Loads
// CUR.Weight 12.1           USR = CUR.Weight 12.1           SUM / PAR.Maximum poun
CUR.Weight_12_1_USR = CUR.Weight_12_1_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 12.2           USR = CUR.Weight 12.2           SUM / PAR.Maximum poun
CUR.Weight_12_2_USR = CUR.Weight_12_2_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 12.3           USR = CUR.Weight 12.3           SUM / PAR.Maximum poun
CUR.Weight_12_3_USR = CUR.Weight_12_3_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 12.4           USR = CUR.Weight 12.4           SUM / PAR.Maximum poun
CUR.Weight_12_4_USR = CUR.Weight_12_4_SUM / PAR.Maximum_pounds 'H';

// CUR.Weight 12.5           USR = CUR.Weight 12.5           SUM / PAR.Maximum poun
CUR.Weight_12_5_USR = CUR.Weight_12_5_SUM / PAR.Maximum_pounds 'H';

// Calculating Dec's Weight
CUR.Current_Dec_Weight_USR = ( ( ( CUR.Weight_12_1_USR + CUR.Weight_12_2_USR )                     +
+ CUR.Weight_12_3_USR ) + CUR.Weight_12_4_USR ) + CUR.Weight_12_5_USR;

// CUR.Last Dec Weight       USR = CUR.Last Dec Weight       SUM / PAR.Maximum poun
CUR.Last_Dec_Weight_USR = CUR.Last_Dec_Weight_SUM / PAR.Maximum_pounds 'H';

ENDIF;

// CUR.Last Dec Change       USR = CUR.Current Dec Weight    USR - CUR.Last Dec Wei
CUR.Last_Dec_Change_USR = CUR.Current_Dec_Weight_USR - CUR.Last_Dec_Weight_USR;

// CUR.Current Dec Change    USR = CUR.Current Nov Change    USR + CUR.Last Dec Cha
CUR.Current_Dec_Change_USR = CUR.Current_Nov_Change_USR + CUR.Last_Dec_Change_USR;

ENDIF;

// Calculating Current Total
CUR.Current_Load_Total_USR = ( ( ( ( ( ( ( ( ( ( CUR.Current_Jan_Weight_USR                        +
+ CUR.Current_Feb_Weight_USR ) + CUR.Current_Mar_Weight_USR )                                     +
+ CUR.Current_Apr_Weight_USR ) + CUR.Current_May_Weight_USR )                                     +
+ CUR.Current_Jun_Weight_USR ) + CUR.Current_Jul_Weight_USR )                                     +
+ CUR.Current_Aug_Weight_USR ) + CUR.Current_Sep_Weight_USR )                                     +
+ CUR.Current_Oct_Weight_USR ) + CUR.Current_Nov_Weight_USR )                                     +
+ CUR.Current_Dec_Weight_USR;

// Calculating Last Total
CUR.Last_Load_Total_USR = ( ( ( ( ( ( ( ( ( ( CUR.Last_Jan_Weight_USR                              +
+ CUR.Last_Feb_Weight_USR ) + CUR.Last_Mar_Weight_USR ) + CUR.Last_Apr_Weight_USR )               +
+ CUR.Last_May_Weight_USR ) + CUR.Last_Jun_Weight_USR ) + CUR.Last_Jul_Weight_USR )               +
+ CUR.Last_Aug_Weight_USR ) + CUR.Last_Sep_Weight_USR ) + CUR.Last_Oct_Weight_USR )               +
+ CUR.Last_Nov_Weight_USR ) + CUR.Last_Dec_Weight_USR;

//?Create Summary Work file for January
CASE;

// IF PAR.Report Type Both      USR is Summary
IF PAR.Report_Type_Both_USR = 'S';

CASE;

// IF PAR.This Month  (MM) USR is January
IF PAR.This_Month_MM_USR = 01;

// Call program Zzz Workfile           XF.
CALL PROGRAM(Zzz Workfile           XF) ('PDOEXFR');
PARAMETER(CUR.Parent_Customer);
PARAMETER(CUR.Current_Jan_Weight_USR);
PARAMETER(CUR.Last_Jan_Weight_USR);
PARAMETER(CUR.Last_Jan_Change_USR);
PARAMETER(CUR.Current_Jan_Change_USR);

ENDIF;

ENDIF;

//?Create Summary Work file for February
CASE;

// IF PAR.Report Type Both      USR is Summary
IF PAR.Report_Type_Both_USR = 'S';

CASE;

// IF PAR.This Month  (MM) USR is February
IF PAR.This_Month_MM_USR = 02;

// Call program Zzz Workfile           XF.
CALL PROGRAM(Zzz Workfile           XF) ('PDOEXFR');
PARAMETER(CUR.Parent_Customer);
PARAMETER(CUR.Current_Feb_Weight_USR);
PARAMETER(CUR.Last_Feb_Weight_USR);
PARAMETER(CUR.Last_Feb_Change_USR);
PARAMETER(CUR.Current_Feb_Change_USR);

ENDIF;

ENDIF;

//?Create Summary Work file for March
CASE;

// IF PAR.Report Type Both      USR is Summary
IF PAR.Report_Type_Both_USR = 'S';

CASE;

// IF PAR.This Month  (MM) USR is March
IF PAR.This_Month_MM_USR = 03;

// Call program Zzz Workfile           XF.
CALL PROGRAM(Zzz Workfile           XF) ('PDOEXFR');
PARAMETER(CUR.Parent_Customer);
PARAMETER(CUR.Current_Mar_Weight_USR);
PARAMETER(CUR.Last_Mar_Weight_USR);
PARAMETER(CUR.Last_Mar_Change_USR);
PARAMETER(CUR.Current_Mar_Change_USR);

ENDIF;

ENDIF;

//?Create Summary Work file for April
CASE;

// IF PAR.Report Type Both      USR is Summary
IF PAR.Report_Type_Both_USR = 'S';

CASE;

// IF PAR.This Month  (MM) USR is April
IF PAR.This_Month_MM_USR = 04;

// Call program Zzz Workfile           XF.
CALL PROGRAM(Zzz Workfile           XF) ('PDOEXFR');
PARAMETER(CUR.Parent_Customer);
PARAMETER(CUR.Current_Apr_Weight_USR);
PARAMETER(CUR.Last_Apr_Weight_USR);
PARAMETER(CUR.Last_Apr_Change_USR);
PARAMETER(CUR.Current_Apr_Change_USR);

ENDIF;

ENDIF;

//?Create Summary Work file for May
CASE;

// IF PAR.Report Type Both      USR is Summary
IF PAR.Report_Type_Both_USR = 'S';

CASE;

// IF PAR.This Month  (MM) USR is May
IF PAR.This_Month_MM_USR = 05;

// Call program Zzz Workfile           XF.
CALL PROGRAM(Zzz Workfile           XF) ('PDOEXFR');
PARAMETER(CUR.Parent_Customer);
PARAMETER(CUR.Current_May_Weight_USR);
PARAMETER(CUR.Last_May_Weight_USR);
PARAMETER(CUR.Last_May_Change_USR);
PARAMETER(CUR.Current_May_Change_USR);

ENDIF;

ENDIF;

//?Create Summary Work file for June
CASE;

// IF PAR.Report Type Both      USR is Summary
IF PAR.Report_Type_Both_USR = 'S';

CASE;

// IF PAR.This Month  (MM) USR is June
IF PAR.This_Month_MM_USR = 06;

// Call program Zzz Workfile           XF.
CALL PROGRAM(Zzz Workfile           XF) ('PDOEXFR');
PARAMETER(CUR.Parent_Customer);
PARAMETER(CUR.Current_Jun_Weight_USR);
PARAMETER(CUR.Last_Jun_Weight_USR);
PARAMETER(CUR.Last_Jun_Change_USR);
PARAMETER(CUR.Current_Jun_Change_USR);

ENDIF;

ENDIF;

//?Create Summary Work file for July
CASE;

// IF PAR.Report Type Both      USR is Summary
IF PAR.Report_Type_Both_USR = 'S';

CASE;

// IF PAR.This Month  (MM) USR is July
IF PAR.This_Month_MM_USR = 07;

// Call program Zzz Workfile           XF.
CALL PROGRAM(Zzz Workfile           XF) ('PDOEXFR');
PARAMETER(CUR.Parent_Customer);
PARAMETER(CUR.Current_Jul_Weight_USR);
PARAMETER(CUR.Last_Jul_Weight_USR);
PARAMETER(CUR.Last_Jul_Change_USR);
PARAMETER(CUR.Current_Jul_Change_USR);

ENDIF;

ENDIF;

//?Create Summary Work file for August
CASE;

// IF PAR.Report Type Both      USR is Summary
IF PAR.Report_Type_Both_USR = 'S';

CASE;

// IF PAR.This Month  (MM) USR is August
IF PAR.This_Month_MM_USR = 08;

// Call program Zzz Workfile           XF.
CALL PROGRAM(Zzz Workfile           XF) ('PDOEXFR');
PARAMETER(CUR.Parent_Customer);
PARAMETER(CUR.Current_Aug_Weight_USR);
PARAMETER(CUR.Last_Aug_Weight_USR);
PARAMETER(CUR.Last_Aug_Change_USR);
PARAMETER(CUR.Current_Aug_Change_USR);

ENDIF;

ENDIF;

//?Create Summary Work file for September
CASE;

// IF PAR.Report Type Both      USR is Summary
IF PAR.Report_Type_Both_USR = 'S';

CASE;

// IF PAR.This Month  (MM) USR is September
IF PAR.This_Month_MM_USR = 09;

// Call program Zzz Workfile           XF.
CALL PROGRAM(Zzz Workfile           XF) ('PDOEXFR');
PARAMETER(CUR.Parent_Customer);
PARAMETER(CUR.Current_Sep_Weight_USR);
PARAMETER(CUR.Last_Sep_Weight_USR);
PARAMETER(CUR.Last_Sep_Change_USR);
PARAMETER(CUR.Current_Sep_Change_USR);

ENDIF;

ENDIF;

//?Create Summary Work file for October
CASE;

// IF PAR.Report Type Both      USR is Summary
IF PAR.Report_Type_Both_USR = 'S';

CASE;

// IF PAR.This Month  (MM) USR is October
IF PAR.This_Month_MM_USR = 10;

// Call program Zzz Workfile           XF.
CALL PROGRAM(Zzz Workfile           XF) ('PDOEXFR');
PARAMETER(CUR.Parent_Customer);
PARAMETER(CUR.Current_Oct_Weight_USR);
PARAMETER(CUR.Last_Oct_Weight_USR);
PARAMETER(CUR.Last_Oct_Change_USR);
PARAMETER(CUR.Current_Oct_Change_USR);

ENDIF;

ENDIF;

//?Create Summary Work file for November
CASE;

// IF PAR.Report Type Both      USR is Summary
IF PAR.Report_Type_Both_USR = 'S';

CASE;

// IF PAR.This Month  (MM) USR is November
IF PAR.This_Month_MM_USR = 11;

// Call program Zzz Workfile           XF.
CALL PROGRAM(Zzz Workfile           XF) ('PDOEXFR');
PARAMETER(CUR.Parent_Customer);
PARAMETER(CUR.Current_Nov_Weight_USR);
PARAMETER(CUR.Last_Nov_Weight_USR);
PARAMETER(CUR.Last_Nov_Change_USR);
PARAMETER(CUR.Current_Nov_Change_USR);

ENDIF;

ENDIF;

//?Create Summary Work file for December
CASE;

// IF PAR.Report Type Both      USR is Summary
IF PAR.Report_Type_Both_USR = 'S';

CASE;

// IF PAR.This Month  (MM) USR is December
IF PAR.This_Month_MM_USR = 12;

// Call program Zzz Workfile           XF.
CALL PROGRAM(Zzz Workfile           XF) ('PDOEXFR');
PARAMETER(CUR.Parent_Customer);
PARAMETER(CUR.Current_Dec_Weight_USR);
PARAMETER(CUR.Last_Dec_Weight_USR);
PARAMETER(CUR.Last_Dec_Change_USR);
PARAMETER(CUR.Current_Dec_Change_USR);

ENDIF;

ENDIF;

ENDIF;

// Print Parent Customer totals format
PRINT Parent Customer totals format;

ENDIF;

// SUPPRESSED PRINT Company Number totals format

