// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POSCXFR
// ?Date: 14.08.2025 Time: 03:38:52
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?** Convert 4.0 time to 6.0 time
// LCL.Requested Delivery Date = PAR.Requested Delivery Date
LCL.Requested_Delivery_Date = PAR.Requested_Delivery_Date;

// LCL.USR Time = PAR.Requested Delivery Time * CON.100 *
LCL.USR_Time = PAR.Requested_Delivery_Time * 100;

EXECUTE FUNCTION(RTV Whs/SpTo/NonCancld RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2026963;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(1);
PARAMETER(1);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(LCL.Ship_To_Customer);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?C2748:  Changed RTV Warehouse Code RT to exclude Cancelled lines.
 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF *OTHERWISE
 IF *OTHERWISE;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(RTV Warehouse Address  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1211418;
PARAMETER(PAR.Warehouse_Code);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(PAR.AACity);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(PAR.@State_ATR);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Convert cities to uppercase prior to verifying
// Execute function CVT Str to Upper Alpha US.
EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
PARAMETER(PAR.City);
PARAMETER(WRK.City);
{
 PDWEUFR:  PGM PARM(&STRIN &STROUT)

 CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
}


// Execute function CVT Str to Upper Alpha US.
EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
PARAMETER(PAR.AACity);
PARAMETER(WRK.AACity);
{
 PDWEUFR:  PGM PARM(&STRIN &STROUT)

 CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
}


EXECUTE FUNCTION(RTV Miles Between      IF) TYPE(EXCINTFUN)                     AC1453987;
PARAMETER(WRK.AACity);
PARAMETER(PAR.@State_ATR);
PARAMETER(WRK.City);
PARAMETER(PAR.State_Code);
PARAMETER(PAR.Miles_to_next_stop);
{
 //?Execute internal function

 // PAR.Miles to next stop = CON.*ZERO
 PAR.Miles_to_next_stop = *ZERO;

 //?ensure cities are all caps, no punctuation
 //?usr city is From City; Ship to City is To city
 // Execute function CVT Str to Upper Alpha US.
 EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
 PARAMETER(PAR.From_City);
 PARAMETER(PAR.USR_City);
 {
  PDWEUFR:  PGM PARM(&STRIN &STROUT)

  CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
 }

 // Execute function CVT Str to Upper Alpha US.
 EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
 PARAMETER(PAR.To_City);
 PARAMETER(PAR.Ship_To_City);
 {
  PDWEUFR:  PGM PARM(&STRIN &STROUT)

  CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
 }

 //?** Rtv miles, if none, then reverse the order of cities and check again
 EXECUTE FUNCTION(RTV Miles Between      RT) TYPE(RTVOBJ) FILE(PDLFREP)          AC1453986;
 PARAMETER(PAR.USR_City);
 PARAMETER(PAR.From_State);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.To_State_State_Code);
 PARAMETER(PAR.Miles_to_next_stop);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 EXECUTE FUNCTION(RTV Miles Between      RT) TYPE(RTVOBJ) FILE(PDLFREP)          AC1453986;
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.To_State_State_Code);
 PARAMETER(PAR.USR_City);
 PARAMETER(PAR.From_State);
 PARAMETER(PAR.Miles_to_next_stop);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 ENDIF;

 ENDIF;

}


// PAR.Hours Required = CON.*ZERO
PAR.Hours_Required = *ZERO;

// LCL.Hours Required = CON.*ZERO
LCL.Hours_Required = *ZERO;

EXECUTE FUNCTION(RTV Legal Run Miles DscRT) TYPE(RTVOBJ) FILE(PDLGCPP)          AC1456042;
PARAMETER(PAR.Miles_to_next_stop);
PARAMETER(LCL.Hours_Required);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?09/09/11 PKD E1659 Additional Route Hours
EXECUTE FUNCTION(Rtv Addtnl Route Hrs  RT) TYPE(RTVOBJ) FILE(PDNIREP)           AC2026783;
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(LCL.Additional_Route_Hours);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.Hours Required = LCL.Hours Required + LCL.Additional Route Hours
PAR.Hours_Required = LCL.Hours_Required + LCL.Additional_Route_Hours;

//?** Set DDD/T to zeros if no Miles to Next or Miles Between Cities
//?** Process unless no Miles To Next Stop
CASE;

// IF PAR.Miles to next stop is Not Entered
IF PAR.Miles_to_next_stop = *ZERO;

// PAR.Deadline Depart DT    HDR = CND.not entered
PAR.Deadline_Depart_DT_HDR = *ZERO;

// PAR.Deadline Depart Time  HDR = CND.Not Entered
PAR.Deadline_Depart_Time_HDR = *ZERO;

//?** Process unless no Miles To Next Stop
// IF *OTHERWISE
IF *OTHERWISE;

//?get number of whole days + remaining hours
CASE;

// IF PAR.Hours Required is Zero
IF PAR.Hours_Required = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.@Days 5 = PAR.Hours Required / CON.24 *
PAR.@Days_5 = PAR.Hours_Required / 24;

// WRK.USR Hours 5.0 = PAR.@Days 5 * CON.24 *
WRK.USR_Hours_5_0 = PAR.@Days_5 * 24;

// PAR.USR Hours 5.0 = PAR.Hours Required - WRK.USR Hours 5.0
PAR.USR_Hours_5_0 = PAR.Hours_Required - WRK.USR_Hours_5_0;

// WRK.@Numeric 6,0 = PAR.USR Hours 5.0 * CON.10000 *
WRK.@Numeric_60 = PAR.USR_Hours_5_0 * 10000;

//?Subtract whole days
CASE;

// IF PAR.@Days 5 is greater than zero
IF PAR.@Days_5 > *ZERO;

// PAR.@Days 5 = PAR.@Days 5 * CON.-1 *
PAR.@Days_5 = PAR.@Days_5 * -1;

// LCL.Requested Delivery Date = LCL.Requested Delivery Date + PAR.@Days 5 *DAYS
LCL.Requested_Delivery_Date = DATEINCR(LCL.Requested_Delivery_Date PAR.@Days_5 'DY'                +
1111111 'NONE' 'N' 1);

ENDIF;

//?Calculate # whole days + hours left
CASE;

// IF WRK.@Numeric 6,0 GE LCL.USR Time
IF WRK.@Numeric_60 >= LCL.USR_Time;

// WRK.@Numeric 6,0 = WRK.@Numeric 6,0 - LCL.USR Time
WRK.@Numeric_60 = WRK.@Numeric_60 - LCL.USR_Time;

// PAR.@Days 5 = CON.-1
PAR.@Days_5 = -1;

// LCL.Requested Delivery Date = LCL.Requested Delivery Date + PAR.@Days 5 *DAYS
LCL.Requested_Delivery_Date = DATEINCR(LCL.Requested_Delivery_Date PAR.@Days_5 'DY'                +
1111111 'NONE' 'N' 1);

// LCL.USR Time = CON.240000 - WRK.@Numeric 6,0
LCL.USR_Time = 240000 - WRK.@Numeric_60;

//?Calculate # whole days + hours left
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.USR Time = LCL.USR Time - WRK.@Numeric 6,0
LCL.USR_Time = LCL.USR_Time - WRK.@Numeric_60;

ENDIF;

// PAR.Deadline Depart DT    HDR = LCL.Requested Delivery Date
PAR.Deadline_Depart_DT_HDR = LCL.Requested_Delivery_Date;

//?** Convert 4.0 time to 6.0 time                       E00495
// PAR.Deadline Depart Time  HDR = LCL.USR Time
PAR.Deadline_Depart_Time_HDR = LCL.USR_Time;

ENDIF;

ENDIF;

//?***** Change Log and Comments
DO;

//?** 05/05/2011 RMC E01523
//?** DDD/T are calc'd based on the req delv date/time always now.
//?** 10/05/2007 LJB E00495
//?** DDD/T are calc'd based on the date that is passed in. If the
//?**   Carrier appointment date/time are available, it is being used,
//?**   otherwise, the requested delivery date/time are being used.
//?**   4.0 par time field changed to 6.0 for calcs
//?** 11/16/2007 LJB FP1251
//?** Set DDD/T to zeros if no Miles to Next or Miles Between Cities
ENDDO;

