// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBFOXFR
// ?Date: 14.08.2025 Time: 03:47:47
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?E2247 New file for the MPR for Wholesale Pork - to be live 1/7/2013
//? LS-89 File is built/sent 2 times a day:  1 = by 10am    2 = by 2pm
//?Order Details will be written to this file if:
//?  1. The order is a regular "OR"der & "F"irm. TR/CM/DM are not sent.
//?    ** ALso send Block orders, same rules   4/10/13 E2540
//?  2. The order NOT an inter-co, nor Affiliated nor Sample sale,nor empl
//?  3. The item has the flag for 'MPR to USDA' set to Yes
//?  4. The order detail is price Audited = M or A   OR see *7 below
//?  5. If the ordr is CT it must be > 1000 lbs
//?  6. The order detail was previously sent, but the ord qty/wgt chg > 10%
//? *7. The order detail is MPR Prc Ready for MPR - E2540 4/8/13 RMC
//?  and MPR ready is NOT "X" for exclude
//?RMC 6/28/13 C2664 For days out calc, if order is FRM priced, use:
//?          Req Delv - Sched Ship, instead of Req Delv - Order Dt
//? So FRM orders are within the FRM window of less than 14/10 days delv prd
//?RMC 7/31/13 E2649 Input Data Mart Process sts -
//?  Input "N" for run into Qtemp, input "R" for hard run at 9:30/1:30
//?  After cognos grabs the data from the hard run, this will be "C"omplete
//?RMC 12/4/13 E2910 For days out calc, use OD Entry Date alieu order date
//?  12/10/13 put the od date used in the mpr date sent for cognos pgm to use
//?RMC 5/22/14 C3124 in fob price calc, exclude TDL, SF1, WF1, LAL which are
//?  now Accruals REVADJ
//?RMC 2/06/15 E3903 Treat HDG price type as FRM instead of as NEG -
//?   per USDA William Worlie
//?RMC 3/18/15 E4017 for FR, BX: if item age days >= 11 use Refrig code= 4
//?   for FR,CB, if item age days >= 7 use Refrig code= 2
//?   per Aaron H
//?RMC 4/03/15 E4054 Treat new DST pr type as NEG (distressed sales)
//?RMC 1/07/16 E4675 Added unit price calc for TN
//?RMC 2/11/16 E5180 new price type NHT No Higher Than - treat like FRM
//?RMC 12/6/16 R8044 Excl Abs Frt from calc if SFC Accrual exists
//?    Output Sts SF in MPR Price Calc Exception field
//?RMC 12/5/17 S12163 Treat new TNK pr type as NEG (tanked (old) sales)
//?RMC 05/02/18 R13009 Dont exclude Abs Frt if SFC Accrual exists.AND
//?  add SFS AND FRC accrual rates to the calculation, and still deduct
//?  ABS Frt... price needs to include those two REVADJ
//?   Put freight addon in its own field in the mpr file
//?RMC 1/29/20 WHD 59607 Treat new FLR pr type as NEG (floor)
EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(PAR.Company_Number);
PARAMETER('PLTESTNO');
PARAMETER(PAR.MPR_Identification_Num);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program RTV System Date/Time   UP.
CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
PARAMETER(LCL.Current_System_Date);
PARAMETER(LCL.Current_System_Time);

// PAR.MPR Reporting Date = LCL.Current System Date
PAR.MPR_Reporting_Date = LCL.Current_System_Date;

// PAR.MPR Class code = CND.Barrows/Gilts
PAR.MPR_Class_code = 1;

// PAR.MPR Null = CND.Blank
PAR.MPR_Null = *BLANK;

// PAR.MPR Null 1 = CND.Blank
PAR.MPR_Null_1 = *BLANK;

//?Get ordwgt changes since last mpr submission from load order log
CASE;

// IF PAR.MPR Reporting Time is 1=10am
IF PAR.MPR_Reporting_Time = 1;

// PAR.Created Date = JOB.*Job date + CON.-1 *DAYS
PAR.Created_Date = DATEINCR(JOB.*Job_date '-1' 'DY' 1111100 'NONE' 'N' 1);

// PAR.Created Time = CND.13:45:00
PAR.Created_Time = 134500;

// IF PAR.MPR Reporting Time is 2=2pm
IF PAR.MPR_Reporting_Time = 2;

// PAR.Created Date = JOB.*Job date
PAR.Created_Date = JOB.*Job_date;

// PAR.Created Time = CND.09:45:00
PAR.Created_Time = 094500;

CASE;

// IF PAR.MPR Data Mart Process Sts is New - not MPR Reported
IF PAR.MPR_Data_Mart_Process_Sts = 'N';

CASE;

// IF JOB.*Job time is GE 13:45
IF JOB.*Job_time >= 134500;

// PAR.Created Time = CND.13:45:00
PAR.Created_Time = 134500;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Created Time = CND.09:45:00
PAR.Created_Time = 094500;

ENDIF;

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Bld MPR Dwnld      RT) TYPE(RTVOBJ) FILE(PDLHCPP)          AC2052884;
PARAMETER(PAR.Created_Date);
PARAMETER(PAR.Created_Time);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.MPR_Identification_Num);
PARAMETER(PAR.MPR_Reporting_Date);
PARAMETER(PAR.MPR_Reporting_Time);
PARAMETER(PAR.MPR_Class_code);
PARAMETER(PAR.MPR_Null);
PARAMETER(PAR.MPR_Null_1);
PARAMETER(PAR.MPR_Data_Mart_Process_Sts);
{
 //?USER: Initialize routine

 // PAR.MPR Date Sent = JOB.*Job date
 PAR.MPR_OD_Entry_Firm_Date = JOB.*Job_date;

 //?USER: Process Data record

 CASE;

 // IF DB1.Company Number EQ PAR.Company Number
 IF DB1.Company_Number = PAR.Company_Number;

 CASE;

 // IF DB1.Load Change Type is Order Weight
 IF DB1.Load_Change_Type = 'ORDWGT';

 // PAR.Record Selected       USR = CND.no
 PAR.Record_Selected_USR = 'N';

 // LCL.USR Text 7            USR = SUBSTRING(DB1.Change Log Prior Value,CON.5,CON.7)
 LCL.USR_Text_7_USR = SUBSTRING(DB1.Change_Log_Prior_Value:5:7);

 //?WI642   JM-04/29/25-Fix for Scenario 1.
 CASE;

 // IF LCL.USR Text 7            USR is Seven Zeros
 IF LCL.USR_Text_7_USR = '0000000';

 //?WI642   JM-04/29/25-Fix for Scenario 1.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Change log prior has seq in pos 1-3, weight in 5-11:  001 0000nnn'
 // LCL.Text 3 Length USR = SUBSTRING(DB1.Change Log Prior Value,CON.1,CON.3)
 LCL.Text_3_Length_USR = SUBSTRING(DB1.Change_Log_Prior_Value:1:3);

 // LCL.Order Sequence Number = CVTVAR(LCL.Text 3 Length USR)
 LCL.Order_Sequence_Number = CVTVAR(LCL.Text_3_Length_USR);

 EXECUTE FUNCTION(RTV MPR Build Fields  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2052901;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Order_Sequence_Number);
 PARAMETER(1);
 PARAMETER(LCL.Item_Code);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(LCL.Price_Method_Code);
 PARAMETER(LCL.Price_Status);
 PARAMETER(LCL.U_M_Base_Price);
 PARAMETER(LCL.U_M_Ordered);
 PARAMETER(LCL.Order_Desc_Line_One);
 PARAMETER(LCL.Unit_Price);
 PARAMETER(LCL.Unit_Weight_Ordered_U_M);
 PARAMETER(LCL.Date_of_Original_Entry);
 PARAMETER(LCL.Country_Code);
 PARAMETER(LCL.OD_Price_Type);
 PARAMETER(LCL.OD_MPR_Sent_to_USDA_Sts);
 PARAMETER(LCL.Item_Age_Days);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV MPR Bld Dwnld     RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2052459;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Order_Type_Sales);
 PARAMETER(LCL.AR_Customer_Number);
 PARAMETER(LCL.Ship_To_Customer);
 PARAMETER(LCL.Ship_To_State_Code);
 PARAMETER(LCL.Ship_To_Zip_Postal_Code);
 PARAMETER(LCL.Order_Date);
 PARAMETER(PAR.MPR_Requested_Ship_Date);
 PARAMETER(PAR.MPR_Actual_Ship_Date);
 PARAMETER(LCL.Header_Status);
 PARAMETER(PAR.MPR_Scheduled_Ship_Date);
 PARAMETER(NLL.Date_of_Original_Entry);
 PARAMETER(LCL.Order_Weight_Total);
 PARAMETER(LCL.Requested_Delivery_Date);
 PARAMETER(LCL.Price_Status);
 PARAMETER(LCL.Shipping_Method);
 PARAMETER(LCL.Export_Status);
 PARAMETER(LCL.Block_Order_Flag);
 PARAMETER(LCL.Type_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  EXECUTE FUNCTION(Rtv Customer Type     RT) TYPE(RTVOBJ) FILE(CAEOREP)           AC1585599;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(PAR.Type_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

 }

 EXECUTE FUNCTION(Rtv CIE MPR to USDA   RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC2052460;
 PARAMETER(LCL.Company_Number);
 PARAMETER(LCL.Item_Code);
 PARAMETER(LCL.CIE_MPR_Report_to_USDA);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Unit Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1298772;
 PARAMETER(LCL.Company_Number);
 PARAMETER(LCL.Item_Code);
 PARAMETER(LCL.Unit_Weight);
 PARAMETER(LCL.Quality_Level);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Re-Send if order previously sent and weight change > 10%
 CASE;

 // IF LCL.OD MPR Sent to USDA Sts is yes
 IF LCL.OD_MPR_Sent_to_USDA_Sts = 'Y';

 // LCL.Text USR 7 = SUBSTRING(DB1.Change Log Prior Value,CON.5,CON.7)
 LCL.Text_USR_7 = SUBSTRING(DB1.Change_Log_Prior_Value:5:7);

 // LCL.Weight Beg Inv usr = CVTVAR(LCL.Text USR 7)
 LCL.Weight_Beg_Inv_usr = CVTVAR(LCL.Text_USR_7);

 // LCL.Text USR 7 = SUBSTRING(DB1.Change Log New Value,CON.1,CON.7)
 LCL.Text_USR_7 = SUBSTRING(DB1.Change_Log_New_Value:1:7);

 // LCL.Weight End Inv usr = CVTVAR(LCL.Text USR 7)
 LCL.Weight_End_Inv_usr = CVTVAR(LCL.Text_USR_7);

 // LCL.Weight Gain Usr = LCL.Weight End Inv usr - LCL.Weight Beg Inv usr
 LCL.Weight_Gain_Usr = LCL.Weight_End_Inv_usr - LCL.Weight_Beg_Inv_usr;

 // LCL.Weight Open  7.0      USR = LCL.Weight Beg Inv usr * CON..10 *
 LCL.Weight_Open_7_0_USR = LCL.Weight_Beg_Inv_usr * .10;

 CASE;

 // IF LCL.Weight Gain Usr GT LCL.Weight Open  7.0      USR
 IF LCL.Weight_Gain_Usr > LCL.Weight_Open_7_0_USR;

 // PAR.MPR Product Weight = LCL.Weight Gain Usr
 PAR.MPR_Product_Weight = LCL.Weight_Gain_Usr;

 // PAR.Record Selected       USR = CND.yes
 PAR.Record_Selected_USR = 'Y';

 ENDIF;

 //?If order item weight changed by >10% original wgt, then send Diff
 CASE;

 // IF PAR.Record Selected       USR is yes
 IF PAR.Record_Selected_USR = 'Y';

 // PAR.MPR Lot Identification = CVTVAR(DB1.Order Number)
 PAR.MPR_Lot_Identification = CVTVAR(DB1.Order_Number);

 //?Destination
 CASE;

 // IF LCL.Export Status is yes
 IF LCL.Export_Status = 'Y';

 CASE;

 // IF LCL.Country Code is Canada
 IF LCL.Country_Code = 'CAN';

 // OR LCL.Country Code is Mexico
 OR LCL.Country_Code = 'MEX';

 // PAR.MPR Destination = CND.NAFTA (CAN/MEX)
 PAR.MPR_Destination = 3;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Val Canada state  RT) TYPE(RTVOBJ) FILE(PBARCPP)           AC2065080;
 PARAMETER('CAN');
 PARAMETER(LCL.Ship_To_State_Code);
 PARAMETER(LCL.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?if thru Canada to someplace else, report as NAFTA, else Export/overseas
 CASE;

 // IF LCL.Record Found USR is Record Found
 IF LCL.Record_Found_USR = 'Y';

 // PAR.MPR Destination = CND.NAFTA (CAN/MEX)
 PAR.MPR_Destination = 3;

 //?if thru Canada to someplace else, report as NAFTA, else Export/overseas
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.MPR Destination = CND.Export/Overseas
 PAR.MPR_Destination = 2;

 ENDIF;

 ENDIF;

 // LCL.MPR Country = LCL.Country Code
 LCL.MPR_Country = LCL.Country_Code;

 //?Destination
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.MPR Destination = CND.Domestic
 PAR.MPR_Destination = 1;

 // LCL.MPR Country = CND.USA
 LCL.MPR_Country = 'USA';

 ENDIF;

 // PAR.MPR Sales Type Code = CND.Negotiated Sale
 PAR.MPR_Sales_Type_Code = 1;

 //?new 6/28/13   -- add HDG here 2/6/15 , new NHT 2.11.16
 CASE;

 // IF LCL.OD Price Type is Formula
 IF LCL.OD_Price_Type = 'FRM';

 // OR LCL.OD Price Type is Hedged
 OR LCL.OD_Price_Type = 'HDG';

 // OR LCL.OD Price Type is No Higher Than
 OR LCL.OD_Price_Type = 'NHT';

 // LCL.Days = LCL.Requested Delivery Date - PAR.MPR Scheduled Ship Date *DAYS
 LCL.Days = DURATION(LCL.Requested_Delivery_Date PAR.MPR_Scheduled_Ship_Date 'DY' 1111111
 'NONE' 'N' 1);

 // PAR.MPR OD Entry/Firm Date = LCL.Date of Original Entry
 PAR.MPR_OD_Entry_Firm_Date = LCL.Date_of_Original_Entry;

 //?new 6/28/13   -- add HDG here 2/6/15 , new NHT 2.11.16
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Use OD Entry Date instead                 12/4/13
 CASE;

 // IF LCL.Date of Original Entry is Entered
 IF LCL.Date_of_Original_Entry <> *ZERO;

 CASE;

 // IF LCL.Date of Original Entry GT LCL.Order Date
 IF LCL.Date_of_Original_Entry > LCL.Order_Date;

 // LCL.Days = LCL.Requested Delivery Date - LCL.Date of Original Entry *DAYS
 LCL.Days = DURATION(LCL.Requested_Delivery_Date LCL.Date_of_Original_Entry 'DY' 1111111
 'NONE' 'N' 1);

 // PAR.MPR OD Entry/Firm Date = LCL.Date of Original Entry
 PAR.MPR_OD_Entry_Firm_Date = LCL.Date_of_Original_Entry;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Days = LCL.Requested Delivery Date - LCL.Order Date *DAYS
 LCL.Days = DURATION(LCL.Requested_Delivery_Date LCL.Order_Date 'DY' 1111111 'NONE' 'N' 1);

 // PAR.MPR OD Entry/Firm Date = LCL.Order Date
 PAR.MPR_OD_Entry_Firm_Date = LCL.Order_Date;

 ENDIF;

 CASE;

 // IF LCL.Days is LT 0
 IF LCL.Days < *ZERO;

 // LCL.Days = CON.*ZERO
 LCL.Days = *ZERO;

 ENDIF;

 //?Use OD Entry Date instead                 12/4/13
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Days = LCL.Requested Delivery Date - LCL.Order Date *DAYS
 LCL.Days = DURATION(LCL.Requested_Delivery_Date LCL.Order_Date 'DY' 1111111 'NONE' 'N' 1);

 // PAR.MPR OD Entry/Firm Date = LCL.Order Date
 PAR.MPR_OD_Entry_Firm_Date = LCL.Order_Date;

 ENDIF;

 ENDIF;

 //?Sales Price type
 CASE;

 // IF LCL.OD Price Type is Negotiated
 IF LCL.OD_Price_Type = 'NEG';

 // OR LCL.OD Price Type is Distressed
 OR LCL.OD_Price_Type = 'DST';

 // OR LCL.OD Price Type is Tanked
 OR LCL.OD_Price_Type = 'TNK';

 // OR LCL.OD Price Type is Floor
 OR LCL.OD_Price_Type = 'FLR';

 //?bx: neg or fwd
 CASE;

 // IF LCL.U/M - Ordered is EQ Boxes
 IF LCL.U_M_Ordered = 'BX';

 CASE;

 // IF LCL.Days is LE 14
 IF LCL.Days <= 14;

 // PAR.MPR Sales Type Code = CND.Negotiated Sale
 PAR.MPR_Sales_Type_Code = 1;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.MPR Sales Type Code = CND.Forward Sale
 PAR.MPR_Sales_Type_Code = 2;

 ENDIF;

 ENDIF;

 //?cb: neg or fwd
 CASE;

 // IF LCL.U/M - Ordered is Combos
 IF LCL.U_M_Ordered = 'CB';

 CASE;

 // IF LCL.Days is LE 10
 IF LCL.Days <= 10;

 // PAR.MPR Sales Type Code = CND.Negotiated Sale
 PAR.MPR_Sales_Type_Code = 1;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.MPR Sales Type Code = CND.Forward Sale
 PAR.MPR_Sales_Type_Code = 2;

 ENDIF;

 ENDIF;

 //?Sales Price type
 // IF LCL.OD Price Type is Formula
 IF LCL.OD_Price_Type = 'FRM';

 // OR LCL.OD Price Type is Hedged
 OR LCL.OD_Price_Type = 'HDG';

 // OR LCL.OD Price Type is No Higher Than
 OR LCL.OD_Price_Type = 'NHT';

 //?Move HDG here from NEG Case stmt   2/6/15
 //?Added new NHT here   2/11/16
 //?bx: frm or fwd
 CASE;

 // IF LCL.U/M - Ordered is EQ Boxes
 IF LCL.U_M_Ordered = 'BX';

 CASE;

 // IF LCL.Days is LE 14
 IF LCL.Days <= 14;

 // PAR.MPR Sales Type Code = CND.Formula Marketing
 PAR.MPR_Sales_Type_Code = 3;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.MPR Sales Type Code = CND.Forward Sale
 PAR.MPR_Sales_Type_Code = 2;

 ENDIF;

 ENDIF;

 //?cb: frm or fwd
 CASE;

 // IF LCL.U/M - Ordered is Combos
 IF LCL.U_M_Ordered = 'CB';

 CASE;

 // IF LCL.Days is LE 10
 IF LCL.Days <= 10;

 // PAR.MPR Sales Type Code = CND.Formula Marketing
 PAR.MPR_Sales_Type_Code = 3;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.MPR Sales Type Code = CND.Forward Sale
 PAR.MPR_Sales_Type_Code = 2;

 ENDIF;

 ENDIF;

 //?Sales Price type
 // IF LCL.OD Price Type is Contract
 IF LCL.OD_Price_Type = 'CON';

 //?bx: neg or fwd
 CASE;

 // IF LCL.U/M - Ordered is EQ Boxes
 IF LCL.U_M_Ordered = 'BX';

 CASE;

 // IF LCL.Days is LE 14
 IF LCL.Days <= 14;

 // PAR.MPR Sales Type Code = CND.Negotiated Sale
 PAR.MPR_Sales_Type_Code = 1;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.MPR Sales Type Code = CND.Forward Sale
 PAR.MPR_Sales_Type_Code = 2;

 ENDIF;

 ENDIF;

 //?cb: neg or fwd
 CASE;

 // IF LCL.U/M - Ordered is Combos
 IF LCL.U_M_Ordered = 'CB';

 CASE;

 // IF LCL.Days is LE 10
 IF LCL.Days <= 10;

 // PAR.MPR Sales Type Code = CND.Negotiated Sale
 PAR.MPR_Sales_Type_Code = 1;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.MPR Sales Type Code = CND.Forward Sale
 PAR.MPR_Sales_Type_Code = 2;

 ENDIF;

 ENDIF;

 ENDIF;

 //?Delivery Period -> boxes
 CASE;

 // IF LCL.U/M - Ordered is EQ Boxes
 IF LCL.U_M_Ordered = 'BX';

 //?Days
 CASE;

 // IF LCL.Days is Between 15 - 60
 IF LCL.Days >= 15;
 AND LCL.Days <= 60;

 // PAR.MPR Delivery Period Code = CND.15-60 days box
 PAR.MPR_Delivery_Period_Code = 2;

 //?Days
 // IF LCL.Days is GT 60
 IF LCL.Days > 60;

 // PAR.MPR Delivery Period Code = CND.61 days/up box
 PAR.MPR_Delivery_Period_Code = 3;

 //?Days
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.MPR Delivery Period Code = CND.0-14 days box
 PAR.MPR_Delivery_Period_Code = 1;

 ENDIF;

 ENDIF;

 //?Delivery Period -> Combos
 CASE;

 // IF LCL.U/M - Ordered is Combos
 IF LCL.U_M_Ordered = 'CB';

 //?Days
 CASE;

 // IF LCL.Days is Between 11 - 60
 IF LCL.Days >= 11;
 AND LCL.Days <= 60;

 // PAR.MPR Delivery Period Code = CND.11-60 days combo
 PAR.MPR_Delivery_Period_Code = 5;

 //?Days
 // IF LCL.Days is GT 60
 IF LCL.Days > 60;

 // PAR.MPR Delivery Period Code = CND.61 days/up combo
 PAR.MPR_Delivery_Period_Code = 6;

 //?Days
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.MPR Delivery Period Code = CND.0-10 days combo
 PAR.MPR_Delivery_Period_Code = 4;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(LCL.Warehouse_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Refrigeration = frozen vs. fresh  bx/cb
 CASE;

 // IF LCL.Warehouse Type is Frozen
 IF LCL.Warehouse_Type = 'FZ';

 // PAR.MPR Refrigeration = CND.Frozen
 PAR.MPR_Refrigeration = 5;

 //?Refrigeration = frozen vs. fresh  bx/cb
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FRESH
 CASE;

 // IF LCL.U/M - Ordered is EQ Boxes
 IF LCL.U_M_Ordered = 'BX';

 CASE;

 // IF LCL.Item Age Days is GE 11 Days
 IF LCL.Item_Age_Days > 11;

 // PAR.MPR Refrigeration = CND.11+ Fresh boxed
 PAR.MPR_Refrigeration = 4;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.MPR Refrigeration = CND.0-10 Fresh boxed
 PAR.MPR_Refrigeration = 3;

 ENDIF;

 //?FRESH
 // IF LCL.U/M - Ordered is Combos
 IF LCL.U_M_Ordered = 'CB';

 CASE;

 // IF LCL.Item Age Days is 7 days to 121 days & Over
 IF LCL.Item_Age_Days >= 7;
 AND LCL.Item_Age_Days <= 9999;

 // PAR.MPR Refrigeration = CND.7+ Fresh combo
 PAR.MPR_Refrigeration = 2;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.MPR Refrigeration = CND.0-6 Fresh combo
 PAR.MPR_Refrigeration = 1;

 ENDIF;

 ENDIF;

 ENDIF;

 // PAR.MPR Item Code = LCL.Item Code
 PAR.MPR_Item_Code = LCL.Item_Code;

 // PAR.MPR Item Description = CVTVAR(LCL.Order Desc. Line One)
 PAR.MPR_Item_Description = CVTVAR(LCL.Order_Desc_Line_One);

 //?Calc Fob Plant price
 //?Get KNOWN Frt, accruals, commission and take them out of Unit Price
 //?Unit price CWT  for CS and other
 CASE;

 // IF LCL.U/M - Base Price is Cases
 IF LCL.U_M_Base_Price = 'CS';

 CASE;

 // IF LCL.Unit Weight Ordered U/M is Greater than zero
 IF LCL.Unit_Weight_Ordered_U_M > *ZERO;

 // Comp:Unit prc CWT for CS
 PAR.MPR_Unit_Price = ( LCL.Unit_Price / LCL.Unit_Weight_Ordered_U_M ) * 100;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Comp:Unit prc CWT for CS
 PAR.MPR_Unit_Price = ( LCL.Unit_Price / LCL.Unit_Weight ) * 100;

 ENDIF;

 //?Unit price CWT  for CS and other
 // IF LCL.U/M - Base Price is Tons
 IF LCL.U_M_Base_Price = 'TN';

 // WRK.Unit Price USR 11.6 = LCL.Unit Price / CON.2000 *
 WRK.Unit_Price_USR_11_6 = LCL.Unit_Price / 2000;

 // PAR.MPR Unit Price = WRK.Unit Price USR 11.6 * CON.100 *
 PAR.MPR_Unit_Price = WRK.Unit_Price_USR_11_6 * 100;

 //?Unit price CWT  for CS and other
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.MPR Unit Price = LCL.Unit Price * CON.100 *
 PAR.MPR_Unit_Price = LCL.Unit_Price * 100;

 ENDIF;

 // Call program Exc Get Fob Prc Adjs  XF.
 CALL PROGRAM(Exc Get Fob Prc Adjs  XF) ('PBFYXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Order_Sequence_Number);
 PARAMETER(LCL.Order_Secondary_Line_Seq);
 PARAMETER(LCL.Item_Code);
 PARAMETER(LCL.Ship_To_Customer);
 PARAMETER(LCL.Price_Method_Code);
 PARAMETER(LCL.Price_Status);
 PARAMETER(LCL.Quantity_Ordered);
 PARAMETER(PAR.MPR_Product_Weight);
 PARAMETER(PAR.MPR_Requested_Ship_Date);
 PARAMETER(PAR.MPR_Actual_Ship_Date);
 PARAMETER(PAR.MPR_Customer_Accrual_Rt);
 PARAMETER(PAR.MPR_Absorbed_Frt_Rate);
 PARAMETER(PAR.MPR_Order_Accrual_Rate);
 PARAMETER(LCL.Shipping_Method);
 PARAMETER(PAR.MPR_Price_Calc_Exception);
 PARAMETER(PAR.MPR_Freight_Add_On);

 // Compute: FOB Plant Price
 PAR.MPR_FOB_Plant_Price_CWT = ( ( ( PAR.MPR_Unit_Price - PAR.MPR_Absorbed_Frt_Rate )
 - PAR.MPR_Customer_Accrual_Rt ) - PAR.MPR_Order_Accrual_Rate ) + PAR.MPR_Freight_Add_On;

 //?Calc FOB Omaha Price
 // PAR.MPR State Code = LCL.Ship To State Code
 PAR.MPR_State_Code = LCL.Ship_To_State_Code;

 // PAR.MPR Shipping Method = LCL.Shipping Method
 PAR.MPR_Shipping_Method = LCL.Shipping_Method;

 // Call program Exc Calc FOB Omaha Pr XF.
 CALL PROGRAM(Exc Calc FOB Omaha Pr XF) ('PBGTXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Ship_To_Zip_Postal_Code);
 PARAMETER(PAR.MPR_Shipping_Method);
 PARAMETER(LCL.MPR_Country);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(PAR.MPR_FOB_Omaha_Price);
 PARAMETER(PAR.MPR_FOB_Plant_Price_CWT);
 PARAMETER(PAR.MPR_Unit_Price);
 PARAMETER(PAR.MPR_FOB_Rate_per_Mile);
 PARAMETER(PAR.MPR_Shipping_Method);
 PARAMETER(PAR.MPR_State_Code);
 PARAMETER(PAR.MPR_Zip_Code);
 PARAMETER(PAR.MPR_FOB_Miles_to_Omaha);

 //?Deduct accruals
 CASE;

 // IF PAR.MPR FOB Omaha Price is eq 0
 IF PAR.MPR_FOB_Omaha_Price = 0;

 // LCL.OD MPR Sent to USDA Sts = CND.Error
 LCL.OD_MPR_Sent_to_USDA_Sts = 'E';

 //?Deduct accruals
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Deduct accruals here too
 // Compute: FOB Omaha Price
 PAR.MPR_FOB_Omaha_Price = ( PAR.MPR_FOB_Omaha_Price - PAR.MPR_Customer_Accrual_Rt )
 - PAR.MPR_Order_Accrual_Rate;

 // LCL.OD MPR Sent to USDA Sts = CND.yes
 LCL.OD_MPR_Sent_to_USDA_Sts = 'Y';

 ENDIF;

 CASE;

 // IF LCL.OD MPR Sent to USDA Sts is yes
 IF LCL.OD_MPR_Sent_to_USDA_Sts = 'Y';

 EXECUTE FUNCTION(Rtv Crt/Chg MPR Prk   RT) TYPE(RTVOBJ) FILE(PBAOCPP)           AC2052683;
 PARAMETER(PAR.MPR_Identification_Num);
 PARAMETER(PAR.MPR_Reporting_Date);
 PARAMETER(PAR.MPR_Reporting_Time);
 PARAMETER(PAR.MPR_Lot_Identification);
 PARAMETER(PAR.MPR_Item_Code);
 PARAMETER(PAR.MPR_Destination);
 PARAMETER(PAR.MPR_Sales_Type_Code);
 PARAMETER(PAR.MPR_Delivery_Period_Code);
 PARAMETER(PAR.MPR_Refrigeration);
 PARAMETER(PAR.MPR_Class_code);
 PARAMETER(PAR.MPR_Null);
 PARAMETER(PAR.MPR_Null_1);
 PARAMETER(PAR.MPR_Item_Description);
 PARAMETER(PAR.MPR_Product_Weight);
 PARAMETER(PAR.MPR_FOB_Plant_Price_CWT);
 PARAMETER(PAR.MPR_FOB_Omaha_Price);
 PARAMETER(PAR.MPR_Data_Mart_Process_Sts);
 PARAMETER(PAR.MPR_Price_Calc_Exception);
 PARAMETER(PAR.MPR_Actual_Ship_Date);
 PARAMETER(PAR.MPR_Requested_Ship_Date);
 PARAMETER(PAR.MPR_Scheduled_Ship_Date);
 PARAMETER(PAR.MPR_Unit_Price);
 PARAMETER(PAR.MPR_Absorbed_Frt_Rate);
 PARAMETER(PAR.MPR_Customer_Accrual_Rt);
 PARAMETER(PAR.MPR_Order_Accrual_Rate);
 PARAMETER(PAR.MPR_FOB_Rate_per_Mile);
 PARAMETER(PAR.MPR_Freight_Add_On);
 PARAMETER(PAR.MPR_Shipping_Method);
 PARAMETER(PAR.MPR_State_Code);
 PARAMETER(PAR.MPR_Zip_Code);
 PARAMETER(PAR.MPR_FOB_Miles_to_Omaha);
 PARAMETER(PAR.MPR_OD_Entry_Firm_Date);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt MPR Wholesale Prk CR) TYPE(CRTOBJ) FILE(PBAOCPP)           AC2051062;
  PARAMETER(PAR.MPR_Identification_Num);
  PARAMETER(PAR.MPR_Reporting_Date);
  PARAMETER(PAR.MPR_Reporting_Time);
  PARAMETER(PAR.MPR_Lot_Identification);
  PARAMETER(PAR.MPR_Item_Code);
  PARAMETER(PAR.MPR_Destination);
  PARAMETER(PAR.MPR_Sales_Type_Code);
  PARAMETER(PAR.MPR_Delivery_Period_Code);
  PARAMETER(PAR.MPR_Refrigeration);
  PARAMETER(PAR.MPR_Class_code);
  PARAMETER(PAR.MPR_Null);
  PARAMETER(PAR.MPR_Null_1);
  PARAMETER(PAR.MPR_Item_Description);
  PARAMETER(PAR.MPR_Product_Weight);
  PARAMETER(PAR.MPR_FOB_Plant_Price_CWT);
  PARAMETER(PAR.MPR_FOB_Omaha_Price);
  PARAMETER(PAR.MPR_Data_Mart_Process_Sts);
  PARAMETER(PAR.MPR_Price_Calc_Exception);
  PARAMETER(PAR.MPR_Actual_Ship_Date);
  PARAMETER(PAR.MPR_Requested_Ship_Date);
  PARAMETER(PAR.MPR_Scheduled_Ship_Date);
  PARAMETER(PAR.MPR_Unit_Price);
  PARAMETER(PAR.MPR_Absorbed_Frt_Rate);
  PARAMETER(PAR.MPR_Customer_Accrual_Rt);
  PARAMETER(*ZERO);
  PARAMETER(PAR.MPR_Order_Accrual_Rate);
  PARAMETER(PAR.MPR_FOB_Rate_per_Mile);
  PARAMETER(PAR.MPR_Freight_Add_On);
  PARAMETER(PAR.MPR_Shipping_Method);
  PARAMETER(PAR.MPR_State_Code);
  PARAMETER(PAR.MPR_Zip_Code);
  PARAMETER(PAR.MPR_FOB_Miles_to_Omaha);
  PARAMETER(PAR.MPR_OD_Entry_Firm_Date);
  PARAMETER('A');
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set RECORD STATUS field. ***
    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

  }

  //?USER: Process Data record

  // LCL.MPR Product Weight = DB1.MPR Product Weight + PAR.MPR Product Weight
  LCL.MPR_Product_Weight = DB1.MPR_Product_Weight + PAR.MPR_Product_Weight;

  EXECUTE FUNCTION(Chg MPR Wholesale Prk CH) TYPE(CHGOBJ) FILE(PBAOCPP)           AC2051063;
  PARAMETER(DB1.MPR_Identification_Num);
  PARAMETER(DB1.MPR_Reporting_Date);
  PARAMETER(DB1.MPR_Reporting_Time);
  PARAMETER(DB1.MPR_Lot_Identification);
  PARAMETER(DB1.MPR_Item_Code);
  PARAMETER(PAR.MPR_Destination);
  PARAMETER(PAR.MPR_Sales_Type_Code);
  PARAMETER(PAR.MPR_Delivery_Period_Code);
  PARAMETER(PAR.MPR_Refrigeration);
  PARAMETER(PAR.MPR_Class_code);
  PARAMETER(PAR.MPR_Null);
  PARAMETER(PAR.MPR_Null_1);
  PARAMETER(PAR.MPR_Item_Description);
  PARAMETER(LCL.MPR_Product_Weight);
  PARAMETER(PAR.MPR_FOB_Plant_Price_CWT);
  PARAMETER(PAR.MPR_FOB_Omaha_Price);
  PARAMETER(PAR.MPR_Data_Mart_Process_Sts);
  PARAMETER(PAR.MPR_Price_Calc_Exception);
  PARAMETER(DB1.MPR_Actual_Ship_Date);
  PARAMETER(DB1.MPR_Requested_Ship_Date);
  PARAMETER(DB1.MPR_Scheduled_Ship_Date);
  PARAMETER(DB1.MPR_Unit_Price);
  PARAMETER(DB1.MPR_Absorbed_Frt_Rate);
  PARAMETER(DB1.MPR_Customer_Accrual_Rt);
  PARAMETER(DB1.MPR_Unused_Rate_3);
  PARAMETER(DB1.MPR_Order_Accrual_Rate);
  PARAMETER(DB1.MPR_FOB_Rate_per_Mile);
  PARAMETER(PAR.MPR_Freight_Add_On);
  PARAMETER(DB1.MPR_Shipping_Method);
  PARAMETER(DB1.MPR_State_Code);
  PARAMETER(DB1.MPR_Zip_Code);
  PARAMETER(DB1.MPR_FOB_Miles_to_Omaha);
  PARAMETER(DB1.MPR_OD_Entry_Firm_Date);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Get orders per OD
EXECUTE FUNCTION(RTV Bld MPR Dwnld     RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2052456;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.MPR_Identification_Num);
PARAMETER(PAR.MPR_Reporting_Date);
PARAMETER(PAR.MPR_Reporting_Time);
PARAMETER(PAR.MPR_Class_code);
PARAMETER(PAR.MPR_Null);
PARAMETER(PAR.MPR_Null_1);
PARAMETER(PAR.MPR_Data_Mart_Process_Sts);
{
 //?USER: Initialize routine

 // PAR.MPR OD Entry/Firm Date = JOB.*Job date
 PAR.MPR_OD_Entry_Firm_Date = JOB.*Job_date;

 //?USER: Process Data record

 // PAR.Record Selected       USR = CND.yes
 PAR.Record_Selected_USR = 'Y';

 EXECUTE FUNCTION(RTV MPR Bld Dwnld     RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2052459;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Order_Type_Sales);
 PARAMETER(LCL.AR_Customer_Number);
 PARAMETER(LCL.Ship_To_Customer);
 PARAMETER(LCL.Ship_To_State_Code);
 PARAMETER(LCL.Ship_To_Zip_Postal_Code);
 PARAMETER(LCL.Order_Date);
 PARAMETER(PAR.MPR_Requested_Ship_Date);
 PARAMETER(PAR.MPR_Actual_Ship_Date);
 PARAMETER(LCL.Header_Status);
 PARAMETER(PAR.MPR_Scheduled_Ship_Date);
 PARAMETER(LCL.Date_of_Original_Entry);
 PARAMETER(LCL.Order_Weight_Total);
 PARAMETER(LCL.Requested_Delivery_Date);
 PARAMETER(LCL.Price_Status);
 PARAMETER(LCL.Shipping_Method);
 PARAMETER(LCL.Export_Status);
 PARAMETER(LCL.Block_Order_Flag);
 PARAMETER(LCL.Type_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  EXECUTE FUNCTION(Rtv Customer Type     RT) TYPE(RTVOBJ) FILE(CAEOREP)           AC1585599;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(PAR.Type_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

 }

 EXECUTE FUNCTION(Rtv CIE MPR to USDA   RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC2052460;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.CIE_MPR_Report_to_USDA);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Unit Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1298772;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.Unit_Weight);
 PARAMETER(LCL.Quality_Level);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv EE Meat Sales flag RT) TYPE(RTVOBJ) FILE(PDNEREP)          AC1923962;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(LCL.Employee_Co_Packer_Sale);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.OD MPR Sent to USDA Sts = CND.blank
 PAR.OD_MPR_Sent_to_USDA_Sts = *BLANK;

 //?Sel order type
 CASE;

 // IF LCL.Order Type - Sales is Regular Order
 IF LCL.Order_Type_Sales = 'OR';

 //?Sel order type
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Record Selected       USR = CND.no
 PAR.Record_Selected_USR = 'N';

 // PAR.OD MPR Sent to USDA Sts = CND.Exclude
 PAR.OD_MPR_Sent_to_USDA_Sts = 'X';

 ENDIF;

 //?Sel customer type , + excl Empl meat sale
 CASE;

 // IF LCL.Type Code is Inter Company
 IF LCL.Type_Code = 'IC';

 // OR LCL.Type Code is Inter-Comp Sales Agreemnt
 OR LCL.Type_Code = 'IS';

 // OR LCL.Type Code is Inter-Plant Transfer
 OR LCL.Type_Code = 'IP';

 // OR LCL.Type Code is Is Promotional/Samples
 OR LCL.Type_Code = 'PS';

 // OR LCL.Employee/Co-Packer Sale is Employee
 OR LCL.Employee_Co_Packer_Sale = 'E';

 // PAR.Record Selected       USR = CND.no
 PAR.Record_Selected_USR = 'N';

 // PAR.OD MPR Sent to USDA Sts = CND.Exclude
 PAR.OD_MPR_Sent_to_USDA_Sts = 'X';

 ENDIF;

 //?Sel item has a price & is price audited | price ready to send(E2540)
 CASE;

 // IF DB1.Unit Price is Greater than zero
 IF DB1.Unit_Price > *ZERO;

 // AND DB1.Price Status is Priced
 AND ( ( DB1.Price_Status = 'P';

 // AND DB1.Price Audit is Manually/Auto Price Audit
 AND DB1.Price_Audit = 'A'/'M';

 // AND DB1.OD MPR Prc Ready to Send is Not X
 AND DB1.OD_MPR_Prc_Ready_to_Send = *BLANK/'N' );

 // OR DB1.OD MPR Prc Ready to Send is yes
 OR DB1.OD_MPR_Prc_Ready_to_Send = 'Y' );

 //?Sel item has a price & is price audited | price ready to send(E2540)
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Record Selected       USR = CND.no
 PAR.Record_Selected_USR = 'N';

 ENDIF;

 //?Sel item is wholesale pork
 CASE;

 // IF LCL.CIE MPR Report to USDA is Yes
 IF LCL.CIE_MPR_Report_to_USDA = 'Y';

 //?Sel item is wholesale pork
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Record Selected       USR = CND.no
 PAR.Record_Selected_USR = 'N';

 // PAR.OD MPR Sent to USDA Sts = CND.Exclude
 PAR.OD_MPR_Sent_to_USDA_Sts = 'X';

 ENDIF;

 //?Sel item has a weight ordered
 CASE;

 // IF DB1.Weight Ordered is Equal to zero
 IF DB1.Weight_Ordered = *ZERO;

 // PAR.Record Selected       USR = CND.no
 PAR.Record_Selected_USR = 'N';

 ENDIF;

 //?Exc shipping method= CT and total weight < 1000 lbs
 CASE;

 // IF LCL.Shipping Method is Collect
 IF LCL.Shipping_Method = 'CR'/'CT';

 // AND LCL.Order Weight Total is LT 1000
 AND LCL.Order_Weight_Total < 1000;

 // PAR.Record Selected       USR = CND.no
 PAR.Record_Selected_USR = 'N';

 ENDIF;

 //?If not selected and already invoiced, set to "X"clude
 CASE;

 // IF PAR.Record Selected       USR is no
 IF PAR.Record_Selected_USR = 'N';

 // AND DB1.Detail Line Status is Complete
 AND DB1.Detail_Line_Status = 'C';

 // PAR.OD MPR Sent to USDA Sts = CND.Exclude
 PAR.OD_MPR_Sent_to_USDA_Sts = 'X';

 ENDIF;

 //?Process: Record Selected to be sent to MPR USDA
 CASE;

 // IF PAR.Record Selected       USR is yes
 IF PAR.Record_Selected_USR = 'Y';

 // PAR.MPR Lot Identification = CVTVAR(DB1.Order Number)
 PAR.MPR_Lot_Identification = CVTVAR(DB1.Order_Number);

 //?Destination
 CASE;

 // IF LCL.Export Status is yes
 IF LCL.Export_Status = 'Y';

 CASE;

 // IF DB1.Country Code is Canada
 IF DB1.Country_Code = 'CAN';

 // OR DB1.Country Code is Mexico
 OR DB1.Country_Code = 'MEX';

 // PAR.MPR Destination = CND.NAFTA (CAN/MEX)
 PAR.MPR_Destination = 3;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?If Dest is foreign, but address is CANada, treat as Canada-> NAFTA
 EXECUTE FUNCTION(RTV Val Canada state  RT) TYPE(RTVOBJ) FILE(PBARCPP)           AC2065080;
 PARAMETER('CAN');
 PARAMETER(LCL.Ship_To_State_Code);
 PARAMETER(LCL.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Thru Canada to someplace else
 CASE;

 // IF LCL.Record Found USR is Record Found
 IF LCL.Record_Found_USR = 'Y';

 // PAR.MPR Destination = CND.NAFTA (CAN/MEX)
 PAR.MPR_Destination = 3;

 //?Thru Canada to someplace else
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.MPR Destination = CND.Export/Overseas
 PAR.MPR_Destination = 2;

 ENDIF;

 ENDIF;

 // LCL.MPR Country = DB1.Country Code
 LCL.MPR_Country = DB1.Country_Code;

 //?Destination
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.MPR Destination = CND.Domestic
 PAR.MPR_Destination = 1;

 // LCL.MPR Country = CND.USA
 LCL.MPR_Country = 'USA';

 ENDIF;

 // PAR.MPR Sales Type Code = CND.Negotiated Sale
 PAR.MPR_Sales_Type_Code = 1;

 //?new 6/28/13  -- changed 12/5/13 E2910 -- 2/6/15 add HDG here,2/12/16 NHT
 CASE;

 // IF DB1.OD Price Type is Formula
 IF DB1.OD_Price_Type = 'FRM';

 // OR DB1.OD Price Type is Hedged
 OR DB1.OD_Price_Type = 'HDG';

 // OR DB1.OD Price Type is No Higher Than
 OR DB1.OD_Price_Type = 'NHT';

 // LCL.Days = LCL.Requested Delivery Date - DB1.Scheduled Ship Date *DAYS
 LCL.Days = DURATION(LCL.Requested_Delivery_Date DB1.Scheduled_Ship_Date 'DY' 1111111
 'NONE' 'N' 1);

 // PAR.MPR OD Entry/Firm Date = DB1.Date of Original Entry
 PAR.MPR_OD_Entry_Firm_Date = DB1.Date_of_Original_Entry;

 //?new 6/28/13  -- changed 12/5/13 E2910 -- 2/6/15 add HDG here,2/12/16 NHT
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Use OD Entry date instead - so when items are added it will be more acurat
 CASE;

 // IF DB1.Date of Original Entry is Entered
 IF DB1.Date_of_Original_Entry <> *ZERO;

 CASE;

 // IF DB1.Date of Original Entry GT LCL.Order Date
 IF DB1.Date_of_Original_Entry > LCL.Order_Date;

 // LCL.Days = LCL.Requested Delivery Date - DB1.Date of Original Entry *DAYS
 LCL.Days = DURATION(LCL.Requested_Delivery_Date DB1.Date_of_Original_Entry 'DY' 1111111
 'NONE' 'N' 1);

 // PAR.MPR OD Entry/Firm Date = DB1.Date of Original Entry
 PAR.MPR_OD_Entry_Firm_Date = DB1.Date_of_Original_Entry;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Days = LCL.Requested Delivery Date - LCL.Order Date *DAYS
 LCL.Days = DURATION(LCL.Requested_Delivery_Date LCL.Order_Date 'DY' 1111111 'NONE' 'N' 1);

 // PAR.MPR OD Entry/Firm Date = LCL.Order Date
 PAR.MPR_OD_Entry_Firm_Date = LCL.Order_Date;

 ENDIF;

 CASE;

 // IF LCL.Days is LT 0
 IF LCL.Days < *ZERO;

 // LCL.Days = CON.*ZERO
 LCL.Days = *ZERO;

 ENDIF;

 //?Use OD Entry date instead - so when items are added it will be more acurat
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Days = LCL.Requested Delivery Date - LCL.Order Date *DAYS
 LCL.Days = DURATION(LCL.Requested_Delivery_Date LCL.Order_Date 'DY' 1111111 'NONE' 'N' 1);

 // PAR.MPR OD Entry/Firm Date = LCL.Order Date
 PAR.MPR_OD_Entry_Firm_Date = LCL.Order_Date;

 ENDIF;

 ENDIF;

 //?Sales Price type
 CASE;

 // IF DB1.OD Price Type is Negotiated
 IF DB1.OD_Price_Type = 'NEG';

 // OR DB1.OD Price Type is Distressed
 OR DB1.OD_Price_Type = 'DST';

 // OR DB1.OD Price Type is Tanked
 OR DB1.OD_Price_Type = 'TNK';

 // OR DB1.OD Price Type is Floor
 OR DB1.OD_Price_Type = 'FLR';

 //?bx: neg or fwd
 CASE;

 // IF DB1.U/M - Ordered is EQ Boxes
 IF DB1.U_M_Ordered = 'BX';

 CASE;

 // IF LCL.Days is LE 14
 IF LCL.Days <= 14;

 // PAR.MPR Sales Type Code = CND.Negotiated Sale
 PAR.MPR_Sales_Type_Code = 1;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.MPR Sales Type Code = CND.Forward Sale
 PAR.MPR_Sales_Type_Code = 2;

 ENDIF;

 ENDIF;

 //?cb: neg or fwd
 CASE;

 // IF DB1.U/M - Ordered is Combos
 IF DB1.U_M_Ordered = 'CB';

 CASE;

 // IF LCL.Days is LE 10
 IF LCL.Days <= 10;

 // PAR.MPR Sales Type Code = CND.Negotiated Sale
 PAR.MPR_Sales_Type_Code = 1;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.MPR Sales Type Code = CND.Forward Sale
 PAR.MPR_Sales_Type_Code = 2;

 ENDIF;

 ENDIF;

 //?Sales Price type
 // IF DB1.OD Price Type is Formula
 IF DB1.OD_Price_Type = 'FRM';

 // OR DB1.OD Price Type is Hedged
 OR DB1.OD_Price_Type = 'HDG';

 // OR DB1.OD Price Type is No Higher Than
 OR DB1.OD_Price_Type = 'NHT';

 //?move HDG here from NEG case 2/6/15
 //?added new NHT here 02/11/16
 //?bx: frm or fwd
 CASE;

 // IF DB1.U/M - Ordered is EQ Boxes
 IF DB1.U_M_Ordered = 'BX';

 CASE;

 // IF LCL.Days is LE 14
 IF LCL.Days <= 14;

 // PAR.MPR Sales Type Code = CND.Formula Marketing
 PAR.MPR_Sales_Type_Code = 3;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.MPR Sales Type Code = CND.Forward Sale
 PAR.MPR_Sales_Type_Code = 2;

 ENDIF;

 ENDIF;

 //?cb: frm or fwd
 CASE;

 // IF DB1.U/M - Ordered is Combos
 IF DB1.U_M_Ordered = 'CB';

 CASE;

 // IF LCL.Days is LE 10
 IF LCL.Days <= 10;

 // PAR.MPR Sales Type Code = CND.Formula Marketing
 PAR.MPR_Sales_Type_Code = 3;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.MPR Sales Type Code = CND.Forward Sale
 PAR.MPR_Sales_Type_Code = 2;

 ENDIF;

 ENDIF;

 //?Sales Price type
 // IF DB1.OD Price Type is Contract
 IF DB1.OD_Price_Type = 'CON';

 //?bx: neg or fwd
 CASE;

 // IF DB1.U/M - Ordered is EQ Boxes
 IF DB1.U_M_Ordered = 'BX';

 CASE;

 // IF LCL.Days is LE 14
 IF LCL.Days <= 14;

 // PAR.MPR Sales Type Code = CND.Negotiated Sale
 PAR.MPR_Sales_Type_Code = 1;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.MPR Sales Type Code = CND.Forward Sale
 PAR.MPR_Sales_Type_Code = 2;

 ENDIF;

 ENDIF;

 //?cb: neg or fwd
 CASE;

 // IF DB1.U/M - Ordered is Combos
 IF DB1.U_M_Ordered = 'CB';

 CASE;

 // IF LCL.Days is LE 10
 IF LCL.Days <= 10;

 // PAR.MPR Sales Type Code = CND.Negotiated Sale
 PAR.MPR_Sales_Type_Code = 1;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.MPR Sales Type Code = CND.Forward Sale
 PAR.MPR_Sales_Type_Code = 2;

 ENDIF;

 ENDIF;

 ENDIF;

 //?Delivery Period -> boxes
 CASE;

 // IF DB1.U/M - Ordered is EQ Boxes
 IF DB1.U_M_Ordered = 'BX';

 //?Days
 CASE;

 // IF LCL.Days is Between 15 - 60
 IF LCL.Days >= 15;
 AND LCL.Days <= 60;

 // PAR.MPR Delivery Period Code = CND.15-60 days box
 PAR.MPR_Delivery_Period_Code = 2;

 //?Days
 // IF LCL.Days is GT 60
 IF LCL.Days > 60;

 // PAR.MPR Delivery Period Code = CND.61 days/up box
 PAR.MPR_Delivery_Period_Code = 3;

 //?Days
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.MPR Delivery Period Code = CND.0-14 days box
 PAR.MPR_Delivery_Period_Code = 1;

 ENDIF;

 ENDIF;

 //?Delivery Period -> Combos
 CASE;

 // IF DB1.U/M - Ordered is Combos
 IF DB1.U_M_Ordered = 'CB';

 //?Days
 CASE;

 // IF LCL.Days is Between 11 - 60
 IF LCL.Days >= 11;
 AND LCL.Days <= 60;

 // PAR.MPR Delivery Period Code = CND.11-60 days combo
 PAR.MPR_Delivery_Period_Code = 5;

 //?Days
 // IF LCL.Days is GT 60
 IF LCL.Days > 60;

 // PAR.MPR Delivery Period Code = CND.61 days/up combo
 PAR.MPR_Delivery_Period_Code = 6;

 //?Days
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.MPR Delivery Period Code = CND.0-10 days combo
 PAR.MPR_Delivery_Period_Code = 4;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(LCL.Warehouse_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Refrigeration = frozen vs. fresh  bx/cb
 CASE;

 // IF LCL.Warehouse Type is Frozen
 IF LCL.Warehouse_Type = 'FZ';

 // PAR.MPR Refrigeration = CND.Frozen
 PAR.MPR_Refrigeration = 5;

 //?Refrigeration = frozen vs. fresh  bx/cb
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?FRESH
 CASE;

 // IF DB1.U/M - Ordered is EQ Boxes
 IF DB1.U_M_Ordered = 'BX';

 CASE;

 // IF DB1.Item Age Days is GE 11 Days
 IF DB1.Item_Age_Days > 11;

 // PAR.MPR Refrigeration = CND.11+ Fresh boxed
 PAR.MPR_Refrigeration = 4;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.MPR Refrigeration = CND.0-10 Fresh boxed
 PAR.MPR_Refrigeration = 3;

 ENDIF;

 //?FRESH
 // IF DB1.U/M - Ordered is Combos
 IF DB1.U_M_Ordered = 'CB';

 CASE;

 // IF DB1.Item Age Days is 7 days to 121 days & Over
 IF DB1.Item_Age_Days >= 7;
 AND DB1.Item_Age_Days <= 9999;

 // PAR.MPR Refrigeration = CND.7+ Fresh combo
 PAR.MPR_Refrigeration = 2;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.MPR Refrigeration = CND.0-6 Fresh combo
 PAR.MPR_Refrigeration = 1;

 ENDIF;

 ENDIF;

 ENDIF;

 // PAR.MPR Item Code = DB1.Item Code
 PAR.MPR_Item_Code = DB1.Item_Code;

 // PAR.MPR Item Description = CVTVAR(DB1.Order Desc. Line One)
 PAR.MPR_Item_Description = CVTVAR(DB1.Order_Desc_Line_One);

 //?Product Weight =  ordered
 CASE;

 // IF DB1.Weight Ordered is Greater than zero
 IF DB1.Weight_Ordered > *ZERO;

 // PAR.MPR Product Weight = DB1.Weight Ordered
 PAR.MPR_Product_Weight = DB1.Weight_Ordered;

 // LCL.Quantity Ordered = DB1.Quantity Ordered
 LCL.Quantity_Ordered = DB1.Quantity_Ordered;

 ENDIF;

 //?Get KNOWN Frt, accruals, commission and take them out of Unit Price
 //?Unit price CWT  for CS and other
 CASE;

 // IF DB1.U/M - Base Price is Cases
 IF DB1.U_M_Base_Price = 'CS';

 CASE;

 // IF DB1.Unit Weight Ordered U/M is Greater than zero
 IF DB1.Unit_Weight_Ordered_U_M > *ZERO;

 // Comp:Unit prc CWT for CS
 PAR.MPR_Unit_Price = ( DB1.Unit_Price / DB1.Unit_Weight_Ordered_U_M ) * 100;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Comp:Unit prc CWT for CS
 PAR.MPR_Unit_Price = ( DB1.Unit_Price / LCL.Unit_Weight ) * 100;

 ENDIF;

 //?Unit price CWT  for CS and other
 // IF DB1.U/M - Base Price is Tons
 IF DB1.U_M_Base_Price = 'TN';

 // WRK.Unit Price USR 11.6 = DB1.Unit Price / CON.2000 *
 WRK.Unit_Price_USR_11_6 = DB1.Unit_Price / 2000;

 // PAR.MPR Unit Price = WRK.Unit Price USR 11.6 * CON.100 *
 PAR.MPR_Unit_Price = WRK.Unit_Price_USR_11_6 * 100;

 //?Unit price CWT  for CS and other
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.MPR Unit Price = DB1.Unit Price * CON.100 *
 PAR.MPR_Unit_Price = DB1.Unit_Price * 100;

 ENDIF;

 // Call program Exc Get Fob Prc Adjs  XF.
 CALL PROGRAM(Exc Get Fob Prc Adjs  XF) ('PBFYXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Price_Method_Code);
 PARAMETER(DB1.Price_Status);
 PARAMETER(LCL.Quantity_Ordered);
 PARAMETER(PAR.MPR_Product_Weight);
 PARAMETER(PAR.MPR_Requested_Ship_Date);
 PARAMETER(PAR.MPR_Actual_Ship_Date);
 PARAMETER(PAR.MPR_Customer_Accrual_Rt);
 PARAMETER(PAR.MPR_Absorbed_Frt_Rate);
 PARAMETER(PAR.MPR_Order_Accrual_Rate);
 PARAMETER(LCL.Shipping_Method);
 PARAMETER(PAR.MPR_Price_Calc_Exception);
 PARAMETER(PAR.MPR_Freight_Add_On);

 // Compute: FOB Plant Price
 PAR.MPR_FOB_Plant_Price_CWT = ( ( ( PAR.MPR_Unit_Price - PAR.MPR_Absorbed_Frt_Rate )
 - PAR.MPR_Customer_Accrual_Rt ) - PAR.MPR_Order_Accrual_Rate ) + PAR.MPR_Freight_Add_On;

 //?Only report if price is > 0, else its not ready yet.
 CASE;

 // IF PAR.MPR FOB Plant Price/CWT is GT 0
 IF PAR.MPR_FOB_Plant_Price_CWT > 0;

 // PAR.MPR State Code = LCL.Ship To State Code
 PAR.MPR_State_Code = LCL.Ship_To_State_Code;

 // PAR.MPR Shipping Method = LCL.Shipping Method
 PAR.MPR_Shipping_Method = LCL.Shipping_Method;

 // Call program Exc Calc FOB Omaha Pr XF.
 CALL PROGRAM(Exc Calc FOB Omaha Pr XF) ('PBGTXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Ship_To_Zip_Postal_Code);
 PARAMETER(PAR.MPR_Shipping_Method);
 PARAMETER(LCL.MPR_Country);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.MPR_FOB_Omaha_Price);
 PARAMETER(PAR.MPR_FOB_Plant_Price_CWT);
 PARAMETER(PAR.MPR_Unit_Price);
 PARAMETER(PAR.MPR_FOB_Rate_per_Mile);
 PARAMETER(PAR.MPR_Shipping_Method);
 PARAMETER(PAR.MPR_State_Code);
 PARAMETER(PAR.MPR_Zip_Code);
 PARAMETER(PAR.MPR_FOB_Miles_to_Omaha);

 //?Compute: FOB Omaha Price
 CASE;

 // IF PAR.MPR FOB Omaha Price is eq 0
 IF PAR.MPR_FOB_Omaha_Price = 0;

 // OR PAR.MPR Unit Price is GE 1000
 OR PAR.MPR_Unit_Price >= 1000;

 //?dont write rcd -- flag Detail as ERROR
 //?11/15/2013 PKD Added condition for PAR.MPR Unit Price. If it is
 //?               greater than or equal to $1000/CWT, mark Order
 //?               as an error.
 // PAR.OD MPR Sent to USDA Sts = CND.Error
 PAR.OD_MPR_Sent_to_USDA_Sts = 'E';

 //?Compute: FOB Omaha Price
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Deduct accruals here too
 // Compute: FOB Omaha Price
 PAR.MPR_FOB_Omaha_Price = ( PAR.MPR_FOB_Omaha_Price - PAR.MPR_Customer_Accrual_Rt )
 - PAR.MPR_Order_Accrual_Rate;

 // PAR.OD MPR Sent to USDA Sts = CND.yes
 PAR.OD_MPR_Sent_to_USDA_Sts = 'Y';

 ENDIF;

 //?Items added at shipping time ...
 CASE;

 // IF DB1.Order Sequence Number is LT 50
 IF DB1.Order_Sequence_Number < 50;

 //?Items added at shipping time ...
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?if item on the ord and has been sent, resend with diff if >10% orig wgt
 EXECUTE FUNCTION(VAL Co/Ord/Item f/mpr RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2052733;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Order_Sequence_Number);
 PARAMETER(LCL.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.Weight_Ordered);
 PARAMETER(LCL.Weight_Shipped_Total);
 PARAMETER(PAR.OD_MPR_Sent_to_USDA_Sts);
 PARAMETER(DB1.Order_Sequence_Number);
 {
  //?USER: Initialize routine

  //?Template version identifier - Edit to reflect current version.
  //?Template version identifier - Edit to reflect current version.
  EXECUTE FUNCTION(@Template Version) TYPE(EXCINTFUN)                             AC1523909;
  PARAMETER('1');
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Not cancelled
  IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

  CASE;

  // IF DB1.Order Sequence Number NE PAR.Order Sequence Number USR
  IF DB1.Order_Sequence_Number <> PAR.Order_Sequence_Number_USR;

  CASE;

  // IF DB1.OD MPR Sent to USDA Sts is yes
  IF DB1.OD_MPR_Sent_to_USDA_Sts = 'Y';

  // PAR.Weight Ordered = PAR.Weight Ordered + DB1.Weight Ordered
  PAR.Weight_Ordered = PAR.Weight_Ordered + DB1.Weight_Ordered;

  ENDIF;

  ENDIF;

  ENDIF;

 }

 //?If item was already sent, then send difference if >10% change
 CASE;

 // IF LCL.Weight Ordered is Greater than zero
 IF LCL.Weight_Ordered > *ZERO;

 // LCL.Weight Adjust = PAR.MPR Product Weight - LCL.Weight Ordered
 LCL.Weight_Adjust = PAR.MPR_Product_Weight - LCL.Weight_Ordered;

 // LCL.Percent 7.4 USR = LCL.Weight Ordered * CON..10 *
 LCL.Percent_7_4_USR = LCL.Weight_Ordered * .10;

 CASE;

 // IF LCL.Weight Adjust GT LCL.Percent 7.4 USR
 IF LCL.Weight_Adjust > LCL.Percent_7_4_USR;

 // PAR.MPR Product Weight = LCL.Weight Adjust
 PAR.MPR_Product_Weight = LCL.Weight_Adjust;

 ENDIF;

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.OD MPR Sent to USDA Sts is yes
 IF PAR.OD_MPR_Sent_to_USDA_Sts = 'Y';

 //?Create or Update Rcd (if item is on the order twice)
 EXECUTE FUNCTION(Rtv Crt/Chg MPR Prk   RT) TYPE(RTVOBJ) FILE(PBAOCPP)           AC2052683;
 PARAMETER(PAR.MPR_Identification_Num);
 PARAMETER(PAR.MPR_Reporting_Date);
 PARAMETER(PAR.MPR_Reporting_Time);
 PARAMETER(PAR.MPR_Lot_Identification);
 PARAMETER(PAR.MPR_Item_Code);
 PARAMETER(PAR.MPR_Destination);
 PARAMETER(PAR.MPR_Sales_Type_Code);
 PARAMETER(PAR.MPR_Delivery_Period_Code);
 PARAMETER(PAR.MPR_Refrigeration);
 PARAMETER(PAR.MPR_Class_code);
 PARAMETER(PAR.MPR_Null);
 PARAMETER(PAR.MPR_Null_1);
 PARAMETER(PAR.MPR_Item_Description);
 PARAMETER(PAR.MPR_Product_Weight);
 PARAMETER(PAR.MPR_FOB_Plant_Price_CWT);
 PARAMETER(PAR.MPR_FOB_Omaha_Price);
 PARAMETER(PAR.MPR_Data_Mart_Process_Sts);
 PARAMETER(PAR.MPR_Price_Calc_Exception);
 PARAMETER(PAR.MPR_Actual_Ship_Date);
 PARAMETER(PAR.MPR_Requested_Ship_Date);
 PARAMETER(PAR.MPR_Scheduled_Ship_Date);
 PARAMETER(PAR.MPR_Unit_Price);
 PARAMETER(PAR.MPR_Absorbed_Frt_Rate);
 PARAMETER(PAR.MPR_Customer_Accrual_Rt);
 PARAMETER(PAR.MPR_Order_Accrual_Rate);
 PARAMETER(PAR.MPR_FOB_Rate_per_Mile);
 PARAMETER(PAR.MPR_Freight_Add_On);
 PARAMETER(PAR.MPR_Shipping_Method);
 PARAMETER(PAR.MPR_State_Code);
 PARAMETER(PAR.MPR_Zip_Code);
 PARAMETER(PAR.MPR_FOB_Miles_to_Omaha);
 PARAMETER(PAR.MPR_OD_Entry_Firm_Date);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt MPR Wholesale Prk CR) TYPE(CRTOBJ) FILE(PBAOCPP)           AC2051062;
  PARAMETER(PAR.MPR_Identification_Num);
  PARAMETER(PAR.MPR_Reporting_Date);
  PARAMETER(PAR.MPR_Reporting_Time);
  PARAMETER(PAR.MPR_Lot_Identification);
  PARAMETER(PAR.MPR_Item_Code);
  PARAMETER(PAR.MPR_Destination);
  PARAMETER(PAR.MPR_Sales_Type_Code);
  PARAMETER(PAR.MPR_Delivery_Period_Code);
  PARAMETER(PAR.MPR_Refrigeration);
  PARAMETER(PAR.MPR_Class_code);
  PARAMETER(PAR.MPR_Null);
  PARAMETER(PAR.MPR_Null_1);
  PARAMETER(PAR.MPR_Item_Description);
  PARAMETER(PAR.MPR_Product_Weight);
  PARAMETER(PAR.MPR_FOB_Plant_Price_CWT);
  PARAMETER(PAR.MPR_FOB_Omaha_Price);
  PARAMETER(PAR.MPR_Data_Mart_Process_Sts);
  PARAMETER(PAR.MPR_Price_Calc_Exception);
  PARAMETER(PAR.MPR_Actual_Ship_Date);
  PARAMETER(PAR.MPR_Requested_Ship_Date);
  PARAMETER(PAR.MPR_Scheduled_Ship_Date);
  PARAMETER(PAR.MPR_Unit_Price);
  PARAMETER(PAR.MPR_Absorbed_Frt_Rate);
  PARAMETER(PAR.MPR_Customer_Accrual_Rt);
  PARAMETER(*ZERO);
  PARAMETER(PAR.MPR_Order_Accrual_Rate);
  PARAMETER(PAR.MPR_FOB_Rate_per_Mile);
  PARAMETER(PAR.MPR_Freight_Add_On);
  PARAMETER(PAR.MPR_Shipping_Method);
  PARAMETER(PAR.MPR_State_Code);
  PARAMETER(PAR.MPR_Zip_Code);
  PARAMETER(PAR.MPR_FOB_Miles_to_Omaha);
  PARAMETER(PAR.MPR_OD_Entry_Firm_Date);
  PARAMETER('A');
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set RECORD STATUS field. ***
    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

  }

  //?USER: Process Data record

  // LCL.MPR Product Weight = DB1.MPR Product Weight + PAR.MPR Product Weight
  LCL.MPR_Product_Weight = DB1.MPR_Product_Weight + PAR.MPR_Product_Weight;

  EXECUTE FUNCTION(Chg MPR Wholesale Prk CH) TYPE(CHGOBJ) FILE(PBAOCPP)           AC2051063;
  PARAMETER(DB1.MPR_Identification_Num);
  PARAMETER(DB1.MPR_Reporting_Date);
  PARAMETER(DB1.MPR_Reporting_Time);
  PARAMETER(DB1.MPR_Lot_Identification);
  PARAMETER(DB1.MPR_Item_Code);
  PARAMETER(PAR.MPR_Destination);
  PARAMETER(PAR.MPR_Sales_Type_Code);
  PARAMETER(PAR.MPR_Delivery_Period_Code);
  PARAMETER(PAR.MPR_Refrigeration);
  PARAMETER(PAR.MPR_Class_code);
  PARAMETER(PAR.MPR_Null);
  PARAMETER(PAR.MPR_Null_1);
  PARAMETER(PAR.MPR_Item_Description);
  PARAMETER(LCL.MPR_Product_Weight);
  PARAMETER(PAR.MPR_FOB_Plant_Price_CWT);
  PARAMETER(PAR.MPR_FOB_Omaha_Price);
  PARAMETER(PAR.MPR_Data_Mart_Process_Sts);
  PARAMETER(PAR.MPR_Price_Calc_Exception);
  PARAMETER(DB1.MPR_Actual_Ship_Date);
  PARAMETER(DB1.MPR_Requested_Ship_Date);
  PARAMETER(DB1.MPR_Scheduled_Ship_Date);
  PARAMETER(DB1.MPR_Unit_Price);
  PARAMETER(DB1.MPR_Absorbed_Frt_Rate);
  PARAMETER(DB1.MPR_Customer_Accrual_Rt);
  PARAMETER(DB1.MPR_Unused_Rate_3);
  PARAMETER(DB1.MPR_Order_Accrual_Rate);
  PARAMETER(DB1.MPR_FOB_Rate_per_Mile);
  PARAMETER(PAR.MPR_Freight_Add_On);
  PARAMETER(DB1.MPR_Shipping_Method);
  PARAMETER(DB1.MPR_State_Code);
  PARAMETER(DB1.MPR_Zip_Code);
  PARAMETER(DB1.MPR_FOB_Miles_to_Omaha);
  PARAMETER(DB1.MPR_OD_Entry_Firm_Date);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

 //?OD: Update MPR sent to USDA Sts to Yes or Error IF Hard run at 9:30/1:30
 CASE;

 // IF PAR.MPR Data Mart Process Sts is Ready for cognos-MPR Rptd
 IF PAR.MPR_Data_Mart_Process_Sts = 'R';

 EXECUTE FUNCTION(Chg MPR USDA Sts      CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC2052542;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(PAR.OD_MPR_Sent_to_USDA_Sts);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 //?Only report if price is > 0, else its not ready yet.
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Detail Line Status is Complete
 IF DB1.Detail_Line_Status = 'C';

 // PAR.OD MPR Sent to USDA Sts = CND.Exclude
 PAR.OD_MPR_Sent_to_USDA_Sts = 'X';

 ENDIF;

 ENDIF;

 ENDIF;

 //?OD: Update with Exclude send to MPR USDA- only if hard run at 9:30/1:30
 CASE;

 // IF PAR.OD MPR Sent to USDA Sts is Exclude
 IF PAR.OD_MPR_Sent_to_USDA_Sts = 'X';

 // AND PAR.MPR Data Mart Process Sts is Ready for cognos-MPR Rptd
 AND PAR.MPR_Data_Mart_Process_Sts = 'R';

 EXECUTE FUNCTION(Chg MPR USDA Sts      CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC2052542;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(PAR.OD_MPR_Sent_to_USDA_Sts);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

}


