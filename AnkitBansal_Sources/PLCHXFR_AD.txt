// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLCHXFR
// ?Date: 14.08.2025 Time: 02:53:46
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?MODIFICATIONS
//?11/02/2020 ISE H16853 - CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
//?Use 360/Job Date/(Job Hour-1) if the Input parms are blank
//?Calc Sched hour
CASE;

// IF PAR.CC Company Number is *ZERO
IF PAR.CC_Company_Number = *ZERO;

// AND PAR.PI Scheduled Date is Not entered
AND PAR.PI_Scheduled_Date = 0;

// PAR.PI Scheduled Date = JOB.*Job date
PAR.PI_Scheduled_Date = JOB.*Job_date;

// PAR.PI Scheduled Hour = JOB.*Job hour - CON.1
PAR.PI_Scheduled_Hour = JOB.*Job_hour - 1;

CASE;

// IF PAR.PI Scheduled Hour is LT 00
IF PAR.PI_Scheduled_Hour < *ZERO;

// PAR.PI Scheduled Hour = CON.23
PAR.PI_Scheduled_Hour = 23;

// PAR.PI Scheduled Date = PAR.PI Scheduled Date + CON.-1 *DAYS
PAR.PI_Scheduled_Date = DATEINCR(PAR.PI_Scheduled_Date '-1' 'DY' 1111110 'NONE' 'N' 1);

ENDIF;

ENDIF;

//?Company parm
CASE;

// IF PAR.CC Company Number is *ZERO
IF PAR.CC_Company_Number = *ZERO;

//?RMC 11/16/05 get co for user
// Call program Rtv Co for User       XF.
CALL PROGRAM(Rtv Co for User       XF) ('PLF8XFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPE');

ENDIF;

EXECUTE FUNCTION(Rtv Driven Hd per hr  RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1249237;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.PI_Scheduled_Date);
PARAMETER(PAR.PI_Scheduled_Hour);
PARAMETER(PAR.PI_Hd_Driven_to_Kill);
PARAMETER(PAR.PI_Yard_Dead);
{
 //?USER: Initialize routine

 // PAR.PI Hd Driven to Kill = CON.*ZERO
 PAR.PI_Hd_Driven_to_Kill = *ZERO;

 // PAR.PI Yard Dead = CON.*ZERO
 PAR.PI_Yard_Dead = *ZERO;

 //?USER: Process Data record

 // PAR.PI Hd Driven to Kill = PAR.PI Hd Driven to Kill + DB1.TD Pen Head
 PAR.PI_Hd_Driven_to_Kill = PAR.PI_Hd_Driven_to_Kill + DB1.TD_Pen_Head;

 // PAR.PI Yard Dead = PAR.PI Yard Dead + DB1.TD Yard Dead
 PAR.PI_Yard_Dead = PAR.PI_Yard_Dead + DB1.TD_Yard_Dead;

}


EXECUTE FUNCTION(Rtv Scl Hd/Ld per HourRT) TYPE(RTVOBJ) FILE(PKB3CPP)           AB1249283;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.PI_Scheduled_Date);
PARAMETER(PAR.PI_Scheduled_Hour);
PARAMETER(PAR.PI_Hd_Put_into_Pens);
PARAMETER(PAR.PI_Resale_Head_Count);
PARAMETER(PAR.PI_Number_of_Loads_Incl);
PARAMETER(PAR.PI_DOA);
PARAMETER(PAR.PI_Stress_Hogs);
{
 //?USER: Initialize routine

 // PAR.PI Hd Put into Pens = CON.*ZERO
 PAR.PI_Hd_Put_into_Pens = *ZERO;

 // PAR.PI Resale Head Count = CON.*ZERO
 PAR.PI_Resale_Head_Count = *ZERO;

 // PAR.PI Number of Loads Incl = CON.*ZERO
 PAR.PI_Number_of_Loads_Incl = *ZERO;

 // PAR.PI DOA = CON.*ZERO
 PAR.PI_DOA = *ZERO;

 // PAR.PI Stress Hogs = CON.*ZERO
 PAR.PI_Stress_Hogs = *ZERO;

 //?USER: Process Data record

 //?Accum if this is the latest scale tkt rcd found for bol
 CASE;

 // IF DB1.BOH Buy Order Number NE WRK.BOH Buy Order Number
 IF DB1.BOH_Buy_Order_Number <> WRK.BOH_Buy_Order_Number;

 // OR DB1.BOL Load Number NE WRK.BOL Load Number
 OR DB1.BOL_Load_Number <> WRK.BOL_Load_Number;

 EXECUTE FUNCTION(Rtv Val Last Scl Tim  RT) TYPE(RTVOBJ) FILE(PKB3CPP)           AB1253256;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(WRK.@Record_Found);
 PARAMETER(PAR.TST_Wgt_Hour);
 PARAMETER(PAR.TST_Wgt_Date);
 PARAMETER(LCL.TST_Head);
 PARAMETER(LCL.PI_Stress_Hogs);
 {
  //?USER: Initialize routine

  // PAR.@Record Found = CND.Record Not Found
  PAR.@Record_Found = 'N';

  // PAR.TST Head = CND.*Zeros
  PAR.TST_Head = *ZERO;

  // PAR.PI Stress Hogs = CND.*Zeros
  PAR.PI_Stress_Hogs = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF DB1.TST Wgt Date GT PAR.PI Scheduled Date
  IF DB1.TST_Wgt_Date > PAR.PI_Scheduled_Date;

  // OR DB1.TST Wgt Hour GT PAR.PI Scheduled Hour
  OR DB1.TST_Wgt_Hour > PAR.PI_Scheduled_Hour;

  // PAR.@Record Found = CND.Record Found
  PAR.@Record_Found = 'Y';

  ENDIF;

  // PAR.TST Head = PAR.TST Head + DB1.TST Head
  PAR.TST_Head = PAR.TST_Head + DB1.TST_Head;

  // Call program Rtv Stress Pens Only  XF.
  CALL PROGRAM(Rtv Stress Pens Only  XF) ('PLPJXFR');
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(LCL.Stress_Market_Type);

  //?Count if stress pen    Stress/Market
  CASE;

  // IF LCL.Stress/Market Type is Stress
  IF LCL.Stress_Market_Type = 'S';

  // PAR.PI Stress Hogs = PAR.PI Stress Hogs + DB1.TST Head
  PAR.PI_Stress_Hogs = PAR.PI_Stress_Hogs + DB1.TST_Head;

  ENDIF;

  //?USER: Exit processing

  //?If there was a later time found, dont accum these head
  CASE;

  // IF PAR.@Record Found is Record Found
  IF PAR.@Record_Found = 'Y';

  // PAR.TST Head = CND.*Zeros
  PAR.TST_Head = *ZERO;

  // PAR.PI Stress Hogs = CND.*Zeros
  PAR.PI_Stress_Hogs = *ZERO;

  ENDIF;

 }

 CASE;

 // IF WRK.@Record Found is Record Not Found
 IF WRK.@Record_Found = 'N';

 // PAR.PI Hd Put into Pens = PAR.PI Hd Put into Pens + LCL.TST Head
 PAR.PI_Hd_Put_into_Pens = PAR.PI_Hd_Put_into_Pens + LCL.TST_Head;

 // PAR.PI Stress Hogs = PAR.PI Stress Hogs + LCL.PI Stress Hogs
 PAR.PI_Stress_Hogs = PAR.PI_Stress_Hogs + LCL.PI_Stress_Hogs;

 EXECUTE FUNCTION(Rtv Doa's per BOL) TYPE(RTVOBJ) FILE(PKA1CPP)                  AB1253271;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(LCL.TH_Dead_On_Arrival);
 {
  //?USER: Initialize routine

  // PAR.TH Dead On Arrival = CON.*ZERO
  PAR.TH_Dead_On_Arrival = *ZERO;

  //?USER: Process Data record

  // PAR.TH Dead On Arrival = PAR.TH Dead On Arrival + DB1.TH Dead On Arrival
  PAR.TH_Dead_On_Arrival = PAR.TH_Dead_On_Arrival + DB1.TH_Dead_On_Arrival;

 }

 // PAR.PI DOA = PAR.PI DOA + LCL.TH Dead On Arrival
 PAR.PI_DOA = PAR.PI_DOA + LCL.TH_Dead_On_Arrival;

 EXECUTE FUNCTION(Rtv Tattoo Resale Hd  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1249257;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(PAR.PI_Resale_Head_Count);
 {
  //?USER: Initialize routine

  // PAR.PI Resale Head Count = CON.*ZERO
  PAR.PI_Resale_Head_Count = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF DB1.TH Hog Class Type is Resale
  IF DB1.TH_Hog_Class_Type = 'R';

  // PAR.PI Resale Head Count = PAR.PI Resale Head Count + DB1.TH Head Received
  PAR.PI_Resale_Head_Count = PAR.PI_Resale_Head_Count + DB1.TH_Head_Received;

  ENDIF;

 }

 // PAR.PI Number of Loads Incl = PAR.PI Number of Loads Incl + CON.1
 PAR.PI_Number_of_Loads_Incl = PAR.PI_Number_of_Loads_Incl + 1;

 // WRK.BOH Buy Order Number = DB1.BOH Buy Order Number
 WRK.BOH_Buy_Order_Number = DB1.BOH_Buy_Order_Number;

 // WRK.BOL Load Number = DB1.BOL Load Number
 WRK.BOL_Load_Number = DB1.BOL_Load_Number;

 ENDIF;

 ENDIF;

}


CASE;

// IF PAR.PI Hd Put into Pens is Not Zero
IF PAR.PI_Hd_Put_into_Pens <> *ZERO;

// OR PAR.PI Hd Driven to Kill is Not Zero
OR PAR.PI_Hd_Driven_to_Kill <> *ZERO;

// OR PAR.PI Number of Loads Incl is Not Zero
OR PAR.PI_Number_of_Loads_Incl <> *ZERO;

// OR PAR.PI Resale Head Count is Not Zero
OR PAR.PI_Resale_Head_Count <> *ZERO;

// OR PAR.PI Stress Hogs is Not Zero
OR PAR.PI_Stress_Hogs <> *ZERO;

// OR PAR.PI DOA is Not Zero
OR PAR.PI_DOA <> *ZERO;

// OR PAR.PI Yard Dead is Not Zero
OR PAR.PI_Yard_Dead <> *ZERO;

EXECUTE FUNCTION(Rtv/Crt Pen Inventory RT) TYPE(RTVOBJ) FILE(PLALCPP)           AB1249246;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.PI_Scheduled_Date);
PARAMETER(PAR.PI_Scheduled_Hour);
PARAMETER(PAR.PI_Hd_Put_into_Pens);
PARAMETER(PAR.PI_Hd_Driven_to_Kill);
PARAMETER(PAR.PI_Number_of_Loads_Incl);
PARAMETER(PAR.PI_Resale_Head_Count);
PARAMETER(PAR.PI_Stress_Hogs);
PARAMETER(PAR.PI_DOA);
PARAMETER(PAR.PI_Yard_Dead);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(Crt Pen Inventory     CR) TYPE(CRTOBJ) FILE(PLALCPP)           AB1249228;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.PI_Scheduled_Date);
 PARAMETER(PAR.PI_Scheduled_Hour);
 PARAMETER(PAR.PI_Hd_Put_into_Pens);
 PARAMETER(PAR.PI_Hd_Driven_to_Kill);
 PARAMETER(PAR.PI_Number_of_Loads_Incl);
 PARAMETER(PAR.PI_Resale_Head_Count);
 PARAMETER(PAR.PI_Stress_Hogs);
 PARAMETER(PAR.PI_DOA);
 PARAMETER(PAR.PI_Yard_Dead);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Pen Inventory     CH) TYPE(CHGOBJ) FILE(PLALCPP)           AB1249229;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.PI_Scheduled_Date);
 PARAMETER(DB1.PI_Scheduled_Hour);
 PARAMETER(PAR.PI_Hd_Put_into_Pens);
 PARAMETER(PAR.PI_Hd_Driven_to_Kill);
 PARAMETER(PAR.PI_Number_of_Loads_Incl);
 PARAMETER(PAR.PI_Resale_Head_Count);
 PARAMETER(PAR.PI_Stress_Hogs);
 PARAMETER(PAR.PI_DOA);
 PARAMETER(PAR.PI_Yard_Dead);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


ENDIF;

