// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDAOXFR
// ?Date: 14.08.2025 Time: 03:33:51
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?----- CHANGE LOG -----
EXECUTE FUNCTION(E00519 Access by WHS  IF) TYPE(EXCINTFUN)                      AC1960775;
{
 //?Execute internal function

 //?---------- November 2009 PKD ----------
 //?*****  WW Cust/Order Inq O.E.  *****
 //?- Do not allow Transfer Co if Application WHS Restrict = Y.
 //?***** Edit Order Header ***** -TESTED 11/10/09
 //?-  Added validation on Warehouse Code.  If Application WHS Restrict
 //?is Yes, then only the Warehouse Code for O/P Application Code
 //?are allowed.  If the Application WHS Restrict is No, then the
 //?User is allowed access to all Active Warehouses.
 //?-  Changed the F4=Prompt to only display the Warehouses the
 //?User has access to if the Application WHS Restrict is Yes.
 //?***** Edit Order Detail Lines & Copy Order Template ***** TESTED 11/10
 //?-  Added validation for Item Code. For each application and
 //?Warehouse, addtional access control is defined for TF Exempt Code.
 //?Users that are restricted by Warehouse, they may also be restricted
 //?on the Items they are able to sell.
 //?-  Added validation on Order TF Exempt Code.  If the Customer is
 //?is Exempt, then they can only sell Exempt Product. (E00505)
 //?***** Edit Load Plan Order Entry *****
 //?-  Added WHS Code to the Control Context and Record Context.
 //?For Users that are Application WHS Restrict = Yes,
 //?the CTL.Warehouse Code will be restricted to the
 //?Warehouses that they have access to.
 //?-  CTL.Warehouse Code will be required for Users with
 //?Application Warehouse Controlled.
 //?-  Added Delivery State Code (Sail Port State) to the screen.
 //?It will default to the Ship To State Code.  It will be overriden
 //?to the Sail Port State if the Shipping Line and Port Delivery
 //?Terminal are entered in the Order Header Extent.
 //?-  Added subfile select for WHS and Delv ST.
 //?***** Edit Load Plan *****
 //?-  For Users that are Application WHS Restrict = Yes,
 //?the CTL.Warehouse Code will be restricted to the
 //?Warehouses that they have access to.
 //?-  CTL.Warehouse Code will be required for Users with
 //?Application Warehouse Controlled.
 //?-  CTL.USR Load Type---Default from the CTL.USR Warehosue Code
 //?for users that are Application WHS Restrict.
 //?***** Display Change Log/Accept Load (PDAOXFR) *****
 //?-  Deletes will not be accepted by Application WHS Restricted
 //?users because we do not know the Warehouse that was on the Load.
 //?-  If Application WHS Restrict is Yes, then only select the load
 //?for acceptance if at least one order on the load has a warehouse
 //?where the user has access.
 //?-  Reverse imaged Warehouse Code on the Display. The Users with
 //?Application WHS Restrict of No will be able to see all Loads.
 //?***** Edit Load Plan *****
 //?- Added Warehouse Code to the Control and Detail Context with
 //?appropriate validations.
 //?***** Work With Load Confirmation *****
 //?- Added Warehouse Code as a parameter from the Work With Load
 //?Plan All screen for selection of the Loads to Display on the
 //?screen.  Added selection for Warehouse Code if one passed in.
 //?If the Load is not to be selected due to not matching the Whs,
 //?a record is created for the load in the array (exception array).
 //?- Added Warehouse Code to the Subfile.
 //?***** Order Status Report Prompt *****
 //?- Added Warehouse Code restriction on the prompt.
 //?***** Work With Orders Price Audit/Maintenance *****
 //?- Added Warehouse Code restriction.
 //?***** Work With Orders - Edit Ship Date  *****
 //?- Added Warehouse Code restriction.
}


//?----------------------
EXECUTE FUNCTION(VAL Set Int.Acc No Hdg IF) TYPE(EXCINTFUN)                     AC1460523;
PARAMETER('PDZ6DF');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(WRK.Allow_Multi_Company);
PARAMETER(WRK.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
PARAMETER(WRK.Name);
PARAMETER(WRK.System_Value_Alpha);
PARAMETER(PAR.Access_Denied_Y_N);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Appl No Exit  IF) TYPE(EXCINTFUN)                     AC1460535;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(WRK.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 PARAMETER(WRK.Access_Denied_Y_N);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // PAR.Access Denied (Y/N) = CND.yes
  PAR.Access_Denied_Y_N = 'Y';

  //?User Profile Record Not found
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Access Denied (Y/N) = CND.no
  PAR.Access_Denied_Y_N = 'N';

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // PAR.Access Denied (Y/N) = CND.no
  PAR.Access_Denied_Y_N = 'N';

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Access Denied (Y/N) = CND.yes
  PAR.Access_Denied_Y_N = 'Y';

  ENDIF;

  CASE;

  // IF LCL.Company Number is greater than zero
  IF LCL.Company_Number > *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  EXECUTE FUNCTION(RTV Prod Whse for Co  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1757887;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Shipping_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF DB1.Record Status is Active
   IF DB1.Record_Status = 'A';

   CASE;

   // IF DB1.Production Warehouse Code is Warehouse Code not Blank
   IF DB1.Production_Warehouse_Code <> *BLANK;

   // PAR.Warehouse Code = DB1.Production Warehouse Code
   PAR.Warehouse_Code = DB1.Production_Warehouse_Code;

   QUIT;

   ENDIF;

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 // PAR.Company Number = WRK.Company Number
 PAR.Company_Number = WRK.Company_Number;

 // PAR.Access Denied (Y/N) = WRK.Access Denied (Y/N)
 PAR.Access_Denied_Y_N = WRK.Access_Denied_Y_N;

 //?If access denied is no, rtv co. name
 CASE;

 // IF WRK.Access Denied (Y/N) is no
 IF WRK.Access_Denied_Y_N = 'N';

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(WRK.Company_Number);
 PARAMETER(PAR.Name);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

}


CASE;

// IF PAR.Access Denied (Y/N) is yes
IF PAR.Access_Denied_Y_N = 'Y';

// Execute function SET Message Queue Dest US.
EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
{
 C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
}


// Send completion message - 'Application access denied for user &1 in application area &2'
MESSAGE(USR0810 *COMPLETION);
MSGPARM(JOB.*USER);
MSGPARM('PDZ6DF');

PGM.*Return_code = 'Y2U9999';

RETURN;

ENDIF;

EXECUTE FUNCTION(RTV Appl Whs Restrict  RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1959551;
PARAMETER(JOB.*USER);
PARAMETER(LCL.Application_WHS_Restrict);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Application WHS Restrict is no
IF LCL.Application_WHS_Restrict = 'N';

// LCL.Created Date = JOB.*Job date + CON.-1 *YEARS
LCL.Created_Date = DATEINCR(JOB.*Job_date '-1' 'YR' 1111111 'NONE' 'N' 1);

//?Show Deleted Loads 1st
EXECUTE FUNCTION(RTV Dsp All By Type    RT) TYPE(RTVOBJ) FILE(PDLHCPP)          AC1476815;
PARAMETER(LCL.Created_Date);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('DELOAD');
PARAMETER(PAR.Load_Start_Company_USR);
{
 //?USER: Process Data record

 // PAR.Order Number = CON.*ZERO
 PAR.Order_Number = *ZERO;

 // PAR.Stop/Drop = CON.*ZERO
 PAR.Stop_Drop = *ZERO;

 //?If displaying deleted load look for deleted loads that are accepted.
 CASE;

 // IF PAR.Load Change Type is Delete Load
 IF PAR.Load_Change_Type = 'DELOAD';

 EXECUTE FUNCTION(Chk Load for DELODA   RT) TYPE(RTVOBJ) FILE(PDLHCPP)           AC1585145;
 PARAMETER(DB1.Load_ID);
 PARAMETER('DELODA');
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  CASE;

  // IF PAR.Load ID EQ DB1.Load ID
  IF PAR.Load_ID = DB1.Load_ID;

  // AND PAR.Load Change Type EQ DB1.Load Change Type
  AND PAR.Load_Change_Type = DB1.Load_Change_Type;

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  ENDIF;

  QUIT;

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 //?Display loads for par.company only  RMC 4/10/06
 CASE;

 // IF DB1.Company Number EQ PAR.Company Number
 IF DB1.Company_Number = PAR.Company_Number;

 // PAR.Stop/Drop = DB1.Stop/Drop
 PAR.Stop_Drop = DB1.Stop_Drop;

 // PAR.Order Number = DB1.Order Number
 PAR.Order_Number = DB1.Order_Number;

 // Call program DSP Load Acceptance    DF.
 CALL PROGRAM(DSP Load Acceptance    DF) ('PDZ6DFR');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.Stop_Drop);
 PARAMETER(PAR.Order_Number);

 CASE;

 // IF PGM.*Return code is *User QUIT requested
 IF PGM.*Return_code = 'Y2U9999';

 PGM.*Return_code = *BLANK;

 RETURN;

 ENDIF;

 ENDIF;

 ENDIF;

 //?If displaying deleted load look for deleted loads that are accepted.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Stop/Drop = DB1.Stop/Drop
 PAR.Stop_Drop = DB1.Stop_Drop;

 // PAR.Order Number = DB1.Order Number
 PAR.Order_Number = DB1.Order_Number;

 // Call program DSP Load Acceptance    DF.
 CALL PROGRAM(DSP Load Acceptance    DF) ('PDZ6DFR');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.Stop_Drop);
 PARAMETER(PAR.Order_Number);

 CASE;

 // IF PGM.*Return code is *User QUIT requested
 IF PGM.*Return_code = 'Y2U9999';

 PGM.*Return_code = *BLANK;

 RETURN;

 ENDIF;

 ENDIF;

}


ENDIF;

// PAR.Load ID = CON.*ZERO
PAR.Load_ID = *ZERO;

//?This is for all non-deleted, unaccepted loads
EXECUTE FUNCTION(RTV Control Chg Log    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1475237;
PARAMETER(9999999);
PARAMETER(*ZERO);
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Load_Start_Company_USR);
PARAMETER(LCL.Application_WHS_Restrict);
{
 //?USER: Initialize routine

 //?----- Change Log -----
 EXECUTE FUNCTION(E00519 Access by WHS  IF) TYPE(EXCINTFUN)                      AC1960775;
 {
  //?Execute internal function

  //?---------- November 2009 PKD ----------
  //?*****  WW Cust/Order Inq O.E.  *****
  //?- Do not allow Transfer Co if Application WHS Restrict = Y.
  //?***** Edit Order Header ***** -TESTED 11/10/09
  //?-  Added validation on Warehouse Code.  If Application WHS Restrict
  //?is Yes, then only the Warehouse Code for O/P Application Code
  //?are allowed.  If the Application WHS Restrict is No, then the
  //?User is allowed access to all Active Warehouses.
  //?-  Changed the F4=Prompt to only display the Warehouses the
  //?User has access to if the Application WHS Restrict is Yes.
  //?***** Edit Order Detail Lines & Copy Order Template ***** TESTED 11/10
  //?-  Added validation for Item Code. For each application and
  //?Warehouse, addtional access control is defined for TF Exempt Code.
  //?Users that are restricted by Warehouse, they may also be restricted
  //?on the Items they are able to sell.
  //?-  Added validation on Order TF Exempt Code.  If the Customer is
  //?is Exempt, then they can only sell Exempt Product. (E00505)
  //?***** Edit Load Plan Order Entry *****
  //?-  Added WHS Code to the Control Context and Record Context.
  //?For Users that are Application WHS Restrict = Yes,
  //?the CTL.Warehouse Code will be restricted to the
  //?Warehouses that they have access to.
  //?-  CTL.Warehouse Code will be required for Users with
  //?Application Warehouse Controlled.
  //?-  Added Delivery State Code (Sail Port State) to the screen.
  //?It will default to the Ship To State Code.  It will be overriden
  //?to the Sail Port State if the Shipping Line and Port Delivery
  //?Terminal are entered in the Order Header Extent.
  //?-  Added subfile select for WHS and Delv ST.
  //?***** Edit Load Plan *****
  //?-  For Users that are Application WHS Restrict = Yes,
  //?the CTL.Warehouse Code will be restricted to the
  //?Warehouses that they have access to.
  //?-  CTL.Warehouse Code will be required for Users with
  //?Application Warehouse Controlled.
  //?-  CTL.USR Load Type---Default from the CTL.USR Warehosue Code
  //?for users that are Application WHS Restrict.
  //?***** Display Change Log/Accept Load (PDAOXFR) *****
  //?-  Deletes will not be accepted by Application WHS Restricted
  //?users because we do not know the Warehouse that was on the Load.
  //?-  If Application WHS Restrict is Yes, then only select the load
  //?for acceptance if at least one order on the load has a warehouse
  //?where the user has access.
  //?-  Reverse imaged Warehouse Code on the Display. The Users with
  //?Application WHS Restrict of No will be able to see all Loads.
  //?***** Edit Load Plan *****
  //?- Added Warehouse Code to the Control and Detail Context with
  //?appropriate validations.
  //?***** Work With Load Confirmation *****
  //?- Added Warehouse Code as a parameter from the Work With Load
  //?Plan All screen for selection of the Loads to Display on the
  //?screen.  Added selection for Warehouse Code if one passed in.
  //?If the Load is not to be selected due to not matching the Whs,
  //?a record is created for the load in the array (exception array).
  //?- Added Warehouse Code to the Subfile.
  //?***** Order Status Report Prompt *****
  //?- Added Warehouse Code restriction on the prompt.
  //?***** Work With Orders Price Audit/Maintenance *****
  //?- Added Warehouse Code restriction.
  //?***** Work With Orders - Edit Ship Date  *****
  //?- Added Warehouse Code restriction.
 }

 //?----------------------
 // WRK.Record Found USR = CND.Record Not Found
 WRK.Record_Found_USR = 'N';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 //?Documentation
 DO;

 //?On entry, only want to see changes since last acceptance AND
 //?   only want to see changes to orders, not load log entries.
 ENDDO;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?SEL: Load ID (Application WHS Restrict = Y)
 CASE;

 // IF PAR.Application WHS Restrict is yes
 IF PAR.Application_WHS_Restrict = 'Y';

 // Call program Zzz Appl WHS Ld       XF.
 CALL PROGRAM(Zzz Appl WHS Ld       XF) ('PNMWXFR');
 PARAMETER(JOB.*USER);
 PARAMETER('TRF');
 PARAMETER(DB1.Load_ID);
 PARAMETER(PGM.*Record_selected);

 ENDIF;

 //?Process Record
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 //?position by Date/Time
 // PAR.Created Date = CON.*ZERO
 PAR.Created_Date = *ZERO;

 // PAR.Created Time = CON.*ZERO
 PAR.Created_Time = *ZERO;

 // PAR.Sequence Number = CON.*ZERO
 PAR.Sequence_Number = *ZERO;

 EXECUTE FUNCTION(RTV Latest Accept Type RT) TYPE(RTVOBJ) FILE(PDLHCPP)          AC1474979;
 PARAMETER(DB1.Load_ID);
 PARAMETER('ACCEPT');
 PARAMETER(PAR.Created_Date);
 PARAMETER(PAR.Created_Time);
 PARAMETER(PAR.Sequence_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  //?this is intended to get ALL of a rst. type of change.  It will return
  //?the information from the LAST one.
  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.Order Number = CON.*ZERO
 PAR.Order_Number = *ZERO;

 // PAR.Stop/Drop = CON.*ZERO
 PAR.Stop_Drop = *ZERO;

 // Call program RTV Next/Prev Order    XF.
 CALL PROGRAM(RTV Next/Prev Order    XF) ('PDAPXFR');
 PARAMETER(PAR.Created_Date);
 PARAMETER(PAR.Created_Time);
 PARAMETER(PAR.Sequence_Number);
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.Stop_Drop);
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER('N');
 PARAMETER(WRK.*Return_code);

 //?Rst on Load Str Company            RMC 3/1/06
 CASE;

 // IF PAR.Load Start Company USR EQ DB1.Company Number
 IF PAR.Load_Start_Company_USR = DB1.Company_Number;

 CASE;

 // IF PAR.Order Number NE WRK.ZERO
 IF PAR.Order_Number <> WRK.ZERO;

 // WRK.Record Found USR = CND.Record Found
 WRK.Record_Found_USR = 'Y';

 // Call program DSP Load Acceptance    DF.
 CALL PROGRAM(DSP Load Acceptance    DF) ('PDZ6DFR');
 PARAMETER(PAR.Created_Date);
 PARAMETER(PAR.Created_Time);
 PARAMETER(PAR.Sequence_Number);
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.Stop_Drop);
 PARAMETER(PAR.Order_Number);

 CASE;

 // IF PGM.*Return code is *User QUIT requested
 IF PGM.*Return_code = 'Y2U9999';

 PGM.*Return_code = *BLANK;

 RETURN;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?USER: Exit processing

 CASE;

 // IF WRK.Record Found USR is Record Not Found
 IF WRK.Record_Found_USR = 'N';

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 ENDIF;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send completion message - 'No Unaccepted Loads found for Company &1'
MESSAGE(USR2526 *COMPLETION);
MSGPARM(PAR.Load_Start_Company_USR);

ENDIF;

