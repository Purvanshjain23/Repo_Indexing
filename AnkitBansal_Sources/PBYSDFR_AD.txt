// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBYSDFR
// ?Date: 14.08.2025 Time: 03:49:47
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification history
DO;

//?E9849 JJH 03/30/17 - Commodity Market Prices for Triumph Foods
//?- Allow multiple Commodity Market Prices for Triumph Foods
//?- Allowed Commodity Market Prices for Triumph Foods is maintained
//?  in Commodity Market Price TF (PUABREP) file.
//?- This function called by Dsp Com Mrkt Price TF DF (PUBWDFR).
//?- Remove Item Code, Sales Person, and Sales Type from screen as
//?  these fields are not maintained by Triumph Foods.
//?- Display Triumph Foods in Subfile Control
//?09/30/2016 Brad Baden  E7214 - MMP Floor and Ceiling Pricing
//?  Copied from function WW Commod Mrkt/Price   DF for Triumph Foods
//?  to only allow the user to create, modify, and delete records for
//?  LHF / NEARBY records for Multi Market Pricing.
ENDDO;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('C/S');
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Printer Device = CND.Not entered
PAR.PRT_Printer_Device = *BLANK;

// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// PGM.*Scan limit = CND.999999
PGM.*Scan_limit = 999999;

//?USER: Initialize subfile control

//?First time
CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// CTL.Record Status = CND.Active
CTL.Record_Status = 'A';

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

//?E9489 JJH 03/30/17 - Commodity Market Price for Triumph Foods.
ENDIF;

//?E9849 JJH 03/30/17 - Commodity Market Price for Triumph Foods.
//?USER: Initialize subfile record from DBF record

//?E8499 JJH 03/30/17 - Commodity Market Price for Triumph Foods.
EXECUTE FUNCTION(RTV Commod U/M         RT) TYPE(RTVOBJ) FILE(OMFZREP)          AC1366761;
PARAMETER(DB1.Commodity_Price_Group);
PARAMETER(RCD.UOM_Pricing);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Process subfile control (Pre-confirm)

//?E9849 JJH 03/30/17 - Commodity Market Price for Triumph Foods.
//?E9849 JJH 03/30/17 - Commodity Market Price for Triumph Foods.
//?Create new record
CASE;

// IF CTL.*CMD key is *Create
IF CTL.*CMD_key = '06';

//?E9489 JJH 03/30/17 - Commodity Market Price for Triumph Foods.
// Call program EDT Commod Mrkt Prc TF E1.
CALL PROGRAM(EDT Commod Mrkt Prc TF E1) ('PBYTE1R');
PARAMETER(CTL.Commodity_Market_Code);
PARAMETER(CTL.Commodity_Price_Group);
PARAMETER(CTL.Market_Price_Date);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?E9849 JJH 03/30/17 - Commodity Market Price for Triumph Foods.
// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?USER: Process subfile record (Pre-confirm)

//?Process change request
CASE;

// IF RCD.*SFLSEL is *Change
IF RCD.*SFLSEL = '2';

// LCL.Access Denied (Y/N) = CND.no
LCL.Access_Denied_Y_N = 'N';

CASE;

// IF LCL.Access Denied (Y/N) is no
IF LCL.Access_Denied_Y_N = 'N';

// Call program EDT Commod Mrkt Prc TF E1.
CALL PROGRAM(EDT Commod Mrkt Prc TF E1) ('PBYTE1R');
PARAMETER(RCD.Commodity_Market_Code);
PARAMETER(RCD.Commodity_Price_Group);
PARAMETER(RCD.Market_Price_Date);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?E9849 JJH 03/30/17 - Commodity Market Price for Triumph Foods.
ENDIF;

ENDIF;

//?Process delete request
CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

// LCL.Access Denied (Y/N) = CND.no
LCL.Access_Denied_Y_N = 'N';

CASE;

// IF LCL.Access Denied (Y/N) is no
IF LCL.Access_Denied_Y_N = 'N';

// RCD.Record Status = CND.Deleted
RCD.Record_Status = 'D';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Access Denied for &1 Market.'
ERROR(USR4296);
MSGPARM(RCD.Commodity_Market_Code);

ENDIF;

ENDIF;

CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

// Call program UPD Price Audit Update XF.
CALL PROGRAM(UPD Price Audit Update XF) ('PDMOXFR');
PARAMETER('OMF0CPP');
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(RCD.Commodity_Market_Code);
PARAMETER(RCD.Commodity_Price_Group);
PARAMETER(RCD.Market_Price_Date);
PARAMETER('N');
PARAMETER('Y');
PARAMETER('N');
PARAMETER('N');

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?USER: Final processing (Pre-confirm)

//?Print List
CASE;

// IF CTL.*CMD key is *Print 21
IF CTL.*CMD_key = '21';

// PAR.Company Number Pass   USR = PAR.Company Number
PAR.Company_Number_Pass_USR = PAR.Company_Number;

// PAR.USR Input 1 = CND.Yes
PAR.USR_Input_1 = 'Y';

// PAR.USR Input 2 = CND.No
PAR.USR_Input_2 = 'N';

// PAR.Item Str Class PASS   USR = CON.*ZERO
PAR.Item_Str_Class_PASS_USR = *ZERO;

// PAR.Item Str Group PASS   USR = CON.*ZERO
PAR.Item_Str_Group_PASS_USR = *ZERO;

// PAR.Item Str Type PASS    USR = CON.*ZERO
PAR.Item_Str_Type_PASS_USR = *ZERO;

// Call program PMT&Pass Mrkt Prc List UP.
CALL PROGRAM(PMT&Pass Mrkt Prc List UP) ('PDMWUPR');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('C/S');
PARAMETER('PDF4CLP');
PARAMETER(CTL.Commodity_Market_Code);
PARAMETER(CTL.Commodity_Price_Group);
PARAMETER('Commodity Market Prices');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(CTL.Market_Price_Date);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(PAR.Item_Str_Class_PASS_USR);
PARAMETER(PAR.Item_Str_Group_PASS_USR);
PARAMETER(PAR.Item_Str_Type_PASS_USR);
PARAMETER(PAR.USR_Input_1);
PARAMETER(WRK.USR_Input_2);
PARAMETER(WRK.USR_Include_all_Products);

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print List has been submitted'
MESSAGE(USR1742 *INFO);

ENDIF;

ENDIF;

//?Print List with Items
CASE;

// IF CTL.*CMD key is CF22
IF CTL.*CMD_key = '22';

// PAR.Company Number Pass   USR = PAR.Company Number
PAR.Company_Number_Pass_USR = PAR.Company_Number;

// PAR.USR Input 1 = CND.No
PAR.USR_Input_1 = 'N';

// PAR.USR Input 2 = CND.Yes
PAR.USR_Input_2 = 'Y';

// PAR.Item Str Class PASS   USR = CON.*ZERO
PAR.Item_Str_Class_PASS_USR = *ZERO;

// PAR.Item Str Group PASS   USR = CON.*ZERO
PAR.Item_Str_Group_PASS_USR = *ZERO;

// PAR.Item Str Type PASS    USR = CON.*ZERO
PAR.Item_Str_Type_PASS_USR = *ZERO;

// Call program PMT&Pass Mrkt Prc List UP.
CALL PROGRAM(PMT&Pass Mrkt Prc List UP) ('PDMWUPR');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('C/S');
PARAMETER('PDF4CLP');
PARAMETER(CTL.Commodity_Market_Code);
PARAMETER(CTL.Commodity_Price_Group);
PARAMETER('Commod/Item Mrkt Prices');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(CTL.Market_Price_Date);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(PAR.Item_Str_Class_PASS_USR);
PARAMETER(PAR.Item_Str_Group_PASS_USR);
PARAMETER(PAR.Item_Str_Type_PASS_USR);
PARAMETER(PAR.USR_Input_1);
PARAMETER(PAR.USR_Input_2);
PARAMETER(WRK.USR_Include_all_Products);

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print List has been submitted'
MESSAGE(USR1742 *INFO);

ENDIF;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?USER: Process subfile record (Post-confirm)

//?Process Purge/Delete
CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

EXECUTE FUNCTION(CHG OM Commod Mrkt/Prc CH) TYPE(CHGOBJ) FILE(OMF0CPP)          AC1185926;
PARAMETER(RCD.Commodity_Market_Code);
PARAMETER(RCD.Commodity_Price_Group);
PARAMETER(RCD.Market_Price_Date);
PARAMETER(RCD.Commodity_Market_Price);
PARAMETER(RCD.Projected_Market_Price);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Job_Time);
PARAMETER(RCD.User_Id);
PARAMETER(RCD.Job_Name);
PARAMETER(RCD.Job_Date);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// Call program UPD Price Audit Update XF.
CALL PROGRAM(UPD Price Audit Update XF) ('PDMOXFR');
PARAMETER('OMF0CPP');
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(RCD.Commodity_Market_Code);
PARAMETER(RCD.Commodity_Price_Group);
PARAMETER(RCD.Market_Price_Date);
PARAMETER('N');
PARAMETER('Y');
PARAMETER('N');
PARAMETER('N');

EXECUTE FUNCTION(DLT OM Commod Mrkt/Prc DL) TYPE(DLTOBJ) FILE(OMF0CPP)          AC1185927;
PARAMETER(RCD.Commodity_Market_Code);
PARAMETER(RCD.Commodity_Price_Group);
PARAMETER(RCD.Market_Price_Date);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

