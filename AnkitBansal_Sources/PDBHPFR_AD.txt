// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDBHPFR
// ?Date: 14.08.2025 Time: 12:03:35
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?  "POCWCPP - PS Prod Item Inventory".
//?W121823 02/17/23 RMC quit using item loc loc for Lot Tracking
//?   (freezer whses). it isnt accurate
//?DDsDDL 01/16/12 RMC in prtobj, added prod date>0 check
//?E2299  10/19/12 RMC in prtobj, exclude stuff made >=today if prod whse onl
//?E2046  4/11/12 RMC Exclude Q3 Held FZ prod from avail inventory
//?FP1054 7/20/09 Allow run for 1 warehouse for a recovery process
//?  if inventory doesnt get captured in the a.m. schedule build
EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('P/S');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


//?USER: Record selection processing

CASE;

// IF PAR.Warehouse Code is Not Blanks
IF PAR.Warehouse_Code <> *BLANK;

// AND DB1.Warehouse Code NE PAR.Warehouse Code
AND DB1.Warehouse_Code <> PAR.Warehouse_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
// Print Accounting Company Number header format
PRINT Accounting Company Number header format;

ENDIF;

// SUPPRESSED PRINT Item Code header format

//?USER: Process before print of detail format

EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(WRK.Description_Line_One);
PARAMETER(WRK.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.Item_Structure_Class_Code);
PARAMETER(WRK.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(WRK.Item_Type_Code);
PARAMETER(WRK.Default_Warehouse);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(WRK.Base_Conv_Loss_Item);
PARAMETER(WRK.Variety_Rendered_Cut);
PARAMETER(WRK.Credit_Item_Status);
PARAMETER(WRK.Std_Weight_Head_Var_Ren);
PARAMETER(WRK.Pieces_Per_Head);
PARAMETER(WRK.Department_Code);
PARAMETER(WRK.Group_for_Packaging);
PARAMETER(WRK.Seconds_Item);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(WRK.Export_Domestic);
PARAMETER(WRK.Print_On_Schedule);
PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
PARAMETER(WRK.Fresh_Sched_As_Ordered);
PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
PARAMETER(WRK.Primal_Group_Code);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(WRK.Warehouse_Type);
PARAMETER(WRK.Trans_Contol_AS400_Plant);
PARAMETER(WRK.Warehouse_Location);
PARAMETER(PAR.Warehouse_Std_Chill_Time);
PARAMETER(PAR.Warehouse_Chill_Time);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Description_Line_One);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Type_Code);
 PARAMETER(PAR.Default_Warehouse);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 PARAMETER(PAR.Variety_Rendered_Cut);
 PARAMETER(PAR.Credit_Item_Status);
 PARAMETER(PAR.Std_Weight_Head_Var_Ren);
 PARAMETER(PAR.Pieces_Per_Head);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Group_for_Packaging);
 PARAMETER(PAR.Seconds_Item);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Export_Domestic);
 PARAMETER(PAR.Print_On_Schedule);
 PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
 PARAMETER(PAR.Fresh_Sched_As_Ordered);
 PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
 PARAMETER(PAR.Primal_Group_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.Trans_Contol_AS400_Plant);
 PARAMETER(PAR.Warehouse_Location);
 PARAMETER(PAR.Warehouse_Std_Chill_Time);
 PARAMETER(PAR.Warehouse_Chill_Time);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


CASE;

// IF PAR.Warehouse Std Chill Time is yes
IF PAR.Warehouse_Std_Chill_Time = 'Y';

// PAR.Chilling Time USR = PAR.Warehouse Chill Time
PAR.Chilling_Time_USR = PAR.Warehouse_Chill_Time;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Chilling Time USR = PAR.Fresh Chilling Time
PAR.Chilling_Time_USR = PAR.Fresh_Chilling_Time;

ENDIF;

//?Weight On-Hand/Pieces
CASE;

// IF CUR.On Hand U/M1 Summary is Greater than zero
IF CUR.On_Hand_UOM1_Summary > *ZERO;

//?Calculate On-Hand Quantity
CASE;

// IF PAR.Chilling Time USR is GT Zero
IF PAR.Chilling_Time_USR > *ZERO;

// Chilling Time
WRK.Chilling_Time_USR = ( PAR.Chilling_Time_USR - 1 ) * -1;

EXECUTE FUNCTION(CLC Inc/Dec Date       IF) TYPE(EXCINTFUN)                     AC1385950;
PARAMETER(PAR.Date_From_USR);
PARAMETER(CUR.Company_Number);
PARAMETER(PAR.Production_Date_RGF);
PARAMETER(WRK.Chilling_Time_USR);
{
 //?Execute internal function

 CASE;

 // IF PAR.*Duration (factor) is LT Zero
 IF PAR.*Duration_factor < *ZERO;

 // WRK.*Duration (factor) = PAR.*Duration (factor) * CON.-1 *
 WRK.*Duration_factor = PAR.*Duration_factor * -1;

 EXECUTE FUNCTION(CLC Date (descending)  RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389006;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.*Date2_beginning);
 PARAMETER(PAR.*Date1_ending);
 PARAMETER(PAR.*Date2_beginning);
 PARAMETER(WRK.*Duration_factor);
 {
  //?USER: Initialize routine

  // WRK.Count USR = CON.*ZERO
  WRK.Count_USR = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
  IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Count USR = WRK.Count USR + CON.1
  WRK.Count_USR = WRK.Count_USR + 1;

  ENDIF;

  CASE;

  // IF WRK.Count USR EQ PAR.*Duration (factor)
  IF WRK.Count_USR = PAR.*Duration_factor;

  // PAR.*Date1 (ending) = DB1.Post to G/L Date
  PAR.*Date1_ending = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

 }

 // IF PAR.*Duration (factor) is GT Zero
 IF PAR.*Duration_factor > *ZERO;

 EXECUTE FUNCTION(CLC Date (ascending)   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1389009;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.*Date2_beginning);
 PARAMETER(PAR.*Date1_ending);
 PARAMETER(PAR.*Date2_beginning);
 PARAMETER(PAR.*Duration_factor);
 {
  //?USER: Initialize routine

  // WRK.Count USR = CON.*ZERO
  WRK.Count_USR = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF PAR.Post to G/L Date EQ DB1.Post to G/L Date
  IF PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Count USR = WRK.Count USR + CON.1
  WRK.Count_USR = WRK.Count_USR + 1;

  ENDIF;

  CASE;

  // IF WRK.Count USR EQ PAR.*Duration (factor)
  IF WRK.Count_USR = PAR.*Duration_factor;

  // PAR.*Date1 (ending) = DB1.Post to G/L Date
  PAR.*Date1_ending = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

 }

 // IF PAR.*Duration (factor) is EQ Zero
 IF PAR.*Duration_factor = *ZERO;

 // PAR.*Date1 (ending) = PAR.*Date2 (beginning)
 PAR.*Date1_ending = PAR.*Date2_beginning;

 ENDIF;

}


//?CUR PS Quantity On-Hand = Quantity in Chill
EXECUTE FUNCTION(UPS Clc Unavail Inv   RT) TYPE(RTVOBJ) FILE(CAB1REP)           AC1424232;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(PAR.Date_From_USR);
PARAMETER(CUR.Quantity_In_Chill);
{
 //?USER: Initialize routine

 // PAR.Quantity In Chill = CON.*ZERO
 PAR.Quantity_In_Chill = *ZERO;

 //?USER: Process Data record

 // PAR.Quantity In Chill = PAR.Quantity In Chill + DB1.Quantity on Hand - U/M1
 PAR.Quantity_In_Chill = PAR.Quantity_In_Chill + DB1.Quantity_on_Hand_UOM1;

}


// WRK.On Hand U/M1 Summary = DB1.On Hand U/M1 Summary - CUR.PS Quantity On-Hand
WRK.On_Hand_UOM1_Summary = DB1.On_Hand_UOM1_Summary - CUR.Quantity_In_Chill;

//?Calculate On-Hand Quantity
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(UPS Clc Unavail Inv   RT) TYPE(RTVOBJ) FILE(CAB1REP)           AC1424232;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(PAR.Production_Date_RGF);
PARAMETER(CUR.Quantity_In_Chill);
{
 //?USER: Initialize routine

 // PAR.Quantity In Chill = CON.*ZERO
 PAR.Quantity_In_Chill = *ZERO;

 //?USER: Process Data record

 // PAR.Quantity In Chill = PAR.Quantity In Chill + DB1.Quantity on Hand - U/M1
 PAR.Quantity_In_Chill = PAR.Quantity_In_Chill + DB1.Quantity_on_Hand_UOM1;

}


// WRK.On Hand U/M1 Summary = DB1.On Hand U/M1 Summary - CUR.Quantity In Chill
WRK.On_Hand_UOM1_Summary = DB1.On_Hand_UOM1_Summary - CUR.Quantity_In_Chill;

ENDIF;

CASE;

// IF WRK.On Hand U/M1 Summary is Greater than zero
IF WRK.On_Hand_UOM1_Summary > *ZERO;

//?Piece On-Hand
CASE;

// IF PAR.Piece Count Item is yes
IF PAR.Piece_Count_Item = 'Y';

// AND PAR.Pieces Per Bag is GT Zero
AND PAR.Pieces_Per_Bag > *ZERO;

// AND PAR.Bags Per Unit is GT Zero
AND PAR.Bags_Per_Unit > *ZERO;

// Pieces Inv On-Hand
WRK.PS_Pieces_Inv_On_Hand = ( WRK.On_Hand_UOM1_Summary * PAR.Pieces_Per_Bag 'H' )                  +
* PAR.Bags_Per_Unit 'H';

//?Piece On-Hand
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.PS Pieces Inv On-Hand = CON.*ZERO
WRK.PS_Pieces_Inv_On_Hand = *ZERO;

ENDIF;

// CUR.On Hand Weight Summary = WRK.On Hand U/M1 Summary * PAR.Unit Weight *Rounded
CUR.On_Hand_Weight_Summary = WRK.On_Hand_UOM1_Summary * PAR.Unit_Weight 'H';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.PS Pieces Inv On-Hand = CON.*ZERO
WRK.PS_Pieces_Inv_On_Hand = *ZERO;

// CUR.On Hand Weight Summary = CON.*ZERO
CUR.On_Hand_Weight_Summary = *ZERO;

ENDIF;

//?Weight On-Hand/Pieces
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.PS Pieces Inv On-Hand = CON.*ZERO
WRK.PS_Pieces_Inv_On_Hand = *ZERO;

// CUR.On Hand Weight Summary = CON.*ZERO
CUR.On_Hand_Weight_Summary = *ZERO;

ENDIF;

EXECUTE FUNCTION(UPS Rtv Sched Shpmnts RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425203;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(PAR.Production_Date_RGF);
PARAMETER(CUR.PS_Weight_Sched_Shipment);
{
 //?USER: Initialize routine

 // PAR.PS Weight Sched Shipment = CON.*ZERO
 PAR.PS_Weight_Sched_Shipment = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Header_Status);
 PARAMETER(WRK.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.Header Status is Not Comp/Canc/Conf
 IF WRK.Header_Status = 'L'/'A'/'E'/'H';

 // AND WRK.Billing Activity Type is Invoice or Transfer
 AND WRK.Billing_Activity_Type = '1'/'4';

 // PAR.PS Weight Sched Shipment = PAR.PS Weight Sched Shipment + DB1.Weight Scheduled
 PAR.PS_Weight_Sched_Shipment = PAR.PS_Weight_Sched_Shipment + DB1.Weight_Scheduled;

 ENDIF;

}


//?USER: On print of detail format

//?Do not print format if both On-Hand and Sched Ship = Zero.
CASE;

// IF CUR.On Hand Weight Summary is Equal to zero
IF CUR.On_Hand_Weight_Summary = *ZERO;

// AND CUR.PS Weight Sched Shipment is Not Entered
AND CUR.PS_Weight_Sched_Shipment = *ZERO;

// AND CUR.Quantity In Chill is Equal to zero
AND CUR.Quantity_In_Chill = *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

EXECUTE FUNCTION(Rtv Whs Type/LtTrk/Prd RT) TYPE(RTVOBJ) FILE(CAADREP)          AC2053650;
PARAMETER(CUR.Warehouse_Code);
PARAMETER(LCL.Production_Warehouse_Code);
PARAMETER(LCL.Lot_Tracking_Flag);
PARAMETER(LCL.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : BPS Capture Inv OnHnd PO
CASE;

// IF PGM.*Print format is Do not print format
IF PGM.*Print_format = 'N';

QUIT;

ENDIF;

EXECUTE FUNCTION(BPS Capture Inv OnHnd PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(LCL.Lot_Tracking_Flag);
PARAMETER(LCL.Weight_1_SUM);
PARAMETER(LCL.Quantity_Available_SUM);
PARAMETER(PAR.Unit_Weight);
PARAMETER(LCL.Production_Warehouse_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Process after print of detail format

CASE;

// IF PGM.*Print format is Print format
IF PGM.*Print_format = 'Y';

//?Update Inventory On-Hand
//?Pieces
CASE;

// IF LCL.Quantity Available    SUM is GT Zero
IF LCL.Quantity_Available_SUM > *ZERO;

//?Piece On-Hand
CASE;

// IF PAR.Piece Count Item is yes
IF PAR.Piece_Count_Item = 'Y';

// AND PAR.Pieces Per Bag is GT Zero
AND PAR.Pieces_Per_Bag > *ZERO;

// AND PAR.Bags Per Unit is GT Zero
AND PAR.Bags_Per_Unit > *ZERO;

// Pieces Inv On-Hand
WRK.PS_Pieces_Inv_On_Hand = ( LCL.Quantity_Available_SUM * PAR.Pieces_Per_Bag 'H' )                +
* PAR.Bags_Per_Unit 'H';

//?Piece On-Hand
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.PS Pieces Inv On-Hand = CON.*ZERO
WRK.PS_Pieces_Inv_On_Hand = *ZERO;

ENDIF;

//?Pieces
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.PS Pieces Inv On-Hand = CON.*ZERO
WRK.PS_Pieces_Inv_On_Hand = *ZERO;

ENDIF;

EXECUTE FUNCTION(BPS Upd Inv On Hand   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1479205;
PARAMETER(CUR.Company_Number);
PARAMETER('S');
PARAMETER(PAR.Production_Date_RGF);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(LCL.Weight_1_SUM);
PARAMETER(WRK.PS_Pieces_Inv_On_Hand);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Chilling_Time_USR);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Production_Warehouse);
 PARAMETER(NLL.Accounting_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Type);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Available_Ship_Date);
 PARAMETER(PAR.PS_Weight_Planned_Prod);
 PARAMETER(PAR.PS_Pieces_Planned_Prod);
 PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
 PARAMETER(PAR.PS_Avg_Piece_Wgt);
 PARAMETER(PAR.PS_Weight_Inv_On_Hand);
 PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
 PARAMETER(PAR.PS_Weight_Standard);
 PARAMETER(PAR.PS_Pieces_Standard);
 PARAMETER(PAR.PS_Weight_Converted);
 PARAMETER(PAR.PS_Pieces_Converted);
 PARAMETER(PAR.PS_Weight_Shipping_Adj);
 PARAMETER(PAR.PS_Pieces_Shipping_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Adj);
 PARAMETER(PAR.PS_Pieces_Prod_Adj);
 PARAMETER(PAR.PS_Weight_Inv_Adj);
 PARAMETER(PAR.PS_Pieces_Inv_Adj);
 PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Allocated);
 PARAMETER(PAR.PS_Pieces_Prod_Allocated);
 PARAMETER(PAR.PS_Weight_Inv_Allocated);
 PARAMETER(PAR.PS_Pieces_Inv_Allocated);
 PARAMETER(PAR.PS_Unit_Weight);
 PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(PAR.PS_Pieces_Unused_2);
 PARAMETER(PAR.PS_Weight_Unused_3);
 PARAMETER(PAR.PS_Pieces_Unused_3);
 PARAMETER(PAR.PS_Weight_Unused_4);
 PARAMETER(PAR.PS_Pieces_Unused_4);
 PARAMETER(PAR.PS_Weight_Unused_5);
 PARAMETER(PAR.PS_Pieces_Unused_5);
 PARAMETER(PAR.PS_Weight_Unused_6);
 PARAMETER(PAR.PS_Pieces_Unused_6);
 PARAMETER(PAR.PS_Item_Id);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.PS_Lock_Status);
 PARAMETER(PAR.PS_Export_Domestic);
 PARAMETER(PAR.PS_Print_On_Schedule);
 PARAMETER(PAR.PS_Piece_Count_Item);
 PARAMETER(PAR.PS_Unused_Sts_1);
 PARAMETER(PAR.PS_Unused_Sts_2);
 PARAMETER(PAR.PS_Unused_Sts_3);
 PARAMETER(PAR.PS_Unused_Sts_4);
 PARAMETER(PAR.PS_Item_Sched_Need_Sts);
 PARAMETER(PAR.PS_Production_Warehouse);
 PARAMETER(PAR.PS_Weight_Ordered);
 PARAMETER(PAR.PS_Pieces_Ordered);
 PARAMETER(PAR.PS_Weight_FC_Adjusted);
 PARAMETER(PAR.PS_Pieces_FC_Adjusted);
 PARAMETER(PAR.PS_Weight_FX_Adjusted);
 PARAMETER(PAR.PS_Pieces_FX_Adjusted);
 PARAMETER(PAR.PS_Weight_Sched_Shipment);
 PARAMETER(PAR.PS_Pieces_Sched_Shipment);
 PARAMETER(PAR.PS_Weight_Available_Prod);
 PARAMETER(PAR.PS_Pieces_Available_Prod);
 PARAMETER(PAR.PS_Weight_Production_Need);
 PARAMETER(PAR.PS_Pieces_Production_Need);
 PARAMETER(PAR.PS_Weight_Fab_Needs);
 PARAMETER(PAR.PS_Pieces_Fab_Needs);
 PARAMETER(PAR.PS_Weight_Sched_Prod);
 PARAMETER(PAR.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.PS_Weight_Sched_Need);
 PARAMETER(PAR.PS_Pieces_Sched_Need);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Primal_Group_Code);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Job_Time);
 PARAMETER(PAR.User_Id);
 PARAMETER(PAR.Job_Name);
 PARAMETER(PAR.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(WRK.Description_Line_One);
  PARAMETER(WRK.UOM_Primary);
  PARAMETER(WRK.Unit_Weight);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(WRK.Item_Type_Code);
  PARAMETER(WRK.Default_Warehouse);
  PARAMETER(WRK.Fresh_Chilling_Time);
  PARAMETER(WRK.Base_Conv_Loss_Item);
  PARAMETER(WRK.Variety_Rendered_Cut);
  PARAMETER(WRK.Credit_Item_Status);
  PARAMETER(WRK.Std_Weight_Head_Var_Ren);
  PARAMETER(WRK.Pieces_Per_Head);
  PARAMETER(DB1.Department_Code);
  PARAMETER(WRK.Group_for_Packaging);
  PARAMETER(WRK.Seconds_Item);
  PARAMETER(DB1.PS_Piece_Count_Item);
  PARAMETER(WRK.Pieces_Per_Bag);
  PARAMETER(WRK.Bags_Per_Unit);
  PARAMETER(DB1.PS_Export_Domestic);
  PARAMETER(DB1.PS_Print_On_Schedule);
  PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
  PARAMETER(WRK.Fresh_Sched_As_Ordered);
  PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
  PARAMETER(DB1.Primal_Group_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Warehouse_Type);
  PARAMETER(WRK.Trans_Contol_AS400_Plant);
  PARAMETER(WRK.Warehouse_Location);
  PARAMETER(WRK.Warehouse_Std_Chill_Time);
  PARAMETER(WRK.Warehouse_Chill_Time);
  PARAMETER(DB1.PS_Item_Id);
  {
   //?Execute internal function

   EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Description_Line_One);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Default_Warehouse);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Std_Weight_Head_Var_Ren);
   PARAMETER(PAR.Pieces_Per_Head);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Group_for_Packaging);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Export_Domestic);
   PARAMETER(PAR.Print_On_Schedule);
   PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
   PARAMETER(PAR.Fresh_Sched_As_Ordered);
   PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
   PARAMETER(PAR.Primal_Group_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.Trans_Contol_AS400_Plant);
   PARAMETER(PAR.Warehouse_Location);
   PARAMETER(PAR.Warehouse_Std_Chill_Time);
   PARAMETER(PAR.Warehouse_Chill_Time);
   {
    //?Execute internal function

    EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Description_Line_One);
    PARAMETER(PAR.UOM_Primary);
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Type_Code);
    PARAMETER(PAR.Default_Warehouse);
    PARAMETER(PAR.Fresh_Chilling_Time);
    PARAMETER(PAR.Base_Conv_Loss_Item);
    PARAMETER(PAR.Variety_Rendered_Cut);
    PARAMETER(PAR.Credit_Item_Status);
    PARAMETER(PAR.Std_Weight_Head_Var_Ren);
    PARAMETER(PAR.Pieces_Per_Head);
    PARAMETER(PAR.Department_Code);
    PARAMETER(PAR.Group_for_Packaging);
    PARAMETER(PAR.Seconds_Item);
    PARAMETER(PAR.Piece_Count_Item);
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(PAR.Export_Domestic);
    PARAMETER(PAR.Print_On_Schedule);
    PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
    PARAMETER(PAR.Fresh_Sched_As_Ordered);
    PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
    PARAMETER(PAR.Primal_Group_Code);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Warehouse_Type);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(PAR.Warehouse_Std_Chill_Time);
    PARAMETER(PAR.Warehouse_Chill_Time);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

   }

   EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Base_Conv_Loss_Item);
   PARAMETER(PAR.Variety_Rendered_Cut);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Seconds_Item);
   PARAMETER(PAR.PS_Item_Id);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Item Type Code is Raw Materials
    IF PAR.Item_Type_Code = 'RM';

    // PAR.PS Item Identification = CND.RM Base
    PAR.PS_Item_Id = 'RMB';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF PAR.Seconds Item is Yes
    IF PAR.Seconds_Item = 'Y';

    // PAR.PS Item Identification = CND.FG Seconds
    PAR.PS_Item_Id = 'FSC';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF PAR.Variety/Rendered/Cut is Variety
    IF PAR.Variety_Rendered_Cut = 'V';

    // PAR.PS Item Identification = CND.FG Variety
    PAR.PS_Item_Id = 'FVR';

    // IF PAR.Variety/Rendered/Cut is Rendered
    IF PAR.Variety_Rendered_Cut = 'R';

    // PAR.PS Item Identification = CND.FG Rendered
    PAR.PS_Item_Id = 'FRD';

    // IF PAR.Variety/Rendered/Cut is Cut
    IF PAR.Variety_Rendered_Cut = 'C';

    //?Base/Converted/Fabricated
    CASE;

    // IF PAR.Credit Item Status is yes
    IF PAR.Credit_Item_Status = 'Y';

    //?Setup Base/Converted/Fabricated Credit
    CASE;

    // IF PAR.Converted/Base Item is Base
    IF PAR.Base_Conv_Loss_Item = 'B';

    // PAR.PS Item Identification = CND.FG Base Credit
    PAR.PS_Item_Id = 'FBC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Converted
    IF PAR.Base_Conv_Loss_Item = 'C';

    // PAR.PS Item Identification = CND.FG Converted Credit
    PAR.PS_Item_Id = 'FCC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Fabricated
    IF PAR.Base_Conv_Loss_Item = 'F';

    // PAR.PS Item Identification = CND.FG Fabricated Credit
    PAR.PS_Item_Id = 'FFC';

    //?Setup Base/Converted/Fabricated Credit
    // IF PAR.Converted/Base Item is Loss
    IF PAR.Base_Conv_Loss_Item = 'L';

    // PAR.PS Item Identification = CND.FG Loss Credit
    PAR.PS_Item_Id = 'FLC';

    ENDIF;

    //?Base/Converted/Fabricated
    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Setup Base/Converted/Fabricated
    CASE;

    // IF PAR.Converted/Base Item is Base
    IF PAR.Base_Conv_Loss_Item = 'B';

    // PAR.PS Item Identification = CND.FG Base
    PAR.PS_Item_Id = 'FGB';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Converted
    IF PAR.Base_Conv_Loss_Item = 'C';

    // PAR.PS Item Identification = CND.FG Converted
    PAR.PS_Item_Id = 'FCV';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Fabricated
    IF PAR.Base_Conv_Loss_Item = 'F';

    // PAR.PS Item Identification = CND.FG Fabricated
    PAR.PS_Item_Id = 'FFB';

    //?Setup Base/Converted/Fabricated
    // IF PAR.Converted/Base Item is Loss
    IF PAR.Base_Conv_Loss_Item = 'L';

    // PAR.PS Item Identification = CND.FG Loss
    PAR.PS_Item_Id = 'FLS';

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

    ENDIF;

   }

  }

  //?FP1054 Output PS Prod Warehouse
  EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.PS_Production_Warehouse);
  PARAMETER(LCL.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Available Ship Date
  CASE;

  // IF WRK.Warehouse Std Chill Time is yes
  IF WRK.Warehouse_Std_Chill_Time = 'Y';

  EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(WRK.Warehouse_Chill_Time);
  PARAMETER(DB1.PS_Available_Ship_Date);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.Chilling Time
   IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

   // PAR.PS Available Ship Date = DB1.Post to G/L Date
   PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

   //?Skip Saturday
   CASE;

   // IF DB1.Day of Week is Saturday
   IF DB1.Day_of_Week = '7';

   //?Skip Saturday
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  //?Available Ship Date
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Production_Date);
  PARAMETER(WRK.Fresh_Chilling_Time);
  PARAMETER(DB1.PS_Available_Ship_Date);
  {
   //?USER: Initialize routine

   // WRK.Count USR = CON.*ZERO
   WRK.Count_USR = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF WRK.Count USR EQ PAR.Chilling Time
   IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

   // PAR.PS Available Ship Date = DB1.Post to G/L Date
   PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

   QUIT;

   ENDIF;

   //?Skip Saturday
   CASE;

   // IF DB1.Day of Week is Saturday
   IF DB1.Day_of_Week = '7';

   //?Skip Saturday
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   ENDIF;

  }

  ENDIF;

  //?Average Piece Weight
  CASE;

  // IF PAR.PS Pieces Planned Prod is GT Zero
  IF PAR.PS_Pieces_Planned_Prod > *ZERO;

  // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
  DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

  ENDIF;

  EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // DB1.PS Lock Status = CND.NOT LOCKED
  DB1.PS_Lock_Status = 'N';

 }

 //?USER: Process Data record

 EXECUTE FUNCTION(BPS Chg Inv On Hand   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1479206;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.PS_Weight_Inv_On_Hand);
 PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

 }

}


ENDIF;

//?USER: Print required level totals

// SUPPRESSED PRINT Item Code totals format

// SUPPRESSED PRINT Accounting Company Number totals format

