// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKYCXFR
// ?Date: 14.08.2025 Time: 02:51:28
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modifications and Comments
DO;

//?E3814 JJH 10/07/15 - Recompile because PS Premises ID added to
//?  Producer Site. - No logic changes.
//?H16853 ISE 11/02/2020 CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
ENDDO;

EXECUTE FUNCTION(HPE056 Payment Type) TYPE(EXCINTFUN)                           AB1189849;
{
 //?Execute internal function

 //?1/10/96  HPE056   Allow payment type to be update based on
 //?                  what the payment status is at the time this
 //?                  tattoo is being updated
}


EXECUTE FUNCTION(HPE063 Frt Exp/Accruals) TYPE(EXCINTFUN)                       AB1192166;
{
 //?Execute internal function

 //?2/26/96  HPE063   Allow the expense for freight to be paid
 //?                  by either Seaboard(us) or the producer
 //?                  Allow the system to process accruals thru
 //?                  the General Ledger.
}


//?Remove the updating of the payment type by the fix program
//?The payment type should be populated by now
//?Rtv the Competitors Carcass Merit codes only 3 allowed
EXECUTE FUNCTION(Rtv Cmp Competitors   RT) TYPE(RTVOBJ) FILE(PKARREP)           AB1166528;
PARAMETER(WRK.Competitors_Code_1_Usr);
PARAMETER(WRK.Competitors_Code_2_Usr);
PARAMETER(WRK.Competitors_Code_3_Usr);
{
 //?USER: Initialize routine

 // *MO.VE             1183529*Bu = ilt. in functions
 WRK.Count_USR = *ZERO;

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.Competitors_Code_1_Usr = *BLANK;

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.Competitors_Code_2_Usr = *BLANK;

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.Competitors_Code_3_Usr = *BLANK;

 //?USER: Process Data record

 // WRK.Count USR = WRK.Count USR + CON.001
 WRK.Count_USR = WRK.Count_USR + 001;

 CASE;

 // IF WRK.Count USR is One
 IF WRK.Count_USR = 1;

 // PAR.Competitors Code 1 Usr = DB1.CMP Program Code
 PAR.Competitors_Code_1_Usr = DB1.CMP_Program_Code;

 // IF WRK.Count USR is Two
 IF WRK.Count_USR = 2;

 // PAR.Competitors Code 2 Usr = DB1.CMP Program Code
 PAR.Competitors_Code_2_Usr = DB1.CMP_Program_Code;

 // IF WRK.Count USR is Three
 IF WRK.Count_USR = 3;

 // PAR.Competitors Code 3 Usr = DB1.CMP Program Code
 PAR.Competitors_Code_3_Usr = DB1.CMP_Program_Code;

 QUIT;

 ENDIF;

}


//?Read each Tattoo that are unpaid, and Recalc Net
//?and Process Carcass Merit Program, Freight Allocation, D/A's
//?and Calculate Net.
//?HPE053p:  Read TH FOR THE TATTOO
//? and call the routine to calc the CrMrt/frt/da/net amounts
EXECUTE FUNCTION(Rtv Clc CrMr/Ft/Da 1T RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1187000;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.Pmt_Current_Payment_Date);
PARAMETER(WRK.Competitors_Code_1_Usr);
PARAMETER(WRK.Competitors_Code_2_Usr);
PARAMETER(WRK.Competitors_Code_3_Usr);
{
 //?USER: Initialize routine

 // WRK.Last BOH BuyOrder Nbr USR = CON.*ZERO
 WRK.Last_BOH_BuyOrder_Nbr_USR = *ZERO;

 // WRK.Last BOL Load number  USR = CON.*ZERO
 WRK.Last_BOL_Load_number_USR = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.TH Payment Sts is Paid Anything
 IF DB1.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Break in BOL, delete unpaid Tattoo D/A's for the load
 CASE;

 // IF DB1.BOH Buy Order Number NE WRK.Last BOH BuyOrder Nbr USR
 IF DB1.BOH_Buy_Order_Number <> WRK.Last_BOH_BuyOrder_Nbr_USR;

 // OR DB1.BOL Load Number NE WRK.Last BOL Load number  USR
 OR DB1.BOL_Load_Number <> WRK.Last_BOL_Load_number_USR;

 // Call program Zzz Tattoo D/A 1 TTT  XF.
 CALL PROGRAM(Zzz Tattoo D/A 1 TTT  XF) ('PKFZXFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);

 // WRK.Last BOH BuyOrder Nbr USR = DB1.BOH Buy Order Number
 WRK.Last_BOH_BuyOrder_Nbr_USR = DB1.BOH_Buy_Order_Number;

 // WRK.Last BOL Load number  USR = DB1.BOL Load Number
 WRK.Last_BOL_Load_number_USR = DB1.BOL_Load_Number;

 ENDIF;

 ENDIF;

 // LCL.TH VC Gross Value /HD = DB1.TH VC Gross Value /HD
 LCL.TH_VC_Gross_Value_HD = DB1.TH_VC_Gross_Value_HD;

 EXECUTE FUNCTION(Clc CrM/Frt/Da/Net 1T IF) TYPE(EXCINTFUN)                      AB1186972;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TH_Purchase_Date);
 PARAMETER(DB1.TH_Group_Reference);
 PARAMETER(DB1.TH_Live_Purchase_UOM);
 PARAMETER(DB1.TH_Live_Purchase_Price);
 PARAMETER(DB1.TH_Live_Gross_Amt);
 PARAMETER(DB1.TH_LIve_Net_Amt);
 PARAMETER(DB1.TH_Resale_UOM);
 PARAMETER(DB1.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(DB1.TH_Pricing_Date);
 PARAMETER(DB1.TH_Resale_Spread_Sts);
 PARAMETER(DB1.TH_Dead_On_Arrival);
 PARAMETER(DB1.TH_Head_Received);
 PARAMETER(DB1.TH_Yard_Deads);
 PARAMETER(DB1.TH_Held_Over);
 PARAMETER(DB1.TH_Head_Condemned);
 PARAMETER(DB1.TH_Head_Killed);
 PARAMETER(DB1.TH_Head_Adds);
 PARAMETER(DB1.TH_Head_Accepted);
 PARAMETER(DB1.TH_Live_Wgt);
 PARAMETER(DB1.TH_Adj_Live_Wgt);
 PARAMETER(DB1.TH_Hot_Wgt);
 PARAMETER(DB1.TH_Tot_Loin_Eye_Depth);
 PARAMETER(DB1.TH_Tot_Backfat_Inches);
 PARAMETER(DB1.TH_Tot_Light_Reflectance);
 PARAMETER(DB1.TH_Avg_Live_Wgt);
 PARAMETER(DB1.TH_Avg_Hot_Wgt);
 PARAMETER(DB1.TH_Avg_Light_Reflectance);
 PARAMETER(DB1.TH_Avg_Lean_Percent);
 PARAMETER(DB1.TH_Avg_Loin_Eye_Depth);
 PARAMETER(DB1.TH_Avg_Backfat);
 PARAMETER(DB1.TH_Std_Yield_Percent);
 PARAMETER(DB1.TH_Actual_Yield);
 PARAMETER(DB1.TH_Adj_Actual_Yield);
 PARAMETER(DB1.TH_Yield_Difference);
 PARAMETER(DB1.TH_Recalc_Live_Wgt);
 PARAMETER(DB1.TH_CM_Market_Price);
 PARAMETER(DB1.TH_CM_Base_Mkt_Price);
 PARAMETER(DB1.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(DB1.TH_CM_Sort_Discount_Amt);
 PARAMETER(DB1.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(DB1.TH_CM_Base_Carcass_Value);
 PARAMETER(DB1.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(DB1.TH_CM_Carcass_Gross_Amt);
 PARAMETER(DB1.TH_Deduction_Amt);
 PARAMETER(DB1.TH_Total_Net_WO_Adds);
 PARAMETER(DB1.TH_Carcass_Net_Amt);
 PARAMETER(DB1.TH_Additions_Amt);
 PARAMETER(DB1.TH_Payment_Gross);
 PARAMETER(DB1.Th_Payment_Net_Amt);
 PARAMETER(DB1.TH_AP_Voucher_Document#);
 PARAMETER(DB1.TH_Freight_Amount);
 PARAMETER(DB1.TH_Accrual_Amount);
 PARAMETER(DB1.TH_Fixed_Cost_Amount);
 PARAMETER(DB1.TH_Calc_Net_Sts);
 PARAMETER(DB1.TH_Payment_Sts);
 PARAMETER(DB1.TH_Header_Error_Sts);
 PARAMETER(DB1.TH_Detail_Error_Sts);
 PARAMETER(DB1.TH_Kill_Balancing_Sts);
 PARAMETER(DB1.TH_Bal_to_Kill_Gen);
 PARAMETER(DB1.TH_Commission_A_P_Voucher);
 PARAMETER(DB1.TH_Voucher_Payment_Date);
 PARAMETER(DB1.TH_User_Error_Override);
 PARAMETER(DB1.TH_Held_Over_Record);
 PARAMETER(DB1.TH_Sex);
 PARAMETER(DB1.TH_Held_Ovr_Completed_Dte);
 PARAMETER(DB1.TH_Commission_Paid_Date);
 PARAMETER(DB1.TH_Actual_Check_Date);
 PARAMETER(DB1.TH_Shipped_Weight);
 PARAMETER(DB1.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(DB1.TH_FFLI);
 PARAMETER(DB1.TH_Kill_Product_Value);
 PARAMETER(DB1.TH_Cut_Product_Value);
 PARAMETER(DB1.TH_Render_Product_Value);
 PARAMETER(DB1.TH_Head_Excluded);
 PARAMETER(DB1.TH_CM_Bse_Mkt_Live_CWT);
 PARAMETER(DB1.TH_CM_Bse_Mkt_Carc_CWT);
 PARAMETER(DB1.TH_CM_Srt_Dsc_Live_CWT);
 PARAMETER(DB1.TH_CM_Srt_Dsc_Carc_CWT);
 PARAMETER(DB1.TH_CM_Yld_G_L_Live_CWT);
 PARAMETER(DB1.TH_CM_Yld_G_L_Carc_CWT);
 PARAMETER(DB1.TH_CM_Crc_Val_Live_CWT);
 PARAMETER(DB1.TH_CM_Crc_Val_Carc_CWT);
 PARAMETER(DB1.TH_CM_Lean_Prem_Live_CWT);
 PARAMETER(DB1.TH_CM_Lean_Prem_Carc_CWT);
 PARAMETER(DB1.TH_CM_Gross_Live_CWT);
 PARAMETER(DB1.TH_CM_Gross_Carc_CWT);
 PARAMETER(DB1.TH_Source_Type);
 PARAMETER(DB1.TH_Scale_Ticket_Sts);
 PARAMETER(DB1.TH_Payment_Type);
 PARAMETER(DB1.TH_HPS_Movement_Ref_#);
 PARAMETER(DB1.TH_Source_Code);
 PARAMETER(DB1.TH_Hog_Class_Type);
 PARAMETER(DB1.TH_Posted_to_HPS_Flag);
 PARAMETER(DB1.TH_Schedule_Kill_Shift);
 PARAMETER(DB1.TH_Shift_Held_Over);
 PARAMETER(DB1.TH_PHA_Lean_Prm_Crc_CWT);
 PARAMETER(LCL.TH_VC_Gross_Value_HD);
 PARAMETER(DB1.TH_PHA_Sort_Disc_Fctr);
 PARAMETER(DB1.DF_Defect_Code);
 PARAMETER(DB1.THP_Process_Code);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.HB_Buyer_Code);
 PARAMETER(DB1.GN_Genetic_Code);
 PARAMETER(DB1.HC_Class_Code);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 PARAMETER(PAR.Pmt_Current_Payment_Date);
 PARAMETER(PAR.Competitors_Code_1_Usr);
 PARAMETER(PAR.Competitors_Code_2_Usr);
 PARAMETER(PAR.Competitors_Code_3_Usr);
 {
  //?Execute internal function

  CASE;

  // IF PAR.TH Kill Date LE PAR.Pmt Current Payment Date
  IF PAR.TH_Kill_Date <= PAR.Pmt_Current_Payment_Date;

  //?Must be equal to payment date or in the past and not been paid
  //?carcass merit calculations ONE AT A TIME
  //?Live/CARCASS  Calculate Live and Carcass Merit for Live
  CASE;

  // IF PAR.TH Hog Class Type is Market
  IF PAR.TH_Hog_Class_Type = 'M';

  //?Carcass only --  processing of live will be done in live/live carcass
  EXECUTE FUNCTION(Rtv/Dlt Comptitors Tat RT) TYPE(RTVOBJ) FILE(PKDGCPP)          AB1166611;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Dlt Competitors Tattoo DO) TYPE(DLTOBJ) FILE(PKDGCPP)          AB1166576;
   PARAMETER(DB1.CMP_Program_Code);
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
  }

  //?*Retrieve Purchase Price calculation information.
  EXECUTE FUNCTION(Rtv PrchPrc Clc Info  RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1116661;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(WRK.BOH_Market_Add_Deduct);
  PARAMETER(WRK.BOH_Quote_Price_Type);
  PARAMETER(WRK.BOH_Quoted_Base_Mkt_Price);
  PARAMETER(WRK.BOH_Commodity_Market_Code);
  PARAMETER(WRK.BOH_Commodity_Price_Group);
  PARAMETER(WRK.BOH_Market_Date_Method);
  PARAMETER(WRK.PC_Contract_Code);
  PARAMETER(WRK.PSC_Sub_Contract_Code);
  PARAMETER(WRK.PO_Option_Code);
  PARAMETER(WRK.CMP_Program_Code);
  {
   //?USER: Processing if Data record not found

   //?1/28/08 SLM LEFT OVER INFORMATION MAY HAVE CAUSED ISSUES
   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Chg Tattoo Summary    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1116890;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.TH_Live_Gross_Amt);
  PARAMETER(PAR.TH_LIve_Net_Amt);
  PARAMETER(PAR.TH_Std_Yield_Percent);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.TH_Payment_Gross);
  PARAMETER(PAR.Th_Payment_Net_Amt);
  PARAMETER(PAR.TH_AP_Voucher_Document#);
  PARAMETER(PAR.TH_Freight_Amount);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  //?Competitors will be using CASH BASIC Pricing, and no pricing opition
  //?Competitor 1
  DO;

  CASE;

  // IF PAR.Competitors Code 1 Usr NE WRK.Blank USR
  IF PAR.Competitors_Code_1_Usr <> WRK.Blank_USR;

  CASE;

  // IF PAR.TH Head Killed is Not Zero
  IF PAR.TH_Head_Killed <> *ZERO;

  EXECUTE FUNCTION(Rtv Competitors Comm   RT) TYPE(RTVOBJ) FILE(PKDEREP)          AB1166598;
  PARAMETER(00001);
  PARAMETER(WRK.CCC_Commodity_Mrkt_Code);
  PARAMETER(WRK.CCC_Commodity_Price_Group);
  PARAMETER(WRK.CCC_Market_Date_Method);
  PARAMETER(PAR.Competitors_Code_1_Usr);
  PARAMETER(WRK.CMP_Market_Add_Deduct);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   EXECUTE FUNCTION(Rtv CMP Info          RT) TYPE(RTVOBJ) FILE(PKARREP)           AB1116767;
   PARAMETER(PAR.CMP_Program_Code);
   PARAMETER(WRK.CMP_Description);
   PARAMETER(WRK.CMP_Grading_Type);
   PARAMETER(WRK.CMP_Sort_Basis);
   PARAMETER(WRK.CMP_Carc_Wgt_Type);
   PARAMETER(WRK.CMP_Std_Lean_Percent);
   PARAMETER(WRK.CMP_Lean_Factor);
   PARAMETER(WRK.CMP_Optimal_Row_Nbr_f_srt);
   PARAMETER(WRK.CMP_Type);
   PARAMETER(PAR.CMP_Market_Add_Deduct);
   PARAMETER(WRK.RS_Record_Status);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

  }

  // Call program Carcass Merit Process  XF.
  CALL PROGRAM(Carcass Merit Process  XF) ('PKXNXFR');
  PARAMETER(WRK.CMP_Market_Add_Deduct);
  PARAMETER('LP');
  PARAMETER(*ZERO);
  PARAMETER(WRK.CCC_Commodity_Mrkt_Code);
  PARAMETER(WRK.CCC_Commodity_Price_Group);
  PARAMETER(WRK.CCC_Market_Date_Method);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER('CBP');
  PARAMETER(PAR.Competitors_Code_1_Usr);
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.TH_Purchase_Date);
  PARAMETER(PAR.TH_Live_Wgt);
  PARAMETER(WRK.TH_CM_Base_Mkt_Price);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.TH_CM_Market_Price);
  PARAMETER(PAR.TH_Head_Killed);
  PARAMETER(PAR.TH_Head_Adds);
  PARAMETER(PAR.TH_Actual_Yield);
  PARAMETER(PAR.TH_Adj_Actual_Yield);
  PARAMETER(PAR.TH_CM_Market_Price);
  PARAMETER(PAR.TH_Avg_Hot_Wgt_EXC_ADD);
  PARAMETER(PAR.TH_Head_Excluded);
  PARAMETER(PAR.TH_Source_Type);
  PARAMETER(PAR.TH_Payment_Type);
  PARAMETER(PAR.TH_PHA_Lean_Prm_Crc_CWT);
  PARAMETER(PAR.TH_VC_Gross_Value_HD);
  PARAMETER(PAR.TH_PHA_Sort_Disc_Fctr);
  PARAMETER('Y');
  PARAMETER('P');

  // Call program Zzz Tattoo Header.
  CALL PROGRAM(Zzz Tattoo Header) ('PKXUPFR');
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.Competitors_Code_1_Usr);

  ENDIF;

  ENDIF;

  ENDDO;

  //?Competitor 2
  DO;

  CASE;

  // IF PAR.Competitors Code 2 Usr NE WRK.Blank USR
  IF PAR.Competitors_Code_2_Usr <> WRK.Blank_USR;

  EXECUTE FUNCTION(Chg Tattoo Summary    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1116890;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.TH_Live_Gross_Amt);
  PARAMETER(PAR.TH_LIve_Net_Amt);
  PARAMETER(PAR.TH_Std_Yield_Percent);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.TH_Payment_Gross);
  PARAMETER(PAR.Th_Payment_Net_Amt);
  PARAMETER(PAR.TH_AP_Voucher_Document#);
  PARAMETER(PAR.TH_Freight_Amount);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  CASE;

  // IF PAR.TH Head Killed is Not Zero
  IF PAR.TH_Head_Killed <> *ZERO;

  EXECUTE FUNCTION(Rtv Competitors Comm   RT) TYPE(RTVOBJ) FILE(PKDEREP)          AB1166598;
  PARAMETER(00001);
  PARAMETER(WRK.CCC_Commodity_Mrkt_Code);
  PARAMETER(WRK.CCC_Commodity_Price_Group);
  PARAMETER(WRK.CCC_Market_Date_Method);
  PARAMETER(PAR.Competitors_Code_2_Usr);
  PARAMETER(WRK.CMP_Market_Add_Deduct);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   EXECUTE FUNCTION(Rtv CMP Info          RT) TYPE(RTVOBJ) FILE(PKARREP)           AB1116767;
   PARAMETER(PAR.CMP_Program_Code);
   PARAMETER(WRK.CMP_Description);
   PARAMETER(WRK.CMP_Grading_Type);
   PARAMETER(WRK.CMP_Sort_Basis);
   PARAMETER(WRK.CMP_Carc_Wgt_Type);
   PARAMETER(WRK.CMP_Std_Lean_Percent);
   PARAMETER(WRK.CMP_Lean_Factor);
   PARAMETER(WRK.CMP_Optimal_Row_Nbr_f_srt);
   PARAMETER(WRK.CMP_Type);
   PARAMETER(PAR.CMP_Market_Add_Deduct);
   PARAMETER(WRK.RS_Record_Status);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

  }

  // Call program Carcass Merit Process  XF.
  CALL PROGRAM(Carcass Merit Process  XF) ('PKXNXFR');
  PARAMETER(WRK.CMP_Market_Add_Deduct);
  PARAMETER('LP');
  PARAMETER(*ZERO);
  PARAMETER(WRK.CCC_Commodity_Mrkt_Code);
  PARAMETER(WRK.CCC_Commodity_Price_Group);
  PARAMETER(WRK.CCC_Market_Date_Method);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER('CBP');
  PARAMETER(PAR.Competitors_Code_2_Usr);
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.TH_Purchase_Date);
  PARAMETER(PAR.TH_Live_Wgt);
  PARAMETER(WRK.TH_CM_Base_Mkt_Price);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.TH_CM_Market_Price);
  PARAMETER(PAR.TH_Head_Killed);
  PARAMETER(PAR.TH_Head_Adds);
  PARAMETER(PAR.TH_Actual_Yield);
  PARAMETER(PAR.TH_Adj_Actual_Yield);
  PARAMETER(PAR.TH_CM_Market_Price);
  PARAMETER(PAR.TH_Avg_Hot_Wgt_EXC_ADD);
  PARAMETER(PAR.TH_Head_Excluded);
  PARAMETER(PAR.TH_Source_Type);
  PARAMETER(PAR.TH_Payment_Type);
  PARAMETER(PAR.TH_PHA_Lean_Prm_Crc_CWT);
  PARAMETER(PAR.TH_VC_Gross_Value_HD);
  PARAMETER(PAR.TH_PHA_Sort_Disc_Fctr);
  PARAMETER('Y');
  PARAMETER('P');

  // Call program Zzz Tattoo Header.
  CALL PROGRAM(Zzz Tattoo Header) ('PKXUPFR');
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.Competitors_Code_2_Usr);

  ENDIF;

  ENDIF;

  ENDDO;

  //?Competitor 3
  DO;

  CASE;

  // IF PAR.Competitors Code 3 Usr NE WRK.Blank USR
  IF PAR.Competitors_Code_3_Usr <> WRK.Blank_USR;

  EXECUTE FUNCTION(Chg Tattoo Summary    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1116890;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.TH_Live_Gross_Amt);
  PARAMETER(PAR.TH_LIve_Net_Amt);
  PARAMETER(PAR.TH_Std_Yield_Percent);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.TH_Payment_Gross);
  PARAMETER(PAR.Th_Payment_Net_Amt);
  PARAMETER(PAR.TH_AP_Voucher_Document#);
  PARAMETER(PAR.TH_Freight_Amount);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  CASE;

  // IF PAR.TH Head Killed is Not Zero
  IF PAR.TH_Head_Killed <> *ZERO;

  EXECUTE FUNCTION(Rtv Competitors Comm   RT) TYPE(RTVOBJ) FILE(PKDEREP)          AB1166598;
  PARAMETER(00001);
  PARAMETER(WRK.CCC_Commodity_Mrkt_Code);
  PARAMETER(WRK.CCC_Commodity_Price_Group);
  PARAMETER(WRK.CCC_Market_Date_Method);
  PARAMETER(PAR.Competitors_Code_3_Usr);
  PARAMETER(WRK.CMP_Market_Add_Deduct);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   EXECUTE FUNCTION(Rtv CMP Info          RT) TYPE(RTVOBJ) FILE(PKARREP)           AB1116767;
   PARAMETER(PAR.CMP_Program_Code);
   PARAMETER(WRK.CMP_Description);
   PARAMETER(WRK.CMP_Grading_Type);
   PARAMETER(WRK.CMP_Sort_Basis);
   PARAMETER(WRK.CMP_Carc_Wgt_Type);
   PARAMETER(WRK.CMP_Std_Lean_Percent);
   PARAMETER(WRK.CMP_Lean_Factor);
   PARAMETER(WRK.CMP_Optimal_Row_Nbr_f_srt);
   PARAMETER(WRK.CMP_Type);
   PARAMETER(PAR.CMP_Market_Add_Deduct);
   PARAMETER(WRK.RS_Record_Status);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

  }

  // Call program Carcass Merit Process  XF.
  CALL PROGRAM(Carcass Merit Process  XF) ('PKXNXFR');
  PARAMETER(WRK.CMP_Market_Add_Deduct);
  PARAMETER('LP');
  PARAMETER(*ZERO);
  PARAMETER(WRK.CCC_Commodity_Mrkt_Code);
  PARAMETER(WRK.CCC_Commodity_Price_Group);
  PARAMETER(WRK.CCC_Market_Date_Method);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER('CBP');
  PARAMETER(PAR.Competitors_Code_3_Usr);
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.TH_Purchase_Date);
  PARAMETER(PAR.TH_Live_Wgt);
  PARAMETER(WRK.TH_CM_Base_Mkt_Price);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.TH_CM_Market_Price);
  PARAMETER(PAR.TH_Head_Killed);
  PARAMETER(PAR.TH_Head_Adds);
  PARAMETER(PAR.TH_Actual_Yield);
  PARAMETER(PAR.TH_Adj_Actual_Yield);
  PARAMETER(PAR.TH_CM_Market_Price);
  PARAMETER(PAR.TH_Avg_Hot_Wgt_EXC_ADD);
  PARAMETER(PAR.TH_Head_Excluded);
  PARAMETER(PAR.TH_Source_Type);
  PARAMETER(PAR.TH_Payment_Type);
  PARAMETER(PAR.TH_PHA_Lean_Prm_Crc_CWT);
  PARAMETER(PAR.TH_VC_Gross_Value_HD);
  PARAMETER(PAR.TH_PHA_Sort_Disc_Fctr);
  PARAMETER('Y');
  PARAMETER('P');

  // Call program Zzz Tattoo Header.
  CALL PROGRAM(Zzz Tattoo Header) ('PKXUPFR');
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.Competitors_Code_3_Usr);

  ENDIF;

  ENDIF;

  ENDDO;

  //?*Retrieve Purchase Price calculation information.
  EXECUTE FUNCTION(Rtv PrchPrc Clc Info  RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1116661;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(WRK.BOH_Market_Add_Deduct);
  PARAMETER(WRK.BOH_Quote_Price_Type);
  PARAMETER(WRK.BOH_Quoted_Base_Mkt_Price);
  PARAMETER(WRK.BOH_Commodity_Market_Code);
  PARAMETER(WRK.BOH_Commodity_Price_Group);
  PARAMETER(WRK.BOH_Market_Date_Method);
  PARAMETER(WRK.PC_Contract_Code);
  PARAMETER(WRK.PSC_Sub_Contract_Code);
  PARAMETER(WRK.PO_Option_Code);
  PARAMETER(WRK.CMP_Program_Code);
  {
   //?USER: Processing if Data record not found

   //?1/28/08 SLM LEFT OVER INFORMATION MAY HAVE CAUSED ISSUES
   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Retrieve Sub-Contract information.
  EXECUTE FUNCTION(Rtv PurchPrc Clc Info RT) TYPE(RTVOBJ) FILE(PKAQCPP)           AB1116645;
  PARAMETER(WRK.PC_Contract_Code);
  PARAMETER(WRK.PSC_Sub_Contract_Code);
  PARAMETER(WRK.PSC_Floor_Price);
  PARAMETER(WRK.PSC_Ceiling_Price);
  PARAMETER(WRK.PSC_Market_Percent_NU);
  PARAMETER(WRK.PSC_Break_Even_Percent);
  PARAMETER(WRK.PSC_FLoor_Price_+);
  PARAMETER(WRK.PSC_Sub_Contract_Type);
  PARAMETER(WRK.PSC_Mkt_Percent);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.TH Payment Sts is Live anything
  IF PAR.TH_Payment_Sts = 'ML'/'PL'/'NL'/'SL'/'IL';

  EXECUTE FUNCTION(Rtv CMP SBD Standard  RT) TYPE(RTVOBJ) FILE(PKARREP)           AB1122932;
  PARAMETER(WRK.CMP_Program_Code);
  PARAMETER('S');
  {
   //?USER: Process Data record

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.CMP_Program_Code = DB1.CMP_Program_Code;

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  ENDIF;

  CASE;

  // IF PAR.TH Payment Type is Live
  IF PAR.TH_Payment_Type = 'L';

  //?Analysis
  DO;

  EXECUTE FUNCTION(Chg Tattoo Summary    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1116890;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.TH_Live_Gross_Amt);
  PARAMETER(PAR.TH_LIve_Net_Amt);
  PARAMETER(PAR.TH_Std_Yield_Percent);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.TH_Payment_Gross);
  PARAMETER(PAR.Th_Payment_Net_Amt);
  PARAMETER(PAR.TH_AP_Voucher_Document#);
  PARAMETER(PAR.TH_Freight_Amount);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  CASE;

  // IF PAR.TH Head Killed is Not Zero
  IF PAR.TH_Head_Killed <> *ZERO;

  // Call program Carcass Merit Process  XF.
  CALL PROGRAM(Carcass Merit Process  XF) ('PKXNXFR');
  PARAMETER(WRK.BOH_Market_Add_Deduct);
  PARAMETER(WRK.BOH_Quote_Price_Type);
  PARAMETER(WRK.BOH_Quoted_Base_Mkt_Price);
  PARAMETER(WRK.BOH_Commodity_Market_Code);
  PARAMETER(WRK.BOH_Commodity_Price_Group);
  PARAMETER(WRK.BOH_Market_Date_Method);
  PARAMETER(WRK.PC_Contract_Code);
  PARAMETER(WRK.PSC_Sub_Contract_Code);
  PARAMETER(WRK.PO_Option_Code);
  PARAMETER(WRK.CMP_Program_Code);
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.TH_Purchase_Date);
  PARAMETER(PAR.TH_Live_Wgt);
  PARAMETER(WRK.TH_CM_Base_Mkt_Price);
  PARAMETER(WRK.PSC_Floor_Price);
  PARAMETER(WRK.PSC_Ceiling_Price);
  PARAMETER(WRK.PSC_Market_Percent_NU);
  PARAMETER(WRK.PSC_Mkt_Percent);
  PARAMETER(WRK.TH_CM_Market_Price);
  PARAMETER(PAR.TH_Head_Killed);
  PARAMETER(PAR.TH_Head_Adds);
  PARAMETER(PAR.TH_Actual_Yield);
  PARAMETER(PAR.TH_Adj_Actual_Yield);
  PARAMETER(PAR.TH_CM_Market_Price);
  PARAMETER(PAR.TH_Avg_Hot_Wgt_EXC_ADD);
  PARAMETER(PAR.TH_Head_Excluded);
  PARAMETER(PAR.TH_Source_Type);
  PARAMETER(PAR.TH_Payment_Type);
  PARAMETER(PAR.TH_PHA_Lean_Prm_Crc_CWT);
  PARAMETER(PAR.TH_VC_Gross_Value_HD);
  PARAMETER(PAR.TH_PHA_Sort_Disc_Fctr);
  PARAMETER('N');
  PARAMETER('A');

  // Call program Zzz Tattoo Header.
  CALL PROGRAM(Zzz Tattoo Header) ('PKXUPFR');
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(WRK.CMP_Program_Code);

  ENDIF;

  ENDDO;

  // IF PAR.TH Payment Type is Carcass Merit
  IF PAR.TH_Payment_Type = 'C';

  //?*****************
  //?Commented 01/31/97 for C2343. Per Rick Hoffman
  //?We are not going through Analysis because it will be the same
  //?as what we are going to pay now.
  //?****
  //?If Pork decides to make the Average Competitor the Analysis,
  //?this case would be uncommented.  See Clc Carcass Analysis  XF
  //?for further instructions.  PKD/SLM
  //?*****************
  //?NO Competitors last time with rules of payment
  DO;

  EXECUTE FUNCTION(Chg Tattoo Summary    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1116890;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.TH_Live_Gross_Amt);
  PARAMETER(PAR.TH_LIve_Net_Amt);
  PARAMETER(PAR.TH_Std_Yield_Percent);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.TH_Payment_Gross);
  PARAMETER(PAR.Th_Payment_Net_Amt);
  PARAMETER(PAR.TH_AP_Voucher_Document#);
  PARAMETER(PAR.TH_Freight_Amount);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  //?  ** HPE053P
  //?FOR Carcass, call the XF even if Head Killed is 0, because
  //? we need the th cm base mkt price if Ins Reimb is to be calcd.
  //?Head Killed is checked in the XF.
  // Call program Carcass Merit Process  XF.
  CALL PROGRAM(Carcass Merit Process  XF) ('PKXNXFR');
  PARAMETER(WRK.BOH_Market_Add_Deduct);
  PARAMETER(WRK.BOH_Quote_Price_Type);
  PARAMETER(WRK.BOH_Quoted_Base_Mkt_Price);
  PARAMETER(WRK.BOH_Commodity_Market_Code);
  PARAMETER(WRK.BOH_Commodity_Price_Group);
  PARAMETER(WRK.BOH_Market_Date_Method);
  PARAMETER(WRK.PC_Contract_Code);
  PARAMETER(WRK.PSC_Sub_Contract_Code);
  PARAMETER(WRK.PO_Option_Code);
  PARAMETER(WRK.CMP_Program_Code);
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.TH_Purchase_Date);
  PARAMETER(PAR.TH_Live_Wgt);
  PARAMETER(WRK.TH_CM_Base_Mkt_Price);
  PARAMETER(WRK.PSC_Floor_Price);
  PARAMETER(WRK.PSC_Ceiling_Price);
  PARAMETER(WRK.PSC_Market_Percent_NU);
  PARAMETER(WRK.PSC_Mkt_Percent);
  PARAMETER(WRK.TH_CM_Market_Price);
  PARAMETER(PAR.TH_Head_Killed);
  PARAMETER(PAR.TH_Head_Adds);
  PARAMETER(PAR.TH_Actual_Yield);
  PARAMETER(PAR.TH_Adj_Actual_Yield);
  PARAMETER(PAR.TH_CM_Market_Price);
  PARAMETER(PAR.TH_Avg_Hot_Wgt_EXC_ADD);
  PARAMETER(PAR.TH_Head_Excluded);
  PARAMETER(PAR.TH_Source_Type);
  PARAMETER(PAR.TH_Payment_Type);
  PARAMETER(PAR.TH_PHA_Lean_Prm_Crc_CWT);
  PARAMETER(PAR.TH_VC_Gross_Value_HD);
  PARAMETER(PAR.TH_PHA_Sort_Disc_Fctr);
  PARAMETER('N');
  PARAMETER('P');

  // Call program Zzz Tattoo Header.
  CALL PROGRAM(Zzz Tattoo Header) ('PKXUPFR');
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(WRK.CMP_Program_Code);

  ENDDO;

  ENDIF;

  //?Live/CARCASS  Calculate Live and Carcass Merit for Live
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Chg Tattoo Summary    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1116890;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.TH_Live_Gross_Amt);
  PARAMETER(PAR.TH_LIve_Net_Amt);
  PARAMETER(PAR.TH_Std_Yield_Percent);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.TH_Payment_Gross);
  PARAMETER(PAR.Th_Payment_Net_Amt);
  PARAMETER(PAR.TH_AP_Voucher_Document#);
  PARAMETER(PAR.TH_Freight_Amount);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  ENDIF;

  //?Freight
  DO;

  //?Get bol frt fields, and find out if any tattoo for this
  //?load has been paid.
  //?if tattoo is paid bring this back and also cor hld over pgm on frt
  // Call program Rtv Frt All f/BOL/TTO  XF.
  CALL PROGRAM(Rtv Frt All f/BOL/TTO  XF) ('PKEHXFR');
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(WRK.BOL_Freight_UOM);
  PARAMETER(WRK.BOL_Freight_Unit_Amt);
  PARAMETER(WRK.BOL_Freight_Amt);
  PARAMETER(WRK.BOL_Freight_Allocation);
  PARAMETER(WRK.BOL_Head_Received);
  PARAMETER(WRK.BOL_Live_Wgt_Received);
  PARAMETER(WRK.BOL_Head_Received_Market);
  PARAMETER(WRK.Tattoo_is_paid_Usr);
  PARAMETER(WRK.Held_Over_Records_Y_N);
  PARAMETER(WRK.Tot_Frt_Spdb_aft_pay_Usr);
  PARAMETER(WRK.Frt_Amt_spread_Usr);

  //?If allocated but no paid then allow to re spread of frt
  //?If not allocated allow spread of frt
  CASE;

  // IF WRK.Tattoo is paid Usr is No
  IF WRK.Tattoo_is_paid_Usr = 'N';

  // AND WRK.BOL Freight Allocation is Freight is Allocated
  AND WRK.BOL_Freight_Allocation = 'Y';

  // WRK.Freight Allociation Apply = CND.Yes
  WRK.Freight_Allociation_Apply = 'Y';

  // Call program Clc Frght Allctn/UnAl  XF.
  CALL PROGRAM(Clc Frght Allctn/UnAl  XF) ('PKQ6XFR');
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(WRK.BOL_Freight_UOM);
  PARAMETER(WRK.BOL_Freight_Unit_Amt);
  PARAMETER(WRK.BOL_Freight_Amt);
  PARAMETER(WRK.BOL_Freight_Allocation);
  PARAMETER(WRK.BOL_Head_Received);
  PARAMETER(WRK.BOL_Live_Wgt_Received);
  PARAMETER(WRK.BOL_Head_Received_Market);
  PARAMETER(WRK.Freight_Allociation_Apply);

  // IF WRK.BOL Freight Allocation is Freight is not Allocated
  IF WRK.BOL_Freight_Allocation = *BLANK;

  // WRK.Freight Allociation Apply = CND.Yes
  WRK.Freight_Allociation_Apply = 'Y';

  // Call program Clc Frght Allctn/UnAl  XF.
  CALL PROGRAM(Clc Frght Allctn/UnAl  XF) ('PKQ6XFR');
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(WRK.BOL_Freight_UOM);
  PARAMETER(WRK.BOL_Freight_Unit_Amt);
  PARAMETER(WRK.BOL_Freight_Amt);
  PARAMETER(WRK.BOL_Freight_Allocation);
  PARAMETER(WRK.BOL_Head_Received);
  PARAMETER(WRK.BOL_Live_Wgt_Received);
  PARAMETER(WRK.BOL_Head_Received_Market);
  PARAMETER(WRK.Freight_Allociation_Apply);

  ENDIF;

  ENDDO;

  CASE;

  // IF PAR.TH Payment Sts is Paid Anything
  IF PAR.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

  // WRK.Ded/Add/Net Pay Usr = CND.Paid no del or Create
  WRK.Ded_Add_Net_Pay_Usr = 'P';

  // Call program Clc Ded/Add/Net Pay   XF.
  CALL PROGRAM(Clc Ded/Add/Net Pay   XF) ('PKREXFR');
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(WRK.Ded_Add_Net_Pay_Usr);

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Second time to create da
  // WRK.Ded/Add/Net Pay Usr = CND.Create ded/Add/Net Pay
  WRK.Ded_Add_Net_Pay_Usr = 'C';

  // Call program Clc Ded/Add/Net Pay   XF.
  CALL PROGRAM(Clc Ded/Add/Net Pay   XF) ('PKREXFR');
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(WRK.Ded_Add_Net_Pay_Usr);

  ENDIF;

  ENDIF;

 }

}


