// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKCPDFR
// ?Date: 14.08.2025 Time: 02:51:11
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?E14981 JBB  5/14/19 - Add call to Change Head Received function
//?  Enable subfile option 3 to call the Edit Head Received function.
//?  Also add I/T users to the list of authorized users to change the
//?  Head Received.
//?E12101 JJH 11/20/17 - Recompile after adding Shawn Smith and
//?  remmoving Joe Hegeman from the Receiving Group TF list for
//?  field *USER.
//?E6784 JBB 07/28/16 - Recompile after adding Joe Hegeman to
//? the Receiving Group TF list for field *USER.
//?E3089 SLM 07/28/16 - PGM WAS CHECKED OUT --- GET THIS BACK IN SYNC
//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//? length from 5 to 7.
//?103777 E.L.09/14/22 - REPLACE Hard Coded Authority Change
//?                      By calling PDGXXFR (Parm HPETHO)
//?                      Also check IT users (ISBGUTI)
ENDDO;

// PGM.*Scan limit = CND.No Max
PGM.*Scan_limit = 999999;

// Call program Rtv User Code Model   XF.
CALL PROGRAM(Rtv User Code Model   XF) ('POYBXFR');
PARAMETER(JOB.*USER);
PARAMETER(LCL.User_Code_Model_USR);

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.Pen_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(WRK.Pen_Company_Number);
PARAMETER('HPECHGHEAD');
PARAMETER(LCL.Allow_User_to_Chg_New);

//?USER: Initialize subfile control

CASE;

// IF WRK.First Time Flag Usr EQ WRK.Blank USR
IF WRK.First_Time_Flag_Usr = WRK.Blank_USR;

// CTL.BOH Company Number = WRK.Pen Company Number
CTL.BOH_Company_Number = WRK.Pen_Company_Number;

// WRK.Display Print Prompt  Usr = CND.Prompt is to be displayed
WRK.Display_Print_Prompt_Usr = 'Y';

// WRK.First Time Flag Usr = CND.Yes
WRK.First_Time_Flag_Usr = 'Y';

EXECUTE FUNCTION(Rtv Payment Processing RT) TYPE(RTVOBJ) FILE(PKC4REP)          AB1147409;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(WRK.Pmt_Current_Payment_Step);
PARAMETER(WRK.PP_Commission_Paym_Error);
PARAMETER(WRK.PP_Payment_Error);
PARAMETER(WRK.PP_Unused_Nbr_1);
PARAMETER(WRK.PP_Repayment_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.@Name);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


//?USER: Initialize subfile record from DBF record

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(Val Process Code       RT) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1181829;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(WRK.TH_Kill_Balancing_Sts);
PARAMETER(WRK.TH_Hog_Class_Type);
PARAMETER(RCD.TH_Schedule_Kill_Shift);
PARAMETER(WRK.THP_Process_Code);
PARAMETER(WRK.Held_Over_Records_Y_N);
{
 //?USER: Initialize routine

 // WRK.First Time Flag Usr = CND.Blank
 WRK.First_Time_Flag_Usr = *BLANK;

 // PAR.Held Over Records Y/N = CND.Blank
 PAR.Held_Over_Records_Y_N = *BLANK;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 //?Check for Held overs
 CASE;

 // IF DB1.TH Held Over Record is Yes
 IF DB1.TH_Held_Over_Record = 'Y';

 // PAR.Held Over Records Y/N = CND.Yes
 PAR.Held_Over_Records_Y_N = 'Y';

 QUIT;

 //?Check for Held overs
 // IF DB1.TH Held Over GT WRK.Zero USR
 IF DB1.TH_Held_Over > WRK.Zero_USR;

 // PAR.Held Over Records Y/N = CND.Yes
 PAR.Held_Over_Records_Y_N = 'Y';

 QUIT;

 ENDIF;

}


// RCD.TH Kill Balancing Sts = WRK.TH Kill Balancing Sts
RCD.TH_Kill_Balancing_Sts = WRK.TH_Kill_Balancing_Sts;

CASE;

// IF DB1.TD Drive Card Number is No Drive Card
IF DB1.TD_Drive_Card_Number = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF WRK.THP Process Code is Payment
IF WRK.THP_Process_Code = 'PAYMNT';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF WRK.HC Class Type is Resale
IF WRK.HC_Class_Type = 'R';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// WRK.TD Pen Head = DB1.TD Pen Head + DB1.TD Held Over
WRK.TD_Pen_Head = DB1.TD_Pen_Head + DB1.TD_Held_Over;

// RCD.Sent to Kill Head Usr = WRK.TD Pen Head - DB1.TD Yard Dead
RCD.Sent_to_Kill_Head_Usr = WRK.TD_Pen_Head - DB1.TD_Yard_Dead;

// RCD.Sent to Kill Head Usr = RCD.Sent to Kill Head Usr - DB1.TD Held Over
RCD.Sent_to_Kill_Head_Usr = RCD.Sent_to_Kill_Head_Usr - DB1.TD_Held_Over;

// WRK.TD Pen Head = CON.*ZERO
WRK.TD_Pen_Head = *ZERO;

//?USER: Process subfile record (Pre-confirm)

CASE;

// IF RCD.*SFLSEL is *Revise
IF RCD.*SFLSEL = '2';

//?Perform program with tattoo detail in qtemp
// Call program Edt Yard/Held Crrs    UP.
CALL PROGRAM(Edt Yard/Held Crrs    UP) ('PKFNEFRCLP');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(CTL.Oms_System_Value_Alpha);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

// IF RCD.*SFLSEL is *Option 3 (Reusable)
IF RCD.*SFLSEL = '3';

// LCL.Status 3 = CND.No
LCL.Status_3 = 'N';

//?If ISBGUTI = OK
CASE;

// IF LCL.User Code Model USR is IS
IF LCL.User_Code_Model_USR = 'ISBGUTI';

// LCL.Status 3 = CND.Yes
LCL.Status_3 = 'Y';

//?If ISBGUTI = OK
// IF *OTHERWISE
IF *OTHERWISE;

//?Check for 'HPE TFR Held Over Auth'
DO;

// Call program Val Application/User  XF.
CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.Pen_Company_Number);
PARAMETER('HPETHO');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);

CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

// LCL.Status 3 = CND.No
LCL.Status_3 = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Status 3 = CND.Yes
LCL.Status_3 = 'Y';

ENDIF;

ENDDO;

ENDIF;

//?If User is authorized, continue; ELSE send error message
CASE;

// IF NOT LCL.Allow User to Chg New is Yes
IF ! LCL.Allow_User_to_Chg_New = 'Y';

// Send error message - 'Company is not set up to use this subfile option.  Contact I/T.'
ERROR(PRK1542);
MSGPARM(RCD.*SFLSEL);

//?If User is authorized, continue; ELSE send error message
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF LCL.Status 3 is Yes
IF LCL.Status_3 = 'Y';

EXECUTE FUNCTION(Rtv Tattoo Record All RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1351190;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(NLL.TH_Purchase_Date);
PARAMETER(NLL.TH_Group_Reference);
PARAMETER(NLL.TH_Live_Purchase_UOM);
PARAMETER(NLL.TH_Live_Purchase_Price);
PARAMETER(NLL.TH_Live_Gross_Amt);
PARAMETER(NLL.TH_LIve_Net_Amt);
PARAMETER(NLL.TH_Resale_UOM);
PARAMETER(NLL.TH_Recalc_Live_Wgt_Yld);
PARAMETER(NLL.TH_Pricing_Date);
PARAMETER(NLL.TH_Resale_Spread_Sts);
PARAMETER(NLL.TH_Dead_On_Arrival);
PARAMETER(NLL.TH_Head_Received);
PARAMETER(NLL.TH_Yard_Deads);
PARAMETER(LCL.TH_Held_Over);
PARAMETER(NLL.TH_Head_Condemned);
PARAMETER(NLL.TH_Head_Killed);
PARAMETER(NLL.TH_Head_Adds);
PARAMETER(NLL.TH_Head_Accepted);
PARAMETER(NLL.TH_Live_Wgt);
PARAMETER(NLL.TH_Adj_Live_Wgt);
PARAMETER(NLL.TH_Hot_Wgt);
PARAMETER(NLL.TH_Tot_Loin_Eye_Depth);
PARAMETER(NLL.TH_Tot_Backfat_Inches);
PARAMETER(NLL.TH_Tot_Light_Reflectance);
PARAMETER(NLL.TH_Avg_Live_Wgt);
PARAMETER(NLL.TH_Avg_Hot_Wgt);
PARAMETER(NLL.TH_Avg_Light_Reflectance);
PARAMETER(NLL.TH_Avg_Lean_Percent);
PARAMETER(NLL.TH_Avg_Loin_Eye_Depth);
PARAMETER(NLL.TH_Avg_Backfat);
PARAMETER(NLL.TH_Std_Yield_Percent);
PARAMETER(NLL.TH_Actual_Yield);
PARAMETER(NLL.TH_Adj_Actual_Yield);
PARAMETER(NLL.TH_Yield_Difference);
PARAMETER(NLL.TH_Recalc_Live_Wgt);
PARAMETER(NLL.TH_CM_Market_Price);
PARAMETER(NLL.TH_CM_Base_Mkt_Price);
PARAMETER(NLL.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(NLL.TH_CM_Sort_Discount_Amt);
PARAMETER(NLL.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(NLL.TH_CM_Base_Carcass_Value);
PARAMETER(NLL.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(NLL.TH_CM_Carcass_Gross_Amt);
PARAMETER(NLL.TH_Deduction_Amt);
PARAMETER(NLL.TH_Total_Net_WO_Adds);
PARAMETER(NLL.TH_Carcass_Net_Amt);
PARAMETER(NLL.TH_Additions_Amt);
PARAMETER(NLL.TH_Payment_Gross);
PARAMETER(NLL.Th_Payment_Net_Amt);
PARAMETER(NLL.TH_AP_Voucher_Document#);
PARAMETER(NLL.TH_Freight_Amount);
PARAMETER(NLL.TH_Accrual_Amount);
PARAMETER(NLL.TH_Fixed_Cost_Amount);
PARAMETER(NLL.TH_Calc_Net_Sts);
PARAMETER(LCL.TH_Payment_Sts);
PARAMETER(NLL.TH_Header_Error_Sts);
PARAMETER(NLL.TH_Detail_Error_Sts);
PARAMETER(NLL.TH_Kill_Balancing_Sts);
PARAMETER(NLL.TH_Bal_to_Kill_Gen);
PARAMETER(NLL.TH_Commission_A_P_Voucher);
PARAMETER(NLL.TH_Voucher_Payment_Date);
PARAMETER(NLL.TH_User_Error_Override);
PARAMETER(LCL.TH_Held_Over_Record);
PARAMETER(NLL.TH_Sex);
PARAMETER(LCL.TH_Held_Ovr_Completed_Dte);
PARAMETER(NLL.TH_Commission_Paid_Date);
PARAMETER(NLL.TH_Actual_Check_Date);
PARAMETER(NLL.TH_Shipped_Weight);
PARAMETER(NLL.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(NLL.TH_FFLI);
PARAMETER(NLL.TH_Kill_Product_Value);
PARAMETER(NLL.TH_Cut_Product_Value);
PARAMETER(NLL.TH_Render_Product_Value);
PARAMETER(NLL.TH_Head_Excluded);
PARAMETER(NLL.TH_CM_Bse_Mkt_Live_CWT);
PARAMETER(NLL.TH_CM_Bse_Mkt_Carc_CWT);
PARAMETER(NLL.TH_CM_Srt_Dsc_Live_CWT);
PARAMETER(NLL.TH_CM_Srt_Dsc_Carc_CWT);
PARAMETER(NLL.TH_CM_Yld_G_L_Live_CWT);
PARAMETER(NLL.TH_CM_Yld_G_L_Carc_CWT);
PARAMETER(NLL.TH_CM_Crc_Val_Live_CWT);
PARAMETER(NLL.TH_CM_Crc_Val_Carc_CWT);
PARAMETER(NLL.TH_CM_Lean_Prem_Live_CWT);
PARAMETER(NLL.TH_CM_Lean_Prem_Carc_CWT);
PARAMETER(NLL.TH_CM_Gross_Live_CWT);
PARAMETER(NLL.TH_CM_Gross_Carc_CWT);
PARAMETER(NLL.TH_Source_Type);
PARAMETER(NLL.TH_Scale_Ticket_Sts);
PARAMETER(NLL.TH_Payment_Type);
PARAMETER(NLL.TH_HPS_Movement_Ref_#);
PARAMETER(NLL.TH_Source_Code);
PARAMETER(NLL.TH_Hog_Class_Type);
PARAMETER(NLL.TH_Posted_to_HPS_Flag);
PARAMETER(NLL.TH_Schedule_Kill_Shift);
PARAMETER(NLL.TH_Shift_Held_Over);
PARAMETER(NLL.TH_State);
PARAMETER(NLL.TH_Unused_Code);
PARAMETER(NLL.TH_Unused_Sts_2_Pos);
PARAMETER(NLL.TH_Commission_Status);
PARAMETER(NLL.TH_Paid_2_Week_Avg_Y_N);
PARAMETER(NLL.TH_Unused_Sts_1_Pos_3);
PARAMETER(NLL.TH_DOA_Weight);
PARAMETER(NLL.TH_Avg_Lean_EXC_ADD);
PARAMETER(NLL.TH_HPS_Farm_Site);
PARAMETER(NLL.TH_Shift_Held_Over_Head);
PARAMETER(NLL.TH_Sorting_Amount);
PARAMETER(NLL.TH_Head_Identified);
PARAMETER(NLL.TH_Percent_Identified);
PARAMETER(NLL.TH_Percent_Accepted);
PARAMETER(NLL.TH_Head_Adjusted_LN);
PARAMETER(NLL.TH_PHA_Head_Adds);
PARAMETER(NLL.TH_PHA_Add_Type);
PARAMETER(NLL.TH_PHA_Average_Type);
PARAMETER(NLL.TH_PHA_Add_Reason);
PARAMETER(NLL.TH_PHA_Yield_Percent);
PARAMETER(NLL.TH_PHA_Lean_Prm_Crc_CWT);
PARAMETER(NLL.TH_VC_Gross_Value_HD);
PARAMETER(NLL.TH_Excluded_Gross_Value);
PARAMETER(NLL.TH_Avg_Lean);
PARAMETER(NLL.TH_Broken_Back_Hd_Count);
PARAMETER(NLL.TH_Hot_Scl_Upload_Time);
PARAMETER(NLL.TH_Unused_Nbr_4);
PARAMETER(NLL.TH_Excluded_Carc_Val);
PARAMETER(NLL.TH_Excluded_Premium);
PARAMETER(NLL.TH_Unused_Nbr_7);
PARAMETER(NLL.TH_Unused_Nbr_8);
PARAMETER(NLL.TH_Unused_Nbr_9);
PARAMETER(NLL.TH_Unused_Nbr_10);
PARAMETER(NLL.TH_Break_Even_Price_CWT);
PARAMETER(NLL.TH_Meat_Value_Factor_Amt);
PARAMETER(NLL.TH_Yld_Parm_Adj_Yield);
PARAMETER(NLL.TH_PHA_Sort_Disc_Fctr);
PARAMETER(NLL.TH_Avg_Loin_Eye_2_dec);
PARAMETER(NLL.TH_Avg_Backfat_2_Dec);
PARAMETER(NLL.TH_HITCH_Old_Pay_Net_Amt);
PARAMETER(NLL.TH_MPR_Sort_Loss);
PARAMETER(NLL.TH_Unused_Nbr_19);
PARAMETER(NLL.TH_Unused_Nbr_20);
PARAMETER(NLL.TH_Cold_Scl_Upload_Date);
PARAMETER(NLL.TH_Cold_Scl_Upload_Time);
PARAMETER(NLL.TH_Head_LFT);
PARAMETER(NLL.TH_Head_EUT_KOA);
PARAMETER(NLL.TH_Unused_Date_5);
PARAMETER(NLL.TH_Unused_Sts_1);
PARAMETER(NLL.TH_Unused_Sts_2);
PARAMETER(NLL.TH_Unused_Sts_3);
PARAMETER(NLL.TH_Unused_Sts_4);
PARAMETER(NLL.TH_Unused_Sts_5);
PARAMETER(NLL.TH_Unused_Sts_6);
PARAMETER(NLL.TH_Unused_Sts_7);
PARAMETER(NLL.TH_Unused_Sts_8);
PARAMETER(NLL.DF_Defect_Code);
PARAMETER(NLL.THP_Process_Code);
PARAMETER(NLL.PD_Producer_Code);
PARAMETER(NLL.PL_Location_Code);
PARAMETER(NLL.HB_Buyer_Code);
PARAMETER(NLL.GN_Genetic_Code);
PARAMETER(NLL.HC_Class_Code);
PARAMETER(NLL.RS_User_Changed);
PARAMETER(NLL.RS_Date_Changed);
PARAMETER(NLL.RS_Time_Changed);
PARAMETER(NLL.RS_Record_Status);
PARAMETER(NLL.RS_Job);
PARAMETER(NLL.RS_Program);
PARAMETER(NLL.RS_User_Added);
PARAMETER(NLL.RS_Date_Added);
PARAMETER(NLL.RS_Time_Added);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Do not process a Tattoo that is part of a Held Over
CASE;

// IF LCL.TH Held Over Record is Yes
IF LCL.TH_Held_Over_Record = 'Y';

// OR LCL.TH Held/Ovr Completed Dte is Greater than 0
OR LCL.TH_Held_Ovr_Completed_Dte > *ZERO;

// OR LCL.TH Held Over is greater than 0
OR LCL.TH_Held_Over > *ZERO;

// Send error message - 'Change Received Head option not allowed for Held Overs at this time.'
ERROR(PRK1541);
MSGPARM(RCD.*SFLSEL);

//?Do not process a Tattoo that is part of a Held Over
// IF *OTHERWISE
IF *OTHERWISE;

//?If Unpaid Producer, continue; ELSE send error message
CASE;

// IF LCL.TH Payment Sts is Unpaid Producer
IF LCL.TH_Payment_Sts = 'ML'/'SL'/'SC'/'IC'/'IL'/*BLANK;

// Call program Edt HdRcvAftrSnt2Kill EF.
CALL PROGRAM(Edt HdRcvAftrSnt2Kill EF) ('PWI6EFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?If Unpaid Producer, continue; ELSE send error message
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Tattoo Header Pymt Sts is not Unpaid, option not allowed.'
ERROR(PRK1540);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'User is not authorized to subfile option.  Contact I/T.'
ERROR(PRK1539);

ENDIF;

ENDIF;

// IF RCD.*SFLSEL is *Print
IF RCD.*SFLSEL = '6';

// Call program Pmt Print Options Size XF.
CALL PROGRAM(Pmt Print Options Size XF) ('PDV8PVR');
PARAMETER('Buy Order-I.S Only HldOvr');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER('N');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Oms_Application_Code);
PARAMETER(2);

//?Submit Print
CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

//?Submit Print
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Company Number Alpha Usr = CVTVAR(RCD.BOH Company Number)
LCL.Company_Number_Alpha_Usr = CVTVAR(RCD.BOH_Company_Number);

// LCL.Buy Order Number Alpha = CVTVAR(RCD.BOH Buy Order Number)
LCL.Buy_Order_Number_Alpha = CVTVAR(RCD.BOH_Buy_Order_Number);

// LCL.Buy Order Load Alpha = CVTVAR(RCD.BOL Load Number)
LCL.Buy_Order_Load_Alpha = CVTVAR(RCD.BOL_Load_Number);

// LCL.Tattoo Nbr Alpha Usr = CVTVAR(RCD.TH Tattoo Number)
LCL.Tattoo_Nbr_Alpha_Usr = CVTVAR(RCD.TH_Tattoo_Number);

// LCL.PRT Copies Alpha = CVTVAR(PAR.PRT Copies)
LCL.PRT_Copies_Alpha = CVTVAR(PAR.PRT_Copies);

// Call program Prt Buy OrdLodHeldOvr UP.
SBMJOB;
CALL PROGRAM(Prt Buy OrdLodHeldOvr UP) ('PLNLUPC');
PARAMETER(PGM.*Return_code);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(LCL.PRT_Copies_Alpha);
PARAMETER(LCL.Company_Number_Alpha_Usr);
PARAMETER(LCL.Buy_Order_Number_Alpha);
PARAMETER(LCL.Buy_Order_Load_Alpha);
PARAMETER(LCL.Tattoo_Nbr_Alpha_Usr);
SBMJOBOVR JOB(HLDOVRREV);
SBMJOBOVR LOG(4;
SBMJOBOVR 00;
SBMJOBOVR *SECLVL);
SBMJOBEND;

ENDIF;

// RCD.*SFLSEL = CND.*Reset to blanks
RCD.*SFLSEL = *BLANK;

ENDIF;

//?USER: Process command keys

CASE;

// IF CTL.*CMD key is CF15
IF CTL.*CMD_key = '15';

// Call program WW Drive Card         DF.
CALL PROGRAM(WW Drive Card         DF) ('PKGCDFR');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

// IF CTL.*CMD key is CF16
IF CTL.*CMD_key = '16';

// Call program WW Pen Availability   DF.
CALL PROGRAM(WW Pen Availability   DF) ('PKGGDFR');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

