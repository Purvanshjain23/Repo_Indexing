// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPY5PFR
// ?Date: 14.08.2025 Time: 12:06:47
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// PAR.Application Code = CND.Accounts Receivable
PAR.Application_Code = 'A/R';

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER(PAR.Application_Code);
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// PAR.Print Selections = CND.Yes
PAR.Print_Selections = 'Y';

// LCL.Load ID = PAR.Load Id Pass
LCL.Load_ID = PAR.Load_Id_Pass;

// LCL.Claim Number = PAR.Claim Number Pass Usr
LCL.Claim_Number = PAR.Claim_Number_Pass_Usr;

// LCL.Claim Entry Date = PAR.Date 1          PASS  USR
LCL.Claim_Entry_Date = PAR.Date_1_PASS_USR;

// LCL.Claim Ship to Customer = PAR.Ship to Customer Pass USR
LCL.Claim_Ship_to_Customer = PAR.Ship_to_Customer_Pass_USR;

// LCL.Claim Company Number = PAR.Company Number Pass   USR
LCL.Claim_Company_Number = PAR.Company_Number_Pass_USR;

// LCL.Claim Order Number = PAR.Order Number 1  PASS  USR
LCL.Claim_Order_Number = PAR.Order_Number_1_PASS_USR;

//?USER: Record selection processing

// WRK.Display Flag = CND.No
WRK.Display_Flag = 'N';

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

//?Claim load id
CASE;

// IF LCL.Load ID is Blank
IF LCL.Load_ID = *ZERO;

//?Claim load id
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF LCL.Load ID EQ DB1.Load ID
IF LCL.Load_ID = DB1.Load_ID;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Claim number selection
CASE;

// IF LCL.Claim Number is Zero
IF LCL.Claim_Number = *ZERO;

//?Claim number selection
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF LCL.Claim Number EQ DB1.Claim Number
IF LCL.Claim_Number = DB1.Claim_Number;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Claim Type selection
CASE;

// IF PAR.Claim Type is *Blank
IF PAR.Claim_Type = *BLANK;

//?Claim Type selection
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Claim Type EQ DB1.Claim Type
IF PAR.Claim_Type = DB1.Claim_Type;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Claim Entry Date
CASE;

// IF LCL.Claim Entry Date is not entered
IF LCL.Claim_Entry_Date = *ZERO;

//?Claim Entry Date
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF LCL.Claim Entry Date EQ DB1.Claim Entry Date
IF LCL.Claim_Entry_Date = DB1.Claim_Entry_Date;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Claim ship to customer
CASE;

// IF LCL.Claim Ship to Customer is equal to zero
IF LCL.Claim_Ship_to_Customer = *ZERO;

//?Claim ship to customer
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF LCL.Claim Ship to Customer EQ DB1.Claim Ship to Customer
IF LCL.Claim_Ship_to_Customer = DB1.Claim_Ship_to_Customer;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Claim Company Number
CASE;

// IF LCL.Claim Company Number is Equal to zero
IF LCL.Claim_Company_Number = *ZERO;

//?Claim Company Number
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF LCL.Claim Company Number EQ DB1.Claim Company Number
IF LCL.Claim_Company_Number = DB1.Claim_Company_Number;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Claim Order number
CASE;

// IF LCL.Claim Order Number is Equal to zeros
IF LCL.Claim_Order_Number = *ZERO;

//?Claim Order number
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF LCL.Claim Order Number EQ DB1.Claim Order Number
IF LCL.Claim_Order_Number = DB1.Claim_Order_Number;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Claim status
CASE;

// IF PAR.Claim Status is Blank
IF PAR.Claim_Status = *BLANK;

//?show all
// WRK.Display Flag = CND.Yes
WRK.Display_Flag = 'Y';

//?Claim status
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Claim Status EQ DB1.Claim Status
IF PAR.Claim_Status = DB1.Claim_Status;

// WRK.Display Flag = CND.Yes
WRK.Display_Flag = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?Display approved/denied records (yes or no)
CASE;

// IF DB1.Claim Number EQ LCL.Claim Number
IF DB1.Claim_Number = LCL.Claim_Number;

//?*** show claim for entered claim number. ***
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF WRK.Display Flag is No
IF WRK.Display_Flag = 'N';

// AND DB1.Claim Status is Completed
AND ( DB1.Claim_Status = 'C';

// OR DB1.Claim Status is Denied
OR DB1.Claim_Status = 'D';

// OR DB1.Claim Status is Voided
OR DB1.Claim_Status = 'V' );

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?USER: Process top of page

//?Load Selection Fields.
MOVE *ALL (To: TOP From: PAR);

// TOP.Load ID = PAR.Load Id Pass
TOP_Load_ID = PAR.Load_Id_Pass;

// TOP.Claim Number = PAR.Claim Number Pass Usr
TOP_Claim_Number = PAR.Claim_Number_Pass_Usr;

// TOP.Claim Entry Date = PAR.Date 1          PASS  USR
TOP_Claim_Entry_Date = PAR.Date_1_PASS_USR;

// TOP.Claim Ship to Customer = PAR.Ship to Customer Pass USR
TOP_Claim_Ship_to_Customer = PAR.Ship_to_Customer_Pass_USR;

// TOP.Claim Company Number = PAR.Company Number Pass   USR
TOP_Claim_Company_Number = PAR.Company_Number_Pass_USR;

// TOP.Claim Order Number = PAR.Order Number 1  PASS  USR
TOP_Claim_Order_Number = PAR.Order_Number_1_PASS_USR;

//?** IF Company Number is Zeros, default Co. Name to "*ALL" 1/30/06 LJB
CASE;

// IF LCL.Claim Company Number is Equal to zero
IF LCL.Claim_Company_Number = *ZERO;

// TOP.Company Name = CON.*ALL
TOP_Company_Name = *ALL;

//?** IF Company Number is Zeros, default Co. Name to "*ALL" 1/30/06 LJB
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(LCL.Claim_Company_Number);
PARAMETER(TOP_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Load Claim Status Description.
CASE;

// IF TOP.Claim Status is Blank
IF TOP_Claim_Status = *BLANK;

// TOP.Status Description 3  USR = CON.*BLANK
TOP_Status_Description_3_USR = *BLANK;

//?Load Claim Status Description.
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Status Description 3  USR = Condition name of TOP.Claim Status
TOP_Status_Description_3_USR = RTVCND(TOP_Claim_Status);

ENDIF;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(TOP_Claim_Ship_to_Customer);
PARAMETER(TOP_Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: On print of first page format

// PAR.Print Selections = CND.No
PAR.Print_Selections = 'N';

CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

ENDIF;

//?USER: Print required level headings

// SUPPRESSED PRINT Claim Number header format

//?USER: On print of detail format

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?CLM, CMT, RESALE, EXPENSES
EXECUTE FUNCTION(Vry Clm Product        RT) TYPE(RTVOBJ) FILE(PDMOCPP)          AC1725521;
PARAMETER(CUR.Claim_Number);
PARAMETER(CUR.Claim_Company_Number);
PARAMETER(CUR.Clm_Dta_Steps_Clm_Usr);
{
 //?USER: Processing if Data record not found

 // PAR.Clm Dta Steps-Clm Usr = CND.No Data Exists
 PAR.Clm_Dta_Steps_Clm_Usr = *BLANK;

 //?USER: Process Data record

 // PAR.Clm Dta Steps-Clm Usr = CVTVAR(CND.There is Data)
 PAR.Clm_Dta_Steps_Clm_Usr = CVTVAR('X');

 QUIT;

}


//?verify the clm product
CASE;

// IF PAR.Clm Dta Steps-Clm Usr is There is Data
IF PAR.Clm_Dta_Steps_Clm_Usr = 'X';

//?Verify there is a Claim Product
CASE;

// IF PAR.Clm Dta Steps-Clm Usr EQ CUR.Clm Dta Steps-Clm Usr
IF PAR.Clm_Dta_Steps_Clm_Usr = CUR.Clm_Dta_Steps_Clm_Usr;

//?Verify there is a Claim Product
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(Vry Clm ExplanAtLeast1 RT) TYPE(RTVOBJ) FILE(PDMNCPP)          AC1877817;
PARAMETER(CUR.Claim_Number);
PARAMETER(CUR.Clm_Dta_Steps_Com_Usr);
{
 //?USER: Processing if Data record not found

 // PAR.Clm Dta Steps-Cmt Usr = CND.No Data Exists
 PAR.Clm_Dta_Steps_Com_Usr = *BLANK;

 //?USER: Process Data record

 // PAR.Clm Dta Steps-Com Usr = CVTVAR(CND.Data Found)
 PAR.Clm_Dta_Steps_Com_Usr = CVTVAR('X');

 QUIT;

}


//?verify the comments
CASE;

// IF PAR.Clm Dta Steps-Com Usr is Data Found
IF PAR.Clm_Dta_Steps_Com_Usr = 'X';

CASE;

// IF PAR.Clm Dta Steps-Com Usr EQ CUR.Clm Dta Steps-Com Usr
IF PAR.Clm_Dta_Steps_Com_Usr = CUR.Clm_Dta_Steps_Com_Usr;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(Vry Clm Resale Product RT) TYPE(RTVOBJ) FILE(PDMPCPP)          AC1735811;
PARAMETER(CUR.Claim_Number);
PARAMETER(CUR.Clm_Dta_Steps_Rsl_Usr);
{
 //?USER: Processing if Data record not found

 // PAR.Clm Dta Steps-Rsl Usr = CND.No Data Exists
 PAR.Clm_Dta_Steps_Rsl_Usr = *BLANK;

 //?USER: Process Data record

 // PAR.Clm Dta Steps-Rsl Usr = CVTVAR(CND.There is Data)
 PAR.Clm_Dta_Steps_Rsl_Usr = CVTVAR('X');

}


//?verify the resale
CASE;

// IF PAR.Clm Dta Steps-Rsl Usr is There is Data
IF PAR.Clm_Dta_Steps_Rsl_Usr = 'X';

CASE;

// IF PAR.Clm Dta Steps-Rsl Usr EQ CUR.Clm Dta Steps-Rsl Usr
IF PAR.Clm_Dta_Steps_Rsl_Usr = CUR.Clm_Dta_Steps_Rsl_Usr;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(Vry Clm Expense       RT) TYPE(RTVOBJ) FILE(PPA1CPP)           AC1724244;
PARAMETER(CUR.Claim_Number);
PARAMETER(CUR.Clm_Dta_Steps_Exp_Usr);
{
 //?USER: Processing if Data record not found

 // PAR.Clm Dta Steps-Exp Usr = CND.No Data Exists
 PAR.Clm_Dta_Steps_Exp_Usr = *BLANK;

 //?USER: Process Data record

 // PAR.Clm Dta Steps-Exp Usr = CVTVAR(CND.There is Data)
 PAR.Clm_Dta_Steps_Exp_Usr = CVTVAR('X');

 QUIT;

}


//?verify the exp
CASE;

// IF PAR.Clm Dta Steps-Exp Usr is There is Data
IF PAR.Clm_Dta_Steps_Exp_Usr = 'X';

CASE;

// IF PAR.Clm Dta Steps-Exp Usr EQ CUR.Clm Dta Steps-Exp Usr
IF PAR.Clm_Dta_Steps_Exp_Usr = CUR.Clm_Dta_Steps_Exp_Usr;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Search on the CLM. RSL, EXP, COMMENTS
CASE;

// IF PAR.Clm Dta Steps-Clm Usr is There is Data
IF PAR.Clm_Dta_Steps_Clm_Usr = 'X';

CASE;

// IF PAR.Clm Dta Steps-Clm Usr NE CUR.Clm Dta Steps-Clm Usr
IF PAR.Clm_Dta_Steps_Clm_Usr <> CUR.Clm_Dta_Steps_Clm_Usr;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Search on the CLM. RSL, EXP, COMMENTS
// IF PAR.Clm Dta Steps-Com Usr is Data Found
IF PAR.Clm_Dta_Steps_Com_Usr = 'X';

CASE;

// IF PAR.Clm Dta Steps-Com Usr NE CUR.Clm Dta Steps-Com Usr
IF PAR.Clm_Dta_Steps_Com_Usr <> CUR.Clm_Dta_Steps_Com_Usr;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Search on the CLM. RSL, EXP, COMMENTS
// IF PAR.Clm Dta Steps-Rsl Usr is There is Data
IF PAR.Clm_Dta_Steps_Rsl_Usr = 'X';

CASE;

// IF PAR.Clm Dta Steps-Rsl Usr NE CUR.Clm Dta Steps-Rsl Usr
IF PAR.Clm_Dta_Steps_Rsl_Usr <> CUR.Clm_Dta_Steps_Rsl_Usr;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Search on the CLM. RSL, EXP, COMMENTS
// IF PAR.Clm Dta Steps-Exp Usr is There is Data
IF PAR.Clm_Dta_Steps_Exp_Usr = 'X';

CASE;

// IF PAR.Clm Dta Steps-Exp Usr NE CUR.Clm Dta Steps-Exp Usr
IF PAR.Clm_Dta_Steps_Exp_Usr <> CUR.Clm_Dta_Steps_Exp_Usr;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?T10560 DN  05/18/17-Added FPR ID to report.
// CUR.FPR ID USR = DB1.FPR ID
CUR.FPR_ID_USR = DB1.FPR_ID;

ENDIF;

CASE;

// IF PGM.*Record selected is *NO
IF PGM.*Record_selected = 'N';

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

//?USER: Print required level totals

// SUPPRESSED PRINT Claim Number totals format

