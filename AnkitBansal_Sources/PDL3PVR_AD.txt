// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDL3PVR
// ?Date: 14.08.2025 Time: 03:35:09
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?*** Setup Security & Company Title ***
// PAR.Application Code = CND.Accounts Receivable
PAR.Application_Code = 'A/R';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?*** Initialize Error Flag & Display Flag ***
// PAR.Error Flag            USR = CND.No
PAR.Error_Flag_USR = 'N';

// PAR.Display Flag = CND.No
PAR.Display_Flag = 'N';

//?USER: Load screen

// DTL.From Month 2          USR = JOB.*Job month
DTL.From_Month_2_USR = JOB.*Job_month;

//?USER: Validate fields

// PAR.Error Flag            USR = CND.No
PAR.Error_Flag_USR = 'N';

//?Must enter Month or Date Range.
CASE;

// IF DTL.From Month 2          USR is Zero
IF DTL.From_Month_2_USR = *ZERO;

// AND DTL.From Month            USR is Zero
AND DTL.From_Month_USR = *ZERO;

// Send error message - 'Month or Date Range must be entered.'
ERROR(USR2721);

// PAR.Error Flag            USR = CND.Yes
PAR.Error_Flag_USR = 'Y';

ENDIF;

//?Can't enter both a Month and Date Range.
CASE;

// IF DTL.From Month 2          USR is Not Zero
IF DTL.From_Month_2_USR <> *ZERO;

// AND DTL.From Month            USR is Not Zero
AND DTL.From_Month_USR <> *ZERO;

// Send error message - 'Please enter only one date selection.'
ERROR(USR2722);

// PAR.Error Flag            USR = CND.Yes
PAR.Error_Flag_USR = 'Y';

ENDIF;

//?CALC: Screen function fields

CASE;

// IF PAR.Error Flag            USR is No
IF PAR.Error_Flag_USR = 'N';

EXECUTE FUNCTION(Load Month Description) TYPE(EXCINTFUN)                        AC1520585;
PARAMETER(DTL.From_Month_2_USR);
PARAMETER(DTL.Month_Description_USR);
{
 //?Execute internal function

 // PAR.Month Description     USR = CND.NOT ENTERED
 PAR.Month_Description_USR = *BLANK;

 CASE;

 // IF PAR.Month                 USR is January
 IF PAR.Month_USR = 01;

 // PAR.Month Description     USR = CON.January
 PAR.Month_Description_USR = 'January';

 // IF PAR.Month                 USR is February
 IF PAR.Month_USR = 02;

 // PAR.Month Description     USR = CON.February
 PAR.Month_Description_USR = 'February';

 // IF PAR.Month                 USR is March
 IF PAR.Month_USR = 03;

 // PAR.Month Description     USR = CON.March
 PAR.Month_Description_USR = 'March';

 // IF PAR.Month                 USR is April
 IF PAR.Month_USR = 04;

 // PAR.Month Description     USR = CON.April
 PAR.Month_Description_USR = 'April';

 // IF PAR.Month                 USR is May
 IF PAR.Month_USR = 05;

 // PAR.Month Description     USR = CON.May
 PAR.Month_Description_USR = 'May';

 // IF PAR.Month                 USR is June
 IF PAR.Month_USR = 06;

 // PAR.Month Description     USR = CON.June
 PAR.Month_Description_USR = 'June';

 // IF PAR.Month                 USR is July
 IF PAR.Month_USR = 07;

 // PAR.Month Description     USR = CON.July
 PAR.Month_Description_USR = 'July';

 // IF PAR.Month                 USR is August
 IF PAR.Month_USR = 08;

 // PAR.Month Description     USR = CON.August
 PAR.Month_Description_USR = 'August';

 // IF PAR.Month                 USR is September
 IF PAR.Month_USR = 09;

 // PAR.Month Description     USR = CON.September
 PAR.Month_Description_USR = 'September';

 // IF PAR.Month                 USR is October
 IF PAR.Month_USR = 10;

 // PAR.Month Description     USR = CON.October
 PAR.Month_Description_USR = 'October';

 // IF PAR.Month                 USR is November
 IF PAR.Month_USR = 11;

 // PAR.Month Description     USR = CON.November
 PAR.Month_Description_USR = 'November';

 // IF PAR.Month                 USR is December
 IF PAR.Month_USR = 12;

 // PAR.Month Description     USR = CON.December
 PAR.Month_Description_USR = 'December';

 ENDIF;

}


// IF *OTHERWISE
IF *OTHERWISE;

//?Initialize date description fields.
DO;

// DTL.Month Description     USR = CND.NOT ENTERED
DTL.Month_Description_USR = *BLANK;

// DTL.From Date             USR = CND.Zero
DTL.From_Date_USR = *ZERO;

// DTL.To Date               USR = CND.Zero
DTL.To_Date_USR = *ZERO;

ENDDO;

ENDIF;

//?USER: Validate relations

// PAR.Display Flag = CND.No
PAR.Display_Flag = 'N';

CASE;

// IF PAR.Error Flag            USR is No
IF PAR.Error_Flag_USR = 'N';

CASE;

// IF DTL.From Month 2          USR is Not Zero
IF DTL.From_Month_2_USR <> *ZERO;

//?Prepare "From" & "To" dates from Month selection.
DO;

// DTL.To Date               USR = CND.Zero
DTL.To_Date_USR = *ZERO;

// DTL.From Date             USR =       *
DTL.From_Date_USR = ( ( JOB.*Job_year * 10000 ) + ( DTL.From_Month_2_USR * 100 ) ) + 1;

//?Determine Century.
CASE;

// IF JOB.*Job year is LT 40
IF JOB.*Job_year < 40;

// DTL.From Date             USR = DTL.From Date             USR + CON.1000000
DTL.From_Date_USR = DTL.From_Date_USR + 1000000;

ENDIF;

//?Make sure date range fields are blank.
DO;

// DTL.From Month            USR = CND.Zero
DTL.From_Month_USR = *ZERO;

// DTL.From Year             USR = CND.Zero
DTL.From_Year_USR = *ZERO;

// DTL.To Month              USR = CND.Zero
DTL.To_Month_USR = *ZERO;

// DTL.To Year               USR = CND.Zero
DTL.To_Year_USR = *ZERO;

ENDDO;

ENDDO;

// IF DTL.From Month            USR is Not Zero
IF DTL.From_Month_USR <> *ZERO;

//?Prepare "From" & "To" dates from Date Range selectiion.
DO;

//?Construct "From Date"
DO;

// DTL.From Date             USR =       *
DTL.From_Date_USR = ( ( DTL.From_Year_USR * 10000 ) + ( DTL.From_Month_USR * 100 ) ) + 1;

//?Determine Century.
CASE;

// IF DTL.From Year             USR is Less Than 40
IF DTL.From_Year_USR < 40;

// DTL.From Date             USR = DTL.From Date             USR + CON.1000000
DTL.From_Date_USR = DTL.From_Date_USR + 1000000;

ENDIF;

ENDDO;

CASE;

// IF DTL.To Month              USR is Zero
IF DTL.To_Month_USR = *ZERO;

//?Determine "To Date" from "From Date"
DO;

// DTL.To Date               USR = DTL.From Date             USR
DTL.To_Date_USR = DTL.From_Date_USR;

// DTL.To Month              USR = DTL.From Month            USR
DTL.To_Month_USR = DTL.From_Month_USR;

// DTL.To Year               USR = DTL.From Year             USR
DTL.To_Year_USR = DTL.From_Year_USR;

ENDDO;

// IF *OTHERWISE
IF *OTHERWISE;

//?Construct "To Date"
DO;

// DTL.To Date               USR =       *
DTL.To_Date_USR = ( ( DTL.To_Year_USR * 10000 ) + ( DTL.To_Month_USR * 100 ) ) + 1;

//?Determine Century.
CASE;

// IF DTL.To Year               USR is Less Than 40
IF DTL.To_Year_USR < 40;

// DTL.To Date               USR = DTL.To Date               USR + CON.1000000
DTL.To_Date_USR = DTL.To_Date_USR + 1000000;

ENDIF;

ENDDO;

ENDIF;

//?Change "To Date" to the last day of the month
DO;

//?Add one month, then subtract one day.
// DTL.To Date               USR = DTL.To Date               USR + CON.1 *MONTHS
DTL.To_Date_USR = DATEINCR(DTL.To_Date_USR 1 'MO' 1111111 'NONE' 'N' 1);

// DTL.To Date               USR = DTL.To Date               USR + CON.-1 *DAYS
DTL.To_Date_USR = DATEINCR(DTL.To_Date_USR '-1' 'DY' 1111111 'NONE' 'N' 1);

ENDDO;

CASE;

// IF DTL.To Date               USR LT DTL.From Date             USR
IF DTL.To_Date_USR < DTL.From_Date_USR;

// Send error message - '"To Date" cannot be less than the "From Date".'
ERROR(USR2719);

ENDIF;

// PAR.Display Flag = CND.Yes
PAR.Display_Flag = 'Y';

ENDDO;

ENDIF;

ENDIF;

//?USER: User defined action

// WRK.PRT Night Queue Run Sts = CND.no
WRK.PRT_Night_Queue_Run_Sts = 'N';

// Call program PMT Print Option  SHR  PV.
CALL PROGRAM(PMT Print Option  SHR  PV) ('PDG0PVR');
PARAMETER('Credit Line Exp. Date Rpt');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(WRK.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Submit the Report.
DO;

//?Dynamically override the SBMJOB command
//?with the job queue from the Print Options screen.
// PGM.*Sbmjob override string = CONCAT(CON.JOBQ(,PAR.PRT Night Queue,CND.*None)
PGM.*Sbmjob_override_string = 'JOBQ(' + PAR.PRT_Night_Queue (*ZERO);

// PGM.*Sbmjob override string = CONCAT(PGM.*Sbmjob override string,CON.),CND.*None
PGM.*Sbmjob_override_string = PGM.*Sbmjob_override_string + ')' (*ZERO);

//?Submit the Report.
// PAR.Nbr of Copies-Alpha   USR = CVTVAR(PAR.PRT Number of Copies)
PAR.Nbr_of_Copies_Alpha_USR = CVTVAR(PAR.PRT_Number_of_Copies);

// PAR.From Date (alpha)     USR = CVTVAR(DTL.From Date             USR)
PAR.From_Date_alpha_USR = CVTVAR(DTL.From_Date_USR);

// PAR.To Date (alpha)       USR = CVTVAR(DTL.To Date               USR)
PAR.To_Date_alpha_USR = CVTVAR(DTL.To_Date_USR);

// Call program PRT Credit Line Exp Dt UP.
SBMJOB;
CALL PROGRAM(PRT Credit Line Exp Dt UP) ('PDL4UPR');
PARAMETER(PAR.From_Date_alpha_USR);
PARAMETER(PAR.To_Date_alpha_USR);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.Nbr_of_Copies_Alpha_USR);
SBMJOBEND;

//?Send submit message to user.
// Send information message - 'The report has been submitted.'
MESSAGE(USR2720 *INFO);

ENDDO;

ENDIF;

