// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLC4XFR
// ?Date: 14.08.2025 Time: 02:53:48
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?H16853 ISE 11/05/2020-Recompiled due to change in Buy Order Number
EXECUTE FUNCTION(Fix Delv Hd/Wgt       RT) TYPE(RTVOBJ) FILE(PLAFCPP)           AB1252653;
{
 //?USER: Process Data record

 CASE;

 // IF DB1.DT Delivered Head is Zero
 IF DB1.DT_Delivered_Head = *ZERO;

 // OR DB1.DT Delivered Weight lbs is Zeros
 OR DB1.DT_Delivered_Weight_lbs = *ZERO;

 EXECUTE FUNCTION(Rtv Shipped Head      RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1226281;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(LCL.BOL_Shipped_Head);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Avg Live Wgt      RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1252631;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(LCL.TH_Avg_Live_Wgt);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.TH Hog Class Type is Market
  IF DB1.TH_Hog_Class_Type = 'M';

  // AND PAR.TH Avg Live Wgt is EQ Zero
  AND PAR.TH_Avg_Live_Wgt = *ZERO;

  MOVE *ALL (To: PAR From: DB1);

  ENDIF;

 }

 CASE;

 // IF LCL.TH Avg Live Wgt is Not Zero
 IF LCL.TH_Avg_Live_Wgt <> *ZERO;

 // AND LCL.BOL Shipped Head is Not Zero
 AND LCL.BOL_Shipped_Head <> *ZERO;

 // LCL.DT Delivered Weight lbs = LCL.BOL Shipped Head * LCL.TH Avg Live Wgt *
 LCL.DT_Delivered_Weight_lbs = LCL.BOL_Shipped_Head * LCL.TH_Avg_Live_Wgt;

 EXECUTE FUNCTION(Chg Delivery Tracking CH) TYPE(CHGOBJ) FILE(PLAFCPP)           AB1244757;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.DSH_Kill_Date);
 PARAMETER(DB1.DT_Delivery_Date);
 PARAMETER(DB1.DT_Delivery_Time);
 PARAMETER(DB1.DT_Delivery_Time_Seq);
 PARAMETER(DB1.DT_Actual_Kill_Date);
 PARAMETER(DB1.DT_Actual_Delivery_Hour);
 PARAMETER(DB1.DT_Scheduled_Hour);
 PARAMETER(DB1.DT_Delivery_Initiation);
 PARAMETER(DB1.DT_Farm_Site_Code);
 PARAMETER(DB1.DT_Building);
 PARAMETER(DB1.DT_Room);
 PARAMETER(DB1.DT_Sire_Line_Code);
 PARAMETER(DB1.DT_Hog_Group_Reference);
 PARAMETER(LCL.BOL_Shipped_Head);
 PARAMETER(LCL.DT_Delivered_Weight_lbs);
 PARAMETER(DB1.DT_Trucker_Code_HPS);
 PARAMETER(DB1.DT_Driver);
 PARAMETER(DB1.DT_Loading_Crew);
 PARAMETER(DB1.CHR_Code);
 PARAMETER(DB1.DT_Load_Type);
 PARAMETER(DB1.DT_Full_Split_Load);
 PARAMETER(DB1.DT_Movement_Number);
 PARAMETER(DB1.DT_Truck_ID);
 PARAMETER(DB1.DT_Trailer_ID);
 PARAMETER(DB1.DT_Transportation_Office);
 PARAMETER(DB1.DT_Transprtn_Office_Date);
 PARAMETER(DB1.DT_Transprtn_Office_Time);
 PARAMETER(DB1.DT_Arrive@Frm_v_StartLd);
 PARAMETER(DB1.DT_On_Time_Farm_Arrvl_Sts);
 PARAMETER(DB1.DT_Route_Start_Pnt);
 PARAMETER(DB1.DT_Route_Start_Date);
 PARAMETER(DB1.DT_Route_Start_Time);
 PARAMETER(DB1.DT_Route_Start_Variance);
 PARAMETER(DB1.DT_Wait_@_Transp_Offc_Tm);
 PARAMETER(DB1.DT_Arrive_@_Farm_Date);
 PARAMETER(DB1.DT_Arrive_@_Farm_Time);
 PARAMETER(DB1.DT_Drive_Time_To_Farm);
 PARAMETER(DB1.DT_Start_Loading_Date);
 PARAMETER(DB1.DT_Start_Loading_Time);
 PARAMETER(DB1.DT_Start_Loading_Variance);
 PARAMETER(DB1.DT_Wait_@_Farm);
 PARAMETER(DB1.DT_Frm_End_Loading_Date);
 PARAMETER(DB1.DT_Frm_End_Loading_Time);
 PARAMETER(DB1.DT_Load_Time);
 PARAMETER(DB1.DT_Leave_Farm_Date);
 PARAMETER(DB1.DT_Leave_Farm_Time);
 PARAMETER(DB1.DT_Wait_Depart_Frm);
 PARAMETER(DB1.DT_Plt_TrkWsh_Arvl_Date);
 PARAMETER(DB1.DT_Plt_TrkWsh_Arvl_Time);
 PARAMETER(DB1.DT_Arrive_@_Plant_Date);
 PARAMETER(DB1.DT_Arrive_@_Plant_Time);
 PARAMETER(DB1.DT_Wait_@_TrkWsh);
 PARAMETER(DB1.DT_Drive_Time_To_Plant);
 PARAMETER(DB1.DT_Delv_Time_Variance);
 PARAMETER(DB1.DT_On_Time_Delivery);
 PARAMETER(DB1.Delivery_Reason_Code);
 PARAMETER(DB1.DT_TrkScl_Weigh_In_Date);
 PARAMETER(DB1.DT_TrkScl_Weigh_In_Time);
 PARAMETER(DB1.DT_Wait_@_TrkScl);
 PARAMETER(DB1.DT_To_Recv_Dock_Date);
 PARAMETER(DB1.DT_To_Recv_Dock_Time);
 PARAMETER(DB1.DT_Wait_Rcv_Dock);
 PARAMETER(DB1.DT_Start_Unloading_Date);
 PARAMETER(DB1.DT_Start_Unloading_Time);
 PARAMETER(DB1.DT_Wait_@_Rcv_Dock);
 PARAMETER(DB1.DT_End_Unload_Date);
 PARAMETER(DB1.DT_End_Unload_Time);
 PARAMETER(DB1.DT_Unload_Time);
 PARAMETER(DB1.DT_Unload_Variance_Time);
 PARAMETER(DB1.DT_TrkScl_Weigh_Out_Date);
 PARAMETER(DB1.DT_TrkScl_Weigh_Out_Time);
 PARAMETER(DB1.DT_Wait_Time_@_the_Plant);
 PARAMETER(DB1.DT_Formula_Wait_Tm_@_Plt);
 PARAMETER(DB1.DT_Source_Type);
 PARAMETER(DB1.DT_GATE_UPDATE_YES);
 PARAMETER(DB1.DT_Unused_Date);
 PARAMETER(DB1.DT_Unused_Time);
 PARAMETER(DB1.DT_Unused_Wait_Time);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.SR_Source_Code);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

 ENDIF;

}


