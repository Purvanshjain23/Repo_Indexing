// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKIPPVR
// ?Date: 14.08.2025 Time: 02:51:48
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?E4154 JJH 07/28/15 - Pen and Tattoo Scale Ticket Modifications
//?- New logic to determine if Pen Max Capacity Exceeded
//?H16853 ISE 01/23/21 - Increased the length from 5 to 7 and corrected the
//?                      alignment of Buy Order Number field.
ENDDO;

EXECUTE FUNCTION(HPE086 Live Scale Interf) TYPE(EXCINTFUN)                      AB1194880;
{
 //?Execute internal function

 //?03/31/97  SLM  LIVE SCALE INTERFACE Using the AS/400
 //?               replace all of the pc get weight routines
}


// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


//?USER: Load screen

// DTL.Pen Number = PAR.Pen Number
DTL.Pen_Number = PAR.Pen_Number;

EXECUTE FUNCTION(Rtv Hog Class Type    RT) TYPE(RTVOBJ) FILE(PKA8REP)           AB1144394;
PARAMETER(DTL.HC_Class_Code);
PARAMETER(DTL.HC_Class_Type_Desc_Usr);
PARAMETER(WRK.HC_Class_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// DTL.TH Hog Class Type = WRK.HC Class Type
DTL.TH_Hog_Class_Type = WRK.HC_Class_Type;

// PAR.TH Hog Class Type = WRK.HC Class Type
PAR.TH_Hog_Class_Type = WRK.HC_Class_Type;

// DTL.Defect Desc 15        USR = Condition name of PAR.DF Defect Code
DTL.Defect_Desc_15_USR = RTVCND(PAR.DF_Defect_Code);

//?USER: Process command keys

CASE;

// IF PGM.*Cursor field <IS> DTL.Pen Number
IF PGM.*Cursor_field = DTL.Pen_Number;

// AND DTL.*CMD key is CF04
AND DTL.*CMD_key = '04';

// Call program Sel Pen Open/Hc Type  SR.
CALL PROGRAM(Sel Pen Open/Hc Type  SR) ('PKJWSRR');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.Pen_Number);
PARAMETER(WRK.HC_Class_Type);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Pen Number is Pen Number is Empty
IF DTL.Pen_Number = *BLANK;

// Call program Sel Pen Open/Hc Type  SR.
CALL PROGRAM(Sel Pen Open/Hc Type  SR) ('PKJWSRR');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.Pen_Number);
PARAMETER(WRK.HC_Class_Type);

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv Val Pen,Type,Cap  RT) TYPE(RTVOBJ) FILE(PKA3REP)           AB1262045;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.Pen_Number);
PARAMETER(WRK.Pen_Maximun_Capacity);
PARAMETER(WRK.Pen_Current_Head);
PARAMETER(WRK.Pen_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Pen &1 must have an Open status.'
ERROR(PRK0361);
MSGPARM(DTL.Pen_Number);

ENDIF;

CASE;

// IF PAR.TH Hog Class Type NE WRK.Pen Type
IF PAR.TH_Hog_Class_Type <> WRK.Pen_Type;

// Send error message - 'Pen &1 type &3 not the same as the tattoo class type &2.'
ERROR(PRK0606);
MSGPARM(DTL.Pen_Number);
MSGPARM(WRK.HC_Class_Type);
MSGPARM(WRK.Pen_Type);

ENDIF;

//?E4154 JJH 07/28/15 - New logic to determine if Pen Max Capacity
//?  Exceeded.
CASE;

// IF DTL.TST Head is Not Zero
IF DTL.TST_Head <> *ZERO;

// Call program Clc Pen Max Capacity  XF.
CALL PROGRAM(Clc Pen Max Capacity  XF) ('PLXNXFR');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.Pen_Number);
PARAMETER(DTL.TST_Head);
PARAMETER(NLL.Pen_Tto_Scl_Tkt_Head_USR);
PARAMETER(LCL.Pen_Exceeds_Max_Cap_USR);

CASE;

// IF LCL.Pen Exceeds Max Cap USR is Yes
IF LCL.Pen_Exceeds_Max_Cap_USR = 'Y';

// Send error message - 'Pen &1 max capacity will be exceeded. Choose another pen.'
ERROR(PRK1124);
MSGPARM(DTL.Pen_Number);

ENDIF;

ENDIF;

//?USER: User defined action

//?insert ww pen avail and new program
CASE;

// IF DTL.*CMD key is CF16
IF DTL.*CMD_key = '16';

// Call program WW Pen Availability   DF.
CALL PROGRAM(WW Pen Availability   DF) ('PKGGDFR');

// IF DTL.*CMD key is CF03
IF DTL.*CMD_key = '03';

// IF *OTHERWISE
IF *OTHERWISE;

//?Send Pen and tattoo number to screen
DO;

//?***********   Send Pen and Tattoo number in big image *********
//?GET DEVICE FOR BIG CHARS
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER('HPEBIGCHR');
PARAMETER(WRK.System_Value_Alpha_USR);

// WRK.Device Id Usr = WRK.System Value Alpha    USR
WRK.Device_Id_Usr = WRK.System_Value_Alpha_USR;

// WRK.Tattoo Nbr 4          USR = DTL.TH Tattoo Number
WRK.Tattoo_Nbr_4_USR = DTL.TH_Tattoo_Number;

// WRK.Tattoo Nbr Alpha 4    USR = CVTVAR(WRK.Tattoo Nbr 4          USR)
WRK.Tattoo_Nbr_Alpha_4_USR = CVTVAR(WRK.Tattoo_Nbr_4_USR);

//?Send big pen numbers and tattoo numbers
// Execute command - 'Snd Big Pen Big Tattoo'
EXECUTE COMMAND(PRK0718);
PARAMETER(WRK.Device_Id_Usr);
PARAMETER(WRK.Tattoo_Nbr_Alpha_4_USR);
PARAMETER(DTL.Pen_Number);

//?***********   Send Pen and Tattoo number in big image *********
ENDDO;

//?Weightment Processing
DO;

//?*****************   Weightment Processing  ********************
//? 1. Set Weightment processing to Yes & repeat while Yes
// WRK.Weightment in process Usr = CND.Yes
WRK.Weightment_in_process_Usr = 'Y';

//? 2. Find the Next Seq# and Create the (Shell) of Tattoo Scale
//? 3. Perform the Accept Weightment screen, pass the fields
//?      from the Tattoo Scale record as Both
//?    * If F22 Update the Tattoo scale record
//?             Validate and write any warning errors
//?             to the Tattoo Scale Message file
//?          *  If errors perform the Display of the
//?             the Tattoo Scale Message, pass in parms of the
//?             the Tattoo Scale record.
//?          *  If no errors exit back to the WW Scale Weight
//?             Set Weightment processing to end
//?    * If F03 End Weightment routine delete the Tattoo Scale
//?             record and stay on the Get Weightment screen
//?*****************   Weightment Processing  ********************
//?Weightment Processing
// DOW WRK.Weightment in process Usr is Yes
DOW WRK.Weightment_in_process_Usr = 'Y';

// WRK.TST Wgt = CON.*ZERO
WRK.TST_Wgt = *ZERO;

// WRK.TST Wgt Date = CON.*ZERO
WRK.TST_Wgt_Date = *ZERO;

// WRK.TST Wgt Time = CON.*ZERO
WRK.TST_Wgt_Time = *ZERO;

// WRK.TST Wgt Hour = CON.*ZERO
WRK.TST_Wgt_Hour = *ZERO;

// WRK.TST Last Zero Date = CON.*ZERO
WRK.TST_Last_Zero_Date = *ZERO;

// WRK.TST Last Zero Time = CON.*ZERO
WRK.TST_Last_Zero_Time = *ZERO;

EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKB3CPP)           AB1194926;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(WRK.TST_Sequence_Number);
{
 //?USER: Processing if Data record not found

 // PAR.TST Sequence Number = CON.1
 PAR.TST_Sequence_Number = 1;

 //?USER: Process Data record

 // PAR.TST Sequence Number = DB1.TST Sequence Number + CON.1
 PAR.TST_Sequence_Number = DB1.TST_Sequence_Number + 1;

 QUIT;

}


EXECUTE FUNCTION(Crt Tattoo Scale Tkt  CR) TYPE(CRTOBJ) FILE(PKB3CPP)           AB1113769;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(WRK.TST_Sequence_Number);
PARAMETER(DTL.TST_Head);
PARAMETER(WRK.TST_Wgt);
PARAMETER(WRK.TST_Wgt_Date);
PARAMETER(WRK.TST_Wgt_Time);
PARAMETER(WRK.TST_Wgt_Hour);
PARAMETER(WRK.TST_Last_Zero_Date);
PARAMETER(WRK.TST_Last_Zero_Time);
PARAMETER('P');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.Pen_Number);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(JOB.*JOB);
PARAMETER(JOB.*PROGRAM);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


// WRK.*Return code = CND.*Normal
WRK.*Return_code = *BLANK;

//?  Allow user to display the accept screen then wait for F22
// Call program Pmt Accept Tattoo Wgt PV.
CALL PROGRAM(Pmt Accept Tattoo Wgt PV) ('PKIRPVR');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.TH_Hog_Class_Type);
PARAMETER(DTL.DF_Defect_Code);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(DTL.Name_USR);
PARAMETER(DTL.PD_Name);
PARAMETER(DTL.PL_Name);
PARAMETER(WRK.TST_Sequence_Number);
PARAMETER(DTL.TST_Head);
PARAMETER(WRK.TST_Wgt);
PARAMETER(WRK.TST_Wgt_Date);
PARAMETER(WRK.TST_Wgt_Time);
PARAMETER(WRK.TST_Wgt_Hour);
PARAMETER(WRK.TST_Last_Zero_Date);
PARAMETER(WRK.TST_Last_Zero_Time);
PARAMETER(DTL.Pen_Number);
PARAMETER(WRK.*Return_code);

//?Check which Function key user selected
CASE;

// IF WRK.*Return code is Accept Record
IF WRK.*Return_code = 'ACCPTRC';

//?Function 22 was selected from the accept pgm
EXECUTE FUNCTION(Chg Accpt Tattoo Scl  CH) TYPE(CHGOBJ) FILE(PKB3CPP)           AB1195039;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(WRK.TST_Sequence_Number);
PARAMETER(WRK.TST_Wgt);
PARAMETER(WRK.TST_Wgt_Date);
PARAMETER(WRK.TST_Wgt_Time);
PARAMETER(WRK.TST_Wgt_Hour);
PARAMETER(WRK.TST_Last_Zero_Date);
PARAMETER(WRK.TST_Last_Zero_Time);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
PARAMETER(JOB.*JOB);
PARAMETER(JOB.*PROGRAM);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


// WRK.TSTM Message Seq = CON.*ZERO
WRK.TSTM_Message_Seq = *ZERO;

//?Calculate average weight
CASE;

// IF DTL.TST Head is Not Zero
IF DTL.TST_Head <> *ZERO;

// WRK.Avg Live Wgt Usr Rep = WRK.TST Wgt / DTL.TST Head *
WRK.Avg_Live_Wgt_Usr_Rep = WRK.TST_Wgt / DTL.TST_Head;

//?Calculate average weight
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Avg Live Wgt Usr Rep = CON.*ZERO
WRK.Avg_Live_Wgt_Usr_Rep = *ZERO;

ENDIF;

// Call program Val Weightment Record  XF.
CALL PROGRAM(Val Weightment Record  XF) ('PKIVXFR');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(WRK.TST_Sequence_Number);
PARAMETER(DTL.TST_Head);
PARAMETER(WRK.TST_Wgt);
PARAMETER(WRK.TST_Wgt_Date);
PARAMETER(WRK.TST_Wgt_Time);
PARAMETER(WRK.TST_Last_Zero_Date);
PARAMETER(WRK.TST_Last_Zero_Time);
PARAMETER('P');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.Pen_Number);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
PARAMETER(WRK.TSTM_Message_Seq);
PARAMETER(WRK.Avg_Live_Wgt_Usr_Rep);
PARAMETER(DTL.TST_Val_Ms_Tme_Df_Txt_Us);
PARAMETER(DTL.TST_Val_Ms_Tme_Df_Val_Us);
PARAMETER(DTL.TST_Val_Ms_LTme_Lm_Txt_Us);
PARAMETER(DTL.TST_Val_Ms_LTme_Lm_Val_Us);
PARAMETER(DTL.TST_Val_Ms_#_Wt_Lm_Txt_Us);
PARAMETER(DTL.TST_Val_Ms_#_Wt_Lm_Val_Us);
PARAMETER(DTL.TST_Val_Ms_ALW_Min_Txt_Us);
PARAMETER(DTL.TST_VAl_Ms_ALW_MiN_Val_Us);
PARAMETER(DTL.TST_Val_Ms_ALW_Max_Txt_Us);
PARAMETER(DTL.TST_VAl_Ms_ALW_Max_Val_Us);
PARAMETER(JOB.*Job_time);

//?If warning message(s) then perform display of these messages.
CASE;

// IF WRK.TSTM Message Seq GT WRK.Zero USR
IF WRK.TSTM_Message_Seq > WRK.Zero_USR;

//?pgm to display messages
// WRK.*Return code = CND.*Normal
WRK.*Return_code = *BLANK;

// Call program Dsp Weighment Messages DF.
CALL PROGRAM(Dsp Weighment Messages DF) ('PKISDFR');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(WRK.TST_Sequence_Number);
PARAMETER(DTL.TST_Head);
PARAMETER(WRK.TST_Wgt);
PARAMETER(WRK.TST_Wgt_Date);
PARAMETER(WRK.TST_Wgt_Time);
PARAMETER(WRK.TST_Last_Zero_Date);
PARAMETER(WRK.TST_Last_Zero_Time);
PARAMETER(DTL.Pen_Number);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(DTL.Name_USR);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.PD_Name);
PARAMETER(DTL.PL_Name);
PARAMETER(DTL.HC_Class_Code);
PARAMETER(DTL.DF_Defect_Code);
PARAMETER(WRK.*Return_code);
PARAMETER(WRK.Avg_Live_Wgt_Usr_Rep);
PARAMETER('R');

CASE;

// IF WRK.*Return code is Re-Weigh
IF WRK.*Return_code = 'REWEIGH';

EXECUTE FUNCTION(Rtv Re-Weight Record   RT) TYPE(RTVOBJ) FILE(PKB3CPP)          AB1195034;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(WRK.TST_Sequence_Number);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKDVCPP)           AB1195140;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.TSP_Sequence_Number);
 {
  //?USER: Processing if Data record not found

  // PAR.TSP Sequence Number = CON.1
  PAR.TSP_Sequence_Number = 1;

  //?USER: Process Data record

  // PAR.TSP Sequence Number = DB1.TSP Sequence Number + CON.1
  PAR.TSP_Sequence_Number = DB1.TSP_Sequence_Number + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Tattoo Scale Purge CR) TYPE(CRTOBJ) FILE(PKDVCPP)          AB1194833;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.TSP_Sequence_Number);
 PARAMETER(DB1.TST_Wgt_Date);
 PARAMETER(DB1.TST_Wgt_Time);
 PARAMETER(DB1.TST_Last_Zero_Date);
 PARAMETER(DB1.TST_Last_Zero_Time);
 PARAMETER(DB1.TST_Head);
 PARAMETER(DB1.Pen_Company_Number);
 PARAMETER(DB1.Pen_Number);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 EXECUTE FUNCTION(RTV Re-Wgt Weightment Rt) TYPE(RTVOBJ) FILE(PKDUCPP)           AB1195025;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TST_Sequence_Number);
 PARAMETER(WRK.TSP_Sequence_Number);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Crt Tattoo Scl Purge   CR) TYPE(CRTOBJ) FILE(PKDWCPP)          AB1194844;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(PAR.TSP_Sequence_Number);
  PARAMETER(DB1.TSTM_Message_Seq);
  PARAMETER(DB1.TSTM_Message);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  EXECUTE FUNCTION(Dlt Tattoo Scl Tck Msg DO) TYPE(DLTOBJ) FILE(PKDUCPP)          AB1194812;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TST_Sequence_Number);
  PARAMETER(DB1.TSTM_Message_Seq);
 }

 EXECUTE FUNCTION(Delete Tattoo Scale Ticke) TYPE(DLTOBJ) FILE(PKB3CPP)          AB1113771;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TST_Sequence_Number);
}


// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Weightment in process Usr = CND.Blank
WRK.Weightment_in_process_Usr = *BLANK;

RETURN;

ENDIF;

//?If warning message(s) then perform display of these messages.
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.TSTM Message = CON.*BLANK
WRK.TSTM_Message = *BLANK;

// Retrieve message - 'Pass Validation &2 = &1'
WRK.TSTM_Message = RTVMSG(PRK0731);
PARAMETER(JOB.*Job_time);
PARAMETER(JOB.*Job_date);

// WRK.TSTM Message Seq = WRK.TSTM Message Seq + CON.1
WRK.TSTM_Message_Seq = WRK.TSTM_Message_Seq + 1;

EXECUTE FUNCTION(Crt Tattoo Scl Tck Msg CR) TYPE(CRTOBJ) FILE(PKDUCPP)          AB1194810;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(WRK.TST_Sequence_Number);
PARAMETER(WRK.TSTM_Message_Seq);
PARAMETER(WRK.TSTM_Message);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(JOB.*JOB);
PARAMETER(JOB.*PROGRAM);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


// WRK.Weightment in process Usr = CND.Blank
WRK.Weightment_in_process_Usr = *BLANK;

RETURN;

ENDIF;

//?Check which Function key user selected
// IF WRK.*Return code is *Normal
IF WRK.*Return_code = *BLANK;

//?Function 3 was selected from the accept pgm
EXECUTE FUNCTION(Rtv Re-Weight Record   RT) TYPE(RTVOBJ) FILE(PKB3CPP)          AB1195034;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(WRK.TST_Sequence_Number);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKDVCPP)           AB1195140;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.TSP_Sequence_Number);
 {
  //?USER: Processing if Data record not found

  // PAR.TSP Sequence Number = CON.1
  PAR.TSP_Sequence_Number = 1;

  //?USER: Process Data record

  // PAR.TSP Sequence Number = DB1.TSP Sequence Number + CON.1
  PAR.TSP_Sequence_Number = DB1.TSP_Sequence_Number + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Tattoo Scale Purge CR) TYPE(CRTOBJ) FILE(PKDVCPP)          AB1194833;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.TSP_Sequence_Number);
 PARAMETER(DB1.TST_Wgt_Date);
 PARAMETER(DB1.TST_Wgt_Time);
 PARAMETER(DB1.TST_Last_Zero_Date);
 PARAMETER(DB1.TST_Last_Zero_Time);
 PARAMETER(DB1.TST_Head);
 PARAMETER(DB1.Pen_Company_Number);
 PARAMETER(DB1.Pen_Number);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 EXECUTE FUNCTION(RTV Re-Wgt Weightment Rt) TYPE(RTVOBJ) FILE(PKDUCPP)           AB1195025;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TST_Sequence_Number);
 PARAMETER(WRK.TSP_Sequence_Number);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Crt Tattoo Scl Purge   CR) TYPE(CRTOBJ) FILE(PKDWCPP)          AB1194844;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(PAR.TSP_Sequence_Number);
  PARAMETER(DB1.TSTM_Message_Seq);
  PARAMETER(DB1.TSTM_Message);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  EXECUTE FUNCTION(Dlt Tattoo Scl Tck Msg DO) TYPE(DLTOBJ) FILE(PKDUCPP)          AB1194812;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TST_Sequence_Number);
  PARAMETER(DB1.TSTM_Message_Seq);
 }

 EXECUTE FUNCTION(Delete Tattoo Scale Ticke) TYPE(DLTOBJ) FILE(PKB3CPP)          AB1113771;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TST_Sequence_Number);
}


// WRK.Weightment in process Usr = CND.Blank
WRK.Weightment_in_process_Usr = *BLANK;

ENDIF;

// WRK.*Return code = CND.*Normal
WRK.*Return_code = *BLANK;

ENDDO;

ENDDO;

ENDIF;

