// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDX9PFR
// ?Date: 14.08.2025 Time: 12:04:48
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

// WRK.Print (Yes/No) USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

// WRK.Display Flag = CND.Yes
WRK.Display_Flag = 'Y';

// LCL.USR Display 5 = CND.No
LCL.USR_Display_5 = 'N';

EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
PARAMETER(PAR.Company_Number);
PARAMETER('HOLDOVERBX');
PARAMETER(LCL.USR_From_Time_6_0);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
PARAMETER(PAR.Company_Number);
PARAMETER('HOLDOVERCB');
PARAMETER(LCL.USR_To_Time_6_0);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Record selection processing

//?Missed Deadline - report type 2
CASE;

// IF PAR.Daily HoldOver Rpt Type is Missed Deadline +12 Hours
IF PAR.Daily_HoldOver_Rpt_Type = '2';

EXECUTE FUNCTION(VAL Any Inv Ord on Ld  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1494020;
PARAMETER(DB1.Load_ID);
PARAMETER(PAR.Record_Found_USR);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 //?record not found means all orders on load are transfers
 //?record found means there's 1+ orders on load which are not transfers
 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF DB1.Billing Activity Type is Invoice
 IF DB1.Billing_Activity_Type = '1';

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

 ENDIF;

}


//?If all orders on load are transfers, exclude load
CASE;

// IF PAR.Record Found USR is Record Not Found
IF PAR.Record_Found_USR = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Company select
CASE;

// IF PGM.*Record selected is *NO
IF PGM.*Record_selected = 'N';

//?Company select
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Company Number is greater than zero
IF PAR.Company_Number > *ZERO;

// AND DB1.Company Number NE PAR.Company Number
AND DB1.Company_Number <> PAR.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV UM/Whs Code,BX Qty RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1625242;
PARAMETER(*ZERO);
PARAMETER(DB1.Load_ID);
PARAMETER(LCL.U_M_Ordered);
PARAMETER(LCL.Boxes_Total_Quantity);
{
 //?USER: Initialize routine

 //?05/13/04 SLM PKTR01 Multi-Company - Funt chg to rmv Co RST or Pos
 // PAR.USR Unit of Measure = CON.*BLANK
 PAR.USR_Unit_of_Measure = *BLANK;

 // WRK.First Time Flag = CND.Yes
 WRK.First_Time_Flag = 'Y';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV UM/Whs Code,BX Qty RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1625244;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(1);
 PARAMETER(PAR.USR_Unit_of_Measure);
 PARAMETER(PAR.Boxes_Total_Quantity);
 {
  //?USER: Initialize routine

  // WRK.First Time Flag = CND.Yes
  WRK.First_Time_Flag = 'Y';

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  QUIT;

  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?S17054 DN 04/08/21-Beyond this point, changed all 'U/M - Ordered'
  //?  to reference LCL Context instead of DB1.
  //?S17054 DN 04/08/21-Count Type 'Cases' (CS) as 'Boxes' (BX).
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.U/M - Ordered = DB1.U/M - Ordered
  LCL.U_M_Ordered = DB1.U_M_Ordered;

  CASE;

  // IF LCL.U/M - Ordered is Cases
  IF LCL.U_M_Ordered = 'CS';

  // LCL.U/M - Ordered = CND.EQ Boxes
  LCL.U_M_Ordered = 'BX';

  ENDIF;

  ENDIF;

  //?Accumulate the Box Quantity for slotting consideration  6/12/01
  CASE;

  // IF LCL.U/M - Ordered is EQ Boxes
  IF LCL.U_M_Ordered = 'BX';

  // PAR.Boxes Total Quantity = PAR.Boxes Total Quantity + DB1.Quantity Ordered
  PAR.Boxes_Total_Quantity = PAR.Boxes_Total_Quantity + DB1.Quantity_Ordered;

  ENDIF;

  CASE;

  // IF PAR.USR Unit of Measure is *Blank
  IF PAR.USR_Unit_of_Measure = *BLANK;

  // PAR.USR Unit of Measure = LCL.U/M - Ordered
  PAR.USR_Unit_of_Measure = LCL.U_M_Ordered;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF LCL.U/M - Ordered EQ PAR.USR Unit of Measure
  IF LCL.U_M_Ordered = PAR.USR_Unit_of_Measure;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.USR Unit of Measure = CND.Mixed
  PAR.USR_Unit_of_Measure = 'MX';

  ENDIF;

  ENDIF;

  ENDIF;

 }

 //?USER: Exit processing

 //?RMC E2709 added here so it wont need to be in every calling pgm
 CASE;

 // IF PAR.USR Unit of Measure is Mixed
 IF PAR.USR_Unit_of_Measure = 'MX';

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(DB1.Company_Number);
 PARAMETER('BOXLOAD');
 PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
 IF PAR.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

 // PAR.USR Unit of Measure = CND.Combos
 PAR.USR_Unit_of_Measure = 'CB';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Unit of Measure = CND.Boxed
 PAR.USR_Unit_of_Measure = 'BX';

 ENDIF;

 ENDIF;

}


//?S00623 RMC allow til next day after 1am before considering a load heldover
//?* If Report Type is All Holdovers
CASE;

// IF PAR.Daily HoldOver Rpt Type is All Holdovers
IF PAR.Daily_HoldOver_Rpt_Type = '1';

// LCL.Date                  USR = DB1.Scheduled Ship Date + CON.1 *DAYS
LCL.Date_USR = DATEINCR(DB1.Scheduled_Ship_Date 1 'DY' 1111111 'NONE' 'N' 1);

//?E00526 11/05/09 compare to company value time instead of hardcoded 1am
//?BOL Complete Date/Time
CASE;

// IF DB1.BOL Complete Date EQ LCL.Date                  USR
IF DB1.BOL_Complete_Date = LCL.Date_USR;

CASE;

// IF LCL.U/M - Ordered is EQ Boxes
IF LCL.U_M_Ordered = 'BX';

CASE;

// IF DB1.BOL Complete Time LT LCL.USR From Time 6.0
IF DB1.BOL_Complete_Time < LCL.USR_From_Time_6_0;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.BOL Complete Time LT LCL.USR To Time 6.0
IF DB1.BOL_Complete_Time < LCL.USR_To_Time_6_0;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?04/01/09 PKD E00380 If the Load departed before 1:00am the next
//?   day, then it's not a holdover. ** Compare to Comp value 11/05/09
//?Truck Departure Date = Scheduled Ship Date
CASE;

// IF DB1.Truck Departure Date EQ DB1.Scheduled Ship Date
IF DB1.Truck_Departure_Date = DB1.Scheduled_Ship_Date;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Truck Departure Date = Scheduled Ship Date + 1 & Time < 01:00:00
CASE;

// IF DB1.Truck Departure Date EQ LCL.Date                  USR
IF DB1.Truck_Departure_Date = LCL.Date_USR;

CASE;

// IF LCL.U/M - Ordered is EQ Boxes
IF LCL.U_M_Ordered = 'BX';

CASE;

// IF DB1.Truck Departure Time LT LCL.USR From Time 6.0
IF DB1.Truck_Departure_Time < LCL.USR_From_Time_6_0;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.Truck Departure Time LT LCL.USR To Time 6.0
IF DB1.Truck_Departure_Time < LCL.USR_To_Time_6_0;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?* If Req Deliv Date Target Date passed, only select if matching E003072
CASE;

// IF PGM.*Record selected is *NO
IF PGM.*Record_selected = 'N';

//?* If Req Deliv Date Target Date passed, only select if matching E003072
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Date In is Entered
IF PAR.Date_In <> *ZERO;

CASE;

// IF PAR.Date In NE DB1.Requested Delivery Date
IF PAR.Date_In <> DB1.Requested_Delivery_Date;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?* If Carrier Code is passed in, only select if matching   E003914
CASE;

// IF PGM.*Record selected is *NO
IF PGM.*Record_selected = 'N';

//?* If Carrier Code is passed in, only select if matching   E003914
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Carrier Code Usr is entered
IF PAR.Carrier_Code_Usr <> *BLANK;

CASE;

// IF PAR.Carrier Code Usr NE DB1.Carrier Code
IF PAR.Carrier_Code_Usr <> DB1.Carrier_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?USER: Process top of page

// TOP.Company Number = PAR.Company Number
TOP_Company_Number = PAR.Company_Number;

//?Company selected
CASE;

// IF TOP.Company Number is greater than zero
IF TOP_Company_Number > *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(TOP_Company_Number);
PARAMETER(TOP_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Company selected
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Name = CON.*ALL
TOP_Name = *ALL;

ENDIF;

// TOP.Scheduled Ship Date = PAR.Scheduled Ship Date
TOP_Scheduled_Ship_Date = PAR.Scheduled_Ship_Date;

// TOP.Daily HoldOver Rpt Type = PAR.Daily HoldOver Rpt Type
TOP_Daily_HoldOver_Rpt_Type = PAR.Daily_HoldOver_Rpt_Type;

// TOP.Condition Desc. 1  USR = Condition name of TOP.Daily HoldOver Rpt Type
TOP_Condition_Desc_1_USR = RTVCND(TOP_Daily_HoldOver_Rpt_Type);

// TOP.Time In = PAR.Time In
TOP_Time_In = PAR.Time_In;

// TOP.Thru Date             USR = PAR.Thru Date             USR
TOP_Thru_Date_USR = PAR.Thru_Date_USR;

// TOP.Time Out = PAR.USR Time
TOP_Time_Out = PAR.USR_Time;

//?* Put passed in delivery date in the heading          E003072
//?* This date will affect records selected from the load header
// TOP.Date In = PAR.Date In
TOP_Date_In = PAR.Date_In;

// TOP.Carrier Code Usr = PAR.Carrier Code Usr
TOP_Carrier_Code_Usr = PAR.Carrier_Code_Usr;

// WRK.Print Selections = CND.No
WRK.Print_Selections = 'N';

// WRK.Display Flag = CND.No
WRK.Display_Flag = 'N';

//?Business day process
CASE;

// IF TOP.Daily HoldOver Rpt Type is Business Day 0600-0559 am
IF TOP_Daily_HoldOver_Rpt_Type = '3';

// TOP.Text USR 20 = CON.Deadline Depart Date
TOP_Text_USR_20 = 'Deadline Depart Date';

CASE;

// IF WRK.Print (Yes/No) USR is Yes
IF WRK.Print_Yes_No_USR = 'Y';

// WRK.Print Selections = CND.Yes
WRK.Print_Selections = 'Y';

ENDIF;

//?Business day process
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Text USR 20 = CON.Scheduled Ship Date
TOP_Text_USR_20 = 'Scheduled Ship Date';

ENDIF;

//?Set up warehouses
CASE;

// IF PAR.USR Warehouse Code is Warehouse Code Blank
IF PAR.USR_Warehouse_Code = *BLANK;

// AND PAR.USR CDE Parm 1 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_1 = *BLANK;

// AND PAR.USR CDE Parm 2 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_2 = *BLANK;

// AND PAR.USR CDE Parm 3 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_3 = *BLANK;

// AND PAR.USR CDE Parm 4 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_4 = *BLANK;

// AND PAR.USR CDE Parm 5 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_5 = *BLANK;

// AND PAR.USR CDE Parm 6 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_6 = *BLANK;

// AND PAR.USR CDE Parm 7 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_7 = *BLANK;

// AND PAR.USR CDE Parm 8 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_8 = *BLANK;

// AND PAR.USR CDE Parm 9 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_9 = *BLANK;

// TOP.Warehouse 1 USR = CON.ALL
TOP_Warehouse_1_USR = 'ALL';

//?Set up warehouses
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Warehouse 1 USR = PAR.USR Warehouse Code
TOP_Warehouse_1_USR = PAR.USR_Warehouse_Code;

// TOP.Warehouse 2 USR = PAR.USR CDE Parm 1
TOP_Warehouse_2_USR = PAR.USR_CDE_Parm_1;

// TOP.Warehouse 3 USR = PAR.USR CDE Parm 2
TOP_Warehouse_3_USR = PAR.USR_CDE_Parm_2;

// TOP.Warehouse 4 USR = PAR.USR CDE Parm 3
TOP_Warehouse_4_USR = PAR.USR_CDE_Parm_3;

// TOP.Warehouse 5 USR = PAR.USR CDE Parm 4
TOP_Warehouse_5_USR = PAR.USR_CDE_Parm_4;

// TOP.Warehouse 6 USR = PAR.USR CDE Parm 5
TOP_Warehouse_6_USR = PAR.USR_CDE_Parm_5;

// TOP.Warehouse 7 USR = PAR.USR CDE Parm 6
TOP_Warehouse_7_USR = PAR.USR_CDE_Parm_6;

// TOP.Warehouse 8 USR = PAR.USR CDE Parm 7
TOP_Warehouse_8_USR = PAR.USR_CDE_Parm_7;

// TOP.Warehouse 9 USR = PAR.USR CDE Parm 8
TOP_Warehouse_9_USR = PAR.USR_CDE_Parm_8;

// TOP.Warehouse 10 USR = PAR.USR CDE Parm 9
TOP_Warehouse_10_USR = PAR.USR_CDE_Parm_9;

ENDIF;

// TOP.USR Desc. 10 = Condition name of PAR.USR Select/Omit Flag
TOP_USR_Desc_10 = RTVCND(PAR.USR_Select_Omit_Flag);

//?* Put *ALL in Carrier Code name if carrier code is blank   3914
CASE;

// IF TOP.Carrier Code Usr is entered
IF TOP_Carrier_Code_Usr <> *BLANK;

EXECUTE FUNCTION(RTV Active Carr Name   RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1447369;
PARAMETER(TOP_Carrier_Code_Usr);
PARAMETER(TOP_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?* Put *ALL in Carrier Code name if carrier code is blank   3914
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Carrier Name DRV = CON.*ALL
TOP_Carrier_Name_DRV = *ALL;

ENDIF;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

CASE;

IF NEW Ship_From_Warehouse;
// SUPPRESSED PRINT Ship From Warehouse header format

ENDIF;

// SUPPRESSED PRINT Scheduled Ship Date header format

// SUPPRESSED PRINT Load ID header format

//?USER: On print of detail format

// WRK.Print (Yes/No) USR = CND.No
WRK.Print_Yes_No_USR = 'N';

//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : PRT Daily Holdover Dtl PO
EXECUTE FUNCTION(RTV Last Stop on Load  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1460990;
PARAMETER(CUR.Load_ID);
PARAMETER(WRK.Stop_Drop);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?** Pass Override miles, if entered                 E00207
CASE;

// IF DB1.Override Total Load Miles is Entered
IF DB1.Override_Total_Load_Miles <> *ZERO;

// CUR.Total Load Miles = DB1.Override Total Load Miles
CUR.Total_Load_Miles = DB1.Override_Total_Load_Miles;

//?** Pass Override miles, if entered                 E00207
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Total Load Miles = DB1.Total Load Miles
CUR.Total_Load_Miles = DB1.Total_Load_Miles;

ENDIF;

EXECUTE FUNCTION(PRT Daily Holdover Dtl PO) TYPE(PRTOBJ);
PARAMETER(CUR.Load_ID);
PARAMETER(WRK.Stop_Drop);
PARAMETER(CUR.Scheduled_Ship_Date);
PARAMETER(CUR.Trailer_Id);
PARAMETER(CUR.Carrier_Code);
PARAMETER(CUR.Schedule_Sequence_Number);
PARAMETER(CUR.Total_Load_Miles);
PARAMETER(CUR.Ship_From_Warehouse);
PARAMETER(CUR.Load_Finished_Date);
PARAMETER(CUR.Load_Finished_Time);
PARAMETER(CUR.BOL_Complete_Date);
PARAMETER(CUR.BOL_Complete_Time);
PARAMETER(CUR.Truck_Departure_Date);
PARAMETER(CUR.Truck_Departure_Time);
PARAMETER(CUR.Deadline_Departure_Date);
PARAMETER(CUR.Deadline_Departure_Time);
PARAMETER(CUR.LH_On_Time_Reason_Code);
PARAMETER(CUR.LH_Held_Over_Rsn_Cmt);
PARAMETER(CUR.LH_Held_Over_Reason);
PARAMETER(CUR.BOL_Received_Date);
PARAMETER(CUR.BOL_Received_Time);
PARAMETER(PAR.USR_Warehouse_Code);
PARAMETER(PAR.USR_CDE_Parm_1);
PARAMETER(PAR.USR_CDE_Parm_2);
PARAMETER(PAR.USR_CDE_Parm_3);
PARAMETER(PAR.USR_CDE_Parm_4);
PARAMETER(PAR.USR_CDE_Parm_5);
PARAMETER(PAR.USR_CDE_Parm_6);
PARAMETER(PAR.USR_CDE_Parm_7);
PARAMETER(PAR.USR_CDE_Parm_8);
PARAMETER(PAR.USR_CDE_Parm_9);
PARAMETER(PAR.USR_Select_Omit_Flag);
PARAMETER(LCL.USR_Display_5);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?USER: Print required level totals

// SUPPRESSED PRINT Load ID totals format

// SUPPRESSED PRINT Scheduled Ship Date totals format

// SUPPRESSED PRINT Ship From Warehouse totals format

//?USER: On print of end of report format

//?* Set parm to email if at least one record printed    E004076
CASE;

// IF LCL.USR Display 5 is Yes
IF LCL.USR_Display_5 = 'Y';

// PAR.USR Display 1 = CND.Yes
PAR.USR_Display_1 = 'Y';

ENDIF;

