// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNIKDFR
// ?Date: 14.08.2025 Time: 03:45:16
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?E2490 RMC 3/5/13 Dsp order type and allow select
//?FP1054 new display to show item/orders that are ship off cut for the day
//?FP1054 show not cancelled orders, they want to see shipped
EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('P/S');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

// PGM.*Scan limit = CON.99999
PGM.*Scan_limit = 99999;

//?USER: Initialize subfile control

CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

CASE;

// IF PAR.Company Number is Equal to zero
IF PAR.Company_Number = *ZERO;

// CTL.Company Number = WRK.Company Number
CTL.Company_Number = WRK.Company_Number;

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

ENDIF;

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

ENDIF;

CASE;

// IF PAR.OD Production Date is Entered
IF PAR.OD_Production_Date > *ZERO;

// LCL.Date From             USR = PAR.OD Production Date + CON.-3 *DAYS
LCL.Date_From_USR = DATEINCR(PAR.OD_Production_Date '-3' 'DY' 1111111 'NONE' 'N' 1);

// CTL.OD Production Date = PAR.OD Production Date
CTL.OD_Production_Date = PAR.OD_Production_Date;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Date From             USR = JOB.*Job date + CON.-3 *DAYS
LCL.Date_From_USR = DATEINCR(JOB.*Job_date '-3' 'DY' 1111111 'NONE' 'N' 1);

// CTL.OD Production Date = JOB.*Job date
CTL.OD_Production_Date = JOB.*Job_date;

ENDIF;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize subfile record from DBF record

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(Rtv Sts/Schdshipdate   RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1562482;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(RCD.Detail_Line_Status);
PARAMETER(RCD.Scheduled_Ship_Date_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Chill Time        RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1304403;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(LCL.Fresh_Chilling_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Order Type         RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1564834;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Type_Sales);
{
 //?USER: Process Data record

 // PAR.Order Type - Sales = DB1.Order Type - Sales
 PAR.Order_Type_Sales = DB1.Order_Type_Sales;

 QUIT;

}


//?company
CASE;

// IF DB1.Company Number EQ CTL.Company Number
IF DB1.Company_Number = CTL.Company_Number;

//?company
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?order typ
CASE;

// IF RCD.Order Type - Sales EQ CTL.Order Type - Sales
IF RCD.Order_Type_Sales = CTL.Order_Type_Sales;

// OR CTL.Order Type - Sales is Not Entered
OR CTL.Order_Type_Sales = *BLANK;

//?order typ
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?prod date
CASE;

// IF DB1.OD Production Date EQ CTL.OD Production Date
IF DB1.OD_Production_Date = CTL.OD_Production_Date;

//?prod date
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Sched ship must be today or only 3 days old
CASE;

// IF DB1.Scheduled Ship Date LE CTL.OD Production Date
IF DB1.Scheduled_Ship_Date <= CTL.OD_Production_Date;

// AND DB1.Scheduled Ship Date GE LCL.Date From             USR
AND DB1.Scheduled_Ship_Date >= LCL.Date_From_USR;

//?Sched ship must be today or only 3 days old
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Sched wgt must be > 0
CASE;

// IF DB1.OD Weight Scheduled is Greater than zero
IF DB1.OD_Weight_Scheduled > *ZERO;

//?Sched wgt must be > 0
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Only show orders that are available or on hold- show not cancelled
CASE;

// IF RCD.Detail Line Status is Cancelled
IF RCD.Detail_Line_Status = 'X';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?chill time must be > 0
CASE;

// IF LCL.Fresh Chilling Time is GT Zero
IF LCL.Fresh_Chilling_Time > *ZERO;

//?chill time must be > 0
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(RCD.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Process subfile control (Pre-confirm)

CASE;

// IF CTL.Order Type - Sales NE LCL.Order Type - Sales
IF CTL.Order_Type_Sales <> LCL.Order_Type_Sales;

// LCL.Order Type - Sales = CTL.Order Type - Sales
LCL.Order_Type_Sales = CTL.Order_Type_Sales;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Print List
CASE;

// IF CTL.*CMD key is *Print List
IF CTL.*CMD_key = '21';

// WRK.PRT Night Queue Run Sts = CND.no
WRK.PRT_Night_Queue_Run_Sts = 'N';

// Call program PMT Print Option  SHR  PV.
CALL PROGRAM(PMT Print Option  SHR  PV) ('PDG0PVR');
PARAMETER('Ship off cut report');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(WRK.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);

//?Submit Print
CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

//?Submit Print
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Company Alpha = CVTVAR(CTL.Company Number)
LCL.Company_Alpha = CVTVAR(CTL.Company_Number);

// LCL.Prod Date Alpha USR = CVTVAR(CTL.OD Production Date)
LCL.Prod_Date_Alpha_USR = CVTVAR(CTL.OD_Production_Date);

// Execute command - 'PS Print Schedule Ship Off Cut'
EXECUTE COMMAND(USR4151);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(LCL.Prod_Date_Alpha_USR);
PARAMETER('PRTSHPOFF');
PARAMETER(LCL.Company_Alpha);
PARAMETER(*BLANK);

ENDIF;

ENDIF;

//?Email List
CASE;

// IF CTL.*CMD key is CF22
IF CTL.*CMD_key = '22';

// WRK.PRT Night Queue Run Sts = CND.no
WRK.PRT_Night_Queue_Run_Sts = 'N';

// Call program Pmt Enter Email Addr  PV.
CALL PROGRAM(Pmt Enter Email Addr  PV) ('POWGPVR');
PARAMETER(LCL.Email_Address);

//?Submit Email
CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// OR LCL.Email Address is Blank
OR LCL.Email_Address = *BLANK;

//?Submit Email
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Company Alpha = CVTVAR(CTL.Company Number)
LCL.Company_Alpha = CVTVAR(CTL.Company_Number);

// LCL.Prod Date Alpha USR = CVTVAR(CTL.OD Production Date)
LCL.Prod_Date_Alpha_USR = CVTVAR(CTL.OD_Production_Date);

// Execute command - 'PS Print Schedule Ship Off Cut'
EXECUTE COMMAND(USR4151);
PARAMETER('QPRINT2');
PARAMETER(*NO);
PARAMETER(*NO);
PARAMETER(1);
PARAMETER(*JOBD);
PARAMETER(LCL.Prod_Date_Alpha_USR);
PARAMETER('PRTSHPOFF');
PARAMETER(LCL.Company_Alpha);
PARAMETER(LCL.Email_Address);

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?Display Order
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

EXECUTE FUNCTION(RTV All Header Fields  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1326885;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.Order_Type_Sales);
PARAMETER(WRK.AR_Customer_Number);
PARAMETER(WRK.Ship_To_Customer);
PARAMETER(WRK.Ship_To_Name);
PARAMETER(WRK.Ship_To_Address_Line_1);
PARAMETER(WRK.Ship_To_Address_Line_2);
PARAMETER(WRK.Ship_To_Address_Line_3);
PARAMETER(WRK.Ship_To_City);
PARAMETER(WRK.Ship_To_State_Code);
PARAMETER(WRK.Ship_To_Zip_Postal_Code);
PARAMETER(WRK.Bill_to_Customer);
PARAMETER(WRK.Bill_to_Name);
PARAMETER(WRK.Bill_to_Address_Line_1);
PARAMETER(WRK.Bill_to_Address_Line_2);
PARAMETER(WRK.Bill_to_Address_Line_3);
PARAMETER(WRK.Bill_to_City);
PARAMETER(WRK.Bill_to_State_Code);
PARAMETER(WRK.Bill_to_Zip_Postal_Code);
PARAMETER(WRK.Customer_Purchase_Order_#);
PARAMETER(WRK.Order_Date);
PARAMETER(WRK.Requested_Ship_Date);
PARAMETER(WRK.Actual_Shipped_Date);
PARAMETER(WRK.Cancel_Date);
PARAMETER(WRK.Terms_Code);
PARAMETER(WRK.Special_Instructions);
PARAMETER(WRK.Special_Instructions_2);
PARAMETER(WRK.Carrier_Code);
PARAMETER(WRK.Comment_Print_Acknowledge);
PARAMETER(WRK.Comment_Print_Inv_Cr_Memo);
PARAMETER(WRK.Comment_Print_Pick_Slip);
PARAMETER(WRK.Comment_Print_Ship_Doc);
PARAMETER(WRK.Reason_Code);
PARAMETER(WRK.Order_in_Use);
PARAMETER(WRK.Header_Status);
PARAMETER(WRK.Header_Status_Last);
PARAMETER(WRK.Order_Type_Print_Status);
PARAMETER(WRK.Scheduled_Ship_Date);
PARAMETER(WRK.User_Original_Entry);
PARAMETER(WRK.Date_of_Original_Entry);
PARAMETER(WRK.Order_Value_Total);
PARAMETER(WRK.Order_Weight_Total);
PARAMETER(WRK.Credit_Hold);
PARAMETER(WRK.Production_Hold);
PARAMETER(WRK.New_Customer_Hold);
PARAMETER(WRK.Requested_Delivery_Date);
PARAMETER(WRK.Requested_Delivery_Time);
PARAMETER(WRK.Accounts_Receiv_Ent_1);
PARAMETER(WRK.Accounts_Receiv_Ent_2);
PARAMETER(WRK.Load_ID);
PARAMETER(WRK.Absorbed_Freight_Rate_CWT);
PARAMETER(WRK.Rated_Freight);
PARAMETER(WRK.LTL_Flag);
PARAMETER(WRK.Price_Audit);
PARAMETER(WRK.Price_Status);
PARAMETER(WRK.Shipping_Method);
PARAMETER(WRK.Export_Status);
PARAMETER(WRK.Palletize);
PARAMETER(WRK.Shrink_Wrap);
PARAMETER(WRK.Slip_Sheet);
PARAMETER(WRK.Age_Code);
PARAMETER(WRK.Reefer_Temperature);
PARAMETER(WRK.Load_Type);
PARAMETER(WRK.Attach_to_Invoice_Number);
PARAMETER(WRK.Load_Plan_Order);
PARAMETER(WRK.Print_Pick_Slip);
PARAMETER(WRK.Resell_Reference_Number);
PARAMETER(WRK.Special_Comment_1);
PARAMETER(WRK.Special_Comment_2);
PARAMETER(WRK.Affect_Auto_Accruals);
PARAMETER(WRK.Sales_Route_Code);
PARAMETER(WRK.Manager_Level_Code);
PARAMETER(WRK.VP_Level_Code);
PARAMETER(WRK.Attach_to_Order_Number);
PARAMETER(WRK.Reason_for_Price_Audit);
PARAMETER(WRK.Invoice_Number);
PARAMETER(WRK.Invoice_Suffix);
PARAMETER(WRK.Invoice_Date);
PARAMETER(WRK.Event_Code);
PARAMETER(WRK.Trans_Contol_AS400_Plant);
PARAMETER(WRK.Modified_Flag);
PARAMETER(WRK.A_R_order_Value_Total);
PARAMETER(WRK.Billing_Activity_Type);
PARAMETER(WRK.Block_Order_Flag);
PARAMETER(WRK.Order_Certification_Flag);
PARAMETER(WRK.EDI_Status_1);
PARAMETER(WRK.EDI_Status_2);
PARAMETER(WRK.EDI_Status_3);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program DSP Ord Inquiry Detail DF.
CALL PROGRAM(DSP Ord Inquiry Detail DF) ('PDPZDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.Order_Sequence_Number);
PARAMETER(WRK.Order_Secondary_Line_Seq);
PARAMETER(PAR.Application_Code);

ENDIF;

//?Display Order Schedule
CASE;

// IF RCD.*SFLSEL is Option 11
IF RCD.*SFLSEL = '11';

// Call program Dsp Order Sched Pdctn DF.
CALL PROGRAM(Dsp Order Sched Pdctn DF) ('PDFMDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Item_Code);

ENDIF;

