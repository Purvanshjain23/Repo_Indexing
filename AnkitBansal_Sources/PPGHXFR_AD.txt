// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPGHXFR
// ?Date: 14.08.2025 Time: 03:40:22
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(RTV CRT SSI Load HeaderRT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1705928;
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Carrier_Code);
PARAMETER(PAR.SSI_Master_BOL_Number);
PARAMETER(PAR.SSI_Trading_Partner_#);
PARAMETER(PAR.SSI_Header_Type);
PARAMETER(PAR.SSI_Link_Sequence);
PARAMETER(PAR.SSI_Sub_Type);
PARAMETER(PAR.SSI_Sub_Type_Sequence);
PARAMETER(PAR.SSI_Add_Chg_Delete_flag);
PARAMETER(PAR.SSI_SOR_Sequence_ID);
PARAMETER(PAR.SSI_SOR_Identifier);
PARAMETER(PAR.Count_USR);
PARAMETER(PAR.SSI_SOR_SCAC);
PARAMETER(PAR.SSI_Trading_Partner_Name);
PARAMETER(PAR.SSI_SOR_Date_80_alpha);
PARAMETER(PAR.SSI_SOR_Time_40_alpha);
{
 //?USER: Initialize routine

 //?***** Change log and comments
 DO;

 //?** 08/07/2009 LJB E00447
 //?** Change to create only one Pick/Stop record per stop. Change
 //?** Pick/Stop Order to increment sub-sequence number to count
 //?** number of orders at the stop. Add a new pick-up record if
 //?** there is a change in the warehouse or warehouse location and
 //?** the city &/or state has changed.
 ENDDO;

 //?USER: Processing if Data record not found

 //?** (this should not happen)
 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 // WRK.USR Load Id ALpha = CVTVAR(DB1.Load ID)
 WRK.USR_Load_Id_ALpha = CVTVAR(DB1.Load_ID);

 // WRK.SSI Master BOL Number = WRK.USR Load Id ALpha
 WRK.SSI_Master_BOL_Number = WRK.USR_Load_Id_ALpha;

 EXECUTE FUNCTION(RTV Name, Address, Fax RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1448662;
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(LCL.Name);
 PARAMETER(PAR.SSI_Address_1_usr);
 PARAMETER(PAR.SSI_Address_2_usr);
 PARAMETER(PAR.SSI_City_usr);
 PARAMETER(PAR.SSI_Zip_Postal_code_usr);
 PARAMETER(PAR.SSI_State_Code_usr);
 PARAMETER(LCL.Fax_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // WRK.SSI Trading Partner # = CON.*BLANK
 WRK.SSI_Trading_Partner_# = *BLANK;

 // WRK.SSI Header Type = CON.01
 WRK.SSI_Header_Type = 01;

 // WRK.SSI Link Sequence = CON.00
 WRK.SSI_Link_Sequence = 00;

 // WRK.SSI Sub Type = CON.00
 WRK.SSI_Sub_Type = 00;

 // WRK.SSI Sub Type Sequence = CON.00
 WRK.SSI_Sub_Type_Sequence = 00;

 // Retrieve message - '&1~&2~&3~&4~&5~&6'
 PAR.SSI_Header_Record_1 = RTVMSG(USR4051);
 PARAMETER(WRK.SSI_Master_BOL_Number);
 PARAMETER(WRK.SSI_Trading_Partner_#);
 PARAMETER(WRK.SSI_Header_Type);
 PARAMETER(WRK.SSI_Link_Sequence);
 PARAMETER(WRK.SSI_Sub_Type);
 PARAMETER(WRK.SSI_Sub_Type_Sequence);

 // Retrieve message - '&1~&2~&3~&4~&5~&6~&7~&8~&9~&10'
 PAR.SSI_Header_Record_2 = RTVMSG(USR4052);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.SSI_Master_BOL_Number);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);

 // Retrieve message - '&1~&2~&3~&4~&5~&6~&7'
 PAR.SSI_Header_Record_3 = RTVMSG(USR4050);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);

 // Retrieve message - '&1~&2~&3~&4~&5~&6~&7~&8~'
 WRK.Text_111 = RTVMSG(USR4053);
 PARAMETER(PAR.SSI_Load_Gross_Weight_usr);
 PARAMETER(PAR.SSI_Load_Status_usr);
 PARAMETER(WRK.SSI_Master_BOL_Number);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);

 // Retrieve message - '&1~&2~&3~&4~&5'
 WRK.Text_44 = RTVMSG(USR4082);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.SSI_940_type_usr);
 PARAMETER(PAR.SSI_210_Code_usr);

 // PAR.SSI Header Record 4 = CONCAT(WRK.Text 111,WRK.Text 44,CON.*ZERO)
 PAR.SSI_Header_Record_4 = WRK.Text_111 + WRK.Text_44 (*ZERO);

 // PAR.Count USR = PAR.Count USR + CON.1
 PAR.Count_USR = PAR.Count_USR + 1;

 EXECUTE FUNCTION(CRT SSI Load Header    CR) TYPE(CRTOBJ) FILE(PMEICPP)          AC1901834;
 PARAMETER(PAR.SSI_SOR_Sequence_ID);
 PARAMETER(PAR.SSI_SOR_Identifier);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Count_USR);
 PARAMETER(WRK.SSI_Master_BOL_Number);
 PARAMETER(WRK.SSI_Header_Type);
 PARAMETER(WRK.SSI_Link_Sequence);
 PARAMETER(WRK.SSI_Trading_Partner_#);
 PARAMETER(WRK.SSI_Sub_Type);
 PARAMETER(WRK.SSI_Sub_Type_Sequence);
 PARAMETER(PAR.SSI_Header_Record_1);
 PARAMETER(PAR.SSI_Header_Record_2);
 PARAMETER(PAR.SSI_Header_Record_3);
 PARAMETER(PAR.SSI_Header_Record_4);
 //?USER: Process Data record

 //?** Default in the SSI key field values
 // WRK.USR Load Id ALpha = CVTVAR(DB1.Load ID)
 WRK.USR_Load_Id_ALpha = CVTVAR(DB1.Load_ID);

 // WRK.SSI Master BOL Number = WRK.USR Load Id ALpha
 WRK.SSI_Master_BOL_Number = WRK.USR_Load_Id_ALpha;

 EXECUTE FUNCTION(RTV Name, Address, Fax RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1448662;
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(LCL.Name);
 PARAMETER(PAR.SSI_Address_1_usr);
 PARAMETER(PAR.SSI_Address_2_usr);
 PARAMETER(PAR.SSI_City_usr);
 PARAMETER(PAR.SSI_Zip_Postal_code_usr);
 PARAMETER(PAR.SSI_State_Code_usr);
 PARAMETER(LCL.Fax_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // WRK.SSI Trading Partner # = CON.*BLANK
 WRK.SSI_Trading_Partner_# = *BLANK;

 // WRK.SSI Header Type = CON.01
 WRK.SSI_Header_Type = 01;

 // WRK.SSI Link Sequence = CON.00
 WRK.SSI_Link_Sequence = 00;

 // WRK.SSI Sub Type = CON.00
 WRK.SSI_Sub_Type = 00;

 // WRK.SSI Sub Type Sequence = CON.00
 WRK.SSI_Sub_Type_Sequence = 00;

 //?** Fill in the data record values
 //?Default shipping method
 CASE;

 // IF DB1.Shipping Method is Prepaid
 IF DB1.Shipping_Method = 'PR'/'PT';

 // PAR.SSI Terms usr = CND.Prepaid
 PAR.SSI_Terms_usr = 'PP';

 //?Default shipping method
 // IF DB1.Shipping Method is Collect
 IF DB1.Shipping_Method = 'CR'/'CT';

 // PAR.SSI Terms usr = CND.Collect
 PAR.SSI_Terms_usr = 'CC';

 //?Default shipping method
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.SSI Terms usr = CND.Prepaid
 PAR.SSI_Terms_usr = 'PP';

 ENDIF;

 // PAR.SSI Total Load Miles usr = CVTVAR(DB1.Total Load Miles)
 PAR.SSI_Total_Load_Miles_usr = CVTVAR(DB1.Total_Load_Miles);

 // PAR.SSI Load Gross Weight usr = CVTVAR(DB1.Total Load Order Weight)
 PAR.SSI_Load_Gross_Weight_usr = CVTVAR(DB1.Total_Load_Order_Weight);

 // WRK.USR Amount 1 9.2 = DB1.Load Actual Freight
 WRK.USR_Amount_1_9_2 = DB1.Load_Actual_Freight;

 // WRK.Text USR 9 = CVTVAR(WRK.USR Amount 1 9.2)
 WRK.Text_USR_9 = CVTVAR(WRK.USR_Amount_1_9_2);

 // PAR.SSI Load Actual Frt usr = WRK.Text USR 9
 PAR.SSI_Load_Actual_Frt_usr = WRK.Text_USR_9;

 //?** Put Reefer Temp (5.2) into a 2.0 field and convert to
 //?** a 2A. Move to 210 Code field.
 // WRK.USR Number 2.0 = DB1.Reefer Temperature
 WRK.USR_Number_2_0 = DB1.Reefer_Temperature;

 // WRK.Text 2 = CVTVAR(WRK.USR Number 2.0)
 WRK.Text_2 = CVTVAR(WRK.USR_Number_2_0);

 // PAR.SSI 210 Code usr = WRK.Text 2
 PAR.SSI_210_Code_usr = WRK.Text_2;

 // Retrieve message - '&1~&2~&3~&4~&5~&6'
 PAR.SSI_Header_Record_1 = RTVMSG(USR4051);
 PARAMETER(WRK.SSI_Master_BOL_Number);
 PARAMETER(WRK.SSI_Trading_Partner_#);
 PARAMETER(WRK.SSI_Header_Type);
 PARAMETER(WRK.SSI_Link_Sequence);
 PARAMETER(WRK.SSI_Sub_Type);
 PARAMETER(WRK.SSI_Sub_Type_Sequence);

 // Retrieve message - '&1~&2~&3~&4~&5~&6~&7~&8~&9~&10'
 PAR.SSI_Header_Record_2 = RTVMSG(USR4052);
 PARAMETER(PAR.SSI_Terms_usr);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(WRK.USR_Load_Id_ALpha);
 PARAMETER(PAR.SSI_Total_Load_Miles_usr);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);

 // Retrieve message - '&1~&2~&3~&4~&5~&6~&7'
 PAR.SSI_Header_Record_3 = RTVMSG(USR4050);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.SSI_Invoice_Date_usr);
 PARAMETER(PAR.SSI_Load_Actual_Frt_usr);
 PARAMETER(*BLANK);

 // Retrieve message - '&1~&2~&3~&4~&5~&6~&7~&8~'
 WRK.Text_111 = RTVMSG(USR4053);
 PARAMETER(PAR.SSI_Load_Gross_Weight_usr);
 PARAMETER(PAR.SSI_Load_Status_usr);
 PARAMETER(WRK.SSI_Master_BOL_Number);
 PARAMETER(1);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);

 // Retrieve message - '&1~&2~&3~&4~&5'
 WRK.Text_44 = RTVMSG(USR4082);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.SSI_940_type_usr);
 PARAMETER(PAR.SSI_210_Code_usr);

 // PAR.SSI Header Record 4 = CONCAT(WRK.Text 111,WRK.Text 44,CON.*ZERO)
 PAR.SSI_Header_Record_4 = WRK.Text_111 + WRK.Text_44 (*ZERO);

 EXECUTE FUNCTION(RTV SSI Load Header SeqRT) TYPE(RTVOBJ) FILE(PMEICPP)          AC1904047;
 PARAMETER(PAR.SSI_SOR_Sequence_ID);
 PARAMETER(PAR.SSI_Sequence_Number_70);
 {
  //?USER: Processing if Data record not found

  // PAR.SSI Sequence Number 7,0 = CON.1
  PAR.SSI_Sequence_Number_70 = 1;

  //?USER: Process Data record

  // PAR.SSI Sequence Number 7,0 = DB1.SSI Sequence Number 7,0 + CON.1
  PAR.SSI_Sequence_Number_70 = DB1.SSI_Sequence_Number_70 + 1;

 }

 // PAR.Count USR = PAR.Count USR + CON.1
 PAR.Count_USR = PAR.Count_USR + 1;

 EXECUTE FUNCTION(CRT SSI Load Header    CR) TYPE(CRTOBJ) FILE(PMEICPP)          AC1901834;
 PARAMETER(PAR.SSI_SOR_Sequence_ID);
 PARAMETER(PAR.SSI_SOR_Identifier);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Count_USR);
 PARAMETER(WRK.SSI_Master_BOL_Number);
 PARAMETER(WRK.SSI_Header_Type);
 PARAMETER(WRK.SSI_Link_Sequence);
 PARAMETER(WRK.SSI_Trading_Partner_#);
 PARAMETER(WRK.SSI_Sub_Type);
 PARAMETER(WRK.SSI_Sub_Type_Sequence);
 PARAMETER(PAR.SSI_Header_Record_1);
 PARAMETER(PAR.SSI_Header_Record_2);
 PARAMETER(PAR.SSI_Header_Record_3);
 PARAMETER(PAR.SSI_Header_Record_4);
 //?** Retrieve Traffic Comments and put in SSI Load Comments  E00461
 EXECUTE FUNCTION(Rtv Crt SSI LH Commnts IF) TYPE(EXCINTFUN)                     AC1951278;
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.Count_USR);
 PARAMETER(PAR.SSI_SOR_Sequence_ID);
 PARAMETER(WRK.SSI_Master_BOL_Number);
 PARAMETER(WRK.SSI_Trading_Partner_#);
 PARAMETER('02');
 PARAMETER(WRK.SSI_Link_Sequence);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Crt SSI LH Commnts RT) TYPE(RTVOBJ) FILE(PDKECPP)          AC1951277;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Count_USR);
  PARAMETER(PAR.SSI_SOR_Sequence_ID);
  PARAMETER(PAR.SSI_Master_BOL_Number);
  PARAMETER(PAR.SSI_Trading_Partner_#);
  PARAMETER(PAR.SSI_Header_Type);
  PARAMETER(PAR.SSI_Link_Sequence);
  {
   //?USER: Initialize routine

   // WRK.Count USR = PAR.Count USR
   WRK.Count_USR = PAR.Count_USR;

   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   //?** Put Traffic Comment seq# into the sub type sequence# field
   // WRK.Calc 2 = DB1.Sequence Number
   WRK.Calc_2 = DB1.Sequence_Number;

   // WRK.Text 2 = CVTVAR(WRK.Calc 2)
   WRK.Text_2 = CVTVAR(WRK.Calc_2);

   // WRK.SSI Sub Type Sequence = WRK.Text 2
   WRK.SSI_Sub_Type_Sequence = WRK.Text_2;

   // PAR.SSI Load Commnts Data usr = DB1.Comment Line
   PAR.SSI_Load_Commnts_Data_usr = DB1.Comment_Line;

   // WRK.SSI Sub Type = CND.Load Comments
   WRK.SSI_Sub_Type = '02';

   // Retrieve message - '&1~&2~&3~&4~&5~&6'
   PAR.SSI_Header_Record_1 = RTVMSG(USR4051);
   PARAMETER(PAR.SSI_Master_BOL_Number);
   PARAMETER(PAR.SSI_Trading_Partner_#);
   PARAMETER(PAR.SSI_Header_Type);
   PARAMETER(PAR.SSI_Link_Sequence);
   PARAMETER('00');
   PARAMETER(WRK.SSI_Sub_Type_Sequence);

   // Retrieve message - '&1'
   PAR.SSI_Header_Comments_Data = RTVMSG(USR4186);
   PARAMETER(PAR.SSI_Load_Commnts_Data_usr);

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   EXECUTE FUNCTION(Create SSI LH Comments) TYPE(CRTOBJ) FILE(PMEJCPP)             AC1906851;
   PARAMETER(PAR.SSI_SOR_Sequence_ID);
   PARAMETER('#SSI204');
   PARAMETER(PAR.SSI_EOT_Identifier);
   PARAMETER(WRK.Count_USR);
   PARAMETER(PAR.SSI_Master_BOL_Number);
   PARAMETER(PAR.SSI_Header_Type);
   PARAMETER(PAR.SSI_Link_Sequence);
   PARAMETER('00');
   PARAMETER(WRK.SSI_Sub_Type_Sequence);
   PARAMETER(PAR.SSI_Header_Record_1);
   PARAMETER(PAR.SSI_Header_Comments_Data);
   //?USER: Exit processing

   // PAR.Count USR = WRK.Count USR
   PAR.Count_USR = WRK.Count_USR;

  }

 }

 //?** Create Pick/Stop and assoc records if not cancelled
 CASE;

 // IF PAR.SSI Load Status usr is Change
 IF PAR.SSI_Load_Status_usr = '04';

 // OR PAR.SSI Load Status usr is Original
 OR PAR.SSI_Load_Status_usr = '00';

 //?** Create Pick/Stop, P/S Orders, and P/S Order Comments
 EXECUTE FUNCTION(RTV CRT SSI Pick/Stop  IF) TYPE(EXCINTFUN)                     AC1903712;
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.SSI_SOR_Sequence_ID);
 PARAMETER(WRK.SSI_Master_BOL_Number);
 PARAMETER(WRK.SSI_Trading_Partner_#);
 PARAMETER(WRK.SSI_Header_Type);
 PARAMETER(WRK.SSI_Link_Sequence);
 PARAMETER(WRK.SSI_Sub_Type);
 PARAMETER(WRK.SSI_Sub_Type_Sequence);
 PARAMETER(PAR.Count_USR);
 PARAMETER(PAR.SSI_SOR_Identifier);
 PARAMETER(PAR.SSI_SOR_SCAC);
 PARAMETER(PAR.SSI_Trading_Partner_Name);
 PARAMETER(PAR.SSI_SOR_Date_80_alpha);
 PARAMETER(PAR.SSI_SOR_Time_40_alpha);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV CRT SSI Pick/Stop  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1903524;
  PARAMETER(PAR.Load_ID);
  PARAMETER(1);
  PARAMETER(1);
  PARAMETER(PAR.SSI_SOR_Sequence_ID);
  PARAMETER(PAR.SSI_Master_BOL_Number);
  PARAMETER(PAR.SSI_Trading_Partner_#);
  PARAMETER(PAR.SSI_Header_Type);
  PARAMETER(PAR.SSI_Link_Sequence);
  PARAMETER(PAR.SSI_Sub_Type);
  PARAMETER(PAR.SSI_Sub_Type_Sequence);
  PARAMETER(PAR.Count_USR);
  {
   //?USER: Initialize routine

   //?** Change log and comments
   DO;

   //?** 08/06/2009 LJB E00461
   //?** Create only one Pick/Stop record per stop but one Order
   //?** record for each order. Change the SSI Link Sequence to
   //?** hold the stop number not the order count.
   //?** If OHE exists, put the Terminal into the Customer Name field
   //?** and the OHE City into the Customer City field (international)
   ENDDO;

   CASE;

   // IF WRK.USR First Time is Blank
   IF WRK.USR_First_Time = *BLANK;

   // WRK.Calc 2 = CND.EQ *Zeros
   WRK.Calc_2 = *ZERO;

   // WRK.Stop/Drop = CND.EQ Zero
   WRK.Stop_Drop = *ZERO;

   // WRK.USR First Time = CND.Yes
   WRK.USR_First_Time = 'Y';

   EXECUTE FUNCTION(RTV Load All Fields    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1491510;
   PARAMETER(PAR.Load_ID);
   PARAMETER(NLL.Company_Number);
   PARAMETER(LCL.Scheduled_Ship_Date);
   PARAMETER(NLL.LTL_Flag);
   PARAMETER(NLL.Load_Status);
   PARAMETER(NLL.Reefer_Temperature);
   PARAMETER(NLL.Seal_1);
   PARAMETER(NLL.Seal_2);
   PARAMETER(NLL.Seal_3);
   PARAMETER(NLL.Seal_4);
   PARAMETER(NLL.Seal_2_Unused);
   PARAMETER(LCL.Total_Load_Order_Weight);
   PARAMETER(NLL.Flat_Amount);
   PARAMETER(NLL.Allocate_Pounds_Miles);
   PARAMETER(LCL.Total_Stops);
   PARAMETER(NLL.Trailer_Id);
   PARAMETER(NLL.Transloader_Carrier_Code);
   PARAMETER(NLL.BOL_Time);
   PARAMETER(LCL.Carrier_Code);
   PARAMETER(NLL.Truck_Size);
   PARAMETER(NLL.Ld_Hdr_Ld_Dtl_Unused);
   PARAMETER(NLL.Rated_Freight);
   PARAMETER(NLL.Ship_Status);
   PARAMETER(NLL.Load_Type);
   PARAMETER(NLL.Number_Pallets_Received);
   PARAMETER(NLL.Number_Pallets_Loaded);
   PARAMETER(NLL.Load_Carrier_Pay_Amt);
   PARAMETER(NLL.Estimated_Arrival_Time);
   PARAMETER(NLL.Actual_Arrival_Date);
   PARAMETER(NLL.Actual_Arrival_Time);
   PARAMETER(NLL.Trailer_IN_Weight);
   PARAMETER(NLL.Trailer_OUT_Weight);
   PARAMETER(NLL.Actual_Departure_Date);
   PARAMETER(LCL.Departure_Time);
   PARAMETER(NLL.Schedule_Sequence_Number);
   PARAMETER(NLL.Product_Temperature);
   PARAMETER(NLL.Number_Spacers_Loaded);
   PARAMETER(NLL.Car_Veh_Initials);
   PARAMETER(LCL.Total_Load_Miles);
   PARAMETER(NLL.Recorder_ID);
   PARAMETER(NLL.Shipping_Method);
   PARAMETER(LCL.Ship_From_Warehouse);
   PARAMETER(NLL.Ship_To_State_Code);
   PARAMETER(NLL.Gross_Weight);
   PARAMETER(NLL.Carrier_Broker);
   PARAMETER(NLL.Export_Status);
   PARAMETER(NLL.Actual_Ship_Date);
   PARAMETER(NLL.On_Time_Y_N);
   PARAMETER(NLL.Truck_Ready_Date);
   PARAMETER(NLL.Truck_Ready_Time);
   PARAMETER(NLL.Spotted_Date);
   PARAMETER(NLL.Spotted_Time);
   PARAMETER(NLL.Load_Finished_Date);
   PARAMETER(NLL.Load_Finished_Time);
   PARAMETER(NLL.BOL_Complete_Date);
   PARAMETER(NLL.BOL_Complete_Time);
   PARAMETER(NLL.BOL_Received_Date);
   PARAMETER(NLL.BOL_Received_Time);
   PARAMETER(NLL.Truck_Departure_Date);
   PARAMETER(NLL.Truck_Departure_Time);
   PARAMETER(NLL.Adjusted_Departure_Date);
   PARAMETER(NLL.Adjusted_Departure_Time);
   PARAMETER(NLL.Shipping_Line);
   PARAMETER(NLL.Port_Delv_Terminal);
   PARAMETER(NLL.Vessel_Name);
   PARAMETER(NLL.Voyage);
   PARAMETER(NLL.Sail_Date);
   PARAMETER(NLL.Booking_Number);
   PARAMETER(NLL.Discharge_Port);
   PARAMETER(NLL.Arrival_Date);
   PARAMETER(NLL.Container_Number);
   PARAMETER(NLL.Date_In);
   PARAMETER(NLL.Time_In);
   PARAMETER(NLL.Date_Out);
   PARAMETER(NLL.Time_Out);
   PARAMETER(NLL.Load_Total_Freight);
   PARAMETER(NLL.Scheduled_Delivery_Date);
   PARAMETER(NLL.Scheduled_Delivery_Time);
   PARAMETER(NLL.LH_Unused_Sts);
   PARAMETER(NLL.LH_Carrier_Payment_Sts);
   PARAMETER(NLL.Bring_Back_Miles);
   PARAMETER(NLL.Requested_Delivery_Date);
   PARAMETER(NLL.Load_Acceptance_Flag);
   PARAMETER(NLL.Warehouse_Code);
   PARAMETER(NLL.On_Yard_Date);
   PARAMETER(NLL.On_Yard_Time);
   PARAMETER(LCL.Deadline_Departure_Date);
   PARAMETER(LCL.Deadline_Departure_Time);
   PARAMETER(NLL.Load_Held_Over);
   PARAMETER(NLL.Load_Held_Over_Reason);
   PARAMETER(NLL.Load_Held_Over_Rsn_Cmt);
   PARAMETER(NLL.Ocean_BOL_Number);
   PARAMETER(NLL.Express_Mail_Number);
   PARAMETER(NLL.Express_Mail_Date);
   PARAMETER(NLL.Load_Shag_Flag);
   PARAMETER(NLL.Load_Wash_Flag);
   PARAMETER(NLL.Product_Complete_Date);
   PARAMETER(NLL.Product_Complete_Time);
   PARAMETER(NLL.Pallets_Loaded);
   PARAMETER(NLL.Avg_Pallet_Tare);
   PARAMETER(NLL.Tot_Pallet_Tare);
   PARAMETER(NLL.Load_Confirmed_Sts);
   PARAMETER(NLL.Load_Confirmed_Contact);
   PARAMETER(NLL.Load_Confirmation_Time);
   PARAMETER(NLL.Load_Door_1);
   PARAMETER(LCL.Override_Total_Load_Miles);
   PARAMETER(NLL.Load_Door_2);
   PARAMETER(NLL.Partial_Load);
   PARAMETER(NLL.Load_Confirmation_Fax_Sts);
   PARAMETER(NLL.Export_Load_USDA_OK);
   PARAMETER(NLL.Late_Delivery_Email_Flag);
   PARAMETER(NLL.Load_Actual_Freight);
   PARAMETER(NLL.Hide_on_WW_Load_Sts);
   PARAMETER(NLL.Late_Billing_Email_Flag);
   PARAMETER(NLL.Shipping_Temp_C_F_txt);
   PARAMETER(NLL.LH_Held_Over_Rsn_Cmt);
   PARAMETER(NLL.Multi_Company_Load);
   PARAMETER(NLL.Fax_Sent_to_SSI_Carrier);
   PARAMETER(NLL.Schedule_Pos_Load_Grade);
   PARAMETER(NLL.LH_Power_Only_Load);
   PARAMETER(NLL.MG_Created_Load);
   PARAMETER(NLL.LH_Unused_Sts_5);
   PARAMETER(NLL.Load_U_M);
   PARAMETER(NLL.TPM_Shipment_Status);
   PARAMETER(NLL.LH_Unused_Sts_8);
   PARAMETER(NLL.LH_On_Time_Reason_Code);
   PARAMETER(NLL.LH_Held_Over_Reason);
   PARAMETER(NLL.LH_Carrier_Paid_Dte);
   PARAMETER(NLL.LH_Carrier_Paid_Time);
   PARAMETER(NLL.LH_Last_Combo_Prod_Date);
   PARAMETER(NLL.LH_Last_Combo_Prod_Time);
   PARAMETER(NLL.LPT_Load_Plan_Start_Dt);
   PARAMETER(NLL.LPT_Load_Plan_Start_Tm);
   PARAMETER(NLL.TPM_Planned_Ship_Date);
   PARAMETER(NLL.LH_Unused_Time_4);
   PARAMETER(NLL.LH_Unused_Date_5);
   PARAMETER(NLL.LH_Unused_Time_5);
   PARAMETER(NLL.LH_Unused_Date_6);
   PARAMETER(NLL.LH_Unused_Time_6);
   PARAMETER(NLL.EDI_Status_1);
   PARAMETER(NLL.EDI_Status_2);
   PARAMETER(NLL.EDI_Status_3);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   EXECUTE FUNCTION(Rtv Load Quantity     RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1855222;
   PARAMETER(PAR.Load_ID);
   PARAMETER(LCL.Quantity_Scheduled_1_USR);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Qty & Wght Schedul RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1575646;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(LCL.Quantity_Scheduled);
    PARAMETER(LCL.Weight_Scheduled);
    {
     //?USER: Initialize routine

     // PAR.Quantity Scheduled = CON.*ZERO
     PAR.Quantity_Scheduled = *ZERO;

     // PAR.Weight Scheduled = CON.*ZERO
     PAR.Weight_Scheduled = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF DB1.Detail Line Status is Not cancelled
     IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

     // PAR.Quantity Scheduled = PAR.Quantity Scheduled + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled = PAR.Quantity_Scheduled + DB1.Quantity_Scheduled;

     // PAR.Weight Scheduled = PAR.Weight Scheduled + DB1.Weight Scheduled
     PAR.Weight_Scheduled = PAR.Weight_Scheduled + DB1.Weight_Scheduled;

     ENDIF;

    }

    // PAR.Quantity Scheduled 1 USR = PAR.Quantity Scheduled 1 USR + LCL.Quantity Scheduled
    PAR.Quantity_Scheduled_1_USR = PAR.Quantity_Scheduled_1_USR + LCL.Quantity_Scheduled;

   }

   EXECUTE FUNCTION(RTV SSI Control-all    RT) TYPE(RTVOBJ) FILE(PMERREP)          AC1904019;
   PARAMETER(PAR.SSI_SOR_Sequence_ID);
   PARAMETER(LCL.SSI_SOR_Identifier);
   PARAMETER(NLL.SSI_EOT_Identifier);
   PARAMETER(LCL.SSI_SOR_SCAC);
   PARAMETER(LCL.SSI_Trading_Partner_Name);
   PARAMETER(LCL.SSI_SOR_Date_80_alpha);
   PARAMETER(LCL.SSI_SOR_Time_40_alpha);
   PARAMETER(NLL.SSI_EOT_Record_Count);
   PARAMETER(NLL.SSI_Transmission_Status);
   // WRK.Count USR = PAR.Count USR
   WRK.Count_USR = PAR.Count_USR;

   // WRK.Copies NBR USR = CON.*ZERO
   WRK.Copies_NBR_USR = *ZERO;

   // WRK.Text 2 Length USR = CVTVAR(WRK.Copies NBR USR)
   WRK.Text_2_Length_USR = CVTVAR(WRK.Copies_NBR_USR);

   // WRK.SSI Link Sequence = CND.Origin
   WRK.SSI_Link_Sequence = '01';

   // WRK.USR Adjustment Count 4 = CON.*ZERO
   WRK.USR_Adjustment_Count_4 = *ZERO;

   // WRK.Count Mixed USR = CON.*ZERO
   WRK.Count_Mixed_USR = *ZERO;

   // WRK.Number of Orders = CON.*ZERO
   WRK.Number_of_Orders = *ZERO;

   // LCL.Number of Orders = CON.*ZERO
   LCL.Number_of_Orders = *ZERO;

   //?** "count mixed usr" = last stop#, "number of orders" = # on last stop
   EXECUTE FUNCTION(RTV Count load stops   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1904425;
   PARAMETER(PAR.Load_ID);
   PARAMETER(0);
   PARAMETER(WRK.Count_Mixed_USR);
   PARAMETER(WRK.Number_of_Orders);
   {
    //?USER: Initialize routine

    CASE;

    // IF WRK.USR Flag 1 is Blank
    IF WRK.USR_Flag_1 = *BLANK;

    // LCL.Stop/Drop = CON.*ZERO
    LCL.Stop_Drop = *ZERO;

    // WRK.USR Flag 1 = CND.Yes
    WRK.USR_Flag_1 = 'Y';

    ENDIF;

    //?USER: Process Data record

    //?** Count number of stops & orders, save last stop/drop number
    CASE;

    // IF DB1.Stop/Drop NE LCL.Stop/Drop
    IF DB1.Stop_Drop <> LCL.Stop_Drop;

    // LCL.Stop/Drop = DB1.Stop/Drop
    LCL.Stop_Drop = DB1.Stop_Drop;

    // PAR.Count Mixed USR = DB1.Stop/Drop
    PAR.Count_Mixed_USR = DB1.Stop_Drop;

    //?** reset number of orders when new stop
    // PAR.Number of Orders = CON.1
    PAR.Number_of_Orders = 1;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Count Mixed USR = DB1.Stop/Drop
    PAR.Count_Mixed_USR = DB1.Stop_Drop;

    //?** Last Stop: return stop/drop number & # of orders
    // PAR.Number of Orders = PAR.Number of Orders + CON.1
    PAR.Number_of_Orders = PAR.Number_of_Orders + 1;

    ENDIF;

   }

   //?** Create "Origin", which is the ship from warehouse record
   CASE;

   // IF WRK.SSI Link Sequence is Origin
   IF WRK.SSI_Link_Sequence = '01';

   // WRK.SSI Header Type = CND.Pickup/Stopoff
   WRK.SSI_Header_Type = '03';

   // WRK.USR Number 2.0 = LCL.Total Stops
   WRK.USR_Number_2_0 = LCL.Total_Stops;

   // WRK.SSI Hdr Counter usr = CVTVAR(WRK.USR Number 2.0)
   WRK.SSI_Hdr_Counter_usr = CVTVAR(WRK.USR_Number_2_0);

   //?** The Origin step writes the 1st Pick/Stop record for Whse Pick Up
   // PAR.SSI Pick/Stop Type = CND.Origin
   PAR.SSI_Pick_Stop_Type = 'O';

   // WRK.Text 2 = CVTVAR(CON.00)
   WRK.Text_2 = CVTVAR(00);

   // WRK.SSI Sub Type Sequence = WRK.Text 2
   WRK.SSI_Sub_Type_Sequence = WRK.Text_2;

   EXECUTE FUNCTION(RTV Warehouse Address  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1211418;
   PARAMETER(LCL.Ship_From_Warehouse);
   PARAMETER(PAR.SSI_Pick_Stop_Name);
   PARAMETER(PAR.SSI_Pick_Stop_Address_1);
   PARAMETER(PAR.SSI_Pick_Stop_Address_2);
   PARAMETER(NLL.Address_Line_3);
   PARAMETER(PAR.SSI_Pick_Stop_City);
   PARAMETER(PAR.SSI_Pick_Stop_Postal_Zip);
   PARAMETER(PAR.SSI_Pick_Stop_State);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?** Save warehouse info to test for additional pick-up whses  E00461
   EXECUTE FUNCTION(RTV Warehouse Location RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1564246;
   PARAMETER(LCL.Ship_From_Warehouse);
   PARAMETER(LCL.USR_Warehouse_Location);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    QUIT;

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   // LCL.USR Warehouse Code = LCL.Ship From Warehouse
   LCL.USR_Warehouse_Code = LCL.Ship_From_Warehouse;

   // LCL.USR City = PAR.SSI Pick/Stop City
   LCL.USR_City = PAR.SSI_Pick_Stop_City;

   // LCL.USR State Code = PAR.SSI Pick/Stop State
   LCL.USR_State_Code = PAR.SSI_Pick_Stop_State;

   //?** Format Scheduled Ship Date for the "From Date"
   EXECUTE FUNCTION(CNV cyymmdd to yyyymmdd) TYPE(EXCINTFUN)                       AC1732965;
   PARAMETER(LCL.Scheduled_Ship_Date);
   PARAMETER(WRK.Date_Out_80_USR);
   {
    //?Execute internal function

    // LCL.Year Code = PAR.Date In  (7,0) USR *YEAR
    LCL.Year_Code = DATEDTLS(PAR.Date_In_70_USR 'YR' 1111111 'NONE' 'N' 1);

    // LCL.Month NBR USR = PAR.Date In  (7,0) USR *MONTH
    LCL.Month_NBR_USR = DATEDTLS(PAR.Date_In_70_USR 'MO' 1111111 'NONE' 'N' 1);

    // LCL.Day of Month USR = PAR.Date In  (7,0) USR *DAY OF MONTH
    LCL.Day_of_Month_USR = DATEDTLS(PAR.Date_In_70_USR 'DM' 1111111 'NONE' 'N' 1);

    // PAR.Year Alpha (YYYY) USR = CVTVAR(LCL.Year Code)
    PAR.Year_Alpha_YYYY_USR = CVTVAR(LCL.Year_Code);

    // PAR.Month (Char) USR = CVTVAR(LCL.Month NBR USR)
    PAR.Month_Char_USR = CVTVAR(LCL.Month_NBR_USR);

    // PAR.Day   (Char) USR = CVTVAR(LCL.Day of Month USR)
    PAR.Day_Char_USR = CVTVAR(LCL.Day_of_Month_USR);

    // PAR.Date (Char-8) USR = CONCAT(PAR.Year Alpha (YYYY) USR,PAR.Month (Char) USR,CON.*ZERO)
    PAR.Date_Char_8_USR = PAR.Year_Alpha_YYYY_USR + PAR.Month_Char_USR (*ZERO);

    // PAR.Date (Char-8) USR = CONCAT(PAR.Date (Char-8) USR,PAR.Day   (Char) USR,CON.*ZERO)
    PAR.Date_Char_8_USR = PAR.Date_Char_8_USR + PAR.Day_Char_USR (*ZERO);

    // PAR.Date Out (8,0) USR = CVTVAR(PAR.Date (Char-8) USR)
    PAR.Date_Out_80_USR = CVTVAR(PAR.Date_Char_8_USR);

   }

   // WRK.Date (Char-8) USR = CVTVAR(WRK.Date Out (8,0) USR)
   WRK.Date_Char_8_USR = CVTVAR(WRK.Date_Out_80_USR);

   // PAR.SSI Pick/Stop From Date = WRK.Date (Char-8) USR
   PAR.SSI_Pick_Stop_From_Date = WRK.Date_Char_8_USR;

   // PAR.SSI Pick/Stop From Time = CON.0001
   PAR.SSI_Pick_Stop_From_Time = 0001;

   //?** Format Deadline Depart Date/Time for the "To Date/Time"
   EXECUTE FUNCTION(CNV cyymmdd to yyyymmdd) TYPE(EXCINTFUN)                       AC1732965;
   PARAMETER(LCL.Deadline_Departure_Date);
   PARAMETER(WRK.Date_Out_80_USR);
   {
    //?Execute internal function

    // LCL.Year Code = PAR.Date In  (7,0) USR *YEAR
    LCL.Year_Code = DATEDTLS(PAR.Date_In_70_USR 'YR' 1111111 'NONE' 'N' 1);

    // LCL.Month NBR USR = PAR.Date In  (7,0) USR *MONTH
    LCL.Month_NBR_USR = DATEDTLS(PAR.Date_In_70_USR 'MO' 1111111 'NONE' 'N' 1);

    // LCL.Day of Month USR = PAR.Date In  (7,0) USR *DAY OF MONTH
    LCL.Day_of_Month_USR = DATEDTLS(PAR.Date_In_70_USR 'DM' 1111111 'NONE' 'N' 1);

    // PAR.Year Alpha (YYYY) USR = CVTVAR(LCL.Year Code)
    PAR.Year_Alpha_YYYY_USR = CVTVAR(LCL.Year_Code);

    // PAR.Month (Char) USR = CVTVAR(LCL.Month NBR USR)
    PAR.Month_Char_USR = CVTVAR(LCL.Month_NBR_USR);

    // PAR.Day   (Char) USR = CVTVAR(LCL.Day of Month USR)
    PAR.Day_Char_USR = CVTVAR(LCL.Day_of_Month_USR);

    // PAR.Date (Char-8) USR = CONCAT(PAR.Year Alpha (YYYY) USR,PAR.Month (Char) USR,CON.*ZERO)
    PAR.Date_Char_8_USR = PAR.Year_Alpha_YYYY_USR + PAR.Month_Char_USR (*ZERO);

    // PAR.Date (Char-8) USR = CONCAT(PAR.Date (Char-8) USR,PAR.Day   (Char) USR,CON.*ZERO)
    PAR.Date_Char_8_USR = PAR.Date_Char_8_USR + PAR.Day_Char_USR (*ZERO);

    // PAR.Date Out (8,0) USR = CVTVAR(PAR.Date (Char-8) USR)
    PAR.Date_Out_80_USR = CVTVAR(PAR.Date_Char_8_USR);

   }

   // WRK.Date (Char-8) USR = CVTVAR(WRK.Date Out (8,0) USR)
   WRK.Date_Char_8_USR = CVTVAR(WRK.Date_Out_80_USR);

   // PAR.SSI Pick/Stop To Date = CVTVAR(WRK.Date (Char-8) USR)
   PAR.SSI_Pick_Stop_To_Date = CVTVAR(WRK.Date_Char_8_USR);

   // WRK.Time  6A             USR = CVTVAR(LCL.Deadline Departure Time)
   WRK.Time_6A_USR = CVTVAR(LCL.Deadline_Departure_Time);

   // PAR.SSI Pick/Stop To Time = WRK.Time  6A             USR
   PAR.SSI_Pick_Stop_To_Time = WRK.Time_6A_USR;

   //?** Put the Ship From Warehouse Code in the Customer Number field
   //?** For Origin, this should be the Load Start Co. Warehouse Code
   // PAR.SSI Pick/Stop Customer = LCL.Ship From Warehouse
   PAR.SSI_Pick_Stop_Customer = LCL.Ship_From_Warehouse;

   // WRK.Text USR 7 = CVTVAR(LCL.Total Load Order Weight)
   WRK.Text_USR_7 = CVTVAR(LCL.Total_Load_Order_Weight);

   // PAR.SSI Pick/Stop Com Weight = WRK.Text USR 7
   PAR.SSI_Pick_Stop_Com_Weight = WRK.Text_USR_7;

   // WRK.SSI Sub Type = CND.Base Type
   WRK.SSI_Sub_Type = '00';

   // WRK.Text USR 7 = CVTVAR(LCL.Quantity Scheduled 1 USR)
   WRK.Text_USR_7 = CVTVAR(LCL.Quantity_Scheduled_1_USR);

   // PAR.SSI Pick/Stop Com Pieces = WRK.Text USR 7
   PAR.SSI_Pick_Stop_Com_Pieces = WRK.Text_USR_7;

   // Retrieve message - '&1~&2~&3~&4~&5~&6'
   PAR.SSI_Header_Record_1 = RTVMSG(USR4051);
   PARAMETER(PAR.SSI_Master_BOL_Number);
   PARAMETER(PAR.SSI_Trading_Partner_#);
   PARAMETER(WRK.SSI_Header_Type);
   PARAMETER(WRK.SSI_Link_Sequence);
   PARAMETER(WRK.SSI_Sub_Type);
   PARAMETER(WRK.SSI_Sub_Type_Sequence);

   // Retrieve message - '&1~&2~&3~&4~&5~&6~&7~&8'
   PAR.SSI_Pick_Stop_Data_1 = RTVMSG(USR4060);
   PARAMETER(PAR.SSI_Pick_Stop_Type);
   PARAMETER(PAR.SSI_Pick_Stop_Name);
   PARAMETER(PAR.SSI_Pick_Stop_Address_1);
   PARAMETER(PAR.SSI_Pick_Stop_Address_2);
   PARAMETER(PAR.SSI_Pick_Stop_City);
   PARAMETER(PAR.SSI_Pick_Stop_State);
   PARAMETER(PAR.SSI_Pick_Stop_Postal_Zip);
   PARAMETER(PAR.SSI_Pick_Stop_Customer);

   // Retrieve message - '&1~&2~&3~&4~&5~&6~&7~&8~&9~&10~&11~&12~&13'
   PAR.SSI_Pick_Stop_Data_2 = RTVMSG(USR4061);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(PAR.SSI_Master_BOL_Number);
   PARAMETER(*BLANK);
   PARAMETER(PAR.SSI_Pick_Stop_Late_Reason);
   PARAMETER(PAR.SSI_Pick_Stop_Com_Pieces);
   PARAMETER(*BLANK);
   PARAMETER(PAR.SSI_Pick_Stop_Com_Weight);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);

   // Retrieve message - '&1~&2~&3~&4~&5~&6~&7'
   PAR.SSI_Pick_Stop_Data_3 = RTVMSG(USR4070);
   PARAMETER(PAR.SSI_Pick_Stop_From_Date);
   PARAMETER(PAR.SSI_Pick_Stop_From_Time);
   PARAMETER(PAR.SSI_Pick_Stop_To_Date);
   PARAMETER(PAR.SSI_Pick_Stop_To_Time);
   PARAMETER(PAR.SSI_Pick_Stop_Arrive_Date);
   PARAMETER(PAR.SSI_Pick_Stop_Arrive_Time);
   PARAMETER(PAR.SSI_Pick_Stop_Finish_Date);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(PAR.SSI_Pick_Stop_Late_Reason);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(PAR.SSI_Pick_Stop_Com_Weight);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);

   //?** 1st Pick/Stop record (Origin record at ship from warehouse)
   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   EXECUTE FUNCTION(CRT SSI Pick/Stop      CR) TYPE(CRTOBJ) FILE(PMEKCPP)          AC1903339;
   PARAMETER(PAR.SSI_SOR_Sequence_ID);
   PARAMETER(LCL.SSI_SOR_Identifier);
   PARAMETER(*BLANK);
   PARAMETER(WRK.Count_USR);
   PARAMETER(PAR.SSI_Master_BOL_Number);
   PARAMETER(WRK.SSI_Header_Type);
   PARAMETER(WRK.SSI_Link_Sequence);
   PARAMETER(WRK.SSI_Sub_Type);
   PARAMETER(WRK.SSI_Sub_Type_Sequence);
   PARAMETER(PAR.SSI_Header_Record_1);
   PARAMETER(PAR.SSI_Pick_Stop_Data_1);
   PARAMETER(PAR.SSI_Pick_Stop_Data_3);
   PARAMETER(PAR.SSI_Pick_Stop_Data_2);
   ENDIF;

   ENDIF;

   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   //?** There will always be at least 2 Pick/Stop records, the Origin
   //?** which contains the Ship From Warehouse information and the
   //?** load stop customer information, and the Final, which contains
   //?** the last stop customer information
   //?** Set sequence to stop number, change last stop to 99
   CASE;

   // IF DB1.Stop/Drop EQ WRK.Count Mixed USR
   IF DB1.Stop_Drop = WRK.Count_Mixed_USR;

   //?** Put "F" for final on the last load (only 1 "F" record per load)
   // LCL.Number of Orders = LCL.Number of Orders + CON.1
   LCL.Number_of_Orders = LCL.Number_of_Orders + 1;

   // WRK.Text 2 Length USR = CND.Destination
   WRK.Text_2_Length_USR = '99';

   // WRK.SSI Link Sequence = CND.Destination
   WRK.SSI_Link_Sequence = '99';

   // PAR.SSI Pick/Stop Type = CND.Final
   PAR.SSI_Pick_Stop_Type = 'F';

   //?** Set sequence to stop number, change last stop to 99
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?** 1=Origin, 2-98=all others
   //?** Put the stop number into the SSI Link Sequence for the stop
   // WRK.LINE = DB1.Stop/Drop
   WRK.LINE = DB1.Stop_Drop;

   // WRK.Text 2 Length USR = CVTVAR(WRK.LINE)
   WRK.Text_2_Length_USR = CVTVAR(WRK.LINE);

   // WRK.SSI Link Sequence = WRK.Text 2 Length USR
   WRK.SSI_Link_Sequence = WRK.Text_2_Length_USR;

   ENDIF;

   //?** Build Pick/Stop for Stops                          E00461
   CASE;

   // IF WRK.SSI Link Sequence is A Stop
   IF ( WRK.SSI_Link_Sequence >= '02';
   AND WRK.SSI_Link_Sequence <= '98';

   // AND DB1.Stop/Drop NE WRK.Stop/Drop
   AND DB1.Stop_Drop <> WRK.Stop_Drop );

   // OR WRK.SSI Link Sequence is Destination
   OR WRK.SSI_Link_Sequence = '99';

   //?** Build Pick/Stop for Stops 2 thru final             E00461
   EXECUTE FUNCTION(RTV Total Qty & Weight RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428887;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(LCL.USR_Quantity_9_0);
   PARAMETER(LCL.USR_Weight_9_1);
   {
    //?USER: Initialize routine

    // WRK.Quantity Allocated = CON.*ZERO
    WRK.Quantity_Scheduled = *ZERO;

    // WRK.Weight Allocated = CON.*ZERO
    WRK.Weight_Scheduled = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF DB1.Detail Line Status is Not cancelled
    IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

    // WRK.Quantity Scheduled = WRK.Quantity Scheduled + DB1.Quantity Scheduled
    WRK.Quantity_Scheduled = WRK.Quantity_Scheduled + DB1.Quantity_Scheduled;

    // WRK.Weight Scheduled = WRK.Weight Scheduled + DB1.Weight Scheduled
    WRK.Weight_Scheduled = WRK.Weight_Scheduled + DB1.Weight_Scheduled;

    // WRK.Weight Shipped Total = WRK.Weight Shipped Total + DB1.Weight Shipped Total
    WRK.Weight_Shipped_Total = WRK.Weight_Shipped_Total + DB1.Weight_Shipped_Total;

    // WRK.Tare Weight Total = WRK.Tare Weight Total + DB1.Tare Weight Total
    WRK.Tare_Weight_Total = WRK.Tare_Weight_Total + DB1.Tare_Weight_Total;

    ENDIF;

    //?USER: Exit processing

    // PAR.USR Quantity, 9.0 = WRK.Quantity Scheduled * CON.1 *Rounded
    PAR.USR_Quantity_9_0 = WRK.Quantity_Scheduled * 1 'H';

    // PAR.USR Weight   9.1 = WRK.Weight Scheduled * CON.1 *Rounded
    PAR.USR_Weight_9_1 = WRK.Weight_Scheduled * 1 'H';

    // PAR.USR Weight   9.1  2 = WRK.Weight Shipped Total * CON.1 *Rounded
    PAR.USR_Weight_9_1_2 = WRK.Weight_Shipped_Total * 1 'H';

   }

   //?** Determine if the order is picked from a different warehouse E00461
   EXECUTE FUNCTION(RTV SSI Ord/Whs/Cust   RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1950001;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(1);
   PARAMETER(1);
   PARAMETER(LCL.Warehouse_Code);
   PARAMETER(LCL.Ship_To_Customer);
   PARAMETER(LCL.City);
   PARAMETER(LCL.State_Code);
   PARAMETER(LCL.Warehouse_Location);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    //?RTV warehouse, whse location, city & state - 1st item only
    CASE;

    // IF DB1.Detail Line Status is Not cancelled
    IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

    MOVE *ALL (To: PAR From: DB1);

    EXECUTE FUNCTION(RTV Warehouse Info     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1910512;
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(NLL.Warehouse_Description);
    PARAMETER(NLL.Address_Line_1);
    PARAMETER(NLL.Address_Line_2);
    PARAMETER(NLL.Address_Line_3);
    PARAMETER(PAR.City);
    PARAMETER(NLL.Zip_Postal_Code);
    PARAMETER(NLL.Production_Warehouse_Code);
    PARAMETER(PAR.State_Code);
    PARAMETER(NLL.Lot_Tracking_Flag);
    PARAMETER(NLL.Default_Printer);
    PARAMETER(NLL.Warehouse_Type);
    PARAMETER(NLL.Trans_Contol_AS400_Plant);
    PARAMETER(PAR.Warehouse_Location);
    PARAMETER(NLL.Warehouse_Std_Chill_Time);
    PARAMETER(NLL.Warehouse_Chill_Time);
    PARAMETER(NLL.Include_in_Auto_Pre_Pick);
    PARAMETER(NLL.Default_Manifest_Copies);
    PARAMETER(NLL.Default_Load_Sequence);
    PARAMETER(NLL.WHS_Slotting_Limit_Type);
    PARAMETER(NLL.Shipping_Company);
    PARAMETER(NLL.Accounting_Company);
    PARAMETER(NLL.WHS_Sched_Prod_Max_Days);
    PARAMETER(NLL.WHS_Inventory_Chill_Time);
    PARAMETER(NLL.Parent_Warehouse);
    PARAMETER(NLL.Default_Shipping_Whs);
    PARAMETER(NLL.WHS_Live_with_Carlisle);
    PARAMETER(NLL.WHS_PFS_Interface);
    PARAMETER(NLL.WHS_Req_Meter_Reading_Shp);
    PARAMETER(NLL.WHS_Default_Load_Type);
    PARAMETER(NLL.WHS_TMS_Planning_Region);
    PARAMETER(NLL.Default_Carrier_Code);
    PARAMETER(NLL.Inventory_Logic_Version);
    PARAMETER(NLL.WHS_Auto_Inv_Restoration);
    PARAMETER(NLL.EDI_Status_1);
    PARAMETER(NLL.EDI_Status_2);
    PARAMETER(NLL.EDI_Status_3);
    PARAMETER(NLL.Record_Status);
    PARAMETER(NLL.Job_Time);
    PARAMETER(NLL.User_Id);
    PARAMETER(NLL.Job_Name);
    PARAMETER(NLL.Job_Date);
    {
     //?USER: Initialize routine

     // PGM.*Record selected = CND.*NO
     PGM.*Record_selected = 'N';

     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

     // PGM.*Record selected = CND.*YES
     PGM.*Record_selected = 'Y';

    }

    QUIT;

    ENDIF;

   }

   //?** Build Pickup record for 2nd pick warehouse         E00461
   CASE;

   // IF LCL.Warehouse Code NE LCL.USR Warehouse Code
   IF ( LCL.Warehouse_Code <> LCL.USR_Warehouse_Code;

   // OR LCL.Warehouse Location NE LCL.USR Warehouse Location
   OR LCL.Warehouse_Location <> LCL.USR_Warehouse_Location );

   // AND LCL.City NE LCL.USR City
   AND ( LCL.City <> LCL.USR_City;

   // OR LCL.State Code NE LCL.USR State Code
   OR LCL.State_Code <> LCL.USR_State_Code );

   //?** Create a Pick-up record for this stop
   EXECUTE FUNCTION(RTV Load/Order w/o Co  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1903799;
   PARAMETER(WRK.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Order_Type_Sales);
   PARAMETER(NLL.AR_Customer_Number);
   PARAMETER(WRK.Ship_To_Customer);
   PARAMETER(WRK.SSI_Pick_Stop_Name);
   PARAMETER(WRK.SSI_Pick_Stop_Address_1);
   PARAMETER(WRK.SSI_Pick_Stop_Address_2);
   PARAMETER(NLL.Ship_To_Address_Line_3);
   PARAMETER(WRK.SSI_Pick_Stop_City);
   PARAMETER(WRK.SSI_Pick_Stop_State);
   PARAMETER(WRK.SSI_Pick_Stop_Postal_Zip);
   PARAMETER(NLL.Bill_to_Customer);
   PARAMETER(NLL.Bill_to_Name);
   PARAMETER(NLL.Bill_to_Address_Line_1);
   PARAMETER(NLL.Bill_to_Address_Line_2);
   PARAMETER(NLL.Bill_to_Address_Line_3);
   PARAMETER(NLL.Bill_to_City);
   PARAMETER(NLL.Bill_to_State_Code);
   PARAMETER(NLL.Bill_to_Zip_Postal_Code);
   PARAMETER(NLL.Customer_Purchase_Order_#);
   PARAMETER(NLL.Order_Date);
   PARAMETER(WRK.Requested_Ship_Date);
   PARAMETER(WRK.Actual_Shipped_Date);
   PARAMETER(NLL.Cancel_Date);
   PARAMETER(NLL.Terms_Code);
   PARAMETER(NLL.Special_Instructions);
   PARAMETER(WRK.Special_Instructions_2);
   PARAMETER(NLL.Carrier_Code);
   PARAMETER(NLL.Comment_Print_Acknowledge);
   PARAMETER(NLL.Comment_Print_Inv_Cr_Memo);
   PARAMETER(NLL.Comment_Print_Pick_Slip);
   PARAMETER(NLL.Comment_Print_Ship_Doc);
   PARAMETER(NLL.Reason_Code);
   PARAMETER(NLL.Order_in_Use);
   PARAMETER(NLL.Header_Status);
   PARAMETER(NLL.Header_Status_Last);
   PARAMETER(NLL.Order_Type_Print_Status);
   PARAMETER(WRK.Scheduled_Ship_Date);
   PARAMETER(NLL.User_Original_Entry);
   PARAMETER(NLL.Date_of_Original_Entry);
   PARAMETER(NLL.Order_Value_Total);
   PARAMETER(WRK.Order_Weight_Total);
   PARAMETER(NLL.Credit_Hold);
   PARAMETER(NLL.Production_Hold);
   PARAMETER(NLL.New_Customer_Hold);
   PARAMETER(WRK.Requested_Delivery_Date);
   PARAMETER(WRK.Requested_Delivery_Time);
   PARAMETER(NLL.Accounts_Receiv_Ent_1);
   PARAMETER(NLL.Accounts_Receiv_Ent_2);
   PARAMETER(DB1.Load_ID);
   PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
   PARAMETER(NLL.Rated_Freight);
   PARAMETER(NLL.LTL_Flag);
   PARAMETER(NLL.Price_Audit);
   PARAMETER(NLL.Price_Status);
   PARAMETER(NLL.Shipping_Method);
   PARAMETER(NLL.Export_Status);
   PARAMETER(NLL.Palletize);
   PARAMETER(NLL.Shrink_Wrap);
   PARAMETER(NLL.Slip_Sheet);
   PARAMETER(NLL.Age_Code);
   PARAMETER(NLL.Reefer_Temperature);
   PARAMETER(NLL.Load_Type);
   PARAMETER(NLL.Attach_to_Invoice_Number);
   PARAMETER(NLL.Load_Plan_Order);
   PARAMETER(NLL.Print_Pick_Slip);
   PARAMETER(NLL.Resell_Reference_Number);
   PARAMETER(NLL.Special_Comment_1);
   PARAMETER(NLL.Special_Comment_2);
   PARAMETER(NLL.Affect_Auto_Accruals);
   PARAMETER(NLL.Sales_Route_Code);
   PARAMETER(NLL.Manager_Level_Code);
   PARAMETER(NLL.VP_Level_Code);
   PARAMETER(NLL.Attach_to_Order_Number);
   PARAMETER(NLL.Reason_for_Price_Audit);
   PARAMETER(NLL.Invoice_Number);
   PARAMETER(NLL.Invoice_Suffix);
   PARAMETER(NLL.Invoice_Date);
   PARAMETER(NLL.Event_Code);
   PARAMETER(NLL.Trans_Contol_AS400_Plant);
   PARAMETER(NLL.Modified_Flag);
   PARAMETER(NLL.A_R_order_Value_Total);
   PARAMETER(NLL.Billing_Activity_Type);
   PARAMETER(NLL.Block_Order_Flag);
   PARAMETER(NLL.Order_Certification_Flag);
   PARAMETER(NLL.Invoice_Order_Value_Tot);
   PARAMETER(NLL.Process_Sts_for_3C);
   PARAMETER(NLL.Order_Conf_Fax_Sts);
   PARAMETER(NLL.Manifest_Fax_Sts);
   PARAMETER(NLL.Invoice_Fax_Sts);
   PARAMETER(NLL.Transfer_in_Storage_Ind);
   PARAMETER(NLL.Email_Cust_On_Order_Ship);
   PARAMETER(NLL.Order_Emailed);
   PARAMETER(NLL.Export_Docs_Go_w_Driver);
   PARAMETER(NLL.Shipping_Temp_Code_C_F);
   PARAMETER(NLL.Broker_Order_Status);
   PARAMETER(NLL.Air_Freight_Order);
   PARAMETER(NLL.Order_Requires_Review);
   PARAMETER(NLL.OH_Load_Plan_Ready);
   PARAMETER(NLL.Export_USDA_Approved);
   PARAMETER(NLL.HPB_Ship_to_Warehouse);
   PARAMETER(NLL.OH_TF_Exempt_Code);
   PARAMETER(NLL.OH_Appt_Confirmation_Dt);
   PARAMETER(NLL.JPN_Invoice_Issuance_Date);
   PARAMETER(NLL.Load_Actual_Shipped_Date);
   PARAMETER(NLL.Load_BOL_Complete_Date);
   PARAMETER(NLL.Load_Truck_Departure_Date);
   PARAMETER(NLL.Maximum_Gross_Weight);
   PARAMETER(NLL.Time_of_Original_Entry);
   PARAMETER(NLL.OH_Appt_Confirmation_Tm);
   PARAMETER(NLL.Load_BOL_Complete_Time);
   PARAMETER(NLL.Load_Truck_Departure_Time);
   PARAMETER(NLL.Act_Frt_Reference_Amount);
   PARAMETER(NLL.Act_Non_Ref_Frt_Amount);
   PARAMETER(NLL.OH_Fuel_Surcharge_Amount);
   PARAMETER(NLL.OH_Total_Non_Ref_Frt_Amt);
   PARAMETER(NLL.OH_Total_Ref_Frt_Amt);
   PARAMETER(NLL.Claim_Number);
   PARAMETER(NLL.EDI_Status_1);
   PARAMETER(NLL.EDI_Status_2);
   PARAMETER(NLL.EDI_Status_3);
   PARAMETER(NLL.Job_Time);
   PARAMETER(NLL.User_Id);
   PARAMETER(NLL.Job_Name);
   PARAMETER(NLL.Job_Date);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?** Skip Transfer Orders, they are Pickups, anyway
   CASE;

   // IF WRK.Order Type - Sales is Not a Transfer Order
   IF WRK.Order_Type_Sales <> 'TR';

   //?** Set Stop type to Pick-Up
   // PAR.SSI Pick/Stop Type = CND.Pickup
   PAR.SSI_Pick_Stop_Type = 'P';

   //?** Put the Stop/Drop into the Link Sequence for this only E00461
   // WRK.Stop/Drop Sequence Number = DB1.Stop/Drop
   WRK.Stop_Drop_Sequence_Number = DB1.Stop_Drop;

   // WRK.LINE = WRK.Stop/Drop Sequence Number
   WRK.LINE = WRK.Stop_Drop_Sequence_Number;

   // WRK.Text 2 = CVTVAR(WRK.LINE)
   WRK.Text_2 = CVTVAR(WRK.LINE);

   // WRK.SSI Link Sequence usr 1 = WRK.Text 2
   WRK.SSI_Link_Sequence_usr_1 = WRK.Text_2;

   //?** Put the count into Sub Type Sequence
   // WRK.Copies NBR USR = WRK.Copies NBR USR + CON.1
   WRK.Copies_NBR_USR = WRK.Copies_NBR_USR + 1;

   // WRK.LINE = WRK.Copies NBR USR
   WRK.LINE = WRK.Copies_NBR_USR;

   // WRK.Text 2 = CVTVAR(WRK.LINE)
   WRK.Text_2 = CVTVAR(WRK.LINE);

   // WRK.SSI Sub Type Sequence = WRK.Text 2
   WRK.SSI_Sub_Type_Sequence = WRK.Text_2;

   // PAR.SSI Pick/Stop Appt With = CON.*BLANK
   PAR.SSI_Pick_Stop_Appt_With = *BLANK;

   // WRK.SSI Sub Type = CND.Base Type
   WRK.SSI_Sub_Type = '00';

   //?** Blank out telephone number and appointment with fields  E00461
   EXECUTE FUNCTION(RTV Warehouse Address  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1211418;
   PARAMETER(LCL.Warehouse_Code);
   PARAMETER(PAR.SSI_Pick_Stop_Name);
   PARAMETER(PAR.SSI_Pick_Stop_Address_1);
   PARAMETER(PAR.SSI_Pick_Stop_Address_2);
   PARAMETER(NLL.Address_Line_3);
   PARAMETER(PAR.SSI_Pick_Stop_City);
   PARAMETER(PAR.SSI_Pick_Stop_State);
   PARAMETER(PAR.SSI_Pick_Stop_Postal_Zip);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // PAR.SSI Pick/Stop Phone = CON.*BLANK
   PAR.SSI_Pick_Stop_Phone = *BLANK;

   // PAR.SSI Pick/Stop Appt Number = CON.*BLANK
   PAR.SSI_Pick_Stop_Appt_Number = *BLANK;

   //?** Put Warehouse Code into Customer Number field
   // PAR.SSI Pick/Stop Customer = LCL.Warehouse Code
   PAR.SSI_Pick_Stop_Customer = LCL.Warehouse_Code;

   // PAR.SSI Pick/Stop Finish Date = CON.*BLANK
   PAR.SSI_Pick_Stop_Finish_Date = *BLANK;

   // PAR.SSI Pick/Stop Finish Time = CON.*BLANK
   PAR.SSI_Pick_Stop_Finish_Time = *BLANK;

   //?** Requested Delivery Date from Order Header into "From Date"
   EXECUTE FUNCTION(CNV cyymmdd to yyyymmdd) TYPE(EXCINTFUN)                       AC1732965;
   PARAMETER(WRK.Requested_Delivery_Date);
   PARAMETER(WRK.Date_8_0_USR);
   {
    //?Execute internal function

    // LCL.Year Code = PAR.Date In  (7,0) USR *YEAR
    LCL.Year_Code = DATEDTLS(PAR.Date_In_70_USR 'YR' 1111111 'NONE' 'N' 1);

    // LCL.Month NBR USR = PAR.Date In  (7,0) USR *MONTH
    LCL.Month_NBR_USR = DATEDTLS(PAR.Date_In_70_USR 'MO' 1111111 'NONE' 'N' 1);

    // LCL.Day of Month USR = PAR.Date In  (7,0) USR *DAY OF MONTH
    LCL.Day_of_Month_USR = DATEDTLS(PAR.Date_In_70_USR 'DM' 1111111 'NONE' 'N' 1);

    // PAR.Year Alpha (YYYY) USR = CVTVAR(LCL.Year Code)
    PAR.Year_Alpha_YYYY_USR = CVTVAR(LCL.Year_Code);

    // PAR.Month (Char) USR = CVTVAR(LCL.Month NBR USR)
    PAR.Month_Char_USR = CVTVAR(LCL.Month_NBR_USR);

    // PAR.Day   (Char) USR = CVTVAR(LCL.Day of Month USR)
    PAR.Day_Char_USR = CVTVAR(LCL.Day_of_Month_USR);

    // PAR.Date (Char-8) USR = CONCAT(PAR.Year Alpha (YYYY) USR,PAR.Month (Char) USR,CON.*ZERO)
    PAR.Date_Char_8_USR = PAR.Year_Alpha_YYYY_USR + PAR.Month_Char_USR (*ZERO);

    // PAR.Date (Char-8) USR = CONCAT(PAR.Date (Char-8) USR,PAR.Day   (Char) USR,CON.*ZERO)
    PAR.Date_Char_8_USR = PAR.Date_Char_8_USR + PAR.Day_Char_USR (*ZERO);

    // PAR.Date Out (8,0) USR = CVTVAR(PAR.Date (Char-8) USR)
    PAR.Date_Out_80_USR = CVTVAR(PAR.Date_Char_8_USR);

   }

   // WRK.Date (Char-8) USR = CVTVAR(WRK.Date 8.0 USR)
   WRK.Date_Char_8_USR = CVTVAR(WRK.Date_8_0_USR);

   // PAR.SSI Pick/Stop From Date = WRK.Date (Char-8) USR
   PAR.SSI_Pick_Stop_From_Date = WRK.Date_Char_8_USR;

   //?** Requested Delivery Time from Order Header into "From Time"
   // WRK.Text USR 4 = CVTVAR(WRK.Requested Delivery Time)
   WRK.Text_USR_4 = CVTVAR(WRK.Requested_Delivery_Time);

   // PAR.SSI Pick/Stop From Time = WRK.Text USR 4
   PAR.SSI_Pick_Stop_From_Time = WRK.Text_USR_4;

   //?** Requested Delivery Date from Order Header into "To Date"
   EXECUTE FUNCTION(CNV cyymmdd to yyyymmdd) TYPE(EXCINTFUN)                       AC1732965;
   PARAMETER(WRK.Requested_Delivery_Date);
   PARAMETER(WRK.Date_8_0_USR);
   {
    //?Execute internal function

    // LCL.Year Code = PAR.Date In  (7,0) USR *YEAR
    LCL.Year_Code = DATEDTLS(PAR.Date_In_70_USR 'YR' 1111111 'NONE' 'N' 1);

    // LCL.Month NBR USR = PAR.Date In  (7,0) USR *MONTH
    LCL.Month_NBR_USR = DATEDTLS(PAR.Date_In_70_USR 'MO' 1111111 'NONE' 'N' 1);

    // LCL.Day of Month USR = PAR.Date In  (7,0) USR *DAY OF MONTH
    LCL.Day_of_Month_USR = DATEDTLS(PAR.Date_In_70_USR 'DM' 1111111 'NONE' 'N' 1);

    // PAR.Year Alpha (YYYY) USR = CVTVAR(LCL.Year Code)
    PAR.Year_Alpha_YYYY_USR = CVTVAR(LCL.Year_Code);

    // PAR.Month (Char) USR = CVTVAR(LCL.Month NBR USR)
    PAR.Month_Char_USR = CVTVAR(LCL.Month_NBR_USR);

    // PAR.Day   (Char) USR = CVTVAR(LCL.Day of Month USR)
    PAR.Day_Char_USR = CVTVAR(LCL.Day_of_Month_USR);

    // PAR.Date (Char-8) USR = CONCAT(PAR.Year Alpha (YYYY) USR,PAR.Month (Char) USR,CON.*ZERO)
    PAR.Date_Char_8_USR = PAR.Year_Alpha_YYYY_USR + PAR.Month_Char_USR (*ZERO);

    // PAR.Date (Char-8) USR = CONCAT(PAR.Date (Char-8) USR,PAR.Day   (Char) USR,CON.*ZERO)
    PAR.Date_Char_8_USR = PAR.Date_Char_8_USR + PAR.Day_Char_USR (*ZERO);

    // PAR.Date Out (8,0) USR = CVTVAR(PAR.Date (Char-8) USR)
    PAR.Date_Out_80_USR = CVTVAR(PAR.Date_Char_8_USR);

   }

   // WRK.Text USR 8 = CVTVAR(WRK.Date 8.0 USR)
   WRK.Text_USR_8 = CVTVAR(WRK.Date_8_0_USR);

   // PAR.SSI Pick/Stop To Date = WRK.Text USR 8
   PAR.SSI_Pick_Stop_To_Date = WRK.Text_USR_8;

   //?** Requested Delivery Time from Order Header into "To Time"
   // WRK.Text USR 4 = CVTVAR(WRK.Requested Delivery Time)
   WRK.Text_USR_4 = CVTVAR(WRK.Requested_Delivery_Time);

   // PAR.SSI Pick/Stop To Time = WRK.Text USR 4
   PAR.SSI_Pick_Stop_To_Time = WRK.Text_USR_4;

   //?** Order weight conversion
   //?** 11.2 to 7.0, then convert to 7alpha
   // WRK.USR Total Weight = WRK.Order Weight Total
   WRK.USR_Total_Weight = WRK.Order_Weight_Total;

   // WRK.Text USR 7 = CVTVAR(WRK.USR Total Weight)
   WRK.Text_USR_7 = CVTVAR(WRK.USR_Total_Weight);

   // PAR.SSI Pick/Stop Com Weight = WRK.Text USR 7
   PAR.SSI_Pick_Stop_Com_Weight = WRK.Text_USR_7;

   //?** Order Quantity Scheduled - conversion
   //?** 9.0 to 7.0, then convert to 7alpha
   // WRK.Number Value - 7 = LCL.USR Quantity, 9.0
   WRK.Number_Value_7 = LCL.USR_Quantity_9_0;

   // WRK.Text 7 Alpha Usr = CVTVAR(WRK.Number Value - 7)
   WRK.Text_7_Alpha_Usr = CVTVAR(WRK.Number_Value_7);

   // PAR.SSI Pick/Stop Com Pieces = WRK.Text 7 Alpha Usr
   PAR.SSI_Pick_Stop_Com_Pieces = WRK.Text_7_Alpha_Usr;

   //?** Create Pickup record
   // Retrieve message - '&1~&2~&3~&4~&5~&6'
   PAR.SSI_Header_Record_1 = RTVMSG(USR4051);
   PARAMETER(PAR.SSI_Master_BOL_Number);
   PARAMETER(PAR.SSI_Trading_Partner_#);
   PARAMETER(WRK.SSI_Header_Type);
   PARAMETER(WRK.SSI_Link_Sequence_usr_1);
   PARAMETER(WRK.SSI_Sub_Type);
   PARAMETER(WRK.SSI_Sub_Type_Sequence);

   // Retrieve message - '&1~&2~&3~&4~&5~&6~&7~&8'
   PAR.SSI_Pick_Stop_Data_1 = RTVMSG(USR4060);
   PARAMETER(PAR.SSI_Pick_Stop_Type);
   PARAMETER(PAR.SSI_Pick_Stop_Name);
   PARAMETER(PAR.SSI_Pick_Stop_Address_1);
   PARAMETER(PAR.SSI_Pick_Stop_Address_2);
   PARAMETER(PAR.SSI_Pick_Stop_City);
   PARAMETER(PAR.SSI_Pick_Stop_State);
   PARAMETER(PAR.SSI_Pick_Stop_Postal_Zip);
   PARAMETER(PAR.SSI_Pick_Stop_Customer);

   // Retrieve message - '&1~&2~&3~&4~&5~&6~&7~&8~&9~&10~&11~&12~&13'
   PAR.SSI_Pick_Stop_Data_2 = RTVMSG(USR4061);
   PARAMETER(PAR.SSI_Pick_Stop_Finish_Time);
   PARAMETER(PAR.SSI_Pick_Stop_Appt_With);
   PARAMETER(PAR.SSI_Pick_Stop_Phone);
   PARAMETER(PAR.SSI_Master_BOL_Number);
   PARAMETER(PAR.SSI_Pick_Stop_Appt_Number);
   PARAMETER(PAR.SSI_Pick_Stop_Late_Reason);
   PARAMETER(PAR.SSI_Pick_Stop_Com_Pieces);
   PARAMETER(PAR.SSI_Pick_Stop_Com_Pcs_Typ);
   PARAMETER(PAR.SSI_Pick_Stop_Com_Weight);
   PARAMETER(PAR.SSI_Pick_Stop_214_Status);
   PARAMETER(PAR.SSI_Pick_Stop_Time_Zone);
   PARAMETER(PAR.SSI_Pick_Stop_Ld_Unld_Dat);
   PARAMETER(PAR.SSI_Pick_Stop_Ld_Unld_Tim);

   // Retrieve message - '&1~&2~&3~&4~&5~&6~&7'
   PAR.SSI_Pick_Stop_Data_3 = RTVMSG(USR4070);
   PARAMETER(PAR.SSI_Pick_Stop_From_Date);
   PARAMETER(PAR.SSI_Pick_Stop_From_Time);
   PARAMETER(PAR.SSI_Pick_Stop_To_Date);
   PARAMETER(PAR.SSI_Pick_Stop_To_Time);
   PARAMETER(PAR.SSI_Pick_Stop_Arrive_Date);
   PARAMETER(PAR.SSI_Pick_Stop_Arrive_Time);
   PARAMETER(PAR.SSI_Pick_Stop_Finish_Date);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(PAR.SSI_Pick_Stop_Late_Reason);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(PAR.SSI_Pick_Stop_Com_Weight);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   EXECUTE FUNCTION(CRT SSI Pick/Stop      CR) TYPE(CRTOBJ) FILE(PMEKCPP)          AC1903339;
   PARAMETER(PAR.SSI_SOR_Sequence_ID);
   PARAMETER(LCL.SSI_SOR_Identifier);
   PARAMETER(*BLANK);
   PARAMETER(WRK.Count_USR);
   PARAMETER(PAR.SSI_Master_BOL_Number);
   PARAMETER(WRK.SSI_Header_Type);
   PARAMETER(WRK.SSI_Link_Sequence_usr_1);
   PARAMETER(WRK.SSI_Sub_Type);
   PARAMETER(WRK.SSI_Sub_Type_Sequence);
   PARAMETER(PAR.SSI_Header_Record_1);
   PARAMETER(PAR.SSI_Pick_Stop_Data_1);
   PARAMETER(PAR.SSI_Pick_Stop_Data_3);
   PARAMETER(PAR.SSI_Pick_Stop_Data_2);
   ENDIF;

   ENDIF;

   //?** Build Pick/Stop record for Stop or Transfer orders E00461
   DO;

   EXECUTE FUNCTION(RTV Load/Order w/o Co  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1903799;
   PARAMETER(WRK.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Order_Type_Sales);
   PARAMETER(NLL.AR_Customer_Number);
   PARAMETER(WRK.Ship_To_Customer);
   PARAMETER(WRK.SSI_Pick_Stop_Name);
   PARAMETER(WRK.SSI_Pick_Stop_Address_1);
   PARAMETER(WRK.SSI_Pick_Stop_Address_2);
   PARAMETER(NLL.Ship_To_Address_Line_3);
   PARAMETER(WRK.SSI_Pick_Stop_City);
   PARAMETER(WRK.SSI_Pick_Stop_State);
   PARAMETER(WRK.SSI_Pick_Stop_Postal_Zip);
   PARAMETER(NLL.Bill_to_Customer);
   PARAMETER(NLL.Bill_to_Name);
   PARAMETER(NLL.Bill_to_Address_Line_1);
   PARAMETER(NLL.Bill_to_Address_Line_2);
   PARAMETER(NLL.Bill_to_Address_Line_3);
   PARAMETER(NLL.Bill_to_City);
   PARAMETER(NLL.Bill_to_State_Code);
   PARAMETER(NLL.Bill_to_Zip_Postal_Code);
   PARAMETER(NLL.Customer_Purchase_Order_#);
   PARAMETER(NLL.Order_Date);
   PARAMETER(WRK.Requested_Ship_Date);
   PARAMETER(WRK.Actual_Shipped_Date);
   PARAMETER(NLL.Cancel_Date);
   PARAMETER(NLL.Terms_Code);
   PARAMETER(NLL.Special_Instructions);
   PARAMETER(WRK.Special_Instructions_2);
   PARAMETER(NLL.Carrier_Code);
   PARAMETER(NLL.Comment_Print_Acknowledge);
   PARAMETER(NLL.Comment_Print_Inv_Cr_Memo);
   PARAMETER(NLL.Comment_Print_Pick_Slip);
   PARAMETER(NLL.Comment_Print_Ship_Doc);
   PARAMETER(NLL.Reason_Code);
   PARAMETER(NLL.Order_in_Use);
   PARAMETER(NLL.Header_Status);
   PARAMETER(NLL.Header_Status_Last);
   PARAMETER(NLL.Order_Type_Print_Status);
   PARAMETER(WRK.Scheduled_Ship_Date);
   PARAMETER(NLL.User_Original_Entry);
   PARAMETER(NLL.Date_of_Original_Entry);
   PARAMETER(NLL.Order_Value_Total);
   PARAMETER(WRK.Order_Weight_Total);
   PARAMETER(NLL.Credit_Hold);
   PARAMETER(NLL.Production_Hold);
   PARAMETER(NLL.New_Customer_Hold);
   PARAMETER(WRK.Requested_Delivery_Date);
   PARAMETER(WRK.Requested_Delivery_Time);
   PARAMETER(NLL.Accounts_Receiv_Ent_1);
   PARAMETER(NLL.Accounts_Receiv_Ent_2);
   PARAMETER(DB1.Load_ID);
   PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
   PARAMETER(NLL.Rated_Freight);
   PARAMETER(NLL.LTL_Flag);
   PARAMETER(NLL.Price_Audit);
   PARAMETER(NLL.Price_Status);
   PARAMETER(NLL.Shipping_Method);
   PARAMETER(NLL.Export_Status);
   PARAMETER(NLL.Palletize);
   PARAMETER(NLL.Shrink_Wrap);
   PARAMETER(NLL.Slip_Sheet);
   PARAMETER(NLL.Age_Code);
   PARAMETER(NLL.Reefer_Temperature);
   PARAMETER(NLL.Load_Type);
   PARAMETER(NLL.Attach_to_Invoice_Number);
   PARAMETER(NLL.Load_Plan_Order);
   PARAMETER(NLL.Print_Pick_Slip);
   PARAMETER(NLL.Resell_Reference_Number);
   PARAMETER(NLL.Special_Comment_1);
   PARAMETER(NLL.Special_Comment_2);
   PARAMETER(NLL.Affect_Auto_Accruals);
   PARAMETER(NLL.Sales_Route_Code);
   PARAMETER(NLL.Manager_Level_Code);
   PARAMETER(NLL.VP_Level_Code);
   PARAMETER(NLL.Attach_to_Order_Number);
   PARAMETER(NLL.Reason_for_Price_Audit);
   PARAMETER(NLL.Invoice_Number);
   PARAMETER(NLL.Invoice_Suffix);
   PARAMETER(NLL.Invoice_Date);
   PARAMETER(NLL.Event_Code);
   PARAMETER(NLL.Trans_Contol_AS400_Plant);
   PARAMETER(NLL.Modified_Flag);
   PARAMETER(NLL.A_R_order_Value_Total);
   PARAMETER(NLL.Billing_Activity_Type);
   PARAMETER(NLL.Block_Order_Flag);
   PARAMETER(NLL.Order_Certification_Flag);
   PARAMETER(NLL.Invoice_Order_Value_Tot);
   PARAMETER(NLL.Process_Sts_for_3C);
   PARAMETER(NLL.Order_Conf_Fax_Sts);
   PARAMETER(NLL.Manifest_Fax_Sts);
   PARAMETER(NLL.Invoice_Fax_Sts);
   PARAMETER(NLL.Transfer_in_Storage_Ind);
   PARAMETER(NLL.Email_Cust_On_Order_Ship);
   PARAMETER(NLL.Order_Emailed);
   PARAMETER(NLL.Export_Docs_Go_w_Driver);
   PARAMETER(NLL.Shipping_Temp_Code_C_F);
   PARAMETER(NLL.Broker_Order_Status);
   PARAMETER(NLL.Air_Freight_Order);
   PARAMETER(NLL.Order_Requires_Review);
   PARAMETER(NLL.OH_Load_Plan_Ready);
   PARAMETER(NLL.Export_USDA_Approved);
   PARAMETER(NLL.HPB_Ship_to_Warehouse);
   PARAMETER(NLL.OH_TF_Exempt_Code);
   PARAMETER(NLL.OH_Appt_Confirmation_Dt);
   PARAMETER(NLL.JPN_Invoice_Issuance_Date);
   PARAMETER(NLL.Load_Actual_Shipped_Date);
   PARAMETER(NLL.Load_BOL_Complete_Date);
   PARAMETER(NLL.Load_Truck_Departure_Date);
   PARAMETER(NLL.Maximum_Gross_Weight);
   PARAMETER(NLL.Time_of_Original_Entry);
   PARAMETER(NLL.OH_Appt_Confirmation_Tm);
   PARAMETER(NLL.Load_BOL_Complete_Time);
   PARAMETER(NLL.Load_Truck_Departure_Time);
   PARAMETER(NLL.Act_Frt_Reference_Amount);
   PARAMETER(NLL.Act_Non_Ref_Frt_Amount);
   PARAMETER(NLL.OH_Fuel_Surcharge_Amount);
   PARAMETER(NLL.OH_Total_Non_Ref_Frt_Amt);
   PARAMETER(NLL.OH_Total_Ref_Frt_Amt);
   PARAMETER(NLL.Claim_Number);
   PARAMETER(NLL.EDI_Status_1);
   PARAMETER(NLL.EDI_Status_2);
   PARAMETER(NLL.EDI_Status_3);
   PARAMETER(NLL.Job_Time);
   PARAMETER(NLL.User_Id);
   PARAMETER(NLL.Job_Name);
   PARAMETER(NLL.Job_Date);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?** Regular orders = "S" and Transfer orders = "P"
   CASE;

   // IF WRK.Order Type - Sales is Regular Order
   IF WRK.Order_Type_Sales = 'OR';

   // PAR.SSI Pick/Stop Type = CND.Stopoff
   PAR.SSI_Pick_Stop_Type = 'S';

   //?** Regular orders = "S" and Transfer orders = "P"
   // IF WRK.Order Type - Sales is Transfer Order
   IF WRK.Order_Type_Sales = 'TR';

   // PAR.SSI Pick/Stop Type = CND.Pickup
   PAR.SSI_Pick_Stop_Type = 'P';

   ENDIF;

   //?** Override the last order to "F" for Final
   CASE;

   // IF WRK.SSI Link Sequence is Destination
   IF WRK.SSI_Link_Sequence = '99';

   // OR LCL.Total Stops is One Stop
   OR LCL.Total_Stops = 1;

   // PAR.SSI Pick/Stop Type = CND.Final
   PAR.SSI_Pick_Stop_Type = 'F';

   ENDIF;

   //?** Put the count into Sub Type Sequence
   // WRK.Copies NBR USR = WRK.Copies NBR USR + CON.1
   WRK.Copies_NBR_USR = WRK.Copies_NBR_USR + 1;

   // WRK.LINE = WRK.Copies NBR USR
   WRK.LINE = WRK.Copies_NBR_USR;

   // WRK.Text 2 = CVTVAR(WRK.LINE)
   WRK.Text_2 = CVTVAR(WRK.LINE);

   // WRK.SSI Sub Type Sequence = WRK.Text 2
   WRK.SSI_Sub_Type_Sequence = WRK.Text_2;

   // PAR.SSI Pick/Stop Appt With = DB1.Confirmation Made With
   PAR.SSI_Pick_Stop_Appt_With = DB1.Confirmation_Made_With;

   // WRK.SSI Sub Type = CND.Base Type
   WRK.SSI_Sub_Type = '00';

   //?** Telephone, Alpha-nbr only is 15 characters. While it is being
   //?** moved to a 15 char field, SSI only uses the first 11 characters
   EXECUTE FUNCTION(RTV Customer Telephone RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1216241;
   PARAMETER(WRK.Ship_To_Customer);
   PARAMETER(WRK.Telephone_Number_FF);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // Execute function CLC Rmv NonNbr fr PhoneUS.
   EXECUTE FUNCTION(CLC Rmv NonNbr fr PhoneUS) TYPE(EXCUSRSRC) ('PMBQUFR');
   PARAMETER(WRK.Telephone_Number_FF);
   PARAMETER(WRK.Telephone_Alpha_nbr_only);
   {
    ** INPUT FIELD MUST BE 25 CHARACTER "TELEPHONE NUMBER FF"
    ** OUTPUT FIELD MUST BE 15 CHARACTER "TELEPHONE, ALPHA-NBR ONLY"
    ** BOTH FIELDS ARE PUT INTO WRK CONTEXT
    E                    PHI        25  1
    E                    PHO        15  1
    *
    * RPG CODE TO TAKE NON-NUMBERICS OUT OF PHONE #
    C                     MOVE *BLANKS   PHI
    C                     MOVE *BLANKS   PHO
    C                     MOVEAWUBVTX    PHI
    C                     Z-ADD1         X       20
    C                     Z-ADD1         Y       20
    * TEST TO MOVE ONLY NUMBERIC NUMBERS
    C                     DO   25
    C                     SETOF                     89
    C                     TESTN          PHI,X      89
    C           Y         IFLT 16
    C           *IN89     IFEQ '1'
    C                     MOVE PHI,X     PHO,Y
    C                     ADD  1         Y
    C                     ENDIF                           END *IN89
    C                     ADD  1         X
    C                     ENDIF                           END Y IFLT
    C                     ENDDO                           END DO 25
    C                     MOVEAPHO       WUT9T1
   }

   // PAR.SSI Pick/Stop Phone = WRK.Telephone, Alpha-nbr only
   PAR.SSI_Pick_Stop_Phone = WRK.Telephone_Alpha_nbr_only;

   // PAR.SSI Pick/Stop Appt Number = DB1.Confirmation Number
   PAR.SSI_Pick_Stop_Appt_Number = DB1.Confirmation_Number;

   //?** Customer number conversion
   // WRK.Text USR 7 = CVTVAR(WRK.Ship To Customer)
   WRK.Text_USR_7 = CVTVAR(WRK.Ship_To_Customer);

   // PAR.SSI Pick/Stop Customer = WRK.Text USR 7
   PAR.SSI_Pick_Stop_Customer = WRK.Text_USR_7;

   //?** Default blanks                                     E00461
   // PAR.SSI Pick/Stop Finish Date = CON.*BLANK
   PAR.SSI_Pick_Stop_Finish_Date = *BLANK;

   // PAR.SSI Pick/Stop Finish Time = CON.*BLANK
   PAR.SSI_Pick_Stop_Finish_Time = *BLANK;

   //?** Requested Delivery Date from Order Header into "From Date"
   EXECUTE FUNCTION(CNV cyymmdd to yyyymmdd) TYPE(EXCINTFUN)                       AC1732965;
   PARAMETER(WRK.Requested_Delivery_Date);
   PARAMETER(WRK.Date_8_0_USR);
   {
    //?Execute internal function

    // LCL.Year Code = PAR.Date In  (7,0) USR *YEAR
    LCL.Year_Code = DATEDTLS(PAR.Date_In_70_USR 'YR' 1111111 'NONE' 'N' 1);

    // LCL.Month NBR USR = PAR.Date In  (7,0) USR *MONTH
    LCL.Month_NBR_USR = DATEDTLS(PAR.Date_In_70_USR 'MO' 1111111 'NONE' 'N' 1);

    // LCL.Day of Month USR = PAR.Date In  (7,0) USR *DAY OF MONTH
    LCL.Day_of_Month_USR = DATEDTLS(PAR.Date_In_70_USR 'DM' 1111111 'NONE' 'N' 1);

    // PAR.Year Alpha (YYYY) USR = CVTVAR(LCL.Year Code)
    PAR.Year_Alpha_YYYY_USR = CVTVAR(LCL.Year_Code);

    // PAR.Month (Char) USR = CVTVAR(LCL.Month NBR USR)
    PAR.Month_Char_USR = CVTVAR(LCL.Month_NBR_USR);

    // PAR.Day   (Char) USR = CVTVAR(LCL.Day of Month USR)
    PAR.Day_Char_USR = CVTVAR(LCL.Day_of_Month_USR);

    // PAR.Date (Char-8) USR = CONCAT(PAR.Year Alpha (YYYY) USR,PAR.Month (Char) USR,CON.*ZERO)
    PAR.Date_Char_8_USR = PAR.Year_Alpha_YYYY_USR + PAR.Month_Char_USR (*ZERO);

    // PAR.Date (Char-8) USR = CONCAT(PAR.Date (Char-8) USR,PAR.Day   (Char) USR,CON.*ZERO)
    PAR.Date_Char_8_USR = PAR.Date_Char_8_USR + PAR.Day_Char_USR (*ZERO);

    // PAR.Date Out (8,0) USR = CVTVAR(PAR.Date (Char-8) USR)
    PAR.Date_Out_80_USR = CVTVAR(PAR.Date_Char_8_USR);

   }

   // WRK.Date (Char-8) USR = CVTVAR(WRK.Date 8.0 USR)
   WRK.Date_Char_8_USR = CVTVAR(WRK.Date_8_0_USR);

   // PAR.SSI Pick/Stop From Date = WRK.Date (Char-8) USR
   PAR.SSI_Pick_Stop_From_Date = WRK.Date_Char_8_USR;

   //?** Requested Delivery Time from Order Header into "From Time"
   // WRK.Text USR 4 = CVTVAR(WRK.Requested Delivery Time)
   WRK.Text_USR_4 = CVTVAR(WRK.Requested_Delivery_Time);

   // PAR.SSI Pick/Stop From Time = WRK.Text USR 4
   PAR.SSI_Pick_Stop_From_Time = WRK.Text_USR_4;

   //?** Requested Delivery Date from Order Header into "To Date"
   EXECUTE FUNCTION(CNV cyymmdd to yyyymmdd) TYPE(EXCINTFUN)                       AC1732965;
   PARAMETER(WRK.Requested_Delivery_Date);
   PARAMETER(WRK.Date_8_0_USR);
   {
    //?Execute internal function

    // LCL.Year Code = PAR.Date In  (7,0) USR *YEAR
    LCL.Year_Code = DATEDTLS(PAR.Date_In_70_USR 'YR' 1111111 'NONE' 'N' 1);

    // LCL.Month NBR USR = PAR.Date In  (7,0) USR *MONTH
    LCL.Month_NBR_USR = DATEDTLS(PAR.Date_In_70_USR 'MO' 1111111 'NONE' 'N' 1);

    // LCL.Day of Month USR = PAR.Date In  (7,0) USR *DAY OF MONTH
    LCL.Day_of_Month_USR = DATEDTLS(PAR.Date_In_70_USR 'DM' 1111111 'NONE' 'N' 1);

    // PAR.Year Alpha (YYYY) USR = CVTVAR(LCL.Year Code)
    PAR.Year_Alpha_YYYY_USR = CVTVAR(LCL.Year_Code);

    // PAR.Month (Char) USR = CVTVAR(LCL.Month NBR USR)
    PAR.Month_Char_USR = CVTVAR(LCL.Month_NBR_USR);

    // PAR.Day   (Char) USR = CVTVAR(LCL.Day of Month USR)
    PAR.Day_Char_USR = CVTVAR(LCL.Day_of_Month_USR);

    // PAR.Date (Char-8) USR = CONCAT(PAR.Year Alpha (YYYY) USR,PAR.Month (Char) USR,CON.*ZERO)
    PAR.Date_Char_8_USR = PAR.Year_Alpha_YYYY_USR + PAR.Month_Char_USR (*ZERO);

    // PAR.Date (Char-8) USR = CONCAT(PAR.Date (Char-8) USR,PAR.Day   (Char) USR,CON.*ZERO)
    PAR.Date_Char_8_USR = PAR.Date_Char_8_USR + PAR.Day_Char_USR (*ZERO);

    // PAR.Date Out (8,0) USR = CVTVAR(PAR.Date (Char-8) USR)
    PAR.Date_Out_80_USR = CVTVAR(PAR.Date_Char_8_USR);

   }

   // WRK.Text USR 8 = CVTVAR(WRK.Date 8.0 USR)
   WRK.Text_USR_8 = CVTVAR(WRK.Date_8_0_USR);

   // PAR.SSI Pick/Stop To Date = WRK.Text USR 8
   PAR.SSI_Pick_Stop_To_Date = WRK.Text_USR_8;

   //?** Requested Delivery Time from Order Header into "To Time"
   // WRK.Text USR 4 = CVTVAR(WRK.Requested Delivery Time)
   WRK.Text_USR_4 = CVTVAR(WRK.Requested_Delivery_Time);

   // PAR.SSI Pick/Stop To Time = WRK.Text USR 4
   PAR.SSI_Pick_Stop_To_Time = WRK.Text_USR_4;

   //?** Order weight conversion
   //?** 11.2 to 7.0, then convert to 7alpha
   // WRK.USR Total Weight = WRK.Order Weight Total
   WRK.USR_Total_Weight = WRK.Order_Weight_Total;

   // WRK.Text USR 7 = CVTVAR(WRK.USR Total Weight)
   WRK.Text_USR_7 = CVTVAR(WRK.USR_Total_Weight);

   // PAR.SSI Pick/Stop Com Weight = WRK.Text USR 7
   PAR.SSI_Pick_Stop_Com_Weight = WRK.Text_USR_7;

   //?** Order Quantity Scheduled - conversion
   //?** total quantity scheduled from the Order Detail (all orders)
   //?** 9.0 to 7.0, then convert to 7alpha
   // WRK.Number Value - 7 = LCL.USR Quantity, 9.0
   WRK.Number_Value_7 = LCL.USR_Quantity_9_0;

   // WRK.Text 7 Alpha Usr = CVTVAR(WRK.Number Value - 7)
   WRK.Text_7_Alpha_Usr = CVTVAR(WRK.Number_Value_7);

   // PAR.SSI Pick/Stop Com Pieces = WRK.Text 7 Alpha Usr
   PAR.SSI_Pick_Stop_Com_Pieces = WRK.Text_7_Alpha_Usr;

   //?** Check to see if there is an Order Header Extension record
   //?** If there is, put the Terminal into the Customer Name field
   //?** and the OHE City into the Customer City field      E00461
   EXECUTE FUNCTION(RTV OHE for SSI orders RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC1951317;
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Load_ID);
   PARAMETER(LCL.Shipping_Line);
   PARAMETER(LCL.Port_Delv_Terminal);
   PARAMETER(LCL.OHE_City);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?** Update Cust name and city if Deliv Term and Port city exist
   CASE;

   // IF LCL.Port Delv Terminal is Entered
   IF LCL.Port_Delv_Terminal <> *BLANK;

   // WRK.SSI Pick/Stop Name = LCL.Port Delv Terminal
   WRK.SSI_Pick_Stop_Name = LCL.Port_Delv_Terminal;

   // WRK.SSI Pick/Stop City = LCL.OHE City
   WRK.SSI_Pick_Stop_City = LCL.OHE_City;

   EXECUTE FUNCTION(RTV Shipping State     RT) TYPE(RTVOBJ) FILE(PDLCREP)          AC1519600;
   PARAMETER(LCL.Shipping_Line);
   PARAMETER(LCL.Port_Delv_Terminal);
   PARAMETER(LCL.Sail_Port_State);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    QUIT;

    //?USER: Process Data record

    // PAR.Sail Port State = DB1.Sail Port State
    PAR.Sail_Port_State = DB1.Sail_Port_State;

    QUIT;

   }

   // WRK.SSI Pick/Stop State = LCL.Sail Port State
   WRK.SSI_Pick_Stop_State = LCL.Sail_Port_State;

   ENDIF;

   //?** Create Pick/Stop record
   // Retrieve message - '&1~&2~&3~&4~&5~&6'
   PAR.SSI_Header_Record_1 = RTVMSG(USR4051);
   PARAMETER(PAR.SSI_Master_BOL_Number);
   PARAMETER(PAR.SSI_Trading_Partner_#);
   PARAMETER(WRK.SSI_Header_Type);
   PARAMETER(WRK.SSI_Link_Sequence);
   PARAMETER(WRK.SSI_Sub_Type);
   PARAMETER(WRK.SSI_Sub_Type_Sequence);

   // Retrieve message - '&1~&2~&3~&4~&5~&6~&7~&8'
   PAR.SSI_Pick_Stop_Data_1 = RTVMSG(USR4060);
   PARAMETER(PAR.SSI_Pick_Stop_Type);
   PARAMETER(WRK.SSI_Pick_Stop_Name);
   PARAMETER(WRK.SSI_Pick_Stop_Address_1);
   PARAMETER(WRK.SSI_Pick_Stop_Address_2);
   PARAMETER(WRK.SSI_Pick_Stop_City);
   PARAMETER(WRK.SSI_Pick_Stop_State);
   PARAMETER(WRK.SSI_Pick_Stop_Postal_Zip);
   PARAMETER(PAR.SSI_Pick_Stop_Customer);

   // Retrieve message - '&1~&2~&3~&4~&5~&6~&7~&8~&9~&10~&11~&12~&13'
   PAR.SSI_Pick_Stop_Data_2 = RTVMSG(USR4061);
   PARAMETER(PAR.SSI_Pick_Stop_Finish_Time);
   PARAMETER(PAR.SSI_Pick_Stop_Appt_With);
   PARAMETER(PAR.SSI_Pick_Stop_Phone);
   PARAMETER(PAR.SSI_Master_BOL_Number);
   PARAMETER(PAR.SSI_Pick_Stop_Appt_Number);
   PARAMETER(PAR.SSI_Pick_Stop_Late_Reason);
   PARAMETER(PAR.SSI_Pick_Stop_Com_Pieces);
   PARAMETER(PAR.SSI_Pick_Stop_Com_Pcs_Typ);
   PARAMETER(PAR.SSI_Pick_Stop_Com_Weight);
   PARAMETER(PAR.SSI_Pick_Stop_214_Status);
   PARAMETER(PAR.SSI_Pick_Stop_Time_Zone);
   PARAMETER(PAR.SSI_Pick_Stop_Ld_Unld_Dat);
   PARAMETER(PAR.SSI_Pick_Stop_Ld_Unld_Tim);

   // Retrieve message - '&1~&2~&3~&4~&5~&6~&7'
   PAR.SSI_Pick_Stop_Data_3 = RTVMSG(USR4070);
   PARAMETER(PAR.SSI_Pick_Stop_From_Date);
   PARAMETER(PAR.SSI_Pick_Stop_From_Time);
   PARAMETER(PAR.SSI_Pick_Stop_To_Date);
   PARAMETER(PAR.SSI_Pick_Stop_To_Time);
   PARAMETER(PAR.SSI_Pick_Stop_Arrive_Date);
   PARAMETER(PAR.SSI_Pick_Stop_Arrive_Time);
   PARAMETER(PAR.SSI_Pick_Stop_Finish_Date);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(PAR.SSI_Pick_Stop_Late_Reason);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(PAR.SSI_Pick_Stop_Com_Weight);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   EXECUTE FUNCTION(CRT SSI Pick/Stop      CR) TYPE(CRTOBJ) FILE(PMEKCPP)          AC1903339;
   PARAMETER(PAR.SSI_SOR_Sequence_ID);
   PARAMETER(LCL.SSI_SOR_Identifier);
   PARAMETER(*BLANK);
   PARAMETER(WRK.Count_USR);
   PARAMETER(PAR.SSI_Master_BOL_Number);
   PARAMETER(WRK.SSI_Header_Type);
   PARAMETER(WRK.SSI_Link_Sequence);
   PARAMETER(WRK.SSI_Sub_Type);
   PARAMETER(WRK.SSI_Sub_Type_Sequence);
   PARAMETER(PAR.SSI_Header_Record_1);
   PARAMETER(PAR.SSI_Pick_Stop_Data_1);
   PARAMETER(PAR.SSI_Pick_Stop_Data_3);
   PARAMETER(PAR.SSI_Pick_Stop_Data_2);
   ENDDO;

   // LCL.USR Warehouse Code = LCL.Warehouse Code
   LCL.USR_Warehouse_Code = LCL.Warehouse_Code;

   // LCL.USR Warehouse Location = LCL.Warehouse Location
   LCL.USR_Warehouse_Location = LCL.Warehouse_Location;

   // LCL.USR City = LCL.City
   LCL.USR_City = LCL.City;

   // LCL.USR State Code = LCL.State Code
   LCL.USR_State_Code = LCL.State_Code;

   //?** Build Pick/Stop for Stops                          E00461
   // IF WRK.SSI Link Sequence is Origin
   IF WRK.SSI_Link_Sequence = '01';

   // AND DB1.Stop/Drop NE WRK.Stop/Drop
   AND DB1.Stop_Drop <> WRK.Stop_Drop;

   //?** Build Pick/Stop for 1st stop on the load           E00461
   //?** Put the stop number into the SSI Link Sequence for the stop
   // WRK.LINE = DB1.Stop/Drop
   WRK.LINE = DB1.Stop_Drop;

   // WRK.Text 2 Length USR = CVTVAR(WRK.LINE)
   WRK.Text_2_Length_USR = CVTVAR(WRK.LINE);

   // WRK.SSI Link Sequence = WRK.Text 2 Length USR
   WRK.SSI_Link_Sequence = WRK.Text_2_Length_USR;

   EXECUTE FUNCTION(RTV Total Qty & Weight RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428887;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(LCL.USR_Quantity_9_0);
   PARAMETER(LCL.USR_Weight_9_1);
   {
    //?USER: Initialize routine

    // WRK.Quantity Allocated = CON.*ZERO
    WRK.Quantity_Scheduled = *ZERO;

    // WRK.Weight Allocated = CON.*ZERO
    WRK.Weight_Scheduled = *ZERO;

    //?USER: Process Data record

    CASE;

    // IF DB1.Detail Line Status is Not cancelled
    IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

    // WRK.Quantity Scheduled = WRK.Quantity Scheduled + DB1.Quantity Scheduled
    WRK.Quantity_Scheduled = WRK.Quantity_Scheduled + DB1.Quantity_Scheduled;

    // WRK.Weight Scheduled = WRK.Weight Scheduled + DB1.Weight Scheduled
    WRK.Weight_Scheduled = WRK.Weight_Scheduled + DB1.Weight_Scheduled;

    // WRK.Weight Shipped Total = WRK.Weight Shipped Total + DB1.Weight Shipped Total
    WRK.Weight_Shipped_Total = WRK.Weight_Shipped_Total + DB1.Weight_Shipped_Total;

    // WRK.Tare Weight Total = WRK.Tare Weight Total + DB1.Tare Weight Total
    WRK.Tare_Weight_Total = WRK.Tare_Weight_Total + DB1.Tare_Weight_Total;

    ENDIF;

    //?USER: Exit processing

    // PAR.USR Quantity, 9.0 = WRK.Quantity Scheduled * CON.1 *Rounded
    PAR.USR_Quantity_9_0 = WRK.Quantity_Scheduled * 1 'H';

    // PAR.USR Weight   9.1 = WRK.Weight Scheduled * CON.1 *Rounded
    PAR.USR_Weight_9_1 = WRK.Weight_Scheduled * 1 'H';

    // PAR.USR Weight   9.1  2 = WRK.Weight Shipped Total * CON.1 *Rounded
    PAR.USR_Weight_9_1_2 = WRK.Weight_Shipped_Total * 1 'H';

   }

   EXECUTE FUNCTION(RTV Load/Order w/o Co  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1903799;
   PARAMETER(WRK.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Order_Type_Sales);
   PARAMETER(NLL.AR_Customer_Number);
   PARAMETER(WRK.Ship_To_Customer);
   PARAMETER(WRK.SSI_Pick_Stop_Name);
   PARAMETER(WRK.SSI_Pick_Stop_Address_1);
   PARAMETER(WRK.SSI_Pick_Stop_Address_2);
   PARAMETER(NLL.Ship_To_Address_Line_3);
   PARAMETER(WRK.SSI_Pick_Stop_City);
   PARAMETER(WRK.SSI_Pick_Stop_State);
   PARAMETER(WRK.SSI_Pick_Stop_Postal_Zip);
   PARAMETER(NLL.Bill_to_Customer);
   PARAMETER(NLL.Bill_to_Name);
   PARAMETER(NLL.Bill_to_Address_Line_1);
   PARAMETER(NLL.Bill_to_Address_Line_2);
   PARAMETER(NLL.Bill_to_Address_Line_3);
   PARAMETER(NLL.Bill_to_City);
   PARAMETER(NLL.Bill_to_State_Code);
   PARAMETER(NLL.Bill_to_Zip_Postal_Code);
   PARAMETER(NLL.Customer_Purchase_Order_#);
   PARAMETER(NLL.Order_Date);
   PARAMETER(WRK.Requested_Ship_Date);
   PARAMETER(WRK.Actual_Shipped_Date);
   PARAMETER(NLL.Cancel_Date);
   PARAMETER(NLL.Terms_Code);
   PARAMETER(NLL.Special_Instructions);
   PARAMETER(WRK.Special_Instructions_2);
   PARAMETER(NLL.Carrier_Code);
   PARAMETER(NLL.Comment_Print_Acknowledge);
   PARAMETER(NLL.Comment_Print_Inv_Cr_Memo);
   PARAMETER(NLL.Comment_Print_Pick_Slip);
   PARAMETER(NLL.Comment_Print_Ship_Doc);
   PARAMETER(NLL.Reason_Code);
   PARAMETER(NLL.Order_in_Use);
   PARAMETER(NLL.Header_Status);
   PARAMETER(NLL.Header_Status_Last);
   PARAMETER(NLL.Order_Type_Print_Status);
   PARAMETER(WRK.Scheduled_Ship_Date);
   PARAMETER(NLL.User_Original_Entry);
   PARAMETER(NLL.Date_of_Original_Entry);
   PARAMETER(NLL.Order_Value_Total);
   PARAMETER(WRK.Order_Weight_Total);
   PARAMETER(NLL.Credit_Hold);
   PARAMETER(NLL.Production_Hold);
   PARAMETER(NLL.New_Customer_Hold);
   PARAMETER(WRK.Requested_Delivery_Date);
   PARAMETER(WRK.Requested_Delivery_Time);
   PARAMETER(NLL.Accounts_Receiv_Ent_1);
   PARAMETER(NLL.Accounts_Receiv_Ent_2);
   PARAMETER(DB1.Load_ID);
   PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
   PARAMETER(NLL.Rated_Freight);
   PARAMETER(NLL.LTL_Flag);
   PARAMETER(NLL.Price_Audit);
   PARAMETER(NLL.Price_Status);
   PARAMETER(NLL.Shipping_Method);
   PARAMETER(NLL.Export_Status);
   PARAMETER(NLL.Palletize);
   PARAMETER(NLL.Shrink_Wrap);
   PARAMETER(NLL.Slip_Sheet);
   PARAMETER(NLL.Age_Code);
   PARAMETER(NLL.Reefer_Temperature);
   PARAMETER(NLL.Load_Type);
   PARAMETER(NLL.Attach_to_Invoice_Number);
   PARAMETER(NLL.Load_Plan_Order);
   PARAMETER(NLL.Print_Pick_Slip);
   PARAMETER(NLL.Resell_Reference_Number);
   PARAMETER(NLL.Special_Comment_1);
   PARAMETER(NLL.Special_Comment_2);
   PARAMETER(NLL.Affect_Auto_Accruals);
   PARAMETER(NLL.Sales_Route_Code);
   PARAMETER(NLL.Manager_Level_Code);
   PARAMETER(NLL.VP_Level_Code);
   PARAMETER(NLL.Attach_to_Order_Number);
   PARAMETER(NLL.Reason_for_Price_Audit);
   PARAMETER(NLL.Invoice_Number);
   PARAMETER(NLL.Invoice_Suffix);
   PARAMETER(NLL.Invoice_Date);
   PARAMETER(NLL.Event_Code);
   PARAMETER(NLL.Trans_Contol_AS400_Plant);
   PARAMETER(NLL.Modified_Flag);
   PARAMETER(NLL.A_R_order_Value_Total);
   PARAMETER(NLL.Billing_Activity_Type);
   PARAMETER(NLL.Block_Order_Flag);
   PARAMETER(NLL.Order_Certification_Flag);
   PARAMETER(NLL.Invoice_Order_Value_Tot);
   PARAMETER(NLL.Process_Sts_for_3C);
   PARAMETER(NLL.Order_Conf_Fax_Sts);
   PARAMETER(NLL.Manifest_Fax_Sts);
   PARAMETER(NLL.Invoice_Fax_Sts);
   PARAMETER(NLL.Transfer_in_Storage_Ind);
   PARAMETER(NLL.Email_Cust_On_Order_Ship);
   PARAMETER(NLL.Order_Emailed);
   PARAMETER(NLL.Export_Docs_Go_w_Driver);
   PARAMETER(NLL.Shipping_Temp_Code_C_F);
   PARAMETER(NLL.Broker_Order_Status);
   PARAMETER(NLL.Air_Freight_Order);
   PARAMETER(NLL.Order_Requires_Review);
   PARAMETER(NLL.OH_Load_Plan_Ready);
   PARAMETER(NLL.Export_USDA_Approved);
   PARAMETER(NLL.HPB_Ship_to_Warehouse);
   PARAMETER(NLL.OH_TF_Exempt_Code);
   PARAMETER(NLL.OH_Appt_Confirmation_Dt);
   PARAMETER(NLL.JPN_Invoice_Issuance_Date);
   PARAMETER(NLL.Load_Actual_Shipped_Date);
   PARAMETER(NLL.Load_BOL_Complete_Date);
   PARAMETER(NLL.Load_Truck_Departure_Date);
   PARAMETER(NLL.Maximum_Gross_Weight);
   PARAMETER(NLL.Time_of_Original_Entry);
   PARAMETER(NLL.OH_Appt_Confirmation_Tm);
   PARAMETER(NLL.Load_BOL_Complete_Time);
   PARAMETER(NLL.Load_Truck_Departure_Time);
   PARAMETER(NLL.Act_Frt_Reference_Amount);
   PARAMETER(NLL.Act_Non_Ref_Frt_Amount);
   PARAMETER(NLL.OH_Fuel_Surcharge_Amount);
   PARAMETER(NLL.OH_Total_Non_Ref_Frt_Amt);
   PARAMETER(NLL.OH_Total_Ref_Frt_Amt);
   PARAMETER(NLL.Claim_Number);
   PARAMETER(NLL.EDI_Status_1);
   PARAMETER(NLL.EDI_Status_2);
   PARAMETER(NLL.EDI_Status_3);
   PARAMETER(NLL.Job_Time);
   PARAMETER(NLL.User_Id);
   PARAMETER(NLL.Job_Name);
   PARAMETER(NLL.Job_Date);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?** Regular orders = "S" and Transfer orders = "P"
   CASE;

   // IF WRK.Order Type - Sales is Regular Order
   IF WRK.Order_Type_Sales = 'OR';

   // PAR.SSI Pick/Stop Type = CND.Stopoff
   PAR.SSI_Pick_Stop_Type = 'S';

   //?** Regular orders = "S" and Transfer orders = "P"
   // IF WRK.Order Type - Sales is Transfer Order
   IF WRK.Order_Type_Sales = 'TR';

   // PAR.SSI Pick/Stop Type = CND.Pickup
   PAR.SSI_Pick_Stop_Type = 'P';

   ENDIF;

   //?** Override the last order to "F" for Final
   CASE;

   // IF WRK.SSI Link Sequence is Destination
   IF WRK.SSI_Link_Sequence = '99';

   // OR LCL.Total Stops is One Stop
   OR LCL.Total_Stops = 1;

   // PAR.SSI Pick/Stop Type = CND.Final
   PAR.SSI_Pick_Stop_Type = 'F';

   // WRK.SSI Link Sequence = CND.Destination
   WRK.SSI_Link_Sequence = '99';

   ENDIF;

   //?** Put the count into Sub Type Sequence
   // WRK.Copies NBR USR = WRK.Copies NBR USR + CON.1
   WRK.Copies_NBR_USR = WRK.Copies_NBR_USR + 1;

   // WRK.LINE = WRK.Copies NBR USR
   WRK.LINE = WRK.Copies_NBR_USR;

   // WRK.Text 2 = CVTVAR(WRK.LINE)
   WRK.Text_2 = CVTVAR(WRK.LINE);

   // WRK.SSI Sub Type Sequence = WRK.Text 2
   WRK.SSI_Sub_Type_Sequence = WRK.Text_2;

   // PAR.SSI Pick/Stop Appt With = DB1.Confirmation Made With
   PAR.SSI_Pick_Stop_Appt_With = DB1.Confirmation_Made_With;

   // WRK.SSI Sub Type = CND.Base Type
   WRK.SSI_Sub_Type = '00';

   //?** Telephone, Alpha-nbr only is 15 characters. While it is being
   //?** moved to a 15 char field, SSI only uses the first 11 characters
   EXECUTE FUNCTION(RTV Customer Telephone RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1216241;
   PARAMETER(WRK.Ship_To_Customer);
   PARAMETER(WRK.Telephone_Number_FF);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // Execute function CLC Rmv NonNbr fr PhoneUS.
   EXECUTE FUNCTION(CLC Rmv NonNbr fr PhoneUS) TYPE(EXCUSRSRC) ('PMBQUFR');
   PARAMETER(WRK.Telephone_Number_FF);
   PARAMETER(WRK.Telephone_Alpha_nbr_only);
   {
    ** INPUT FIELD MUST BE 25 CHARACTER "TELEPHONE NUMBER FF"
    ** OUTPUT FIELD MUST BE 15 CHARACTER "TELEPHONE, ALPHA-NBR ONLY"
    ** BOTH FIELDS ARE PUT INTO WRK CONTEXT
    E                    PHI        25  1
    E                    PHO        15  1
    *
    * RPG CODE TO TAKE NON-NUMBERICS OUT OF PHONE #
    C                     MOVE *BLANKS   PHI
    C                     MOVE *BLANKS   PHO
    C                     MOVEAWUBVTX    PHI
    C                     Z-ADD1         X       20
    C                     Z-ADD1         Y       20
    * TEST TO MOVE ONLY NUMBERIC NUMBERS
    C                     DO   25
    C                     SETOF                     89
    C                     TESTN          PHI,X      89
    C           Y         IFLT 16
    C           *IN89     IFEQ '1'
    C                     MOVE PHI,X     PHO,Y
    C                     ADD  1         Y
    C                     ENDIF                           END *IN89
    C                     ADD  1         X
    C                     ENDIF                           END Y IFLT
    C                     ENDDO                           END DO 25
    C                     MOVEAPHO       WUT9T1
   }

   // PAR.SSI Pick/Stop Phone = WRK.Telephone, Alpha-nbr only
   PAR.SSI_Pick_Stop_Phone = WRK.Telephone_Alpha_nbr_only;

   // PAR.SSI Pick/Stop Appt Number = DB1.Confirmation Number
   PAR.SSI_Pick_Stop_Appt_Number = DB1.Confirmation_Number;

   //?** Customer number conversion
   // WRK.Text USR 7 = CVTVAR(WRK.Ship To Customer)
   WRK.Text_USR_7 = CVTVAR(WRK.Ship_To_Customer);

   // PAR.SSI Pick/Stop Customer = WRK.Text USR 7
   PAR.SSI_Pick_Stop_Customer = WRK.Text_USR_7;

   //?** Default blanks                                     E00461
   // PAR.SSI Pick/Stop Finish Date = CON.*BLANK
   PAR.SSI_Pick_Stop_Finish_Date = *BLANK;

   // PAR.SSI Pick/Stop Finish Time = CON.*BLANK
   PAR.SSI_Pick_Stop_Finish_Time = *BLANK;

   //?** Requested Delivery Date from Order Header into "From Date"
   EXECUTE FUNCTION(CNV cyymmdd to yyyymmdd) TYPE(EXCINTFUN)                       AC1732965;
   PARAMETER(WRK.Requested_Delivery_Date);
   PARAMETER(WRK.Date_8_0_USR);
   {
    //?Execute internal function

    // LCL.Year Code = PAR.Date In  (7,0) USR *YEAR
    LCL.Year_Code = DATEDTLS(PAR.Date_In_70_USR 'YR' 1111111 'NONE' 'N' 1);

    // LCL.Month NBR USR = PAR.Date In  (7,0) USR *MONTH
    LCL.Month_NBR_USR = DATEDTLS(PAR.Date_In_70_USR 'MO' 1111111 'NONE' 'N' 1);

    // LCL.Day of Month USR = PAR.Date In  (7,0) USR *DAY OF MONTH
    LCL.Day_of_Month_USR = DATEDTLS(PAR.Date_In_70_USR 'DM' 1111111 'NONE' 'N' 1);

    // PAR.Year Alpha (YYYY) USR = CVTVAR(LCL.Year Code)
    PAR.Year_Alpha_YYYY_USR = CVTVAR(LCL.Year_Code);

    // PAR.Month (Char) USR = CVTVAR(LCL.Month NBR USR)
    PAR.Month_Char_USR = CVTVAR(LCL.Month_NBR_USR);

    // PAR.Day   (Char) USR = CVTVAR(LCL.Day of Month USR)
    PAR.Day_Char_USR = CVTVAR(LCL.Day_of_Month_USR);

    // PAR.Date (Char-8) USR = CONCAT(PAR.Year Alpha (YYYY) USR,PAR.Month (Char) USR,CON.*ZERO)
    PAR.Date_Char_8_USR = PAR.Year_Alpha_YYYY_USR + PAR.Month_Char_USR (*ZERO);

    // PAR.Date (Char-8) USR = CONCAT(PAR.Date (Char-8) USR,PAR.Day   (Char) USR,CON.*ZERO)
    PAR.Date_Char_8_USR = PAR.Date_Char_8_USR + PAR.Day_Char_USR (*ZERO);

    // PAR.Date Out (8,0) USR = CVTVAR(PAR.Date (Char-8) USR)
    PAR.Date_Out_80_USR = CVTVAR(PAR.Date_Char_8_USR);

   }

   // WRK.Date (Char-8) USR = CVTVAR(WRK.Date 8.0 USR)
   WRK.Date_Char_8_USR = CVTVAR(WRK.Date_8_0_USR);

   // PAR.SSI Pick/Stop From Date = WRK.Date (Char-8) USR
   PAR.SSI_Pick_Stop_From_Date = WRK.Date_Char_8_USR;

   //?** Requested Delivery Time from Order Header into "From Time"
   // WRK.Text USR 4 = CVTVAR(WRK.Requested Delivery Time)
   WRK.Text_USR_4 = CVTVAR(WRK.Requested_Delivery_Time);

   // PAR.SSI Pick/Stop From Time = WRK.Text USR 4
   PAR.SSI_Pick_Stop_From_Time = WRK.Text_USR_4;

   //?** Requested Delivery Date from Order Header into "To Date"
   EXECUTE FUNCTION(CNV cyymmdd to yyyymmdd) TYPE(EXCINTFUN)                       AC1732965;
   PARAMETER(WRK.Requested_Delivery_Date);
   PARAMETER(WRK.Date_8_0_USR);
   {
    //?Execute internal function

    // LCL.Year Code = PAR.Date In  (7,0) USR *YEAR
    LCL.Year_Code = DATEDTLS(PAR.Date_In_70_USR 'YR' 1111111 'NONE' 'N' 1);

    // LCL.Month NBR USR = PAR.Date In  (7,0) USR *MONTH
    LCL.Month_NBR_USR = DATEDTLS(PAR.Date_In_70_USR 'MO' 1111111 'NONE' 'N' 1);

    // LCL.Day of Month USR = PAR.Date In  (7,0) USR *DAY OF MONTH
    LCL.Day_of_Month_USR = DATEDTLS(PAR.Date_In_70_USR 'DM' 1111111 'NONE' 'N' 1);

    // PAR.Year Alpha (YYYY) USR = CVTVAR(LCL.Year Code)
    PAR.Year_Alpha_YYYY_USR = CVTVAR(LCL.Year_Code);

    // PAR.Month (Char) USR = CVTVAR(LCL.Month NBR USR)
    PAR.Month_Char_USR = CVTVAR(LCL.Month_NBR_USR);

    // PAR.Day   (Char) USR = CVTVAR(LCL.Day of Month USR)
    PAR.Day_Char_USR = CVTVAR(LCL.Day_of_Month_USR);

    // PAR.Date (Char-8) USR = CONCAT(PAR.Year Alpha (YYYY) USR,PAR.Month (Char) USR,CON.*ZERO)
    PAR.Date_Char_8_USR = PAR.Year_Alpha_YYYY_USR + PAR.Month_Char_USR (*ZERO);

    // PAR.Date (Char-8) USR = CONCAT(PAR.Date (Char-8) USR,PAR.Day   (Char) USR,CON.*ZERO)
    PAR.Date_Char_8_USR = PAR.Date_Char_8_USR + PAR.Day_Char_USR (*ZERO);

    // PAR.Date Out (8,0) USR = CVTVAR(PAR.Date (Char-8) USR)
    PAR.Date_Out_80_USR = CVTVAR(PAR.Date_Char_8_USR);

   }

   // WRK.Text USR 8 = CVTVAR(WRK.Date 8.0 USR)
   WRK.Text_USR_8 = CVTVAR(WRK.Date_8_0_USR);

   // PAR.SSI Pick/Stop To Date = WRK.Text USR 8
   PAR.SSI_Pick_Stop_To_Date = WRK.Text_USR_8;

   //?** Requested Delivery Time from Order Header into "To Time"
   // WRK.Text USR 4 = CVTVAR(WRK.Requested Delivery Time)
   WRK.Text_USR_4 = CVTVAR(WRK.Requested_Delivery_Time);

   // PAR.SSI Pick/Stop To Time = WRK.Text USR 4
   PAR.SSI_Pick_Stop_To_Time = WRK.Text_USR_4;

   //?** Order weight conversion
   //?** 11.2 to 7.0, then convert to 7alpha
   // WRK.USR Total Weight = WRK.Order Weight Total
   WRK.USR_Total_Weight = WRK.Order_Weight_Total;

   // WRK.Text USR 7 = CVTVAR(WRK.USR Total Weight)
   WRK.Text_USR_7 = CVTVAR(WRK.USR_Total_Weight);

   // PAR.SSI Pick/Stop Com Weight = WRK.Text USR 7
   PAR.SSI_Pick_Stop_Com_Weight = WRK.Text_USR_7;

   //?** Order Quantity Scheduled - conversion
   //?** total quantity scheduled from the Order Detail (all orders)
   // WRK.Number Value - 7 = LCL.USR Quantity, 9.0
   WRK.Number_Value_7 = LCL.USR_Quantity_9_0;

   // WRK.Text 7 Alpha Usr = CVTVAR(WRK.Number Value - 7)
   WRK.Text_7_Alpha_Usr = CVTVAR(WRK.Number_Value_7);

   // PAR.SSI Pick/Stop Com Pieces = WRK.Text 7 Alpha Usr
   PAR.SSI_Pick_Stop_Com_Pieces = WRK.Text_7_Alpha_Usr;

   //?** Check to see if there is an Order Header Extension record
   //?** If there is, put the Terminal into the Customer Name field
   //?** and the OHE City into the Customer City field      E00461
   EXECUTE FUNCTION(RTV OHE for SSI orders RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC1951317;
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Load_ID);
   PARAMETER(LCL.Shipping_Line);
   PARAMETER(LCL.Port_Delv_Terminal);
   PARAMETER(LCL.OHE_City);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?** Update Cust name and city if Deliv Term and Port city exist
   CASE;

   // IF LCL.Port Delv Terminal is Entered
   IF LCL.Port_Delv_Terminal <> *BLANK;

   // WRK.SSI Pick/Stop Name = LCL.Port Delv Terminal
   WRK.SSI_Pick_Stop_Name = LCL.Port_Delv_Terminal;

   // WRK.SSI Pick/Stop City = LCL.OHE City
   WRK.SSI_Pick_Stop_City = LCL.OHE_City;

   EXECUTE FUNCTION(RTV Shipping State     RT) TYPE(RTVOBJ) FILE(PDLCREP)          AC1519600;
   PARAMETER(LCL.Shipping_Line);
   PARAMETER(LCL.Port_Delv_Terminal);
   PARAMETER(LCL.Sail_Port_State);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    QUIT;

    //?USER: Process Data record

    // PAR.Sail Port State = DB1.Sail Port State
    PAR.Sail_Port_State = DB1.Sail_Port_State;

    QUIT;

   }

   // WRK.SSI Pick/Stop State = LCL.Sail Port State
   WRK.SSI_Pick_Stop_State = LCL.Sail_Port_State;

   ENDIF;

   //?** Create Pick/Stop record
   // Retrieve message - '&1~&2~&3~&4~&5~&6'
   PAR.SSI_Header_Record_1 = RTVMSG(USR4051);
   PARAMETER(PAR.SSI_Master_BOL_Number);
   PARAMETER(PAR.SSI_Trading_Partner_#);
   PARAMETER(WRK.SSI_Header_Type);
   PARAMETER(WRK.SSI_Link_Sequence);
   PARAMETER(WRK.SSI_Sub_Type);
   PARAMETER(WRK.SSI_Sub_Type_Sequence);

   // Retrieve message - '&1~&2~&3~&4~&5~&6~&7~&8'
   PAR.SSI_Pick_Stop_Data_1 = RTVMSG(USR4060);
   PARAMETER(PAR.SSI_Pick_Stop_Type);
   PARAMETER(WRK.SSI_Pick_Stop_Name);
   PARAMETER(WRK.SSI_Pick_Stop_Address_1);
   PARAMETER(WRK.SSI_Pick_Stop_Address_2);
   PARAMETER(WRK.SSI_Pick_Stop_City);
   PARAMETER(WRK.SSI_Pick_Stop_State);
   PARAMETER(WRK.SSI_Pick_Stop_Postal_Zip);
   PARAMETER(PAR.SSI_Pick_Stop_Customer);

   // Retrieve message - '&1~&2~&3~&4~&5~&6~&7~&8~&9~&10~&11~&12~&13'
   PAR.SSI_Pick_Stop_Data_2 = RTVMSG(USR4061);
   PARAMETER(PAR.SSI_Pick_Stop_Finish_Time);
   PARAMETER(PAR.SSI_Pick_Stop_Appt_With);
   PARAMETER(PAR.SSI_Pick_Stop_Phone);
   PARAMETER(PAR.SSI_Master_BOL_Number);
   PARAMETER(PAR.SSI_Pick_Stop_Appt_Number);
   PARAMETER(PAR.SSI_Pick_Stop_Late_Reason);
   PARAMETER(PAR.SSI_Pick_Stop_Com_Pieces);
   PARAMETER(PAR.SSI_Pick_Stop_Com_Pcs_Typ);
   PARAMETER(PAR.SSI_Pick_Stop_Com_Weight);
   PARAMETER(PAR.SSI_Pick_Stop_214_Status);
   PARAMETER(PAR.SSI_Pick_Stop_Time_Zone);
   PARAMETER(PAR.SSI_Pick_Stop_Ld_Unld_Dat);
   PARAMETER(PAR.SSI_Pick_Stop_Ld_Unld_Tim);

   // Retrieve message - '&1~&2~&3~&4~&5~&6~&7'
   PAR.SSI_Pick_Stop_Data_3 = RTVMSG(USR4070);
   PARAMETER(PAR.SSI_Pick_Stop_From_Date);
   PARAMETER(PAR.SSI_Pick_Stop_From_Time);
   PARAMETER(PAR.SSI_Pick_Stop_To_Date);
   PARAMETER(PAR.SSI_Pick_Stop_To_Time);
   PARAMETER(PAR.SSI_Pick_Stop_Arrive_Date);
   PARAMETER(PAR.SSI_Pick_Stop_Arrive_Time);
   PARAMETER(PAR.SSI_Pick_Stop_Finish_Date);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(PAR.SSI_Pick_Stop_Late_Reason);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(PAR.SSI_Pick_Stop_Com_Weight);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);

   // WRK.Count USR = WRK.Count USR + CON.1
   WRK.Count_USR = WRK.Count_USR + 1;

   EXECUTE FUNCTION(CRT SSI Pick/Stop      CR) TYPE(CRTOBJ) FILE(PMEKCPP)          AC1903339;
   PARAMETER(PAR.SSI_SOR_Sequence_ID);
   PARAMETER(LCL.SSI_SOR_Identifier);
   PARAMETER(*BLANK);
   PARAMETER(WRK.Count_USR);
   PARAMETER(PAR.SSI_Master_BOL_Number);
   PARAMETER(WRK.SSI_Header_Type);
   PARAMETER(WRK.SSI_Link_Sequence);
   PARAMETER(WRK.SSI_Sub_Type);
   PARAMETER(WRK.SSI_Sub_Type_Sequence);
   PARAMETER(PAR.SSI_Header_Record_1);
   PARAMETER(PAR.SSI_Pick_Stop_Data_1);
   PARAMETER(PAR.SSI_Pick_Stop_Data_3);
   PARAMETER(PAR.SSI_Pick_Stop_Data_2);
   ENDIF;

   //?** Create the order records for each stop
   CASE;

   // IF DB1.Stop/Drop NE WRK.Stop/Drop
   IF DB1.Stop_Drop <> WRK.Stop_Drop;

   //?** Pass the Load Link Seq (load stop#) to the order
   EXECUTE FUNCTION(RTV CRT SSI P/S Orders IF) TYPE(EXCINTFUN)                     AC1950332;
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.Stop_Drop);
   PARAMETER(PAR.SSI_SOR_Sequence_ID);
   PARAMETER(PAR.SSI_Master_BOL_Number);
   PARAMETER(PAR.SSI_Trading_Partner_#);
   PARAMETER(PAR.SSI_Header_Type);
   PARAMETER(WRK.SSI_Link_Sequence);
   PARAMETER(PAR.SSI_Sub_Type);
   PARAMETER(*BLANK);
   PARAMETER(PAR.Count_USR);
   {
    //?Execute internal function

    EXECUTE FUNCTION(RTV CRT SSI P/S Orders RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1950339;
    PARAMETER(PAR.Load_ID);
    PARAMETER(PAR.Stop_Drop);
    PARAMETER(PAR.SSI_SOR_Sequence_ID);
    PARAMETER(PAR.SSI_Master_BOL_Number);
    PARAMETER(PAR.SSI_Trading_Partner_#);
    PARAMETER(PAR.SSI_Header_Type);
    PARAMETER(PAR.SSI_Link_Sequence);
    PARAMETER(PAR.SSI_Sub_Type);
    PARAMETER(PAR.SSI_Sub_Type_Sequence);
    PARAMETER(PAR.Count_USR);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV CHG SSI Orders     RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1904195;
     PARAMETER(DB1.Order_Number);
     PARAMETER(PAR.Load_ID);
     PARAMETER(PAR.Count_USR);
     PARAMETER(PAR.SSI_SOR_Sequence_ID);
     PARAMETER(PAR.Count_USR);
     PARAMETER(PAR.SSI_Master_BOL_Number);
     PARAMETER(PAR.SSI_Header_Type);
     PARAMETER(PAR.SSI_Link_Sequence);
     PARAMETER(PAR.SSI_Sub_Type);
     PARAMETER(PAR.SSI_Sub_Type_Sequence);
     {
      //?USER: Initialize routine

      //?***** Change log and comments
      DO;

      //?** 08/06/2009 LJB E00461
      //?** The passed in Link Type Sequenc will now have the Load/Stop
      //?** number in it. The Sub Type Sequence is incremented in the IF
      //?** that calls this pgm
      //?** Also, drop Order comments - not unique since Order # is not used
      ENDDO;

      CASE;

      // IF WRK.USR First Time is Blank
      IF WRK.USR_First_Time = *BLANK;

      // WRK.USR First Time = CND.Yes
      WRK.USR_First_Time = 'Y';

      EXECUTE FUNCTION(RTV SSI Control-all    RT) TYPE(RTVOBJ) FILE(PMERREP)          AC1904019;
      PARAMETER(PAR.SSI_SOR_Sequence_ID);
      PARAMETER(PAR.SSI_SOR_Identifier);
      PARAMETER(NLL.SSI_EOT_Identifier);
      PARAMETER(LCL.SSI_SOR_SCAC);
      PARAMETER(LCL.SSI_Trading_Partner_Name);
      PARAMETER(NLL.SSI_SOR_Date_80_alpha);
      PARAMETER(NLL.SSI_SOR_Time_40_alpha);
      PARAMETER(NLL.SSI_EOT_Record_Count);
      PARAMETER(NLL.SSI_Transmission_Status);
      // WRK.Count USR = PAR.Count USR
      WRK.Count_USR = PAR.Count_USR;

      // WRK.Calc 2 = CND.EQ *Zeros
      WRK.Calc_2 = *ZERO;

      // WRK.Copies NBR USR = CON.*ZERO
      WRK.Copies_NBR_USR = *ZERO;

      // WRK.Text 2 Length USR = CVTVAR(WRK.Copies NBR USR)
      WRK.Text_2_Length_USR = CVTVAR(WRK.Copies_NBR_USR);

      // WRK.SSI Sub Type Sequence = CON.*BLANK
      WRK.SSI_Sub_Type_Sequence = *BLANK;

      ENDIF;

      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      //?** Create Pick/Stop Order record
      //?** Put Customer P.O.# into the Order Number field per Gary Ruettgers
      // WRK.SSI Pick/Stop Ord Numbr = DB1.Customer Purchase Order #
      WRK.SSI_Pick_Stop_Ord_Numbr = DB1.Customer_Purchase_Order_#;

      // WRK.USR Total Weight = DB1.Order Weight Total
      WRK.USR_Total_Weight = DB1.Order_Weight_Total;

      // WRK.Text USR 7 = CVTVAR(WRK.USR Total Weight)
      WRK.Text_USR_7 = CVTVAR(WRK.USR_Total_Weight);

      // WRK.SSI Pick/Stop Ord Weight = WRK.Text USR 7
      WRK.SSI_Pick_Stop_Ord_Weight = WRK.Text_USR_7;

      // WRK.Calc 2 = WRK.Calc 2 + CND.EQ 1
      WRK.Calc_2 = WRK.Calc_2 + 1;

      // WRK.Text 2 = CVTVAR(WRK.Calc 2)
      WRK.Text_2 = CVTVAR(WRK.Calc_2);

      // WRK.SSI Sub Type Sequence = WRK.Text 2
      WRK.SSI_Sub_Type_Sequence = WRK.Text_2;

      //?** Save to put into link seq of comment record
      // WRK.SSI Sub Type Sequence usr = WRK.Text 2
      WRK.SSI_Sub_Type_Sequence_usr = WRK.Text_2;

      // WRK.SSI Sub Type = CND.Pick/Stop Order Numbers
      WRK.SSI_Sub_Type = '07';

      // Retrieve message - '&1~&2~&3~&4~&5~&6'
      PAR.SSI_Header_Record_1 = RTVMSG(USR4051);
      PARAMETER(PAR.SSI_Master_BOL_Number);
      PARAMETER(PAR.SSI_Trading_Partner_#);
      PARAMETER(PAR.SSI_Header_Type);
      PARAMETER(PAR.SSI_Link_Sequence);
      PARAMETER(WRK.SSI_Sub_Type);
      PARAMETER(WRK.SSI_Sub_Type_Sequence);

      // Retrieve message - '&1~&2~&3~&4'
      PAR.SSI_Pick_Stop_Order_Data = RTVMSG(USR4065);
      PARAMETER(PAR.SSI_Pick_Stop_Type);
      PARAMETER(WRK.SSI_Pick_Stop_Ord_Numbr);
      PARAMETER(PAR.SSI_Pick_Stop_Name);
      PARAMETER(*BLANK);
      PARAMETER(PAR.SSI_Pick_Stop_Address_1);
      PARAMETER(*BLANK);
      PARAMETER(PAR.SSI_Pick_Stop_City);
      PARAMETER(WRK.SSI_Pick_Stop_Ord_Weight);
      PARAMETER(PAR.SSI_Pick_Stop_State);
      PARAMETER(PAR.SSI_Pick_Stop_Postal_Zip);
      PARAMETER(PAR.SSI_Pick_Stop_Customer);
      PARAMETER(PAR.SSI_Pick_Stop_From_Date);
      PARAMETER(PAR.SSI_Pick_Stop_From_Time);
      PARAMETER(PAR.SSI_Pick_Stop_To_Date);
      PARAMETER(PAR.SSI_Pick_Stop_To_Time);
      PARAMETER(PAR.SSI_Pick_Stop_Arrive_Date);
      PARAMETER(PAR.SSI_Pick_Stop_Arrive_Time);
      PARAMETER(PAR.SSI_Pick_Stop_Finish_Date);
      PARAMETER(PAR.SSI_Pick_Stop_Address_2);

      // WRK.Count USR = WRK.Count USR + CON.1
      WRK.Count_USR = WRK.Count_USR + 1;

      EXECUTE FUNCTION(CRT SSI Pick/Stop OrderCR) TYPE(CRTOBJ) FILE(PMEMCPP)          AC1903795;
      PARAMETER(PAR.SSI_SOR_Sequence_ID);
      PARAMETER(LCL.SSI_SOR_Identifier);
      PARAMETER(*BLANK);
      PARAMETER(WRK.Count_USR);
      PARAMETER(PAR.SSI_Master_BOL_Number);
      PARAMETER(PAR.SSI_Header_Type);
      PARAMETER(PAR.SSI_Link_Sequence);
      PARAMETER(WRK.SSI_Sub_Type);
      PARAMETER(WRK.SSI_Sub_Type_Sequence);
      PARAMETER(PAR.SSI_Header_Record_1);
      PARAMETER(PAR.SSI_Pick_Stop_Order_Data);
      // PAR.Sequence Number 7,0 = CON.*ZERO
      PAR.Sequence_Number_7_0 = *ZERO;

      // WRK.USR Number 2.0 = CON.*ZERO
      WRK.USR_Number_2_0 = *ZERO;

      //?** we no longer use order comments - not unique       E00461
      //?USER: Exit processing

      // PAR.Count USR = WRK.Count USR
      PAR.Count_USR = WRK.Count_USR;

     }

    }

   }

   ENDIF;

   //?** Save the Stop/Drop number                          E00461
   // WRK.Stop/Drop = DB1.Stop/Drop
   WRK.Stop_Drop = DB1.Stop_Drop;

   CASE;

   // IF WRK.SSI Link Sequence is Destination
   IF WRK.SSI_Link_Sequence = '99';

   QUIT;

   ENDIF;

   //?USER: Exit processing

   // PAR.Count USR = WRK.Count USR
   PAR.Count_USR = WRK.Count_USR;

  }

 }

 ENDIF;

}


