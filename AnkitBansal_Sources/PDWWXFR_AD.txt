// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDWWXFR
// ?Date: 14.08.2025 Time: 03:30:18
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(RTV For Fin Accruals   RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1347567;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.U_M_Ordered);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(PAR.Unit_Price);
PARAMETER(PAR.Unit_Price_Credit);
PARAMETER(PAR.Unit_Price_Ordered_U_M);
PARAMETER(PAR.Unit_Weight_Ordered_U_M);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Item Conv. Factr   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1296333;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(WRK.UOM_Primary);
PARAMETER(WRK.Conversion_Factor_1);
PARAMETER(WRK.Operation_Factor_1);
PARAMETER(WRK.UOM_Second);
PARAMETER(WRK.Conversion_Factor_2);
PARAMETER(WRK.Operation_Factor_2);
PARAMETER(WRK.UOM_Third);
PARAMETER(WRK.UOM_Pricing);
PARAMETER(WRK.Unit_Weight);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Codes to Calc Pric RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1296391;
PARAMETER(PAR.Accrual_Code);
PARAMETER(PAR.Add_on_Allowance);
PARAMETER(PAR.Accrual_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(CLC Convert Price      IF) TYPE(EXCINTFUN)                     AC1290254;
PARAMETER(WRK.UOM_Primary);
PARAMETER(WRK.Conversion_Factor_1);
PARAMETER(WRK.Operation_Factor_1);
PARAMETER(WRK.UOM_Second);
PARAMETER(WRK.Conversion_Factor_2);
PARAMETER(WRK.Operation_Factor_2);
PARAMETER(WRK.UOM_Third);
PARAMETER(WRK.UOM_Pricing);
PARAMETER(PAR.Price_based_on_U_M1_S);
PARAMETER(PAR.Price_based_on_U_M2_S);
PARAMETER(PAR.Price_based_on_U_M3_S);
PARAMETER(PAR.Special_Charge_Rate);
{
 //?Execute internal function

 //?Initialize parameter values
 // PAR.Price based on U/M1 S = CON.*ZERO
 PAR.Price_based_on_U_M1_S = *ZERO;

 // PAR.Price based on U/M2 S = CON.*ZERO
 PAR.Price_based_on_U_M2_S = *ZERO;

 // PAR.Price based on U/M3 S = CON.*ZERO
 PAR.Price_based_on_U_M3_S = *ZERO;

 //?Process based on Unit of Measure entered
 CASE;

 // IF PAR.U/M - Primary EQ PAR.U/M - Pricing
 IF PAR.UOM_Primary = PAR.UOM_Pricing;

 // PAR.Price based on U/M1 S = PAR.Unit Price
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price;

 //?Process second U/M if entered
 CASE;

 // IF PAR.U/M - Second is Entered
 IF PAR.UOM_Second <> *BLANK;

 //?Convert based on operation code
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M2 S = PAR.Unit Price / PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price / PAR.Conversion_Factor_1 'H';

 ENDIF;

 //?Convert based on operation code
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 // PAR.Price based on U/M2 S = PAR.Unit Price * PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price * PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 //?Process third U/M if entered
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M3 S = PAR.Price based on U/M2 S / PAR.Conversion Factor 2
 PAR.Price_based_on_U_M3_S = PAR.Price_based_on_U_M2_S / PAR.Conversion_Factor_2 'H';

 ENDIF;

 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.Price based on U/M3 S = PAR.Price based on U/M2 S * PAR.Conversion Factor 2
 PAR.Price_based_on_U_M3_S = PAR.Price_based_on_U_M2_S * PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Process based on Unit of Measure entered
 // IF PAR.U/M - Second EQ PAR.U/M - Pricing
 IF PAR.UOM_Second = PAR.UOM_Pricing;

 // PAR.Price based on U/M2 S = PAR.Unit Price
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 // PAR.Price based on U/M1 S = PAR.Unit Price * PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price * PAR.Conversion_Factor_1 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M1 S = PAR.Unit Price / PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price / PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 //?Process third U/M if entered
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M3 S = PAR.Unit Price / PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price / PAR.Conversion_Factor_2 'H';

 ENDIF;

 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.Price based on U/M3 S = PAR.Unit Price * PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price * PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Process based on Unit of Measure entered
 // IF PAR.U/M - Third EQ PAR.U/M - Pricing
 IF PAR.UOM_Third = PAR.UOM_Pricing;

 // PAR.Price based on U/M3 S = PAR.Unit Price
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 // PAR.Price based on U/M2 S = PAR.Unit Price * PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price * PAR.Conversion_Factor_2 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M2 S = PAR.Unit Price / PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price / PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 // PAR.Price based on U/M1 S = PAR.Price based on U/M2 S * PAR.Conversion Factor 1
 PAR.Price_based_on_U_M1_S = PAR.Price_based_on_U_M2_S * PAR.Conversion_Factor_1 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M1 S = PAR.Price based on U/M2 S / PAR.Conversion Factor 1
 PAR.Price_based_on_U_M1_S = PAR.Price_based_on_U_M2_S / PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 ENDIF;

}


//?If UOM ordered EQ UOM pricing
CASE;

// IF PAR.U/M - Ordered EQ WRK.U/M - Pricing
IF PAR.U_M_Ordered = WRK.UOM_Pricing;

CASE;

// IF WRK.U/M - Primary EQ PAR.U/M - Ordered
IF WRK.UOM_Primary = PAR.U_M_Ordered;

// PAR.Transaction Amount = PAR.Price based on U/M1 S * PAR.Quantity Ordered *Round
PAR.Transaction_Amount = PAR.Price_based_on_U_M1_S * PAR.Quantity_Ordered 'H';

// IF WRK.U/M - Second EQ PAR.U/M - Ordered
IF WRK.UOM_Second = PAR.U_M_Ordered;

// PAR.Transaction Amount = PAR.Price based on U/M2 S * PAR.Quantity Ordered *Round
PAR.Transaction_Amount = PAR.Price_based_on_U_M2_S * PAR.Quantity_Ordered 'H';

// IF WRK.U/M - Third EQ PAR.U/M - Ordered
IF WRK.UOM_Third = PAR.U_M_Ordered;

// PAR.Transaction Amount = PAR.Price based on U/M3 S * PAR.Quantity Ordered *Round
PAR.Transaction_Amount = PAR.Price_based_on_U_M3_S * PAR.Quantity_Ordered 'H';

ENDIF;

//?If UOM ordered EQ UOM pricing
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF WRK.U/M - Primary is Pounds
IF WRK.UOM_Primary = 'LB';

// PAR.Transaction Amount = PAR.Price based on U/M1 S * PAR.Unit Weight Ordered U/M
PAR.Transaction_Amount = PAR.Price_based_on_U_M1_S * PAR.Unit_Weight_Ordered_U_M 'H';

// IF WRK.U/M - Second is Pounds
IF WRK.UOM_Second = 'LB';

// PAR.Transaction Amount = PAR.Price based on U/M2 S * PAR.Unit Weight Ordered U/M
PAR.Transaction_Amount = PAR.Price_based_on_U_M2_S * PAR.Unit_Weight_Ordered_U_M 'H';

// IF WRK.U/M - Third is Pounds
IF WRK.UOM_Third = 'LB';

// PAR.Transaction Amount = PAR.Price based on U/M3 S * PAR.Unit Weight Ordered U/M
PAR.Transaction_Amount = PAR.Price_based_on_U_M3_S * PAR.Unit_Weight_Ordered_U_M 'H';

ENDIF;

ENDIF;

//?Change trans amount according to add-on/allowance flag
CASE;

// IF PAR.Add-on/Allowance is Allowance
IF PAR.Add_on_Allowance = 'S';

// PAR.Transaction Amount = CON.*ZERO - PAR.Transaction Amount
PAR.Transaction_Amount = *ZERO - PAR.Transaction_Amount;

ENDIF;

