// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDPVPVR
// ?Date: 14.08.2025 Time: 03:35:42
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('I/C');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.PRT Printer Device = CND.Not entered
PAR.PRT_Printer_Device = *BLANK;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// WRK.Yes/No Selection      USR = CND.No
WRK.Yes_No_Selection_USR = 'N';

CASE;

// IF PAR.Freezer Inventry Rpt Type is Physical Inventory
IF PAR.Freezer_Inventry_Rpt_Type = 'P';

// WRK.Yes/No Selection      USR = CND.Yes
WRK.Yes_No_Selection_USR = 'Y';

ENDIF;

// PAR.Item Code = CVTVAR(PAR.Item Code Txt)
PAR.Item_Code = CVTVAR(PAR.Item_Code_Txt);

//?USER: Load screen

// DTL.Company Number = PAR.Company Number
DTL.Company_Number = PAR.Company_Number;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.Warehouse Code PASS   USR is Warehouse Code not Blank
IF PAR.Warehouse_Code_PASS_USR <> *BLANK;

// DTL.Warehouse Code = PAR.Warehouse Code PASS   USR
DTL.Warehouse_Code = PAR.Warehouse_Code_PASS_USR;

EXECUTE FUNCTION(RTV Actv Descr, Ctrl   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304411;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Warehouse_Description);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Warehouse Code = PGM.*Cursor field
DTL.Warehouse_Code = PGM.*Cursor_field;

ENDIF;

// DTL.Freezer Inventry Rpt Type = PAR.Freezer Inventry Rpt Type
DTL.Freezer_Inventry_Rpt_Type = PAR.Freezer_Inventry_Rpt_Type;

// DTL.Text 20               USR = Condition name of DTL.Freezer Inventry Rpt Type
DTL.Text_20_USR = RTVCND(DTL.Freezer_Inventry_Rpt_Type);

// DTL.Item Code = PAR.Item Code
DTL.Item_Code = PAR.Item_Code;

EXECUTE FUNCTION(Item Desc DRV) TYPE(DRVFLD)                                    AC1505592;
PARAMETER(DTL.Item_Desc_DRV);
PARAMETER(DTL.Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Desc_DRV);
 PARAMETER(WRK.Description_Line_Two);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Process command keys

//?Warehouse Selection
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Warehouse Code
AND PGM.*Cursor_field = DTL.Warehouse_Code;

//?02/13/18 DN S12531-Change to Call PMCQSRR SELRCD.
// Call program SEL AcctCo/Warehouse   SR.
CALL PROGRAM(SEL AcctCo/Warehouse   SR) ('PMCQSRR');
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Company_Number);

EXECUTE FUNCTION(RTV Warehouse          RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1100960;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?USER: Validate fields

//?Warehouse Code Validation
CASE;

// IF DTL.Warehouse Code is Warehouse Code not Blank
IF DTL.Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(Val Warehouse Exists   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1323885;
PARAMETER(DTL.Warehouse_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Warehouse Codes not found.'
ERROR(USR0007);
MSGPARM(DTL.Warehouse_Code);

ENDIF;

//?Warehouse Code Validation
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse Code is required.'
ERROR(USR2015);
MSGPARM(DTL.Warehouse_Code);

ENDIF;

//?Validate Company for Warehouse - 02/13/18 DN S12531
CASE;

// IF DTL.Company Number is not equal to zero
IF DTL.Company_Number <> *ZERO;

// AND DTL.Warehouse Code is Not Blanks
AND DTL.Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Accounting Company NE DTL.Company Number
IF LCL.Accounting_Company <> DTL.Company_Number;

// Send error message - 'Warehouse &1 and Acctng Company &2 combo invalid.'
ERROR(USR3675);
MSGPARM(DTL.Warehouse_Code);
MSGPARM(DTL.Company_Number);

ENDIF;

ENDIF;

CASE;

// IF DTL.Freezer Inventry Rpt Type is Available Inventory
IF DTL.Freezer_Inventry_Rpt_Type = 'A';

CASE;

// IF DTL.Item Code is Entered
IF DTL.Item_Code <> *ZERO;

// Send error message - 'Item Code should be blank if 'Available Inventory' report is requested.'
ERROR(USR2793);
MSGPARM(DTL.Item_Code);

ENDIF;

ENDIF;

//?CALC: Screen function fields

CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Item Code
AND PGM.*Cursor_field = DTL.Item_Code;

// AND DTL.Freezer Inventry Rpt Type is Physical Inventory
AND DTL.Freezer_Inventry_Rpt_Type = 'P';

// Call program Sel Item              SR.
CALL PROGRAM(Sel Item              SR) ('CAOSSRR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);

EXECUTE FUNCTION(Item Desc DRV) TYPE(DRVFLD)                                    AC1505592;
PARAMETER(DTL.Item_Desc_DRV);
PARAMETER(DTL.Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Desc_DRV);
 PARAMETER(WRK.Description_Line_Two);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Item Code
AND PGM.*Cursor_field = DTL.Item_Code;

// AND DTL.Freezer Inventry Rpt Type is Available Inventory
AND DTL.Freezer_Inventry_Rpt_Type = 'A';

// Send error message - 'Item Code should be blank if 'Available Inventory' report is requested.'
ERROR(USR2793);
MSGPARM(DTL.Item_Code);

ENDIF;

CASE;

// IF DTL.Warehouse Code is Warehouse Code not Blank
IF DTL.Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(Rtv Lot Tracking Flag RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1506123;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(PAR.Lot_Tracking_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.Lot Tracking Flag is yes
IF PAR.Lot_Tracking_Flag = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse is not Lot Tracking.'
ERROR(USR2775);
MSGPARM(DTL.Warehouse_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?7/28/05 SLM Add the age selection for the warehouse CF1.
// DTL.Age Description Usr = Condition name of DTL.Age Code
DTL.Age_Description_Usr = RTVCND(DTL.Age_Code);

CASE;

// IF DTL.Warehouse Code is Cloverleaf Freezer
IF DTL.Warehouse_Code = 'CF1';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Age Code is Blank
IF DTL.Age_Code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Age Code Selection only allowed on Warehouse CF1.'
ERROR(USR3560);

ENDIF;

CASE;

// IF DTL.Freezer Inventry Rpt Type is Available Inventory
IF DTL.Freezer_Inventry_Rpt_Type = 'A';

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Age Code = CND.Blank
DTL.Age_Code = *BLANK;

ENDIF;

ENDIF;

//?USER: User defined action

CASE;

// IF DTL.Freezer Inventry Rpt Type is Available Inventory
IF DTL.Freezer_Inventry_Rpt_Type = 'A';

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Age Code = CND.Blank
DTL.Age_Code = *BLANK;

ENDIF;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// Call program PMT Prt/Sbm Opt    SHR PV.
CALL PROGRAM(PMT Prt/Sbm Opt    SHR PV) ('PDKMPVR');
PARAMETER('Lot/Location Avail Inv');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);
PARAMETER(1);
PARAMETER(PAR.Hold_On_Jobq);
PARAMETER(PAR.Job_Log_Create);
PARAMETER(PAR.Hold);
PARAMETER(PAR.Log);

// PAR.USR 15 Text           USR = PAR.PRT Number of Copies
PAR.USR_15_Text_USR = PAR.PRT_Number_of_Copies;

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Freezer Inventry Rpt Type is Available Inventory
IF DTL.Freezer_Inventry_Rpt_Type = 'A';

// PAR.Program name USR = CON.PDSAPFR
PAR.Program_name_USR = 'PDSAPFR';

// PAR.Program Name$ USR = CON.PDSAPFR$
PAR.Program_Name$_USR = 'PDSAPFR$';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Program name USR = CON.PDR5PFR
PAR.Program_name_USR = 'PDR5PFR';

// PAR.Program Name$ USR = CON.PDR5PFR$
PAR.Program_Name$_USR = 'PDR5PFR$';

ENDIF;

// Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
PGM.*Sbmjob_override_string = RTVMSG(USR2684);
PARAMETER('PRTLOTLOC');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Log);
PARAMETER(PAR.Hold);

// PAR.Date (Alpha) USR = CVTVAR(DTL.Production Date)
PAR.Date_Alpha_USR = CVTVAR(DTL.Production_Date);

EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(LCL.Shipping_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program PRT Lot/Loc Avail Inv UP.
SBMJOB;
CALL PROGRAM(PRT Lot/Loc Avail Inv UP) ('PDPWUPC');
PARAMETER(LCL.Shipping_Company);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(PAR.Date_Alpha_USR);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(PAR.Program_name_USR);
PARAMETER(PAR.Program_Name$_USR);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(DTL.Freezer_Inventry_Rpt_Type);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Qty_On_Hand_USR);
PARAMETER(DTL.Age_Code);
PARAMETER(1);
SBMJOBEND;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

