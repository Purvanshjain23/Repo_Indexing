// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBRPDFR
// ?Date: 14.08.2025 Time: 03:49:08
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('P/S');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// PGM.*Scan limit = CON.99999
PGM.*Scan_limit = 99999;

// PAR.PS Adjustment Type = CND.Override
PAR.PS_Adjustment_Type = 'OV';

// PAR.PS Adjustment Number = CON.1
PAR.PS_Adjustment_Number = 1;

//?***** Change Log and Comments
DO;

//?*****
//?** 06/12/2015 LJB E00         Select Finished Goods & Wip
//?**            but NO base items
//?*****
ENDDO;

//?USER: Initialize subfile control

//?First Time Processing
CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

// CTL.Warehouse Code = PAR.Warehouse Code
CTL.Warehouse_Code = PAR.Warehouse_Code;

// CTL.Availability Group Code = CON.ALL
CTL.Availability_Group_Code = 'ALL';

// CTL.From Date             USR = JOB.*Job date
CTL.From_Date_USR = JOB.*Job_date;

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

ENDIF;

//?DFT:  Default date to today if it is blank
CASE;

// IF CTL.From Date             USR is Zero
IF CTL.From_Date_USR = *ZERO;

// CTL.From Date             USR = JOB.*Job date
CTL.From_Date_USR = JOB.*Job_date;

ENDIF;

//?INIT:  Dates
CASE;

// IF CTL.From Date             USR is Entered
IF CTL.From_Date_USR <> *ZERO;

// CTL.USR Day 1 = CTL.From Date             USR
CTL.USR_Day_1 = CTL.From_Date_USR;

EXECUTE FUNCTION(RTV Next Prod Date     RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1338022;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_1);
PARAMETER(CTL.USR_Day_2);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Plant Date of Last Order EQ PAR.Plant Date of Last Order
 IF DB1.Post_to_G_L_Date = PAR.Post_to_G_L_Date;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Production Day Status is yes
 IF DB1.Production_Day_Status = 'Y';

 // PAR.Production Date = DB1.Post to G/L Date
 PAR.Production_Date = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(RTV Next Prod Date     RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1338022;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_2);
PARAMETER(CTL.USR_Day_3);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Plant Date of Last Order EQ PAR.Plant Date of Last Order
 IF DB1.Post_to_G_L_Date = PAR.Post_to_G_L_Date;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Production Day Status is yes
 IF DB1.Production_Day_Status = 'Y';

 // PAR.Production Date = DB1.Post to G/L Date
 PAR.Production_Date = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(RTV Next Prod Date     RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1338022;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_3);
PARAMETER(CTL.USR_Day_4);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Plant Date of Last Order EQ PAR.Plant Date of Last Order
 IF DB1.Post_to_G_L_Date = PAR.Post_to_G_L_Date;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Production Day Status is yes
 IF DB1.Production_Day_Status = 'Y';

 // PAR.Production Date = DB1.Post to G/L Date
 PAR.Production_Date = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(RTV Next Prod Date     RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1338022;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_4);
PARAMETER(CTL.USR_Day_5);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Plant Date of Last Order EQ PAR.Plant Date of Last Order
 IF DB1.Post_to_G_L_Date = PAR.Post_to_G_L_Date;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Production Day Status is yes
 IF DB1.Production_Day_Status = 'Y';

 // PAR.Production Date = DB1.Post to G/L Date
 PAR.Production_Date = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(RTV Next Prod Date     RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1338022;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_5);
PARAMETER(CTL.USR_Day_6);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Plant Date of Last Order EQ PAR.Plant Date of Last Order
 IF DB1.Post_to_G_L_Date = PAR.Post_to_G_L_Date;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Production Day Status is yes
 IF DB1.Production_Day_Status = 'Y';

 // PAR.Production Date = DB1.Post to G/L Date
 PAR.Production_Date = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

 ENDIF;

}


ENDIF;

//?RST:  Availability Group
CASE;

// IF CTL.Availability Group Code is Blank
IF CTL.Availability_Group_Code = *BLANK;

// CTL.Availability Group Code = CON.ALL
CTL.Availability_Group_Code = 'ALL';

ENDIF;

//?Descriptions:
EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Group Description  RT) TYPE(RTVOBJ) FILE(PDKKREP)          AC1380777;
PARAMETER(CTL.Availability_Group_Code);
PARAMETER(CTL.Availability_Group_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


EXECUTE FUNCTION(RTV Desc/Type/LotTrk  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1471511;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Warehouse_Description);
PARAMETER(CTL.Lot_Tracking_Flag);
PARAMETER(WRK.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


SET CURSOR;

EXECUTE FUNCTION(Val Production Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1542370;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.Status_Flag_1_Y_N);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


//?USER: Initialize subfile record from DBF record

EXECUTE FUNCTION(Val FG/WP no Base      RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC2107053;
PARAMETER(RCD.Item_Code);
PARAMETER(PAR.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Base/Conv/Loss Item is Not Base
 IF DB1.Base_Conv_Loss_Item = *BLANK/'C'/'F'/'L';

 CASE;

 // IF DB1.Item Type Code is FG/WP
 IF DB1.Item_Type_Code = 'FG'/'WP';

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 ENDIF;

}


//?RST:  Company Number
CASE;

// IF CTL.Company Number is not equal to zero
IF CTL.Company_Number <> *ZERO;

// AND CTL.Company Number NE DB1.Company Number
AND CTL.Company_Number <> DB1.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?RST:  Warehouse code if entered
CASE;

// IF CTL.Warehouse Code is Warehouse Code not Blank
IF CTL.Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(Val Item Bal Exist    RT) TYPE(RTVOBJ) FILE(CAB0REP)           AC1428561;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


ENDIF;

//?SEL:  Load subfile with selected items
CASE;

// IF PAR.Record Found USR is Record Not Found
IF PAR.Record_Found_USR = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?Rtv adjustment and save to chk for change
EXECUTE FUNCTION(Rtv Item Description   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1325690;
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Item_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Prod Adjustment   RT) TYPE(RTVOBJ) FILE(PDI9CPP)           AC2085026;
PARAMETER(RCD.Company_Number);
PARAMETER(CTL.USR_Day_1);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.PS_Adjustment_Type);
PARAMETER(PAR.PS_Adjustment_Number);
PARAMETER(RCD.Qty_Sched_Ord_1_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// RCD.Qty Produced USR = RCD.Qty Sched Ord 1 USR
RCD.Qty_Produced_USR = RCD.Qty_Sched_Ord_1_USR;

EXECUTE FUNCTION(Rtv Prod Adjustment   RT) TYPE(RTVOBJ) FILE(PDI9CPP)           AC2085026;
PARAMETER(RCD.Company_Number);
PARAMETER(CTL.USR_Day_2);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.PS_Adjustment_Type);
PARAMETER(PAR.PS_Adjustment_Number);
PARAMETER(RCD.Qty_Sched_Ord_2_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// RCD.Qty Prod Adjusted 2 USR = RCD.Qty Sched Ord 2 USR
RCD.Qty_Prod_Adjusted_2_USR = RCD.Qty_Sched_Ord_2_USR;

EXECUTE FUNCTION(Rtv Prod Adjustment   RT) TYPE(RTVOBJ) FILE(PDI9CPP)           AC2085026;
PARAMETER(RCD.Company_Number);
PARAMETER(CTL.USR_Day_3);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.PS_Adjustment_Type);
PARAMETER(PAR.PS_Adjustment_Number);
PARAMETER(RCD.Qty_Sched_Ord_3_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// RCD.Qty Prod Adjusted 3 USR = RCD.Qty Sched Ord 3 USR
RCD.Qty_Prod_Adjusted_3_USR = RCD.Qty_Sched_Ord_3_USR;

EXECUTE FUNCTION(Rtv Prod Adjustment   RT) TYPE(RTVOBJ) FILE(PDI9CPP)           AC2085026;
PARAMETER(RCD.Company_Number);
PARAMETER(CTL.USR_Day_4);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.PS_Adjustment_Type);
PARAMETER(PAR.PS_Adjustment_Number);
PARAMETER(RCD.Qty_Sched_Ord_4_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// RCD.Qty Prod Adjusted 4 USR = RCD.Qty Sched Ord 4 USR
RCD.Qty_Prod_Adjusted_4_USR = RCD.Qty_Sched_Ord_4_USR;

EXECUTE FUNCTION(Rtv Prod Adjustment   RT) TYPE(RTVOBJ) FILE(PDI9CPP)           AC2085026;
PARAMETER(RCD.Company_Number);
PARAMETER(CTL.USR_Day_5);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.PS_Adjustment_Type);
PARAMETER(PAR.PS_Adjustment_Number);
PARAMETER(RCD.Qty_Sched_Ord_5_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// RCD.Qty Prod Adjusted 5 USR = RCD.Qty Sched Ord 5 USR
RCD.Qty_Prod_Adjusted_5_USR = RCD.Qty_Sched_Ord_5_USR;

EXECUTE FUNCTION(Rtv Prod Adjustment   RT) TYPE(RTVOBJ) FILE(PDI9CPP)           AC2085026;
PARAMETER(RCD.Company_Number);
PARAMETER(CTL.USR_Day_6);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.PS_Adjustment_Type);
PARAMETER(PAR.PS_Adjustment_Number);
PARAMETER(RCD.Qty_Sched_Ord_6_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// RCD.Qty Prod Adjusted 6 USR = RCD.Qty Sched Ord 6 USR
RCD.Qty_Prod_Adjusted_6_USR = RCD.Qty_Sched_Ord_6_USR;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?F4=Prompt on Company, Warehouse or PA Group
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Company Number
IF PGM.*Cursor_field = CTL.Company_Number;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(CTL.Company_Number);

// IF PGM.*Cursor field <IS> CTL.Warehouse Code
IF PGM.*Cursor_field = CTL.Warehouse_Code;

// Call program SEL ShipCo/Warehouse   SR.
CALL PROGRAM(SEL ShipCo/Warehouse   SR) ('PPHQSRR');
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Company_Number);

// IF PGM.*Cursor field <IS> CTL.Availability Group Code
IF PGM.*Cursor_field = CTL.Availability_Group_Code;

// Call program SEL Avail Group        SR.
CALL PROGRAM(SEL Avail Group        SR) ('PDDVSRR');
PARAMETER(CTL.Availability_Group_Code);

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.Company_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?chg it to match the warehouse if it was entered.
CASE;

// IF CTL.Company Number is greater than zero
IF CTL.Company_Number > *ZERO;

CASE;

// IF LCL.Company Number is greater than zero
IF LCL.Company_Number > *ZERO;

// CTL.Company Number = LCL.Company Number
CTL.Company_Number = LCL.Company_Number;

ENDIF;

ENDIF;

//?Val:  Company Number, required
CASE;

// IF CTL.Company Number is Equal to zero
IF CTL.Company_Number = *ZERO;

// Send error message - 'Company Number is required.'
ERROR(USR2183);
MSGPARM(CTL.Company_Number);

ENDIF;

//?Val:  Warehouse Code, must be valid if entered
CASE;

// IF CTL.Warehouse Code is Warehouse Code Blank
IF CTL.Warehouse_Code = *BLANK;

// CTL.Warehouse Description = CON.*ALL
CTL.Warehouse_Description = *ALL;

//?Val:  Warehouse Code, must be valid if entered
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(VAL Shipping Co WHS   RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1714721;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(WRK.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.Warehouse Description is equal to blank
IF WRK.Warehouse_Description = *BLANK;

// Send error message - 'Warehouse &1 Invalid for Co &2.'
ERROR(USR3404);
MSGPARM(CTL.Warehouse_Code);
MSGPARM(CTL.Company_Number);

ENDIF;

EXECUTE FUNCTION(Rtv Warehouse/type Val RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1469740;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(WRK.Warehouse_Type);
PARAMETER(PAR.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 // PAR.Warehouse Type = DB1.Warehouse Type
 PAR.Warehouse_Type = DB1.Warehouse_Type;

 QUIT;

}


CASE;

// IF PAR.Record Found USR is Record Not Found
IF PAR.Record_Found_USR = 'N';

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(CTL.Warehouse_Code);

ENDIF;

ENDIF;

//?Chg:  Warehouse Code, reload sfl if whse was changed
CASE;

// IF PAR.Warehouse Code NE CTL.Warehouse Code
IF PAR.Warehouse_Code <> CTL.Warehouse_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PAR.Warehouse Code = CTL.Warehouse Code
PAR.Warehouse_Code = CTL.Warehouse_Code;

QUIT;

ENDIF;

//?Chg:  From Date, reload sfl if From Date was changed
CASE;

// IF CTL.From Date             USR NE CTL.USR Day 1
IF CTL.From_Date_USR <> CTL.USR_Day_1;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

SET CURSOR;

//?USER: Process subfile record (Pre-confirm)

//?8=Display Item Orders
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

// LCL.*Initial call = CND.*YES
LCL.*Initial_call = 'Y';

// Call program Zzz Item Orders       DF.
CALL PROGRAM(Zzz Item Orders       DF) ('PDO7DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.USR_Day_1);
PARAMETER(PAR.Name);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.*Initial_call);
PARAMETER('FR');

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?9=Display BOM
CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

// Call program DSP Bill of Material   ET.
CALL PROGRAM(DSP Bill of Material   ET) ('PPVMETR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?USER: Process subfile record (Post-confirm)

CASE;

// IF RCD.Qty Sched Ord 1 USR NE RCD.Qty Produced USR
IF RCD.Qty_Sched_Ord_1_USR <> RCD.Qty_Produced_USR;

EXECUTE FUNCTION(Rtv Crt/Chg Prd Adj   RT) TYPE(RTVOBJ) FILE(PDI9CPP)           AC2085029;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_1);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.PS_Adjustment_Type);
PARAMETER(PAR.PS_Adjustment_Number);
PARAMETER(RCD.Qty_Sched_Ord_1_USR);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(Crt Schedule Override CR) TYPE(CRTOBJ) FILE(PDI9CPP)           AC1917552;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Adjustment_Type);
 PARAMETER(PAR.PS_Adjustment_Number);
 PARAMETER(PAR.PS_Adjustment_Quantity);
 PARAMETER('O');
 PARAMETER(*ZERO);
 PARAMETER(LCL.EDI_Status_1);
 PARAMETER(LCL.EDI_Status_2);
 PARAMETER(LCL.EDI_Status_3);
 PARAMETER('A');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(RTV Pces/Bag/Unit Chil RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1538895;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Description_Line_One);
  PARAMETER(LCL.Unit_Weight);
  PARAMETER(LCL.Fresh_Chilling_Time);
  PARAMETER(LCL.Piece_Count_Item);
  PARAMETER(LCL.Pieces_Per_Bag);
  PARAMETER(LCL.Bags_Per_Unit);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Determine Production Type
  CASE;

  // IF PAR.Production Date EQ JOB.*Job date
  IF PAR.Production_Date = JOB.*Job_date;

  // LCL.Production Type = CND.Schedule
  LCL.Production_Type = 'S';

  //?8/25/17 dont chk this. make prod date=job date as the "S" rcd always
  //?Determine Production Type
  // IF PAR.Production Date GT JOB.*Job date
  IF PAR.Production_Date > JOB.*Job_date;

  // LCL.Production Type = CND.Plan
  LCL.Production_Type = 'P';

  ENDIF;

  //?Pieces Vs. Weight
  CASE;

  // IF LCL.Piece Count Item is yes
  IF LCL.Piece_Count_Item = 'Y';

  // Calc Avg Pieces Wgt
  WRK.PS_Avg_Piece_Wgt = LCL.Unit_Weight / ( LCL.Pieces_Per_Bag * LCL.Bags_Per_Unit 'H' );

  // Pieces
  LCL.Pieces_Scheduled = ( PAR.PS_Adjustment_Quantity * LCL.Pieces_Per_Bag 'H' )
  * LCL.Bags_Per_Unit 'H';

  // LCL.Weight Scheduled = LCL.Pieces Scheduled * WRK.PS Avg Piece Wgt *Rounded
  LCL.Weight_Scheduled = LCL.Pieces_Scheduled * WRK.PS_Avg_Piece_Wgt 'H';

  //?Pieces Vs. Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Weight Scheduled = PAR.PS Adjustment Quantity * LCL.Unit Weight *Rounded
  LCL.Weight_Scheduled = PAR.PS_Adjustment_Quantity * LCL.Unit_Weight 'H';

  // LCL.Pieces Scheduled = CON.*ZERO
  LCL.Pieces_Scheduled = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(BPS Rpl Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1941028;
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Pieces_Scheduled);
  PARAMETER(LCL.Weight_Scheduled);
  {
   //?USER: Processing if Data record not found

   // PAR.PS Weight Standard = PAR.Weight Scheduled
   PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

   // PAR.PS Pieces Standard = PAR.Pieces Scheduled
   PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Standard is NE Zeros
   IF PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   // Avg Piece Weight
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

   //?FP1054 RMC 5/14/09 make positive if negative
   CASE;

   // IF PAR.PS Avg Piece Wgt is LT Zero
   IF PAR.PS_Avg_Piece_Wgt < *ZERO;

   // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

   ENDIF;

   ENDIF;

   CASE;

   // IF PAR.PS Weight Standard is NE Zero
   IF PAR.PS_Weight_Standard <> *ZERO;

   // OR PAR.PS Pieces Standard is NE Zeros
   OR PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Production_Type);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Available_Ship_Date);
   PARAMETER(PAR.PS_Weight_Planned_Prod);
   PARAMETER(PAR.PS_Pieces_Planned_Prod);
   PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
   PARAMETER(PAR.PS_Avg_Piece_Wgt);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Standard);
   PARAMETER(PAR.PS_Pieces_Standard);
   PARAMETER(PAR.PS_Weight_Converted);
   PARAMETER(PAR.PS_Pieces_Converted);
   PARAMETER(PAR.PS_Weight_Shipping_Adj);
   PARAMETER(PAR.PS_Pieces_Shipping_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Adj);
   PARAMETER(PAR.PS_Pieces_Prod_Adj);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Unit_Weight);
   PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.PS_Pieces_Unused_2);
   PARAMETER(PAR.PS_Weight_Unused_3);
   PARAMETER(PAR.PS_Pieces_Unused_3);
   PARAMETER(PAR.PS_Weight_Unused_4);
   PARAMETER(PAR.PS_Pieces_Unused_4);
   PARAMETER(PAR.PS_Weight_Unused_5);
   PARAMETER(PAR.PS_Pieces_Unused_5);
   PARAMETER(PAR.PS_Weight_Unused_6);
   PARAMETER(PAR.PS_Pieces_Unused_6);
   PARAMETER(PAR.PS_Item_Id);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.PS_Lock_Status);
   PARAMETER(PAR.PS_Export_Domestic);
   PARAMETER(PAR.PS_Print_On_Schedule);
   PARAMETER(PAR.PS_Piece_Count_Item);
   PARAMETER(PAR.PS_Unused_Sts_1);
   PARAMETER(PAR.PS_Unused_Sts_2);
   PARAMETER(PAR.PS_Unused_Sts_3);
   PARAMETER(PAR.PS_Unused_Sts_4);
   PARAMETER(PAR.PS_Item_Sched_Need_Sts);
   PARAMETER(PAR.PS_Production_Warehouse);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Pieces_Ordered);
   PARAMETER(PAR.PS_Weight_FC_Adjusted);
   PARAMETER(PAR.PS_Pieces_FC_Adjusted);
   PARAMETER(PAR.PS_Weight_FX_Adjusted);
   PARAMETER(PAR.PS_Pieces_FX_Adjusted);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.PS_Pieces_Sched_Shipment);
   PARAMETER(PAR.PS_Weight_Available_Prod);
   PARAMETER(PAR.PS_Pieces_Available_Prod);
   PARAMETER(PAR.PS_Weight_Production_Need);
   PARAMETER(PAR.PS_Pieces_Production_Need);
   PARAMETER(PAR.PS_Weight_Fab_Needs);
   PARAMETER(PAR.PS_Pieces_Fab_Needs);
   PARAMETER(PAR.PS_Weight_Sched_Prod);
   PARAMETER(PAR.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.PS_Weight_Sched_Need);
   PARAMETER(PAR.PS_Pieces_Sched_Need);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Primal_Group_Code);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(WRK.Description_Line_One);
    PARAMETER(WRK.UOM_Primary);
    PARAMETER(WRK.Unit_Weight);
    PARAMETER(DB1.Item_Structure_Class_Code);
    PARAMETER(DB1.Item_Structure_Group_Code);
    PARAMETER(DB1.Item_Structure_Type_Code);
    PARAMETER(WRK.Item_Type_Code);
    PARAMETER(WRK.Default_Warehouse);
    PARAMETER(WRK.Fresh_Chilling_Time);
    PARAMETER(WRK.Base_Conv_Loss_Item);
    PARAMETER(WRK.Variety_Rendered_Cut);
    PARAMETER(WRK.Credit_Item_Status);
    PARAMETER(WRK.Std_Weight_Head_Var_Ren);
    PARAMETER(WRK.Pieces_Per_Head);
    PARAMETER(DB1.Department_Code);
    PARAMETER(WRK.Group_for_Packaging);
    PARAMETER(WRK.Seconds_Item);
    PARAMETER(DB1.PS_Piece_Count_Item);
    PARAMETER(WRK.Pieces_Per_Bag);
    PARAMETER(WRK.Bags_Per_Unit);
    PARAMETER(DB1.PS_Export_Domestic);
    PARAMETER(DB1.PS_Print_On_Schedule);
    PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
    PARAMETER(WRK.Fresh_Sched_As_Ordered);
    PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
    PARAMETER(DB1.Primal_Group_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Warehouse_Type);
    PARAMETER(WRK.Trans_Contol_AS400_Plant);
    PARAMETER(WRK.Warehouse_Location);
    PARAMETER(WRK.Warehouse_Std_Chill_Time);
    PARAMETER(WRK.Warehouse_Chill_Time);
    PARAMETER(DB1.PS_Item_Id);
    {
     //?Execute internal function

     EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?Execute internal function

      EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
      PARAMETER(PAR.Company_Number);
      PARAMETER(PAR.Item_Code);
      PARAMETER(PAR.Description_Line_One);
      PARAMETER(PAR.UOM_Primary);
      PARAMETER(PAR.Unit_Weight);
      PARAMETER(PAR.Item_Structure_Class_Code);
      PARAMETER(PAR.Item_Structure_Group_Code);
      PARAMETER(PAR.Item_Structure_Type_Code);
      PARAMETER(PAR.Item_Type_Code);
      PARAMETER(PAR.Default_Warehouse);
      PARAMETER(PAR.Fresh_Chilling_Time);
      PARAMETER(PAR.Base_Conv_Loss_Item);
      PARAMETER(PAR.Variety_Rendered_Cut);
      PARAMETER(PAR.Credit_Item_Status);
      PARAMETER(PAR.Std_Weight_Head_Var_Ren);
      PARAMETER(PAR.Pieces_Per_Head);
      PARAMETER(PAR.Department_Code);
      PARAMETER(PAR.Group_for_Packaging);
      PARAMETER(PAR.Seconds_Item);
      PARAMETER(PAR.Piece_Count_Item);
      PARAMETER(PAR.Pieces_Per_Bag);
      PARAMETER(PAR.Bags_Per_Unit);
      PARAMETER(PAR.Export_Domestic);
      PARAMETER(PAR.Print_On_Schedule);
      PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
      PARAMETER(PAR.Fresh_Sched_As_Ordered);
      PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
      PARAMETER(PAR.Primal_Group_Code);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

      EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
      PARAMETER(PAR.Warehouse_Code);
      PARAMETER(PAR.Warehouse_Type);
      PARAMETER(PAR.Trans_Contol_AS400_Plant);
      PARAMETER(PAR.Warehouse_Location);
      PARAMETER(PAR.Warehouse_Std_Chill_Time);
      PARAMETER(PAR.Warehouse_Chill_Time);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

     }

     EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.PS_Item_Id);
     {
      //?Execute internal function

      CASE;

      // IF PAR.Item Type Code is Raw Materials
      IF PAR.Item_Type_Code = 'RM';

      // PAR.PS Item Identification = CND.RM Base
      PAR.PS_Item_Id = 'RMB';

      // IF *OTHERWISE
      IF *OTHERWISE;

      CASE;

      // IF PAR.Seconds Item is Yes
      IF PAR.Seconds_Item = 'Y';

      // PAR.PS Item Identification = CND.FG Seconds
      PAR.PS_Item_Id = 'FSC';

      // IF *OTHERWISE
      IF *OTHERWISE;

      CASE;

      // IF PAR.Variety/Rendered/Cut is Variety
      IF PAR.Variety_Rendered_Cut = 'V';

      // PAR.PS Item Identification = CND.FG Variety
      PAR.PS_Item_Id = 'FVR';

      // IF PAR.Variety/Rendered/Cut is Rendered
      IF PAR.Variety_Rendered_Cut = 'R';

      // PAR.PS Item Identification = CND.FG Rendered
      PAR.PS_Item_Id = 'FRD';

      // IF PAR.Variety/Rendered/Cut is Cut
      IF PAR.Variety_Rendered_Cut = 'C';

      //?Base/Converted/Fabricated
      CASE;

      // IF PAR.Credit Item Status is yes
      IF PAR.Credit_Item_Status = 'Y';

      //?Setup Base/Converted/Fabricated Credit
      CASE;

      // IF PAR.Converted/Base Item is Base
      IF PAR.Base_Conv_Loss_Item = 'B';

      // PAR.PS Item Identification = CND.FG Base Credit
      PAR.PS_Item_Id = 'FBC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Converted
      IF PAR.Base_Conv_Loss_Item = 'C';

      // PAR.PS Item Identification = CND.FG Converted Credit
      PAR.PS_Item_Id = 'FCC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Fabricated
      IF PAR.Base_Conv_Loss_Item = 'F';

      // PAR.PS Item Identification = CND.FG Fabricated Credit
      PAR.PS_Item_Id = 'FFC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Loss
      IF PAR.Base_Conv_Loss_Item = 'L';

      // PAR.PS Item Identification = CND.FG Loss Credit
      PAR.PS_Item_Id = 'FLC';

      ENDIF;

      //?Base/Converted/Fabricated
      // IF *OTHERWISE
      IF *OTHERWISE;

      //?Setup Base/Converted/Fabricated
      CASE;

      // IF PAR.Converted/Base Item is Base
      IF PAR.Base_Conv_Loss_Item = 'B';

      // PAR.PS Item Identification = CND.FG Base
      PAR.PS_Item_Id = 'FGB';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Converted
      IF PAR.Base_Conv_Loss_Item = 'C';

      // PAR.PS Item Identification = CND.FG Converted
      PAR.PS_Item_Id = 'FCV';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Fabricated
      IF PAR.Base_Conv_Loss_Item = 'F';

      // PAR.PS Item Identification = CND.FG Fabricated
      PAR.PS_Item_Id = 'FFB';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Loss
      IF PAR.Base_Conv_Loss_Item = 'L';

      // PAR.PS Item Identification = CND.FG Loss
      PAR.PS_Item_Id = 'FLS';

      ENDIF;

      ENDIF;

      ENDIF;

      ENDIF;

      ENDIF;

     }

    }

    //?FP1054 Output PS Prod Warehouse
    EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Production_Warehouse);
    PARAMETER(LCL.Accounting_Company);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?Available Ship Date
    CASE;

    // IF WRK.Warehouse Std Chill Time is yes
    IF WRK.Warehouse_Std_Chill_Time = 'Y';

    EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Date);
    PARAMETER(WRK.Warehouse_Chill_Time);
    PARAMETER(DB1.PS_Available_Ship_Date);
    {
     //?USER: Initialize routine

     // WRK.Count USR = CON.*ZERO
     WRK.Count_USR = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF WRK.Count USR EQ PAR.Chilling Time
     IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

     // PAR.PS Available Ship Date = DB1.Post to G/L Date
     PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

     QUIT;

     ENDIF;

     //?Skip Saturday
     CASE;

     // IF DB1.Day of Week is Saturday
     IF DB1.Day_of_Week = '7';

     //?Skip Saturday
     // IF *OTHERWISE
     IF *OTHERWISE;

     // WRK.Count USR = WRK.Count USR + CON.1
     WRK.Count_USR = WRK.Count_USR + 1;

     ENDIF;

    }

    //?Available Ship Date
    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Date);
    PARAMETER(WRK.Fresh_Chilling_Time);
    PARAMETER(DB1.PS_Available_Ship_Date);
    {
     //?USER: Initialize routine

     // WRK.Count USR = CON.*ZERO
     WRK.Count_USR = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF WRK.Count USR EQ PAR.Chilling Time
     IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

     // PAR.PS Available Ship Date = DB1.Post to G/L Date
     PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

     QUIT;

     ENDIF;

     //?Skip Saturday
     CASE;

     // IF DB1.Day of Week is Saturday
     IF DB1.Day_of_Week = '7';

     //?Skip Saturday
     // IF *OTHERWISE
     IF *OTHERWISE;

     // WRK.Count USR = WRK.Count USR + CON.1
     WRK.Count_USR = WRK.Count_USR + 1;

     ENDIF;

    }

    ENDIF;

    //?Average Piece Weight
    CASE;

    // IF PAR.PS Pieces Planned Prod is GT Zero
    IF PAR.PS_Pieces_Planned_Prod > *ZERO;

    // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
    DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

    ENDIF;

    EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // DB1.PS Lock Status = CND.NOT LOCKED
    DB1.PS_Lock_Status = 'N';

   }

   ENDIF;

   //?USER: Process Data record

   // PAR.PS Weight Standard = PAR.Weight Scheduled
   PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

   // PAR.PS Pieces Standard = PAR.Pieces Scheduled
   PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Standard is NE Zeros
   IF PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   // Avg Piece Weight
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

   //?FP1054 RMC 5/14/09 make positive if negative
   CASE;

   // IF PAR.PS Avg Piece Wgt is LT Zero
   IF PAR.PS_Avg_Piece_Wgt < *ZERO;

   // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

   ENDIF;

   ENDIF;

   EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.PS_Avg_Piece_Wgt);
   PARAMETER(PAR.PS_Weight_Standard);
   PARAMETER(PAR.PS_Pieces_Standard);
  }

 }

 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Standard Override CH) TYPE(CHGOBJ) FILE(PDI9CPP)           AC1917553;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Adjustment_Type);
 PARAMETER(DB1.PS_Adjustment_Number);
 PARAMETER(PAR.PS_Adjustment_Quantity);
 PARAMETER(DB1.PS_Adjustment_Status);
 PARAMETER(DB1.PS_Consumed_Item_Code);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Record_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(RTV Pces/Bag/Unit Chil RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1538895;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Description_Line_One);
  PARAMETER(LCL.Unit_Weight);
  PARAMETER(LCL.Fresh_Chilling_Time);
  PARAMETER(LCL.Piece_Count_Item);
  PARAMETER(LCL.Pieces_Per_Bag);
  PARAMETER(LCL.Bags_Per_Unit);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Determine Production Type
  CASE;

  // IF PAR.Production Date EQ JOB.*Job date
  IF PAR.Production_Date = JOB.*Job_date;

  // LCL.Production Type = CND.Schedule
  LCL.Production_Type = 'S';

  //?Determine Production Type
  // IF PAR.Production Date GT JOB.*Job date
  IF PAR.Production_Date > JOB.*Job_date;

  // LCL.Production Type = CND.Plan
  LCL.Production_Type = 'P';

  ENDIF;

  //?Pieces Vs. Weight
  CASE;

  // IF LCL.Piece Count Item is yes
  IF LCL.Piece_Count_Item = 'Y';

  // Calc Avg Pieces Wgt
  WRK.PS_Avg_Piece_Wgt = LCL.Unit_Weight / ( LCL.Pieces_Per_Bag * LCL.Bags_Per_Unit 'H' );

  // Pieces
  LCL.Pieces_Scheduled = ( PAR.PS_Adjustment_Quantity * LCL.Pieces_Per_Bag 'H' )
  * LCL.Bags_Per_Unit 'H';

  // LCL.Weight Scheduled = LCL.Pieces Scheduled * WRK.PS Avg Piece Wgt *Rounded
  LCL.Weight_Scheduled = LCL.Pieces_Scheduled * WRK.PS_Avg_Piece_Wgt 'H';

  //?Pieces Vs. Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Weight Scheduled = PAR.PS Adjustment Quantity * LCL.Unit Weight *Rounded
  LCL.Weight_Scheduled = PAR.PS_Adjustment_Quantity * LCL.Unit_Weight 'H';

  // LCL.Pieces Scheduled = CON.*ZERO
  LCL.Pieces_Scheduled = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(BPS Rpl Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1941028;
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Pieces_Scheduled);
  PARAMETER(LCL.Weight_Scheduled);
  {
   //?USER: Processing if Data record not found

   // PAR.PS Weight Standard = PAR.Weight Scheduled
   PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

   // PAR.PS Pieces Standard = PAR.Pieces Scheduled
   PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Standard is NE Zeros
   IF PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   // Avg Piece Weight
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

   //?FP1054 RMC 5/14/09 make positive if negative
   CASE;

   // IF PAR.PS Avg Piece Wgt is LT Zero
   IF PAR.PS_Avg_Piece_Wgt < *ZERO;

   // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

   ENDIF;

   ENDIF;

   CASE;

   // IF PAR.PS Weight Standard is NE Zero
   IF PAR.PS_Weight_Standard <> *ZERO;

   // OR PAR.PS Pieces Standard is NE Zeros
   OR PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Production_Type);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Available_Ship_Date);
   PARAMETER(PAR.PS_Weight_Planned_Prod);
   PARAMETER(PAR.PS_Pieces_Planned_Prod);
   PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
   PARAMETER(PAR.PS_Avg_Piece_Wgt);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Standard);
   PARAMETER(PAR.PS_Pieces_Standard);
   PARAMETER(PAR.PS_Weight_Converted);
   PARAMETER(PAR.PS_Pieces_Converted);
   PARAMETER(PAR.PS_Weight_Shipping_Adj);
   PARAMETER(PAR.PS_Pieces_Shipping_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Adj);
   PARAMETER(PAR.PS_Pieces_Prod_Adj);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Unit_Weight);
   PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.PS_Pieces_Unused_2);
   PARAMETER(PAR.PS_Weight_Unused_3);
   PARAMETER(PAR.PS_Pieces_Unused_3);
   PARAMETER(PAR.PS_Weight_Unused_4);
   PARAMETER(PAR.PS_Pieces_Unused_4);
   PARAMETER(PAR.PS_Weight_Unused_5);
   PARAMETER(PAR.PS_Pieces_Unused_5);
   PARAMETER(PAR.PS_Weight_Unused_6);
   PARAMETER(PAR.PS_Pieces_Unused_6);
   PARAMETER(PAR.PS_Item_Id);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.PS_Lock_Status);
   PARAMETER(PAR.PS_Export_Domestic);
   PARAMETER(PAR.PS_Print_On_Schedule);
   PARAMETER(PAR.PS_Piece_Count_Item);
   PARAMETER(PAR.PS_Unused_Sts_1);
   PARAMETER(PAR.PS_Unused_Sts_2);
   PARAMETER(PAR.PS_Unused_Sts_3);
   PARAMETER(PAR.PS_Unused_Sts_4);
   PARAMETER(PAR.PS_Item_Sched_Need_Sts);
   PARAMETER(PAR.PS_Production_Warehouse);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Pieces_Ordered);
   PARAMETER(PAR.PS_Weight_FC_Adjusted);
   PARAMETER(PAR.PS_Pieces_FC_Adjusted);
   PARAMETER(PAR.PS_Weight_FX_Adjusted);
   PARAMETER(PAR.PS_Pieces_FX_Adjusted);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.PS_Pieces_Sched_Shipment);
   PARAMETER(PAR.PS_Weight_Available_Prod);
   PARAMETER(PAR.PS_Pieces_Available_Prod);
   PARAMETER(PAR.PS_Weight_Production_Need);
   PARAMETER(PAR.PS_Pieces_Production_Need);
   PARAMETER(PAR.PS_Weight_Fab_Needs);
   PARAMETER(PAR.PS_Pieces_Fab_Needs);
   PARAMETER(PAR.PS_Weight_Sched_Prod);
   PARAMETER(PAR.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.PS_Weight_Sched_Need);
   PARAMETER(PAR.PS_Pieces_Sched_Need);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Primal_Group_Code);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(WRK.Description_Line_One);
    PARAMETER(WRK.UOM_Primary);
    PARAMETER(WRK.Unit_Weight);
    PARAMETER(DB1.Item_Structure_Class_Code);
    PARAMETER(DB1.Item_Structure_Group_Code);
    PARAMETER(DB1.Item_Structure_Type_Code);
    PARAMETER(WRK.Item_Type_Code);
    PARAMETER(WRK.Default_Warehouse);
    PARAMETER(WRK.Fresh_Chilling_Time);
    PARAMETER(WRK.Base_Conv_Loss_Item);
    PARAMETER(WRK.Variety_Rendered_Cut);
    PARAMETER(WRK.Credit_Item_Status);
    PARAMETER(WRK.Std_Weight_Head_Var_Ren);
    PARAMETER(WRK.Pieces_Per_Head);
    PARAMETER(DB1.Department_Code);
    PARAMETER(WRK.Group_for_Packaging);
    PARAMETER(WRK.Seconds_Item);
    PARAMETER(DB1.PS_Piece_Count_Item);
    PARAMETER(WRK.Pieces_Per_Bag);
    PARAMETER(WRK.Bags_Per_Unit);
    PARAMETER(DB1.PS_Export_Domestic);
    PARAMETER(DB1.PS_Print_On_Schedule);
    PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
    PARAMETER(WRK.Fresh_Sched_As_Ordered);
    PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
    PARAMETER(DB1.Primal_Group_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Warehouse_Type);
    PARAMETER(WRK.Trans_Contol_AS400_Plant);
    PARAMETER(WRK.Warehouse_Location);
    PARAMETER(WRK.Warehouse_Std_Chill_Time);
    PARAMETER(WRK.Warehouse_Chill_Time);
    PARAMETER(DB1.PS_Item_Id);
    {
     //?Execute internal function

     EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?Execute internal function

      EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
      PARAMETER(PAR.Company_Number);
      PARAMETER(PAR.Item_Code);
      PARAMETER(PAR.Description_Line_One);
      PARAMETER(PAR.UOM_Primary);
      PARAMETER(PAR.Unit_Weight);
      PARAMETER(PAR.Item_Structure_Class_Code);
      PARAMETER(PAR.Item_Structure_Group_Code);
      PARAMETER(PAR.Item_Structure_Type_Code);
      PARAMETER(PAR.Item_Type_Code);
      PARAMETER(PAR.Default_Warehouse);
      PARAMETER(PAR.Fresh_Chilling_Time);
      PARAMETER(PAR.Base_Conv_Loss_Item);
      PARAMETER(PAR.Variety_Rendered_Cut);
      PARAMETER(PAR.Credit_Item_Status);
      PARAMETER(PAR.Std_Weight_Head_Var_Ren);
      PARAMETER(PAR.Pieces_Per_Head);
      PARAMETER(PAR.Department_Code);
      PARAMETER(PAR.Group_for_Packaging);
      PARAMETER(PAR.Seconds_Item);
      PARAMETER(PAR.Piece_Count_Item);
      PARAMETER(PAR.Pieces_Per_Bag);
      PARAMETER(PAR.Bags_Per_Unit);
      PARAMETER(PAR.Export_Domestic);
      PARAMETER(PAR.Print_On_Schedule);
      PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
      PARAMETER(PAR.Fresh_Sched_As_Ordered);
      PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
      PARAMETER(PAR.Primal_Group_Code);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

      EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
      PARAMETER(PAR.Warehouse_Code);
      PARAMETER(PAR.Warehouse_Type);
      PARAMETER(PAR.Trans_Contol_AS400_Plant);
      PARAMETER(PAR.Warehouse_Location);
      PARAMETER(PAR.Warehouse_Std_Chill_Time);
      PARAMETER(PAR.Warehouse_Chill_Time);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

     }

     EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.PS_Item_Id);
     {
      //?Execute internal function

      CASE;

      // IF PAR.Item Type Code is Raw Materials
      IF PAR.Item_Type_Code = 'RM';

      // PAR.PS Item Identification = CND.RM Base
      PAR.PS_Item_Id = 'RMB';

      // IF *OTHERWISE
      IF *OTHERWISE;

      CASE;

      // IF PAR.Seconds Item is Yes
      IF PAR.Seconds_Item = 'Y';

      // PAR.PS Item Identification = CND.FG Seconds
      PAR.PS_Item_Id = 'FSC';

      // IF *OTHERWISE
      IF *OTHERWISE;

      CASE;

      // IF PAR.Variety/Rendered/Cut is Variety
      IF PAR.Variety_Rendered_Cut = 'V';

      // PAR.PS Item Identification = CND.FG Variety
      PAR.PS_Item_Id = 'FVR';

      // IF PAR.Variety/Rendered/Cut is Rendered
      IF PAR.Variety_Rendered_Cut = 'R';

      // PAR.PS Item Identification = CND.FG Rendered
      PAR.PS_Item_Id = 'FRD';

      // IF PAR.Variety/Rendered/Cut is Cut
      IF PAR.Variety_Rendered_Cut = 'C';

      //?Base/Converted/Fabricated
      CASE;

      // IF PAR.Credit Item Status is yes
      IF PAR.Credit_Item_Status = 'Y';

      //?Setup Base/Converted/Fabricated Credit
      CASE;

      // IF PAR.Converted/Base Item is Base
      IF PAR.Base_Conv_Loss_Item = 'B';

      // PAR.PS Item Identification = CND.FG Base Credit
      PAR.PS_Item_Id = 'FBC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Converted
      IF PAR.Base_Conv_Loss_Item = 'C';

      // PAR.PS Item Identification = CND.FG Converted Credit
      PAR.PS_Item_Id = 'FCC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Fabricated
      IF PAR.Base_Conv_Loss_Item = 'F';

      // PAR.PS Item Identification = CND.FG Fabricated Credit
      PAR.PS_Item_Id = 'FFC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Loss
      IF PAR.Base_Conv_Loss_Item = 'L';

      // PAR.PS Item Identification = CND.FG Loss Credit
      PAR.PS_Item_Id = 'FLC';

      ENDIF;

      //?Base/Converted/Fabricated
      // IF *OTHERWISE
      IF *OTHERWISE;

      //?Setup Base/Converted/Fabricated
      CASE;

      // IF PAR.Converted/Base Item is Base
      IF PAR.Base_Conv_Loss_Item = 'B';

      // PAR.PS Item Identification = CND.FG Base
      PAR.PS_Item_Id = 'FGB';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Converted
      IF PAR.Base_Conv_Loss_Item = 'C';

      // PAR.PS Item Identification = CND.FG Converted
      PAR.PS_Item_Id = 'FCV';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Fabricated
      IF PAR.Base_Conv_Loss_Item = 'F';

      // PAR.PS Item Identification = CND.FG Fabricated
      PAR.PS_Item_Id = 'FFB';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Loss
      IF PAR.Base_Conv_Loss_Item = 'L';

      // PAR.PS Item Identification = CND.FG Loss
      PAR.PS_Item_Id = 'FLS';

      ENDIF;

      ENDIF;

      ENDIF;

      ENDIF;

      ENDIF;

     }

    }

    //?FP1054 Output PS Prod Warehouse
    EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Production_Warehouse);
    PARAMETER(LCL.Accounting_Company);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?Available Ship Date
    CASE;

    // IF WRK.Warehouse Std Chill Time is yes
    IF WRK.Warehouse_Std_Chill_Time = 'Y';

    EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Date);
    PARAMETER(WRK.Warehouse_Chill_Time);
    PARAMETER(DB1.PS_Available_Ship_Date);
    {
     //?USER: Initialize routine

     // WRK.Count USR = CON.*ZERO
     WRK.Count_USR = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF WRK.Count USR EQ PAR.Chilling Time
     IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

     // PAR.PS Available Ship Date = DB1.Post to G/L Date
     PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

     QUIT;

     ENDIF;

     //?Skip Saturday
     CASE;

     // IF DB1.Day of Week is Saturday
     IF DB1.Day_of_Week = '7';

     //?Skip Saturday
     // IF *OTHERWISE
     IF *OTHERWISE;

     // WRK.Count USR = WRK.Count USR + CON.1
     WRK.Count_USR = WRK.Count_USR + 1;

     ENDIF;

    }

    //?Available Ship Date
    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Date);
    PARAMETER(WRK.Fresh_Chilling_Time);
    PARAMETER(DB1.PS_Available_Ship_Date);
    {
     //?USER: Initialize routine

     // WRK.Count USR = CON.*ZERO
     WRK.Count_USR = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF WRK.Count USR EQ PAR.Chilling Time
     IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

     // PAR.PS Available Ship Date = DB1.Post to G/L Date
     PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

     QUIT;

     ENDIF;

     //?Skip Saturday
     CASE;

     // IF DB1.Day of Week is Saturday
     IF DB1.Day_of_Week = '7';

     //?Skip Saturday
     // IF *OTHERWISE
     IF *OTHERWISE;

     // WRK.Count USR = WRK.Count USR + CON.1
     WRK.Count_USR = WRK.Count_USR + 1;

     ENDIF;

    }

    ENDIF;

    //?Average Piece Weight
    CASE;

    // IF PAR.PS Pieces Planned Prod is GT Zero
    IF PAR.PS_Pieces_Planned_Prod > *ZERO;

    // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
    DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

    ENDIF;

    EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // DB1.PS Lock Status = CND.NOT LOCKED
    DB1.PS_Lock_Status = 'N';

   }

   ENDIF;

   //?USER: Process Data record

   // PAR.PS Weight Standard = PAR.Weight Scheduled
   PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

   // PAR.PS Pieces Standard = PAR.Pieces Scheduled
   PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Standard is NE Zeros
   IF PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   // Avg Piece Weight
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

   //?FP1054 RMC 5/14/09 make positive if negative
   CASE;

   // IF PAR.PS Avg Piece Wgt is LT Zero
   IF PAR.PS_Avg_Piece_Wgt < *ZERO;

   // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

   ENDIF;

   ENDIF;

   EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.PS_Avg_Piece_Wgt);
   PARAMETER(PAR.PS_Weight_Standard);
   PARAMETER(PAR.PS_Pieces_Standard);
  }

 }

}


// RCD.Qty Produced USR = RCD.Qty Sched Ord 1 USR
RCD.Qty_Produced_USR = RCD.Qty_Sched_Ord_1_USR;

ENDIF;

CASE;

// IF RCD.Qty Sched Ord 2 USR NE RCD.Qty Prod Adjusted 2 USR
IF RCD.Qty_Sched_Ord_2_USR <> RCD.Qty_Prod_Adjusted_2_USR;

EXECUTE FUNCTION(Rtv Crt/Chg Prd Adj   RT) TYPE(RTVOBJ) FILE(PDI9CPP)           AC2085029;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_2);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.PS_Adjustment_Type);
PARAMETER(PAR.PS_Adjustment_Number);
PARAMETER(RCD.Qty_Sched_Ord_2_USR);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(Crt Schedule Override CR) TYPE(CRTOBJ) FILE(PDI9CPP)           AC1917552;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Adjustment_Type);
 PARAMETER(PAR.PS_Adjustment_Number);
 PARAMETER(PAR.PS_Adjustment_Quantity);
 PARAMETER('O');
 PARAMETER(*ZERO);
 PARAMETER(LCL.EDI_Status_1);
 PARAMETER(LCL.EDI_Status_2);
 PARAMETER(LCL.EDI_Status_3);
 PARAMETER('A');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(RTV Pces/Bag/Unit Chil RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1538895;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Description_Line_One);
  PARAMETER(LCL.Unit_Weight);
  PARAMETER(LCL.Fresh_Chilling_Time);
  PARAMETER(LCL.Piece_Count_Item);
  PARAMETER(LCL.Pieces_Per_Bag);
  PARAMETER(LCL.Bags_Per_Unit);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Determine Production Type
  CASE;

  // IF PAR.Production Date EQ JOB.*Job date
  IF PAR.Production_Date = JOB.*Job_date;

  // LCL.Production Type = CND.Schedule
  LCL.Production_Type = 'S';

  //?8/25/17 dont chk this. make prod date=job date as the "S" rcd always
  //?Determine Production Type
  // IF PAR.Production Date GT JOB.*Job date
  IF PAR.Production_Date > JOB.*Job_date;

  // LCL.Production Type = CND.Plan
  LCL.Production_Type = 'P';

  ENDIF;

  //?Pieces Vs. Weight
  CASE;

  // IF LCL.Piece Count Item is yes
  IF LCL.Piece_Count_Item = 'Y';

  // Calc Avg Pieces Wgt
  WRK.PS_Avg_Piece_Wgt = LCL.Unit_Weight / ( LCL.Pieces_Per_Bag * LCL.Bags_Per_Unit 'H' );

  // Pieces
  LCL.Pieces_Scheduled = ( PAR.PS_Adjustment_Quantity * LCL.Pieces_Per_Bag 'H' )
  * LCL.Bags_Per_Unit 'H';

  // LCL.Weight Scheduled = LCL.Pieces Scheduled * WRK.PS Avg Piece Wgt *Rounded
  LCL.Weight_Scheduled = LCL.Pieces_Scheduled * WRK.PS_Avg_Piece_Wgt 'H';

  //?Pieces Vs. Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Weight Scheduled = PAR.PS Adjustment Quantity * LCL.Unit Weight *Rounded
  LCL.Weight_Scheduled = PAR.PS_Adjustment_Quantity * LCL.Unit_Weight 'H';

  // LCL.Pieces Scheduled = CON.*ZERO
  LCL.Pieces_Scheduled = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(BPS Rpl Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1941028;
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Pieces_Scheduled);
  PARAMETER(LCL.Weight_Scheduled);
  {
   //?USER: Processing if Data record not found

   // PAR.PS Weight Standard = PAR.Weight Scheduled
   PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

   // PAR.PS Pieces Standard = PAR.Pieces Scheduled
   PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Standard is NE Zeros
   IF PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   // Avg Piece Weight
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

   //?FP1054 RMC 5/14/09 make positive if negative
   CASE;

   // IF PAR.PS Avg Piece Wgt is LT Zero
   IF PAR.PS_Avg_Piece_Wgt < *ZERO;

   // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

   ENDIF;

   ENDIF;

   CASE;

   // IF PAR.PS Weight Standard is NE Zero
   IF PAR.PS_Weight_Standard <> *ZERO;

   // OR PAR.PS Pieces Standard is NE Zeros
   OR PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Production_Type);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Available_Ship_Date);
   PARAMETER(PAR.PS_Weight_Planned_Prod);
   PARAMETER(PAR.PS_Pieces_Planned_Prod);
   PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
   PARAMETER(PAR.PS_Avg_Piece_Wgt);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Standard);
   PARAMETER(PAR.PS_Pieces_Standard);
   PARAMETER(PAR.PS_Weight_Converted);
   PARAMETER(PAR.PS_Pieces_Converted);
   PARAMETER(PAR.PS_Weight_Shipping_Adj);
   PARAMETER(PAR.PS_Pieces_Shipping_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Adj);
   PARAMETER(PAR.PS_Pieces_Prod_Adj);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Unit_Weight);
   PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.PS_Pieces_Unused_2);
   PARAMETER(PAR.PS_Weight_Unused_3);
   PARAMETER(PAR.PS_Pieces_Unused_3);
   PARAMETER(PAR.PS_Weight_Unused_4);
   PARAMETER(PAR.PS_Pieces_Unused_4);
   PARAMETER(PAR.PS_Weight_Unused_5);
   PARAMETER(PAR.PS_Pieces_Unused_5);
   PARAMETER(PAR.PS_Weight_Unused_6);
   PARAMETER(PAR.PS_Pieces_Unused_6);
   PARAMETER(PAR.PS_Item_Id);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.PS_Lock_Status);
   PARAMETER(PAR.PS_Export_Domestic);
   PARAMETER(PAR.PS_Print_On_Schedule);
   PARAMETER(PAR.PS_Piece_Count_Item);
   PARAMETER(PAR.PS_Unused_Sts_1);
   PARAMETER(PAR.PS_Unused_Sts_2);
   PARAMETER(PAR.PS_Unused_Sts_3);
   PARAMETER(PAR.PS_Unused_Sts_4);
   PARAMETER(PAR.PS_Item_Sched_Need_Sts);
   PARAMETER(PAR.PS_Production_Warehouse);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Pieces_Ordered);
   PARAMETER(PAR.PS_Weight_FC_Adjusted);
   PARAMETER(PAR.PS_Pieces_FC_Adjusted);
   PARAMETER(PAR.PS_Weight_FX_Adjusted);
   PARAMETER(PAR.PS_Pieces_FX_Adjusted);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.PS_Pieces_Sched_Shipment);
   PARAMETER(PAR.PS_Weight_Available_Prod);
   PARAMETER(PAR.PS_Pieces_Available_Prod);
   PARAMETER(PAR.PS_Weight_Production_Need);
   PARAMETER(PAR.PS_Pieces_Production_Need);
   PARAMETER(PAR.PS_Weight_Fab_Needs);
   PARAMETER(PAR.PS_Pieces_Fab_Needs);
   PARAMETER(PAR.PS_Weight_Sched_Prod);
   PARAMETER(PAR.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.PS_Weight_Sched_Need);
   PARAMETER(PAR.PS_Pieces_Sched_Need);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Primal_Group_Code);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(WRK.Description_Line_One);
    PARAMETER(WRK.UOM_Primary);
    PARAMETER(WRK.Unit_Weight);
    PARAMETER(DB1.Item_Structure_Class_Code);
    PARAMETER(DB1.Item_Structure_Group_Code);
    PARAMETER(DB1.Item_Structure_Type_Code);
    PARAMETER(WRK.Item_Type_Code);
    PARAMETER(WRK.Default_Warehouse);
    PARAMETER(WRK.Fresh_Chilling_Time);
    PARAMETER(WRK.Base_Conv_Loss_Item);
    PARAMETER(WRK.Variety_Rendered_Cut);
    PARAMETER(WRK.Credit_Item_Status);
    PARAMETER(WRK.Std_Weight_Head_Var_Ren);
    PARAMETER(WRK.Pieces_Per_Head);
    PARAMETER(DB1.Department_Code);
    PARAMETER(WRK.Group_for_Packaging);
    PARAMETER(WRK.Seconds_Item);
    PARAMETER(DB1.PS_Piece_Count_Item);
    PARAMETER(WRK.Pieces_Per_Bag);
    PARAMETER(WRK.Bags_Per_Unit);
    PARAMETER(DB1.PS_Export_Domestic);
    PARAMETER(DB1.PS_Print_On_Schedule);
    PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
    PARAMETER(WRK.Fresh_Sched_As_Ordered);
    PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
    PARAMETER(DB1.Primal_Group_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Warehouse_Type);
    PARAMETER(WRK.Trans_Contol_AS400_Plant);
    PARAMETER(WRK.Warehouse_Location);
    PARAMETER(WRK.Warehouse_Std_Chill_Time);
    PARAMETER(WRK.Warehouse_Chill_Time);
    PARAMETER(DB1.PS_Item_Id);
    {
     //?Execute internal function

     EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?Execute internal function

      EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
      PARAMETER(PAR.Company_Number);
      PARAMETER(PAR.Item_Code);
      PARAMETER(PAR.Description_Line_One);
      PARAMETER(PAR.UOM_Primary);
      PARAMETER(PAR.Unit_Weight);
      PARAMETER(PAR.Item_Structure_Class_Code);
      PARAMETER(PAR.Item_Structure_Group_Code);
      PARAMETER(PAR.Item_Structure_Type_Code);
      PARAMETER(PAR.Item_Type_Code);
      PARAMETER(PAR.Default_Warehouse);
      PARAMETER(PAR.Fresh_Chilling_Time);
      PARAMETER(PAR.Base_Conv_Loss_Item);
      PARAMETER(PAR.Variety_Rendered_Cut);
      PARAMETER(PAR.Credit_Item_Status);
      PARAMETER(PAR.Std_Weight_Head_Var_Ren);
      PARAMETER(PAR.Pieces_Per_Head);
      PARAMETER(PAR.Department_Code);
      PARAMETER(PAR.Group_for_Packaging);
      PARAMETER(PAR.Seconds_Item);
      PARAMETER(PAR.Piece_Count_Item);
      PARAMETER(PAR.Pieces_Per_Bag);
      PARAMETER(PAR.Bags_Per_Unit);
      PARAMETER(PAR.Export_Domestic);
      PARAMETER(PAR.Print_On_Schedule);
      PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
      PARAMETER(PAR.Fresh_Sched_As_Ordered);
      PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
      PARAMETER(PAR.Primal_Group_Code);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

      EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
      PARAMETER(PAR.Warehouse_Code);
      PARAMETER(PAR.Warehouse_Type);
      PARAMETER(PAR.Trans_Contol_AS400_Plant);
      PARAMETER(PAR.Warehouse_Location);
      PARAMETER(PAR.Warehouse_Std_Chill_Time);
      PARAMETER(PAR.Warehouse_Chill_Time);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

     }

     EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.PS_Item_Id);
     {
      //?Execute internal function

      CASE;

      // IF PAR.Item Type Code is Raw Materials
      IF PAR.Item_Type_Code = 'RM';

      // PAR.PS Item Identification = CND.RM Base
      PAR.PS_Item_Id = 'RMB';

      // IF *OTHERWISE
      IF *OTHERWISE;

      CASE;

      // IF PAR.Seconds Item is Yes
      IF PAR.Seconds_Item = 'Y';

      // PAR.PS Item Identification = CND.FG Seconds
      PAR.PS_Item_Id = 'FSC';

      // IF *OTHERWISE
      IF *OTHERWISE;

      CASE;

      // IF PAR.Variety/Rendered/Cut is Variety
      IF PAR.Variety_Rendered_Cut = 'V';

      // PAR.PS Item Identification = CND.FG Variety
      PAR.PS_Item_Id = 'FVR';

      // IF PAR.Variety/Rendered/Cut is Rendered
      IF PAR.Variety_Rendered_Cut = 'R';

      // PAR.PS Item Identification = CND.FG Rendered
      PAR.PS_Item_Id = 'FRD';

      // IF PAR.Variety/Rendered/Cut is Cut
      IF PAR.Variety_Rendered_Cut = 'C';

      //?Base/Converted/Fabricated
      CASE;

      // IF PAR.Credit Item Status is yes
      IF PAR.Credit_Item_Status = 'Y';

      //?Setup Base/Converted/Fabricated Credit
      CASE;

      // IF PAR.Converted/Base Item is Base
      IF PAR.Base_Conv_Loss_Item = 'B';

      // PAR.PS Item Identification = CND.FG Base Credit
      PAR.PS_Item_Id = 'FBC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Converted
      IF PAR.Base_Conv_Loss_Item = 'C';

      // PAR.PS Item Identification = CND.FG Converted Credit
      PAR.PS_Item_Id = 'FCC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Fabricated
      IF PAR.Base_Conv_Loss_Item = 'F';

      // PAR.PS Item Identification = CND.FG Fabricated Credit
      PAR.PS_Item_Id = 'FFC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Loss
      IF PAR.Base_Conv_Loss_Item = 'L';

      // PAR.PS Item Identification = CND.FG Loss Credit
      PAR.PS_Item_Id = 'FLC';

      ENDIF;

      //?Base/Converted/Fabricated
      // IF *OTHERWISE
      IF *OTHERWISE;

      //?Setup Base/Converted/Fabricated
      CASE;

      // IF PAR.Converted/Base Item is Base
      IF PAR.Base_Conv_Loss_Item = 'B';

      // PAR.PS Item Identification = CND.FG Base
      PAR.PS_Item_Id = 'FGB';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Converted
      IF PAR.Base_Conv_Loss_Item = 'C';

      // PAR.PS Item Identification = CND.FG Converted
      PAR.PS_Item_Id = 'FCV';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Fabricated
      IF PAR.Base_Conv_Loss_Item = 'F';

      // PAR.PS Item Identification = CND.FG Fabricated
      PAR.PS_Item_Id = 'FFB';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Loss
      IF PAR.Base_Conv_Loss_Item = 'L';

      // PAR.PS Item Identification = CND.FG Loss
      PAR.PS_Item_Id = 'FLS';

      ENDIF;

      ENDIF;

      ENDIF;

      ENDIF;

      ENDIF;

     }

    }

    //?FP1054 Output PS Prod Warehouse
    EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Production_Warehouse);
    PARAMETER(LCL.Accounting_Company);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?Available Ship Date
    CASE;

    // IF WRK.Warehouse Std Chill Time is yes
    IF WRK.Warehouse_Std_Chill_Time = 'Y';

    EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Date);
    PARAMETER(WRK.Warehouse_Chill_Time);
    PARAMETER(DB1.PS_Available_Ship_Date);
    {
     //?USER: Initialize routine

     // WRK.Count USR = CON.*ZERO
     WRK.Count_USR = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF WRK.Count USR EQ PAR.Chilling Time
     IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

     // PAR.PS Available Ship Date = DB1.Post to G/L Date
     PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

     QUIT;

     ENDIF;

     //?Skip Saturday
     CASE;

     // IF DB1.Day of Week is Saturday
     IF DB1.Day_of_Week = '7';

     //?Skip Saturday
     // IF *OTHERWISE
     IF *OTHERWISE;

     // WRK.Count USR = WRK.Count USR + CON.1
     WRK.Count_USR = WRK.Count_USR + 1;

     ENDIF;

    }

    //?Available Ship Date
    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Date);
    PARAMETER(WRK.Fresh_Chilling_Time);
    PARAMETER(DB1.PS_Available_Ship_Date);
    {
     //?USER: Initialize routine

     // WRK.Count USR = CON.*ZERO
     WRK.Count_USR = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF WRK.Count USR EQ PAR.Chilling Time
     IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

     // PAR.PS Available Ship Date = DB1.Post to G/L Date
     PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

     QUIT;

     ENDIF;

     //?Skip Saturday
     CASE;

     // IF DB1.Day of Week is Saturday
     IF DB1.Day_of_Week = '7';

     //?Skip Saturday
     // IF *OTHERWISE
     IF *OTHERWISE;

     // WRK.Count USR = WRK.Count USR + CON.1
     WRK.Count_USR = WRK.Count_USR + 1;

     ENDIF;

    }

    ENDIF;

    //?Average Piece Weight
    CASE;

    // IF PAR.PS Pieces Planned Prod is GT Zero
    IF PAR.PS_Pieces_Planned_Prod > *ZERO;

    // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
    DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

    ENDIF;

    EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // DB1.PS Lock Status = CND.NOT LOCKED
    DB1.PS_Lock_Status = 'N';

   }

   ENDIF;

   //?USER: Process Data record

   // PAR.PS Weight Standard = PAR.Weight Scheduled
   PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

   // PAR.PS Pieces Standard = PAR.Pieces Scheduled
   PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Standard is NE Zeros
   IF PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   // Avg Piece Weight
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

   //?FP1054 RMC 5/14/09 make positive if negative
   CASE;

   // IF PAR.PS Avg Piece Wgt is LT Zero
   IF PAR.PS_Avg_Piece_Wgt < *ZERO;

   // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

   ENDIF;

   ENDIF;

   EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.PS_Avg_Piece_Wgt);
   PARAMETER(PAR.PS_Weight_Standard);
   PARAMETER(PAR.PS_Pieces_Standard);
  }

 }

 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Standard Override CH) TYPE(CHGOBJ) FILE(PDI9CPP)           AC1917553;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Adjustment_Type);
 PARAMETER(DB1.PS_Adjustment_Number);
 PARAMETER(PAR.PS_Adjustment_Quantity);
 PARAMETER(DB1.PS_Adjustment_Status);
 PARAMETER(DB1.PS_Consumed_Item_Code);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Record_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(RTV Pces/Bag/Unit Chil RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1538895;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Description_Line_One);
  PARAMETER(LCL.Unit_Weight);
  PARAMETER(LCL.Fresh_Chilling_Time);
  PARAMETER(LCL.Piece_Count_Item);
  PARAMETER(LCL.Pieces_Per_Bag);
  PARAMETER(LCL.Bags_Per_Unit);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Determine Production Type
  CASE;

  // IF PAR.Production Date EQ JOB.*Job date
  IF PAR.Production_Date = JOB.*Job_date;

  // LCL.Production Type = CND.Schedule
  LCL.Production_Type = 'S';

  //?Determine Production Type
  // IF PAR.Production Date GT JOB.*Job date
  IF PAR.Production_Date > JOB.*Job_date;

  // LCL.Production Type = CND.Plan
  LCL.Production_Type = 'P';

  ENDIF;

  //?Pieces Vs. Weight
  CASE;

  // IF LCL.Piece Count Item is yes
  IF LCL.Piece_Count_Item = 'Y';

  // Calc Avg Pieces Wgt
  WRK.PS_Avg_Piece_Wgt = LCL.Unit_Weight / ( LCL.Pieces_Per_Bag * LCL.Bags_Per_Unit 'H' );

  // Pieces
  LCL.Pieces_Scheduled = ( PAR.PS_Adjustment_Quantity * LCL.Pieces_Per_Bag 'H' )
  * LCL.Bags_Per_Unit 'H';

  // LCL.Weight Scheduled = LCL.Pieces Scheduled * WRK.PS Avg Piece Wgt *Rounded
  LCL.Weight_Scheduled = LCL.Pieces_Scheduled * WRK.PS_Avg_Piece_Wgt 'H';

  //?Pieces Vs. Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Weight Scheduled = PAR.PS Adjustment Quantity * LCL.Unit Weight *Rounded
  LCL.Weight_Scheduled = PAR.PS_Adjustment_Quantity * LCL.Unit_Weight 'H';

  // LCL.Pieces Scheduled = CON.*ZERO
  LCL.Pieces_Scheduled = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(BPS Rpl Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1941028;
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Pieces_Scheduled);
  PARAMETER(LCL.Weight_Scheduled);
  {
   //?USER: Processing if Data record not found

   // PAR.PS Weight Standard = PAR.Weight Scheduled
   PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

   // PAR.PS Pieces Standard = PAR.Pieces Scheduled
   PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Standard is NE Zeros
   IF PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   // Avg Piece Weight
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

   //?FP1054 RMC 5/14/09 make positive if negative
   CASE;

   // IF PAR.PS Avg Piece Wgt is LT Zero
   IF PAR.PS_Avg_Piece_Wgt < *ZERO;

   // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

   ENDIF;

   ENDIF;

   CASE;

   // IF PAR.PS Weight Standard is NE Zero
   IF PAR.PS_Weight_Standard <> *ZERO;

   // OR PAR.PS Pieces Standard is NE Zeros
   OR PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Production_Type);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Available_Ship_Date);
   PARAMETER(PAR.PS_Weight_Planned_Prod);
   PARAMETER(PAR.PS_Pieces_Planned_Prod);
   PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
   PARAMETER(PAR.PS_Avg_Piece_Wgt);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Standard);
   PARAMETER(PAR.PS_Pieces_Standard);
   PARAMETER(PAR.PS_Weight_Converted);
   PARAMETER(PAR.PS_Pieces_Converted);
   PARAMETER(PAR.PS_Weight_Shipping_Adj);
   PARAMETER(PAR.PS_Pieces_Shipping_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Adj);
   PARAMETER(PAR.PS_Pieces_Prod_Adj);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Unit_Weight);
   PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.PS_Pieces_Unused_2);
   PARAMETER(PAR.PS_Weight_Unused_3);
   PARAMETER(PAR.PS_Pieces_Unused_3);
   PARAMETER(PAR.PS_Weight_Unused_4);
   PARAMETER(PAR.PS_Pieces_Unused_4);
   PARAMETER(PAR.PS_Weight_Unused_5);
   PARAMETER(PAR.PS_Pieces_Unused_5);
   PARAMETER(PAR.PS_Weight_Unused_6);
   PARAMETER(PAR.PS_Pieces_Unused_6);
   PARAMETER(PAR.PS_Item_Id);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.PS_Lock_Status);
   PARAMETER(PAR.PS_Export_Domestic);
   PARAMETER(PAR.PS_Print_On_Schedule);
   PARAMETER(PAR.PS_Piece_Count_Item);
   PARAMETER(PAR.PS_Unused_Sts_1);
   PARAMETER(PAR.PS_Unused_Sts_2);
   PARAMETER(PAR.PS_Unused_Sts_3);
   PARAMETER(PAR.PS_Unused_Sts_4);
   PARAMETER(PAR.PS_Item_Sched_Need_Sts);
   PARAMETER(PAR.PS_Production_Warehouse);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Pieces_Ordered);
   PARAMETER(PAR.PS_Weight_FC_Adjusted);
   PARAMETER(PAR.PS_Pieces_FC_Adjusted);
   PARAMETER(PAR.PS_Weight_FX_Adjusted);
   PARAMETER(PAR.PS_Pieces_FX_Adjusted);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.PS_Pieces_Sched_Shipment);
   PARAMETER(PAR.PS_Weight_Available_Prod);
   PARAMETER(PAR.PS_Pieces_Available_Prod);
   PARAMETER(PAR.PS_Weight_Production_Need);
   PARAMETER(PAR.PS_Pieces_Production_Need);
   PARAMETER(PAR.PS_Weight_Fab_Needs);
   PARAMETER(PAR.PS_Pieces_Fab_Needs);
   PARAMETER(PAR.PS_Weight_Sched_Prod);
   PARAMETER(PAR.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.PS_Weight_Sched_Need);
   PARAMETER(PAR.PS_Pieces_Sched_Need);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Primal_Group_Code);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(WRK.Description_Line_One);
    PARAMETER(WRK.UOM_Primary);
    PARAMETER(WRK.Unit_Weight);
    PARAMETER(DB1.Item_Structure_Class_Code);
    PARAMETER(DB1.Item_Structure_Group_Code);
    PARAMETER(DB1.Item_Structure_Type_Code);
    PARAMETER(WRK.Item_Type_Code);
    PARAMETER(WRK.Default_Warehouse);
    PARAMETER(WRK.Fresh_Chilling_Time);
    PARAMETER(WRK.Base_Conv_Loss_Item);
    PARAMETER(WRK.Variety_Rendered_Cut);
    PARAMETER(WRK.Credit_Item_Status);
    PARAMETER(WRK.Std_Weight_Head_Var_Ren);
    PARAMETER(WRK.Pieces_Per_Head);
    PARAMETER(DB1.Department_Code);
    PARAMETER(WRK.Group_for_Packaging);
    PARAMETER(WRK.Seconds_Item);
    PARAMETER(DB1.PS_Piece_Count_Item);
    PARAMETER(WRK.Pieces_Per_Bag);
    PARAMETER(WRK.Bags_Per_Unit);
    PARAMETER(DB1.PS_Export_Domestic);
    PARAMETER(DB1.PS_Print_On_Schedule);
    PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
    PARAMETER(WRK.Fresh_Sched_As_Ordered);
    PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
    PARAMETER(DB1.Primal_Group_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Warehouse_Type);
    PARAMETER(WRK.Trans_Contol_AS400_Plant);
    PARAMETER(WRK.Warehouse_Location);
    PARAMETER(WRK.Warehouse_Std_Chill_Time);
    PARAMETER(WRK.Warehouse_Chill_Time);
    PARAMETER(DB1.PS_Item_Id);
    {
     //?Execute internal function

     EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?Execute internal function

      EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
      PARAMETER(PAR.Company_Number);
      PARAMETER(PAR.Item_Code);
      PARAMETER(PAR.Description_Line_One);
      PARAMETER(PAR.UOM_Primary);
      PARAMETER(PAR.Unit_Weight);
      PARAMETER(PAR.Item_Structure_Class_Code);
      PARAMETER(PAR.Item_Structure_Group_Code);
      PARAMETER(PAR.Item_Structure_Type_Code);
      PARAMETER(PAR.Item_Type_Code);
      PARAMETER(PAR.Default_Warehouse);
      PARAMETER(PAR.Fresh_Chilling_Time);
      PARAMETER(PAR.Base_Conv_Loss_Item);
      PARAMETER(PAR.Variety_Rendered_Cut);
      PARAMETER(PAR.Credit_Item_Status);
      PARAMETER(PAR.Std_Weight_Head_Var_Ren);
      PARAMETER(PAR.Pieces_Per_Head);
      PARAMETER(PAR.Department_Code);
      PARAMETER(PAR.Group_for_Packaging);
      PARAMETER(PAR.Seconds_Item);
      PARAMETER(PAR.Piece_Count_Item);
      PARAMETER(PAR.Pieces_Per_Bag);
      PARAMETER(PAR.Bags_Per_Unit);
      PARAMETER(PAR.Export_Domestic);
      PARAMETER(PAR.Print_On_Schedule);
      PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
      PARAMETER(PAR.Fresh_Sched_As_Ordered);
      PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
      PARAMETER(PAR.Primal_Group_Code);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

      EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
      PARAMETER(PAR.Warehouse_Code);
      PARAMETER(PAR.Warehouse_Type);
      PARAMETER(PAR.Trans_Contol_AS400_Plant);
      PARAMETER(PAR.Warehouse_Location);
      PARAMETER(PAR.Warehouse_Std_Chill_Time);
      PARAMETER(PAR.Warehouse_Chill_Time);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

     }

     EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.PS_Item_Id);
     {
      //?Execute internal function

      CASE;

      // IF PAR.Item Type Code is Raw Materials
      IF PAR.Item_Type_Code = 'RM';

      // PAR.PS Item Identification = CND.RM Base
      PAR.PS_Item_Id = 'RMB';

      // IF *OTHERWISE
      IF *OTHERWISE;

      CASE;

      // IF PAR.Seconds Item is Yes
      IF PAR.Seconds_Item = 'Y';

      // PAR.PS Item Identification = CND.FG Seconds
      PAR.PS_Item_Id = 'FSC';

      // IF *OTHERWISE
      IF *OTHERWISE;

      CASE;

      // IF PAR.Variety/Rendered/Cut is Variety
      IF PAR.Variety_Rendered_Cut = 'V';

      // PAR.PS Item Identification = CND.FG Variety
      PAR.PS_Item_Id = 'FVR';

      // IF PAR.Variety/Rendered/Cut is Rendered
      IF PAR.Variety_Rendered_Cut = 'R';

      // PAR.PS Item Identification = CND.FG Rendered
      PAR.PS_Item_Id = 'FRD';

      // IF PAR.Variety/Rendered/Cut is Cut
      IF PAR.Variety_Rendered_Cut = 'C';

      //?Base/Converted/Fabricated
      CASE;

      // IF PAR.Credit Item Status is yes
      IF PAR.Credit_Item_Status = 'Y';

      //?Setup Base/Converted/Fabricated Credit
      CASE;

      // IF PAR.Converted/Base Item is Base
      IF PAR.Base_Conv_Loss_Item = 'B';

      // PAR.PS Item Identification = CND.FG Base Credit
      PAR.PS_Item_Id = 'FBC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Converted
      IF PAR.Base_Conv_Loss_Item = 'C';

      // PAR.PS Item Identification = CND.FG Converted Credit
      PAR.PS_Item_Id = 'FCC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Fabricated
      IF PAR.Base_Conv_Loss_Item = 'F';

      // PAR.PS Item Identification = CND.FG Fabricated Credit
      PAR.PS_Item_Id = 'FFC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Loss
      IF PAR.Base_Conv_Loss_Item = 'L';

      // PAR.PS Item Identification = CND.FG Loss Credit
      PAR.PS_Item_Id = 'FLC';

      ENDIF;

      //?Base/Converted/Fabricated
      // IF *OTHERWISE
      IF *OTHERWISE;

      //?Setup Base/Converted/Fabricated
      CASE;

      // IF PAR.Converted/Base Item is Base
      IF PAR.Base_Conv_Loss_Item = 'B';

      // PAR.PS Item Identification = CND.FG Base
      PAR.PS_Item_Id = 'FGB';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Converted
      IF PAR.Base_Conv_Loss_Item = 'C';

      // PAR.PS Item Identification = CND.FG Converted
      PAR.PS_Item_Id = 'FCV';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Fabricated
      IF PAR.Base_Conv_Loss_Item = 'F';

      // PAR.PS Item Identification = CND.FG Fabricated
      PAR.PS_Item_Id = 'FFB';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Loss
      IF PAR.Base_Conv_Loss_Item = 'L';

      // PAR.PS Item Identification = CND.FG Loss
      PAR.PS_Item_Id = 'FLS';

      ENDIF;

      ENDIF;

      ENDIF;

      ENDIF;

      ENDIF;

     }

    }

    //?FP1054 Output PS Prod Warehouse
    EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Production_Warehouse);
    PARAMETER(LCL.Accounting_Company);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?Available Ship Date
    CASE;

    // IF WRK.Warehouse Std Chill Time is yes
    IF WRK.Warehouse_Std_Chill_Time = 'Y';

    EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Date);
    PARAMETER(WRK.Warehouse_Chill_Time);
    PARAMETER(DB1.PS_Available_Ship_Date);
    {
     //?USER: Initialize routine

     // WRK.Count USR = CON.*ZERO
     WRK.Count_USR = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF WRK.Count USR EQ PAR.Chilling Time
     IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

     // PAR.PS Available Ship Date = DB1.Post to G/L Date
     PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

     QUIT;

     ENDIF;

     //?Skip Saturday
     CASE;

     // IF DB1.Day of Week is Saturday
     IF DB1.Day_of_Week = '7';

     //?Skip Saturday
     // IF *OTHERWISE
     IF *OTHERWISE;

     // WRK.Count USR = WRK.Count USR + CON.1
     WRK.Count_USR = WRK.Count_USR + 1;

     ENDIF;

    }

    //?Available Ship Date
    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Date);
    PARAMETER(WRK.Fresh_Chilling_Time);
    PARAMETER(DB1.PS_Available_Ship_Date);
    {
     //?USER: Initialize routine

     // WRK.Count USR = CON.*ZERO
     WRK.Count_USR = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF WRK.Count USR EQ PAR.Chilling Time
     IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

     // PAR.PS Available Ship Date = DB1.Post to G/L Date
     PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

     QUIT;

     ENDIF;

     //?Skip Saturday
     CASE;

     // IF DB1.Day of Week is Saturday
     IF DB1.Day_of_Week = '7';

     //?Skip Saturday
     // IF *OTHERWISE
     IF *OTHERWISE;

     // WRK.Count USR = WRK.Count USR + CON.1
     WRK.Count_USR = WRK.Count_USR + 1;

     ENDIF;

    }

    ENDIF;

    //?Average Piece Weight
    CASE;

    // IF PAR.PS Pieces Planned Prod is GT Zero
    IF PAR.PS_Pieces_Planned_Prod > *ZERO;

    // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
    DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

    ENDIF;

    EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // DB1.PS Lock Status = CND.NOT LOCKED
    DB1.PS_Lock_Status = 'N';

   }

   ENDIF;

   //?USER: Process Data record

   // PAR.PS Weight Standard = PAR.Weight Scheduled
   PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

   // PAR.PS Pieces Standard = PAR.Pieces Scheduled
   PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Standard is NE Zeros
   IF PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   // Avg Piece Weight
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

   //?FP1054 RMC 5/14/09 make positive if negative
   CASE;

   // IF PAR.PS Avg Piece Wgt is LT Zero
   IF PAR.PS_Avg_Piece_Wgt < *ZERO;

   // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

   ENDIF;

   ENDIF;

   EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.PS_Avg_Piece_Wgt);
   PARAMETER(PAR.PS_Weight_Standard);
   PARAMETER(PAR.PS_Pieces_Standard);
  }

 }

}


// RCD.Qty Prod Adjusted 2 USR = RCD.Qty Sched Ord 2 USR
RCD.Qty_Prod_Adjusted_2_USR = RCD.Qty_Sched_Ord_2_USR;

ENDIF;

CASE;

// IF RCD.Qty Sched Ord 3 USR NE RCD.Qty Prod Adjusted 3 USR
IF RCD.Qty_Sched_Ord_3_USR <> RCD.Qty_Prod_Adjusted_3_USR;

EXECUTE FUNCTION(Rtv Crt/Chg Prd Adj   RT) TYPE(RTVOBJ) FILE(PDI9CPP)           AC2085029;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_3);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.PS_Adjustment_Type);
PARAMETER(PAR.PS_Adjustment_Number);
PARAMETER(RCD.Qty_Sched_Ord_3_USR);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(Crt Schedule Override CR) TYPE(CRTOBJ) FILE(PDI9CPP)           AC1917552;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Adjustment_Type);
 PARAMETER(PAR.PS_Adjustment_Number);
 PARAMETER(PAR.PS_Adjustment_Quantity);
 PARAMETER('O');
 PARAMETER(*ZERO);
 PARAMETER(LCL.EDI_Status_1);
 PARAMETER(LCL.EDI_Status_2);
 PARAMETER(LCL.EDI_Status_3);
 PARAMETER('A');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(RTV Pces/Bag/Unit Chil RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1538895;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Description_Line_One);
  PARAMETER(LCL.Unit_Weight);
  PARAMETER(LCL.Fresh_Chilling_Time);
  PARAMETER(LCL.Piece_Count_Item);
  PARAMETER(LCL.Pieces_Per_Bag);
  PARAMETER(LCL.Bags_Per_Unit);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Determine Production Type
  CASE;

  // IF PAR.Production Date EQ JOB.*Job date
  IF PAR.Production_Date = JOB.*Job_date;

  // LCL.Production Type = CND.Schedule
  LCL.Production_Type = 'S';

  //?8/25/17 dont chk this. make prod date=job date as the "S" rcd always
  //?Determine Production Type
  // IF PAR.Production Date GT JOB.*Job date
  IF PAR.Production_Date > JOB.*Job_date;

  // LCL.Production Type = CND.Plan
  LCL.Production_Type = 'P';

  ENDIF;

  //?Pieces Vs. Weight
  CASE;

  // IF LCL.Piece Count Item is yes
  IF LCL.Piece_Count_Item = 'Y';

  // Calc Avg Pieces Wgt
  WRK.PS_Avg_Piece_Wgt = LCL.Unit_Weight / ( LCL.Pieces_Per_Bag * LCL.Bags_Per_Unit 'H' );

  // Pieces
  LCL.Pieces_Scheduled = ( PAR.PS_Adjustment_Quantity * LCL.Pieces_Per_Bag 'H' )
  * LCL.Bags_Per_Unit 'H';

  // LCL.Weight Scheduled = LCL.Pieces Scheduled * WRK.PS Avg Piece Wgt *Rounded
  LCL.Weight_Scheduled = LCL.Pieces_Scheduled * WRK.PS_Avg_Piece_Wgt 'H';

  //?Pieces Vs. Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Weight Scheduled = PAR.PS Adjustment Quantity * LCL.Unit Weight *Rounded
  LCL.Weight_Scheduled = PAR.PS_Adjustment_Quantity * LCL.Unit_Weight 'H';

  // LCL.Pieces Scheduled = CON.*ZERO
  LCL.Pieces_Scheduled = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(BPS Rpl Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1941028;
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Pieces_Scheduled);
  PARAMETER(LCL.Weight_Scheduled);
  {
   //?USER: Processing if Data record not found

   // PAR.PS Weight Standard = PAR.Weight Scheduled
   PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

   // PAR.PS Pieces Standard = PAR.Pieces Scheduled
   PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Standard is NE Zeros
   IF PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   // Avg Piece Weight
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

   //?FP1054 RMC 5/14/09 make positive if negative
   CASE;

   // IF PAR.PS Avg Piece Wgt is LT Zero
   IF PAR.PS_Avg_Piece_Wgt < *ZERO;

   // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

   ENDIF;

   ENDIF;

   CASE;

   // IF PAR.PS Weight Standard is NE Zero
   IF PAR.PS_Weight_Standard <> *ZERO;

   // OR PAR.PS Pieces Standard is NE Zeros
   OR PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Production_Type);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Available_Ship_Date);
   PARAMETER(PAR.PS_Weight_Planned_Prod);
   PARAMETER(PAR.PS_Pieces_Planned_Prod);
   PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
   PARAMETER(PAR.PS_Avg_Piece_Wgt);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Standard);
   PARAMETER(PAR.PS_Pieces_Standard);
   PARAMETER(PAR.PS_Weight_Converted);
   PARAMETER(PAR.PS_Pieces_Converted);
   PARAMETER(PAR.PS_Weight_Shipping_Adj);
   PARAMETER(PAR.PS_Pieces_Shipping_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Adj);
   PARAMETER(PAR.PS_Pieces_Prod_Adj);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Unit_Weight);
   PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.PS_Pieces_Unused_2);
   PARAMETER(PAR.PS_Weight_Unused_3);
   PARAMETER(PAR.PS_Pieces_Unused_3);
   PARAMETER(PAR.PS_Weight_Unused_4);
   PARAMETER(PAR.PS_Pieces_Unused_4);
   PARAMETER(PAR.PS_Weight_Unused_5);
   PARAMETER(PAR.PS_Pieces_Unused_5);
   PARAMETER(PAR.PS_Weight_Unused_6);
   PARAMETER(PAR.PS_Pieces_Unused_6);
   PARAMETER(PAR.PS_Item_Id);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.PS_Lock_Status);
   PARAMETER(PAR.PS_Export_Domestic);
   PARAMETER(PAR.PS_Print_On_Schedule);
   PARAMETER(PAR.PS_Piece_Count_Item);
   PARAMETER(PAR.PS_Unused_Sts_1);
   PARAMETER(PAR.PS_Unused_Sts_2);
   PARAMETER(PAR.PS_Unused_Sts_3);
   PARAMETER(PAR.PS_Unused_Sts_4);
   PARAMETER(PAR.PS_Item_Sched_Need_Sts);
   PARAMETER(PAR.PS_Production_Warehouse);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Pieces_Ordered);
   PARAMETER(PAR.PS_Weight_FC_Adjusted);
   PARAMETER(PAR.PS_Pieces_FC_Adjusted);
   PARAMETER(PAR.PS_Weight_FX_Adjusted);
   PARAMETER(PAR.PS_Pieces_FX_Adjusted);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.PS_Pieces_Sched_Shipment);
   PARAMETER(PAR.PS_Weight_Available_Prod);
   PARAMETER(PAR.PS_Pieces_Available_Prod);
   PARAMETER(PAR.PS_Weight_Production_Need);
   PARAMETER(PAR.PS_Pieces_Production_Need);
   PARAMETER(PAR.PS_Weight_Fab_Needs);
   PARAMETER(PAR.PS_Pieces_Fab_Needs);
   PARAMETER(PAR.PS_Weight_Sched_Prod);
   PARAMETER(PAR.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.PS_Weight_Sched_Need);
   PARAMETER(PAR.PS_Pieces_Sched_Need);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Primal_Group_Code);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(WRK.Description_Line_One);
    PARAMETER(WRK.UOM_Primary);
    PARAMETER(WRK.Unit_Weight);
    PARAMETER(DB1.Item_Structure_Class_Code);
    PARAMETER(DB1.Item_Structure_Group_Code);
    PARAMETER(DB1.Item_Structure_Type_Code);
    PARAMETER(WRK.Item_Type_Code);
    PARAMETER(WRK.Default_Warehouse);
    PARAMETER(WRK.Fresh_Chilling_Time);
    PARAMETER(WRK.Base_Conv_Loss_Item);
    PARAMETER(WRK.Variety_Rendered_Cut);
    PARAMETER(WRK.Credit_Item_Status);
    PARAMETER(WRK.Std_Weight_Head_Var_Ren);
    PARAMETER(WRK.Pieces_Per_Head);
    PARAMETER(DB1.Department_Code);
    PARAMETER(WRK.Group_for_Packaging);
    PARAMETER(WRK.Seconds_Item);
    PARAMETER(DB1.PS_Piece_Count_Item);
    PARAMETER(WRK.Pieces_Per_Bag);
    PARAMETER(WRK.Bags_Per_Unit);
    PARAMETER(DB1.PS_Export_Domestic);
    PARAMETER(DB1.PS_Print_On_Schedule);
    PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
    PARAMETER(WRK.Fresh_Sched_As_Ordered);
    PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
    PARAMETER(DB1.Primal_Group_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Warehouse_Type);
    PARAMETER(WRK.Trans_Contol_AS400_Plant);
    PARAMETER(WRK.Warehouse_Location);
    PARAMETER(WRK.Warehouse_Std_Chill_Time);
    PARAMETER(WRK.Warehouse_Chill_Time);
    PARAMETER(DB1.PS_Item_Id);
    {
     //?Execute internal function

     EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?Execute internal function

      EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
      PARAMETER(PAR.Company_Number);
      PARAMETER(PAR.Item_Code);
      PARAMETER(PAR.Description_Line_One);
      PARAMETER(PAR.UOM_Primary);
      PARAMETER(PAR.Unit_Weight);
      PARAMETER(PAR.Item_Structure_Class_Code);
      PARAMETER(PAR.Item_Structure_Group_Code);
      PARAMETER(PAR.Item_Structure_Type_Code);
      PARAMETER(PAR.Item_Type_Code);
      PARAMETER(PAR.Default_Warehouse);
      PARAMETER(PAR.Fresh_Chilling_Time);
      PARAMETER(PAR.Base_Conv_Loss_Item);
      PARAMETER(PAR.Variety_Rendered_Cut);
      PARAMETER(PAR.Credit_Item_Status);
      PARAMETER(PAR.Std_Weight_Head_Var_Ren);
      PARAMETER(PAR.Pieces_Per_Head);
      PARAMETER(PAR.Department_Code);
      PARAMETER(PAR.Group_for_Packaging);
      PARAMETER(PAR.Seconds_Item);
      PARAMETER(PAR.Piece_Count_Item);
      PARAMETER(PAR.Pieces_Per_Bag);
      PARAMETER(PAR.Bags_Per_Unit);
      PARAMETER(PAR.Export_Domestic);
      PARAMETER(PAR.Print_On_Schedule);
      PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
      PARAMETER(PAR.Fresh_Sched_As_Ordered);
      PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
      PARAMETER(PAR.Primal_Group_Code);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

      EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
      PARAMETER(PAR.Warehouse_Code);
      PARAMETER(PAR.Warehouse_Type);
      PARAMETER(PAR.Trans_Contol_AS400_Plant);
      PARAMETER(PAR.Warehouse_Location);
      PARAMETER(PAR.Warehouse_Std_Chill_Time);
      PARAMETER(PAR.Warehouse_Chill_Time);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

     }

     EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.PS_Item_Id);
     {
      //?Execute internal function

      CASE;

      // IF PAR.Item Type Code is Raw Materials
      IF PAR.Item_Type_Code = 'RM';

      // PAR.PS Item Identification = CND.RM Base
      PAR.PS_Item_Id = 'RMB';

      // IF *OTHERWISE
      IF *OTHERWISE;

      CASE;

      // IF PAR.Seconds Item is Yes
      IF PAR.Seconds_Item = 'Y';

      // PAR.PS Item Identification = CND.FG Seconds
      PAR.PS_Item_Id = 'FSC';

      // IF *OTHERWISE
      IF *OTHERWISE;

      CASE;

      // IF PAR.Variety/Rendered/Cut is Variety
      IF PAR.Variety_Rendered_Cut = 'V';

      // PAR.PS Item Identification = CND.FG Variety
      PAR.PS_Item_Id = 'FVR';

      // IF PAR.Variety/Rendered/Cut is Rendered
      IF PAR.Variety_Rendered_Cut = 'R';

      // PAR.PS Item Identification = CND.FG Rendered
      PAR.PS_Item_Id = 'FRD';

      // IF PAR.Variety/Rendered/Cut is Cut
      IF PAR.Variety_Rendered_Cut = 'C';

      //?Base/Converted/Fabricated
      CASE;

      // IF PAR.Credit Item Status is yes
      IF PAR.Credit_Item_Status = 'Y';

      //?Setup Base/Converted/Fabricated Credit
      CASE;

      // IF PAR.Converted/Base Item is Base
      IF PAR.Base_Conv_Loss_Item = 'B';

      // PAR.PS Item Identification = CND.FG Base Credit
      PAR.PS_Item_Id = 'FBC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Converted
      IF PAR.Base_Conv_Loss_Item = 'C';

      // PAR.PS Item Identification = CND.FG Converted Credit
      PAR.PS_Item_Id = 'FCC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Fabricated
      IF PAR.Base_Conv_Loss_Item = 'F';

      // PAR.PS Item Identification = CND.FG Fabricated Credit
      PAR.PS_Item_Id = 'FFC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Loss
      IF PAR.Base_Conv_Loss_Item = 'L';

      // PAR.PS Item Identification = CND.FG Loss Credit
      PAR.PS_Item_Id = 'FLC';

      ENDIF;

      //?Base/Converted/Fabricated
      // IF *OTHERWISE
      IF *OTHERWISE;

      //?Setup Base/Converted/Fabricated
      CASE;

      // IF PAR.Converted/Base Item is Base
      IF PAR.Base_Conv_Loss_Item = 'B';

      // PAR.PS Item Identification = CND.FG Base
      PAR.PS_Item_Id = 'FGB';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Converted
      IF PAR.Base_Conv_Loss_Item = 'C';

      // PAR.PS Item Identification = CND.FG Converted
      PAR.PS_Item_Id = 'FCV';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Fabricated
      IF PAR.Base_Conv_Loss_Item = 'F';

      // PAR.PS Item Identification = CND.FG Fabricated
      PAR.PS_Item_Id = 'FFB';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Loss
      IF PAR.Base_Conv_Loss_Item = 'L';

      // PAR.PS Item Identification = CND.FG Loss
      PAR.PS_Item_Id = 'FLS';

      ENDIF;

      ENDIF;

      ENDIF;

      ENDIF;

      ENDIF;

     }

    }

    //?FP1054 Output PS Prod Warehouse
    EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Production_Warehouse);
    PARAMETER(LCL.Accounting_Company);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?Available Ship Date
    CASE;

    // IF WRK.Warehouse Std Chill Time is yes
    IF WRK.Warehouse_Std_Chill_Time = 'Y';

    EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Date);
    PARAMETER(WRK.Warehouse_Chill_Time);
    PARAMETER(DB1.PS_Available_Ship_Date);
    {
     //?USER: Initialize routine

     // WRK.Count USR = CON.*ZERO
     WRK.Count_USR = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF WRK.Count USR EQ PAR.Chilling Time
     IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

     // PAR.PS Available Ship Date = DB1.Post to G/L Date
     PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

     QUIT;

     ENDIF;

     //?Skip Saturday
     CASE;

     // IF DB1.Day of Week is Saturday
     IF DB1.Day_of_Week = '7';

     //?Skip Saturday
     // IF *OTHERWISE
     IF *OTHERWISE;

     // WRK.Count USR = WRK.Count USR + CON.1
     WRK.Count_USR = WRK.Count_USR + 1;

     ENDIF;

    }

    //?Available Ship Date
    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Date);
    PARAMETER(WRK.Fresh_Chilling_Time);
    PARAMETER(DB1.PS_Available_Ship_Date);
    {
     //?USER: Initialize routine

     // WRK.Count USR = CON.*ZERO
     WRK.Count_USR = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF WRK.Count USR EQ PAR.Chilling Time
     IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

     // PAR.PS Available Ship Date = DB1.Post to G/L Date
     PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

     QUIT;

     ENDIF;

     //?Skip Saturday
     CASE;

     // IF DB1.Day of Week is Saturday
     IF DB1.Day_of_Week = '7';

     //?Skip Saturday
     // IF *OTHERWISE
     IF *OTHERWISE;

     // WRK.Count USR = WRK.Count USR + CON.1
     WRK.Count_USR = WRK.Count_USR + 1;

     ENDIF;

    }

    ENDIF;

    //?Average Piece Weight
    CASE;

    // IF PAR.PS Pieces Planned Prod is GT Zero
    IF PAR.PS_Pieces_Planned_Prod > *ZERO;

    // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
    DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

    ENDIF;

    EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // DB1.PS Lock Status = CND.NOT LOCKED
    DB1.PS_Lock_Status = 'N';

   }

   ENDIF;

   //?USER: Process Data record

   // PAR.PS Weight Standard = PAR.Weight Scheduled
   PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

   // PAR.PS Pieces Standard = PAR.Pieces Scheduled
   PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Standard is NE Zeros
   IF PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   // Avg Piece Weight
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

   //?FP1054 RMC 5/14/09 make positive if negative
   CASE;

   // IF PAR.PS Avg Piece Wgt is LT Zero
   IF PAR.PS_Avg_Piece_Wgt < *ZERO;

   // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

   ENDIF;

   ENDIF;

   EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.PS_Avg_Piece_Wgt);
   PARAMETER(PAR.PS_Weight_Standard);
   PARAMETER(PAR.PS_Pieces_Standard);
  }

 }

 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Standard Override CH) TYPE(CHGOBJ) FILE(PDI9CPP)           AC1917553;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Adjustment_Type);
 PARAMETER(DB1.PS_Adjustment_Number);
 PARAMETER(PAR.PS_Adjustment_Quantity);
 PARAMETER(DB1.PS_Adjustment_Status);
 PARAMETER(DB1.PS_Consumed_Item_Code);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Record_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(RTV Pces/Bag/Unit Chil RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1538895;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Description_Line_One);
  PARAMETER(LCL.Unit_Weight);
  PARAMETER(LCL.Fresh_Chilling_Time);
  PARAMETER(LCL.Piece_Count_Item);
  PARAMETER(LCL.Pieces_Per_Bag);
  PARAMETER(LCL.Bags_Per_Unit);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Determine Production Type
  CASE;

  // IF PAR.Production Date EQ JOB.*Job date
  IF PAR.Production_Date = JOB.*Job_date;

  // LCL.Production Type = CND.Schedule
  LCL.Production_Type = 'S';

  //?Determine Production Type
  // IF PAR.Production Date GT JOB.*Job date
  IF PAR.Production_Date > JOB.*Job_date;

  // LCL.Production Type = CND.Plan
  LCL.Production_Type = 'P';

  ENDIF;

  //?Pieces Vs. Weight
  CASE;

  // IF LCL.Piece Count Item is yes
  IF LCL.Piece_Count_Item = 'Y';

  // Calc Avg Pieces Wgt
  WRK.PS_Avg_Piece_Wgt = LCL.Unit_Weight / ( LCL.Pieces_Per_Bag * LCL.Bags_Per_Unit 'H' );

  // Pieces
  LCL.Pieces_Scheduled = ( PAR.PS_Adjustment_Quantity * LCL.Pieces_Per_Bag 'H' )
  * LCL.Bags_Per_Unit 'H';

  // LCL.Weight Scheduled = LCL.Pieces Scheduled * WRK.PS Avg Piece Wgt *Rounded
  LCL.Weight_Scheduled = LCL.Pieces_Scheduled * WRK.PS_Avg_Piece_Wgt 'H';

  //?Pieces Vs. Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Weight Scheduled = PAR.PS Adjustment Quantity * LCL.Unit Weight *Rounded
  LCL.Weight_Scheduled = PAR.PS_Adjustment_Quantity * LCL.Unit_Weight 'H';

  // LCL.Pieces Scheduled = CON.*ZERO
  LCL.Pieces_Scheduled = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(BPS Rpl Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1941028;
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Pieces_Scheduled);
  PARAMETER(LCL.Weight_Scheduled);
  {
   //?USER: Processing if Data record not found

   // PAR.PS Weight Standard = PAR.Weight Scheduled
   PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

   // PAR.PS Pieces Standard = PAR.Pieces Scheduled
   PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Standard is NE Zeros
   IF PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   // Avg Piece Weight
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

   //?FP1054 RMC 5/14/09 make positive if negative
   CASE;

   // IF PAR.PS Avg Piece Wgt is LT Zero
   IF PAR.PS_Avg_Piece_Wgt < *ZERO;

   // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

   ENDIF;

   ENDIF;

   CASE;

   // IF PAR.PS Weight Standard is NE Zero
   IF PAR.PS_Weight_Standard <> *ZERO;

   // OR PAR.PS Pieces Standard is NE Zeros
   OR PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Production_Type);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Available_Ship_Date);
   PARAMETER(PAR.PS_Weight_Planned_Prod);
   PARAMETER(PAR.PS_Pieces_Planned_Prod);
   PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
   PARAMETER(PAR.PS_Avg_Piece_Wgt);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Standard);
   PARAMETER(PAR.PS_Pieces_Standard);
   PARAMETER(PAR.PS_Weight_Converted);
   PARAMETER(PAR.PS_Pieces_Converted);
   PARAMETER(PAR.PS_Weight_Shipping_Adj);
   PARAMETER(PAR.PS_Pieces_Shipping_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Adj);
   PARAMETER(PAR.PS_Pieces_Prod_Adj);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Unit_Weight);
   PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.PS_Pieces_Unused_2);
   PARAMETER(PAR.PS_Weight_Unused_3);
   PARAMETER(PAR.PS_Pieces_Unused_3);
   PARAMETER(PAR.PS_Weight_Unused_4);
   PARAMETER(PAR.PS_Pieces_Unused_4);
   PARAMETER(PAR.PS_Weight_Unused_5);
   PARAMETER(PAR.PS_Pieces_Unused_5);
   PARAMETER(PAR.PS_Weight_Unused_6);
   PARAMETER(PAR.PS_Pieces_Unused_6);
   PARAMETER(PAR.PS_Item_Id);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.PS_Lock_Status);
   PARAMETER(PAR.PS_Export_Domestic);
   PARAMETER(PAR.PS_Print_On_Schedule);
   PARAMETER(PAR.PS_Piece_Count_Item);
   PARAMETER(PAR.PS_Unused_Sts_1);
   PARAMETER(PAR.PS_Unused_Sts_2);
   PARAMETER(PAR.PS_Unused_Sts_3);
   PARAMETER(PAR.PS_Unused_Sts_4);
   PARAMETER(PAR.PS_Item_Sched_Need_Sts);
   PARAMETER(PAR.PS_Production_Warehouse);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Pieces_Ordered);
   PARAMETER(PAR.PS_Weight_FC_Adjusted);
   PARAMETER(PAR.PS_Pieces_FC_Adjusted);
   PARAMETER(PAR.PS_Weight_FX_Adjusted);
   PARAMETER(PAR.PS_Pieces_FX_Adjusted);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.PS_Pieces_Sched_Shipment);
   PARAMETER(PAR.PS_Weight_Available_Prod);
   PARAMETER(PAR.PS_Pieces_Available_Prod);
   PARAMETER(PAR.PS_Weight_Production_Need);
   PARAMETER(PAR.PS_Pieces_Production_Need);
   PARAMETER(PAR.PS_Weight_Fab_Needs);
   PARAMETER(PAR.PS_Pieces_Fab_Needs);
   PARAMETER(PAR.PS_Weight_Sched_Prod);
   PARAMETER(PAR.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.PS_Weight_Sched_Need);
   PARAMETER(PAR.PS_Pieces_Sched_Need);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Primal_Group_Code);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(WRK.Description_Line_One);
    PARAMETER(WRK.UOM_Primary);
    PARAMETER(WRK.Unit_Weight);
    PARAMETER(DB1.Item_Structure_Class_Code);
    PARAMETER(DB1.Item_Structure_Group_Code);
    PARAMETER(DB1.Item_Structure_Type_Code);
    PARAMETER(WRK.Item_Type_Code);
    PARAMETER(WRK.Default_Warehouse);
    PARAMETER(WRK.Fresh_Chilling_Time);
    PARAMETER(WRK.Base_Conv_Loss_Item);
    PARAMETER(WRK.Variety_Rendered_Cut);
    PARAMETER(WRK.Credit_Item_Status);
    PARAMETER(WRK.Std_Weight_Head_Var_Ren);
    PARAMETER(WRK.Pieces_Per_Head);
    PARAMETER(DB1.Department_Code);
    PARAMETER(WRK.Group_for_Packaging);
    PARAMETER(WRK.Seconds_Item);
    PARAMETER(DB1.PS_Piece_Count_Item);
    PARAMETER(WRK.Pieces_Per_Bag);
    PARAMETER(WRK.Bags_Per_Unit);
    PARAMETER(DB1.PS_Export_Domestic);
    PARAMETER(DB1.PS_Print_On_Schedule);
    PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
    PARAMETER(WRK.Fresh_Sched_As_Ordered);
    PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
    PARAMETER(DB1.Primal_Group_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Warehouse_Type);
    PARAMETER(WRK.Trans_Contol_AS400_Plant);
    PARAMETER(WRK.Warehouse_Location);
    PARAMETER(WRK.Warehouse_Std_Chill_Time);
    PARAMETER(WRK.Warehouse_Chill_Time);
    PARAMETER(DB1.PS_Item_Id);
    {
     //?Execute internal function

     EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?Execute internal function

      EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
      PARAMETER(PAR.Company_Number);
      PARAMETER(PAR.Item_Code);
      PARAMETER(PAR.Description_Line_One);
      PARAMETER(PAR.UOM_Primary);
      PARAMETER(PAR.Unit_Weight);
      PARAMETER(PAR.Item_Structure_Class_Code);
      PARAMETER(PAR.Item_Structure_Group_Code);
      PARAMETER(PAR.Item_Structure_Type_Code);
      PARAMETER(PAR.Item_Type_Code);
      PARAMETER(PAR.Default_Warehouse);
      PARAMETER(PAR.Fresh_Chilling_Time);
      PARAMETER(PAR.Base_Conv_Loss_Item);
      PARAMETER(PAR.Variety_Rendered_Cut);
      PARAMETER(PAR.Credit_Item_Status);
      PARAMETER(PAR.Std_Weight_Head_Var_Ren);
      PARAMETER(PAR.Pieces_Per_Head);
      PARAMETER(PAR.Department_Code);
      PARAMETER(PAR.Group_for_Packaging);
      PARAMETER(PAR.Seconds_Item);
      PARAMETER(PAR.Piece_Count_Item);
      PARAMETER(PAR.Pieces_Per_Bag);
      PARAMETER(PAR.Bags_Per_Unit);
      PARAMETER(PAR.Export_Domestic);
      PARAMETER(PAR.Print_On_Schedule);
      PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
      PARAMETER(PAR.Fresh_Sched_As_Ordered);
      PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
      PARAMETER(PAR.Primal_Group_Code);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

      EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
      PARAMETER(PAR.Warehouse_Code);
      PARAMETER(PAR.Warehouse_Type);
      PARAMETER(PAR.Trans_Contol_AS400_Plant);
      PARAMETER(PAR.Warehouse_Location);
      PARAMETER(PAR.Warehouse_Std_Chill_Time);
      PARAMETER(PAR.Warehouse_Chill_Time);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

     }

     EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.PS_Item_Id);
     {
      //?Execute internal function

      CASE;

      // IF PAR.Item Type Code is Raw Materials
      IF PAR.Item_Type_Code = 'RM';

      // PAR.PS Item Identification = CND.RM Base
      PAR.PS_Item_Id = 'RMB';

      // IF *OTHERWISE
      IF *OTHERWISE;

      CASE;

      // IF PAR.Seconds Item is Yes
      IF PAR.Seconds_Item = 'Y';

      // PAR.PS Item Identification = CND.FG Seconds
      PAR.PS_Item_Id = 'FSC';

      // IF *OTHERWISE
      IF *OTHERWISE;

      CASE;

      // IF PAR.Variety/Rendered/Cut is Variety
      IF PAR.Variety_Rendered_Cut = 'V';

      // PAR.PS Item Identification = CND.FG Variety
      PAR.PS_Item_Id = 'FVR';

      // IF PAR.Variety/Rendered/Cut is Rendered
      IF PAR.Variety_Rendered_Cut = 'R';

      // PAR.PS Item Identification = CND.FG Rendered
      PAR.PS_Item_Id = 'FRD';

      // IF PAR.Variety/Rendered/Cut is Cut
      IF PAR.Variety_Rendered_Cut = 'C';

      //?Base/Converted/Fabricated
      CASE;

      // IF PAR.Credit Item Status is yes
      IF PAR.Credit_Item_Status = 'Y';

      //?Setup Base/Converted/Fabricated Credit
      CASE;

      // IF PAR.Converted/Base Item is Base
      IF PAR.Base_Conv_Loss_Item = 'B';

      // PAR.PS Item Identification = CND.FG Base Credit
      PAR.PS_Item_Id = 'FBC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Converted
      IF PAR.Base_Conv_Loss_Item = 'C';

      // PAR.PS Item Identification = CND.FG Converted Credit
      PAR.PS_Item_Id = 'FCC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Fabricated
      IF PAR.Base_Conv_Loss_Item = 'F';

      // PAR.PS Item Identification = CND.FG Fabricated Credit
      PAR.PS_Item_Id = 'FFC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Loss
      IF PAR.Base_Conv_Loss_Item = 'L';

      // PAR.PS Item Identification = CND.FG Loss Credit
      PAR.PS_Item_Id = 'FLC';

      ENDIF;

      //?Base/Converted/Fabricated
      // IF *OTHERWISE
      IF *OTHERWISE;

      //?Setup Base/Converted/Fabricated
      CASE;

      // IF PAR.Converted/Base Item is Base
      IF PAR.Base_Conv_Loss_Item = 'B';

      // PAR.PS Item Identification = CND.FG Base
      PAR.PS_Item_Id = 'FGB';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Converted
      IF PAR.Base_Conv_Loss_Item = 'C';

      // PAR.PS Item Identification = CND.FG Converted
      PAR.PS_Item_Id = 'FCV';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Fabricated
      IF PAR.Base_Conv_Loss_Item = 'F';

      // PAR.PS Item Identification = CND.FG Fabricated
      PAR.PS_Item_Id = 'FFB';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Loss
      IF PAR.Base_Conv_Loss_Item = 'L';

      // PAR.PS Item Identification = CND.FG Loss
      PAR.PS_Item_Id = 'FLS';

      ENDIF;

      ENDIF;

      ENDIF;

      ENDIF;

      ENDIF;

     }

    }

    //?FP1054 Output PS Prod Warehouse
    EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Production_Warehouse);
    PARAMETER(LCL.Accounting_Company);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?Available Ship Date
    CASE;

    // IF WRK.Warehouse Std Chill Time is yes
    IF WRK.Warehouse_Std_Chill_Time = 'Y';

    EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Date);
    PARAMETER(WRK.Warehouse_Chill_Time);
    PARAMETER(DB1.PS_Available_Ship_Date);
    {
     //?USER: Initialize routine

     // WRK.Count USR = CON.*ZERO
     WRK.Count_USR = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF WRK.Count USR EQ PAR.Chilling Time
     IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

     // PAR.PS Available Ship Date = DB1.Post to G/L Date
     PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

     QUIT;

     ENDIF;

     //?Skip Saturday
     CASE;

     // IF DB1.Day of Week is Saturday
     IF DB1.Day_of_Week = '7';

     //?Skip Saturday
     // IF *OTHERWISE
     IF *OTHERWISE;

     // WRK.Count USR = WRK.Count USR + CON.1
     WRK.Count_USR = WRK.Count_USR + 1;

     ENDIF;

    }

    //?Available Ship Date
    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Date);
    PARAMETER(WRK.Fresh_Chilling_Time);
    PARAMETER(DB1.PS_Available_Ship_Date);
    {
     //?USER: Initialize routine

     // WRK.Count USR = CON.*ZERO
     WRK.Count_USR = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF WRK.Count USR EQ PAR.Chilling Time
     IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

     // PAR.PS Available Ship Date = DB1.Post to G/L Date
     PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

     QUIT;

     ENDIF;

     //?Skip Saturday
     CASE;

     // IF DB1.Day of Week is Saturday
     IF DB1.Day_of_Week = '7';

     //?Skip Saturday
     // IF *OTHERWISE
     IF *OTHERWISE;

     // WRK.Count USR = WRK.Count USR + CON.1
     WRK.Count_USR = WRK.Count_USR + 1;

     ENDIF;

    }

    ENDIF;

    //?Average Piece Weight
    CASE;

    // IF PAR.PS Pieces Planned Prod is GT Zero
    IF PAR.PS_Pieces_Planned_Prod > *ZERO;

    // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
    DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

    ENDIF;

    EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // DB1.PS Lock Status = CND.NOT LOCKED
    DB1.PS_Lock_Status = 'N';

   }

   ENDIF;

   //?USER: Process Data record

   // PAR.PS Weight Standard = PAR.Weight Scheduled
   PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

   // PAR.PS Pieces Standard = PAR.Pieces Scheduled
   PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Standard is NE Zeros
   IF PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   // Avg Piece Weight
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

   //?FP1054 RMC 5/14/09 make positive if negative
   CASE;

   // IF PAR.PS Avg Piece Wgt is LT Zero
   IF PAR.PS_Avg_Piece_Wgt < *ZERO;

   // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

   ENDIF;

   ENDIF;

   EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.PS_Avg_Piece_Wgt);
   PARAMETER(PAR.PS_Weight_Standard);
   PARAMETER(PAR.PS_Pieces_Standard);
  }

 }

}


// RCD.Qty Prod Adjusted 3 USR = RCD.Qty Sched Ord 3 USR
RCD.Qty_Prod_Adjusted_3_USR = RCD.Qty_Sched_Ord_3_USR;

ENDIF;

CASE;

// IF RCD.Qty Sched Ord 4 USR NE RCD.Qty Prod Adjusted 4 USR
IF RCD.Qty_Sched_Ord_4_USR <> RCD.Qty_Prod_Adjusted_4_USR;

EXECUTE FUNCTION(Rtv Crt/Chg Prd Adj   RT) TYPE(RTVOBJ) FILE(PDI9CPP)           AC2085029;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_4);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.PS_Adjustment_Type);
PARAMETER(PAR.PS_Adjustment_Number);
PARAMETER(RCD.Qty_Sched_Ord_4_USR);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(Crt Schedule Override CR) TYPE(CRTOBJ) FILE(PDI9CPP)           AC1917552;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Adjustment_Type);
 PARAMETER(PAR.PS_Adjustment_Number);
 PARAMETER(PAR.PS_Adjustment_Quantity);
 PARAMETER('O');
 PARAMETER(*ZERO);
 PARAMETER(LCL.EDI_Status_1);
 PARAMETER(LCL.EDI_Status_2);
 PARAMETER(LCL.EDI_Status_3);
 PARAMETER('A');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(RTV Pces/Bag/Unit Chil RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1538895;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Description_Line_One);
  PARAMETER(LCL.Unit_Weight);
  PARAMETER(LCL.Fresh_Chilling_Time);
  PARAMETER(LCL.Piece_Count_Item);
  PARAMETER(LCL.Pieces_Per_Bag);
  PARAMETER(LCL.Bags_Per_Unit);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Determine Production Type
  CASE;

  // IF PAR.Production Date EQ JOB.*Job date
  IF PAR.Production_Date = JOB.*Job_date;

  // LCL.Production Type = CND.Schedule
  LCL.Production_Type = 'S';

  //?8/25/17 dont chk this. make prod date=job date as the "S" rcd always
  //?Determine Production Type
  // IF PAR.Production Date GT JOB.*Job date
  IF PAR.Production_Date > JOB.*Job_date;

  // LCL.Production Type = CND.Plan
  LCL.Production_Type = 'P';

  ENDIF;

  //?Pieces Vs. Weight
  CASE;

  // IF LCL.Piece Count Item is yes
  IF LCL.Piece_Count_Item = 'Y';

  // Calc Avg Pieces Wgt
  WRK.PS_Avg_Piece_Wgt = LCL.Unit_Weight / ( LCL.Pieces_Per_Bag * LCL.Bags_Per_Unit 'H' );

  // Pieces
  LCL.Pieces_Scheduled = ( PAR.PS_Adjustment_Quantity * LCL.Pieces_Per_Bag 'H' )
  * LCL.Bags_Per_Unit 'H';

  // LCL.Weight Scheduled = LCL.Pieces Scheduled * WRK.PS Avg Piece Wgt *Rounded
  LCL.Weight_Scheduled = LCL.Pieces_Scheduled * WRK.PS_Avg_Piece_Wgt 'H';

  //?Pieces Vs. Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Weight Scheduled = PAR.PS Adjustment Quantity * LCL.Unit Weight *Rounded
  LCL.Weight_Scheduled = PAR.PS_Adjustment_Quantity * LCL.Unit_Weight 'H';

  // LCL.Pieces Scheduled = CON.*ZERO
  LCL.Pieces_Scheduled = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(BPS Rpl Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1941028;
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Pieces_Scheduled);
  PARAMETER(LCL.Weight_Scheduled);
  {
   //?USER: Processing if Data record not found

   // PAR.PS Weight Standard = PAR.Weight Scheduled
   PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

   // PAR.PS Pieces Standard = PAR.Pieces Scheduled
   PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Standard is NE Zeros
   IF PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   // Avg Piece Weight
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

   //?FP1054 RMC 5/14/09 make positive if negative
   CASE;

   // IF PAR.PS Avg Piece Wgt is LT Zero
   IF PAR.PS_Avg_Piece_Wgt < *ZERO;

   // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

   ENDIF;

   ENDIF;

   CASE;

   // IF PAR.PS Weight Standard is NE Zero
   IF PAR.PS_Weight_Standard <> *ZERO;

   // OR PAR.PS Pieces Standard is NE Zeros
   OR PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Production_Type);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Available_Ship_Date);
   PARAMETER(PAR.PS_Weight_Planned_Prod);
   PARAMETER(PAR.PS_Pieces_Planned_Prod);
   PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
   PARAMETER(PAR.PS_Avg_Piece_Wgt);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Standard);
   PARAMETER(PAR.PS_Pieces_Standard);
   PARAMETER(PAR.PS_Weight_Converted);
   PARAMETER(PAR.PS_Pieces_Converted);
   PARAMETER(PAR.PS_Weight_Shipping_Adj);
   PARAMETER(PAR.PS_Pieces_Shipping_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Adj);
   PARAMETER(PAR.PS_Pieces_Prod_Adj);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Unit_Weight);
   PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.PS_Pieces_Unused_2);
   PARAMETER(PAR.PS_Weight_Unused_3);
   PARAMETER(PAR.PS_Pieces_Unused_3);
   PARAMETER(PAR.PS_Weight_Unused_4);
   PARAMETER(PAR.PS_Pieces_Unused_4);
   PARAMETER(PAR.PS_Weight_Unused_5);
   PARAMETER(PAR.PS_Pieces_Unused_5);
   PARAMETER(PAR.PS_Weight_Unused_6);
   PARAMETER(PAR.PS_Pieces_Unused_6);
   PARAMETER(PAR.PS_Item_Id);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.PS_Lock_Status);
   PARAMETER(PAR.PS_Export_Domestic);
   PARAMETER(PAR.PS_Print_On_Schedule);
   PARAMETER(PAR.PS_Piece_Count_Item);
   PARAMETER(PAR.PS_Unused_Sts_1);
   PARAMETER(PAR.PS_Unused_Sts_2);
   PARAMETER(PAR.PS_Unused_Sts_3);
   PARAMETER(PAR.PS_Unused_Sts_4);
   PARAMETER(PAR.PS_Item_Sched_Need_Sts);
   PARAMETER(PAR.PS_Production_Warehouse);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Pieces_Ordered);
   PARAMETER(PAR.PS_Weight_FC_Adjusted);
   PARAMETER(PAR.PS_Pieces_FC_Adjusted);
   PARAMETER(PAR.PS_Weight_FX_Adjusted);
   PARAMETER(PAR.PS_Pieces_FX_Adjusted);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.PS_Pieces_Sched_Shipment);
   PARAMETER(PAR.PS_Weight_Available_Prod);
   PARAMETER(PAR.PS_Pieces_Available_Prod);
   PARAMETER(PAR.PS_Weight_Production_Need);
   PARAMETER(PAR.PS_Pieces_Production_Need);
   PARAMETER(PAR.PS_Weight_Fab_Needs);
   PARAMETER(PAR.PS_Pieces_Fab_Needs);
   PARAMETER(PAR.PS_Weight_Sched_Prod);
   PARAMETER(PAR.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.PS_Weight_Sched_Need);
   PARAMETER(PAR.PS_Pieces_Sched_Need);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Primal_Group_Code);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(WRK.Description_Line_One);
    PARAMETER(WRK.UOM_Primary);
    PARAMETER(WRK.Unit_Weight);
    PARAMETER(DB1.Item_Structure_Class_Code);
    PARAMETER(DB1.Item_Structure_Group_Code);
    PARAMETER(DB1.Item_Structure_Type_Code);
    PARAMETER(WRK.Item_Type_Code);
    PARAMETER(WRK.Default_Warehouse);
    PARAMETER(WRK.Fresh_Chilling_Time);
    PARAMETER(WRK.Base_Conv_Loss_Item);
    PARAMETER(WRK.Variety_Rendered_Cut);
    PARAMETER(WRK.Credit_Item_Status);
    PARAMETER(WRK.Std_Weight_Head_Var_Ren);
    PARAMETER(WRK.Pieces_Per_Head);
    PARAMETER(DB1.Department_Code);
    PARAMETER(WRK.Group_for_Packaging);
    PARAMETER(WRK.Seconds_Item);
    PARAMETER(DB1.PS_Piece_Count_Item);
    PARAMETER(WRK.Pieces_Per_Bag);
    PARAMETER(WRK.Bags_Per_Unit);
    PARAMETER(DB1.PS_Export_Domestic);
    PARAMETER(DB1.PS_Print_On_Schedule);
    PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
    PARAMETER(WRK.Fresh_Sched_As_Ordered);
    PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
    PARAMETER(DB1.Primal_Group_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Warehouse_Type);
    PARAMETER(WRK.Trans_Contol_AS400_Plant);
    PARAMETER(WRK.Warehouse_Location);
    PARAMETER(WRK.Warehouse_Std_Chill_Time);
    PARAMETER(WRK.Warehouse_Chill_Time);
    PARAMETER(DB1.PS_Item_Id);
    {
     //?Execute internal function

     EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?Execute internal function

      EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
      PARAMETER(PAR.Company_Number);
      PARAMETER(PAR.Item_Code);
      PARAMETER(PAR.Description_Line_One);
      PARAMETER(PAR.UOM_Primary);
      PARAMETER(PAR.Unit_Weight);
      PARAMETER(PAR.Item_Structure_Class_Code);
      PARAMETER(PAR.Item_Structure_Group_Code);
      PARAMETER(PAR.Item_Structure_Type_Code);
      PARAMETER(PAR.Item_Type_Code);
      PARAMETER(PAR.Default_Warehouse);
      PARAMETER(PAR.Fresh_Chilling_Time);
      PARAMETER(PAR.Base_Conv_Loss_Item);
      PARAMETER(PAR.Variety_Rendered_Cut);
      PARAMETER(PAR.Credit_Item_Status);
      PARAMETER(PAR.Std_Weight_Head_Var_Ren);
      PARAMETER(PAR.Pieces_Per_Head);
      PARAMETER(PAR.Department_Code);
      PARAMETER(PAR.Group_for_Packaging);
      PARAMETER(PAR.Seconds_Item);
      PARAMETER(PAR.Piece_Count_Item);
      PARAMETER(PAR.Pieces_Per_Bag);
      PARAMETER(PAR.Bags_Per_Unit);
      PARAMETER(PAR.Export_Domestic);
      PARAMETER(PAR.Print_On_Schedule);
      PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
      PARAMETER(PAR.Fresh_Sched_As_Ordered);
      PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
      PARAMETER(PAR.Primal_Group_Code);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

      EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
      PARAMETER(PAR.Warehouse_Code);
      PARAMETER(PAR.Warehouse_Type);
      PARAMETER(PAR.Trans_Contol_AS400_Plant);
      PARAMETER(PAR.Warehouse_Location);
      PARAMETER(PAR.Warehouse_Std_Chill_Time);
      PARAMETER(PAR.Warehouse_Chill_Time);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

     }

     EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.PS_Item_Id);
     {
      //?Execute internal function

      CASE;

      // IF PAR.Item Type Code is Raw Materials
      IF PAR.Item_Type_Code = 'RM';

      // PAR.PS Item Identification = CND.RM Base
      PAR.PS_Item_Id = 'RMB';

      // IF *OTHERWISE
      IF *OTHERWISE;

      CASE;

      // IF PAR.Seconds Item is Yes
      IF PAR.Seconds_Item = 'Y';

      // PAR.PS Item Identification = CND.FG Seconds
      PAR.PS_Item_Id = 'FSC';

      // IF *OTHERWISE
      IF *OTHERWISE;

      CASE;

      // IF PAR.Variety/Rendered/Cut is Variety
      IF PAR.Variety_Rendered_Cut = 'V';

      // PAR.PS Item Identification = CND.FG Variety
      PAR.PS_Item_Id = 'FVR';

      // IF PAR.Variety/Rendered/Cut is Rendered
      IF PAR.Variety_Rendered_Cut = 'R';

      // PAR.PS Item Identification = CND.FG Rendered
      PAR.PS_Item_Id = 'FRD';

      // IF PAR.Variety/Rendered/Cut is Cut
      IF PAR.Variety_Rendered_Cut = 'C';

      //?Base/Converted/Fabricated
      CASE;

      // IF PAR.Credit Item Status is yes
      IF PAR.Credit_Item_Status = 'Y';

      //?Setup Base/Converted/Fabricated Credit
      CASE;

      // IF PAR.Converted/Base Item is Base
      IF PAR.Base_Conv_Loss_Item = 'B';

      // PAR.PS Item Identification = CND.FG Base Credit
      PAR.PS_Item_Id = 'FBC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Converted
      IF PAR.Base_Conv_Loss_Item = 'C';

      // PAR.PS Item Identification = CND.FG Converted Credit
      PAR.PS_Item_Id = 'FCC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Fabricated
      IF PAR.Base_Conv_Loss_Item = 'F';

      // PAR.PS Item Identification = CND.FG Fabricated Credit
      PAR.PS_Item_Id = 'FFC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Loss
      IF PAR.Base_Conv_Loss_Item = 'L';

      // PAR.PS Item Identification = CND.FG Loss Credit
      PAR.PS_Item_Id = 'FLC';

      ENDIF;

      //?Base/Converted/Fabricated
      // IF *OTHERWISE
      IF *OTHERWISE;

      //?Setup Base/Converted/Fabricated
      CASE;

      // IF PAR.Converted/Base Item is Base
      IF PAR.Base_Conv_Loss_Item = 'B';

      // PAR.PS Item Identification = CND.FG Base
      PAR.PS_Item_Id = 'FGB';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Converted
      IF PAR.Base_Conv_Loss_Item = 'C';

      // PAR.PS Item Identification = CND.FG Converted
      PAR.PS_Item_Id = 'FCV';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Fabricated
      IF PAR.Base_Conv_Loss_Item = 'F';

      // PAR.PS Item Identification = CND.FG Fabricated
      PAR.PS_Item_Id = 'FFB';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Loss
      IF PAR.Base_Conv_Loss_Item = 'L';

      // PAR.PS Item Identification = CND.FG Loss
      PAR.PS_Item_Id = 'FLS';

      ENDIF;

      ENDIF;

      ENDIF;

      ENDIF;

      ENDIF;

     }

    }

    //?FP1054 Output PS Prod Warehouse
    EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Production_Warehouse);
    PARAMETER(LCL.Accounting_Company);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?Available Ship Date
    CASE;

    // IF WRK.Warehouse Std Chill Time is yes
    IF WRK.Warehouse_Std_Chill_Time = 'Y';

    EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Date);
    PARAMETER(WRK.Warehouse_Chill_Time);
    PARAMETER(DB1.PS_Available_Ship_Date);
    {
     //?USER: Initialize routine

     // WRK.Count USR = CON.*ZERO
     WRK.Count_USR = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF WRK.Count USR EQ PAR.Chilling Time
     IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

     // PAR.PS Available Ship Date = DB1.Post to G/L Date
     PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

     QUIT;

     ENDIF;

     //?Skip Saturday
     CASE;

     // IF DB1.Day of Week is Saturday
     IF DB1.Day_of_Week = '7';

     //?Skip Saturday
     // IF *OTHERWISE
     IF *OTHERWISE;

     // WRK.Count USR = WRK.Count USR + CON.1
     WRK.Count_USR = WRK.Count_USR + 1;

     ENDIF;

    }

    //?Available Ship Date
    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Date);
    PARAMETER(WRK.Fresh_Chilling_Time);
    PARAMETER(DB1.PS_Available_Ship_Date);
    {
     //?USER: Initialize routine

     // WRK.Count USR = CON.*ZERO
     WRK.Count_USR = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF WRK.Count USR EQ PAR.Chilling Time
     IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

     // PAR.PS Available Ship Date = DB1.Post to G/L Date
     PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

     QUIT;

     ENDIF;

     //?Skip Saturday
     CASE;

     // IF DB1.Day of Week is Saturday
     IF DB1.Day_of_Week = '7';

     //?Skip Saturday
     // IF *OTHERWISE
     IF *OTHERWISE;

     // WRK.Count USR = WRK.Count USR + CON.1
     WRK.Count_USR = WRK.Count_USR + 1;

     ENDIF;

    }

    ENDIF;

    //?Average Piece Weight
    CASE;

    // IF PAR.PS Pieces Planned Prod is GT Zero
    IF PAR.PS_Pieces_Planned_Prod > *ZERO;

    // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
    DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

    ENDIF;

    EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // DB1.PS Lock Status = CND.NOT LOCKED
    DB1.PS_Lock_Status = 'N';

   }

   ENDIF;

   //?USER: Process Data record

   // PAR.PS Weight Standard = PAR.Weight Scheduled
   PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

   // PAR.PS Pieces Standard = PAR.Pieces Scheduled
   PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Standard is NE Zeros
   IF PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   // Avg Piece Weight
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

   //?FP1054 RMC 5/14/09 make positive if negative
   CASE;

   // IF PAR.PS Avg Piece Wgt is LT Zero
   IF PAR.PS_Avg_Piece_Wgt < *ZERO;

   // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

   ENDIF;

   ENDIF;

   EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.PS_Avg_Piece_Wgt);
   PARAMETER(PAR.PS_Weight_Standard);
   PARAMETER(PAR.PS_Pieces_Standard);
  }

 }

 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Standard Override CH) TYPE(CHGOBJ) FILE(PDI9CPP)           AC1917553;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Adjustment_Type);
 PARAMETER(DB1.PS_Adjustment_Number);
 PARAMETER(PAR.PS_Adjustment_Quantity);
 PARAMETER(DB1.PS_Adjustment_Status);
 PARAMETER(DB1.PS_Consumed_Item_Code);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Record_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(RTV Pces/Bag/Unit Chil RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1538895;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Description_Line_One);
  PARAMETER(LCL.Unit_Weight);
  PARAMETER(LCL.Fresh_Chilling_Time);
  PARAMETER(LCL.Piece_Count_Item);
  PARAMETER(LCL.Pieces_Per_Bag);
  PARAMETER(LCL.Bags_Per_Unit);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Determine Production Type
  CASE;

  // IF PAR.Production Date EQ JOB.*Job date
  IF PAR.Production_Date = JOB.*Job_date;

  // LCL.Production Type = CND.Schedule
  LCL.Production_Type = 'S';

  //?Determine Production Type
  // IF PAR.Production Date GT JOB.*Job date
  IF PAR.Production_Date > JOB.*Job_date;

  // LCL.Production Type = CND.Plan
  LCL.Production_Type = 'P';

  ENDIF;

  //?Pieces Vs. Weight
  CASE;

  // IF LCL.Piece Count Item is yes
  IF LCL.Piece_Count_Item = 'Y';

  // Calc Avg Pieces Wgt
  WRK.PS_Avg_Piece_Wgt = LCL.Unit_Weight / ( LCL.Pieces_Per_Bag * LCL.Bags_Per_Unit 'H' );

  // Pieces
  LCL.Pieces_Scheduled = ( PAR.PS_Adjustment_Quantity * LCL.Pieces_Per_Bag 'H' )
  * LCL.Bags_Per_Unit 'H';

  // LCL.Weight Scheduled = LCL.Pieces Scheduled * WRK.PS Avg Piece Wgt *Rounded
  LCL.Weight_Scheduled = LCL.Pieces_Scheduled * WRK.PS_Avg_Piece_Wgt 'H';

  //?Pieces Vs. Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Weight Scheduled = PAR.PS Adjustment Quantity * LCL.Unit Weight *Rounded
  LCL.Weight_Scheduled = PAR.PS_Adjustment_Quantity * LCL.Unit_Weight 'H';

  // LCL.Pieces Scheduled = CON.*ZERO
  LCL.Pieces_Scheduled = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(BPS Rpl Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1941028;
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Pieces_Scheduled);
  PARAMETER(LCL.Weight_Scheduled);
  {
   //?USER: Processing if Data record not found

   // PAR.PS Weight Standard = PAR.Weight Scheduled
   PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

   // PAR.PS Pieces Standard = PAR.Pieces Scheduled
   PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Standard is NE Zeros
   IF PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   // Avg Piece Weight
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

   //?FP1054 RMC 5/14/09 make positive if negative
   CASE;

   // IF PAR.PS Avg Piece Wgt is LT Zero
   IF PAR.PS_Avg_Piece_Wgt < *ZERO;

   // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

   ENDIF;

   ENDIF;

   CASE;

   // IF PAR.PS Weight Standard is NE Zero
   IF PAR.PS_Weight_Standard <> *ZERO;

   // OR PAR.PS Pieces Standard is NE Zeros
   OR PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Production_Type);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Available_Ship_Date);
   PARAMETER(PAR.PS_Weight_Planned_Prod);
   PARAMETER(PAR.PS_Pieces_Planned_Prod);
   PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
   PARAMETER(PAR.PS_Avg_Piece_Wgt);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Standard);
   PARAMETER(PAR.PS_Pieces_Standard);
   PARAMETER(PAR.PS_Weight_Converted);
   PARAMETER(PAR.PS_Pieces_Converted);
   PARAMETER(PAR.PS_Weight_Shipping_Adj);
   PARAMETER(PAR.PS_Pieces_Shipping_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Adj);
   PARAMETER(PAR.PS_Pieces_Prod_Adj);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Unit_Weight);
   PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.PS_Pieces_Unused_2);
   PARAMETER(PAR.PS_Weight_Unused_3);
   PARAMETER(PAR.PS_Pieces_Unused_3);
   PARAMETER(PAR.PS_Weight_Unused_4);
   PARAMETER(PAR.PS_Pieces_Unused_4);
   PARAMETER(PAR.PS_Weight_Unused_5);
   PARAMETER(PAR.PS_Pieces_Unused_5);
   PARAMETER(PAR.PS_Weight_Unused_6);
   PARAMETER(PAR.PS_Pieces_Unused_6);
   PARAMETER(PAR.PS_Item_Id);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.PS_Lock_Status);
   PARAMETER(PAR.PS_Export_Domestic);
   PARAMETER(PAR.PS_Print_On_Schedule);
   PARAMETER(PAR.PS_Piece_Count_Item);
   PARAMETER(PAR.PS_Unused_Sts_1);
   PARAMETER(PAR.PS_Unused_Sts_2);
   PARAMETER(PAR.PS_Unused_Sts_3);
   PARAMETER(PAR.PS_Unused_Sts_4);
   PARAMETER(PAR.PS_Item_Sched_Need_Sts);
   PARAMETER(PAR.PS_Production_Warehouse);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Pieces_Ordered);
   PARAMETER(PAR.PS_Weight_FC_Adjusted);
   PARAMETER(PAR.PS_Pieces_FC_Adjusted);
   PARAMETER(PAR.PS_Weight_FX_Adjusted);
   PARAMETER(PAR.PS_Pieces_FX_Adjusted);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.PS_Pieces_Sched_Shipment);
   PARAMETER(PAR.PS_Weight_Available_Prod);
   PARAMETER(PAR.PS_Pieces_Available_Prod);
   PARAMETER(PAR.PS_Weight_Production_Need);
   PARAMETER(PAR.PS_Pieces_Production_Need);
   PARAMETER(PAR.PS_Weight_Fab_Needs);
   PARAMETER(PAR.PS_Pieces_Fab_Needs);
   PARAMETER(PAR.PS_Weight_Sched_Prod);
   PARAMETER(PAR.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.PS_Weight_Sched_Need);
   PARAMETER(PAR.PS_Pieces_Sched_Need);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Primal_Group_Code);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(WRK.Description_Line_One);
    PARAMETER(WRK.UOM_Primary);
    PARAMETER(WRK.Unit_Weight);
    PARAMETER(DB1.Item_Structure_Class_Code);
    PARAMETER(DB1.Item_Structure_Group_Code);
    PARAMETER(DB1.Item_Structure_Type_Code);
    PARAMETER(WRK.Item_Type_Code);
    PARAMETER(WRK.Default_Warehouse);
    PARAMETER(WRK.Fresh_Chilling_Time);
    PARAMETER(WRK.Base_Conv_Loss_Item);
    PARAMETER(WRK.Variety_Rendered_Cut);
    PARAMETER(WRK.Credit_Item_Status);
    PARAMETER(WRK.Std_Weight_Head_Var_Ren);
    PARAMETER(WRK.Pieces_Per_Head);
    PARAMETER(DB1.Department_Code);
    PARAMETER(WRK.Group_for_Packaging);
    PARAMETER(WRK.Seconds_Item);
    PARAMETER(DB1.PS_Piece_Count_Item);
    PARAMETER(WRK.Pieces_Per_Bag);
    PARAMETER(WRK.Bags_Per_Unit);
    PARAMETER(DB1.PS_Export_Domestic);
    PARAMETER(DB1.PS_Print_On_Schedule);
    PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
    PARAMETER(WRK.Fresh_Sched_As_Ordered);
    PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
    PARAMETER(DB1.Primal_Group_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Warehouse_Type);
    PARAMETER(WRK.Trans_Contol_AS400_Plant);
    PARAMETER(WRK.Warehouse_Location);
    PARAMETER(WRK.Warehouse_Std_Chill_Time);
    PARAMETER(WRK.Warehouse_Chill_Time);
    PARAMETER(DB1.PS_Item_Id);
    {
     //?Execute internal function

     EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?Execute internal function

      EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
      PARAMETER(PAR.Company_Number);
      PARAMETER(PAR.Item_Code);
      PARAMETER(PAR.Description_Line_One);
      PARAMETER(PAR.UOM_Primary);
      PARAMETER(PAR.Unit_Weight);
      PARAMETER(PAR.Item_Structure_Class_Code);
      PARAMETER(PAR.Item_Structure_Group_Code);
      PARAMETER(PAR.Item_Structure_Type_Code);
      PARAMETER(PAR.Item_Type_Code);
      PARAMETER(PAR.Default_Warehouse);
      PARAMETER(PAR.Fresh_Chilling_Time);
      PARAMETER(PAR.Base_Conv_Loss_Item);
      PARAMETER(PAR.Variety_Rendered_Cut);
      PARAMETER(PAR.Credit_Item_Status);
      PARAMETER(PAR.Std_Weight_Head_Var_Ren);
      PARAMETER(PAR.Pieces_Per_Head);
      PARAMETER(PAR.Department_Code);
      PARAMETER(PAR.Group_for_Packaging);
      PARAMETER(PAR.Seconds_Item);
      PARAMETER(PAR.Piece_Count_Item);
      PARAMETER(PAR.Pieces_Per_Bag);
      PARAMETER(PAR.Bags_Per_Unit);
      PARAMETER(PAR.Export_Domestic);
      PARAMETER(PAR.Print_On_Schedule);
      PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
      PARAMETER(PAR.Fresh_Sched_As_Ordered);
      PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
      PARAMETER(PAR.Primal_Group_Code);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

      EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
      PARAMETER(PAR.Warehouse_Code);
      PARAMETER(PAR.Warehouse_Type);
      PARAMETER(PAR.Trans_Contol_AS400_Plant);
      PARAMETER(PAR.Warehouse_Location);
      PARAMETER(PAR.Warehouse_Std_Chill_Time);
      PARAMETER(PAR.Warehouse_Chill_Time);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

     }

     EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.PS_Item_Id);
     {
      //?Execute internal function

      CASE;

      // IF PAR.Item Type Code is Raw Materials
      IF PAR.Item_Type_Code = 'RM';

      // PAR.PS Item Identification = CND.RM Base
      PAR.PS_Item_Id = 'RMB';

      // IF *OTHERWISE
      IF *OTHERWISE;

      CASE;

      // IF PAR.Seconds Item is Yes
      IF PAR.Seconds_Item = 'Y';

      // PAR.PS Item Identification = CND.FG Seconds
      PAR.PS_Item_Id = 'FSC';

      // IF *OTHERWISE
      IF *OTHERWISE;

      CASE;

      // IF PAR.Variety/Rendered/Cut is Variety
      IF PAR.Variety_Rendered_Cut = 'V';

      // PAR.PS Item Identification = CND.FG Variety
      PAR.PS_Item_Id = 'FVR';

      // IF PAR.Variety/Rendered/Cut is Rendered
      IF PAR.Variety_Rendered_Cut = 'R';

      // PAR.PS Item Identification = CND.FG Rendered
      PAR.PS_Item_Id = 'FRD';

      // IF PAR.Variety/Rendered/Cut is Cut
      IF PAR.Variety_Rendered_Cut = 'C';

      //?Base/Converted/Fabricated
      CASE;

      // IF PAR.Credit Item Status is yes
      IF PAR.Credit_Item_Status = 'Y';

      //?Setup Base/Converted/Fabricated Credit
      CASE;

      // IF PAR.Converted/Base Item is Base
      IF PAR.Base_Conv_Loss_Item = 'B';

      // PAR.PS Item Identification = CND.FG Base Credit
      PAR.PS_Item_Id = 'FBC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Converted
      IF PAR.Base_Conv_Loss_Item = 'C';

      // PAR.PS Item Identification = CND.FG Converted Credit
      PAR.PS_Item_Id = 'FCC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Fabricated
      IF PAR.Base_Conv_Loss_Item = 'F';

      // PAR.PS Item Identification = CND.FG Fabricated Credit
      PAR.PS_Item_Id = 'FFC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Loss
      IF PAR.Base_Conv_Loss_Item = 'L';

      // PAR.PS Item Identification = CND.FG Loss Credit
      PAR.PS_Item_Id = 'FLC';

      ENDIF;

      //?Base/Converted/Fabricated
      // IF *OTHERWISE
      IF *OTHERWISE;

      //?Setup Base/Converted/Fabricated
      CASE;

      // IF PAR.Converted/Base Item is Base
      IF PAR.Base_Conv_Loss_Item = 'B';

      // PAR.PS Item Identification = CND.FG Base
      PAR.PS_Item_Id = 'FGB';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Converted
      IF PAR.Base_Conv_Loss_Item = 'C';

      // PAR.PS Item Identification = CND.FG Converted
      PAR.PS_Item_Id = 'FCV';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Fabricated
      IF PAR.Base_Conv_Loss_Item = 'F';

      // PAR.PS Item Identification = CND.FG Fabricated
      PAR.PS_Item_Id = 'FFB';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Loss
      IF PAR.Base_Conv_Loss_Item = 'L';

      // PAR.PS Item Identification = CND.FG Loss
      PAR.PS_Item_Id = 'FLS';

      ENDIF;

      ENDIF;

      ENDIF;

      ENDIF;

      ENDIF;

     }

    }

    //?FP1054 Output PS Prod Warehouse
    EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Production_Warehouse);
    PARAMETER(LCL.Accounting_Company);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?Available Ship Date
    CASE;

    // IF WRK.Warehouse Std Chill Time is yes
    IF WRK.Warehouse_Std_Chill_Time = 'Y';

    EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Date);
    PARAMETER(WRK.Warehouse_Chill_Time);
    PARAMETER(DB1.PS_Available_Ship_Date);
    {
     //?USER: Initialize routine

     // WRK.Count USR = CON.*ZERO
     WRK.Count_USR = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF WRK.Count USR EQ PAR.Chilling Time
     IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

     // PAR.PS Available Ship Date = DB1.Post to G/L Date
     PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

     QUIT;

     ENDIF;

     //?Skip Saturday
     CASE;

     // IF DB1.Day of Week is Saturday
     IF DB1.Day_of_Week = '7';

     //?Skip Saturday
     // IF *OTHERWISE
     IF *OTHERWISE;

     // WRK.Count USR = WRK.Count USR + CON.1
     WRK.Count_USR = WRK.Count_USR + 1;

     ENDIF;

    }

    //?Available Ship Date
    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Date);
    PARAMETER(WRK.Fresh_Chilling_Time);
    PARAMETER(DB1.PS_Available_Ship_Date);
    {
     //?USER: Initialize routine

     // WRK.Count USR = CON.*ZERO
     WRK.Count_USR = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF WRK.Count USR EQ PAR.Chilling Time
     IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

     // PAR.PS Available Ship Date = DB1.Post to G/L Date
     PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

     QUIT;

     ENDIF;

     //?Skip Saturday
     CASE;

     // IF DB1.Day of Week is Saturday
     IF DB1.Day_of_Week = '7';

     //?Skip Saturday
     // IF *OTHERWISE
     IF *OTHERWISE;

     // WRK.Count USR = WRK.Count USR + CON.1
     WRK.Count_USR = WRK.Count_USR + 1;

     ENDIF;

    }

    ENDIF;

    //?Average Piece Weight
    CASE;

    // IF PAR.PS Pieces Planned Prod is GT Zero
    IF PAR.PS_Pieces_Planned_Prod > *ZERO;

    // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
    DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

    ENDIF;

    EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // DB1.PS Lock Status = CND.NOT LOCKED
    DB1.PS_Lock_Status = 'N';

   }

   ENDIF;

   //?USER: Process Data record

   // PAR.PS Weight Standard = PAR.Weight Scheduled
   PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

   // PAR.PS Pieces Standard = PAR.Pieces Scheduled
   PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Standard is NE Zeros
   IF PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   // Avg Piece Weight
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

   //?FP1054 RMC 5/14/09 make positive if negative
   CASE;

   // IF PAR.PS Avg Piece Wgt is LT Zero
   IF PAR.PS_Avg_Piece_Wgt < *ZERO;

   // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

   ENDIF;

   ENDIF;

   EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.PS_Avg_Piece_Wgt);
   PARAMETER(PAR.PS_Weight_Standard);
   PARAMETER(PAR.PS_Pieces_Standard);
  }

 }

}


// RCD.Qty Prod Adjusted 4 USR = RCD.Qty Sched Ord 4 USR
RCD.Qty_Prod_Adjusted_4_USR = RCD.Qty_Sched_Ord_4_USR;

ENDIF;

CASE;

// IF RCD.Qty Sched Ord 5 USR NE RCD.Qty Prod Adjusted 5 USR
IF RCD.Qty_Sched_Ord_5_USR <> RCD.Qty_Prod_Adjusted_5_USR;

EXECUTE FUNCTION(Rtv Crt/Chg Prd Adj   RT) TYPE(RTVOBJ) FILE(PDI9CPP)           AC2085029;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_5);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.PS_Adjustment_Type);
PARAMETER(PAR.PS_Adjustment_Number);
PARAMETER(RCD.Qty_Sched_Ord_5_USR);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(Crt Schedule Override CR) TYPE(CRTOBJ) FILE(PDI9CPP)           AC1917552;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Adjustment_Type);
 PARAMETER(PAR.PS_Adjustment_Number);
 PARAMETER(PAR.PS_Adjustment_Quantity);
 PARAMETER('O');
 PARAMETER(*ZERO);
 PARAMETER(LCL.EDI_Status_1);
 PARAMETER(LCL.EDI_Status_2);
 PARAMETER(LCL.EDI_Status_3);
 PARAMETER('A');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(RTV Pces/Bag/Unit Chil RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1538895;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Description_Line_One);
  PARAMETER(LCL.Unit_Weight);
  PARAMETER(LCL.Fresh_Chilling_Time);
  PARAMETER(LCL.Piece_Count_Item);
  PARAMETER(LCL.Pieces_Per_Bag);
  PARAMETER(LCL.Bags_Per_Unit);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Determine Production Type
  CASE;

  // IF PAR.Production Date EQ JOB.*Job date
  IF PAR.Production_Date = JOB.*Job_date;

  // LCL.Production Type = CND.Schedule
  LCL.Production_Type = 'S';

  //?8/25/17 dont chk this. make prod date=job date as the "S" rcd always
  //?Determine Production Type
  // IF PAR.Production Date GT JOB.*Job date
  IF PAR.Production_Date > JOB.*Job_date;

  // LCL.Production Type = CND.Plan
  LCL.Production_Type = 'P';

  ENDIF;

  //?Pieces Vs. Weight
  CASE;

  // IF LCL.Piece Count Item is yes
  IF LCL.Piece_Count_Item = 'Y';

  // Calc Avg Pieces Wgt
  WRK.PS_Avg_Piece_Wgt = LCL.Unit_Weight / ( LCL.Pieces_Per_Bag * LCL.Bags_Per_Unit 'H' );

  // Pieces
  LCL.Pieces_Scheduled = ( PAR.PS_Adjustment_Quantity * LCL.Pieces_Per_Bag 'H' )
  * LCL.Bags_Per_Unit 'H';

  // LCL.Weight Scheduled = LCL.Pieces Scheduled * WRK.PS Avg Piece Wgt *Rounded
  LCL.Weight_Scheduled = LCL.Pieces_Scheduled * WRK.PS_Avg_Piece_Wgt 'H';

  //?Pieces Vs. Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Weight Scheduled = PAR.PS Adjustment Quantity * LCL.Unit Weight *Rounded
  LCL.Weight_Scheduled = PAR.PS_Adjustment_Quantity * LCL.Unit_Weight 'H';

  // LCL.Pieces Scheduled = CON.*ZERO
  LCL.Pieces_Scheduled = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(BPS Rpl Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1941028;
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Pieces_Scheduled);
  PARAMETER(LCL.Weight_Scheduled);
  {
   //?USER: Processing if Data record not found

   // PAR.PS Weight Standard = PAR.Weight Scheduled
   PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

   // PAR.PS Pieces Standard = PAR.Pieces Scheduled
   PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Standard is NE Zeros
   IF PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   // Avg Piece Weight
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

   //?FP1054 RMC 5/14/09 make positive if negative
   CASE;

   // IF PAR.PS Avg Piece Wgt is LT Zero
   IF PAR.PS_Avg_Piece_Wgt < *ZERO;

   // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

   ENDIF;

   ENDIF;

   CASE;

   // IF PAR.PS Weight Standard is NE Zero
   IF PAR.PS_Weight_Standard <> *ZERO;

   // OR PAR.PS Pieces Standard is NE Zeros
   OR PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Production_Type);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Available_Ship_Date);
   PARAMETER(PAR.PS_Weight_Planned_Prod);
   PARAMETER(PAR.PS_Pieces_Planned_Prod);
   PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
   PARAMETER(PAR.PS_Avg_Piece_Wgt);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Standard);
   PARAMETER(PAR.PS_Pieces_Standard);
   PARAMETER(PAR.PS_Weight_Converted);
   PARAMETER(PAR.PS_Pieces_Converted);
   PARAMETER(PAR.PS_Weight_Shipping_Adj);
   PARAMETER(PAR.PS_Pieces_Shipping_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Adj);
   PARAMETER(PAR.PS_Pieces_Prod_Adj);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Unit_Weight);
   PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.PS_Pieces_Unused_2);
   PARAMETER(PAR.PS_Weight_Unused_3);
   PARAMETER(PAR.PS_Pieces_Unused_3);
   PARAMETER(PAR.PS_Weight_Unused_4);
   PARAMETER(PAR.PS_Pieces_Unused_4);
   PARAMETER(PAR.PS_Weight_Unused_5);
   PARAMETER(PAR.PS_Pieces_Unused_5);
   PARAMETER(PAR.PS_Weight_Unused_6);
   PARAMETER(PAR.PS_Pieces_Unused_6);
   PARAMETER(PAR.PS_Item_Id);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.PS_Lock_Status);
   PARAMETER(PAR.PS_Export_Domestic);
   PARAMETER(PAR.PS_Print_On_Schedule);
   PARAMETER(PAR.PS_Piece_Count_Item);
   PARAMETER(PAR.PS_Unused_Sts_1);
   PARAMETER(PAR.PS_Unused_Sts_2);
   PARAMETER(PAR.PS_Unused_Sts_3);
   PARAMETER(PAR.PS_Unused_Sts_4);
   PARAMETER(PAR.PS_Item_Sched_Need_Sts);
   PARAMETER(PAR.PS_Production_Warehouse);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Pieces_Ordered);
   PARAMETER(PAR.PS_Weight_FC_Adjusted);
   PARAMETER(PAR.PS_Pieces_FC_Adjusted);
   PARAMETER(PAR.PS_Weight_FX_Adjusted);
   PARAMETER(PAR.PS_Pieces_FX_Adjusted);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.PS_Pieces_Sched_Shipment);
   PARAMETER(PAR.PS_Weight_Available_Prod);
   PARAMETER(PAR.PS_Pieces_Available_Prod);
   PARAMETER(PAR.PS_Weight_Production_Need);
   PARAMETER(PAR.PS_Pieces_Production_Need);
   PARAMETER(PAR.PS_Weight_Fab_Needs);
   PARAMETER(PAR.PS_Pieces_Fab_Needs);
   PARAMETER(PAR.PS_Weight_Sched_Prod);
   PARAMETER(PAR.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.PS_Weight_Sched_Need);
   PARAMETER(PAR.PS_Pieces_Sched_Need);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Primal_Group_Code);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(WRK.Description_Line_One);
    PARAMETER(WRK.UOM_Primary);
    PARAMETER(WRK.Unit_Weight);
    PARAMETER(DB1.Item_Structure_Class_Code);
    PARAMETER(DB1.Item_Structure_Group_Code);
    PARAMETER(DB1.Item_Structure_Type_Code);
    PARAMETER(WRK.Item_Type_Code);
    PARAMETER(WRK.Default_Warehouse);
    PARAMETER(WRK.Fresh_Chilling_Time);
    PARAMETER(WRK.Base_Conv_Loss_Item);
    PARAMETER(WRK.Variety_Rendered_Cut);
    PARAMETER(WRK.Credit_Item_Status);
    PARAMETER(WRK.Std_Weight_Head_Var_Ren);
    PARAMETER(WRK.Pieces_Per_Head);
    PARAMETER(DB1.Department_Code);
    PARAMETER(WRK.Group_for_Packaging);
    PARAMETER(WRK.Seconds_Item);
    PARAMETER(DB1.PS_Piece_Count_Item);
    PARAMETER(WRK.Pieces_Per_Bag);
    PARAMETER(WRK.Bags_Per_Unit);
    PARAMETER(DB1.PS_Export_Domestic);
    PARAMETER(DB1.PS_Print_On_Schedule);
    PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
    PARAMETER(WRK.Fresh_Sched_As_Ordered);
    PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
    PARAMETER(DB1.Primal_Group_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Warehouse_Type);
    PARAMETER(WRK.Trans_Contol_AS400_Plant);
    PARAMETER(WRK.Warehouse_Location);
    PARAMETER(WRK.Warehouse_Std_Chill_Time);
    PARAMETER(WRK.Warehouse_Chill_Time);
    PARAMETER(DB1.PS_Item_Id);
    {
     //?Execute internal function

     EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?Execute internal function

      EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
      PARAMETER(PAR.Company_Number);
      PARAMETER(PAR.Item_Code);
      PARAMETER(PAR.Description_Line_One);
      PARAMETER(PAR.UOM_Primary);
      PARAMETER(PAR.Unit_Weight);
      PARAMETER(PAR.Item_Structure_Class_Code);
      PARAMETER(PAR.Item_Structure_Group_Code);
      PARAMETER(PAR.Item_Structure_Type_Code);
      PARAMETER(PAR.Item_Type_Code);
      PARAMETER(PAR.Default_Warehouse);
      PARAMETER(PAR.Fresh_Chilling_Time);
      PARAMETER(PAR.Base_Conv_Loss_Item);
      PARAMETER(PAR.Variety_Rendered_Cut);
      PARAMETER(PAR.Credit_Item_Status);
      PARAMETER(PAR.Std_Weight_Head_Var_Ren);
      PARAMETER(PAR.Pieces_Per_Head);
      PARAMETER(PAR.Department_Code);
      PARAMETER(PAR.Group_for_Packaging);
      PARAMETER(PAR.Seconds_Item);
      PARAMETER(PAR.Piece_Count_Item);
      PARAMETER(PAR.Pieces_Per_Bag);
      PARAMETER(PAR.Bags_Per_Unit);
      PARAMETER(PAR.Export_Domestic);
      PARAMETER(PAR.Print_On_Schedule);
      PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
      PARAMETER(PAR.Fresh_Sched_As_Ordered);
      PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
      PARAMETER(PAR.Primal_Group_Code);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

      EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
      PARAMETER(PAR.Warehouse_Code);
      PARAMETER(PAR.Warehouse_Type);
      PARAMETER(PAR.Trans_Contol_AS400_Plant);
      PARAMETER(PAR.Warehouse_Location);
      PARAMETER(PAR.Warehouse_Std_Chill_Time);
      PARAMETER(PAR.Warehouse_Chill_Time);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

     }

     EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.PS_Item_Id);
     {
      //?Execute internal function

      CASE;

      // IF PAR.Item Type Code is Raw Materials
      IF PAR.Item_Type_Code = 'RM';

      // PAR.PS Item Identification = CND.RM Base
      PAR.PS_Item_Id = 'RMB';

      // IF *OTHERWISE
      IF *OTHERWISE;

      CASE;

      // IF PAR.Seconds Item is Yes
      IF PAR.Seconds_Item = 'Y';

      // PAR.PS Item Identification = CND.FG Seconds
      PAR.PS_Item_Id = 'FSC';

      // IF *OTHERWISE
      IF *OTHERWISE;

      CASE;

      // IF PAR.Variety/Rendered/Cut is Variety
      IF PAR.Variety_Rendered_Cut = 'V';

      // PAR.PS Item Identification = CND.FG Variety
      PAR.PS_Item_Id = 'FVR';

      // IF PAR.Variety/Rendered/Cut is Rendered
      IF PAR.Variety_Rendered_Cut = 'R';

      // PAR.PS Item Identification = CND.FG Rendered
      PAR.PS_Item_Id = 'FRD';

      // IF PAR.Variety/Rendered/Cut is Cut
      IF PAR.Variety_Rendered_Cut = 'C';

      //?Base/Converted/Fabricated
      CASE;

      // IF PAR.Credit Item Status is yes
      IF PAR.Credit_Item_Status = 'Y';

      //?Setup Base/Converted/Fabricated Credit
      CASE;

      // IF PAR.Converted/Base Item is Base
      IF PAR.Base_Conv_Loss_Item = 'B';

      // PAR.PS Item Identification = CND.FG Base Credit
      PAR.PS_Item_Id = 'FBC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Converted
      IF PAR.Base_Conv_Loss_Item = 'C';

      // PAR.PS Item Identification = CND.FG Converted Credit
      PAR.PS_Item_Id = 'FCC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Fabricated
      IF PAR.Base_Conv_Loss_Item = 'F';

      // PAR.PS Item Identification = CND.FG Fabricated Credit
      PAR.PS_Item_Id = 'FFC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Loss
      IF PAR.Base_Conv_Loss_Item = 'L';

      // PAR.PS Item Identification = CND.FG Loss Credit
      PAR.PS_Item_Id = 'FLC';

      ENDIF;

      //?Base/Converted/Fabricated
      // IF *OTHERWISE
      IF *OTHERWISE;

      //?Setup Base/Converted/Fabricated
      CASE;

      // IF PAR.Converted/Base Item is Base
      IF PAR.Base_Conv_Loss_Item = 'B';

      // PAR.PS Item Identification = CND.FG Base
      PAR.PS_Item_Id = 'FGB';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Converted
      IF PAR.Base_Conv_Loss_Item = 'C';

      // PAR.PS Item Identification = CND.FG Converted
      PAR.PS_Item_Id = 'FCV';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Fabricated
      IF PAR.Base_Conv_Loss_Item = 'F';

      // PAR.PS Item Identification = CND.FG Fabricated
      PAR.PS_Item_Id = 'FFB';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Loss
      IF PAR.Base_Conv_Loss_Item = 'L';

      // PAR.PS Item Identification = CND.FG Loss
      PAR.PS_Item_Id = 'FLS';

      ENDIF;

      ENDIF;

      ENDIF;

      ENDIF;

      ENDIF;

     }

    }

    //?FP1054 Output PS Prod Warehouse
    EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Production_Warehouse);
    PARAMETER(LCL.Accounting_Company);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?Available Ship Date
    CASE;

    // IF WRK.Warehouse Std Chill Time is yes
    IF WRK.Warehouse_Std_Chill_Time = 'Y';

    EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Date);
    PARAMETER(WRK.Warehouse_Chill_Time);
    PARAMETER(DB1.PS_Available_Ship_Date);
    {
     //?USER: Initialize routine

     // WRK.Count USR = CON.*ZERO
     WRK.Count_USR = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF WRK.Count USR EQ PAR.Chilling Time
     IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

     // PAR.PS Available Ship Date = DB1.Post to G/L Date
     PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

     QUIT;

     ENDIF;

     //?Skip Saturday
     CASE;

     // IF DB1.Day of Week is Saturday
     IF DB1.Day_of_Week = '7';

     //?Skip Saturday
     // IF *OTHERWISE
     IF *OTHERWISE;

     // WRK.Count USR = WRK.Count USR + CON.1
     WRK.Count_USR = WRK.Count_USR + 1;

     ENDIF;

    }

    //?Available Ship Date
    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Date);
    PARAMETER(WRK.Fresh_Chilling_Time);
    PARAMETER(DB1.PS_Available_Ship_Date);
    {
     //?USER: Initialize routine

     // WRK.Count USR = CON.*ZERO
     WRK.Count_USR = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF WRK.Count USR EQ PAR.Chilling Time
     IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

     // PAR.PS Available Ship Date = DB1.Post to G/L Date
     PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

     QUIT;

     ENDIF;

     //?Skip Saturday
     CASE;

     // IF DB1.Day of Week is Saturday
     IF DB1.Day_of_Week = '7';

     //?Skip Saturday
     // IF *OTHERWISE
     IF *OTHERWISE;

     // WRK.Count USR = WRK.Count USR + CON.1
     WRK.Count_USR = WRK.Count_USR + 1;

     ENDIF;

    }

    ENDIF;

    //?Average Piece Weight
    CASE;

    // IF PAR.PS Pieces Planned Prod is GT Zero
    IF PAR.PS_Pieces_Planned_Prod > *ZERO;

    // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
    DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

    ENDIF;

    EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // DB1.PS Lock Status = CND.NOT LOCKED
    DB1.PS_Lock_Status = 'N';

   }

   ENDIF;

   //?USER: Process Data record

   // PAR.PS Weight Standard = PAR.Weight Scheduled
   PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

   // PAR.PS Pieces Standard = PAR.Pieces Scheduled
   PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Standard is NE Zeros
   IF PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   // Avg Piece Weight
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

   //?FP1054 RMC 5/14/09 make positive if negative
   CASE;

   // IF PAR.PS Avg Piece Wgt is LT Zero
   IF PAR.PS_Avg_Piece_Wgt < *ZERO;

   // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

   ENDIF;

   ENDIF;

   EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.PS_Avg_Piece_Wgt);
   PARAMETER(PAR.PS_Weight_Standard);
   PARAMETER(PAR.PS_Pieces_Standard);
  }

 }

 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Standard Override CH) TYPE(CHGOBJ) FILE(PDI9CPP)           AC1917553;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Adjustment_Type);
 PARAMETER(DB1.PS_Adjustment_Number);
 PARAMETER(PAR.PS_Adjustment_Quantity);
 PARAMETER(DB1.PS_Adjustment_Status);
 PARAMETER(DB1.PS_Consumed_Item_Code);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Record_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(RTV Pces/Bag/Unit Chil RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1538895;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Description_Line_One);
  PARAMETER(LCL.Unit_Weight);
  PARAMETER(LCL.Fresh_Chilling_Time);
  PARAMETER(LCL.Piece_Count_Item);
  PARAMETER(LCL.Pieces_Per_Bag);
  PARAMETER(LCL.Bags_Per_Unit);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Determine Production Type
  CASE;

  // IF PAR.Production Date EQ JOB.*Job date
  IF PAR.Production_Date = JOB.*Job_date;

  // LCL.Production Type = CND.Schedule
  LCL.Production_Type = 'S';

  //?Determine Production Type
  // IF PAR.Production Date GT JOB.*Job date
  IF PAR.Production_Date > JOB.*Job_date;

  // LCL.Production Type = CND.Plan
  LCL.Production_Type = 'P';

  ENDIF;

  //?Pieces Vs. Weight
  CASE;

  // IF LCL.Piece Count Item is yes
  IF LCL.Piece_Count_Item = 'Y';

  // Calc Avg Pieces Wgt
  WRK.PS_Avg_Piece_Wgt = LCL.Unit_Weight / ( LCL.Pieces_Per_Bag * LCL.Bags_Per_Unit 'H' );

  // Pieces
  LCL.Pieces_Scheduled = ( PAR.PS_Adjustment_Quantity * LCL.Pieces_Per_Bag 'H' )
  * LCL.Bags_Per_Unit 'H';

  // LCL.Weight Scheduled = LCL.Pieces Scheduled * WRK.PS Avg Piece Wgt *Rounded
  LCL.Weight_Scheduled = LCL.Pieces_Scheduled * WRK.PS_Avg_Piece_Wgt 'H';

  //?Pieces Vs. Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Weight Scheduled = PAR.PS Adjustment Quantity * LCL.Unit Weight *Rounded
  LCL.Weight_Scheduled = PAR.PS_Adjustment_Quantity * LCL.Unit_Weight 'H';

  // LCL.Pieces Scheduled = CON.*ZERO
  LCL.Pieces_Scheduled = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(BPS Rpl Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1941028;
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Pieces_Scheduled);
  PARAMETER(LCL.Weight_Scheduled);
  {
   //?USER: Processing if Data record not found

   // PAR.PS Weight Standard = PAR.Weight Scheduled
   PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

   // PAR.PS Pieces Standard = PAR.Pieces Scheduled
   PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Standard is NE Zeros
   IF PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   // Avg Piece Weight
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

   //?FP1054 RMC 5/14/09 make positive if negative
   CASE;

   // IF PAR.PS Avg Piece Wgt is LT Zero
   IF PAR.PS_Avg_Piece_Wgt < *ZERO;

   // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

   ENDIF;

   ENDIF;

   CASE;

   // IF PAR.PS Weight Standard is NE Zero
   IF PAR.PS_Weight_Standard <> *ZERO;

   // OR PAR.PS Pieces Standard is NE Zeros
   OR PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Production_Type);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Available_Ship_Date);
   PARAMETER(PAR.PS_Weight_Planned_Prod);
   PARAMETER(PAR.PS_Pieces_Planned_Prod);
   PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
   PARAMETER(PAR.PS_Avg_Piece_Wgt);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Standard);
   PARAMETER(PAR.PS_Pieces_Standard);
   PARAMETER(PAR.PS_Weight_Converted);
   PARAMETER(PAR.PS_Pieces_Converted);
   PARAMETER(PAR.PS_Weight_Shipping_Adj);
   PARAMETER(PAR.PS_Pieces_Shipping_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Adj);
   PARAMETER(PAR.PS_Pieces_Prod_Adj);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Unit_Weight);
   PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.PS_Pieces_Unused_2);
   PARAMETER(PAR.PS_Weight_Unused_3);
   PARAMETER(PAR.PS_Pieces_Unused_3);
   PARAMETER(PAR.PS_Weight_Unused_4);
   PARAMETER(PAR.PS_Pieces_Unused_4);
   PARAMETER(PAR.PS_Weight_Unused_5);
   PARAMETER(PAR.PS_Pieces_Unused_5);
   PARAMETER(PAR.PS_Weight_Unused_6);
   PARAMETER(PAR.PS_Pieces_Unused_6);
   PARAMETER(PAR.PS_Item_Id);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.PS_Lock_Status);
   PARAMETER(PAR.PS_Export_Domestic);
   PARAMETER(PAR.PS_Print_On_Schedule);
   PARAMETER(PAR.PS_Piece_Count_Item);
   PARAMETER(PAR.PS_Unused_Sts_1);
   PARAMETER(PAR.PS_Unused_Sts_2);
   PARAMETER(PAR.PS_Unused_Sts_3);
   PARAMETER(PAR.PS_Unused_Sts_4);
   PARAMETER(PAR.PS_Item_Sched_Need_Sts);
   PARAMETER(PAR.PS_Production_Warehouse);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Pieces_Ordered);
   PARAMETER(PAR.PS_Weight_FC_Adjusted);
   PARAMETER(PAR.PS_Pieces_FC_Adjusted);
   PARAMETER(PAR.PS_Weight_FX_Adjusted);
   PARAMETER(PAR.PS_Pieces_FX_Adjusted);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.PS_Pieces_Sched_Shipment);
   PARAMETER(PAR.PS_Weight_Available_Prod);
   PARAMETER(PAR.PS_Pieces_Available_Prod);
   PARAMETER(PAR.PS_Weight_Production_Need);
   PARAMETER(PAR.PS_Pieces_Production_Need);
   PARAMETER(PAR.PS_Weight_Fab_Needs);
   PARAMETER(PAR.PS_Pieces_Fab_Needs);
   PARAMETER(PAR.PS_Weight_Sched_Prod);
   PARAMETER(PAR.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.PS_Weight_Sched_Need);
   PARAMETER(PAR.PS_Pieces_Sched_Need);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Primal_Group_Code);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(WRK.Description_Line_One);
    PARAMETER(WRK.UOM_Primary);
    PARAMETER(WRK.Unit_Weight);
    PARAMETER(DB1.Item_Structure_Class_Code);
    PARAMETER(DB1.Item_Structure_Group_Code);
    PARAMETER(DB1.Item_Structure_Type_Code);
    PARAMETER(WRK.Item_Type_Code);
    PARAMETER(WRK.Default_Warehouse);
    PARAMETER(WRK.Fresh_Chilling_Time);
    PARAMETER(WRK.Base_Conv_Loss_Item);
    PARAMETER(WRK.Variety_Rendered_Cut);
    PARAMETER(WRK.Credit_Item_Status);
    PARAMETER(WRK.Std_Weight_Head_Var_Ren);
    PARAMETER(WRK.Pieces_Per_Head);
    PARAMETER(DB1.Department_Code);
    PARAMETER(WRK.Group_for_Packaging);
    PARAMETER(WRK.Seconds_Item);
    PARAMETER(DB1.PS_Piece_Count_Item);
    PARAMETER(WRK.Pieces_Per_Bag);
    PARAMETER(WRK.Bags_Per_Unit);
    PARAMETER(DB1.PS_Export_Domestic);
    PARAMETER(DB1.PS_Print_On_Schedule);
    PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
    PARAMETER(WRK.Fresh_Sched_As_Ordered);
    PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
    PARAMETER(DB1.Primal_Group_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Warehouse_Type);
    PARAMETER(WRK.Trans_Contol_AS400_Plant);
    PARAMETER(WRK.Warehouse_Location);
    PARAMETER(WRK.Warehouse_Std_Chill_Time);
    PARAMETER(WRK.Warehouse_Chill_Time);
    PARAMETER(DB1.PS_Item_Id);
    {
     //?Execute internal function

     EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?Execute internal function

      EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
      PARAMETER(PAR.Company_Number);
      PARAMETER(PAR.Item_Code);
      PARAMETER(PAR.Description_Line_One);
      PARAMETER(PAR.UOM_Primary);
      PARAMETER(PAR.Unit_Weight);
      PARAMETER(PAR.Item_Structure_Class_Code);
      PARAMETER(PAR.Item_Structure_Group_Code);
      PARAMETER(PAR.Item_Structure_Type_Code);
      PARAMETER(PAR.Item_Type_Code);
      PARAMETER(PAR.Default_Warehouse);
      PARAMETER(PAR.Fresh_Chilling_Time);
      PARAMETER(PAR.Base_Conv_Loss_Item);
      PARAMETER(PAR.Variety_Rendered_Cut);
      PARAMETER(PAR.Credit_Item_Status);
      PARAMETER(PAR.Std_Weight_Head_Var_Ren);
      PARAMETER(PAR.Pieces_Per_Head);
      PARAMETER(PAR.Department_Code);
      PARAMETER(PAR.Group_for_Packaging);
      PARAMETER(PAR.Seconds_Item);
      PARAMETER(PAR.Piece_Count_Item);
      PARAMETER(PAR.Pieces_Per_Bag);
      PARAMETER(PAR.Bags_Per_Unit);
      PARAMETER(PAR.Export_Domestic);
      PARAMETER(PAR.Print_On_Schedule);
      PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
      PARAMETER(PAR.Fresh_Sched_As_Ordered);
      PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
      PARAMETER(PAR.Primal_Group_Code);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

      EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
      PARAMETER(PAR.Warehouse_Code);
      PARAMETER(PAR.Warehouse_Type);
      PARAMETER(PAR.Trans_Contol_AS400_Plant);
      PARAMETER(PAR.Warehouse_Location);
      PARAMETER(PAR.Warehouse_Std_Chill_Time);
      PARAMETER(PAR.Warehouse_Chill_Time);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

     }

     EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.PS_Item_Id);
     {
      //?Execute internal function

      CASE;

      // IF PAR.Item Type Code is Raw Materials
      IF PAR.Item_Type_Code = 'RM';

      // PAR.PS Item Identification = CND.RM Base
      PAR.PS_Item_Id = 'RMB';

      // IF *OTHERWISE
      IF *OTHERWISE;

      CASE;

      // IF PAR.Seconds Item is Yes
      IF PAR.Seconds_Item = 'Y';

      // PAR.PS Item Identification = CND.FG Seconds
      PAR.PS_Item_Id = 'FSC';

      // IF *OTHERWISE
      IF *OTHERWISE;

      CASE;

      // IF PAR.Variety/Rendered/Cut is Variety
      IF PAR.Variety_Rendered_Cut = 'V';

      // PAR.PS Item Identification = CND.FG Variety
      PAR.PS_Item_Id = 'FVR';

      // IF PAR.Variety/Rendered/Cut is Rendered
      IF PAR.Variety_Rendered_Cut = 'R';

      // PAR.PS Item Identification = CND.FG Rendered
      PAR.PS_Item_Id = 'FRD';

      // IF PAR.Variety/Rendered/Cut is Cut
      IF PAR.Variety_Rendered_Cut = 'C';

      //?Base/Converted/Fabricated
      CASE;

      // IF PAR.Credit Item Status is yes
      IF PAR.Credit_Item_Status = 'Y';

      //?Setup Base/Converted/Fabricated Credit
      CASE;

      // IF PAR.Converted/Base Item is Base
      IF PAR.Base_Conv_Loss_Item = 'B';

      // PAR.PS Item Identification = CND.FG Base Credit
      PAR.PS_Item_Id = 'FBC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Converted
      IF PAR.Base_Conv_Loss_Item = 'C';

      // PAR.PS Item Identification = CND.FG Converted Credit
      PAR.PS_Item_Id = 'FCC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Fabricated
      IF PAR.Base_Conv_Loss_Item = 'F';

      // PAR.PS Item Identification = CND.FG Fabricated Credit
      PAR.PS_Item_Id = 'FFC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Loss
      IF PAR.Base_Conv_Loss_Item = 'L';

      // PAR.PS Item Identification = CND.FG Loss Credit
      PAR.PS_Item_Id = 'FLC';

      ENDIF;

      //?Base/Converted/Fabricated
      // IF *OTHERWISE
      IF *OTHERWISE;

      //?Setup Base/Converted/Fabricated
      CASE;

      // IF PAR.Converted/Base Item is Base
      IF PAR.Base_Conv_Loss_Item = 'B';

      // PAR.PS Item Identification = CND.FG Base
      PAR.PS_Item_Id = 'FGB';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Converted
      IF PAR.Base_Conv_Loss_Item = 'C';

      // PAR.PS Item Identification = CND.FG Converted
      PAR.PS_Item_Id = 'FCV';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Fabricated
      IF PAR.Base_Conv_Loss_Item = 'F';

      // PAR.PS Item Identification = CND.FG Fabricated
      PAR.PS_Item_Id = 'FFB';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Loss
      IF PAR.Base_Conv_Loss_Item = 'L';

      // PAR.PS Item Identification = CND.FG Loss
      PAR.PS_Item_Id = 'FLS';

      ENDIF;

      ENDIF;

      ENDIF;

      ENDIF;

      ENDIF;

     }

    }

    //?FP1054 Output PS Prod Warehouse
    EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Production_Warehouse);
    PARAMETER(LCL.Accounting_Company);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?Available Ship Date
    CASE;

    // IF WRK.Warehouse Std Chill Time is yes
    IF WRK.Warehouse_Std_Chill_Time = 'Y';

    EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Date);
    PARAMETER(WRK.Warehouse_Chill_Time);
    PARAMETER(DB1.PS_Available_Ship_Date);
    {
     //?USER: Initialize routine

     // WRK.Count USR = CON.*ZERO
     WRK.Count_USR = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF WRK.Count USR EQ PAR.Chilling Time
     IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

     // PAR.PS Available Ship Date = DB1.Post to G/L Date
     PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

     QUIT;

     ENDIF;

     //?Skip Saturday
     CASE;

     // IF DB1.Day of Week is Saturday
     IF DB1.Day_of_Week = '7';

     //?Skip Saturday
     // IF *OTHERWISE
     IF *OTHERWISE;

     // WRK.Count USR = WRK.Count USR + CON.1
     WRK.Count_USR = WRK.Count_USR + 1;

     ENDIF;

    }

    //?Available Ship Date
    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Date);
    PARAMETER(WRK.Fresh_Chilling_Time);
    PARAMETER(DB1.PS_Available_Ship_Date);
    {
     //?USER: Initialize routine

     // WRK.Count USR = CON.*ZERO
     WRK.Count_USR = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF WRK.Count USR EQ PAR.Chilling Time
     IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

     // PAR.PS Available Ship Date = DB1.Post to G/L Date
     PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

     QUIT;

     ENDIF;

     //?Skip Saturday
     CASE;

     // IF DB1.Day of Week is Saturday
     IF DB1.Day_of_Week = '7';

     //?Skip Saturday
     // IF *OTHERWISE
     IF *OTHERWISE;

     // WRK.Count USR = WRK.Count USR + CON.1
     WRK.Count_USR = WRK.Count_USR + 1;

     ENDIF;

    }

    ENDIF;

    //?Average Piece Weight
    CASE;

    // IF PAR.PS Pieces Planned Prod is GT Zero
    IF PAR.PS_Pieces_Planned_Prod > *ZERO;

    // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
    DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

    ENDIF;

    EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // DB1.PS Lock Status = CND.NOT LOCKED
    DB1.PS_Lock_Status = 'N';

   }

   ENDIF;

   //?USER: Process Data record

   // PAR.PS Weight Standard = PAR.Weight Scheduled
   PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

   // PAR.PS Pieces Standard = PAR.Pieces Scheduled
   PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Standard is NE Zeros
   IF PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   // Avg Piece Weight
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

   //?FP1054 RMC 5/14/09 make positive if negative
   CASE;

   // IF PAR.PS Avg Piece Wgt is LT Zero
   IF PAR.PS_Avg_Piece_Wgt < *ZERO;

   // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

   ENDIF;

   ENDIF;

   EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.PS_Avg_Piece_Wgt);
   PARAMETER(PAR.PS_Weight_Standard);
   PARAMETER(PAR.PS_Pieces_Standard);
  }

 }

}


// RCD.Qty Prod Adjusted 5 USR = RCD.Qty Sched Ord 5 USR
RCD.Qty_Prod_Adjusted_5_USR = RCD.Qty_Sched_Ord_5_USR;

ENDIF;

CASE;

// IF RCD.Qty Sched Ord 6 USR NE RCD.Qty Prod Adjusted 6 USR
IF RCD.Qty_Sched_Ord_6_USR <> RCD.Qty_Prod_Adjusted_6_USR;

EXECUTE FUNCTION(Rtv Crt/Chg Prd Adj   RT) TYPE(RTVOBJ) FILE(PDI9CPP)           AC2085029;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_6);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.PS_Adjustment_Type);
PARAMETER(PAR.PS_Adjustment_Number);
PARAMETER(RCD.Qty_Sched_Ord_6_USR);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(Crt Schedule Override CR) TYPE(CRTOBJ) FILE(PDI9CPP)           AC1917552;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Adjustment_Type);
 PARAMETER(PAR.PS_Adjustment_Number);
 PARAMETER(PAR.PS_Adjustment_Quantity);
 PARAMETER('O');
 PARAMETER(*ZERO);
 PARAMETER(LCL.EDI_Status_1);
 PARAMETER(LCL.EDI_Status_2);
 PARAMETER(LCL.EDI_Status_3);
 PARAMETER('A');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(RTV Pces/Bag/Unit Chil RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1538895;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Description_Line_One);
  PARAMETER(LCL.Unit_Weight);
  PARAMETER(LCL.Fresh_Chilling_Time);
  PARAMETER(LCL.Piece_Count_Item);
  PARAMETER(LCL.Pieces_Per_Bag);
  PARAMETER(LCL.Bags_Per_Unit);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Determine Production Type
  CASE;

  // IF PAR.Production Date EQ JOB.*Job date
  IF PAR.Production_Date = JOB.*Job_date;

  // LCL.Production Type = CND.Schedule
  LCL.Production_Type = 'S';

  //?8/25/17 dont chk this. make prod date=job date as the "S" rcd always
  //?Determine Production Type
  // IF PAR.Production Date GT JOB.*Job date
  IF PAR.Production_Date > JOB.*Job_date;

  // LCL.Production Type = CND.Plan
  LCL.Production_Type = 'P';

  ENDIF;

  //?Pieces Vs. Weight
  CASE;

  // IF LCL.Piece Count Item is yes
  IF LCL.Piece_Count_Item = 'Y';

  // Calc Avg Pieces Wgt
  WRK.PS_Avg_Piece_Wgt = LCL.Unit_Weight / ( LCL.Pieces_Per_Bag * LCL.Bags_Per_Unit 'H' );

  // Pieces
  LCL.Pieces_Scheduled = ( PAR.PS_Adjustment_Quantity * LCL.Pieces_Per_Bag 'H' )
  * LCL.Bags_Per_Unit 'H';

  // LCL.Weight Scheduled = LCL.Pieces Scheduled * WRK.PS Avg Piece Wgt *Rounded
  LCL.Weight_Scheduled = LCL.Pieces_Scheduled * WRK.PS_Avg_Piece_Wgt 'H';

  //?Pieces Vs. Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Weight Scheduled = PAR.PS Adjustment Quantity * LCL.Unit Weight *Rounded
  LCL.Weight_Scheduled = PAR.PS_Adjustment_Quantity * LCL.Unit_Weight 'H';

  // LCL.Pieces Scheduled = CON.*ZERO
  LCL.Pieces_Scheduled = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(BPS Rpl Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1941028;
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Pieces_Scheduled);
  PARAMETER(LCL.Weight_Scheduled);
  {
   //?USER: Processing if Data record not found

   // PAR.PS Weight Standard = PAR.Weight Scheduled
   PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

   // PAR.PS Pieces Standard = PAR.Pieces Scheduled
   PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Standard is NE Zeros
   IF PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   // Avg Piece Weight
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

   //?FP1054 RMC 5/14/09 make positive if negative
   CASE;

   // IF PAR.PS Avg Piece Wgt is LT Zero
   IF PAR.PS_Avg_Piece_Wgt < *ZERO;

   // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

   ENDIF;

   ENDIF;

   CASE;

   // IF PAR.PS Weight Standard is NE Zero
   IF PAR.PS_Weight_Standard <> *ZERO;

   // OR PAR.PS Pieces Standard is NE Zeros
   OR PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Production_Type);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Available_Ship_Date);
   PARAMETER(PAR.PS_Weight_Planned_Prod);
   PARAMETER(PAR.PS_Pieces_Planned_Prod);
   PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
   PARAMETER(PAR.PS_Avg_Piece_Wgt);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Standard);
   PARAMETER(PAR.PS_Pieces_Standard);
   PARAMETER(PAR.PS_Weight_Converted);
   PARAMETER(PAR.PS_Pieces_Converted);
   PARAMETER(PAR.PS_Weight_Shipping_Adj);
   PARAMETER(PAR.PS_Pieces_Shipping_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Adj);
   PARAMETER(PAR.PS_Pieces_Prod_Adj);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Unit_Weight);
   PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.PS_Pieces_Unused_2);
   PARAMETER(PAR.PS_Weight_Unused_3);
   PARAMETER(PAR.PS_Pieces_Unused_3);
   PARAMETER(PAR.PS_Weight_Unused_4);
   PARAMETER(PAR.PS_Pieces_Unused_4);
   PARAMETER(PAR.PS_Weight_Unused_5);
   PARAMETER(PAR.PS_Pieces_Unused_5);
   PARAMETER(PAR.PS_Weight_Unused_6);
   PARAMETER(PAR.PS_Pieces_Unused_6);
   PARAMETER(PAR.PS_Item_Id);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.PS_Lock_Status);
   PARAMETER(PAR.PS_Export_Domestic);
   PARAMETER(PAR.PS_Print_On_Schedule);
   PARAMETER(PAR.PS_Piece_Count_Item);
   PARAMETER(PAR.PS_Unused_Sts_1);
   PARAMETER(PAR.PS_Unused_Sts_2);
   PARAMETER(PAR.PS_Unused_Sts_3);
   PARAMETER(PAR.PS_Unused_Sts_4);
   PARAMETER(PAR.PS_Item_Sched_Need_Sts);
   PARAMETER(PAR.PS_Production_Warehouse);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Pieces_Ordered);
   PARAMETER(PAR.PS_Weight_FC_Adjusted);
   PARAMETER(PAR.PS_Pieces_FC_Adjusted);
   PARAMETER(PAR.PS_Weight_FX_Adjusted);
   PARAMETER(PAR.PS_Pieces_FX_Adjusted);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.PS_Pieces_Sched_Shipment);
   PARAMETER(PAR.PS_Weight_Available_Prod);
   PARAMETER(PAR.PS_Pieces_Available_Prod);
   PARAMETER(PAR.PS_Weight_Production_Need);
   PARAMETER(PAR.PS_Pieces_Production_Need);
   PARAMETER(PAR.PS_Weight_Fab_Needs);
   PARAMETER(PAR.PS_Pieces_Fab_Needs);
   PARAMETER(PAR.PS_Weight_Sched_Prod);
   PARAMETER(PAR.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.PS_Weight_Sched_Need);
   PARAMETER(PAR.PS_Pieces_Sched_Need);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Primal_Group_Code);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(WRK.Description_Line_One);
    PARAMETER(WRK.UOM_Primary);
    PARAMETER(WRK.Unit_Weight);
    PARAMETER(DB1.Item_Structure_Class_Code);
    PARAMETER(DB1.Item_Structure_Group_Code);
    PARAMETER(DB1.Item_Structure_Type_Code);
    PARAMETER(WRK.Item_Type_Code);
    PARAMETER(WRK.Default_Warehouse);
    PARAMETER(WRK.Fresh_Chilling_Time);
    PARAMETER(WRK.Base_Conv_Loss_Item);
    PARAMETER(WRK.Variety_Rendered_Cut);
    PARAMETER(WRK.Credit_Item_Status);
    PARAMETER(WRK.Std_Weight_Head_Var_Ren);
    PARAMETER(WRK.Pieces_Per_Head);
    PARAMETER(DB1.Department_Code);
    PARAMETER(WRK.Group_for_Packaging);
    PARAMETER(WRK.Seconds_Item);
    PARAMETER(DB1.PS_Piece_Count_Item);
    PARAMETER(WRK.Pieces_Per_Bag);
    PARAMETER(WRK.Bags_Per_Unit);
    PARAMETER(DB1.PS_Export_Domestic);
    PARAMETER(DB1.PS_Print_On_Schedule);
    PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
    PARAMETER(WRK.Fresh_Sched_As_Ordered);
    PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
    PARAMETER(DB1.Primal_Group_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Warehouse_Type);
    PARAMETER(WRK.Trans_Contol_AS400_Plant);
    PARAMETER(WRK.Warehouse_Location);
    PARAMETER(WRK.Warehouse_Std_Chill_Time);
    PARAMETER(WRK.Warehouse_Chill_Time);
    PARAMETER(DB1.PS_Item_Id);
    {
     //?Execute internal function

     EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?Execute internal function

      EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
      PARAMETER(PAR.Company_Number);
      PARAMETER(PAR.Item_Code);
      PARAMETER(PAR.Description_Line_One);
      PARAMETER(PAR.UOM_Primary);
      PARAMETER(PAR.Unit_Weight);
      PARAMETER(PAR.Item_Structure_Class_Code);
      PARAMETER(PAR.Item_Structure_Group_Code);
      PARAMETER(PAR.Item_Structure_Type_Code);
      PARAMETER(PAR.Item_Type_Code);
      PARAMETER(PAR.Default_Warehouse);
      PARAMETER(PAR.Fresh_Chilling_Time);
      PARAMETER(PAR.Base_Conv_Loss_Item);
      PARAMETER(PAR.Variety_Rendered_Cut);
      PARAMETER(PAR.Credit_Item_Status);
      PARAMETER(PAR.Std_Weight_Head_Var_Ren);
      PARAMETER(PAR.Pieces_Per_Head);
      PARAMETER(PAR.Department_Code);
      PARAMETER(PAR.Group_for_Packaging);
      PARAMETER(PAR.Seconds_Item);
      PARAMETER(PAR.Piece_Count_Item);
      PARAMETER(PAR.Pieces_Per_Bag);
      PARAMETER(PAR.Bags_Per_Unit);
      PARAMETER(PAR.Export_Domestic);
      PARAMETER(PAR.Print_On_Schedule);
      PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
      PARAMETER(PAR.Fresh_Sched_As_Ordered);
      PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
      PARAMETER(PAR.Primal_Group_Code);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

      EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
      PARAMETER(PAR.Warehouse_Code);
      PARAMETER(PAR.Warehouse_Type);
      PARAMETER(PAR.Trans_Contol_AS400_Plant);
      PARAMETER(PAR.Warehouse_Location);
      PARAMETER(PAR.Warehouse_Std_Chill_Time);
      PARAMETER(PAR.Warehouse_Chill_Time);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

     }

     EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.PS_Item_Id);
     {
      //?Execute internal function

      CASE;

      // IF PAR.Item Type Code is Raw Materials
      IF PAR.Item_Type_Code = 'RM';

      // PAR.PS Item Identification = CND.RM Base
      PAR.PS_Item_Id = 'RMB';

      // IF *OTHERWISE
      IF *OTHERWISE;

      CASE;

      // IF PAR.Seconds Item is Yes
      IF PAR.Seconds_Item = 'Y';

      // PAR.PS Item Identification = CND.FG Seconds
      PAR.PS_Item_Id = 'FSC';

      // IF *OTHERWISE
      IF *OTHERWISE;

      CASE;

      // IF PAR.Variety/Rendered/Cut is Variety
      IF PAR.Variety_Rendered_Cut = 'V';

      // PAR.PS Item Identification = CND.FG Variety
      PAR.PS_Item_Id = 'FVR';

      // IF PAR.Variety/Rendered/Cut is Rendered
      IF PAR.Variety_Rendered_Cut = 'R';

      // PAR.PS Item Identification = CND.FG Rendered
      PAR.PS_Item_Id = 'FRD';

      // IF PAR.Variety/Rendered/Cut is Cut
      IF PAR.Variety_Rendered_Cut = 'C';

      //?Base/Converted/Fabricated
      CASE;

      // IF PAR.Credit Item Status is yes
      IF PAR.Credit_Item_Status = 'Y';

      //?Setup Base/Converted/Fabricated Credit
      CASE;

      // IF PAR.Converted/Base Item is Base
      IF PAR.Base_Conv_Loss_Item = 'B';

      // PAR.PS Item Identification = CND.FG Base Credit
      PAR.PS_Item_Id = 'FBC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Converted
      IF PAR.Base_Conv_Loss_Item = 'C';

      // PAR.PS Item Identification = CND.FG Converted Credit
      PAR.PS_Item_Id = 'FCC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Fabricated
      IF PAR.Base_Conv_Loss_Item = 'F';

      // PAR.PS Item Identification = CND.FG Fabricated Credit
      PAR.PS_Item_Id = 'FFC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Loss
      IF PAR.Base_Conv_Loss_Item = 'L';

      // PAR.PS Item Identification = CND.FG Loss Credit
      PAR.PS_Item_Id = 'FLC';

      ENDIF;

      //?Base/Converted/Fabricated
      // IF *OTHERWISE
      IF *OTHERWISE;

      //?Setup Base/Converted/Fabricated
      CASE;

      // IF PAR.Converted/Base Item is Base
      IF PAR.Base_Conv_Loss_Item = 'B';

      // PAR.PS Item Identification = CND.FG Base
      PAR.PS_Item_Id = 'FGB';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Converted
      IF PAR.Base_Conv_Loss_Item = 'C';

      // PAR.PS Item Identification = CND.FG Converted
      PAR.PS_Item_Id = 'FCV';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Fabricated
      IF PAR.Base_Conv_Loss_Item = 'F';

      // PAR.PS Item Identification = CND.FG Fabricated
      PAR.PS_Item_Id = 'FFB';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Loss
      IF PAR.Base_Conv_Loss_Item = 'L';

      // PAR.PS Item Identification = CND.FG Loss
      PAR.PS_Item_Id = 'FLS';

      ENDIF;

      ENDIF;

      ENDIF;

      ENDIF;

      ENDIF;

     }

    }

    //?FP1054 Output PS Prod Warehouse
    EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Production_Warehouse);
    PARAMETER(LCL.Accounting_Company);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?Available Ship Date
    CASE;

    // IF WRK.Warehouse Std Chill Time is yes
    IF WRK.Warehouse_Std_Chill_Time = 'Y';

    EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Date);
    PARAMETER(WRK.Warehouse_Chill_Time);
    PARAMETER(DB1.PS_Available_Ship_Date);
    {
     //?USER: Initialize routine

     // WRK.Count USR = CON.*ZERO
     WRK.Count_USR = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF WRK.Count USR EQ PAR.Chilling Time
     IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

     // PAR.PS Available Ship Date = DB1.Post to G/L Date
     PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

     QUIT;

     ENDIF;

     //?Skip Saturday
     CASE;

     // IF DB1.Day of Week is Saturday
     IF DB1.Day_of_Week = '7';

     //?Skip Saturday
     // IF *OTHERWISE
     IF *OTHERWISE;

     // WRK.Count USR = WRK.Count USR + CON.1
     WRK.Count_USR = WRK.Count_USR + 1;

     ENDIF;

    }

    //?Available Ship Date
    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Date);
    PARAMETER(WRK.Fresh_Chilling_Time);
    PARAMETER(DB1.PS_Available_Ship_Date);
    {
     //?USER: Initialize routine

     // WRK.Count USR = CON.*ZERO
     WRK.Count_USR = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF WRK.Count USR EQ PAR.Chilling Time
     IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

     // PAR.PS Available Ship Date = DB1.Post to G/L Date
     PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

     QUIT;

     ENDIF;

     //?Skip Saturday
     CASE;

     // IF DB1.Day of Week is Saturday
     IF DB1.Day_of_Week = '7';

     //?Skip Saturday
     // IF *OTHERWISE
     IF *OTHERWISE;

     // WRK.Count USR = WRK.Count USR + CON.1
     WRK.Count_USR = WRK.Count_USR + 1;

     ENDIF;

    }

    ENDIF;

    //?Average Piece Weight
    CASE;

    // IF PAR.PS Pieces Planned Prod is GT Zero
    IF PAR.PS_Pieces_Planned_Prod > *ZERO;

    // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
    DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

    ENDIF;

    EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // DB1.PS Lock Status = CND.NOT LOCKED
    DB1.PS_Lock_Status = 'N';

   }

   ENDIF;

   //?USER: Process Data record

   // PAR.PS Weight Standard = PAR.Weight Scheduled
   PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

   // PAR.PS Pieces Standard = PAR.Pieces Scheduled
   PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Standard is NE Zeros
   IF PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   // Avg Piece Weight
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

   //?FP1054 RMC 5/14/09 make positive if negative
   CASE;

   // IF PAR.PS Avg Piece Wgt is LT Zero
   IF PAR.PS_Avg_Piece_Wgt < *ZERO;

   // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

   ENDIF;

   ENDIF;

   EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.PS_Avg_Piece_Wgt);
   PARAMETER(PAR.PS_Weight_Standard);
   PARAMETER(PAR.PS_Pieces_Standard);
  }

 }

 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Standard Override CH) TYPE(CHGOBJ) FILE(PDI9CPP)           AC1917553;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Adjustment_Type);
 PARAMETER(DB1.PS_Adjustment_Number);
 PARAMETER(PAR.PS_Adjustment_Quantity);
 PARAMETER(DB1.PS_Adjustment_Status);
 PARAMETER(DB1.PS_Consumed_Item_Code);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Record_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(RTV Pces/Bag/Unit Chil RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1538895;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Description_Line_One);
  PARAMETER(LCL.Unit_Weight);
  PARAMETER(LCL.Fresh_Chilling_Time);
  PARAMETER(LCL.Piece_Count_Item);
  PARAMETER(LCL.Pieces_Per_Bag);
  PARAMETER(LCL.Bags_Per_Unit);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Determine Production Type
  CASE;

  // IF PAR.Production Date EQ JOB.*Job date
  IF PAR.Production_Date = JOB.*Job_date;

  // LCL.Production Type = CND.Schedule
  LCL.Production_Type = 'S';

  //?Determine Production Type
  // IF PAR.Production Date GT JOB.*Job date
  IF PAR.Production_Date > JOB.*Job_date;

  // LCL.Production Type = CND.Plan
  LCL.Production_Type = 'P';

  ENDIF;

  //?Pieces Vs. Weight
  CASE;

  // IF LCL.Piece Count Item is yes
  IF LCL.Piece_Count_Item = 'Y';

  // Calc Avg Pieces Wgt
  WRK.PS_Avg_Piece_Wgt = LCL.Unit_Weight / ( LCL.Pieces_Per_Bag * LCL.Bags_Per_Unit 'H' );

  // Pieces
  LCL.Pieces_Scheduled = ( PAR.PS_Adjustment_Quantity * LCL.Pieces_Per_Bag 'H' )
  * LCL.Bags_Per_Unit 'H';

  // LCL.Weight Scheduled = LCL.Pieces Scheduled * WRK.PS Avg Piece Wgt *Rounded
  LCL.Weight_Scheduled = LCL.Pieces_Scheduled * WRK.PS_Avg_Piece_Wgt 'H';

  //?Pieces Vs. Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Weight Scheduled = PAR.PS Adjustment Quantity * LCL.Unit Weight *Rounded
  LCL.Weight_Scheduled = PAR.PS_Adjustment_Quantity * LCL.Unit_Weight 'H';

  // LCL.Pieces Scheduled = CON.*ZERO
  LCL.Pieces_Scheduled = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(BPS Rpl Pcs/Wgt Std   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1941028;
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Production_Type);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Pieces_Scheduled);
  PARAMETER(LCL.Weight_Scheduled);
  {
   //?USER: Processing if Data record not found

   // PAR.PS Weight Standard = PAR.Weight Scheduled
   PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

   // PAR.PS Pieces Standard = PAR.Pieces Scheduled
   PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Standard is NE Zeros
   IF PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   // Avg Piece Weight
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

   //?FP1054 RMC 5/14/09 make positive if negative
   CASE;

   // IF PAR.PS Avg Piece Wgt is LT Zero
   IF PAR.PS_Avg_Piece_Wgt < *ZERO;

   // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

   ENDIF;

   ENDIF;

   CASE;

   // IF PAR.PS Weight Standard is NE Zero
   IF PAR.PS_Weight_Standard <> *ZERO;

   // OR PAR.PS Pieces Standard is NE Zeros
   OR PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   EXECUTE FUNCTION(UPS Crt Prod Detail   CR) TYPE(CRTOBJ) FILE(PDI8CPP)           AC1309512;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Production_Type);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Available_Ship_Date);
   PARAMETER(PAR.PS_Weight_Planned_Prod);
   PARAMETER(PAR.PS_Pieces_Planned_Prod);
   PARAMETER(PAR.PS_Pct_of_Carcass_Yield);
   PARAMETER(PAR.PS_Avg_Piece_Wgt);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Standard);
   PARAMETER(PAR.PS_Pieces_Standard);
   PARAMETER(PAR.PS_Weight_Converted);
   PARAMETER(PAR.PS_Pieces_Converted);
   PARAMETER(PAR.PS_Weight_Shipping_Adj);
   PARAMETER(PAR.PS_Pieces_Shipping_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Adj);
   PARAMETER(PAR.PS_Pieces_Prod_Adj);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Unit_Weight);
   PARAMETER(PAR.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(PAR.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(PAR.PS_Pieces_Unused_2);
   PARAMETER(PAR.PS_Weight_Unused_3);
   PARAMETER(PAR.PS_Pieces_Unused_3);
   PARAMETER(PAR.PS_Weight_Unused_4);
   PARAMETER(PAR.PS_Pieces_Unused_4);
   PARAMETER(PAR.PS_Weight_Unused_5);
   PARAMETER(PAR.PS_Pieces_Unused_5);
   PARAMETER(PAR.PS_Weight_Unused_6);
   PARAMETER(PAR.PS_Pieces_Unused_6);
   PARAMETER(PAR.PS_Item_Id);
   PARAMETER(PAR.Warehouse_Type);
   PARAMETER(PAR.PS_Lock_Status);
   PARAMETER(PAR.PS_Export_Domestic);
   PARAMETER(PAR.PS_Print_On_Schedule);
   PARAMETER(PAR.PS_Piece_Count_Item);
   PARAMETER(PAR.PS_Unused_Sts_1);
   PARAMETER(PAR.PS_Unused_Sts_2);
   PARAMETER(PAR.PS_Unused_Sts_3);
   PARAMETER(PAR.PS_Unused_Sts_4);
   PARAMETER(PAR.PS_Item_Sched_Need_Sts);
   PARAMETER(PAR.PS_Production_Warehouse);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Pieces_Ordered);
   PARAMETER(PAR.PS_Weight_FC_Adjusted);
   PARAMETER(PAR.PS_Pieces_FC_Adjusted);
   PARAMETER(PAR.PS_Weight_FX_Adjusted);
   PARAMETER(PAR.PS_Pieces_FX_Adjusted);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.PS_Pieces_Sched_Shipment);
   PARAMETER(PAR.PS_Weight_Available_Prod);
   PARAMETER(PAR.PS_Pieces_Available_Prod);
   PARAMETER(PAR.PS_Weight_Production_Need);
   PARAMETER(PAR.PS_Pieces_Production_Need);
   PARAMETER(PAR.PS_Weight_Fab_Needs);
   PARAMETER(PAR.PS_Pieces_Fab_Needs);
   PARAMETER(PAR.PS_Weight_Sched_Prod);
   PARAMETER(PAR.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.PS_Weight_Sched_Need);
   PARAMETER(PAR.PS_Pieces_Sched_Need);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Primal_Group_Code);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(BPS Setup Item Info   IF) TYPE(EXCINTFUN)                      AC1367204;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(WRK.Description_Line_One);
    PARAMETER(WRK.UOM_Primary);
    PARAMETER(WRK.Unit_Weight);
    PARAMETER(DB1.Item_Structure_Class_Code);
    PARAMETER(DB1.Item_Structure_Group_Code);
    PARAMETER(DB1.Item_Structure_Type_Code);
    PARAMETER(WRK.Item_Type_Code);
    PARAMETER(WRK.Default_Warehouse);
    PARAMETER(WRK.Fresh_Chilling_Time);
    PARAMETER(WRK.Base_Conv_Loss_Item);
    PARAMETER(WRK.Variety_Rendered_Cut);
    PARAMETER(WRK.Credit_Item_Status);
    PARAMETER(WRK.Std_Weight_Head_Var_Ren);
    PARAMETER(WRK.Pieces_Per_Head);
    PARAMETER(DB1.Department_Code);
    PARAMETER(WRK.Group_for_Packaging);
    PARAMETER(WRK.Seconds_Item);
    PARAMETER(DB1.PS_Piece_Count_Item);
    PARAMETER(WRK.Pieces_Per_Bag);
    PARAMETER(WRK.Bags_Per_Unit);
    PARAMETER(DB1.PS_Export_Domestic);
    PARAMETER(DB1.PS_Print_On_Schedule);
    PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
    PARAMETER(WRK.Fresh_Sched_As_Ordered);
    PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
    PARAMETER(DB1.Primal_Group_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Warehouse_Type);
    PARAMETER(WRK.Trans_Contol_AS400_Plant);
    PARAMETER(WRK.Warehouse_Location);
    PARAMETER(WRK.Warehouse_Std_Chill_Time);
    PARAMETER(WRK.Warehouse_Chill_Time);
    PARAMETER(DB1.PS_Item_Id);
    {
     //?Execute internal function

     EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Item_Code);
     PARAMETER(PAR.Description_Line_One);
     PARAMETER(PAR.UOM_Primary);
     PARAMETER(PAR.Unit_Weight);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Default_Warehouse);
     PARAMETER(PAR.Fresh_Chilling_Time);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Std_Weight_Head_Var_Ren);
     PARAMETER(PAR.Pieces_Per_Head);
     PARAMETER(PAR.Department_Code);
     PARAMETER(PAR.Group_for_Packaging);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.Piece_Count_Item);
     PARAMETER(PAR.Pieces_Per_Bag);
     PARAMETER(PAR.Bags_Per_Unit);
     PARAMETER(PAR.Export_Domestic);
     PARAMETER(PAR.Print_On_Schedule);
     PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
     PARAMETER(PAR.Fresh_Sched_As_Ordered);
     PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
     PARAMETER(PAR.Primal_Group_Code);
     PARAMETER(PAR.Warehouse_Code);
     PARAMETER(PAR.Warehouse_Type);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     PARAMETER(PAR.Warehouse_Location);
     PARAMETER(PAR.Warehouse_Std_Chill_Time);
     PARAMETER(PAR.Warehouse_Chill_Time);
     {
      //?Execute internal function

      EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
      PARAMETER(PAR.Company_Number);
      PARAMETER(PAR.Item_Code);
      PARAMETER(PAR.Description_Line_One);
      PARAMETER(PAR.UOM_Primary);
      PARAMETER(PAR.Unit_Weight);
      PARAMETER(PAR.Item_Structure_Class_Code);
      PARAMETER(PAR.Item_Structure_Group_Code);
      PARAMETER(PAR.Item_Structure_Type_Code);
      PARAMETER(PAR.Item_Type_Code);
      PARAMETER(PAR.Default_Warehouse);
      PARAMETER(PAR.Fresh_Chilling_Time);
      PARAMETER(PAR.Base_Conv_Loss_Item);
      PARAMETER(PAR.Variety_Rendered_Cut);
      PARAMETER(PAR.Credit_Item_Status);
      PARAMETER(PAR.Std_Weight_Head_Var_Ren);
      PARAMETER(PAR.Pieces_Per_Head);
      PARAMETER(PAR.Department_Code);
      PARAMETER(PAR.Group_for_Packaging);
      PARAMETER(PAR.Seconds_Item);
      PARAMETER(PAR.Piece_Count_Item);
      PARAMETER(PAR.Pieces_Per_Bag);
      PARAMETER(PAR.Bags_Per_Unit);
      PARAMETER(PAR.Export_Domestic);
      PARAMETER(PAR.Print_On_Schedule);
      PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
      PARAMETER(PAR.Fresh_Sched_As_Ordered);
      PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
      PARAMETER(PAR.Primal_Group_Code);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

      EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
      PARAMETER(PAR.Warehouse_Code);
      PARAMETER(PAR.Warehouse_Type);
      PARAMETER(PAR.Trans_Contol_AS400_Plant);
      PARAMETER(PAR.Warehouse_Location);
      PARAMETER(PAR.Warehouse_Std_Chill_Time);
      PARAMETER(PAR.Warehouse_Chill_Time);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

     }

     EXECUTE FUNCTION(BPS Set Up Item Id    IF) TYPE(EXCINTFUN)                      AC1332905;
     PARAMETER(PAR.Item_Type_Code);
     PARAMETER(PAR.Base_Conv_Loss_Item);
     PARAMETER(PAR.Variety_Rendered_Cut);
     PARAMETER(PAR.Credit_Item_Status);
     PARAMETER(PAR.Seconds_Item);
     PARAMETER(PAR.PS_Item_Id);
     {
      //?Execute internal function

      CASE;

      // IF PAR.Item Type Code is Raw Materials
      IF PAR.Item_Type_Code = 'RM';

      // PAR.PS Item Identification = CND.RM Base
      PAR.PS_Item_Id = 'RMB';

      // IF *OTHERWISE
      IF *OTHERWISE;

      CASE;

      // IF PAR.Seconds Item is Yes
      IF PAR.Seconds_Item = 'Y';

      // PAR.PS Item Identification = CND.FG Seconds
      PAR.PS_Item_Id = 'FSC';

      // IF *OTHERWISE
      IF *OTHERWISE;

      CASE;

      // IF PAR.Variety/Rendered/Cut is Variety
      IF PAR.Variety_Rendered_Cut = 'V';

      // PAR.PS Item Identification = CND.FG Variety
      PAR.PS_Item_Id = 'FVR';

      // IF PAR.Variety/Rendered/Cut is Rendered
      IF PAR.Variety_Rendered_Cut = 'R';

      // PAR.PS Item Identification = CND.FG Rendered
      PAR.PS_Item_Id = 'FRD';

      // IF PAR.Variety/Rendered/Cut is Cut
      IF PAR.Variety_Rendered_Cut = 'C';

      //?Base/Converted/Fabricated
      CASE;

      // IF PAR.Credit Item Status is yes
      IF PAR.Credit_Item_Status = 'Y';

      //?Setup Base/Converted/Fabricated Credit
      CASE;

      // IF PAR.Converted/Base Item is Base
      IF PAR.Base_Conv_Loss_Item = 'B';

      // PAR.PS Item Identification = CND.FG Base Credit
      PAR.PS_Item_Id = 'FBC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Converted
      IF PAR.Base_Conv_Loss_Item = 'C';

      // PAR.PS Item Identification = CND.FG Converted Credit
      PAR.PS_Item_Id = 'FCC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Fabricated
      IF PAR.Base_Conv_Loss_Item = 'F';

      // PAR.PS Item Identification = CND.FG Fabricated Credit
      PAR.PS_Item_Id = 'FFC';

      //?Setup Base/Converted/Fabricated Credit
      // IF PAR.Converted/Base Item is Loss
      IF PAR.Base_Conv_Loss_Item = 'L';

      // PAR.PS Item Identification = CND.FG Loss Credit
      PAR.PS_Item_Id = 'FLC';

      ENDIF;

      //?Base/Converted/Fabricated
      // IF *OTHERWISE
      IF *OTHERWISE;

      //?Setup Base/Converted/Fabricated
      CASE;

      // IF PAR.Converted/Base Item is Base
      IF PAR.Base_Conv_Loss_Item = 'B';

      // PAR.PS Item Identification = CND.FG Base
      PAR.PS_Item_Id = 'FGB';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Converted
      IF PAR.Base_Conv_Loss_Item = 'C';

      // PAR.PS Item Identification = CND.FG Converted
      PAR.PS_Item_Id = 'FCV';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Fabricated
      IF PAR.Base_Conv_Loss_Item = 'F';

      // PAR.PS Item Identification = CND.FG Fabricated
      PAR.PS_Item_Id = 'FFB';

      //?Setup Base/Converted/Fabricated
      // IF PAR.Converted/Base Item is Loss
      IF PAR.Base_Conv_Loss_Item = 'L';

      // PAR.PS Item Identification = CND.FG Loss
      PAR.PS_Item_Id = 'FLS';

      ENDIF;

      ENDIF;

      ENDIF;

      ENDIF;

      ENDIF;

     }

    }

    //?FP1054 Output PS Prod Warehouse
    EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.PS_Production_Warehouse);
    PARAMETER(LCL.Accounting_Company);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?Available Ship Date
    CASE;

    // IF WRK.Warehouse Std Chill Time is yes
    IF WRK.Warehouse_Std_Chill_Time = 'Y';

    EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Date);
    PARAMETER(WRK.Warehouse_Chill_Time);
    PARAMETER(DB1.PS_Available_Ship_Date);
    {
     //?USER: Initialize routine

     // WRK.Count USR = CON.*ZERO
     WRK.Count_USR = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF WRK.Count USR EQ PAR.Chilling Time
     IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

     // PAR.PS Available Ship Date = DB1.Post to G/L Date
     PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

     QUIT;

     ENDIF;

     //?Skip Saturday
     CASE;

     // IF DB1.Day of Week is Saturday
     IF DB1.Day_of_Week = '7';

     //?Skip Saturday
     // IF *OTHERWISE
     IF *OTHERWISE;

     // WRK.Count USR = WRK.Count USR + CON.1
     WRK.Count_USR = WRK.Count_USR + 1;

     ENDIF;

    }

    //?Available Ship Date
    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(UPS Clc Avail Shp Dte RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1324967;
    PARAMETER(DB1.Company_Number);
    PARAMETER(PAR.Production_Date);
    PARAMETER(WRK.Fresh_Chilling_Time);
    PARAMETER(DB1.PS_Available_Ship_Date);
    {
     //?USER: Initialize routine

     // WRK.Count USR = CON.*ZERO
     WRK.Count_USR = *ZERO;

     //?USER: Process Data record

     CASE;

     // IF WRK.Count USR EQ PAR.Chilling Time
     IF WRK.Count_USR = PAR.Fresh_Chilling_Time;

     // PAR.PS Available Ship Date = DB1.Post to G/L Date
     PAR.PS_Available_Ship_Date = DB1.Post_to_G_L_Date;

     QUIT;

     ENDIF;

     //?Skip Saturday
     CASE;

     // IF DB1.Day of Week is Saturday
     IF DB1.Day_of_Week = '7';

     //?Skip Saturday
     // IF *OTHERWISE
     IF *OTHERWISE;

     // WRK.Count USR = WRK.Count USR + CON.1
     WRK.Count_USR = WRK.Count_USR + 1;

     ENDIF;

    }

    ENDIF;

    //?Average Piece Weight
    CASE;

    // IF PAR.PS Pieces Planned Prod is GT Zero
    IF PAR.PS_Pieces_Planned_Prod > *ZERO;

    // DB1.PS Avg Piece Wgt = PAR.PS Weight Planned Prod / PAR.PS Pieces Planned Prod *
    DB1.PS_Avg_Piece_Wgt = PAR.PS_Weight_Planned_Prod / PAR.PS_Pieces_Planned_Prod;

    ENDIF;

    EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // DB1.PS Lock Status = CND.NOT LOCKED
    DB1.PS_Lock_Status = 'N';

   }

   ENDIF;

   //?USER: Process Data record

   // PAR.PS Weight Standard = PAR.Weight Scheduled
   PAR.PS_Weight_Standard = PAR.Weight_Scheduled;

   // PAR.PS Pieces Standard = PAR.Pieces Scheduled
   PAR.PS_Pieces_Standard = PAR.Pieces_Scheduled;

   //?Average Piece Weight
   CASE;

   // IF PAR.PS Pieces Standard is NE Zeros
   IF PAR.PS_Pieces_Standard <> *ZERO;

   //?FP1054 RMC 5/14/09 chg above CASE to ne 0 , it was gt 0
   // Avg Piece Weight
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Weight_Standard / PAR.PS_Pieces_Standard;

   //?FP1054 RMC 5/14/09 make positive if negative
   CASE;

   // IF PAR.PS Avg Piece Wgt is LT Zero
   IF PAR.PS_Avg_Piece_Wgt < *ZERO;

   // PAR.PS Avg Piece Wgt = PAR.PS Avg Piece Wgt * CON.-1 *
   PAR.PS_Avg_Piece_Wgt = PAR.PS_Avg_Piece_Wgt * -1;

   ENDIF;

   ENDIF;

   EXECUTE FUNCTION(BPS Chg Pcs/Wgt Std   CH) TYPE(CHGOBJ) FILE(PDI8CPP)           AC1476188;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.PS_Avg_Piece_Wgt);
   PARAMETER(PAR.PS_Weight_Standard);
   PARAMETER(PAR.PS_Pieces_Standard);
  }

 }

}


// RCD.Qty Prod Adjusted 6 USR = RCD.Qty Sched Ord 6 USR
RCD.Qty_Prod_Adjusted_6_USR = RCD.Qty_Sched_Ord_6_USR;

ENDIF;

//?USER: Process command keys

//?F5=Refresh
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F21=Email it
CASE;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

// Call program Pmt Enter Email Addr  PV.
CALL PROGRAM(Pmt Enter Email Addr  PV) ('POWGPVR');
PARAMETER(LCL.Email_Address);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF LCL.Email Address is Entered
IF LCL.Email_Address <> *BLANK;

// LCL.Prod Date Alpha USR = CVTVAR(CTL.From Date             USR)
LCL.Prod_Date_Alpha_USR = CVTVAR(CTL.From_Date_USR);

// Execute command - 'EXECUTE SQL VIEW'
EXECUTE COMMAND(USR4693);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Availability_Group_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.Prod_Date_Alpha_USR);
PARAMETER(LCL.Email_Address);

ENDIF;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

