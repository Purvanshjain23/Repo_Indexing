// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDSFPFR
// ?Date: 14.08.2025 Time: 12:04:26
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?E00494 RMC Remove "Hold Over" heading text - h/o are in the curr day
//?This will deallocate and reallocate all scheduled orders. C6096
EXECUTE FUNCTION(Rtv Kill/Prod Day Sts RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1461011;
PARAMETER(PAR.Company_Number);
PARAMETER(JOB.*Job_date);
PARAMETER(LCL.Kill_Day_Status);
PARAMETER(LCL.Production_Day_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Production Day Status is yes
IF LCL.Production_Day_Status = 'Y';

ENDIF;

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


EXECUTE FUNCTION(Rtv PA Shipdate-21+SunRT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1621622;
PARAMETER(PAR.Company_Number);
PARAMETER(JOB.*Job_date);
PARAMETER(PAR.Generic_Heading_1);
PARAMETER(PAR.Generic_Heading_2);
PARAMETER(PAR.Generic_Heading_3);
PARAMETER(PAR.Generic_Heading_4);
PARAMETER(PAR.Generic_Heading_5);
PARAMETER(PAR.Generic_Heading_6);
PARAMETER(PAR.Generic_Heading_7);
PARAMETER(PAR.Generic_Heading_8);
PARAMETER(PAR.Generic_Heading_9);
PARAMETER(PAR.Generic_Heading_10);
PARAMETER(PAR.Generic_Heading_11);
PARAMETER(PAR.Generic_Heading_12);
PARAMETER(PAR.Generic_Heading_13);
PARAMETER(PAR.Generic_Heading_14);
PARAMETER(PAR.Generic_Heading_15);
PARAMETER(PAR.Generic_Heading_16);
PARAMETER(PAR.Avail_Ship_Date_1_USR);
PARAMETER(PAR.Avail_Ship_Date_2_USR);
PARAMETER(PAR.Avail_Ship_Date_3_USR);
PARAMETER(PAR.Avail_Ship_Date_4_USR);
PARAMETER(PAR.Avail_Ship_Date_5_USR);
PARAMETER(PAR.Avail_Ship_Date_6_USR);
PARAMETER(PAR.Avail_Ship_Date_7_USR);
PARAMETER(PAR.Avail_Ship_Date_8_USR);
PARAMETER(PAR.Avail_Ship_Date_9_USR);
PARAMETER(PAR.Avail_Ship_Date_10_USR);
PARAMETER(PAR.Avail_Ship_Date_11_USR);
PARAMETER(PAR.Avail_Ship_Date_12_USR);
PARAMETER(PAR.Avail_Ship_Date_13_USR);
PARAMETER(PAR.Avail_Ship_Date_14_USR);
PARAMETER(PAR.Avail_Ship_Date_15_USR);
PARAMETER(PAR.Avail_Ship_Date_16_USR);
PARAMETER(PAR.Avail_Ship_Date_17_USR);
PARAMETER(PAR.Avail_Ship_Date_18_USR);
PARAMETER(PAR.Avail_Ship_Date_19_USR);
PARAMETER(PAR.Avail_Ship_Date_20_USR);
PARAMETER(PAR.Avail_Ship_Date_21_USR);
{
 //?USER: Initialize routine

 // WRK.Count USR = CON.1
 WRK.Count_USR = 1;

 //?USER: Process Data record

 CASE;

 // IF WRK.Count USR is GT 21
 IF WRK.Count_USR > 21;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Move Date
 CASE;

 // IF WRK.Count USR is One
 IF WRK.Count_USR = 1;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 1 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_1 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 1 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_1_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 2 = CON.Total
 PAR.Generic_Heading_2 = 'Total';

 // PAR.Avail Ship Date 2 USR = CON.*ZERO
 PAR.Avail_Ship_Date_2_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Two
 IF WRK.Count_USR = 2;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 2 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_2 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 2 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_2_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 3 = CON.Total
 PAR.Generic_Heading_3 = 'Total';

 // PAR.Avail Ship Date 3 USR = CON.*ZERO
 PAR.Avail_Ship_Date_3_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Three
 IF WRK.Count_USR = 3;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 3 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_3 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 3 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_3_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 4 = CON.Total
 PAR.Generic_Heading_4 = 'Total';

 // PAR.Avail Ship Date 4 USR = CON.*ZERO
 PAR.Avail_Ship_Date_4_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Four
 IF WRK.Count_USR = 4;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 4 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_4 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 4 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_4_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 5 = CON.Total
 PAR.Generic_Heading_5 = 'Total';

 // PAR.Avail Ship Date 5 USR = CON.*ZERO
 PAR.Avail_Ship_Date_5_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Five
 IF WRK.Count_USR = 5;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 5 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_5 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 5 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_5_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 6 = CON.Total
 PAR.Generic_Heading_6 = 'Total';

 // PAR.Avail Ship Date 6 USR = CON.*ZERO
 PAR.Avail_Ship_Date_6_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Six
 IF WRK.Count_USR = 6;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 6 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_6 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 6 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_6_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 7 = CON.Total
 PAR.Generic_Heading_7 = 'Total';

 // PAR.Avail Ship Date 7 USR = CON.*ZERO
 PAR.Avail_Ship_Date_7_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Seven
 IF WRK.Count_USR = 7;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 7 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_7 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 7 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_7_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 8 = CON.Total
 PAR.Generic_Heading_8 = 'Total';

 // PAR.Avail Ship Date 8 USR = CON.*ZERO
 PAR.Avail_Ship_Date_8_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Eight
 IF WRK.Count_USR = 8;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 8 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_8 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 8 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_8_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 9 = CON.Total
 PAR.Generic_Heading_9 = 'Total';

 // PAR.Avail Ship Date 9 USR = CON.*ZERO
 PAR.Avail_Ship_Date_9_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Nine
 IF WRK.Count_USR = 9;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 9 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_9 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 9 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_9_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 10 = CON.Total
 PAR.Generic_Heading_10 = 'Total';

 // PAR.Avail Ship Date 10 USR = CON.*ZERO
 PAR.Avail_Ship_Date_10_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Ten
 IF WRK.Count_USR = 10;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 10 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_10 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 10 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_10_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 11 = CON.Total
 PAR.Generic_Heading_11 = 'Total';

 // PAR.Avail Ship Date 11 USR = CON.*ZERO
 PAR.Avail_Ship_Date_11_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Eleven
 IF WRK.Count_USR = 11;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 11 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_11 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 11 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_11_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 12 = CON.Total
 PAR.Generic_Heading_12 = 'Total';

 // PAR.Avail Ship Date 12 USR = CON.*ZERO
 PAR.Avail_Ship_Date_12_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Twelve
 IF WRK.Count_USR = 12;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 12 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_12 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 12 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_12_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 13 = CON.Total
 PAR.Generic_Heading_13 = 'Total';

 // PAR.Avail Ship Date 13 USR = CON.*ZERO
 PAR.Avail_Ship_Date_13_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Thirteen
 IF WRK.Count_USR = 13;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 13 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_13 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 13 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_13_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 14 = CON.Total
 PAR.Generic_Heading_14 = 'Total';

 // PAR.Avail Ship Date 14 USR = CON.*ZERO
 PAR.Avail_Ship_Date_14_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Fourteen
 IF WRK.Count_USR = 14;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 14 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_14 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 14 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_14_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 15 = CON.Total
 PAR.Generic_Heading_15 = 'Total';

 // PAR.Avail Ship Date 15 USR = CON.*ZERO
 PAR.Avail_Ship_Date_15_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Fifteen
 IF WRK.Count_USR = 15;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 15 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_15 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 15 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_15_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 16 = CON.Total
 PAR.Generic_Heading_16 = 'Total';

 // PAR.Avail Ship Date 16 USR = CON.*ZERO
 PAR.Avail_Ship_Date_16_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Sixteen
 IF WRK.Count_USR = 16;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 16 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_16 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 16 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_16_USR = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Seventeen
 IF WRK.Count_USR = 17;

 // PAR.Avail Ship Date 17 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_17_USR = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Eighteen
 IF WRK.Count_USR = 18;

 // PAR.Avail Ship Date 18 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_18_USR = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Nineteen
 IF WRK.Count_USR = 19;

 // PAR.Avail Ship Date 19 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_19_USR = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Twenty
 IF WRK.Count_USR = 20;

 // PAR.Avail Ship Date 20 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_20_USR = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Twenty One
 IF WRK.Count_USR = 21;

 // PAR.Avail Ship Date 21 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_21_USR = DB1.Post_to_G_L_Date;

 ENDIF;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

}


//?USER: Record selection processing

CASE;

// IF PAR.Availability Group Code NE DB1.Availability Group Code
IF PAR.Availability_Group_Code <> DB1.Availability_Group_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?If warehouse is not blank, item balance record must exist
CASE;

// IF PAR.Warehouse Code is Warehouse Code not Blank
IF PAR.Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(Val Item Bal Exist    RT) TYPE(RTVOBJ) FILE(CAB0REP)           AC1428561;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Record Status      RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1483076;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(PAR.Record_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Do not select inactive items
CASE;

// IF PAR.Record Status is Inactive
IF PAR.Record_Status = 'I';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process before print of first page format

MOVE *ALL (To: 1PG From: PAR);

//?Company
CASE;

// IF 1PG.Company Number is Equal to zero
IF X1PG_Company_Number = *ZERO;

// 1PG.Name = CON.*All
X1PG_Name = *All;

//?Company
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Warehouse type
CASE;

// IF 1PG.Warehouse Type EQ WRK.BLANK 1               USR
IF X1PG_Warehouse_Type = WRK.BLANK_1_USR;

// 1PG.Warehouse Type Desc = CON.*ALL
X1PG_Warehouse_Type_Desc = *ALL;

//?Warehouse type
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Warehouse Type Desc = Condition name of 1PG.Warehouse Type
X1PG_Warehouse_Type_Desc = RTVCND(X1PG_Warehouse_Type);

ENDIF;

//?Warehouse
CASE;

// IF 1PG.Warehouse Code is Warehouse Code Blank
IF X1PG_Warehouse_Code = *BLANK;

// 1PG.Warehouse Description = CON.*All
X1PG_Warehouse_Description = *All;

//?Warehouse
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(X1PG_Warehouse_Code);
PARAMETER(X1PG_Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


ENDIF;

//?Availability Group
CASE;

// IF 1PG.Availability Group Code is Blank
IF X1PG_Availability_Group_Code = *BLANK;

// 1PG.Availability Group Desc = CON.*ALL
X1PG_Availability_Group_Desc = *ALL;

//?Availability Group
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Group Description  RT) TYPE(RTVOBJ) FILE(PDKKREP)          AC1380777;
PARAMETER(X1PG_Availability_Group_Code);
PARAMETER(X1PG_Availability_Group_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


ENDIF;

//?Unit of Measure
CASE;

// IF 1PG.Primary/Load Sts USR is *ALL values
IF X1PG_Primary_Load_Sts_USR = 'P'/'L';

// 1PG.Condition Desc. 1  USR = Condition name of 1PG.Primary/Load Sts USR
X1PG_Condition_Desc_1_USR = RTVCND(X1PG_Primary_Load_Sts_USR);

//?Unit of Measure
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Condition Desc. 1  USR = CON.*All
X1PG_Condition_Desc_1_USR = *All;

ENDIF;

// 1PG.Condition Desc. 2  USR = Condition name of 1PG.Print Zeros USR
X1PG_Condition_Desc_2_USR = RTVCND(X1PG_Print_Zeros_USR);

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
MOVE *ALL (To: CUR From: PAR);

//?Re-format Heading Date  1
CASE;

// IF CUR.Generic Heading 1 is Equal Total
IF CUR.Generic_Heading_1 = 'Total';

// PAR.Display Line Flag = CND.1
PAR.Display_Line_Flag = 1;

//?Re-format Heading Date  1
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(CUR.Generic_Heading_1);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


ENDIF;

//?Re-format Heading Date  2
CASE;

// IF CUR.Generic Heading 2 is Equal Total
IF CUR.Generic_Heading_2 = 'Total';

// PAR.Display Line Flag = CND.2
PAR.Display_Line_Flag = 2;

//?Re-format Heading Date  2
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(CUR.Generic_Heading_2);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


ENDIF;

//?Re-format Heading Date  3
CASE;

// IF CUR.Generic Heading 3 is Equal Total
IF CUR.Generic_Heading_3 = 'Total';

// PAR.Display Line Flag = CND.3
PAR.Display_Line_Flag = 3;

//?Re-format Heading Date  3
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(CUR.Generic_Heading_3);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


ENDIF;

//?Re-format Heading Date  4
CASE;

// IF CUR.Generic Heading 4 is Equal Total
IF CUR.Generic_Heading_4 = 'Total';

// PAR.Display Line Flag = CND.4
PAR.Display_Line_Flag = 4;

//?Re-format Heading Date  4
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(CUR.Generic_Heading_4);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


ENDIF;

//?Re-format Heading Date  5
CASE;

// IF CUR.Generic Heading 5 is Equal Total
IF CUR.Generic_Heading_5 = 'Total';

// PAR.Display Line Flag = CND.5
PAR.Display_Line_Flag = 5;

//?Re-format Heading Date  5
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(CUR.Generic_Heading_5);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


ENDIF;

//?Re-format Heading Date  6
CASE;

// IF CUR.Generic Heading 6 is Equal Total
IF CUR.Generic_Heading_6 = 'Total';

// PAR.Display Line Flag = CND.6
PAR.Display_Line_Flag = 6;

//?Re-format Heading Date  6
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(CUR.Generic_Heading_6);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


ENDIF;

//?Re-format Heading Date  7
CASE;

// IF CUR.Generic Heading 7 is Equal Total
IF CUR.Generic_Heading_7 = 'Total';

// PAR.Display Line Flag = CND.7
PAR.Display_Line_Flag = 7;

//?Re-format Heading Date  7
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(CUR.Generic_Heading_7);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


ENDIF;

//?Re-format Heading Date  8
CASE;

// IF CUR.Generic Heading 8 is Equal Total
IF CUR.Generic_Heading_8 = 'Total';

//?Re-format Heading Date  8
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(CUR.Generic_Heading_8);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


ENDIF;

//?Re-format Heading Date  9
CASE;

// IF CUR.Generic Heading 9 is Equal Total
IF CUR.Generic_Heading_9 = 'Total';

//?Re-format Heading Date  9
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(CUR.Generic_Heading_9);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


ENDIF;

//?Re-format Heading Date 10
CASE;

// IF CUR.Generic Heading 10 is Equal Total
IF CUR.Generic_Heading_10 = 'Total';

//?Re-format Heading Date 10
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(CUR.Generic_Heading_10);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


ENDIF;

//?Re-format Heading Date 11
CASE;

// IF CUR.Generic Heading 11 is Equal Total
IF CUR.Generic_Heading_11 = 'Total';

//?Re-format Heading Date 11
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(CUR.Generic_Heading_11);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


ENDIF;

//?Re-format Heading Date 12
CASE;

// IF CUR.Generic Heading 12 is Equal Total
IF CUR.Generic_Heading_12 = 'Total';

//?Re-format Heading Date 12
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(CUR.Generic_Heading_12);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


ENDIF;

//?Re-format Heading Date 13
CASE;

// IF CUR.Generic Heading 13 is Equal Total
IF CUR.Generic_Heading_13 = 'Total';

//?Re-format Heading Date 13
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(CUR.Generic_Heading_13);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


ENDIF;

//?Re-format Heading Date 14
CASE;

// IF CUR.Generic Heading 14 is Equal Total
IF CUR.Generic_Heading_14 = 'Total';

//?Re-format Heading Date 14
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(CUR.Generic_Heading_14);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


ENDIF;

// Print Accounting Company Number header format
PRINT Accounting Company Number header format;

ENDIF;

// SUPPRESSED PRINT Availability Group Code header format

// SUPPRESSED PRINT Item Display Sequence header format

//?USER: Process before print of detail format

EXECUTE FUNCTION(Rtv Conv/Bas/Fab       RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1299845;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(PAR.Base_Conv_Loss_Item);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Display '**' by unit of measure if base item
CASE;

// IF PAR.Base/Conv/Loss Item is Base
IF PAR.Base_Conv_Loss_Item = 'B';

// WRK.Display Flag = CND.Yes
WRK.Display_Flag = 'Y';

//?Display '**' by unit of measure if base item
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Display Flag = CND.No
WRK.Display_Flag = 'N';

ENDIF;

EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Description_Line_One);
PARAMETER(CUR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.Item_Structure_Class_Code);
PARAMETER(WRK.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(WRK.Item_Type_Code);
PARAMETER(WRK.Default_Warehouse);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(WRK.Base_Conv_Loss_Item);
PARAMETER(WRK.Variety_Rendered_Cut);
PARAMETER(WRK.Credit_Item_Status);
PARAMETER(WRK.Std_Weight_Head_Var_Ren);
PARAMETER(WRK.Pieces_Per_Head);
PARAMETER(WRK.Department_Code);
PARAMETER(WRK.Group_for_Packaging);
PARAMETER(WRK.Seconds_Item);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(WRK.Export_Domestic);
PARAMETER(WRK.Print_On_Schedule);
PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
PARAMETER(WRK.Fresh_Sched_As_Ordered);
PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
PARAMETER(WRK.Primal_Group_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(WRK.Warehouse_Type);
PARAMETER(WRK.Trans_Contol_AS400_Plant);
PARAMETER(WRK.Warehouse_Location);
PARAMETER(WRK.Warehouse_Std_Chill_Time);
PARAMETER(WRK.Warehouse_Chill_Time);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Description_Line_One);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Type_Code);
 PARAMETER(PAR.Default_Warehouse);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 PARAMETER(PAR.Variety_Rendered_Cut);
 PARAMETER(PAR.Credit_Item_Status);
 PARAMETER(PAR.Std_Weight_Head_Var_Ren);
 PARAMETER(PAR.Pieces_Per_Head);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Group_for_Packaging);
 PARAMETER(PAR.Seconds_Item);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Export_Domestic);
 PARAMETER(PAR.Print_On_Schedule);
 PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
 PARAMETER(PAR.Fresh_Sched_As_Ordered);
 PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
 PARAMETER(PAR.Primal_Group_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.Trans_Contol_AS400_Plant);
 PARAMETER(PAR.Warehouse_Location);
 PARAMETER(PAR.Warehouse_Std_Chill_Time);
 PARAMETER(PAR.Warehouse_Chill_Time);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?WRK fields are not used for Report
EXECUTE FUNCTION(Rtv PA In/Sh SD-6     IF) TYPE(EXCINTFUN)                      AC1388774;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Avail_Ship_Date_1_USR);
PARAMETER(PAR.Avail_Ship_Date_2_USR);
PARAMETER(PAR.Avail_Ship_Date_3_USR);
PARAMETER(PAR.Avail_Ship_Date_4_USR);
PARAMETER(PAR.Avail_Ship_Date_5_USR);
PARAMETER(PAR.Avail_Ship_Date_6_USR);
PARAMETER(PAR.Avail_Ship_Date_7_USR);
PARAMETER(CUR.Day_1_Inventory_USR);
PARAMETER(CUR.Day_2_Inventory_USR);
PARAMETER(CUR.Day_3_Inventory_USR);
PARAMETER(CUR.Day_4_Inventory_USR);
PARAMETER(CUR.Day_5_Inventory_USR);
PARAMETER(CUR.Day_6_Inventory_USR);
PARAMETER(CUR.Day_7_Inventory_USR);
PARAMETER(CUR.Day_8_Inventory_USR);
PARAMETER(CUR.Day_1_Sales_USR);
PARAMETER(CUR.Day_2_Sales_USR);
PARAMETER(CUR.Day_3_Sales_USR);
PARAMETER(CUR.Day_4_Sales_USR);
PARAMETER(CUR.Day_5_Sales_USR);
PARAMETER(CUR.Day_6_Sales_USR);
PARAMETER(CUR.Day_7_Sales_USR);
PARAMETER(CUR.Day_1_Adjustments_USR);
PARAMETER(CUR.Day_2_Adjustments_USR);
PARAMETER(CUR.Day_3_Adjustments_USR);
PARAMETER(CUR.Day_4_Adjustments_USR);
PARAMETER(CUR.Day_5_Adjustments_USR);
PARAMETER(CUR.Day_6_Adjustments_USR);
PARAMETER(CUR.Day_7_Adjustments_USR);
PARAMETER(CUR.Day_1_Availability_USR);
PARAMETER(CUR.Day_2_Availability_USR);
PARAMETER(CUR.Day_3_Availability_USR);
PARAMETER(CUR.Day_4_Availability_USR);
PARAMETER(CUR.Day_5_Availability_USR);
PARAMETER(CUR.Day_6_Availability_USR);
PARAMETER(CUR.Day_7_Availability_USR);
PARAMETER(PAR.Primary_Load_Sts_USR);
PARAMETER(PAR.Load_Size_USR);
PARAMETER(CUR.Day_1_Sched_Shipments_USR);
PARAMETER(CUR.Day_2_Sched_Shipments_USR);
PARAMETER(CUR.Day_3_Sched_Shipments_USR);
PARAMETER(CUR.Day_4_Sched_Shipments_USR);
PARAMETER(CUR.Day_5_Sched_Shipments_USR);
PARAMETER(CUR.Day_6_Sched_Shipments_USR);
PARAMETER(CUR.Day_7_Sched_Shipments_USR);
PARAMETER(CUR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER('L');
{
 //?Execute internal function

 //?Retrieve Inventory and Scheduled Shipments
 EXECUTE FUNCTION(Rtv PA In/Sh SD-6 WHS RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1376865;
 PARAMETER(PAR.Company_Number);
 PARAMETER('S');
 PARAMETER(JOB.*Job_date);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Weight_Inv_On_Hand);
 PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
 PARAMETER(PAR.PS_Weight_Inv_Adj);
 PARAMETER(PAR.PS_Pieces_Inv_Adj);
 PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Allocated);
 PARAMETER(PAR.PS_Pieces_Prod_Allocated);
 PARAMETER(PAR.PS_Weight_Inv_Allocated);
 PARAMETER(PAR.PS_Pieces_Inv_Allocated);
 PARAMETER(PAR.PS_Weight_Ordered);
 PARAMETER(PAR.PS_Weight_Sched_Shipment);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Inventory / Sales if Chilling Time > 0
 CASE;

 // IF PAR.Primary/Load Sts USR is Primary
 IF PAR.Primary_Load_Sts_USR = 'P';

 // AND PAR.Unit Weight is Greater than zero
 AND ( PAR.Unit_Weight > *ZERO;

 // OR PAR.Piece Count Item is yes
 OR PAR.Piece_Count_Item = 'Y' );

 //?Calculate Quantity based on Unit Weight or Pieces
 CASE;

 // IF PAR.Avail Ship Date 1 USR EQ JOB.*Job date
 IF PAR.Avail_Ship_Date_1_USR = JOB.*Job_date;

 EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
 PARAMETER(PAR.Day_1_Inventory_USR);
 PARAMETER(PAR.Day_1_Sales_USR);
 PARAMETER(PAR.Day_1_Adjustments_USR);
 PARAMETER(PAR.Day_1_Availability_USR);
 PARAMETER(PAR.Day_1_Sched_Shipments_USR);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Weight_Inv_On_Hand);
 PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
 PARAMETER(PAR.PS_Weight_Inv_Adj);
 PARAMETER(PAR.PS_Pieces_Inv_Adj);
 PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Allocated);
 PARAMETER(PAR.PS_Pieces_Prod_Allocated);
 PARAMETER(PAR.PS_Weight_Inv_Allocated);
 PARAMETER(PAR.PS_Pieces_Inv_Allocated);
 PARAMETER(PAR.PS_Weight_Ordered);
 PARAMETER(PAR.PS_Weight_Sched_Shipment);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Avail Dsp/Prt Type USR is Display Detail
  IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

  // OR PAR.Avail Dsp/Prt Type USR is Print Detail
  OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

  EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Weight_Scheduled_SUM);
  PARAMETER(PAR.Quantity_Scheduled_SUM);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   ENDIF;

  }

  ENDIF;

  //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
  CASE;

  // IF PAR.Piece Count Item is Not Yes
  IF PAR.Piece_Count_Item = *BLANK/'N';

  // AND PAR.Unit Weight is Greater than zero
  AND PAR.Unit_Weight > *ZERO;

  //?06/24/09 FP1054:  Moved calc for non-piece count here.
  // Inventory On-Hand
  PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
  / PAR.Unit_Weight 'H';

  //?Reserved (Sales)
  CASE;

  // IF PAR.Fresh Chilling Time is GT Zero
  IF PAR.Fresh_Chilling_Time > *ZERO;

  // Reserved
  PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

  //?Reserved (Sales)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Reserved
  PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
  / PAR.Unit_Weight 'H';

  ENDIF;

  // Sched Shipments (ie.SALE)
  PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  // Ship Cut Adj (No Dec)
  PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
  / PAR.Unit_Weight 'H' );

  //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // AND PAR.Pieces Per Bag is GT Zero
  AND PAR.Pieces_Per_Bag > *ZERO;

  // AND PAR.Bags Per Unit is GT Zero
  AND PAR.Bags_Per_Unit > *ZERO;

  //?06/24/09 FP1054:  Calcualte Inventory by Pieces
  // Inventory On-Hand
  PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
  PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

  //?Reserved (Sales)
  CASE;

  // IF PAR.Chilling Time is GT Zero
  IF PAR.Fresh_Chilling_Time > *ZERO;

  // Inv Alloc
  PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

  //?Reserved (Sales)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Inv Alloc
  PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

  // Inv Alloc + Prod Alloc
  PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
  PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

  ENDIF;

  // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
  PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

  // Comp:Ship Cut Adj(No Dec)
  PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
  ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

  ENDIF;

  // Compute: Quantity Avail
  PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
  - PAR.Quantity_Sales_USR;

 }

 //?Calculate Quantity based on Unit Weight or Pieces
 // IF PAR.Avail Ship Date 2 USR EQ JOB.*Job date
 IF PAR.Avail_Ship_Date_2_USR = JOB.*Job_date;

 EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
 PARAMETER(PAR.Day_2_Inventory_USR);
 PARAMETER(PAR.Day_2_Sales_USR);
 PARAMETER(PAR.Day_2_Adjustments_USR);
 PARAMETER(PAR.Day_2_Availability_USR);
 PARAMETER(PAR.Day_2_Sched_Shipments_USR);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Weight_Inv_On_Hand);
 PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
 PARAMETER(PAR.PS_Weight_Inv_Adj);
 PARAMETER(PAR.PS_Pieces_Inv_Adj);
 PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Allocated);
 PARAMETER(PAR.PS_Pieces_Prod_Allocated);
 PARAMETER(PAR.PS_Weight_Inv_Allocated);
 PARAMETER(PAR.PS_Pieces_Inv_Allocated);
 PARAMETER(PAR.PS_Weight_Ordered);
 PARAMETER(PAR.PS_Weight_Sched_Shipment);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Avail Dsp/Prt Type USR is Display Detail
  IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

  // OR PAR.Avail Dsp/Prt Type USR is Print Detail
  OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

  EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Weight_Scheduled_SUM);
  PARAMETER(PAR.Quantity_Scheduled_SUM);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   ENDIF;

  }

  ENDIF;

  //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
  CASE;

  // IF PAR.Piece Count Item is Not Yes
  IF PAR.Piece_Count_Item = *BLANK/'N';

  // AND PAR.Unit Weight is Greater than zero
  AND PAR.Unit_Weight > *ZERO;

  //?06/24/09 FP1054:  Moved calc for non-piece count here.
  // Inventory On-Hand
  PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
  / PAR.Unit_Weight 'H';

  //?Reserved (Sales)
  CASE;

  // IF PAR.Fresh Chilling Time is GT Zero
  IF PAR.Fresh_Chilling_Time > *ZERO;

  // Reserved
  PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

  //?Reserved (Sales)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Reserved
  PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
  / PAR.Unit_Weight 'H';

  ENDIF;

  // Sched Shipments (ie.SALE)
  PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  // Ship Cut Adj (No Dec)
  PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
  / PAR.Unit_Weight 'H' );

  //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // AND PAR.Pieces Per Bag is GT Zero
  AND PAR.Pieces_Per_Bag > *ZERO;

  // AND PAR.Bags Per Unit is GT Zero
  AND PAR.Bags_Per_Unit > *ZERO;

  //?06/24/09 FP1054:  Calcualte Inventory by Pieces
  // Inventory On-Hand
  PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
  PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

  //?Reserved (Sales)
  CASE;

  // IF PAR.Chilling Time is GT Zero
  IF PAR.Fresh_Chilling_Time > *ZERO;

  // Inv Alloc
  PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

  //?Reserved (Sales)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Inv Alloc
  PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

  // Inv Alloc + Prod Alloc
  PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
  PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

  ENDIF;

  // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
  PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

  // Comp:Ship Cut Adj(No Dec)
  PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
  ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

  ENDIF;

  // Compute: Quantity Avail
  PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
  - PAR.Quantity_Sales_USR;

 }

 //?Calculate Quantity based on Unit Weight or Pieces
 // IF PAR.Avail Ship Date 3 USR EQ JOB.*Job date
 IF PAR.Avail_Ship_Date_3_USR = JOB.*Job_date;

 EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
 PARAMETER(PAR.Day_3_Inventory_USR);
 PARAMETER(PAR.Day_3_Sales_USR);
 PARAMETER(PAR.Day_3_Adjustments_USR);
 PARAMETER(PAR.Day_3_Availability_USR);
 PARAMETER(PAR.Day_3_Sched_Shipments_USR);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Weight_Inv_On_Hand);
 PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
 PARAMETER(PAR.PS_Weight_Inv_Adj);
 PARAMETER(PAR.PS_Pieces_Inv_Adj);
 PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Allocated);
 PARAMETER(PAR.PS_Pieces_Prod_Allocated);
 PARAMETER(PAR.PS_Weight_Inv_Allocated);
 PARAMETER(PAR.PS_Pieces_Inv_Allocated);
 PARAMETER(PAR.PS_Weight_Ordered);
 PARAMETER(PAR.PS_Weight_Sched_Shipment);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Avail Dsp/Prt Type USR is Display Detail
  IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

  // OR PAR.Avail Dsp/Prt Type USR is Print Detail
  OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

  EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Weight_Scheduled_SUM);
  PARAMETER(PAR.Quantity_Scheduled_SUM);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   ENDIF;

  }

  ENDIF;

  //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
  CASE;

  // IF PAR.Piece Count Item is Not Yes
  IF PAR.Piece_Count_Item = *BLANK/'N';

  // AND PAR.Unit Weight is Greater than zero
  AND PAR.Unit_Weight > *ZERO;

  //?06/24/09 FP1054:  Moved calc for non-piece count here.
  // Inventory On-Hand
  PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
  / PAR.Unit_Weight 'H';

  //?Reserved (Sales)
  CASE;

  // IF PAR.Fresh Chilling Time is GT Zero
  IF PAR.Fresh_Chilling_Time > *ZERO;

  // Reserved
  PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

  //?Reserved (Sales)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Reserved
  PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
  / PAR.Unit_Weight 'H';

  ENDIF;

  // Sched Shipments (ie.SALE)
  PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  // Ship Cut Adj (No Dec)
  PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
  / PAR.Unit_Weight 'H' );

  //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // AND PAR.Pieces Per Bag is GT Zero
  AND PAR.Pieces_Per_Bag > *ZERO;

  // AND PAR.Bags Per Unit is GT Zero
  AND PAR.Bags_Per_Unit > *ZERO;

  //?06/24/09 FP1054:  Calcualte Inventory by Pieces
  // Inventory On-Hand
  PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
  PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

  //?Reserved (Sales)
  CASE;

  // IF PAR.Chilling Time is GT Zero
  IF PAR.Fresh_Chilling_Time > *ZERO;

  // Inv Alloc
  PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

  //?Reserved (Sales)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Inv Alloc
  PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

  // Inv Alloc + Prod Alloc
  PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
  PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

  ENDIF;

  // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
  PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

  // Comp:Ship Cut Adj(No Dec)
  PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
  ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

  ENDIF;

  // Compute: Quantity Avail
  PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
  - PAR.Quantity_Sales_USR;

 }

 //?Calculate Quantity based on Unit Weight or Pieces
 // IF PAR.Avail Ship Date 4 USR EQ JOB.*Job date
 IF PAR.Avail_Ship_Date_4_USR = JOB.*Job_date;

 EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
 PARAMETER(PAR.Day_4_Inventory_USR);
 PARAMETER(PAR.Day_4_Sales_USR);
 PARAMETER(PAR.Day_4_Adjustments_USR);
 PARAMETER(PAR.Day_4_Availability_USR);
 PARAMETER(PAR.Day_4_Sched_Shipments_USR);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Weight_Inv_On_Hand);
 PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
 PARAMETER(PAR.PS_Weight_Inv_Adj);
 PARAMETER(PAR.PS_Pieces_Inv_Adj);
 PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Allocated);
 PARAMETER(PAR.PS_Pieces_Prod_Allocated);
 PARAMETER(PAR.PS_Weight_Inv_Allocated);
 PARAMETER(PAR.PS_Pieces_Inv_Allocated);
 PARAMETER(PAR.PS_Weight_Ordered);
 PARAMETER(PAR.PS_Weight_Sched_Shipment);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Avail Dsp/Prt Type USR is Display Detail
  IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

  // OR PAR.Avail Dsp/Prt Type USR is Print Detail
  OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

  EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Weight_Scheduled_SUM);
  PARAMETER(PAR.Quantity_Scheduled_SUM);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   ENDIF;

  }

  ENDIF;

  //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
  CASE;

  // IF PAR.Piece Count Item is Not Yes
  IF PAR.Piece_Count_Item = *BLANK/'N';

  // AND PAR.Unit Weight is Greater than zero
  AND PAR.Unit_Weight > *ZERO;

  //?06/24/09 FP1054:  Moved calc for non-piece count here.
  // Inventory On-Hand
  PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
  / PAR.Unit_Weight 'H';

  //?Reserved (Sales)
  CASE;

  // IF PAR.Fresh Chilling Time is GT Zero
  IF PAR.Fresh_Chilling_Time > *ZERO;

  // Reserved
  PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

  //?Reserved (Sales)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Reserved
  PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
  / PAR.Unit_Weight 'H';

  ENDIF;

  // Sched Shipments (ie.SALE)
  PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  // Ship Cut Adj (No Dec)
  PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
  / PAR.Unit_Weight 'H' );

  //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // AND PAR.Pieces Per Bag is GT Zero
  AND PAR.Pieces_Per_Bag > *ZERO;

  // AND PAR.Bags Per Unit is GT Zero
  AND PAR.Bags_Per_Unit > *ZERO;

  //?06/24/09 FP1054:  Calcualte Inventory by Pieces
  // Inventory On-Hand
  PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
  PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

  //?Reserved (Sales)
  CASE;

  // IF PAR.Chilling Time is GT Zero
  IF PAR.Fresh_Chilling_Time > *ZERO;

  // Inv Alloc
  PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

  //?Reserved (Sales)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Inv Alloc
  PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

  // Inv Alloc + Prod Alloc
  PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
  PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

  ENDIF;

  // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
  PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

  // Comp:Ship Cut Adj(No Dec)
  PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
  ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

  ENDIF;

  // Compute: Quantity Avail
  PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
  - PAR.Quantity_Sales_USR;

 }

 //?Calculate Quantity based on Unit Weight or Pieces
 // IF PAR.Avail Ship Date 5 USR EQ JOB.*Job date
 IF PAR.Avail_Ship_Date_5_USR = JOB.*Job_date;

 EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
 PARAMETER(PAR.Day_5_Inventory_USR);
 PARAMETER(PAR.Day_5_Sales_USR);
 PARAMETER(PAR.Day_5_Adjustments_USR);
 PARAMETER(PAR.Day_5_Availability_USR);
 PARAMETER(PAR.Day_5_Sched_Shipments_USR);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Weight_Inv_On_Hand);
 PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
 PARAMETER(PAR.PS_Weight_Inv_Adj);
 PARAMETER(PAR.PS_Pieces_Inv_Adj);
 PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Allocated);
 PARAMETER(PAR.PS_Pieces_Prod_Allocated);
 PARAMETER(PAR.PS_Weight_Inv_Allocated);
 PARAMETER(PAR.PS_Pieces_Inv_Allocated);
 PARAMETER(PAR.PS_Weight_Ordered);
 PARAMETER(PAR.PS_Weight_Sched_Shipment);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Avail Dsp/Prt Type USR is Display Detail
  IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

  // OR PAR.Avail Dsp/Prt Type USR is Print Detail
  OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

  EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Weight_Scheduled_SUM);
  PARAMETER(PAR.Quantity_Scheduled_SUM);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   ENDIF;

  }

  ENDIF;

  //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
  CASE;

  // IF PAR.Piece Count Item is Not Yes
  IF PAR.Piece_Count_Item = *BLANK/'N';

  // AND PAR.Unit Weight is Greater than zero
  AND PAR.Unit_Weight > *ZERO;

  //?06/24/09 FP1054:  Moved calc for non-piece count here.
  // Inventory On-Hand
  PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
  / PAR.Unit_Weight 'H';

  //?Reserved (Sales)
  CASE;

  // IF PAR.Fresh Chilling Time is GT Zero
  IF PAR.Fresh_Chilling_Time > *ZERO;

  // Reserved
  PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

  //?Reserved (Sales)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Reserved
  PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
  / PAR.Unit_Weight 'H';

  ENDIF;

  // Sched Shipments (ie.SALE)
  PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  // Ship Cut Adj (No Dec)
  PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
  / PAR.Unit_Weight 'H' );

  //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // AND PAR.Pieces Per Bag is GT Zero
  AND PAR.Pieces_Per_Bag > *ZERO;

  // AND PAR.Bags Per Unit is GT Zero
  AND PAR.Bags_Per_Unit > *ZERO;

  //?06/24/09 FP1054:  Calcualte Inventory by Pieces
  // Inventory On-Hand
  PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
  PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

  //?Reserved (Sales)
  CASE;

  // IF PAR.Chilling Time is GT Zero
  IF PAR.Fresh_Chilling_Time > *ZERO;

  // Inv Alloc
  PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

  //?Reserved (Sales)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Inv Alloc
  PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

  // Inv Alloc + Prod Alloc
  PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
  PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

  ENDIF;

  // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
  PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

  // Comp:Ship Cut Adj(No Dec)
  PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
  ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

  ENDIF;

  // Compute: Quantity Avail
  PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
  - PAR.Quantity_Sales_USR;

 }

 //?Calculate Quantity based on Unit Weight or Pieces
 // IF PAR.Avail Ship Date 6 USR EQ JOB.*Job date
 IF PAR.Avail_Ship_Date_6_USR = JOB.*Job_date;

 EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
 PARAMETER(PAR.Day_6_Inventory_USR);
 PARAMETER(PAR.Day_6_Sales_USR);
 PARAMETER(PAR.Day_6_Adjustments_USR);
 PARAMETER(PAR.Day_6_Availability_USR);
 PARAMETER(PAR.Day_6_Sched_Shipments_USR);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Weight_Inv_On_Hand);
 PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
 PARAMETER(PAR.PS_Weight_Inv_Adj);
 PARAMETER(PAR.PS_Pieces_Inv_Adj);
 PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Allocated);
 PARAMETER(PAR.PS_Pieces_Prod_Allocated);
 PARAMETER(PAR.PS_Weight_Inv_Allocated);
 PARAMETER(PAR.PS_Pieces_Inv_Allocated);
 PARAMETER(PAR.PS_Weight_Ordered);
 PARAMETER(PAR.PS_Weight_Sched_Shipment);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Avail Dsp/Prt Type USR is Display Detail
  IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

  // OR PAR.Avail Dsp/Prt Type USR is Print Detail
  OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

  EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Weight_Scheduled_SUM);
  PARAMETER(PAR.Quantity_Scheduled_SUM);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   ENDIF;

  }

  ENDIF;

  //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
  CASE;

  // IF PAR.Piece Count Item is Not Yes
  IF PAR.Piece_Count_Item = *BLANK/'N';

  // AND PAR.Unit Weight is Greater than zero
  AND PAR.Unit_Weight > *ZERO;

  //?06/24/09 FP1054:  Moved calc for non-piece count here.
  // Inventory On-Hand
  PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
  / PAR.Unit_Weight 'H';

  //?Reserved (Sales)
  CASE;

  // IF PAR.Fresh Chilling Time is GT Zero
  IF PAR.Fresh_Chilling_Time > *ZERO;

  // Reserved
  PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

  //?Reserved (Sales)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Reserved
  PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
  / PAR.Unit_Weight 'H';

  ENDIF;

  // Sched Shipments (ie.SALE)
  PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  // Ship Cut Adj (No Dec)
  PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
  / PAR.Unit_Weight 'H' );

  //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // AND PAR.Pieces Per Bag is GT Zero
  AND PAR.Pieces_Per_Bag > *ZERO;

  // AND PAR.Bags Per Unit is GT Zero
  AND PAR.Bags_Per_Unit > *ZERO;

  //?06/24/09 FP1054:  Calcualte Inventory by Pieces
  // Inventory On-Hand
  PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
  PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

  //?Reserved (Sales)
  CASE;

  // IF PAR.Chilling Time is GT Zero
  IF PAR.Fresh_Chilling_Time > *ZERO;

  // Inv Alloc
  PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

  //?Reserved (Sales)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Inv Alloc
  PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

  // Inv Alloc + Prod Alloc
  PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
  PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

  ENDIF;

  // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
  PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

  // Comp:Ship Cut Adj(No Dec)
  PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
  ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

  ENDIF;

  // Compute: Quantity Avail
  PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
  - PAR.Quantity_Sales_USR;

 }

 //?Calculate Quantity based on Unit Weight or Pieces
 // IF PAR.Avail Ship Date 7 USR EQ JOB.*Job date
 IF PAR.Avail_Ship_Date_7_USR = JOB.*Job_date;

 EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
 PARAMETER(PAR.Day_7_Inventory_USR);
 PARAMETER(PAR.Day_7_Sales_USR);
 PARAMETER(PAR.Day_7_Adjustments_USR);
 PARAMETER(PAR.Day_7_Availability_USR);
 PARAMETER(PAR.Day_7_Sched_Shipments_USR);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Weight_Inv_On_Hand);
 PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
 PARAMETER(PAR.PS_Weight_Inv_Adj);
 PARAMETER(PAR.PS_Pieces_Inv_Adj);
 PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Allocated);
 PARAMETER(PAR.PS_Pieces_Prod_Allocated);
 PARAMETER(PAR.PS_Weight_Inv_Allocated);
 PARAMETER(PAR.PS_Pieces_Inv_Allocated);
 PARAMETER(PAR.PS_Weight_Ordered);
 PARAMETER(PAR.PS_Weight_Sched_Shipment);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Avail Dsp/Prt Type USR is Display Detail
  IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

  // OR PAR.Avail Dsp/Prt Type USR is Print Detail
  OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

  EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Weight_Scheduled_SUM);
  PARAMETER(PAR.Quantity_Scheduled_SUM);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   ENDIF;

  }

  ENDIF;

  //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
  CASE;

  // IF PAR.Piece Count Item is Not Yes
  IF PAR.Piece_Count_Item = *BLANK/'N';

  // AND PAR.Unit Weight is Greater than zero
  AND PAR.Unit_Weight > *ZERO;

  //?06/24/09 FP1054:  Moved calc for non-piece count here.
  // Inventory On-Hand
  PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
  / PAR.Unit_Weight 'H';

  //?Reserved (Sales)
  CASE;

  // IF PAR.Fresh Chilling Time is GT Zero
  IF PAR.Fresh_Chilling_Time > *ZERO;

  // Reserved
  PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

  //?Reserved (Sales)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Reserved
  PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
  / PAR.Unit_Weight 'H';

  ENDIF;

  // Sched Shipments (ie.SALE)
  PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  // Ship Cut Adj (No Dec)
  PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
  / PAR.Unit_Weight 'H' );

  //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // AND PAR.Pieces Per Bag is GT Zero
  AND PAR.Pieces_Per_Bag > *ZERO;

  // AND PAR.Bags Per Unit is GT Zero
  AND PAR.Bags_Per_Unit > *ZERO;

  //?06/24/09 FP1054:  Calcualte Inventory by Pieces
  // Inventory On-Hand
  PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
  PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

  //?Reserved (Sales)
  CASE;

  // IF PAR.Chilling Time is GT Zero
  IF PAR.Fresh_Chilling_Time > *ZERO;

  // Inv Alloc
  PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

  //?Reserved (Sales)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Inv Alloc
  PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

  // Inv Alloc + Prod Alloc
  PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
  PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

  ENDIF;

  // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
  PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

  // Comp:Ship Cut Adj(No Dec)
  PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
  ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

  ENDIF;

  // Compute: Quantity Avail
  PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
  - PAR.Quantity_Sales_USR;

 }

 ENDIF;

 //?Inventory / Sales if Chilling Time > 0
 // IF PAR.Primary/Load Sts USR is Load Size
 IF PAR.Primary_Load_Sts_USR = 'L';

 // AND PAR.Load Size USR is GT Zero
 AND PAR.Load_Size_USR > *ZERO;

 //?Calculate Quantity based on Load Size
 CASE;

 // IF PAR.Avail Ship Date 1 USR EQ JOB.*Job date
 IF PAR.Avail_Ship_Date_1_USR = JOB.*Job_date;

 EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Day_1_Inventory_USR);
 PARAMETER(PAR.Day_1_Sales_USR);
 PARAMETER(PAR.Day_1_Adjustments_USR);
 PARAMETER(PAR.Day_1_Availability_USR);
 PARAMETER(PAR.Day_1_Sched_Shipments_USR);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Weight_Inv_On_Hand);
 PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
 PARAMETER(PAR.PS_Weight_Inv_Adj);
 PARAMETER(PAR.PS_Pieces_Inv_Adj);
 PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Allocated);
 PARAMETER(PAR.PS_Pieces_Prod_Allocated);
 PARAMETER(PAR.PS_Weight_Inv_Allocated);
 PARAMETER(PAR.PS_Pieces_Inv_Allocated);
 PARAMETER(PAR.PS_Weight_Ordered);
 PARAMETER(PAR.PS_Weight_Sched_Shipment);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 {
  //?Execute internal function

  //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
  //?OVERRIDE: Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // AND PAR.Pieces Per Bag is GT Zero
  AND PAR.Pieces_Per_Bag > *ZERO;

  // AND PAR.Bags Per Unit is GT Zero
  AND PAR.Bags_Per_Unit > *ZERO;

  // PS Weight Inv On-Hand
  LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  // PS Weight Inv Adj
  LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  // PS Weight Inv Allocated
  LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  // PS Weight Prod Allocated
  LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  // PS Weight Ship Cut Adj
  LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  //?OVERRIDE: Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
  LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

  // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
  LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

  // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
  LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

  // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
  LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

  // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
  LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

  ENDIF;

  //?-------------------------------------------------------------
  //?Scheduled Shipments
  CASE;

  // IF PAR.Avail Dsp/Prt Type USR is Display Detail
  IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

  // OR PAR.Avail Dsp/Prt Type USR is Print Detail
  OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

  EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Weight_Scheduled_SUM);
  PARAMETER(PAR.Quantity_Scheduled_SUM);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   ENDIF;

  }

  // Scheduled Shipments
  PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

  ENDIF;

  //?02/21/11 PKD Replaced with LCL context instead of PAR.
  // Inventory
  PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
  / PAR.Load_Size_USR;

  //?Sales ----->  RESERVED
  CASE;

  // IF PAR.Chilling Time is GT Zero
  IF PAR.Fresh_Chilling_Time > *ZERO;

  // Sales
  PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

  //?Sales ----->  RESERVED
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sales
  PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
  / PAR.Load_Size_USR;

  ENDIF;

  // Ship Cut Adj (No Dec)
  PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
  / PAR.Load_Size_USR 'H' );

  // Quantity Available
  PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
  - PAR.Quantity_Sales_USR;

 }

 //?Calculate Quantity based on Load Size
 // IF PAR.Avail Ship Date 2 USR EQ JOB.*Job date
 IF PAR.Avail_Ship_Date_2_USR = JOB.*Job_date;

 EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Day_2_Inventory_USR);
 PARAMETER(PAR.Day_2_Sales_USR);
 PARAMETER(PAR.Day_2_Adjustments_USR);
 PARAMETER(PAR.Day_2_Availability_USR);
 PARAMETER(PAR.Day_2_Sched_Shipments_USR);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Weight_Inv_On_Hand);
 PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
 PARAMETER(PAR.PS_Weight_Inv_Adj);
 PARAMETER(PAR.PS_Pieces_Inv_Adj);
 PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Allocated);
 PARAMETER(PAR.PS_Pieces_Prod_Allocated);
 PARAMETER(PAR.PS_Weight_Inv_Allocated);
 PARAMETER(PAR.PS_Pieces_Inv_Allocated);
 PARAMETER(PAR.PS_Weight_Ordered);
 PARAMETER(PAR.PS_Weight_Sched_Shipment);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 {
  //?Execute internal function

  //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
  //?OVERRIDE: Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // AND PAR.Pieces Per Bag is GT Zero
  AND PAR.Pieces_Per_Bag > *ZERO;

  // AND PAR.Bags Per Unit is GT Zero
  AND PAR.Bags_Per_Unit > *ZERO;

  // PS Weight Inv On-Hand
  LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  // PS Weight Inv Adj
  LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  // PS Weight Inv Allocated
  LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  // PS Weight Prod Allocated
  LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  // PS Weight Ship Cut Adj
  LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  //?OVERRIDE: Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
  LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

  // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
  LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

  // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
  LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

  // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
  LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

  // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
  LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

  ENDIF;

  //?-------------------------------------------------------------
  //?Scheduled Shipments
  CASE;

  // IF PAR.Avail Dsp/Prt Type USR is Display Detail
  IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

  // OR PAR.Avail Dsp/Prt Type USR is Print Detail
  OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

  EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Weight_Scheduled_SUM);
  PARAMETER(PAR.Quantity_Scheduled_SUM);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   ENDIF;

  }

  // Scheduled Shipments
  PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

  ENDIF;

  //?02/21/11 PKD Replaced with LCL context instead of PAR.
  // Inventory
  PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
  / PAR.Load_Size_USR;

  //?Sales ----->  RESERVED
  CASE;

  // IF PAR.Chilling Time is GT Zero
  IF PAR.Fresh_Chilling_Time > *ZERO;

  // Sales
  PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

  //?Sales ----->  RESERVED
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sales
  PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
  / PAR.Load_Size_USR;

  ENDIF;

  // Ship Cut Adj (No Dec)
  PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
  / PAR.Load_Size_USR 'H' );

  // Quantity Available
  PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
  - PAR.Quantity_Sales_USR;

 }

 //?Calculate Quantity based on Load Size
 // IF PAR.Avail Ship Date 3 USR EQ JOB.*Job date
 IF PAR.Avail_Ship_Date_3_USR = JOB.*Job_date;

 EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Day_3_Inventory_USR);
 PARAMETER(PAR.Day_3_Sales_USR);
 PARAMETER(PAR.Day_3_Adjustments_USR);
 PARAMETER(PAR.Day_3_Availability_USR);
 PARAMETER(PAR.Day_3_Sched_Shipments_USR);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Weight_Inv_On_Hand);
 PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
 PARAMETER(PAR.PS_Weight_Inv_Adj);
 PARAMETER(PAR.PS_Pieces_Inv_Adj);
 PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Allocated);
 PARAMETER(PAR.PS_Pieces_Prod_Allocated);
 PARAMETER(PAR.PS_Weight_Inv_Allocated);
 PARAMETER(PAR.PS_Pieces_Inv_Allocated);
 PARAMETER(PAR.PS_Weight_Ordered);
 PARAMETER(PAR.PS_Weight_Sched_Shipment);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 {
  //?Execute internal function

  //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
  //?OVERRIDE: Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // AND PAR.Pieces Per Bag is GT Zero
  AND PAR.Pieces_Per_Bag > *ZERO;

  // AND PAR.Bags Per Unit is GT Zero
  AND PAR.Bags_Per_Unit > *ZERO;

  // PS Weight Inv On-Hand
  LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  // PS Weight Inv Adj
  LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  // PS Weight Inv Allocated
  LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  // PS Weight Prod Allocated
  LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  // PS Weight Ship Cut Adj
  LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  //?OVERRIDE: Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
  LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

  // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
  LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

  // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
  LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

  // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
  LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

  // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
  LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

  ENDIF;

  //?-------------------------------------------------------------
  //?Scheduled Shipments
  CASE;

  // IF PAR.Avail Dsp/Prt Type USR is Display Detail
  IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

  // OR PAR.Avail Dsp/Prt Type USR is Print Detail
  OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

  EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Weight_Scheduled_SUM);
  PARAMETER(PAR.Quantity_Scheduled_SUM);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   ENDIF;

  }

  // Scheduled Shipments
  PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

  ENDIF;

  //?02/21/11 PKD Replaced with LCL context instead of PAR.
  // Inventory
  PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
  / PAR.Load_Size_USR;

  //?Sales ----->  RESERVED
  CASE;

  // IF PAR.Chilling Time is GT Zero
  IF PAR.Fresh_Chilling_Time > *ZERO;

  // Sales
  PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

  //?Sales ----->  RESERVED
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sales
  PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
  / PAR.Load_Size_USR;

  ENDIF;

  // Ship Cut Adj (No Dec)
  PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
  / PAR.Load_Size_USR 'H' );

  // Quantity Available
  PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
  - PAR.Quantity_Sales_USR;

 }

 //?Calculate Quantity based on Load Size
 // IF PAR.Avail Ship Date 4 USR EQ JOB.*Job date
 IF PAR.Avail_Ship_Date_4_USR = JOB.*Job_date;

 EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Day_4_Inventory_USR);
 PARAMETER(PAR.Day_4_Sales_USR);
 PARAMETER(PAR.Day_4_Adjustments_USR);
 PARAMETER(PAR.Day_4_Availability_USR);
 PARAMETER(PAR.Day_4_Sched_Shipments_USR);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Weight_Inv_On_Hand);
 PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
 PARAMETER(PAR.PS_Weight_Inv_Adj);
 PARAMETER(PAR.PS_Pieces_Inv_Adj);
 PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Allocated);
 PARAMETER(PAR.PS_Pieces_Prod_Allocated);
 PARAMETER(PAR.PS_Weight_Inv_Allocated);
 PARAMETER(PAR.PS_Pieces_Inv_Allocated);
 PARAMETER(PAR.PS_Weight_Ordered);
 PARAMETER(PAR.PS_Weight_Sched_Shipment);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 {
  //?Execute internal function

  //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
  //?OVERRIDE: Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // AND PAR.Pieces Per Bag is GT Zero
  AND PAR.Pieces_Per_Bag > *ZERO;

  // AND PAR.Bags Per Unit is GT Zero
  AND PAR.Bags_Per_Unit > *ZERO;

  // PS Weight Inv On-Hand
  LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  // PS Weight Inv Adj
  LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  // PS Weight Inv Allocated
  LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  // PS Weight Prod Allocated
  LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  // PS Weight Ship Cut Adj
  LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  //?OVERRIDE: Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
  LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

  // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
  LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

  // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
  LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

  // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
  LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

  // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
  LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

  ENDIF;

  //?-------------------------------------------------------------
  //?Scheduled Shipments
  CASE;

  // IF PAR.Avail Dsp/Prt Type USR is Display Detail
  IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

  // OR PAR.Avail Dsp/Prt Type USR is Print Detail
  OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

  EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Weight_Scheduled_SUM);
  PARAMETER(PAR.Quantity_Scheduled_SUM);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   ENDIF;

  }

  // Scheduled Shipments
  PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

  ENDIF;

  //?02/21/11 PKD Replaced with LCL context instead of PAR.
  // Inventory
  PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
  / PAR.Load_Size_USR;

  //?Sales ----->  RESERVED
  CASE;

  // IF PAR.Chilling Time is GT Zero
  IF PAR.Fresh_Chilling_Time > *ZERO;

  // Sales
  PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

  //?Sales ----->  RESERVED
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sales
  PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
  / PAR.Load_Size_USR;

  ENDIF;

  // Ship Cut Adj (No Dec)
  PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
  / PAR.Load_Size_USR 'H' );

  // Quantity Available
  PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
  - PAR.Quantity_Sales_USR;

 }

 //?Calculate Quantity based on Load Size
 // IF PAR.Avail Ship Date 5 USR EQ JOB.*Job date
 IF PAR.Avail_Ship_Date_5_USR = JOB.*Job_date;

 EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Day_5_Inventory_USR);
 PARAMETER(PAR.Day_5_Sales_USR);
 PARAMETER(PAR.Day_5_Adjustments_USR);
 PARAMETER(PAR.Day_5_Availability_USR);
 PARAMETER(PAR.Day_5_Sched_Shipments_USR);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Weight_Inv_On_Hand);
 PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
 PARAMETER(PAR.PS_Weight_Inv_Adj);
 PARAMETER(PAR.PS_Pieces_Inv_Adj);
 PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Allocated);
 PARAMETER(PAR.PS_Pieces_Prod_Allocated);
 PARAMETER(PAR.PS_Weight_Inv_Allocated);
 PARAMETER(PAR.PS_Pieces_Inv_Allocated);
 PARAMETER(PAR.PS_Weight_Ordered);
 PARAMETER(PAR.PS_Weight_Sched_Shipment);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 {
  //?Execute internal function

  //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
  //?OVERRIDE: Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // AND PAR.Pieces Per Bag is GT Zero
  AND PAR.Pieces_Per_Bag > *ZERO;

  // AND PAR.Bags Per Unit is GT Zero
  AND PAR.Bags_Per_Unit > *ZERO;

  // PS Weight Inv On-Hand
  LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  // PS Weight Inv Adj
  LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  // PS Weight Inv Allocated
  LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  // PS Weight Prod Allocated
  LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  // PS Weight Ship Cut Adj
  LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  //?OVERRIDE: Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
  LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

  // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
  LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

  // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
  LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

  // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
  LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

  // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
  LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

  ENDIF;

  //?-------------------------------------------------------------
  //?Scheduled Shipments
  CASE;

  // IF PAR.Avail Dsp/Prt Type USR is Display Detail
  IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

  // OR PAR.Avail Dsp/Prt Type USR is Print Detail
  OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

  EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Weight_Scheduled_SUM);
  PARAMETER(PAR.Quantity_Scheduled_SUM);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   ENDIF;

  }

  // Scheduled Shipments
  PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

  ENDIF;

  //?02/21/11 PKD Replaced with LCL context instead of PAR.
  // Inventory
  PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
  / PAR.Load_Size_USR;

  //?Sales ----->  RESERVED
  CASE;

  // IF PAR.Chilling Time is GT Zero
  IF PAR.Fresh_Chilling_Time > *ZERO;

  // Sales
  PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

  //?Sales ----->  RESERVED
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sales
  PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
  / PAR.Load_Size_USR;

  ENDIF;

  // Ship Cut Adj (No Dec)
  PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
  / PAR.Load_Size_USR 'H' );

  // Quantity Available
  PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
  - PAR.Quantity_Sales_USR;

 }

 //?Calculate Quantity based on Load Size
 // IF PAR.Avail Ship Date 6 USR EQ JOB.*Job date
 IF PAR.Avail_Ship_Date_6_USR = JOB.*Job_date;

 EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Day_6_Inventory_USR);
 PARAMETER(PAR.Day_6_Sales_USR);
 PARAMETER(PAR.Day_6_Adjustments_USR);
 PARAMETER(PAR.Day_6_Availability_USR);
 PARAMETER(PAR.Day_6_Sched_Shipments_USR);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Weight_Inv_On_Hand);
 PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
 PARAMETER(PAR.PS_Weight_Inv_Adj);
 PARAMETER(PAR.PS_Pieces_Inv_Adj);
 PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Allocated);
 PARAMETER(PAR.PS_Pieces_Prod_Allocated);
 PARAMETER(PAR.PS_Weight_Inv_Allocated);
 PARAMETER(PAR.PS_Pieces_Inv_Allocated);
 PARAMETER(PAR.PS_Weight_Ordered);
 PARAMETER(PAR.PS_Weight_Sched_Shipment);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 {
  //?Execute internal function

  //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
  //?OVERRIDE: Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // AND PAR.Pieces Per Bag is GT Zero
  AND PAR.Pieces_Per_Bag > *ZERO;

  // AND PAR.Bags Per Unit is GT Zero
  AND PAR.Bags_Per_Unit > *ZERO;

  // PS Weight Inv On-Hand
  LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  // PS Weight Inv Adj
  LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  // PS Weight Inv Allocated
  LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  // PS Weight Prod Allocated
  LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  // PS Weight Ship Cut Adj
  LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  //?OVERRIDE: Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
  LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

  // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
  LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

  // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
  LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

  // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
  LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

  // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
  LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

  ENDIF;

  //?-------------------------------------------------------------
  //?Scheduled Shipments
  CASE;

  // IF PAR.Avail Dsp/Prt Type USR is Display Detail
  IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

  // OR PAR.Avail Dsp/Prt Type USR is Print Detail
  OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

  EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Weight_Scheduled_SUM);
  PARAMETER(PAR.Quantity_Scheduled_SUM);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   ENDIF;

  }

  // Scheduled Shipments
  PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

  ENDIF;

  //?02/21/11 PKD Replaced with LCL context instead of PAR.
  // Inventory
  PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
  / PAR.Load_Size_USR;

  //?Sales ----->  RESERVED
  CASE;

  // IF PAR.Chilling Time is GT Zero
  IF PAR.Fresh_Chilling_Time > *ZERO;

  // Sales
  PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

  //?Sales ----->  RESERVED
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sales
  PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
  / PAR.Load_Size_USR;

  ENDIF;

  // Ship Cut Adj (No Dec)
  PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
  / PAR.Load_Size_USR 'H' );

  // Quantity Available
  PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
  - PAR.Quantity_Sales_USR;

 }

 //?Calculate Quantity based on Load Size
 // IF PAR.Avail Ship Date 7 USR EQ JOB.*Job date
 IF PAR.Avail_Ship_Date_7_USR = JOB.*Job_date;

 EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Day_7_Inventory_USR);
 PARAMETER(PAR.Day_7_Sales_USR);
 PARAMETER(PAR.Day_7_Adjustments_USR);
 PARAMETER(PAR.Day_7_Availability_USR);
 PARAMETER(PAR.Day_7_Sched_Shipments_USR);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.PS_Weight_Inv_On_Hand);
 PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
 PARAMETER(PAR.PS_Weight_Inv_Adj);
 PARAMETER(PAR.PS_Pieces_Inv_Adj);
 PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
 PARAMETER(PAR.PS_Weight_Prod_Allocated);
 PARAMETER(PAR.PS_Pieces_Prod_Allocated);
 PARAMETER(PAR.PS_Weight_Inv_Allocated);
 PARAMETER(PAR.PS_Pieces_Inv_Allocated);
 PARAMETER(PAR.PS_Weight_Ordered);
 PARAMETER(PAR.PS_Weight_Sched_Shipment);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 {
  //?Execute internal function

  //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
  //?OVERRIDE: Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // AND PAR.Pieces Per Bag is GT Zero
  AND PAR.Pieces_Per_Bag > *ZERO;

  // AND PAR.Bags Per Unit is GT Zero
  AND PAR.Bags_Per_Unit > *ZERO;

  // PS Weight Inv On-Hand
  LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  // PS Weight Inv Adj
  LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  // PS Weight Inv Allocated
  LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  // PS Weight Prod Allocated
  LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  // PS Weight Ship Cut Adj
  LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
  * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

  //?OVERRIDE: Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
  LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

  // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
  LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

  // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
  LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

  // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
  LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

  // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
  LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

  ENDIF;

  //?-------------------------------------------------------------
  //?Scheduled Shipments
  CASE;

  // IF PAR.Avail Dsp/Prt Type USR is Display Detail
  IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

  // OR PAR.Avail Dsp/Prt Type USR is Print Detail
  OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

  EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Weight_Scheduled_SUM);
  PARAMETER(PAR.Quantity_Scheduled_SUM);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   ENDIF;

  }

  // Scheduled Shipments
  PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

  ENDIF;

  //?02/21/11 PKD Replaced with LCL context instead of PAR.
  // Inventory
  PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
  / PAR.Load_Size_USR;

  //?Sales ----->  RESERVED
  CASE;

  // IF PAR.Chilling Time is GT Zero
  IF PAR.Fresh_Chilling_Time > *ZERO;

  // Sales
  PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

  //?Sales ----->  RESERVED
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sales
  PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
  / PAR.Load_Size_USR;

  ENDIF;

  // Ship Cut Adj (No Dec)
  PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
  / PAR.Load_Size_USR 'H' );

  // Quantity Available
  PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
  - PAR.Quantity_Sales_USR;

 }

 ENDIF;

 ENDIF;

 //?Total Inventory
 CASE;

 // IF PAR.Avail Dsp/Prt Type USR is Display
 IF PAR.Avail_Dsp_Prt_Type_USR = 'D'/'T';

 // Total Inventory
 PAR.Day_8_Inventory_USR = ( ( ( ( ( PAR.Day_1_Inventory_USR + PAR.Day_2_Inventory_USR )
 + PAR.Day_3_Inventory_USR ) + PAR.Day_4_Inventory_USR ) + PAR.Day_5_Inventory_USR )               +
 + PAR.Day_6_Inventory_USR ) + PAR.Day_7_Inventory_USR;

 ENDIF;

}


EXECUTE FUNCTION(Rtv PA Dtl SD-21 WHS  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1652262;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.PS_Available_Ship_Date);
PARAMETER(PAR.Avail_Ship_Date_1_USR);
PARAMETER(PAR.Avail_Ship_Date_2_USR);
PARAMETER(PAR.Avail_Ship_Date_3_USR);
PARAMETER(PAR.Avail_Ship_Date_4_USR);
PARAMETER(PAR.Avail_Ship_Date_5_USR);
PARAMETER(PAR.Avail_Ship_Date_6_USR);
PARAMETER(PAR.Avail_Ship_Date_7_USR);
PARAMETER(PAR.Avail_Ship_Date_8_USR);
PARAMETER(PAR.Avail_Ship_Date_9_USR);
PARAMETER(PAR.Avail_Ship_Date_10_USR);
PARAMETER(PAR.Avail_Ship_Date_11_USR);
PARAMETER(PAR.Avail_Ship_Date_12_USR);
PARAMETER(PAR.Avail_Ship_Date_13_USR);
PARAMETER(PAR.Avail_Ship_Date_14_USR);
PARAMETER(PAR.Avail_Ship_Date_15_USR);
PARAMETER(PAR.Avail_Ship_Date_16_USR);
PARAMETER(PAR.Avail_Ship_Date_17_USR);
PARAMETER(PAR.Avail_Ship_Date_18_USR);
PARAMETER(PAR.Avail_Ship_Date_19_USR);
PARAMETER(PAR.Avail_Ship_Date_20_USR);
PARAMETER(PAR.Avail_Ship_Date_21_USR);
PARAMETER(CUR.USR_Day_1);
PARAMETER(CUR.USR_Day_2);
PARAMETER(CUR.USR_Day_3);
PARAMETER(CUR.USR_Day_4);
PARAMETER(CUR.USR_Day_5);
PARAMETER(CUR.USR_Day_6);
PARAMETER(CUR.USR_Day_7);
PARAMETER(CUR.USR_Day_8);
PARAMETER(CUR.USR_Day_9);
PARAMETER(CUR.USR_Day_10);
PARAMETER(CUR.USR_Day_11);
PARAMETER(CUR.USR_Day_12);
PARAMETER(CUR.USR_Day_13);
PARAMETER(CUR.USR_Day_14);
PARAMETER(CUR.USR_Day_15);
PARAMETER(CUR.USR_Day_16);
PARAMETER(CUR.USR_Day_17);
PARAMETER(CUR.USR_Day_18);
PARAMETER(CUR.USR_Day_19);
PARAMETER(CUR.USR_Day_20);
PARAMETER(CUR.USR_Day_21);
PARAMETER(CUR.Day_1_Inventory_USR);
PARAMETER(CUR.Day_2_Inventory_USR);
PARAMETER(CUR.Day_3_Inventory_USR);
PARAMETER(CUR.Day_4_Inventory_USR);
PARAMETER(CUR.Day_5_Inventory_USR);
PARAMETER(CUR.Day_6_Inventory_USR);
PARAMETER(CUR.Day_1_Production_USR);
PARAMETER(CUR.Day_2_Production_USR);
PARAMETER(CUR.Day_3_Production_USR);
PARAMETER(CUR.Day_4_Production_USR);
PARAMETER(CUR.Day_5_Production_USR);
PARAMETER(CUR.Day_6_Production_USR);
PARAMETER(CUR.Day_7_Production_USR);
PARAMETER(CUR.Day_8_Production_USR);
PARAMETER(CUR.Day_9_Production_USR);
PARAMETER(CUR.Day_10_Production_USR);
PARAMETER(CUR.Day_11_Production_USR);
PARAMETER(CUR.Day_12_Production_USR);
PARAMETER(CUR.Day_13_Production_USR);
PARAMETER(CUR.Day_14_Production_USR);
PARAMETER(CUR.Day_15_Production_USR);
PARAMETER(CUR.Day_16_Production_USR);
PARAMETER(CUR.Day_17_Production_USR);
PARAMETER(CUR.Day_18_Production_USR);
PARAMETER(CUR.Day_19_Production_USR);
PARAMETER(CUR.Day_20_Production_USR);
PARAMETER(CUR.Day_21_Production_USR);
PARAMETER(CUR.Day_1_Sales_USR);
PARAMETER(CUR.Day_2_Sales_USR);
PARAMETER(CUR.Day_3_Sales_USR);
PARAMETER(CUR.Day_4_Sales_USR);
PARAMETER(CUR.Day_6_Sales_USR);
PARAMETER(CUR.Day_7_Sales_USR);
PARAMETER(CUR.Day_8_Sales_USR);
PARAMETER(CUR.Day_9_Sales_USR);
PARAMETER(CUR.Day_11_Sales_USR);
PARAMETER(CUR.Day_12_Sales_USR);
PARAMETER(CUR.Day_13_Sales_USR);
PARAMETER(CUR.Day_14_Sales_USR);
PARAMETER(CUR.Day_5_Sales_USR);
PARAMETER(CUR.Day_10_Sales_USR);
PARAMETER(CUR.Day_15_Sales_USR);
PARAMETER(CUR.Day_16_Sales_USR);
PARAMETER(CUR.Day_17_Sales_USR);
PARAMETER(CUR.Day_18_Sales_USR);
PARAMETER(CUR.Day_19_Sales_USR);
PARAMETER(CUR.Day_20_Sales_USR);
PARAMETER(CUR.Day_21_Sales_USR);
PARAMETER(CUR.Day_1_Adjustments_USR);
PARAMETER(CUR.Day_2_Adjustments_USR);
PARAMETER(CUR.Day_3_Adjustments_USR);
PARAMETER(CUR.Day_4_Adjustments_USR);
PARAMETER(CUR.Day_5_Adjustments_USR);
PARAMETER(CUR.Day_6_Adjustments_USR);
PARAMETER(CUR.Day_7_Adjustments_USR);
PARAMETER(CUR.Day_8_Adjustments_USR);
PARAMETER(CUR.Day_9_Adjustments_USR);
PARAMETER(CUR.Day_10_Adjustments_USR);
PARAMETER(CUR.Day_11_Adjustments_USR);
PARAMETER(CUR.Day_12_Adjustments_USR);
PARAMETER(CUR.Day_13_Adjustments_USR);
PARAMETER(CUR.Day_14_Adjustments_USR);
PARAMETER(CUR.Day_15_Adjustments_USR);
PARAMETER(CUR.Day_16_Adjustments_USR);
PARAMETER(CUR.Day_17_Adjustments_USR);
PARAMETER(CUR.Day_18_Adjustments_USR);
PARAMETER(CUR.Day_19_Adjustments_USR);
PARAMETER(CUR.Day_20_Adjustments_USR);
PARAMETER(CUR.Day_21_Adjustments_USR);
PARAMETER(CUR.Day_1_Availability_USR);
PARAMETER(CUR.Day_2_Availability_USR);
PARAMETER(CUR.Day_3_Availability_USR);
PARAMETER(CUR.Day_4_Availability_USR);
PARAMETER(CUR.Day_5_Availability_USR);
PARAMETER(CUR.Day_6_Availability_USR);
PARAMETER(CUR.Day_7_Availability_USR);
PARAMETER(CUR.Day_8_Availability_USR);
PARAMETER(CUR.Day_9_Availability_USR);
PARAMETER(CUR.Day_10_Availability_USR);
PARAMETER(CUR.Day_11_Availability_USR);
PARAMETER(CUR.Day_12_Availability_USR);
PARAMETER(CUR.Day_13_Availability_USR);
PARAMETER(CUR.Day_14_Availability_USR);
PARAMETER(CUR.Day_15_Availability_USR);
PARAMETER(CUR.Day_16_Availability_USR);
PARAMETER(CUR.Day_17_Availability_USR);
PARAMETER(CUR.Day_18_Availability_USR);
PARAMETER(CUR.Day_19_Availability_USR);
PARAMETER(CUR.Day_20_Availability_USR);
PARAMETER(CUR.Day_21_Availability_USR);
PARAMETER(PAR.Primary_Load_Sts_USR);
PARAMETER(PAR.Load_Size_USR);
PARAMETER(CUR.Day_1_Sched_Shipments_USR);
PARAMETER(CUR.Day_2_Sched_Shipments_USR);
PARAMETER(CUR.Day_3_Sched_Shipments_USR);
PARAMETER(CUR.Day_4_Sched_Shipments_USR);
PARAMETER(CUR.Day_5_Sched_Shipments_USR);
PARAMETER(CUR.Day_6_Sched_Shipments_USR);
PARAMETER(CUR.Day_7_Sched_Shipments_USR);
PARAMETER(CUR.Day_8_Sched_Shipments_USR);
PARAMETER(CUR.Day_9_Sched_Shipments_USR);
PARAMETER(CUR.Day_10_Sched_Shipment_USR);
PARAMETER(CUR.Day_11_Sched_Shipment_USR);
PARAMETER(CUR.Day_12_Sched_Shipment_USR);
PARAMETER(CUR.Day_13_Sched_Shipment_USR);
PARAMETER(CUR.Day_14_Sched_Shipment_USR);
PARAMETER(CUR.Day_15_Sched_Shipment_USR);
PARAMETER(CUR.Day_16_Sched_Shipment_USR);
PARAMETER(CUR.Day_17_Sched_Shipment_USR);
PARAMETER(CUR.Day_18_Sched_Shipment_USR);
PARAMETER(CUR.Day_19_Sched_Shipment_USR);
PARAMETER(CUR.Day_20_Sched_Shipment_USR);
PARAMETER(CUR.Day_21_Sched_Shipment_USR);
PARAMETER('L');
PARAMETER(CUR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
{
 //?USER: Initialize routine

 //?fp1054 4/28/09 include whse txfr in PROD calc
 // PAR.Status Flag 1  Y/N = CND.No
 PAR.Status_Flag_1_Y_N = 'N';

 // PAR.Status Flag 2  Y/N = CND.No
 PAR.Status_Flag_2_Y_N = 'N';

 // PAR.Status Flag 3  Y/N = CND.No
 PAR.Status_Flag_3_Y_N = 'N';

 // PAR.Status Flag 4  Y/N = CND.no
 PAR.Status_Flag_4_Y_N = 'N';

 // PAR.Status Flag 5  Y/N = CND.No
 PAR.Status_Flag_5_Y_N = 'N';

 // PAR.Status Flag 6  Y/N = CND.No
 PAR.Status_Flag_6_Y_N = 'N';

 // PAR.Status Flag 7  Y/N = CND.No
 PAR.Status_Flag_7_Y_N = 'N';

 // PAR.Status Flag 8  Y/N = CND.No
 PAR.Status_Flag_8_Y_N = 'N';

 // PAR.Status Flag 9  Y/N = CND.No
 PAR.Status_Flag_9_Y_N = 'N';

 // PAR.Status Flag 10 Y/N = CND.No
 PAR.Status_Flag_10_Y_N = 'N';

 // PAR.Status Flag 11 Y/N = CND.No
 PAR.Status_Flag_11_Y_N = 'N';

 // PAR.Status Flag 12 Y/N = CND.No
 PAR.Status_Flag_12_Y_N = 'N';

 // PAR.Status Flag 13 Y/N = CND.No
 PAR.Status_Flag_13_Y_N = 'N';

 // PAR.Status Flag 14 Y/N = CND.No
 PAR.Status_Flag_14_Y_N = 'N';

 // PAR.Status Flag 15 Y/N = CND.No
 PAR.Status_Flag_15_Y_N = 'N';

 // PAR.Status Flag 16 Y/N = CND.No
 PAR.Status_Flag_16_Y_N = 'N';

 // PAR.Status Flag 17 Y/N = CND.No
 PAR.Status_Flag_17_Y_N = 'N';

 // PAR.Status Flag 18 Y/N = CND.No
 PAR.Status_Flag_18_Y_N = 'N';

 // PAR.Status Flag 19 Y/N = CND.No
 PAR.Status_Flag_19_Y_N = 'N';

 // PAR.Status Flag 20 Y/N = CND.No
 PAR.Status_Flag_20_Y_N = 'N';

 // PAR.Status Flag 21 Y/N = CND.No
 PAR.Status_Flag_21_Y_N = 'N';

 //?USER: Process Data record

 //?Quit:  Available Ship Date > Day 21
 CASE;

 // IF DB1.PS Available Ship Date GT PAR.Avail Ship Date 21 USR
 IF DB1.PS_Available_Ship_Date > PAR.Avail_Ship_Date_21_USR;

 EXECUTE FUNCTION(Rtv PA Ship Only-21  IF) TYPE(EXCINTFUN)                       AC1815983;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Avail_Ship_Date_1_USR);
 PARAMETER(PAR.Avail_Ship_Date_2_USR);
 PARAMETER(PAR.Avail_Ship_Date_3_USR);
 PARAMETER(PAR.Avail_Ship_Date_4_USR);
 PARAMETER(PAR.Avail_Ship_Date_5_USR);
 PARAMETER(PAR.Avail_Ship_Date_6_USR);
 PARAMETER(PAR.Avail_Ship_Date_7_USR);
 PARAMETER(PAR.Avail_Ship_Date_8_USR);
 PARAMETER(PAR.Avail_Ship_Date_9_USR);
 PARAMETER(PAR.Avail_Ship_Date_10_USR);
 PARAMETER(PAR.Avail_Ship_Date_11_USR);
 PARAMETER(PAR.Avail_Ship_Date_12_USR);
 PARAMETER(PAR.Avail_Ship_Date_13_USR);
 PARAMETER(PAR.Avail_Ship_Date_14_USR);
 PARAMETER(PAR.Avail_Ship_Date_15_USR);
 PARAMETER(PAR.Avail_Ship_Date_16_USR);
 PARAMETER(PAR.Avail_Ship_Date_17_USR);
 PARAMETER(PAR.Avail_Ship_Date_18_USR);
 PARAMETER(PAR.Avail_Ship_Date_19_USR);
 PARAMETER(PAR.Avail_Ship_Date_20_USR);
 PARAMETER(PAR.Avail_Ship_Date_21_USR);
 PARAMETER(PAR.Primary_Load_Sts_USR);
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Day_1_Sched_Shipments_USR);
 PARAMETER(PAR.Day_2_Sched_Shipments_USR);
 PARAMETER(PAR.Day_3_Sched_Shipments_USR);
 PARAMETER(PAR.Day_4_Sched_Shipments_USR);
 PARAMETER(PAR.Day_5_Sched_Shipments_USR);
 PARAMETER(PAR.Day_6_Sched_Shipments_USR);
 PARAMETER(PAR.Day_7_Sched_Shipments_USR);
 PARAMETER(PAR.Day_8_Sched_Shipments_USR);
 PARAMETER(PAR.Day_9_Sched_Shipments_USR);
 PARAMETER(PAR.Day_10_Sched_Shipment_USR);
 PARAMETER(PAR.Day_11_Sched_Shipment_USR);
 PARAMETER(PAR.Day_12_Sched_Shipment_USR);
 PARAMETER(PAR.Day_13_Sched_Shipment_USR);
 PARAMETER(PAR.Day_14_Sched_Shipment_USR);
 PARAMETER(PAR.Day_15_Sched_Shipment_USR);
 PARAMETER(PAR.Day_16_Sched_Shipment_USR);
 PARAMETER(PAR.Day_17_Sched_Shipment_USR);
 PARAMETER(PAR.Day_18_Sched_Shipment_USR);
 PARAMETER(PAR.Day_19_Sched_Shipment_USR);
 PARAMETER(PAR.Day_20_Sched_Shipment_USR);
 PARAMETER(PAR.Day_21_Sched_Shipment_USR);
 PARAMETER(PAR.Status_Flag_1_Y_N);
 PARAMETER(PAR.Status_Flag_2_Y_N);
 PARAMETER(PAR.Status_Flag_3_Y_N);
 PARAMETER(PAR.Status_Flag_4_Y_N);
 PARAMETER(PAR.Status_Flag_5_Y_N);
 PARAMETER(PAR.Status_Flag_6_Y_N);
 PARAMETER(PAR.Status_Flag_7_Y_N);
 PARAMETER(PAR.Status_Flag_8_Y_N);
 PARAMETER(PAR.Status_Flag_11_Y_N);
 PARAMETER(PAR.Status_Flag_9_Y_N);
 PARAMETER(PAR.Status_Flag_10_Y_N);
 PARAMETER(PAR.Status_Flag_12_Y_N);
 PARAMETER(PAR.Status_Flag_13_Y_N);
 PARAMETER(PAR.Status_Flag_14_Y_N);
 PARAMETER(PAR.Status_Flag_15_Y_N);
 PARAMETER(PAR.Status_Flag_16_Y_N);
 PARAMETER(PAR.Status_Flag_17_Y_N);
 PARAMETER(PAR.Status_Flag_18_Y_N);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 PARAMETER(PAR.Status_Flag_20_Y_N);
 PARAMETER(PAR.Status_Flag_21_Y_N);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Piece_Count_Item);
 {
  //?Execute internal function

  //?02/21/11 PKD Do not need to Override Weight for Piece Count Items.
  // PAR.Ord/Sch Sts USR = CND.Scheduled
  PAR.Ord_Sch_Sts_USR = 'S';

  //?day 1
  CASE;

  // IF PAR.Avail Ship Date 1 USR is Entered
  IF PAR.Avail_Ship_Date_1_USR <> *ZERO;

  // AND PAR.Status Flag 1  Y/N is No
  AND PAR.Status_Flag_1_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 1
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 1 Sched Shipments USR = LCL.Quantity Scheduled SUM
  PAR.Day_1_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 1
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 2
  CASE;

  // IF PAR.Avail Ship Date 2 USR is Entered
  IF PAR.Avail_Ship_Date_2_USR <> *ZERO;

  // AND PAR.Status Flag 2  Y/N is No
  AND PAR.Status_Flag_2_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 2
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 2 Sched Shipments USR = LCL.Quantity Scheduled SUM
  PAR.Day_2_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 2
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 3
  CASE;

  // IF PAR.Avail Ship Date 3 USR is Entered
  IF PAR.Avail_Ship_Date_3_USR <> *ZERO;

  // AND PAR.Status Flag 3  Y/N is No
  AND PAR.Status_Flag_3_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 3
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 3 Sched Shipments USR = LCL.Quantity Scheduled SUM
  PAR.Day_3_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 3
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 4
  CASE;

  // IF PAR.Avail Ship Date 4 USR is Entered
  IF PAR.Avail_Ship_Date_4_USR <> *ZERO;

  // AND PAR.Status Flag 4  Y/N is no
  AND PAR.Status_Flag_4_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 4
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 4 Sched Shipments USR = LCL.Quantity Scheduled SUM
  PAR.Day_4_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 4
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 5
  CASE;

  // IF PAR.Avail Ship Date 5 USR is Entered
  IF PAR.Avail_Ship_Date_5_USR <> *ZERO;

  // AND PAR.Status Flag 5  Y/N is No
  AND PAR.Status_Flag_5_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 5
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 5 Sched Shipments USR = LCL.Quantity Scheduled SUM
  PAR.Day_5_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 5
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 6
  CASE;

  // IF PAR.Avail Ship Date 6 USR is Entered
  IF PAR.Avail_Ship_Date_6_USR <> *ZERO;

  // AND PAR.Status Flag 6  Y/N is No
  AND PAR.Status_Flag_6_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 6
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 6 Sched Shipments USR = LCL.Quantity Scheduled SUM
  PAR.Day_6_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 6
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 7
  CASE;

  // IF PAR.Avail Ship Date 7 USR is Entered
  IF PAR.Avail_Ship_Date_7_USR <> *ZERO;

  // AND PAR.Status Flag 7  Y/N is No
  AND PAR.Status_Flag_7_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 7
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 7 Sched Shipments USR = LCL.Quantity Scheduled SUM
  PAR.Day_7_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 7
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 8
  CASE;

  // IF PAR.Avail Ship Date 8 USR is Entered
  IF PAR.Avail_Ship_Date_8_USR <> *ZERO;

  // AND PAR.Status Flag 8  Y/N is No
  AND PAR.Status_Flag_8_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_8_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 8
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 8 Sched Shipments USR = LCL.Quantity Scheduled SUM
  PAR.Day_8_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 8
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 9
  CASE;

  // IF PAR.Avail Ship Date 9 USR is Entered
  IF PAR.Avail_Ship_Date_9_USR <> *ZERO;

  // AND PAR.Status Flag 9  Y/N is No
  AND PAR.Status_Flag_9_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_9_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 9
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 9 Sched Shipments USR = LCL.Quantity Scheduled SUM
  PAR.Day_9_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 9
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 10
  CASE;

  // IF PAR.Avail Ship Date 10 USR is Entered
  IF PAR.Avail_Ship_Date_10_USR <> *ZERO;

  // AND PAR.Status Flag 10 Y/N is No
  AND PAR.Status_Flag_10_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_10_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 10
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 10 Sched Shipment USR = LCL.Quantity Scheduled SUM
  PAR.Day_10_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 10
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 11
  CASE;

  // IF PAR.Avail Ship Date 11 USR is Entered
  IF PAR.Avail_Ship_Date_11_USR <> *ZERO;

  // AND PAR.Status Flag 11 Y/N is No
  AND PAR.Status_Flag_11_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_11_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 11
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 11 Sched Shipment USR = LCL.Quantity Scheduled SUM
  PAR.Day_11_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 11
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 12
  CASE;

  // IF PAR.Avail Ship Date 12 USR is Entered
  IF PAR.Avail_Ship_Date_12_USR <> *ZERO;

  // AND PAR.Status Flag 12 Y/N is No
  AND PAR.Status_Flag_12_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_12_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 12
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 12 Sched Shipment USR = LCL.Quantity Scheduled SUM
  PAR.Day_12_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 12
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 13
  CASE;

  // IF PAR.Avail Ship Date 13 USR is Entered
  IF PAR.Avail_Ship_Date_13_USR <> *ZERO;

  // AND PAR.Status Flag 13 Y/N is No
  AND PAR.Status_Flag_13_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_13_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 13
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 13 Sched Shipment USR = LCL.Quantity Scheduled SUM
  PAR.Day_13_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 13
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 14
  CASE;

  // IF PAR.Avail Ship Date 14 USR is Entered
  IF PAR.Avail_Ship_Date_14_USR <> *ZERO;

  // AND PAR.Status Flag 14 Y/N is No
  AND PAR.Status_Flag_14_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_14_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 14
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 14 Sched Shipment USR = LCL.Quantity Scheduled SUM
  PAR.Day_14_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 14
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 15
  CASE;

  // IF PAR.Avail Ship Date 15 USR is Entered
  IF PAR.Avail_Ship_Date_15_USR <> *ZERO;

  // AND PAR.Status Flag 15 Y/N is No
  AND PAR.Status_Flag_15_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_15_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 15
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 15 Sched Shipment USR = LCL.Quantity Scheduled SUM
  PAR.Day_15_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 15
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 16
  CASE;

  // IF PAR.Avail Ship Date 16 USR is Entered
  IF PAR.Avail_Ship_Date_16_USR <> *ZERO;

  // AND PAR.Status Flag 16 Y/N is No
  AND PAR.Status_Flag_16_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_16_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 16
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 16 Sched Shipment USR = LCL.Quantity Scheduled SUM
  PAR.Day_16_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 16
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 17
  CASE;

  // IF PAR.Avail Ship Date 17 USR is Entered
  IF PAR.Avail_Ship_Date_17_USR <> *ZERO;

  // AND PAR.Status Flag 17 Y/N is No
  AND PAR.Status_Flag_17_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_17_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 17
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 17 Sched Shipment USR = LCL.Quantity Scheduled SUM
  PAR.Day_17_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 17
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 18
  CASE;

  // IF PAR.Avail Ship Date 18 USR is Entered
  IF PAR.Avail_Ship_Date_18_USR <> *ZERO;

  // AND PAR.Status Flag 18 Y/N is No
  AND PAR.Status_Flag_18_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_18_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 18
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 18 Sched Shipment USR = LCL.Quantity Scheduled SUM
  PAR.Day_18_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 18
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 19
  CASE;

  // IF PAR.Avail Ship Date 19 USR is Entered
  IF PAR.Avail_Ship_Date_19_USR <> *ZERO;

  // AND PAR.Status Flag 19 Y/N is No
  AND PAR.Status_Flag_19_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_19_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 19
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 19 Sched Shipment USR = LCL.Quantity Scheduled SUM
  PAR.Day_19_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 19
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 20
  CASE;

  // IF PAR.Avail Ship Date 20 USR is Entered
  IF PAR.Avail_Ship_Date_20_USR <> *ZERO;

  // AND PAR.Status Flag 20 Y/N is No
  AND PAR.Status_Flag_20_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_20_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 20
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 20 Sched Shipment USR = LCL.Quantity Scheduled SUM
  PAR.Day_20_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 20
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 21
  CASE;

  // IF PAR.Avail Ship Date 21 USR is Entered
  IF PAR.Avail_Ship_Date_21_USR <> *ZERO;

  // AND PAR.Status Flag 21 Y/N is No
  AND PAR.Status_Flag_21_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_21_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 21
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 21 Sched Shipment USR = LCL.Quantity Scheduled SUM
  PAR.Day_21_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 21
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

 }

 QUIT;

 ENDIF;

 CASE;

 // IF DB1.PS Available Ship Date GE JOB.*Job date
 IF DB1.PS_Available_Ship_Date >= JOB.*Job_date;

 //?Calculate Availability
 CASE;

 // IF PAR.Primary/Load Sts USR is Primary
 IF PAR.Primary_Load_Sts_USR = 'P';

 // AND PAR.Unit Weight is Greater than zero
 AND ( PAR.Unit_Weight > *ZERO;

 // OR PAR.Piece Count Item is yes
 OR PAR.Piece_Count_Item = 'Y' );

 //?Calcualte PA w/Unit Weight
 CASE;

 // IF PAR.Avail Ship Date 1 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_1_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Unit Weight  XF.
 CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
 PARAMETER(PAR.Avail_Ship_Date_1_USR);
 PARAMETER(PAR.USR_Day_1);
 PARAMETER(PAR.Day_1_Inventory_USR);
 PARAMETER(PAR.Day_1_Production_USR);
 PARAMETER(PAR.Day_1_Sales_USR);
 PARAMETER(PAR.Day_1_Adjustments_USR);
 PARAMETER(PAR.Day_1_Availability_USR);
 PARAMETER(PAR.Day_1_Sched_Shipments_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

 // PAR.Status Flag 1  Y/N = CND.Yes
 PAR.Status_Flag_1_Y_N = 'Y';

 //?Calcualte PA w/Unit Weight
 // IF PAR.Avail Ship Date 2 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_2_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Unit Weight  XF.
 CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
 PARAMETER(PAR.Avail_Ship_Date_2_USR);
 PARAMETER(PAR.USR_Day_2);
 PARAMETER(PAR.Day_2_Inventory_USR);
 PARAMETER(PAR.Day_2_Production_USR);
 PARAMETER(PAR.Day_2_Sales_USR);
 PARAMETER(PAR.Day_2_Adjustments_USR);
 PARAMETER(PAR.Day_2_Availability_USR);
 PARAMETER(PAR.Day_2_Sched_Shipments_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

 // PAR.Status Flag 2  Y/N = CND.Yes
 PAR.Status_Flag_2_Y_N = 'Y';

 //?Calcualte PA w/Unit Weight
 // IF PAR.Avail Ship Date 3 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_3_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Unit Weight  XF.
 CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
 PARAMETER(PAR.Avail_Ship_Date_3_USR);
 PARAMETER(PAR.USR_Day_3);
 PARAMETER(PAR.Day_3_Inventory_USR);
 PARAMETER(PAR.Day_3_Production_USR);
 PARAMETER(PAR.Day_3_Sales_USR);
 PARAMETER(PAR.Day_3_Adjustments_USR);
 PARAMETER(PAR.Day_3_Availability_USR);
 PARAMETER(PAR.Day_3_Sched_Shipments_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

 // PAR.Status Flag 3  Y/N = CND.Yes
 PAR.Status_Flag_3_Y_N = 'Y';

 //?Calcualte PA w/Unit Weight
 // IF PAR.Avail Ship Date 4 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_4_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Unit Weight  XF.
 CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
 PARAMETER(PAR.Avail_Ship_Date_4_USR);
 PARAMETER(PAR.USR_Day_4);
 PARAMETER(PAR.Day_4_Inventory_USR);
 PARAMETER(PAR.Day_4_Production_USR);
 PARAMETER(PAR.Day_4_Sales_USR);
 PARAMETER(PAR.Day_4_Adjustments_USR);
 PARAMETER(PAR.Day_4_Availability_USR);
 PARAMETER(PAR.Day_4_Sched_Shipments_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

 // PAR.Status Flag 4  Y/N = CND.yes
 PAR.Status_Flag_4_Y_N = 'Y';

 //?Calcualte PA w/Unit Weight
 // IF PAR.Avail Ship Date 5 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_5_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Unit Weight  XF.
 CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
 PARAMETER(PAR.Avail_Ship_Date_5_USR);
 PARAMETER(PAR.USR_Day_5);
 PARAMETER(PAR.Day_5_Inventory_USR);
 PARAMETER(PAR.Day_5_Production_USR);
 PARAMETER(PAR.Day_5_Sales_USR);
 PARAMETER(PAR.Day_5_Adjustments_USR);
 PARAMETER(PAR.Day_5_Availability_USR);
 PARAMETER(PAR.Day_5_Sched_Shipments_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

 // PAR.Status Flag 5  Y/N = CND.Yes
 PAR.Status_Flag_5_Y_N = 'Y';

 //?Calcualte PA w/Unit Weight
 // IF PAR.Avail Ship Date 6 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_6_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Unit Weight  XF.
 CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
 PARAMETER(PAR.Avail_Ship_Date_6_USR);
 PARAMETER(PAR.USR_Day_6);
 PARAMETER(PAR.Day_6_Inventory_USR);
 PARAMETER(PAR.Day_6_Production_USR);
 PARAMETER(PAR.Day_6_Sales_USR);
 PARAMETER(PAR.Day_6_Adjustments_USR);
 PARAMETER(PAR.Day_6_Availability_USR);
 PARAMETER(PAR.Day_6_Sched_Shipments_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

 // PAR.Status Flag 6  Y/N = CND.Yes
 PAR.Status_Flag_6_Y_N = 'Y';

 //?Calcualte PA w/Unit Weight
 // IF PAR.Avail Ship Date 7 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_7_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Unit Weight  XF.
 CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
 PARAMETER(PAR.Avail_Ship_Date_7_USR);
 PARAMETER(PAR.USR_Day_7);
 PARAMETER(WRK.Quantity_Inventory_USR);
 PARAMETER(PAR.Day_7_Production_USR);
 PARAMETER(PAR.Day_7_Sales_USR);
 PARAMETER(PAR.Day_7_Adjustments_USR);
 PARAMETER(PAR.Day_7_Availability_USR);
 PARAMETER(PAR.Day_7_Sched_Shipments_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

 // PAR.Status Flag 7  Y/N = CND.Yes
 PAR.Status_Flag_7_Y_N = 'Y';

 //?Calcualte PA w/Unit Weight
 // IF PAR.Avail Ship Date 8 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_8_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Unit Weight  XF.
 CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
 PARAMETER(PAR.Avail_Ship_Date_8_USR);
 PARAMETER(PAR.USR_Day_8);
 PARAMETER(WRK.Quantity_Inventory_USR);
 PARAMETER(PAR.Day_8_Production_USR);
 PARAMETER(PAR.Day_8_Sales_USR);
 PARAMETER(PAR.Day_8_Adjustments_USR);
 PARAMETER(PAR.Day_8_Availability_USR);
 PARAMETER(PAR.Day_8_Sched_Shipments_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

 // PAR.Status Flag 8  Y/N = CND.Yes
 PAR.Status_Flag_8_Y_N = 'Y';

 //?Calcualte PA w/Unit Weight
 // IF PAR.Avail Ship Date 9 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_9_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Unit Weight  XF.
 CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
 PARAMETER(PAR.Avail_Ship_Date_9_USR);
 PARAMETER(PAR.USR_Day_9);
 PARAMETER(WRK.Quantity_Inventory_USR);
 PARAMETER(PAR.Day_9_Production_USR);
 PARAMETER(PAR.Day_9_Sales_USR);
 PARAMETER(PAR.Day_9_Adjustments_USR);
 PARAMETER(PAR.Day_9_Availability_USR);
 PARAMETER(PAR.Day_9_Sched_Shipments_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

 // PAR.Status Flag 9  Y/N = CND.Yes
 PAR.Status_Flag_9_Y_N = 'Y';

 //?Calcualte PA w/Unit Weight
 // IF PAR.Avail Ship Date 10 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_10_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Unit Weight  XF.
 CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
 PARAMETER(PAR.Avail_Ship_Date_10_USR);
 PARAMETER(PAR.USR_Day_10);
 PARAMETER(WRK.Quantity_Inventory_USR);
 PARAMETER(PAR.Day_10_Production_USR);
 PARAMETER(PAR.Day_10_Sales_USR);
 PARAMETER(PAR.Day_10_Adjustments_USR);
 PARAMETER(PAR.Day_10_Availability_USR);
 PARAMETER(PAR.Day_10_Sched_Shipment_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

 // PAR.Status Flag 10 Y/N = CND.Yes
 PAR.Status_Flag_10_Y_N = 'Y';

 //?Calcualte PA w/Unit Weight
 // IF PAR.Avail Ship Date 11 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_11_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Unit Weight  XF.
 CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
 PARAMETER(PAR.Avail_Ship_Date_11_USR);
 PARAMETER(PAR.USR_Day_11);
 PARAMETER(WRK.Quantity_Inventory_USR);
 PARAMETER(PAR.Day_11_Production_USR);
 PARAMETER(PAR.Day_11_Sales_USR);
 PARAMETER(PAR.Day_11_Adjustments_USR);
 PARAMETER(PAR.Day_11_Availability_USR);
 PARAMETER(PAR.Day_11_Sched_Shipment_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

 // PAR.Status Flag 11 Y/N = CND.Yes
 PAR.Status_Flag_11_Y_N = 'Y';

 //?Calcualte PA w/Unit Weight
 // IF PAR.Avail Ship Date 12 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_12_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Unit Weight  XF.
 CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
 PARAMETER(PAR.Avail_Ship_Date_12_USR);
 PARAMETER(PAR.USR_Day_12);
 PARAMETER(WRK.Quantity_Inventory_USR);
 PARAMETER(PAR.Day_12_Production_USR);
 PARAMETER(PAR.Day_12_Sales_USR);
 PARAMETER(PAR.Day_12_Adjustments_USR);
 PARAMETER(PAR.Day_12_Availability_USR);
 PARAMETER(PAR.Day_12_Sched_Shipment_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

 // PAR.Status Flag 12 Y/N = CND.Yes
 PAR.Status_Flag_12_Y_N = 'Y';

 //?Calcualte PA w/Unit Weight
 // IF PAR.Avail Ship Date 13 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_13_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Unit Weight  XF.
 CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
 PARAMETER(PAR.Avail_Ship_Date_13_USR);
 PARAMETER(PAR.USR_Day_13);
 PARAMETER(WRK.Quantity_Inventory_USR);
 PARAMETER(PAR.Day_13_Production_USR);
 PARAMETER(PAR.Day_13_Sales_USR);
 PARAMETER(PAR.Day_13_Adjustments_USR);
 PARAMETER(PAR.Day_13_Availability_USR);
 PARAMETER(PAR.Day_13_Sched_Shipment_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

 // PAR.Status Flag 13 Y/N = CND.Yes
 PAR.Status_Flag_13_Y_N = 'Y';

 //?Calcualte PA w/Unit Weight
 // IF PAR.Avail Ship Date 14 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_14_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Unit Weight  XF.
 CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
 PARAMETER(PAR.Avail_Ship_Date_14_USR);
 PARAMETER(PAR.USR_Day_14);
 PARAMETER(WRK.Quantity_Inventory_USR);
 PARAMETER(PAR.Day_14_Production_USR);
 PARAMETER(PAR.Day_14_Sales_USR);
 PARAMETER(PAR.Day_14_Adjustments_USR);
 PARAMETER(PAR.Day_14_Availability_USR);
 PARAMETER(PAR.Day_14_Sched_Shipment_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

 // PAR.Status Flag 14 Y/N = CND.Yes
 PAR.Status_Flag_14_Y_N = 'Y';

 //?Calcualte PA w/Unit Weight
 // IF PAR.Avail Ship Date 15 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_15_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Unit Weight  XF.
 CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
 PARAMETER(PAR.Avail_Ship_Date_15_USR);
 PARAMETER(PAR.USR_Day_15);
 PARAMETER(WRK.Quantity_Inventory_USR);
 PARAMETER(PAR.Day_15_Production_USR);
 PARAMETER(PAR.Day_15_Sales_USR);
 PARAMETER(PAR.Day_15_Adjustments_USR);
 PARAMETER(PAR.Day_15_Availability_USR);
 PARAMETER(PAR.Day_15_Sched_Shipment_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

 // PAR.Status Flag 15 Y/N = CND.Yes
 PAR.Status_Flag_15_Y_N = 'Y';

 //?Calcualte PA w/Unit Weight
 // IF PAR.Avail Ship Date 16 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_16_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Unit Weight  XF.
 CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
 PARAMETER(PAR.Avail_Ship_Date_16_USR);
 PARAMETER(PAR.USR_Day_16);
 PARAMETER(WRK.Quantity_Inventory_USR);
 PARAMETER(PAR.Day_16_Production_USR);
 PARAMETER(PAR.Day_16_Sales_USR);
 PARAMETER(PAR.Day_16_Adjustments_USR);
 PARAMETER(PAR.Day_16_Availability_USR);
 PARAMETER(PAR.Day_16_Sched_Shipment_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

 // PAR.Status Flag 16 Y/N = CND.Yes
 PAR.Status_Flag_16_Y_N = 'Y';

 //?Calcualte PA w/Unit Weight
 // IF PAR.Avail Ship Date 17 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_17_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Unit Weight  XF.
 CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
 PARAMETER(PAR.Avail_Ship_Date_17_USR);
 PARAMETER(PAR.USR_Day_17);
 PARAMETER(WRK.Quantity_Inventory_USR);
 PARAMETER(PAR.Day_17_Production_USR);
 PARAMETER(PAR.Day_17_Sales_USR);
 PARAMETER(PAR.Day_17_Adjustments_USR);
 PARAMETER(PAR.Day_17_Availability_USR);
 PARAMETER(PAR.Day_17_Sched_Shipment_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

 // PAR.Status Flag 17 Y/N = CND.Yes
 PAR.Status_Flag_17_Y_N = 'Y';

 //?Calcualte PA w/Unit Weight
 // IF PAR.Avail Ship Date 18 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_18_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Unit Weight  XF.
 CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
 PARAMETER(PAR.Avail_Ship_Date_18_USR);
 PARAMETER(PAR.USR_Day_18);
 PARAMETER(WRK.Quantity_Inventory_USR);
 PARAMETER(PAR.Day_18_Production_USR);
 PARAMETER(PAR.Day_18_Sales_USR);
 PARAMETER(PAR.Day_18_Adjustments_USR);
 PARAMETER(PAR.Day_18_Availability_USR);
 PARAMETER(PAR.Day_18_Sched_Shipment_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

 // PAR.Status Flag 18 Y/N = CND.Yes
 PAR.Status_Flag_18_Y_N = 'Y';

 //?Calcualte PA w/Unit Weight
 // IF PAR.Avail Ship Date 19 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_19_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Unit Weight  XF.
 CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
 PARAMETER(PAR.Avail_Ship_Date_19_USR);
 PARAMETER(PAR.USR_Day_19);
 PARAMETER(WRK.Quantity_Inventory_USR);
 PARAMETER(PAR.Day_19_Production_USR);
 PARAMETER(PAR.Day_19_Sales_USR);
 PARAMETER(PAR.Day_19_Adjustments_USR);
 PARAMETER(PAR.Day_19_Availability_USR);
 PARAMETER(PAR.Day_19_Sched_Shipment_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

 // PAR.Status Flag 19 Y/N = CND.Yes
 PAR.Status_Flag_19_Y_N = 'Y';

 //?Calcualte PA w/Unit Weight
 // IF PAR.Avail Ship Date 20 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_20_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Unit Weight  XF.
 CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
 PARAMETER(PAR.Avail_Ship_Date_20_USR);
 PARAMETER(PAR.USR_Day_20);
 PARAMETER(WRK.Quantity_Inventory_USR);
 PARAMETER(PAR.Day_20_Production_USR);
 PARAMETER(PAR.Day_20_Sales_USR);
 PARAMETER(PAR.Day_20_Adjustments_USR);
 PARAMETER(PAR.Day_20_Availability_USR);
 PARAMETER(PAR.Day_20_Sched_Shipment_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

 // PAR.Status Flag 20 Y/N = CND.Yes
 PAR.Status_Flag_20_Y_N = 'Y';

 //?Calcualte PA w/Unit Weight
 // IF PAR.Avail Ship Date 21 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_21_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Unit Weight  XF.
 CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
 PARAMETER(PAR.Avail_Ship_Date_21_USR);
 PARAMETER(PAR.USR_Day_21);
 PARAMETER(WRK.Quantity_Inventory_USR);
 PARAMETER(PAR.Day_21_Production_USR);
 PARAMETER(PAR.Day_21_Sales_USR);
 PARAMETER(PAR.Day_21_Adjustments_USR);
 PARAMETER(PAR.Day_21_Availability_USR);
 PARAMETER(PAR.Day_21_Sched_Shipment_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

 // PAR.Status Flag 21 Y/N = CND.Yes
 PAR.Status_Flag_21_Y_N = 'Y';

 ENDIF;

 //?Calculate Availability
 // IF PAR.Primary/Load Sts USR is Load Size
 IF PAR.Primary_Load_Sts_USR = 'L';

 // AND PAR.Load Size USR is GT Zero
 AND PAR.Load_Size_USR > *ZERO;

 //?Calculate PA w/ Load Size
 CASE;

 // IF PAR.Avail Ship Date 1 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_1_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Load Size    XF.
 CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
 PARAMETER(PAR.Avail_Ship_Date_1_USR);
 PARAMETER(PAR.USR_Day_1);
 PARAMETER(PAR.Day_1_Inventory_USR);
 PARAMETER(PAR.Day_1_Production_USR);
 PARAMETER(PAR.Day_1_Sales_USR);
 PARAMETER(PAR.Day_1_Adjustments_USR);
 PARAMETER(PAR.Day_1_Availability_USR);
 PARAMETER(PAR.Day_1_Sched_Shipments_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Pieces_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(DB1.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);

 // PAR.Status Flag 1  Y/N = CND.Yes
 PAR.Status_Flag_1_Y_N = 'Y';

 //?Calculate PA w/ Load Size
 // IF PAR.Avail Ship Date 2 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_2_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Load Size    XF.
 CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
 PARAMETER(PAR.Avail_Ship_Date_2_USR);
 PARAMETER(PAR.USR_Day_2);
 PARAMETER(PAR.Day_2_Inventory_USR);
 PARAMETER(PAR.Day_2_Production_USR);
 PARAMETER(PAR.Day_2_Sales_USR);
 PARAMETER(PAR.Day_2_Adjustments_USR);
 PARAMETER(PAR.Day_2_Availability_USR);
 PARAMETER(PAR.Day_2_Sched_Shipments_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Pieces_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(DB1.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);

 // PAR.Status Flag 2  Y/N = CND.Yes
 PAR.Status_Flag_2_Y_N = 'Y';

 //?Calculate PA w/ Load Size
 // IF PAR.Avail Ship Date 3 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_3_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Load Size    XF.
 CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
 PARAMETER(PAR.Avail_Ship_Date_3_USR);
 PARAMETER(PAR.USR_Day_3);
 PARAMETER(PAR.Day_3_Inventory_USR);
 PARAMETER(PAR.Day_3_Production_USR);
 PARAMETER(PAR.Day_3_Sales_USR);
 PARAMETER(PAR.Day_3_Adjustments_USR);
 PARAMETER(PAR.Day_3_Availability_USR);
 PARAMETER(PAR.Day_3_Sched_Shipments_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Pieces_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(DB1.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);

 // PAR.Status Flag 3  Y/N = CND.Yes
 PAR.Status_Flag_3_Y_N = 'Y';

 //?Calculate PA w/ Load Size
 // IF PAR.Avail Ship Date 4 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_4_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Load Size    XF.
 CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
 PARAMETER(PAR.Avail_Ship_Date_4_USR);
 PARAMETER(PAR.USR_Day_4);
 PARAMETER(PAR.Day_4_Inventory_USR);
 PARAMETER(PAR.Day_4_Production_USR);
 PARAMETER(PAR.Day_4_Sales_USR);
 PARAMETER(PAR.Day_4_Adjustments_USR);
 PARAMETER(PAR.Day_4_Availability_USR);
 PARAMETER(PAR.Day_4_Sched_Shipments_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Pieces_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(DB1.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);

 // PAR.Status Flag 4  Y/N = CND.yes
 PAR.Status_Flag_4_Y_N = 'Y';

 //?Calculate PA w/ Load Size
 // IF PAR.Avail Ship Date 5 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_5_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Load Size    XF.
 CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
 PARAMETER(PAR.Avail_Ship_Date_5_USR);
 PARAMETER(PAR.USR_Day_5);
 PARAMETER(PAR.Day_5_Inventory_USR);
 PARAMETER(PAR.Day_5_Production_USR);
 PARAMETER(PAR.Day_5_Sales_USR);
 PARAMETER(PAR.Day_5_Adjustments_USR);
 PARAMETER(PAR.Day_5_Availability_USR);
 PARAMETER(PAR.Day_5_Sched_Shipments_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Pieces_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(DB1.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);

 // PAR.Status Flag 5  Y/N = CND.Yes
 PAR.Status_Flag_5_Y_N = 'Y';

 //?Calculate PA w/ Load Size
 // IF PAR.Avail Ship Date 6 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_6_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Load Size    XF.
 CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
 PARAMETER(PAR.Avail_Ship_Date_6_USR);
 PARAMETER(PAR.USR_Day_6);
 PARAMETER(PAR.Day_6_Inventory_USR);
 PARAMETER(PAR.Day_6_Production_USR);
 PARAMETER(PAR.Day_6_Sales_USR);
 PARAMETER(PAR.Day_6_Adjustments_USR);
 PARAMETER(PAR.Day_6_Availability_USR);
 PARAMETER(PAR.Day_6_Sched_Shipments_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Pieces_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(DB1.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);

 // PAR.Status Flag 6  Y/N = CND.Yes
 PAR.Status_Flag_6_Y_N = 'Y';

 //?Calculate PA w/ Load Size
 // IF PAR.Avail Ship Date 7 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_7_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Load Size    XF.
 CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
 PARAMETER(PAR.Avail_Ship_Date_7_USR);
 PARAMETER(PAR.USR_Day_7);
 PARAMETER(WRK.Quantity_Inventory_USR);
 PARAMETER(PAR.Day_7_Production_USR);
 PARAMETER(PAR.Day_7_Sales_USR);
 PARAMETER(PAR.Day_7_Adjustments_USR);
 PARAMETER(PAR.Day_7_Availability_USR);
 PARAMETER(PAR.Day_7_Sched_Shipments_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Pieces_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(DB1.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);

 // PAR.Status Flag 7  Y/N = CND.Yes
 PAR.Status_Flag_7_Y_N = 'Y';

 //?Calculate PA w/ Load Size
 // IF PAR.Avail Ship Date 8 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_8_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Load Size    XF.
 CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
 PARAMETER(PAR.Avail_Ship_Date_8_USR);
 PARAMETER(PAR.USR_Day_8);
 PARAMETER(WRK.Quantity_Inventory_USR);
 PARAMETER(PAR.Day_8_Production_USR);
 PARAMETER(PAR.Day_8_Sales_USR);
 PARAMETER(PAR.Day_8_Adjustments_USR);
 PARAMETER(PAR.Day_8_Availability_USR);
 PARAMETER(PAR.Day_8_Sched_Shipments_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Pieces_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(DB1.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);

 // PAR.Status Flag 8  Y/N = CND.Yes
 PAR.Status_Flag_8_Y_N = 'Y';

 //?Calculate PA w/ Load Size
 // IF PAR.Avail Ship Date 9 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_9_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Load Size    XF.
 CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
 PARAMETER(PAR.Avail_Ship_Date_9_USR);
 PARAMETER(PAR.USR_Day_9);
 PARAMETER(WRK.Quantity_Inventory_USR);
 PARAMETER(PAR.Day_9_Production_USR);
 PARAMETER(PAR.Day_9_Sales_USR);
 PARAMETER(PAR.Day_9_Adjustments_USR);
 PARAMETER(PAR.Day_9_Availability_USR);
 PARAMETER(PAR.Day_9_Sched_Shipments_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Pieces_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(DB1.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);

 // PAR.Status Flag 9  Y/N = CND.Yes
 PAR.Status_Flag_9_Y_N = 'Y';

 //?Calculate PA w/ Load Size
 // IF PAR.Avail Ship Date 10 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_10_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Load Size    XF.
 CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
 PARAMETER(PAR.Avail_Ship_Date_10_USR);
 PARAMETER(PAR.USR_Day_10);
 PARAMETER(WRK.Quantity_Inventory_USR);
 PARAMETER(PAR.Day_10_Production_USR);
 PARAMETER(PAR.Day_10_Sales_USR);
 PARAMETER(PAR.Day_10_Adjustments_USR);
 PARAMETER(PAR.Day_10_Availability_USR);
 PARAMETER(PAR.Day_10_Sched_Shipment_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Pieces_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(DB1.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);

 // PAR.Status Flag 10 Y/N = CND.Yes
 PAR.Status_Flag_10_Y_N = 'Y';

 //?Calculate PA w/ Load Size
 // IF PAR.Avail Ship Date 11 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_11_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Load Size    XF.
 CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
 PARAMETER(PAR.Avail_Ship_Date_11_USR);
 PARAMETER(PAR.USR_Day_11);
 PARAMETER(WRK.Quantity_Inventory_USR);
 PARAMETER(PAR.Day_11_Production_USR);
 PARAMETER(PAR.Day_11_Sales_USR);
 PARAMETER(PAR.Day_11_Adjustments_USR);
 PARAMETER(PAR.Day_11_Availability_USR);
 PARAMETER(PAR.Day_11_Sched_Shipment_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Pieces_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(DB1.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);

 // PAR.Status Flag 11 Y/N = CND.Yes
 PAR.Status_Flag_11_Y_N = 'Y';

 //?Calculate PA w/ Load Size
 // IF PAR.Avail Ship Date 12 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_12_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Load Size    XF.
 CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
 PARAMETER(PAR.Avail_Ship_Date_12_USR);
 PARAMETER(PAR.USR_Day_12);
 PARAMETER(WRK.Quantity_Inventory_USR);
 PARAMETER(PAR.Day_12_Production_USR);
 PARAMETER(PAR.Day_12_Sales_USR);
 PARAMETER(PAR.Day_12_Adjustments_USR);
 PARAMETER(PAR.Day_12_Availability_USR);
 PARAMETER(PAR.Day_12_Sched_Shipment_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Pieces_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(DB1.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);

 // PAR.Status Flag 12 Y/N = CND.Yes
 PAR.Status_Flag_12_Y_N = 'Y';

 //?Calculate PA w/ Load Size
 // IF PAR.Avail Ship Date 13 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_13_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Load Size    XF.
 CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
 PARAMETER(PAR.Avail_Ship_Date_13_USR);
 PARAMETER(PAR.USR_Day_13);
 PARAMETER(WRK.Quantity_Inventory_USR);
 PARAMETER(PAR.Day_13_Production_USR);
 PARAMETER(PAR.Day_13_Sales_USR);
 PARAMETER(PAR.Day_13_Adjustments_USR);
 PARAMETER(PAR.Day_13_Availability_USR);
 PARAMETER(PAR.Day_13_Sched_Shipment_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Pieces_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(DB1.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);

 // PAR.Status Flag 13 Y/N = CND.Yes
 PAR.Status_Flag_13_Y_N = 'Y';

 //?Calculate PA w/ Load Size
 // IF PAR.Avail Ship Date 14 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_14_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Load Size    XF.
 CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
 PARAMETER(PAR.Avail_Ship_Date_14_USR);
 PARAMETER(PAR.USR_Day_14);
 PARAMETER(WRK.Quantity_Inventory_USR);
 PARAMETER(PAR.Day_14_Production_USR);
 PARAMETER(PAR.Day_14_Sales_USR);
 PARAMETER(PAR.Day_14_Adjustments_USR);
 PARAMETER(PAR.Day_14_Availability_USR);
 PARAMETER(PAR.Day_14_Sched_Shipment_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Pieces_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(DB1.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);

 // PAR.Status Flag 14 Y/N = CND.Yes
 PAR.Status_Flag_14_Y_N = 'Y';

 //?Calculate PA w/ Load Size
 // IF PAR.Avail Ship Date 15 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_15_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Load Size    XF.
 CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
 PARAMETER(PAR.Avail_Ship_Date_15_USR);
 PARAMETER(PAR.USR_Day_15);
 PARAMETER(WRK.Quantity_Inventory_USR);
 PARAMETER(PAR.Day_15_Production_USR);
 PARAMETER(PAR.Day_15_Sales_USR);
 PARAMETER(PAR.Day_15_Adjustments_USR);
 PARAMETER(PAR.Day_15_Availability_USR);
 PARAMETER(PAR.Day_15_Sched_Shipment_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Pieces_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(DB1.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);

 // PAR.Status Flag 15 Y/N = CND.Yes
 PAR.Status_Flag_15_Y_N = 'Y';

 //?Calculate PA w/ Load Size
 // IF PAR.Avail Ship Date 16 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_16_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Load Size    XF.
 CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
 PARAMETER(PAR.Avail_Ship_Date_16_USR);
 PARAMETER(PAR.USR_Day_16);
 PARAMETER(WRK.Quantity_Inventory_USR);
 PARAMETER(PAR.Day_16_Production_USR);
 PARAMETER(PAR.Day_16_Sales_USR);
 PARAMETER(PAR.Day_16_Adjustments_USR);
 PARAMETER(PAR.Day_16_Availability_USR);
 PARAMETER(PAR.Day_16_Sched_Shipment_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Pieces_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(DB1.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);

 // PAR.Status Flag 16 Y/N = CND.Yes
 PAR.Status_Flag_16_Y_N = 'Y';

 //?Calculate PA w/ Load Size
 // IF PAR.Avail Ship Date 17 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_17_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Load Size    XF.
 CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
 PARAMETER(PAR.Avail_Ship_Date_17_USR);
 PARAMETER(PAR.USR_Day_17);
 PARAMETER(WRK.Quantity_Inventory_USR);
 PARAMETER(PAR.Day_17_Production_USR);
 PARAMETER(PAR.Day_17_Sales_USR);
 PARAMETER(PAR.Day_17_Adjustments_USR);
 PARAMETER(PAR.Day_17_Availability_USR);
 PARAMETER(PAR.Day_17_Sched_Shipment_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Pieces_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(DB1.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);

 // PAR.Status Flag 17 Y/N = CND.Yes
 PAR.Status_Flag_17_Y_N = 'Y';

 //?Calculate PA w/ Load Size
 // IF PAR.Avail Ship Date 18 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_18_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Load Size    XF.
 CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
 PARAMETER(PAR.Avail_Ship_Date_18_USR);
 PARAMETER(PAR.USR_Day_18);
 PARAMETER(WRK.Quantity_Inventory_USR);
 PARAMETER(PAR.Day_18_Production_USR);
 PARAMETER(PAR.Day_18_Sales_USR);
 PARAMETER(PAR.Day_18_Adjustments_USR);
 PARAMETER(PAR.Day_18_Availability_USR);
 PARAMETER(PAR.Day_18_Sched_Shipment_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Pieces_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(DB1.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);

 // PAR.Status Flag 18 Y/N = CND.Yes
 PAR.Status_Flag_18_Y_N = 'Y';

 //?Calculate PA w/ Load Size
 // IF PAR.Avail Ship Date 19 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_19_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Load Size    XF.
 CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
 PARAMETER(PAR.Avail_Ship_Date_19_USR);
 PARAMETER(PAR.USR_Day_19);
 PARAMETER(WRK.Quantity_Inventory_USR);
 PARAMETER(PAR.Day_19_Production_USR);
 PARAMETER(PAR.Day_19_Sales_USR);
 PARAMETER(PAR.Day_19_Adjustments_USR);
 PARAMETER(PAR.Day_19_Availability_USR);
 PARAMETER(PAR.Day_19_Sched_Shipment_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Pieces_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(DB1.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);

 // PAR.Status Flag 19 Y/N = CND.Yes
 PAR.Status_Flag_19_Y_N = 'Y';

 //?Calculate PA w/ Load Size
 // IF PAR.Avail Ship Date 20 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_20_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Load Size    XF.
 CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
 PARAMETER(PAR.Avail_Ship_Date_20_USR);
 PARAMETER(PAR.USR_Day_20);
 PARAMETER(WRK.Quantity_Inventory_USR);
 PARAMETER(PAR.Day_20_Production_USR);
 PARAMETER(PAR.Day_20_Sales_USR);
 PARAMETER(PAR.Day_20_Adjustments_USR);
 PARAMETER(PAR.Day_20_Availability_USR);
 PARAMETER(PAR.Day_20_Sched_Shipment_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Pieces_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(DB1.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);

 // PAR.Status Flag 20 Y/N = CND.Yes
 PAR.Status_Flag_20_Y_N = 'Y';

 //?Calculate PA w/ Load Size
 // IF PAR.Avail Ship Date 21 USR EQ DB1.PS Available Ship Date
 IF PAR.Avail_Ship_Date_21_USR = DB1.PS_Available_Ship_Date;

 // Call program Clc PA w/Load Size    XF.
 CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
 PARAMETER(PAR.Avail_Ship_Date_21_USR);
 PARAMETER(PAR.USR_Day_21);
 PARAMETER(WRK.Quantity_Inventory_USR);
 PARAMETER(PAR.Day_21_Production_USR);
 PARAMETER(PAR.Day_21_Sales_USR);
 PARAMETER(PAR.Day_21_Adjustments_USR);
 PARAMETER(PAR.Day_21_Availability_USR);
 PARAMETER(PAR.Day_21_Sched_Shipment_USR);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Production_Type);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.PS_Weight_Standard);
 PARAMETER(DB1.PS_Pieces_Standard);
 PARAMETER(DB1.PS_Weight_Converted);
 PARAMETER(DB1.PS_Pieces_Converted);
 PARAMETER(DB1.PS_Weight_Shipping_Adj);
 PARAMETER(DB1.PS_Pieces_Shipping_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Adj);
 PARAMETER(DB1.PS_Pieces_Prod_Adj);
 PARAMETER(DB1.PS_Weight_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Prod_Allocated);
 PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
 PARAMETER(DB1.PS_Weight_Ordered);
 PARAMETER(DB1.PS_Pieces_Ordered);
 PARAMETER(DB1.PS_Weight_Sched_Prod);
 PARAMETER(DB1.PS_Pieces_Sched_Prod);
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);

 // PAR.Status Flag 21 Y/N = CND.Yes
 PAR.Status_Flag_21_Y_N = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

 //?USER: Exit processing

 EXECUTE FUNCTION(Rtv PA Ship Only-21  IF) TYPE(EXCINTFUN)                       AC1815983;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Avail_Ship_Date_1_USR);
 PARAMETER(PAR.Avail_Ship_Date_2_USR);
 PARAMETER(PAR.Avail_Ship_Date_3_USR);
 PARAMETER(PAR.Avail_Ship_Date_4_USR);
 PARAMETER(PAR.Avail_Ship_Date_5_USR);
 PARAMETER(PAR.Avail_Ship_Date_6_USR);
 PARAMETER(PAR.Avail_Ship_Date_7_USR);
 PARAMETER(PAR.Avail_Ship_Date_8_USR);
 PARAMETER(PAR.Avail_Ship_Date_9_USR);
 PARAMETER(PAR.Avail_Ship_Date_10_USR);
 PARAMETER(PAR.Avail_Ship_Date_11_USR);
 PARAMETER(PAR.Avail_Ship_Date_12_USR);
 PARAMETER(PAR.Avail_Ship_Date_13_USR);
 PARAMETER(PAR.Avail_Ship_Date_14_USR);
 PARAMETER(PAR.Avail_Ship_Date_15_USR);
 PARAMETER(PAR.Avail_Ship_Date_16_USR);
 PARAMETER(PAR.Avail_Ship_Date_17_USR);
 PARAMETER(PAR.Avail_Ship_Date_18_USR);
 PARAMETER(PAR.Avail_Ship_Date_19_USR);
 PARAMETER(PAR.Avail_Ship_Date_20_USR);
 PARAMETER(PAR.Avail_Ship_Date_21_USR);
 PARAMETER(PAR.Primary_Load_Sts_USR);
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Day_1_Sched_Shipments_USR);
 PARAMETER(PAR.Day_2_Sched_Shipments_USR);
 PARAMETER(PAR.Day_3_Sched_Shipments_USR);
 PARAMETER(PAR.Day_4_Sched_Shipments_USR);
 PARAMETER(PAR.Day_5_Sched_Shipments_USR);
 PARAMETER(PAR.Day_6_Sched_Shipments_USR);
 PARAMETER(PAR.Day_7_Sched_Shipments_USR);
 PARAMETER(PAR.Day_8_Sched_Shipments_USR);
 PARAMETER(PAR.Day_9_Sched_Shipments_USR);
 PARAMETER(PAR.Day_10_Sched_Shipment_USR);
 PARAMETER(PAR.Day_11_Sched_Shipment_USR);
 PARAMETER(PAR.Day_12_Sched_Shipment_USR);
 PARAMETER(PAR.Day_13_Sched_Shipment_USR);
 PARAMETER(PAR.Day_14_Sched_Shipment_USR);
 PARAMETER(PAR.Day_15_Sched_Shipment_USR);
 PARAMETER(PAR.Day_16_Sched_Shipment_USR);
 PARAMETER(PAR.Day_17_Sched_Shipment_USR);
 PARAMETER(PAR.Day_18_Sched_Shipment_USR);
 PARAMETER(PAR.Day_19_Sched_Shipment_USR);
 PARAMETER(PAR.Day_20_Sched_Shipment_USR);
 PARAMETER(PAR.Day_21_Sched_Shipment_USR);
 PARAMETER(PAR.Status_Flag_1_Y_N);
 PARAMETER(PAR.Status_Flag_2_Y_N);
 PARAMETER(PAR.Status_Flag_3_Y_N);
 PARAMETER(PAR.Status_Flag_4_Y_N);
 PARAMETER(PAR.Status_Flag_5_Y_N);
 PARAMETER(PAR.Status_Flag_6_Y_N);
 PARAMETER(PAR.Status_Flag_7_Y_N);
 PARAMETER(PAR.Status_Flag_8_Y_N);
 PARAMETER(PAR.Status_Flag_11_Y_N);
 PARAMETER(PAR.Status_Flag_9_Y_N);
 PARAMETER(PAR.Status_Flag_10_Y_N);
 PARAMETER(PAR.Status_Flag_12_Y_N);
 PARAMETER(PAR.Status_Flag_13_Y_N);
 PARAMETER(PAR.Status_Flag_14_Y_N);
 PARAMETER(PAR.Status_Flag_15_Y_N);
 PARAMETER(PAR.Status_Flag_16_Y_N);
 PARAMETER(PAR.Status_Flag_17_Y_N);
 PARAMETER(PAR.Status_Flag_18_Y_N);
 PARAMETER(PAR.Status_Flag_19_Y_N);
 PARAMETER(PAR.Status_Flag_20_Y_N);
 PARAMETER(PAR.Status_Flag_21_Y_N);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Piece_Count_Item);
 {
  //?Execute internal function

  //?02/21/11 PKD Do not need to Override Weight for Piece Count Items.
  // PAR.Ord/Sch Sts USR = CND.Scheduled
  PAR.Ord_Sch_Sts_USR = 'S';

  //?day 1
  CASE;

  // IF PAR.Avail Ship Date 1 USR is Entered
  IF PAR.Avail_Ship_Date_1_USR <> *ZERO;

  // AND PAR.Status Flag 1  Y/N is No
  AND PAR.Status_Flag_1_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 1
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 1 Sched Shipments USR = LCL.Quantity Scheduled SUM
  PAR.Day_1_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 1
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 2
  CASE;

  // IF PAR.Avail Ship Date 2 USR is Entered
  IF PAR.Avail_Ship_Date_2_USR <> *ZERO;

  // AND PAR.Status Flag 2  Y/N is No
  AND PAR.Status_Flag_2_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 2
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 2 Sched Shipments USR = LCL.Quantity Scheduled SUM
  PAR.Day_2_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 2
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 3
  CASE;

  // IF PAR.Avail Ship Date 3 USR is Entered
  IF PAR.Avail_Ship_Date_3_USR <> *ZERO;

  // AND PAR.Status Flag 3  Y/N is No
  AND PAR.Status_Flag_3_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 3
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 3 Sched Shipments USR = LCL.Quantity Scheduled SUM
  PAR.Day_3_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 3
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 4
  CASE;

  // IF PAR.Avail Ship Date 4 USR is Entered
  IF PAR.Avail_Ship_Date_4_USR <> *ZERO;

  // AND PAR.Status Flag 4  Y/N is no
  AND PAR.Status_Flag_4_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 4
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 4 Sched Shipments USR = LCL.Quantity Scheduled SUM
  PAR.Day_4_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 4
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 5
  CASE;

  // IF PAR.Avail Ship Date 5 USR is Entered
  IF PAR.Avail_Ship_Date_5_USR <> *ZERO;

  // AND PAR.Status Flag 5  Y/N is No
  AND PAR.Status_Flag_5_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 5
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 5 Sched Shipments USR = LCL.Quantity Scheduled SUM
  PAR.Day_5_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 5
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 6
  CASE;

  // IF PAR.Avail Ship Date 6 USR is Entered
  IF PAR.Avail_Ship_Date_6_USR <> *ZERO;

  // AND PAR.Status Flag 6  Y/N is No
  AND PAR.Status_Flag_6_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 6
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 6 Sched Shipments USR = LCL.Quantity Scheduled SUM
  PAR.Day_6_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 6
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 7
  CASE;

  // IF PAR.Avail Ship Date 7 USR is Entered
  IF PAR.Avail_Ship_Date_7_USR <> *ZERO;

  // AND PAR.Status Flag 7  Y/N is No
  AND PAR.Status_Flag_7_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 7
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 7 Sched Shipments USR = LCL.Quantity Scheduled SUM
  PAR.Day_7_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 7
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 8
  CASE;

  // IF PAR.Avail Ship Date 8 USR is Entered
  IF PAR.Avail_Ship_Date_8_USR <> *ZERO;

  // AND PAR.Status Flag 8  Y/N is No
  AND PAR.Status_Flag_8_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_8_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 8
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 8 Sched Shipments USR = LCL.Quantity Scheduled SUM
  PAR.Day_8_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 8
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 9
  CASE;

  // IF PAR.Avail Ship Date 9 USR is Entered
  IF PAR.Avail_Ship_Date_9_USR <> *ZERO;

  // AND PAR.Status Flag 9  Y/N is No
  AND PAR.Status_Flag_9_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_9_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 9
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 9 Sched Shipments USR = LCL.Quantity Scheduled SUM
  PAR.Day_9_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 9
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 10
  CASE;

  // IF PAR.Avail Ship Date 10 USR is Entered
  IF PAR.Avail_Ship_Date_10_USR <> *ZERO;

  // AND PAR.Status Flag 10 Y/N is No
  AND PAR.Status_Flag_10_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_10_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 10
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 10 Sched Shipment USR = LCL.Quantity Scheduled SUM
  PAR.Day_10_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 10
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 11
  CASE;

  // IF PAR.Avail Ship Date 11 USR is Entered
  IF PAR.Avail_Ship_Date_11_USR <> *ZERO;

  // AND PAR.Status Flag 11 Y/N is No
  AND PAR.Status_Flag_11_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_11_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 11
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 11 Sched Shipment USR = LCL.Quantity Scheduled SUM
  PAR.Day_11_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 11
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 12
  CASE;

  // IF PAR.Avail Ship Date 12 USR is Entered
  IF PAR.Avail_Ship_Date_12_USR <> *ZERO;

  // AND PAR.Status Flag 12 Y/N is No
  AND PAR.Status_Flag_12_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_12_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 12
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 12 Sched Shipment USR = LCL.Quantity Scheduled SUM
  PAR.Day_12_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 12
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 13
  CASE;

  // IF PAR.Avail Ship Date 13 USR is Entered
  IF PAR.Avail_Ship_Date_13_USR <> *ZERO;

  // AND PAR.Status Flag 13 Y/N is No
  AND PAR.Status_Flag_13_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_13_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 13
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 13 Sched Shipment USR = LCL.Quantity Scheduled SUM
  PAR.Day_13_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 13
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 14
  CASE;

  // IF PAR.Avail Ship Date 14 USR is Entered
  IF PAR.Avail_Ship_Date_14_USR <> *ZERO;

  // AND PAR.Status Flag 14 Y/N is No
  AND PAR.Status_Flag_14_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_14_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 14
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 14 Sched Shipment USR = LCL.Quantity Scheduled SUM
  PAR.Day_14_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 14
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 15
  CASE;

  // IF PAR.Avail Ship Date 15 USR is Entered
  IF PAR.Avail_Ship_Date_15_USR <> *ZERO;

  // AND PAR.Status Flag 15 Y/N is No
  AND PAR.Status_Flag_15_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_15_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 15
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 15 Sched Shipment USR = LCL.Quantity Scheduled SUM
  PAR.Day_15_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 15
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 16
  CASE;

  // IF PAR.Avail Ship Date 16 USR is Entered
  IF PAR.Avail_Ship_Date_16_USR <> *ZERO;

  // AND PAR.Status Flag 16 Y/N is No
  AND PAR.Status_Flag_16_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_16_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 16
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 16 Sched Shipment USR = LCL.Quantity Scheduled SUM
  PAR.Day_16_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 16
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 17
  CASE;

  // IF PAR.Avail Ship Date 17 USR is Entered
  IF PAR.Avail_Ship_Date_17_USR <> *ZERO;

  // AND PAR.Status Flag 17 Y/N is No
  AND PAR.Status_Flag_17_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_17_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 17
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 17 Sched Shipment USR = LCL.Quantity Scheduled SUM
  PAR.Day_17_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 17
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 18
  CASE;

  // IF PAR.Avail Ship Date 18 USR is Entered
  IF PAR.Avail_Ship_Date_18_USR <> *ZERO;

  // AND PAR.Status Flag 18 Y/N is No
  AND PAR.Status_Flag_18_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_18_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 18
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 18 Sched Shipment USR = LCL.Quantity Scheduled SUM
  PAR.Day_18_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 18
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 19
  CASE;

  // IF PAR.Avail Ship Date 19 USR is Entered
  IF PAR.Avail_Ship_Date_19_USR <> *ZERO;

  // AND PAR.Status Flag 19 Y/N is No
  AND PAR.Status_Flag_19_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_19_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 19
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 19 Sched Shipment USR = LCL.Quantity Scheduled SUM
  PAR.Day_19_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 19
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 20
  CASE;

  // IF PAR.Avail Ship Date 20 USR is Entered
  IF PAR.Avail_Ship_Date_20_USR <> *ZERO;

  // AND PAR.Status Flag 20 Y/N is No
  AND PAR.Status_Flag_20_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_20_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 20
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 20 Sched Shipment USR = LCL.Quantity Scheduled SUM
  PAR.Day_20_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 20
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

  //?day 21
  CASE;

  // IF PAR.Avail Ship Date 21 USR is Entered
  IF PAR.Avail_Ship_Date_21_USR <> *ZERO;

  // AND PAR.Status Flag 21 Y/N is No
  AND PAR.Status_Flag_21_Y_N = 'N';

  EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_21_USR);
  PARAMETER(LCL.Weight_Scheduled_SUM);
  PARAMETER(LCL.Quantity_Scheduled_SUM);
  PARAMETER(PAR.Ord_Sch_Sts_USR);
  {
   //?USER: Initialize routine

   // PAR.Weight Scheduled SUM = CON.*ZERO
   PAR.Weight_Scheduled_SUM = *ZERO;

   // PAR.Quantity Scheduled SUM = CON.*ZERO
   PAR.Quantity_Scheduled_SUM = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Header_Status);
   PARAMETER(WRK.Billing_Activity_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.Header Status is Not Comp/Canc/Conf
   IF WRK.Header_Status = 'L'/'A'/'E'/'H';

   // AND WRK.Billing Activity Type is Invoice or Transfer
   AND WRK.Billing_Activity_Type = '1'/'4';

   CASE;

   // IF PAR.Ord/Sch Sts USR is Scheduled
   IF PAR.Ord_Sch_Sts_USR = 'S';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

   // IF PAR.Ord/Sch Sts USR is Ordered
   IF PAR.Ord_Sch_Sts_USR = 'O';

   // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
   PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

   // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
   PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

   ENDIF;

   ENDIF;

  }

  //?Calculate Sales Quantity 21
  CASE;

  // IF PAR.Primary/Load Sts USR is Primary
  IF PAR.Primary_Load_Sts_USR = 'P';

  // AND PAR.Unit Weight is Greater than zero
  AND ( PAR.Unit_Weight > *ZERO;

  // OR PAR.Piece Count Item is yes
  OR PAR.Piece_Count_Item = 'Y' );

  //?***Calculate Sales with Unit Weight
  CASE;

  // IF PAR.Piece Count Item is yes
  IF PAR.Piece_Count_Item = 'Y';

  // PAR.Day 21 Sched Shipment USR = LCL.Quantity Scheduled SUM
  PAR.Day_21_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

  //?***Calculate Sales with Unit Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Sched Shipments (No Dec)
  PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

  ENDIF;

  //?Calculate Sales Quantity 21
  // IF PAR.Primary/Load Sts USR is Load Size
  IF PAR.Primary_Load_Sts_USR = 'L';

  // AND PAR.Load Size USR is GT Zero
  AND PAR.Load_Size_USR > *ZERO;

  // Scheduled Shipments
  PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

  ENDIF;

  ENDIF;

 }

}


// PAR.Total Inventory       USR = CUR.Day 1 Inventory USR
PAR.Total_Inventory_USR = CUR.Day_1_Inventory_USR;

// PAR.Total Production      USR = CUR.Day 1 Production USR
PAR.Total_Production_USR = CUR.Day_1_Production_USR;

// PAR.Total Sales           USR = CUR.Order Hold Over Alloc USR + CUR.Day 1 Sales
PAR.Total_Sales_USR = CUR.Order_Hold_Over_Alloc_USR + CUR.Day_1_Sales_USR;

// PAR.Total Availability    USR = CUR.Day 1 Availability USR
PAR.Total_Availability_USR = CUR.Day_1_Availability_USR;

// PAR.Total Sched Shipments USR = CUR.Order Hold Over  USR + CUR.Day 1 Sched Shipm
PAR.Total_Sched_Shipments_USR = CUR.Order_Hold_Over_USR + CUR.Day_1_Sched_Shipments_USR;

// CUR.Grand Total Inventory USR = CUR.Day 1 Inventory USR
CUR.Grand_Total_Inventory_USR = CUR.Day_1_Inventory_USR;

// CUR.Grand Total Prod.     USR = CUR.Day 1 Production USR
CUR.Grand_Total_Prod_USR = CUR.Day_1_Production_USR;

// CUR.Grand Total Sales     USR = CUR.Day 1 Sales USR + CUR.Order Hold Over Alloc
CUR.Grand_Total_Sales_USR = CUR.Day_1_Sales_USR + CUR.Order_Hold_Over_Alloc_USR;

// CUR.Grand Total Avail.    USR = CUR.Day 1 Availability USR
CUR.Grand_Total_Avail_USR = CUR.Day_1_Availability_USR;

// CUR.Grand Total Schd Ship USR = CUR.Order Hold Over  USR + CUR.Day 1 Sched Shipm
CUR.Grand_Total_Schd_Ship_USR = CUR.Order_Hold_Over_USR + CUR.Day_1_Sched_Shipments_USR;

//?Total-day 2
CASE;

// IF PAR.Generic Heading 2 is Equal Total
IF PAR.Generic_Heading_2 = 'Total';

// CUR.Day 2 Inventory USR = PAR.Total Inventory       USR
CUR.Day_2_Inventory_USR = PAR.Total_Inventory_USR;

// CUR.Day 2 Production USR = PAR.Total Production      USR
CUR.Day_2_Production_USR = PAR.Total_Production_USR;

// CUR.Day 2 Sales USR = PAR.Total Sales           USR
CUR.Day_2_Sales_USR = PAR.Total_Sales_USR;

// CUR.Day 2 Availability USR = PAR.Total Availability    USR
CUR.Day_2_Availability_USR = PAR.Total_Availability_USR;

// CUR.Day 2 Sched Shipments USR = PAR.Total Sched Shipments USR
CUR.Day_2_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR;

// PAR.Total Inventory       USR = CON.*ZERO
PAR.Total_Inventory_USR = *ZERO;

// PAR.Total Production      USR = CON.*ZERO
PAR.Total_Production_USR = *ZERO;

// PAR.Total Sales           USR = CON.*ZERO
PAR.Total_Sales_USR = *ZERO;

// PAR.Total Availability    USR = CON.*ZERO
PAR.Total_Availability_USR = *ZERO;

// PAR.Total Sched Shipments USR = CON.*ZERO
PAR.Total_Sched_Shipments_USR = *ZERO;

//?Total-day 2
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Total Inventory       USR = PAR.Total Inventory       USR + CUR.Day 2 Invent
PAR.Total_Inventory_USR = PAR.Total_Inventory_USR + CUR.Day_2_Inventory_USR;

// PAR.Total Production      USR = PAR.Total Production      USR + CUR.Day 2 Produc
PAR.Total_Production_USR = PAR.Total_Production_USR + CUR.Day_2_Production_USR;

// PAR.Total Sales           USR = PAR.Total Sales           USR + CUR.Day 2 Sales
PAR.Total_Sales_USR = PAR.Total_Sales_USR + CUR.Day_2_Sales_USR;

// PAR.Total Availability    USR = PAR.Total Availability    USR + CUR.Day 2 Availa
PAR.Total_Availability_USR = PAR.Total_Availability_USR + CUR.Day_2_Availability_USR;

// PAR.Total Sched Shipments USR = PAR.Total Sched Shipments USR + CUR.Day 2 Sched
PAR.Total_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR                                      +
+ CUR.Day_2_Sched_Shipments_USR;

// CUR.Grand Total Inventory USR = CUR.Grand Total Inventory USR + CUR.Day 2 Invent
CUR.Grand_Total_Inventory_USR = CUR.Grand_Total_Inventory_USR + CUR.Day_2_Inventory_USR;

// CUR.Grand Total Prod.     USR = CUR.Grand Total Prod.     USR + CUR.Day 2 Produc
CUR.Grand_Total_Prod_USR = CUR.Grand_Total_Prod_USR + CUR.Day_2_Production_USR;

// CUR.Grand Total Sales     USR = CUR.Grand Total Sales     USR + CUR.Day 2 Sales
CUR.Grand_Total_Sales_USR = CUR.Grand_Total_Sales_USR + CUR.Day_2_Sales_USR;

// CUR.Grand Total Avail.    USR = CUR.Grand Total Avail.    USR + CUR.Day 2 Availa
CUR.Grand_Total_Avail_USR = CUR.Grand_Total_Avail_USR + CUR.Day_2_Availability_USR;

// CUR.Grand Total Schd Ship USR = CUR.Grand Total Schd Ship USR + CUR.Day 2 Sched
CUR.Grand_Total_Schd_Ship_USR = CUR.Grand_Total_Schd_Ship_USR                                      +
+ CUR.Day_2_Sched_Shipments_USR;

ENDIF;

//?Total-day 3
CASE;

// IF PAR.Generic Heading 3 is Equal Total
IF PAR.Generic_Heading_3 = 'Total';

// CUR.Day 3 Inventory USR = PAR.Total Inventory       USR
CUR.Day_3_Inventory_USR = PAR.Total_Inventory_USR;

// CUR.Day 3 Production USR = PAR.Total Production      USR
CUR.Day_3_Production_USR = PAR.Total_Production_USR;

// CUR.Day 3 Sales USR = PAR.Total Sales           USR
CUR.Day_3_Sales_USR = PAR.Total_Sales_USR;

// CUR.Day 3 Availability USR = PAR.Total Availability    USR
CUR.Day_3_Availability_USR = PAR.Total_Availability_USR;

// CUR.Day 3 Sched Shipments USR = PAR.Total Sched Shipments USR
CUR.Day_3_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR;

// PAR.Total Inventory       USR = CON.*ZERO
PAR.Total_Inventory_USR = *ZERO;

// PAR.Total Production      USR = CON.*ZERO
PAR.Total_Production_USR = *ZERO;

// PAR.Total Sales           USR = CON.*ZERO
PAR.Total_Sales_USR = *ZERO;

// PAR.Total Availability    USR = CON.*ZERO
PAR.Total_Availability_USR = *ZERO;

// PAR.Total Sched Shipments USR = CON.*ZERO
PAR.Total_Sched_Shipments_USR = *ZERO;

//?Total-day 3
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Total Inventory       USR = PAR.Total Inventory       USR + CUR.Day 3 Invent
PAR.Total_Inventory_USR = PAR.Total_Inventory_USR + CUR.Day_3_Inventory_USR;

// PAR.Total Production      USR = PAR.Total Production      USR + CUR.Day 3 Produc
PAR.Total_Production_USR = PAR.Total_Production_USR + CUR.Day_3_Production_USR;

// PAR.Total Sales           USR = PAR.Total Sales           USR + CUR.Day 3 Sales
PAR.Total_Sales_USR = PAR.Total_Sales_USR + CUR.Day_3_Sales_USR;

// PAR.Total Availability    USR = PAR.Total Availability    USR + CUR.Day 3 Availa
PAR.Total_Availability_USR = PAR.Total_Availability_USR + CUR.Day_3_Availability_USR;

// PAR.Total Sched Shipments USR = PAR.Total Sched Shipments USR + CUR.Day 3 Sched
PAR.Total_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR                                      +
+ CUR.Day_3_Sched_Shipments_USR;

// CUR.Grand Total Inventory USR = CUR.Grand Total Inventory USR + CUR.Day 3 Invent
CUR.Grand_Total_Inventory_USR = CUR.Grand_Total_Inventory_USR + CUR.Day_3_Inventory_USR;

// CUR.Grand Total Prod.     USR = CUR.Grand Total Prod.     USR + CUR.Day 3 Produc
CUR.Grand_Total_Prod_USR = CUR.Grand_Total_Prod_USR + CUR.Day_3_Production_USR;

// CUR.Grand Total Sales     USR = CUR.Grand Total Sales     USR + CUR.Day 3 Sales
CUR.Grand_Total_Sales_USR = CUR.Grand_Total_Sales_USR + CUR.Day_3_Sales_USR;

// CUR.Grand Total Avail.    USR = CUR.Grand Total Avail.    USR + CUR.Day 3 Availa
CUR.Grand_Total_Avail_USR = CUR.Grand_Total_Avail_USR + CUR.Day_3_Availability_USR;

// CUR.Grand Total Schd Ship USR = CUR.Grand Total Schd Ship USR + CUR.Day 3 Sched
CUR.Grand_Total_Schd_Ship_USR = CUR.Grand_Total_Schd_Ship_USR                                      +
+ CUR.Day_3_Sched_Shipments_USR;

ENDIF;

//?Total-day 4
CASE;

// IF PAR.Generic Heading 4 is Equal Total
IF PAR.Generic_Heading_4 = 'Total';

// CUR.Day 4 Inventory USR = PAR.Total Inventory       USR
CUR.Day_4_Inventory_USR = PAR.Total_Inventory_USR;

// CUR.Day 4 Production USR = PAR.Total Production      USR
CUR.Day_4_Production_USR = PAR.Total_Production_USR;

// CUR.Day 4 Sales USR = PAR.Total Sales           USR
CUR.Day_4_Sales_USR = PAR.Total_Sales_USR;

// CUR.Day 4 Availability USR = PAR.Total Availability    USR
CUR.Day_4_Availability_USR = PAR.Total_Availability_USR;

// CUR.Day 4 Sched Shipments USR = PAR.Total Sched Shipments USR
CUR.Day_4_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR;

// PAR.Total Inventory       USR = CON.*ZERO
PAR.Total_Inventory_USR = *ZERO;

// PAR.Total Production      USR = CON.*ZERO
PAR.Total_Production_USR = *ZERO;

// PAR.Total Sales           USR = CON.*ZERO
PAR.Total_Sales_USR = *ZERO;

// PAR.Total Availability    USR = CON.*ZERO
PAR.Total_Availability_USR = *ZERO;

// PAR.Total Sched Shipments USR = CON.*ZERO
PAR.Total_Sched_Shipments_USR = *ZERO;

//?Total-day 4
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Total Inventory       USR = PAR.Total Inventory       USR + CUR.Day 4 Invent
PAR.Total_Inventory_USR = PAR.Total_Inventory_USR + CUR.Day_4_Inventory_USR;

// PAR.Total Production      USR = PAR.Total Production      USR + CUR.Day 4 Produc
PAR.Total_Production_USR = PAR.Total_Production_USR + CUR.Day_4_Production_USR;

// PAR.Total Sales           USR = PAR.Total Sales           USR + CUR.Day 4 Sales
PAR.Total_Sales_USR = PAR.Total_Sales_USR + CUR.Day_4_Sales_USR;

// PAR.Total Availability    USR = PAR.Total Availability    USR + CUR.Day 4 Availa
PAR.Total_Availability_USR = PAR.Total_Availability_USR + CUR.Day_4_Availability_USR;

// PAR.Total Sched Shipments USR = PAR.Total Sched Shipments USR + CUR.Day 4 Sched
PAR.Total_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR                                      +
+ CUR.Day_4_Sched_Shipments_USR;

// CUR.Grand Total Inventory USR = CUR.Grand Total Inventory USR + CUR.Day 4 Invent
CUR.Grand_Total_Inventory_USR = CUR.Grand_Total_Inventory_USR + CUR.Day_4_Inventory_USR;

// CUR.Grand Total Prod.     USR = CUR.Grand Total Prod.     USR + CUR.Day 4 Produc
CUR.Grand_Total_Prod_USR = CUR.Grand_Total_Prod_USR + CUR.Day_4_Production_USR;

// CUR.Grand Total Sales     USR = CUR.Grand Total Sales     USR + CUR.Day 4 Sales
CUR.Grand_Total_Sales_USR = CUR.Grand_Total_Sales_USR + CUR.Day_4_Sales_USR;

// CUR.Grand Total Avail.    USR = CUR.Grand Total Avail.    USR + CUR.Day 4 Availa
CUR.Grand_Total_Avail_USR = CUR.Grand_Total_Avail_USR + CUR.Day_4_Availability_USR;

// CUR.Grand Total Schd Ship USR = CUR.Grand Total Schd Ship USR + CUR.Day 4 Sched
CUR.Grand_Total_Schd_Ship_USR = CUR.Grand_Total_Schd_Ship_USR                                      +
+ CUR.Day_4_Sched_Shipments_USR;

ENDIF;

//?Total-day 5
CASE;

// IF PAR.Generic Heading 5 is Equal Total
IF PAR.Generic_Heading_5 = 'Total';

// CUR.Day 5 Inventory USR = PAR.Total Inventory       USR
CUR.Day_5_Inventory_USR = PAR.Total_Inventory_USR;

// CUR.Day 5 Production USR = PAR.Total Production      USR
CUR.Day_5_Production_USR = PAR.Total_Production_USR;

// CUR.Day 5 Sales USR = PAR.Total Sales           USR
CUR.Day_5_Sales_USR = PAR.Total_Sales_USR;

// CUR.Day 5 Availability USR = PAR.Total Availability    USR
CUR.Day_5_Availability_USR = PAR.Total_Availability_USR;

// CUR.Day 5 Sched Shipments USR = PAR.Total Sched Shipments USR
CUR.Day_5_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR;

// PAR.Total Inventory       USR = CON.*ZERO
PAR.Total_Inventory_USR = *ZERO;

// PAR.Total Production      USR = CON.*ZERO
PAR.Total_Production_USR = *ZERO;

// PAR.Total Sales           USR = CON.*ZERO
PAR.Total_Sales_USR = *ZERO;

// PAR.Total Availability    USR = CON.*ZERO
PAR.Total_Availability_USR = *ZERO;

// PAR.Total Sched Shipments USR = CON.*ZERO
PAR.Total_Sched_Shipments_USR = *ZERO;

//?Total-day 5
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Total Inventory       USR = PAR.Total Inventory       USR + CUR.Day 5 Invent
PAR.Total_Inventory_USR = PAR.Total_Inventory_USR + CUR.Day_5_Inventory_USR;

// PAR.Total Production      USR = PAR.Total Production      USR + CUR.Day 5 Produc
PAR.Total_Production_USR = PAR.Total_Production_USR + CUR.Day_5_Production_USR;

// PAR.Total Sales           USR = PAR.Total Sales           USR + CUR.Day 5 Sales
PAR.Total_Sales_USR = PAR.Total_Sales_USR + CUR.Day_5_Sales_USR;

// PAR.Total Availability    USR = PAR.Total Availability    USR + CUR.Day 5 Availa
PAR.Total_Availability_USR = PAR.Total_Availability_USR + CUR.Day_5_Availability_USR;

// PAR.Total Sched Shipments USR = PAR.Total Sched Shipments USR + CUR.Day 5 Sched
PAR.Total_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR                                      +
+ CUR.Day_5_Sched_Shipments_USR;

// CUR.Grand Total Inventory USR = CUR.Grand Total Inventory USR + CUR.Day 5 Invent
CUR.Grand_Total_Inventory_USR = CUR.Grand_Total_Inventory_USR + CUR.Day_5_Inventory_USR;

// CUR.Grand Total Prod.     USR = CUR.Grand Total Prod.     USR + CUR.Day 5 Produc
CUR.Grand_Total_Prod_USR = CUR.Grand_Total_Prod_USR + CUR.Day_5_Production_USR;

// CUR.Grand Total Sales     USR = CUR.Grand Total Sales     USR + CUR.Day 5 Sales
CUR.Grand_Total_Sales_USR = CUR.Grand_Total_Sales_USR + CUR.Day_5_Sales_USR;

// CUR.Grand Total Avail.    USR = CUR.Grand Total Avail.    USR + CUR.Day 5 Availa
CUR.Grand_Total_Avail_USR = CUR.Grand_Total_Avail_USR + CUR.Day_5_Availability_USR;

// CUR.Grand Total Schd Ship USR = CUR.Grand Total Schd Ship USR + CUR.Day 5 Sched
CUR.Grand_Total_Schd_Ship_USR = CUR.Grand_Total_Schd_Ship_USR                                      +
+ CUR.Day_5_Sched_Shipments_USR;

ENDIF;

//?Total-day 6
CASE;

// IF PAR.Generic Heading 6 is Equal Total
IF PAR.Generic_Heading_6 = 'Total';

// CUR.Day 6 Inventory USR = PAR.Total Inventory       USR
CUR.Day_6_Inventory_USR = PAR.Total_Inventory_USR;

// CUR.Day 6 Production USR = PAR.Total Production      USR
CUR.Day_6_Production_USR = PAR.Total_Production_USR;

// CUR.Day 6 Sales USR = PAR.Total Sales           USR
CUR.Day_6_Sales_USR = PAR.Total_Sales_USR;

// CUR.Day 6 Availability USR = PAR.Total Availability    USR
CUR.Day_6_Availability_USR = PAR.Total_Availability_USR;

// CUR.Day 6 Sched Shipments USR = PAR.Total Sched Shipments USR
CUR.Day_6_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR;

// PAR.Total Inventory       USR = CON.*ZERO
PAR.Total_Inventory_USR = *ZERO;

// PAR.Total Production      USR = CON.*ZERO
PAR.Total_Production_USR = *ZERO;

// PAR.Total Sales           USR = CON.*ZERO
PAR.Total_Sales_USR = *ZERO;

// PAR.Total Availability    USR = CON.*ZERO
PAR.Total_Availability_USR = *ZERO;

// PAR.Total Sched Shipments USR = CON.*ZERO
PAR.Total_Sched_Shipments_USR = *ZERO;

//?Total-day 6
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Total Inventory       USR = PAR.Total Inventory       USR + CUR.Day 6 Invent
PAR.Total_Inventory_USR = PAR.Total_Inventory_USR + CUR.Day_6_Inventory_USR;

// PAR.Total Production      USR = PAR.Total Production      USR + CUR.Day 6 Produc
PAR.Total_Production_USR = PAR.Total_Production_USR + CUR.Day_6_Production_USR;

// PAR.Total Sales           USR = PAR.Total Sales           USR + CUR.Day 6 Sales
PAR.Total_Sales_USR = PAR.Total_Sales_USR + CUR.Day_6_Sales_USR;

// PAR.Total Availability    USR = PAR.Total Availability    USR + CUR.Day 6 Availa
PAR.Total_Availability_USR = PAR.Total_Availability_USR + CUR.Day_6_Availability_USR;

// PAR.Total Sched Shipments USR = PAR.Total Sched Shipments USR + CUR.Day 6 Sched
PAR.Total_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR                                      +
+ CUR.Day_6_Sched_Shipments_USR;

// CUR.Grand Total Inventory USR = CUR.Grand Total Inventory USR + CUR.Day 6 Invent
CUR.Grand_Total_Inventory_USR = CUR.Grand_Total_Inventory_USR + CUR.Day_6_Inventory_USR;

// CUR.Grand Total Prod.     USR = CUR.Grand Total Prod.     USR + CUR.Day 6 Produc
CUR.Grand_Total_Prod_USR = CUR.Grand_Total_Prod_USR + CUR.Day_6_Production_USR;

// CUR.Grand Total Sales     USR = CUR.Grand Total Sales     USR + CUR.Day 6 Sales
CUR.Grand_Total_Sales_USR = CUR.Grand_Total_Sales_USR + CUR.Day_6_Sales_USR;

// CUR.Grand Total Avail.    USR = CUR.Grand Total Avail.    USR + CUR.Day 6 Availa
CUR.Grand_Total_Avail_USR = CUR.Grand_Total_Avail_USR + CUR.Day_6_Availability_USR;

// CUR.Grand Total Schd Ship USR = CUR.Grand Total Schd Ship USR + CUR.Day 6 Sched
CUR.Grand_Total_Schd_Ship_USR = CUR.Grand_Total_Schd_Ship_USR                                      +
+ CUR.Day_6_Sched_Shipments_USR;

ENDIF;

//?Total-day 7
CASE;

// IF PAR.Generic Heading 7 is Equal Total
IF PAR.Generic_Heading_7 = 'Total';

// CUR.Day 7 Inventory USR = PAR.Total Inventory       USR
CUR.Day_7_Inventory_USR = PAR.Total_Inventory_USR;

// CUR.Day 7 Production USR = PAR.Total Production      USR
CUR.Day_7_Production_USR = PAR.Total_Production_USR;

// CUR.Day 7 Sales USR = PAR.Total Sales           USR
CUR.Day_7_Sales_USR = PAR.Total_Sales_USR;

// CUR.Day 7 Availability USR = PAR.Total Availability    USR
CUR.Day_7_Availability_USR = PAR.Total_Availability_USR;

// CUR.Day 7 Sched Shipments USR = PAR.Total Sched Shipments USR
CUR.Day_7_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR;

// PAR.Total Inventory       USR = CON.*ZERO
PAR.Total_Inventory_USR = *ZERO;

// PAR.Total Production      USR = CON.*ZERO
PAR.Total_Production_USR = *ZERO;

// PAR.Total Sales           USR = CON.*ZERO
PAR.Total_Sales_USR = *ZERO;

// PAR.Total Availability    USR = CON.*ZERO
PAR.Total_Availability_USR = *ZERO;

// PAR.Total Sched Shipments USR = CON.*ZERO
PAR.Total_Sched_Shipments_USR = *ZERO;

//?Total-day 7
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Total Inventory       USR = PAR.Total Inventory       USR + CUR.Day 7 Invent
PAR.Total_Inventory_USR = PAR.Total_Inventory_USR + CUR.Day_7_Inventory_USR;

// PAR.Total Production      USR = PAR.Total Production      USR + CUR.Day 7 Produc
PAR.Total_Production_USR = PAR.Total_Production_USR + CUR.Day_7_Production_USR;

// PAR.Total Sales           USR = PAR.Total Sales           USR + CUR.Day 7 Sales
PAR.Total_Sales_USR = PAR.Total_Sales_USR + CUR.Day_7_Sales_USR;

// PAR.Total Availability    USR = PAR.Total Availability    USR + CUR.Day 7 Availa
PAR.Total_Availability_USR = PAR.Total_Availability_USR + CUR.Day_7_Availability_USR;

// PAR.Total Sched Shipments USR = PAR.Total Sched Shipments USR + CUR.Day 7 Sched
PAR.Total_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR                                      +
+ CUR.Day_7_Sched_Shipments_USR;

// CUR.Grand Total Inventory USR = CUR.Grand Total Inventory USR + CUR.Day 7 Invent
CUR.Grand_Total_Inventory_USR = CUR.Grand_Total_Inventory_USR + CUR.Day_7_Inventory_USR;

// CUR.Grand Total Prod.     USR = CUR.Grand Total Prod.     USR + CUR.Day 7 Produc
CUR.Grand_Total_Prod_USR = CUR.Grand_Total_Prod_USR + CUR.Day_7_Production_USR;

// CUR.Grand Total Sales     USR = CUR.Grand Total Sales     USR + CUR.Day 7 Sales
CUR.Grand_Total_Sales_USR = CUR.Grand_Total_Sales_USR + CUR.Day_7_Sales_USR;

// CUR.Grand Total Avail.    USR = CUR.Grand Total Avail.    USR + CUR.Day 7 Availa
CUR.Grand_Total_Avail_USR = CUR.Grand_Total_Avail_USR + CUR.Day_7_Availability_USR;

// CUR.Grand Total Schd Ship USR = CUR.Grand Total Schd Ship USR + CUR.Day 7 Sched
CUR.Grand_Total_Schd_Ship_USR = CUR.Grand_Total_Schd_Ship_USR                                      +
+ CUR.Day_7_Sched_Shipments_USR;

ENDIF;

//?Total-day 8
CASE;

// IF PAR.Generic Heading 8 is Equal Total
IF PAR.Generic_Heading_8 = 'Total';

// CUR.Day 8 Inventory USR = PAR.Total Inventory       USR
CUR.Day_8_Inventory_USR = PAR.Total_Inventory_USR;

// CUR.Day 8 Production USR = PAR.Total Production      USR
CUR.Day_8_Production_USR = PAR.Total_Production_USR;

// CUR.Day 8 Sales USR = PAR.Total Sales           USR
CUR.Day_8_Sales_USR = PAR.Total_Sales_USR;

// CUR.Day 8 Availability USR = PAR.Total Availability    USR
CUR.Day_8_Availability_USR = PAR.Total_Availability_USR;

// CUR.Day 8 Sched Shipments USR = PAR.Total Sched Shipments USR
CUR.Day_8_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR;

// PAR.Total Inventory       USR = CON.*ZERO
PAR.Total_Inventory_USR = *ZERO;

// PAR.Total Production      USR = CON.*ZERO
PAR.Total_Production_USR = *ZERO;

// PAR.Total Sales           USR = CON.*ZERO
PAR.Total_Sales_USR = *ZERO;

// PAR.Total Availability    USR = CON.*ZERO
PAR.Total_Availability_USR = *ZERO;

// PAR.Total Sched Shipments USR = CON.*ZERO
PAR.Total_Sched_Shipments_USR = *ZERO;

//?Total-day 8
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Total Inventory       USR = PAR.Total Inventory       USR + CUR.Day 8 Invent
PAR.Total_Inventory_USR = PAR.Total_Inventory_USR + CUR.Day_8_Inventory_USR;

// PAR.Total Production      USR = PAR.Total Production      USR + CUR.Day 8 Produc
PAR.Total_Production_USR = PAR.Total_Production_USR + CUR.Day_8_Production_USR;

// PAR.Total Sales           USR = PAR.Total Sales           USR + CUR.Day 8 Sales
PAR.Total_Sales_USR = PAR.Total_Sales_USR + CUR.Day_8_Sales_USR;

// PAR.Total Availability    USR = PAR.Total Availability    USR + CUR.Day 8 Availa
PAR.Total_Availability_USR = PAR.Total_Availability_USR + CUR.Day_8_Availability_USR;

// PAR.Total Sched Shipments USR = PAR.Total Sched Shipments USR + CUR.Day 8 Sched
PAR.Total_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR                                      +
+ CUR.Day_8_Sched_Shipments_USR;

// CUR.Grand Total Inventory USR = CUR.Grand Total Inventory USR + CUR.Day 8 Invent
CUR.Grand_Total_Inventory_USR = CUR.Grand_Total_Inventory_USR + CUR.Day_8_Inventory_USR;

// CUR.Grand Total Prod.     USR = CUR.Grand Total Prod.     USR + CUR.Day 8 Produc
CUR.Grand_Total_Prod_USR = CUR.Grand_Total_Prod_USR + CUR.Day_8_Production_USR;

// CUR.Grand Total Sales     USR = CUR.Grand Total Sales     USR + CUR.Day 8 Sales
CUR.Grand_Total_Sales_USR = CUR.Grand_Total_Sales_USR + CUR.Day_8_Sales_USR;

// CUR.Grand Total Avail.    USR = CUR.Grand Total Avail.    USR + CUR.Day 8 Availa
CUR.Grand_Total_Avail_USR = CUR.Grand_Total_Avail_USR + CUR.Day_8_Availability_USR;

// CUR.Grand Total Schd Ship USR = CUR.Grand Total Schd Ship USR + CUR.Day 8 Sched
CUR.Grand_Total_Schd_Ship_USR = CUR.Grand_Total_Schd_Ship_USR                                      +
+ CUR.Day_8_Sched_Shipments_USR;

ENDIF;

//?Total-day 9
CASE;

// IF PAR.Generic Heading 9 is Equal Total
IF PAR.Generic_Heading_9 = 'Total';

// CUR.Day 9 Inventory USR = PAR.Total Inventory       USR
CUR.Day_9_Inventory_USR = PAR.Total_Inventory_USR;

// CUR.Day 9 Production USR = PAR.Total Production      USR
CUR.Day_9_Production_USR = PAR.Total_Production_USR;

// CUR.Day 9 Sales USR = PAR.Total Sales           USR
CUR.Day_9_Sales_USR = PAR.Total_Sales_USR;

// CUR.Day 9 Availability USR = PAR.Total Availability    USR
CUR.Day_9_Availability_USR = PAR.Total_Availability_USR;

// CUR.Day 9 Sched Shipments USR = PAR.Total Sched Shipments USR
CUR.Day_9_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR;

// PAR.Total Inventory       USR = CON.*ZERO
PAR.Total_Inventory_USR = *ZERO;

// PAR.Total Production      USR = CON.*ZERO
PAR.Total_Production_USR = *ZERO;

// PAR.Total Sales           USR = CON.*ZERO
PAR.Total_Sales_USR = *ZERO;

// PAR.Total Availability    USR = CON.*ZERO
PAR.Total_Availability_USR = *ZERO;

// PAR.Total Sched Shipments USR = CON.*ZERO
PAR.Total_Sched_Shipments_USR = *ZERO;

//?Total-day 9
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Total Inventory       USR = PAR.Total Inventory       USR + CUR.Day 9 Invent
PAR.Total_Inventory_USR = PAR.Total_Inventory_USR + CUR.Day_9_Inventory_USR;

// PAR.Total Production      USR = PAR.Total Production      USR + CUR.Day 9 Produc
PAR.Total_Production_USR = PAR.Total_Production_USR + CUR.Day_9_Production_USR;

// PAR.Total Sales           USR = PAR.Total Sales           USR + CUR.Day 9 Sales
PAR.Total_Sales_USR = PAR.Total_Sales_USR + CUR.Day_9_Sales_USR;

// PAR.Total Availability    USR = PAR.Total Availability    USR + CUR.Day 9 Availa
PAR.Total_Availability_USR = PAR.Total_Availability_USR + CUR.Day_9_Availability_USR;

// PAR.Total Sched Shipments USR = PAR.Total Sched Shipments USR + CUR.Day 9 Sched
PAR.Total_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR                                      +
+ CUR.Day_9_Sched_Shipments_USR;

// CUR.Grand Total Inventory USR = CUR.Grand Total Inventory USR + CUR.Day 9 Invent
CUR.Grand_Total_Inventory_USR = CUR.Grand_Total_Inventory_USR + CUR.Day_9_Inventory_USR;

// CUR.Grand Total Prod.     USR = CUR.Grand Total Prod.     USR + CUR.Day 9 Produc
CUR.Grand_Total_Prod_USR = CUR.Grand_Total_Prod_USR + CUR.Day_9_Production_USR;

// CUR.Grand Total Sales     USR = CUR.Grand Total Sales     USR + CUR.Day 9 Sales
CUR.Grand_Total_Sales_USR = CUR.Grand_Total_Sales_USR + CUR.Day_9_Sales_USR;

// CUR.Grand Total Avail.    USR = CUR.Grand Total Avail.    USR + CUR.Day 9 Availa
CUR.Grand_Total_Avail_USR = CUR.Grand_Total_Avail_USR + CUR.Day_9_Availability_USR;

// CUR.Grand Total Schd Ship USR = CUR.Grand Total Schd Ship USR + CUR.Day 9 Sched
CUR.Grand_Total_Schd_Ship_USR = CUR.Grand_Total_Schd_Ship_USR                                      +
+ CUR.Day_9_Sched_Shipments_USR;

ENDIF;

//?Total-day 10
CASE;

// IF PAR.Generic Heading 10 is Equal Total
IF PAR.Generic_Heading_10 = 'Total';

// CUR.Day 10 Inventory USR = PAR.Total Inventory       USR
CUR.Day_10_Inventory_USR = PAR.Total_Inventory_USR;

// CUR.Day 10 Production USR = PAR.Total Production      USR
CUR.Day_10_Production_USR = PAR.Total_Production_USR;

// CUR.Day 10 Sales USR = PAR.Total Sales           USR
CUR.Day_10_Sales_USR = PAR.Total_Sales_USR;

// CUR.Day 10 Availability USR = PAR.Total Availability    USR
CUR.Day_10_Availability_USR = PAR.Total_Availability_USR;

// CUR.Day 10 Sched Shipment USR = PAR.Total Sched Shipments USR
CUR.Day_10_Sched_Shipment_USR = PAR.Total_Sched_Shipments_USR;

// PAR.Total Inventory       USR = CON.*ZERO
PAR.Total_Inventory_USR = *ZERO;

// PAR.Total Production      USR = CON.*ZERO
PAR.Total_Production_USR = *ZERO;

// PAR.Total Sales           USR = CON.*ZERO
PAR.Total_Sales_USR = *ZERO;

// PAR.Total Availability    USR = CON.*ZERO
PAR.Total_Availability_USR = *ZERO;

// PAR.Total Sched Shipments USR = CON.*ZERO
PAR.Total_Sched_Shipments_USR = *ZERO;

//?Total-day 10
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Total Inventory       USR = PAR.Total Inventory       USR + CUR.Day 10 Inven
PAR.Total_Inventory_USR = PAR.Total_Inventory_USR + CUR.Day_10_Inventory_USR;

// PAR.Total Production      USR = PAR.Total Production      USR + CUR.Day 10 Produ
PAR.Total_Production_USR = PAR.Total_Production_USR + CUR.Day_10_Production_USR;

// PAR.Total Sales           USR = PAR.Total Sales           USR + CUR.Day 10 Sales
PAR.Total_Sales_USR = PAR.Total_Sales_USR + CUR.Day_10_Sales_USR;

// PAR.Total Availability    USR = PAR.Total Availability    USR + CUR.Day 10 Avail
PAR.Total_Availability_USR = PAR.Total_Availability_USR + CUR.Day_10_Availability_USR;

// PAR.Total Sched Shipments USR = PAR.Total Sched Shipments USR + CUR.Day 10 Sched
PAR.Total_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR                                      +
+ CUR.Day_10_Sched_Shipment_USR;

// CUR.Grand Total Inventory USR = CUR.Grand Total Inventory USR + CUR.Day 10 Inven
CUR.Grand_Total_Inventory_USR = CUR.Grand_Total_Inventory_USR + CUR.Day_10_Inventory_USR;

// CUR.Grand Total Prod.     USR = CUR.Grand Total Prod.     USR + CUR.Day 10 Produ
CUR.Grand_Total_Prod_USR = CUR.Grand_Total_Prod_USR + CUR.Day_10_Production_USR;

// CUR.Grand Total Sales     USR = CUR.Grand Total Sales     USR + CUR.Day 10 Sales
CUR.Grand_Total_Sales_USR = CUR.Grand_Total_Sales_USR + CUR.Day_10_Sales_USR;

// CUR.Grand Total Avail.    USR = CUR.Grand Total Avail.    USR + CUR.Day 10 Avail
CUR.Grand_Total_Avail_USR = CUR.Grand_Total_Avail_USR + CUR.Day_10_Availability_USR;

// CUR.Grand Total Schd Ship USR = CUR.Grand Total Schd Ship USR + CUR.Day 10 Sched
CUR.Grand_Total_Schd_Ship_USR = CUR.Grand_Total_Schd_Ship_USR                                      +
+ CUR.Day_10_Sched_Shipment_USR;

ENDIF;

//?Total-day 11
CASE;

// IF PAR.Generic Heading 11 is Equal Total
IF PAR.Generic_Heading_11 = 'Total';

// CUR.Day 11 Inventory USR = PAR.Total Inventory       USR
CUR.Day_11_Inventory_USR = PAR.Total_Inventory_USR;

// CUR.Day 11 Production USR = PAR.Total Production      USR
CUR.Day_11_Production_USR = PAR.Total_Production_USR;

// CUR.Day 11 Sales USR = PAR.Total Sales           USR
CUR.Day_11_Sales_USR = PAR.Total_Sales_USR;

// CUR.Day 11 Availability USR = PAR.Total Availability    USR
CUR.Day_11_Availability_USR = PAR.Total_Availability_USR;

// CUR.Day 11 Sched Shipment USR = PAR.Total Sched Shipments USR
CUR.Day_11_Sched_Shipment_USR = PAR.Total_Sched_Shipments_USR;

// PAR.Total Inventory       USR = CON.*ZERO
PAR.Total_Inventory_USR = *ZERO;

// PAR.Total Production      USR = CON.*ZERO
PAR.Total_Production_USR = *ZERO;

// PAR.Total Sales           USR = CON.*ZERO
PAR.Total_Sales_USR = *ZERO;

// PAR.Total Availability    USR = CON.*ZERO
PAR.Total_Availability_USR = *ZERO;

// PAR.Total Sched Shipments USR = CON.*ZERO
PAR.Total_Sched_Shipments_USR = *ZERO;

//?Total-day 11
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Total Inventory       USR = PAR.Total Inventory       USR + CUR.Day 11 Inven
PAR.Total_Inventory_USR = PAR.Total_Inventory_USR + CUR.Day_11_Inventory_USR;

// PAR.Total Production      USR = PAR.Total Production      USR + CUR.Day 11 Produ
PAR.Total_Production_USR = PAR.Total_Production_USR + CUR.Day_11_Production_USR;

// PAR.Total Sales           USR = PAR.Total Sales           USR + CUR.Day 11 Sales
PAR.Total_Sales_USR = PAR.Total_Sales_USR + CUR.Day_11_Sales_USR;

// PAR.Total Availability    USR = PAR.Total Availability    USR + CUR.Day 11 Avail
PAR.Total_Availability_USR = PAR.Total_Availability_USR + CUR.Day_11_Availability_USR;

// PAR.Total Sched Shipments USR = PAR.Total Sched Shipments USR + CUR.Day 11 Sched
PAR.Total_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR                                      +
+ CUR.Day_11_Sched_Shipment_USR;

// CUR.Grand Total Inventory USR = CUR.Grand Total Inventory USR + CUR.Day 11 Inven
CUR.Grand_Total_Inventory_USR = CUR.Grand_Total_Inventory_USR + CUR.Day_11_Inventory_USR;

// CUR.Grand Total Prod.     USR = CUR.Grand Total Prod.     USR + CUR.Day 11 Produ
CUR.Grand_Total_Prod_USR = CUR.Grand_Total_Prod_USR + CUR.Day_11_Production_USR;

// CUR.Grand Total Sales     USR = CUR.Grand Total Sales     USR + CUR.Day 11 Sales
CUR.Grand_Total_Sales_USR = CUR.Grand_Total_Sales_USR + CUR.Day_11_Sales_USR;

// CUR.Grand Total Avail.    USR = CUR.Grand Total Avail.    USR + CUR.Day 11 Avail
CUR.Grand_Total_Avail_USR = CUR.Grand_Total_Avail_USR + CUR.Day_11_Availability_USR;

// CUR.Grand Total Schd Ship USR = CUR.Grand Total Schd Ship USR + CUR.Day 11 Sched
CUR.Grand_Total_Schd_Ship_USR = CUR.Grand_Total_Schd_Ship_USR                                      +
+ CUR.Day_11_Sched_Shipment_USR;

ENDIF;

//?Total-day 12
CASE;

// IF PAR.Generic Heading 12 is Equal Total
IF PAR.Generic_Heading_12 = 'Total';

// CUR.Day 12 Inventory USR = PAR.Total Inventory       USR
CUR.Day_12_Inventory_USR = PAR.Total_Inventory_USR;

// CUR.Day 12 Production USR = PAR.Total Production      USR
CUR.Day_12_Production_USR = PAR.Total_Production_USR;

// CUR.Day 12 Sales USR = PAR.Total Sales           USR
CUR.Day_12_Sales_USR = PAR.Total_Sales_USR;

// CUR.Day 12 Availability USR = PAR.Total Availability    USR
CUR.Day_12_Availability_USR = PAR.Total_Availability_USR;

// CUR.Day 12 Sched Shipment USR = PAR.Total Sched Shipments USR
CUR.Day_12_Sched_Shipment_USR = PAR.Total_Sched_Shipments_USR;

// PAR.Total Inventory       USR = CON.*ZERO
PAR.Total_Inventory_USR = *ZERO;

// PAR.Total Production      USR = CON.*ZERO
PAR.Total_Production_USR = *ZERO;

// PAR.Total Sales           USR = CON.*ZERO
PAR.Total_Sales_USR = *ZERO;

// PAR.Total Availability    USR = CON.*ZERO
PAR.Total_Availability_USR = *ZERO;

// PAR.Total Sched Shipments USR = CON.*ZERO
PAR.Total_Sched_Shipments_USR = *ZERO;

//?Total-day 12
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Total Inventory       USR = PAR.Total Inventory       USR + CUR.Day 12 Inven
PAR.Total_Inventory_USR = PAR.Total_Inventory_USR + CUR.Day_12_Inventory_USR;

// PAR.Total Production      USR = PAR.Total Production      USR + CUR.Day 12 Produ
PAR.Total_Production_USR = PAR.Total_Production_USR + CUR.Day_12_Production_USR;

// PAR.Total Sales           USR = PAR.Total Sales           USR + CUR.Day 12 Sales
PAR.Total_Sales_USR = PAR.Total_Sales_USR + CUR.Day_12_Sales_USR;

// PAR.Total Availability    USR = PAR.Total Availability    USR + CUR.Day 12 Avail
PAR.Total_Availability_USR = PAR.Total_Availability_USR + CUR.Day_12_Availability_USR;

// PAR.Total Sched Shipments USR = PAR.Total Sched Shipments USR + CUR.Day 12 Sched
PAR.Total_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR                                      +
+ CUR.Day_12_Sched_Shipment_USR;

// CUR.Grand Total Inventory USR = CUR.Grand Total Inventory USR + CUR.Day 12 Inven
CUR.Grand_Total_Inventory_USR = CUR.Grand_Total_Inventory_USR + CUR.Day_12_Inventory_USR;

// CUR.Grand Total Prod.     USR = CUR.Grand Total Prod.     USR + CUR.Day 12 Produ
CUR.Grand_Total_Prod_USR = CUR.Grand_Total_Prod_USR + CUR.Day_12_Production_USR;

// CUR.Grand Total Sales     USR = CUR.Grand Total Sales     USR + CUR.Day 12 Sales
CUR.Grand_Total_Sales_USR = CUR.Grand_Total_Sales_USR + CUR.Day_12_Sales_USR;

// CUR.Grand Total Avail.    USR = CUR.Grand Total Avail.    USR + CUR.Day 12 Avail
CUR.Grand_Total_Avail_USR = CUR.Grand_Total_Avail_USR + CUR.Day_12_Availability_USR;

// CUR.Grand Total Schd Ship USR = CUR.Grand Total Schd Ship USR + CUR.Day 12 Sched
CUR.Grand_Total_Schd_Ship_USR = CUR.Grand_Total_Schd_Ship_USR                                      +
+ CUR.Day_12_Sched_Shipment_USR;

ENDIF;

//?Total-day 13
CASE;

// IF PAR.Generic Heading 13 is Equal Total
IF PAR.Generic_Heading_13 = 'Total';

// CUR.Day 13 Inventory USR = PAR.Total Inventory       USR
CUR.Day_13_Inventory_USR = PAR.Total_Inventory_USR;

// CUR.Day 13 Production USR = PAR.Total Production      USR
CUR.Day_13_Production_USR = PAR.Total_Production_USR;

// CUR.Day 13 Sales USR = PAR.Total Sales           USR
CUR.Day_13_Sales_USR = PAR.Total_Sales_USR;

// CUR.Day 13 Availability USR = PAR.Total Availability    USR
CUR.Day_13_Availability_USR = PAR.Total_Availability_USR;

// CUR.Day 13 Sched Shipment USR = PAR.Total Sched Shipments USR
CUR.Day_13_Sched_Shipment_USR = PAR.Total_Sched_Shipments_USR;

// PAR.Total Inventory       USR = CON.*ZERO
PAR.Total_Inventory_USR = *ZERO;

// PAR.Total Production      USR = CON.*ZERO
PAR.Total_Production_USR = *ZERO;

// PAR.Total Sales           USR = CON.*ZERO
PAR.Total_Sales_USR = *ZERO;

// PAR.Total Availability    USR = CON.*ZERO
PAR.Total_Availability_USR = *ZERO;

// PAR.Total Sched Shipments USR = CON.*ZERO
PAR.Total_Sched_Shipments_USR = *ZERO;

//?Total-day 13
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Total Inventory       USR = PAR.Total Inventory       USR + CUR.Day 13 Inven
PAR.Total_Inventory_USR = PAR.Total_Inventory_USR + CUR.Day_13_Inventory_USR;

// PAR.Total Production      USR = PAR.Total Production      USR + CUR.Day 13 Produ
PAR.Total_Production_USR = PAR.Total_Production_USR + CUR.Day_13_Production_USR;

// PAR.Total Sales           USR = PAR.Total Sales           USR + CUR.Day 13 Sales
PAR.Total_Sales_USR = PAR.Total_Sales_USR + CUR.Day_13_Sales_USR;

// PAR.Total Availability    USR = PAR.Total Availability    USR + CUR.Day 13 Avail
PAR.Total_Availability_USR = PAR.Total_Availability_USR + CUR.Day_13_Availability_USR;

// PAR.Total Sched Shipments USR = PAR.Total Sched Shipments USR + CUR.Day 13 Sched
PAR.Total_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR                                      +
+ CUR.Day_13_Sched_Shipment_USR;

// CUR.Grand Total Inventory USR = CUR.Grand Total Inventory USR + CUR.Day 13 Inven
CUR.Grand_Total_Inventory_USR = CUR.Grand_Total_Inventory_USR + CUR.Day_13_Inventory_USR;

// CUR.Grand Total Prod.     USR = CUR.Grand Total Prod.     USR + CUR.Day 13 Produ
CUR.Grand_Total_Prod_USR = CUR.Grand_Total_Prod_USR + CUR.Day_13_Production_USR;

// CUR.Grand Total Sales     USR = CUR.Grand Total Sales     USR + CUR.Day 13 Sales
CUR.Grand_Total_Sales_USR = CUR.Grand_Total_Sales_USR + CUR.Day_13_Sales_USR;

// CUR.Grand Total Avail.    USR = CUR.Grand Total Avail.    USR + CUR.Day 13 Avail
CUR.Grand_Total_Avail_USR = CUR.Grand_Total_Avail_USR + CUR.Day_13_Availability_USR;

// CUR.Grand Total Schd Ship USR = CUR.Grand Total Schd Ship USR + CUR.Day 13 Sched
CUR.Grand_Total_Schd_Ship_USR = CUR.Grand_Total_Schd_Ship_USR                                      +
+ CUR.Day_13_Sched_Shipment_USR;

ENDIF;

//?Total-day 14
CASE;

// IF PAR.Generic Heading 14 is Equal Total
IF PAR.Generic_Heading_14 = 'Total';

// CUR.Day 14 Inventory USR = PAR.Total Inventory       USR
CUR.Day_14_Inventory_USR = PAR.Total_Inventory_USR;

// CUR.Day 14 Production USR = PAR.Total Production      USR
CUR.Day_14_Production_USR = PAR.Total_Production_USR;

// CUR.Day 14 Sales USR = PAR.Total Sales           USR
CUR.Day_14_Sales_USR = PAR.Total_Sales_USR;

// CUR.Day 14 Availability USR = PAR.Total Availability    USR
CUR.Day_14_Availability_USR = PAR.Total_Availability_USR;

// CUR.Day 14 Sched Shipment USR = PAR.Total Sched Shipments USR
CUR.Day_14_Sched_Shipment_USR = PAR.Total_Sched_Shipments_USR;

// PAR.Total Inventory       USR = CON.*ZERO
PAR.Total_Inventory_USR = *ZERO;

// PAR.Total Production      USR = CON.*ZERO
PAR.Total_Production_USR = *ZERO;

// PAR.Total Sales           USR = CON.*ZERO
PAR.Total_Sales_USR = *ZERO;

// PAR.Total Availability    USR = CON.*ZERO
PAR.Total_Availability_USR = *ZERO;

// PAR.Total Sched Shipments USR = CON.*ZERO
PAR.Total_Sched_Shipments_USR = *ZERO;

//?Total-day 14
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Total Inventory       USR = PAR.Total Inventory       USR + CUR.Day 14 Inven
PAR.Total_Inventory_USR = PAR.Total_Inventory_USR + CUR.Day_14_Inventory_USR;

// PAR.Total Production      USR = PAR.Total Production      USR + CUR.Day 14 Produ
PAR.Total_Production_USR = PAR.Total_Production_USR + CUR.Day_14_Production_USR;

// PAR.Total Sales           USR = PAR.Total Sales           USR + CUR.Day 14 Sales
PAR.Total_Sales_USR = PAR.Total_Sales_USR + CUR.Day_14_Sales_USR;

// PAR.Total Availability    USR = PAR.Total Availability    USR + CUR.Day 14 Avail
PAR.Total_Availability_USR = PAR.Total_Availability_USR + CUR.Day_14_Availability_USR;

// PAR.Total Sched Shipments USR = PAR.Total Sched Shipments USR + CUR.Day 14 Sched
PAR.Total_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR                                      +
+ CUR.Day_14_Sched_Shipment_USR;

// CUR.Grand Total Inventory USR = CUR.Grand Total Inventory USR + CUR.Day 14 Inven
CUR.Grand_Total_Inventory_USR = CUR.Grand_Total_Inventory_USR + CUR.Day_14_Inventory_USR;

// CUR.Grand Total Prod.     USR = CUR.Grand Total Prod.     USR + CUR.Day 14 Produ
CUR.Grand_Total_Prod_USR = CUR.Grand_Total_Prod_USR + CUR.Day_14_Production_USR;

// CUR.Grand Total Sales     USR = CUR.Grand Total Sales     USR + CUR.Day 14 Sales
CUR.Grand_Total_Sales_USR = CUR.Grand_Total_Sales_USR + CUR.Day_14_Sales_USR;

// CUR.Grand Total Avail.    USR = CUR.Grand Total Avail.    USR + CUR.Day 14 Avail
CUR.Grand_Total_Avail_USR = CUR.Grand_Total_Avail_USR + CUR.Day_14_Availability_USR;

// CUR.Grand Total Schd Ship USR = CUR.Grand Total Schd Ship USR + CUR.Day 14 Sched
CUR.Grand_Total_Schd_Ship_USR = CUR.Grand_Total_Schd_Ship_USR                                      +
+ CUR.Day_14_Sched_Shipment_USR;

ENDIF;

// CUR.Unit Weight = PAR.Unit Weight
CUR.Unit_Weight = PAR.Unit_Weight;

//?Changed the Load Availability to be (Qty * Unit Weight) / Load Size
//?Per Judy Schaub on 9/23/97 M Arensberg
//?Calculate load availability
CASE;

// IF PAR.Load Size USR is Not Equal to Zero
IF PAR.Load_Size_USR <> *ZERO;

// Available load Day 1
CUR.Day_1_Avail_Ld_Usr = ( CUR.Day_1_Availability_USR * CUR.Unit_Weight 'H' )                      +
/ PAR.Load_Size_USR 'H';

// Available load Day 2
CUR.Day_2_Avail_Ld_Usr = ( CUR.Day_2_Availability_USR * CUR.Unit_Weight 'H' )                      +
/ PAR.Load_Size_USR 'H';

// Available load Day 3
CUR.Day_3_Avail_Ld_Usr = ( CUR.Day_3_Availability_USR * CUR.Unit_Weight 'H' )                      +
/ PAR.Load_Size_USR 'H';

// Available load Day 4
CUR.Day_4_Avail_Ld_Usr = ( CUR.Day_4_Availability_USR * CUR.Unit_Weight 'H' )                      +
/ PAR.Load_Size_USR 'H';

// Available load Day 5
CUR.Day_5_Avail_Ld_Usr = ( CUR.Day_5_Availability_USR * CUR.Unit_Weight 'H' )                      +
/ PAR.Load_Size_USR 'H';

// Available load Day 6
CUR.Day_6_Avail_Ld_Usr = ( CUR.Day_6_Availability_USR * CUR.Unit_Weight 'H' )                      +
/ PAR.Load_Size_USR 'H';

// Available load Day 7
CUR.Day_7_Avail_Ld_Usr = ( CUR.Day_7_Availability_USR * CUR.Unit_Weight 'H' )                      +
/ PAR.Load_Size_USR 'H';

// Available load Day 8
CUR.Day_8_Avail_Ld_Usr = ( CUR.Day_8_Availability_USR * CUR.Unit_Weight 'H' )                      +
/ PAR.Load_Size_USR 'H';

// Available load Day 9
CUR.Day_9_Avail_Ld_Usr = ( CUR.Day_9_Availability_USR * CUR.Unit_Weight 'H' )                      +
/ PAR.Load_Size_USR 'H';

// Available load Day 10
CUR.Day_10_Avail_Ld_Usr = ( CUR.Day_10_Availability_USR * CUR.Unit_Weight 'H' )                    +
/ PAR.Load_Size_USR 'H';

// Available load Day 11
CUR.Day_11_Avail_LD_Usr = ( CUR.Day_11_Availability_USR * CUR.Unit_Weight 'H' )                    +
/ PAR.Load_Size_USR 'H';

// Available load Day 12
CUR.Day_12_Avail_Ld_Usr = ( CUR.Day_12_Availability_USR * CUR.Unit_Weight 'H' )                    +
/ PAR.Load_Size_USR 'H';

// Available load Day 13
CUR.Day_13_Avail_Ld_Usr = ( CUR.Day_13_Availability_USR * CUR.Unit_Weight 'H' )                    +
/ PAR.Load_Size_USR 'H';

// Available load Day 14
CUR.Day_14_Avail_Ld_Usr = ( CUR.Day_14_Availability_USR * CUR.Unit_Weight 'H' )                    +
/ PAR.Load_Size_USR 'H';

// Available load Gand Total
CUR.Grand_Total_Avail_LdUSR = ( CUR.Grand_Total_Avail_USR * CUR.Unit_Weight 'H' )                  +
/ PAR.Load_Size_USR 'H';

ENDIF;

//?USER: On print of detail format

CASE;

// IF PAR.Print Zeros USR is no
IF PAR.Print_Zeros_USR = 'N';

CASE;

// IF CUR.Grand Total Avail.    USR is equal zero
IF CUR.Grand_Total_Avail_USR = *ZERO;

// AND CUR.Grand Total Schd Ship USR is equal zero
AND CUR.Grand_Total_Schd_Ship_USR = *ZERO;

// AND CUR.Grand Total Prod.     USR is equal zero
AND CUR.Grand_Total_Prod_USR = *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

ENDIF;

//?USER: Print required level totals

// SUPPRESSED PRINT Item Display Sequence totals format

// SUPPRESSED PRINT Availability Group Code totals format

// SUPPRESSED PRINT Accounting Company Number totals format

