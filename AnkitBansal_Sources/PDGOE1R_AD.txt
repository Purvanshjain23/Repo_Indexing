// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDGOE1R
// ?Date: 14.08.2025 Time: 03:34:34
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(LCL.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

//?USER: Initialize detail screen (new record)

MOVE *ALL (To: DTL From: PAR);

// DTL.Trailer ID USR = PAR.Trailer Id
DTL.Trailer_ID_USR = PAR.Trailer_Id;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


// DTL.Trailer ID USR = DTL.Trailer Id
DTL.Trailer_ID_USR = DTL.Trailer_Id;

// DTL.Seaboard Owned Status = CND.no
DTL.Seaboard_Owned_Status = 'N';

// DTL.Assigned Status = CND.no
DTL.Assigned_Status = 'N';

// DTL.Available Status = CND.no
DTL.Available_Status = 'N';

// DTL.On Yard Status = CND.no
DTL.On_Yard_Status = 'N';

// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

// DTL.Status Description = Condition name of DTL.Seaboard Owned Status
DTL.Status_Description = RTVCND(DTL.Seaboard_Owned_Status);

// DTL.Status Description 2 = Condition name of DTL.Assigned Status
DTL.Status_Description_2 = RTVCND(DTL.Assigned_Status);

// DTL.Status Description 3  USR = Condition name of DTL.Available Status
DTL.Status_Description_3_USR = RTVCND(DTL.Available_Status);

// DTL.Condition Desc. 4  USR = Condition name of DTL.Record Status
DTL.Condition_Desc_4_USR = RTVCND(DTL.Record_Status);

CASE;

// IF DTL.Company Number is Equal to zero
IF DTL.Company_Number = *ZERO;

// DTL.Company Name DRV = CON.*BLANK
DTL.Company_Name_DRV = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


ENDIF;

//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DB1.Carrier_Code);
PARAMETER(DTL.Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


// DTL.Trailer ID USR = PAR.Trailer Id
DTL.Trailer_ID_USR = PAR.Trailer_Id;

// DTL.Trailer ID USR = DTL.Trailer Id
DTL.Trailer_ID_USR = DTL.Trailer_Id;

// DTL.Condition Desc. 1  USR = Condition name of DTL.Trailer Type
DTL.Condition_Desc_1_USR = RTVCND(DTL.Trailer_Type);

// DTL.Load Type Desc = Condition name of DTL.Load Type
DTL.Load_Type_Desc = RTVCND(DTL.Load_Type);

// DTL.Status Description = Condition name of DTL.Seaboard Owned Status
DTL.Status_Description = RTVCND(DTL.Seaboard_Owned_Status);

// DTL.Status Description 2 = Condition name of DTL.Assigned Status
DTL.Status_Description_2 = RTVCND(DTL.Assigned_Status);

// DTL.Status Description 3  USR = Condition name of DTL.Available Status
DTL.Status_Description_3_USR = RTVCND(DTL.Available_Status);

// DTL.Condition Desc. 4  USR = Condition name of DTL.Record Status
DTL.Condition_Desc_4_USR = RTVCND(DTL.Record_Status);

// DTL.USR On Yard Time = DB1.On Yard Time / CON.100 *
DTL.USR_On_Yard_Time = DB1.On_Yard_Time / 100;

//?Save to check for change later.
// PAR.USR On Yard Date = DTL.On Yard Date
PAR.USR_On_Yard_Date = DTL.On_Yard_Date;

// PAR.USR Time = DTL.On Yard Time
PAR.USR_Time = DTL.On_Yard_Time;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Validate detail screen fields

EXECUTE FUNCTION(RTV Load for DrpTrlrRp RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1504531;
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.Company_Number);
PARAMETER(PAR.Load_Status);
PARAMETER(DTL.Trailer_ID_USR);
PARAMETER(DTL.Carrier_Code);
PARAMETER(PAR.USR_Load_Type);
PARAMETER(PAR.BOL_Complete_Date);
PARAMETER(PAR.BOL_Complete_Time);
PARAMETER(PAR.Truck_Departure_Date);
PARAMETER(PAR.Truck_Departure_Time);
PARAMETER(PAR.Deadline_Departure_Date);
PARAMETER(PAR.Deadline_Departure_Time);
PARAMETER(WRK.USR_Active_Load);
{
 //?USER: Initialize routine

 // PAR.USR Active Load = CND.no
 PAR.USR_Active_Load = 'N';

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.USR Active Load = CND.no
 PAR.USR_Active_Load = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Truck Departure Date is not entered
 IF DB1.Truck_Departure_Date = *ZERO;

 //?Active load
 MOVE *ALL (To: PAR From: DB1);

 // PAR.USR Active Load = CND.yes
 PAR.USR_Active_Load = 'Y';

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?NOT Active load
 ENDIF;

}


//?Validate Load type
CASE;

// IF PAR.USR Load Type is Bulk & Regular
IF PAR.USR_Load_Type = 'B'/'R';

// AND DTL.Load Type NE PAR.USR Load Type
AND DTL.Load_Type <> PAR.USR_Load_Type;

// Send error message - 'Trailer Load Type &2 disagrees with Load Type &1 on the Load.'
ERROR(USR2613);
MSGPARM(PAR.USR_Load_Type);
MSGPARM(DTL.Load_Type);
MSGPARM(DTL.Trailer_ID_USR);

ENDIF;

//?Validate Seaboard Owned Status
CASE;

// IF DTL.Seaboard Owned Status is yes
IF DTL.Seaboard_Owned_Status = 'Y';

CASE;

// IF PAR.Load ID is NE Blank
IF PAR.Load_ID <> *ZERO;

// Send information message - 'Seaboard Owned Sts is Yes and the Trailer is assigned to Load &2.'
MESSAGE(USR2604 *INFO);
MSGPARM(DTL.Seaboard_Owned_Status);
MSGPARM(PAR.Load_ID);

ENDIF;

ENDIF;

//?Validate On Yard Date and Time
CASE;

// IF DTL.On Yard Date is GT Zero
IF DTL.On_Yard_Date > *ZERO;

// OR DTL.USR On Yard Time NE WRK.ZERO
OR DTL.USR_On_Yard_Time <> WRK.ZERO;

CASE;

// IF DTL.On Yard Date is not entered
IF DTL.On_Yard_Date = *ZERO;

// OR DTL.USR On Yard Time is Zero
OR DTL.USR_On_Yard_Time = *ZERO;

// Send error message - 'Both On Yard Date and Time must be entered.'
ERROR(USR2602);
MSGPARM(DTL.On_Yard_Date);
MSGPARM(DTL.USR_On_Yard_Time);

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.On Yard Status = CND.yes
DTL.On_Yard_Status = 'Y';

// DTL.Available Status = CND.yes
DTL.Available_Status = 'Y';

ENDIF;

//?Validate On Yard Date and Time
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.On Yard Status = CND.no
DTL.On_Yard_Status = 'N';

// DTL.Available Status = CND.no
DTL.Available_Status = 'N';

ENDIF;

//?Validate Assigned Status
CASE;

// IF DTL.Assigned Status is no
IF DTL.Assigned_Status = 'N';

CASE;

// IF WRK.USR Active Load is yes
IF WRK.USR_Active_Load = 'Y';

//?Active load
// Send error message - 'Assigned Status cannot be no. Trailer is assigned to Load &2.'
ERROR(USR2603);
MSGPARM(DTL.Assigned_Status);
MSGPARM(PAR.Load_ID);

ENDIF;

//?Validate Assigned Status
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF WRK.USR Active Load is no
IF WRK.USR_Active_Load = 'N';

// Send error message - 'Assigned Status cannot be yes. Trailer is not assigned to a Load.'
ERROR(USR2606);
MSGPARM(DTL.Assigned_Status);

ENDIF;

ENDIF;

//?Validate Record Status
CASE;

// IF DTL.Record Status is Inactive
IF DTL.Record_Status = 'I';

CASE;

// IF DTL.Assigned Status is yes
IF DTL.Assigned_Status = 'Y';

// Send error message - 'Record Status cannot be Inactive when the Trailer is assigned to a load.'
ERROR(USR2605);
MSGPARM(DTL.Record_Status);

ENDIF;

ENDIF;

//?validate company number
DO;

//?05/10/07 JRB Removed hard coded companies
EXECUTE FUNCTION(Rtv Plant Co Status   RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1761084;
PARAMETER(DTL.Company_Number);
PARAMETER(LCL.Plant_Company_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Plant Company Sts is Plant Company
IF LCL.Plant_Company_Sts = 'P';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Company New not found.'
ERROR(USR2392);

ENDIF;

ENDDO;

//?CALC: Detail screen function fields

// DTL.Load Type Desc = Condition name of DTL.Load Type
DTL.Load_Type_Desc = RTVCND(DTL.Load_Type);

// DTL.Condition Desc. 1  USR = Condition name of DTL.Trailer Type
DTL.Condition_Desc_1_USR = RTVCND(DTL.Trailer_Type);

// DTL.Status Description = Condition name of DTL.Seaboard Owned Status
DTL.Status_Description = RTVCND(DTL.Seaboard_Owned_Status);

// DTL.Status Description 2 = Condition name of DTL.Assigned Status
DTL.Status_Description_2 = RTVCND(DTL.Assigned_Status);

// DTL.Status Description 3  USR = Condition name of DTL.Available Status
DTL.Status_Description_3_USR = RTVCND(DTL.Available_Status);

// DTL.Condition Desc. 4  USR = Condition name of DTL.Record Status
DTL.Condition_Desc_4_USR = RTVCND(DTL.Record_Status);

// DTL.On Yard Time = DTL.USR On Yard Time * CON.100 *
DTL.On_Yard_Time = DTL.USR_On_Yard_Time * 100;

//?USER: Validate detail screen relations

CASE;

// IF DTL.*CMD key is CF04
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Trailer ID USR
IF PGM.*Cursor_field = DTL.Trailer_ID_USR;

// Call program Sel PD Trailer         SR.
CALL PROGRAM(Sel PD Trailer         SR) ('PDGLSRR');
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Trailer_ID_USR);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Load_Type);
PARAMETER(DTL.On_Yard_Status);
PARAMETER(DTL.Assigned_Status);
PARAMETER(DTL.Available_Status);

// DTL.Trailer Id = DTL.Trailer ID USR
DTL.Trailer_Id = DTL.Trailer_ID_USR;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> DTL.Company Number
IF PGM.*Cursor_field = DTL.Company_Number;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(DTL.Company_Number);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt PD Trailer         CR) TYPE(CRTOBJ) FILE(PDLYREP)          AC1496468;
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Trailer_ID_USR);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Load_Type);
PARAMETER(DTL.Trailer_Type);
PARAMETER(DTL.Seaboard_Owned_Status);
PARAMETER(DTL.On_Yard_Status);
PARAMETER(DTL.On_Yard_Date);
PARAMETER(DTL.On_Yard_Time);
PARAMETER(DTL.Assigned_Status);
PARAMETER(DTL.Available_Status);
PARAMETER(DTL.Not_Available_Reason_Code);
PARAMETER(DTL.Comment_Line);
PARAMETER(DTL.Status_Unused_1);
PARAMETER(DTL.Status_Unused_2);
PARAMETER(DTL.Status_Unused_3);
PARAMETER(DTL.Status_Unused_4);
PARAMETER(DTL.Status_Unused_5);
PARAMETER(DTL.Date_Unused_1);
PARAMETER(DTL.Date_Unused_2);
PARAMETER(DTL.Date_Unused_3);
PARAMETER(DTL.Date_Unused_4);
PARAMETER(DTL.Date_Unused_5);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Job_Time);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Job_Date);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Trailer,Load Hdr   IF) TYPE(EXCINTFUN) FILE(PDLYREP)       AC1503459;
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Trailer_ID_USR);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Load_Type);
PARAMETER(DTL.Trailer_Type);
PARAMETER(DTL.Seaboard_Owned_Status);
PARAMETER(DTL.On_Yard_Status);
PARAMETER(DTL.On_Yard_Date);
PARAMETER(DTL.On_Yard_Time);
PARAMETER(DTL.Assigned_Status);
PARAMETER(DTL.Available_Status);
PARAMETER(DTL.Not_Available_Reason_Code);
PARAMETER(DTL.Comment_Line);
PARAMETER(DTL.Status_Unused_1);
PARAMETER(DTL.Status_Unused_2);
PARAMETER(DTL.Status_Unused_3);
PARAMETER(DTL.Status_Unused_4);
PARAMETER(DTL.Status_Unused_5);
PARAMETER(DTL.Date_Unused_1);
PARAMETER(DTL.Date_Unused_2);
PARAMETER(DTL.Date_Unused_3);
PARAMETER(DTL.Date_Unused_4);
PARAMETER(DTL.Date_Unused_5);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Job_Time);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Job_Date);
PARAMETER(PAR.USR_On_Yard_Date);
PARAMETER(PAR.USR_Time);
{
 //?Execute internal function

 EXECUTE FUNCTION(Chg PD Trailer         CH) TYPE(CHGOBJ) FILE(PDLYREP)          AC1496469;
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Trailer_Id);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Load_Type);
 PARAMETER(PAR.Trailer_Type);
 PARAMETER(PAR.Seaboard_Owned_Status);
 PARAMETER(PAR.On_Yard_Status);
 PARAMETER(PAR.On_Yard_Date);
 PARAMETER(PAR.On_Yard_Time);
 PARAMETER(PAR.Assigned_Status);
 PARAMETER(PAR.Available_Status);
 PARAMETER(PAR.Not_Available_Reason_Code);
 PARAMETER(PAR.Comment_Line);
 PARAMETER(PAR.Status_Unused_1);
 PARAMETER(PAR.Status_Unused_2);
 PARAMETER(PAR.Status_Unused_3);
 PARAMETER(PAR.Status_Unused_4);
 PARAMETER(PAR.Status_Unused_5);
 PARAMETER(PAR.Date_Unused_1);
 PARAMETER(PAR.Date_Unused_2);
 PARAMETER(PAR.Date_Unused_3);
 PARAMETER(PAR.Date_Unused_4);
 PARAMETER(PAR.Date_Unused_5);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Job_Time);
 PARAMETER(PAR.User_Id);
 PARAMETER(PAR.Job_Name);
 PARAMETER(PAR.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?Change Load Headers not yet departed if the on yard dt/tm changed
 CASE;

 // IF PAR.USR On Yard Date NE PAR.On Yard Date
 IF PAR.USR_On_Yard_Date <> PAR.On_Yard_Date;

 // OR PAR.On Yard Time NE PAR.USR Time
 OR PAR.On_Yard_Time <> PAR.USR_Time;

 EXECUTE FUNCTION(Rtv/Chg On Yard Dt,Tm  RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1503451;
 PARAMETER(PAR.Trailer_Id);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.On_Yard_Date);
 PARAMETER(PAR.On_Yard_Time);
 {
  //?USER: Process Data record

  //?If truck not yet departed, update On Yard DT,Tm on Load Header
  CASE;

  // IF DB1.Truck Departure Date is not entered
  IF DB1.Truck_Departure_Date = *ZERO;

  EXECUTE FUNCTION(Chg On Yard Dt,Tm      CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1503452;
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.LTL_Flag);
  PARAMETER(DB1.Load_Status);
  PARAMETER(DB1.Reefer_Temperature);
  PARAMETER(DB1.Seal_1);
  PARAMETER(DB1.Seal_2);
  PARAMETER(DB1.Seal_3);
  PARAMETER(DB1.Total_Load_Order_Weight);
  PARAMETER(DB1.Flat_Amount);
  PARAMETER(DB1.Allocate_Pounds_Miles);
  PARAMETER(DB1.Total_Stops);
  PARAMETER(DB1.Trailer_Id);
  PARAMETER(DB1.Transloader_Carrier_Code);
  PARAMETER(DB1.BOL_Time);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Truck_Size);
  PARAMETER(DB1.Ld_Hdr_Ld_Dtl_Unused);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.Ship_Status);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Number_Pallets_Received);
  PARAMETER(DB1.Number_Pallets_Loaded);
  PARAMETER(DB1.Load_Carrier_Pay_Amt);
  PARAMETER(DB1.Estimated_Arrival_Time);
  PARAMETER(DB1.Actual_Arrival_Date);
  PARAMETER(DB1.Actual_Arrival_Time);
  PARAMETER(DB1.Trailer_IN_Weight);
  PARAMETER(DB1.Trailer_OUT_Weight);
  PARAMETER(DB1.Actual_Departure_Date);
  PARAMETER(DB1.Departure_Time);
  PARAMETER(DB1.Schedule_Sequence_Number);
  PARAMETER(DB1.Product_Temperature);
  PARAMETER(DB1.Number_Spacers_Loaded);
  PARAMETER(DB1.Car_Veh_Initials);
  PARAMETER(DB1.Total_Load_Miles);
  PARAMETER(DB1.Recorder_ID);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Ship_From_Warehouse);
  PARAMETER(DB1.Ship_To_State_Code);
  PARAMETER(DB1.Gross_Weight);
  PARAMETER(DB1.Carrier_Broker);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Actual_Ship_Date);
  PARAMETER(DB1.On_Time_Y_N);
  PARAMETER(DB1.Truck_Ready_Date);
  PARAMETER(DB1.Truck_Ready_Time);
  PARAMETER(DB1.Spotted_Date);
  PARAMETER(DB1.Spotted_Time);
  PARAMETER(DB1.Load_Finished_Date);
  PARAMETER(DB1.Load_Finished_Time);
  PARAMETER(DB1.BOL_Complete_Date);
  PARAMETER(DB1.BOL_Complete_Time);
  PARAMETER(DB1.BOL_Received_Date);
  PARAMETER(DB1.BOL_Received_Time);
  PARAMETER(DB1.Truck_Departure_Date);
  PARAMETER(DB1.Truck_Departure_Time);
  PARAMETER(DB1.Adjusted_Departure_Date);
  PARAMETER(DB1.Adjusted_Departure_Time);
  PARAMETER(DB1.Shipping_Line);
  PARAMETER(DB1.Port_Delv_Terminal);
  PARAMETER(DB1.Vessel_Name);
  PARAMETER(DB1.Voyage);
  PARAMETER(DB1.Sail_Date);
  PARAMETER(DB1.Booking_Number);
  PARAMETER(DB1.Discharge_Port);
  PARAMETER(DB1.Arrival_Date);
  PARAMETER(DB1.Container_Number);
  PARAMETER(DB1.Date_In);
  PARAMETER(DB1.Time_In);
  PARAMETER(DB1.Date_Out);
  PARAMETER(DB1.Time_Out);
  PARAMETER(DB1.Load_Total_Freight);
  PARAMETER(DB1.Scheduled_Delivery_Date);
  PARAMETER(DB1.Scheduled_Delivery_Time);
  PARAMETER(DB1.LH_Unused_Sts);
  PARAMETER(DB1.LH_Carrier_Payment_Sts);
  PARAMETER(DB1.Bring_Back_Miles);
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(DB1.Load_Acceptance_Flag);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.On_Yard_Date);
  PARAMETER(PAR.On_Yard_Time);
  PARAMETER(DB1.Deadline_Departure_Date);
  PARAMETER(DB1.Deadline_Departure_Time);
  PARAMETER(DB1.Load_Held_Over);
  PARAMETER(DB1.Load_Held_Over_Reason);
  PARAMETER(DB1.Ocean_BOL_Number);
  PARAMETER(DB1.Express_Mail_Number);
  PARAMETER(DB1.Express_Mail_Date);
  PARAMETER(DB1.Load_Shag_Flag);
  PARAMETER(DB1.Load_Wash_Flag);
  PARAMETER(DB1.Product_Complete_Date);
  PARAMETER(DB1.Product_Complete_Time);
  PARAMETER(DB1.Load_Confirmation_Time);
  PARAMETER(DB1.Load_Door_1);
  PARAMETER(DB1.Override_Total_Load_Miles);
  PARAMETER(DB1.Load_Door_2);
  PARAMETER(DB1.Partial_Load);
  PARAMETER(DB1.Load_Confirmation_Fax_Sts);
  PARAMETER(DB1.Export_Load_USDA_OK);
  PARAMETER(DB1.Late_Delivery_Email_Flag);
  PARAMETER(DB1.Load_Actual_Freight);
  PARAMETER(DB1.LH_On_Time_Reason_Code);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing after Data read

   //?Save copy of fields written to Load Order Change Log
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Carrier Code = DB1.Carrier Code
   LCL.Carrier_Code = DB1.Carrier_Code;

   // LCL.Scheduled Delivery Date = DB1.Scheduled Delivery Date
   LCL.Scheduled_Delivery_Date = DB1.Scheduled_Delivery_Date;

   ENDIF;

   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   //?USER: Processing after Data update

   //?Check fields for Load Order Header Change Log
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Carrier Code
   CASE;

   // IF PAR.Carrier Code NE LCL.Carrier Code
   IF PAR.Carrier_Code <> LCL.Carrier_Code;

   // Call program CRT Load/Order Chg Log XF.
   CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
   PARAMETER(DB1.Load_ID);
   PARAMETER(*ZERO);
   PARAMETER('CARCHG');
   PARAMETER('TRF');
   PARAMETER(LCL.Carrier_Code);
   PARAMETER(PAR.Carrier_Code);
   PARAMETER(JOB.*USER);
   PARAMETER(JOB.*PROGRAM);
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Company_Number);
   PARAMETER(*ZERO);

   ENDIF;

   //?Scheduled Delivery Date
   CASE;

   // IF PAR.Scheduled Delivery Date NE LCL.Scheduled Delivery Date
   IF PAR.Scheduled_Delivery_Date <> LCL.Scheduled_Delivery_Date;

   //?Convert dates to character
   // LCL.Date From Alpha       USR = CVTVAR(LCL.Scheduled Delivery Date)
   LCL.Date_From_Alpha_USR = CVTVAR(LCL.Scheduled_Delivery_Date);

   // LCL.Date To Alpha         USR = CVTVAR(PAR.Scheduled Delivery Date)
   LCL.Date_To_Alpha_USR = CVTVAR(PAR.Scheduled_Delivery_Date);

   // Call program CRT Load/Order Chg Log XF.
   CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
   PARAMETER(DB1.Load_ID);
   PARAMETER(*ZERO);
   PARAMETER('SCHDLV');
   PARAMETER('TRF');
   PARAMETER(LCL.Date_From_Alpha_USR);
   PARAMETER(LCL.Date_To_Alpha_USR);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Company_Number);
   PARAMETER(*ZERO);

   ENDIF;

   ENDIF;

  }

  ENDIF;

 }

 ENDIF;

}


