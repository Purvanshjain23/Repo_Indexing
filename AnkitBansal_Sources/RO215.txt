     h option(*SRCSTMT:*NODEBUGIO)

      * ENVIRONMENT: Pork Division
      * SYSTEM:      Resource Optimization
      * PROGRAM:     RO215
      * TITLE:       Calculate Meat Cost--Item
      * PROGRAMMER:  LeAnne Ramsey
      * CREATED:     12/19/06
      *
      * FUNCTION:    Summarize the Component Item Meat Cost values for the week into
      *              an Item Meat Cost record.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 04/10/07  LeAnne Ramsey
      *           Switched from "sales" to "produced" values. But, we will continue
      *           to populate 3 "sales" fields: Sales Pounds, Net Product Revenue Amount and
      *           Net Product Revenue Price/Lb just to give us a leg up if the users want
      *           to switch back to "sales" values.
      *
      * 11/02/07  LeAnne Ramsey
      *           Added logic to populate new field (Sales Yield %) in
      *           Item Meat Cost file.
      *
      * 06/06/08  LeAnne Ramsey
      *           Recompile only.
      *           New fields (Ingredient and Other Cost) added to multiple files.
      *
      * 11/20/08  LeAnne Ramsey
      *           As a prep for synchronizing the TFS and Meat Cost LDAs, we
      *           removed the unused LDA fields.
      *
      * 11/21/08  LeAnne Ramsey
      *           As part of synchronizing the LDAs between the TFS Margin Adjustment Close
      *           and the Meat Costing, we changed the LDA positions.
      *
      * 06/17/09  LeAnne Ramsey
      *           Added 3 fields/logic to ROP103-Item Meat Cost:
      *               TF Classification Code, TF Class Group Code, Item Structure Type Code
      *
      * 10/03/13  LeAnne Ramsey (E2806)
      *           Damon is changing some Ham Items to consume Raw Material Items instead of
      *           finished goods Items. Our current logic to get a "rate" to use in calcing
      *           a Yielded Meat Cost no longer works. So, Damon had me add conditional logic
      *           when the Primal Group is HAMC.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     frop102    if   e           k disk
      *  Component item meat cost
      *
      *
     frop103    o    e           k disk
      *  Item meat cost
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Control fields
      *
     D first           s              1    inz('Y')
     D svitcd          s                   like(cmitcd)
      *
      *
      * Workfields
      *
     d wklength        s              5  0
     d wkused          s              2  0
     d wkdot           s              1
      *
     d wkrt            s              7  6
     d wkitcd          s              8
     d wkcost          s             15  6
      *
      *
      * Parms
      *
     D xxitcd          s                   like(imitcd)
     D xxistycd        s                   like(imistycd)
     D xxisgrcd        s              3  0
     D xxisclcd        s              3  0
     D xxtfclcd        s                   like(imtfclcd)
     D xxtfcgcd        s                   like(imtfcgcd)
     D xxglsub         s              3
     D xxitycd         s              3
     D xxedfl          s              1
     D xxcoownfl       s              1
     D xxprdcmp        s              3
      *
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      * Local data area
      *---------------------------------------------------------------
      *
     Dlda             uds                  dtaara(*lda)
      *
     D  ldwedt                29     36  0
      *
     D  ldcono                82     84  0
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************************************8
      * Mainline
      ****************************************************************************************8
      *
      * Read each record in the Component Item Meat Cost file for this Company/Week.
      * Write a summarized Item Meat Cost record for each unique Item.
      *
     C     key01         setll     rop102
      *
     C                   dou       *in90 = *on                                  Main do
     C     key01         reade     rop102                                 90
     C                   if        *in90 = *off                                 If not EOF
      *
      * Control breaks
     C                   select
     C                   when      first = yes
     C                   move      no            first
     C                   z-add     cmitcd        svitcd
      *
     C                   when      cmitcd <> svitcd
     C                   exsr      $wrt103
     C                   endsl
      *
      * Detail processing
     C                   exsr      $detail
      *
     C                   endif                                                  If not EOF
     C                   enddo                                                  Main do
      *----------------
      * EOF processing
      *----------------
      *
      * Write out last record
      *
     C                   if        first = no
     C                   exsr      $wrt103
     C                   endif

     C                   seton                                        lr
      /eject
      *---------------------------------------------------------------
      * Detail processing
      *---------------------------------------------------------------
      *
     C     $detail       begsr
      *
      * When the Bill of Material Type is "Consumed", append the Component Item Code
      * onto all the other Component Item Codes that you may already have in the
      * Base Item Description field for this Item.
      *
     C                   if        cmbomty = 'C'
     C                   exsr      $bids
     C                   endif
      *
      * When the Item or the Component Item has an Item Type of "Base":
      *   1) calculate a Base Price
      *   2) calculate a Yield Percent when the Item is a Base Item
      *
     C                   select
     C                   when      cmittycd = 'BS' or cmciittycd = 'BS'
      *
     C                   eval(h)   imbspr = imbspr + (cmcibspr * (cmcspc / 100))
      *
      *
      *              If the Item itself is a "base item" and this is NOT a HAMC Primal Group
      *
     C                   if        cmittycd = 'BS' and cmpgcd <> 'HAMC  '
     C                   eval      wkrt = (cmsypc * (1 + (cmpumppc / 100)))
     C                                    / 100
     C                   endif
      *
      * Produced Item (Component-Item and Item are the same)
      *   1) Calculate a Yield Percent
      *   2) Populate fields
      *
     C                   when      cmciitcd = cmitcd
     C                   eval      wkrt = (cmsypc * (1 + (cmpumppc / 100)))
     C                                    / 100
     C                   z-add     cmcono        imcono
     C                   z-add     cmwedt        imwedt
     C                   z-add     cmitcd        imitcd
     C                   move      cmittycd      imittycd
     C                   move      cmpdcd        impdcd
     C                   move      cmplcd        implcd
     C                   move      cmpgcd        impgcd
     C                   z-add     cmsypc        imsypc
      * Sales values
     C                   z-add     cmnpram       imnpram
     C                   z-add     cmsllb        imsllb
     C                   if        imsllb <> 0
     C     imnpram       div(h)    imsllb        imnprpr
     C                   endif
      *
      * Produced values
     C                   z-add     cmpuam        impuam
     C                   z-add     cmpulb        impulb
     C                   if        impulb <> 0
     C     impuam        div(h)    impulb        impupr
     C                   endif
     C                   other
      *
      * Component Credit Item, so accumulate:
      *    1) Component Item Credit Value
      *
     C                   add       cmcicrvl      imcrvl
      *
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Description
      *---------------------------------------------------------------
      *
     C     $bids         begsr
      *
     C                   eval      wkitcd =
     C                              wkdot + %trim(%editc(cmciitcd:'Z'))
     C                   eval      wklength =
     C                              %len(wkdot + %trim(%editc(cmciitcd:'Z')))
      *
     C     ' '           checkr    imbids        wkused
     C                   if        wklength <= 30 - wkused
     C                   cat       wkitcd:0      imbids
     C                   endif
      *
     C                   move      '.'           wkdot
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Write an Item Meat Cost record
      *---------------------------------------------------------------
      *
     C     $wrt103       begsr
      *
      * Calculate Yielded Meat Cost when Base Price is not zero.
      *
     C                   if        imbspr <> 0                                  If price
      *
     C                   if        wkrt = 0
     C                   z-add     1             wkrt
     C                   endif
      *
     C                   eval(h)   wkcost =
     C                              (imbspr - imcrvl) / wkrt
      *
     C                   if        wkcost <= 999.999999
     C                   z-add     wkcost        imymco
     C                   endif
     C                   endif                                                  If price
      *
      * Before writing the record, tweak the Base Item Description by
      * moving it 1 position to the left. Our build logic leaves the
      * first position blank. So, once it is all built, we will move it
      * over 1 position.
      *
     C                   eval      imbids = %trim(imbids)
      *
      * Retrieve the Item Structure stuff.
      *
     C                   call      'TF813'
     C                   parm      imitcd        xxitcd
     C     imistycd      parm      0             xxistycd
     C                   parm      0             xxisgrcd
     C                   parm      0             xxisclcd
     C     imtfclcd      parm      *blank        xxtfclcd
     C     imtfcgcd      parm      *blank        xxtfcgcd
     C                   parm      *blank        xxglsub
     C                   parm      *blank        xxitycd
     C                   parm      *blank        xxcoownfl
     C                   parm      *blank        xxprdcmp
     C                   parm      *blank        xxedfl
      *
      * Write record
     C                   write     imrec
     C                   clear                   imrec
      *
      * Save control values and clear workfields
      *
     C                   z-add     cmitcd        svitcd
     C                   z-add     0             wkrt
     C                   move      *blank        wkdot
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    ldcono
     C                   kfld                    ldwedt
      *
     C                   endsr
      /eject
