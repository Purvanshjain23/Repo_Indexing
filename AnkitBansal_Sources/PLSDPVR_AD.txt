// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLSDPVR
// ?Date: 14.08.2025 Time: 02:55:18
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications
//?11/04/2020 ISE H16853 - Recompiled due to change in Buy Order Number
//?USER: User defined action

//?E2521 03/27/13  slm mpr cutout or hog cutout. hard code remove in next
EXECUTE FUNCTION(Clc Crc Mrt Activ Crc RT) TYPE(RTVOBJ) FILE(PKB1CPP)           AB1116758;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.CD_Source_Type);
PARAMETER(DTL.CD_Payment_Type);
PARAMETER(LCL.BOH_Quote_Price_Type);
PARAMETER(LCL.CMP_Program_Code);
PARAMETER(LCL.TH_Purchase_Date);
PARAMETER(LCL.TH_CM_Base_Mkt_Price);
PARAMETER(LCL.Payment_Process_Type_USR);
PARAMETER(LCL.Pricing_UOM_USR);
PARAMETER(LCL.Head_Total_USR);
PARAMETER(LCL.Sort_Loss_Tot_USR);
PARAMETER(LCL.Std_Yield_Tot_USR);
PARAMETER(LCL.Weight_Tot_USR);
PARAMETER(LCL.Adj_Base_Carc_Val_Tot_USR);
PARAMETER(LCL.Lean_Percent_Tot_USR);
PARAMETER(LCL.Lean_Add_Ded_Val_Tot_USR);
PARAMETER(LCL.Total_Carc_Val_Tot_USR);
PARAMETER(LCL.Base_Carc_Val_Tot_USR);
PARAMETER(LCL.CM_Processing_Type_Usr);
PARAMETER(LCL.Competitors_Processing);
PARAMETER(LCL.TH_PHA_Lean_Prm_Crc_CWT);
PARAMETER(LCL.TH_PHA_Sort_Disc_Fctr);
PARAMETER(LCL.TH_Meat_Value_Factor_Amt);
PARAMETER(LCL.TH_Fixed_Cost_Amount);
PARAMETER(LCL.Gross_Before_Sort_HD_Usr);
PARAMETER(LCL.Cmp_Base_Carc);
PARAMETER(LCL.Cmp_Lean_Premium_Carc);
PARAMETER(LCL.Cmp_Yield_Gain_Loss_Carc);
PARAMETER(LCL.Cmp_Carc_Val_Carc);
PARAMETER(LCL.Cmp_Sort_Dsc_Carc);
PARAMETER(LCL.Cmp_Std_Yield);
PARAMETER(LCL.Cmp_Base_Mkt_Price);
PARAMETER(LCL.Cmp_Base_Live);
PARAMETER(LCL.Cmp_Lean_Premium_Live);
PARAMETER(LCL.Cmp_Yield_Gain_Loss_Live);
PARAMETER(LCL.Cmp_Carc_Val_Live);
PARAMETER(LCL.Cmp_Sort_Dsc_Live);
PARAMETER(LCL.Average_Pay_Sts_Usr);
PARAMETER(LCL.Print_Comp_Sum_Dtl_STS);
PARAMETER(LCL.TH_MPR_Sort_Loss);
{
 //?USER: Initialize routine

 //?10/11/17 Calc MPR Sort Loss -- change on otherwise stmt
 //?5/23/03  Calc MPR Sort Loss in Carcass Analysis Detail section
 //?Initialize Total Fields
 DO;

 // PAR.Head Total USR = CON.*ZERO
 PAR.Head_Total_USR = *ZERO;

 // PAR.Sort Loss Tot USR = CON.*ZERO
 PAR.Sort_Loss_Tot_USR = *ZERO;

 // PAR.Std Yield % Tot USR = CON.*ZERO
 PAR.Std_Yield_Tot_USR = *ZERO;

 // PAR.Weight Tot USR = CON.*ZERO
 PAR.Weight_Tot_USR = *ZERO;

 // PAR.Base Carc Val Tot USR = CON.*ZERO
 PAR.Base_Carc_Val_Tot_USR = *ZERO;

 // PAR.Adj Base Carc Val Tot USR = CON.*ZERO
 PAR.Adj_Base_Carc_Val_Tot_USR = *ZERO;

 // PAR.Lean Percent Tot USR = CON.*ZERO
 PAR.Lean_Percent_Tot_USR = *ZERO;

 // PAR.Lean Add/Ded Val Tot USR = CON.*ZERO
 PAR.Lean_Add_Ded_Val_Tot_USR = *ZERO;

 // PAR.Total Carc Val Tot USR = CON.*ZERO
 PAR.Total_Carc_Val_Tot_USR = *ZERO;

 // PAR.TH MPR Sort Loss = CON.*ZERO
 PAR.TH_MPR_Sort_Loss = *ZERO;

 // PAR.Gross Before Sort /HD Usr = CON.*ZERO
 PAR.Gross_Before_Sort_HD_Usr = *ZERO;

 ENDDO;

 //?10/23/2007 CMP Grade Type Adj to store the adj for backfat
 EXECUTE FUNCTION(Rtv CMP Payment Info3 RT) TYPE(RTVOBJ) FILE(PKARREP)           AB1281177;
 PARAMETER(PAR.CMP_Program_Code);
 PARAMETER(WRK.#Txt_USR);
 PARAMETER(PAR.CMP_Grading_Type);
 PARAMETER(PAR.CMP_Sort_Basis);
 PARAMETER(PAR.CMP_Carc_Wgt_Type);
 PARAMETER(PAR.CMP_Std_Lean_Percent);
 PARAMETER(PAR.CMP_Lean_Factor);
 PARAMETER(PAR.CMP_Optimal_Row_Nbr_f_srt);
 PARAMETER(PAR.CMP_Type);
 PARAMETER(WRK.CMP_Market_Add_Deduct);
 PARAMETER(PAR.CMP_of_Carcass_Cutout);
 PARAMETER(PAR.CMP_Fixed_Cost_Per_Head);
 PARAMETER(PAR.CMP_Grade_Type_Adj);
 PARAMETER(WRK.CMP_CLC_Premium_First);
 PARAMETER(WRK.RS_Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?comments
 DO;

 //?12/15/06 PKD If Grading Type is Meat Value, then retrieve the
 //?             USDA Pork Cutout Price for the Meav Value Factor.
 //?11/12/13 slm chnges per TF
 //?             pull the mrk and the group from the Cmp mkt/grp
 //?             need this for Triumph Foods  - Meat Value
 //?             created nw file to hold this data
 ENDDO;

 // LCL.CMP Effect Kill Date = PAR.TH Purchase Date
 LCL.CMP_Effect_Purchase_Date = PAR.TH_Purchase_Date;

 EXECUTE FUNCTION(Rtv Carcass Merit Prog RT) TYPE(RTVOBJ) FILE(PLBPCPP)          AB1316570;
 PARAMETER(PAR.CMP_Program_Code);
 PARAMETER(LCL.CMP_Effect_Purchase_Date);
 PARAMETER(LCL.CMP_Commodity_Market);
 PARAMETER(LCL.CMP_Commodity_Group);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF PAR.CMP Effect Kill Date GE DB1.CMP Effect Kill Date
  IF PAR.CMP_Effect_Purchase_Date >= DB1.CMP_Effect_Purchase_Date;

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

  // IF PAR.CMP Effect Kill Date LT DB1.CMP Effect Kill Date
  IF PAR.CMP_Effect_Purchase_Date < DB1.CMP_Effect_Purchase_Date;

  ENDIF;

 }

 CASE;

 // IF PAR.CMP Grading Type is Meat Value
 IF PAR.CMP_Grading_Type = 'M';

 // Call program RTV Market Price      XF.
 CALL PROGRAM(RTV Market Price      XF) ('PDMWXFR');
 PARAMETER(WRK.*Return_code);
 PARAMETER(LCL.CMP_Commodity_Market);
 PARAMETER(LCL.CMP_Commodity_Group);
 PARAMETER(PAR.TH_Purchase_Date);
 PARAMETER(*ZERO);
 PARAMETER(LCL.OMS_Market_Price_Amt_Usr);
 PARAMETER(LCL.Pricing_Date_USR);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER('CUR');
 PARAMETER('H');
 PARAMETER(WRK.OMS_Error_Return_Usr);

 //?FIXED COST
 //?if LCL.OMS Market Price Amt Usr is zero, then send a message
 //?to some distribution list Market Price not available for Fixed Cost
 //?Calculation.
 // Market Prc Hog/Cutout USR
 LCL.Market_Prc_Hog_Cutout_USR = LCL.OMS_Market_Price_Amt_Usr * (
 PAR.CMP_of_Carcass_Cutout / 100 'H' ) 'H';

 ENDIF;

 //?USER: Process Data record

 CASE;

 // IF PAR.Competitors Processing is Yes
 IF ( PAR.Competitors_Processing = 'Y';

 // AND PAR.CM Processing Type Usr is Payment
 AND PAR.CM_Processing_Type_Usr = 'P';

 // AND DB1.CD Record Add/Del Sts is Delete
 AND DB1.CD_Record_Add_Del_Sts = 'D' );

 // OR PAR.Competitors Processing is No
 OR ( PAR.Competitors_Processing = 'N';

 // AND PAR.CM Processing Type Usr is Analysis
 AND PAR.CM_Processing_Type_Usr = 'A';

 // AND DB1.CD Record Add/Del Sts is Delete
 AND DB1.CD_Record_Add_Del_Sts = 'D' );

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.CD Adjust/Add Type is Not Add w/Average Value
 IF DB1.CD_Adjust_Add_Type = 'HST'/'AVG'/'2WK'/'4WK'/'LN%'/*BLANK/'LOT';

 // OR PAR.Competitors Processing is Yes
 OR PAR.Competitors_Processing = 'Y';

 //?move db1 ca fields to par ca fields
 DO;

 // PAR.CD CA Sort Loss = DB1.CD CA Sort Loss
 PAR.CD_CA_Sort_Loss = DB1.CD_CA_Sort_Loss;

 // PAR.CD CA Std Yield = DB1.CD CA Std Yield
 PAR.CD_CA_Std_Yield = DB1.CD_CA_Std_Yield;

 // PAR.CD CA Base Carcass CWT = DB1.CD CA Base Carcass CWT
 PAR.CD_CA_Base_Carcass_CWT = DB1.CD_CA_Base_Carcass_CWT;

 // PAR.CD CA Crc Value Per CWT = DB1.CD CA Crc Value Per CWT
 PAR.CD_CA_Crc_Value_Per_CWT = DB1.CD_CA_Crc_Value_Per_CWT;

 // PAR.CD CA Base Carc Value = DB1.CD CA Base Carc Value
 PAR.CD_CA_Base_Carc_Value = DB1.CD_CA_Base_Carc_Value;

 // PAR.CD CA Crc Value $ Per Hd = DB1.CD CA Crc Value $ Per Hd
 PAR.CD_CA_Crc_Value_$_Per_Hd = DB1.CD_CA_Crc_Value_$_Per_Hd;

 // PAR.CD CA Lean Premium CWT = DB1.CD CA Lean Premium CWT
 PAR.CD_CA_Lean_Premium_CWT = DB1.CD_CA_Lean_Premium_CWT;

 // PAR.CD CA Lean Premium $ P Hd = DB1.CD CA Lean Premium $ P Hd
 PAR.CD_CA_Lean_Premium_$_P_Hd = DB1.CD_CA_Lean_Premium_$_P_Hd;

 // PAR.CD CA Gross Value Per CWT = DB1.CD CA Gross Value Per CWT
 PAR.CD_CA_Gross_Value_Per_CWT = DB1.CD_CA_Gross_Value_Per_CWT;

 // PAR.CD CA Gross Value $ P Hd = DB1.CD CA Gross Value $ P Hd
 PAR.CD_CA_Gross_Value_$_P_Hd = DB1.CD_CA_Gross_Value_$_P_Hd;

 ENDDO;

 //?move db1 CD fields to par CD fields
 DO;

 // PAR.CD Sort Loss = DB1.CD Sort Loss
 PAR.CD_Sort_Loss = DB1.CD_Sort_Loss;

 // PAR.CD STD Yield = PAR.CMMR Std Dressing Yield%
 PAR.CD_STD_Yield = PAR.CMMR_Std_Dressing_Yield;

 // PAR.CD Base Carcass CWT = DB1.CD Base Carcass CWT
 PAR.CD_Base_Carcass_CWT = DB1.CD_Base_Carcass_CWT;

 // PAR.CD Crc Value Per CWT = DB1.CD Crc Value Per CWT
 PAR.CD_Crc_Value_Per_CWT = DB1.CD_Crc_Value_Per_CWT;

 // PAR.CD Base Carc Value = DB1.CD Base Carc Value
 PAR.CD_Base_Carc_Value = DB1.CD_Base_Carc_Value;

 // PAR.CD Crc Value $ Per Hd = DB1.CD Crc Value $ Per Hd
 PAR.CD_Crc_Value_$_Per_Hd = DB1.CD_Crc_Value_$_Per_Hd;

 // PAR.CD Lean Premium CWT = DB1.CD Lean Premium CWT
 PAR.CD_Lean_Premium_CWT = DB1.CD_Lean_Premium_CWT;

 // PAR.CD Lean Premium $ Per Hd = DB1.CD Lean Premium $ Per Hd
 PAR.CD_Lean_Premium_$_Per_Hd = DB1.CD_Lean_Premium_$_Per_Hd;

 // PAR.CD Gross Value Per CWT = DB1.CD Gross Value Per CWT
 PAR.CD_Gross_Value_Per_CWT = DB1.CD_Gross_Value_Per_CWT;

 // PAR.CD Gross Value $ Per HD = DB1.CD Gross Value $ Per HD
 PAR.CD_Gross_Value_$_Per_HD = DB1.CD_Gross_Value_$_Per_HD;

 // PAR.CD Gross Before Sort CWT = DB1.CD Gross Before Sort CWT
 PAR.CD_Gross_Before_Sort_CWT = DB1.CD_Gross_Before_Sort_CWT;

 // PAR.CD Gross Before Sort /HD = DB1.CD Gross Before Sort /HD
 PAR.CD_Gross_Before_Sort_HD = DB1.CD_Gross_Before_Sort_HD;

 ENDDO;

 //?Use competitors Averages or regular carcass analysis
 CASE;

 // IF PAR.Average Pay Sts Usr is Yes
 IF PAR.Average_Pay_Sts_Usr = 'Y';

 //?Move Averages to Cd fields before extension or totals are accum
 DO;

 // PAR.CD Sort Loss = WRK.Cmp Sort Dsc Carc
 PAR.CD_Sort_Loss = WRK.Cmp_Sort_Dsc_Carc;

 // PAR.CD STD Yield = WRK.Cmp Std Yield
 PAR.CD_STD_Yield = WRK.Cmp_Std_Yield;

 // PAR.CD Base Carcass CWT = WRK.Cmp Base Carc
 PAR.CD_Base_Carcass_CWT = WRK.Cmp_Base_Carc;

 // PAR.CD Crc Value Per CWT = WRK.Cmp Carc Val Carc
 PAR.CD_Crc_Value_Per_CWT = WRK.Cmp_Carc_Val_Carc;

 // PAR.CD Lean Premium CWT = WRK.Cmp Lean Premium Carc
 PAR.CD_Lean_Premium_CWT = WRK.Cmp_Lean_Premium_Carc;

 // PAR.CD Gross Value Per CWT = WRK.Cmp Gross Carc
 PAR.CD_Gross_Value_Per_CWT = WRK.Cmp_Gross_Carc;

 //?RE EXTENDED
 // CD Base Carc Value
 PAR.CD_Base_Carc_Value = PAR.CD_Base_Carcass_CWT * ( DB1.CD_Carcass_Hot_Weight / 100 'H' )
 'H';

 // CD Crc Value $ Per Hd
 PAR.CD_Crc_Value_$_Per_Hd = PAR.CD_Crc_Value_Per_CWT * ( DB1.CD_Carcass_Hot_Weight / 100
 'H' ) 'H';

 // CD LEAN PREM $ Per Hd
 PAR.CD_Lean_Premium_$_Per_Hd = PAR.CD_Lean_Premium_CWT * ( DB1.CD_Carcass_Hot_Weight
 / 100 'H' ) 'H';

 // PAR.CD Gross Value $ Per HD = PAR.CD Crc Value $ Per Hd + PAR.CD Lean Premium $
 PAR.CD_Gross_Value_$_Per_HD = PAR.CD_Crc_Value_$_Per_Hd + PAR.CD_Lean_Premium_$_Per_Hd;

 // PAR.CD Gross Value Per CWT = PAR.CD Crc Value Per CWT + PAR.CD Lean Premium CWT
 PAR.CD_Gross_Value_Per_CWT = PAR.CD_Crc_Value_Per_CWT + PAR.CD_Lean_Premium_CWT;

 ENDDO;

 //?Use competitors Averages or regular carcass analysis
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Carcass Analysis Detail
 DO;

 EXECUTE FUNCTION(Rtv StdYl/SrtDsc/MdPt RT) TYPE(RTVOBJ) FILE(PKBYREP)           AB1263783;
 PARAMETER(PAR.CMP_Program_Code);
 PARAMETER(PAR.CMMR_Row_Number);
 PARAMETER(DB1.CD_Carcass_Hot_Weight);
 PARAMETER(PAR.CMMR_Std_Dressing_Yield);
 PARAMETER(PAR.CMMR_Midpoint);
 PARAMETER(PAR.CD_Sort_Loss);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.CD Sort Loss = DB1.CMMR Sort Discount
  PAR.CD_Sort_Loss = DB1.CMMR_Sort_Discount;

  QUIT;

 }

 //?Commented out 12/16/98 PKD.
 //?CD Base Carcass CWT  12/16/98 PKD
 CASE;

 // IF PAR.Pricing UOM USR is Live Hundred Weight
 IF PAR.Pricing_UOM_USR = 'LW';

 CASE;

 // IF PAR.CMMR Std Dressing Yield% is ne 0
 IF PAR.CMMR_Std_Dressing_Yield <> *ZERO;

 // CD Base Carcass CWT
 PAR.CD_Base_Carcass_CWT = PAR.TH_CM_Base_Mkt_Price / ( PAR.CMMR_Std_Dressing_Yield / 100
 'H' ) 'H';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.CD Base Carcass CWT = CON.*ZERO
 PAR.CD_Base_Carcass_CWT = *ZERO;

 ENDIF;

 //?CD Base Carcass CWT  12/16/98 PKD
 // IF PAR.Pricing UOM USR is Carcass Hundred Weight
 IF PAR.Pricing_UOM_USR = 'CW';

 // PAR.CD Base Carcass CWT = PAR.TH CM Base Mkt Price
 PAR.CD_Base_Carcass_CWT = PAR.TH_CM_Base_Mkt_Price;

 ENDIF;

 // CD Base Carc Value
 PAR.CD_Base_Carc_Value = PAR.CD_Base_Carcass_CWT * ( DB1.CD_Carcass_Hot_Weight / 100 'H' )
 'H';

 //?Commented out 12/16/98 PKD.
 CASE;

 // IF WRK.CMP CLC Premium First is Sort First
 IF WRK.CMP_CLC_Premium_First = *BLANK;

 //?CAS: Calc CD Crc Value Per CWT w/ Quote Type.   08/03/95 PKP
 CASE;

 // IF PAR.CMP Sort Basis is Live
 IF PAR.CMP_Sort_Basis = 'L';

 CASE;

 // IF PAR.Pricing UOM USR is Live Hundred Weight
 IF PAR.Pricing_UOM_USR = 'LW';

 // CD Crc Value Per CWT
 PAR.CD_Crc_Value_Per_CWT = ( PAR.TH_CM_Base_Mkt_Price + PAR.CD_Sort_Loss ) / (
 PAR.CMMR_Std_Dressing_Yield / 100 'H' ) 'H';

 // IF PAR.Pricing UOM USR is Carcass Hundred Weight
 IF PAR.Pricing_UOM_USR = 'CW';

 // CD Crc Value Per CWT
 PAR.CD_Crc_Value_Per_CWT = PAR.CD_Base_Carcass_CWT + ( PAR.CD_Sort_Loss / (
 PAR.CMMR_Std_Dressing_Yield / 100 'H' ) 'H' );

 ENDIF;

 //?CAS: Calc CD Crc Value Per CWT w/ Quote Type.   08/03/95 PKP
 // IF PAR.CMP Sort Basis is Meat
 IF PAR.CMP_Sort_Basis = 'M';

 CASE;

 // IF PAR.Pricing UOM USR is Live Hundred Weight
 IF PAR.Pricing_UOM_USR = 'LW';

 // CD Crc Value Per CWT NEW
 PAR.CD_Crc_Value_Per_CWT = ( PAR.TH_CM_Base_Mkt_Price + ( PAR.CD_Sort_Loss * (
 PAR.CMMR_Std_Dressing_Yield / 100 'H' ) 'H' ) ) / ( PAR.CMMR_Std_Dressing_Yield / 100             +
 'H' ) 'H';

 // IF PAR.Pricing UOM USR is Carcass Hundred Weight
 IF PAR.Pricing_UOM_USR = 'CW';

 // CD Crc Value Per CWT
 PAR.CD_Crc_Value_Per_CWT = PAR.CD_Base_Carcass_CWT + PAR.CD_Sort_Loss;

 ENDIF;

 //?CAS: Calc CD Crc Value Per CWT w/ Quote Type.   08/03/95 PKP
 // IF PAR.CMP Sort Basis is % of Base Price
 IF PAR.CMP_Sort_Basis = 'P';

 //?06/20/05 PKD HPE011 Add calculation for Sort Loss based on
 //?             percent of base.
 // Synon (15,5) work field =       * CD Crc Value Per CWT
 LCL.*Synon_155_work_field = PAR.CD_Base_Carcass_CWT * ( PAR.CD_Sort_Loss / 100 'H' ) 'H';

 // PAR.CD Crc Value Per CWT = LCL.*Synon (15,5) work field * CON.1 *Rounded
 PAR.CD_Crc_Value_Per_CWT = LCL.*Synon_155_work_field * 1 'H';

 //?CAS: Calc CD Crc Value Per CWT w/ Quote Type.   08/03/95 PKP
 // IF PAR.CMP Sort Basis is None
 IF PAR.CMP_Sort_Basis = *BLANK;

 // PAR.CD Crc Value Per CWT = PAR.CD Base Carcass CWT
 PAR.CD_Crc_Value_Per_CWT = PAR.CD_Base_Carcass_CWT;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?A = TH CM Base Market Price or CD Base Carcass CWT
 // PAR.CD Crc Value Per CWT = PAR.CD Base Carcass CWT
 PAR.CD_Crc_Value_Per_CWT = PAR.CD_Base_Carcass_CWT;

 ENDIF;

 // CD Crc Value $ Per Hd
 PAR.CD_Crc_Value_$_Per_Hd = PAR.CD_Crc_Value_Per_CWT * ( DB1.CD_Carcass_Hot_Weight / 100
 'H' ) 'H';

 //?10/23/2007 CMP Grade Type Adj will be used on the Back Fat
 //?Grade/Premium
 CASE;

 // IF PAR.CMP Grading Type is Ln%N/SrtDscF/FltCrc/MtVal
 IF PAR.CMP_Grading_Type = 'C'/'D'/'L'/'S'/'M';

 //?06/20/05 PKD HPE011 Added Meat Value to Conditoin
 //?LEAN PERCENT NPPC or SORT DISCOUNT FACTOR or FLAT CARCASS WEIGHT
 DO;

 //?031606 slm added the meat value for TF Changes on Prd Avgs
 CASE;

 // IF DB1.CD Adjust/Add Type is Producer Historical Avg
 IF DB1.CD_Adjust_Add_Type = 'HST'/'2WK'/'4WK'/'LOT';

 // AND PAR.Competitors Processing is No
 AND PAR.Competitors_Processing = 'N';

 // AND PAR.CM Processing Type Usr is Payment
 AND PAR.CM_Processing_Type_Usr = 'P';

 // AND PAR.CMP Grading Type is Not Meat Value
 AND PAR.CMP_Grading_Type = 'B'/'C'/'G'/'F'/'P'/'D'/'L'/'S';

 //?** PAID WITH HISTORY **
 CASE;

 // IF PAR.CMP Grading Type is Lean Percent NPPC
 IF PAR.CMP_Grading_Type = 'D'/'L';

 // OR PAR.CMP Grading Type is Meat Value
 OR PAR.CMP_Grading_Type = 'M';

 //?06/20/05 PKD HPE011 Added Meat Value to the condition.
 // PAR.CD Lean Premium CWT = PAR.TH PHA Lean Prm /Crc CWT
 PAR.CD_Lean_Premium_CWT = PAR.TH_PHA_Lean_Prm_Crc_CWT;

 // Lean Premium Value
 PAR.CD_Lean_Premium_$_Per_Hd = PAR.CD_Lean_Premium_CWT * ( DB1.CD_Carcass_Hot_Weight
 / 100 );

 // PAR.CD Gross Value Per CWT = PAR.CD Crc Value Per CWT + PAR.CD Lean Premium CWT
 PAR.CD_Gross_Value_Per_CWT = PAR.CD_Crc_Value_Per_CWT + PAR.CD_Lean_Premium_CWT;

 // PAR.CD Gross Value $ Per HD = PAR.CD Crc Value $ Per Hd + PAR.CD Lean Premium $ Per Hd
 PAR.CD_Gross_Value_$_Per_HD = PAR.CD_Crc_Value_$_Per_Hd + PAR.CD_Lean_Premium_$_Per_Hd;

 //?** PAID WITH HISTORY **
 // IF PAR.CMP Grading Type is Flat Carcass Weight
 IF PAR.CMP_Grading_Type = 'C';

 // PAR.CD Lean Premium CWT = CON.*ZERO
 PAR.CD_Lean_Premium_CWT = *ZERO;

 // PAR.CD Lean Premium $ Per Hd = CON.*ZERO
 PAR.CD_Lean_Premium_$_Per_Hd = *ZERO;

 // PAR.CD Gross Value Per CWT = PAR.CD Crc Value Per CWT + PAR.CD Lean Premium CWT
 PAR.CD_Gross_Value_Per_CWT = PAR.CD_Crc_Value_Per_CWT + PAR.CD_Lean_Premium_CWT;

 // Total Carcass Value
 PAR.CD_Gross_Value_$_Per_HD = PAR.CD_Gross_Value_Per_CWT * ( DB1.CD_Carcass_Hot_Weight
 / 100 'H' ) 'H';

 //?** PAID WITH HISTORY **
 // IF PAR.CMP Grading Type is Sort Discount Factor
 IF PAR.CMP_Grading_Type = 'S';

 //?**** Pay by Factory.  ****
 // PAR.CMMC Premium Value = PAR.TH PHA Sort Disc Fctr % / CON.100 *Rounded
 PAR.CMMC_Premium_Value = PAR.TH_PHA_Sort_Disc_Fctr / 100 'H';

 // Total Carcss Per CWT MULT
 PAR.CD_Gross_Value_Per_CWT = PAR.CD_Crc_Value_Per_CWT * PAR.CMMC_Premium_Value 'H';

 // Total Carcass Value
 PAR.CD_Gross_Value_$_Per_HD = PAR.CD_Gross_Value_Per_CWT * ( DB1.CD_Carcass_Hot_Weight
 / 100 'H' ) 'H';

 // Lean Premium Per CWT
 PAR.CD_Lean_Premium_CWT = PAR.CD_Gross_Value_Per_CWT - PAR.CD_Crc_Value_Per_CWT;

 // Lean Premium Value
 PAR.CD_Lean_Premium_$_Per_Hd = PAR.CD_Gross_Value_$_Per_HD - PAR.CD_Crc_Value_$_Per_Hd;

 ENDIF;

 // IF DB1.CD Adjust/Add Type is Add w/Average Value
 IF DB1.CD_Adjust_Add_Type = 'ADD';

 // AND PAR.Competitors Processing is No
 AND PAR.Competitors_Processing = 'N';

 // AND PAR.CM Processing Type Usr is Payment
 AND PAR.CM_Processing_Type_Usr = 'P';

 //?** ADDED AT AVERAGE VALUE OF THE LOT **
 // PAR.CD Lean Premium CWT = CON.*ZERO
 PAR.CD_Lean_Premium_CWT = *ZERO;

 // PAR.CD Lean Premium $ Per Hd = CON.*ZERO
 PAR.CD_Lean_Premium_$_Per_Hd = *ZERO;

 // PAR.CD Gross Value Per CWT = CON.*ZERO
 PAR.CD_Gross_Value_Per_CWT = *ZERO;

 // PAR.CD Gross Value $ Per HD = CON.*ZERO
 PAR.CD_Gross_Value_$_Per_HD = *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?** CALCULATE LEAN PREMIUM **
 EXECUTE FUNCTION(Rtv Lean Premium %    RT) TYPE(RTVOBJ) FILE(PKBZREP)           AB1116832;
 PARAMETER(PAR.CMP_Program_Code);
 PARAMETER(PAR.CMMR_Row_Number);
 PARAMETER(DB1.CD_Lean_Percent);
 PARAMETER(PAR.CMMC_Premium_Value);
 PARAMETER(WRK.Record_Found_CMMC_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Record_Found_CMMC_USR = 'N';

  //?USER: Process Data record

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Record_Found_CMMC_USR = 'Y';

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?Rtv Lean% Premium if not found in table, then use lowest
 CASE;

 // IF WRK.Record Found CMMC USR is No
 IF WRK.Record_Found_CMMC_USR = 'N';

 EXECUTE FUNCTION(Rtv Lean Premium % Frc RT) TYPE(RTVOBJ) FILE(PKBZREP)          AB1147944;
 PARAMETER(PAR.CMP_Program_Code);
 PARAMETER(PAR.CMMR_Row_Number);
 PARAMETER(PAR.CMMC_Premium_Value);
 PARAMETER(WRK.Record_Found_CMMC_USR);
 {
  //?USER: Processing if Data record not found

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Record_Found_CMMC_USR = 'N';

  //?USER: Process Data record

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Record_Found_CMMC_USR = 'Y';

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 ENDIF;

 //?Lean Percent NPPC $Prem OR Meat Value *OTHERWISE
 CASE;

 // IF PAR.CMP Grading Type is Lean Percent NPPC $Prem
 IF PAR.CMP_Grading_Type = 'D';

 // PAR.CD Lean Premium CWT = PAR.CMMC Premium Value
 PAR.CD_Lean_Premium_CWT = PAR.CMMC_Premium_Value;

 // CD Lean Premium $ Per Hd
 PAR.CD_Lean_Premium_$_Per_Hd = PAR.CD_Lean_Premium_CWT * ( DB1.CD_Carcass_Hot_Weight
 / 100 'H' ) 'H';

 // Total Carcass Value
 PAR.CD_Gross_Value_$_Per_HD = PAR.CD_Crc_Value_$_Per_Hd + PAR.CD_Lean_Premium_$_Per_Hd;

 // Total Carcass Per CWT
 PAR.CD_Gross_Value_Per_CWT = PAR.CD_Crc_Value_Per_CWT + PAR.CD_Lean_Premium_CWT;

 //?Lean Percent NPPC $Prem OR Meat Value *OTHERWISE
 // IF PAR.CMP Grading Type is Meat Value
 IF PAR.CMP_Grading_Type = 'M';

 //?Meat Value Calculation
 DO;

 //?06/20/05 PKD HPE011 Added Meat Value calculation
 //?DOC:  Lean Premium Percent
 DO;

 //?Lean Prem% = ((A * (B/100)) + (((C/D) - (C/E)) / F) + (G/100))
 //?WHERE:
 //?A = Starting Point (100)
 //?B = Sort Loss Percent
 //?C = Fixed Cost Per Head
 //?D = Optimal Weight Range Midpoint
 //?E = Weight Range Midpoint
 //?F = Base Market Price
 //?G = Lean Premium & Discount Percent
 //?12/15/06 PKD Current:  F=Base Market Price
 //?                 New:  F=USDA Pork Cutout
 ENDDO;

 // LCL.CMMR Row Number = CVTVAR(PAR.CMP Optimal Row Nbr f/srt)
 LCL.CMMR_Row_Number = CVTVAR(PAR.CMP_Optimal_Row_Nbr_f_srt);

 EXECUTE FUNCTION(Rtv Optimal Midpoint  RT) TYPE(RTVOBJ) FILE(PKBYREP)           AB1263803;
 PARAMETER(PAR.CMP_Program_Code);
 PARAMETER(LCL.CMMR_Row_Number);
 PARAMETER(LCL.CMMR_Midpoint);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?08/23/05 PKD Checking Midpoint to make sure they are entered.
 // PAR.CD Lean Prem/Disc Factor = PAR.CMMC Premium Value
 PAR.CD_Lean_Prem_Disc_Factor = PAR.CMMC_Premium_Value;

 // CD Lean Premium $ Per Hd
 PAR.CD_Lean_Premium_$_Per_Hd = ( PAR.CD_Base_Carcass_CWT * (
 PAR.CD_Lean_Prem_Disc_Factor / 100 'H' ) 'H' ) * ( DB1.CD_Carcass_Hot_Weight / 100 'H' )          +
 'H';

 // CD Lean Premuim CWT
 PAR.CD_Lean_Premium_CWT = PAR.CD_Lean_Premium_$_Per_Hd / ( DB1.CD_Carcass_Hot_Weight
 / 100 'H' ) 'H';

 //?12/15/06 PKD Below calculation uses the Base Price.
 //?12/15/06 PKD Use USDA Pork Cutout instead of the Base Price.
 //?             USDA Pork Cutout = LCL.Market Prc Hog/Cutout USR
 //?             pull the mrk and goup from the cmp market/group see Init
 //?CD Fixed Cost Factor %
 CASE;

 // IF LCL.CMMR Midpoint is Entered
 IF LCL.CMMR_Midpoint > *ZERO;

 // AND PAR.CMMR Midpoint is Entered
 AND PAR.CMMR_Midpoint > *ZERO;

 //?FIXED COST
 // CD Fixed Cost Factor %
 PAR.CD_Fixed_Cost_Factor = ( ( ( PAR.CMP_Fixed_Cost_Per_Head / LCL.CMMR_Midpoint 'H' ) - (
 PAR.CMP_Fixed_Cost_Per_Head / PAR.CMMR_Midpoint 'H' ) ) / LCL.Market_Prc_Hog_Cutout_USR           +
 'H' ) * 100 'H';

 //?CD Fixed Cost Factor %
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.CD Fixed Cost Factor % = CON.*ZERO
 PAR.CD_Fixed_Cost_Factor = *ZERO;

 ENDIF;

 // CD Fixed Cost Factor Amt
 PAR.CD_Fixed_Cost_Factor_Amt = PAR.CD_Base_Carcass_CWT * ( ( PAR.CD_Fixed_Cost_Factor
 / 100 'H' ) * ( DB1.CD_Carcass_Hot_Weight / 100 'H' ) 'H' ) 'H';

 // CD Meat Value Factor %
 PAR.CD_Meat_Value_Factor = ( PAR.CD_Sort_Loss + PAR.CD_Fixed_Cost_Factor )
 + PAR.CD_Lean_Prem_Disc_Factor;

 // CD Meat Value Factor Amt
 PAR.CD_Meat_Value_Factor_Amt = ( ( PAR.CD_Base_Carcass_CWT * ( (
 PAR.CD_Meat_Value_Factor / 100 'H' ) - 1 ) 'H' ) * ( DB1.CD_Carcass_Hot_Weight / 100              +
 'H' ) 'H' ) * 1 'H';

 // CD Gross Value $ Per HD
 PAR.CD_Gross_Value_$_Per_HD = ( PAR.CD_Base_Carcass_CWT * ( PAR.CD_Meat_Value_Factor
 / 100 'H' ) 'H' ) * ( DB1.CD_Carcass_Hot_Weight / 100 'H' ) 'H';

 // CD Gross Value Per CWT
 PAR.CD_Gross_Value_Per_CWT = PAR.CD_Gross_Value_$_Per_HD / ( DB1.CD_Carcass_Hot_Weight
 / 100 'H' ) 'H';

 //?****************
 ENDDO;

 //?Lean Percent NPPC $Prem OR Meat Value *OTHERWISE
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Total Carcss Per CWT MULT
 PAR.CD_Gross_Value_Per_CWT = PAR.CD_Crc_Value_Per_CWT * PAR.CMMC_Premium_Value 'H';

 // Total Carcass Value
 PAR.CD_Gross_Value_$_Per_HD = PAR.CD_Gross_Value_Per_CWT * ( DB1.CD_Carcass_Hot_Weight
 / 100 'H' ) 'H';

 // Lean Premium Per CWT
 PAR.CD_Lean_Premium_CWT = PAR.CD_Gross_Value_Per_CWT - PAR.CD_Crc_Value_Per_CWT;

 // Lean Premium Value
 PAR.CD_Lean_Premium_$_Per_Hd = PAR.CD_Gross_Value_$_Per_HD - PAR.CD_Crc_Value_$_Per_Hd;

 ENDIF;

 ENDIF;

 ENDDO;

 //?Grade/Premium
 // IF PAR.CMP Grading Type is Lean Percent FOM
 IF PAR.CMP_Grading_Type = 'P';

 //?LEAN PERCENT  FAT O METER
 DO;

 //?---------------------------------------------------------------
 //?Added 6/11/99 by Purva for C0007557.
 //?Add Lean Factor/Lean % +/- to Lean Percent MM
 CASE;

 // IF PAR.CMP Lean Factor is Greater than 0
 IF PAR.CMP_Lean_Factor > *ZERO;

 // PAR.CMMC Lean Percent = DB1.CD Lean Percent MM + PAR.CMP Lean Factor
 PAR.CMMC_Lean_Percent = DB1.CD_Lean_Percent_MM + PAR.CMP_Lean_Factor;

 //?Add Lean Factor/Lean % +/- to Lean Percent MM
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.CMMC Lean Percent = DB1.CD Lean Percent MM
 PAR.CMMC_Lean_Percent = DB1.CD_Lean_Percent_MM;

 ENDIF;

 //?---------------------------------------------------------------
 // PAR.CMMC Premium Value = CON.*ZERO
 PAR.CMMC_Premium_Value = *ZERO;

 EXECUTE FUNCTION(Rtv Lean Premium %    RT) TYPE(RTVOBJ) FILE(PKBZREP)           AB1116832;
 PARAMETER(PAR.CMP_Program_Code);
 PARAMETER(PAR.CMMR_Row_Number);
 PARAMETER(PAR.CMMC_Lean_Percent);
 PARAMETER(PAR.CMMC_Premium_Value);
 PARAMETER(WRK.Record_Found_CMMC_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Record_Found_CMMC_USR = 'N';

  //?USER: Process Data record

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Record_Found_CMMC_USR = 'Y';

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?Rtv Lean% Premium if not found in table, then use lowest
 CASE;

 // IF WRK.Record Found CMMC USR is No
 IF WRK.Record_Found_CMMC_USR = 'N';

 EXECUTE FUNCTION(Rtv Lean Premium % Frc RT) TYPE(RTVOBJ) FILE(PKBZREP)          AB1147944;
 PARAMETER(PAR.CMP_Program_Code);
 PARAMETER(PAR.CMMR_Row_Number);
 PARAMETER(PAR.CMMC_Premium_Value);
 PARAMETER(WRK.Record_Found_CMMC_USR);
 {
  //?USER: Processing if Data record not found

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Record_Found_CMMC_USR = 'N';

  //?USER: Process Data record

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Record_Found_CMMC_USR = 'Y';

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 ENDIF;

 //?Add the meat premium
 // Total Carcass Per CWT add
 PAR.CD_Gross_Value_Per_CWT = PAR.CD_Crc_Value_Per_CWT + PAR.CMMC_Premium_Value;

 // Total Carcass Value
 PAR.CD_Gross_Value_$_Per_HD = PAR.CD_Gross_Value_Per_CWT * ( DB1.CD_Carcass_Hot_Weight
 / 100 'H' ) 'H';

 // Lean Premium Per CWT
 PAR.CD_Lean_Premium_CWT = PAR.CD_Gross_Value_Per_CWT - PAR.CD_Crc_Value_Per_CWT;

 // Lean Premium Value
 PAR.CD_Lean_Premium_$_Per_Hd = PAR.CD_Gross_Value_$_Per_HD - PAR.CD_Crc_Value_$_Per_Hd;

 ENDDO;

 //?Grade/Premium
 // IF PAR.CMP Grading Type is Backfat
 IF PAR.CMP_Grading_Type = 'B';

 //?Backfat
 DO;

 //?10/23/2007 * out the hard code CMP Grade Type Adj
 //?             and replace with value form the CMP Grade Backfat
 // WRK.Backfat USR = DB1.CD Backfat Thickness Inch + PAR.CMP Grade Type Adj
 WRK.Backfat_USR = DB1.CD_Backfat_Thickness_Inch + PAR.CMP_Grade_Type_Adj;

 EXECUTE FUNCTION(Rtv BckF Premium       RT) TYPE(RTVOBJ) FILE(PKBZREP)          AB1166485;
 PARAMETER(PAR.CMP_Program_Code);
 PARAMETER(PAR.CMMR_Row_Number);
 PARAMETER(WRK.Backfat_USR);
 PARAMETER(PAR.CMMC_Premium_Value);
 PARAMETER(WRK.Record_Found_CMMC_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Record_Found_CMMC_USR = 'N';

  //?USER: Process Data record

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Record_Found_CMMC_USR = 'Y';

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?Rtv Bckf Premium if not found in table, then use lowest
 CASE;

 // IF WRK.Record Found CMMC USR is No
 IF WRK.Record_Found_CMMC_USR = 'N';

 EXECUTE FUNCTION(Rtv BckF Premium % Frc RT) TYPE(RTVOBJ) FILE(PKBZREP)          AB1166486;
 PARAMETER(PAR.CMP_Program_Code);
 PARAMETER(PAR.CMMR_Row_Number);
 PARAMETER(PAR.CMMC_Premium_Value);
 PARAMETER(WRK.Record_Found_CMMC_USR);
 {
  //?USER: Processing if Data record not found

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Record_Found_CMMC_USR = 'N';

  //?USER: Process Data record

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Record_Found_CMMC_USR = 'Y';

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 ENDIF;

 //?*---------------------------------------------------------------*
 //?* 05/15/02 PKD Commented out.  The Backfat calculation needs
 //?               to work similar to Lean Percent.
 //?Lean Premium Value
 //?Lean Premium Per Cwt
 //?Gross Value Per cwt
 //?Gross Value $
 //?*---------------------------------------------------------------*
 // Total Carcss Per CWT MULT
 PAR.CD_Gross_Value_Per_CWT = PAR.CD_Crc_Value_Per_CWT * PAR.CMMC_Premium_Value 'H';

 // Total Carcass Value
 PAR.CD_Gross_Value_$_Per_HD = PAR.CD_Gross_Value_Per_CWT * ( DB1.CD_Carcass_Hot_Weight
 / 100 'H' ) 'H';

 // Lean Premium Per CWT
 PAR.CD_Lean_Premium_CWT = PAR.CD_Gross_Value_Per_CWT - PAR.CD_Crc_Value_Per_CWT;

 // Lean Premium Value
 PAR.CD_Lean_Premium_$_Per_Hd = PAR.CD_Gross_Value_$_Per_HD - PAR.CD_Crc_Value_$_Per_Hd;

 ENDDO;

 //?Grade/Premium
 // IF PAR.CMP Grading Type is Lean Factor
 IF PAR.CMP_Grading_Type = 'F';

 //?Lean Factor
 DO;

 // Diff actual/Std Lean%
 PAR.CMMC_Premium_Value = ( DB1.CD_Lean_Percent - PAR.CMP_Std_Lean_Percent ) / 100 'H';

 // multiple by lean factor
 PAR.CMMC_Premium_Value = ( PAR.CMMC_Premium_Value * PAR.CMP_Lean_Factor 'H' ) / 100 'H';

 //?Lean Premium Per Cwt
 // PAR.CD Lean Premium CWT = PAR.CMMC Premium Value * PAR.TH CM Base Mkt Price *Rou
 PAR.CD_Lean_Premium_CWT = PAR.CMMC_Premium_Value * PAR.TH_CM_Base_Mkt_Price 'H';

 //?Lean Premium Value
 // Lean Premium Value
 PAR.CD_Lean_Premium_$_Per_Hd = PAR.CD_Lean_Premium_CWT * ( DB1.CD_Carcass_Hot_Weight
 / 100 'H' ) 'H';

 //?Gross Value Per cwt
 // Total Carcass Per CWT
 PAR.CD_Gross_Value_Per_CWT = PAR.CD_Crc_Value_Per_CWT + PAR.CD_Lean_Premium_CWT;

 //?Gross Value $
 // Total Carcass Value
 PAR.CD_Gross_Value_$_Per_HD = PAR.CD_Crc_Value_$_Per_Hd + PAR.CD_Lean_Premium_$_Per_Hd;

 ENDDO;

 ENDIF;

 //?Sort after premium.  re-calc gross
 CASE;

 // IF WRK.CMP CLC Premium First is Premium First
 IF WRK.CMP_CLC_Premium_First = 'P';

 // PAR.CD Gross Before Sort CWT = PAR.CD Gross Value Per CWT
 PAR.CD_Gross_Before_Sort_CWT = PAR.CD_Gross_Value_Per_CWT;

 // PAR.CD Gross Before Sort /HD = PAR.CD Gross Value $ Per HD
 PAR.CD_Gross_Before_Sort_HD = PAR.CD_Gross_Value_$_Per_HD;

 CASE;

 // IF PAR.CD Sort Loss is 100%
 IF PAR.CD_Sort_Loss = 100;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?New Gross after Sort
 // Synon (15,5) work field =       * Gross After Sort
 LCL.*Synon_155_work_field = PAR.CD_Gross_Before_Sort_CWT * ( PAR.CD_Sort_Loss / 100 'H' )
 'H';

 // PAR.CD Gross Value Per CWT = LCL.*Synon (15,5) work field * CON.1 *Rounded
 PAR.CD_Gross_Value_Per_CWT = LCL.*Synon_155_work_field * 1 'H';

 // Total Gross Carcass Value
 PAR.CD_Gross_Value_$_Per_HD = PAR.CD_Gross_Value_Per_CWT * ( DB1.CD_Carcass_Hot_Weight
 / 100 'H' ) 'H';

 ENDIF;

 //?New Carcas Value
 // CD Crc Value Per CWT
 PAR.CD_Crc_Value_Per_CWT = PAR.CD_Base_Carcass_CWT + ( PAR.CD_Gross_Value_Per_CWT
 - PAR.CD_Gross_Before_Sort_CWT );

 // CD Crc Value $ Per Hd
 PAR.CD_Crc_Value_$_Per_Hd = PAR.CD_Base_Carc_Value + ( PAR.CD_Gross_Value_$_Per_HD
 - PAR.CD_Gross_Before_Sort_HD );

 ENDIF;

 // PAR.CD STD Yield = PAR.CMMR Std Dressing Yield%
 PAR.CD_STD_Yield = PAR.CMMR_Std_Dressing_Yield;

 //?Calc MPR Sort Loss            5/23/03    -- Change 10/11/17 S11862
 //?Calc MPR Sort Loss   5/23/03   - chg 01/15/07 for "M" cmp grading type
 CASE;

 // IF PAR.CMP Optimal Row Nbr f/srt NE WRK.Blank Usr 1 fld Usr
 IF PAR.CMP_Optimal_Row_Nbr_f_srt <> WRK.Blank_Usr_1_fld_Usr;

 // LCL.Num NU USR = CVTVAR(PAR.CMP Optimal Row Nbr f/srt)
 LCL.Num_NU_USR = CVTVAR(PAR.CMP_Optimal_Row_Nbr_f_srt);

 // LCL.CMMR Row Number = LCL.Num NU USR
 LCL.CMMR_Row_Number = LCL.Num_NU_USR;

 EXECUTE FUNCTION(Rtv Lean Premium %    RT) TYPE(RTVOBJ) FILE(PKBZREP)           AB1116832;
 PARAMETER(PAR.CMP_Program_Code);
 PARAMETER(LCL.CMMR_Row_Number);
 PARAMETER(DB1.CD_Lean_Percent);
 PARAMETER(LCL.Optimal_Lean_Percent_USR);
 PARAMETER(WRK.Record_Found_CMMC_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Record_Found_CMMC_USR = 'N';

  //?USER: Process Data record

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Record_Found_CMMC_USR = 'Y';

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 EXECUTE FUNCTION(Rtv StdYld/SortDisc   RT) TYPE(RTVOBJ) FILE(PKBYREP)           AB1116828;
 PARAMETER(PAR.CMP_Program_Code);
 PARAMETER(LCL.CMMR_Row_Number);
 PARAMETER(DB1.CD_Carcass_Hot_Weight);
 PARAMETER(LCL.CMMR_Std_Dressing_Yield);
 PARAMETER(LCL.CD_Sort_Loss);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.CD Sort Loss = DB1.CMMR Sort Discount
  PAR.CD_Sort_Loss = DB1.CMMR_Sort_Discount;

  QUIT;

 }

 EXECUTE FUNCTION(Rtv Lean Premium %    RT) TYPE(RTVOBJ) FILE(PKBZREP)           AB1116832;
 PARAMETER(PAR.CMP_Program_Code);
 PARAMETER(LCL.CMMR_Row_Number);
 PARAMETER(DB1.CD_Lean_Percent);
 PARAMETER(LCL.CMMC_Premium_Value);
 PARAMETER(WRK.Record_Found_CMMC_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Record_Found_CMMC_USR = 'N';

  //?USER: Process Data record

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Record_Found_CMMC_USR = 'Y';

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 // LCL.Sort Total % = LCL.CMMC Premium Value - LCL.Optimal Lean Percent USR
 LCL.Sort_Total = LCL.CMMC_Premium_Value - LCL.Optimal_Lean_Percent_USR;

 CASE;

 // IF PAR.CMP Grading Type is Lean Percent NPPC $Prem
 IF PAR.CMP_Grading_Type = 'D';

 //?If grading type is D , the lean premium values are dollars $
 // Comp: CD Mpr Sort Loss-D
 PAR.CD_MPR_Sort_Loss = ( LCL.CMMC_Premium_Value - LCL.Optimal_Lean_Percent_USR ) (
 DB1.CD_Carcass_Hot_Weight / 100 );

 // IF PAR.CMP Grading Type is Meat Value
 IF PAR.CMP_Grading_Type = 'M';

 //?If grading type is M , take diff cac value $hd - base value   01/15/07 RMC
 // PAR.CD MPR Sort Loss = PAR.CD Crc Value $ Per Hd - PAR.CD Base Carc Value
 PAR.CD_MPR_Sort_Loss = PAR.CD_Crc_Value_$_Per_Hd - PAR.CD_Base_Carc_Value;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Original Calc done for all grading types         06/28/04
 // Comp: CD Mpr Sort Loss
 PAR.CD_MPR_Sort_Loss = ( LCL.Sort_Total * PAR.CD_Base_Carcass_CWT ) (
 DB1.CD_Carcass_Hot_Weight / 100 );

 ENDIF;

 // PAR.TH MPR Sort Loss = PAR.TH MPR Sort Loss + PAR.CD MPR Sort Loss
 PAR.TH_MPR_Sort_Loss = PAR.TH_MPR_Sort_Loss + PAR.CD_MPR_Sort_Loss;

 //?(note--sort loss s/be negative.)
 //?Calc MPR Sort Loss   5/23/03   - chg 01/15/07 for "M" cmp grading type
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Comp: CD Mpr Sort Loss
 PAR.CD_MPR_Sort_Loss = PAR.CD_Crc_Value_$_Per_Hd - PAR.CD_Base_Carc_Value;

 // PAR.TH MPR Sort Loss = PAR.TH MPR Sort Loss + PAR.CD MPR Sort Loss
 PAR.TH_MPR_Sort_Loss = PAR.TH_MPR_Sort_Loss + PAR.CD_MPR_Sort_Loss;

 ENDIF;

 ENDDO;

 ENDIF;

 //?Totals
 DO;

 // PAR.Head Total USR = PAR.Head Total USR + CON.1
 PAR.Head_Total_USR = PAR.Head_Total_USR + 1;

 // PAR.Sort Loss Tot USR = PAR.Sort Loss Tot USR + PAR.CD Sort Loss
 PAR.Sort_Loss_Tot_USR = PAR.Sort_Loss_Tot_USR + PAR.CD_Sort_Loss;

 // PAR.Std Yield % Tot USR = PAR.Std Yield % Tot USR + PAR.CD STD Yield
 PAR.Std_Yield_Tot_USR = PAR.Std_Yield_Tot_USR + PAR.CD_STD_Yield;

 // PAR.Weight Tot USR = PAR.Weight Tot USR + DB1.CD Carcass/Hot Weight
 PAR.Weight_Tot_USR = PAR.Weight_Tot_USR + DB1.CD_Carcass_Hot_Weight;

 // PAR.Base Carc Val Tot USR = PAR.Base Carc Val Tot USR + PAR.CD Base Carc Value
 PAR.Base_Carc_Val_Tot_USR = PAR.Base_Carc_Val_Tot_USR + PAR.CD_Base_Carc_Value;

 // PAR.Adj Base Carc Val Tot USR = PAR.Adj Base Carc Val Tot USR + PAR.CD Crc Value
 PAR.Adj_Base_Carc_Val_Tot_USR = PAR.Adj_Base_Carc_Val_Tot_USR
 + PAR.CD_Crc_Value_$_Per_Hd;

 // PAR.Lean Percent Tot USR = PAR.Lean Percent Tot USR + DB1.CD Lean Percent
 PAR.Lean_Percent_Tot_USR = PAR.Lean_Percent_Tot_USR + DB1.CD_Lean_Percent;

 // PAR.Lean Add/Ded Val Tot USR = PAR.Lean Add/Ded Val Tot USR + PAR.CD Lean Premiu
 PAR.Lean_Add_Ded_Val_Tot_USR = PAR.Lean_Add_Ded_Val_Tot_USR
 + PAR.CD_Lean_Premium_$_Per_Hd;

 // PAR.Total Carc Val Tot USR = PAR.Total Carc Val Tot USR + PAR.CD Gross Value $ Per HD
 PAR.Total_Carc_Val_Tot_USR = PAR.Total_Carc_Val_Tot_USR + PAR.CD_Gross_Value_$_Per_HD;

 // PAR.TH Meat Value Factor Amt = PAR.TH Meat Value Factor Amt + PAR.CD Meat Value Factor Amt
 PAR.TH_Meat_Value_Factor_Amt = PAR.TH_Meat_Value_Factor_Amt
 + PAR.CD_Meat_Value_Factor_Amt;

 // PAR.TH Fixed Cost Amount = PAR.TH Fixed Cost Amount + PAR.CD Fixed Cost Factor Amt
 PAR.TH_Fixed_Cost_Amount = PAR.TH_Fixed_Cost_Amount + PAR.CD_Fixed_Cost_Factor_Amt;

 // PAR.Gross Before Sort /HD Usr = PAR.Gross Before Sort /HD Usr + PAR.CD Gross Before Sort /HD
 PAR.Gross_Before_Sort_HD_Usr = PAR.Gross_Before_Sort_HD_Usr
 + PAR.CD_Gross_Before_Sort_HD;

 ENDDO;

 //?Move cd fields to ca fields, and or zero out cd fields
 CASE;

 // IF PAR.Competitors Processing is Yes
 IF PAR.Competitors_Processing = 'Y';

 //?zero out cd ca fields
 DO;

 // PAR.CD CA Sort Loss = CON.*ZERO
 PAR.CD_CA_Sort_Loss = *ZERO;

 // PAR.CD CA Std Yield = CON.*ZERO
 PAR.CD_CA_Std_Yield = *ZERO;

 // PAR.CD CA Base Carcass CWT = CON.*ZERO
 PAR.CD_CA_Base_Carcass_CWT = *ZERO;

 // PAR.CD CA Crc Value Per CWT = CON.*ZERO
 PAR.CD_CA_Crc_Value_Per_CWT = *ZERO;

 // PAR.CD CA Base Carc Value = CON.*ZERO
 PAR.CD_CA_Base_Carc_Value = *ZERO;

 // PAR.CD CA Crc Value $ Per Hd = CON.*ZERO
 PAR.CD_CA_Crc_Value_$_Per_Hd = *ZERO;

 // PAR.CD CA Lean Premium CWT = CON.*ZERO
 PAR.CD_CA_Lean_Premium_CWT = *ZERO;

 // PAR.CD CA Lean Premium $ P Hd = CON.*ZERO
 PAR.CD_CA_Lean_Premium_$_P_Hd = *ZERO;

 // PAR.CD CA Gross Value Per CWT = CON.*ZERO
 PAR.CD_CA_Gross_Value_Per_CWT = *ZERO;

 // PAR.CD CA Gross Value $ P Hd = CON.*ZERO
 PAR.CD_CA_Gross_Value_$_P_Hd = *ZERO;

 ENDDO;

 //?Move cd fields to ca fields, and or zero out cd fields
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.CD Payment Type is Live
 IF PAR.CD_Payment_Type = 'L';

 //?move cd fields to cd ca fields
 DO;

 // PAR.CD CA Sort Loss = PAR.CD Sort Loss
 PAR.CD_CA_Sort_Loss = PAR.CD_Sort_Loss;

 // PAR.CD CA Std Yield = PAR.CD STD Yield
 PAR.CD_CA_Std_Yield = PAR.CD_STD_Yield;

 // PAR.CD CA Base Carcass CWT = PAR.CD Base Carcass CWT
 PAR.CD_CA_Base_Carcass_CWT = PAR.CD_Base_Carcass_CWT;

 // PAR.CD CA Crc Value Per CWT = PAR.CD Crc Value Per CWT
 PAR.CD_CA_Crc_Value_Per_CWT = PAR.CD_Crc_Value_Per_CWT;

 // PAR.CD CA Base Carc Value = PAR.CD Base Carc Value
 PAR.CD_CA_Base_Carc_Value = PAR.CD_Base_Carc_Value;

 // PAR.CD CA Crc Value $ Per Hd = PAR.CD Crc Value $ Per Hd
 PAR.CD_CA_Crc_Value_$_Per_Hd = PAR.CD_Crc_Value_$_Per_Hd;

 // PAR.CD CA Lean Premium CWT = PAR.CD Lean Premium CWT
 PAR.CD_CA_Lean_Premium_CWT = PAR.CD_Lean_Premium_CWT;

 // PAR.CD CA Lean Premium $ P Hd = PAR.CD Lean Premium $ Per Hd
 PAR.CD_CA_Lean_Premium_$_P_Hd = PAR.CD_Lean_Premium_$_Per_Hd;

 // PAR.CD CA Gross Value Per CWT = PAR.CD Gross Value Per CWT
 PAR.CD_CA_Gross_Value_Per_CWT = PAR.CD_Gross_Value_Per_CWT;

 // PAR.CD CA Gross Value $ P Hd = PAR.CD Gross Value $ Per HD
 PAR.CD_CA_Gross_Value_$_P_Hd = PAR.CD_Gross_Value_$_Per_HD;

 ENDDO;

 //?zero out cd fields
 DO;

 // PAR.CD Sort Loss = CON.*ZERO
 PAR.CD_Sort_Loss = *ZERO;

 // PAR.CD STD Yield = CON.*ZERO
 PAR.CD_STD_Yield = *ZERO;

 // PAR.CD Base Carcass CWT = CON.*ZERO
 PAR.CD_Base_Carcass_CWT = *ZERO;

 // PAR.CD Crc Value Per CWT = CON.*ZERO
 PAR.CD_Crc_Value_Per_CWT = *ZERO;

 // PAR.CD Base Carc Value = CON.*ZERO
 PAR.CD_Base_Carc_Value = *ZERO;

 // PAR.CD Crc Value $ Per Hd = CON.*ZERO
 PAR.CD_Crc_Value_$_Per_Hd = *ZERO;

 // PAR.CD Lean Premium CWT = CON.*ZERO
 PAR.CD_Lean_Premium_CWT = *ZERO;

 // PAR.CD Lean Premium $ Per Hd = CON.*ZERO
 PAR.CD_Lean_Premium_$_Per_Hd = *ZERO;

 // PAR.CD Gross Value Per CWT = CON.*ZERO
 PAR.CD_Gross_Value_Per_CWT = *ZERO;

 // PAR.CD Gross Value $ Per HD = CON.*ZERO
 PAR.CD_Gross_Value_$_Per_HD = *ZERO;

 ENDDO;

 // IF PAR.CD Payment Type is Carcass Merit
 IF PAR.CD_Payment_Type = 'C';

 CASE;

 // IF PAR.CD Source Type is External
 IF PAR.CD_Source_Type = 'E';

 //?zero out cd ca fields
 DO;

 // PAR.CD CA Sort Loss = CON.*ZERO
 PAR.CD_CA_Sort_Loss = *ZERO;

 // PAR.CD CA Std Yield = CON.*ZERO
 PAR.CD_CA_Std_Yield = *ZERO;

 // PAR.CD CA Base Carcass CWT = CON.*ZERO
 PAR.CD_CA_Base_Carcass_CWT = *ZERO;

 // PAR.CD CA Crc Value Per CWT = CON.*ZERO
 PAR.CD_CA_Crc_Value_Per_CWT = *ZERO;

 // PAR.CD CA Base Carc Value = CON.*ZERO
 PAR.CD_CA_Base_Carc_Value = *ZERO;

 // PAR.CD CA Crc Value $ Per Hd = CON.*ZERO
 PAR.CD_CA_Crc_Value_$_Per_Hd = *ZERO;

 // PAR.CD CA Lean Premium CWT = CON.*ZERO
 PAR.CD_CA_Lean_Premium_CWT = *ZERO;

 // PAR.CD CA Lean Premium $ P Hd = CON.*ZERO
 PAR.CD_CA_Lean_Premium_$_P_Hd = *ZERO;

 // PAR.CD CA Gross Value Per CWT = CON.*ZERO
 PAR.CD_CA_Gross_Value_Per_CWT = *ZERO;

 // PAR.CD CA Gross Value $ P Hd = CON.*ZERO
 PAR.CD_CA_Gross_Value_$_P_Hd = *ZERO;

 ENDDO;

 //?Leave payment information in the CD fields
 // IF PAR.CD Source Type is Internal
 IF PAR.CD_Source_Type = 'I';

 CASE;

 // IF PAR.CM Processing Type Usr is Analysis
 IF PAR.CM_Processing_Type_Usr = 'A';

 //?move cd fields to cd ca fields
 DO;

 // PAR.CD CA Sort Loss = PAR.CD Sort Loss
 PAR.CD_CA_Sort_Loss = PAR.CD_Sort_Loss;

 // PAR.CD CA Std Yield = PAR.CD STD Yield
 PAR.CD_CA_Std_Yield = PAR.CD_STD_Yield;

 // PAR.CD CA Base Carcass CWT = PAR.CD Base Carcass CWT
 PAR.CD_CA_Base_Carcass_CWT = PAR.CD_Base_Carcass_CWT;

 // PAR.CD CA Crc Value Per CWT = PAR.CD Crc Value Per CWT
 PAR.CD_CA_Crc_Value_Per_CWT = PAR.CD_Crc_Value_Per_CWT;

 // PAR.CD CA Base Carc Value = PAR.CD Base Carc Value
 PAR.CD_CA_Base_Carc_Value = PAR.CD_Base_Carc_Value;

 // PAR.CD CA Crc Value $ Per Hd = PAR.CD Crc Value $ Per Hd
 PAR.CD_CA_Crc_Value_$_Per_Hd = PAR.CD_Crc_Value_$_Per_Hd;

 // PAR.CD CA Lean Premium CWT = PAR.CD Lean Premium CWT
 PAR.CD_CA_Lean_Premium_CWT = PAR.CD_Lean_Premium_CWT;

 // PAR.CD CA Lean Premium $ P Hd = PAR.CD Lean Premium $ Per Hd
 PAR.CD_CA_Lean_Premium_$_P_Hd = PAR.CD_Lean_Premium_$_Per_Hd;

 // PAR.CD CA Gross Value Per CWT = PAR.CD Gross Value Per CWT
 PAR.CD_CA_Gross_Value_Per_CWT = PAR.CD_Gross_Value_Per_CWT;

 // PAR.CD CA Gross Value $ P Hd = PAR.CD Gross Value $ Per HD
 PAR.CD_CA_Gross_Value_$_P_Hd = PAR.CD_Gross_Value_$_Per_HD;

 ENDDO;

 //?zero out cd fields
 DO;

 // PAR.CD Sort Loss = CON.*ZERO
 PAR.CD_Sort_Loss = *ZERO;

 // PAR.CD STD Yield = CON.*ZERO
 PAR.CD_STD_Yield = *ZERO;

 // PAR.CD Base Carcass CWT = CON.*ZERO
 PAR.CD_Base_Carcass_CWT = *ZERO;

 // PAR.CD Crc Value Per CWT = CON.*ZERO
 PAR.CD_Crc_Value_Per_CWT = *ZERO;

 // PAR.CD Base Carc Value = CON.*ZERO
 PAR.CD_Base_Carc_Value = *ZERO;

 // PAR.CD Crc Value $ Per Hd = CON.*ZERO
 PAR.CD_Crc_Value_$_Per_Hd = *ZERO;

 // PAR.CD Lean Premium CWT = CON.*ZERO
 PAR.CD_Lean_Premium_CWT = *ZERO;

 // PAR.CD Lean Premium $ Per Hd = CON.*ZERO
 PAR.CD_Lean_Premium_$_Per_Hd = *ZERO;

 // PAR.CD Gross Value Per CWT = CON.*ZERO
 PAR.CD_Gross_Value_Per_CWT = *ZERO;

 // PAR.CD Gross Value $ Per HD = CON.*ZERO
 PAR.CD_Gross_Value_$_Per_HD = *ZERO;

 ENDDO;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?Update Production Library
 CASE;

 // IF PAR.Competitors Processing is No
 IF PAR.Competitors_Processing = 'N';

 EXECUTE FUNCTION(Chg Carcass Detail 2  CH) TYPE(CHGOBJ) FILE(PKB1CPP)           AB1254096;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.CD_Scale_Sequence_Number);
 PARAMETER(DB1.CD_Carcass_Number);
 PARAMETER(DB1.CD_Carcass_Number_Insert);
 PARAMETER(DB1.CD_Record_Add_Del_Sts);
 PARAMETER(PAR.CD_Sort_Loss);
 PARAMETER(PAR.CD_STD_Yield);
 PARAMETER(PAR.CD_Base_Carcass_CWT);
 PARAMETER(PAR.CD_Crc_Value_Per_CWT);
 PARAMETER(PAR.CD_Base_Carc_Value);
 PARAMETER(PAR.CD_Crc_Value_$_Per_Hd);
 PARAMETER(PAR.CD_Lean_Premium_CWT);
 PARAMETER(PAR.CD_Lean_Premium_$_Per_Hd);
 PARAMETER(PAR.CD_Gross_Value_Per_CWT);
 PARAMETER(PAR.CD_Gross_Value_$_Per_HD);
 PARAMETER(DB1.CD_Kill_Date);
 PARAMETER(DB1.CD_Shift);
 PARAMETER(DB1.CD_FFLI);
 PARAMETER(DB1.CD_Record_Created_W_Avg);
 PARAMETER(DB1.CD_Record_Created_Status);
 PARAMETER(DB1.CD_LOT);
 PARAMETER(DB1.CD_User_Error_Override);
 PARAMETER(PAR.CD_Source_Type);
 PARAMETER(PAR.CD_Payment_Type);
 PARAMETER(PAR.CD_CA_Sort_Loss);
 PARAMETER(PAR.CD_CA_Std_Yield);
 PARAMETER(PAR.CD_CA_Base_Carcass_CWT);
 PARAMETER(PAR.CD_CA_Crc_Value_Per_CWT);
 PARAMETER(PAR.CD_CA_Base_Carc_Value);
 PARAMETER(PAR.CD_CA_Crc_Value_$_Per_Hd);
 PARAMETER(PAR.CD_CA_Lean_Premium_CWT);
 PARAMETER(PAR.CD_CA_Lean_Premium_$_P_Hd);
 PARAMETER(PAR.CD_CA_Gross_Value_Per_CWT);
 PARAMETER(PAR.CD_CA_Gross_Value_$_P_Hd);
 PARAMETER(PAR.CD_Meat_Value_Factor);
 PARAMETER(PAR.CD_Lean_Prem_Disc_Factor);
 PARAMETER(PAR.CD_Fixed_Cost_Factor);
 PARAMETER(PAR.CD_MPR_Sort_Loss);
 PARAMETER(PAR.CD_Meat_Value_Factor_Amt);
 PARAMETER(PAR.CD_Fixed_Cost_Factor_Amt);
 PARAMETER(PAR.CD_Gross_Before_Sort_CWT);
 PARAMETER(PAR.CD_Gross_Before_Sort_HD);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.SR_Source_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

 //?Create a record in QTEMP
 CASE;

 // IF PAR.Print Comp Sum/Dtl STS is Yes
 IF PAR.Print_Comp_Sum_Dtl_STS = 'Y';

 EXECUTE FUNCTION(Crt Carcass Dtl QTEMP CR) TYPE(CRTOBJ) FILE(PKB1CPP)           AB1217517;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.CD_Scale_Sequence_Number);
 PARAMETER(DB1.CD_Carcass_Number);
 PARAMETER(DB1.CD_Carcass_Number_Insert);
 PARAMETER(DB1.CD_Record_Add_Del_Sts);
 PARAMETER(PAR.CD_Sort_Loss);
 PARAMETER(PAR.CD_STD_Yield);
 PARAMETER(DB1.CD_Carcass_Hot_Weight);
 PARAMETER(PAR.CD_Base_Carcass_CWT);
 PARAMETER(PAR.CD_Crc_Value_Per_CWT);
 PARAMETER(PAR.CD_Base_Carc_Value);
 PARAMETER(PAR.CD_Crc_Value_$_Per_Hd);
 PARAMETER(DB1.CD_Lean_Percent);
 PARAMETER(PAR.CD_Lean_Premium_CWT);
 PARAMETER(PAR.CD_Lean_Premium_$_Per_Hd);
 PARAMETER(PAR.CD_Gross_Value_Per_CWT);
 PARAMETER(PAR.CD_Gross_Value_$_Per_HD);
 PARAMETER(DB1.CD_Kill_Date);
 PARAMETER(DB1.CD_Kill_Time);
 PARAMETER(DB1.CD_Shift);
 PARAMETER(DB1.CD_Carcass_Activity_Sts);
 PARAMETER(DB1.CD_Backfat_Thickness_Inch);
 PARAMETER(DB1.CD_Loin_Eye_Depth_Inch);
 PARAMETER(DB1.CD_Light_Reflectance);
 PARAMETER(DB1.CD_Trim_Area);
 PARAMETER(DB1.CD_Carcass_Sex);
 PARAMETER(DB1.CD_FFLI);
 PARAMETER(DB1.CD_Record_Created_W_Avg);
 PARAMETER(DB1.CD_Record_Created_Status);
 PARAMETER(DB1.CD_LOT);
 PARAMETER(DB1.CD_User_Error_Override);
 PARAMETER(DB1.CD_Backfat_Thickness_MM);
 PARAMETER(DB1.CD_Loin_Eye_Depth_MM);
 PARAMETER(DB1.CD_Light_Reflectance_MM);
 PARAMETER(DB1.CD_Lean_Percent_MM);
 PARAMETER(PAR.CD_Source_Type);
 PARAMETER(DB1.CD_Payment_Type);
 PARAMETER(PAR.CD_CA_Sort_Loss);
 PARAMETER(PAR.CD_CA_Std_Yield);
 PARAMETER(PAR.CD_CA_Base_Carcass_CWT);
 PARAMETER(PAR.CD_CA_Crc_Value_Per_CWT);
 PARAMETER(PAR.CD_CA_Base_Carc_Value);
 PARAMETER(PAR.CD_CA_Crc_Value_$_Per_Hd);
 PARAMETER(PAR.CD_CA_Lean_Premium_CWT);
 PARAMETER(PAR.CD_CA_Lean_Premium_$_P_Hd);
 PARAMETER(PAR.CD_CA_Gross_Value_Per_CWT);
 PARAMETER(PAR.CD_CA_Gross_Value_$_P_Hd);
 PARAMETER(DB1.CD_Adjust_Add_Type);
 PARAMETER(DB1.CD_Producer_Loc_Farm);
 PARAMETER(DB1.CD_Loin_Eye_Inch_2_dec);
 PARAMETER(DB1.CD_Backfat_Inch_2_dec);
 PARAMETER(DB1.CD_Meat_Value_Factor);
 PARAMETER(DB1.CD_Lean_Prem_Disc_Factor);
 PARAMETER(DB1.CD_Fixed_Cost_Factor);
 PARAMETER(DB1.CD_MPR_Sort_Loss);
 PARAMETER(DB1.CD_Meat_Value_Factor_Amt);
 PARAMETER(DB1.CD_Fixed_Cost_Factor_Amt);
 PARAMETER(DB1.CD_Gross_Before_Sort_CWT);
 PARAMETER(DB1.CD_Gross_Before_Sort_HD);
 PARAMETER(DB1.CD_Broken_Back_Sts);
 PARAMETER(DB1.CD_Adjust_Add_Source);
 PARAMETER(DB1.CD_Unused_Sts_3);
 PARAMETER(DB1.CD_Unused_Sts_4);
 PARAMETER(DB1.CD_Unused_Sts_5);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.SR_Source_Code);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

 ENDIF;

 ENDIF;

}


