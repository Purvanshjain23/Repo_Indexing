// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNQIE1R
// ?Date: 14.08.2025 Time: 03:46:09
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?E3289 JJH 08/07/14 Make the CFR Region Code (Freight Region)
//? Optional on the Device Design.
ENDDO;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.Allow_Multi_Company);
PARAMETER(LCL.Default_Printer);
PARAMETER(LCL.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize detail screen (new record)

// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(Customer Name DRV) TYPE(DRVFLD)                                AC1631131;
PARAMETER(DTL.Customer_Name_DRV);
PARAMETER(PAR.Ship_To_Customer);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Customer_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(RTV & VLD Commod. Mkt  RT) TYPE(RTVOBJ) FILE(OMFYREP)          AC1382869;
PARAMETER(DTL.OE_Dft_Commodity_Market);
PARAMETER(DTL.Commodity_Market_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


EXECUTE FUNCTION(Rtv Price Mth Dsc Dflt RT) TYPE(RTVOBJ) FILE(PDIHREP)          AC1701083;
PARAMETER(DTL.OE_Dft_Price_Method_Code);
PARAMETER(DTL.Price_Method_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(RTV Method/Company    RT) TYPE(RTVOBJ) FILE(PDIPREP)           AC1987179;
PARAMETER(DTL.OE_Dft_Market_Date_Method);
PARAMETER(DTL.Date_Method_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(Buyer Name DRV) TYPE(DRVFLD)                                   AC1993546;
PARAMETER(DTL.Buyer_Name_DRV);
PARAMETER(DTL.Buyer_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Buyer Name         RT) TYPE(RTVOBJ) FILE(CAC6REP)          AC1137065;
 PARAMETER(PAR.Buyer_Code);
 PARAMETER(LCL.First_Name);
 PARAMETER(LCL.Last_Name);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Execute function CPY Compress F/L Names US.
 EXECUTE FUNCTION(CPY Compress F/L Names US) TYPE(EXCUSRSRC) ('UFNAME');
 PARAMETER(LCL.First_Name);
 PARAMETER(LCL.Last_Name);
 PARAMETER(PAR.Buyer_Name_DRV);
 {
  0038 E                    IN          2 99               INDICATORS
  E                    UFL        32  1               FIRST & LAST NAME
  0039 E                    ULN        20  1               LAST NAME
  0040 E                    UFN        12  1               FIRST NAME
  0041 C*************************
  C                     MOVE #IA3NA    UFNAM  12
  C                     MOVE #IA6NA    ULNAME 20
  C                     MOVEA*IN,85    UIN85   2
  C                     MOVEA*IN,86    UIN86   2
  C                     MOVEA*IN,87    UIN87   2
  C                     EXSR UFNAME
  C                     MOVEAUFL       #ODQNA
  C                     MOVEAUIN85     *IN,85
  C                     MOVEAUIN86     *IN,86
  C                     MOVEAUIN87     *IN,87
  0042 C           UFNAME    BEGSR
  0002 C******************************************
  0003 C** NAME SUBROUTINE
  0004 C** COMPRESS FIRST NAME AND LAST NAME FOR BETTER READABILITY
  0037 C******************************************
  0046 C                     SETOF                     858687
  0047 C                     MOVE *BLANKS   UFL
  0059 C                     MOVEAULNAME    ULN              LAST NAME
  0060 C                     MOVEAUFNAM     UFN              FIRST NAME
  0061 C                     Z-ADD0         U1      20
  0062 C                     Z-ADD0         U2      20
  *
  0063 C********* BEGIN WORK ON FIRST NAME
  *
  0064 C           UFIRST    TAG
  0065 C                     ADD  1         U2
  0066 C                     ADD  1         U1
  0073 C           UFN,U1    COMP ' '                      85END OF FIRST NM
  0074 C   85                ADD  1         U1                NAME=2 BLANKS
  0075 C   85      U1        COMP 12                   86                TH
  0076 C   85N86   UFN,U1    COMP ' '                      87CHECK 2 BLANKS
  0077 C   85      U1        SUB  1         U1               GET BACK B4 CK
  0079 C   85 86
  0080 COR 85 87             GOTO UOUT                       END OF FIRST NM
  0081 C                     MOVE UFN,U1    UFL,U2           PUT LETTERS IN
  0082 C           U1        CABNE12        UFIRST
  0085 C           UOUT      TAG
  0086 C                     MOVE ' '       UFL,U2             NAME
  0094 C                     Z-ADD0         U1               END OF FIRST NM
  0096 C********* START LAST NAME WORK
  0097 C           ULAST     TAG
  0098 C                     ADD  1         U2
  0099 C           U2        COMP 32                   85    GET OUT-NM DONE
  0100 C   85                GOTO UEND
  0101 C                     ADD  1         U1
  0105 C           ULN,U1    COMP ' '                      85END OF LAST NAM
  0106 C   85                ADD  1         U1                NAME=2 BLANKS
  0107 C   85      U1        COMP 20                   86    GT LNA@ LENGTH
  0108 C   85N86   ULN,U1    COMP ' '                      87CHECK 2 BLANKS
  0109 C   85      U1        SUB  1         U1               GET BACK B4 CK
  0110 C   85 86
  0111 COR 85 87             GOTO UEND
  0112 C                     MOVE ULN,U1    UFL,U2
  0113 C           U1        CABNE20        ULAST
  0123 C           UEND      ENDSR
  /EJECT
  0124 C***************************************************************
 }

}


EXECUTE FUNCTION(CFR Region Desc DRV) TYPE(DRVFLD)                              AC2012059;
PARAMETER(DTL.CFR_Region_Desc_DRV);
PARAMETER(DTL.CFR_Region_Code);

EXECUTE FUNCTION(Rtv Cust PS Dist Sch  IF) TYPE(EXCINTFUN)                      AC2012244;
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(DTL.Status_Flag_1_Y_N);
PARAMETER(DTL.Status_Flag_2_Y_N);
PARAMETER(DTL.Status_Flag_3_Y_N);
PARAMETER(DTL.Status_Flag_4_Y_N);
PARAMETER(DTL.Status_Flag_5_Y_N);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Cust PS Dist Sch  RT) TYPE(RTVOBJ) FILE(PNGWREP)           AC2012243;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(2);
 PARAMETER(PAR.Status_Flag_1_Y_N);
 EXECUTE FUNCTION(Rtv Cust PS Dist Sch  RT) TYPE(RTVOBJ) FILE(PNGWREP)           AC2012243;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(3);
 PARAMETER(PAR.Status_Flag_2_Y_N);
 EXECUTE FUNCTION(Rtv Cust PS Dist Sch  RT) TYPE(RTVOBJ) FILE(PNGWREP)           AC2012243;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(4);
 PARAMETER(PAR.Status_Flag_3_Y_N);
 EXECUTE FUNCTION(Rtv Cust PS Dist Sch  RT) TYPE(RTVOBJ) FILE(PNGWREP)           AC2012243;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(5);
 PARAMETER(PAR.Status_Flag_4_Y_N);
 EXECUTE FUNCTION(Rtv Cust PS Dist Sch  RT) TYPE(RTVOBJ) FILE(PNGWREP)           AC2012243;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(6);
 PARAMETER(PAR.Status_Flag_5_Y_N);
}


//?USER: Validate detail screen fields

//?F4 = Prompt
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.OE Dft Commodity Market
IF PGM.*Cursor_field = DTL.OE_Dft_Commodity_Market;

// Call program SEL Commod. Mkts Actve SR.
CALL PROGRAM(SEL Commod. Mkts Actve SR) ('PDEDSRR');
PARAMETER(DTL.OE_Dft_Commodity_Market);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> DTL.OE Dft Price Method Code
IF PGM.*Cursor_field = DTL.OE_Dft_Price_Method_Code;

// Call program SEL OMS System Only    SR.
CALL PROGRAM(SEL OMS System Only    SR) ('PDZSSRR');
PARAMETER(LCL.ZERO);
PARAMETER(DTL.OE_Dft_Price_Method_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> DTL.OE Dft Market Date Method
IF PGM.*Cursor_field = DTL.OE_Dft_Market_Date_Method;

// Call program SEL OMS Mkt Date      SR.
CALL PROGRAM(SEL OMS Mkt Date      SR) ('PNSCSRR');
PARAMETER(DTL.OE_Dft_Market_Date_Method);
PARAMETER(DTL.Date_Method_Description);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?VAL: TP Sales Company Select
CASE;

// IF DTL.TP Sales Company is Select Company
IF DTL.TP_Sales_Company = 'S';

CASE;

// IF DTL.TP Sales Company Select is Equal to zero
IF DTL.TP_Sales_Company_Select = *ZERO;

// Send error message - 'Company Number is required.'
ERROR(USR2183);
MSGPARM(DTL.TP_Sales_Company_Select);

ENDIF;

//?VAL: TP Sales Company Select
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.TP Sales Company Select is greater than zero
IF DTL.TP_Sales_Company_Select > *ZERO;

// Send error message - 'Company Number is not valid for selected option'
ERROR(USR4266);
MSGPARM(DTL.TP_Sales_Company_Select);

ENDIF;

ENDIF;

//?Validate Market Code
CASE;

// IF DTL.OE Dft Commodity Market is Entered
IF DTL.OE_Dft_Commodity_Market <> *BLANK;

EXECUTE FUNCTION(RTV & VLD Commod. Mkt  RT) TYPE(RTVOBJ) FILE(OMFYREP)          AC1382869;
PARAMETER(DTL.OE_Dft_Commodity_Market);
PARAMETER(DTL.Commodity_Market_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid Commodity Market Code'
ERROR(USR2253);
MSGPARM(DTL.OE_Dft_Commodity_Market);

ENDIF;

ENDIF;

//?Validate Price Method Code
CASE;

// IF DTL.OE Dft Price Method Code is Not Blank
IF DTL.OE_Dft_Price_Method_Code <> *BLANK;

EXECUTE FUNCTION(Rtv Price Mth Dsc Dflt RT) TYPE(RTVOBJ) FILE(PDIHREP)          AC1701083;
PARAMETER(DTL.OE_Dft_Price_Method_Code);
PARAMETER(DTL.Price_Method_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Price Method invalid'
ERROR(USR1957);
MSGPARM(DTL.OE_Dft_Price_Method_Code);

ENDIF;

ENDIF;

//?Validate Market Date Method
CASE;

// IF DTL.OE Dft Market Date Method is Entered
IF DTL.OE_Dft_Market_Date_Method <> *BLANK;

EXECUTE FUNCTION(RTV Method/Company    RT) TYPE(RTVOBJ) FILE(PDIPREP)           AC1987179;
PARAMETER(DTL.OE_Dft_Market_Date_Method);
PARAMETER(DTL.Date_Method_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Date Method is invalid.'
ERROR(USR2161);
MSGPARM(DTL.OE_Dft_Market_Date_Method);

ENDIF;

ENDIF;

//?CALC: Detail screen function fields

EXECUTE FUNCTION(Customer Name DRV) TYPE(DRVFLD)                                AC1631131;
PARAMETER(DTL.Customer_Name_DRV);
PARAMETER(PAR.Ship_To_Customer);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Customer_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Buyer Name DRV) TYPE(DRVFLD)                                   AC1993546;
PARAMETER(DTL.Buyer_Name_DRV);
PARAMETER(DTL.Buyer_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Buyer Name         RT) TYPE(RTVOBJ) FILE(CAC6REP)          AC1137065;
 PARAMETER(PAR.Buyer_Code);
 PARAMETER(LCL.First_Name);
 PARAMETER(LCL.Last_Name);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Execute function CPY Compress F/L Names US.
 EXECUTE FUNCTION(CPY Compress F/L Names US) TYPE(EXCUSRSRC) ('UFNAME');
 PARAMETER(LCL.First_Name);
 PARAMETER(LCL.Last_Name);
 PARAMETER(PAR.Buyer_Name_DRV);
 {
  0038 E                    IN          2 99               INDICATORS
  E                    UFL        32  1               FIRST & LAST NAME
  0039 E                    ULN        20  1               LAST NAME
  0040 E                    UFN        12  1               FIRST NAME
  0041 C*************************
  C                     MOVE #IA3NA    UFNAM  12
  C                     MOVE #IA6NA    ULNAME 20
  C                     MOVEA*IN,85    UIN85   2
  C                     MOVEA*IN,86    UIN86   2
  C                     MOVEA*IN,87    UIN87   2
  C                     EXSR UFNAME
  C                     MOVEAUFL       #ODQNA
  C                     MOVEAUIN85     *IN,85
  C                     MOVEAUIN86     *IN,86
  C                     MOVEAUIN87     *IN,87
  0042 C           UFNAME    BEGSR
  0002 C******************************************
  0003 C** NAME SUBROUTINE
  0004 C** COMPRESS FIRST NAME AND LAST NAME FOR BETTER READABILITY
  0037 C******************************************
  0046 C                     SETOF                     858687
  0047 C                     MOVE *BLANKS   UFL
  0059 C                     MOVEAULNAME    ULN              LAST NAME
  0060 C                     MOVEAUFNAM     UFN              FIRST NAME
  0061 C                     Z-ADD0         U1      20
  0062 C                     Z-ADD0         U2      20
  *
  0063 C********* BEGIN WORK ON FIRST NAME
  *
  0064 C           UFIRST    TAG
  0065 C                     ADD  1         U2
  0066 C                     ADD  1         U1
  0073 C           UFN,U1    COMP ' '                      85END OF FIRST NM
  0074 C   85                ADD  1         U1                NAME=2 BLANKS
  0075 C   85      U1        COMP 12                   86                TH
  0076 C   85N86   UFN,U1    COMP ' '                      87CHECK 2 BLANKS
  0077 C   85      U1        SUB  1         U1               GET BACK B4 CK
  0079 C   85 86
  0080 COR 85 87             GOTO UOUT                       END OF FIRST NM
  0081 C                     MOVE UFN,U1    UFL,U2           PUT LETTERS IN
  0082 C           U1        CABNE12        UFIRST
  0085 C           UOUT      TAG
  0086 C                     MOVE ' '       UFL,U2             NAME
  0094 C                     Z-ADD0         U1               END OF FIRST NM
  0096 C********* START LAST NAME WORK
  0097 C           ULAST     TAG
  0098 C                     ADD  1         U2
  0099 C           U2        COMP 32                   85    GET OUT-NM DONE
  0100 C   85                GOTO UEND
  0101 C                     ADD  1         U1
  0105 C           ULN,U1    COMP ' '                      85END OF LAST NAM
  0106 C   85                ADD  1         U1                NAME=2 BLANKS
  0107 C   85      U1        COMP 20                   86    GT LNA@ LENGTH
  0108 C   85N86   ULN,U1    COMP ' '                      87CHECK 2 BLANKS
  0109 C   85      U1        SUB  1         U1               GET BACK B4 CK
  0110 C   85 86
  0111 COR 85 87             GOTO UEND
  0112 C                     MOVE ULN,U1    UFL,U2
  0113 C           U1        CABNE20        ULAST
  0123 C           UEND      ENDSR
  /EJECT
  0124 C***************************************************************
 }

}


EXECUTE FUNCTION(CFR Region Desc DRV) TYPE(DRVFLD)                              AC2012059;
PARAMETER(DTL.CFR_Region_Desc_DRV);
PARAMETER(DTL.CFR_Region_Code);

//?USER: Create DBF record

EXECUTE FUNCTION(Crt IP Cust Pric Dt   CR) TYPE(CRTOBJ) FILE(PNF4REP)           AC1982192;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.OE_Dft_Commodity_Market);
PARAMETER(DTL.OE_Dft_Price_Method_Code);
PARAMETER(DTL.OE_Dft_Market_Date_Method);
PARAMETER(DTL.TP_Sales_Company_Select);
PARAMETER(DTL.TP_Sales_Company);
PARAMETER(DTL.Buyer_Code);
PARAMETER(DTL.CFR_Region_Code);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
PARAMETER(DTL.Status_Flag_1_Y_N);
PARAMETER(DTL.Status_Flag_2_Y_N);
PARAMETER(DTL.Status_Flag_3_Y_N);
PARAMETER(DTL.Status_Flag_4_Y_N);
PARAMETER(DTL.Status_Flag_5_Y_N);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  //?*** Set RECORD STATUS field. ***
  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  //?*** Set CREATE fields. ***
  // PAR.Create Date = JOB.*Job date
  PAR.Create_Date = JOB.*Job_date;

  // PAR.Create Time = JOB.*Job time
  PAR.Create_Time = JOB.*Job_time;

  // PAR.Create User = JOB.*USER
  PAR.Create_User = JOB.*USER;

  // PAR.Create Program = JOB.*PROGRAM
  PAR.Create_Program = JOB.*PROGRAM;

  //?*** Set CHANGE fields. ***
  // PAR.Change Date = CON.*ZERO
  PAR.Change_Date = *ZERO;

  // PAR.Change Time = CON.*ZERO
  PAR.Change_Time = *ZERO;

  // PAR.Change User = CON.*BLANK
  PAR.Change_User = *BLANK;

  // PAR.Change Program = CON.*BLANK
  PAR.Change_Program = *BLANK;

 }

 //?USER: Processing after Data update

 EXECUTE FUNCTION(Upd Cust PS Dist Sch  RT) TYPE(RTVOBJ) FILE(PNGWREP)           AC2012084;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(2);
 PARAMETER(PAR.Status_Flag_1_Y_N);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Cust PS Dist Sch  CR) TYPE(CRTOBJ) FILE(PNGWREP)           AC2012073;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.PSD_Day_of_Week);
  PARAMETER(PAR.PSD_Send_Status);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Create_Date);
  PARAMETER(PAR.Create_Time);
  PARAMETER(PAR.Create_User);
  PARAMETER(PAR.Create_Program);
  PARAMETER(PAR.Change_Date);
  PARAMETER(PAR.Change_Time);
  PARAMETER(PAR.Change_User);
  PARAMETER(PAR.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set RECORD STATUS field. ***
    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Cust PS Dist Sch  CH) TYPE(CHGOBJ) FILE(PNGWREP)           AC2012074;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.PSD_Day_of_Week);
  PARAMETER(PAR.PSD_Send_Status);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

 }

 EXECUTE FUNCTION(Upd Cust PS Dist Sch  RT) TYPE(RTVOBJ) FILE(PNGWREP)           AC2012084;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(3);
 PARAMETER(PAR.Status_Flag_2_Y_N);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Cust PS Dist Sch  CR) TYPE(CRTOBJ) FILE(PNGWREP)           AC2012073;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.PSD_Day_of_Week);
  PARAMETER(PAR.PSD_Send_Status);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Create_Date);
  PARAMETER(PAR.Create_Time);
  PARAMETER(PAR.Create_User);
  PARAMETER(PAR.Create_Program);
  PARAMETER(PAR.Change_Date);
  PARAMETER(PAR.Change_Time);
  PARAMETER(PAR.Change_User);
  PARAMETER(PAR.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set RECORD STATUS field. ***
    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Cust PS Dist Sch  CH) TYPE(CHGOBJ) FILE(PNGWREP)           AC2012074;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.PSD_Day_of_Week);
  PARAMETER(PAR.PSD_Send_Status);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

 }

 EXECUTE FUNCTION(Upd Cust PS Dist Sch  RT) TYPE(RTVOBJ) FILE(PNGWREP)           AC2012084;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(4);
 PARAMETER(PAR.Status_Flag_3_Y_N);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Cust PS Dist Sch  CR) TYPE(CRTOBJ) FILE(PNGWREP)           AC2012073;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.PSD_Day_of_Week);
  PARAMETER(PAR.PSD_Send_Status);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Create_Date);
  PARAMETER(PAR.Create_Time);
  PARAMETER(PAR.Create_User);
  PARAMETER(PAR.Create_Program);
  PARAMETER(PAR.Change_Date);
  PARAMETER(PAR.Change_Time);
  PARAMETER(PAR.Change_User);
  PARAMETER(PAR.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set RECORD STATUS field. ***
    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Cust PS Dist Sch  CH) TYPE(CHGOBJ) FILE(PNGWREP)           AC2012074;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.PSD_Day_of_Week);
  PARAMETER(PAR.PSD_Send_Status);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

 }

 EXECUTE FUNCTION(Upd Cust PS Dist Sch  RT) TYPE(RTVOBJ) FILE(PNGWREP)           AC2012084;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(5);
 PARAMETER(PAR.Status_Flag_4_Y_N);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Cust PS Dist Sch  CR) TYPE(CRTOBJ) FILE(PNGWREP)           AC2012073;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.PSD_Day_of_Week);
  PARAMETER(PAR.PSD_Send_Status);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Create_Date);
  PARAMETER(PAR.Create_Time);
  PARAMETER(PAR.Create_User);
  PARAMETER(PAR.Create_Program);
  PARAMETER(PAR.Change_Date);
  PARAMETER(PAR.Change_Time);
  PARAMETER(PAR.Change_User);
  PARAMETER(PAR.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set RECORD STATUS field. ***
    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Cust PS Dist Sch  CH) TYPE(CHGOBJ) FILE(PNGWREP)           AC2012074;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.PSD_Day_of_Week);
  PARAMETER(PAR.PSD_Send_Status);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

 }

 EXECUTE FUNCTION(Upd Cust PS Dist Sch  RT) TYPE(RTVOBJ) FILE(PNGWREP)           AC2012084;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(6);
 PARAMETER(PAR.Status_Flag_5_Y_N);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Cust PS Dist Sch  CR) TYPE(CRTOBJ) FILE(PNGWREP)           AC2012073;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.PSD_Day_of_Week);
  PARAMETER(PAR.PSD_Send_Status);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Create_Date);
  PARAMETER(PAR.Create_Time);
  PARAMETER(PAR.Create_User);
  PARAMETER(PAR.Create_Program);
  PARAMETER(PAR.Change_Date);
  PARAMETER(PAR.Change_Time);
  PARAMETER(PAR.Change_User);
  PARAMETER(PAR.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set RECORD STATUS field. ***
    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Cust PS Dist Sch  CH) TYPE(CHGOBJ) FILE(PNGWREP)           AC2012074;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.PSD_Day_of_Week);
  PARAMETER(PAR.PSD_Send_Status);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg IP Cust Pric Dt   CH) TYPE(CHGOBJ) FILE(PNF4REP)           AC1982193;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.OE_Dft_Commodity_Market);
PARAMETER(DTL.OE_Dft_Price_Method_Code);
PARAMETER(DTL.OE_Dft_Market_Date_Method);
PARAMETER(DTL.TP_Sales_Company_Select);
PARAMETER(DTL.TP_Sales_Company);
PARAMETER(DTL.Buyer_Code);
PARAMETER(DTL.CFR_Region_Code);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
PARAMETER(DTL.Status_Flag_1_Y_N);
PARAMETER(DTL.Status_Flag_2_Y_N);
PARAMETER(DTL.Status_Flag_3_Y_N);
PARAMETER(DTL.Status_Flag_4_Y_N);
PARAMETER(DTL.Status_Flag_5_Y_N);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

 //?USER: Processing after Data update

 EXECUTE FUNCTION(Upd Cust PS Dist Sch  RT) TYPE(RTVOBJ) FILE(PNGWREP)           AC2012084;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(2);
 PARAMETER(PAR.Status_Flag_1_Y_N);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Cust PS Dist Sch  CR) TYPE(CRTOBJ) FILE(PNGWREP)           AC2012073;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.PSD_Day_of_Week);
  PARAMETER(PAR.PSD_Send_Status);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Create_Date);
  PARAMETER(PAR.Create_Time);
  PARAMETER(PAR.Create_User);
  PARAMETER(PAR.Create_Program);
  PARAMETER(PAR.Change_Date);
  PARAMETER(PAR.Change_Time);
  PARAMETER(PAR.Change_User);
  PARAMETER(PAR.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set RECORD STATUS field. ***
    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Cust PS Dist Sch  CH) TYPE(CHGOBJ) FILE(PNGWREP)           AC2012074;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.PSD_Day_of_Week);
  PARAMETER(PAR.PSD_Send_Status);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

 }

 EXECUTE FUNCTION(Upd Cust PS Dist Sch  RT) TYPE(RTVOBJ) FILE(PNGWREP)           AC2012084;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(3);
 PARAMETER(PAR.Status_Flag_2_Y_N);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Cust PS Dist Sch  CR) TYPE(CRTOBJ) FILE(PNGWREP)           AC2012073;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.PSD_Day_of_Week);
  PARAMETER(PAR.PSD_Send_Status);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Create_Date);
  PARAMETER(PAR.Create_Time);
  PARAMETER(PAR.Create_User);
  PARAMETER(PAR.Create_Program);
  PARAMETER(PAR.Change_Date);
  PARAMETER(PAR.Change_Time);
  PARAMETER(PAR.Change_User);
  PARAMETER(PAR.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set RECORD STATUS field. ***
    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Cust PS Dist Sch  CH) TYPE(CHGOBJ) FILE(PNGWREP)           AC2012074;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.PSD_Day_of_Week);
  PARAMETER(PAR.PSD_Send_Status);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

 }

 EXECUTE FUNCTION(Upd Cust PS Dist Sch  RT) TYPE(RTVOBJ) FILE(PNGWREP)           AC2012084;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(4);
 PARAMETER(PAR.Status_Flag_3_Y_N);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Cust PS Dist Sch  CR) TYPE(CRTOBJ) FILE(PNGWREP)           AC2012073;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.PSD_Day_of_Week);
  PARAMETER(PAR.PSD_Send_Status);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Create_Date);
  PARAMETER(PAR.Create_Time);
  PARAMETER(PAR.Create_User);
  PARAMETER(PAR.Create_Program);
  PARAMETER(PAR.Change_Date);
  PARAMETER(PAR.Change_Time);
  PARAMETER(PAR.Change_User);
  PARAMETER(PAR.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set RECORD STATUS field. ***
    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Cust PS Dist Sch  CH) TYPE(CHGOBJ) FILE(PNGWREP)           AC2012074;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.PSD_Day_of_Week);
  PARAMETER(PAR.PSD_Send_Status);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

 }

 EXECUTE FUNCTION(Upd Cust PS Dist Sch  RT) TYPE(RTVOBJ) FILE(PNGWREP)           AC2012084;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(5);
 PARAMETER(PAR.Status_Flag_4_Y_N);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Cust PS Dist Sch  CR) TYPE(CRTOBJ) FILE(PNGWREP)           AC2012073;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.PSD_Day_of_Week);
  PARAMETER(PAR.PSD_Send_Status);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Create_Date);
  PARAMETER(PAR.Create_Time);
  PARAMETER(PAR.Create_User);
  PARAMETER(PAR.Create_Program);
  PARAMETER(PAR.Change_Date);
  PARAMETER(PAR.Change_Time);
  PARAMETER(PAR.Change_User);
  PARAMETER(PAR.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set RECORD STATUS field. ***
    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Cust PS Dist Sch  CH) TYPE(CHGOBJ) FILE(PNGWREP)           AC2012074;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.PSD_Day_of_Week);
  PARAMETER(PAR.PSD_Send_Status);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

 }

 EXECUTE FUNCTION(Upd Cust PS Dist Sch  RT) TYPE(RTVOBJ) FILE(PNGWREP)           AC2012084;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(6);
 PARAMETER(PAR.Status_Flag_5_Y_N);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Cust PS Dist Sch  CR) TYPE(CRTOBJ) FILE(PNGWREP)           AC2012073;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.PSD_Day_of_Week);
  PARAMETER(PAR.PSD_Send_Status);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Create_Date);
  PARAMETER(PAR.Create_Time);
  PARAMETER(PAR.Create_User);
  PARAMETER(PAR.Create_Program);
  PARAMETER(PAR.Change_Date);
  PARAMETER(PAR.Change_Time);
  PARAMETER(PAR.Change_User);
  PARAMETER(PAR.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set RECORD STATUS field. ***
    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Cust PS Dist Sch  CH) TYPE(CHGOBJ) FILE(PNGWREP)           AC2012074;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.PSD_Day_of_Week);
  PARAMETER(PAR.PSD_Send_Status);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

 }

}


