// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPPDDFR
// ?Date: 14.08.2025 Time: 03:41:29
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.Application Code = CND.Inventory Management
PAR.Application_Code = 'I/C';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
PARAMETER(JOB.*USER);
PARAMETER(LCL.User_Code_Model);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?R12069 11/15/17 DN-Check if User has Access for F20 Option.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?User Code Model is Blank Then Use User Profile.
CASE;

// IF LCL.User Code Model is equal to blank
IF LCL.User_Code_Model = *BLANK;

// LCL.User Code Model = JOB.*USER
LCL.User_Code_Model = JOB.*USER;

ENDIF;

EXECUTE FUNCTION(RTV Appl Allowed       RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1920437;
PARAMETER(LCL.User_Code_Model);
PARAMETER('IVFPST');
PARAMETER(LCL.Return_Code_Usr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Return Code Usr = CND.*Record does not exist
 PAR.Return_Code_Usr = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Return Code Usr = CND.*Blank
 PAR.Return_Code_Usr = *BLANK;

}


CASE;

// IF LCL.Return Code Usr is *Blank
IF LCL.Return_Code_Usr = *BLANK;

// LCL.User Allowed to POST? = CND.Yes
LCL.User_Allowed_to_POST = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.User Allowed to POST? = CND.No
LCL.User_Allowed_to_POST = 'N';

ENDIF;

ENDIF;

// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

//?USER: Initialize subfile control

//?R9083 02/07/17 DN-Get Inventory Valuation Grouping.
CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

EXECUTE FUNCTION(RTV Desc & Val Alpha  RT) TYPE(RTVOBJ) FILE(PDKMREP)           AC2131892;
PARAMETER(PAR.Company_Number);
PARAMETER('IVFGROUP');
PARAMETER(CTL.Inv_Valuation_Group_Desc);
PARAMETER(CTL.IVF_Valuation_Grouping);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?User Options
CASE;

// IF PAR.Edit/Display Usr is Edit Allowed
IF PAR.Edit_Display_Usr = 'E';

// CTL.Option Variable Text 75 = CON.2=Edit Values
CTL.Option_Variable_Text_75 = '2=Edit Values';

// CTL.Option Variable Text 75 = CONCAT(CTL.Option Variable Text 75,CON.5=Dsp Detail,CON.3)
CTL.Option_Variable_Text_75 = CTL.Option_Variable_Text_75 + '5=Dsp Detail' (3);

// CTL.Option Variable Text 75 = CONCAT(CTL.Option Variable Text 75,CON.6=Print,CON.3)
CTL.Option_Variable_Text_75 = CTL.Option_Variable_Text_75 + '6=Print' (3);

// CTL.Option Variable Text 75 = CONCAT(CTL.Option Variable Text 75,CON.8=Dsp Whse Prices,CON.3)
CTL.Option_Variable_Text_75 = CTL.Option_Variable_Text_75 + '8=Dsp Whse Prices' (3);

//?User Options
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Option Variable Text 75 = CON.5=Dsp Detail
CTL.Option_Variable_Text_75 = '5=Dsp Detail';

// CTL.Option Variable Text 75 = CONCAT(CTL.Option Variable Text 75,CON.6=Print,CON.3)
CTL.Option_Variable_Text_75 = CTL.Option_Variable_Text_75 + '6=Print' (3);

// CTL.Option Variable Text 75 = CONCAT(CTL.Option Variable Text 75,CON.8=Dsp Whse Prices,CON.3)
CTL.Option_Variable_Text_75 = CTL.Option_Variable_Text_75 + '8=Dsp Whse Prices' (3);

ENDIF;

CASE;

// IF CTL.IVF Week Ending Date is Not Entered
IF CTL.IVF_Week_Ending_Date = *ZERO;

// WRK.IVF Week Ending Date = CND.eq 20991231
WRK.IVF_Week_Ending_Date = 20991231;

//?R9083 02/16/17 DN-Modified to Also RST by Grouping.
EXECUTE FUNCTION(Rtv Latest Not Posted RT) TYPE(RTVOBJ) FILE(PPBTCPP)           AC1741455;
PARAMETER(CTL.IVF_Valuation_Grouping);
PARAMETER(WRK.IVF_Week_Ending_Date);
{
 //?USER: Processing if Data record not found

 // PAR.IVF Week Ending Date = CON.*ZERO
 PAR.IVF_Week_Ending_Date = *ZERO;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF WRK.IVF Week Ending Date is eq 20991231
IF WRK.IVF_Week_Ending_Date = 20991231;

// CTL.IVF Week Ending Date = CON.*ZERO
CTL.IVF_Week_Ending_Date = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.IVF Week Ending Date = WRK.IVF Week Ending Date
CTL.IVF_Week_Ending_Date = WRK.IVF_Week_Ending_Date;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?R9083 06/28/17 DN-Get Next Latest Date That Exist in File.
EXECUTE FUNCTION(Rtv Latest Not Posted RT) TYPE(RTVOBJ) FILE(PPBTCPP)           AC1741455;
PARAMETER(CTL.IVF_Valuation_Grouping);
PARAMETER(CTL.IVF_Week_Ending_Date);
{
 //?USER: Processing if Data record not found

 // PAR.IVF Week Ending Date = CON.*ZERO
 PAR.IVF_Week_Ending_Date = *ZERO;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Date Not Found, Throw Error Message.
CASE;

// IF CTL.IVF Week Ending Date is Not Entered
IF CTL.IVF_Week_Ending_Date = *ZERO;

// Send error message - 'Inventory Value File not found.'
ERROR(USR3531);

ENDIF;

ENDIF;

//?R9083 02/09/17 DN-Added RST by IVF Valuation Grouping.
EXECUTE FUNCTION(Rtv Post Inv Sts-1st  RT) TYPE(RTVOBJ) FILE(PPBTCPP)           AC1740674;
PARAMETER(CTL.IVF_Valuation_Grouping);
PARAMETER(CTL.IVF_Week_Ending_Date);
PARAMETER(WRK.IVF_Post_Inventory_Sts);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF WRK.IVF Post Inventory Sts is *ALL values
IF WRK.IVF_Post_Inventory_Sts = 'P'/'O'/'R';

// IF *OTHERWISE
IF *OTHERWISE;

//?R9083 02/22/17 DN-Added New Message to Show Grouping Sts in Msg.
// Send error message - 'Inventory Value File for group &1 not found.'
ERROR(USR4975);
MSGPARM(CTL.IVF_Valuation_Grouping);

ENDIF;

//?USER: Initialize subfile record from DBF record

//?R9083 09/27/17 DN-Show Matching Valuation Grouping.
CASE;

// IF RCD.IVF Valuation Grouping NE CTL.IVF Valuation Grouping
IF RCD.IVF_Valuation_Grouping <> CTL.IVF_Valuation_Grouping;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?R9083 06/28/17 DN-Show Matching Week Ending Date.
CASE;

// IF RCD.IVF Week Ending Date NE CTL.IVF Week Ending Date
IF RCD.IVF_Week_Ending_Date <> CTL.IVF_Week_Ending_Date;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// RCD.ISC End Inv Final Lbs = CON.*ZERO
RCD.ISC_Ending_Inv_Final_Lbs = *ZERO;

//?R9083 02/16/17 DN-Changed to Read By Group/WeekEnd/Item.
EXECUTE FUNCTION(Rtv Sum End Inv-Itm  RT) TYPE(RTVOBJ) FILE(PPBSCPP)            AC1741467;
PARAMETER(RCD.IVF_Valuation_Grouping);
PARAMETER(RCD.IVF_Week_Ending_Date);
PARAMETER(RCD.IVF_Item_Code);
PARAMETER(RCD.ISC_Ending_Inv_Final_Lbs);
{
 //?USER: Process Data record

 // PAR.ISC End Inv Final Lbs = PAR.ISC End Inv Final Lbs + DB1.ISC End Inv Final Lbs
 PAR.ISC_Ending_Inv_Final_Lbs = PAR.ISC_Ending_Inv_Final_Lbs
 + DB1.ISC_Ending_Inv_Final_Lbs;

}


//?CALC: Subfile control function fields

// CTL.Inv Valuation Group Desc = Condition name of CTL.IVF Valuation Grouping
CTL.Inv_Valuation_Group_Desc = RTVCND(CTL.IVF_Valuation_Grouping);

//?USER: Process subfile control (Pre-confirm)

//?R9083 02/09/17 DN-Added RST by IVF Valuation Grouping.
EXECUTE FUNCTION(Rtv Post Inv Sts-1st  RT) TYPE(RTVOBJ) FILE(PPBTCPP)           AC1740674;
PARAMETER(CTL.IVF_Valuation_Grouping);
PARAMETER(CTL.IVF_Week_Ending_Date);
PARAMETER(WRK.IVF_Post_Inventory_Sts);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF WRK.IVF Post Inventory Sts is *ALL values
IF WRK.IVF_Post_Inventory_Sts = 'P'/'O'/'R';

// IF *OTHERWISE
IF *OTHERWISE;

//?R9083 02/22/17 DN-Added New Message to Show Grouping Sts in Msg.
// Send error message - 'Inventory Value File for group &1 not found.'
ERROR(USR4975);
MSGPARM(CTL.IVF_Valuation_Grouping);

// WRK.IVF Post Inventory Sts = CND.Open
WRK.IVF_Post_Inventory_Sts = 'O';

ENDIF;

//?F5=Refresh
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F16=Prt Exception
CASE;

// IF CTL.*CMD key is CF16
IF CTL.*CMD_key = '16';

//?R9083 02/16/17 DN-Added Inv Valuation Grouping & Desc to parm.
// Call program Pmt Prt Inv Val-Exc   PV.
CALL PROGRAM(Pmt Prt Inv Val-Exc   PV) ('PPPYPVR');
PARAMETER(CTL.IVF_Valuation_Grouping);
PARAMETER(CTL.IVF_Week_Ending_Date);
PARAMETER(CTL.Inv_Valuation_Group_Desc);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// Send information message - 'The report has been submitted.'
MESSAGE(USR2720 *INFO);

ENDIF;

ENDIF;

//?F20=Post
CASE;

// IF CTL.*CMD key is CF20
IF CTL.*CMD_key = '20';

// AND PAR.Edit/Display Usr is Edit Allowed
AND PAR.Edit_Display_Usr = 'E';

//?R12069 11/15/17 DN-Throw Error Message if User not Allow for F20.
CASE;

// IF LCL.User Allowed to POST? is No
IF LCL.User_Allowed_to_POST = 'N';

// Send error message - 'Function not allowed.'
ERROR(USR1833);

QUIT;

ENDIF;

//?R9083 02/05/17 DN-Modify to Read By Grouping/WE Date.
EXECUTE FUNCTION(Rtv Post Status-Both  RT) TYPE(RTVOBJ) FILE(PPBSCPP)           AC1768440;
PARAMETER(CTL.IVF_Valuation_Grouping);
PARAMETER(CTL.IVF_Week_Ending_Date);
PARAMETER(LCL.ISC_Warehouse_Company);
PARAMETER(WRK.ISC_Post_Balance_Sts);
PARAMETER(WRK.ISC_Post_Warehouse_Sts);
{
 //?USER: Initialize routine

 // WRK.Record Found USR = CND.Record Found
 WRK.Record_Found_USR = 'Y';

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF DB1.ISC Post Balance Sts is Open
 IF DB1.ISC_Post_Balance_Sts = 'O';

 // OR DB1.ISC Post Warehouse Sts is Open
 OR ( DB1.ISC_Post_Warehouse_Sts = 'O';

 // AND DB1.ISC Item Type is Finished Good
 AND DB1.ISC_Item_Type = 'FG' );

 // PAR.ISC Post Balance Sts = DB1.ISC Post Balance Sts
 PAR.ISC_Post_Balance_Sts = DB1.ISC_Post_Balance_Sts;

 // PAR.ISC Post Warehouse Sts = DB1.ISC Post Warehouse Sts
 PAR.ISC_Post_Warehouse_Sts = DB1.ISC_Post_Warehouse_Sts;

 // PAR.ISC Warehouse Company = DB1.ISC Warehouse Company
 PAR.ISC_Warehouse_Company = DB1.ISC_Warehouse_Company;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ISC Post Balance Sts = DB1.ISC Post Balance Sts
 PAR.ISC_Post_Balance_Sts = DB1.ISC_Post_Balance_Sts;

 // PAR.ISC Post Warehouse Sts = DB1.ISC Post Warehouse Sts
 PAR.ISC_Post_Warehouse_Sts = DB1.ISC_Post_Warehouse_Sts;

 // PAR.ISC Warehouse Company = DB1.ISC Warehouse Company
 PAR.ISC_Warehouse_Company = DB1.ISC_Warehouse_Company;

 ENDIF;

}


//?Both Inv Stock Closing is posted?
CASE;

// IF WRK.ISC Post Balance Sts is Posted or Reposted
IF WRK.ISC_Post_Balance_Sts = 'P'/'R';

// AND WRK.ISC Post Warehouse Sts is Posted or Reposted
AND WRK.ISC_Post_Warehouse_Sts = 'P'/'R';

//?Both Inv Stock Closing is posted?
// IF *OTHERWISE
IF *OTHERWISE;

//?R12069 11/20/17 DN-Added ISC Warehouse Company Txt to Message.
//?S12069 06/19/19 DN-Replaced MsgID with New MsgID.
// LCL.ISC Warehouse Company Txt = CVTVAR(LCL.ISC Warehouse Company)
LCL.ISC_Warehouse_Company_Txt = CVTVAR(LCL.ISC_Warehouse_Company);

// Send error message - 'Error Post not allowed. Stock Close not posted for &1, group &2.'
ERROR(USR5128);
MSGPARM(LCL.ISC_Warehouse_Company_Txt);
MSGPARM(CTL.IVF_Valuation_Grouping);

QUIT;

ENDIF;

//?R12069 11/20/17 DN-Check ISC Post Status for Other Group G or S.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.IVF Valuation Grouping is Guymon & Triumph
IF CTL.IVF_Valuation_Grouping = 'G';

// LCL.IVF Valuation Grouping = CND.Seaboard Triumph Foods
LCL.IVF_Valuation_Grouping = 'S';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.IVF Valuation Grouping = CND.Guymon & Triumph
LCL.IVF_Valuation_Grouping = 'G';

ENDIF;

EXECUTE FUNCTION(Rtv Post Status-Both  RT) TYPE(RTVOBJ) FILE(PPBSCPP)           AC1768440;
PARAMETER(LCL.IVF_Valuation_Grouping);
PARAMETER(CTL.IVF_Week_Ending_Date);
PARAMETER(LCL.ISC_Warehouse_Company);
PARAMETER(WRK.ISC_Post_Balance_Sts);
PARAMETER(WRK.ISC_Post_Warehouse_Sts);
{
 //?USER: Initialize routine

 // WRK.Record Found USR = CND.Record Found
 WRK.Record_Found_USR = 'Y';

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF DB1.ISC Post Balance Sts is Open
 IF DB1.ISC_Post_Balance_Sts = 'O';

 // OR DB1.ISC Post Warehouse Sts is Open
 OR ( DB1.ISC_Post_Warehouse_Sts = 'O';

 // AND DB1.ISC Item Type is Finished Good
 AND DB1.ISC_Item_Type = 'FG' );

 // PAR.ISC Post Balance Sts = DB1.ISC Post Balance Sts
 PAR.ISC_Post_Balance_Sts = DB1.ISC_Post_Balance_Sts;

 // PAR.ISC Post Warehouse Sts = DB1.ISC Post Warehouse Sts
 PAR.ISC_Post_Warehouse_Sts = DB1.ISC_Post_Warehouse_Sts;

 // PAR.ISC Warehouse Company = DB1.ISC Warehouse Company
 PAR.ISC_Warehouse_Company = DB1.ISC_Warehouse_Company;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ISC Post Balance Sts = DB1.ISC Post Balance Sts
 PAR.ISC_Post_Balance_Sts = DB1.ISC_Post_Balance_Sts;

 // PAR.ISC Post Warehouse Sts = DB1.ISC Post Warehouse Sts
 PAR.ISC_Post_Warehouse_Sts = DB1.ISC_Post_Warehouse_Sts;

 // PAR.ISC Warehouse Company = DB1.ISC Warehouse Company
 PAR.ISC_Warehouse_Company = DB1.ISC_Warehouse_Company;

 ENDIF;

}


//?Both Inv Stock Closing is posted?
CASE;

// IF WRK.ISC Post Balance Sts is Posted or Reposted
IF WRK.ISC_Post_Balance_Sts = 'P'/'R';

// AND WRK.ISC Post Warehouse Sts is Posted or Reposted
AND WRK.ISC_Post_Warehouse_Sts = 'P'/'R';

//?Both Inv Stock Closing is posted?
// IF *OTHERWISE
IF *OTHERWISE;

//?R12069 11/20/17 DN-Added ISC Warehouse Company Txt to Message.
//?S12069 06/19/19 DN-Replaced MsgID with New MsgID.
// LCL.ISC Warehouse Company Txt = CVTVAR(LCL.ISC Warehouse Company)
LCL.ISC_Warehouse_Company_Txt = CVTVAR(LCL.ISC_Warehouse_Company);

// Send error message - 'Error Post not allowed. Stock Close not posted for &1, group &2.'
ERROR(USR5128);
MSGPARM(LCL.ISC_Warehouse_Company_Txt);
MSGPARM(LCL.IVF_Valuation_Grouping);

QUIT;

ENDIF;

ENDIF;

//?R9083 02/09/17 DN-Added RST by IVF Valuation Grouping.
EXECUTE FUNCTION(Chk Appr Status       RT) TYPE(RTVOBJ) FILE(PPBTCPP)           AC1740723;
PARAMETER(CTL.IVF_Valuation_Grouping);
PARAMETER(CTL.IVF_Week_Ending_Date);
PARAMETER(WRK.IVF_Curr_Wk_Prod_Status);
PARAMETER(WRK.IVF_Cur_Wk_Inv_Val_Status);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.IVF Curr Wk Prod Status is Unapproved
 IF DB1.IVF_Curr_Wk_Prod_Status = 'U';

 // PAR.IVF Curr Wk Prod Status = DB1.IVF Curr Wk Prod Status
 PAR.IVF_Curr_Wk_Prod_Status = DB1.IVF_Curr_Wk_Prod_Status;

 ENDIF;

 CASE;

 // IF DB1.IVF Cur Wk Inv Val Status is Unapproved
 IF DB1.IVF_Cur_Wk_Inv_Val_Status = 'U';

 // PAR.IVF Cur Wk Inv Val Status = DB1.IVF Cur Wk Inv Val Status
 PAR.IVF_Cur_Wk_Inv_Val_Status = DB1.IVF_Cur_Wk_Inv_Val_Status;

 ENDIF;

}


//?All approved?
CASE;

// IF WRK.IVF Cur Wk Inv Val Status is Unapproved
IF WRK.IVF_Cur_Wk_Inv_Val_Status = 'U';

// OR WRK.IVF Curr Wk Prod Status is Unapproved
OR WRK.IVF_Curr_Wk_Prod_Status = 'U';

//?R9083 02/22/17 DN-Modified to Add Grouping to Message.
//?S12069 06/19/19 DN-Replaced MsgID with New MsgID.
// Send error message - 'Error: Post not allowed for group &1. Not all values have been Approved.'
ERROR(USR5127);
MSGPARM(CTL.IVF_Valuation_Grouping);

QUIT;

ENDIF;

//?R12069 11/20/17 DN-Check IVF Approved Status for Other Group G or S.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Chk Appr Status       RT) TYPE(RTVOBJ) FILE(PPBTCPP)           AC1740723;
PARAMETER(LCL.IVF_Valuation_Grouping);
PARAMETER(CTL.IVF_Week_Ending_Date);
PARAMETER(WRK.IVF_Curr_Wk_Prod_Status);
PARAMETER(WRK.IVF_Cur_Wk_Inv_Val_Status);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.IVF Curr Wk Prod Status is Unapproved
 IF DB1.IVF_Curr_Wk_Prod_Status = 'U';

 // PAR.IVF Curr Wk Prod Status = DB1.IVF Curr Wk Prod Status
 PAR.IVF_Curr_Wk_Prod_Status = DB1.IVF_Curr_Wk_Prod_Status;

 ENDIF;

 CASE;

 // IF DB1.IVF Cur Wk Inv Val Status is Unapproved
 IF DB1.IVF_Cur_Wk_Inv_Val_Status = 'U';

 // PAR.IVF Cur Wk Inv Val Status = DB1.IVF Cur Wk Inv Val Status
 PAR.IVF_Cur_Wk_Inv_Val_Status = DB1.IVF_Cur_Wk_Inv_Val_Status;

 ENDIF;

}


//?All approved?
CASE;

// IF WRK.IVF Cur Wk Inv Val Status is Unapproved
IF WRK.IVF_Cur_Wk_Inv_Val_Status = 'U';

// OR WRK.IVF Curr Wk Prod Status is Unapproved
OR WRK.IVF_Curr_Wk_Prod_Status = 'U';

//?S12069 06/19/19 DN-Replaced MsgID with New MsgID.
// Send error message - 'Error: Post not allowed for group &1. Not all values have been Approved.'
ERROR(USR5127);
MSGPARM(CTL.IVF_Valuation_Grouping);

QUIT;

ENDIF;

ENDIF;

// PAR.Post Flag USR = CND.No
PAR.Post_Flag_USR = 'N';

//?R9083 02/08/17 DN-Added IVF Valuation Grouping as parm to PPPIPVR.
// Call program Pmt Post Inv Values   PV.
CALL PROGRAM(Pmt Post Inv Values   PV) ('PPPIPVR');
PARAMETER(CTL.IVF_Valuation_Grouping);
PARAMETER(CTL.IVF_Week_Ending_Date);
PARAMETER('P');
PARAMETER(CTL.Inv_Valuation_Group_Desc);
PARAMETER(PAR.Post_Flag_USR);

CASE;

// IF PAR.Post Flag USR is Yes
IF PAR.Post_Flag_USR = 'Y';

//?R12069 11/15/17 DN-Removed IVF Valuation Grouping from Message.
// Send error message - 'Post Inventory Values has been submitted.'
ERROR(USR3544);

ENDIF;

//?F20=Post
// IF CTL.*CMD key is CF20
IF CTL.*CMD_key = '20';

// AND PAR.Edit/Display Usr is Displayed Only
AND PAR.Edit_Display_Usr = 'D';

// Send error message - 'Function not allowed.'
ERROR(USR1833);

ENDIF;

//?F11/F14  Not allow for display
CASE;

// IF CTL.*CMD key is CF11
IF ( CTL.*CMD_key = '11';

// OR CTL.*CMD key is CF14
OR CTL.*CMD_key = '14' );

// AND PAR.Edit/Display Usr is Displayed Only
AND PAR.Edit_Display_Usr = 'D';

// Send error message - 'Function not available for this entry'
ERROR(USR1942);

ENDIF;

//?F11=Unpost week -- for nathan only
CASE;

// IF CTL.*CMD key is CF11
IF CTL.*CMD_key = '11';

// AND PAR.Edit/Display Usr is Edit Allowed
AND PAR.Edit_Display_Usr = 'E';

//?R12069 11/15/17 DN-Replaced c3-LCL.User Code Model is Accounting
//?  with LCL.User Allowed to POST=Y to allow F11 option.
CASE;

// IF LCL.User Allowed to POST? is Yes
IF LCL.User_Allowed_to_POST = 'Y';

// OR JOB.*USER is Purva Droge
OR JOB.*USER = 'ISPURVAP';

// OR JOB.*USER is Rose - God
OR JOB.*USER = 'ISROSEM';

// OR JOB.*USER is Rose Centonze
OR JOB.*USER = 'ISRCENT';

//?make sure its the latest date in the file
//?R9083 02/16/17 DN-Modified to Also RST by IVF Valuation Grouping.
EXECUTE FUNCTION(Rtv Latest Posted     RT) TYPE(RTVOBJ) FILE(PPBTCPP)           AC2106767;
PARAMETER(CTL.IVF_Valuation_Grouping);
PARAMETER(WRK.IVF_Week_Ending_Date);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF CTL.IVF Week Ending Date EQ WRK.IVF Week Ending Date
IF CTL.IVF_Week_Ending_Date = WRK.IVF_Week_Ending_Date;

//?R9083 02/09/17 DN-Added RST by IVF Valuation Grouping.
EXECUTE FUNCTION(Rtv Chg Post Sts-Open RT) TYPE(RTVOBJ) FILE(PPBTCPP)           AC2106760;
PARAMETER(CTL.IVF_Valuation_Grouping);
PARAMETER(CTL.IVF_Week_Ending_Date);
PARAMETER('O');
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Inventory Value   CH) TYPE(CHGOBJ) FILE(PPBTCPP)           AC1738125;
 PARAMETER(DB1.IVF_Valuation_Grouping);
 PARAMETER(DB1.IVF_Week_Ending_Date);
 PARAMETER(DB1.IVF_Item_Code);
 PARAMETER(DB1.IVF_WIP_FG_Item_Code);
 PARAMETER(DB1.IVF_Item_Type);
 PARAMETER(DB1.IVF_Unused_Sts_2);
 PARAMETER(DB1.IVF_Item_Cmdty_Price_Grp);
 PARAMETER(DB1.IVF_Item_Dft_Cmdty_Mkt_Bs);
 PARAMETER(DB1.IVF_Item_Structure_Type);
 PARAMETER(DB1.IVF_Item_Structure_Group);
 PARAMETER(DB1.IVF_Item_Structure_Class);
 PARAMETER(DB1.IVF_Item_Market_Overage);
 PARAMETER(DB1.IVF_Item_GL_Sub_Code);
 PARAMETER(DB1.IVF_Item_UOM_Pricing);
 PARAMETER(DB1.IVF_Inventory_Value_Mthd);
 PARAMETER(DB1.IVF_Production_Value_Mthd);
 PARAMETER(DB1.IVF_Beg_Inv_Price_Per_CWT);
 PARAMETER(DB1.IVF_Sales_Price_Per_CWT);
 PARAMETER(DB1.IVF_Sales_Price_Per_LB_Dt);
 PARAMETER(DB1.IVF_Market_Price_Per_CWT);
 PARAMETER(DB1.IVF_Warehouse_Pounds);
 PARAMETER(DB1.IVF_Whs_Price_Per_CWT);
 PARAMETER(DB1.IVF_Ovrrde_Prod_Price_CWT);
 PARAMETER(DB1.IVF_Ovrrde_Prod_Comment);
 PARAMETER(DB1.IVF_Curr_Wk_Prod_Price_CW);
 PARAMETER(DB1.IVF_Curr_Wk_Prod_Status);
 PARAMETER(DB1.IVF_Ovrrde_Inv_Val_Prc_CW);
 PARAMETER(DB1.IVF_Ovrrde_Inv_Val_Commnt);
 PARAMETER(DB1.IVF_Cur_Wk_Inv_Val_Prc_CW);
 PARAMETER(DB1.IVF_Cur_Wk_Inv_Val_Status);
 PARAMETER(DB1.IVF_Unused_Weight);
 PARAMETER(PAR.IVF_Post_Inventory_Sts);
 PARAMETER(DB1.IVF_Unused_Date);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

}


//?R12069 11/21/17 DN-Unpost for Other Group G or S.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.IVF Valuation Grouping is Guymon & Triumph
IF CTL.IVF_Valuation_Grouping = 'G';

// LCL.IVF Valuation Grouping = CND.Seaboard Triumph Foods
LCL.IVF_Valuation_Grouping = 'S';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.IVF Valuation Grouping = CND.Guymon & Triumph
LCL.IVF_Valuation_Grouping = 'G';

ENDIF;

EXECUTE FUNCTION(Rtv Chg Post Sts-Open RT) TYPE(RTVOBJ) FILE(PPBTCPP)           AC2106760;
PARAMETER(LCL.IVF_Valuation_Grouping);
PARAMETER(CTL.IVF_Week_Ending_Date);
PARAMETER('O');
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Inventory Value   CH) TYPE(CHGOBJ) FILE(PPBTCPP)           AC1738125;
 PARAMETER(DB1.IVF_Valuation_Grouping);
 PARAMETER(DB1.IVF_Week_Ending_Date);
 PARAMETER(DB1.IVF_Item_Code);
 PARAMETER(DB1.IVF_WIP_FG_Item_Code);
 PARAMETER(DB1.IVF_Item_Type);
 PARAMETER(DB1.IVF_Unused_Sts_2);
 PARAMETER(DB1.IVF_Item_Cmdty_Price_Grp);
 PARAMETER(DB1.IVF_Item_Dft_Cmdty_Mkt_Bs);
 PARAMETER(DB1.IVF_Item_Structure_Type);
 PARAMETER(DB1.IVF_Item_Structure_Group);
 PARAMETER(DB1.IVF_Item_Structure_Class);
 PARAMETER(DB1.IVF_Item_Market_Overage);
 PARAMETER(DB1.IVF_Item_GL_Sub_Code);
 PARAMETER(DB1.IVF_Item_UOM_Pricing);
 PARAMETER(DB1.IVF_Inventory_Value_Mthd);
 PARAMETER(DB1.IVF_Production_Value_Mthd);
 PARAMETER(DB1.IVF_Beg_Inv_Price_Per_CWT);
 PARAMETER(DB1.IVF_Sales_Price_Per_CWT);
 PARAMETER(DB1.IVF_Sales_Price_Per_LB_Dt);
 PARAMETER(DB1.IVF_Market_Price_Per_CWT);
 PARAMETER(DB1.IVF_Warehouse_Pounds);
 PARAMETER(DB1.IVF_Whs_Price_Per_CWT);
 PARAMETER(DB1.IVF_Ovrrde_Prod_Price_CWT);
 PARAMETER(DB1.IVF_Ovrrde_Prod_Comment);
 PARAMETER(DB1.IVF_Curr_Wk_Prod_Price_CW);
 PARAMETER(DB1.IVF_Curr_Wk_Prod_Status);
 PARAMETER(DB1.IVF_Ovrrde_Inv_Val_Prc_CW);
 PARAMETER(DB1.IVF_Ovrrde_Inv_Val_Commnt);
 PARAMETER(DB1.IVF_Cur_Wk_Inv_Val_Prc_CW);
 PARAMETER(DB1.IVF_Cur_Wk_Inv_Val_Status);
 PARAMETER(DB1.IVF_Unused_Weight);
 PARAMETER(PAR.IVF_Post_Inventory_Sts);
 PARAMETER(DB1.IVF_Unused_Date);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

}


ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Function not available for this entry'
ERROR(USR1942);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Function not available for this entry'
ERROR(USR1942);

ENDIF;

ENDIF;

//?F14=Mark all for group/date as APPROVED
CASE;

// IF CTL.*CMD key is CF14
IF CTL.*CMD_key = '14';

// AND PAR.Edit/Display Usr is Edit Allowed
AND PAR.Edit_Display_Usr = 'E';

CASE;

// IF LCL.User Code Model is Accounting
IF LCL.User_Code_Model = 'PORKACCT6';

// OR LCL.User Code Model is IS
OR LCL.User_Code_Model = 'ISBGUTI';

// OR JOB.*USER is Rose - God
OR JOB.*USER = 'ISROSEM';

// OR JOB.*USER is Rose Centonze
OR JOB.*USER = 'ISRCENT';

//?make sure its the latest date in the file
EXECUTE FUNCTION(Rtv Latest Posted     RT) TYPE(RTVOBJ) FILE(PPBTCPP)           AC2106767;
PARAMETER(CTL.IVF_Valuation_Grouping);
PARAMETER(WRK.IVF_Week_Ending_Date);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF CTL.IVF Week Ending Date EQ WRK.IVF Week Ending Date
IF CTL.IVF_Week_Ending_Date = WRK.IVF_Week_Ending_Date;

EXECUTE FUNCTION(Rtv Chg all to ApprovdRT) TYPE(RTVOBJ) FILE(PPBTCPP)           AC2137116;
PARAMETER(CTL.IVF_Valuation_Grouping);
PARAMETER(CTL.IVF_Week_Ending_Date);
PARAMETER('A');
PARAMETER('A');
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Inventory Value   CH) TYPE(CHGOBJ) FILE(PPBTCPP)           AC1738125;
 PARAMETER(DB1.IVF_Valuation_Grouping);
 PARAMETER(DB1.IVF_Week_Ending_Date);
 PARAMETER(DB1.IVF_Item_Code);
 PARAMETER(DB1.IVF_WIP_FG_Item_Code);
 PARAMETER(DB1.IVF_Item_Type);
 PARAMETER(DB1.IVF_Unused_Sts_2);
 PARAMETER(DB1.IVF_Item_Cmdty_Price_Grp);
 PARAMETER(DB1.IVF_Item_Dft_Cmdty_Mkt_Bs);
 PARAMETER(DB1.IVF_Item_Structure_Type);
 PARAMETER(DB1.IVF_Item_Structure_Group);
 PARAMETER(DB1.IVF_Item_Structure_Class);
 PARAMETER(DB1.IVF_Item_Market_Overage);
 PARAMETER(DB1.IVF_Item_GL_Sub_Code);
 PARAMETER(DB1.IVF_Item_UOM_Pricing);
 PARAMETER(DB1.IVF_Inventory_Value_Mthd);
 PARAMETER(DB1.IVF_Production_Value_Mthd);
 PARAMETER(DB1.IVF_Beg_Inv_Price_Per_CWT);
 PARAMETER(DB1.IVF_Sales_Price_Per_CWT);
 PARAMETER(DB1.IVF_Sales_Price_Per_LB_Dt);
 PARAMETER(DB1.IVF_Market_Price_Per_CWT);
 PARAMETER(DB1.IVF_Warehouse_Pounds);
 PARAMETER(DB1.IVF_Whs_Price_Per_CWT);
 PARAMETER(DB1.IVF_Ovrrde_Prod_Price_CWT);
 PARAMETER(DB1.IVF_Ovrrde_Prod_Comment);
 PARAMETER(DB1.IVF_Curr_Wk_Prod_Price_CW);
 PARAMETER(PAR.IVF_Curr_Wk_Prod_Status);
 PARAMETER(DB1.IVF_Ovrrde_Inv_Val_Prc_CW);
 PARAMETER(DB1.IVF_Ovrrde_Inv_Val_Commnt);
 PARAMETER(DB1.IVF_Cur_Wk_Inv_Val_Prc_CW);
 PARAMETER(PAR.IVF_Cur_Wk_Inv_Val_Status);
 PARAMETER(DB1.IVF_Unused_Weight);
 PARAMETER(DB1.IVF_Post_Inventory_Sts);
 PARAMETER(DB1.IVF_Unused_Date);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Function not available for this entry'
ERROR(USR1942);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Function not available for this entry'
ERROR(USR1942);

ENDIF;

ENDIF;

//?F21=Print List
CASE;

// IF CTL.*CMD key is *Print List
IF CTL.*CMD_key = '21';

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Inv & Prod Values Report');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);
PARAMETER(*MISSING);
PARAMETER(1);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.System Value Numeric = PAR.PRT Number of Copies
WRK.System_Value_Numeric = PAR.PRT_Number_of_Copies;

//?R9083 06/26/17 DN-Update date conversion due to Synon version difference.
// LCL.Date Out (8,0) USR = CTL.IVF Week Ending Date
LCL.Date_Out_80_USR = CTL.IVF_Week_Ending_Date;

// WRK.Date (Char-8) USR = CVTVAR(LCL.Date Out (8,0) USR)
WRK.Date_Char_8_USR = CVTVAR(LCL.Date_Out_80_USR);

//?R9083 02/16/17 DN-Added Inv Valuation Grouping & Desc to parm.
// Call program Prt Inv Value Rpt     UP.
SBMJOB;
CALL PROGRAM(Prt Inv Value Rpt     UP) ('PPPWUPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(WRK.System_Value_Numeric);
PARAMETER(WRK.Date_Char_8_USR);
PARAMETER(CTL.IVF_Valuation_Grouping);
PARAMETER(CTL.Inv_Valuation_Group_Desc);
SBMJOBOVR JOB(INV_VALUES);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

// Send information message - 'The report has been submitted.'
MESSAGE(USR2720 *INFO);

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?2=Edit Detail
CASE;

// IF RCD.*SFLSEL is *Edit
IF RCD.*SFLSEL = '2'/'2';

// AND PAR.Edit/Display Usr is Edit Allowed
AND PAR.Edit_Display_Usr = 'E';

CASE;

// IF RCD.IVF Post Inventory Sts is Open
IF RCD.IVF_Post_Inventory_Sts = 'O';

// CTL.IVF Item Code = RCD.IVF Item Code
CTL.IVF_Item_Code = RCD.IVF_Item_Code;

//?R9083 02/16/17 DN-Added Inv Valuation Grouping & Desc to parm.
// Call program Edt Inv & Prod Values ER.
CALL PROGRAM(Edt Inv & Prod Values ER) ('PPPGE1R');
PARAMETER(RCD.IVF_Valuation_Grouping);
PARAMETER(RCD.IVF_Week_Ending_Date);
PARAMETER(RCD.IVF_Item_Code);
PARAMETER(CTL.Inv_Valuation_Group_Desc);
PARAMETER(RCD.ISC_Ending_Inv_Final_Lbs);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

//?R9083 02/22/17 DN-Modified to Add Grouping to Message.
// Send error message - 'Invalid Option. Inventory Value File has been posted for group &2.'
ERROR(USR3614);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.IVF_Valuation_Grouping);

ENDIF;

//?2=Edit Detail
// IF RCD.*SFLSEL is *Edit
IF RCD.*SFLSEL = '2'/'2';

// AND PAR.Edit/Display Usr is Displayed Only
AND PAR.Edit_Display_Usr = 'D';

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

//?5=Dsp Detail
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

// CTL.IVF Item Code = RCD.IVF Item Code
CTL.IVF_Item_Code = RCD.IVF_Item_Code;

//?R9083 02/16/17 DN-Added Inv Valuation Grouping & Desc to parm.
// Call program Dsp Inv & Prod Values DR.
CALL PROGRAM(Dsp Inv & Prod Values DR) ('PPPLD1R');
PARAMETER(RCD.IVF_Valuation_Grouping);
PARAMETER(RCD.IVF_Week_Ending_Date);
PARAMETER(RCD.IVF_Item_Code);
PARAMETER(RCD.ISC_Ending_Inv_Final_Lbs);
PARAMETER(CTL.Inv_Valuation_Group_Desc);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?6=Prt Detail
CASE;

// IF RCD.*SFLSEL is *Print
IF RCD.*SFLSEL = '6'/'6';

// CTL.IVF Item Code = RCD.IVF Item Code
CTL.IVF_Item_Code = RCD.IVF_Item_Code;

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Inv & Prod Values -1 item');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);
PARAMETER(*MISSING);
PARAMETER(1);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.System Value Numeric = PAR.PRT Number of Copies
WRK.System_Value_Numeric = PAR.PRT_Number_of_Copies;

//?R9083 06/26/17 DN-Update date conversion due to Synon version difference.
// LCL.Date Out (8,0) USR = RCD.IVF Week Ending Date
LCL.Date_Out_80_USR = RCD.IVF_Week_Ending_Date;

// WRK.Date (Char-8) USR = CVTVAR(LCL.Date Out (8,0) USR)
WRK.Date_Char_8_USR = CVTVAR(LCL.Date_Out_80_USR);

// WRK.Item Code PASS        USR = RCD.IVF Item Code
WRK.Item_Code_PASS_USR = RCD.IVF_Item_Code;

//?R9083 02/16/17 DN-Added Inv Valuation Grouping & Desc to parm.
// Call program Prt Inv Value Rpt-1 ItUP.
SBMJOB;
CALL PROGRAM(Prt Inv Value Rpt-1 ItUP) ('PPQDUPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(WRK.System_Value_Numeric);
PARAMETER(WRK.Item_Code_PASS_USR);
PARAMETER(WRK.Date_Char_8_USR);
PARAMETER(RCD.IVF_Valuation_Grouping);
PARAMETER(CTL.Inv_Valuation_Group_Desc);
SBMJOBOVR JOB(INV_VALUE);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBOVR HOLD(*JOBD);
SBMJOBEND;

// Send information message - 'The report has been submitted.'
MESSAGE(USR2720 *INFO);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?8=Dsp Whse prices
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

// CTL.IVF Item Code = RCD.IVF Item Code
CTL.IVF_Item_Code = RCD.IVF_Item_Code;

//?R9083 02/15/17 DN-Added Inv Valuation Grouping & Grouping Desc to Parm.
// Call program Dsp Warehouse Prices  DF.
CALL PROGRAM(Dsp Warehouse Prices  DF) ('PPPSDFR');
PARAMETER(RCD.IVF_Valuation_Grouping);
PARAMETER(RCD.IVF_Week_Ending_Date);
PARAMETER(RCD.IVF_Item_Code);
PARAMETER(CTL.Inv_Valuation_Group_Desc);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

