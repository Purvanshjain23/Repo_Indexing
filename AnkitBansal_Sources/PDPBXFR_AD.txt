// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDPBXFR
// ?Date: 14.08.2025 Time: 03:29:10
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(CLC Read/Proc. Detail  RT) TYPE(RTVOBJ) FILE(PDIKREP)          AC1283212;
PARAMETER(PAR.Price_Method_Type);
PARAMETER(PAR.Decimal_Places_Rounded);
PARAMETER(PAR.PMH_Price_Type);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Price_Method_Code);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER(PAR.Pricing_Retrieved_Amount);
PARAMETER(PAR.Event_Called_From);
PARAMETER(PAR.OD_Ceiling_Price);
PARAMETER(PAR.OD_Market_Begin_Date);
PARAMETER(PAR.OD_Market_Ending_Date);
PARAMETER(PAR.Error_Return);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Price_Overage_Override);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.UOM_Third);
PARAMETER(PAR.UOM_Pricing);
PARAMETER(PAR.Price_based_on_U_M1_S);
PARAMETER(PAR.Price_based_on_U_M2_S);
PARAMETER(PAR.Price_based_on_U_M3_S);
PARAMETER(PAR.Price_Type_Status);
{
 //?USER: Initialize routine

 // Call program Rtv Plant Co/Org      XF.
 CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Plant_Company_Sts);
 PARAMETER(LCL.Company_Organization);

 // PAR.Unit Price = CND.Equal zero
 PAR.Unit_Price = *ZERO;

 // PAR.Pricing Retrieved Amount = WRK.ZERO
 PAR.Pricing_Retrieved_Amount = WRK.ZERO;

 // PAR.Error Return = WRK.BLANK
 PAR.Error_Return = WRK.BLANK;

 // PAR.U/M - Primary = WRK.BLANK
 PAR.UOM_Primary = WRK.BLANK;

 // PAR.U/M - Second = WRK.BLANK
 PAR.UOM_Second = WRK.BLANK;

 // PAR.U/M - Third = WRK.BLANK
 PAR.UOM_Third = WRK.BLANK;

 // PAR.U/M - Pricing = WRK.BLANK
 PAR.UOM_Pricing = WRK.BLANK;

 // PAR.Price based on U/M1 S = WRK.ZERO
 PAR.Price_based_on_U_M1_S = WRK.ZERO;

 // PAR.Price based on U/M2 S = WRK.ZERO
 PAR.Price_based_on_U_M2_S = WRK.ZERO;

 // PAR.Price based on U/M3 S = WRK.ZERO
 PAR.Price_based_on_U_M3_S = WRK.ZERO;

 // Call program RTV Item Dtls W/CW     XF.
 CALL PROGRAM(RTV Item Dtls W/CW     XF) ('PDGMXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Conversion_Factor_1);
 PARAMETER(PAR.Operation_Factor_1);
 PARAMETER(PAR.UOM_Second);
 PARAMETER(PAR.Conversion_Factor_2);
 PARAMETER(PAR.Operation_Factor_2);
 PARAMETER(PAR.UOM_Third);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(WRK.Catch_Weight_Status);
 PARAMETER(WRK.Market_Overage);
 PARAMETER(WRK.Standard_Overage_Underage);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(PAR.Item_Pricing_Operation);
 PARAMETER(PAR.Item_Pricing_Constant);

 //?p205 - Sales price book  *** C2742 8/27/13 COMMENT - NEVER IMPLEMENTED ***
 //?** Save U/M - Pricing, this will be replace later.
 // WRK.U/M - Pricing = PAR.U/M - Pricing
 WRK.UOM_Pricing = PAR.UOM_Pricing;

 // PAR.Price Status = CND.Priced
 PAR.Price_Status = 'P';

 // PAR.Price Detail Sequence = CON.1
 PAR.Price_Detail_Sequence = 1;

 //?***** Change Log and Comments
 DO;

 //?*** C2742 8/27/13 RMC COMMENT sales price book rtv - NEVER IMPLEMENTED ***
 //?*****
 //?** 05/02/2013 RMC E2494 Flat Duty Item pricing component
 //?*****
 //?** 04/01/2013 RMC E2494 Gate Adjustment component
 //?*****
 //?** 05/23/2007 LJB DLY029
 //?** Add calculation for new ACCRLS Pricing Component for Dailys.
 //?*****
 ENDDO;

 //?USER: Process Data record

 //?** If a change is made here or a routine is added here then a
 //?** similar routine must be added to the CLC Pricing using File RT
 //?** in the Order Detail Pricing file. These need to be kept in sync.
 //?*** 01 PROCESS COMPONANT MKTPRC IF SELECTED AND IS ACTIVE-*
 CASE;

 // IF DB1.Price Method Componant is MKTPRC
 IF DB1.Price_Method_Componant = 'MKTPRC';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 //?NOTE: Price received from this routine has been converted to CWT
 //?Retrieve Market Pricing
 DO;

 EXECUTE FUNCTION(RTV Pricing: MKTPRC   IF) TYPE(EXCINTFUN)                      AC1283243;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(PAR.OD_Market_Begin_Date);
 PARAMETER(PAR.OD_Market_Ending_Date);
 PARAMETER(PAR.Error_Return);
 {
  //?Execute internal function

  //?Conversion Documentation
  DO;

  //?Market Price will be converted to CWT because Overages will be
  //?by CWT if it is Customer Overage, and Market Price may not be.
  ENDDO;

  //?E3947 2/23/2015 RMC
  //? If commodity price group is TPA, use item code as the group instead
  // PAR.Commodity Price Group USR = PAR.Commodity Price Group
  PAR.Commodity_Price_Group_USR = PAR.Commodity_Price_Group;

  //?*** Price Routine was call on or after Shipping, Calculate Price
  CASE;

  // IF PAR.Event Called From is All Values
  IF PAR.Event_Called_From = '02'/'99'/**/'AO'/'AI';

  CASE;

  // IF PAR.Commodity Price Group is Third Party Avg
  IF PAR.Commodity_Price_Group = 'TPA';

  // LCL.Item Code Txt = CVTVAR(PAR.Item Code)
  LCL.Item_Code_Txt = CVTVAR(PAR.Item_Code);

  // PAR.Commodity Price Group USR = LCL.Item Code Txt
  PAR.Commodity_Price_Group_USR = LCL.Item_Code_Txt;

  ENDIF;

  //?*** Calculate Date Method Price if Selected
  CASE;

  // IF PAR.Date Method Code is Entered
  IF PAR.Date_Method_Code <> *BLANK;

  // Call program CLC Date Method        XF.
  CALL PROGRAM(CLC Date Method        XF) ('PDLJXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Date_Method_Code);
  PARAMETER(PAR.Actual_Shipped_Date);
  PARAMETER(PAR.Requested_Delivery_Date);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER(PAR.Event_Called_From);
  PARAMETER(PAR.Commodity_Price_Group_USR);
  PARAMETER(PAR.OD_Market_Begin_Date);
  PARAMETER(PAR.OD_Market_Ending_Date);
  PARAMETER(PAR.Date_Used_for_Calculation);
  PARAMETER(PAR.Error_Return);
  PARAMETER(PAR.Item_Code);

  //?*** Calculate Date Method Price if Selected
  // IF PAR.OD Market Begin Date is Entered
  IF ( PAR.OD_Market_Begin_Date <> *ZERO;

  // AND PAR.OD Market Ending Date is Entered
  AND PAR.OD_Market_Ending_Date <> *ZERO );

  EXECUTE FUNCTION(Rtv Date Range Avg Cd RT) TYPE(RTVOBJ) FILE(PDIPREP)           AC1998797;
  PARAMETER('O');
  PARAMETER('R');
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Date_Method_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  // Call program CLC Date Method        XF.
  CALL PROGRAM(CLC Date Method        XF) ('PDLJXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Date_Method_Code);
  PARAMETER(PAR.Actual_Shipped_Date);
  PARAMETER(PAR.Requested_Delivery_Date);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER(PAR.Event_Called_From);
  PARAMETER(PAR.Commodity_Price_Group_USR);
  PARAMETER(PAR.OD_Market_Begin_Date);
  PARAMETER(PAR.OD_Market_Ending_Date);
  PARAMETER(PAR.Date_Used_for_Calculation);
  PARAMETER(PAR.Error_Return);
  PARAMETER(PAR.Item_Code);

  //?*** Calculate Date Method Price if Selected
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?*** Load Date used for calculation (to retrieve Market date)
  CASE;

  // IF PAR.Market Pricing Date is NE Zero
  IF PAR.Market_Pricing_Date <> *ZERO;

  // PAR.Date Used for Calculation = PAR.Market Pricing Date
  PAR.Date_Used_for_Calculation = PAR.Market_Pricing_Date;

  //?*** Load Date used for calculation (to retrieve Market date)
  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PAR.Date Used for Calculation is not entered
  IF PAR.Date_Used_for_Calculation = *ZERO;

  CASE;

  // IF PAR.Actual Shipped Date is entered
  IF PAR.Actual_Shipped_Date <> *ZERO;

  // PAR.Date Used for Calculation = PAR.Actual Shipped Date
  PAR.Date_Used_for_Calculation = PAR.Actual_Shipped_Date;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date Used for Calculation = PAR.Requested Ship Date
  PAR.Date_Used_for_Calculation = PAR.Requested_Ship_Date;

  ENDIF;

  ENDIF;

  ENDIF;

  EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
  PARAMETER(PAR.Commodity_Market_Code);
  PARAMETER(PAR.Commodity_Price_Group_USR);
  PARAMETER(PAR.Date_Used_for_Calculation);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER(PAR.Pricing_Date_Used);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.Commodity Market Price = DB1.Commodity Market Price
   PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

   // PAR.USR Date Priced = DB1.Market Price Date
   PAR.USR_Date_Priced = DB1.Market_Price_Date;

   QUIT;

  }

  //?Flag as Unpriced if Price Date doesn't match Market date entered
  CASE;

  // IF PAR.Pricing Date Used NE PAR.Date Used for Calculation
  IF PAR.Pricing_Date_Used <> PAR.Date_Used_for_Calculation;

  // OR PGM.*Return code is *Record does not exist
  OR PGM.*Return_code = 'Y2U0005';

  // PAR.Price Status = CND.Unpriced
  PAR.Price_Status = 'U';

  //?If no pricing record was found then flag as pricing error.
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // PAR.Error Return = CND.MKTPRC Error
  PAR.Error_Return = 'MKT';

  ENDIF;

  ENDIF;

  //?If record not found use default commodity market from company/item
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Call program RTV Dflt Comm Mrkt     XF.
  CALL PROGRAM(RTV Dflt Comm Mrkt     XF) ('PDMNXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Default_Commod_Mark_basis);

  CASE;

  // IF PAR.Commodity Market Code NE PAR.Default Commod Mark basis
  IF PAR.Commodity_Market_Code <> PAR.Default_Commod_Mark_basis;

  EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
  PARAMETER(PAR.Default_Commod_Mark_basis);
  PARAMETER(PAR.Commodity_Price_Group_USR);
  PARAMETER(PAR.Date_Used_for_Calculation);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER(PAR.Pricing_Date_Used);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.Commodity Market Price = DB1.Commodity Market Price
   PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

   // PAR.USR Date Priced = DB1.Market Price Date
   PAR.USR_Date_Priced = DB1.Market_Price_Date;

   QUIT;

  }

  ENDIF;

  ENDIF;

  ENDIF;

  EXECUTE FUNCTION(Rtv Market Details    RT) TYPE(RTVOBJ) FILE(PNGBREP)           AC1989084;
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Commodity_Market_Code);
  PARAMETER(NLL.Commodity_Price_Group);
  PARAMETER(LCL.Market_Percent);
  PARAMETER(NLL.Market_Prem_Ded);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.Pricing Retrieved Amount is Not Zeros
  IF PAR.Pricing_Retrieved_Amount <> *ZERO;

  // AND LCL.Market Percent is not equal to zeros
  AND LCL.Market_Percent <> *ZERO;

  // Pricing Retrieved Amount
  PAR.Pricing_Retrieved_Amount = PAR.Pricing_Retrieved_Amount * ( LCL.Market_Percent / 100
  'H' ) 'H';

  ENDIF;

  ENDIF;

  //?Convert Price to CWT
  CASE;

  // IF PAR.Pricing Retrieved Amount is Not Zeros
  IF PAR.Pricing_Retrieved_Amount <> *ZERO;

  // Call program CLC Convert Price - CW XF.
  CALL PROGRAM(CLC Convert Price - CW XF) ('PDKUXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER(PAR.Price_Adjustment_Amount);

  // PAR.Pricing Retrieved Amount = PAR.Price Adjustment Amount
  PAR.Pricing_Retrieved_Amount = PAR.Price_Adjustment_Amount;

  ENDIF;

 }

 //?Error Routine - Exit if Error
 CASE;

 // IF PAR.Error Return is All Entered Values
 IF PAR.Error_Return = 'CFR'/'CID'/'CIF'/'CIO'/'QPE'/'EXT'/'XPE'/'FPE'/'IOM'/'IOV'/'MPE'
 /'KPE'/'MKT'/'MSC'/'OVR'/'STR'/'SUB'/'TRC'/'WPA'/'RWB'/'ITERR'/'CRD'/'MSL'/'GAT';

 // OR PGM.*Return code is *Record does not exist
 OR PGM.*Return_code = 'Y2U0005';

 // PAR.Error Return = CND.MKTPRC Error
 PAR.Error_Return = 'MKT';

 ENDIF;

 //?Update Pricing Retrieved Amount is not equal to 0
 CASE;

 // IF PAR.Pricing Retrieved Amount NE WRK.ZERO
 IF PAR.Pricing_Retrieved_Amount <> WRK.ZERO;

 //?Internal Routine to update either Order detail Pricing file
 //?in Library Qtemp if Order has not been updated yet, or
 //?Order Detail pricing, if pricing is called
 //?from Post(Update) Order, or Ship Pricing Detail if after Shipping
 EXECUTE FUNCTION(UPD Pricing Detail     IF) TYPE(EXCINTFUN)                     AC1296395;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(PAR.Price_Detail_Sequence);
 {
  //?Execute internal function

  //?Process if Order Nbr is not zero, if zero then not call from O/E
  CASE;

  // IF PAR.Event Called From is Not Price Only
  IF PAR.Event_Called_From = '02'/**/'AO'/'AI';

  CASE;

  // IF PAR.Event Called From is Pre-Update Invoice
  IF PAR.Event_Called_From = **;

  EXECUTE FUNCTION(CRT Ship Dtl Price QtmpCR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1310882;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is Invoice Pricing
  IF PAR.Event_Called_From = '02';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc O/E
  IF PAR.Event_Called_From = 'AO';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc Inv
  IF PAR.Event_Called_From = 'AI';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  ENDIF;

  ENDIF;

 }

 //?Accumulate Final Price
 // PAR.Unit Price = PAR.Unit Price + PAR.Pricing Retrieved Amount
 PAR.Unit_Price = PAR.Unit_Price + PAR.Pricing_Retrieved_Amount;

 ENDIF;

 ENDDO;

 ENDIF;

 //?*** 02 PROCESS COMPONANT STRITM IF SELECTED AND IS ACTIVE-*
 CASE;

 // IF DB1.Price Method Componant is STRITM
 IF DB1.Price_Method_Componant = 'STRITM';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 //?Retrieve Starting Item Prices
 DO;

 EXECUTE FUNCTION(xRTV Pricing: STRITM   IF) TYPE(EXCINTFUN)                     AC1295215;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(PAR.OD_Market_Begin_Date);
 PARAMETER(PAR.OD_Market_Ending_Date);
 PARAMETER(PAR.Error_Return);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Code);
 PARAMETER(PAR.Price_Type_Status);
 {
  //?Execute internal function

  EXECUTE FUNCTION(UPD Consumed Items     RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1295964;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Price_Method_Code);
  PARAMETER(PAR.Actual_Shipped_Date);
  PARAMETER(PAR.Requested_Delivery_Date);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER(PAR.Event_Called_From);
  PARAMETER(PAR.OD_Market_Begin_Date);
  PARAMETER(PAR.OD_Market_Ending_Date);
  PARAMETER(PAR.Error_Return);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Type_Status);
  {
   //?USER: Initialize routine

   //?Conversion Documentation
   DO;

   //?Market Prices for each Bill of Material Starting Item will be
   //?converted to CWT.
   ENDDO;

   // WRK.Pricing Sequence Number = CON.*ZERO
   WRK.Pricing_Sequence_Number = *ZERO;

   // PAR.Pricing Retrieved Amount = CON.*ZERO
   PAR.Pricing_Retrieved_Amount = *ZERO;

   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   // PAR.Price Status = CND.Unpriced
   PAR.Price_Status = 'U';

   // PAR.Error Return = CND.Consumed Items not found
   PAR.Error_Return = 'CNF';

   //?USER: Process Data record

   //?Retrieve Starting Item Details
   // Call program RTV Item Details       XF.
   CALL PROGRAM(RTV Item Details       XF) ('PDKAXFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Component_Item_Code);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Conversion_Factor_1);
   PARAMETER(PAR.Operation_Factor_1);
   PARAMETER(PAR.UOM_Second);
   PARAMETER(PAR.Conversion_Factor_2);
   PARAMETER(PAR.Operation_Factor_2);
   PARAMETER(PAR.UOM_Third);
   PARAMETER(PAR.UOM_Pricing);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(WRK.Market_Overage);
   PARAMETER(WRK.Standard_Overage_Underage);
   PARAMETER(PAR.Commodity_Price_Group);
   PARAMETER(PAR.Item_Pricing_Operation);
   PARAMETER(PAR.Item_Pricing_Constant);

   //?*** Price Routine was call on or after Shipping, Calculate Price
   CASE;

   // IF PAR.Event Called From is All Values
   IF PAR.Event_Called_From = '02'/'99'/**/'AO'/'AI';

   //?*** Calculate or Retrieve Market Date Method Processing
   CASE;

   // IF PAR.Date Method Code is Entered
   IF PAR.Date_Method_Code <> *BLANK;

   // Call program CLC Date Method        XF.
   CALL PROGRAM(CLC Date Method        XF) ('PDLJXFR');
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Date_Method_Code);
   PARAMETER(PAR.Actual_Shipped_Date);
   PARAMETER(PAR.Requested_Delivery_Date);
   PARAMETER(WRK.Pricing_Retrieved_Amount);
   PARAMETER(PAR.Event_Called_From);
   PARAMETER(PAR.Commodity_Price_Group);
   PARAMETER(PAR.OD_Market_Begin_Date);
   PARAMETER(PAR.OD_Market_Ending_Date);
   PARAMETER(PAR.Date_Used_for_Calculation);
   PARAMETER(PAR.Error_Return);
   PARAMETER(DB1.Item_Code);

   ENDIF;

   //?*** Retrieve Market Pricing if the Following criteria is met
   CASE;

   // IF PAR.Date Method Code is Not Entered
   IF PAR.Date_Method_Code = *BLANK;

   //?Load Date used for calculation (to retrieve Market date)
   CASE;

   // IF PAR.Market Pricing Date is NE Zero
   IF PAR.Market_Pricing_Date <> *ZERO;

   // PAR.Date Used for Calculation = PAR.Market Pricing Date
   PAR.Date_Used_for_Calculation = PAR.Market_Pricing_Date;

   //?Load Date used for calculation (to retrieve Market date)
   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Date Used for Calculation is not entered
   IF PAR.Date_Used_for_Calculation = *ZERO;

   CASE;

   // IF PAR.Actual Shipped Date is entered
   IF PAR.Actual_Shipped_Date <> *ZERO;

   // PAR.Date Used for Calculation = PAR.Actual Shipped Date
   PAR.Date_Used_for_Calculation = PAR.Actual_Shipped_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Date Used for Calculation = PAR.Requested Ship Date
   PAR.Date_Used_for_Calculation = PAR.Requested_Ship_Date;

   ENDIF;

   ENDIF;

   ENDIF;

   EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
   PARAMETER(PAR.Commodity_Market_Code);
   PARAMETER(PAR.Commodity_Price_Group);
   PARAMETER(PAR.Date_Used_for_Calculation);
   PARAMETER(WRK.Pricing_Retrieved_Amount);
   PARAMETER(PAR.Pricing_Date_Used);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    // PAR.Commodity Market Price = DB1.Commodity Market Price
    PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

    // PAR.USR Date Priced = DB1.Market Price Date
    PAR.USR_Date_Priced = DB1.Market_Price_Date;

    QUIT;

   }

   //?Flag as Unpriced if Price Date doesn't match Market date entered
   CASE;

   // IF PAR.Date Used for Calculation NE WRK.Pricing Date Used
   IF PAR.Date_Used_for_Calculation <> WRK.Pricing_Date_Used;

   // OR PGM.*Return code is *Record does not exist
   OR PGM.*Return_code = 'Y2U0005';

   // PAR.Price Status = CND.Unpriced
   PAR.Price_Status = 'U';

   //?If no pricing record was found then flag as pricing error.
   CASE;

   // IF PGM.*Return code is *Record does not exist
   IF PGM.*Return_code = 'Y2U0005';

   // PAR.Error Return = CND.STRITM Error
   PAR.Error_Return = 'STR';

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

   //?Calc Pct Amount of Starting Item & Accumulate Amount & Write Rcd
   DO;

   //?Conversion Documentation
   DO;

   //?Retrieved Market Price will be converted to CWT for each BOM record
   ENDDO;

   //?Convert Price to CWT
   CASE;

   // IF WRK.Pricing Retrieved Amount is Not Zeros
   IF WRK.Pricing_Retrieved_Amount <> *ZERO;

   // Call program CLC Convert Price - CW XF.
   CALL PROGRAM(CLC Convert Price - CW XF) ('PDKUXFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Component_Item_Code);
   PARAMETER(WRK.Pricing_Retrieved_Amount);
   PARAMETER(PAR.Price_Adjustment_Amount);

   // WRK.Pricing Retrieved Amount = PAR.Price Adjustment Amount
   WRK.Pricing_Retrieved_Amount = PAR.Price_Adjustment_Amount;

   ENDIF;

   //?DO NOT Convert Sales Yield into Hundred weight
   CASE;

   // IF PAR.Price Type Status is Inventory
   IF PAR.Price_Type_Status = 'I';

   // WRK.Sales Yield = DB1.Production Yield
   WRK.Sales_Yield = DB1.Production_Yield;

   // PAR.Sales Yield = DB1.Production Yield
   PAR.Sales_Yield = DB1.Production_Yield;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Sales Yield = DB1.Sales Yield
   WRK.Sales_Yield = DB1.Sales_Yield;

   // PAR.Sales Yield = DB1.Sales Yield
   PAR.Sales_Yield = DB1.Sales_Yield;

   ENDIF;

   // WRK.Sales Yield = WRK.Sales Yield / CON.100 *
   WRK.Sales_Yield = WRK.Sales_Yield / 100;

   // PAR.Market Value = WRK.Pricing Retrieved Amount * WRK.Sales Yield *
   PAR.Market_Value = WRK.Pricing_Retrieved_Amount * WRK.Sales_Yield;

   //?Write Order Detail if Order exist
   CASE;

   // IF PAR.Event Called From is Not Price Only
   IF PAR.Event_Called_From = '02'/**/'AO'/'AI';

   // WRK.Pricing Sequence Number = WRK.Pricing Sequence Number + CON.1
   WRK.Pricing_Sequence_Number = WRK.Pricing_Sequence_Number + 1;

   //?Update Pricing formula detail record, depending on where called
   CASE;

   // IF PAR.Event Called From is Pre-Update Invoice
   IF PAR.Event_Called_From = **;

   EXECUTE FUNCTION(CRT Temporary Record   CR) TYPE(CRTOBJ) FILE(PDJKCPP)          AC1310921;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER('STRITM');
   PARAMETER(DB1.Component_Item_Code);
   PARAMETER(WRK.Pricing_Sequence_Number);
   PARAMETER(PAR.Sales_Yield);
   PARAMETER(PAR.Market_Value);
   PARAMETER(WRK.ZERO);
   PARAMETER('A');
   PARAMETER(WRK.BLANK);
   PARAMETER(WRK.BLANK);
   PARAMETER(WRK.BLANK);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?Update Pricing formula detail record, depending on where called
   // IF PAR.Event Called From is Invoice Pricing
   IF PAR.Event_Called_From = '02';

   EXECUTE FUNCTION(CRT Ship Dtl Formula   CR) TYPE(CRTOBJ) FILE(PDJKCPP)          AC1296159;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER('STRITM');
   PARAMETER(DB1.Component_Item_Code);
   PARAMETER(WRK.Pricing_Sequence_Number);
   PARAMETER(PAR.Sales_Yield);
   PARAMETER(PAR.Market_Value);
   PARAMETER(WRK.ZERO);
   PARAMETER('A');
   PARAMETER(WRK.BLANK);
   PARAMETER(WRK.BLANK);
   PARAMETER(WRK.BLANK);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?Update Pricing formula detail record, depending on where called
   // IF PAR.Event Called From is AutoCalc O/E
   IF PAR.Event_Called_From = 'AO';

   EXECUTE FUNCTION(CRT Ship Dtl Formula   CR) TYPE(CRTOBJ) FILE(PDJKCPP)          AC1296159;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER('STRITM');
   PARAMETER(DB1.Component_Item_Code);
   PARAMETER(WRK.Pricing_Sequence_Number);
   PARAMETER(PAR.Sales_Yield);
   PARAMETER(PAR.Market_Value);
   PARAMETER(WRK.ZERO);
   PARAMETER('A');
   PARAMETER(WRK.BLANK);
   PARAMETER(WRK.BLANK);
   PARAMETER(WRK.BLANK);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?Update Pricing formula detail record, depending on where called
   // IF PAR.Event Called From is AutoCalc Inv
   IF PAR.Event_Called_From = 'AI';

   EXECUTE FUNCTION(CRT Ship Dtl Formula   CR) TYPE(CRTOBJ) FILE(PDJKCPP)          AC1296159;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER('STRITM');
   PARAMETER(DB1.Component_Item_Code);
   PARAMETER(WRK.Pricing_Sequence_Number);
   PARAMETER(PAR.Sales_Yield);
   PARAMETER(PAR.Market_Value);
   PARAMETER(WRK.ZERO);
   PARAMETER('A');
   PARAMETER(WRK.BLANK);
   PARAMETER(WRK.BLANK);
   PARAMETER(WRK.BLANK);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   ENDIF;

   ENDDO;

   // PAR.Pricing Retrieved Amount = PAR.Pricing Retrieved Amount + PAR.Market Value
   PAR.Pricing_Retrieved_Amount = PAR.Pricing_Retrieved_Amount + PAR.Market_Value;

  }

 }

 //?Error Routine - Exit if Error
 CASE;

 // IF PAR.Error Return is All Entered Values
 IF PAR.Error_Return = 'CFR'/'CID'/'CIF'/'CIO'/'QPE'/'EXT'/'XPE'/'FPE'/'IOM'/'IOV'/'MPE'
 /'KPE'/'MKT'/'MSC'/'OVR'/'STR'/'SUB'/'TRC'/'WPA'/'RWB'/'ITERR'/'CRD'/'MSL'/'GAT';

 // OR PGM.*Return code is *Record does not exist
 OR PGM.*Return_code = 'Y2U0005';

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 CASE;

 // IF PAR.Error Return is Week Prior Avg Error
 IF PAR.Error_Return = 'WPA';

 // PAR.Error Return = CND.Week Prior for Start Item
 PAR.Error_Return = 'WPS';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Error Return = CND.STRITM Error
 PAR.Error_Return = 'STR';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Error Return = CND.Consumed Items not found
 PAR.Error_Return = 'CNF';

 ENDIF;

 QUIT;

 ENDIF;

 //?Update Pricing Retrieved Amount is not equal to 0
 CASE;

 // IF PAR.Pricing Retrieved Amount NE WRK.ZERO
 IF PAR.Pricing_Retrieved_Amount <> WRK.ZERO;

 //?Internal Routine to update either Order detail Pricing file
 //?in Library Qtemp if Order has not been updated yet, or
 //?Order Detail pricing, if pricing is called
 //?from Post(Update) Order, or Ship Pricing Detail if after Shipping
 EXECUTE FUNCTION(UPD Pricing Detail     IF) TYPE(EXCINTFUN)                     AC1296395;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(PAR.Price_Detail_Sequence);
 {
  //?Execute internal function

  //?Process if Order Nbr is not zero, if zero then not call from O/E
  CASE;

  // IF PAR.Event Called From is Not Price Only
  IF PAR.Event_Called_From = '02'/**/'AO'/'AI';

  CASE;

  // IF PAR.Event Called From is Pre-Update Invoice
  IF PAR.Event_Called_From = **;

  EXECUTE FUNCTION(CRT Ship Dtl Price QtmpCR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1310882;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is Invoice Pricing
  IF PAR.Event_Called_From = '02';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc O/E
  IF PAR.Event_Called_From = 'AO';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc Inv
  IF PAR.Event_Called_From = 'AI';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  ENDIF;

  ENDIF;

 }

 //?Accumulate Final Price
 // PAR.Unit Price = PAR.Unit Price + PAR.Pricing Retrieved Amount
 PAR.Unit_Price = PAR.Unit_Price + PAR.Pricing_Retrieved_Amount;

 ENDIF;

 ENDDO;

 ENDIF;

 //?*** 03 PROCESS COMPONANT CIDIFF IF SELECTED AND IS ACTIVE-*
 CASE;

 // IF DB1.Price Method Componant is CIDIFF
 IF DB1.Price_Method_Componant = 'CIDIFF';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 //?Customer/Item Differential
 DO;

 EXECUTE FUNCTION(xRTV Pricing: CIDIFF   IF) TYPE(EXCINTFUN)                     AC1283230;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Market_Overage);
 PARAMETER(PAR.Formula_Differential);
 PARAMETER(PAR.Formula_Processing_Fee);
 PARAMETER(PAR.USR_Return_Code);
 {
  //?Execute internal function

  //?Return Customer/Item Overages
  CASE;

  // IF PAR.USR Return Code is Not Returned
  IF PAR.USR_Return_Code = *BLANK;

  EXECUTE FUNCTION(RTV Overages           RT) TYPE(RTVOBJ) FILE(PDISREP)          AC1290537;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Market_Overage);
  PARAMETER(PAR.Formula_Differential);
  PARAMETER(PAR.Formula_Processing_Fee);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.USR Return Code = CND.Returned
  PAR.USR_Return_Code = 'R';

  ENDIF;

  //?Conversion Documentation
  DO;

  //?Convert Formula Differential into Hundred weight
  ENDDO;

  //?Convert PAR.Formula Differential to CWT
  CASE;

  // IF PAR.Formula Differential is Not Zeros
  IF PAR.Formula_Differential <> *ZERO;

  // PAR.Price Adjustment Amount = CON.*ZERO
  PAR.Price_Adjustment_Amount = *ZERO;

  // Call program CLC Convert Price - CW XF.
  CALL PROGRAM(CLC Convert Price - CW XF) ('PDKUXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Formula_Differential);
  PARAMETER(PAR.Price_Adjustment_Amount);

  ENDIF;

  //?Load PAR.Pricing Retrieved Amount
  CASE;

  // IF PAR.Price Adjustment Amount NE WRK.ZERO
  IF PAR.Price_Adjustment_Amount <> WRK.ZERO;

  // PAR.Pricing Retrieved Amount = PAR.Price Adjustment Amount
  PAR.Pricing_Retrieved_Amount = PAR.Price_Adjustment_Amount;

  //?Load PAR.Pricing Retrieved Amount
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Pricing Retrieved Amount = PAR.Formula Differential
  PAR.Pricing_Retrieved_Amount = PAR.Formula_Differential;

  ENDIF;

 }

 //?Update Pricing Retrieved Amount is not equal to 0.
 CASE;

 // IF PAR.Pricing Retrieved Amount NE WRK.ZERO
 IF PAR.Pricing_Retrieved_Amount <> WRK.ZERO;

 //?Internal Routine to update either Order detail Pricing file
 //?in Library Qtemp if Order has not been updated yet, or
 //?Order Detail pricing, if pricing is called
 //?from Post(Update) Order, or Ship Pricing Detail if after Shipping
 EXECUTE FUNCTION(UPD Pricing Detail     IF) TYPE(EXCINTFUN)                     AC1296395;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(PAR.Price_Detail_Sequence);
 {
  //?Execute internal function

  //?Process if Order Nbr is not zero, if zero then not call from O/E
  CASE;

  // IF PAR.Event Called From is Not Price Only
  IF PAR.Event_Called_From = '02'/**/'AO'/'AI';

  CASE;

  // IF PAR.Event Called From is Pre-Update Invoice
  IF PAR.Event_Called_From = **;

  EXECUTE FUNCTION(CRT Ship Dtl Price QtmpCR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1310882;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is Invoice Pricing
  IF PAR.Event_Called_From = '02';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc O/E
  IF PAR.Event_Called_From = 'AO';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc Inv
  IF PAR.Event_Called_From = 'AI';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  ENDIF;

  ENDIF;

 }

 //?Accumulate Final Price
 // PAR.Unit Price = PAR.Unit Price + PAR.Pricing Retrieved Amount
 PAR.Unit_Price = PAR.Unit_Price + PAR.Pricing_Retrieved_Amount;

 ENDIF;

 ENDDO;

 ENDIF;

 //?*** 04 PROCESS COMPONANT TCRDVY IF SELECTED AND IS ACTIVE-*
 CASE;

 // IF DB1.Price Method Componant is TCRDVY
 IF DB1.Price_Method_Componant = 'TCRDVY';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 EXECUTE FUNCTION(xRTV Pricing: TCRDVY   IF) TYPE(EXCINTFUN)                     AC1296482;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Price_Method_Code);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Sales_Yield);
 PARAMETER(PAR.Market_Value);
 PARAMETER(PAR.Credit_Value);
 PARAMETER(PAR.OD_Market_Begin_Date);
 PARAMETER(PAR.OD_Market_Ending_Date);
 PARAMETER(PAR.Error_Return);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Price_Type_Status);
 {
  //?Execute internal function

  EXECUTE FUNCTION(UPD Produced Items     RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1296479;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Price_Method_Code);
  PARAMETER(PAR.Actual_Shipped_Date);
  PARAMETER(*MISSING);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER(PAR.Event_Called_From);
  PARAMETER(PAR.Sales_Yield);
  PARAMETER(PAR.Market_Value);
  PARAMETER(PAR.Credit_Value);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(PAR.Error_Return);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Type_Status);
  {
   //?USER: Initialize routine

   // WRK.Pricing Sequence Number = CON.*ZERO
   WRK.Pricing_Sequence_Number = *ZERO;

   // PAR.Pricing Retrieved Amount = CON.*ZERO
   PAR.Pricing_Retrieved_Amount = *ZERO;

   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   // PAR.Price Status = CND.Unpriced
   PAR.Price_Status = 'U';

   // PAR.Error Return = CND.Produced Items not found
   PAR.Error_Return = 'PNF';

   //?USER: Process Data record

   //?Retrieve Credit(Produced) Item Details
   // Call program RTV Item Details       XF.
   CALL PROGRAM(RTV Item Details       XF) ('PDKAXFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Component_Item_Code);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Conversion_Factor_1);
   PARAMETER(PAR.Operation_Factor_1);
   PARAMETER(PAR.UOM_Second);
   PARAMETER(PAR.Conversion_Factor_2);
   PARAMETER(PAR.Operation_Factor_2);
   PARAMETER(PAR.UOM_Third);
   PARAMETER(PAR.UOM_Pricing);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(WRK.Market_Overage);
   PARAMETER(WRK.Standard_Overage_Underage);
   PARAMETER(PAR.Commodity_Price_Group);
   PARAMETER(PAR.Item_Pricing_Operation);
   PARAMETER(PAR.Item_Pricing_Constant);

   //?*** Price Routine
   CASE;

   // IF PAR.Event Called From is All Values
   IF PAR.Event_Called_From = '02'/'99'/**/'AO'/'AI';

   //?*** Calculate or Retrieve Market Date Method Processing
   CASE;

   // IF PAR.Date Method Code is Entered
   IF PAR.Date_Method_Code <> *BLANK;

   // Call program CLC Date Method        XF.
   CALL PROGRAM(CLC Date Method        XF) ('PDLJXFR');
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Date_Method_Code);
   PARAMETER(PAR.Actual_Shipped_Date);
   PARAMETER(PAR.Requested_Delivery_Date);
   PARAMETER(PAR.Pricing_Retrieved_Amount);
   PARAMETER(PAR.Event_Called_From);
   PARAMETER(PAR.Commodity_Price_Group);
   PARAMETER(PAR.OD_Market_Begin_Date);
   PARAMETER(PAR.OD_Market_Ending_Date);
   PARAMETER(PAR.Date_Used_for_Calculation);
   PARAMETER(PAR.Error_Return);
   PARAMETER(DB1.Item_Code);

   ENDIF;

   //?*** Retrieve Market Pricing if the Following criteria is met
   CASE;

   // IF PAR.Date Method Code is Not Entered
   IF PAR.Date_Method_Code = *BLANK;

   //?Load Date used for calculation (to retrieve Market date)
   CASE;

   // IF PAR.Market Pricing Date is NE Zero
   IF PAR.Market_Pricing_Date <> *ZERO;

   // PAR.Date Used for Calculation = PAR.Market Pricing Date
   PAR.Date_Used_for_Calculation = PAR.Market_Pricing_Date;

   //?Load Date used for calculation (to retrieve Market date)
   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Date Used for Calculation is not entered
   IF PAR.Date_Used_for_Calculation = *ZERO;

   CASE;

   // IF PAR.Actual Shipped Date is entered
   IF PAR.Actual_Shipped_Date <> *ZERO;

   // PAR.Date Used for Calculation = PAR.Actual Shipped Date
   PAR.Date_Used_for_Calculation = PAR.Actual_Shipped_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Date Used for Calculation = PAR.Requested Ship Date
   PAR.Date_Used_for_Calculation = PAR.Requested_Ship_Date;

   ENDIF;

   ENDIF;

   ENDIF;

   EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
   PARAMETER(PAR.Commodity_Market_Code);
   PARAMETER(PAR.Commodity_Price_Group);
   PARAMETER(PAR.Date_Used_for_Calculation);
   PARAMETER(PAR.Pricing_Retrieved_Amount);
   PARAMETER(PAR.Pricing_Date_Used);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    // PAR.Commodity Market Price = DB1.Commodity Market Price
    PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

    // PAR.USR Date Priced = DB1.Market Price Date
    PAR.USR_Date_Priced = DB1.Market_Price_Date;

    QUIT;

   }

   //?Flag as Unpriced if Price Date doesn't match Market date entered
   CASE;

   // IF PAR.Date Used for Calculation NE WRK.Pricing Date Used
   IF PAR.Date_Used_for_Calculation <> WRK.Pricing_Date_Used;

   // OR PGM.*Return code is *Record does not exist
   OR PGM.*Return_code = 'Y2U0005';

   // PAR.Price Status = CND.Unpriced
   PAR.Price_Status = 'U';

   //?If no pricing record was found then flag as pricing error.
   CASE;

   // IF PGM.*Return code is *Record does not exist
   IF PGM.*Return_code = 'Y2U0005';

   // PAR.Error Return = CND.TRCDVY Error
   PAR.Error_Return = 'TRC';

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

   //?Calc Pct Amount of Credit Items & Write record to Formula Detail
   DO;

   //?Convert Item Constant into CW if Add or Subtract
   CASE;

   // IF PAR.Item Pricing Operation is Add
   IF PAR.Item_Pricing_Operation = '+';

   // OR PAR.Item Pricing Operation is Subtract
   OR PAR.Item_Pricing_Operation = '-';

   // Call program CLC Convert Price - CW XF.
   CALL PROGRAM(CLC Convert Price - CW XF) ('PDKUXFR');
   PARAMETER(PAR.Company_Number);
   PARAMETER(DB1.Component_Item_Code);
   PARAMETER(PAR.Item_Pricing_Constant);
   PARAMETER(PAR.Price_Adjustment_Amount);

   //?Load PAR.Item Constant with converted CWT Price
   CASE;

   // IF PAR.Price Adjustment Amount NE WRK.ZERO
   IF PAR.Price_Adjustment_Amount <> WRK.ZERO;

   // PAR.Item Pricing Constant = PAR.Price Adjustment Amount
   PAR.Item_Pricing_Constant = PAR.Price_Adjustment_Amount;

   ENDIF;

   ENDIF;

   //?Convert Pricing Retrieved amount to CWT
   CASE;

   // IF PAR.Pricing Retrieved Amount is Not Zeros
   IF PAR.Pricing_Retrieved_Amount <> *ZERO;

   // Call program CLC Convert Price - CW XF.
   CALL PROGRAM(CLC Convert Price - CW XF) ('PDKUXFR');
   PARAMETER(PAR.Company_Number);
   PARAMETER(DB1.Component_Item_Code);
   PARAMETER(PAR.Pricing_Retrieved_Amount);
   PARAMETER(PAR.Price_Adjustment_Amount);

   //?Load PAR.Pricing Retrieved amount with CWT converted Price
   CASE;

   // IF PAR.Price Adjustment Amount NE WRK.ZERO
   IF PAR.Price_Adjustment_Amount <> WRK.ZERO;

   // PAR.Pricing Retrieved Amount = PAR.Price Adjustment Amount
   PAR.Pricing_Retrieved_Amount = PAR.Price_Adjustment_Amount;

   ENDIF;

   ENDIF;

   //?DO NOT Convert Sales Yield into Hundred weight
   CASE;

   // IF PAR.Price Type Status is Inventory
   IF PAR.Price_Type_Status = 'I';

   // WRK.Sales Yield = DB1.Production Yield
   WRK.Sales_Yield = DB1.Production_Yield;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Sales Yield = DB1.Sales Yield
   WRK.Sales_Yield = DB1.Sales_Yield;

   ENDIF;

   //?Process Calculation as setup in the Item File for WRK.Market Value
   //?Process Operation if = (-) Subtraction
   CASE;

   // IF PAR.Item Pricing Operation is Subtract
   IF PAR.Item_Pricing_Operation = '-';

   // WRK.Market Value = PAR.Pricing Retrieved Amount - PAR.Item Pricing Constant
   WRK.Market_Value = PAR.Pricing_Retrieved_Amount - PAR.Item_Pricing_Constant;

   ENDIF;

   //?Process Operation if = (+) Addition
   CASE;

   // IF PAR.Item Pricing Operation is Add
   IF PAR.Item_Pricing_Operation = '+';

   // WRK.Market Value = PAR.Pricing Retrieved Amount + PAR.Item Pricing Constant
   WRK.Market_Value = PAR.Pricing_Retrieved_Amount + PAR.Item_Pricing_Constant;

   ENDIF;

   //?Process Operation if = (*) Multiply
   CASE;

   // IF PAR.Item Pricing Operation is Multiply
   IF PAR.Item_Pricing_Operation = *;

   CASE;

   // IF PAR.Item Pricing Constant NE WRK.ZERO
   IF PAR.Item_Pricing_Constant <> WRK.ZERO;

   // WRK.Market Value = PAR.Pricing Retrieved Amount * PAR.Item Pricing Constant *
   WRK.Market_Value = PAR.Pricing_Retrieved_Amount * PAR.Item_Pricing_Constant;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Market Value = PAR.Pricing Retrieved Amount
   WRK.Market_Value = PAR.Pricing_Retrieved_Amount;

   ENDIF;

   ENDIF;

   //?Process Operation if = (/) Divide
   CASE;

   // IF PAR.Item Pricing Operation is Divide
   IF PAR.Item_Pricing_Operation = '/';

   CASE;

   // IF PAR.Item Pricing Constant NE WRK.ZERO
   IF PAR.Item_Pricing_Constant <> WRK.ZERO;

   // WRK.Market Value = PAR.Pricing Retrieved Amount * PAR.Item Pricing Constant *
   WRK.Market_Value = PAR.Pricing_Retrieved_Amount * PAR.Item_Pricing_Constant;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Market Value = PAR.Pricing Retrieved Amount
   WRK.Market_Value = PAR.Pricing_Retrieved_Amount;

   ENDIF;

   ENDIF;

   //?Process Operation if = (Blank)
   CASE;

   // IF PAR.Item Pricing Operation is Blank
   IF PAR.Item_Pricing_Operation = *BLANK;

   // WRK.Market Value = PAR.Pricing Retrieved Amount
   WRK.Market_Value = PAR.Pricing_Retrieved_Amount;

   ENDIF;

   //?First Step in calculating Credit Value
   // WRK.Pricing Retrieved Amount = WRK.Market Value / CON.100 *
   WRK.Pricing_Retrieved_Amount = WRK.Market_Value / 100;

   //?Calculate Credit Value
   // WRK.Credit Value = WRK.Sales Yield * WRK.Pricing Retrieved Amount *
   WRK.Credit_Value = WRK.Sales_Yield * WRK.Pricing_Retrieved_Amount;

   //?Write Order Detail Pricing if Order Exist
   CASE;

   // IF PAR.Event Called From is Not Price Only
   IF PAR.Event_Called_From = '02'/**/'AO'/'AI';

   //?Add 1 to Sequence Number
   // WRK.Pricing Sequence Number = WRK.Pricing Sequence Number + CON.1
   WRK.Pricing_Sequence_Number = WRK.Pricing_Sequence_Number + 1;

   //?Update Pricing formula detail record, depending on where called
   CASE;

   // IF PAR.Event Called From is Pre-Update Invoice
   IF PAR.Event_Called_From = **;

   EXECUTE FUNCTION(CRT Temporary Record   CR) TYPE(CRTOBJ) FILE(PDJKCPP)          AC1310921;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER('TCRDVY');
   PARAMETER(DB1.Component_Item_Code);
   PARAMETER(WRK.Pricing_Sequence_Number);
   PARAMETER(WRK.Sales_Yield);
   PARAMETER(WRK.Market_Value);
   PARAMETER(WRK.Credit_Value);
   PARAMETER('A');
   PARAMETER(WRK.BLANK);
   PARAMETER(WRK.BLANK);
   PARAMETER(WRK.BLANK);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?Update Pricing formula detail record, depending on where called
   // IF PAR.Event Called From is Invoice Pricing
   IF PAR.Event_Called_From = '02';

   EXECUTE FUNCTION(CRT Ship Dtl Formula   CR) TYPE(CRTOBJ) FILE(PDJKCPP)          AC1296159;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER('TCRDVY');
   PARAMETER(DB1.Component_Item_Code);
   PARAMETER(WRK.Pricing_Sequence_Number);
   PARAMETER(WRK.Sales_Yield);
   PARAMETER(WRK.Market_Value);
   PARAMETER(WRK.Credit_Value);
   PARAMETER('A');
   PARAMETER(WRK.BLANK);
   PARAMETER(WRK.BLANK);
   PARAMETER(WRK.BLANK);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?Update Pricing formula detail record, depending on where called
   // IF PAR.Event Called From is AutoCalc O/E
   IF PAR.Event_Called_From = 'AO';

   EXECUTE FUNCTION(CRT Ship Dtl Formula   CR) TYPE(CRTOBJ) FILE(PDJKCPP)          AC1296159;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER('TCRDVY');
   PARAMETER(DB1.Component_Item_Code);
   PARAMETER(WRK.Pricing_Sequence_Number);
   PARAMETER(WRK.Sales_Yield);
   PARAMETER(WRK.Market_Value);
   PARAMETER(WRK.Credit_Value);
   PARAMETER('A');
   PARAMETER(WRK.BLANK);
   PARAMETER(WRK.BLANK);
   PARAMETER(WRK.BLANK);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?Update Pricing formula detail record, depending on where called
   // IF PAR.Event Called From is AutoCalc Inv
   IF PAR.Event_Called_From = 'AI';

   EXECUTE FUNCTION(CRT Ship Dtl Formula   CR) TYPE(CRTOBJ) FILE(PDJKCPP)          AC1296159;
   PARAMETER(DB1.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER('TCRDVY');
   PARAMETER(DB1.Component_Item_Code);
   PARAMETER(WRK.Pricing_Sequence_Number);
   PARAMETER(WRK.Sales_Yield);
   PARAMETER(WRK.Market_Value);
   PARAMETER(WRK.Credit_Value);
   PARAMETER('A');
   PARAMETER(WRK.BLANK);
   PARAMETER(WRK.BLANK);
   PARAMETER(WRK.BLANK);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   ENDIF;

   // PAR.Sales Yield = PAR.Sales Yield + WRK.Sales Yield
   PAR.Sales_Yield = PAR.Sales_Yield + WRK.Sales_Yield;

   // PAR.Market Value = PAR.Market Value + WRK.Market Value
   PAR.Market_Value = PAR.Market_Value + WRK.Market_Value;

   // PAR.Credit Value = PAR.Credit Value + WRK.Credit Value
   PAR.Credit_Value = PAR.Credit_Value + WRK.Credit_Value;

   // PAR.Pricing Retrieved Amount = CON.*ZERO
   PAR.Pricing_Retrieved_Amount = *ZERO;

   ENDDO;

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

 }

 //?Error Routine - Exit if Error
 CASE;

 // IF PAR.Error Return is All Entered Values
 IF PAR.Error_Return = 'CFR'/'CID'/'CIF'/'CIO'/'QPE'/'EXT'/'XPE'/'FPE'/'IOM'/'IOV'/'MPE'
 /'KPE'/'MKT'/'MSC'/'OVR'/'STR'/'SUB'/'TRC'/'WPA'/'RWB'/'ITERR'/'CRD'/'MSL'/'GAT';

 // OR PGM.*Return code is *Record does not exist
 OR PGM.*Return_code = 'Y2U0005';

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 CASE;

 // IF PAR.Error Return is Week Prior Avg Error
 IF PAR.Error_Return = 'WPA';

 // PAR.Error Return = CND.Week Prior for Credt Item
 PAR.Error_Return = 'WPC';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Error Return = CND.Produced Items not found
 PAR.Error_Return = 'PNF';

 ENDIF;

 ENDIF;

 //?Update if Pricing Retrieved Amount is EQUAL to Zero(should always be)
 CASE;

 // IF PAR.Pricing Retrieved Amount EQ WRK.ZERO
 IF PAR.Pricing_Retrieved_Amount = WRK.ZERO;

 //?Update for a zero Quantity Record for Componant TCRDVY)
 EXECUTE FUNCTION(UPD Pricing Detail     IF) TYPE(EXCINTFUN)                     AC1296395;
 PARAMETER(DB1.Company_Number);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(PAR.Price_Detail_Sequence);
 {
  //?Execute internal function

  //?Process if Order Nbr is not zero, if zero then not call from O/E
  CASE;

  // IF PAR.Event Called From is Not Price Only
  IF PAR.Event_Called_From = '02'/**/'AO'/'AI';

  CASE;

  // IF PAR.Event Called From is Pre-Update Invoice
  IF PAR.Event_Called_From = **;

  EXECUTE FUNCTION(CRT Ship Dtl Price QtmpCR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1310882;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is Invoice Pricing
  IF PAR.Event_Called_From = '02';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc O/E
  IF PAR.Event_Called_From = 'AO';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc Inv
  IF PAR.Event_Called_From = 'AI';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  ENDIF;

  ENDIF;

 }

 //?Update for Credit Yield Total (use Componant TLCRDY)
 EXECUTE FUNCTION(UPD Pricing Detail     IF) TYPE(EXCINTFUN)                     AC1296395;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Sales_Yield);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER('TLCRDY');
 PARAMETER(PAR.Price_Detail_Sequence);
 {
  //?Execute internal function

  //?Process if Order Nbr is not zero, if zero then not call from O/E
  CASE;

  // IF PAR.Event Called From is Not Price Only
  IF PAR.Event_Called_From = '02'/**/'AO'/'AI';

  CASE;

  // IF PAR.Event Called From is Pre-Update Invoice
  IF PAR.Event_Called_From = **;

  EXECUTE FUNCTION(CRT Ship Dtl Price QtmpCR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1310882;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is Invoice Pricing
  IF PAR.Event_Called_From = '02';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc O/E
  IF PAR.Event_Called_From = 'AO';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc Inv
  IF PAR.Event_Called_From = 'AI';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  ENDIF;

  ENDIF;

 }

 //?Update for Credit Value Total (Use Componant TLCRDV)
 EXECUTE FUNCTION(UPD Pricing Detail     IF) TYPE(EXCINTFUN)                     AC1296395;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Credit_Value);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER('TLCRDV');
 PARAMETER(PAR.Price_Detail_Sequence);
 {
  //?Execute internal function

  //?Process if Order Nbr is not zero, if zero then not call from O/E
  CASE;

  // IF PAR.Event Called From is Not Price Only
  IF PAR.Event_Called_From = '02'/**/'AO'/'AI';

  CASE;

  // IF PAR.Event Called From is Pre-Update Invoice
  IF PAR.Event_Called_From = **;

  EXECUTE FUNCTION(CRT Ship Dtl Price QtmpCR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1310882;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is Invoice Pricing
  IF PAR.Event_Called_From = '02';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc O/E
  IF PAR.Event_Called_From = 'AO';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc Inv
  IF PAR.Event_Called_From = 'AI';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  ENDIF;

  ENDIF;

 }

 //?Accumulate Final Price
 //?**(Price is not accumulated in this routine)
 ENDIF;

 ENDIF;

 //?*** 05 PROCESS COMPONANT SUBCRD IF SELECTED AND IS ACTIVE-*
 CASE;

 // IF DB1.Price Method Componant is SUBCRD
 IF DB1.Price_Method_Componant = 'SUBCRD';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 EXECUTE FUNCTION(xRTV Pricing: SUBCRD   IF) TYPE(EXCINTFUN)                     AC1296559;
 PARAMETER(PAR.Credit_Value);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.USR_Return_Code);
 {
  //?Execute internal function

  //?Note: No CWT Conversion is needed
  // PAR.USR Return Code = CON.*BLANK
  PAR.USR_Return_Code = *BLANK;

  // PAR.Pricing Retrieved Amount = CON.*ZERO
  PAR.Pricing_Retrieved_Amount = *ZERO;

  // PAR.Pricing Retrieved Amount = PAR.Pricing Retrieved Amount - PAR.Credit Value
  PAR.Pricing_Retrieved_Amount = PAR.Pricing_Retrieved_Amount - PAR.Credit_Value;

 }

 //?Error Routine - Exit if Error
 CASE;

 // IF PAR.Error Return is All Entered Values
 IF PAR.Error_Return = 'CFR'/'CID'/'CIF'/'CIO'/'QPE'/'EXT'/'XPE'/'FPE'/'IOM'/'IOV'/'MPE'
 /'KPE'/'MKT'/'MSC'/'OVR'/'STR'/'SUB'/'TRC'/'WPA'/'RWB'/'ITERR'/'CRD'/'MSL'/'GAT';

 // PAR.Error Return = CND.SUBCRD Error
 PAR.Error_Return = 'SUB';

 QUIT;

 ENDIF;

 //?Update if Pricing Retrieved Amount is Not Equal to 0.
 CASE;

 // IF PAR.Pricing Retrieved Amount NE WRK.ZERO
 IF PAR.Pricing_Retrieved_Amount <> WRK.ZERO;

 //?Internal Routine to update either Order detail Pricing file
 //?in Library Qtemp if Order has not been updated yet, or
 //?Order Detail pricing, if pricing is called
 //?from Post(Update) Order, or Ship Pricing Detail if after Shipping
 EXECUTE FUNCTION(UPD Pricing Detail     IF) TYPE(EXCINTFUN)                     AC1296395;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(PAR.Price_Detail_Sequence);
 {
  //?Execute internal function

  //?Process if Order Nbr is not zero, if zero then not call from O/E
  CASE;

  // IF PAR.Event Called From is Not Price Only
  IF PAR.Event_Called_From = '02'/**/'AO'/'AI';

  CASE;

  // IF PAR.Event Called From is Pre-Update Invoice
  IF PAR.Event_Called_From = **;

  EXECUTE FUNCTION(CRT Ship Dtl Price QtmpCR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1310882;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is Invoice Pricing
  IF PAR.Event_Called_From = '02';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc O/E
  IF PAR.Event_Called_From = 'AO';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc Inv
  IF PAR.Event_Called_From = 'AI';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  ENDIF;

  ENDIF;

 }

 //?Accumulate Final Price
 // PAR.Unit Price = PAR.Unit Price + PAR.Pricing Retrieved Amount
 PAR.Unit_Price = PAR.Unit_Price + PAR.Pricing_Retrieved_Amount;

 ENDIF;

 ENDIF;

 //?*** 06 PROCESS COMPONANT MSCYLD IF SELECTED AND IS ACTIVE-*
 CASE;

 // IF DB1.Price Method Componant is MSCYLD
 IF DB1.Price_Method_Componant = 'MSCYLD';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 //?Calculate Muscle Yield
 DO;

 EXECUTE FUNCTION(xRTV Pricing: MSCYLD   IF) TYPE(EXCINTFUN)                     AC1296558;
 PARAMETER(PAR.Sales_Yield);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.USR_Return_Code);
 {
  //?Execute internal function

  //?Note: no CWT Conversion is needed.
  // PAR.USR Return Code = CON.*BLANK
  PAR.USR_Return_Code = *BLANK;

  // WRK.Muscle Yield Price = CON.100 - PAR.Sales Yield
  WRK.Muscle_Yield_Price = 100 - PAR.Sales_Yield;

  // PAR.Pricing Retrieved Amount = WRK.Muscle Yield Price
  PAR.Pricing_Retrieved_Amount = WRK.Muscle_Yield_Price;

 }

 //?Error Routine - Exit if Error
 CASE;

 // IF PAR.Error Return is All Entered Values
 IF PAR.Error_Return = 'CFR'/'CID'/'CIF'/'CIO'/'QPE'/'EXT'/'XPE'/'FPE'/'IOM'/'IOV'/'MPE'
 /'KPE'/'MKT'/'MSC'/'OVR'/'STR'/'SUB'/'TRC'/'WPA'/'RWB'/'ITERR'/'CRD'/'MSL'/'GAT';

 // PAR.Error Return = CND.MSCYLD Error
 PAR.Error_Return = 'MSC';

 QUIT;

 ENDIF;

 //?Update if Pricing Retrieved Amount is Not Equal to 0.
 CASE;

 // IF PAR.Pricing Retrieved Amount NE WRK.ZERO
 IF PAR.Pricing_Retrieved_Amount <> WRK.ZERO;

 //?Update for Muscle Yield Total (use Componant MSCYLD)
 EXECUTE FUNCTION(UPD Pricing Detail     IF) TYPE(EXCINTFUN)                     AC1296395;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER('MSCYLD');
 PARAMETER(PAR.Price_Detail_Sequence);
 {
  //?Execute internal function

  //?Process if Order Nbr is not zero, if zero then not call from O/E
  CASE;

  // IF PAR.Event Called From is Not Price Only
  IF PAR.Event_Called_From = '02'/**/'AO'/'AI';

  CASE;

  // IF PAR.Event Called From is Pre-Update Invoice
  IF PAR.Event_Called_From = **;

  EXECUTE FUNCTION(CRT Ship Dtl Price QtmpCR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1310882;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is Invoice Pricing
  IF PAR.Event_Called_From = '02';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc O/E
  IF PAR.Event_Called_From = 'AO';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc Inv
  IF PAR.Event_Called_From = 'AI';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  ENDIF;

  ENDIF;

 }

 //?Accumulate Final Price
 // WRK.Muscle Yield Price = PAR.Pricing Retrieved Amount / CON.100 *
 WRK.Muscle_Yield_Price = PAR.Pricing_Retrieved_Amount / 100;

 //?Divide running Unit Price total by Muscle Yield (if not equal 0)
 CASE;

 // IF WRK.Muscle Yield Price NE WRK.ZERO
 IF WRK.Muscle_Yield_Price <> WRK.ZERO;

 // PAR.Unit Price = PAR.Unit Price / WRK.Muscle Yield Price *
 PAR.Unit_Price = PAR.Unit_Price / WRK.Muscle_Yield_Price;

 ENDIF;

 ENDIF;

 ENDDO;

 ENDIF;

 //?*** 07 PROCESS COMPONANT CIFMPF IF SELECTED AND IS ACTIVE-*
 CASE;

 // IF DB1.Price Method Componant is CIFMPF
 IF DB1.Price_Method_Componant = 'CIFMPF';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 //?Customer/Item Processing Fee
 DO;

 EXECUTE FUNCTION(xRTV Pricing: CIFMPF   IF) TYPE(EXCINTFUN)                     AC1283235;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Market_Overage);
 PARAMETER(PAR.Formula_Differential);
 PARAMETER(PAR.Formula_Processing_Fee);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.USR_Return_Code);
 PARAMETER(PAR.Error_Return);
 {
  //?Execute internal function

  // PAR.Error Return = WRK.BLANK
  PAR.Error_Return = WRK.BLANK;

  //?Retrieve Customer/Item Overages
  CASE;

  // IF PAR.USR Return Code is Not Returned
  IF PAR.USR_Return_Code = *BLANK;

  EXECUTE FUNCTION(RTV Overages           RT) TYPE(RTVOBJ) FILE(PDISREP)          AC1290537;
  PARAMETER(WRK.Company_Number);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Market_Overage);
  PARAMETER(PAR.Formula_Differential);
  PARAMETER(PAR.Formula_Processing_Fee);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.USR Return Code = CND.Returned
  PAR.USR_Return_Code = 'R';

  ENDIF;

  //?Convert Formula Processing fee to CWT if NE 0
  CASE;

  // IF PAR.Formula Processing Fee is Not Zeros
  IF PAR.Formula_Processing_Fee <> *ZERO;

  // Call program CLC Convert Price - CW XF.
  CALL PROGRAM(CLC Convert Price - CW XF) ('PDKUXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Formula_Processing_Fee);
  PARAMETER(PAR.Price_Adjustment_Amount);

  ENDIF;

  //?Load PAR.Price Retrieved Amount after CWT Convert
  CASE;

  // IF PAR.Price Adjustment Amount NE WRK.ZERO
  IF PAR.Price_Adjustment_Amount <> WRK.ZERO;

  // PAR.Pricing Retrieved Amount = PAR.Price Adjustment Amount
  PAR.Pricing_Retrieved_Amount = PAR.Price_Adjustment_Amount;

  //?Load PAR.Price Retrieved Amount after CWT Convert
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Pricing Retrieved Amount = PAR.Formula Processing Fee
  PAR.Pricing_Retrieved_Amount = PAR.Formula_Processing_Fee;

  ENDIF;

 }

 //?Error Routine - Exit if Error
 CASE;

 // IF PAR.Error Return is All Entered Values
 IF PAR.Error_Return = 'CFR'/'CID'/'CIF'/'CIO'/'QPE'/'EXT'/'XPE'/'FPE'/'IOM'/'IOV'/'MPE'
 /'KPE'/'MKT'/'MSC'/'OVR'/'STR'/'SUB'/'TRC'/'WPA'/'RWB'/'ITERR'/'CRD'/'MSL'/'GAT';

 // PAR.Error Return = CND.CIFMPF Error
 PAR.Error_Return = 'CIF';

 QUIT;

 ENDIF;

 //?Update Pricing Detail if Processing Fee is not equal to 0.
 CASE;

 // IF PAR.Pricing Retrieved Amount NE WRK.ZERO
 IF PAR.Pricing_Retrieved_Amount <> WRK.ZERO;

 //?Internal Routine to update either Order detail Pricing file
 //?in Library Qtemp if Order has not been updated yet, or
 //?Order Detail pricing, if pricing is called
 //?from Post(Update) Order, or Ship Pricing Detail if after Shipping
 EXECUTE FUNCTION(UPD Pricing Detail     IF) TYPE(EXCINTFUN)                     AC1296395;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(PAR.Price_Detail_Sequence);
 {
  //?Execute internal function

  //?Process if Order Nbr is not zero, if zero then not call from O/E
  CASE;

  // IF PAR.Event Called From is Not Price Only
  IF PAR.Event_Called_From = '02'/**/'AO'/'AI';

  CASE;

  // IF PAR.Event Called From is Pre-Update Invoice
  IF PAR.Event_Called_From = **;

  EXECUTE FUNCTION(CRT Ship Dtl Price QtmpCR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1310882;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is Invoice Pricing
  IF PAR.Event_Called_From = '02';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc O/E
  IF PAR.Event_Called_From = 'AO';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc Inv
  IF PAR.Event_Called_From = 'AI';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  ENDIF;

  ENDIF;

 }

 //?Accumulate Final Price
 // PAR.Unit Price = PAR.Unit Price + PAR.Pricing Retrieved Amount
 PAR.Unit_Price = PAR.Unit_Price + PAR.Pricing_Retrieved_Amount;

 ENDIF;

 ENDDO;

 ENDIF;

 //?*** 08 PROCESS COMPONANT IOVRFM IF SELECTED AND IS ACTIVE-*
 CASE;

 // IF DB1.Price Method Componant is IOVRFM
 IF DB1.Price_Method_Componant = 'IOVRFM';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 //?Item Overage Formula
 DO;

 EXECUTE FUNCTION(xRTV Pricing: IOVRFM   IF) TYPE(EXCINTFUN)                     AC1283242;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Error_Return);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Formula Overage    RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1366277;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(WRK.Market_Overage);
  PARAMETER(PAR.Standard_Overage_Underage);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.Error Return = WRK.BLANK
  PAR.Error_Return = WRK.BLANK;

  // PAR.Pricing Retrieved Amount = PAR.Formula Overage
  PAR.Pricing_Retrieved_Amount = PAR.Standard_Overage_Underage;

  //?Convert Formula Overage to CWT if Not Zero
  CASE;

  // IF PAR.Formula Overage is Not Zeros
  IF PAR.Standard_Overage_Underage <> *ZERO;

  // Call program CLC Convert Price - CW XF.
  CALL PROGRAM(CLC Convert Price - CW XF) ('PDKUXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Standard_Overage_Underage);
  PARAMETER(PAR.Price_Adjustment_Amount);

  ENDIF;

  //?Load PAR.Pricing Retrieved Amount after converting to CWT
  CASE;

  // IF PAR.Price Adjustment Amount NE WRK.ZERO
  IF PAR.Price_Adjustment_Amount <> WRK.ZERO;

  // PAR.Pricing Retrieved Amount = PAR.Price Adjustment Amount
  PAR.Pricing_Retrieved_Amount = PAR.Price_Adjustment_Amount;

  //?Load PAR.Pricing Retrieved Amount after converting to CWT
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Pricing Retrieved Amount = PAR.Formula Overage
  PAR.Pricing_Retrieved_Amount = PAR.Standard_Overage_Underage;

  ENDIF;

 }

 //?Error Routine - Exit if Error
 CASE;

 // IF PAR.Error Return is All Entered Values
 IF PAR.Error_Return = 'CFR'/'CID'/'CIF'/'CIO'/'QPE'/'EXT'/'XPE'/'FPE'/'IOM'/'IOV'/'MPE'
 /'KPE'/'MKT'/'MSC'/'OVR'/'STR'/'SUB'/'TRC'/'WPA'/'RWB'/'ITERR'/'CRD'/'MSL'/'GAT';

 // PAR.Error Return = CND.CFRTOV Error
 PAR.Error_Return = 'CFR';

 QUIT;

 ENDIF;

 //?Update Pricing Detail if retrieved amount NE Zero
 CASE;

 // IF PAR.Pricing Retrieved Amount is Not Zeros
 IF PAR.Pricing_Retrieved_Amount <> *ZERO;

 //?Internal Routine to update either Order detail Pricing file
 //?in Library Qtemp if Order has not been updated yet, or
 //?Order Detail pricing, if pricing is called
 //?from Post(Update) Order, or Ship Pricing Detail if after Shipping
 EXECUTE FUNCTION(UPD Pricing Detail     IF) TYPE(EXCINTFUN)                     AC1296395;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(PAR.Price_Detail_Sequence);
 {
  //?Execute internal function

  //?Process if Order Nbr is not zero, if zero then not call from O/E
  CASE;

  // IF PAR.Event Called From is Not Price Only
  IF PAR.Event_Called_From = '02'/**/'AO'/'AI';

  CASE;

  // IF PAR.Event Called From is Pre-Update Invoice
  IF PAR.Event_Called_From = **;

  EXECUTE FUNCTION(CRT Ship Dtl Price QtmpCR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1310882;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is Invoice Pricing
  IF PAR.Event_Called_From = '02';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc O/E
  IF PAR.Event_Called_From = 'AO';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc Inv
  IF PAR.Event_Called_From = 'AI';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  ENDIF;

  ENDIF;

 }

 //?Accumulate Final Price
 // PAR.Unit Price = PAR.Unit Price + PAR.Pricing Retrieved Amount
 PAR.Unit_Price = PAR.Unit_Price + PAR.Pricing_Retrieved_Amount;

 ENDIF;

 ENDDO;

 ENDIF;

 //?*** 09 PROCESS COMPONANT CFRTOV IF SELECTED AND IS ACTIVE-*
 CASE;

 // IF DB1.Price Method Componant is CFRTOV
 IF DB1.Price_Method_Componant = 'CFRTOV';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 //?Company/Customer freight Rate Overage
 DO;

 //?This Overage is keyed in by Hundred Weight, if Pricing U/M is not
 //?Hundred Weight, the it must be converted to the Items Pricing U/M.
 EXECUTE FUNCTION(RTV Pricing: CFRTOV   IF) TYPE(EXCINTFUN)                      AC1283227;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Error_Return);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.UOM_Second);
 PARAMETER(PAR.UOM_Third);
 PARAMETER(PAR.UOM_Pricing);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Mkt/Form Overage   RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1290559;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Co_Cust_Overage_Rate_CWT);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Company Customer Overage is entered as Hundred weight, therefore
  //?Converting to Hundred weight is not necessary.
  // PAR.Pricing Retrieved Amount = PAR.Freight Overage Rate
  PAR.Pricing_Retrieved_Amount = PAR.Co_Cust_Overage_Rate_CWT;

 }

 //?Error Routine - Exit if Error
 CASE;

 // IF PAR.Error Return is All Entered Values
 IF PAR.Error_Return = 'CFR'/'CID'/'CIF'/'CIO'/'QPE'/'EXT'/'XPE'/'FPE'/'IOM'/'IOV'/'MPE'
 /'KPE'/'MKT'/'MSC'/'OVR'/'STR'/'SUB'/'TRC'/'WPA'/'RWB'/'ITERR'/'CRD'/'MSL'/'GAT';

 QUIT;

 ENDIF;

 //?Update Pricing Detail if Freight Overage is not equal to 0.
 CASE;

 // IF PAR.Pricing Retrieved Amount NE WRK.ZERO
 IF PAR.Pricing_Retrieved_Amount <> WRK.ZERO;

 //?Internal Routine to update either Order detail Pricing file
 //?in Library Qtemp if Order has not been updated yet, or
 //?Order Detail pricing, if pricing is called
 //?from Post(Update) Order, or Ship Pricing Detail if after Shipping
 EXECUTE FUNCTION(UPD Pricing Detail     IF) TYPE(EXCINTFUN)                     AC1296395;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(PAR.Price_Detail_Sequence);
 {
  //?Execute internal function

  //?Process if Order Nbr is not zero, if zero then not call from O/E
  CASE;

  // IF PAR.Event Called From is Not Price Only
  IF PAR.Event_Called_From = '02'/**/'AO'/'AI';

  CASE;

  // IF PAR.Event Called From is Pre-Update Invoice
  IF PAR.Event_Called_From = **;

  EXECUTE FUNCTION(CRT Ship Dtl Price QtmpCR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1310882;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is Invoice Pricing
  IF PAR.Event_Called_From = '02';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc O/E
  IF PAR.Event_Called_From = 'AO';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc Inv
  IF PAR.Event_Called_From = 'AI';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  ENDIF;

  ENDIF;

 }

 //?Accumulate Final Price
 // PAR.Unit Price = PAR.Unit Price + PAR.Pricing Retrieved Amount
 PAR.Unit_Price = PAR.Unit_Price + PAR.Pricing_Retrieved_Amount;

 ENDIF;

 ENDDO;

 ENDIF;

 //?*** 10 PROCESS COMPONANT CIOVMK IF SELECTED AND IS ACTIVE-*
 CASE;

 // IF DB1.Price Method Componant is CIOVMK
 IF DB1.Price_Method_Componant = 'CIOVMK';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 //?Item Market Overage
 DO;

 EXECUTE FUNCTION(RTV Pricing: CIOVMK   IF) TYPE(EXCINTFUN)                      AC1283239;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Market_Overage);
 PARAMETER(PAR.Formula_Differential);
 PARAMETER(PAR.Formula_Processing_Fee);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.USR_Return_Code);
 PARAMETER(PAR.Error_Return);
 {
  //?Execute internal function

  // PAR.Error Return = WRK.BLANK
  PAR.Error_Return = WRK.BLANK;

  //?Retrieve Customer/Item Overage
  CASE;

  // IF PAR.USR Return Code is Not Returned
  IF PAR.USR_Return_Code = *BLANK;

  EXECUTE FUNCTION(RTV Overages           RT) TYPE(RTVOBJ) FILE(PDISREP)          AC1290537;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Market_Overage);
  PARAMETER(PAR.Formula_Differential);
  PARAMETER(PAR.Formula_Processing_Fee);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.Market Overage is Not Zeros
  IF PAR.Market_Overage <> *ZERO;

  EXECUTE FUNCTION(RTV Dsc,U/M,PrcInf,Str RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1418320;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(NLL.Description_Line_One);
  PARAMETER(NLL.Description_Line_Two);
  PARAMETER(NLL.UOM_Primary);
  PARAMETER(NLL.Conversion_Factor_1);
  PARAMETER(NLL.Operation_Factor_1);
  PARAMETER(NLL.UOM_Second);
  PARAMETER(NLL.Conversion_Factor_2);
  PARAMETER(NLL.Operation_Factor_2);
  PARAMETER(NLL.UOM_Third);
  PARAMETER(LCL.UOM_Pricing);
  PARAMETER(LCL.Unit_Weight);
  PARAMETER(NLL.Production_Date_Control);
  PARAMETER(NLL.Catch_Weight_Status);
  PARAMETER(NLL.Item_Structure_Class_Code);
  PARAMETER(NLL.Item_Structure_Group_Code);
  PARAMETER(NLL.Item_Structure_Type_Code);
  PARAMETER(NLL.Default_Commod_Mark_basis);
  PARAMETER(NLL.Price_Method_Default);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Convert to CWT if Pricing UM is not in any form of pounds (Ex: LB, CW, TN)
  CASE;

  // IF LCL.U/M - Pricing is Cases
  IF LCL.UOM_Pricing = 'CS';

  // PAR.Market Overage =       *
  PAR.Market_Overage = ( PAR.Market_Overage / LCL.Unit_Weight 'H' ) * 100 'H';

  ENDIF;

  ENDIF;

  // PAR.USR Return Code = CND.Returned
  PAR.USR_Return_Code = 'R';

  ENDIF;

  //?Convert Overage to CWT is not zero
  CASE;

  // IF PAR.Pricing Retrieved Amount is Not Zeros
  IF PAR.Pricing_Retrieved_Amount <> *ZERO;

  // Call program CLC Convert Price - CW XF.
  CALL PROGRAM(CLC Convert Price - CW XF) ('PDKUXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Market_Overage);
  PARAMETER(PAR.Price_Adjustment_Amount);

  ENDIF;

  //?Load PAR.Pricing Retrieved Amount from Market Overage after CWT Convert
  CASE;

  // IF PAR.Price Adjustment Amount NE WRK.ZERO
  IF PAR.Price_Adjustment_Amount <> WRK.ZERO;

  // PAR.Pricing Retrieved Amount = PAR.Price Adjustment Amount
  PAR.Pricing_Retrieved_Amount = PAR.Price_Adjustment_Amount;

  //?Load PAR.Pricing Retrieved Amount from Market Overage after CWT Convert
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Pricing Retrieved Amount = PAR.Market Overage
  PAR.Pricing_Retrieved_Amount = PAR.Market_Overage;

  ENDIF;

 }

 //?Error Routine - Exit if Error
 CASE;

 // IF PAR.Error Return is All Entered Values
 IF PAR.Error_Return = 'CFR'/'CID'/'CIF'/'CIO'/'QPE'/'EXT'/'XPE'/'FPE'/'IOM'/'IOV'/'MPE'
 /'KPE'/'MKT'/'MSC'/'OVR'/'STR'/'SUB'/'TRC'/'WPA'/'RWB'/'ITERR'/'CRD'/'MSL'/'GAT';

 // PAR.Error Return = CND.CIOVMK Error
 PAR.Error_Return = 'CIO';

 QUIT;

 ENDIF;

 //?Update Pricing Detail if Market  Overage is not equal to 0.
 CASE;

 // IF PAR.Pricing Retrieved Amount NE WRK.ZERO
 IF PAR.Pricing_Retrieved_Amount <> WRK.ZERO;

 //?Internal Routine to update either Order detail Pricing file
 //?in Library Qtemp if Order has not been updated yet, or
 //?Order Detail pricing, if pricing is called
 //?from Post(Update) Order, or Ship Pricing Detail if after Shipping
 EXECUTE FUNCTION(UPD Pricing Detail     IF) TYPE(EXCINTFUN)                     AC1296395;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(PAR.Price_Detail_Sequence);
 {
  //?Execute internal function

  //?Process if Order Nbr is not zero, if zero then not call from O/E
  CASE;

  // IF PAR.Event Called From is Not Price Only
  IF PAR.Event_Called_From = '02'/**/'AO'/'AI';

  CASE;

  // IF PAR.Event Called From is Pre-Update Invoice
  IF PAR.Event_Called_From = **;

  EXECUTE FUNCTION(CRT Ship Dtl Price QtmpCR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1310882;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is Invoice Pricing
  IF PAR.Event_Called_From = '02';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc O/E
  IF PAR.Event_Called_From = 'AO';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc Inv
  IF PAR.Event_Called_From = 'AI';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  ENDIF;

  ENDIF;

 }

 //?Accumulate Final Price
 // PAR.Unit Price = PAR.Unit Price + PAR.Pricing Retrieved Amount
 PAR.Unit_Price = PAR.Unit_Price + PAR.Pricing_Retrieved_Amount;

 ENDIF;

 ENDDO;

 ENDIF;

 //?*** 11 PROCESS COMPONANT IOVMKT IF SELECTED AND IS ACTIVE-*
 CASE;

 // IF DB1.Price Method Componant is IOVMKT
 IF DB1.Price_Method_Componant = 'IOVMKT';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 //?Item Market Overage
 DO;

 EXECUTE FUNCTION(RTV Pricing: IOVMKT   IF) TYPE(EXCINTFUN)                      AC1283241;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Error_Return);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Formula Overage    RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1366277;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Market_Overage);
  PARAMETER(WRK.Standard_Overage_Underage);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.Error Return = WRK.BLANK
  PAR.Error_Return = WRK.BLANK;

  //?Convert Market Overage to CWT if not Zero
  CASE;

  // IF PAR.Market Overage is Not Zeros
  IF PAR.Market_Overage <> *ZERO;

  // Call program CLC Convert Price - CW XF.
  CALL PROGRAM(CLC Convert Price - CW XF) ('PDKUXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Market_Overage);
  PARAMETER(PAR.Price_Adjustment_Amount);

  ENDIF;

  //?Load PAR.Pricing Retrieved Amount from Overage Converted to CWT
  CASE;

  // IF PAR.Price Adjustment Amount NE WRK.ZERO
  IF PAR.Price_Adjustment_Amount <> WRK.ZERO;

  // PAR.Pricing Retrieved Amount = PAR.Price Adjustment Amount
  PAR.Pricing_Retrieved_Amount = PAR.Price_Adjustment_Amount;

  //?Load PAR.Pricing Retrieved Amount from Overage Converted to CWT
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Pricing Retrieved Amount = PAR.Market Overage
  PAR.Pricing_Retrieved_Amount = PAR.Market_Overage;

  ENDIF;

 }

 //?Error Routine - Exit if Error
 CASE;

 // IF PAR.Error Return is All Entered Values
 IF PAR.Error_Return = 'CFR'/'CID'/'CIF'/'CIO'/'QPE'/'EXT'/'XPE'/'FPE'/'IOM'/'IOV'/'MPE'
 /'KPE'/'MKT'/'MSC'/'OVR'/'STR'/'SUB'/'TRC'/'WPA'/'RWB'/'ITERR'/'CRD'/'MSL'/'GAT';

 // PAR.Error Return = CND.IOVMKT Error
 PAR.Error_Return = 'IOM';

 QUIT;

 ENDIF;

 //?Update Pricing Detail if Market Overage is not equal to 0.
 CASE;

 // IF PAR.Pricing Retrieved Amount NE WRK.ZERO
 IF PAR.Pricing_Retrieved_Amount <> WRK.ZERO;

 //?Internal Routine to update either Order detail Pricing file
 //?in Library Qtemp if Order has not been updated yet, or
 //?Order Detail pricing, if pricing is called
 //?from Post(Update) Order, or Ship Pricing Detail if after Shipping
 EXECUTE FUNCTION(UPD Pricing Detail     IF) TYPE(EXCINTFUN)                     AC1296395;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(PAR.Price_Detail_Sequence);
 {
  //?Execute internal function

  //?Process if Order Nbr is not zero, if zero then not call from O/E
  CASE;

  // IF PAR.Event Called From is Not Price Only
  IF PAR.Event_Called_From = '02'/**/'AO'/'AI';

  CASE;

  // IF PAR.Event Called From is Pre-Update Invoice
  IF PAR.Event_Called_From = **;

  EXECUTE FUNCTION(CRT Ship Dtl Price QtmpCR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1310882;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is Invoice Pricing
  IF PAR.Event_Called_From = '02';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc O/E
  IF PAR.Event_Called_From = 'AO';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc Inv
  IF PAR.Event_Called_From = 'AI';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  ENDIF;

  ENDIF;

 }

 //?Accumulate Final Price
 // PAR.Unit Price = PAR.Unit Price + PAR.Pricing Retrieved Amount
 PAR.Unit_Price = PAR.Unit_Price + PAR.Pricing_Retrieved_Amount;

 ENDIF;

 ENDDO;

 ENDIF;

 //?*** 12 PROCESS COMPONANT EXTEND IF SELECTED AND IS ACTIVE
 CASE;

 // IF DB1.Price Method Componant is EXTEND
 IF DB1.Price_Method_Componant = 'EXTEND';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 //?Extended Price Method
 DO;

 EXECUTE FUNCTION(RTV Pricing: EXTEND   IF) TYPE(EXCINTFUN)                      AC1283240;
 PARAMETER(PAR.Price_Overage_Override);
 PARAMETER(PAR.U_M_Ordered);
 PARAMETER(PAR.Quantity_Ordered);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Error_Return);
 {
  //?Execute internal function

  // PAR.Error Return = WRK.BLANK
  PAR.Error_Return = WRK.BLANK;

  CASE;

  // IF PAR.Quantity Ordered NE WRK.ZERO
  IF PAR.Quantity_Ordered <> WRK.ZERO;

  // PAR.Pricing Retrieved Amount = PAR.Price Overage Override / PAR.Quantity Ordered
  PAR.Pricing_Retrieved_Amount = PAR.Price_Overage_Override / PAR.Quantity_Ordered 'H';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Pricing Retrieved Amount = PAR.Price Overage Override
  PAR.Pricing_Retrieved_Amount = PAR.Price_Overage_Override;

  ENDIF;

  // PAR.U/M - Pricing = PAR.U/M - Ordered
  PAR.UOM_Pricing = PAR.U_M_Ordered;

  CASE;

  // IF PAR.Pricing Retrieved Amount EQ WRK.ZERO
  IF PAR.Pricing_Retrieved_Amount = WRK.ZERO;

  // PAR.Error Return = CND.Extended Price Error
  PAR.Error_Return = 'XPE';

  ENDIF;

 }

 //?Error Routine - Exit if Error
 CASE;

 // IF PAR.Error Return is All Entered Values
 IF PAR.Error_Return = 'CFR'/'CID'/'CIF'/'CIO'/'QPE'/'EXT'/'XPE'/'FPE'/'IOM'/'IOV'/'MPE'
 /'KPE'/'MKT'/'MSC'/'OVR'/'STR'/'SUB'/'TRC'/'WPA'/'RWB'/'ITERR'/'CRD'/'MSL'/'GAT';

 // PAR.Error Return = CND.EXTEND Error
 PAR.Error_Return = 'EXT';

 QUIT;

 ENDIF;

 //?Update Pricing Detail if Extended is not equal to 0.
 CASE;

 // IF PAR.Pricing Retrieved Amount NE WRK.ZERO
 IF PAR.Pricing_Retrieved_Amount <> WRK.ZERO;

 //?Internal Routine to update either Order detail Pricing file
 //?in Library Qtemp if Order has not been updated yet, or
 //?Order Detail pricing, if pricing is called
 //?from Post(Update) Order, or Ship Pricing Detail if after Shipping
 EXECUTE FUNCTION(UPD Pricing Detail     IF) TYPE(EXCINTFUN)                     AC1296395;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(PAR.Price_Detail_Sequence);
 {
  //?Execute internal function

  //?Process if Order Nbr is not zero, if zero then not call from O/E
  CASE;

  // IF PAR.Event Called From is Not Price Only
  IF PAR.Event_Called_From = '02'/**/'AO'/'AI';

  CASE;

  // IF PAR.Event Called From is Pre-Update Invoice
  IF PAR.Event_Called_From = **;

  EXECUTE FUNCTION(CRT Ship Dtl Price QtmpCR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1310882;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is Invoice Pricing
  IF PAR.Event_Called_From = '02';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc O/E
  IF PAR.Event_Called_From = 'AO';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc Inv
  IF PAR.Event_Called_From = 'AI';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  ENDIF;

  ENDIF;

 }

 //?Accumulate Final Price
 // PAR.Unit Price = PAR.Unit Price + PAR.Pricing Retrieved Amount
 PAR.Unit_Price = PAR.Unit_Price + PAR.Pricing_Retrieved_Amount;

 ENDIF;

 ENDDO;

 ENDIF;

 //?*** 13 PROCESS COMPONANT OVRIDE IF SELECTED AND IS ACTIVE
 CASE;

 // IF DB1.Price Method Componant is OVRIDE
 IF DB1.Price_Method_Componant = 'OVRIDE';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 //?Manual Pricing
 DO;

 EXECUTE FUNCTION(RTV Pricing: OVRIDE   IF) TYPE(EXCINTFUN)                      AC1283245;
 PARAMETER(PAR.Price_Overage_Override);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Error_Return);
 {
  //?Execute internal function

  // PAR.Pricing Retrieved Amount = PAR.Price Overage Override
  PAR.Pricing_Retrieved_Amount = PAR.Price_Overage_Override;

 }

 //?Error Routine - Exit if Error
 CASE;

 // IF PAR.Error Return is All Entered Values
 IF PAR.Error_Return = 'CFR'/'CID'/'CIF'/'CIO'/'QPE'/'EXT'/'XPE'/'FPE'/'IOM'/'IOV'/'MPE'
 /'KPE'/'MKT'/'MSC'/'OVR'/'STR'/'SUB'/'TRC'/'WPA'/'RWB'/'ITERR'/'CRD'/'MSL'/'GAT';

 // PAR.Error Return = CND.OVRRDE Error
 PAR.Error_Return = 'OVR';

 QUIT;

 ENDIF;

 //?Update Pricing Detail if Override Amt is not equal to 0.
 CASE;

 // IF PAR.Pricing Retrieved Amount NE WRK.ZERO
 IF PAR.Pricing_Retrieved_Amount <> WRK.ZERO;

 //?Internal Routine to update either Order detail Pricing file
 //?in Library Qtemp if Order has not been updated yet, or
 //?Order Detail pricing, if pricing is called
 //?from Post(Update) Order, or Ship Pricing Detail if after Shipping
 EXECUTE FUNCTION(UPD Pricing Detail     IF) TYPE(EXCINTFUN)                     AC1296395;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(PAR.Price_Detail_Sequence);
 {
  //?Execute internal function

  //?Process if Order Nbr is not zero, if zero then not call from O/E
  CASE;

  // IF PAR.Event Called From is Not Price Only
  IF PAR.Event_Called_From = '02'/**/'AO'/'AI';

  CASE;

  // IF PAR.Event Called From is Pre-Update Invoice
  IF PAR.Event_Called_From = **;

  EXECUTE FUNCTION(CRT Ship Dtl Price QtmpCR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1310882;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is Invoice Pricing
  IF PAR.Event_Called_From = '02';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc O/E
  IF PAR.Event_Called_From = 'AO';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc Inv
  IF PAR.Event_Called_From = 'AI';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  ENDIF;

  ENDIF;

 }

 //?Accumulate Final Price
 // PAR.Unit Price = PAR.Unit Price + PAR.Pricing Retrieved Amount
 PAR.Unit_Price = PAR.Unit_Price + PAR.Pricing_Retrieved_Amount;

 ENDIF;

 ENDDO;

 ENDIF;

 //?*** 14 Process Componant ACCRLS if Selected and is Active-*
 CASE;

 // IF DB1.Price Method Componant is ACCRLS
 IF DB1.Price_Method_Componant = 'ACCRLS';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 //?NOTE: Price received from this routine has been converted to CWT
 //?Retrieve Accruals
 DO;

 //?** Accumulate the Accrual amount into the Pricing Retrieved Amount
 EXECUTE FUNCTION(RTV Pricing: ACCRLS   IF) TYPE(EXCINTFUN)                      AC1824980;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Price_Method_Code);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Error_Return);
 PARAMETER(PAR.Order_Number);
 {
  //?Execute internal function

  //?** Routine to Accumulate Accrual Rate
  CASE;

  // IF PAR.Event Called From is All Values
  IF PAR.Event_Called_From = '02'/'99'/**/'AO'/'AI';

  // LCL.Accrual Rate = CON.*ZERO
  LCL.Accrual_Rate = *ZERO;

  //?** This will read all accrual codes that are setup for the
  //?** ShipTo customer and accumulate the Accrual Rates.
  //?** If Actual Shipped Date is zeros, use Requested Ship Date
  CASE;

  // IF PAR.Actual Shipped Date is entered
  IF PAR.Actual_Shipped_Date <> *ZERO;

  // WRK.USR Date Shipped = PAR.Actual Shipped Date
  WRK.USR_Date_Shipped = PAR.Actual_Shipped_Date;

  //?** If Actual Shipped Date is zeros, use Requested Ship Date
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.USR Date Shipped = PAR.Requested Ship Date
  WRK.USR_Date_Shipped = PAR.Requested_Ship_Date;

  ENDIF;

  EXECUTE FUNCTION(Rtv Accrual Info      RT) TYPE(RTVOBJ) FILE(OMHOREP)           AC1626347;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(WRK.Accrual_Code);
  PARAMETER(1);
  PARAMETER(WRK.USR_Date_Shipped);
  PARAMETER(WRK.Period_Ending_Date);
  PARAMETER(WRK.Accrual_Rate);
  PARAMETER(NLL.All_Products_Y_N);
  PARAMETER(NLL.Accrual_Rate_Type);
  PARAMETER(NLL.Comm_Threshold_Period);
  PARAMETER(NLL.CAH_Unused_Date_1);
  PARAMETER(NLL.CAH_Unused_Date_2);
  PARAMETER(NLL.Comm_Min_Amt_Period);
  PARAMETER(NLL.Comm_Retroactive_Sts);
  PARAMETER(NLL.Accrual_Detail_Search);
  PARAMETER(NLL.Broker_Code);
  PARAMETER(NLL.Max_Accrual_Amount);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Item_Code);
  {
   //?USER: Initialize routine

   // PAR.Pricing Retrieved Amount = CON.*ZERO
   PAR.Pricing_Retrieved_Amount = *ZERO;

   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   //?** The par.period begin date is either the Actual Shipped date
   //?** from the Order Detail file unless it is zeros, then it is
   //?** replaced by the Requested Ship Date.
   //?** Select the record where the ASD is within the date range
   CASE;

   // IF PAR.Period Beginning Date GE DB1.Period Beginning Date
   IF PAR.Period_Beginning_Date >= DB1.Period_Beginning_Date;

   // AND PAR.Period Beginning Date LE DB1.Period Ending Date
   AND PAR.Period_Beginning_Date <= DB1.Period_Ending_Date;

   EXECUTE FUNCTION(RTV Accrual Info-All   RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1825083;
   PARAMETER(DB1.Accrual_Code);
   PARAMETER(NLL.Accrual_Description);
   PARAMETER(NLL.Automatic_Accrual_Y_N);
   PARAMETER(NLL.Print_On_Invoice_Y_N);
   PARAMETER(NLL.Rate_Usage);
   PARAMETER(LCL.Add_on_Allowance);
   PARAMETER(NLL.Accrual_Type);
   PARAMETER(NLL.Sub_Ledger_Code);
   PARAMETER(NLL.Reverse_Accrual_Code);
   PARAMETER(NLL.UOM_Primary_Dft);
   PARAMETER(NLL.G_L_Code_Dr);
   PARAMETER(NLL.G_L_Code_Cr);
   PARAMETER(NLL.G_L_Sub_Account_Code);
   PARAMETER(NLL.Sales_History_Exp_Bucket);
   PARAMETER(NLL.Post_to_G_L_Y_N);
   PARAMETER(NLL.All_Products_Y_N);
   PARAMETER(NLL.Accrual_Rate);
   PARAMETER(NLL.Accrual_Rate_Type);
   PARAMETER(NLL.Accrual_Detail_Search);
   PARAMETER(NLL.Standard_Schedule_Y_N);
   PARAMETER(NLL.Affect_Sales_Realz_Rpt);
   PARAMETER(LCL.Affect_Invoice_Price);
   PARAMETER(NLL.Invoice_Print_Type);
   PARAMETER(NLL.Max_Accrual_Amount);
   PARAMETER(NLL.Max_Accrual_Amount_Type);
   PARAMETER(NLL.Record_Status);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.Affect Invoice Price is yes
   IF LCL.Affect_Invoice_Price = 'Y';

   //?** Accumulate rate based on All Products Y/N value
   CASE;

   // IF DB1.All Products (Y/N) is Yes
   IF DB1.All_Products_Y_N = 'Y';

   // LCL.Accrual Rate = DB1.Accrual Rate
   LCL.Accrual_Rate = DB1.Accrual_Rate;

   //?** If YES, then use the rate from the Customer Accrual record
   CASE;

   // IF LCL.Add-on/Allowance is Allowance
   IF LCL.Add_on_Allowance = 'S';

   // LCL.Accrual Rate = CON.*ZERO - DB1.Accrual Rate
   LCL.Accrual_Rate = *ZERO - DB1.Accrual_Rate;

   ENDIF;

   // PAR.Pricing Retrieved Amount = PAR.Pricing Retrieved Amount + LCL.Accrual Rate
   PAR.Pricing_Retrieved_Amount = PAR.Pricing_Retrieved_Amount + LCL.Accrual_Rate;

   //?** Accumulate rate based on All Products Y/N value
   // IF DB1.All Products (Y/N) is Yes + Exceptions
   IF DB1.All_Products_Y_N = 'X';

   //?** If YES + Exceptions, then add the rate from either the Customer
   //?** Accrual Str or Customer Accrual Item file. The value in
   //?** the Accrual Detail Search field will determine which file.
   //?** If no record in either file then add the Customer Accural rate
   //?Retrieve Accrual Rate
   CASE;

   // IF DB1.Accrual Detail Search is Item
   IF DB1.Accrual_Detail_Search = 'I';

   EXECUTE FUNCTION(Rtv Item Accrual Rate RT) TYPE(RTVOBJ) FILE(OMHPREP)           AC1613037;
   PARAMETER(PAR.Ship_To_Customer);
   PARAMETER(DB1.Accrual_Code);
   PARAMETER(DB1.CAH_Sequence_No);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.Accrual_Rate);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Retrieve Accrual Rate
   // IF DB1.Accrual Detail Search is Item Structure
   IF DB1.Accrual_Detail_Search = 'S';

   //?** Retrieve the Item Structure fields from the Order Detail
   EXECUTE FUNCTION(Rtv Item FOB Price    RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1559616;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(NLL.Price_Overage_Override);
   PARAMETER(NLL.Contract_Number);
   PARAMETER(NLL.Price_Status);
   PARAMETER(NLL.U_M_Ordered);
   PARAMETER(NLL.Unit_Price);
   PARAMETER(NLL.Unit_Price_Credit);
   PARAMETER(NLL.Unit_Price_Ordered_U_M);
   PARAMETER(NLL.Unit_Weight_Ordered_U_M);
   PARAMETER(NLL.Actual_Shipped_Date);
   PARAMETER(NLL.Affect_Inventory_Status);
   PARAMETER(NLL.Affect_Sales_Doll_Status);
   PARAMETER(NLL.Affect_Sales_Pnds_Status);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(NLL.Affect_Trade_Fund);
   PARAMETER(NLL.Affect_Commission);
   PARAMETER(NLL.Affect_Pricing);
   PARAMETER(NLL.Ord_TF_Exempt_Code);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?PKD/SZ 07/20/09 Should check with Type/Group/Class first then just
   //?                Type/Group.
   EXECUTE FUNCTION(RTV & Chk Rate Exists RT) TYPE(RTVOBJ) FILE(POC8REP)           AC1679311;
   PARAMETER(PAR.Ship_To_Customer);
   PARAMETER(DB1.Accrual_Code);
   PARAMETER(DB1.CAH_Sequence_No);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(LCL.Accrual_Rate);
   PARAMETER(NLL.Accrual_Rate_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   //?Check for item str type/group without the class  RMC 08/07/07
   CASE;

   // IF PGM.*Return code is *Normal
   IF PGM.*Return_code = *BLANK;

   //?Check for item str type/group without the class  RMC 08/07/07
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV & Chk Rate Exists RT) TYPE(RTVOBJ) FILE(POC8REP)           AC1679311;
   PARAMETER(PAR.Ship_To_Customer);
   PARAMETER(DB1.Accrual_Code);
   PARAMETER(DB1.CAH_Sequence_No);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(*ZERO);
   PARAMETER(LCL.Accrual_Rate);
   PARAMETER(NLL.Accrual_Rate_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   ENDIF;

   ENDIF;

   //?SZ 07/17/09 commented out. was overlaying when the accrual exception was 0
   //?PKD/SZ 07/20/09 -- Needed to check if the Item was found or not.
   CASE;

   // IF PGM.*Return code is *Normal
   IF PGM.*Return_code = *BLANK;

   //?PKD/SZ 07/20/09 -- Needed to check if the Item was found or not.
   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Accrual Rate = DB1.Accrual Rate
   LCL.Accrual_Rate = DB1.Accrual_Rate;

   ENDIF;

   CASE;

   // IF LCL.Add-on/Allowance is Allowance
   IF LCL.Add_on_Allowance = 'S';

   // LCL.Accrual Rate = CON.*ZERO - LCL.Accrual Rate
   LCL.Accrual_Rate = *ZERO - LCL.Accrual_Rate;

   ENDIF;

   // PAR.Pricing Retrieved Amount = PAR.Pricing Retrieved Amount + LCL.Accrual Rate
   PAR.Pricing_Retrieved_Amount = PAR.Pricing_Retrieved_Amount + LCL.Accrual_Rate;

   //?** Accumulate rate based on All Products Y/N value
   // IF DB1.All Products (Y/N) is No
   IF DB1.All_Products_Y_N = 'N';

   //?** If NO, then only accumulate the rate if there is a record
   //?** in either the Customer Accrual Str or Customer Accrual Item
   //?** file. If no record in either file, just add zeros.
   CASE;

   // IF DB1.Accrual Detail Search is Item
   IF DB1.Accrual_Detail_Search = 'I';

   EXECUTE FUNCTION(Rtv Item Accrual Rate RT) TYPE(RTVOBJ) FILE(OMHPREP)           AC1613037;
   PARAMETER(PAR.Ship_To_Customer);
   PARAMETER(DB1.Accrual_Code);
   PARAMETER(DB1.CAH_Sequence_No);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.Accrual_Rate);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // IF DB1.Accrual Detail Search is Item Structure
   IF DB1.Accrual_Detail_Search = 'S';

   EXECUTE FUNCTION(Rtv Item FOB Price    RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1559616;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(NLL.Price_Overage_Override);
   PARAMETER(NLL.Contract_Number);
   PARAMETER(NLL.Price_Status);
   PARAMETER(NLL.U_M_Ordered);
   PARAMETER(NLL.Unit_Price);
   PARAMETER(NLL.Unit_Price_Credit);
   PARAMETER(NLL.Unit_Price_Ordered_U_M);
   PARAMETER(NLL.Unit_Weight_Ordered_U_M);
   PARAMETER(NLL.Actual_Shipped_Date);
   PARAMETER(NLL.Affect_Inventory_Status);
   PARAMETER(NLL.Affect_Sales_Doll_Status);
   PARAMETER(NLL.Affect_Sales_Pnds_Status);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(NLL.Affect_Trade_Fund);
   PARAMETER(NLL.Affect_Commission);
   PARAMETER(NLL.Affect_Pricing);
   PARAMETER(NLL.Ord_TF_Exempt_Code);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF PAR.Item Structure Type Code is Not Entered
   IF PAR.Item_Structure_Type_Code = *ZERO;

   // OR PAR.Item Structure Group Code is Not Entered
   OR PAR.Item_Structure_Group_Code = *ZERO;

   EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

   EXECUTE FUNCTION(RTV & Chk Rate Exists RT) TYPE(RTVOBJ) FILE(POC8REP)           AC1679311;
   PARAMETER(PAR.Ship_To_Customer);
   PARAMETER(DB1.Accrual_Code);
   PARAMETER(DB1.CAH_Sequence_No);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(LCL.Accrual_Rate);
   PARAMETER(NLL.Accrual_Rate_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   //?Check for item str type/group without the class  RMC 08/07/07
   CASE;

   // IF PGM.*Return code is *Normal
   IF PGM.*Return_code = *BLANK;

   //?Check for item str type/group without the class  RMC 08/07/07
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV & Chk Rate Exists RT) TYPE(RTVOBJ) FILE(POC8REP)           AC1679311;
   PARAMETER(PAR.Ship_To_Customer);
   PARAMETER(DB1.Accrual_Code);
   PARAMETER(DB1.CAH_Sequence_No);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(*ZERO);
   PARAMETER(LCL.Accrual_Rate);
   PARAMETER(NLL.Accrual_Rate_Type);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   ENDIF;

   ENDIF;

   CASE;

   // IF LCL.Add-on/Allowance is Allowance
   IF LCL.Add_on_Allowance = 'S';

   // LCL.Accrual Rate = CON.*ZERO - LCL.Accrual Rate
   LCL.Accrual_Rate = *ZERO - LCL.Accrual_Rate;

   ENDIF;

   // PAR.Pricing Retrieved Amount = PAR.Pricing Retrieved Amount + LCL.Accrual Rate
   PAR.Pricing_Retrieved_Amount = PAR.Pricing_Retrieved_Amount + LCL.Accrual_Rate;

   ENDIF;

   ENDIF;

   ENDIF;

   //?USER: Exit processing

   EXECUTE FUNCTION(RTV Item Pricing Info  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1412083;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(NLL.UOM_Primary);
   PARAMETER(NLL.Conversion_Factor_1);
   PARAMETER(NLL.Operation_Factor_1);
   PARAMETER(NLL.UOM_Second);
   PARAMETER(NLL.Conversion_Factor_2);
   PARAMETER(NLL.Operation_Factor_2);
   PARAMETER(NLL.UOM_Third);
   PARAMETER(LCL.UOM_Pricing);
   PARAMETER(NLL.Unit_Weight);
   PARAMETER(NLL.Production_Date_Control);
   PARAMETER(NLL.Catch_Weight_Status);
   PARAMETER(NLL.Default_Commod_Mark_basis);
   PARAMETER(NLL.Commodity_Price_Group);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.U/M - Pricing is Carcass Hundred Weight
   IF LCL.UOM_Pricing = 'CW';

   // OR LCL.U/M - Pricing is Thousand
   OR LCL.UOM_Pricing = 'M';

   // OR LCL.U/M - Pricing is Tons
   OR LCL.UOM_Pricing = 'TN';

   //?Hundred Weight
   CASE;

   // IF LCL.U/M - Pricing is Hundred Weight
   IF LCL.UOM_Pricing = 'CW';

   // PAR.Pricing Retrieved Amount =       *
   PAR.Pricing_Retrieved_Amount = PAR.Pricing_Retrieved_Amount * 100 'H';

   ENDIF;

   //?Thousand
   CASE;

   // IF LCL.U/M - Pricing is Thousand
   IF LCL.UOM_Pricing = 'M';

   // PAR.Pricing Retrieved Amount =       *
   PAR.Pricing_Retrieved_Amount = PAR.Pricing_Retrieved_Amount * 1000 'H';

   ENDIF;

   //?Tons
   CASE;

   // IF LCL.U/M - Pricing is Tons
   IF LCL.UOM_Pricing = 'TN';

   // PAR.Pricing Retrieved Amount =       *
   PAR.Pricing_Retrieved_Amount = PAR.Pricing_Retrieved_Amount * 2000 'H';

   ENDIF;

   ENDIF;

  }

  ENDIF;

  //?** Convert Price to CWT
  CASE;

  // IF PAR.Pricing Retrieved Amount is Not Zeros
  IF PAR.Pricing_Retrieved_Amount <> *ZERO;

  // Call program CLC Convert Price - CW XF.
  CALL PROGRAM(CLC Convert Price - CW XF) ('PDKUXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER(PAR.Price_Adjustment_Amount);

  // PAR.Pricing Retrieved Amount = PAR.Price Adjustment Amount
  PAR.Pricing_Retrieved_Amount = PAR.Price_Adjustment_Amount;

  ENDIF;

  //?Conversion Documentation
  DO;

  //?*****
  //?** 05/25/2007 LJB DLY029
  //?** Accumulate rate for all Accrual Codes for this Ship To
  //?** Customer based on the value in the All Products Y/N field
  //?**
  //?** If Actual Shipped Date is zeros, use the Requested Ship Date.
  //?**
  //?** If YES, then use the rate from the Customer Accrual record.
  //?**
  //?** If YES + EXCEPTIONS, then use the rate from either the Customer
  //?** Accrual Structure or Customer Accrual Item file which is based
  //?** on the value in Accrual Detail Search field. If no record in
  //?** either file, then use the rate in the Customer Accrual record.
  //?**
  //?** If NO, then only accumulate the rate if there is a record
  //?** in either the Customer Accrual Str or Customer Accrual Item
  //?** file. If no record in either file, just add zeros.
  //?**
  //?** Price will be converted to CWT
  //?*****
  ENDDO;

 }

 //?Error Routine - Exit if Error
 CASE;

 // IF PAR.Error Return is All Entered Values
 IF PAR.Error_Return = 'CFR'/'CID'/'CIF'/'CIO'/'QPE'/'EXT'/'XPE'/'FPE'/'IOM'/'IOV'/'MPE'
 /'KPE'/'MKT'/'MSC'/'OVR'/'STR'/'SUB'/'TRC'/'WPA'/'RWB'/'ITERR'/'CRD'/'MSL'/'GAT';

 // OR PGM.*Return code is *Record does not exist
 OR PGM.*Return_code = 'Y2U0005';

 // PAR.Error Return = CND.ACCRLS Error
 PAR.Error_Return = 'RWB';

 ENDIF;

 //?Update Pricing Retrieved Amount is not equal to 0
 CASE;

 // IF PAR.Pricing Retrieved Amount NE WRK.ZERO
 IF PAR.Pricing_Retrieved_Amount <> WRK.ZERO;

 //?Internal Routine to update either Order detail Pricing file
 //?in Library Qtemp if Order has not been updated yet, or
 //?Order Detail pricing, if pricing is called
 //?from Post(Update) Order, or Ship Pricing Detail if after Shipping
 EXECUTE FUNCTION(UPD Pricing Detail     IF) TYPE(EXCINTFUN)                     AC1296395;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(PAR.Price_Detail_Sequence);
 {
  //?Execute internal function

  //?Process if Order Nbr is not zero, if zero then not call from O/E
  CASE;

  // IF PAR.Event Called From is Not Price Only
  IF PAR.Event_Called_From = '02'/**/'AO'/'AI';

  CASE;

  // IF PAR.Event Called From is Pre-Update Invoice
  IF PAR.Event_Called_From = **;

  EXECUTE FUNCTION(CRT Ship Dtl Price QtmpCR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1310882;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is Invoice Pricing
  IF PAR.Event_Called_From = '02';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc O/E
  IF PAR.Event_Called_From = 'AO';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc Inv
  IF PAR.Event_Called_From = 'AI';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  ENDIF;

  ENDIF;

 }

 //?Accumulate Final Price
 // PAR.Unit Price = PAR.Unit Price + PAR.Pricing Retrieved Amount
 PAR.Unit_Price = PAR.Unit_Price + PAR.Pricing_Retrieved_Amount;

 ENDIF;

 ENDDO;

 ENDIF;

 //?*** 15 PROCESS COMPONANT CFRTAB IF SELECTED AND IS ACTIVE-*
 CASE;

 // IF DB1.Price Method Componant is CFRTAB
 IF DB1.Price_Method_Componant = 'CFRTAB';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 //?Company/Customer freight Rate Overage
 DO;

 //?This Overage is keyed in by Hundred Weight, if Pricing U/M is not
 //?Hundred Weight, the it must be converted to the Items Pricing U/M.
 EXECUTE FUNCTION(RTV Pricing: CFRTAB   IF) TYPE(EXCINTFUN)                      AC1846404;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Error_Return);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.UOM_Second);
 PARAMETER(PAR.UOM_Third);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.Order_Number);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Shipping Method   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1848045;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(LCL.Shipping_Method);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Shipping Method is Prepaid
  IF LCL.Shipping_Method = 'PR'/'PT';

  //?R12926 DN 04/24/18-At Order level, get Absorbed Freight Rate from OH.
  EXECUTE FUNCTION(Rtv Absorbed Frt Rate RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2149231;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Customer Absorbed Frieght is entered as Hundred weight, therefore
  //?Converting to Hundred weight is not necessary.
  // PAR.Pricing Retrieved Amount = PAR.Absorbed Freight Rate CWT
  PAR.Pricing_Retrieved_Amount = PAR.Absorbed_Freight_Rate_CWT;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Pricing Retrieved Amount = CON.*ZERO
  PAR.Pricing_Retrieved_Amount = *ZERO;

  ENDIF;

 }

 //?Error Routine - Exit if Error
 CASE;

 // IF PAR.Error Return is All Entered Values
 IF PAR.Error_Return = 'CFR'/'CID'/'CIF'/'CIO'/'QPE'/'EXT'/'XPE'/'FPE'/'IOM'/'IOV'/'MPE'
 /'KPE'/'MKT'/'MSC'/'OVR'/'STR'/'SUB'/'TRC'/'WPA'/'RWB'/'ITERR'/'CRD'/'MSL'/'GAT';

 QUIT;

 ENDIF;

 //?Update Pricing Detail if Freight Absorbed is not equal to 0.
 CASE;

 // IF PAR.Pricing Retrieved Amount NE WRK.ZERO
 IF PAR.Pricing_Retrieved_Amount <> WRK.ZERO;

 //?Internal Routine to update either Order detail Pricing file
 //?in Library Qtemp if Order has not been updated yet, or
 //?Order Detail pricing, if pricing is called
 //?from Post(Update) Order, or Ship Pricing Detail if after Shipping
 EXECUTE FUNCTION(UPD Pricing Detail     IF) TYPE(EXCINTFUN)                     AC1296395;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(PAR.Price_Detail_Sequence);
 {
  //?Execute internal function

  //?Process if Order Nbr is not zero, if zero then not call from O/E
  CASE;

  // IF PAR.Event Called From is Not Price Only
  IF PAR.Event_Called_From = '02'/**/'AO'/'AI';

  CASE;

  // IF PAR.Event Called From is Pre-Update Invoice
  IF PAR.Event_Called_From = **;

  EXECUTE FUNCTION(CRT Ship Dtl Price QtmpCR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1310882;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is Invoice Pricing
  IF PAR.Event_Called_From = '02';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc O/E
  IF PAR.Event_Called_From = 'AO';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc Inv
  IF PAR.Event_Called_From = 'AI';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  ENDIF;

  ENDIF;

 }

 //?Accumulate Final Price
 // PAR.Unit Price = PAR.Unit Price + PAR.Pricing Retrieved Amount
 PAR.Unit_Price = PAR.Unit_Price + PAR.Pricing_Retrieved_Amount;

 ENDIF;

 ENDDO;

 ENDIF;

 //?*** 16 PROCESS COMPONANT IOVFRT IF SELECTED AND IS ACTIVE-*
 CASE;

 // IF DB1.Price Method Componant is IOVFRT
 IF DB1.Price_Method_Componant = 'IOVFRT';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 //?Item Freight Overage
 DO;

 EXECUTE FUNCTION(RTV Pricing: IOVFRT   IF) TYPE(EXCINTFUN)                      AC1853076;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Error_Return);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Item Freight Over RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1853077;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Item_Frt_Overage_Prc_UOM);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.Error Return = WRK.BLANK
  PAR.Error_Return = WRK.BLANK;

  //?Convert Item Freight Overage to CWT if not Zero
  CASE;

  // IF LCL.Item Frt Overage /Prc UM is NE Zero
  IF LCL.Item_Frt_Overage_Prc_UOM <> *ZERO;

  // Call program CLC Convert Price - CW XF.
  CALL PROGRAM(CLC Convert Price - CW XF) ('PDKUXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Item_Frt_Overage_Prc_UOM);
  PARAMETER(PAR.Price_Adjustment_Amount);

  ENDIF;

  //?Load PAR.Pricing Retrieved Amount from Overage Converted to CWT
  CASE;

  // IF PAR.Price Adjustment Amount NE WRK.ZERO
  IF PAR.Price_Adjustment_Amount <> WRK.ZERO;

  // PAR.Pricing Retrieved Amount = PAR.Price Adjustment Amount
  PAR.Pricing_Retrieved_Amount = PAR.Price_Adjustment_Amount;

  //?Load PAR.Pricing Retrieved Amount from Overage Converted to CWT
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Pricing Retrieved Amount = LCL.Item Frt Overage /Prc UM
  PAR.Pricing_Retrieved_Amount = LCL.Item_Frt_Overage_Prc_UOM;

  ENDIF;

 }

 //?Error Routine - Exit if Error
 CASE;

 // IF PAR.Error Return is All Entered Values
 IF PAR.Error_Return = 'CFR'/'CID'/'CIF'/'CIO'/'QPE'/'EXT'/'XPE'/'FPE'/'IOM'/'IOV'/'MPE'
 /'KPE'/'MKT'/'MSC'/'OVR'/'STR'/'SUB'/'TRC'/'WPA'/'RWB'/'ITERR'/'CRD'/'MSL'/'GAT';

 // PAR.Error Return = CND.IOVMKT Error
 PAR.Error_Return = 'IOM';

 QUIT;

 ENDIF;

 //?Update Pricing Detail if Market Overage is not equal to 0.
 CASE;

 // IF PAR.Pricing Retrieved Amount NE WRK.ZERO
 IF PAR.Pricing_Retrieved_Amount <> WRK.ZERO;

 //?Internal Routine to update either Order detail Pricing file
 //?in Library Qtemp if Order has not been updated yet, or
 //?Order Detail pricing, if pricing is called
 //?from Post(Update) Order, or Ship Pricing Detail if after Shipping
 EXECUTE FUNCTION(UPD Pricing Detail     IF) TYPE(EXCINTFUN)                     AC1296395;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(PAR.Price_Detail_Sequence);
 {
  //?Execute internal function

  //?Process if Order Nbr is not zero, if zero then not call from O/E
  CASE;

  // IF PAR.Event Called From is Not Price Only
  IF PAR.Event_Called_From = '02'/**/'AO'/'AI';

  CASE;

  // IF PAR.Event Called From is Pre-Update Invoice
  IF PAR.Event_Called_From = **;

  EXECUTE FUNCTION(CRT Ship Dtl Price QtmpCR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1310882;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is Invoice Pricing
  IF PAR.Event_Called_From = '02';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc O/E
  IF PAR.Event_Called_From = 'AO';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc Inv
  IF PAR.Event_Called_From = 'AI';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  ENDIF;

  ENDIF;

 }

 //?Accumulate Final Price
 // PAR.Unit Price = PAR.Unit Price + PAR.Pricing Retrieved Amount
 PAR.Unit_Price = PAR.Unit_Price + PAR.Pricing_Retrieved_Amount;

 ENDIF;

 ENDDO;

 ENDIF;

 //?*** 17 PROCESS COMPONANT CIMSLV IF SELECTED AND IS ACTIVE-*
 CASE;

 // IF DB1.Price Method Componant is CIMSLV
 IF DB1.Price_Method_Componant = 'CIMSLV';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 //?Customer Item Muscle Value
 DO;

 // Call program RTV Pricing: CIMSLV   XF.
 CALL PROGRAM(RTV Pricing: CIMSLV   XF) ('PNQ4XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.OD_Market_Begin_Date);
 PARAMETER(PAR.OD_Market_Ending_Date);
 PARAMETER(PAR.Error_Return);

 //?Error Routine - Exit if Error
 CASE;

 // IF PAR.Error Return is All Entered Values
 IF PAR.Error_Return = 'CFR'/'CID'/'CIF'/'CIO'/'QPE'/'EXT'/'XPE'/'FPE'/'IOM'/'IOV'/'MPE'
 /'KPE'/'MKT'/'MSC'/'OVR'/'STR'/'SUB'/'TRC'/'WPA'/'RWB'/'ITERR'/'CRD'/'MSL'/'GAT';

 // PAR.Error Return = CND.CIMSLV Error
 PAR.Error_Return = 'MSL';

 ENDIF;

 //?Update Pricing Detail if Market Overage is not equal to 0.
 CASE;

 // IF PAR.Pricing Retrieved Amount NE WRK.ZERO
 IF PAR.Pricing_Retrieved_Amount <> WRK.ZERO;

 //?Internal Routine to update either Order detail Pricing file
 //?in Library Qtemp if Order has not been updated yet, or
 //?Order Detail pricing, if pricing is called
 //?from Post(Update) Order, or Ship Pricing Detail if after Shipping
 EXECUTE FUNCTION(UPD Pricing Detail     IF) TYPE(EXCINTFUN)                     AC1296395;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(PAR.Price_Detail_Sequence);
 {
  //?Execute internal function

  //?Process if Order Nbr is not zero, if zero then not call from O/E
  CASE;

  // IF PAR.Event Called From is Not Price Only
  IF PAR.Event_Called_From = '02'/**/'AO'/'AI';

  CASE;

  // IF PAR.Event Called From is Pre-Update Invoice
  IF PAR.Event_Called_From = **;

  EXECUTE FUNCTION(CRT Ship Dtl Price QtmpCR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1310882;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is Invoice Pricing
  IF PAR.Event_Called_From = '02';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc O/E
  IF PAR.Event_Called_From = 'AO';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc Inv
  IF PAR.Event_Called_From = 'AI';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  ENDIF;

  ENDIF;

 }

 //?Accumulate Final Price
 // PAR.Unit Price = PAR.Unit Price + PAR.Pricing Retrieved Amount
 PAR.Unit_Price = PAR.Unit_Price + PAR.Pricing_Retrieved_Amount;

 ENDIF;

 ENDDO;

 ENDIF;

 //?*** 18 PROCESS COMPONANT CIPFEE IF SELECTED AND IS ACTIVE-*
 CASE;

 // IF DB1.Price Method Componant is CIPFEE
 IF DB1.Price_Method_Componant = 'CIPFEE';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 //?Customer Item Processing Fee
 DO;

 // Call program RTV Pricing: CIPFEE   XF.
 CALL PROGRAM(RTV Pricing: CIPFEE   XF) ('PNQ5XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Error_Return);

 //?Error Routine - Exit if Error
 CASE;

 // IF PAR.Error Return is All Entered Values
 IF PAR.Error_Return = 'CFR'/'CID'/'CIF'/'CIO'/'QPE'/'EXT'/'XPE'/'FPE'/'IOM'/'IOV'/'MPE'
 /'KPE'/'MKT'/'MSC'/'OVR'/'STR'/'SUB'/'TRC'/'WPA'/'RWB'/'ITERR'/'CRD'/'MSL'/'GAT';

 // PAR.Error Return = CND.CIPFEE Error
 PAR.Error_Return = 'FEE';

 ENDIF;

 //?Update Pricing Detail if Market Overage is not equal to 0.
 CASE;

 // IF PAR.Pricing Retrieved Amount NE WRK.ZERO
 IF PAR.Pricing_Retrieved_Amount <> WRK.ZERO;

 //?Internal Routine to update either Order detail Pricing file
 //?in Library Qtemp if Order has not been updated yet, or
 //?Order Detail pricing, if pricing is called
 //?from Post(Update) Order, or Ship Pricing Detail if after Shipping
 EXECUTE FUNCTION(UPD Pricing Detail     IF) TYPE(EXCINTFUN)                     AC1296395;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(PAR.Price_Detail_Sequence);
 {
  //?Execute internal function

  //?Process if Order Nbr is not zero, if zero then not call from O/E
  CASE;

  // IF PAR.Event Called From is Not Price Only
  IF PAR.Event_Called_From = '02'/**/'AO'/'AI';

  CASE;

  // IF PAR.Event Called From is Pre-Update Invoice
  IF PAR.Event_Called_From = **;

  EXECUTE FUNCTION(CRT Ship Dtl Price QtmpCR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1310882;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is Invoice Pricing
  IF PAR.Event_Called_From = '02';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc O/E
  IF PAR.Event_Called_From = 'AO';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc Inv
  IF PAR.Event_Called_From = 'AI';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  ENDIF;

  ENDIF;

 }

 //?Accumulate Final Price
 // PAR.Unit Price = PAR.Unit Price + PAR.Pricing Retrieved Amount
 PAR.Unit_Price = PAR.Unit_Price + PAR.Pricing_Retrieved_Amount;

 ENDIF;

 ENDDO;

 ENDIF;

 //?*** 19 PROCESS COMPONANT CIFRTO IF SELECTED AND IS ACTIVE-*
 CASE;

 // IF DB1.Price Method Componant is CIFRTO
 IF DB1.Price_Method_Componant = 'CIFRTO';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 //?Customer Item Freight Overage
 DO;

 // Call program RTV Pricing: CIFRTO   XF.
 CALL PROGRAM(RTV Pricing: CIFRTO   XF) ('PNQ3XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Error_Return);

 //?Error Routine - Exit if Error
 CASE;

 // IF PAR.Error Return is All Entered Values
 IF PAR.Error_Return = 'CFR'/'CID'/'CIF'/'CIO'/'QPE'/'EXT'/'XPE'/'FPE'/'IOM'/'IOV'/'MPE'
 /'KPE'/'MKT'/'MSC'/'OVR'/'STR'/'SUB'/'TRC'/'WPA'/'RWB'/'ITERR'/'CRD'/'MSL'/'GAT';

 // PAR.Error Return = CND.IOVMKT Error
 PAR.Error_Return = 'IOM';

 ENDIF;

 //?Update Pricing Detail if Market Overage is not equal to 0.
 CASE;

 // IF PAR.Pricing Retrieved Amount NE WRK.ZERO
 IF PAR.Pricing_Retrieved_Amount <> WRK.ZERO;

 //?Internal Routine to update either Order detail Pricing file
 //?in Library Qtemp if Order has not been updated yet, or
 //?Order Detail pricing, if pricing is called
 //?from Post(Update) Order, or Ship Pricing Detail if after Shipping
 EXECUTE FUNCTION(UPD Pricing Detail     IF) TYPE(EXCINTFUN)                     AC1296395;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(PAR.Price_Detail_Sequence);
 {
  //?Execute internal function

  //?Process if Order Nbr is not zero, if zero then not call from O/E
  CASE;

  // IF PAR.Event Called From is Not Price Only
  IF PAR.Event_Called_From = '02'/**/'AO'/'AI';

  CASE;

  // IF PAR.Event Called From is Pre-Update Invoice
  IF PAR.Event_Called_From = **;

  EXECUTE FUNCTION(CRT Ship Dtl Price QtmpCR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1310882;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is Invoice Pricing
  IF PAR.Event_Called_From = '02';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc O/E
  IF PAR.Event_Called_From = 'AO';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc Inv
  IF PAR.Event_Called_From = 'AI';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  ENDIF;

  ENDIF;

 }

 //?Accumulate Final Price
 // PAR.Unit Price = PAR.Unit Price + PAR.Pricing Retrieved Amount
 PAR.Unit_Price = PAR.Unit_Price + PAR.Pricing_Retrieved_Amount;

 ENDIF;

 ENDDO;

 ENDIF;

 //?*** 20 PROCESS COMPONANT CITMOV IF SELECTED AND IS ACTIVE-*
 CASE;

 // IF DB1.Price Method Componant is CITMOV
 IF DB1.Price_Method_Componant = 'CITMOV';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 //?Customer Item Market +/-
 DO;

 // Call program RTV Pricing: CITMOV   XF.
 CALL PROGRAM(RTV Pricing: CITMOV   XF) ('PNQ6XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Error_Return);

 //?Error Routine - Exit if Error
 CASE;

 // IF PAR.Error Return is All Entered Values
 IF PAR.Error_Return = 'CFR'/'CID'/'CIF'/'CIO'/'QPE'/'EXT'/'XPE'/'FPE'/'IOM'/'IOV'/'MPE'
 /'KPE'/'MKT'/'MSC'/'OVR'/'STR'/'SUB'/'TRC'/'WPA'/'RWB'/'ITERR'/'CRD'/'MSL'/'GAT';

 // PAR.Error Return = CND.IOVMKT Error
 PAR.Error_Return = 'IOM';

 ENDIF;

 //?Update Pricing Detail if Market Overage is not equal to 0.
 CASE;

 // IF PAR.Pricing Retrieved Amount NE WRK.ZERO
 IF PAR.Pricing_Retrieved_Amount <> WRK.ZERO;

 //?Internal Routine to update either Order detail Pricing file
 //?in Library Qtemp if Order has not been updated yet, or
 //?Order Detail pricing, if pricing is called
 //?from Post(Update) Order, or Ship Pricing Detail if after Shipping
 EXECUTE FUNCTION(UPD Pricing Detail     IF) TYPE(EXCINTFUN)                     AC1296395;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(PAR.Price_Detail_Sequence);
 {
  //?Execute internal function

  //?Process if Order Nbr is not zero, if zero then not call from O/E
  CASE;

  // IF PAR.Event Called From is Not Price Only
  IF PAR.Event_Called_From = '02'/**/'AO'/'AI';

  CASE;

  // IF PAR.Event Called From is Pre-Update Invoice
  IF PAR.Event_Called_From = **;

  EXECUTE FUNCTION(CRT Ship Dtl Price QtmpCR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1310882;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is Invoice Pricing
  IF PAR.Event_Called_From = '02';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc O/E
  IF PAR.Event_Called_From = 'AO';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc Inv
  IF PAR.Event_Called_From = 'AI';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  ENDIF;

  ENDIF;

 }

 //?Accumulate Final Price
 // PAR.Unit Price = PAR.Unit Price + PAR.Pricing Retrieved Amount
 PAR.Unit_Price = PAR.Unit_Price + PAR.Pricing_Retrieved_Amount;

 ENDIF;

 ENDDO;

 ENDIF;

 //?*** 21 PROCESS COMPONANT CSFRTO IF SELECTED AND IS ACTIVE-*
 CASE;

 // IF DB1.Price Method Componant is CSFRTO
 IF DB1.Price_Method_Componant = 'CSFRTO';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 //?Customer Sales Freight Overage
 DO;

 // Call program RTV Pricing: CSFRTO   XF.
 CALL PROGRAM(RTV Pricing: CSFRTO   XF) ('PNQ7XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Error_Return);

 //?Error Routine - Exit if Error
 CASE;

 // IF PAR.Error Return is All Entered Values
 IF PAR.Error_Return = 'CFR'/'CID'/'CIF'/'CIO'/'QPE'/'EXT'/'XPE'/'FPE'/'IOM'/'IOV'/'MPE'
 /'KPE'/'MKT'/'MSC'/'OVR'/'STR'/'SUB'/'TRC'/'WPA'/'RWB'/'ITERR'/'CRD'/'MSL'/'GAT';

 // PAR.Error Return = CND.IOVMKT Error
 PAR.Error_Return = 'IOM';

 ENDIF;

 //?Update Pricing Detail if Market Overage is not equal to 0.
 CASE;

 // IF PAR.Pricing Retrieved Amount NE WRK.ZERO
 IF PAR.Pricing_Retrieved_Amount <> WRK.ZERO;

 //?Internal Routine to update either Order detail Pricing file
 //?in Library Qtemp if Order has not been updated yet, or
 //?Order Detail pricing, if pricing is called
 //?from Post(Update) Order, or Ship Pricing Detail if after Shipping
 EXECUTE FUNCTION(UPD Pricing Detail     IF) TYPE(EXCINTFUN)                     AC1296395;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(PAR.Price_Detail_Sequence);
 {
  //?Execute internal function

  //?Process if Order Nbr is not zero, if zero then not call from O/E
  CASE;

  // IF PAR.Event Called From is Not Price Only
  IF PAR.Event_Called_From = '02'/**/'AO'/'AI';

  CASE;

  // IF PAR.Event Called From is Pre-Update Invoice
  IF PAR.Event_Called_From = **;

  EXECUTE FUNCTION(CRT Ship Dtl Price QtmpCR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1310882;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is Invoice Pricing
  IF PAR.Event_Called_From = '02';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc O/E
  IF PAR.Event_Called_From = 'AO';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc Inv
  IF PAR.Event_Called_From = 'AI';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  ENDIF;

  ENDIF;

 }

 //?Accumulate Final Price
 // PAR.Unit Price = PAR.Unit Price + PAR.Pricing Retrieved Amount
 PAR.Unit_Price = PAR.Unit_Price + PAR.Pricing_Retrieved_Amount;

 ENDIF;

 ENDDO;

 ENDIF;

 //?*** 22 PROCESS COMPONANT PSITPR IF SELECTED AND IS ACTIVE-*
 CASE;

 // IF DB1.Price Method Componant is PSITPR
 IF DB1.Price_Method_Componant = 'PSITPR';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 //?Price Sheet Item Price
 DO;

 // Call program Zzz Pricing: PSITPR   XF.
 CALL PROGRAM(Zzz Pricing: PSITPR   XF) ('PNQ8XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(PAR.OD_Market_Begin_Date);
 PARAMETER(PAR.OD_Market_Ending_Date);
 PARAMETER(PAR.Error_Return);

 //?Error Routine - Exit if Error
 CASE;

 // IF PAR.Error Return is All Entered Values
 IF PAR.Error_Return = 'CFR'/'CID'/'CIF'/'CIO'/'QPE'/'EXT'/'XPE'/'FPE'/'IOM'/'IOV'/'MPE'
 /'KPE'/'MKT'/'MSC'/'OVR'/'STR'/'SUB'/'TRC'/'WPA'/'RWB'/'ITERR'/'CRD'/'MSL'/'GAT';

 // PAR.Error Return = CND.MKTPRC Error
 PAR.Error_Return = 'MKT';

 ENDIF;

 //?Update Pricing Detail if Market Overage is not equal to 0.
 CASE;

 // IF PAR.Pricing Retrieved Amount NE WRK.ZERO
 IF PAR.Pricing_Retrieved_Amount <> WRK.ZERO;

 //?Internal Routine to update either Order detail Pricing file
 //?in Library Qtemp if Order has not been updated yet, or
 //?Order Detail pricing, if pricing is called
 //?from Post(Update) Order, or Ship Pricing Detail if after Shipping
 EXECUTE FUNCTION(UPD Pricing Detail     IF) TYPE(EXCINTFUN)                     AC1296395;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(PAR.Price_Detail_Sequence);
 {
  //?Execute internal function

  //?Process if Order Nbr is not zero, if zero then not call from O/E
  CASE;

  // IF PAR.Event Called From is Not Price Only
  IF PAR.Event_Called_From = '02'/**/'AO'/'AI';

  CASE;

  // IF PAR.Event Called From is Pre-Update Invoice
  IF PAR.Event_Called_From = **;

  EXECUTE FUNCTION(CRT Ship Dtl Price QtmpCR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1310882;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is Invoice Pricing
  IF PAR.Event_Called_From = '02';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc O/E
  IF PAR.Event_Called_From = 'AO';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc Inv
  IF PAR.Event_Called_From = 'AI';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  ENDIF;

  ENDIF;

 }

 //?Accumulate Final Price
 // PAR.Unit Price = PAR.Unit Price + PAR.Pricing Retrieved Amount
 PAR.Unit_Price = PAR.Unit_Price + PAR.Pricing_Retrieved_Amount;

 ENDIF;

 ENDDO;

 ENDIF;

 //?*** 23 PROCESS COMPONANT ITMKTO IF SELECTED AND IS ACTIVE-*
 CASE;

 // IF DB1.Price Method Componant is ITMKTO
 IF DB1.Price_Method_Componant = 'ITMKTO';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 //?Item Market +/-
 DO;

 // Call program Zzz Pricing: ITMKTO   XF.
 CALL PROGRAM(Zzz Pricing: ITMKTO   XF) ('PNQ9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Error_Return);

 //?Error Routine - Exit if Error
 CASE;

 // IF PAR.Error Return is All Entered Values
 IF PAR.Error_Return = 'CFR'/'CID'/'CIF'/'CIO'/'QPE'/'EXT'/'XPE'/'FPE'/'IOM'/'IOV'/'MPE'
 /'KPE'/'MKT'/'MSC'/'OVR'/'STR'/'SUB'/'TRC'/'WPA'/'RWB'/'ITERR'/'CRD'/'MSL'/'GAT';

 // PAR.Error Return = CND.IOVMKT Error
 PAR.Error_Return = 'IOM';

 ENDIF;

 //?Update Pricing Detail if Market Overage is not equal to 0.
 CASE;

 // IF PAR.Pricing Retrieved Amount NE WRK.ZERO
 IF PAR.Pricing_Retrieved_Amount <> WRK.ZERO;

 //?Internal Routine to update either Order detail Pricing file
 //?in Library Qtemp if Order has not been updated yet, or
 //?Order Detail pricing, if pricing is called
 //?from Post(Update) Order, or Ship Pricing Detail if after Shipping
 EXECUTE FUNCTION(UPD Pricing Detail     IF) TYPE(EXCINTFUN)                     AC1296395;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(PAR.Price_Detail_Sequence);
 {
  //?Execute internal function

  //?Process if Order Nbr is not zero, if zero then not call from O/E
  CASE;

  // IF PAR.Event Called From is Not Price Only
  IF PAR.Event_Called_From = '02'/**/'AO'/'AI';

  CASE;

  // IF PAR.Event Called From is Pre-Update Invoice
  IF PAR.Event_Called_From = **;

  EXECUTE FUNCTION(CRT Ship Dtl Price QtmpCR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1310882;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is Invoice Pricing
  IF PAR.Event_Called_From = '02';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc O/E
  IF PAR.Event_Called_From = 'AO';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc Inv
  IF PAR.Event_Called_From = 'AI';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  ENDIF;

  ENDIF;

 }

 //?Accumulate Final Price
 // PAR.Unit Price = PAR.Unit Price + PAR.Pricing Retrieved Amount
 PAR.Unit_Price = PAR.Unit_Price + PAR.Pricing_Retrieved_Amount;

 ENDIF;

 ENDDO;

 ENDIF;

 //?*** 24 PROCESS COMPONANT MKTOVR IF SELECTED AND IS ACTIVE-*
 CASE;

 // IF DB1.Price Method Componant is MKTOVR
 IF DB1.Price_Method_Componant = 'MKTOVR';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 //?Item Market Overage
 DO;

 EXECUTE FUNCTION(RTV Pricing: MKTOVR   IF) TYPE(EXCINTFUN)                      AC1989217;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Error_Return);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Market Details    RT) TYPE(RTVOBJ) FILE(PNGBREP)           AC1989084;
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Commodity_Market_Code);
  PARAMETER(NLL.Commodity_Price_Group);
  PARAMETER(NLL.Market_Percent);
  PARAMETER(PAR.Market_Overage);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.Error Return = WRK.BLANK
  PAR.Error_Return = WRK.BLANK;

  //?Convert Market Overage to CWT if not Zero
  CASE;

  // IF PAR.Market Overage is Not Zeros
  IF PAR.Market_Overage <> *ZERO;

  // Call program CLC Convert Price - CW XF.
  CALL PROGRAM(CLC Convert Price - CW XF) ('PDKUXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Market_Overage);
  PARAMETER(PAR.Price_Adjustment_Amount);

  ENDIF;

  //?Load PAR.Pricing Retrieved Amount from Overage Converted to CWT
  CASE;

  // IF PAR.Price Adjustment Amount NE WRK.ZERO
  IF PAR.Price_Adjustment_Amount <> WRK.ZERO;

  // PAR.Pricing Retrieved Amount = PAR.Price Adjustment Amount
  PAR.Pricing_Retrieved_Amount = PAR.Price_Adjustment_Amount;

  //?Load PAR.Pricing Retrieved Amount from Overage Converted to CWT
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Pricing Retrieved Amount = PAR.Market Overage
  PAR.Pricing_Retrieved_Amount = PAR.Market_Overage;

  ENDIF;

 }

 //?Error Routine - Exit if Error
 CASE;

 // IF PAR.Error Return is All Entered Values
 IF PAR.Error_Return = 'CFR'/'CID'/'CIF'/'CIO'/'QPE'/'EXT'/'XPE'/'FPE'/'IOM'/'IOV'/'MPE'
 /'KPE'/'MKT'/'MSC'/'OVR'/'STR'/'SUB'/'TRC'/'WPA'/'RWB'/'ITERR'/'CRD'/'MSL'/'GAT';

 // PAR.Error Return = CND.IOVMKT Error
 PAR.Error_Return = 'IOM';

 ENDIF;

 //?Update Pricing Detail if Market Overage is not equal to 0.
 CASE;

 // IF PAR.Pricing Retrieved Amount NE WRK.ZERO
 IF PAR.Pricing_Retrieved_Amount <> WRK.ZERO;

 //?Internal Routine to update either Order detail Pricing file
 //?in Library Qtemp if Order has not been updated yet, or
 //?Order Detail pricing, if pricing is called
 //?from Post(Update) Order, or Ship Pricing Detail if after Shipping
 EXECUTE FUNCTION(UPD Pricing Detail     IF) TYPE(EXCINTFUN)                     AC1296395;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(PAR.Price_Detail_Sequence);
 {
  //?Execute internal function

  //?Process if Order Nbr is not zero, if zero then not call from O/E
  CASE;

  // IF PAR.Event Called From is Not Price Only
  IF PAR.Event_Called_From = '02'/**/'AO'/'AI';

  CASE;

  // IF PAR.Event Called From is Pre-Update Invoice
  IF PAR.Event_Called_From = **;

  EXECUTE FUNCTION(CRT Ship Dtl Price QtmpCR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1310882;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is Invoice Pricing
  IF PAR.Event_Called_From = '02';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc O/E
  IF PAR.Event_Called_From = 'AO';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc Inv
  IF PAR.Event_Called_From = 'AI';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  ENDIF;

  ENDIF;

 }

 //?Accumulate Final Price
 // PAR.Unit Price = PAR.Unit Price + PAR.Pricing Retrieved Amount
 PAR.Unit_Price = PAR.Unit_Price + PAR.Pricing_Retrieved_Amount;

 ENDIF;

 ENDDO;

 ENDIF;

 //?*** 25 PROCESS COMPONENT GATADJ IF SELECTED AND IS ACTIVE-*
 CASE;

 // IF DB1.Price Method Componant is GATADJ
 IF DB1.Price_Method_Componant = 'GATADJ';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 //?Gate price adjustment
 DO;

 // Call program RTV Pricing: GATADJ   XF.
 CALL PROGRAM(RTV Pricing: GATADJ   XF) ('PBIHXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Error_Return);

 //?Error Routine - Exit if Error
 CASE;

 // IF PAR.Error Return is All Entered Values
 IF PAR.Error_Return = 'CFR'/'CID'/'CIF'/'CIO'/'QPE'/'EXT'/'XPE'/'FPE'/'IOM'/'IOV'/'MPE'
 /'KPE'/'MKT'/'MSC'/'OVR'/'STR'/'SUB'/'TRC'/'WPA'/'RWB'/'ITERR'/'CRD'/'MSL'/'GAT';

 // PAR.Error Return = CND.GATADJ Error
 PAR.Error_Return = 'GAT';

 QUIT;

 ENDIF;

 //?Update Pricing Detail with Gate price adjustment
 CASE;

 // IF PAR.Pricing Retrieved Amount is Not Zeros
 IF PAR.Pricing_Retrieved_Amount <> *ZERO;

 //?Internal Routine to update either Order detail Pricing file
 //?in Library Qtemp if Order has not been updated yet, or
 //?Order Detail pricing, if pricing is called
 //?from Post(Update) Order, or Ship Pricing Detail if after Shipping
 EXECUTE FUNCTION(UPD Pricing Detail     IF) TYPE(EXCINTFUN)                     AC1296395;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(PAR.Price_Detail_Sequence);
 {
  //?Execute internal function

  //?Process if Order Nbr is not zero, if zero then not call from O/E
  CASE;

  // IF PAR.Event Called From is Not Price Only
  IF PAR.Event_Called_From = '02'/**/'AO'/'AI';

  CASE;

  // IF PAR.Event Called From is Pre-Update Invoice
  IF PAR.Event_Called_From = **;

  EXECUTE FUNCTION(CRT Ship Dtl Price QtmpCR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1310882;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is Invoice Pricing
  IF PAR.Event_Called_From = '02';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc O/E
  IF PAR.Event_Called_From = 'AO';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc Inv
  IF PAR.Event_Called_From = 'AI';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  ENDIF;

  ENDIF;

 }

 //?Accumulate Final Price
 // PAR.Unit Price = PAR.Unit Price + PAR.Pricing Retrieved Amount
 PAR.Unit_Price = PAR.Unit_Price + PAR.Pricing_Retrieved_Amount;

 ENDIF;

 ENDDO;

 ENDIF;

 //?*** 26 PROCESS COMPONENT DVGADJ IF SELECTED AND IS ACTIVE-*
 CASE;

 // IF DB1.Price Method Componant is DVFADJ
 IF DB1.Price_Method_Componant = 'DVFADJ';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 //?Flat Duty Item Pricing
 DO;

 // Call program RTV Pricing: DVFADJ   XF.
 CALL PROGRAM(RTV Pricing: DVFADJ   XF) ('PBIPXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Error_Return);

 //?Error Routine - Exit if Error
 CASE;

 // IF PAR.Error Return is All Entered Values
 IF PAR.Error_Return = 'CFR'/'CID'/'CIF'/'CIO'/'QPE'/'EXT'/'XPE'/'FPE'/'IOM'/'IOV'/'MPE'
 /'KPE'/'MKT'/'MSC'/'OVR'/'STR'/'SUB'/'TRC'/'WPA'/'RWB'/'ITERR'/'CRD'/'MSL'/'GAT';

 // PAR.Error Return = CND.DVFADJ Error
 PAR.Error_Return = 'DVF';

 QUIT;

 ENDIF;

 //?Update Pricing Detail with Gate price adjustment
 CASE;

 // IF PAR.Pricing Retrieved Amount is Not Zeros
 IF PAR.Pricing_Retrieved_Amount <> *ZERO;

 //?Internal Routine to update either Order detail Pricing file
 //?in Library Qtemp if Order has not been updated yet, or
 //?Order Detail pricing, if pricing is called
 //?from Post(Update) Order, or Ship Pricing Detail if after Shipping
 EXECUTE FUNCTION(UPD Pricing Detail     IF) TYPE(EXCINTFUN)                     AC1296395;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(PAR.Price_Detail_Sequence);
 {
  //?Execute internal function

  //?Process if Order Nbr is not zero, if zero then not call from O/E
  CASE;

  // IF PAR.Event Called From is Not Price Only
  IF PAR.Event_Called_From = '02'/**/'AO'/'AI';

  CASE;

  // IF PAR.Event Called From is Pre-Update Invoice
  IF PAR.Event_Called_From = **;

  EXECUTE FUNCTION(CRT Ship Dtl Price QtmpCR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1310882;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is Invoice Pricing
  IF PAR.Event_Called_From = '02';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc O/E
  IF PAR.Event_Called_From = 'AO';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc Inv
  IF PAR.Event_Called_From = 'AI';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  ENDIF;

  ENDIF;

 }

 //?Accumulate Final Price
 // PAR.Unit Price = PAR.Unit Price + PAR.Pricing Retrieved Amount
 PAR.Unit_Price = PAR.Unit_Price + PAR.Pricing_Retrieved_Amount;

 ENDIF;

 ENDDO;

 ENDIF;

 //?*** 27 PROCESS COMPONANT CCITOV IF SELECTED AND IS ACTIVE-*
 CASE;

 // IF DB1.Price Method Componant is CCITOV
 IF DB1.Price_Method_Componant = 'CCITOV';

 // AND DB1.PD Status is Active
 AND DB1.PD_Status = 'A';

 //?Company Customer Item Overage
 DO;

 // Call program RTV Pricing: CCITOV   XF.
 CALL PROGRAM(RTV Pricing: CCITOV   XF) ('PNS6XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Error_Return);

 //?Error Routine - Exit if Error
 CASE;

 // IF PAR.Error Return is All Entered Values
 IF PAR.Error_Return = 'CFR'/'CID'/'CIF'/'CIO'/'QPE'/'EXT'/'XPE'/'FPE'/'IOM'/'IOV'/'MPE'
 /'KPE'/'MKT'/'MSC'/'OVR'/'STR'/'SUB'/'TRC'/'WPA'/'RWB'/'ITERR'/'CRD'/'MSL'/'GAT';

 // PAR.Error Return = CND.CCITOV Error
 PAR.Error_Return = 'CCI';

 ENDIF;

 //?Update Pricing Detail if Market Overage is not equal to 0.
 CASE;

 // IF PAR.Pricing Retrieved Amount NE WRK.ZERO
 IF PAR.Pricing_Retrieved_Amount <> WRK.ZERO;

 //?Internal Routine to update either Order detail Pricing file
 //?in Library Qtemp if Order has not been updated yet, or
 //?Order Detail pricing, if pricing is called
 //?from Post(Update) Order, or Ship Pricing Detail if after Shipping
 EXECUTE FUNCTION(UPD Pricing Detail     IF) TYPE(EXCINTFUN)                     AC1296395;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Event_Called_From);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(PAR.Price_Detail_Sequence);
 {
  //?Execute internal function

  //?Process if Order Nbr is not zero, if zero then not call from O/E
  CASE;

  // IF PAR.Event Called From is Not Price Only
  IF PAR.Event_Called_From = '02'/**/'AO'/'AI';

  CASE;

  // IF PAR.Event Called From is Pre-Update Invoice
  IF PAR.Event_Called_From = **;

  EXECUTE FUNCTION(CRT Ship Dtl Price QtmpCR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1310882;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is Invoice Pricing
  IF PAR.Event_Called_From = '02';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc O/E
  IF PAR.Event_Called_From = 'AO';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  // IF PAR.Event Called From is AutoCalc Inv
  IF PAR.Event_Called_From = 'AI';

  EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Price_Method_Componant);
  PARAMETER(PAR.Price_Detail_Sequence);
  PARAMETER(PAR.Pricing_Retrieved_Amount);
  PARAMETER('A');
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  // PAR.Price Detail Sequence = PAR.Price Detail Sequence + CON.1
  PAR.Price_Detail_Sequence = PAR.Price_Detail_Sequence + 1;

  ENDIF;

  ENDIF;

 }

 //?Accumulate Final Price
 // PAR.Unit Price = PAR.Unit Price + PAR.Pricing Retrieved Amount
 PAR.Unit_Price = PAR.Unit_Price + PAR.Pricing_Retrieved_Amount;

 ENDIF;

 ENDDO;

 ENDIF;

 //?USER: Exit processing

 //?Convert from CWT to Pricing U/M if Market or Formula Pricing
 CASE;

 // IF PAR.Price Method Type is Market or Formula
 IF PAR.Price_Method_Type = 'F'/'K';

 // OR PAR.Price Method Type is Contract Pricing
 OR ( PAR.Price_Method_Type = 'Q';

 // AND PAR.PMH Price Type is Ceiling Price
 AND PAR.PMH_Price_Type = 'C' );

 // OR PAR.Price Method Type is Published Pricing
 OR PAR.Price_Method_Type = 'P';

 // Call program CLC Cvt Price-From CW  XF.
 CALL PROGRAM(CLC Cvt Price-From CW  XF) ('PDZ2XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Unit_Price);
 PARAMETER(PAR.Price_Adjustment_Amount);

 //?05/05/10 PKD P000205 Sales Price Book: Decimal Places & Ceiling Price
 EXECUTE FUNCTION(Cvt Decimal Places    IF) TYPE(EXCINTFUN)                      AC1988257;
 PARAMETER(PAR.Unit_Price);
 PARAMETER(PAR.Price_Adjustment_Amount);
 PARAMETER(PAR.Decimal_Places_Rounded);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Decimal Places Rounded is Zero
  IF PAR.Decimal_Places_Rounded = *ZERO;

  // LCL.Price 11.0 USR = PAR.Price Adjustment Amount * CON.1 *Rounded
  LCL.Price_11_0_USR = PAR.Price_Adjustment_Amount * 1 'H';

  // PAR.Unit Price = LCL.Price 11.0 USR
  PAR.Unit_Price = LCL.Price_11_0_USR;

  // IF PAR.Decimal Places Rounded is One
  IF PAR.Decimal_Places_Rounded = 1;

  // LCL.Price 11.1 USR = PAR.Price Adjustment Amount * CON.1 *Rounded
  LCL.Price_11_1_USR = PAR.Price_Adjustment_Amount * 1 'H';

  // PAR.Unit Price = LCL.Price 11.1 USR
  PAR.Unit_Price = LCL.Price_11_1_USR;

  // IF PAR.Decimal Places Rounded is Two
  IF PAR.Decimal_Places_Rounded = 2;

  // LCL.Price 11.2 USR = PAR.Price Adjustment Amount * CON.1 *Rounded
  LCL.Price_11_2_USR = PAR.Price_Adjustment_Amount * 1 'H';

  // PAR.Unit Price = LCL.Price 11.2 USR
  PAR.Unit_Price = LCL.Price_11_2_USR;

  // IF PAR.Decimal Places Rounded is Three
  IF PAR.Decimal_Places_Rounded = 3;

  // LCL.Price 11.3 USR = PAR.Price Adjustment Amount * CON.1 *Rounded
  LCL.Price_11_3_USR = PAR.Price_Adjustment_Amount * 1 'H';

  // PAR.Unit Price = LCL.Price 11.3 USR
  PAR.Unit_Price = LCL.Price_11_3_USR;

  // IF PAR.Decimal Places Rounded is Four
  IF PAR.Decimal_Places_Rounded = 4;

  // LCL.Price 11.4 USR = PAR.Price Adjustment Amount * CON.1 *Rounded
  LCL.Price_11_4_USR = PAR.Price_Adjustment_Amount * 1 'H';

  // PAR.Unit Price = LCL.Price 11.4 USR
  PAR.Unit_Price = LCL.Price_11_4_USR;

  ENDIF;

 }

 //?Ceiling Price
 CASE;

 // IF PAR.OD Ceiling Price is Greater than zero
 IF PAR.OD_Ceiling_Price > *ZERO;

 CASE;

 // IF PAR.Unit Price GT PAR.OD Ceiling Price
 IF PAR.Unit_Price > PAR.OD_Ceiling_Price;

 // PAR.Unit Price = PAR.OD Ceiling Price
 PAR.Unit_Price = PAR.OD_Ceiling_Price;

 ENDIF;

 ENDIF;

 ENDIF;

 //?Price has been converted to Pricing U/M Price
 //?Now convert to the 3 U/M's Parms which will also calc Selling
 //?U/M Price.
 // Call program CLC Convert Price Qtys XF.
 CALL PROGRAM(CLC Convert Price Qtys XF) ('PDKGXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.Price_based_on_U_M1_S);
 PARAMETER(PAR.Price_based_on_U_M2_S);
 PARAMETER(PAR.Price_based_on_U_M3_S);
 PARAMETER(PAR.Unit_Price);

 //?U/M - Pricing was moved to Wrk context at the beginning.  If the
 //?Pricing Method = EXT then the "Par.U/M - Price" was changed to the
 //?U/M - Ordered in order to be able to divide the Extended amount by
 //?the quantity order to determine the selling U/M Price, therefore
 //?move back the original value prior to exit.
 // PAR.Pricing Retrieved Amount = PAR.Unit Price
 PAR.Pricing_Retrieved_Amount = PAR.Unit_Price;

 // PAR.U/M - Pricing = WRK.U/M - Pricing
 PAR.UOM_Pricing = WRK.UOM_Pricing;

}


