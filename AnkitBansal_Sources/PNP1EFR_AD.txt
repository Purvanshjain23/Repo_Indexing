// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNP1EFR
// ?Date: 14.08.2025 Time: 03:46:05
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?E10550 JJH 05/17/17 - Edit Customer Item Formula
//?- Add logic to verify that the CIFD Commodity Market field is a
//?  valid Commodity Market Code in the Commodity Market file.
ENDDO;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize subfile header

EXECUTE FUNCTION(Rtv CustItem Prc Elem RT) TYPE(RTVOBJ) FILE(PNF8REP)           AC1981910;
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Item_Code);
PARAMETER('CIPFEE');
PARAMETER(CTL.CIPE_Rate);
PARAMETER(CTL.CIPE_Rate_UOM);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.Price 11.4 1 USR = CTL.CIPE Rate
CTL.Price_11_4_1_USR = CTL.CIPE_Rate;

EXECUTE FUNCTION(Rtv CustItem Prc Elem RT) TYPE(RTVOBJ) FILE(PNF8REP)           AC1981910;
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Item_Code);
PARAMETER('CIFRTO');
PARAMETER(CTL.Cust_Item_Frt_Rate_USR);
PARAMETER(CTL.Cust_Item_Frt_Rt_UOM_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.Price 11.4 2 USR = CTL.Cust Item Frt Rate USR
CTL.Price_11_4_2_USR = CTL.Cust_Item_Frt_Rate_USR;

//?USER: Validate subfile control

//?DEFAULT: Fee UOM
CASE;

// IF CTL.CIPE Rate is Not Zeros
IF CTL.CIPE_Rate <> *ZERO;

// CTL.CIPE Rate UOM = CND.Hundred Weight
CTL.CIPE_Rate_UOM = 'CW';

ENDIF;

//?DEFAULT: Customer Item Freight
CASE;

// IF CTL.Cust Item Frt Rate USR is Not Zeros
IF CTL.Cust_Item_Frt_Rate_USR <> *ZERO;

// CTL.Cust Item Frt Rt UOM USR = CND.Hundred Weight
CTL.Cust_Item_Frt_Rt_UOM_USR = 'CW';

ENDIF;

//?CHG: Processing Fee
CASE;

// IF CTL.CIPE Rate NE CTL.Price 11.4 1 USR
IF CTL.CIPE_Rate <> CTL.Price_11_4_1_USR;

EXECUTE FUNCTION(Upd CustItem Prc Elem RT) TYPE(RTVOBJ) FILE(PNF8REP)           AC1982457;
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Item_Code);
PARAMETER('CIPFEE');
PARAMETER(CTL.CIPE_Rate);
PARAMETER(CTL.CIPE_Rate_UOM);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(Crt CustItem Prc Elem CR) TYPE(CRTOBJ) FILE(PNF8REP)           AC1981899;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.PE_Price_Element_Code);
 PARAMETER(PAR.CIPE_Rate);
 PARAMETER(PAR.CIPE_Rate_UOM);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Create_Date);
 PARAMETER(PAR.Create_Time);
 PARAMETER(PAR.Create_User);
 PARAMETER(PAR.Create_Program);
 PARAMETER(PAR.Change_Date);
 PARAMETER(PAR.Change_Time);
 PARAMETER(PAR.Change_User);
 PARAMETER(PAR.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

 }

 //?USER: Process Data record

 EXECUTE FUNCTION(Chg CustItem Prc Elem CH) TYPE(CHGOBJ) FILE(PNF8REP)           AC1981900;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.PE_Price_Element_Code);
 PARAMETER(PAR.CIPE_Rate);
 PARAMETER(PAR.CIPE_Rate_UOM);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?CHG: Freight
CASE;

// IF CTL.Cust Item Frt Rate USR NE CTL.Price 11.4 2 USR
IF CTL.Cust_Item_Frt_Rate_USR <> CTL.Price_11_4_2_USR;

EXECUTE FUNCTION(Upd CustItem Prc Elem RT) TYPE(RTVOBJ) FILE(PNF8REP)           AC1982457;
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Item_Code);
PARAMETER('CIFRTO');
PARAMETER(CTL.Cust_Item_Frt_Rate_USR);
PARAMETER(CTL.Cust_Item_Frt_Rt_UOM_USR);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(Crt CustItem Prc Elem CR) TYPE(CRTOBJ) FILE(PNF8REP)           AC1981899;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.PE_Price_Element_Code);
 PARAMETER(PAR.CIPE_Rate);
 PARAMETER(PAR.CIPE_Rate_UOM);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Create_Date);
 PARAMETER(PAR.Create_Time);
 PARAMETER(PAR.Create_User);
 PARAMETER(PAR.Create_Program);
 PARAMETER(PAR.Change_Date);
 PARAMETER(PAR.Change_Time);
 PARAMETER(PAR.Change_User);
 PARAMETER(PAR.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

 }

 //?USER: Process Data record

 EXECUTE FUNCTION(Chg CustItem Prc Elem CH) TYPE(CHGOBJ) FILE(PNF8REP)           AC1981900;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.PE_Price_Element_Code);
 PARAMETER(PAR.CIPE_Rate);
 PARAMETER(PAR.CIPE_Rate_UOM);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Validate subfile record fields

//?F4=Prompt
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

//?Market Code
CASE;

// IF PGM.*Cursor field <IS> RCD.CIFD Commodity Market
IF PGM.*Cursor_field = RCD.CIFD_Commodity_Market;

// Call program SEL Commod. Mkts Actve SR.
CALL PROGRAM(SEL Commod. Mkts Actve SR) ('PDEDSRR');
PARAMETER(RCD.CIFD_Commodity_Market);

ENDIF;

//?Price Group
CASE;

// IF PGM.*Cursor field <IS> RCD.CIFD Commodity Price Grp
IF PGM.*Cursor_field = RCD.CIFD_Commodity_Price_Grp;

// Call program SEL Commod Grp Active  SR.
CALL PROGRAM(SEL Commod Grp Active  SR) ('PDECSRR');
PARAMETER(RCD.CIFD_Commodity_Price_Grp);

ENDIF;

ENDIF;

//?DEFAULT: Record Status
CASE;

// IF RCD.Record Status is *blank
IF RCD.Record_Status = *BLANK;

// RCD.Record Status = CND.Active
RCD.Record_Status = 'A';

ENDIF;

//?DEFAULT: Percent of Market
CASE;

// IF RCD.CIFD Percent of Market is equal to zero
IF RCD.CIFD_Percent_of_Market = *ZERO;

// RCD.CIFD Percent of Market = CON.100
RCD.CIFD_Percent_of_Market = 100;

ENDIF;

//?VAL: Percent of Market
CASE;

// IF RCD.CIFD Percent of Market is Less than zero
IF RCD.CIFD_Percent_of_Market < *ZERO;

// Send error message - 'Yield must be greater than Zero'
ERROR(USR4120);
MSGPARM(RCD.CIFD_Yield_Percent);

ENDIF;

//?E10550 JJH 05/17/17 - Vaidate CIFD Commodity Market is a valid
//?  Commodity Market Code in Commodity Market file.
EXECUTE FUNCTION(Val Commodity Markets  RT) TYPE(RTVOBJ) FILE(OMFYREP)          AC1824613;
PARAMETER(RCD.CIFD_Commodity_Market);
PARAMETER(NLL.Commodity_Market_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


//?SNDERRMSG if invalid Commodity Market Code
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Commodity Market not found'
ERROR(USR2162);
MSGPARM(RCD.CIFD_Commodity_Market);

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Cust Item Formula IF) TYPE(EXCINTFUN) FILE(PNF9REP)        AC1981928;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.CIFD_Sequence_Number);
PARAMETER(RCD.CIFD_Formula_Value_Type);
PARAMETER(RCD.CIFD_Fromula_Value_Name);
PARAMETER(RCD.CIFD_Commodity_Market);
PARAMETER(RCD.CIFD_Commodity_Price_Grp);
PARAMETER(RCD.CIFD_Market_Prem_Deduct);
PARAMETER(RCD.CIFD_Percent_of_Market);
PARAMETER(RCD.CIFD_Yield_Percent);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Next Seq Number   RT) TYPE(RTVOBJ) FILE(PNF9REP)           AC1981927;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.CIFD_Sequence_Number);
 {
  //?USER: Processing if Data record not found

  // PAR.CIFD Sequence Number = CON.1
  PAR.CIFD_Sequence_Number = 1;

  //?USER: Process Data record

  // PAR.CIFD Sequence Number = DB1.CIFD Sequence Number + CON.1
  PAR.CIFD_Sequence_Number = DB1.CIFD_Sequence_Number + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Cust Item Formula CR) TYPE(CRTOBJ) FILE(PNF9REP)           AC1981847;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.CIFD_Sequence_Number);
 PARAMETER(PAR.CIFD_Formula_Value_Type);
 PARAMETER(PAR.CIFD_Fromula_Value_Name);
 PARAMETER(PAR.CIFD_Commodity_Market);
 PARAMETER(PAR.CIFD_Commodity_Price_Grp);
 PARAMETER(PAR.CIFD_Market_Prem_Deduct);
 PARAMETER(PAR.CIFD_Percent_of_Market);
 PARAMETER(PAR.CIFD_Yield_Percent);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Create_Date);
 PARAMETER(PAR.Create_Time);
 PARAMETER(PAR.Create_User);
 PARAMETER(PAR.Create_Program);
 PARAMETER(PAR.Change_Date);
 PARAMETER(PAR.Change_Time);
 PARAMETER(PAR.Change_User);
 PARAMETER(PAR.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

 }

}


//?USER: Delete DBF record

EXECUTE FUNCTION(Del Cust Item Formula DL) TYPE(DLTOBJ) FILE(PNF9REP)           AC1981849;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.CIFD_Sequence_Number);

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Cust Item Formula CH) TYPE(CHGOBJ) FILE(PNF9REP)           AC1981848;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.CIFD_Sequence_Number);
PARAMETER(RCD.CIFD_Formula_Value_Type);
PARAMETER(RCD.CIFD_Fromula_Value_Name);
PARAMETER(RCD.CIFD_Commodity_Market);
PARAMETER(RCD.CIFD_Commodity_Price_Grp);
PARAMETER(RCD.CIFD_Market_Prem_Deduct);
PARAMETER(RCD.CIFD_Percent_of_Market);
PARAMETER(RCD.CIFD_Yield_Percent);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Create_Date);
PARAMETER(RCD.Create_Time);
PARAMETER(RCD.Create_User);
PARAMETER(RCD.Create_Program);
PARAMETER(RCD.Change_Date);
PARAMETER(RCD.Change_Time);
PARAMETER(RCD.Change_User);
PARAMETER(RCD.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

}


