// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKKTXFR
// ?Date: 14.08.2025 Time: 02:52:00
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?DOC: Increased Buy Order Number field length from 5 to 7.
DO;

//?H16853 ISE 11/09/2020 - Recompiled due to change in Buy Order Number
ENDDO;

//?DOC: Change Buy Order Header and Tattoo Header
DO;

//?Buy Order with Buy Order Type = O and its associated Market
//?and Subject Tattoos are changed as follows:
//?BOH     Payment Type = C
//?        Carcass Merit Program = SB3
//?        Commodity Market Code = ISM
//?        Commodity Group Code = SG
//?        Market Date Method = CUR
//?        Pricing Option Code = CBP
//?TH      Payment Type = C
//?        Payment Status = SC
ENDDO;

//?DOC: Create Producer Contract Damage
DO;

//?At the same time the Buy Order Header and the Tattoo Header
//?are changed, create the actual payment (Replacement Cost)
//?information in the Producer Contract Damage.
//?After the Payment Edit has finished.  We would run another
//?program that will update the Producer Contract Damage with
//?new calculated Gross and etc.
ENDDO;

EXECUTE FUNCTION(AGP Int BO/TH Crt PCD RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1198995;
PARAMETER(PAR.PC_Contract_Code);
PARAMETER(PAR.TH_Source_Code);
PARAMETER(PAR.BOH_Commodity_Market_Code);
PARAMETER(PAR.BOH_Commodity_Price_Group);
PARAMETER(PAR.BOH_Market_Date_Method);
PARAMETER(PAR.PO_Option_Code);
PARAMETER(PAR.CMP_Program_Code);
PARAMETER(PAR.BOH_Payment_Type);
PARAMETER(PAR.TH_Payment_Sts);
PARAMETER(PAR.Date_From_USR);
PARAMETER(PAR.Date_To_USR);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.BOH Kill Date GE PAR.Date From USR
 IF DB1.BOH_Kill_Date >= PAR.Date_From_USR;

 // AND DB1.BOH Kill Date LE PAR.Date To   USR
 AND DB1.BOH_Kill_Date <= PAR.Date_To_USR;

 EXECUTE FUNCTION(Rtv Producer Type     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1199555;
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(WRK.SR_Source_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.SR Source Code EQ PAR.TH Source Code
 IF WRK.SR_Source_Code = PAR.TH_Source_Code;

 // PAR.BOH Market Add/Deduct = CON.*ZERO
 PAR.BOH_Market_Add_Deduct = *ZERO;

 // PAR.BOH Quote Price Type = CND.Not Entered
 PAR.BOH_Quote_Price_Type = *BLANK;

 // PAR.BOH Quoted Base Mkt Price = CON.*ZERO
 PAR.BOH_Quoted_Base_Mkt_Price = *ZERO;

 EXECUTE FUNCTION(AGP Init BOH          CH) TYPE(CHGOBJ) FILE(PKAWCPP)           AB1198996;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOH_Payment_Type);
 PARAMETER(PAR.BOH_Market_Add_Deduct);
 PARAMETER(PAR.BOH_Quote_Price_Type);
 PARAMETER(PAR.BOH_Quoted_Base_Mkt_Price);
 PARAMETER(PAR.BOH_Commodity_Market_Code);
 PARAMETER(PAR.BOH_Commodity_Price_Group);
 PARAMETER(PAR.BOH_Market_Date_Method);
 PARAMETER(PAR.PO_Option_Code);
 PARAMETER(PAR.CMP_Program_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 EXECUTE FUNCTION(AGP Init TH           RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1199001;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(PAR.PC_Contract_Code);
 PARAMETER(PAR.BOH_Payment_Type);
 PARAMETER(PAR.TH_Payment_Sts);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.TH Hog Class Type is Resale
  IF DB1.TH_Hog_Class_Type = 'R';

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Year/Quarter      RT) TYPE(RTVOBJ) FILE(PKD0CPP)           AB1199074;
  PARAMETER(PAR.PC_Contract_Code);
  PARAMETER(PAR.Calendar_Year);
  PARAMETER(PAR.Calendar_Quarter);
  PARAMETER(DB1.TH_Kill_Date);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF PAR.TH Kill Date GE DB1.Calendar Quarter Start
   IF PAR.TH_Kill_Date >= DB1.Calendar_Quarter_Start;

   // AND PAR.TH Kill Date LE DB1.Calendar Quarter End
   AND PAR.TH_Kill_Date <= DB1.Calendar_Quarter_End;

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

   ENDIF;

  }

  //?Head Analyzed Percent
  CASE;

  // IF DB1.TH Head Killed is Not Zero
  IF DB1.TH_Head_Killed <> *ZERO;

  // Head Analyzed Percent
  PAR.Head_Analyzed_Percent = ( DB1.TH_Head_Accepted / DB1.TH_Head_Killed 'H' ) * 100 'H';

  ENDIF;

  EXECUTE FUNCTION(Rtv Exp Paid By Who) TYPE(RTVOBJ) FILE(PKAXCPP)                AB1193261;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(WRK.BOL_Freight_Exp_Paid_By);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Seaboard Freight
  CASE;

  // IF WRK.BOL Freight Exp Paid By is Seaboard
  IF WRK.BOL_Freight_Exp_Paid_By = 'S';

  // PAR.Additional Rep Cost Amt = DB1.TH Freight Amount
  PAR.Additional_Rep_Cost_Amt = DB1.TH_Freight_Amount;

  //?Seaboard Freight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Additional Rep Cost Amt = CON.*ZERO
  PAR.Additional_Rep_Cost_Amt = *ZERO;

  ENDIF;

  //?Calc Additional Replacement Cost if found for producer
  EXECUTE FUNCTION(Rtv Prdcr Rplcmnt Cst RT) TYPE(RTVOBJ) FILE(PKD2CPP)           AB1200620;
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(PAR.PRC_Replacement_Cost);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?  Calc the additional replacement cost
  CASE;

  // IF PAR.PRC Replacement Cost is Not Zeros
  IF PAR.PRC_Replacement_Cost <> *ZERO;

  // Additional Rep Cost
  PAR.Additional_Rep_Cost_Amt = PAR.Additional_Rep_Cost_Amt + ( DB1.TH_Head_Killed
  * PAR.PRC_Replacement_Cost 'H' );

  ENDIF;

  // Actual Rep Cost
  PAR.Actual_Rep_Cost_Amt = DB1.TH_Payment_Gross + PAR.Additional_Rep_Cost_Amt;

  //?Actual Rep Cost /HD
  CASE;

  // IF DB1.TH Head Killed is Not Zero
  IF DB1.TH_Head_Killed <> *ZERO;

  // Actual Rep Cost /Hd
  PAR.Actual_Rep_Cost_Hd = PAR.Actual_Rep_Cost_Amt / DB1.TH_Head_Killed 'H';

  ENDIF;

  //?Actual Rep Cost /Lv CWT
  CASE;

  // IF DB1.TH Live Wgt is Greater then Zero
  IF DB1.TH_Live_Wgt > *ZERO;

  // Actual Rep Cost /Lv CWT
  PAR.Actual_Rep_Cost_Lv_CWT = PAR.Actual_Rep_Cost_Amt / ( DB1.TH_Live_Wgt / 100 'H' ) 'H';

  ENDIF;

  // Additional Contract Amt
  PAR.Additional_Contract_Amt = DB1.TH_Head_Killed * 1 'H';

  EXECUTE FUNCTION(Upd Actual Pay        RT) TYPE(RTVOBJ) FILE(PKD1CPP)           AB1199121;
  PARAMETER(PAR.PC_Contract_Code);
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(PAR.Calendar_Year);
  PARAMETER(PAR.Calendar_Quarter);
  PARAMETER(DB1.TH_Live_Wgt);
  PARAMETER(DB1.TH_Adj_Live_Wgt);
  PARAMETER(DB1.TH_Avg_Live_Wgt);
  PARAMETER(DB1.TH_Head_Killed);
  PARAMETER(DB1.TH_Hot_Wgt);
  PARAMETER(DB1.TH_Avg_Hot_Wgt);
  PARAMETER(DB1.TH_Head_Accepted);
  PARAMETER(PAR.Head_Analyzed_Percent);
  PARAMETER(DB1.TH_Payment_Gross);
  PARAMETER(PAR.Additional_Rep_Cost_Amt);
  PARAMETER(PAR.Actual_Rep_Cost_Amt);
  PARAMETER(PAR.Actual_Rep_Cost_Hd);
  PARAMETER(PAR.Actual_Rep_Cost_Lv_CWT);
  PARAMETER(PAR.Contract_Payment_Gross);
  PARAMETER(PAR.Additional_Contract_Amt);
  PARAMETER(PAR.Contract_Cost_Amt);
  PARAMETER(PAR.Contract_Cost_Hd);
  PARAMETER(PAR.Contract_Cost_Lv_CWT);
  PARAMETER(PAR.Actual_Contract_Hd);
  PARAMETER(PAR.Actual_Contract_Lv_CWT);
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.PL_Location_Code);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Crt Prd Cntrct Damage CR) TYPE(CRTOBJ) FILE(PKD1CPP)           AB1199082;
   PARAMETER(PAR.PC_Contract_Code);
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.BOH_Buy_Order_Number);
   PARAMETER(PAR.BOL_Load_Number);
   PARAMETER(PAR.TH_Tattoo_Number);
   PARAMETER(PAR.TH_Kill_Date);
   PARAMETER(PAR.Calendar_Year);
   PARAMETER(PAR.Calendar_Quarter);
   PARAMETER(PAR.TH_Live_Wgt);
   PARAMETER(PAR.TH_Adj_Live_Wgt);
   PARAMETER(PAR.TH_Avg_Live_Wgt);
   PARAMETER(PAR.TH_Head_Killed);
   PARAMETER(PAR.TH_Hot_Wgt);
   PARAMETER(PAR.TH_Avg_Hot_Wgt);
   PARAMETER(PAR.TH_Head_Accepted);
   PARAMETER(PAR.Head_Analyzed_Percent);
   PARAMETER(PAR.TH_Payment_Gross);
   PARAMETER(PAR.Additional_Rep_Cost_Amt);
   PARAMETER(PAR.Actual_Rep_Cost_Amt);
   PARAMETER(PAR.Actual_Rep_Cost_Hd);
   PARAMETER(PAR.Actual_Rep_Cost_Lv_CWT);
   PARAMETER(PAR.Contract_Payment_Gross);
   PARAMETER(PAR.Additional_Contract_Amt);
   PARAMETER(PAR.Contract_Cost_Amt);
   PARAMETER(PAR.Contract_Cost_Hd);
   PARAMETER(PAR.Contract_Cost_Lv_CWT);
   PARAMETER(PAR.Actual_Contract_Hd);
   PARAMETER(PAR.Actual_Contract_Lv_CWT);
   PARAMETER(PAR.PD_Producer_Code);
   PARAMETER(PAR.PL_Location_Code);
   PARAMETER(PAR.RS_User_Changed);
   PARAMETER(PAR.RS_Date_Changed);
   PARAMETER(PAR.RS_Time_Changed);
   PARAMETER(PAR.RS_Record_Status);
   PARAMETER(PAR.RS_Job);
   PARAMETER(PAR.RS_Program);
   PARAMETER(PAR.RS_User_Added);
   PARAMETER(PAR.RS_Date_Added);
   PARAMETER(PAR.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?Execute internal function

     // PAR.RS Record Status = CND.Active
     PAR.RS_Record_Status = 'A';

     // PAR.RS User Added = JOB.*USER
     PAR.RS_User_Added = JOB.*USER;

     // PAR.RS Date Added = JOB.*Job date
     PAR.RS_Date_Added = JOB.*Job_date;

     // PAR.RS Time Added = JOB.*Job time
     PAR.RS_Time_Added = JOB.*Job_time;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

    }

   }

   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Actual Pay        CH) TYPE(CHGOBJ) FILE(PKD1CPP)           AB1199083;
   PARAMETER(PAR.PC_Contract_Code);
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.BOH_Buy_Order_Number);
   PARAMETER(PAR.BOL_Load_Number);
   PARAMETER(PAR.TH_Tattoo_Number);
   PARAMETER(PAR.TH_Kill_Date);
   PARAMETER(PAR.Calendar_Year);
   PARAMETER(PAR.Calendar_Quarter);
   PARAMETER(PAR.TH_Live_Wgt);
   PARAMETER(PAR.TH_Adj_Live_Wgt);
   PARAMETER(PAR.TH_Avg_Live_Wgt);
   PARAMETER(PAR.TH_Head_Killed);
   PARAMETER(PAR.TH_Hot_Wgt);
   PARAMETER(PAR.TH_Avg_Hot_Wgt);
   PARAMETER(PAR.TH_Head_Accepted);
   PARAMETER(PAR.Head_Analyzed_Percent);
   PARAMETER(PAR.TH_Payment_Gross);
   PARAMETER(PAR.Additional_Rep_Cost_Amt);
   PARAMETER(PAR.Actual_Rep_Cost_Amt);
   PARAMETER(PAR.Actual_Rep_Cost_Hd);
   PARAMETER(PAR.Actual_Rep_Cost_Lv_CWT);
   PARAMETER(PAR.Additional_Contract_Amt);
   PARAMETER(PAR.PD_Producer_Code);
   PARAMETER(PAR.PL_Location_Code);
  }

  EXECUTE FUNCTION(AGP Init TH           CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1199002;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(PAR.TH_Payment_Sts);
  PARAMETER(PAR.BOH_Payment_Type);
  ENDIF;

 }

 ENDIF;

 ENDIF;

}


