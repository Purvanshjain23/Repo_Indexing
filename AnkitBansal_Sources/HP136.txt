      *****************  RPG PROGRAM HEADING  ***********************
      *
      * SYSTEM:      Hog Production
      * PROGRAM:     HP136
      * TITLE:       Maintain Check
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     06/14/95
      *
      * FUNCTION: This program maintains the check header and check detail.
      *           It has two screens.
      *
      *              Screen 1 - Check header info
      *
      *              Screen 2 - Check detail lines in subfile
      *                         No entry fields in control record
      *
      *
      *           This programs creates, deletes, updates files for
      *           a specific check. This programs is called from the function
      *           HP435-Work with Checks.
      *
      *           It has selectors and positioners.
      *           It has F4-Prompt logic.
      *           It uses the standard message handling program.
      *
      *        *  Program HP335 is called to distribute the deduction/add-ons
      *           keyed by the user for a check to the various check detail
      *           records.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 02/17/98  LeAnne Fedor
      *           Rewrote in RPGIV.  Also, the DSPF now has 2 screens instead
      *           of one. Also, added the following fields to the
      *           database for sales movement detail and check detail:
      *                     condemned head and pounds
      *                     yard dead head and pounds
      *
      *
      * 08/15/00  LeAnne Fedor
      *           Rindy Powell at Guymon continually had problems in 'balancing' her
      *           checks in HPS to the values in HPE.  This was often occurring because
      *           HPE users change their data after Rindy has interfaced it...but
      *           before she balances. Purva Droge wrote a SYNON function that I can
      *           call to reset the flag field in the HPE data that controls the
      *           data that is passed. So, when Rindy deletes a check from the plant
      *           I'll call Purva's program which will reset the flag in the HPE data.
      *           Then, Rindy can get the fresh data by interfacing again.
      *
      * 05/26/04  LeAnne Fedor
      *           Added Check Number to display in the control record on Screen 2.
      *
      * 07/02/09  LeAnne Ramsey
      *           Recompile only. Added new field 'Continuous Flow Flag' to Hog Group file.
      *
      * 11/09/17  Brad Baden    E010812
      *           Added Business Office as an input parameter to
      *           display on the screen.
      *
      *  3/16/20  Brad Baden    E16183
      *           Modify the program to allow Debbie Wright and Brad Baden
      *           to update check amounts in closed period 12 in 2019.
      *           This approach approved by Purva and Barb.
      /eject
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhpd136    cf   e             workstn
     F                                     sfile(hp136s2:hdrrn)
     F                                     infds(iofeed)
      *
     Fhsp034    if   e           k disk
      *  hog groups
      *
      *
     Fhsl034d   if   e           k disk
     F                                     rename(hgrec:hgrecd)
      *  hog groups
      *
      *
     Fhsp053    if   e           k disk
      *  movement status codes
      *
      *
     Fhsp063    uf a e           k disk    commit
      *  check header
      *
      *
     Fhsp064    uf a e           k disk    commit
      *  check detail
      *
      *
     Fhsl064b   if   e           k disk
     F                                     rename(cdrec:cdrecb)
      *  check detail
      *
      *
     Fhsp065    uf   e           k disk    commit
     F                                     usropn
      *  check adjustments
      *
      *
     Fhsp066    if   e           k disk
      *  sale type codes
      *
      *
     Fhsl079a   if   e           k disk
      *  sale type report codes
      *
      *
     Fhsp084    uf   e           k disk    commit
      *  sales movement header
      *
      *
     Fhsp085    uf   e           k disk    commit
      *  sales movement detail
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D create          c                   'CREATE'
     D revise          c                   'REVISE'
     D delete          c                   'DELETE'
     D view            c                   'VIEW  '
     D select          c                   'SELECT'
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D scrn1           c                   'SCRN1 '
     D set2            c                   'SET2  '
     D scrn2           c                   'SCRN2 '
     D exit            c                   'EXIT  '
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      * Define array for movement numbers on check detail lines.
      *
     D move            s              7  0 dim(200)
     D moveelem        c                   const(%elem(move))
      *
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D action          s                   like(mode)
     D routne          s              6
     D maxrrn          s              4  0
     D reset           s              1    inz('N')
     D notflg          s              1    inz('N')
     D rtncd           s              2
      *
      *
      * Workfields required for subfile paging--see initialization
      * subroutine.
      *
     D count           s              3  0
     D wkflow          s                   like(idflow)
     D wkplin          s              3  0
     D wkrlin          s              3  0
     D wklnno          s                   like(cdlnno)
     D wkdiff          s                   like(count)
     D wkfld           s                   like(count)
     D wkrmdr          s                   like(count)
      *
      *
      * Control fields
      *
     D first1          s              1    inz('Y')
     D hdrentfl        s              1    inz('N')
     D hdrerrfl        s              1    inz('N')
      *
     D topfl           s              1    inz('N')
     D dtlentfl        s              1    inz('N')
     D dtlerrfl        s              1    inz('N')
     D lineokfl        s              1    inz('Y')
      *
     D livefl          s              1    inz('N')
     D carcfl          s              1    inz('N')
     D paylivefl       s              1    inz('N')
     D paycarcfl       s              1    inz('N')
      *
     D closedfl        s              1    inz('N')
     D postedfl        s              1    inz('N')
      *
      *
      * Parm fields
      *
     D oualph          s             40
     D ouajd           s                   like(chcvno)
     D inat1           s              3
     D inajd           s                   like(chcvno)
     D jdefl           s              1
     D incocd          s              3
     D inbocd          s              5
     D d1bocd          s              5
     D c2bocd          s              5
      *
     D xxdspchno       s                   like(chchno)
     D xxtpcd          s                   like(d2tpcd)
     D xxtpds          s             20
      *
     D xxmdy           s              6
     D xxlb            s              5
     D xxmvsn          s              7
     D xxchno          s              7
     D xxvouch         s              8  0
     D xxcvno          s              8
     D xxhgcd          s                   like(hghgcd)
     D xxstcd          s                   like(ststcd)
     D xxstds          s                   like(ststds)
     D xxreturn        s              7
      *
      *
      * Workfields
      *
     D wkkldt          s                   like(cdkldt)
     D wkudate         s                   like(chchdt)
     D wkmvsn          s                   like(cdmvsn)
     D wkcvno          s                   like(chcvno)
     D wklvlb          s                   like(cdlvlb)
     D wkcrlb          s                   like(cdcrlb)
     D wkchdt          s                   like(chchdt)
     D wkshhd          s                   like(sgshhd)
     D wkarhd          s                   like(sgshhd)
     D wkcram          s                   like(chcham)
     D wkcwt           s             15  4
      *
      *
      * Save fields
      *
     D svchdt          s                   like(chchdt)
     D svcvno          s                   like(chcvno)
     D svchno          s                   like(chchno)
      *
      *
      *
      * Array indexes
      *
     D x               s              3  0
     D y               s              3  0
      *
      *
      * Workfields for date manipulation
      *
     D wkcymdiso       s               D   datfmt(*iso)
      *
      *
      /eject
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *------------------------------------------------------------------
      * Definition for external data area 'DAAPER' for accounting period
      *------------------------------------------------------------------
      *
     D dsdaaper       uds                  dtaara(daaper)
     D  daccyy                        4s 0
     D  daper                         2s 0
     D  dabpdt                        8s 0
     D  daepdt                        8s 0
     D  dapgfl                        1a
     D  dappfl                        1a
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name msgfil must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: pgmDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      * Standard subfile option conversion
      *---------------------------------------------------------------
     D                 ds                  inz
     D d2opt                          2
     D   wkopt1                       1    overlay(d2opt)
     D   wkopt2                       1    overlay(d2opt:2)
      *
      *
      *
      *---------------------------------------------------------------
      * Date formats for flipping dates between ccyymmdd and mmddyy
      *---------------------------------------------------------------
      *
     D wkmmddyy        ds                  inz
     D   wkmdy                        6  0
     D   wkmm                         2  0 overlay(wkmdy:1)
     D   wkdd                         2  0 overlay(wkmdy:3)
     D   wkyy                         2  0 overlay(wkmdy:5)
     D   wkalphmdy                    6
      *
      *
     D wkccyymmdd      ds                  inz
     D   wkcymd                       8  0
     D   wkccyy                       4  0 overlay(wkcymd:1)
     D   wkcen                        2  0 overlay(wkcymd:1)
     D   wkyer                        2  0 overlay(wkcymd:3)
     D   wkmon                        2  0 overlay(wkcymd:5)
     D   wkday                        2  0 overlay(wkcymd:7)
      *
      *
      * period/year/users allowed to fix amounts in a closed period
      *
     D  fxsysvala      DS
     D  fxyesno                1      1
     D  fxperiod               2      3  0
     D  fxyear                 4      7  0
     D  fxuser1                8     17
     D  fxuser2               18     27
     D  fxuser3               28     37
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
      *---------------------------------------------------------------
      *  STAND ALONE FIELDS
      *---------------------------------------------------------------
      *
     D fxreturn        s              7
     D fxjuldte        s              5  0
     D fxacctyr        s              4  0
     D fxacctpd        s              2  0
     D fxweek          s              3  0
     D fxdayowk        s              1
     D fxweekno        s              2  0
     D fxhpspic        s              5  0
     D fxhpscyr        s              4  0
     D fxweecwk        s              2  0
     D fxchkdate       s              7  0
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
      *
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
      *
     C     routne        caseq     set2          $set2
     C     routne        caseq     scrn2         $scrn2
      *
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * $set1 - set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * Close the user-controlled file for adjustments.  If you are in
      * CREATE mode, you will be closing the temporary file in QTEMP.
      * Otherwise, you will be closing the production file.  You must
      * close the file so that the clear of the temporary file will work.
      *
     C                   close     hsp065
      *
      * If the user is in CREATE mode, clear the screen fields.
      *
     C                   select
     C                   when      mode = create
     C                   clear                   hp136r1
     C                   reset                   dfmode
     C                   reset                   sdpgm
     C                   reset                   sdusr
     C                   reset                   sdjob
     C                   eval      hdrentfl = no
     C                   eval      hdrerrfl = no
     C                   call      'HP136ACL'
     C                   other
      *
     C                   eval      hdrentfl = yes
     C                   eval      hdrerrfl = no
      *
     C                   reset                   d1stcd
     C                   reset                   d1cvno
     C                   reset                   d1cnam
     C                   reset                   d1chno
     C                   reset                   d1chdtmdy
     C                   reset                   d1cham
      *
      *
      * Verify the check still exists
      *
     C     key03         chain(n)  hsp063                             92
     C                   if        *in92 = *on                                  If not found
     C                   eval      notflg = yes
     C                   eval      hdrerrfl = yes
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00352'     mgid(e)
     C                   clear                   mgw
     C                   movel     d1chno        xxchno
     C                   movea     xxchno        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   else
      *
      * Retrieve sale type description
      *
     C     d1stcd        chain     hsp066                             92
     C                   if        *in92 = *off
     C                   eval      d1stds = ststds
     C                   else
     C                   eval      d1stds = 'UNKNOWN'
     C                   endif
      *
     C                   endif                                                  If not found
     C                   endsl
      *
      * Open the user-controlled file for adjustments.  If you are in
      * CREATE mode, you will be opening the temporary file in QTEMP;
      * otherwise, you will be opening the production file.
      *
     C                   open      hsp065
      *
      *  Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $scrn1 - Perform operator I/O for screen 1
      *---------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      *
      * Set the indicators to control screen fields
      *
     C                   exsr      $ind
      *
      * Accumulate total adjustments for screen 1 and make final
      * calculations and edits of total dollars
      *
     C                   exsr      $totaj
     C                   exsr      $calc
      *
      * Issue some useful, instructional messages to the user!
      *
     C                   exsr      $instruct
      *
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to CRT
      *
     C                   write     hp136k1
     C                   write     hp136ec
     C                   exfmt     hp136r1
      *
      * Clear all messages
      *
     C                   exsr      $clmsg
      *
      *
      * Reset action to be equal to the incoming mode.  This is required
      * in case the user took F11-Delete and got an error on the
      * deletion and now needs to be able to change the record and take
      * an action other than delete
      *
     C                   eval      action = mode
      *
      * Process user's entry and set routine
      *
     C                   select
      *
     C                   when      *in03 = *on                                  F3-exit
     C                   move      *blank        rtncd
     C                   eval      routne = exit
      *
     C                   when      notflg = yes                                 Check gone
     C                   eval      routne = set1
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
     C                   exsr      $edit1
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   rolbk
     C                   exsr      $set1
     C                   eval      reset = no
     C                   exsr      $set2
     C                   eval      routne = scrn1
      *
     C                   when      *in09 = *on                                  F9-accept
     C                   exsr      $edit1
     C                   exsr      $edit2
     C                   exsr      $calc
     C                   if        error = 0
     C                   exsr      $accept
     C                   commit
     C                   else
     C                   eval      routne = scrn1
     C                   endif
      *
     C                   when      *in11 = *on                                  F11-delete
     C                   exsr      $dltch
     C                   exsr      $dltcd
     C                   exsr      $dltaj
      *
      * If this is a check that was interfaced from the HPE system, call
      * Purva's SYNON program to reset the interface flags in HPE so that
      * the check can be brought over a second time.
      *
     C                   if        svcvno = 360516 and
     C                             chstcd = 'MRKTS'
     C                   call      'PKV2XFR'
     C                   parm      *blank        xxreturn
     C                   parm      svchno        xxvouch
     C                   endif
     C                   commit
     C                   eval      routne = exit
      *
     C                   when      *in13 = *on                                  F13=deductions/addon
     C                   call      'HP135'
     C                   parm                    inbocd
     C                   parm                    svcvno
     C                   parm                    svchno
     C                   parm                    svchdt
     C                   parm      d1chno        xxdspchno
     C                   parm                    rtncd
     C                   eval      routne = scrn1
     C
      *
     C                   when      *in14 = *on                                  F14-check detail
     C                   exsr      $clmsg
     C                   exsr      $edit1
     C                   if        hdrentfl = yes and
     C                             hdrerrfl = no
      *
     C                   if        dtlentfl = no
     C                   eval      routne = set2
     C                   else
     C                   eval      routne = scrn2
     C                   endif
     C                   endif
      *
     C                   other
      *
      * User pressed 'ENTER'
      *
     C                   exsr      $edit1
     C                   endsl
      *
     C                   endsr
      /EJECT
      *-------------------------------------------------------------------
      * $instruct - Issue some useful, instructional messages to the user
      *-------------------------------------------------------------------
      *
      * These instructional messages are issued on screen 1 for the user.
      *
     C     $instruct     begsr
      *
     C                   select
      *
      * When there are errors on the check header (screen 1), the appropriate
      * messages will have already been issued; so, issue nothing!
      *
     C                   when      hdrerrfl = yes
      *
      * When the user has entered check header info that is error free, but
      * has not entered any check detail records, tell him to enter check
      * detail records.
      *
     C                   when      dtlentfl = no and
     C                             hdrentfl = yes and
     C                             hdrerrfl = no
     C                   z-add     1             error
     C                   movel     'HS00757'     mgid(e)
      *
      *
      * When the user has errors on the check detail records on screen 2,
      * tell him the check detail has errors.
      *
     C                   when      dtlerrfl = yes
     C                   z-add     1             error
     C                   movel     'HS00750'     mgid(e)
      *
      *
      * When the user has entered check header and check detail info
      * that is error free (and it is not the first time into the program),
      * tell him to take the function key to accept all of his changes.
      *
     C                   when      hdrentfl = yes and
     C                             dtlentfl = yes and
     C                             first1 = no
     C                   z-add     1             error
     C                   movel     'HS09027'     mgid(e)
     C                   endsl
      *
     C                   eval      first1 = no
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $edit1 - Edit entry fields on screen 1
      *---------------------------------------------------------------
      *
     C     $edit1        begsr
      *
     C                   eval      hdrentfl = yes
     C                   eval      hdrerrfl = no
      *
      * Sales type
     C                   exsr      $stcd
      *
      * Customer
     C                   exsr      $cvno
      *
      * Check date
     C                   exsr      $chdt
      *
      * Check number
     C                   exsr      $chno
      *
      * Check amount
     C                   exsr      $cham
      *
     C                   select
     C                   when      error > 0
     C                   eval      hdrerrfl = yes
      *
     C                   when      dtlentfl = yes
     C                   exsr      $edit2
     C                   endsl
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $set2 - Subroutine to set the environment for screen 2
      *---------------------------------------------------------------
      *
     C     $set2         begsr
      *
      * Clear/fill the subfile.
      *
     C                   exsr      $clr2
     C                   exsr      $frsh2
      *
     C                   select
     C                   when      mode = revise
     C                   eval      dtlentfl = yes
     C                   eval      dtlerrfl = no
      *
     C                   when      mode = create
     C                   eval      dtlentfl = no
     C                   eval      dtlerrfl = no
     C                   endsl
      *
      * Set routine to display screen
      *
     C                   eval      routne = scrn2
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $scrn2 - Subroutine to perform operator I/O for screen 2
      *---------------------------------------------------------------
      *
     C     $scrn2        begsr
      *
      * Set the page of the subfile to display
      *
     C                   select
     C                   when      (wkflow = 0 and error = 0) or
     C                             topfl = yes or
     C                             (mode = create and dtlentfl = no)
     C                   z-add     1             hdpag
      *
     C                   when      reset = yes
     C                   if        wkflow > hdrrn
     C                   else
     C                   z-add     wkflow        hdpag
     C                   endif
      *
     C                   when      hdpag = 0
     C                   z-add     1             hdpag
     C                   endsl
      *
      * Set the indicators to control screen fields
      *
     C                   exsr      $ind
      *
      *
      * Write the error messages from the error arrays to the
      * error message subfile.
      *
     C                   exsr      $wrmsg
      *
      * This subfile has fold/unfold capabilities. The DDS uses the keywords
      * (SFLMODE SFLDROP SFLFOLD) to determine whether the user is folded or
      * unfolded and to redisplay the screen in the same mode as when he last
      * saw it.  Indicators 88 and 89 are assigned in the DDS to SFLDROP and
      * SFLFOLD.
      *
     C                   setoff                                       8889
     C                   select
     C                   when      hdfold = '0'
     C                   seton                                        88
     C                   other
     C                   seton                                        89
     C                   endsl
      *
      *
     C                   z-add     d1chno        c2chno
      *
      * Write screen 2 to CRT
      *
     C                   write     hp136k2
     C                   write     hp136ec
     C                   exfmt     hp136c2
      *
      * Retrieve the lowest subfile RRN on the screen from the DSPF
      * feedback area (IDFLOW) and move it to a work field.  This value
      * will be used later to control the repositioning of the subfile.
      *
     C                   z-add     idflow        wkflow
     C                   eval      reset = no
     C                   eval      topfl = no
      *
      * Clear all messages
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and reset standard response.
      *
     C                   select
     C                   when      *in03 = *on or                               F3-exit
     C                             *in12 = *on                                  F12-previous
     C                   exsr      $edit2
     C                   eval      routne = scrn1
      *
     C                   when      *in09 = *on                                  F9=accept
     C                   exsr      $edit2
     C                   if        dtlerrfl = no
     C                   eval      routne = scrn1
     C                   else
     C                   eval      routne = scrn2
     C                   endif
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s2
     C                   eval      routne = scrn2
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   rolbk
     C                   exsr      $set1
     C                   eval      reset = yes
     C                   eval      routne = set2
      *
     C                   when      *in18 = *on                                  F18-top
     C                   eval      reset = no
     C                   eval      topfl = yes
     C                   eval      routne = scrn2
      *
     C                   when      *in25 = *on                                  F25-rollup
     C                   eval      wkdiff = idflow + wkplin
     C                   if        hdrrn >= wkdiff                              If something
     C                   else
     C                   eval      hdrrn = count
     C                   exsr      $setoff2
     C                   exsr      $clrln2
     C                   do        wkplin                                       Do fill
     C                   exsr      $blank2
     C                   enddo                                                  Do fill
     C                   endif                                                  If something
     C                   eval      routne = scrn2
     C                   other
      *
      * User pressed 'ENTER'
      *
     C                   exsr      $edit2
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $edit2 - Edit screen 2
      *----------------------------------------------------------------
      *
     C     $edit2        begsr
      *
     C                   exsr      $eds2
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $eds2 - Edit changed subfile records on screen 2
      *---------------------------------------------------------------
      *
     C     $eds2         begsr
      *
      * Clear accumulators and fields calculated using the accumulators.
      *
     C                   z-add     0             d1gram
     C                   z-add     0             d1pdam
     C                   z-add     0             wkcram
     C                   z-add     0             wklvlb
     C                   z-add     0             wkcrlb
      *
     C                   z-add     0             d1gcwt
     C                   z-add     0             d1bcwt
     C                   z-add     0             d1ncwt
     C                   z-add     0             d1dcwt
     C                   z-add     0             d1pcwt
      *
      * Set control flags that will determine whether the user keyed
      * any subfile entries and if there are errors on the subfile.
      *
     C                   eval      dtlentfl = no
     C                   eval      dtlerrfl = no
      *
      * Read/process all changed subfile records.
      *
     C                   setoff                                       80
     C                   dou       *in80 = *on                                  Do process
     C                   readc     hp136s2                                80
     C                   if        *in80 = *off                                 If rec read
      *
      * Set modified data tag
      *
     C                   seton                                        85
      *
      * Set off all indicators in subfile
      *
     C                   exsr      $setoff2
      *
      *
      * If there are no user entries for the changed subfile record,
      * clear all fields on the line and delete any premiums/discounts.
      *
     C                   if        d2tpcd = *blank and                          If entry
     C                             d2hgcd = *blank and
     C                             d2mvsn = 0 and
     C                             d2lvhd = 0 and
     C                             d2lvlb = 0 and
     C                             d2dohd = 0 and
     C                             d2dolb = 0 and
     C                             d2cdhd = 0 and
     C                             d2cdlb = 0 and
     C                             d2ydhd = 0 and
     C                             d2ydlb = 0 and
     C                             d2gram = 0 and
     C                             d2kldtmdy = 0 and
     C                             d2tano = 0 and
     C                             d2opt = *blank
     C                   exsr      $clrln2
     C                   exsr      $dltpd
     C                   else
      *
      * Accumulate the gross amount associated with carcass payments.
      *
     C                   if        d2tpcd = 'C'
     C                   add       d2gram        wkcram
     C                   endif
      *
      *
      * Accumulate gross amount
      * Accumulate live pounds to calculate per CWT dollar values
      *
     C                   add       d2gram        d1gram
     C                   add       d2lvlb        wklvlb
     C                   add       hdcrlb        wkcrlb
      *
      *
      * Initialize the flag fields for:
      *      1) There is a subfile record entry
      *      2) The 'Line is OK' flag to Yes=OK
      *
     C                   eval      dtlentfl = yes
     C                   eval      lineokfl = yes
      *
      * If the group is closed or the corresonding movement is posted,
      * the line will be protected--so, do not edit.
      *
     C                   if        hdgscd = 'CL' or                             If no edit
     C                             hdpofl = yes
     c                   exsr      $edop2
     C                   else
      *
      * Perform edits of the subfile option entry. If the user has entered
      * a '4' to delete the carcass data, the data will be deleted in the
      * 'edit option' subroutine.
      *
     C                   exsr      $edop2
      *
      * Type of payment
     C                   exsr      $tpcd
      *
      * Movement
     C                   exsr      $mvsn
      *
      * Hog group
     C                   exsr      $hgcd
      *
      * Live head
     C                   exsr      $lvhd
      *
      * Live pounds
     C                   exsr      $lvlb
      *
      * DOA head
     C                   exsr      $dohd
      *
      * DOA pounds
     C                   exsr      $dolb
      *
      * Gross amount
     C                   exsr      $gram
      *
      * Kill date
     C                   exsr      $kldt
      *
      * Tattoo
     C                   exsr      $tano
      *
      * Condemned head
     C                   exsr      $cdhd
      *
      * Condemned pounds
     C                   exsr      $cdlb
      *
      * Yard dead head
     C                   exsr      $ydhd
      *
      * Yard dead pounds
     C                   exsr      $ydlb
      *
      *
     C                   if        d2cdhd <> 0 or
     C                             d2cdlb <> 0 or
     C                             d2ydhd <> 0 or
     C                             d2ydlb <> 0
     C                   eval      d2cyfl = yes
     C                   else
     C                   eval      d2cyfl = no
     C                   endif
      *
     C                   endif                                                  If no edit
     C                   endif                                                  If entry
      *
      *-----------------------------------------------------------------------
      * Process subfile options
      *-----------------------------------------------------------------------
      *
      * If the user entered option 2 and there are no errors on
      * the subfile line, then perform the edits for option 2. If there are
      * no errors on the options, call the program to enter carcass data.
      *
     C                   if        d2opt = ' 2' and                             If 2 & OK
     C                             lineokfl = yes
     C                   exsr      $opt02
      *
     C                   if        lineokfl = yes                               If still OK
     C                   call      'HP137'
     C                   parm                    inbocd
     C                   parm                    d1cvno
     C                   parm                    d1cnam
     C                   parm                    d1chno
      *
     C                   parm                    hdlnno
     C                   parm                    d2mvsn
     C                   parm                    d2hgcd
     C                   parm                    d2tano
     C                   parm                    d2lvhd
     C                   parm                    d2lvlb
     C                   parm                    d2cdhd
     C                   parm                    d2cdlb
     C                   parm                    d2ydhd
     C                   parm                    d2ydlb
     C                   parm                    d2gram
      *
     C                   parm                    hdcrlb
     C                   parm                    hdlnpr
     C                   parm                    hdbfam
     C                   parm                    hdleam
     C                   parm                    hdpdam
      *
     C                   parm                    svcvno
     C                   parm                    svchno
     C                   parm                    svchdt
      *
     C                   parm                    rtncd
     C                   move      *blank        d2opt
      *
      *
      * If the user did not enter carcass pounds, then there is, again,
      * an error.
      *
     C                   if        hdcrlb = 0                                   If 0 lbs
     C                   seton                                        31
     C                   eval      lineokfl = no
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00679'     mgid(e)
     C                   exsr      $err2
     C                   endif
     C                   endif                                                  If 0 lbs
      *
     C                   endif                                                  If still OK
     C                   endif                                                  If 2 & OK
      *
      * Reset indicators
     C                   exsr      $ind
      *
     C                   update    hp136s2
     C                   exsr      $setoff2
     C                   endif                                                  If rec read
     C                   enddo                                                  Do process
      * Set MDT
     C                   setoff                                       85
      *
      *---------------------------------------------------------------
      * After all subfile records have been edited, issue an error
      * message if there are no subfile entries.
      *
     C                   if        dtlentfl = no and
     C                             error < maxmsg
     C                   add       1             error
     C                   movel     'HS00657'     mgid(e)
     C                   endif
      *
     C                   if        error <> 0
     C                   eval      dtlerrfl = yes
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $edop2 - Read changed subfile records on screen 2 and edit
      *          for valid subfile options.
      *---------------------------------------------------------------
      *
     C     $edop2        begsr
      *
      * Convert option user entered to standard format. For example,
      * a ' 1', '01', and '1 ' must be stnadardized to ' 1'.
      *
     C                   if        wkopt2 = *blank                              If 2 = blank
     C                   eval      wkopt2 = wkopt1
     C                   eval      wkopt1 = *blank
     C                   endif                                                  If 2 = blank
      *
     C                   if        wkopt1 = *zero                               If 1 is zero
     C                   eval      wkopt1 = *blank
     C                   endif                                                  If 1 is zero
      *
      *
      * Test for valid subfile option entry
      *
     C                   if        d2opt <> ' 2' and                            If bad opt
     C                             d2opt <> ' 4' and
     C                             d2opt <> '  '
     C                   seton                                        30
     C                   eval      lineokfl = no
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09006'     mgid(e)
     C                   exsr      $err2
     C                   endif
     C                   endif                                                  If bad opt
      *
      * If the user entered option 4:
      *    1) Delete all premium/discounts for the line
      *    2) Retrieve the check detail record and initialize
      *       the carcass detail fields to zero
      *    3) Clear the subfile hidden carcass fields
      *
     C                   if        d2opt = ' 4'
     C                   z-add     0             hdcrlb
     C                   z-add     0             hdbfam
     C                   z-add     0             hdlnpr
     C                   z-add     0             hdleam
     C                   z-add     0             hdpdam
     C                   move      *blank        d2opt
     C                   exsr      $dltpd
     C                   exsr      $updcd
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $clr2 - Clear the subfile on screen 2
      *---------------------------------------------------------------
      *
     C     $clr2         begsr
      *
      * Clear check total fields.
      *
     C                   z-add     0             d1gram
     C                   z-add     0             d1pdam
     C                   z-add     0             d1baam
     C                   z-add     0             d1ntam
     C                   z-add     0             wkcram
     C                   z-add     0             wklvlb
     C                   z-add     0             wkcrlb
      *
     C                   z-add     0             hdrrn
     C                   z-add     0             count
     C                   z-add     0             wklnno
      *
     C                   clear                   hp136s2
     C                   seton                                        83        SFLCLR
     C                   write     hp136c2
     C                   setoff                                       818283
      *                                                    81=sfldsp
      *                                                    82=sflend
      *                                                    83=sflclr
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $frsh2 - Refresh/fill the subfile on screen 1
      *---------------------------------------------------------------
      *
     C     $frsh2        begsr
      *
      * Set indicators to control/protect screen fields
      *
     C                   exsr      $ind
      *
      * Loading the subfile in this program is different than in the
      * other shell programs and depends on the 'mode'.
      * For CREATE mode, we load a page of blank lines.
      * For REVISE mode, we load a page of database records and, if we
      *                  hit EOF, we finish the page with blank lines.
      *
     C                   select
     C                   when      mode = create
     C                   exsr      $clrln2
     C                   exsr      $setoff2
     C                   do        wkplin
     C                   exsr      $blank2
     C                   enddo
      *
     C                   when      mode = revise
     C     key03         setll     hsp064
     C                   dou       *in82 = *on
     C                   exsr      $load2
     C                   enddo
      *
      * Fill up the subfile page with blank lines if necessary.
      *
     C                   if        wkplin <> 0 and
     C                             wkplin <> count
     C     count         div       wkplin        wkfld
     C                   mvr                     wkrmdr
     C     wkplin        sub       wkrmdr        wkdiff
     C                   exsr      $clrln2
     C                   exsr      $setoff2
     C                   do        wkdiff
     C                   exsr      $blank2
     C                   enddo
     C                   endif
      *
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $load2 - Load the subfile on screen 2
      *---------------------------------------------------------------
      *
     C     $load2        begsr
      *
      * Retrieve check detail records for this check.
      *
     C     key03         reade(n)  hsp064                                 82
     C                   if        *in82 = *off                                 If not eof
     C                   seton                                        85
     C                   eval      dtlentfl = yes
      *
      * Clear fields in subfile line
      *
     C                   exsr      $clrln2
      *
      * Flip kill date to MMDDYY format
      *
     C                   eval      wkcymd = cdkldt
     C                   exsr      $tomdy
     C                   eval      d2kldtmdy = wkmdy
      *
      *
      * Move check detail fields to screen
      *
     C                   eval      d2tpcd = cdtpcd
     C                   eval      d2mvsn = cdmvsn
      *
     C                   eval      d2gram  = cdgram
     C                   eval      d2tano = cdtano
      *
     C                   eval      d2lvhd = cdlvhd
     C                   eval      d2lvlb = cdlvlb
     C                   eval      d2dohd = cddohd
     C                   eval      d2dolb = cddolb
     C                   eval      d2cdhd = cdcdhd
     C                   eval      d2cdlb = cdcdlb
     C                   eval      d2ydhd = cdydhd
     C                   eval      d2ydlb = cdydlb
      *
     C                   select
     C                   when      d2ydhd <> 0 or
     C                             d2ydlb <> 0 or
     C                             d2cdhd <> 0 or
     C                             d2cdlb <> 0
     C                   eval      d2cyfl = yes
     C                   other
     C                   eval      d2cyfl = no
     C                   endsl
      *
     C                   eval      hdkldt = cdkldt
     C                   eval      hdcrlb = cdcrlb
     C                   eval      hdbfam = cdbfam
     C                   eval      hdlnpr = cdlnpr
     C                   eval      hdleam = cdleam
     C                   eval      hdhgsn = cdhgsn
      *
      * These two fields (class code and defect code) relate to
      * checks entered through the 'Hog Evaluation System'. These
      * fields are hidden since the HPS users have not requested access
      * to these fields. For checks entered 'manually', these fields
      * will always be blank.
      *
     C                   eval      hdclcd = cdclcd
     C                   eval      hddfcd = cddfcd
      *
      *
      * Retrieve alpha hog group code and group status.
      *
     C                   exsr      $group
      *
      * Retrieve movement status and then the corresponding posted flag
      * for the status and put in a hidden field to control protecting
      * the subfile line.
      *
     C     cdmvsn        chain(n)  hsp084                             92
     C                   if        *in92 = *off                                 If found
     C     shmscd        chain     hsp053                             92
     C                   if        *in92 = *off                                 If hit
     C                   eval      hdpofl = mspofl
      *
     C                   if        mspofl = yes                                 If posted
     C                   eval      postedfl = yes
     C                   endif                                                  If posted
     C                   endif                                                  If hit
     C                   endif                                                  If found
      *
      * Set up line number fields--a workfield in case you have to fill the
      * rest of the page with blank lines--and the hidden field on the
      * subfile record.
      *
     C                   z-add     cdlnno        wklnno
     C                   z-add     cdlnno        hdlnno
      *
      *
      * Retrieve any premiums/discounts for this check detail line and
      * place the total dollars into a hidden field.
      *
     C                   exsr      $premdis
      *
      * Accumulate gross amount for total on screen 1
      *
     C                   add       cdgram        d1gram
      *
      * Accumulate a gross amount for carcass payments only that will
      * be used to calculate the 'base amount' for the check total on
      * screen 1
      *
     C                   if        cdtpcd = 'C'
     C                   add       cdgram        wkcram
     C                   endif
      *
      * Accumulate live and carcass pounds for calculating dollars per cwt.
      *
     C                   add       cdlvlb        wklvlb
     C                   add       cdcrlb        wkcrlb
      *
      *
      * Reset indicators
     C                   exsr      $ind
      *
     C                   add       1             count
     C                   add       1             hdrrn
     C                   move      *blank        d2opt
      *
     C                   write     hp136S2
     C                   seton                                        81
     C                   eval      hdpag = hdrrn
     C                   endif                                                  If not eof
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $blank2 - Load blank subfile records for screen 2
      *---------------------------------------------------------------
      *
     C     $blank2       begsr
      *
     C                   add       1             wklnno
     C                   z-add     wklnno        hdlnno
      *
     C                   add       1             count
     C                   add       1             hdrrn
      *
     C                   exsr      $ind
     C                   write     hp136s2
      *
     C                   seton                                        81
     C                   eval      hdpag = hdrrn
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $clrln2 - Clear fields in subfile record
      *---------------------------------------------------------------
      *
     C     $clrln2       begsr
      *
     C                   move      *blank        d2hgcd
     C                   move      *blank        d2tpcd
     C                   move      *blank        d2cyfl
      *
     C                   z-add     0             d2mvsn
      *
     C                   z-add     0             d2lvhd
     C                   z-add     0             d2lvlb
     C                   z-add     0             d2dohd
     C                   z-add     0             d2dolb
     C                   z-add     0             d2cdhd
     C                   z-add     0             d2cdlb
     C                   z-add     0             d2ydhd
     C                   z-add     0             d2ydlb
      *
     C                   z-add     0             d2gram
     C                   z-add     0             d2tano
     C                   z-add     0             d2kldtmdy
      *
     C                   z-add     0             hdhgsn
     C                   z-add     0             hdcrlb
     C                   z-add     0             hdbfam
     C                   z-add     0             hdlnpr
     C                   z-add     0             hdleam
     C                   z-add     0             hdpdam
     C                   z-add     0             hdkldt
     C                   move      *blank        hdgscd
     C                   move      *blank        hdpofl
     C                   move      *blank        hdclcd
     C                   move      *blank        hddfcd
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------------
      * $opt02 - Validate conditions for taking subfile option 2 on screen 2
      *---------------------------------------------------------------------
      *
      * Validations:
      *  1) Payment type must be 'C'arcass
      *
     C     $opt02        begsr
      *
     C                   if        d2tpcd <> 'C'                                If payment
     C                   seton                                        30
     C                   eval      lineokfl = no
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00650'     mgid(e)
     C                   clear                   mgw
     C                   movea     d2opt         mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   exsr      $err2
     C                   endif
     C                   endif                                                  If payment
      *
     C                   if        d2lvlb = 0                                   If 0 live pounds
     C                   seton                                        30
     C                   eval      lineokfl = no
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00649'     mgid(e)
     C                   clear                   mgw
     C                   movea     d2opt         mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   exsr      $err2
     C                   endif
     C                   endif                                                  If 0 live pounds
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $stcd - Validate sales type code
      *----------------------------------------------------------------
      *
     C     $stcd         begsr
      *
     C                   eval      d1stds = *blank
      *
     C                   select
     C                   when      d1stcd = *blank
     C                   seton                                        75
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09001'     mgid(e)
     C                   endif
     C                   other
      *
     C     d1stcd        chain     hsp066                             92
     C                   if        *in92 = *off                                 If hit
     C                   eval      d1stds = ststds
     C                   else
     C                   seton                                        75
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00635'     mgid(e)
     C                   clear                   mgw
     C                   movea     d1stcd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If hit
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $cvno - validate customer number
      *----------------------------------------------------------------
      *
     C     $cvno         begsr
      *
     C                   eval      d1cnam = *blank
      *
     C                   select
     C                   when      d1cvno = 0
     C                   seton                                        74
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09001'     mgid(e)
     C                   endif
     C                   other
      *
     C                   z-add     d1cvno        inajd
     C                   eval      inat1 = 'C'
     C                   exsr      $jdev
      *
     C                   if        jdefl = yes
     C                   seton                                        74
     C                   else
     C                   movel     oualph        d1cnam
     C                   endif
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $chdt - validate check date
      *----------------------------------------------------------------
      *
      * Validations:
      *  1) required
      *  2) cannot be negative
      *  3) must be a valid date
      *  4) cannot be a future date
      *  5) cannot be in a closed period
      *  6) cannot be in a period that is closing
      *  7) allow editing for closed period if Company Values allow
      *
     C     $chdt         begsr
      *
     C                   eval      wkchdt = 0
      *
     C                   select
     C                   when      d1chdtmdy  = 0
     C                   seton                                        71
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
      *
     C                   when      d1chdtmdy  < 0
     C                   seton                                        71
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 d1chdtmdy              92
     C                   if        *in92 = *on
     C                   seton                                        71        If bad date
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Date was valid; flip to ccyymmdd for later comparisons and
      * updates.
      *
     C     *mdy          move      d1chdtmdy     wkcymdiso
     C                   move      wkcymdiso     wkchdt
      *
      * Date cannot be greater than today's date
      *
     C                   if        wkchdt > wkudate                             If future
     C                   seton                                        71
     C                   if        error < maxmsg
     C                   add       1             error
     C                   move      'HS00426'     mgid(e)
     C                   endif
     C                   endif                                                  If future
      *
      * Verify that this date is not in a closed period.
      *
     C                   if        wkchdt < dabpdt                              If closed
      *
      ** Retrieve calendar values for Company and Check Date
      *
          eval fxchkdate = %dec(%char(%date(wkchdt:*iso):*cymd0):7:0);
      *
     c                   call      'POF3XFR'
     c                   parm                    fxreturn
     c                   parm                    fxcompany
     c                   parm                    fxchkdate
     c                   parm                    fxjuldte
     c                   parm                    fxacctyr
     c                   parm                    fxacctpd
     c                   parm                    fxweek
     c                   parm                    fxdayowk
     c                   parm                    fxweekno
     c                   parm                    fxhpspic
     c                   parm                    fxhpscyr
     c                   parm                    fxweecwk
      * free form
         if (fxyesno = yes and fxacctyr = fxyear and fxacctpd = fxperiod and    // if fix = yes
            (sdusr = fxuser1 or sdusr = fxuser2 or sdusr = fxuser3));
     c                   else
      *
     C                   seton                                        71
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09007'     mgid(e)
     C                   endif
     C                   endif                                                  // fi fix = yes
     C                   else
      *
      * Verify that the period in which the check date falls is not currently
      * being closed.
      *
     C                   if        wkchdt >= dabpdt and                         If closing
     C                             wkchdt <= daepdt and
     C                             dappfl <> *blank
     C                   seton                                        71
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09016'     mgid(e)
     C                   endif
     C                   endif                                                  If closing
     C                   endif                                                  If closed
      *
      *
     C                   endif                                                  If bad date
     C                   endsl
      *
      * If there is any error on the check date, set the workfield to zero.
      *
     C                   if        *in71 = *on
     C                   z-add     0             wkchdt
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $chno - Validate check number
      *----------------------------------------------------------------
      *
      * Validations:
      *    1) Cannot be zero
      *    2) Cannot be negative
      *    3) Must be unique for customer/check date
      *
     C     $chno         begsr
      *
     C                   select
     C                   when      d1chno = 0
     C                   seton                                            72
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09001'     mgid(e)
     C                   endif
      *
     C                   when      d1chno < 0
     C                   seton                                            72
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   endif
      *
     C                   when      d1chno <> svchno or
     C                             d1cvno <> svcvno or
     C                             wkchdt <> svchdt
      *
     C     key02         setll     hsp063                                 92
     C                   if        *in92 = *on                                  If already exists
     C                   seton                                        72
     C                   if        error < maxmsg
     C                   add       1             error
     C                   clear                   mgw
     C                   movel     d1chno        xxchno
     C                   movea     xxchno        mgw(1)
     C                   movel     d1cvno        xxcvno
     C                   movea     xxcvno        mgw(8)
     C                   movea     mgw           mgdt(e)
     C                   movel     'HS00351'     mgid(e)
     C                   endif
     C                   endif                                                  If already exists
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $cham - Validate check amount
      *----------------------------------------------------------------
      *
      * Validations:
      *    1) Cannot be zero
      *    2) Cannot be negative
      *
     C     $cham         begsr
      *
     C                   select
     C                   when      d1cham = 0
     C                   seton                                        73
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09001'     mgid(e)
     C                   endif
      *
     C                   when      d1cham < 0
     C                   seton                                        73
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   endif
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $tpcd - Validate type of payment code
      *----------------------------------------------------------------
      *
      *    1) Cannot be blank
      *    2) Must exist in the sale type report codes file
      *    3) Must match the type of payment allowed for the sales type
      *
     C     $tpcd         begsr
      *
     C                   select
      *
     C                   when      d2tpcd = *blank
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09001'     mgid(e)
     C                   exsr      $err2
     C                   endif
     C                   other
      *
     C     d2tpcd        chain     hsl079a                            92
     C                   if        *in92 = *on                                  If invalid
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00651'     mgid(e)
     C                   exsr      $err2
     C                   endif
     C                   else
      *
     C     key01         chain     hsl079a                            92
     C                   if        *in92 = *on                                  If mismatch
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00664'     mgid(e)
     C                   clear                   mgw
     C                   movea     d2tpcd        mgw(1)
     C                   movea     d1stcd        mgw(2)
     C                   movea     mgw           mgdt(e)
     C                   exsr      $err2
     C                   endif
     C                   else
      *
     C                   select                                                 select 2
     C                   when      d2tpcd = 'L' and
     C                             hdcrlb <> 00
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00678'     mgid(e)
     C                   exsr      $err2
     C                   endif
      *
     C                   when      d2tpcd = 'C'
      *
     C                   if        d2lvlb <= 0                                  If no live
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00680'     mgid(e)
     C                   exsr      $err2
     C                   endif
     C                   endif                                                  If no live
      *
     C                   if        d2opt <> ' 2' and                            If no carc
     C                             hdcrlb = 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00679'     mgid(e)
     C                   exsr      $err2
     C                   endif
     C                   endif                                                  If no carc
     C                   endsl                                                  select 2
      *
     C                   endif                                                  If mismatch
     C                   endif                                                  If invalid
     C                   endsl
      *
     C                   if        *in31 = *on
     C                   eval      lineokfl = no
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $mvsn - Validate movement
      *----------------------------------------------------------------
      *
      *  1) Cannot be zero or negative
      *  2) Must be a sales movement
      *  3) Must be for the same customer as the check
      *  4) Must have same sales type as the check
      *  5) Cannot have a status that is posted
      *  6) Cannot have a status that is scheduled
      *  7) Cannot have a received date that is after the check date.
      *
     C     $mvsn         begsr
      *
     C                   select
     C                   when      d2mvsn = 0
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09001'     mgid(e)
     C                   exsr      $err2
     C                   endif
      *
     C                   when      d2mvsn < 0
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   exsr      $err2
     C                   endif
     C                   other
      *
     C     d2mvsn        chain(n)  hsp084                             92
     C                   if        *in92 = *on                                  If bad move
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00660'     mgid(e)
     C                   clear                   mgw
     C                   movel     d2mvsn        xxmvsn
     C                   movea     xxmvsn        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   exsr      $err2
     C                   endif
     C                   else
      *
      * Movement customer and check customer must match.
      *
     C                   if        d1cvno <> shcvno                             If diff cust
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00668'     mgid(e)
     C                   clear                   mgw
     C                   movel     d2mvsn        xxmvsn
     C                   movea     xxmvsn        mgw(1)
     C                   movel     shcvno        xxcvno
     C                   movea     xxcvno        mgw(8)
     C                   movel     d1cvno        xxcvno
     C                   movea     xxcvno        mgw(16)
     C                   movea     mgw           mgdt(e)
     C                   exsr      $err2
     C                   endif
     C                   endif                                                  If diff cust
      *
      *
      * Movement sales type and check sales type must match.
      *
     C                   if        d1stcd <> shstcd                             If diff type
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00669'     mgid(e)
     C                   clear                   mgw
     C                   movel     d2mvsn        xxmvsn
     C                   movea     xxmvsn        mgw(1)
     C                   movea     shstcd        mgw(8)
     C                   movea     d1stcd        mgw(13)
     C                   movea     mgw           mgdt(e)
     C                   exsr      $err2
     C                   endif
     C                   endif                                                  If diff type
      *
      *
      * The received date on the movement cannot be after the check date
      *
     C                   if        shrcdt > wkchdt                              If received
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00700'     mgid(e)
     C                   clear                   mgw
     C                   movel     d2mvsn        xxmvsn
     C                   movea     xxmvsn        mgw(1)
      * Flip received date
     C                   z-add     shrcdt        wkcymd
     C                   exsr      $tomdy
     C                   movel     wkmdy         xxmdy
     C                   movea     xxmdy         mgw(8)
     C                   movel     d1chdtmdy     xxmdy
     C                   movea     xxmdy         mgw(14)
     C                   movea     mgw           mgdt(e)
     C                   exsr      $err2
     C                   endif
     C                   endif                                                  If received
      *
      *
      * Movement cannot have a status of 'scheduled'
      *
     C                   if        shmscd ='SC'                                 If scheduled
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00677'     mgid(e)
     C                   clear                   mgw
     C                   movel     d2mvsn        xxmvsn
     C                   movea     xxmvsn        mgw(1)
     C                   movea     shmscd        mgw(8)
     C                   movea     mgw           mgdt(e)
     C                   exsr      $err2
     C                   endif
     C                   else
      *
      * Movement cannot be posted.
      *
     C     shmscd        chain     hsp053                             92
     C                   if        *in92 = *off and                             IF posted
     C                             mspofl = yes
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00670'     mgid(e)
     C                   clear                   mgw
     C                   movel     d2mvsn        xxmvsn
     C                   movea     xxmvsn        mgw(1)
     C                   movea     shmscd        mgw(8)
     C                   movea     mgw           mgdt(e)
     C                   exsr      $err2
     C                   endif
     C                   endif                                                  If posted
     C                   endif                                                  If scheduled
      *
     C                   endif                                                  If bad move
     C                   endsl
      *
      *
     C                   if        *in33 = *on
     C                   eval      lineokfl = no
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $hgcd - Validate hog group
      *----------------------------------------------------------------
      *
     C     $hgcd         begsr
      *
     C                   select
     C                   when      d2hgcd = *blank
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09001'     mgid(e)
     C                   exsr      $err2
     C                   endif
     C                   other
      *
     C     d2hgcd        chain     hsp034                             92
     C                   if        *in92 = *on                                  If bad group
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00261'     mgid(e)
     C                   clear                   mgw
     C                   movea     d2hgcd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   exsr      $err2
     C                   endif
     C                   else
      *
      * Group cannot be created/closed/voided
      *
     C                   if        hggscd = 'CR' or                             If status
     C                             hggscd = 'CL' or
     C                             hggscd = 'VD'
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00655'     mgid(e)
     C                   clear                   mgw
     C                   movea     d2hgcd        mgw(1)
     C                   movea     hggscd        mgw(8)
     C                   movea     mgw           mgdt(e)
     C                   exsr      $err2
     C                   endif
     C                   endif                                                  If status
      *
      *
      * Group must be on the sales movement the user has entered.
      * (Make this check only if movement was valid).
      *
     C                   if        *in33 = *off                                 If move OK
     C     key05         chain(n)  hsp085                             92
     C                   if        *in92 = *on                                  If wrong group
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00671'     mgid(e)
     C                   clear                   mgw
     C                   movea     d2hgcd        mgw(1)
     C                   movel     d2mvsn        xxmvsn
     C                   movea     xxmvsn        mgw(8)
     C                   movea     mgw           mgdt(e)
     C                   exsr      $err2
     C                   endif
     C                   endif                                                  If wrong group
     C                   endif                                                  If move OK
     C                   endif                                                  If bad group
     C                   endsl
      *
     C                   if        *in32 = *off
     C                   eval      hdhgsn = hghgsn
     C                   else
     C                   eval      lineokfl = no
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $lvhd - Validate live head
      *----------------------------------------------------------------
      *
      * Validations:
      *  1) cannot be negative
      *  2) cannot be zero if dead head is also zero
      *  3) cannot be less than condemned head
      *  4) cannot be less than the sum of condemned and yard dead head
      *
     C     $lvhd         begsr
      *
     C                   select
     C                   when      d2lvhd < 0
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   exsr      $err2
     C                   endif
      *
     C                   when      d2lvhd = 0 and
     C                             d2dohd = 0
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00653'     mgid(e)
     C                   exsr      $err2
     C                   endif
     C                   other
      *
     C                   if        d2lvhd < d2cdhd
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00751'     mgid(e)
     C                   exsr      $err2
     C                   endif
     C                   endif
      *
     C                   if        d2lvhd < d2ydhd
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00753'     mgid(e)
     C                   exsr      $err2
     C                   endif
     C                   endif
      *
     C                   if        d2lvhd < (d2cdhd + d2ydhd)
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00752'     mgid(e)
     C                   exsr      $err2
     C                   endif
     C                   endif
     C                   endsl
      *
     C                   if        *in34 = *on
     C                   eval      lineokfl = no
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $lvlb - Validate live pounds
      *----------------------------------------------------------------
      *
      * Validations:
      *   1) cannot be negative
      *   2) must be entered when live head has been entered
      *   3) cannot be entered when live head is zero
      *   4) live pounds and dead pounds cannot both be zero
      *   5) live pounds cannot be less than hidden carcass pounds
      *   6) live pounds cannot be less than condemned pounds
      *   7) live pounds cannot be less than yard dead pounds
      *   8) live pounds cannot be less than the sum of condemned/yard dead pounds
      *
     C     $lvlb         begsr
      *
     C                   select
     C                   when      d2lvlb < 0
     C                   seton                                        35
     C                   eval      lineokfl = no
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   exsr      $err2
     C                   endif
      *
     C                   when      d2lvlb = 0 and
     C                             d2lvhd > 0
     C                   seton                                        35
     C                   eval      lineokfl = no
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00661'     mgid(e)
     C                   exsr      $err2
     C                   endif
      *
     C                   when      d2lvlb > 0 and
     C                             d2lvhd = 0
     C                   seton                                        35
     C                   eval      lineokfl = no
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00652'     mgid(e)
     C                   exsr      $err2
     C                   endif
      *
     C                   when      d2lvlb = 0 and
     C                             d2dolb = 0
     C                   seton                                        35
     C                   eval      lineokfl = no
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00654'     mgid(e)
     C                   exsr      $err2
     C                   endif
      *
     C                   when      d2lvlb < hdcrlb
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00675'     mgid(e)
     C                   clear                   mgw
     C                   movel     d2lvlb        xxlb
     C                   movea     xxlb          mgw(1)
     C                   movel     hdcrlb        xxlb
     C                   movea     xxlb          mgw(6)
     C                   movea     mgw           mgdt(e)
     C                   exsr      $err2
     C                   endif
     C                   other
      *
     C                   if        d2lvlb < d2cdlb
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00754'     mgid(e)
     C                   exsr      $err2
     C                   endif
     C                   endif
      *
     C                   if        d2lvlb < d2ydlb
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00756'     mgid(e)
     C                   exsr      $err2
     C                   endif
     C                   endif
      *
     C                   if        d2lvlb < (d2cdlb + d2ydlb)
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00755'     mgid(e)
     C                   exsr      $err2
     C                   endif
     C                   endif
     C                   endsl
      *
     C                   if        *in35 = *on
     C                   eval      lineokfl = no
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $dohd - Validate dead-on-arrival head
      *----------------------------------------------------------------
      *
      * Validations:
      *   1) cannot be negative
      *
     C     $dohd         begsr
      *
      *
     C                   if        d2dohd < 0
     C                   seton                                        36
     C                   eval      lineokfl = no
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   exsr      $err2
     C                   endif
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $dolb - Validate dead-on-arrival pounds
      *----------------------------------------------------------------
      *
      * Validations:
      *  1) Cannot be negative
      *  2) Must be entered if dead head has been entered
      *  3) Must be zero if dead head is zero
      *
     C     $dolb         begsr
      *
     C                   select
     C                   when      d2dolb < 0
     C                   seton                                        37
     C                   eval      lineokfl = no
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   exsr      $err2
     C                   endif
      *
     C                   when      d2dolb = 0 and
     C                             d2dohd > 0
     C                   seton                                        37
     C                   eval      lineokfl = no
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00662'     mgid(e)
     C                   exsr      $err2
     C                   endif
      *
     C                   when      d2dolb > 0 and
     C                             d2dohd = 0
     C                   seton                                        37
     C                   eval      lineokfl = no
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00663'     mgid(e)
     C                   exsr      $err2
     C                   endif
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------------
      * $kldt - Validate kill date
      *---------------------------------------------------------------------
      *
      * Validations:
      *  1) Kill date must be 0 for feeder pig sales and cull sales
      *  2) Kill date cannot be 0 when type of payement is carcass
      *  3) Kill date cannot be a future date
      *
     C     $kldt         begsr
      *
     C                   z-add     0             wkkldt
     C                   z-add     0             hdkldt
      *
     C                   select
     C                   when      (d1stcd = 'FPS  ' or
     C                             d1stcd = 'CULLS') and
     C                             d2kldtmdy <> 0
     C                   seton                                        39
     C                   eval      lineokfl = no
     C                   if        error < maxmsg
     C                   add       1             error
     C                   move      'HS00666'     mgid(e)
     C                   endif
      *
      *
     C                   when      d2tpcd = 'C' and
     C                             d2kldtmdy = 0
     C                   seton                                        39
     C                   eval      lineokfl = no
     C                   if        error < maxmsg
     C                   add       1             error
     C                   move      'HS00667'     mgid(e)
     C                   endif
      *
      *
     C                   when      d2kldtmdy <> 0
     C     *mdy          test(d)                 d2kldtmdy              92
     C                   if        *in92 = *on
     C                   seton                                        39        If bad date
     C                   eval      lineokfl = no
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Flip kill date to ccyymmdd format and check that kill date
      * is not greater than today's date.
      *
      *
     C     *mdy          move      d2kldtmdy     wkcymdiso
     C                   move      wkcymdiso     wkkldt
      *
     C                   if        wkkldt > wkudate                              If future
     C                   seton                                        39
     C                   eval      lineokfl = no
     C                   if        error < maxmsg
     C                   add       1             error
     C                   move      'HS00426'     mgid(e)
     C                   endif
     C                   else
     C                   z-add     wkkldt        hdkldt
     C                   endif                                                  If future
     C                   endif                                                  If bad date
      *
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $gram - Validate gross amount
      *----------------------------------------------------------------
      *
      * Validations:
      *  1) Cannot be negative
      *  2) Must be 0 if there are no 'live' head
      *
     C     $gram         begsr
      *
     C                   select
     C                   when      d2gram < 0
     C                   seton                                        38
     C                   eval      lineokfl = no
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   exsr      $err2
     C                   endif
      *
     C                   when      d2gram <> 0 and
     C                             d2lvhd = 0
     C                   seton                                        38
     C                   eval      lineokfl = no
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00692'     mgid(e)
     C                   exsr      $err2
     C                   endif
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $tano - Validate tattoo number
      *----------------------------------------------------------------
      *
      * Validations:
      *   1) Cannot be negative.
      *   2) Must be blank if the detail line has only dead hogs
      *   3) Required when payment type is carcass
      *
     C     $tano         begsr
      *
     C                   select
     C                   when      d2tano < 0
     C                   seton                                        40
     C                   eval      lineokfl = no
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   exsr      $err2
     C                   endif
      *
     C                   when      d2tano = 0 and
     C                             d2tpcd = 'C'
     C                   seton                                        40
     C                   eval      lineokfl = no
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00665'     mgid(e)
     C                   exsr      $err2
     C                   endif
      *
     C                   when      d2tano <> 0 and
     C                             d2lvlb = 0
     C                   seton                                        40
     C                   eval      lineokfl = no
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00659'     mgid(e)
     C                   exsr      $err2
     C                   endif
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $cdhd - Validate condemned head
      *----------------------------------------------------------------
      *
      * Validations:
      *  1) cannot be negative
      *  2) cannot be greater than live head
      *  3) the sum of condemned and yard dead cannot be greater than live head
      *
     C     $cdhd         begsr
      *
     C                   select
     C                   when      d2cdhd < 0
     C                   seton                                        44
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   exsr      $err2
     C                   endif
      *
     C                   when      d2cdhd > d2lvhd
     C                   seton                                        44
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00638'     mgid(e)
     C                   exsr      $err2
     C                   endif
      *
     C                   when      (d2cdhd + d2ydhd) > d2lvhd and
     C                             d2cdhd <> 0
     C                   seton                                        44
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00639'     mgid(e)
     C                   exsr      $err2
     C                   endif
     C                   endsl
      *
     C                   if        *in44 = *on
     C                   eval      lineokfl = no
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $cdlb - Validate condemned pounds
      *----------------------------------------------------------------
      *
      * Validations:
      *  1) Cannot be negative
      *  2) Cannot be zero when condemned head is greater than zero
      *  3) Must be zero if condemned head is zero
      *  4) Cannot be greater than live pounds
      *  5) When summed with yard dead pounds, cannot be greater than live pounds.
      *
     C     $cdlb         begsr
      *
     C                   select
     C                   when      d2cdlb < 0
     C                   seton                                        45
     C                   eval      lineokfl = no
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   exsr      $err2
     C                   endif
      *
     C                   when      d2cdlb = 0 and
     C                             d2cdhd > 0
     C                   seton                                        45
     C                   eval      lineokfl = no
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00641'     mgid(e)
     C                   exsr      $err2
     C                   endif
      *
     C                   when      d2cdlb > 0 and
     C                             d2cdhd = 0
     C                   seton                                        45
     C                   eval      lineokfl = no
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00742'     mgid(e)
     C                   exsr      $err2
     C                   endif
      *
     C                   when      d2cdlb > d2lvlb
     C                   seton                                        45
     C                   eval      lineokfl = no
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00743'     mgid(e)
     C                   exsr      $err2
     C                   endif
      *
     C                   when      (d2cdlb + d2ydlb) > d2lvlb and
     C                             d2cdlb <> 0
     C                   seton                                        45
     C                   eval      lineokfl = no
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00744'     mgid(e)
     C                   exsr      $err2
     C                   endif
     C                   endsl
      *
     C                   if        *in45 = *on
     C                   eval      lineokfl = no
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $ydhd - Validate yard dead head
      *----------------------------------------------------------------
      *
      * Validations:
      *  1) cannot be negative
      *  2) cannot be greater than live head
      *  3) the sum of condemned and yard dead cannot be greater than live head
      *
     C     $ydhd         begsr
      *
     C                   select
     C                   when      d2ydhd < 0
     C                   seton                                        46
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   exsr      $err2
     C                   endif
      *
     C                   when      d2ydhd > d2lvhd
     C                   seton                                        46
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00745'     mgid(e)
     C                   exsr      $err2
     C                   endif
      *
     C                   when      (d2cdhd + d2ydhd) > d2lvhd and
     C                             d2ydhd <> 0
     C                   seton                                        46
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00639'     mgid(e)
     C                   exsr      $err2
     C                   endif
     C                   endsl
      *
     C                   if        *in46 = *on
     C                   eval      lineokfl = no
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $ydlb - Validate yard dead pounds
      *----------------------------------------------------------------
      *
      * Validations:
      *  1) Cannot be negative
      *  2) Cannot be zero when yard dead head is greater than zero
      *  3) Must be zero if yard dead head is zero
      *  4) Cannot be greater than live pounds
      *  5) When summed with condemned pounds, cannot be greater than live pounds.
      *
     C     $ydlb         begsr
      *
     C                   select
     C                   when      d2ydlb < 0
     C                   seton                                        47
     C                   eval      lineokfl = no
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   exsr      $err2
     C                   endif
      *
     C                   when      d2ydlb = 0 and
     C                             d2ydhd > 0
     C                   seton                                        47
     C                   eval      lineokfl = no
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00746'     mgid(e)
     C                   exsr      $err2
     C                   endif
      *
     C                   when      d2ydlb > 0 and
     C                             d2ydhd = 0
     C                   seton                                        47
     C                   eval      lineokfl = no
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00747'     mgid(e)
     C                   exsr      $err2
     C                   endif
      *
     C                   when      d2ydlb > d2lvlb
     C                   seton                                        47
     C                   eval      lineokfl = no
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00749'     mgid(e)
     C                   exsr      $err2
     C                   endif
      *
     C                   when      (d2cdlb + d2ydlb) > d2lvlb and
     C                             d2ydlb <> 0
     C                   seton                                        47
     C                   eval      lineokfl = no
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00744'     mgid(e)
     C                   exsr      $err2
     C                   endif
     C                   endsl
      *
     C                   if        *in47 = *on
     C                   eval      lineokfl = no
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $ind - reset indicators (used for both screen 1 and 2)
      *----------------------------------------------------------------
      *
     C     $ind          begsr
      *
      * The DSPF logic requires at least one indicator to be on.
      *
     C                   seton                                        42
      *
      * The check has been deleted out from under the user.
      *
     C                   if        notflg = yes
     C                   seton                                        90
     C                   endif
      *
      *  Set up for mode
      *
     C                   select
     C                   when      dfmode = create
     C                   seton                                        61
     C                   setoff                                       60
      *
     C                   when      dfmode = revise
     C                   seton                                        60
     C                   setoff                                       61
     C                   endsl
      *
      * If the movement on the subfile is posted or the hog group
      * is closed, protect the fields.
      *
     C                   setoff                                       65
      * free form
         if (fxyesno = yes and fxacctyr = fxyear and fxacctpd = fxperiod and    // if fix = yes
            (sdusr = fxuser1 or sdusr = fxuser2 or sdusr = fxuser3));
     c                   else
     C                   if        hdpofl = yes or
     C                             hdgscd = 'CL'
     C                   seton                                        65
     C                   endif
     c                   endif                                                  // fi fix = yes
      *
      * Set indicator that inactiviates the delete function
      *
     C                   if        closedfl = yes or
     C                             postedfl = yes
     C                   seton                                        62
     C                   endif
      *
      * Set indicator that activiates the accept function key
      *
     C                   setoff                                       64
     C                   if        hdrentfl = yes and
     C                             hdrerrfl = no and
     C                             dtlentfl = yes and
     C                             dtlerrfl = no
     C                   seton                                        64
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $jdev - Retrieve JDE customer name
      *----------------------------------------------------------------
      *
     C     $jdev         begsr
      *
     C                   eval      jdefl = no
      *
     C                   call      'HPJDEV'
     C                   parm                    mgi                            MSG ID'S
     C                   parm                    mgd                            MSG DATA FLD
     C                   parm                    error                          # ERR MSGS
     C                   parm                    inajd                          JDE addR #
     C                   parm                    inat1                          JDE addR TYP
     C                   parm                    jdefl                          error FLAG
     C                   parm      *blank        oualph                         JDE NAME
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $premdis - accumulate premium/discounts for check detail line
      *----------------------------------------------------------------
      *
     C     $premdis      begsr
      *
     C                   setoff                                       95
     C     key04         setll     hsp065
      *
     C                   dow       *in95 = *off
     C     key04         reade(n)  hsp065                                 95
     C                   if        *in95 = *off and
     C                             cjcjfl = 'P'
     C                   add       cjcjam        hdpdam
     C                   add       cjcjam        d1pdam
     C                   endif
     C                   enddo
      *
     C                   endsr
      /EJECT
      *-----------------------------------------------------------------------
      * $totaj -  Accumulate adjustment dollars for screen 1
      *-----------------------------------------------------------------------
      *
      * Accumulate all premiums/discounts and deductions/additions.
      *
      * NOTE: For the deductions/additions, only include records where
      *       the line number is zero.  The '0' line number records
      *       hold the dollar amount of the deduction/addition entered
      *       by the user.  Records where the line number is not zero
      *       represent the distributions of the entered amount to the
      *       corresponding check detail line.
      *
     C     $totaj        begsr
      *
     C                   z-add     0             d1pdam
     C                   z-add     0             d1daam
      *
     C                   setoff                                       92
     C     key03         setll     hsp065
      *
     C                   dow       *in92 = *off                                 Do loop
     C     key03         reade(n)  hsp065                                 92
     C                   if        *in92 = *off                                 If more
      *
     C                   select
     C                   when      cjcjfl = 'P'
     C                   add       cjcjam        d1pdam
      *
     C                   when      cjcjfl = 'D'and
     C                             cjlnno = 0
     C                   add       cjcjam        d1daam
     C                   endsl
      *
     C                   endif                                                  If more
     C                   enddo                                                  Do loop
      *
     C                   endsr
      /EJECT
      *-----------------------------------------------------------------------------
      * $calc - Calculate dollar values and CWT values for screen 1
      *-----------------------------------------------------------------------------
      *
     C     $calc         begsr
      *
      * Calculate base amount and net amount
      *
      * Base amount = gross amount less premiums/discounts
      * Net amount  = gross amount plus deductions/add-ons
      *
     C                   eval      d1baam = wkcram - d1pdam
     C                   eval      d1ntam = d1gram + d1daam
      *
      *
      * Calculate dollars per CWT based on live pounds
      *
     C                   if        wklvlb <> 0                                  If live lbs
     C     wklvlb        div       100           wkcwt
     C                   if        wkcwt <> 0
     C     d1gram        div(h)    wkcwt         d1gcwt
     C     d1ntam        div(h)    wkcwt         d1ncwt
     C     d1daam        div(h)    wkcwt         d1dcwt
     C                   endif
     C                   endif                                                  If live lbs
      *
      *
      * Calculate dollars per CWT based on carcass pounds
      *
     C                   if        wkcrlb <> 0                                  If carc lbs
     C     wkcrlb        div       100           wkcwt
     C                   if        wkcwt <> 0
     C     d1baam        div(h)    wkcwt         d1bcwt
     C     d1pdam        div(h)    wkcwt         d1pcwt
     C                   endif
     C                   endif                                                  If carc lbs
      *
      *
      * If there are no errors, issue an error message if the check
      * amount entered by the user does not equal the calculated
      * net check amount.
      *
     C                   if        error = 0 and                                If not equal
     C                             dtlentfl = yes and
     C                             d1cham <> d1ntam
     C                   seton                                        73
     C                   eval      hdrerrfl = yes
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00353'     mgid(e)
     C                   endif
     C                   endif                                                  If not equal
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $accept - Accept the changes entered by the user
      *---------------------------------------------------------------
      *
     C     $accept       begsr
      *
      *----------------------------------------------------------------
      * Revising an existing check
      *----------------------------------------------------------------
      *
     C                   select
     C                   when      mode = revise
      *
      * Delete existing check header and check detail records
      *
     C                   exsr      $dltch
     C                   exsr      $dltcd
      *
      * Create new check detail records and check header
      *
     C                   exsr      $crtcd
     C                   exsr      $crtch
      *
      * If any of the key fields have changed (customer, check number,
      * check date), then update all adjustment records with the
      * new values.
      *
     C                   if        svcvno <> d1cvno or
     C                             svchno <> d1chno or
     C                             svchdt <> wkchdt
     C                   exsr      $updaj
     C                   endif
      *
      * Distribute any/all deductions/add-ons to the check detail records
      * for this check.
      *
     C                   exsr      $dist
      *
     C                   movel     exit          routne
      *
      *----------------------------------------------------------------
      * Creating a new check
      *----------------------------------------------------------------
      *
     C                   when      mode = create
      *
      * 1) Create all check detail records
      * 2) Create check header
      * 3) Update any adjustments with the customer/check number/check date
      * 4) Call the CLP to copy the adjustments from the file in QTEMP
      *    to the actual production file.
      *
     C                   exsr      $crtcd
     C                   exsr      $crtch
      *
     C                   setoff                                       92
     C     *loval        setll     hsp065
     C                   dou       *in92 = *on
     C                   read      hsp065                                 92
     C                   if        *in92 = *off
     C                   z-add     d1cvno        cjcvno
     C                   z-add     d1chno        cjchno
     C                   z-add     wkchdt        cjchdt
     C                   update    cjrec
     C                   endif
     C                   enddo
      *
      * Copy the adjustments from the temporary file in QTEMP
      * to the actual production file.
      *
     C                   call      'HP136BCL'
      *
      * Distribute any/all deductions/add-ons to the check detail
      * records.
     C                   exsr      $dist
      *
      * Issue the message that the check was created and return to the
      * screen for entry of more new checks.
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00672'     mgid(e)
     C                   clear                   mgw
     C                   movel     d1chno        xxchno
     C                   movea     xxchno        mgw(1)
     C                   movea     mgw           mgdt(e)
      *
     C                   eval      hdrentfl = no
     C                   eval      hdrerrfl = no
     C                   eval      dtlentfl = no
     C                   eval      dtlerrfl = no
     C                   eval      first1 = yes
      *
     C                   endif
      *
     C                   eval      routne = set1
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $dltch - Delete the check header record
      *----------------------------------------------------------------
      *
     C     $dltch        begsr
      *
     C     key03         chain     hsp063                             92
     C                   if        *in92 = *off                                 If found
      *
      *
      * Delete the check from the HPS check header file.
      *
     C                   delete    chrec
      *
     C                   endif                                                  If found
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $dltcd - Delete the check detail records
      *----------------------------------------------------------------
      *
     C     $dltcd        begsr
      *
      * Initialize the movement array and indexes that will be used in
      * revising the sales detail records that correspond to these check
      * detail records.
      *
     C                   z-add     0             move
     C                   z-add     0             y
     C                   z-add     0             x
      *
      *
      * Process all check detail records for the check.
      *
     C     key03         setll     hsp064
     C                   setoff                                       95
      *
     C                   dou       *in95 = *on                                  Do detail
     C     key03         reade     hsp064                                 95
     C                   if        *in95 = *off                                 If found
      *
      * If the corresponding sales movement is not posted.
      *
     C     cdmvsn        chain(N)  hsp084                             92
     C                   if        *in92 = *off                                 If header
     C     shmscd        chain     hsp053                             92
     C                   if        *in92 = *off and                             If not
     C                             mspofl = no
      *
      *
      * Look up movement in array. If not found, move the movement
      * number to the next element in array.
      *
     C                   z-add     1             x
     C     cdmvsn        lookup    move(x)                                98
     C                   if        *in98 = *off
     C                   add       1             y
     C                   z-add     cdmvsn        move(y)
     C                   endif
      *
      * Subtract the head and pounds for live, DOA, condemned, yard
      * dead out of the corresponding sales detail record.
      *
     C                   exsr      $subsd
     C                   endif                                                  If not posted
     C                   endif                                                  If header
      *
      *
      * Delete the check detail record
      *
     C                   delete    cdrec
     C                   endif                                                  If found
     C                   enddo                                                  Do detail
      *
      * Now, for each unique sales movement that you processed and
      * placed in the movement array, recalculate the movement status
      * and the movement type of payment code.
      *
     C                   exsr      $status
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $dltaj - Delete all adjustments for a check
      *----------------------------------------------------------------
      *
     C     $dltaj        begsr
      *
     C     key03         setll     hsp065
     C                   setoff                                       92
      *
     C                   dou       *in92 = *on                                  Do detail
     C     key03         reade     hsp065                                 92
     C                   if        *in92 = *off                                 If found
     C                   delete    cjrec
     C                   endif                                                  If found
     C                   enddo                                                  Do detail
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $subsd - Subtract the head/pounds values from the sales detail
      *----------------------------------------------------------------
      *
      * When a check detail line is entered, the head and pounds for
      * live, DOA, condemned and yard dead are updated on the corresponding
      * sales detail record.  So, when check detail lines are deleted,
      * you must go revise the corresponding sales detail line by subtracting
      * or backing out the check detail head and pounds.
      *
     C     $subsd        begsr
      *
     C     key06         chain     hsp085                             92
     C                   if        *in92 = *off
     C                   sub       cdlvhd        sglvhd
     C                   sub       cdlvlb        sglvlb
     C                   sub       cddohd        sgdohd
     C                   sub       cddolb        sgdolb
     C                   sub       cdcdhd        sgcdhd
     C                   sub       cdcdlb        sgcdlb
     C                   sub       cdydhd        sgydhd
     C                   sub       cdydlb        sgydlb
     C                   update    sgrec
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $status - Update the sales movement status
      *----------------------------------------------------------------
      *
      * For each movement that is on a check, you have already backed out
      * the check head and pounds values from the sales detail.  But, you
      * now need to reevaluate the status of the sales movement and update
      * it. And, you need to reevaluate whether this movement was paid
      * 'live' 'carcass' or with a mix of live and carcass.
      *
      * So, for each movement in the array, first check the status.
      * If the movement is posted, do not process; otherwise, retrieve all
      * the sales detail lines for the movement.  Sum the 'live and DOA'
      * head into a field for 'arrived' head.  Sum the shipped head.
      * Then, reset the status based on the comparison of the 'shipped' and
      * 'arrived' head.
      *
     C     $status       begsr
      *
     C                   if        y <> 0                                       If elements
     C                   do        y             x                              Do all entry
     C                   if        move(x) <> 0                                 If entry
      *
     C                   z-add     0             wkshhd
     C                   z-add     0             wkarhd
      *
     C     move(x)       chain     hsp084                             92
     C                   if        *in92 = *off                                 If header
     C     shmscd        chain     hsp053                             92
     C                   if        *in92 = *off and                             If not posted
     C                             mspofl = no
      *
      * Count shipped and arrived head for this movement
      *
     C     move(x)       setll     hsp085
     C                   setoff                                       92
      *
     C                   dou       *in92 = *on                                  Do head
     C     move(x)       reade(n)  hsp085                                 92
     C                   if        *in92 = *off
     C                   add       sgshhd        wkshhd
     C                   add       sglvhd        wkarhd
     C                   add       sgdohd        wkarhd
     C                   endif
     C                   enddo                                                  Do head
      *
      *
      * Evaluate type of payment for this movement by reading all
      * check detail records for the movement.
      *
     C     move(x)       setll     hsl064b
     C                   setoff                                       92
     C                   eval      paylivefl = *blank
     C                   eval      paycarcfl = *blank
      *
     C                   dou       *in92 = *on                                  Do pay type
     C     move(x)       reade     hsl064b                                92
     C                   if        *in92 = *off
      *
     C                   select
     C                   when      cdtpcd = 'L'
     C                   eval      paylivefl = yes
     C                   when      cdtpcd = 'C'
     C                   eval      paycarcfl = yes
     C                   endsl
      *
     C                   endif
     C                   enddo                                                  Do pay type
      *
      * Set up movement status
      *
     C                   select
     C                   when      wkarhd = 0
     C                   eval      shmscd = 'SH'
      *
     C                   when      wkarhd >= wkshhd
     C                   eval      shmscd = 'FP'
     C                   other
      *
     C                   eval      shmscd = 'NC'
     C                   endsl
      *
      *
      * Set up movement type of payment
      *
     C                   select
     C                   when      paylivefl = yes and
     C                             paycarcfl = yes
     C                   eval      shtpcd = 'M'
      *
     C                   when      paylivefl = yes
     C                   eval      shtpcd = 'L'
      *
     C                   when      paycarcfl = yes
     C                   eval      shtpcd = 'C'
     C                   other
      *
     C                   eval      shtpcd = *blank
     C                   endsl
      *
     C                   update    shrec
      *
     C                   endif                                                  If not posted
     C                   endif                                                  If header
      *
     C                   endif                                                  If entry
     C                   enddo                                                  Do all entry
     C                   endif                                                  If elements
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $addsd - Add the head/pounds values from the sales detail
      *----------------------------------------------------------------
      *
      * When a check detail line is entered, the head and pounds for
      * live, DOA, condemned, and yard dead are updated on the corresponding
      * sale detail record.
      *
     C     $addsd        begsr
      *
     C     key06         chain     hsp085                             92
     C                   if        *in92 = *off
     C                   add       cdlvhd        sglvhd
     C                   add       cdlvlb        sglvlb
     C                   add       cddohd        sgdohd
     C                   add       cddolb        sgdolb
     C                   add       cdcdhd        sgcdhd
     C                   add       cdcdlb        sgcdlb
     C                   add       cdydhd        sgydhd
     C                   add       cdydlb        sgydlb
     C                   update    sgrec
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $dltpd - Delete all premium/discounts for a check detail line
      *----------------------------------------------------------------
      *
     C     $dltpd        begsr
      *
     C     key04         setll     hsp065
     C                   setoff                                       92
      *
     C                   dou       *in92 = *on                                  Do detail
     C     key04         reade     hsp065                                 92
     C                   if        *in92 = *off                                 If found
     C                   delete    cjrec
     C                   endif                                                  If found
     C                   enddo                                                  Do detail
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $crtch - Create check header record
      *----------------------------------------------------------------
      *
     C     $crtch        begsr
      *
     C                   z-add     d1chno        chchno
     C                   z-add     d1cvno        chcvno
     C                   z-add     wkchdt        chchdt
     C                   z-add     d1cham        chcham
     C                   movel     d1stcd        chstcd
      *
      * Set the 'data source' to 'manual' to differentiate this from
      * an 'automated' check where the data comes automatically from
      * another system. Users cannot change ' automated' checks through
      * the check function in the Hog Production System. (NOTE: The
      * checks that are interfaced from Hog Eval System are now tagged
      * as 'manual' since the users always have to change them.)
      *
     C                   eval      chdscd = 'M'
      *
      *
      * Set the 'type of payment' for the check as:
      *   L = live
      *   C = carcass
      *   M = mixed, both live and carcass payments exist on the check
      *
     C                   select
     C                   when      livefl = yes and
     C                             carcfl = yes
     C                   eval      chtpcd = 'M'
      *
     C                   when      livefl = yes
     C                   eval      chtpcd = 'L'
      *
     C                   when      carcfl = yes
     C                   eval      chtpcd = 'C'
     C                   endsl
      *
     C                   write     chrec
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $crtcd - Create check detail records
      *----------------------------------------------------------------
      *
     C     $crtcd        begsr
      *
     C                   eval      livefl = no
     C                   eval      carcfl = no
      *
      * Initizlize the movement array and indexes
      *
     C                   z-add     0             move
     C                   z-add     0             y
     C                   z-add     0             x
      *
      * Setup the values fro fields that won't change per line.
      *
     C                   z-add     d1cvno        cdcvno
     C                   z-add     d1chno        cdchno
     C                   z-add     wkchdt        cdchdt
      *
      *---------------------------------------------------------------
      * Read/process all changed subfile records.
      *---------------------------------------------------------------
      *
     C                   setoff                                       80
     C                   dou       *in80 = *on                                  Do read C
     C                   readc     hp136s2                                80
     C                   if        *in80 = *off and                             If rec read
     C                             d2hgcd <> *blank
      *
      * Set flags that will be used to determine, for the check
      * header, whether the check is, overall, live or carcass or
      * mixed with both live and carcass.
      *
     C                   select
     C                   when      d2tpcd = 'L'
     C                   eval      livefl = yes
      *
     C                   when      d2tpcd = 'C'
     C                   eval      carcfl = yes
     C                   endsl
      *
     C                   z-add     hdlnno        cdlnno
     C                   movel     d2tpcd        cdtpcd
     C                   z-add     d2mvsn        cdmvsn
     C                   z-add     hdhgsn        cdhgsn
     C                   z-add     hdkldt        cdkldt
     C                   z-add     d2lvhd        cdlvhd
     C                   z-add     d2lvlb        cdlvlb
     C                   z-add     d2dohd        cddohd
     C                   z-add     d2dolb        cddolb
     C                   z-add     d2cdhd        cdcdhd
     C                   z-add     d2cdlb        cdcdlb
     C                   z-add     d2ydhd        cdydhd
     C                   z-add     d2ydlb        cdydlb
     C                   z-add     d2gram        cdgram
     C                   z-add     d2tano        cdtano
      *
      *
      * If kill date is zero, default check date into 'sales accrual
      * date'; otherwise, default in the kill date.
      *
     C                   if        cdkldt = 0
     C                   z-add     cdchdt        cdsadt
     C                   else
     C                   z-add     cdkldt        cdsadt
     C                   endif
      *
     C                   eval      cdbaam = d2gram - hdpdam
     C                   z-add     hdcrlb        cdcrlb
     C                   z-add     hdbfam        cdbfam
     C                   z-add     hdlnpr        cdlnpr
     C                   z-add     hdleam        cdleam
      *
      *
      * The 'class code' and 'defect code' will always be blank for
      * checks entered 'manually'. These fields have relevance only
      * for checks entered 'automatically' through the Hog Evaluation
      * System. At this time, these fields do not display on the
      * screen for user entry.
      *
     C                   eval      cdclcd = hdclcd
     C                   eval      cddfcd = hddfcd
      *
      * Write check detail record
      *
     C                   write     cdrec
      *
      *
      * The edit logic should prevent the user from adding entries
      * against a posted movement. But, check the status here again.
      * If the movement is not posted:
      *
     C     cdmvsn        chain(N)  hsp084                             92
     C                   if        *in92 = *off                                 If header
     C     shmscd        chain     hsp053                             92
     C                   if        *in92 = *off and                             If not post
     C                             mspofl = no
      *
      *
      * Look up movement in array. If not found, move the movement
      * number to the next element in the array.
      *
     C                   z-add     1             x
     C     cdmvsn        lookup    move(x)                                98
     C                   if        *in98 = *off
     C                   add       1             y
     C                   z-add     cdmvsn        move(y)
     C                   endif
      *
      *
      * Add the head and pounds for live, DOA, condemned and yard dead
      * to the corresponding sales detail line.
      *
     C                   exsr      $addsd
     C                   endif                                                  If not post
     C                   endif                                                  If header
      *
     C                   endif                                                  If rec read
     C                   enddo                                                  Do read C
      *
      *
      * Now, for each movement that you processed above, recalculate
      * the status and the type of payment for each movement.
      *
     C                   exsr      $status
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $updaj - Update all adjustments for a check
      *----------------------------------------------------------------
      *
      * This subroutine is performed only in revise mode. It updates
      * any adjustments that were entered/changed in other check function
      * programs with the customer/check/date from this program. This
      * logic allows us to maintain the records in these other functions
      * using the 'original key values regardless of how many times the
      * user may change them on this screen.  Then, this logic 'cleans up'
      * the key values for the adjustment records at the time the user
      * accepts his changes.
      *
     C     $updaj        begsr
      *
     C     key03         setll     hsp065
     C                   setoff                                       95
      *
     C                   dou       *in95 = *on                                  Do detail
     C     key03         reade     hsp065                                 95
     C                   if        *in95 = *off                                 If found
     C                   z-add     d1cvno        cjcvno
     C                   z-add     d1chno        cjchno
     C                   z-add     wkchdt        cjchdt
     C                   update    cjrec
     C                   endif                                                  If found
     C                   enddo                                                  Do detail
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $updcd - Set carcass data fields to zero in check detail record
      *----------------------------------------------------------------
      *
     C     $updcd        begsr
      *
     C     key04         chain     hsp064                             92
     C                   if        *in92 = *off
     C                   z-add     0             cdcrlb
     C                   z-add     0             cdbfam
     C                   z-add     0             cdlnpr
     C                   z-add     0             cdleam
     C                   update    cdrec
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $dist - Distribute deductions/add-ons to check detail lines
      *----------------------------------------------------------------
      *
      * Distribute any/all deductions/add-ons to the check detail records
      * the user entered for this check.
      *
     C     $dist         begsr
      *
     C                   call      'HP335'
     C                   parm                    wkchdt
     C                   parm                    d1chno
     C                   parm                    d1cvno
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $f4s1 - F4 prompt on screen 1
      *----------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      *
     C                   select
      *
      * Sales type code
      *
     C                   when      fld = 'D1STCD' and
     C                             closedfl = no and
     C                             postedfl = no
     C                   move      *blank        xxstcd
     C                   move      *blank        xxstds
     C                   call      'HP544'
     C                   parm                    xxstcd
     C                   parm                    xxstds
     C                   seton                                        55
     C                   if        xxstcd <> *blank                             If selected
     C                   movel     xxstcd        d1stcd
     C                   movel     xxstds        d1stds
     C                   endif                                                  If selected
      *
      * JDE customer number
      *
     C                   when      fld = 'D1CVNO' and
     C                             closedfl = no and
     C                             postedfl = no
     C                   eval      inat1 = 'C'
     C                   call      'HP513'
     C                   parm                    incocd                         COMPANY
     C                   parm                    inat1                          SEARCH TYPE
     C                   parm      *zero         ouajd                          NUMBER
     C                   parm      *blank        oualph                         NAME
     C                   seton                                        54
     C                   if        ouajd <> 0                                   If selected
     C                   z-add     ouajd         d1cvno
     C                   movel     oualph        d1cnam
     C                   endif                                                  If selected
      *
     C                   other
      *
      * F4 not valid for this field so issue message
      *
     C                   if        error < maxmsg                               If first error
     C                   add       1             error
     C                   movel     'HS09011'     mgid(e)
     C                   endif                                                  If first error
      *
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $f4s2 - Prompt for screen 2
      *----------------------------------------------------------------
      *
     C     $f4s2         begsr
      *
      *
      * Set off all subfile indicators.
      *
     C                   exsr      $setoff2
      *
      *
     C                   select
      *
      *----------------------------------------------------------------
      * No fields are promptable in the control record on screen 2
      *----------------------------------------------------------------
      *
      *
      *
      *----------------------------------------------------------------
      * Prompted fields in the subfile on screen 2
      *----------------------------------------------------------------
      *
      * Type of payment
      *
     C                   when      fld = 'D2TPCD'
      *
     C                   exsr      $rrn2
     C                   if        *in97 = *off                                 If type hit
      *
     C                   if        hdpofl <> yes and                            If not protected
     C                             hdgscd <> 'CL'
     C                   call      'HP537'
     C                   parm      *blank        xxtpcd
     C                   parm      *blank        xxtpds
     C                   if        xxtpcd <> *blank                             If selected
     C                   eval      d2tpcd = xxtpcd
     C                   endif                                                  If selected
     C                   else
      *
      * The group is closed or the movement is posted; so, prompt not allowed.
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09011'     mgid(e)
     C                   endif
     C                   endif                                                  If not protected
      *
      * Reset subfile record indicators and update subfile record.
      *
     C                   exsr      $ind
     C                   seton                                        8551
     C                   update    hp136s2
     C                   setoff                                       8551
      *
      * Reset the subfile relative record number to what it was before
      * the user took F4 (it will be out-of-synch if the user has
      * selected a record thus causing the subfile record to be
      * retrieved and updates.)  But, set the page of the subfile to
      * be displayed to the page on which the user took F4.
      *
     C                   z-add     count         hdrrn
     C                   z-add     hdrr          hdpag
     C                   endif                                                  If type hit
      *
      *
      * Movement
      *
     C                   when      fld = 'D2MVSN'
      *
     C                   exsr      $rrn2
     C                   if        *in97 = *off                                 If movement hit
      *
     C                   if        hdpofl <> yes and                            If not protected
     C                             hdgscd <> 'CL'
      *
     C                   call      'HP554'
     C                   parm      0             wkmvsn
     C                   parm      d1cvno        wkcvno
     C                   parm      d1stcd        xxstcd
     C                   if        wkmvsn <> 0                                  If selected
     C                   z-add     wkmvsn        d2mvsn
     C                   endif                                                  If selected
     C                   else
      *
      * The group is closed or the movement is posted; so, prompt not allowed.
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09011'     mgid(e)
     C                   endif
     C                   endif                                                  If not protected
      *
      * Reset subfile record indicators and update subfile record.
      *
     C                   exsr      $ind
     C                   seton                                        8553
     C                   update    hp136s2
     C                   setoff                                       8553
      *
      * Reset the subfile relative record number to what it was before
      * the user took F4 (it will be out-of-synch if the user has
      * selected a record thus causing the subfile record to be
      * retrieved and updates.)  But, set the page of the subfile to
      * be displayed to the page on which the user took F4.
      *
     C                   z-add     count         hdrrn
     C                   z-add     hdrr          hdpag
     C                   endif                                                  If movement hit
      *
      *
      *
      * Hog Group
      *
     C                   when      fld = 'D2HGCD'
      *
     C                   exsr      $rrn2
     C                   if        *in97 = *off                                 If group hit
      *
     C                   if        hdpofl <> yes and                            If not protected
     C                             hdgscd <> 'CL'
     C                   call      'HP555'
     C                   parm      *blank        xxhgcd
     C                   parm      d1cvno        wkcvno
     C                   parm      d1stcd        xxstcd
     C                   parm      d2mvsn        wkmvsn
     C                   if        xxhgcd <> *blank                             If selected
     C                   eval      d2hgcd = xxhgcd
     C                   endif                                                  If selected
     C                   else
      *
      * The group is closed or the movement is posted; so, prompt not allowed.
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09011'     mgid(e)
     C                   endif
     C                   endif                                                  If not protected
      *
      * Reset subfile record indicators and update subfile record.
      *
     C                   exsr      $ind
     C                   seton                                        8552
     C                   update    hp136s2
     C                   setoff                                       8552
      *
      * Reset the subfile relative record number to what it was before
      * the user took F4 (it will be out-of-synch if the user has
      * selected a record thus causing the subfile record to be
      * retrieved and updates.)  But, set the page of the subfile to
      * be displayed to the page on which the user took F4.
      *
     C                   z-add     count         hdrrn
     C                   z-add     hdrr          hdpag
     C                   endif                                                  If group hit
     C                   other
      *
      *
      * F4 is not valid for this field; issue message.
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09011'     mgid(e)
     C                   endif
      *
      * Reset subfile record indicators and update subfile record--
      * if the user was on a subfile record.
      *
     C                   if        rcd = 'HP136S2   '                           If a subfile record
     C                   exsr      $rrn2
     C                   if        *in97 = *off
     C                   exsr      $ind
     C                   seton                                        85
     C                   update    hp136s2
     C                   setoff                                       85
      *
      * Reset the subfile relative record number to what it was before
      * the user took F4 (it will be out-of-synch if the user has
      * selected a record thus causing the subfile record to be
      * retrieved and updates.)  But, set the page of the subfile to
      * be displayed to the page on which the user took F4.
      *
     C                   z-add     count         hdrrn
     C                   z-add     hdrr          hdpag
     C                   endif
     C                   endif                                                  If a subfile record
     C                   endsl
      *
     C                   endsr
      /EJECT
      *------------------------------------------------------------------
      * $err2  - Set the subfile on screen two to redisplay at the first
      *          record with errors
      *------------------------------------------------------------------
      *
     C     $err2         begsr
      *
     C                   if        error = 1
     C                   z-add     hdrrn         hdpag
     C                   endif
      *
     C                   endsr
      *
      /EJECT
      *----------------------------------------------------------------
      * $setoff2 - Set off subfile indicators on screen 2
      *----------------------------------------------------------------
      *
     C     $setoff2      begsr
      *
     C                   setoff                                       303132
     C                   setoff                                       333435
     C                   setoff                                       363738
     C                   setoff                                       394044
     C                   setoff                                       454647
     C                   setoff                                       515253
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $exit - Set on LR and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
      *
      * Always roll back to get rid of all data for unfinished checks
      *
     C                   rolbk
      *
      * Close the adjustment file that is user-controlled
      *
     C                   close     hsp065
      *
     C                   seton                                        lr
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $tomdy - Flip date from ccyymmdd to mmddyy
      *---------------------------------------------------------------
      *
     C     $tomdy        begsr
      *
     C                   z-add     wkmon         wkmm
     C                   z-add     wkday         wkdd
     C                   z-add     wkyer         wkyy
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $wrmsg - Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If the call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redisplay screen to user.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *---------------------------------------------------------------
      * $clmsg - Subroutine to clear messages
      *---------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key reocrd will be set on. So, redisplay screen to user.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /EJECT
      *------------------------------------------------------------------
      * $rrn2  - Subroutine to find/retrieve the subfile record to update
      *          when returning from a select program on screen 2
      *------------------------------------------------------------------
      *
      * HDRR is the hidden field associated with the keyword SFLCSRRRN
      * on the control record format in the DSPF.
      * HDRRN is the value associated with the key word 'SFILE' in the
      * F-specs for the workstation.
      *
     C     $rrn2         begsr
      *
     C                   setoff                                       97
      *
     C                   if        hdrr <> 0
     C                   z-add     hdrr          hdrrn
     C     hdrrn         chain     hp136s2                            97
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $group - Retrieve the user-assigned alpha hog group code
      *----------------------------------------------------------------
      *
     C     $group        begsr
      *
      *
     C     cdhgsn        chain     hsl034d                            92
     C                   if        *in92 = *on
     C                   eval      d2hgcd = 'UNKNOWN'
     C                   else
     C                   eval      d2hgcd = hghgcd
     C                   eval      hdgscd = hggscd
      *
     C                   if        hggscd = 'CL'
     C                   eval      closedfl = yes
     C                   endif
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $fxchkamt - Get period and users allowed to fix a closed period
      *---------------------------------------------------------------
      *
     C     $fxchkamt     begsr
      *
     c                   eval      fxcompany = 360
      *
      ** Retrieve period and users from Company Values file
      ** values in data structure
      *
     C                   call      'POMTXFR'
     C                   parm      *blanks       fxreturn          7
     C                   parm                    fxcompany         3 0
     C                   parm      'HPSCHKAMTS'  fxcovalcd        10
     C                   parm                    fxsysvala        40
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * *inzsr - initialization
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
     C                   parm                    mode
     C                   parm                    incocd
     C                   parm                    inbocd
     C     svchdt        parm                    wkchdt
     C     svchno        parm                    d1chno
     C     svcvno        parm                    d1cvno
     C                   parm                    d1stcd
     C                   parm                    d1chdtmdy
     C                   parm                    d1cham
     C                   parm                    rtncd
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    d2tpcd
     C                   kfld                    d1stcd
      *
     C     key02         klist
     C                   kfld                    wkchdt
     C                   kfld                    d1cvno
     C                   kfld                    d1chno
      *
     C     key03         klist
     C                   kfld                    svchdt
     C                   kfld                    svcvno
     C                   kfld                    svchno
      *
     C     key04         klist
     C                   kfld                    svchdt
     C                   kfld                    svcvno
     C                   kfld                    svchno
     C                   kfld                    hdlnno
      *
     C     key05         klist
     C                   kfld                    d2mvsn
     C                   kfld                    hghgsn
      *
     C     key06         klist
     C                   kfld                    cdmvsn
     C                   kfld                    cdhgsn
      *
      *
      *
      * To support F5-Refresh, logic requires the number of lines on
      * the subfile page and also the number of lines less 1.  By
      * setting these values up as constant work fields, the processing
      * logic can be standardized between programs.
      *
      *
      * *NOTE: In the DSPF the 'SFLPAG' IS '5'. But because of the
      * subfile fold/drop logic, I must set it to 10 to get the blank
      * lines to be added correctly.
      *
      *
      * Screen 2 subfile
     C                   eval      wkplin = 10
     C                   eval      wkrlin = wkplin - 1
      *
      *
      * Move Business Office value to scrrens.
      *
     C                   eval      c2bocd = inbocd
     C                   eval      d1bocd = inbocd
      *
      *
      * Move the incoming entry mode to the screen field. If revising,
      * retrieve the customer name from JDE.
      *
     C                   select
     C                   when      mode = create
     C                   eval      dfmode = create
      *
     C                   when      mode = revise
     C                   eval      dfmode = revise
     C                   z-add     d1cvno        inajd
     C                   eval      inat1 = 'C'
     C                   exsr      $jdev
     C                   movel     oualph        d1cnam
     C                   endsl
      *
      *
      * Flip system date from mmddyy to ccyymmdd format using the 'date format'
      * field to add the century values. Use this value for editing and
      * updating.
      *
     C     *mdy          test(d)                 udate                  92
     C                   if        *in92 = *on
     C                   eval      wkudate = 0
     C                   else
     C     *mdy          move      udate         wkcymdiso
     C                   move      wkcymdiso     wkudate
     C                   endif
      *
      *
      * The data area that contains the current accounting period
      * will have been automatically brought in and locked.  Unlock
      * the data area.
     C                   unlock    dsdaaper
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
      **  3/16/20 E16183 - Update Check amounts and NPPCI amounts
      ** Retrieve valid period and users to update closed period
      *
     c                   exsr      $fxchkamt
      *
      * If you are in revise mode, then execute the subroutine to write
      * the check detail records to the subfile on screen 2. We do this
      * only to get the totals for populating the check header output only
      * fields on screen 1.
      *
     C                   if        mode = revise
     C                   open      hsp065
     C                   exsr      $set2
     C                   close     hsp065
     C                   endif
      *
      *
     C                   endsr
      /EJECT
