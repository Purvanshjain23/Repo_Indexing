// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLVAXFR
// ?Date: 14.08.2025 Time: 02:55:31
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modifications
//?11/05/2020 ISE H16853 - Recompiled due to change in Buy Order Number
// LCL.EA Company Number = CVTVAR(PAR.Company Number Alpha Usr)
LCL.EA_Company_Number = CVTVAR(PAR.Company_Number_Alpha_Usr);

// WRK.SP Kill Date = PAR.Kill Date 1 Usr
WRK.SP_Kill_Date = PAR.Kill_Date_1_Usr;

// Call program GET SysDYYYYMMDDHHMMSS UP.
CALL PROGRAM(GET SysDYYYYMMDDHHMMSS UP) ('PBN2UPC');
PARAMETER(WRK.SP_Kill_Date);

// Call program EXC Get Period Dts-DP UP.
CALL PROGRAM(EXC Get Period Dts-DP UP) ('PBOZUPR');
PARAMETER('C');
PARAMETER(PAR.Kill_Date_1_Usr);
PARAMETER(WRK.ER_Period_From);
PARAMETER(WRK.ER_Period_To);
PARAMETER(WRK.Week);

//?Ask Rose to get the hs week for me.
EXECUTE FUNCTION(RTV EvalTransUpl ActErpRT) TYPE(RTVOBJ) FILE(PKCPCPP)          AB1321058;
PARAMETER(LCL.EA_Company_Number);
PARAMETER(PAR.Kill_Date_1_Usr);
PARAMETER(PAR.Kill_Date_2_USR);
PARAMETER(WRK.SP_Kill_Date);
PARAMETER(WRK.ER_Period_From);
PARAMETER(WRK.ER_Period_To);
PARAMETER(WRK.Week);
PARAMETER(*ZERO);
PARAMETER(WRK.SP_Kill_Date);
{
 //?USER: Initialize routine

 // LCL.Erp Hot Wgt Description = CON.*BLANK
 LCL.Erp_Hot_Wgt_Description = *BLANK;

 //?USER: Processing if Data record not found

 // LCL.Erp Hot Wgt Description = CON.*BLANK
 LCL.Erp_Hot_Wgt_Description = *BLANK;

 //?USER: Process Data record

 //?This data is being process by company number and rst on kill date
 // LCL.Erp Sp Producer/Text = CON.*BLANK
 LCL.Erp_Sp_Producer_Text = *BLANK;

 // LCL.PD Producer Code = CON.*BLANK
 LCL.PD_Producer_Code = *BLANK;

 // LCL.PL Location Code = CON.*BLANK
 LCL.PL_Location_Code = *BLANK;

 //?Get tattoo if found, if not then load invalid
 EXECUTE FUNCTION(Val Tto/KlDt ExistErp RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1320753;
 PARAMETER(DB1.EA_Company_Number);
 PARAMETER(DB1.EA_Tattoo_Number);
 PARAMETER(DB1.EA_Kill_Date);
 PARAMETER(LCL.PD_Producer_Code);
 PARAMETER(LCL.PL_Location_Code);
 PARAMETER(LCL.Erp_Sp_Producer_Erp_Code);
 PARAMETER(LCL.Erp_Sp_Producer_Text);
 {
  //?USER: Processing if Data record not found

  // PAR.PD Producer Code = CON.*BLANK
  PAR.PD_Producer_Code = *BLANK;

  // PAR.PL Location Code = CON.*BLANK
  PAR.PL_Location_Code = *BLANK;

  // PAR.Erp Sp Producer/Text = CON.*BLANK
  PAR.Erp_Sp_Producer_Text = *BLANK;

  //?Get the text for the invalid tattoo numbers
  // LCL.Erp Sp Producer Erp Code = CVTVAR(CND.Invalid Tattoo)
  LCL.Erp_Sp_Producer_Erp_Code = CVTVAR('INVTAT');

  // Call program Rtv Erp Sp Producer PoXP.
  CALL PROGRAM(Rtv Erp Sp Producer PoXP) ('PLUUXFR');
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(LCL.Erp_Sp_Producer_Erp_Code);
  PARAMETER(PAR.Erp_Sp_Producer_Text);
  PARAMETER(WRK.Return_Code_USR);

  //?USER: Process Data record

  // PAR.PD Producer Code = DB1.PD Producer Code
  PAR.PD_Producer_Code = DB1.PD_Producer_Code;

  // PAR.PL Location Code = DB1.PL Location Code
  PAR.PL_Location_Code = DB1.PL_Location_Code;

  // PAR.Erp Sp Producer/Text = CON.*BLANK
  PAR.Erp_Sp_Producer_Text = *BLANK;

  CASE;

  // IF DB1.TH Source Type is Internal
  IF DB1.TH_Source_Type = 'I';

  //?SEABOARD ONLY
  // Call program Rtv Erp Sp Producer PoXP.
  CALL PROGRAM(Rtv Erp Sp Producer PoXP) ('PLUUXFR');
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(PAR.Erp_Sp_Producer_Text);
  PARAMETER(WRK.Return_Code_USR);

  // IF PAR.BOH Company Number is SBD Farms of Guymon, Ok
  IF PAR.BOH_Company_Number = 360;

  //?Guymon EXTERNAL producers
  // Call program Rtv Erp Sp Producer PoXP.
  CALL PROGRAM(Rtv Erp Sp Producer PoXP) ('PLUUXFR');
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(PAR.Erp_Sp_Producer_Text);
  PARAMETER(WRK.Return_Code_USR);

  CASE;

  // IF WRK.Return Code USR is *Record does not exist
  IF WRK.Return_Code_USR = 'Y2U0005';

  //?Get the text for the other external producers
  // LCL.Erp Sp Producer Erp Code = CND.OTHER
  LCL.Erp_Sp_Producer_Erp_Code = 'OTHER';

  // Call program Rtv Erp Sp Producer PoXP.
  CALL PROGRAM(Rtv Erp Sp Producer PoXP) ('PLUUXFR');
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(LCL.Erp_Sp_Producer_Erp_Code);
  PARAMETER(PAR.Erp_Sp_Producer_Text);
  PARAMETER(WRK.Return_Code_USR);

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Call program Rtv Erp Sp Producer PoXP.
  CALL PROGRAM(Rtv Erp Sp Producer PoXP) ('PLUUXFR');
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER('ALLPRD');
  PARAMETER(PAR.Erp_Sp_Producer_Text);
  PARAMETER(WRK.Return_Code_USR);

  ENDIF;

 }

 // Call program Rtv Erp Hog Hot Wgt RgXF.
 CALL PROGRAM(Rtv Erp Hog Hot Wgt RgXF) ('PLUTXFR');
 PARAMETER(DB1.EA_Hot_Weight);
 PARAMETER(LCL.Erp_Hot_Wgt_Description);

 // LCL.ER HOTRGS WGT Group = DB1.EA Hot Weight * CON.1 *
 LCL.ER_HOTRGS_WGT_Group = DB1.EA_Hot_Weight * 1;

 EXECUTE FUNCTION(CRT/CHG Eval UplErpActRT) TYPE(RTVOBJ) FILE(PLBUCPP)           AB1321064;
 PARAMETER(DB1.EA_Company_Number);
 PARAMETER(DB1.EA_Kill_Date);
 PARAMETER(DB1.EA_Scale_Sequence_Number);
 PARAMETER(DB1.EA_Tattoo_Number);
 PARAMETER(DB1.EA_Hot_Weight);
 PARAMETER(DB1.EA_Record_Processed);
 PARAMETER(DB1.EA_Backfat_MM);
 PARAMETER(DB1.EA_LoinEye_MM);
 PARAMETER(DB1.EA_Light_Refl_MM);
 PARAMETER(DB1.EA_Trolley_Id);
 PARAMETER(DB1.EA_Broken_Back_Sts);
 PARAMETER(DB1.EA_Unused_Sts_1);
 PARAMETER(DB1.EA_Unused_Sts_2);
 PARAMETER(DB1.EA_Unused_Sts_3);
 PARAMETER(DB1.EA_Unused_Sts_4);
 PARAMETER(DB1.EA_Unused_Sts_5);
 PARAMETER(DB1.RU_Date);
 PARAMETER(DB1.RU_Time);
 PARAMETER(LCL.Erp_Sp_Producer_Text);
 PARAMETER(LCL.Erp_Hot_Wgt_Description);
 PARAMETER(LCL.ER_HOTRGS_WGT_Group);
 PARAMETER(LCL.PD_Producer_Code);
 PARAMETER(LCL.PL_Location_Code);
 PARAMETER(PAR.ER_Period_From);
 PARAMETER(PAR.ER_Period_To);
 PARAMETER(PAR.ER_Week);
 PARAMETER(*ZERO);
 PARAMETER(LCL.ER_Kill_Date_long);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Eval Trans UPL ERPCR) TYPE(CRTOBJ) FILE(PLBUCPP)           AB1320311;
  PARAMETER(PAR.ER_Company_Number);
  PARAMETER(PAR.ER_Kill_Date);
  PARAMETER(PAR.ER_Scale_Sequence_Number);
  PARAMETER(PAR.ER_Tattoo_Number);
  PARAMETER(PAR.ER_Hot_Weight);
  PARAMETER(PAR.ER_Record_Processed);
  PARAMETER(PAR.ER_Backfat_MM);
  PARAMETER(PAR.ER_LoinEye_MM);
  PARAMETER(PAR.ER_Light_Refl_MM);
  PARAMETER(PAR.ER_Trolley_Id);
  PARAMETER(PAR.ER_Broken_Back_Sts);
  PARAMETER(PAR.ER_Unused_Sts_1);
  PARAMETER(PAR.ER_Unused_Sts_2);
  PARAMETER(PAR.ER_Unused_Sts_3);
  PARAMETER(PAR.ER_Unused_Sts_4);
  PARAMETER(PAR.ER_Unused_Sts_5);
  PARAMETER(PAR.RU_Date);
  PARAMETER(PAR.RU_Time);
  PARAMETER(PAR.ER_Sp_Producer_Text);
  PARAMETER(PAR.ER_HOTRGS_Description);
  PARAMETER(PAR.ER_HOTRGS_WGT_Group);
  PARAMETER(PAR.ER_Producer_Code);
  PARAMETER(PAR.ER_Producer_Location);
  PARAMETER(PAR.ER_Period_From);
  PARAMETER(PAR.ER_Period_To);
  PARAMETER(PAR.ER_Week);
  PARAMETER(PAR.ER_Process);
  PARAMETER(PAR.ER_Kill_Date_long);
  PARAMETER(LCL.RS_User_Changed);
  PARAMETER(LCL.RS_Date_Changed);
  PARAMETER(LCL.RS_Time_Changed);
  PARAMETER(LCL.RS_Record_Status);
  PARAMETER(LCL.RS_Job);
  PARAMETER(LCL.RS_Program);
  PARAMETER(LCL.RS_User_Added);
  PARAMETER(LCL.RS_Date_Added);
  PARAMETER(LCL.RS_Time_Added);
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Eval Trans UPL ERPCH) TYPE(CHGOBJ) FILE(PLBUCPP)           AB1320312;
  PARAMETER(DB1.ER_Company_Number);
  PARAMETER(DB1.ER_Kill_Date);
  PARAMETER(DB1.ER_Scale_Sequence_Number);
  PARAMETER(PAR.ER_Tattoo_Number);
  PARAMETER(PAR.ER_Hot_Weight);
  PARAMETER(PAR.ER_Record_Processed);
  PARAMETER(PAR.ER_Backfat_MM);
  PARAMETER(PAR.ER_LoinEye_MM);
  PARAMETER(PAR.ER_Light_Refl_MM);
  PARAMETER(PAR.ER_Trolley_Id);
  PARAMETER(PAR.ER_Broken_Back_Sts);
  PARAMETER(PAR.ER_Unused_Sts_1);
  PARAMETER(PAR.ER_Unused_Sts_2);
  PARAMETER(PAR.ER_Unused_Sts_3);
  PARAMETER(PAR.ER_Unused_Sts_4);
  PARAMETER(PAR.ER_Unused_Sts_5);
  PARAMETER(PAR.RU_Date);
  PARAMETER(PAR.RU_Time);
  PARAMETER(PAR.ER_Sp_Producer_Text);
  PARAMETER(PAR.ER_HOTRGS_Description);
  PARAMETER(PAR.ER_HOTRGS_WGT_Group);
  PARAMETER(PAR.ER_Producer_Code);
  PARAMETER(PAR.ER_Producer_Location);
  PARAMETER(PAR.ER_Period_From);
  PARAMETER(PAR.ER_Period_To);
  PARAMETER(PAR.ER_Week);
  PARAMETER(PAR.ER_Process);
  PARAMETER(PAR.ER_Kill_Date_long);
 }

}


