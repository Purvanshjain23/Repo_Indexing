// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPYSE1R
// ?Date: 14.08.2025 Time: 03:42:21
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('TRF');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

//?** Set to *ADD mode if not Reason Code is passed in
CASE;

// IF PAR.On Time Reason Code is not entered
IF PAR.On_Time_Reason_Code = *BLANK;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

ENDIF;

//?***** Change Log and Comments
DO;

//?** 06/15/2006 LJB TRF011
//?** Program created
//?*****
ENDDO;

//?USER: Initialize key screen

MOVE *ALL (To: KEY From: PAR);

//?USER: Initialize detail screen (new record)

// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

//?USER: Validate detail screen fields

//?** Return Department Code and Department Description
CASE;

// IF DTL.*CMD key is CF04
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.OTR Department Code
AND PGM.*Cursor_field = DTL.OTR_Department_Code;

// Call program SEL On Time Reas Group SR.
CALL PROGRAM(SEL On Time Reas Group SR) ('PPYWSRR');
PARAMETER(WRK.On_Time_Reason_Code);
PARAMETER(NLL.OTR_Description);
PARAMETER(DTL.OTR_Department_Code);
PARAMETER(DTL.OTR_Dept_Description);
PARAMETER(WRK.OTR_Group_Code);
PARAMETER(NLL.OTR_Group_Description);
PARAMETER(NLL.Record_Status);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?** Return Department Description for selected department code
CASE;

// IF DTL.*CMD key is CF04
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.OTR Dept Description
AND PGM.*Cursor_field = DTL.OTR_Dept_Description;

CASE;

// IF DTL.OTR Department Code is not entered
IF DTL.OTR_Department_Code = *BLANK;

// Call program SEL On Time Reas Group SR.
CALL PROGRAM(SEL On Time Reas Group SR) ('PPYWSRR');
PARAMETER(WRK.On_Time_Reason_Code);
PARAMETER(NLL.OTR_Description);
PARAMETER(DTL.OTR_Department_Code);
PARAMETER(DTL.OTR_Dept_Description);
PARAMETER(WRK.OTR_Group_Code);
PARAMETER(NLL.OTR_Group_Description);
PARAMETER(NLL.Record_Status);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program SEL On Time Reas Group SR.
CALL PROGRAM(SEL On Time Reas Group SR) ('PPYWSRR');
PARAMETER(WRK.On_Time_Reason_Code);
PARAMETER(NLL.OTR_Description);
PARAMETER(DTL.OTR_Department_Code);
PARAMETER(DTL.OTR_Dept_Description);
PARAMETER(WRK.OTR_Group_Code);
PARAMETER(NLL.OTR_Group_Description);
PARAMETER(NLL.Record_Status);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?** Return Group Code and Group Description
CASE;

// IF DTL.*CMD key is CF04
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.OTR Group Code
AND PGM.*Cursor_field = DTL.OTR_Group_Code;

// Call program SEL On Time Reas Group SR.
CALL PROGRAM(SEL On Time Reas Group SR) ('PPYWSRR');
PARAMETER(WRK.On_Time_Reason_Code);
PARAMETER(NLL.OTR_Description);
PARAMETER(WRK.OTR_Department_Code);
PARAMETER(NLL.OTR_Dept_Description);
PARAMETER(DTL.OTR_Group_Code);
PARAMETER(DTL.OTR_Group_Description);
PARAMETER(NLL.Record_Status);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?** Return Group Description for selected group code
CASE;

// IF DTL.*CMD key is CF04
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.OTR Group Description
AND PGM.*Cursor_field = DTL.OTR_Group_Description;

CASE;

// IF DTL.OTR Group Code is not entered
IF DTL.OTR_Group_Code = *BLANK;

// Call program SEL On Time Reas Group SR.
CALL PROGRAM(SEL On Time Reas Group SR) ('PPYWSRR');
PARAMETER(WRK.On_Time_Reason_Code);
PARAMETER(NLL.OTR_Description);
PARAMETER(WRK.OTR_Department_Code);
PARAMETER(NLL.OTR_Dept_Description);
PARAMETER(DTL.OTR_Group_Code);
PARAMETER(DTL.OTR_Group_Description);
PARAMETER(NLL.Record_Status);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program SEL On Time Reas Group SR.
CALL PROGRAM(SEL On Time Reas Group SR) ('PPYWSRR');
PARAMETER(WRK.On_Time_Reason_Code);
PARAMETER(NLL.OTR_Description);
PARAMETER(WRK.OTR_Department_Code);
PARAMETER(NLL.OTR_Dept_Description);
PARAMETER(DTL.OTR_Group_Code);
PARAMETER(DTL.OTR_Group_Description);
PARAMETER(NLL.Record_Status);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?** Default Record Status to Active
CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Create On Time Reasons) TYPE(CRTOBJ) FILE(PPB5REP)             AC1783596;
PARAMETER(DTL.On_Time_Reason_Code);
PARAMETER(DTL.OTR_Description);
PARAMETER(DTL.OTR_Department_Code);
PARAMETER(DTL.OTR_Dept_Description);
PARAMETER(DTL.OTR_Group_Code);
PARAMETER(DTL.OTR_Group_Description);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
{
 //?USER: Processing before Data update

 // DB1.Create Date = JOB.*Job date
 DB1.Create_Date = JOB.*Job_date;

 // DB1.Create Time = JOB.*Job time
 DB1.Create_Time = JOB.*Job_time;

 // DB1.Create User = JOB.*USER
 DB1.Create_User = JOB.*USER;

 // DB1.Create Program = JOB.*PROGRAM
 DB1.Create_Program = JOB.*PROGRAM;

}


//?USER: Change DBF record

EXECUTE FUNCTION(Change On Time Reasons) TYPE(CHGOBJ) FILE(PPB5REP)             AC1783597;
PARAMETER(DTL.On_Time_Reason_Code);
PARAMETER(DTL.OTR_Description);
PARAMETER(DTL.OTR_Department_Code);
PARAMETER(DTL.OTR_Dept_Description);
PARAMETER(DTL.OTR_Group_Code);
PARAMETER(DTL.OTR_Group_Description);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
{
 //?USER: Processing before Data update

 // DB1.Change Date = JOB.*Job date
 DB1.Change_Date = JOB.*Job_date;

 // DB1.Change Time = JOB.*Job time
 DB1.Change_Time = JOB.*Job_time;

 // DB1.Change User = JOB.*USER
 DB1.Change_User = JOB.*USER;

 // DB1.Change Program = JOB.*PROGRAM
 DB1.Change_Program = JOB.*PROGRAM;

}


