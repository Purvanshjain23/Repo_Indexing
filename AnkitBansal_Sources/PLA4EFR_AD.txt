// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLA4EFR
// ?Date: 14.08.2025 Time: 02:53:35
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?H16853 ISE 11/05/2020-Recompiled due to change in Buy Order Number
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


//?E2423 Mtech Live or Not Live *** Interfaces to HPS ***
//?E2423 Mtech Live will not use this HPS program
//?Get the MTech Live Yes or No
DO;

//?Mtech Live Yes or no
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('MTECHLIVE');
PARAMETER(WRK.System_Value_Alpha_USR);

// LCL.MTech Live Yes or No = WRK.System Value Alpha    USR
LCL.MTech_Live_Yes_or_No = WRK.System_Value_Alpha_USR;

ENDDO;

// WRK.Hdgs Hogs Usr = CON.Bldg   Room   Sire   Deli
WRK.Hdgs_Hogs_Usr = 'Bldg   Room   Sire   Deli';

// WRK.Hdgs Hogs Usr = CONCAT(WRK.Hdgs Hogs Usr,CON.vered,CON.*ZERO)
WRK.Hdgs_Hogs_Usr = WRK.Hdgs_Hogs_Usr + 'vered' (*ZERO);

// LCL.Hdgs Hogs Usr = CON.+      +          Head
LCL.Hdgs_Hogs_Usr = '+      +          Head';

// LCL.Hdgs Hogs Usr = CONCAT(LCL.Hdgs Hogs Usr,CON.Weight,CON.1)
LCL.Hdgs_Hogs_Usr = LCL.Hdgs_Hogs_Usr + 'Weight' (1);

CASE;

// IF PAR.DT Source Type is Internal
IF PAR.DT_Source_Type = 'I';

// WRK.Hdgs Internal Hogs Usr = CON.Hog Grp  Movement
WRK.Hdgs_Internal_Hogs_Usr = 'Hog Grp  Movement';

// LCL.Hdgs Internal Hogs Usr = CON.Code     Number
LCL.Hdgs_Internal_Hogs_Usr = 'Code     Number';

// WRK.Text Hdr 1 Usr = WRK.Hdgs Internal Hogs Usr
WRK.Text_Hdr_1_Usr = WRK.Hdgs_Internal_Hogs_Usr;

// LCL.Text Hdr 2 Usr = LCL.Hdgs Internal Hogs Usr
LCL.Text_Hdr_2_Usr = LCL.Hdgs_Internal_Hogs_Usr;

// WRK.Text Hdr 1 Usr = CONCAT(WRK.Text Hdr 1 Usr,WRK.Hdgs Hogs Usr,CON.1)
WRK.Text_Hdr_1_Usr = WRK.Text_Hdr_1_Usr + WRK.Hdgs_Hogs_Usr (1);

// LCL.Text Hdr 2 Usr = CONCAT(LCL.Text Hdr 2 Usr,LCL.Hdgs Hogs Usr,CON.5)
LCL.Text_Hdr_2_Usr = LCL.Text_Hdr_2_Usr + LCL.Hdgs_Hogs_Usr (5);

// IF PAR.DT Source Type is External
IF PAR.DT_Source_Type = 'E';

// WRK.Hdgs External Hogs Usr = CON.*BLANK
WRK.Hdgs_External_Hogs_Usr = *BLANK;

// LCL.Hdgs External Hogs Usr = CON.*BLANK
LCL.Hdgs_External_Hogs_Usr = *BLANK;

// WRK.Text Hdr 1 Usr = WRK.Hdgs External Hogs Usr
WRK.Text_Hdr_1_Usr = WRK.Hdgs_External_Hogs_Usr;

// LCL.Text Hdr 2 Usr = LCL.Hdgs External Hogs Usr
LCL.Text_Hdr_2_Usr = LCL.Hdgs_External_Hogs_Usr;

// WRK.Text Hdr 1 Usr = CONCAT(WRK.Text Hdr 1 Usr,WRK.Hdgs Hogs Usr,CON.18)
WRK.Text_Hdr_1_Usr = WRK.Text_Hdr_1_Usr + WRK.Hdgs_Hogs_Usr (18);

// LCL.Text Hdr 2 Usr = CONCAT(LCL.Text Hdr 2 Usr,LCL.Hdgs Hogs Usr,CON.20)
LCL.Text_Hdr_2_Usr = LCL.Text_Hdr_2_Usr + LCL.Hdgs_Hogs_Usr (20);

ENDIF;

//?USER: Initialize subfile header

// CTL.Text Hdr 1 Usr = WRK.Text Hdr 1 Usr
CTL.Text_Hdr_1_Usr = WRK.Text_Hdr_1_Usr;

// CTL.Text Hdr 2 Usr = LCL.Text Hdr 2 Usr
CTL.Text_Hdr_2_Usr = LCL.Text_Hdr_2_Usr;

// CTL.DT Delivered Head = PAR.DT Delivered Head
CTL.DT_Delivered_Head = PAR.DT_Delivered_Head;

// CTL.DT Farm Site Code = PAR.DT Farm Site Code
CTL.DT_Farm_Site_Code = PAR.DT_Farm_Site_Code;

// CTL.Weight Tot USR = CON.*ZERO
CTL.Weight_Tot_USR = *ZERO;

// CTL.DT Delivered Weight lbs = PAR.DT Delivered Weight lbs
CTL.DT_Delivered_Weight_lbs = PAR.DT_Delivered_Weight_lbs;

EXECUTE FUNCTION(Rtv Accum Split Hd    RT) TYPE(RTVOBJ) FILE(PLAJCPP)           AB1246349;
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.DSH_Kill_Date);
PARAMETER(CTL.DT_Delivery_Date);
PARAMETER(CTL.DT_Delivery_Time);
PARAMETER(CTL.DT_Delivery_Time_Seq);
PARAMETER(CTL.Head_Total_5_0_USR);
PARAMETER(CTL.Weight_Tot_USR);
{
 //?USER: Initialize routine

 // PAR.DT Delivered Head = CON.*ZERO
 PAR.DT_Delivered_Head = *ZERO;

 // PAR.Weight Tot USR = CON.*ZERO
 PAR.Weight_Tot_USR = *ZERO;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.RS Record Status is Active
 IF DB1.RS_Record_Status = 'A';

 // PAR.DT Delivered Head = PAR.DT Delivered Head + DB1.DTS Delivered Head
 PAR.DT_Delivered_Head = PAR.DT_Delivered_Head + DB1.DTS_Delivered_Head;

 // PAR.Weight Tot USR = PAR.Weight Tot USR + DB1.DTS Delivered Weight
 PAR.Weight_Tot_USR = PAR.Weight_Tot_USR + DB1.DTS_Delivered_Weight;

 ENDIF;

}


//?USER: Initialize subfile record (existing record)

CASE;

// IF DB1.RS Record Status is Flag for Purge
IF DB1.RS_Record_Status = 'D';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

CASE;

// IF PAR.DT Source Type is Internal
IF PAR.DT_Source_Type = 'I';

// Call program Val 1Bldg&Room Only   XF.
CALL PROGRAM(Val 1Bldg&Room Only   XF) ('PLRIXFR');
PARAMETER(DB1.CC_Company_Number);
PARAMETER(DB1.DSH_Kill_Date);
PARAMETER(DB1.DT_Delivery_Date);
PARAMETER(DB1.DT_Delivery_Time);
PARAMETER(DB1.DT_Delivery_Time_Seq);
PARAMETER(DB1.DTS_Building);
PARAMETER(DB1.DTS_Room);
PARAMETER(WRK.Count_number_1_5_use);

CASE;

// IF WRK.Count number 1 -  5 use is GT 1
IF WRK.Count_number_1_5_use > 1;

// Send error message - 'Dlv TrackSplit Already Found'
ERROR(PRK1268);
MSGPARM(RCD.DTS_Building);
MSGPARM(RCD.DTS_Room);

ENDIF;

ENDIF;

ENDIF;

//?CALC: Subfile control function fields

EXECUTE FUNCTION(Rtv Accum Split Hd    RT) TYPE(RTVOBJ) FILE(PLAJCPP)           AB1246349;
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.DSH_Kill_Date);
PARAMETER(CTL.DT_Delivery_Date);
PARAMETER(CTL.DT_Delivery_Time);
PARAMETER(CTL.DT_Delivery_Time_Seq);
PARAMETER(CTL.Head_Total_5_0_USR);
PARAMETER(CTL.Weight_Tot_USR);
{
 //?USER: Initialize routine

 // PAR.DT Delivered Head = CON.*ZERO
 PAR.DT_Delivered_Head = *ZERO;

 // PAR.Weight Tot USR = CON.*ZERO
 PAR.Weight_Tot_USR = *ZERO;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.RS Record Status is Active
 IF DB1.RS_Record_Status = 'A';

 // PAR.DT Delivered Head = PAR.DT Delivered Head + DB1.DTS Delivered Head
 PAR.DT_Delivered_Head = PAR.DT_Delivered_Head + DB1.DTS_Delivered_Head;

 // PAR.Weight Tot USR = PAR.Weight Tot USR + DB1.DTS Delivered Weight
 PAR.Weight_Tot_USR = PAR.Weight_Tot_USR + DB1.DTS_Delivered_Weight;

 ENDIF;

}


//?USER: Validate subfile record fields

CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Accum Split Hd    RT) TYPE(RTVOBJ) FILE(PLAJCPP)           AB1246349;
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.DSH_Kill_Date);
PARAMETER(CTL.DT_Delivery_Date);
PARAMETER(CTL.DT_Delivery_Time);
PARAMETER(CTL.DT_Delivery_Time_Seq);
PARAMETER(CTL.Head_Total_5_0_USR);
PARAMETER(CTL.Weight_Tot_USR);
{
 //?USER: Initialize routine

 // PAR.DT Delivered Head = CON.*ZERO
 PAR.DT_Delivered_Head = *ZERO;

 // PAR.Weight Tot USR = CON.*ZERO
 PAR.Weight_Tot_USR = *ZERO;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.RS Record Status is Active
 IF DB1.RS_Record_Status = 'A';

 // PAR.DT Delivered Head = PAR.DT Delivered Head + DB1.DTS Delivered Head
 PAR.DT_Delivered_Head = PAR.DT_Delivered_Head + DB1.DTS_Delivered_Head;

 // PAR.Weight Tot USR = PAR.Weight Tot USR + DB1.DTS Delivered Weight
 PAR.Weight_Tot_USR = PAR.Weight_Tot_USR + DB1.DTS_Delivered_Weight;

 ENDIF;

}


CASE;

// IF PAR.DT Source Type is Internal
IF PAR.DT_Source_Type = 'I';

// Call program Val 1Bldg&Room Only   XF.
CALL PROGRAM(Val 1Bldg&Room Only   XF) ('PLRIXFR');
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.DSH_Kill_Date);
PARAMETER(RCD.DT_Delivery_Date);
PARAMETER(RCD.DT_Delivery_Time);
PARAMETER(RCD.DT_Delivery_Time_Seq);
PARAMETER(RCD.DTS_Building);
PARAMETER(RCD.DTS_Room);
PARAMETER(WRK.Count_number_1_5_use);

CASE;

// IF WRK.Count number 1 -  5 use is GT 1
IF WRK.Count_number_1_5_use > 1;

// Send error message - 'Dlv TrackSplit Already Found'
ERROR(PRK1268);
MSGPARM(RCD.DTS_Building);
MSGPARM(RCD.DTS_Room);

ENDIF;

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Delv Trckng Split IF) TYPE(EXCINTFUN) FILE(PLAJCPP)        AB1245190;
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.DSH_Kill_Date);
PARAMETER(RCD.DT_Delivery_Date);
PARAMETER(RCD.DT_Delivery_Time);
PARAMETER(RCD.DT_Delivery_Time_Seq);
PARAMETER(RCD.DTS_Split_Sequence);
PARAMETER(RCD.DTS_Building);
PARAMETER(RCD.DTS_Room);
PARAMETER(RCD.DTS_Sire_Line_Code);
PARAMETER(RCD.DTS_Hog_Group_Code);
PARAMETER(RCD.DTS_Delivered_Head);
PARAMETER(RCD.DTS_Delivered_Weight);
PARAMETER(RCD.DTS_Movement_Number);
PARAMETER(RCD.DTS_UnUsed_Number_6_0);
PARAMETER(RCD.DTS_Unused_Fld_1);
PARAMETER(RCD.DTS_Unused_Fld_2);
PARAMETER(RCD.DTS_Unused_Fld_3);
PARAMETER(RCD.DTS_Unused_Status_1);
PARAMETER(RCD.DTS_Unused_Status_2);
PARAMETER(RCD.DTS_Unused_Status_3);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
PARAMETER(PAR.DT_Source_Type);
{
 //?Execute internal function

 // Call program Val 1Bldg&Room Only   XF.
 CALL PROGRAM(Val 1Bldg&Room Only   XF) ('PLRIXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.DSH_Kill_Date);
 PARAMETER(PAR.DT_Delivery_Date);
 PARAMETER(PAR.DT_Delivery_Time);
 PARAMETER(PAR.DT_Delivery_Time_Seq);
 PARAMETER(PAR.DTS_Building);
 PARAMETER(PAR.DTS_Room);
 PARAMETER(WRK.Count_number_1_5_use);

 CASE;

 // IF WRK.Count number 1 -  5 use is GT 1
 IF WRK.Count_number_1_5_use > 1;

 // Send error message - 'Dlv TrackSplit Already Found'
 ERROR(PRK1268);
 MSGPARM(PAR.DTS_Building);
 MSGPARM(PAR.DTS_Room);

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Next Split Seq    RT) TYPE(RTVOBJ) FILE(PLAJCPP)           AB1245192;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.DSH_Kill_Date);
 PARAMETER(PAR.DT_Delivery_Date);
 PARAMETER(PAR.DT_Delivery_Time);
 PARAMETER(PAR.DT_Delivery_Time_Seq);
 PARAMETER(PAR.DTS_Split_Sequence);
 {
  //?USER: Processing if Data record not found

  // PAR.DTS Split Sequence = CON.1
  PAR.DTS_Split_Sequence = 1;

  //?USER: Process Data record

  // PAR.DTS Split Sequence = DB1.DTS Split Sequence + CON.1
  PAR.DTS_Split_Sequence = DB1.DTS_Split_Sequence + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Delv Trckng Split CR) TYPE(CRTOBJ) FILE(PLAJCPP)           AB1245170;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.DSH_Kill_Date);
 PARAMETER(PAR.DT_Delivery_Date);
 PARAMETER(PAR.DT_Delivery_Time);
 PARAMETER(PAR.DT_Delivery_Time_Seq);
 PARAMETER(PAR.DTS_Split_Sequence);
 PARAMETER(PAR.DTS_Building);
 PARAMETER(PAR.DTS_Room);
 PARAMETER(PAR.DTS_Sire_Line_Code);
 PARAMETER(PAR.DTS_Hog_Group_Code);
 PARAMETER(PAR.DTS_Delivered_Head);
 PARAMETER(PAR.DTS_Delivered_Weight);
 PARAMETER(PAR.DTS_Movement_Number);
 PARAMETER(PAR.DTS_UnUsed_Number_6_0);
 PARAMETER(PAR.DTS_Unused_Fld_1);
 PARAMETER(PAR.DTS_Unused_Fld_2);
 PARAMETER(PAR.DTS_Unused_Fld_3);
 PARAMETER(PAR.DTS_Unused_Status_1);
 PARAMETER(PAR.DTS_Unused_Status_2);
 PARAMETER(PAR.DTS_Unused_Status_3);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

}


//?USER: Delete DBF record

EXECUTE FUNCTION(Del Delv Trckng Split DO) TYPE(DLTOBJ) FILE(PLAJCPP)           AB1245172;
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.DSH_Kill_Date);
PARAMETER(RCD.DT_Delivery_Date);
PARAMETER(RCD.DT_Delivery_Time);
PARAMETER(RCD.DT_Delivery_Time_Seq);
PARAMETER(RCD.DTS_Split_Sequence);

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Delv Trckng Split CH) TYPE(CHGOBJ) FILE(PLAJCPP)           AB1245171;
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.DSH_Kill_Date);
PARAMETER(RCD.DT_Delivery_Date);
PARAMETER(RCD.DT_Delivery_Time);
PARAMETER(RCD.DT_Delivery_Time_Seq);
PARAMETER(RCD.DTS_Split_Sequence);
PARAMETER(RCD.DTS_Building);
PARAMETER(RCD.DTS_Room);
PARAMETER(RCD.DTS_Sire_Line_Code);
PARAMETER(RCD.DTS_Hog_Group_Code);
PARAMETER(RCD.DTS_Delivered_Head);
PARAMETER(RCD.DTS_Delivered_Weight);
PARAMETER(RCD.DTS_Movement_Number);
PARAMETER(RCD.DTS_UnUsed_Number_6_0);
PARAMETER(RCD.DTS_Unused_Fld_1);
PARAMETER(RCD.DTS_Unused_Fld_2);
PARAMETER(RCD.DTS_Unused_Fld_3);
PARAMETER(RCD.DTS_Unused_Status_1);
PARAMETER(RCD.DTS_Unused_Status_2);
PARAMETER(RCD.DTS_Unused_Status_3);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


//?USER: Extra processing after DBF update

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?USER: Exit program processing

//?Original Code
CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

CASE;

// IF CTL.DT Delivered Head NE CTL.Head Total (5.0) USR
IF CTL.DT_Delivered_Head <> CTL.Head_Total_5_0_USR;

// Send error message - 'Delv Tracking Split Head must equal the Delivered Head.'
ERROR(PRK1063);
MSGPARM(CTL.DT_Delivered_Head);

ENDIF;

ENDIF;

