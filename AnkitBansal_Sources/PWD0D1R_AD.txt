// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PWD0D1R
// ?Date: 14.08.2025 Time: 02:56:06
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?E11288 JJH 07/25/17 - Tattoo Header Modifications
//?- Since we are preventing modifications to Tattoo Header after it
//?  has been paid, this Display function is being created to provide
//?  user with the ability to view the Tattoo Header.
//?- Copied from Edt Tattoo Hdr/Defect  ER (PKKIE1R)
//?- Remove F4=Prompt, and all '+' Signs
//?- Remove logic to Set Cursor
ENDDO;

EXECUTE FUNCTION(E00150 Prod/Subsidiary) TYPE(EXCINTFUN)                        AB1291893;
{
 //?Execute internal function

 //?09/19/08 SLM E00150 Add the Producer Subsidiary to the
 //?Tattoo Header Ext  -- Only on non Resale hogs
 //?Allow the user to inter the Producer Subsidiary for this
 //?tattoo if the Producer Subsidiary has records for any subsidiary
 //?then the Producer Subsidiary code will be required for this tattoo
}


//?Modification History Created IS 061308 slm
DO;

//?***** Change log
//?PK0495 12/12/02  1) Remove ref/upd of the Group Reference Code USR
//?2) Update"Delivered Head"in the Delivery Tracking with "Load Head Shipped"
//?3) Group Ref is Optional on the screen now. May be used f/ EXT.
//?*****
//?8/7/03 RMC Per Jancie - dont default BOL Shipped Head
//?*****
//?12/27/05 LJB - 1. Add PS Site ID to screen - Non-display if
//?   LCL.Site ID Required from Producer Location file = "N"
//?   2. If Site ID is prompted, call Select Producer Site Mileage
//?   3. If Site ID is entered, Producer Site Mileage must exist
//?   else, error
//?   4. If LCL.Site ID Required = Y and DTL.TH Source Code = "CPR"
//?   then Site ID is a requried entry.
//?   5. If Site ID is entered, Tattoo Header EXT is updated
//?*****
//?01/16/05 SLM -    Additional rules for site id
//?   6. If Resale do not require Site ID
//?*****
//?03/07/2006 LJB  The State field on the screen was reverting to
//?** the value retrieved from the file when it had been changed
//?** on the screen. This was due to the initially retrieved value
//?** being saved in a hidden field. The screen value was then
//?** replaced with the hidden value. References to the hidden field
//?** have been commented out and the entered value is retained.
//?** The hidden value will only be used if the state is cleared out.
//?*****
//?04/26/06 SLM -    Additional rules for site id
//?  The State Cde will now reside in the Prod site mileage db
//?  get the 3 position field from there to populate the th state code
//?  the th state code
//?  3 pos. TH STATE CODE replace the oms state code usr (2 pos)
//?  use the same routines on the maintenance of the producer
//?  location  - the Vnd Routines.  with a 3 position field
//?  this is also the validation of state code and getting the
//?  description of the state code.
//?  If a Tattoo is in *chg do not replace the State Code if state
//?  is different then site.
//?  If a Tattoo is in *chg and the user select f4 on the site and
//?  selection occurs then replace the th state code
//?5/16/08 SLM E00151 Producer Site validation regardless of Contract
//?This is no effect to guymon due to they do not use the
//?the producer site file
//?6/12/08 SLM E00144 LFT head and EUT/KOA head allow
//?            use of the defect with Market Hogs
//?9/19/08 SLM E00150 Allow Producer Subsidiary defined at Tattoo
//?Header Ext
//?9/19/08 SLM E00150 Allow Producer Subsidiary defined at Tattoo
//?Header Ext
ENDDO;

// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


// WRK.First Time Flag Usr = CND.No
WRK.First_Time_Flag_Usr = 'N';

// LCL.Record Added Usr = CND.No
LCL.Record_Added_Usr = 'N';

// LCL.Record Change Usr = CND.No
LCL.Record_Change_Usr = 'N';

//?E2423 Mtech Live or Not Live *** Interfaces to HPS ***
//?Get the MTech Live Yes or No
DO;

//?Mtech Live Yes or no
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER('MTECHLIVE');
PARAMETER(WRK.System_Value_Alpha_USR);

// LCL.MTech Live Yes or No = WRK.System Value Alpha    USR
LCL.MTech_Live_Yes_or_No = WRK.System_Value_Alpha_USR;

ENDDO;

//?Producer work for remainder of program
DO;

CASE;

// IF PAR.TH Hog Class Type is Market
IF PAR.TH_Hog_Class_Type = 'M';

EXECUTE FUNCTION(Rtv ProdSubsidiaryPrc RT) TYPE(RTVOBJ) FILE(PLA8REP)           AB1291791;
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(WRK.Producer_Subsidiary_SUSR);
{
 //?USER: Initialize routine

 //?RMC R9771  3/24/17 check for active only
 // PAR.Producer Subsidiary SUSR = CND.No Producer Subsidiary
 PAR.Producer_Subsidiary_SUSR = 'N';

 //?USER: Processing if Data record not found

 // PAR.Producer Subsidiary SUSR = CND.No Producer Subsidiary
 PAR.Producer_Subsidiary_SUSR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.RS Record Status is Active
 IF DB1.RS_Record_Status = 'A';

 // PAR.Producer Subsidiary SUSR = CND.Allow Producer Subsidiary
 PAR.Producer_Subsidiary_SUSR = 'Y';

 QUIT;

 ENDIF;

}


// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Producer Subsidiary SUSR = CND.No Producer Subsidiary
WRK.Producer_Subsidiary_SUSR = 'N';

ENDIF;

EXECUTE FUNCTION(Rtv Prdcr Vendor#,Src RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1143363;
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(WRK.PD_VND_Address_Number);
PARAMETER(PAR.SR_Source_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 CASE;

 // IF DB1.PD VND Address Number is Zero
 IF DB1.PD_VND_Address_Number = *ZERO;

 EXECUTE FUNCTION(Rtv Producer EXT2     RT) TYPE(RTVOBJ) FILE(PLB4REP)           AB1322079;
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(WRK.M3_Supplier_ID);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.Text 7 USR = SUBSTRING(WRK.M3 Supplier ID,CON.4,CON.7)
 LCL.Text_7_USR = SUBSTRING(WRK.M3_Supplier_ID:4:7);

 // LCL.Amount USR = CVTVAR(LCL.Text 7 USR)
 LCL.Amount_USR = CVTVAR(LCL.Text_7_USR);

 // PAR.PD VND Address Number = LCL.Amount USR
 PAR.PD_VND_Address_Number = LCL.Amount_USR;

 ENDIF;

 QUIT;

}


EXECUTE FUNCTION(Rtv Source Type       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1141829;
PARAMETER(PAR.SR_Source_Code);
PARAMETER(PAR.SR_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.SR Type Desc = Condition name of PAR.SR Type
PAR.SR_Type_Desc = RTVCND(PAR.SR_Type);

EXECUTE FUNCTION(Rtv PL Vnd Nbr, state RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1207995;
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.PL_Location_Code);
PARAMETER(PAR.PL_Name);
PARAMETER(WRK.Pl_VND_Address_Number);
PARAMETER(PAR.PL_State_Code);
PARAMETER(PAR.PL_Site_ID_Required);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.TH Hog Class Type is Resale
IF PAR.TH_Hog_Class_Type = 'R';

// WRK.Allow User to Enter Usr = CND.Allow User to Enter
WRK.Allow_User_to_Enter_Usr = 'A';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.PL Site ID Required is Yes
IF PAR.PL_Site_ID_Required = 'Y';

//?used on the state code
// WRK.Allow User to Enter Usr = CND.Do not allow entery
WRK.Allow_User_to_Enter_Usr = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Allow User to Enter Usr = CND.Allow User to Enter
WRK.Allow_User_to_Enter_Usr = 'A';

CASE;

// IF PAR.SR Type is Internal
IF PAR.SR_Type = 'I';

// WRK.Allow User to Enter Usr = CND.Do not allow entery
WRK.Allow_User_to_Enter_Usr = *BLANK;

ENDIF;

ENDIF;

ENDIF;

ENDDO;

//?E11288 JJH 07/25/17 - Remove *Program Mode is *ADD
//?Get Hps movement and hps farm site - Add mode only
DO;

CASE;

// IF PAR.SR Type is Internal
IF PAR.SR_Type = 'I';

// AND LCL.MTech Live Yes or No is Yes MTech is Live
AND LCL.MTech_Live_Yes_or_No = 'Y';

EXECUTE FUNCTION(Rtv Mvmnt,Farm f/BOL  RT) TYPE(RTVOBJ) FILE(PLAECPP)           AB1245116;
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TH_HPS_Farm_Site);
PARAMETER(WRK.TH_HPS_Movement_Ref_#);
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?If TH HPS Movement Ref # is zeros, retrieve value  DLV TRACK
CASE;

// IF WRK.TH HPS Movement Ref # EQ WRK.Zero USR
IF WRK.TH_HPS_Movement_Ref_# = WRK.Zero_USR;

//?movement and farm site
EXECUTE FUNCTION(Rtv Movement NumbMtechRT) TYPE(RTVOBJ) FILE(PLAFCPP)           AB1312453;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_HPS_Farm_Site);
PARAMETER(WRK.TH_HPS_Movement_Ref_#);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?If TH HPS Movement Ref # is zeros, retrieve value  BOLW
CASE;

// IF WRK.TH HPS Movement Ref # EQ WRK.Zero USR
IF WRK.TH_HPS_Movement_Ref_# = WRK.Zero_USR;

//?movement and farm site
EXECUTE FUNCTION(Rtv Movement Number   RT) TYPE(RTVOBJ) FILE(PKEJCPP)           AB1213938;
PARAMETER(PAR.TH_HPS_Movement_Ref_#);
PARAMETER(WRK.TH_HPS_Movement_Ref_#);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// PAR.TH HPS Farm Site = CON.*ZERO
PAR.TH_HPS_Farm_Site = *ZERO;

ENDIF;

//?If TH HPS Movement Ref # is still zeros - load default value
CASE;

// IF WRK.TH HPS Movement Ref # EQ WRK.Zero USR
IF WRK.TH_HPS_Movement_Ref_# = WRK.Zero_USR;

//?movement and farm site
// WRK.TH HPS Movement Ref # = PAR.TH HPS Movement Ref #
WRK.TH_HPS_Movement_Ref_# = PAR.TH_HPS_Movement_Ref_#;

ENDIF;

ENDIF;

ENDDO;

//?Rules: Screen with Mtech Live and Internal Producer
CASE;

// IF LCL.MTech Live Yes or No is Yes MTech is Live
IF LCL.MTech_Live_Yes_or_No = 'Y';

// WRK.Display Output Only 4 USR = CND.No
WRK.Display_Output_Only_4_USR = 'N';

CASE;

// IF PAR.SR Type is Internal
IF PAR.SR_Type = 'I';

// WRK.Display Output Only 4 USR = CND.Yes
WRK.Display_Output_Only_4_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Display Output Only 4 USR = CND.No
WRK.Display_Output_Only_4_USR = 'N';

ENDIF;

//?The following field will now be opened to allow entry on internal
//?hogs, movement, farm site, and farm site will go get the
//?the state code
//?Rules: Screen with Mtech Live and Internal Producer
// IF LCL.MTech Live Yes or No is No MTech not Live
IF LCL.MTech_Live_Yes_or_No = 'N';

//?Internal farm site
// WRK.Display Output Only 4 USR = CND.No
WRK.Display_Output_Only_4_USR = 'N';

ENDIF;

//?H16853 ISE 11/02/2020 CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
//?USER: Load detail screen from DBF record

// DTL.Prior Movement # = DB1.TH HPS Movement Ref #
DTL.Prior_Movement_# = DB1.TH_HPS_Movement_Ref_#;

// DTL.TH Hog Class Type = PAR.TH Hog Class Type
DTL.TH_Hog_Class_Type = PAR.TH_Hog_Class_Type;

// DTL.PL Site ID Required = PAR.PL Site ID Required
DTL.PL_Site_ID_Required = PAR.PL_Site_ID_Required;

// DTL.PS Site ID = CON.*BLANK
DTL.PS_Site_ID = *BLANK;

// DTL.Producer Subsidary Code = CON.*BLANK
DTL.Producer_Subsidiary_Code = *BLANK;

//?** Retrieve Site ID & Producer Subsidiary from Tattoo Header EXT
//?NOT Resale get Tattoo hdr ext , Rsl hogs set to blks site id & prd Subs
CASE;

// IF DB1.TH Hog Class Type is Not Resale
IF DB1.TH_Hog_Class_Type = 'M'/'S';

EXECUTE FUNCTION(Rtv Site ID/Prod Subs RT) TYPE(RTVOBJ) FILE(PKDNCPP)           AB1291789;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(NLL.PD_Producer_Code);
PARAMETER(DTL.PS_Site_ID);
PARAMETER(DTL.Producer_Subsidiary_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?NOT Resale get Tattoo hdr ext , Rsl hogs set to blks site id & prd Subs
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.PL Site ID Required = CND.No
DTL.PL_Site_ID_Required = 'N';

// DTL.PS Site ID = CON.*BLANK
DTL.PS_Site_ID = *BLANK;

// DTL.Producer Subsidary Code = CON.*BLANK
DTL.Producer_Subsidiary_Code = *BLANK;

ENDIF;

//?The Bol Shipped Head is maintain in this program at the Tattoo Level
//?so regardless this field represents the shipped head for the load
EXECUTE FUNCTION(Rtv Shipped Head      RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1226281;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(DTL.BOL_Shipped_Head);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?9/22/2008 slm
//?move set cursor to lower part of processing
//?do to adding fields to screen set cursor on new rules
// LCL.Record Change Usr = CND.Yes
LCL.Record_Change_Usr = 'Y';

// DTL.Description 30 USR = Condition name of DTL.TH Hog Class Type
DTL.Description_30_USR = RTVCND(DTL.TH_Hog_Class_Type);

// DTL.PD Name = PAR.PD Name
DTL.PD_Name = PAR.PD_Name;

// DTL.PL Name = PAR.PL Name
DTL.PL_Name = PAR.PL_Name;

// DTL.TH Live Purch UOM  Usr = Condition name of DB1.TH Live Purchase UOM
DTL.TH_Live_Purch_UOM_Usr = RTVCND(DB1.TH_Live_Purchase_UOM);

// DTL.Sex Desc Usr = Condition name of DB1.TH Sex
DTL.Sex_Desc_Usr = RTVCND(DB1.TH_Sex);

EXECUTE FUNCTION(Rtv Hog Class Desc    RT) TYPE(RTVOBJ) FILE(PKA8REP)           AB1127790;
PARAMETER(DB1.HC_Class_Code);
PARAMETER(DTL.HC_Description);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.HC_Description = WRK.Blank_USR;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Name USR = PAR.Name USR
DTL.Name_USR = PAR.Name_USR;

// DTL.TH Source Code = PAR.SR Source Code
DTL.TH_Source_Code = PAR.SR_Source_Code;

// DTL.TH Source Type = PAR.SR Type
DTL.TH_Source_Type = PAR.SR_Type;

// DTL.SR Type Desc = Condition name of PAR.SR Type
DTL.SR_Type_Desc = RTVCND(PAR.SR_Type);

//?State code - Prod, or producer site, or external
CASE;

// IF PAR.SR Type is External
IF PAR.SR_Type = 'E';

//?Placed TH STATE CODE on the screen, def either prd loc, or site id
//?Rtv vendor info & site information from the producer
CASE;

// IF DTL.TH State EQ WRK.Blank USR
IF DTL.TH_State = WRK.Blank_USR;

// DTL.TH State = PAR.PL State Code
DTL.TH_State = PAR.PL_State_Code;

CASE;

// IF DTL.PL Site ID Required is Yes
IF DTL.PL_Site_ID_Required = 'Y';

//?get th state
//?E3814 JJH 10/07/15 - Display PS Premises ID from Producer Site
//?test susan 2
EXECUTE FUNCTION(Rtv Site State/PremiseRT) TYPE(RTVOBJ) FILE(PLATREP)           AB1327101;
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(DTL.PS_Site_ID);
PARAMETER(DTL.TH_State);
PARAMETER(DTL.PS_Premises_ID);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.RS Record Status is Active
 IF DB1.RS_Record_Status = 'A';

 MOVE *ALL (To: PAR From: DB1);

 // IF *OTHERWISE
 IF *OTHERWISE;

 MOVE *ALL (To: PAR From: CON);

 ENDIF;

}


ENDIF;

//?Rtv vendor info & site information from the producer
// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

ENDIF;

//?State code - mtech live and internals only
CASE;

// IF LCL.MTech Live Yes or No is Yes MTech is Live
IF LCL.MTech_Live_Yes_or_No = 'Y';

// AND PAR.SR Type is Internal
AND PAR.SR_Type = 'I';

//?Get the State Code from the Farm Site
// Call program Rtv HPS Farm Inf-Mtech UP.
CALL PROGRAM(Rtv HPS Farm Inf-Mtech UP) ('HP293');
PARAMETER(PGM.*Return_code);
PARAMETER(NLL.Farm_site_Name_f_HPS_USR);
PARAMETER(DTL.TH_HPS_Farm_Site);
PARAMETER(WRK.HPS_FS_Comp_Relation_USR);
PARAMETER(DTL.TH_State);
PARAMETER(WRK.HPS_Farm_County);
PARAMETER(WRK.HPS_Cell_Manager_Code_USR);
PARAMETER(WRK.HPS_Cell_Manager_Nm_USR);
PARAMETER(NLL.MTech_Farm_Site_Ref);
PARAMETER(NLL.MTech_Cell_Manager_Ref);

ENDIF;

//?State code - mtech NOT live and internals only
CASE;

// IF LCL.MTech Live Yes or No is No MTech not Live
IF LCL.MTech_Live_Yes_or_No = 'N';

// AND PAR.SR Type is Internal
AND PAR.SR_Type = 'I';

//?Placed TH STATE on the screen, FROM the farm site get the state
// DTL.TH HPS Movement Ref # = PAR.TH HPS Movement Ref #
DTL.TH_HPS_Movement_Ref_# = PAR.TH_HPS_Movement_Ref_#;

// Call program Z1v HPS Farm Info     UP.
CALL PROGRAM(Z1v HPS Farm Info     UP) ('HP249');
PARAMETER(PGM.*Return_code);
PARAMETER(DTL.TH_HPS_Movement_Ref_#);
PARAMETER(WRK.Farm_site_Name_f_HPS_USR);
PARAMETER(DTL.TH_HPS_Farm_Site);
PARAMETER(WRK.HPS_FS_Comp_Relation_USR);
PARAMETER(DTL.TH_State);

// LCL.State = DTL.TH State
LCL.State = DTL.TH_State;

ENDIF;

// LCL.Return Code USR = WRK.Blank USR
LCL.Return_Code_USR = WRK.Blank_USR;

// Call program Rtv State Description UP.
CALL PROGRAM(Rtv State Description UP) ('STATERET');
PARAMETER(LCL.Return_Code_USR);
PARAMETER(DTL.TH_State);
PARAMETER(DTL.State_Desc_15_USR);

//?Invalid state code send message
CASE;

// IF LCL.Return Code USR is *Normal
IF LCL.Return_Code_USR = *BLANK;

//?Invalid state code send message
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'State Code is Invalid'
ERROR(PRK0308);
MSGPARM(DTL.TH_State);

ENDIF;

//?The Bol Shipped Head is maintain in this program at the Tattoo Level
//?so regardless this field represents the shipped head for the load
EXECUTE FUNCTION(Rtv Shipped Head      RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1226281;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(DTL.BOL_Shipped_Head);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.HC Class Type Desc Usr = Condition name of DTL.TH Hog Class Type
DTL.HC_Class_Type_Desc_Usr = RTVCND(DTL.TH_Hog_Class_Type);

// DTL.TH Resale Spread Sts = DB1.TH Resale Spread Sts
DTL.TH_Resale_Spread_Sts = DB1.TH_Resale_Spread_Sts;

// WRK.@Status Internal (Y/N) = CND.No
WRK.@Status_Internal_Y_N = *BLANK;

// WRK.Display Output Only Usr = CND.No
WRK.Display_Output_Only_Usr = 'N';

// WRK.Display Output Only 2 USR = CND.No
WRK.Display_Output_Only_2_USR = 'N';

//?MKT: Hide defect/head fields  and pen/hd recvd
CASE;

// IF DTL.TH Hog Class Type is Market
IF DTL.TH_Hog_Class_Type = 'M';

// WRK.Display Output Only Usr = CND.Yes
WRK.Display_Output_Only_Usr = 'Y';

// WRK.Display Output Only 2 USR = CND.Yes
WRK.Display_Output_Only_2_USR = 'Y';

//?MKT: Hide defect/head fields  and pen/hd recvd
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.TH Hog Class Type is Subject
IF DTL.TH_Hog_Class_Type = 'S';

// OR DTL.TH Source Type is External
OR DTL.TH_Source_Type = 'E';

// WRK.Display Output Only 2 USR = CND.Yes
WRK.Display_Output_Only_2_USR = 'Y';

ENDIF;

ENDIF;

//?Set flag to display unweighed resale pen & received hd, get pen
CASE;

// IF DTL.TH Source Type is Internal
IF DTL.TH_Source_Type = 'I';

// AND DTL.TH Hog Class Type is Resale
AND DTL.TH_Hog_Class_Type = 'R';

// WRK.@Status Internal (Y/N) = CND.Yes
WRK.@Status_Internal_Y_N = 'Y';

//?Protect the defect/head/pen fields if tattoo has been weighed.
CASE;

// IF DTL.TH Resale Spread Sts is Spread
IF DTL.TH_Resale_Spread_Sts = 'P';

// WRK.Display Output Only Usr = CND.Yes
WRK.Display_Output_Only_Usr = 'Y';

// WRK.Display Output Only 2 USR = CND.Yes
WRK.Display_Output_Only_2_USR = 'Y';

ENDIF;

ENDIF;

//?Get Defect/Hd
DO;

// DTL.Defect User  1 = CON.*BLANK
DTL.Defect_User_1 = *BLANK;

// DTL.Defect User  2 = CON.*BLANK
DTL.Defect_User_2 = *BLANK;

// DTL.Defect User  3 = CON.*BLANK
DTL.Defect_User_3 = *BLANK;

// DTL.Defect User  4 = CON.*BLANK
DTL.Defect_User_4 = *BLANK;

// DTL.Defect User  5 = CON.*BLANK
DTL.Defect_User_5 = *BLANK;

// DTL.Defect User  6 = CON.*BLANK
DTL.Defect_User_6 = *BLANK;

// DTL.Defect User  7 = CON.*BLANK
DTL.Defect_User_7 = *BLANK;

// DTL.Defect User  8 = CON.*BLANK
DTL.Defect_User_8 = *BLANK;

// DTL.Defect User  9 = CON.*BLANK
DTL.Defect_User_9 = *BLANK;

// DTL.Defect User 10 = CON.*BLANK
DTL.Defect_User_10 = *BLANK;

// DTL.Defect HD user 1 = CON.*ZERO
DTL.Defect_HD_user_1 = *ZERO;

// DTL.Defect HD user 2 = CON.*ZERO
DTL.Defect_HD_user_2 = *ZERO;

// DTL.Defect HD user 3 = CON.*ZERO
DTL.Defect_HD_user_3 = *ZERO;

// DTL.Defect HD user 4 = CON.*ZERO
DTL.Defect_HD_user_4 = *ZERO;

// DTL.Defect HD user 5 = CON.*ZERO
DTL.Defect_HD_user_5 = *ZERO;

// DTL.Defect HD user 6 = CON.*ZERO
DTL.Defect_HD_user_6 = *ZERO;

// DTL.Defect HD user 7 = CON.*ZERO
DTL.Defect_HD_user_7 = *ZERO;

// DTL.Defect HD user 8 = CON.*ZERO
DTL.Defect_HD_user_8 = *ZERO;

// DTL.Defect HD user 9 = CON.*ZERO
DTL.Defect_HD_user_9 = *ZERO;

// DTL.Defect HD user 10 = CON.*ZERO
DTL.Defect_HD_user_10 = *ZERO;

EXECUTE FUNCTION(Rtv Tattoo Def-10&Cls RT) TYPE(RTVOBJ) FILE(PKDZREP)           AB1287114;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.Defect_User_1);
PARAMETER(DTL.Defect_User_2);
PARAMETER(DTL.Defect_User_3);
PARAMETER(DTL.Defect_User_4);
PARAMETER(DTL.Defect_User_5);
PARAMETER(DTL.Defect_User_6);
PARAMETER(DTL.Defect_User_7);
PARAMETER(DTL.Defect_User_8);
PARAMETER(DTL.Defect_User_9);
PARAMETER(DTL.Defect_User_10);
PARAMETER(DTL.Defect_HD_user_1);
PARAMETER(DTL.Defect_HD_user_2);
PARAMETER(DTL.Defect_HD_user_3);
PARAMETER(DTL.Defect_HD_user_4);
PARAMETER(DTL.Defect_HD_user_5);
PARAMETER(DTL.Defect_HD_user_6);
PARAMETER(DTL.Defect_HD_user_7);
PARAMETER(DTL.Defect_HD_user_8);
PARAMETER(DTL.Defect_HD_user_9);
PARAMETER(DTL.Defect_HD_user_10);
PARAMETER(DTL.Class_Df_1_Usr);
PARAMETER(DTL.Class_Df_2_Usr);
PARAMETER(DTL.Class_Df_3_Usr);
PARAMETER(DTL.Class_Df_4_Usr);
PARAMETER(DTL.Class_Df_5_Usr);
PARAMETER(DTL.Class_Df_6_Usr);
PARAMETER(DTL.Class_Df_7_Usr);
PARAMETER(DTL.Class_Df_8_Usr);
PARAMETER(DTL.Class_Df_9_Usr);
PARAMETER(DTL.Class_Df_10_Usr);
{
 //?USER: Initialize routine

 // WRK.Defect Count Usr = CND.One
 WRK.Defect_Count_Usr = 1;

 //?USER: Process Data record

 CASE;

 // IF WRK.Defect Count Usr is One
 IF WRK.Defect_Count_Usr = 1;

 // PAR.Defect User  1 = DB1.DF Defect Code
 PAR.Defect_User_1 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 1 = DB1.TDF Head Defect
 PAR.Defect_HD_user_1 = DB1.TDF_Head_Defect;

 // PAR.Defect Cls User 1 = DB1.TDF Classification Defs
 PAR.Defect_Cls_User_1 = DB1.TDF_Classification_Defs;

 // WRK.Defect Count Usr = CND.Two
 WRK.Defect_Count_Usr = 2;

 // IF WRK.Defect Count Usr is Two
 IF WRK.Defect_Count_Usr = 2;

 // PAR.Defect User  2 = DB1.DF Defect Code
 PAR.Defect_User_2 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 2 = DB1.TDF Head Defect
 PAR.Defect_HD_user_2 = DB1.TDF_Head_Defect;

 // PAR.Defect Cls User 2 = DB1.TDF Classification Defs
 PAR.Defect_Cls_User_2 = DB1.TDF_Classification_Defs;

 // WRK.Defect Count Usr = CND.Three
 WRK.Defect_Count_Usr = 3;

 // IF WRK.Defect Count Usr is Three
 IF WRK.Defect_Count_Usr = 3;

 // PAR.Defect User  3 = DB1.DF Defect Code
 PAR.Defect_User_3 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 3 = DB1.TDF Head Defect
 PAR.Defect_HD_user_3 = DB1.TDF_Head_Defect;

 // PAR.Defect Cls User 3 = DB1.TDF Classification Defs
 PAR.Defect_Cls_User_3 = DB1.TDF_Classification_Defs;

 // WRK.Defect Count Usr = CND.Four
 WRK.Defect_Count_Usr = 4;

 // IF WRK.Defect Count Usr is Four
 IF WRK.Defect_Count_Usr = 4;

 // PAR.Defect User  4 = DB1.DF Defect Code
 PAR.Defect_User_4 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 4 = DB1.TDF Head Defect
 PAR.Defect_HD_user_4 = DB1.TDF_Head_Defect;

 // PAR.Defect Cls User 4 = DB1.TDF Classification Defs
 PAR.Defect_Cls_User_4 = DB1.TDF_Classification_Defs;

 // WRK.Defect Count Usr = CND.Five
 WRK.Defect_Count_Usr = 5;

 // IF WRK.Defect Count Usr is Five
 IF WRK.Defect_Count_Usr = 5;

 // PAR.Defect User  5 = DB1.DF Defect Code
 PAR.Defect_User_5 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 5 = DB1.TDF Head Defect
 PAR.Defect_HD_user_5 = DB1.TDF_Head_Defect;

 // PAR.Defect Cls User 5 = DB1.TDF Classification Defs
 PAR.Defect_Cls_User_5 = DB1.TDF_Classification_Defs;

 // WRK.Defect Count Usr = CND.Six
 WRK.Defect_Count_Usr = 6;

 // IF WRK.Defect Count Usr is Six
 IF WRK.Defect_Count_Usr = 6;

 // PAR.Defect User  6 = DB1.DF Defect Code
 PAR.Defect_User_6 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 6 = DB1.TDF Head Defect
 PAR.Defect_HD_user_6 = DB1.TDF_Head_Defect;

 // PAR.Defect Cls User 6 = DB1.TDF Classification Defs
 PAR.Defect_Cls_User_6 = DB1.TDF_Classification_Defs;

 // WRK.Defect Count Usr = CND.Seven
 WRK.Defect_Count_Usr = 7;

 // IF WRK.Defect Count Usr is Seven
 IF WRK.Defect_Count_Usr = 7;

 // PAR.Defect User  7 = DB1.DF Defect Code
 PAR.Defect_User_7 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 7 = DB1.TDF Head Defect
 PAR.Defect_HD_user_7 = DB1.TDF_Head_Defect;

 // PAR.Defect Cls User 7 = DB1.TDF Classification Defs
 PAR.Defect_Cls_User_7 = DB1.TDF_Classification_Defs;

 // WRK.Defect Count Usr = CND.Eight
 WRK.Defect_Count_Usr = 8;

 // IF WRK.Defect Count Usr is Eight
 IF WRK.Defect_Count_Usr = 8;

 // PAR.Defect User  8 = DB1.DF Defect Code
 PAR.Defect_User_8 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 8 = DB1.TDF Head Defect
 PAR.Defect_HD_user_8 = DB1.TDF_Head_Defect;

 // PAR.Defect Cls User 8 = DB1.TDF Classification Defs
 PAR.Defect_Cls_User_8 = DB1.TDF_Classification_Defs;

 // WRK.Defect Count Usr = CND.Nine
 WRK.Defect_Count_Usr = 9;

 // IF WRK.Defect Count Usr is Nine
 IF WRK.Defect_Count_Usr = 9;

 // PAR.Defect User  9 = DB1.DF Defect Code
 PAR.Defect_User_9 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 9 = DB1.TDF Head Defect
 PAR.Defect_HD_user_9 = DB1.TDF_Head_Defect;

 // PAR.Defect Cls User 9 = DB1.TDF Classification Defs
 PAR.Defect_Cls_User_9 = DB1.TDF_Classification_Defs;

 // WRK.Defect Count Usr = CND.Ten
 WRK.Defect_Count_Usr = 10;

 // IF WRK.Defect Count Usr is Ten
 IF WRK.Defect_Count_Usr = 10;

 // PAR.Defect User 10 = DB1.DF Defect Code
 PAR.Defect_User_10 = DB1.DF_Defect_Code;

 // PAR.Defect HD user 10 = DB1.TDF Head Defect
 PAR.Defect_HD_user_10 = DB1.TDF_Head_Defect;

 // PAR.Defect Cls User 10 = DB1.TDF Classification Defs
 PAR.Defect_Cls_User_10 = DB1.TDF_Classification_Defs;

 // WRK.Defect Count Usr = CND.Eleven
 WRK.Defect_Count_Usr = 11;

 QUIT;

 ENDIF;

}


CASE;

// IF DTL.TH Hog Class Type is Not Market
IF DTL.TH_Hog_Class_Type = 'R'/'S';

//?If Resale/internal
CASE;

// IF WRK.@Status Internal (Y/N) is Yes
IF WRK.@Status_Internal_Y_N = 'Y';

EXECUTE FUNCTION(Chk Def Scale Wt Req  IF) TYPE(EXCINTFUN)                      AB1205985;
PARAMETER(DTL.Defect_User_1);
PARAMETER(DTL.Defect_User_2);
PARAMETER(DTL.Defect_User_3);
PARAMETER(DTL.Defect_User_4);
PARAMETER(DTL.Defect_User_5);
PARAMETER(DTL.Defect_User_6);
PARAMETER(DTL.Defect_User_7);
PARAMETER(DTL.Defect_User_8);
PARAMETER(DTL.Defect_User_9);
PARAMETER(DTL.Defect_User_10);
PARAMETER(WRK.Scale_Wt_Required_USR);
{
 //?Execute internal function

 //?If any defect has scale weight required, quit checking the defects.
 // PAR.Scale Wt Required     USR = CND.No
 PAR.Scale_Wt_Required_USR = 'N';

 CASE;

 // IF PAR.Defect User  1 NE WRK.Blank USR
 IF PAR.Defect_User_1 <> WRK.Blank_USR;

 EXECUTE FUNCTION(Rtv Scale Wt Req      RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1205986;
 PARAMETER(PAR.Defect_User_1);
 PARAMETER(WRK.DF_Scale_Weight_Required);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.DF Scale Weight Required is Yes
 IF WRK.DF_Scale_Weight_Required = 'Y';

 // PAR.Scale Wt Required     USR = CND.Yes
 PAR.Scale_Wt_Required_USR = 'Y';

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Defect User  2 NE WRK.Blank USR
 IF PAR.Defect_User_2 <> WRK.Blank_USR;

 EXECUTE FUNCTION(Rtv Scale Wt Req      RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1205986;
 PARAMETER(PAR.Defect_User_2);
 PARAMETER(WRK.DF_Scale_Weight_Required);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.DF Scale Weight Required is Yes
 IF WRK.DF_Scale_Weight_Required = 'Y';

 // PAR.Scale Wt Required     USR = CND.Yes
 PAR.Scale_Wt_Required_USR = 'Y';

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Defect User  3 NE WRK.Blank USR
 IF PAR.Defect_User_3 <> WRK.Blank_USR;

 EXECUTE FUNCTION(Rtv Scale Wt Req      RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1205986;
 PARAMETER(PAR.Defect_User_3);
 PARAMETER(WRK.DF_Scale_Weight_Required);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.DF Scale Weight Required is Yes
 IF WRK.DF_Scale_Weight_Required = 'Y';

 // PAR.Scale Wt Required     USR = CND.Yes
 PAR.Scale_Wt_Required_USR = 'Y';

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Defect User  4 NE WRK.Blank USR
 IF PAR.Defect_User_4 <> WRK.Blank_USR;

 EXECUTE FUNCTION(Rtv Scale Wt Req      RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1205986;
 PARAMETER(PAR.Defect_User_4);
 PARAMETER(WRK.DF_Scale_Weight_Required);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.DF Scale Weight Required is Yes
 IF WRK.DF_Scale_Weight_Required = 'Y';

 // PAR.Scale Wt Required     USR = CND.Yes
 PAR.Scale_Wt_Required_USR = 'Y';

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Defect User  5 NE WRK.Blank USR
 IF PAR.Defect_User_5 <> WRK.Blank_USR;

 EXECUTE FUNCTION(Rtv Scale Wt Req      RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1205986;
 PARAMETER(PAR.Defect_User_5);
 PARAMETER(WRK.DF_Scale_Weight_Required);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.DF Scale Weight Required is Yes
 IF WRK.DF_Scale_Weight_Required = 'Y';

 // PAR.Scale Wt Required     USR = CND.Yes
 PAR.Scale_Wt_Required_USR = 'Y';

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Defect User  6 NE WRK.Blank USR
 IF PAR.Defect_User_6 <> WRK.Blank_USR;

 EXECUTE FUNCTION(Rtv Scale Wt Req      RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1205986;
 PARAMETER(PAR.Defect_User_6);
 PARAMETER(WRK.DF_Scale_Weight_Required);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.DF Scale Weight Required is Yes
 IF WRK.DF_Scale_Weight_Required = 'Y';

 // PAR.Scale Wt Required     USR = CND.Yes
 PAR.Scale_Wt_Required_USR = 'Y';

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Defect User  7 NE WRK.Blank USR
 IF PAR.Defect_User_7 <> WRK.Blank_USR;

 EXECUTE FUNCTION(Rtv Scale Wt Req      RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1205986;
 PARAMETER(PAR.Defect_User_7);
 PARAMETER(WRK.DF_Scale_Weight_Required);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.DF Scale Weight Required is Yes
 IF WRK.DF_Scale_Weight_Required = 'Y';

 // PAR.Scale Wt Required     USR = CND.Yes
 PAR.Scale_Wt_Required_USR = 'Y';

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Defect User  8 NE WRK.Blank USR
 IF PAR.Defect_User_8 <> WRK.Blank_USR;

 EXECUTE FUNCTION(Rtv Scale Wt Req      RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1205986;
 PARAMETER(PAR.Defect_User_8);
 PARAMETER(WRK.DF_Scale_Weight_Required);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.DF Scale Weight Required is Yes
 IF WRK.DF_Scale_Weight_Required = 'Y';

 // PAR.Scale Wt Required     USR = CND.Yes
 PAR.Scale_Wt_Required_USR = 'Y';

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Defect User  9 NE WRK.Blank USR
 IF PAR.Defect_User_9 <> WRK.Blank_USR;

 EXECUTE FUNCTION(Rtv Scale Wt Req      RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1205986;
 PARAMETER(PAR.Defect_User_9);
 PARAMETER(WRK.DF_Scale_Weight_Required);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.DF Scale Weight Required is Yes
 IF WRK.DF_Scale_Weight_Required = 'Y';

 // PAR.Scale Wt Required     USR = CND.Yes
 PAR.Scale_Wt_Required_USR = 'Y';

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Defect User 10 NE WRK.Blank USR
 IF PAR.Defect_User_10 <> WRK.Blank_USR;

 EXECUTE FUNCTION(Rtv Scale Wt Req      RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1205986;
 PARAMETER(PAR.Defect_User_10);
 PARAMETER(WRK.DF_Scale_Weight_Required);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.DF Scale Weight Required is Yes
 IF WRK.DF_Scale_Weight_Required = 'Y';

 // PAR.Scale Wt Required     USR = CND.Yes
 PAR.Scale_Wt_Required_USR = 'Y';

 ENDIF;

 ENDIF;

}


//?If Defect Scale Wgt Req dont calc TH Head Received
CASE;

// IF WRK.Scale Wt Required     USR is Yes
IF WRK.Scale_Wt_Required_USR = 'Y';

// DTL.Head Total USR = CON.*ZERO
DTL.Head_Total_USR = *ZERO;

// DTL.Pen Number = CND.Pen Number is Empty
DTL.Pen_Number = *BLANK;

// WRK.Pen Usr = CND.Pen Number is Empty
WRK.Pen_Usr = *BLANK;

//?If Defect Scale Wgt Req dont calc TH Head Received
// IF *OTHERWISE
IF *OTHERWISE;

// Rsl/Int-- Sum Defect head
DTL.Head_Total_USR = ( ( ( ( ( ( ( ( DTL.Defect_HD_user_1 + DTL.Defect_HD_user_2 )                 +
+ DTL.Defect_HD_user_3 ) + DTL.Defect_HD_user_4 ) + DTL.Defect_HD_user_5 )                        +
+ DTL.Defect_HD_user_6 ) + DTL.Defect_HD_user_7 ) + DTL.Defect_HD_user_8 )                        +
+ DTL.Defect_HD_user_9 ) + DTL.Defect_HD_user_10;

//?Rtv Pen
EXECUTE FUNCTION(Rtv Tattoo Detail     RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1202268;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(1);
PARAMETER(WRK.Pen_Company_Number);
PARAMETER(DTL.Pen_Number);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.Pen Usr = DTL.Pen Number
WRK.Pen_Usr = DTL.Pen_Number;

ENDIF;

ENDIF;

ENDIF;

ENDDO;

//?Save input fields to check for changes later
// WRK.TH Live Purchase UOM = DTL.TH Live Purchase UOM
WRK.TH_Live_Purchase_UOM = DTL.TH_Live_Purchase_UOM;

// WRK.TH Live Purchase Price = DTL.TH Live Purchase Price
WRK.TH_Live_Purchase_Price = DTL.TH_Live_Purchase_Price;

// WRK.GN Genetic Code = DTL.GN Genetic Code
WRK.GN_Genetic_Code = DTL.GN_Genetic_Code;

// WRK.TH Shipped Weight = DTL.TH Shipped Weight
WRK.TH_Shipped_Weight = DTL.TH_Shipped_Weight;

//?Check producer for Insured, to diplay on screen
// Call program Rtv/Chk Prdcr for Ins XF.
CALL PROGRAM(Rtv/Chk Prdcr for Ins XF) ('PKGDXFR');
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(WRK.@Status_Yes_No);
PARAMETER(PAR.BOH_Company_Number);

//?Insured
CASE;

// IF WRK.@Status (Yes/No) is Yes
IF WRK.@Status_Yes_No = 'Y';

// DTL.Text 9 USR = CON.*INSURED*
DTL.Text_9_USR = *INSURED*;

//?Insured
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Text 9 USR = CON.*BLANK
DTL.Text_9_USR = *BLANK;

ENDIF;

// Call program Rtv Delivery TrackInf XF.
CALL PROGRAM(Rtv Delivery TrackInf XF) ('PLS3XFR');
PARAMETER(NLL.DT_Farm_Site_Code);
PARAMETER(DTL.DT_Building);
PARAMETER(DTL.DT_Room);
PARAMETER(DTL.DT_Sire_Line_Code);
PARAMETER(DB1.BOH_Company_Number);
PARAMETER(DB1.BOH_Buy_Order_Number);
PARAMETER(DB1.BOL_Load_Number);

//?CALC: Detail screen function fields

// DTL.TH Live Purch UOM  Usr = Condition name of DTL.TH Live Purchase UOM
DTL.TH_Live_Purch_UOM_Usr = RTVCND(DTL.TH_Live_Purchase_UOM);

// DTL.Sex Desc Usr = Condition name of DTL.TH Sex
DTL.Sex_Desc_Usr = RTVCND(DTL.TH_Sex);

EXECUTE FUNCTION(Rtv Hog Defect Desc   RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1127787;
PARAMETER(DTL.DF_Defect_Code);
PARAMETER(DTL.DF_Description);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.DF_Description = WRK.Blank_USR;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.Ship Wgt Allow Ent Usr = CND.Yes
WRK.Ship_Wgt_Allow_Ent_Usr = 'Y';

//?Test of allow ship weight to be input/output
CASE;

// IF DTL.TH Payment Sts is Paid Anything
IF DTL.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

// WRK.Ship Wgt Allow Ent Usr = CND.No
WRK.Ship_Wgt_Allow_Ent_Usr = 'N';

//?Test of allow ship weight to be input/output
// IF DTL.TH Held Over is greater than 0
IF DTL.TH_Held_Over > *ZERO;

// WRK.Ship Wgt Allow Ent Usr = CND.No
WRK.Ship_Wgt_Allow_Ent_Usr = 'N';

//?Test of allow ship weight to be input/output
// IF DTL.TH Held Over Record is Yes
IF DTL.TH_Held_Over_Record = 'Y';

// WRK.Ship Wgt Allow Ent Usr = CND.No
WRK.Ship_Wgt_Allow_Ent_Usr = 'N';

// WRK.Held Over Records Y/N = CND.Yes
WRK.Held_Over_Records_Y_N = 'Y';

ENDIF;

//?Test of held over quanity
CASE;

// IF DTL.TH Held Over is greater than 0
IF DTL.TH_Held_Over > *ZERO;

// WRK.Held Over Records Y/N = CND.Yes
WRK.Held_Over_Records_Y_N = 'Y';

ENDIF;

//?USER: Validate detail screen

CASE;

// IF DTL.*CMD key is CF03
IF DTL.*CMD_key = '03';

// AND DTL.*CMD key is *Add
AND DTL.*CMD_key = '09';

EXECUTE FUNCTION(Rtv and UnAssigned    RT) TYPE(RTVOBJ) FILE(PKFJCPP)           AB1272920;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Tattoo UnAssigned CH) TYPE(CHGOBJ) FILE(PKFJCPP)           AB1272910;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.TP_Tattoo_Date);
 PARAMETER(DB1.TP_Tattoo_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('P');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // Call program Rtv System Date & Tim UP.
   CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
   PARAMETER(PAR.RS_Date_Changed);
   PARAMETER(PAR.RS_Time_Changed);

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


QUIT;

ENDIF;

//?Shipped Weight Validation
CASE;

// IF DTL.TH Live Purchase UOM is Shipped Weight List
IF DTL.TH_Live_Purchase_UOM = 'SW'/'SX';

CASE;

// IF WRK.Held Over Records Y/N is Yes
IF WRK.Held_Over_Records_Y_N = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.TH Shipped Weight is Greater then Zero
IF DTL.TH_Shipped_Weight > *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Shipped Weight is Required for this unit of measure'
ERROR(PRK0653);
MSGPARM(DTL.TH_Shipped_Weight);

ENDIF;

ENDIF;

ENDIF;

//?Status
CASE;

// IF DTL.TH Payment Sts is Paid Producer
IF DTL.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

//?Status
// IF *OTHERWISE
IF *OTHERWISE;

//?If UOM or price changes, set Status to Recalulate net
CASE;

// IF DTL.TH Live Purchase UOM NE WRK.TH Live Purchase UOM
IF DTL.TH_Live_Purchase_UOM <> WRK.TH_Live_Purchase_UOM;

// OR DTL.TH Live Purchase Price NE WRK.TH Live Purchase Price
OR DTL.TH_Live_Purchase_Price <> WRK.TH_Live_Purchase_Price;

// DTL.TH Calc Net Sts = CND.Re-Calculate
DTL.TH_Calc_Net_Sts = 'R';

// DTL.TH Payment Type = WRK.Blank USR
DTL.TH_Payment_Type = WRK.Blank_USR;

ENDIF;

ENDIF;

//?Changes in ship information to require reprint of scale ticket
CASE;

// IF DTL.TH Shipped Weight NE WRK.TH Shipped Weight
IF DTL.TH_Shipped_Weight <> WRK.TH_Shipped_Weight;

// AND DTL.TH Live Purchase UOM is Shipped Weight List
AND DTL.TH_Live_Purchase_UOM = 'SW'/'SX';

// WRK.@Print Status = CND.Select for Print
WRK.@Print_Status = 'S';

ENDIF;

//?validation of Defects
DO;

//?Validate Class Type
DO;

//?val 1
CASE;

// IF DTL.Defect User  1 is Entered
IF DTL.Defect_User_1 <> *BLANK;

// Call program Val Market Defect     XF.
CALL PROGRAM(Val Market Defect     XF) ('PLL6XFR');
PARAMETER(DTL.Defect_User_1);
PARAMETER(DTL.Class_Df_1_Usr);
PARAMETER(DTL.TH_Hog_Class_Type);
PARAMETER(LCL.*Return_code);

CASE;

// IF LCL.*Return code is Error Found
IF LCL.*Return_code = 'ERROR';

// Send error message - 'Defect &2 Def Class &3 Not allow on Hog Type'
ERROR(PRK1197);
MSGPARM(PAR.TH_Hog_Class_Type);
MSGPARM(DTL.Defect_User_1);
MSGPARM(DTL.Class_Df_1_Usr);

ENDIF;

ENDIF;

//?val 2
CASE;

// IF DTL.Defect User  2 is Entered
IF DTL.Defect_User_2 <> *BLANK;

// Call program Val Market Defect     XF.
CALL PROGRAM(Val Market Defect     XF) ('PLL6XFR');
PARAMETER(DTL.Defect_User_2);
PARAMETER(DTL.Class_Df_2_Usr);
PARAMETER(DTL.TH_Hog_Class_Type);
PARAMETER(LCL.*Return_code);

CASE;

// IF LCL.*Return code is Error Found
IF LCL.*Return_code = 'ERROR';

// Send error message - 'Defect &2 Def Class &3 Not allow on Hog Type'
ERROR(PRK1197);
MSGPARM(PAR.TH_Hog_Class_Type);
MSGPARM(DTL.Defect_User_2);
MSGPARM(DTL.Class_Df_2_Usr);

ENDIF;

ENDIF;

//?val 3
CASE;

// IF DTL.Defect User  3 is Entered
IF DTL.Defect_User_3 <> *BLANK;

// Call program Val Market Defect     XF.
CALL PROGRAM(Val Market Defect     XF) ('PLL6XFR');
PARAMETER(DTL.Defect_User_3);
PARAMETER(DTL.Class_Df_3_Usr);
PARAMETER(DTL.TH_Hog_Class_Type);
PARAMETER(LCL.*Return_code);

CASE;

// IF LCL.*Return code is Error Found
IF LCL.*Return_code = 'ERROR';

// Send error message - 'Defect &2 Def Class &3 Not allow on Hog Type'
ERROR(PRK1197);
MSGPARM(PAR.TH_Hog_Class_Type);
MSGPARM(DTL.Defect_User_3);
MSGPARM(DTL.Class_Df_3_Usr);

ENDIF;

ENDIF;

//?val 4
CASE;

// IF DTL.Defect User  4 is Entered
IF DTL.Defect_User_4 <> *BLANK;

// Call program Val Market Defect     XF.
CALL PROGRAM(Val Market Defect     XF) ('PLL6XFR');
PARAMETER(DTL.Defect_User_4);
PARAMETER(DTL.Class_Df_4_Usr);
PARAMETER(DTL.TH_Hog_Class_Type);
PARAMETER(LCL.*Return_code);

CASE;

// IF LCL.*Return code is Error Found
IF LCL.*Return_code = 'ERROR';

// Send error message - 'Defect &2 Def Class &3 Not allow on Hog Type'
ERROR(PRK1197);
MSGPARM(PAR.TH_Hog_Class_Type);
MSGPARM(DTL.Defect_User_4);
MSGPARM(DTL.Class_Df_4_Usr);

ENDIF;

ENDIF;

//?val 5
CASE;

// IF DTL.Defect User  5 is Entered
IF DTL.Defect_User_5 <> *BLANK;

// Call program Val Market Defect     XF.
CALL PROGRAM(Val Market Defect     XF) ('PLL6XFR');
PARAMETER(DTL.Defect_User_5);
PARAMETER(DTL.Class_Df_5_Usr);
PARAMETER(DTL.TH_Hog_Class_Type);
PARAMETER(LCL.*Return_code);

CASE;

// IF LCL.*Return code is Error Found
IF LCL.*Return_code = 'ERROR';

// Send error message - 'Defect &2 Def Class &3 Not allow on Hog Type'
ERROR(PRK1197);
MSGPARM(PAR.TH_Hog_Class_Type);
MSGPARM(DTL.Defect_User_5);
MSGPARM(DTL.Class_Df_5_Usr);

ENDIF;

ENDIF;

//?val 6
CASE;

// IF DTL.Defect User  6 is Entered
IF DTL.Defect_User_6 <> *BLANK;

// Call program Val Market Defect     XF.
CALL PROGRAM(Val Market Defect     XF) ('PLL6XFR');
PARAMETER(DTL.Defect_User_6);
PARAMETER(DTL.Class_Df_6_Usr);
PARAMETER(DTL.TH_Hog_Class_Type);
PARAMETER(LCL.*Return_code);

CASE;

// IF LCL.*Return code is Error Found
IF LCL.*Return_code = 'ERROR';

// Send error message - 'Defect &2 Def Class &3 Not allow on Hog Type'
ERROR(PRK1197);
MSGPARM(PAR.TH_Hog_Class_Type);
MSGPARM(DTL.Defect_User_6);
MSGPARM(DTL.Class_Df_6_Usr);

ENDIF;

ENDIF;

//?val 7
CASE;

// IF DTL.Defect User  7 is Entered
IF DTL.Defect_User_7 <> *BLANK;

// Call program Val Market Defect     XF.
CALL PROGRAM(Val Market Defect     XF) ('PLL6XFR');
PARAMETER(DTL.Defect_User_7);
PARAMETER(DTL.Class_Df_7_Usr);
PARAMETER(DTL.TH_Hog_Class_Type);
PARAMETER(LCL.*Return_code);

CASE;

// IF LCL.*Return code is Error Found
IF LCL.*Return_code = 'ERROR';

// Send error message - 'Defect &2 Def Class &3 Not allow on Hog Type'
ERROR(PRK1197);
MSGPARM(PAR.TH_Hog_Class_Type);
MSGPARM(DTL.Defect_User_7);
MSGPARM(DTL.Class_Df_7_Usr);

ENDIF;

ENDIF;

//?val 8
CASE;

// IF DTL.Defect User  8 is Entered
IF DTL.Defect_User_8 <> *BLANK;

// Call program Val Market Defect     XF.
CALL PROGRAM(Val Market Defect     XF) ('PLL6XFR');
PARAMETER(DTL.Defect_User_8);
PARAMETER(DTL.Class_Df_8_Usr);
PARAMETER(DTL.TH_Hog_Class_Type);
PARAMETER(LCL.*Return_code);

CASE;

// IF LCL.*Return code is Error Found
IF LCL.*Return_code = 'ERROR';

// Send error message - 'Defect &2 Def Class &3 Not allow on Hog Type'
ERROR(PRK1197);
MSGPARM(PAR.TH_Hog_Class_Type);
MSGPARM(DTL.Defect_User_8);
MSGPARM(DTL.Class_Df_8_Usr);

ENDIF;

ENDIF;

//?val 9
CASE;

// IF DTL.Defect User  9 is Entered
IF DTL.Defect_User_9 <> *BLANK;

// Call program Val Market Defect     XF.
CALL PROGRAM(Val Market Defect     XF) ('PLL6XFR');
PARAMETER(DTL.Defect_User_9);
PARAMETER(DTL.Class_Df_9_Usr);
PARAMETER(DTL.TH_Hog_Class_Type);
PARAMETER(LCL.*Return_code);

CASE;

// IF LCL.*Return code is Error Found
IF LCL.*Return_code = 'ERROR';

// Send error message - 'Defect &2 Def Class &3 Not allow on Hog Type'
ERROR(PRK1197);
MSGPARM(PAR.TH_Hog_Class_Type);
MSGPARM(DTL.Defect_User_9);
MSGPARM(DTL.Class_Df_9_Usr);

ENDIF;

ENDIF;

//?val 10
CASE;

// IF DTL.Defect User 10 is Entered
IF DTL.Defect_User_10 <> *BLANK;

// Call program Val Market Defect     XF.
CALL PROGRAM(Val Market Defect     XF) ('PLL6XFR');
PARAMETER(DTL.Defect_User_10);
PARAMETER(DTL.Class_Df_10_Usr);
PARAMETER(DTL.TH_Hog_Class_Type);
PARAMETER(LCL.*Return_code);

CASE;

// IF LCL.*Return code is Error Found
IF LCL.*Return_code = 'ERROR';

// Send error message - 'Defect &2 Def Class &3 Not allow on Hog Type'
ERROR(PRK1197);
MSGPARM(PAR.TH_Hog_Class_Type);
MSGPARM(DTL.Defect_User_10);
MSGPARM(DTL.Class_Df_10_Usr);

ENDIF;

ENDIF;

ENDDO;

ENDDO;

//?Internal farm site and state MTech NOTLive & MtechLive
CASE;

// IF DTL.TH Source Type is Internal
IF DTL.TH_Source_Type = 'I';

// AND LCL.MTech Live Yes or No is No MTech not Live
AND LCL.MTech_Live_Yes_or_No = 'N';

//?get farm site by movement
// Call program Z1v HPS Farm Info     UP.
CALL PROGRAM(Z1v HPS Farm Info     UP) ('HP249');
PARAMETER(WRK.*Return_code);
PARAMETER(DTL.TH_HPS_Movement_Ref_#);
PARAMETER(WRK.Farm_site_Name_f_HPS_USR);
PARAMETER(WRK.Farm_Site_USR);
PARAMETER(WRK.HPS_FS_Comp_Relation_USR);
PARAMETER(PAR.State);

// DTL.TH HPS Farm Site = WRK.Farm Site USR
DTL.TH_HPS_Farm_Site = WRK.Farm_Site_USR;

CASE;

// IF WRK.Farm Site USR NE WRK.Zero USR
IF WRK.Farm_Site_USR <> WRK.Zero_USR;

// DTL.TH State = PAR.State
DTL.TH_State = PAR.State;

ENDIF;

//?Internal farm site and state MTech NOTLive & MtechLive
// IF DTL.TH Source Type is Internal
IF DTL.TH_Source_Type = 'I';

// AND LCL.MTech Live Yes or No is Yes MTech is Live
AND LCL.MTech_Live_Yes_or_No = 'Y';

//?have farm site on screen now get state
// Call program Rtv HPS Farm Inf-Mtech UP.
CALL PROGRAM(Rtv HPS Farm Inf-Mtech UP) ('HP293');
PARAMETER(WRK.*Return_code);
PARAMETER(NLL.Farm_site_Name_f_HPS_USR);
PARAMETER(DTL.TH_HPS_Farm_Site);
PARAMETER(WRK.HPS_FS_Comp_Relation_USR);
PARAMETER(DTL.TH_State);
PARAMETER(WRK.HPS_Farm_County);
PARAMETER(WRK.HPS_Cell_Manager_Code_USR);
PARAMETER(WRK.HPS_Cell_Manager_Nm_USR);
PARAMETER(NLL.MTech_Farm_Site_Ref);
PARAMETER(NLL.MTech_Cell_Manager_Ref);

CASE;

// IF DTL.TH HPS Farm Site NE WRK.Zero USR
IF DTL.TH_HPS_Farm_Site <> WRK.Zero_USR;

// DTL.TH State = PAR.State
DTL.TH_State = PAR.State;

ENDIF;

ENDIF;

//?Validate the state code regardless
// LCL.Return Code USR = WRK.Blank USR
LCL.Return_Code_USR = WRK.Blank_USR;

// Call program Rtv State Description UP.
CALL PROGRAM(Rtv State Description UP) ('STATERET');
PARAMETER(LCL.Return_Code_USR);
PARAMETER(DTL.TH_State);
PARAMETER(DTL.State_Desc_15_USR);

//?Invalid state code send message
CASE;

// IF LCL.Return Code USR is *Normal
IF LCL.Return_Code_USR = *BLANK;

//?Invalid state code send message
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'State Code is Invalid'
ERROR(PRK0308);
MSGPARM(DTL.TH_State);

ENDIF;

