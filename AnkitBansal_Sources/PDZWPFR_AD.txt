// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDZWPFR
// ?Date: 14.08.2025 Time: 12:04:50
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

//?USER: Record selection processing

//?Ignore records not meeting selection criteria
//?If Selection is by Scheduled Ship Range include only unshipped orders
CASE;

// IF PAR.USR From Date is GT Zero
IF PAR.USR_From_Date > *ZERO;

CASE;

// IF DB1.Detail Line Status is Confirmed & Complete
IF DB1.Detail_Line_Status = 'C'/'R';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?If Selection is by Order Date go to Header to get date.
CASE;

// IF PAR.Date In is GT Zero
IF PAR.Date_In > *ZERO;

EXECUTE FUNCTION(RTV Export Sts/Order DtRT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1471491;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(PAR.Order_Date);
PARAMETER(WRK.Export_Status);
{
 //?USER: Initialize routine

 // PAR.Export Status = CND.blank
 PAR.Export_Status = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.Date In EQ PAR.Order Date
IF PAR.Date_In = PAR.Order_Date;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Process Export Sales 'E'
CASE;

// IF PAR.Export Sales is Export Sales Only
IF PAR.Export_Sales = 'E';

// AND WRK.Export Status is no
AND WRK.Export_Status = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Process Export sales 'N'
CASE;

// IF PAR.Export Sales is Non-Export Sales Only
IF PAR.Export_Sales = 'N';

// AND WRK.Export Status is yes
AND WRK.Export_Status = 'Y';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

EXECUTE FUNCTION(RTV Bill Type, Event   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1366339;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(WRK.Event_Code);
PARAMETER(PAR.Billing_Activity_Type);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Process Invoices only
CASE;

// IF PAR.Billing Activity Type is Invoice
IF PAR.Billing_Activity_Type = '1';

//?Process Invoices only
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Put Type, Group, Class selections in OPNQRYF
//?USER: On print of first page format

MOVE *ALL (To: 1PG From: PAR);

// 1PG.Company Number = DB1.Company Number
X1PG_Company_Number = DB1.Company_Number;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(X1PG_Company_Number);
PARAMETER(WRK.USR_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.USR Company Name = WRK.USR Company Name
X1PG_USR_Company_Name = WRK.USR_Company_Name;

// 1PG.USR Product Str Type = PAR.USR Product Str Type
X1PG_USR_Product_Str_Type = PAR.USR_Product_Str_Type;

// 1PG.USR Product Str Group = PAR.USR Product Str Group
X1PG_USR_Product_Str_Group = PAR.USR_Product_Str_Group;

// 1PG.USR Product Struct Class = PAR.USR Product Struct Class
X1PG_USR_Product_Struct_Class = PAR.USR_Product_Struct_Class;

// 1PG.Item Structure Type Desc = CON.*ALL
X1PG_Item_Structure_Type_Desc = *ALL;

// 1PG.Item Structure Group Desc = CON.*ALL
X1PG_Item_Structure_Group_Desc = *ALL;

// 1PG.Item Structure Class Desc = CON.*ALL
X1PG_Item_Structure_Class_Desc = *ALL;

EXECUTE FUNCTION(RTV  Description       RT) TYPE(RTVOBJ) FILE(OME8REP)          AC1219219;
PARAMETER(X1PG_USR_Product_Str_Type);
PARAMETER(X1PG_Item_Structure_Type_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Group Description  RT) TYPE(RTVOBJ) FILE(OME9REP)          AC1202656;
PARAMETER(X1PG_USR_Product_Str_Group);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(X1PG_Item_Structure_Group_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Item Class Desc    RT) TYPE(RTVOBJ) FILE(OMFAREP)          AC1205440;
PARAMETER(X1PG_USR_Product_Struct_Class);
PARAMETER(X1PG_Item_Structure_Class_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Condition Desc. 1  USR = Condition name of 1PG.Export Sales
X1PG_Condition_Desc_1_USR = RTVCND(X1PG_Export_Sales);

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
// Print Company Number header format
PRINT Company Number header format;

ENDIF;

CASE;

IF NEW Item_Structure_Type_Code;
EXECUTE FUNCTION(RTV  Description       RT) TYPE(RTVOBJ) FILE(OME8REP)          AC1219219;
PARAMETER(CUR.Item_Structure_Type_Code);
PARAMETER(CUR.Item_Structure_Type_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


// Print Item Structure Type Code header format
PRINT Item Structure Type Code header format;

ENDIF;

CASE;

IF NEW Item_Structure_Group_Code;
EXECUTE FUNCTION(Rtv Group Description  RT) TYPE(RTVOBJ) FILE(OME9REP)          AC1202656;
PARAMETER(CUR.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(CUR.Item_Structure_Group_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Print Item Structure Group Code header format
PRINT Item Structure Group Code header format;

ENDIF;

CASE;

IF NEW Item_Structure_Class_Code;
EXECUTE FUNCTION(Rtv Item Class Desc    RT) TYPE(RTVOBJ) FILE(OMFAREP)          AC1205440;
PARAMETER(CUR.Item_Structure_Class_Code);
PARAMETER(CUR.Item_Structure_Class_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Print Item Structure Class Code header format
PRINT Item Structure Class Code header format;

ENDIF;

// SUPPRESSED PRINT Item Code header format

//?USER: On print of detail format

//?Determine which weight to use for calculations
CASE;

// IF DB1.Detail Line Status is Confirmed & Complete
IF DB1.Detail_Line_Status = 'C'/'R';

// PAR.Weight 11.2 USR = DB1.Weight Shipped Total
PAR.Weight_11_2_USR = DB1.Weight_Shipped_Total;

//?Determine which weight to use for calculations
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Weight 11.2 USR = DB1.Weight Ordered
PAR.Weight_11_2_USR = DB1.Weight_Ordered;

ENDIF;

//?Determine which amount to use for calculations
CASE;

// IF DB1.Detail Line Status is Confirmed & Complete
IF DB1.Detail_Line_Status = 'C'/'R';

// PAR.USR Extended Amount S = DB1.Extended Amount
PAR.USR_Extended_Amount_S = DB1.Extended_Amount;

//?Determine which amount to use for calculations
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Extended Amount S = DB1.Quantity Ordered * DB1.Unit Price Ordered U/M *
PAR.USR_Extended_Amount_S = DB1.Quantity_Ordered * DB1.Unit_Price_Ordered_U_M;

ENDIF;

//?*** Calculate Net FOB Amount ***
CASE;

// IF WRK.ZERO EQ WRK.ZERO
IF WRK.ZERO = WRK.ZERO;

//?        First calculating Absorbed Freight Amount
EXECUTE FUNCTION(RTV Item Price Struct  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1230472;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(PAR.UOM_Pricing);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.Market_Overage);
PARAMETER(PAR.Standard_Overage_Underage);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(PAR.Item_Pricing_Operation);
PARAMETER(PAR.Item_Pricing_Constant);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Freight            RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1390225;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(WRK.Order_Weight_Total);
PARAMETER(WRK.Absorbed_Freight_Rate_CWT);
PARAMETER(WRK.Rated_Freight);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.Freight Cost = WRK.Absorbed Freight Rate / CON.100 *
WRK.Freight_Cost = WRK.Absorbed_Freight_Rate_CWT / 100;

// WRK.Absorbed Freight Amount = WRK.Freight Cost * PAR.Weight 11.2 USR *Rounded
WRK.Absorbed_Freight_Amount = WRK.Freight_Cost * PAR.Weight_11_2_USR 'H';

//?        Next calculating Component Price Amount
EXECUTE FUNCTION(RTV Freight Overage    RT) TYPE(RTVOBJ) FILE(PDIMCPP)          AC1388024;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(DB1.Order_Sequence_Number);
PARAMETER(DB1.Order_Secondary_Line_Seq);
PARAMETER('CFRTOV');
PARAMETER(WRK.Componant_Price);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.USR Comp. Prc Rate per Lb = WRK.Componant Price / CON.100 *
WRK.USR_Comp_Prc_Rate_per_Lb = WRK.Componant_Price / 100;

// WRK.USR Component Price Amt = WRK.USR Comp. Prc Rate per Lb * PAR.Weight 11.2 US
WRK.USR_Component_Price_Amt = WRK.USR_Comp_Prc_Rate_per_Lb * PAR.Weight_11_2_USR 'H';

//?Determine Net $ to show
CASE;

// IF DB1.Detail Line Status is Confirmed & Complete
IF DB1.Detail_Line_Status = 'C'/'R';

//?Do not remove absorbed freight dollars from Net $ if manually priced
CASE;

// IF CUR.Price Method Code is Manual
IF CUR.Price_Method_Code = 'MAN';

// CUR.USR Billing Dtl Net Dol 2 = PAR.USR Extended Amount S - WRK.USR Component Pr
CUR.USR_Billing_Dtl_Net_Dol_2 = PAR.USR_Extended_Amount_S - WRK.USR_Component_Price_Amt;

//?Do not remove absorbed freight dollars from Net $ if manually priced
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Billing Dtl Net Dol 2 = PAR.USR Extended Amount S - WRK.Absorbed Freight
CUR.USR_Billing_Dtl_Net_Dol_2 = PAR.USR_Extended_Amount_S - WRK.Absorbed_Freight_Amount;

// CUR.USR Billing Dtl Net Dol 2 = CUR.USR Billing Dtl Net Dol 2 - WRK.USR Componen
CUR.USR_Billing_Dtl_Net_Dol_2 = CUR.USR_Billing_Dtl_Net_Dol_2                                      +
- WRK.USR_Component_Price_Amt;

ENDIF;

//?Determine Net $ to show
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Billing Dtl Net Dol 2 = CON.*ZERO
CUR.USR_Billing_Dtl_Net_Dol_2 = *ZERO;

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Item Info for Rpts RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1441538;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(WRK.Description_Line_One);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(PAR.UOM_Pricing);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.Commodity_Market_Code);
PARAMETER(WRK.Market_Overage);
PARAMETER(PAR.Standard_Overage_Underage);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(PAR.Item_Pricing_Operation);
PARAMETER(PAR.Item_Pricing_Constant);
PARAMETER(WRK.Print_on_Realization_Rpt);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(CUR.Ship_To_Customer);
PARAMETER(CUR.USR_Description_15);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Price method must be 'MKT' for Price Date to print
CASE;

// IF DB1.Price Method Code is Market
IF DB1.Price_Method_Code = 'MKT';

// CUR.Market Pricing Date = DB1.Pricing Date Used
CUR.Market_Pricing_Date = DB1.Pricing_Date_Used;

//?Price method must be 'MKT' for Price Date to print
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Market Pricing Date = CND.EQ Zero
CUR.Market_Pricing_Date = *ZERO;

ENDIF;

//?FOB amount and weight
CASE;

// IF PAR.Billing Activity Type is Invoice
IF PAR.Billing_Activity_Type = '1';

CASE;

// IF DB1.Affect Sales Doll Status is no
IF DB1.Affect_Sales_Doll_Status = 'N';

// CUR.Extended Amount = CND.equal to zero
CUR.Extended_Amount = *ZERO;

// CUR.USR Billing Dtl Net Dol 2 = CON.*ZERO
CUR.USR_Billing_Dtl_Net_Dol_2 = *ZERO;

ENDIF;

CASE;

// IF DB1.Affect Sales Pnds Status is no
IF DB1.Affect_Sales_Pnds_Status = 'N';

// CUR.USR Weight Accumulated = CON.*ZERO
CUR.USR_Weight_Accumulated = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Weight Accumulated = DB1.Weight Shipped Total
CUR.USR_Weight_Accumulated = DB1.Weight_Shipped_Total;

ENDIF;

ENDIF;

//?Market Code
CASE;

// IF PAR.Billing Activity Type is Invoice
IF PAR.Billing_Activity_Type = '1';

CASE;

// IF DB1.Affect Sales Doll Status is no
IF DB1.Affect_Sales_Doll_Status = 'N';

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

//?Compute market price
CASE;

// IF DB1.U/M - Base Price EQ PAR.U/M - Primary
IF DB1.U_M_Base_Price = PAR.UOM_Primary;

// OR DB1.U/M - Base Price EQ PAR.U/M - Second
OR DB1.U_M_Base_Price = PAR.UOM_Second;

// OR DB1.U/M - Base Price EQ PAR.U/M - Third
OR DB1.U_M_Base_Price = PAR.UOM_Third;

//?subtract 1 from scheduled shipped date for starting point
//?Determine which date to use for market price calculations
CASE;

// IF DB1.Pricing Date Used is Entered
IF DB1.Pricing_Date_Used <> *ZERO;

// WRK.Scheduled Ship Date = DB1.Pricing Date Used + CON.-1 *DAYS
WRK.Scheduled_Ship_Date = DATEINCR(DB1.Pricing_Date_Used '-1' 'DY' 1111111 'NONE' 'N' 1);

//?Determine which date to use for market price calculations
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.Detail Line Status is Confirmed & Complete
IF DB1.Detail_Line_Status = 'C'/'R';

// WRK.Scheduled Ship Date = DB1.Actual Shipped Date + CON.-1 *DAYS
WRK.Scheduled_Ship_Date = DATEINCR(DB1.Actual_Shipped_Date '-1' 'DY' 1111111 'NONE' 'N'            +
1);

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Scheduled Ship Date = DB1.Scheduled Ship Date + CON.-1 *DAYS
WRK.Scheduled_Ship_Date = DATEINCR(DB1.Scheduled_Ship_Date '-1' 'DY' 1111111 'NONE' 'N'            +
1);

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
PARAMETER(WRK.Commodity_Market_Code);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(WRK.Scheduled_Ship_Date);
PARAMETER(WRK.Commodity_Market_Price);
PARAMETER(WRK.USR_Date_Priced);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Commodity Market Price = DB1.Commodity Market Price
 PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

 // PAR.USR Date Priced = DB1.Market Price Date
 PAR.USR_Date_Priced = DB1.Market_Price_Date;

 QUIT;

}


EXECUTE FUNCTION(CLC Convert Price      IF) TYPE(EXCINTFUN)                     AC1290254;
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(DB1.U_M_Base_Price);
PARAMETER(WRK.Price_based_on_U_M1_S);
PARAMETER(WRK.Price_based_on_U_M2_S);
PARAMETER(WRK.Price_based_on_U_M3_S);
PARAMETER(WRK.Commodity_Market_Price);
{
 //?Execute internal function

 //?Initialize parameter values
 // PAR.Price based on U/M1 S = CON.*ZERO
 PAR.Price_based_on_U_M1_S = *ZERO;

 // PAR.Price based on U/M2 S = CON.*ZERO
 PAR.Price_based_on_U_M2_S = *ZERO;

 // PAR.Price based on U/M3 S = CON.*ZERO
 PAR.Price_based_on_U_M3_S = *ZERO;

 //?Process based on Unit of Measure entered
 CASE;

 // IF PAR.U/M - Primary EQ PAR.U/M - Pricing
 IF PAR.UOM_Primary = PAR.UOM_Pricing;

 // PAR.Price based on U/M1 S = PAR.Unit Price
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price;

 //?Process second U/M if entered
 CASE;

 // IF PAR.U/M - Second is Entered
 IF PAR.UOM_Second <> *BLANK;

 //?Convert based on operation code
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M2 S = PAR.Unit Price / PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price / PAR.Conversion_Factor_1 'H';

 ENDIF;

 //?Convert based on operation code
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 // PAR.Price based on U/M2 S = PAR.Unit Price * PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price * PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 //?Process third U/M if entered
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M3 S = PAR.Price based on U/M2 S / PAR.Conversion Factor 2
 PAR.Price_based_on_U_M3_S = PAR.Price_based_on_U_M2_S / PAR.Conversion_Factor_2 'H';

 ENDIF;

 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.Price based on U/M3 S = PAR.Price based on U/M2 S * PAR.Conversion Factor 2
 PAR.Price_based_on_U_M3_S = PAR.Price_based_on_U_M2_S * PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Process based on Unit of Measure entered
 // IF PAR.U/M - Second EQ PAR.U/M - Pricing
 IF PAR.UOM_Second = PAR.UOM_Pricing;

 // PAR.Price based on U/M2 S = PAR.Unit Price
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 // PAR.Price based on U/M1 S = PAR.Unit Price * PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price * PAR.Conversion_Factor_1 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M1 S = PAR.Unit Price / PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price / PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 //?Process third U/M if entered
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M3 S = PAR.Unit Price / PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price / PAR.Conversion_Factor_2 'H';

 ENDIF;

 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.Price based on U/M3 S = PAR.Unit Price * PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price * PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Process based on Unit of Measure entered
 // IF PAR.U/M - Third EQ PAR.U/M - Pricing
 IF PAR.UOM_Third = PAR.UOM_Pricing;

 // PAR.Price based on U/M3 S = PAR.Unit Price
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 // PAR.Price based on U/M2 S = PAR.Unit Price * PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price * PAR.Conversion_Factor_2 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M2 S = PAR.Unit Price / PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price / PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 // PAR.Price based on U/M1 S = PAR.Price based on U/M2 S * PAR.Conversion Factor 1
 PAR.Price_based_on_U_M1_S = PAR.Price_based_on_U_M2_S * PAR.Conversion_Factor_1 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M1 S = PAR.Price based on U/M2 S / PAR.Conversion Factor 1
 PAR.Price_based_on_U_M1_S = PAR.Price_based_on_U_M2_S / PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Compute Market Price
CASE;

// IF PAR.Unit Weight EQ WRK.ZERO
IF PAR.Unit_Weight = WRK.ZERO;

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

//?Compute Market Price
// IF *OTHERWISE
IF *OTHERWISE;

// Synon (17,9) work field =       * Compute Market Prc/LB
PGM.*Synon_179_work_field = ( WRK.Price_based_on_U_M1_S / PAR.Unit_Weight 'H' )                    +
* PAR.Weight_11_2_USR 'H';

// CUR.USR Market Value Price = PGM.*Synon (17,9) work field
CUR.USR_Market_Value_Price = PGM.*Synon_179_work_field;

ENDIF;

//?Compute market price
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

ENDIF;

ENDIF;

ENDIF;

// PAR.U/M - Base Price = DB1.U/M - Base Price
PAR.U_M_Base_Price = DB1.U_M_Base_Price;

// CUR.USR Qty Billed = DB1.Quantity Shipped Total
CUR.USR_Qty_Billed = DB1.Quantity_Shipped_Total;

// CUR.USR Percent Work, 7.2 = CON.*ZERO
CUR.USR_Percent_Work_7_2 = *ZERO;

// CUR.USR Amount Remaining = CON.*ZERO
CUR.USR_Amount_Remaining = *ZERO;

//?Calculate FOB Price/CWT
CASE;

// IF PAR.Weight 11.2 USR is Greater than zero
IF PAR.Weight_11_2_USR > *ZERO;

// WRK.USR Percent Work, 7.4 = PAR.USR Extended Amount S / PAR.Weight 11.2 USR *Rou
WRK.USR_Percent_Work_7_4 = PAR.USR_Extended_Amount_S / PAR.Weight_11_2_USR 'H';

// CUR.USR Percent Work, 7.2 = WRK.USR Percent Work, 7.4 * CON.100 *Rounded
CUR.USR_Percent_Work_7_2 = WRK.USR_Percent_Work_7_4 * 100 'H';

//?Remove absorbed freight rate divided by 100 from FOB Price/CWT
//?Only for Manually priced
CASE;

// IF CUR.Price Method Code is Manual
IF CUR.Price_Method_Code = 'MAN';

// CUR.USR Percent Work, 7.2 = CUR.USR Percent Work, 7.2 - WRK.Absorbed Freight Amo
CUR.USR_Percent_Work_7_2 = CUR.USR_Percent_Work_7_2 - WRK.Absorbed_Freight_Amount;

ENDIF;

ENDIF;

//?FOB Price cannot be less than zero
CASE;

// IF CUR.USR Percent Work, 7.2 is Greater than zero
IF CUR.USR_Percent_Work_7_2 > *ZERO;

//?FOB Price cannot be less than zero
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Percent Work, 7.2 = CON.*ZERO
CUR.USR_Percent_Work_7_2 = *ZERO;

ENDIF;

//?Compute Market Price (CWT)
CASE;

// IF PAR.Weight 11.2 USR NE WRK.ZERO
IF PAR.Weight_11_2_USR <> WRK.ZERO;

// Synon (17,9) work field =       * Compute Market Price CWT
PGM.*Synon_179_work_field = ( CUR.USR_Market_Value_Price / PAR.Weight_11_2_USR 'H' ) * 100         +
'H';

//?compute usr market value
CASE;

// IF CUR.USR Market Value Price LT WRK.ZERO
IF CUR.USR_Market_Value_Price < WRK.ZERO;

// AND PAR.Weight 11.2 USR LT WRK.ZERO
AND PAR.Weight_11_2_USR < WRK.ZERO;

// WRK.USR Market Value = PGM.*Synon (17,9) work field * CON.-1 *Rounded
WRK.USR_Market_Value = PGM.*Synon_179_work_field * -1 'H';

//?compute usr market value
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Market Value = PGM.*Synon (17,9) work field * CON.1 *Rounded
WRK.USR_Market_Value = PGM.*Synon_179_work_field * 1 'H';

ENDIF;

//?Compute Market Price (CWT)
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Market Value = CON.*ZERO
WRK.USR_Market_Value = *ZERO;

ENDIF;

//?Compute Standard Overage
CASE;

// IF WRK.ZERO is Zero
IF WRK.ZERO = *ZERO;

EXECUTE FUNCTION(CLC Convert Price      IF) TYPE(EXCINTFUN)                     AC1290254;
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(PAR.U_M_Base_Price);
PARAMETER(WRK.Price_based_on_U_M1_S);
PARAMETER(WRK.Price_based_on_U_M2_S);
PARAMETER(WRK.Price_based_on_U_M3_S);
PARAMETER(PAR.Standard_Overage_Underage);
{
 //?Execute internal function

 //?Initialize parameter values
 // PAR.Price based on U/M1 S = CON.*ZERO
 PAR.Price_based_on_U_M1_S = *ZERO;

 // PAR.Price based on U/M2 S = CON.*ZERO
 PAR.Price_based_on_U_M2_S = *ZERO;

 // PAR.Price based on U/M3 S = CON.*ZERO
 PAR.Price_based_on_U_M3_S = *ZERO;

 //?Process based on Unit of Measure entered
 CASE;

 // IF PAR.U/M - Primary EQ PAR.U/M - Pricing
 IF PAR.UOM_Primary = PAR.UOM_Pricing;

 // PAR.Price based on U/M1 S = PAR.Unit Price
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price;

 //?Process second U/M if entered
 CASE;

 // IF PAR.U/M - Second is Entered
 IF PAR.UOM_Second <> *BLANK;

 //?Convert based on operation code
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M2 S = PAR.Unit Price / PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price / PAR.Conversion_Factor_1 'H';

 ENDIF;

 //?Convert based on operation code
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 // PAR.Price based on U/M2 S = PAR.Unit Price * PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price * PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 //?Process third U/M if entered
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M3 S = PAR.Price based on U/M2 S / PAR.Conversion Factor 2
 PAR.Price_based_on_U_M3_S = PAR.Price_based_on_U_M2_S / PAR.Conversion_Factor_2 'H';

 ENDIF;

 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.Price based on U/M3 S = PAR.Price based on U/M2 S * PAR.Conversion Factor 2
 PAR.Price_based_on_U_M3_S = PAR.Price_based_on_U_M2_S * PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Process based on Unit of Measure entered
 // IF PAR.U/M - Second EQ PAR.U/M - Pricing
 IF PAR.UOM_Second = PAR.UOM_Pricing;

 // PAR.Price based on U/M2 S = PAR.Unit Price
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 // PAR.Price based on U/M1 S = PAR.Unit Price * PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price * PAR.Conversion_Factor_1 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M1 S = PAR.Unit Price / PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price / PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 //?Process third U/M if entered
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M3 S = PAR.Unit Price / PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price / PAR.Conversion_Factor_2 'H';

 ENDIF;

 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.Price based on U/M3 S = PAR.Unit Price * PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price * PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Process based on Unit of Measure entered
 // IF PAR.U/M - Third EQ PAR.U/M - Pricing
 IF PAR.UOM_Third = PAR.UOM_Pricing;

 // PAR.Price based on U/M3 S = PAR.Unit Price
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 // PAR.Price based on U/M2 S = PAR.Unit Price * PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price * PAR.Conversion_Factor_2 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M2 S = PAR.Unit Price / PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price / PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 // PAR.Price based on U/M1 S = PAR.Price based on U/M2 S * PAR.Conversion Factor 1
 PAR.Price_based_on_U_M1_S = PAR.Price_based_on_U_M2_S * PAR.Conversion_Factor_1 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M1 S = PAR.Price based on U/M2 S / PAR.Conversion Factor 1
 PAR.Price_based_on_U_M1_S = PAR.Price_based_on_U_M2_S / PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Compute Std Overage
CASE;

// IF PAR.Unit Weight EQ WRK.ZERO
IF PAR.Unit_Weight = WRK.ZERO;

// WRK.Standard Overage USR = CON.*ZERO
WRK.Standard_Overage_USR = *ZERO;

//?Compute Std Overage
// IF *OTHERWISE
IF *OTHERWISE;

// Synon (17,9) work field =       * Compute Standard Overage
PGM.*Synon_179_work_field = ( WRK.Price_based_on_U_M1_S / PAR.Unit_Weight 'H' ) * 100              +
'H';

// WRK.Standard Overage USR = PGM.*Synon (17,9) work field
WRK.Standard_Overage_USR = PGM.*Synon_179_work_field;

//?Add Market Overage
// WRK.Price Adjustment Amount = CON.*ZERO
WRK.Price_Adjustment_Amount = *ZERO;

// WRK.Market Overage = CON.*ZERO
WRK.Market_Overage = *ZERO;

EXECUTE FUNCTION(RTV Overages           RT) TYPE(RTVOBJ) FILE(PDISREP)          AC1290537;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Ship_To_Customer);
PARAMETER(CUR.Item_Code);
PARAMETER(WRK.Market_Overage);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program CLC Convert Price - CW XF.
CALL PROGRAM(CLC Convert Price - CW XF) ('PDKUXFR');
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(WRK.Market_Overage);
PARAMETER(WRK.Price_Adjustment_Amount);

// WRK.Standard Overage USR = WRK.Standard Overage USR + WRK.Price Adjustment Amoun
WRK.Standard_Overage_USR = WRK.Standard_Overage_USR + WRK.Price_Adjustment_Amount;

ENDIF;

// CUR.Standard Overage USR = WRK.Standard Overage USR
CUR.Standard_Overage_USR = WRK.Standard_Overage_USR;

ENDIF;

CASE;

// IF PAR.Weight 11.2 USR is Greater than zero
IF PAR.Weight_11_2_USR > *ZERO;

// CUR.USR Amount Remaining = WRK.Standard Overage USR + WRK.USR Market Value
CUR.USR_Amount_Remaining = WRK.Standard_Overage_USR + WRK.USR_Market_Value;

ENDIF;

// CUR.Variance amount 1     USR = CUR.USR Percent Work, 7.2 - CUR.USR Amount Remai
CUR.Variance_amount_1_USR = CUR.USR_Percent_Work_7_2 - CUR.USR_Amount_Remaining;

//?Net $ cannot be less than zero
CASE;

// IF CUR.USR Billing Dtl Net Dol 2 is Less than zero
IF CUR.USR_Billing_Dtl_Net_Dol_2 < *ZERO;

// CUR.USR Billing Dtl Net Dol 2 = CON.*ZERO
CUR.USR_Billing_Dtl_Net_Dol_2 = *ZERO;

ENDIF;

//?USER: Process after print of detail format

// NXT.USR Billing Dtl Net Dol 2 = NXT.USR Billing Dtl Net Dol 2 + CUR.USR Billing
NXT.USR_Billing_Dtl_Net_Dol_2 = NXT.USR_Billing_Dtl_Net_Dol_2                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_2;

// NXT.USR Weight Accumulated = NXT.USR Weight Accumulated + CUR.USR Weight Accumul
NXT.USR_Weight_Accumulated = NXT.USR_Weight_Accumulated + CUR.USR_Weight_Accumulated;

// NXT.Weight 11.2 USR = NXT.Weight 11.2 USR + PAR.Weight 11.2 USR
NXT.Weight_11_2_USR = NXT.Weight_11_2_USR + PAR.Weight_11_2_USR;

// NXT.USR Extended Amount S = NXT.USR Extended Amount S + PAR.USR Extended Amount
NXT.USR_Extended_Amount_S = NXT.USR_Extended_Amount_S + PAR.USR_Extended_Amount_S;

// NXT.FOB Gross Amount      USR = NXT.FOB Gross Amount      USR + CUR.Extended Amo
NXT.FOB_Gross_Amount_USR = NXT.FOB_Gross_Amount_USR + CUR.Extended_Amount;

// NXT.USR Qty Billed = NXT.USR Qty Billed + CUR.USR Qty Billed
NXT.USR_Qty_Billed = NXT.USR_Qty_Billed + CUR.USR_Qty_Billed;

// NXT.USR Market Value Price = NXT.USR Market Value Price + CUR.USR Market Value P
NXT.USR_Market_Value_Price = NXT.USR_Market_Value_Price + CUR.USR_Market_Value_Price;

// NXT.Standard Overage USR = NXT.Standard Overage USR + CUR.Standard Overage USR
NXT.Standard_Overage_USR = NXT.Standard_Overage_USR + CUR.Standard_Overage_USR;

//?USER: Print required level totals

CASE;

IF NEW Item_Code;
EXECUTE FUNCTION(RTV Item Info for Rpts RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1441538;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.USR_Item_Description);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(PAR.UOM_Pricing);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.Default_Commod_Mark_basis);
PARAMETER(WRK.Market_Overage);
PARAMETER(PAR.Standard_Overage_Underage);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(PAR.Item_Pricing_Operation);
PARAMETER(PAR.Item_Pricing_Constant);
PARAMETER(WRK.Print_on_Realization_Rpt);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF CUR.Weight 11.2 USR is Greater than zero
IF CUR.Weight_11_2_USR > *ZERO;

// WRK.USR Percent Work, 7.4 = CUR.USR Extended Amount S / CUR.Weight 11.2 USR *Rou
WRK.USR_Percent_Work_7_4 = CUR.USR_Extended_Amount_S / CUR.Weight_11_2_USR 'H';

// CUR.USR Percent Work, 7.2 = WRK.USR Percent Work, 7.4 * CON.100 *Rounded
CUR.USR_Percent_Work_7_2 = WRK.USR_Percent_Work_7_4 * 100 'H';

ENDIF;

//?FOB Sales and Weight both negative
CASE;

// IF CUR.USR Extended Amount S LT WRK.ZERO
IF CUR.USR_Extended_Amount_S < WRK.ZERO;

// AND CUR.Weight 11.2 USR LT WRK.ZERO
AND CUR.Weight_11_2_USR < WRK.ZERO;

// CUR.USR Percent Work, 7.2 = CUR.USR Percent Work, 7.2 * CON.-1 *Rounded
CUR.USR_Percent_Work_7_2 = CUR.USR_Percent_Work_7_2 * -1 'H';

ENDIF;

//?Compute Market Price (CWT)
CASE;

// IF CUR.Weight 11.2 USR NE WRK.ZERO
IF CUR.Weight_11_2_USR <> WRK.ZERO;

// Synon (17,9) work field =       * Compute Market Price CWT
PGM.*Synon_179_work_field = ( CUR.USR_Market_Value_Price / CUR.Weight_11_2_USR 'H' ) * 100         +
'H';

//?compute usr market value
CASE;

// IF CUR.USR Market Value Price LT WRK.ZERO
IF CUR.USR_Market_Value_Price < WRK.ZERO;

// AND CUR.Weight 11.2 USR LT WRK.ZERO
AND CUR.Weight_11_2_USR < WRK.ZERO;

// WRK.USR Market Value = PGM.*Synon (17,9) work field * CON.-1 *Rounded
WRK.USR_Market_Value = PGM.*Synon_179_work_field * -1 'H';

//?compute usr market value
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Market Value = PGM.*Synon (17,9) work field * CON.1 *Rounded
WRK.USR_Market_Value = PGM.*Synon_179_work_field * 1 'H';

ENDIF;

//?Compute Market Price (CWT)
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Market Value = CON.*ZERO
WRK.USR_Market_Value = *ZERO;

ENDIF;

//?Compute Standard Overage
CASE;

// IF WRK.ZERO is Zero
IF WRK.ZERO = *ZERO;

EXECUTE FUNCTION(CLC Convert Price      IF) TYPE(EXCINTFUN)                     AC1290254;
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(PAR.U_M_Base_Price);
PARAMETER(WRK.Price_based_on_U_M1_S);
PARAMETER(WRK.Price_based_on_U_M2_S);
PARAMETER(WRK.Price_based_on_U_M3_S);
PARAMETER(PAR.Standard_Overage_Underage);
{
 //?Execute internal function

 //?Initialize parameter values
 // PAR.Price based on U/M1 S = CON.*ZERO
 PAR.Price_based_on_U_M1_S = *ZERO;

 // PAR.Price based on U/M2 S = CON.*ZERO
 PAR.Price_based_on_U_M2_S = *ZERO;

 // PAR.Price based on U/M3 S = CON.*ZERO
 PAR.Price_based_on_U_M3_S = *ZERO;

 //?Process based on Unit of Measure entered
 CASE;

 // IF PAR.U/M - Primary EQ PAR.U/M - Pricing
 IF PAR.UOM_Primary = PAR.UOM_Pricing;

 // PAR.Price based on U/M1 S = PAR.Unit Price
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price;

 //?Process second U/M if entered
 CASE;

 // IF PAR.U/M - Second is Entered
 IF PAR.UOM_Second <> *BLANK;

 //?Convert based on operation code
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M2 S = PAR.Unit Price / PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price / PAR.Conversion_Factor_1 'H';

 ENDIF;

 //?Convert based on operation code
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 // PAR.Price based on U/M2 S = PAR.Unit Price * PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price * PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 //?Process third U/M if entered
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M3 S = PAR.Price based on U/M2 S / PAR.Conversion Factor 2
 PAR.Price_based_on_U_M3_S = PAR.Price_based_on_U_M2_S / PAR.Conversion_Factor_2 'H';

 ENDIF;

 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.Price based on U/M3 S = PAR.Price based on U/M2 S * PAR.Conversion Factor 2
 PAR.Price_based_on_U_M3_S = PAR.Price_based_on_U_M2_S * PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Process based on Unit of Measure entered
 // IF PAR.U/M - Second EQ PAR.U/M - Pricing
 IF PAR.UOM_Second = PAR.UOM_Pricing;

 // PAR.Price based on U/M2 S = PAR.Unit Price
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 // PAR.Price based on U/M1 S = PAR.Unit Price * PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price * PAR.Conversion_Factor_1 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M1 S = PAR.Unit Price / PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price / PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 //?Process third U/M if entered
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M3 S = PAR.Unit Price / PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price / PAR.Conversion_Factor_2 'H';

 ENDIF;

 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.Price based on U/M3 S = PAR.Unit Price * PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price * PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Process based on Unit of Measure entered
 // IF PAR.U/M - Third EQ PAR.U/M - Pricing
 IF PAR.UOM_Third = PAR.UOM_Pricing;

 // PAR.Price based on U/M3 S = PAR.Unit Price
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 // PAR.Price based on U/M2 S = PAR.Unit Price * PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price * PAR.Conversion_Factor_2 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M2 S = PAR.Unit Price / PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price / PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 // PAR.Price based on U/M1 S = PAR.Price based on U/M2 S * PAR.Conversion Factor 1
 PAR.Price_based_on_U_M1_S = PAR.Price_based_on_U_M2_S * PAR.Conversion_Factor_1 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M1 S = PAR.Price based on U/M2 S / PAR.Conversion Factor 1
 PAR.Price_based_on_U_M1_S = PAR.Price_based_on_U_M2_S / PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Compute Std Overage
CASE;

// IF PAR.Unit Weight EQ WRK.ZERO
IF PAR.Unit_Weight = WRK.ZERO;

// WRK.Standard Overage USR = CON.*ZERO
WRK.Standard_Overage_USR = *ZERO;

//?Compute Std Overage
// IF *OTHERWISE
IF *OTHERWISE;

// Synon (17,9) work field =       * Compute Standard Overage
PGM.*Synon_179_work_field = ( WRK.Price_based_on_U_M1_S / PAR.Unit_Weight 'H' ) * 100              +
'H';

// WRK.Standard Overage USR = PGM.*Synon (17,9) work field
WRK.Standard_Overage_USR = PGM.*Synon_179_work_field;

ENDIF;

// CUR.Standard Overage USR = WRK.Standard Overage USR
CUR.Standard_Overage_USR = WRK.Standard_Overage_USR;

ENDIF;

//?Compute Mkt + Ovr / CWT
// CUR.USR Amount Remaining = WRK.USR Market Value + WRK.Standard Overage USR
CUR.USR_Amount_Remaining = WRK.USR_Market_Value + WRK.Standard_Overage_USR;

// CUR.Variance amount 1     USR = CUR.USR Percent Work, 7.2 - CUR.USR Amount Remai
CUR.Variance_amount_1_USR = CUR.USR_Percent_Work_7_2 - CUR.USR_Amount_Remaining;

// Print Item Code totals format
PRINT Item Code totals format;

// NXT.USR Billing Dtl Net Dol 2 = NXT.USR Billing Dtl Net Dol 2 + CUR.USR Billing
NXT.USR_Billing_Dtl_Net_Dol_2 = NXT.USR_Billing_Dtl_Net_Dol_2                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_2;

// NXT.USR Weight Accumulated = NXT.USR Weight Accumulated + CUR.USR Weight Accumul
NXT.USR_Weight_Accumulated = NXT.USR_Weight_Accumulated + CUR.USR_Weight_Accumulated;

// NXT.USR Qty Billed = NXT.USR Qty Billed + CUR.USR Qty Billed
NXT.USR_Qty_Billed = NXT.USR_Qty_Billed + CUR.USR_Qty_Billed;

ENDIF;

CASE;

IF NEW Item_Structure_Class_Code;
// SUPPRESSED PRINT Item Structure Class Code totals format

// NXT.USR Billing Dtl Net Dol 2 = NXT.USR Billing Dtl Net Dol 2 + CUR.USR Billing
NXT.USR_Billing_Dtl_Net_Dol_2 = NXT.USR_Billing_Dtl_Net_Dol_2                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_2;

// NXT.USR Weight Accumulated = NXT.USR Weight Accumulated + CUR.USR Weight Accumul
NXT.USR_Weight_Accumulated = NXT.USR_Weight_Accumulated + CUR.USR_Weight_Accumulated;

// NXT.USR Qty Billed = NXT.USR Qty Billed + CUR.USR Qty Billed
NXT.USR_Qty_Billed = NXT.USR_Qty_Billed + CUR.USR_Qty_Billed;

ENDIF;

CASE;

IF NEW Item_Structure_Group_Code;
// SUPPRESSED PRINT Item Structure Group Code totals format

// NXT.USR Billing Dtl Net Dol 2 = NXT.USR Billing Dtl Net Dol 2 + CUR.USR Billing
NXT.USR_Billing_Dtl_Net_Dol_2 = NXT.USR_Billing_Dtl_Net_Dol_2                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_2;

// NXT.USR Weight Accumulated = NXT.USR Weight Accumulated + CUR.USR Weight Accumul
NXT.USR_Weight_Accumulated = NXT.USR_Weight_Accumulated + CUR.USR_Weight_Accumulated;

// NXT.USR Qty Billed = NXT.USR Qty Billed + CUR.USR Qty Billed
NXT.USR_Qty_Billed = NXT.USR_Qty_Billed + CUR.USR_Qty_Billed;

ENDIF;

CASE;

IF NEW Item_Structure_Type_Code;
// SUPPRESSED PRINT Item Structure Type Code totals format

// NXT.USR Billing Dtl Net Dol 2 = NXT.USR Billing Dtl Net Dol 2 + CUR.USR Billing
NXT.USR_Billing_Dtl_Net_Dol_2 = NXT.USR_Billing_Dtl_Net_Dol_2                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_2;

// NXT.USR Weight Accumulated = NXT.USR Weight Accumulated + CUR.USR Weight Accumul
NXT.USR_Weight_Accumulated = NXT.USR_Weight_Accumulated + CUR.USR_Weight_Accumulated;

// NXT.USR Qty Billed = NXT.USR Qty Billed + CUR.USR Qty Billed
NXT.USR_Qty_Billed = NXT.USR_Qty_Billed + CUR.USR_Qty_Billed;

ENDIF;

CASE;

IF NEW Company_Number;
// SUPPRESSED PRINT Company Number totals format

ENDIF;

