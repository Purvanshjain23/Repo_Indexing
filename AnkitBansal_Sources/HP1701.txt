      *****************  RPG PROGRAM HEADING  ***********************
      *
      * SYSTEM:      Hog Production System
      * PROGRAM:     HP1701
      * TITLE:       Maintain Budget Items for a Template
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     02/03/04
      *
      * Function: This program uses a subfile to maintain Budget Items for a Budget Template.
      *           The program toggles between create mode and revise mode. Also, Debra Lewis
      *
      *           Also, Debra Lewis wanted the users to be able to change positioners/
      *           selectors without losing any data keyed on the screen. So, we basically
      *           execute the edit/update logic before every action. This makes the screen
      *           execute more slowly--but no data is lost.
      *
      *           The program is called from HP4700-Work with Budget Templates.
      *
      *
      *           Restrictors:
      *                Budget template code
      *
      *           Positioners:
      *                None
      *
      *           Selectors:
      *                Budget item
      *                Level code
      *                Item type code
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 10/13/04  LeAnne Fedor
      *           Recompile only. Cost Per Unit Amount was changed from
      *           9,2 to 9,4.
      *
      * 02/16/05  LeAnne Fedor
      *           Added a new subfile option:
      *           8=Update/add the Item to all Active Farm Budgets linked to Template
      /eject
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhpd1701   cf   e             workstn sfile(hp1701s1:hdrrn1)
     F                                     infds(iofeed)
      *
      *
     Fhsp180    if   e           k disk
      *  Item types
      *
      *
     Fhsl181c   if   e           k disk
      *  Items  (logical selects only active items that have a Budget Flag = YES)
      *
      *
     Fhsl181d   if   e           k disk    rename(imrec:imrecd)
      *  Items
      *
      *
     Fhsp185    if   e           k disk
      *  Budget template header
      *
      *
     Fhsp186    uf a e           k disk    infds(dbfeed)
      *  Budget template detail
      *
      *
     Fhsp189    uf a e           k disk
      *  Farm budget detail
      *
      *
     Fhsl188a   if   e           k disk
      *  Farm budget header (omits closed)
      *
      /eject
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D create          c                   'CREATE'
     D revise          c                   'REVISE'
     D delete          c                   'DELETE'
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
     D update          c                   'UPDATE'
      *
      *
     D upper           c                   'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
     D lower           c                   'abcdefghijklmnopqrstuvwxyz'
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
     D bgit            s             25    dim(500)
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
     D maxrrn          s              4  0
     D reset           s              1    inz('N')
     D norecs          s              1    inz('N')
     D count           s              2  0
     D wkflow          s                   like(idflow)
     D rtncd           s              2
     D svrrn1          s                   like(hdrrn1)
      *
      *
      *
      * Workfields required for subfile paging--see initialization
      * subroutine.
      *
     D wkplin          s              2  0
     D wkrlin          s              2  0
      *
      *
      * Control fields
      *
     D procfl          s              1
     D entryfl         s              1
      *
      *
      * Array indexes
      *
     D x               s              3  0
     D y               s              3  0
      *
      *
      * Save fields for restrictors, positioners and selectors
      *
     D svbgit          s                   like(c1bgit)
     D svittycd        s                   like(c1ittycd)
     D svdesc          s                   like(c1desc)
      *
      *
      * Workfields
      *
     D wkvol           s                   like(imvol)
      *
     D wkdesc          s                   like(c1bgit)
     D wkbgit          s                   like(c1bgit)
     D nbrchar         s              2  0
      *
     D wkname          s                   like(c1desc)
     D wkbgitds        s                   like(c1desc)
     D length          s              2  0
      *
      * Parm fields
      *
     D xxaist          s              1
      *
     D xxittycd        s                   like(c1ittycd)
     D xxittyds        s             30
      *
     D xxbgit          s                   like(jdbgit)
     D xxbgqt          s                   like(jdbgqt)
     D xxfbam          s                   like(jdfbam)
     D xxcpuam         s                   like(jdcpuam)
     D xxvol           s                   like(jdvol)
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      * Standard subfile option conversion
      *---------------------------------------------------------------
     D                 ds                  inz
     D d1opt                          2
     D   wkopt1                       1    overlay(d1opt)
     D   wkopt2                       1    overlay(d1opt:2)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /eject
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /eject
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * Verify that the Budget Template the user selected still exists.
      *
     C     c1btcd        chain     hsp185                             90
     C                   if        *in90 = *on                                  If gone
     C                   move      yes           norecs
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS04704'     mgid(e)
     C                   clear                   mgw
     C                   movea     c1btcd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If gone
      *
      *  Clear/fill the subfile
      *
     C                   exsr      $clr1
     C                   exsr      $frsh1
      *
      *
      * Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Reset indicators in the Control Record
      *
     C                   exsr      $c1ind
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to crt
      *
     C                   write     hp1701k1
     C                   write     hp1701ec
     C                   exfmt     hp1701c1
      *
      *
      * Set the 'RESET' flag to NO. This flag is used to determine whether to
      * reposition the user to a particular place in the subfile (reset=yes)
      * or to just place the user at the beginning of the subfile (reset=no).
      *
     C                   move      no            reset
      *
      * Save the value of the lowest subfile rrn on the screen for
      * later repositioning of the subfile
      *
     C                   z-add     idflow        wkflow
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   move      '03'          rtncd
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $edit1
     C                   if        error <> 0
     C                   movel     scrn1         routne
     C                   else
     C                   exsr      $f4s1
      *
      * If the prompt was in the control record, see if you need to refill
      * the subfile to match the new selectors; otherwise, just redisplay
      * the screen.
      *
     C                   if        fld = 'C1BGIT' or
     C                             fld = 'C1ITTYCD'
     C                   exsr      $chksv
     C                   else
     C                   movel     scrn1         routne
     C                   endif
     C                   endif
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   if        mode = revise
     C                   move      yes           reset
     C                   endif
     C                   movel     set1          routne
      *
      *
     C                   when      *in10 = *on                                  F10-toggle
     C                   exsr      $edit1
     C                   if        error <> 0
     C                   movel     scrn1         routne
     C                   else
     C                   if        mode = create
     C                   movel     revise        mode
     C                   movel     revise        c1mode
     C                   else
     C                   movel     create        mode
     C                   movel     create        c1mode
     C                   endif
     C                   endif
      *
      *
      * User has changed a selector in the control record.
      *
     C                   when      svbgit <> c1bgit or                          Selectors
     C                             svittycd <> c1ittycd or
     C                             svdesc <> c1desc
     C                   exsr      $edit1
     C                   if        error <> 0
     C                   movel     scrn1         routne
     C                   else
     C                   exsr      $chksv
     C                   endif
      *
     C                   when      *in25 = *on                                  F25-rollup
     C                   exsr      $load1
     C                   movel     scrn1         routne
     C                   other
      *
      * User pressed 'ENTER'
      *
     C                   if        mode = revise and hdrrn1 = 0                 If nothing
     C                   else
     C                   exsr      $edit1
     C                   endif                                                  If nothing
      *
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Save the control record selectors
      *----------------------------------------------------------------
      *
     C     $chksv        begsr
      *
     C                   eval      reset = no
     C                   eval      routne = set1
      *
      *
      * Prepare to scan on Budget Item
      *  1) trim leading/trailing blanks
      *  2) find first non-blank position from right
      *
     C                   eval      c1bgit = %trim(c1bgit)
     C     ' '           checkr    c1bgit        nbrchar
     C                   movel     c1bgit        svbgit
      *
      *
      * Prepare to scan on Budget Item Description
      *  1) trim leading/trailing blanks
      *  2) find first non-blank position from right
      *
     C                   eval      c1desc = %trim(c1desc)
     C     ' '           checkr    c1desc        length
     C                   movel     c1desc        svdesc
      *
      * Trim leading blank on Item Type
      *
     C                   eval      c1ittycd = %triml(c1ittycd)
     C                   move      c1ittycd      svittycd
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Edit input fields for screen 1
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * Set off any prompt indicators that may still be on
      *
     C                   exsr      $f4off
     C                   move      no            entryfl
      *
      * In revise mode, edit subfile options.
      *
     C                   select
     C                   when      mode = revise
     C                   exsr      $edop1
     C                   endsl
      *
      * If there are no errors in the control record or subfile option,
      * edit the subfile records.
      *
     C                   if        error = 0
     C                   exsr      $eds1
     C                   endif
      *
      * If there are no errors, process for updates.
      *
     C                   if        error = 0                                    If no error
     C                   exsr      $proc1
     C                   movel     set1          routne
     C                   else
     C                   movel     scrn1         routne
     C                   endif                                                  If no error
      *
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Clear subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $clr1         begsr
      *
     C                   z-add     0             svrrn1
      *
     C                   clear                   hp1701s1
     C                   seton                                        83        sflclr
     C                   write     hp1701c1
     C                   setoff                                       818283
      *                                                    81=sfldsp
      *                                                    82=sflend
      *                                                    83=sflclr
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Refresh/fill the subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $frsh1        begsr
      *
      * Set indicators to control the display
      *
     C                   select
     C                   when      mode = create
     C                   setoff                                       60
     C                   seton                                        61
     C                   move      *blank        c1bgit
     C                   move      *blank        c1desc
     C                   move      *blank        c1ittycd
     C                   move      *blank        svbgit
     C                   move      *blank        svdesc
     C                   move      *blank        svittycd
     C                   other
      *
     C                   setoff                                       61
     C                   seton                                        60
     C                   endsl
      *
      *
      * Position using the restrictor Budget Template
      *
     C     c1btcd        setll     hsp186
      *
      *
      * The field 'reset' is a flag field to indicate whether you are
      * attempting to reposition the user close to where he was in the
      * subfile.
      * The lowest subfile RRN on the screen from the DSPF feedback
      * area (IDFLOW) was retrieved earlier and put in WKFLOW.
      * add to WKFLOW the number of lines on your subfile page or the
      * number less 1 to determine a subfile RRN to reposition to.
      *
     C                   if        reset = yes
     C                   eval      maxrrn = wkflow + wkrlin
     C                   else
      *
      * Don't try to reposition the user, just start the subfile over
      *
     C                   eval      maxrrn = wkplin
     C                   endif
      *
      *
      * Load the subfile until you have the required number of records.
      * The number will depend on whether uou are repositioning the
      * subfile or not. Stop if you get to the end of the subfile.
      *
     C                   dou       svrrn1 >= maxrrn or *in82 = *on
     C                   exsr      $load1
     C                   enddo
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------------------------------
      * Load the subfile for screen 1
      *---------------------------------------------------------------------------------------
      *
     C     $load1        begsr
      *
     C                   z-add     svrrn1        hdrrn1
      *
      * Set the count of records on the subfile page to zero.
      *
     C                   z-add     0             count
      *
      * Fill the subfile until the end of the database file or
      * you have filled all the lines on the subfile page.
      *
     C                   setoff                                       82
     C                   dou       *in82 = *on or count >= wkplin               Do fill
      *
      * Clear subfile fields
      *
     C                   move      *blank        hdpfl
     C                   move      *blank        hdndfl
     C                   move      *blank        d1bgit
     C                   move      *blank        d1desc
     C                   move      *blank        d1ittycd
     C                   z-add     0             d1btqt
     C                   move      *blank        d1uom
     C                   move      *blank        d1uow
      *
      * In create mode, write a blank subfile record
      *
     C                   select
     C                   when      mode = create
     C                   add       1             count
     C                   add       1             hdrrn1
     C                   write     hp1701s1
     C                   seton                                        81
     C                   z-add     hdrrn1        hdpag1
      *
      * Im Revise mode, populate the subfile with records that match
      * the user's selectors.
      *
     C                   when      mode = revise
     C     c1btcd        reade     hsp186                                 82
     C                   if        *in82 = *off                                  If found
      *
     C                   move      yes           procfl
      *
      * Budget item
     C                   if        c1bgit <> *blank
     C     lower:upper   xlate     c1bgit        wkdesc
     C     lower:upper   xlate     tdbgit        wkbgit
     C     wkdesc:nbrcharscan      wkbgit                                 92
     C                   if        *in92 = *off
     C                   move      no            procfl
     C                   endif
     C                   endif
      *
      * Retrieve any active Item record for this Budget Item value to
      * get comparison values.
      *
     C     tdbgit        chain     hsl181c                            92
     C                   if        *in92 = *on                                  If no hit
     C                   move      no            procfl
     C                   else
      *
     C                   move      imittycd      d1ittycd
     C                   move      imuom         d1uom
     C                   move      imuow         d1uow
      *
      * Populate 'description' for the Budget Item
      *
     C                   if        imitcd = imbgit
     C                   eval      d1desc = imitds
     C                   else
     C                   eval      d1desc = imbgit
     C                   endif
      *
      * Budget item description
      *
     C                   if        c1desc <> *blank
     C     lower:upper   xlate     c1desc        wkname
     C     lower:upper   xlate     d1desc        wkbgitds
     C     wkname:length scan      wkbgitds                               92
     C                   if        *in92 = *off
     C                   move      no            procfl
     C                   endif
     C                   endif
      *
      * Item type
     C                   if        c1ittycd <> *blank and
     C                             c1ittycd <> imittycd
     C                   move      no            procfl
     C                   endif
     C                   endif                                                  If no hit
      *
     C                   if        procfl = yes                                 If process
     C                   move      tdbgit        d1bgit
     C                   z-add     tdbtqt        d1btqt
      *
     C                   exsr      $setoff
     C                   exsr      $sfind
      *
     C                   add       1             count
     C                   add       1             hdrrn1
     C                   write     hp1701s1
     C                   seton                                        81
     C                   z-add     hdrrn1        hdpag1
     C                   endif                                                  If process
     C                   endif                                                  If found
     C                   endsl
      *
     C                   enddo                                                  Do fill loop
      *
      * If no records were written to the subfile, then issue
      * the standard message 'No data to Display'.
      *
     C                   if        hdrrn1 = 0 and error < maxmsg                If no recs
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09002'
     C                   endif                                                  If no recs
     C                   z-add     hdrrn1        svrrn1
      *
     C                   endsr
      /eject
      *--------------------------------------------------------------------------------------
      * Read changed records in the subfile and edit for valid subfile options on Screen 1
      *--------------------------------------------------------------------------------------
      *
     C     $edop1        begsr
      *
      * Read all the changed subfile records editing for valid options.
      *
     C                   dou       *in80 = *on                                  Do readc
     C                   readc     hp1701s1                               80
     C                   if        *in80 = *off and                             If rec read
     C                             hdpfl <> yes and
     C                             hdndfl <> yes
      *
      * Set off error indicators for subfile option
      *
     C                   seton                                        85
     C                   exsr      $setoff
      *
      * Convert option user entered to standard format. For example,
      * a ' 1', '01', and '1 ' must be standardized to ' 1'.
      *
     C                   if        wkopt2 = *blank                              If 2 = blank
     C                   eval      wkopt2 = wkopt1
     C                   eval      wkopt1 = *blank
     C                   endif                                                  If 2 = blank
      *
     C                   if        wkopt1 = *zero                               If 1 is zero
     C                   eval      wkopt1 = *blank
     C                   endif                                                  If 1 is zero
      *
     C                   if        d1opt <> *blank
     C                   move      yes           entryfl
     C                   endif
      *
      * Test for valid subfile option entry on all changed records.
      *
     C                   select
     C                   when      d1opt <> ' 4' and
     C                             d1opt <> ' 8' and
     C                             d1opt <> '  '
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09006'
     C                   exsr      $err1
     C                   endif
      *
     C                   when      d1opt = ' 4'
      *                  (I don't know what/if there need to be edits here.)
     C                   endsl
      *
      * Checks completed.
     C                   exsr      $sfind
     C                   update    hp1701s1
      *
     C                   endif                                                  If rec read
     C                   enddo                                                  Do readc
      * Reset MDT
     C                   setoff                                       85
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------------------------------
      * Edit changed subfile records on Screen 1
      *----------------------------------------------------------------------------------------
      *
     C     $eds1         begsr
      *
      * Initialize Budget Item array and indexes
      *
     C                   move      *blank        bgit
     C                   z-add     0             y
     C                   z-add     0             x
      *
      * Read all the changed subfile records processing the subfile selection.
      *
     C                   dou       *in80 = *on                                  Do process
     C                   readc     hp1701s1                               80
     C                   if        *in80 = *off                                 If rec read
      *
     C                   if        hdpfl <> yes and                             If not protected
     C                             hdndfl <> yes
      *
      * Set off error indicators
      *
     C                   exsr      $setoff
      *
      * You will not edit records to be deleted; so, set the modified
      * data tag on here so that they will be processed when the user
      * accepts his changes.
      *
     C                   if        d1opt = ' 4'
     C                   seton                                        85
     C                   else
     C                   setoff                                       85
     C                   endif
      *
      * Perform edit subroutine
      *
     C                   if        (mode = revise and d1opt <> ' 4') or         If edit
     C                              mode = create
      *
      * Clear output only fields
      *
     C                   if        mode = create and
     C                             d1bgit = *blank and d1btqt = 0
     C                   move      *blank        d1ittycd
     C                   move      *blank        d1uom
     C                   move      *blank        d1uow
     C                   endif
      * Set on MDT
     C                   seton                                        85
     C                   move      *blank        hdpfl
     C                   move      *blank        hdndfl
      *
      * When Creating:
      *  1) Validate budget item
      *  2) Validate quantity
      *
     C                   if        mode = create and
     C                             (d1bgit <> *blank or d1btqt <> 0)
     C                   move      yes           entryfl
     C                   exsr      $bgit
     C                   exsr      $btqt
     C                   endif
      *
      * When Revising:
      *   1) quantity
     C                   if        mode = revise
     C                   move      yes           entryfl
     C                   exsr      $btqt
     C                   endif
      *
     C                   endif                                                  If edit
     C                   endif                                                  If not protected
      *
     C                   exsr      $sfind
     C                   update    hp1701s1
      *
      * Set off the error indicators
      *
     C                   exsr      $setoff
     C                   endif                                                  If rec read
     C                   enddo                                                  Do process
      * Set MDT
     C                   setoff                                       85
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------------------------------
      * Process subfile records from Screen 1
      *----------------------------------------------------------------------------------------
      *
     C     $proc1        begsr
      *
      * Read/process all changed subfile records.
      *
     C                   dou       *in80 = *on                                  Do process
     C                   readc     hp1701s1                               80
     C                   if        *in80 = *off                                 If rec read
      *
     C                   if        hdpfl <> yes and
     C                             hdndfl <> yes
     C                   exsr      $update
     C                   endif
      *
     C                   if        d1opt = ' 8'
     C                   exsr      $opt8
     C                   eval      reset = yes
     C                   endif
      *
     C                   setoff                                       85
     C                   update    hp1701s1
      *
     C                   endif                                                  If rec read
     C                   enddo                                                  Do process
      *
     C                   if        mode = revise
     C                   move      yes           reset
     C                   else
     C                   move      no            reset
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------------------
      * Logic for Option 8=Update/Add all Active Farm Budgets for Template/Item
      *---------------------------------------------------------------------------
      *
     C     $opt8         begsr
      *
      * Calculate the Farm Budget Amount for this Budget Item.
      *
     C                   call      'HP8701'
     C                   parm      d1bgit        xxbgit
     C                   parm      d1btqt        xxbgqt
     C                   parm      0             xxvol
     C                   parm      0             xxcpuam
     C                   parm      0             xxfbam
      *
      * Read all Active Farm Budgets for this Template.
      *
     C     c1btcd        setll     hsl188a
      *
     C                   dou       *in93 = *on                                  Do loop
     C     c1btcd        reade     hsl188a                                93
     C                   if        *in93 = *off and jhfbscd = 'A'               If not EOF
      *
      * Update/write a Farm Budget Detail record for this Budget Item.
      *
     C     key02         chain     hsp189                             92
     C                   if        *in92 = *off                                 If updating
     C                   z-add     d1btqt        jdbgqt
     C                   z-add     xxvol         jdvol
     C                   z-add     xxcpuam       jdcpuam
     C                   z-add     xxfbam        jdfbam
     C                   update    jdrec
     C                   else
      *
     C                   z-add     jhfbsn        jdfbsn
     C                   z-add     jhfscd        jdfscd
     C                   move      c1btcd        jdbtcd
     C                   move      d1bgit        jdbgit
     C                   z-add     d1btqt        jdbgqt
     C                   z-add     xxvol         jdvol
     C                   z-add     xxcpuam       jdcpuam
     C                   z-add     xxfbam        jdfbam
     C                   write     jdrec
     C                   endif                                                  If updating
      *
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do loop
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Update Database
      *----------------------------------------------------------------
      *
     C     $update       begsr
      *
     C                   select
      * Create
     C                   when      mode = create and d1bgit <> *blank
     C                   move      c1btcd        tdbtcd
     C                   move      d1bgit        tdbgit
     C                   z-add     d1btqt        tdbtqt
     C                   movel     yes           hdpfl
     C                   write     tdrec
      * Revise
     C                   when      mode = revise
     C     key01         chain     hsp186                             92
     C                   if        *in92 = *off                                 If found
      *
     C                   if        d1opt = ' 4'                                 If deleting
     C                   delete    tdrec
     C                   move      *blank        d1opt
     C                   move      yes           hdpfl
     C                   move      yes           hdndfl
     C                   else
     C                   z-add     d1btqt        tdbtqt
     C                   update    tdrec
     C                   endif                                                  If deleting
     C                   endif                                                  If found
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Set off subfile indicators
      *----------------------------------------------------------------
      *
     C     $setoff       begsr
      *
     C                   setoff                                       303334
     C                   setoff                                       505354
     C                   setoff                                       6364
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate budget item
      *---------------------------------------------------------------
      *
     C     $bgit         begsr
      *
     C                   move      *blank        d1desc
     C                   move      *blank        d1ittycd
     C                   move      *blank        d1uom
     C                   move      *blank        d1uow
      *
      * Validate budget item:
      *   1) required
      *   2) budget item must exist in the Item Master
      *   3) the Item record must be 'active'
      *   4) budget item must have an 'active' Item Type
      *   5) budget item cannot already exist in the Budget Template
      *      detail file
      *   6) budget item can only be in subfile 1 time
      *
     C                   select
     C                   when      d1bgit = *blank
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS04747'     mgid(e)
     C                   exsr      $err1
     C                   endif
     C                   other
      *
      * Budget item must be on an Active record in the Item Master that
      * has a budget flag value of YES
      *
     C     d1bgit        chain     hsl181c                            92
     C                   if        *in92 = *off                                 If item hit
     C                   move      imittycd      d1ittycd
     C                   move      imuom         d1uom
     C                   move      imuow         d1uow
      *
      * Populate 'description'
      *
     C                   if        imitcd = imbgit
     C                   eval      d1desc = imitds
     C                   else
     C                   eval      d1desc = imbgit
     C                   endif
      *
      * The Item Type associated with this Budget Item must be Active
      *
     C     imittycd      chain     hsp180                             92
     C                   select
     C                   when      *in92 = *on
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS04740'     mgid(e)
     C                   exsr      $err1
     C                   endif
      *
     C                   when      tmaist = 'I'
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS04741'     mgid(e)
     C                   exsr      $err1
     C                   endif
     C                   endsl
      *
      * Budget Item does not exist on an Active record in the Items file.
      *
     C                   else
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS04708'     mgid(e)
     C                   clear                   mgw
     C                   movea     d1bgit        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If item hit
      *
      * Combination of budget item/template cannot already exist in the
      * Budget Template Detail file.
      *
     C     key01         chain(n)  hsp186                             92
     C                   if        *in92 = *off                                 If already
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS04710'     mgid(e)
     C                   clear                   mgw
     C                   movea     c1btcd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If already
      *
      * Budget Item cannot be in subfile more than once.
      *
     C                   z-add     1             x
     C     d1bgit        lookup    bgit(x)                                92
     C                   if        *in92 = *on                                  If twice
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS04711'     mgid(e)
     C                   clear                   mgw
     C                   movea     d1bgit        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If twice
     C                   endsl
      *
      * If all OK, then add Budget Item to the array used in determining
      * if an item is in the subfile more than 1 time.
      *
     C                   if        *in33 = *off                                 If OK
     C                   add       1             y
     C                   movel     d1bgit        bgit(y)
     C                   endif                                                  If OK
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate quantity
      *---------------------------------------------------------------
      *
     C     $btqt         begsr
      *
     C                   select
     C                   when      d1btqt = 0
      *
     C                   when      d1btqt < 0
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   exsr      $err1
     C                   endif
      *
      * If this valid Budget Item has a UOW, then go find the Item in the
      * Budget Item group that has the least Volume value. The Budgeted Quantity
      * must be equal to or greater than this retrieved volume.
      *
     C                   when      d1uow <> *blank and *in33 = *off
     C                   exsr      $findvol
     C                   if        d1btqt < wkvol                               If not enough
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS04717'
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If not enough
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Find the Item with the lowest volume for this Budget Item
      *---------------------------------------------------------------
      *
     C     $findvol      begsr
      *
     C                   z-add     0             wkvol
     C     d1bgit        setll     hsl181d
      *
     C                   dou       *in91 = *on                                  Do loop
     C     d1bgit        reade     hsl181d                                91
     C                   if        *in91 = *off and                             If not EOF
     C                             imaist = 'A' and
     C                             (wkvol = 0 or imvol < wkvol)
     C                   z-add     imvol         wkvol
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do loop
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Prompts on Screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      * Set off prompt indicators in all subfile records
      *
     C                   exsr      $f4off
      *
      *---------------------------------------------------------------
      * Control record prompts
      *---------------------------------------------------------------
      *
      * Budget item
     C                   select
     C                   when      fld = 'C1BGIT'
     C                   call      'HP5038'
     C                   parm      *blank        xxbgit
     C                   seton                                        50
     C                   if        xxbgit <> *blank
     C                   move      xxbgit        c1bgit
     C                   endif
      *
      * Item type
     C                   when      fld = 'C1ITTYCD'
     C                   call      'HP5036'
     C                   parm      'A'           xxaist
     C                   parm      *blank        xxittycd
     C                   parm      *blank        xxittyds
     C                   seton                                        54
     C                   if        xxittycd <> *blank
     C                   movel     xxittycd      c1ittycd
     C                   endif
      *
      *------------------------------------------------------------------------------------
      * Subfile record prompts
      *------------------------------------------------------------------------------------
      *
      * Budget item
      *
     C                   when      fld = 'D1BGIT'
     C                   exsr      $rrn1
     C                   if        *in97 = *off                                 If hit
     C                   if        hdpfl = yes                                  If protected
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09011'     mgid(e)
     C                   endif
     C                   else
      *
     C                   call      'HP5038'
     C                   parm      *blank        xxbgit
     C                   seton                                        53
     C                   if        xxbgit <> *blank
     C                   move      xxbgit        d1bgit
     C                   endif
     C                   endif                                                  If protected
      *
     C                   exsr      $setoff
     C                   exsr      $sfind
     C                   seton                                        8553
     C                   update    hp1701s1
     C                   setoff                                       8553
     C                   exsr      $synchrrn
     C                   endif                                                  If hit
     C                   other
      *
      * F4 not valid for this field. So, issue message and reset the
      * subfile relative record number.
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09011'     mgid(e)
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------------
      * Synch up the relative record number after an F4 prompt in the subfile
      *----------------------------------------------------------------------
      *
      * Reset the subfile relative record number to what it was before
      * the user took F4 (It will be out-of-synch if the user has
      * selected a record-- thus causing the subfile record to be
      * retrieved and updated.)  But, set the page of the subfile to
      * be displayed to the page on which the user took F4.
      *
     C     $synchrrn     begsr
     C                   z-add     svrrn1        hdrrn1
     C                   z-add     hdrr1         hdpag1
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Set off the prompt indicators in the subfile records
      *----------------------------------------------------------------
      *
     C     $f4off        begsr
      *
     C                   setoff                                       80
      *
     C                   dou       *in80 = *on
     C                   readc     hp1701s1                               80
     C                   if        *in80 = *off
     C                   seton                                        85
     C                   exsr      $setoff
     C                   exsr      $sfind
     C                   update    hp1701s1
     C                   endif
     C                   enddo
      * Set MDT
     C                   setoff                                       85
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Reset indicators in the control record
      *----------------------------------------------------------------
      *
     C     $c1ind        begsr
      *
      * If the Budget Template was deleted out from under the user, then
      * set on the indicator to limit function keys and input fields.
      *
     C                   if        norecs = yes
     C                   seton                                        90
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Reset indicators in the subfile records
      *----------------------------------------------------------------
      *
     C     $sfind        begsr
      *
      * If the template was deleted out from under the user, then set
      * indicator 90 back on to control available function keys and input
      * fields.
      *
     C                   if        norecs = yes
     C                   seton                                        90
     C                   endif
      *
      *
      * If you are protecting subfile fields.
      *
     C                   if        hdpfl = yes
     C                   seton                                        64
     C                   endif
      *
      *
      * If subfile fields should be non-display
      *
     C                   if        hdndfl = yes
     C                   seton                                        6364
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------------------
      * Set the subfile to redisplay at the first page that has errors for screen 1
      *----------------------------------------------------------------------------
      *
     C     $err1         begsr
      *
     C                   if        error = 1
     C                   eval      hdpag1 = hdrrn1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------------------
      * Seton last record and end job
      *----------------------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        lr
     C                   endsr
      *
      *----------------------------------------------------------------------------
      * Write error messages
      *----------------------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------------------
      * clear messages
      *----------------------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------------------------------
      * Find/retrieve the subfile record to update when returning from a select program
      * on screen 1.
      *---------------------------------------------------------------------------------------
      *
      * HDRR1 is the hidden field associated with the keyword SFLCSRRRN on the control
      * record in the DSPF.
      * HDRRN1 is the value associated with the keyword KSFILE in the F-specs for the
      * workstation.
      *
     C     $rrn1         begsr
      *
     C                   setoff                                       97
      *
     C                   if        hdrr1 <> 0
     C                   z-add     hdrr1         hdrrn1
     C     hdrrn1        chain     hp1701s1                           97
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Determine the 'Mode'---either Create or Revise
      *----------------------------------------------------------------
      *
     C     $mode         begsr
      *
     C     c1btcd        chain(n)  hsp186                             92
     C                   if        *in92 = *off
     C                   movel     revise        mode
     C                   movel     revise        c1mode
     C                   else
     C                   movel     create        mode
     C                   movel     create        c1mode
     C                   endif
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
     C                   parm                    c1btcd
     C                   parm                    c1btds
     C                   parm                    rtncd
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    c1btcd
     C                   kfld                    d1bgit
      *
     C     key02         klist
     C                   kfld                    jhfbsn
     C                   kfld                    d1bgit
      *
      * Determine the initial 'mode'---create or revise
      *
     C                   exsr      $mode
      *
      * To support F5-Refresh, logic requires the number of lines on
      * the subfile page and also the number of lines less 1.  By
      * setting these values up as constant work fields, the processing
      * logic can be standardized between programs.
      *
     C                   z-add     5             wkplin
     C     wkplin        sub       1             wkrlin
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /eject
