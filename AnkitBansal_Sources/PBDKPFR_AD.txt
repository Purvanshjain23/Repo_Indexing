// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBDKPFR
// ?Date: 14.08.2025 Time: 12:03:25
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification History
//?slm 08/2012 installed
//?New Print report was greated on the E02098 enhancement.
//?slm 08/28/2012 going to write records to
//?PS Prod Item Sched Summary, and also to the PS Prod Item Sched Detail
//?then these files will be used later for additional reporting
//?to the Carlisle and/or the new Web application
//?only write these records if the production run sequence is
//?greater the zero
//?E3796 JJH 02/11/15 - Add OPS Requested Ship Date to WF OrderProd
//? Schedule - Recompiled with no logic changes.
//?E3796 JJH 02/25/15 - Use Requested Ship Date instead of Schedule
//? Ship Date.
//?- Change I Parm from Scheduled Ship Date to Requested Ship Date
//?- Changed all field values from Sheduled Ship Date to Requested
//?  to Requested Ship Date
//?- Use Company Value "PRDPRTDDT" to set to Y or N to print the
//?  Depature Date/Time.
EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.Count USR = CON.*ZERO
WRK.Count_USR = *ZERO;

// WRK.Count 2 USR = CON.*ZERO
WRK.Count_2_USR = *ZERO;

// WRK.Count USR 3 = CON.*ZERO
WRK.Count_USR_3 = *ZERO;

// WRK.Print Date            USR = CND.Yes
WRK.Print_Date_USR = 'Y';

// WRK.Page Control Usr = CND.yes
WRK.Page_Control_Usr = 'Y';

//?E3796 JJH 02/25/15 - Use Requested Ship Date
CASE;

// IF PAR.Requested Ship Date EQ PAR.Next Production Day Usr
IF PAR.Requested_Ship_Date = PAR.Next_Production_Day_Usr;

//?User has selected date in the future
// WRK.Print Date            USR = CND.No
WRK.Print_Date_USR = 'N';

//?Will only be printing the summary no need for page control
// WRK.Page Control Usr = CND.no
WRK.Page_Control_Usr = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

// WRK.PSP Report ID = JOB.*PROGRAM
WRK.PSP_Report_ID = JOB.*PROGRAM;

// WRK.PSP Report Date = JOB.*Job date
WRK.PSP_Report_Date = JOB.*Job_date;

// WRK.PSP Report Time = JOB.*Job time
WRK.PSP_Report_Time = JOB.*Job_time;

// WRK.PSP Prod Run Sequence = PAR.PSP Prod Run Sequence
WRK.PSP_Prod_Run_Sequence = PAR.PSP_Prod_Run_Sequence;

//?slm 09/09/2013 E2746 PPS QTY1, QTY2, QTY3 wk end
//?E3796 JJH 02/25/15 - Use Requested Ship Date
// Call program Clc PFS DAY0,1,2etc   XF.
CALL PROGRAM(Clc PFS DAY0,1,2etc   XF) ('PBJYXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Requested_Ship_Date);
PARAMETER(WRK.Date_0_RGF);
PARAMETER(WRK.Date_1_RGF);
PARAMETER(WRK.Date_2_RGF);
PARAMETER(WRK.Date_3_RGF);
PARAMETER(WRK.Date_3_RGT);

//?E3796 JJH 02/25/15 - Get Company Value "PRDPRTDDT"
// Call program Rtv Alpha Value       XF.
CALL PROGRAM(Rtv Alpha Value       XF) ('POMTXFR');
PARAMETER(PAR.Company_Number);
PARAMETER('PRDPRTDDT');
PARAMETER(LCL.System_Value_Alpha);

CASE;

// IF LCL.System Value Alpha is Equal to Y
IF LCL.System_Value_Alpha = 'Y';

// LCL.Print Dead Depart Dt/Tm = CND.Yes
LCL.Print_Dead_Depart_Dt_Tm = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Print Dead Depart Dt/Tm = CND.No
LCL.Print_Dead_Depart_Dt_Tm = 'N';

ENDIF;

//?USER: Record selection processing

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

CASE;

// IF DB1.OPS Print on Detail Sch is yes
IF DB1.OPS_Print_on_Detail_Sched = 'Y';

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// WRK.Count Records        USR = WRK.Count Records        USR + CON.1
WRK.Count_Records_USR = WRK.Count_Records_USR + 1;

// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

//?USER: Process top of page

//?Top of page should be  6 print lines
// Execute function Set On Indicator 01    US.
EXECUTE FUNCTION(Set On Indicator 01    US) TYPE(EXCUSRSRC) ('PPCLUFR');
{
 C                     SETON                     01    SETON INDICATOR
}


// WRK.Count Records        USR = CON.6 * CON.1 *
WRK.Count_Records_USR = 6 * 1;

// TOP.Text Usr 50 = CONCAT(PAR.Description,CON.Primal Grp Rpt -,CON.2)
TOP_Text_Usr_50 = PAR.Description + 'Primal Grp Rpt -' (2);

// TOP.Text Usr 50 = CONCAT(TOP.Text Usr 50,PAR.Item Category Code 6,CON.1)
TOP_Text_Usr_50 = TOP_Text_Usr_50 + PAR.Item_Primal_Sched_Report (1);

// TOP.PSP Prod Run Sequence = PAR.PSP Prod Run Sequence
TOP_PSP_Prod_Run_Sequence = PAR.PSP_Prod_Run_Sequence;

// TOP.Interface to Info USR = CON.*BLANK
TOP_Interface_to_Info_USR = *BLANK;

// TOP.Send Base Line or Not Usr = CON.*BLANK
TOP_Send_Base_Line_or_Not_Usr = *BLANK;

CASE;

// IF TOP.PSP Prod Run Sequence is Equal to zeros
IF TOP_PSP_Prod_Run_Sequence = *ZERO;

// TOP.Interface to Info USR = CON.Not Sent to Carlisle
TOP_Interface_to_Info_USR = 'Not Sent to Carlisle';

// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Interface to Info USR = CON.Send to Carlisle
TOP_Interface_to_Info_USR = 'Send to Carlisle';

ENDIF;

CASE;

// IF PAR.Base or Not Based Usr is Yes
IF PAR.Base_or_Not_Based_Usr = 'Y';

// TOP.Send Base Line or Not Usr = CON.*** BASE LINE ***
TOP_Send_Base_Line_or_Not_Usr = '*** BASE LINE ***';

// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?At this time user source is being used due to need the print object
//?object of the production to print regardless of records in
//?the work file
// Execute function Prt Prd Schedule PrmOrdUS.
EXECUTE FUNCTION(Prt Prd Schedule PrmOrdUS) TYPE(EXCUSRSRC) ('PBEFUFR');
{
 * Embedded PRTOBJ : Prt Prd Schedule      PO
 * Excute print object in the null portion of the action diagram
 * using user source.  if this subr name is changed then this function
 * will also have to be changed
 C                     EXSR UBSUBR                     Embedded PRTOBJ
}


CASE;

// IF PAR.PSP Prod Run Sequence is Not equal to zeros
IF PAR.PSP_Prod_Run_Sequence <> *ZERO;

//?E3796 JJH 02/25/15 - Use Requested Ship Date
// Call program Crt PS Prod Item Sch SXF.
CALL PROGRAM(Crt PS Prod Item Sch SXF) ('PBE6XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(06);
PARAMETER(PAR.Item_Primal_Sched_Report);
PARAMETER(PAR.PSP_Prod_Run_Sequence);
PARAMETER(WRK.PSP_Primal_Group_Report);
PARAMETER(WRK.PSP_Report_Sequence);
PARAMETER(WRK.PSP_Report_ID);
PARAMETER(WRK.PSP_Report_Date);
PARAMETER(WRK.PSP_Report_Time);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Requested_Ship_Date);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(WRK.Date_0_RGF);
PARAMETER(WRK.Date_1_RGF);
PARAMETER(WRK.Date_2_RGF);
PARAMETER(WRK.Date_3_RGF);
PARAMETER(WRK.Date_3_RGT);

ENDIF;

//?USER: Print required level headings

CASE;

IF NEW OPS_Company_Number;
// WRK.Count Records        USR = CON.8 * CON.1 *
WRK.Count_Records_USR = 8 * 1;

// CUR.PSP Prod Run Sequence = WRK.PSP Prod Run Sequence
CUR.PSP_Prod_Run_Sequence = WRK.PSP_Prod_Run_Sequence;

// Print OPS Company Number header format
PRINT OPS Company Number header format;

//?Embedded PRTOBJ : Prt Prd Schedule      PO
//?If this program changes verify the name of the subr that is
//?being used here due to also executing the subr in the
//?null processing due to if no records in files also need
//?this print object to execute there on the null area of this
//?action diagram.
//?E3796 JJH 02/25/15 - Use Requested Ship Date
CASE;

// IF PAR.Requested Ship Date EQ JOB.*Job date
IF PAR.Requested_Ship_Date = JOB.*Job_date;

// WRK.Production Type USR = CND.Schedule
WRK.Production_Type_USR = 'S';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Production Type USR = CND.Plan
WRK.Production_Type_USR = 'P';

ENDIF;

//?E3796 JJH 02/25/15 - Use Requested Ship Date
EXECUTE FUNCTION(Prt Prd Schedule PrmPsPO) TYPE(PRTOBJ);
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.Production_Type_USR);
PARAMETER(PAR.Requested_Ship_Date);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.PSP_Prod_Run_Sequence);
PARAMETER(WRK.PSP_Report_ID);
PARAMETER(WRK.PSP_Report_Date);
PARAMETER(WRK.PSP_Report_Time);
PARAMETER(WRK.PSP_Report_Sequence);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Primal_Sched_Report);
PARAMETER(PAR.Requested_Ship_Date);
PARAMETER(PAR.Item_Primal_Sched_Report);
PARAMETER(WRK.Date_0_RGF);
PARAMETER(WRK.Date_1_RGF);
PARAMETER(WRK.Date_2_RGF);
PARAMETER(WRK.Date_3_RGF);
PARAMETER(WRK.Date_3_RGT);
{
 * Embedded PRTOBJ : Prt Prd Schedule      PO
 * Excute print object in the null portion of the action diagram
 * using user source.  if this subr name is changed then this function
 * will also have to be changed
 C                     EXSR UBSUBR                     Embedded PRTOBJ
}


ENDIF;

CASE;

IF NEW OPS_Warehouse;
// CUR.Company = PAR.Company Number
CUR.Company = PAR.Company_Number;

// CUR.Warehouse Code = PAR.Warehouse Code
CUR.Warehouse_Code = PAR.Warehouse_Code;

//?E3796 JJH 02/25/15 - Use Requested Ship Date
// CUR.Scheduled Ship Date = PAR.Requested Ship Date
CUR.Scheduled_Ship_Date = PAR.Requested_Ship_Date;

// CUR.Next Production Day Usr = PAR.Next Production Day Usr
CUR.Next_Production_Day_Usr = PAR.Next_Production_Day_Usr;

// CUR.Next Production Day Usr2 = PAR.Next Production Day Usr2
CUR.Next_Production_Day_Usr2 = PAR.Next_Production_Day_Usr2;

// Print OPS Warehouse header format
PRINT OPS Warehouse header format;

//?Embedded PRTOBJ : Prt Sel Prd SchItm-All2PO
CASE;

// IF DB1.OPS Order Number is Equal to zeros
IF DB1.OPS_Order_Number = *ZERO;

QUIT;

// IF PAR.Summary Selected Usr is no
IF PAR.Summary_Selected_Usr = 'N';

QUIT;

ENDIF;

//?E3796 JJH 02/25/15 - Use Requested Ship Date
EXECUTE FUNCTION(Prt Prd Schedule PrmOrdPO) TYPE(PRTOBJ);
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.Count_Records_USR);
PARAMETER(PAR.Next_Production_Day_Usr);
PARAMETER(PAR.Next_Production_Day_Usr2);
PARAMETER(PAR.PSP_Prod_Run_Sequence);
PARAMETER(PAR.Item_Primal_Sched_Report);
PARAMETER(WRK.PSP_Report_Sequence);
PARAMETER(WRK.PSP_Report_ID);
PARAMETER(WRK.PSP_Report_Date);
PARAMETER(WRK.PSP_Report_Time);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Requested_Ship_Date);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Requested_Ship_Date);
{
 * Embedded PRTOBJ : Prt Prd Schedule      PO
 * Excute print object in the null portion of the action diagram
 * using user source.  if this subr name is changed then this function
 * will also have to be changed
 C                     EXSR UBSUBR                     Embedded PRTOBJ
}


// WRK.Count Records        USR = WRK.Count Records        USR + CON.4
WRK.Count_Records_USR = WRK.Count_Records_USR + 4;

ENDIF;

CASE;

IF NEW OPS_Requested_Ship_Date;
// SUPPRESSED PRINT OPS Requested Ship Date header format

ENDIF;

CASE;

IF NEW OPS_Schedule_Ship_Date;
// SUPPRESSED PRINT OPS Schedule Ship Date header format

ENDIF;

// SUPPRESSED PRINT OPS Load Schedule Seq # header format

// SUPPRESSED PRINT OPS Deadline Depart Date header format

// SUPPRESSED PRINT OPS Deadline Depart Time header format

// SUPPRESSED PRINT OPS Load Id header format

CASE;

IF NEW OPS_Order_Number;
//?Figure out the breaking on look ahead lines
// WRK.Count Ahead USR = WRK.Count Records        USR
WRK.Count_Ahead_USR = WRK.Count_Records_USR;

//?Count the number of items for this break
// WRK.Count Items Records Usr = CON.*ZERO
WRK.Count_Items_Records_Usr = 00000;

// Call program Cnt Ord Prd Schedule  XF.
CALL PROGRAM(Cnt Ord Prd Schedule  XF) ('PMA6XFR');
PARAMETER(CUR.OPS_Primal_Group_Code);
PARAMETER(CUR.OPS_Company_Number);
PARAMETER(CUR.OPS_Warehouse);
PARAMETER(CUR.OPS_Schedule_Ship_Date);
PARAMETER(CUR.OPS_Order_Number);
PARAMETER(CUR.OPS_Load_Id);
PARAMETER(CUR.OPS_Load_Schedule_Seq_Nbr);
PARAMETER(CUR.OPS_Deadline_Depart_Date);
PARAMETER(CUR.OPS_Deadline_Depart_Time);
PARAMETER(WRK.Count_Items_Records_Usr);

// WRK.Count Ahead USR = WRK.Count Ahead USR + WRK.Count Items Records Usr
WRK.Count_Ahead_USR = WRK.Count_Ahead_USR + WRK.Count_Items_Records_Usr;

//?order comments on invoice 1 line  if found
EXECUTE FUNCTION(RTV First 70char       RT) TYPE(RTVOBJ) FILE(OPCOCPP)          AC1571026;
PARAMETER(CUR.OPS_Company_Number);
PARAMETER(CUR.OPS_Order_Number);
PARAMETER('IN');
PARAMETER(LCL.USR_Text_70);
{
 //?USER: Initialize routine

 // PAR.USR Text 70 = CON.*BLANK
 PAR.USR_Text_70 = *BLANK;

 // PAR.Count USR = CON.*ZERO
 PAR.Count_USR = *ZERO;

 //?USER: Process Data record

 // PAR.Count USR = PAR.Count USR + CON.1
 PAR.Count_USR = PAR.Count_USR + 1;

 CASE;

 // IF PAR.Count USR is One
 IF PAR.Count_USR = 1;

 // PAR.USR Text 70 = DB1.Comment Text
 PAR.USR_Text_70 = DB1.Comment_Text;

 // IF PAR.Count USR is LE 3
 IF PAR.Count_USR <= 3;

 // PAR.USR Text 70 = CONCAT(PAR.USR Text 70,DB1.Comment Text,CON.1)
 PAR.USR_Text_70 = PAR.USR_Text_70 + DB1.Comment_Text (1);

 // IF *OTHERWISE
 IF *OTHERWISE;

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.USR Text 70 is Blank
IF LCL.USR_Text_70 = *BLANK;

//?Do not count the invoice comment line field is blank
// IF *OTHERWISE
IF *OTHERWISE;

//?Do count the invoice comment line
// WRK.Count Ahead USR = WRK.Count Ahead USR + CON.00001
WRK.Count_Ahead_USR = WRK.Count_Ahead_USR + 00001;

ENDIF;

//?Add 2 lines for total   data line and dash
// WRK.Count Ahead USR = WRK.Count Ahead USR + CON.00002
WRK.Count_Ahead_USR = WRK.Count_Ahead_USR + 00002;

CASE;

// IF WRK.Count Ahead USR is GT 80
IF WRK.Count_Ahead_USR > 80;

// AND WRK.Page Control Usr is yes
AND WRK.Page_Control_Usr = 'Y';

// PGM.*new page flag = CND.*Yes
PGM.*new_page_flag = 'Y';

ENDIF;

// CUR.Count Ahead USR = WRK.Count Ahead USR
CUR.Count_Ahead_USR = WRK.Count_Ahead_USR;

//?E3796 JJH 02/25/15 - Use Requested Ship Date
CASE;

// IF PAR.Requested Ship Date GT JOB.*Job date
IF PAR.Requested_Ship_Date > JOB.*Job_date;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

// Call program CLC Day of Week        XF.
CALL PROGRAM(CLC Day of Week        XF) ('PDXIXFR');
PARAMETER(DB1.OPS_Schedule_Ship_Date);
PARAMETER(WRK.Day_of_the_Week_USR);

// WRK.Deadline Depart Time 4,0 = DB1.OPS Deadline Depart Time / CON.100 *
WRK.Deadline_Depart_Time_40 = DB1.OPS_Deadline_Depart_Time / 100;

// WRK.Flag Held Over Usr = CON.*BLANK
WRK.Flag_Held_Over_Usr = *BLANK;

//?E3796 JJH 02/25/15 - Use Requested Ship Date
CASE;

// IF DB1.OPS Requested Ship Date LT PAR.Requested Ship Date
IF DB1.OPS_Requested_Ship_Date < PAR.Requested_Ship_Date;

// WRK.Flag Held Over Usr = CON.HO
WRK.Flag_Held_Over_Usr = 'HO';

// Execute function Set On Indicator 02    US.
EXECUTE FUNCTION(Set On Indicator 02    US) TYPE(EXCUSRSRC) ('PPC0UFR');
{
 C                     SETON                     02    SETON INDICATOR
}


ENDIF;

CASE;

// IF PAR.Print Comments Usr is yes
IF PAR.Print_Comments_Usr = 'Y';

EXECUTE FUNCTION(RTV First 70char       RT) TYPE(RTVOBJ) FILE(OPCOCPP)          AC1571026;
PARAMETER(DB1.OPS_Company_Number);
PARAMETER(DB1.OPS_Order_Number);
PARAMETER('PS');
PARAMETER(CUR.Usr_Text_70_A);
{
 //?USER: Initialize routine

 // PAR.USR Text 70 = CON.*BLANK
 PAR.USR_Text_70 = *BLANK;

 // PAR.Count USR = CON.*ZERO
 PAR.Count_USR = *ZERO;

 //?USER: Process Data record

 // PAR.Count USR = PAR.Count USR + CON.1
 PAR.Count_USR = PAR.Count_USR + 1;

 CASE;

 // IF PAR.Count USR is One
 IF PAR.Count_USR = 1;

 // PAR.USR Text 70 = DB1.Comment Text
 PAR.USR_Text_70 = DB1.Comment_Text;

 // IF PAR.Count USR is LE 3
 IF PAR.Count_USR <= 3;

 // PAR.USR Text 70 = CONCAT(PAR.USR Text 70,DB1.Comment Text,CON.1)
 PAR.USR_Text_70 = PAR.USR_Text_70 + DB1.Comment_Text (1);

 // IF *OTHERWISE
 IF *OTHERWISE;

 QUIT;

 ENDIF;

}


// WRK.Count Records        USR = WRK.Count Records        USR + CON.00001
WRK.Count_Records_USR = WRK.Count_Records_USR + 00001;

ENDIF;

// WRK.Count Records        USR = WRK.Count Records        USR + CON.00002
WRK.Count_Records_USR = WRK.Count_Records_USR + 00002;

// WRK.Count Records        USR = WRK.Count Records        USR + CON.00002
WRK.Count_Records_USR = WRK.Count_Records_USR + 00002;

// Print OPS Order Number header format
PRINT OPS Order Number header format;

ENDIF;

// SUPPRESSED PRINT OPS Item Code header format

//?USER: On print of detail format

//?E3796 JJH 02/25/15 - Use Requested Ship Date
CASE;

// IF PAR.Requested Ship Date GT JOB.*Job date
IF PAR.Requested_Ship_Date > JOB.*Job_date;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

CASE;

// IF DB1.OPS Order Number is Equal to zeros
IF DB1.OPS_Order_Number = *ZERO;

// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

MOVE *ALL (To: CUR From: DB1);

// CUR.OPS QTY SHIP PRT 3/0 = DB1.OPS Quantity Schedule * CON.1 *
CUR.OPS_QTY_SHIP_PRT_3_0 = DB1.OPS_Quantity_Ordered * 1;

// WRK.Count Records        USR = WRK.Count Records        USR + CON.1
WRK.Count_Records_USR = WRK.Count_Records_USR + 1;

//?Create the PS Prod Item Sch Detail data
CASE;

// IF PGM.*Print format is Print format
IF PGM.*Print_format = 'Y';

// AND PAR.PSP Prod Run Sequence is Greater then zero
AND PAR.PSP_Prod_Run_Sequence > *ZERO;

// Call program CLC Day of Week        XF.
CALL PROGRAM(CLC Day of Week        XF) ('PDXIXFR');
PARAMETER(DB1.OPS_Schedule_Ship_Date);
PARAMETER(WRK.Day_of_the_Week_USR);

// WRK.Flag Held Over Usr = CON.*BLANK
WRK.Flag_Held_Over_Usr = *BLANK;

//?E3796 JJH 02/25/15 - Use Requested Ship Date
CASE;

// IF DB1.OPS Requested Ship Date LT PAR.Requested Ship Date
IF DB1.OPS_Requested_Ship_Date < PAR.Requested_Ship_Date;

// WRK.Flag Held Over Usr = CON.HO
WRK.Flag_Held_Over_Usr = 'HO';

ENDIF;

// WRK.Est Prd Ready Time Usr = CON.*BLANK
WRK.Est_Prd_Ready_Time_Usr = *BLANK;

EXECUTE FUNCTION(Rtv ProdInfm          Rt) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1937563;
PARAMETER(DB1.OPS_Load_Id);
PARAMETER(LCL.Product_Temperature);
PARAMETER(LCL.Product_Complete_Date);
PARAMETER(LCL.Product_Complete_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Build Est Product Ready Time from Product Completed Date
CASE;

// IF LCL.Product Complete Date is Entered
IF LCL.Product_Complete_Date <> *ZERO;

// LCL.Date (Alpha) USR = CVTVAR(LCL.Product Complete Date)
LCL.Date_Alpha_USR = CVTVAR(LCL.Product_Complete_Date);

// LCL.Time Alpha usr 6 = CVTVAR(LCL.Product Complete Time)
LCL.Time_Alpha_usr_6 = CVTVAR(LCL.Product_Complete_Time);

// Call program Mov DteTme MM dd YY.etcXF.
CALL PROGRAM(Mov DteTme MM dd YY.etcXF) ('PNI4XFR');
PARAMETER(LCL.Date_Alpha_USR);
PARAMETER(LCL.Time_Alpha_usr_6);
PARAMETER(WRK.Month_Char_USR);
PARAMETER(WRK.Day_Char_USR);
PARAMETER(WRK.Century_Usr_TXT);
PARAMETER(WRK.Year_Char_USR);
PARAMETER(WRK.Hours_2A_USR);
PARAMETER(WRK.Minutes_2A_USR);
PARAMETER(WRK.Seconds_2A_USR);

//?format date to field and underline field
//?mm/
// WRK.Est Prd Ready Time Usr = CONCAT(WRK.Month (Char) USR,CON./,CON.*ZERO)
WRK.Est_Prd_Ready_Time_Usr = WRK.Month_Char_USR + '/' (*ZERO);

//?dd
// WRK.Est Prd Ready Time Usr = CONCAT(WRK.Est Prd Ready Time Usr,WRK.Day   (Char) USR,CON.*ZERO)
WRK.Est_Prd_Ready_Time_Usr = WRK.Est_Prd_Ready_Time_Usr + WRK.Day_Char_USR (*ZERO);

//?/
// WRK.Est Prd Ready Time Usr = CONCAT(WRK.Est Prd Ready Time Usr,CON./,CON.*ZERO)
WRK.Est_Prd_Ready_Time_Usr = WRK.Est_Prd_Ready_Time_Usr + '/' (*ZERO);

//?year
// WRK.Est Prd Ready Time Usr = CONCAT(WRK.Est Prd Ready Time Usr,WRK.Year  (Char) USR,CON.*ZERO)
WRK.Est_Prd_Ready_Time_Usr = WRK.Est_Prd_Ready_Time_Usr + WRK.Year_Char_USR (*ZERO);

//?/
// WRK.Est Prd Ready Time Usr = CONCAT(WRK.Est Prd Ready Time Usr,CON./,CON.1)
WRK.Est_Prd_Ready_Time_Usr = WRK.Est_Prd_Ready_Time_Usr + '/' (1);

//?Hours
// WRK.Est Prd Ready Time Usr = CONCAT(WRK.Est Prd Ready Time Usr,WRK.Hours  2A            USR,CON.1
WRK.Est_Prd_Ready_Time_Usr = WRK.Est_Prd_Ready_Time_Usr + WRK.Hours_2A_USR (1);

//?:
// WRK.Est Prd Ready Time Usr = CONCAT(WRK.Est Prd Ready Time Usr,CON.:,CON.*ZERO)
WRK.Est_Prd_Ready_Time_Usr = WRK.Est_Prd_Ready_Time_Usr + ':' (*ZERO);

//?min
// WRK.Est Prd Ready Time Usr = CONCAT(WRK.Est Prd Ready Time Usr,WRK.Minutes  2A          USR,CON.*
WRK.Est_Prd_Ready_Time_Usr = WRK.Est_Prd_Ready_Time_Usr + WRK.Minutes_2A_USR (*ZERO);

ENDIF;

// LCL.PSO Est Prd Ready Time = WRK.Est Prd Ready Time Usr
LCL.PSO_Est_Prd_Ready_Time = WRK.Est_Prd_Ready_Time_Usr;

// WRK.PSO Report Sequence = WRK.PSO Report Sequence + CON.1
WRK.PSO_Report_Sequence = WRK.PSO_Report_Sequence + 1;

EXECUTE FUNCTION(Crt PS Prod Item Sch DCR) TYPE(CRTOBJ) FILE(PBANCPP)           AC2050029;
PARAMETER(PAR.PSP_Prod_Run_Sequence);
PARAMETER(PAR.Item_Primal_Sched_Report);
PARAMETER(WRK.PSO_Report_Sequence);
PARAMETER(WRK.PSP_Report_ID);
PARAMETER(WRK.PSP_Report_Date);
PARAMETER(WRK.PSP_Report_Time);
PARAMETER(DB1.OPS_Company_Number);
PARAMETER(DB1.OPS_Schedule_Ship_Date);
PARAMETER(DB1.OPS_Warehouse);
PARAMETER(DB1.OPS_Customer_Name);
PARAMETER(DB1.OPS_Load_Schedule_Seq_Nbr);
PARAMETER(DB1.OPS_Order_Number);
PARAMETER(DB1.OPS_Load_Id);
PARAMETER(DB1.OPS_Item_Code);
PARAMETER(DB1.OPS_Item_Description);
PARAMETER(DB1.OPS_Schedule_Ship_Date);
PARAMETER(CUR.OPS_QTY_SHIP_PRT_3_0);
PARAMETER(DB1.Production_AgeDte_Fr);
PARAMETER(LCL.PSO_Est_Prd_Ready_Time);
PARAMETER(WRK.Flag_Held_Over_Usr);
PARAMETER(WRK.Day_of_the_Week_USR);
PARAMETER(DB1.OPS_Deadline_Depart_Date);
PARAMETER(DB1.OPS_Deadline_Depart_Time);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  //?*** Set RECORD STATUS field. ***
  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  //?*** Set CREATE fields. ***
  // PAR.Create Date = JOB.*Job date
  PAR.Create_Date = JOB.*Job_date;

  // PAR.Create Time = JOB.*Job time
  PAR.Create_Time = JOB.*Job_time;

  // PAR.Create User = JOB.*USER
  PAR.Create_User = JOB.*USER;

  // PAR.Create Program = JOB.*PROGRAM
  PAR.Create_Program = JOB.*PROGRAM;

  //?*** Set CHANGE fields. ***
  // PAR.Change Date = CON.*ZERO
  PAR.Change_Date = *ZERO;

  // PAR.Change Time = CON.*ZERO
  PAR.Change_Time = *ZERO;

  // PAR.Change User = CON.*BLANK
  PAR.Change_User = *BLANK;

  // PAR.Change Program = CON.*BLANK
  PAR.Change_Program = *BLANK;

 }

}


ENDIF;

//?USER: Print required level totals

// SUPPRESSED PRINT OPS Item Code totals format

CASE;

IF NEW OPS_Order_Number;
//?E3796 JJH 02/25/15 - Use Requested Ship Date
CASE;

// IF PAR.Requested Ship Date GT JOB.*Job date
IF PAR.Requested_Ship_Date > JOB.*Job_date;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

//?Order break add 1 to line counter
// WRK.Count Records        USR = WRK.Count Records        USR + CON.1
WRK.Count_Records_USR = WRK.Count_Records_USR + 1;

// CUR.Day of the Week USR = WRK.Day of the Week USR
CUR.Day_of_the_Week_USR = WRK.Day_of_the_Week_USR;

// CUR.Deadline Depart Time 4,0 = WRK.Deadline Depart Time 4,0
CUR.Deadline_Depart_Time_40 = WRK.Deadline_Depart_Time_40;

// CUR.Flag Held Over Usr = WRK.Flag Held Over Usr
CUR.Flag_Held_Over_Usr = WRK.Flag_Held_Over_Usr;

EXECUTE FUNCTION(RTV First 70char       RT) TYPE(RTVOBJ) FILE(OPCOCPP)          AC1571026;
PARAMETER(CUR.OPS_Company_Number);
PARAMETER(CUR.OPS_Order_Number);
PARAMETER('IN');
PARAMETER(CUR.USR_Text_70);
{
 //?USER: Initialize routine

 // PAR.USR Text 70 = CON.*BLANK
 PAR.USR_Text_70 = *BLANK;

 // PAR.Count USR = CON.*ZERO
 PAR.Count_USR = *ZERO;

 //?USER: Process Data record

 // PAR.Count USR = PAR.Count USR + CON.1
 PAR.Count_USR = PAR.Count_USR + 1;

 CASE;

 // IF PAR.Count USR is One
 IF PAR.Count_USR = 1;

 // PAR.USR Text 70 = DB1.Comment Text
 PAR.USR_Text_70 = DB1.Comment_Text;

 // IF PAR.Count USR is LE 3
 IF PAR.Count_USR <= 3;

 // PAR.USR Text 70 = CONCAT(PAR.USR Text 70,DB1.Comment Text,CON.1)
 PAR.USR_Text_70 = PAR.USR_Text_70 + DB1.Comment_Text (1);

 // IF *OTHERWISE
 IF *OTHERWISE;

 QUIT;

 ENDIF;

}


//?If comments  will be printed then add 1 line
CASE;

// IF CUR.USR Text 70 is Blank
IF CUR.USR_Text_70 = *BLANK;

// WRK.Display Ord Dtl Cmnts USR = CND.No
WRK.Display_Ord_Dtl_Cmnts_USR = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Display Ord Dtl Cmnts USR = CND.Yes
WRK.Display_Ord_Dtl_Cmnts_USR = 'Y';

// WRK.Count Records        USR = WRK.Count Records        USR + CON.1
WRK.Count_Records_USR = WRK.Count_Records_USR + 1;

ENDIF;

//?Print Order information add 1 to line counter
// WRK.Count Records        USR = WRK.Count Records        USR + CON.1
WRK.Count_Records_USR = WRK.Count_Records_USR + 1;

//?Print Order information dash line
// WRK.Count Records        USR = WRK.Count Records        USR + CON.1
WRK.Count_Records_USR = WRK.Count_Records_USR + 1;

// CUR.Est Prd Ready Time Usr = CON.*BLANK
CUR.Est_Prd_Ready_Time_Usr = *BLANK;

EXECUTE FUNCTION(Rtv ProdInfm          Rt) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1937563;
PARAMETER(CUR.OPS_Load_Id);
PARAMETER(LCL.Product_Temperature);
PARAMETER(LCL.Product_Complete_Date);
PARAMETER(LCL.Product_Complete_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Build Est Product Ready Time from Product Completed Date
CASE;

// IF LCL.Product Complete Date is Entered
IF LCL.Product_Complete_Date <> *ZERO;

// LCL.Date (Alpha) USR = CVTVAR(LCL.Product Complete Date)
LCL.Date_Alpha_USR = CVTVAR(LCL.Product_Complete_Date);

// LCL.Time Alpha usr 6 = CVTVAR(LCL.Product Complete Time)
LCL.Time_Alpha_usr_6 = CVTVAR(LCL.Product_Complete_Time);

// Call program Mov DteTme MM dd YY.etcXF.
CALL PROGRAM(Mov DteTme MM dd YY.etcXF) ('PNI4XFR');
PARAMETER(LCL.Date_Alpha_USR);
PARAMETER(LCL.Time_Alpha_usr_6);
PARAMETER(WRK.Month_Char_USR);
PARAMETER(WRK.Day_Char_USR);
PARAMETER(WRK.Century_Usr_TXT);
PARAMETER(WRK.Year_Char_USR);
PARAMETER(WRK.Hours_2A_USR);
PARAMETER(WRK.Minutes_2A_USR);
PARAMETER(WRK.Seconds_2A_USR);

//?format date to field and underline field
//?mm/
// CUR.Est Prd Ready Time Usr = CONCAT(WRK.Month (Char) USR,CON./,CON.*ZERO)
CUR.Est_Prd_Ready_Time_Usr = WRK.Month_Char_USR + '/' (*ZERO);

//?dd
// CUR.Est Prd Ready Time Usr = CONCAT(CUR.Est Prd Ready Time Usr,WRK.Day   (Char) USR,CON.*ZERO)
CUR.Est_Prd_Ready_Time_Usr = CUR.Est_Prd_Ready_Time_Usr + WRK.Day_Char_USR (*ZERO);

//?/
// CUR.Est Prd Ready Time Usr = CONCAT(CUR.Est Prd Ready Time Usr,CON./,CON.*ZERO)
CUR.Est_Prd_Ready_Time_Usr = CUR.Est_Prd_Ready_Time_Usr + '/' (*ZERO);

//?year
// CUR.Est Prd Ready Time Usr = CONCAT(CUR.Est Prd Ready Time Usr,WRK.Year  (Char) USR,CON.*ZERO)
CUR.Est_Prd_Ready_Time_Usr = CUR.Est_Prd_Ready_Time_Usr + WRK.Year_Char_USR (*ZERO);

//?/
// CUR.Est Prd Ready Time Usr = CONCAT(CUR.Est Prd Ready Time Usr,CON./,CON.1)
CUR.Est_Prd_Ready_Time_Usr = CUR.Est_Prd_Ready_Time_Usr + '/' (1);

//?Hours
// CUR.Est Prd Ready Time Usr = CONCAT(CUR.Est Prd Ready Time Usr,WRK.Hours  2A            USR,CON.1
CUR.Est_Prd_Ready_Time_Usr = CUR.Est_Prd_Ready_Time_Usr + WRK.Hours_2A_USR (1);

//?:
// CUR.Est Prd Ready Time Usr = CONCAT(CUR.Est Prd Ready Time Usr,CON.:,CON.*ZERO)
CUR.Est_Prd_Ready_Time_Usr = CUR.Est_Prd_Ready_Time_Usr + ':' (*ZERO);

//?min
// CUR.Est Prd Ready Time Usr = CONCAT(CUR.Est Prd Ready Time Usr,WRK.Minutes  2A          USR,CON.*
CUR.Est_Prd_Ready_Time_Usr = CUR.Est_Prd_Ready_Time_Usr + WRK.Minutes_2A_USR (*ZERO);

ENDIF;

// Print OPS Order Number totals format
PRINT OPS Order Number totals format;

ENDIF;

// SUPPRESSED PRINT OPS Load Id totals format

// SUPPRESSED PRINT OPS Deadline Depart Time totals format

// SUPPRESSED PRINT OPS Deadline Depart Date totals format

// SUPPRESSED PRINT OPS Load Schedule Seq # totals format

// SUPPRESSED PRINT OPS Schedule Ship Date totals format

// SUPPRESSED PRINT OPS Requested Ship Date totals format

// SUPPRESSED PRINT OPS Warehouse totals format

// SUPPRESSED PRINT OPS Company Number totals format

//?USER: On print of end of report format

CASE;

// IF PAR.PSP Prod Run Sequence is Not equal to zeros
IF PAR.PSP_Prod_Run_Sequence <> *ZERO;

//?E3796 JJH 02/25/15 - Use Requested Ship Date
// Call program Crt PS Prod Item Sch SXF.
CALL PROGRAM(Crt PS Prod Item Sch SXF) ('PBE6XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(06);
PARAMETER(PAR.Item_Primal_Sched_Report);
PARAMETER(PAR.PSP_Prod_Run_Sequence);
PARAMETER(PAR.Item_Primal_Sched_Report);
PARAMETER(WRK.PSP_Report_Sequence);
PARAMETER(WRK.PSP_Report_ID);
PARAMETER(WRK.PSP_Report_Date);
PARAMETER(WRK.PSP_Report_Time);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Requested_Ship_Date);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(WRK.Date_0_RGF);
PARAMETER(WRK.Date_1_RGF);
PARAMETER(WRK.Date_2_RGF);
PARAMETER(WRK.Date_3_RGF);
PARAMETER(WRK.Date_3_RGT);

ENDIF;

