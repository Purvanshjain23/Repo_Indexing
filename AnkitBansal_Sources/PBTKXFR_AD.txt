// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBTKXFR
// ?Date: 14.08.2025 Time: 03:49:20
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(CHG TMS OrdSts - All  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2113102;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Ship_To_Name);
PARAMETER(PAR.Ship_To_City);
PARAMETER(PAR.Ship_To_State_Code);
PARAMETER(PAR.Customer_Purchase_Order_#);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER(PAR.OH_Load_Plan_Ready);
PARAMETER(PAR.Thru_Date_USR);
PARAMETER(PAR.Warehouse_Code_PASS_USR);
PARAMETER(PAR.Trans_Type_1_PASS_USR);
PARAMETER(PAR.Pricing_Event_Called_From);
{
 //?USER: Initialize routine

 // WRK.Type Code = CND.Export Seaboard Bookings
 WRK.Type_Code = 'ES';

 // Call program EXC Rtv Status        XF.
 CALL PROGRAM(EXC Rtv Status        XF) ('PBXNXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER('TMSLDP');
 PARAMETER(LCL.Live_with_TPM);

 // Call program EXC Rtv Status-AS     XF.
 CALL PROGRAM(EXC Rtv Status-AS     XF) ('PBX2XFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER('TMSLDP');
 PARAMETER(LCL.PFS_AccuSort_Active);

 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?SKIP: Block Orders
 CASE;

 // IF DB1.Block Order Flag is Block Order
 IF DB1.Block_Order_Flag = 'B';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?SKIP: LTL = NO
 CASE;

 // IF DB1.LTL Flag is No
 IF DB1.LTL_Flag = 'N';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?Skip: Load ID not zeros
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF DB1.Load ID is Entered
 IF DB1.Load_ID <> *ZERO;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Skip: Cancelled orders  / "E"nter sts
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF DB1.Header Status is Cancelled
 IF DB1.Header_Status = 'X';

 // OR DB1.Header Status is Entered
 OR DB1.Header_Status = 'E';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?SEL:  Company Number
 CASE;

 // IF PAR.Company Number is not equal to zero
 IF PAR.Company_Number <> *ZERO;

 CASE;

 // IF PAR.Company Number NE DB1.Company Number
 IF PAR.Company_Number <> DB1.Company_Number;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?SEL:  Scheduled Ship Date
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.Scheduled Ship Date is entered
 IF PAR.Scheduled_Ship_Date <> *ZERO;

 //?Test for Thursday (Sat, Sun, Mon dates) or date range
 CASE;

 // IF PAR.Thru Date             USR NE PAR.Scheduled Ship Date
 IF PAR.Thru_Date_USR <> PAR.Scheduled_Ship_Date;

 //?* Skip if date is outside of requested date range
 CASE;

 // IF DB1.Scheduled Ship Date LT PAR.Scheduled Ship Date
 IF DB1.Scheduled_Ship_Date < PAR.Scheduled_Ship_Date;

 // OR DB1.Scheduled Ship Date GT PAR.Thru Date             USR
 OR DB1.Scheduled_Ship_Date > PAR.Thru_Date_USR;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?Test for Thursday (Sat, Sun, Mon dates) or date range
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?* Test for matching dates
 CASE;

 // IF DB1.Scheduled Ship Date NE PAR.Scheduled Ship Date
 IF DB1.Scheduled_Ship_Date <> PAR.Scheduled_Ship_Date;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?SEL:  Customer Number
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 //?SEL:  Customer Number
 CASE;

 // IF PAR.Ship To Customer is not equal to zero
 IF PAR.Ship_To_Customer <> *ZERO;

 CASE;

 // IF PAR.Ship To Customer NE DB1.Ship To Customer
 IF PAR.Ship_To_Customer <> DB1.Ship_To_Customer;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 //?SEL:  Order Number
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 //?SEL:  Order Number
 CASE;

 // IF PAR.Order Number is Greater then zero
 IF PAR.Order_Number > *ZERO;

 CASE;

 // IF PAR.Order Number NE DB1.Order Number
 IF PAR.Order_Number <> DB1.Order_Number;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 //?SEL:  Customer Purchase Order
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 //?SEL:  Customer Purchase Order
 CASE;

 // IF PAR.Customer Purchase Order # is NE Blank
 IF PAR.Customer_Purchase_Order_# <> *BLANK;

 CASE;

 // IF PAR.Customer Purchase Order # NE DB1.Customer Purchase Order #
 IF PAR.Customer_Purchase_Order_# <> DB1.Customer_Purchase_Order_#;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 //?SEL:  Ship To Name
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 //?SEL:  Ship To Name
 CASE;

 // IF PAR.Ship To Name is Not Blank
 IF PAR.Ship_To_Name <> *BLANK;

 // Execute function CVT Str to Upper Alpha US.
 EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
 PARAMETER(PAR.Ship_To_Name);
 PARAMETER(WRK.SH_Genset_Number);
 {
  PDWEUFR:  PGM PARM(&STRIN &STROUT)

  CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
 }

 // Call program CLC Call Qclscan       UP.
 CALL PROGRAM(CLC Call Qclscan       UP) ('QCLSCAN');
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(30);
 PARAMETER(1);
 PARAMETER(WRK.SH_Genset_Number);
 PARAMETER(30);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(*BLANK);
 PARAMETER(WRK.USR_Qclscan_Result);

 CASE;

 // IF WRK.USR Qclscan Result ? is Does contain
 IF WRK.USR_Qclscan_Result > 0;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 //?SEL:  Ship To City
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.Ship To City is NE Blanks
 IF PAR.Ship_To_City <> *BLANK;

 // Execute function CVT Str to Upper Alpha US.
 EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(WRK.SH_Genset_Number);
 {
  PDWEUFR:  PGM PARM(&STRIN &STROUT)

  CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
 }

 // Call program CLC Call Qclscan       UP.
 CALL PROGRAM(CLC Call Qclscan       UP) ('QCLSCAN');
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(30);
 PARAMETER(1);
 PARAMETER(WRK.SH_Genset_Number);
 PARAMETER(30);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(*BLANK);
 PARAMETER(WRK.USR_Qclscan_Result);

 CASE;

 // IF WRK.USR Qclscan Result ? is Does contain
 IF WRK.USR_Qclscan_Result > 0;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 //?SEL:  Ship To State
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.Ship To State Code is State code not Blanks
 IF PAR.Ship_To_State_Code <> *BLANK;

 CASE;

 // IF PAR.Ship To State Code NE DB1.Ship To State Code
 IF PAR.Ship_To_State_Code <> DB1.Ship_To_State_Code;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 //?SEL:  Requested Delivery Date
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF PAR.Requested Delivery Date is entered
 IF PAR.Requested_Delivery_Date <> *ZERO;

 CASE;

 // IF PAR.Requested Delivery Date NE DB1.Requested Delivery Date
 IF PAR.Requested_Delivery_Date <> DB1.Requested_Delivery_Date;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 //?SEL:  Type Code (If not blank, match. If blank, skip ES)
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 EXECUTE FUNCTION(RTV Type              RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC2100377;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.OHE_Override_Type_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Trans Type 1 PASS     USR NE WRK.Blank for 3          USR
 IF PAR.Trans_Type_1_PASS_USR <> WRK.Blank_for_3_USR;

 CASE;

 // IF PAR.Trans Type 1 PASS     USR NE LCL.OHE Override Type Code
 IF PAR.Trans_Type_1_PASS_USR <> LCL.OHE_Override_Type_Code;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Skip: Type Code = "ES"
 CASE;

 // IF LCL.OHE Override Type Code EQ WRK.Type Code
 IF LCL.OHE_Override_Type_Code = WRK.Type_Code;

 CASE;

 // IF LCL.Live with TPM is Yes
 IF LCL.Live_with_TPM = 'Y';

 // AND LCL.PFS AccuSort Active is No
 AND LCL.PFS_AccuSort_Active = 'N';

 //?want ES when live with tpm and Not live with dom/ex only
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?SEL:  Warehouse Code
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 //?SEL:  Warehouse Code
 CASE;

 // IF PAR.Warehouse Code PASS   USR is Not Blanks
 IF PAR.Warehouse_Code_PASS_USR <> *BLANK;

 EXECUTE FUNCTION(Rtv Warehouse wo/Quit RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1788808;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Warehouse_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Warehouse Code = DB1.Warehouse Code
  PAR.Warehouse_Code = DB1.Warehouse_Code;

  ENDIF;

 }

 CASE;

 // IF LCL.Warehouse Code is Not Blanks
 IF LCL.Warehouse_Code <> *BLANK;

 // AND PAR.Warehouse Code PASS   USR NE LCL.Warehouse Code
 AND PAR.Warehouse_Code_PASS_USR <> LCL.Warehouse_Code;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 //?SEL:  Order detail must exist
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 EXECUTE FUNCTION(RTV Chk Any DtlExists  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2120531;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 {
  //?USER: Initialize routine

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Not cancelled
  IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  ENDIF;

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // Call program Rtv Crt Ld Plan Ready  XF.
 CALL PROGRAM(Rtv Crt Ld Plan Ready  XF) ('PBUOXFR');
 PARAMETER(LCL.Job_Date);
 PARAMETER(LCL.Job_Time);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Company_Number);
 PARAMETER(*BLANK);
 PARAMETER(LCL.User_Id);
 PARAMETER(LCL.Job_Name);

 //?* Update OH LPR flag in Order Header to PAR
 CASE;

 // IF DB1.OH Load Plan Ready is Not Sent to TMS
 IF DB1.OH_Load_Plan_Ready = *BLANK/'N';

 EXECUTE FUNCTION(CHG OH Load Plan Ready CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1733022;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('Y');
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 ENDIF;

}


