// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDVBPFR
// ?Date: 14.08.2025 Time: 12:04:36
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('I/C');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// PAR.USR Display 1 = CND.No
PAR.USR_Display_1 = 'N';

// LCL.Job Date Usr = JOB.*Job date
LCL.Job_Date_Usr = JOB.*Job_date;

// LCL.Ageing Days Usr = PAR.Ageing Days Usr * CON.-1 *
LCL.Ageing_Days_Usr = PAR.Ageing_Days_Usr * -1;

//?USER: Record selection processing

EXECUTE FUNCTION(Rtv ItmTyp/ItmLv/QltLv RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1327678;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(WRK.Quality_Level);
PARAMETER(WRK.Item_Level);
PARAMETER(WRK.Item_Type_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Select item type code if entered
CASE;

// IF PAR.Item Type Code is Blank
IF PAR.Item_Type_Code = *BLANK;

//?Select item type code if entered
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Item Type Code NE WRK.Item Type Code
IF PAR.Item_Type_Code <> WRK.Item_Type_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select item level if entered
CASE;

// IF PAR.Item Level is Entered
IF PAR.Item_Level <> *BLANK;

CASE;

// IF PAR.Item Level NE WRK.Item Level
IF PAR.Item_Level <> WRK.Item_Level;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select quality level if entered
CASE;

// IF PAR.Quality Level is Entered
IF PAR.Quality_Level <> *BLANK;

CASE;

// IF PAR.Quality Level NE WRK.Quality Level
IF PAR.Quality_Level <> WRK.Quality_Level;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Sel Avail Group
CASE;

// IF PAR.Availability Group Code is NE Blank
IF PAR.Availability_Group_Code <> *BLANK;

EXECUTE FUNCTION(Val Existance         RT) TYPE(RTVOBJ) FILE(PDKLREP)           AC1390296;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(PAR.Availability_Group_Code);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: On print of first page format

// 1PG.Accounting Company Number = PAR.Accounting Company Number
X1PG_Company_Number = PAR.Company_Number;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Warehouse Code = PAR.Warehouse Code
X1PG_Warehouse_Code = PAR.Warehouse_Code;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(X1PG_Warehouse_Code);
PARAMETER(X1PG_Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


// 1PG.Item Code = PAR.Item Code
X1PG_Item_Code = PAR.Item_Code;

//?If company is selected, rtv co/item else rtv item
CASE;

// IF PAR.Accounting Company Number is not equal to zero
IF PAR.Company_Number <> *ZERO;

EXECUTE FUNCTION(Rtv Descriptions      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1140665;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Item_Code);
PARAMETER(X1PG_Item_Description);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(WRK.UOM_Primary);
PARAMETER(WRK.UOM_Second);
PARAMETER(WRK.UOM_Third);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If company is selected, rtv co/item else rtv item
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
PARAMETER(X1PG_Item_Code);
PARAMETER(X1PG_Item_Description);
PARAMETER(WRK.Description_Line_Two);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// 1PG.Item Structure Type Code = PAR.Item Structure Type Code
X1PG_Item_Structure_Type_Code = PAR.Item_Structure_Type_Code;

EXECUTE FUNCTION(RTV  Description       RT) TYPE(RTVOBJ) FILE(OME8REP)          AC1219219;
PARAMETER(X1PG_Item_Structure_Type_Code);
PARAMETER(X1PG_Item_Structure_Type_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Item Structure Group Code = PAR.Item Structure Group Code
X1PG_Item_Structure_Group_Code = PAR.Item_Structure_Group_Code;

EXECUTE FUNCTION(Rtv Group Description  RT) TYPE(RTVOBJ) FILE(OME9REP)          AC1202656;
PARAMETER(X1PG_Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(X1PG_Item_Structure_Group_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Item Structure Class Code = PAR.Item Structure Class Code
X1PG_Item_Structure_Class_Code = PAR.Item_Structure_Class_Code;

EXECUTE FUNCTION(Rtv Item Class Desc    RT) TYPE(RTVOBJ) FILE(OMFAREP)          AC1205440;
PARAMETER(X1PG_Item_Structure_Class_Code);
PARAMETER(X1PG_Item_Structure_Class_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Item Type Code = PAR.Item Type Code
X1PG_Item_Type_Code = PAR.Item_Type_Code;

// 1PG.Condition Desc. 1  USR = Condition name of 1PG.Item Type Code
X1PG_Condition_Desc_1_USR = RTVCND(X1PG_Item_Type_Code);

// 1PG.Prt Non-Zero Qty Only USR = PAR.Prt Non-Zero Qty Only USR
1PG.Prt Non-Zero Qty Only USR = PAR.Prt_Non_Zero_Qty_Only_USR;

// 1PG.Condition Desc. 2  USR = Condition name of 1PG.Prt Non-Zero Qty Only USR
X1PG_Condition_Desc_2_USR = RTVCND(X1PG_Prt_Non_Zero_Qty_Only_USR);

// 1PG.Item Level = PAR.Item Level
X1PG_Item_Level = PAR.Item_Level;

EXECUTE FUNCTION(RTV Item Level Descr   RT) TYPE(RTVOBJ) FILE(PDILREP)          AC1287285;
PARAMETER(X1PG_Item_Level);
PARAMETER(X1PG_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Quality Level = PAR.Quality Level
X1PG_Quality_Level = PAR.Quality_Level;

EXECUTE FUNCTION(Rtv Quality Level Desc RT) TYPE(RTVOBJ) FILE(CAAIREP)          AC1124632;
PARAMETER(X1PG_Quality_Level);
PARAMETER(X1PG_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Include Todays Trans = PAR.Include Todays Trans
X1PG_Include_Todays_Trans = PAR.Include_Todays_Trans;

// 1PG.Condition Desc. 3  USR = Condition name of 1PG.Include Todays Trans
X1PG_Condition_Desc_3_USR = RTVCND(X1PG_Include_Todays_Trans);

// 1PG.Ageing Days Usr = PAR.Ageing Days Usr
X1PG_Ageing_Days_Usr = PAR.Ageing_Days_Usr;

// 1PG.Availability Group Code = PAR.Availability Group Code
X1PG_Availability_Group_Code = PAR.Availability_Group_Code;

EXECUTE FUNCTION(RTV Group Description  RT) TYPE(RTVOBJ) FILE(PDKKREP)          AC1380777;
PARAMETER(X1PG_Availability_Group_Code);
PARAMETER(X1PG_Availability_Group_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// PAR.USR Display 1 = CND.Yes
PAR.USR_Display_1 = 'Y';

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
EXECUTE FUNCTION(Rtv Lot Tracking Flag RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1506123;
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Lot_Tracking_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?05/26/20 DN S16592-Added Co 440 COPACK.
//?Aged Inventory-CoPack  or Aged Inventory **Condition**
CASE;

// IF PAR.Lot Tracking Flag is yes
IF PAR.Lot_Tracking_Flag = 'Y';

// AND PAR.Item Structure Type Code is EQ 900
AND PAR.Item_Structure_Type_Code = 900;

// OR PAR.Warehouse Code is Guymon Fresh
OR PAR.Warehouse_Code = 'GP1';

// AND PAR.Item Structure Type Code is EQ 900
AND PAR.Item_Structure_Type_Code = 900;

// OR PAR.Warehouse Code is Seaboard Triumph - Fresh
OR PAR.Warehouse_Code = 'ST1';

// AND PAR.Item Structure Type Code is COPACK
AND PAR.Item_Structure_Type_Code = 900;

// LCL.PA or Aged Inv Usage USR = CND.Aged Inventory-CoPack
LCL.PA_or_Aged_Inv_Usage_USR = 'C';

//?Aged Inventory-CoPack  or Aged Inventory **Condition**
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.PA or Aged Inv Usage USR = CND.Aged Inventory
LCL.PA_or_Aged_Inv_Usage_USR = 'A';

ENDIF;

// CUR.Date To               USR = LCL.Job Date Usr
CUR.Date_To_USR = LCL.Job_Date_Usr;

//?TPA 09/26/07 - First bucket should be same as On-hand date
// PAR.USR Day 1 = LCL.Job Date Usr
PAR.USR_Day_1 = LCL.Job_Date_Usr;

// PAR.USR Day 2 = PAR.USR Day 1 + LCL.Ageing Days Usr *DAYS
PAR.USR_Day_2 = DATEINCR(PAR.USR_Day_1 LCL.Ageing_Days_Usr 'DY' 1111111 'NONE' 'N' 1);

// PAR.USR Day 3 = PAR.USR Day 2 + LCL.Ageing Days Usr *DAYS
PAR.USR_Day_3 = DATEINCR(PAR.USR_Day_2 LCL.Ageing_Days_Usr 'DY' 1111111 'NONE' 'N' 1);

// PAR.USR Day 4 = PAR.USR Day 3 + LCL.Ageing Days Usr *DAYS
PAR.USR_Day_4 = DATEINCR(PAR.USR_Day_3 LCL.Ageing_Days_Usr 'DY' 1111111 'NONE' 'N' 1);

// PAR.USR Day 5 = PAR.USR Day 4 + LCL.Ageing Days Usr *DAYS
PAR.USR_Day_5 = DATEINCR(PAR.USR_Day_4 LCL.Ageing_Days_Usr 'DY' 1111111 'NONE' 'N' 1);

// PAR.USR Day 6 = PAR.USR Day 5 + LCL.Ageing Days Usr *DAYS
PAR.USR_Day_6 = DATEINCR(PAR.USR_Day_5 LCL.Ageing_Days_Usr 'DY' 1111111 'NONE' 'N' 1);

// PAR.USR Day 7 = PAR.USR Day 6 + LCL.Ageing Days Usr *DAYS
PAR.USR_Day_7 = DATEINCR(PAR.USR_Day_6 LCL.Ageing_Days_Usr 'DY' 1111111 'NONE' 'N' 1);

// PAR.USR Day 8 = PAR.USR Day 7 + CON.-1 *DAYS
PAR.USR_Day_8 = DATEINCR(PAR.USR_Day_7 '-1' 'DY' 1111111 'NONE' 'N' 1);

// CUR.USR Day 1 = PAR.USR Day 1
CUR.USR_Day_1 = PAR.USR_Day_1;

// CUR.USR Day 2 = PAR.USR Day 2
CUR.USR_Day_2 = PAR.USR_Day_2;

// CUR.USR Day 3 = PAR.USR Day 3
CUR.USR_Day_3 = PAR.USR_Day_3;

// CUR.USR Day 4 = PAR.USR Day 4
CUR.USR_Day_4 = PAR.USR_Day_4;

// CUR.USR Day 5 = PAR.USR Day 5
CUR.USR_Day_5 = PAR.USR_Day_5;

// CUR.USR Day 6 = PAR.USR Day 6
CUR.USR_Day_6 = PAR.USR_Day_6;

// CUR.USR Day 7 = PAR.USR Day 7
CUR.USR_Day_7 = PAR.USR_Day_7;

// CUR.USR Day 8 = PAR.USR Day 8
CUR.USR_Day_8 = PAR.USR_Day_8;

// LCL.Age Heading 1Beg Usr = CON.001
LCL.Age_Heading_1Beg_Usr = 001;

// LCL.Age Heading 1End Usr = PAR.Ageing Days Usr
LCL.Age_Heading_1End_Usr = PAR.Ageing_Days_Usr;

// LCL.Age Heading 2Beg Usr = LCL.Age Heading 1End Usr + CON.1
LCL.Age_Heading_2Beg_Usr = LCL.Age_Heading_1End_Usr + 1;

// LCL.Age Heading 2End Usr = PAR.Ageing Days Usr * CON.2 *
LCL.Age_Heading_2End_Usr = PAR.Ageing_Days_Usr * 2;

// LCL.Age Heading 3Beg Usr = LCL.Age Heading 2End Usr + CON.1
LCL.Age_Heading_3Beg_Usr = LCL.Age_Heading_2End_Usr + 1;

// LCL.Age Heading 3End Usr = PAR.Ageing Days Usr * CON.3 *
LCL.Age_Heading_3End_Usr = PAR.Ageing_Days_Usr * 3;

// LCL.Age Heading 4Beg Usr = LCL.Age Heading 3End Usr + CON.1
LCL.Age_Heading_4Beg_Usr = LCL.Age_Heading_3End_Usr + 1;

// LCL.Age Heading 4End Usr = PAR.Ageing Days Usr * CON.4 *
LCL.Age_Heading_4End_Usr = PAR.Ageing_Days_Usr * 4;

// LCL.Age Heading 5Beg Usr = LCL.Age Heading 4End Usr + CON.1
LCL.Age_Heading_5Beg_Usr = LCL.Age_Heading_4End_Usr + 1;

// LCL.Age Heading 5End Usr = PAR.Ageing Days Usr * CON.5 *
LCL.Age_Heading_5End_Usr = PAR.Ageing_Days_Usr * 5;

// LCL.Age Heading 6Beg Usr = LCL.Age Heading 5End Usr + CON.1
LCL.Age_Heading_6Beg_Usr = LCL.Age_Heading_5End_Usr + 1;

// LCL.Age Heading 6End Usr = PAR.Ageing Days Usr * CON.6 *
LCL.Age_Heading_6End_Usr = PAR.Ageing_Days_Usr * 6;

// LCL.Age Heading 7Beg Usr = LCL.Age Heading 6End Usr + CON.1
LCL.Age_Heading_7Beg_Usr = LCL.Age_Heading_6End_Usr + 1;

// LCL.Age Heading 7End Usr = PAR.Ageing Days Usr * CON.7 *
LCL.Age_Heading_7End_Usr = PAR.Ageing_Days_Usr * 7;

// LCL.Age Heading 8Beg Usr = LCL.Age Heading 7End Usr + CON.1
LCL.Age_Heading_8Beg_Usr = LCL.Age_Heading_7End_Usr + 1;

CASE;

// IF PAR.Ageing Days Usr is Only 1 day
IF PAR.Ageing_Days_Usr = 00001;

// CUR.Age Heading 1 USR = CON.   0
CUR.Age_Heading_1_USR = 0;

// CUR.Age Heading 2 USR = CON.   1
CUR.Age_Heading_2_USR = 1;

// CUR.Age Heading 3 USR = CON.   2
CUR.Age_Heading_3_USR = 2;

// CUR.Age Heading 4 USR = CON.   3
CUR.Age_Heading_4_USR = 3;

// CUR.Age Heading 5 USR = CON.   4
CUR.Age_Heading_5_USR = 4;

// CUR.Age Heading 6 USR = CON.   5
CUR.Age_Heading_6_USR = 5;

// CUR.Age Heading 7 USR = CON.   6
CUR.Age_Heading_7_USR = 6;

// CUR.Age Heading 8 USR = CON.   7
CUR.Age_Heading_8_USR = 7;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Age Heading Txt Dash = CON.-
LCL.Age_Heading_Txt_Dash = '-';

// LCL.Age Heading Txt Beg = CVTVAR(LCL.Age Heading 1Beg Usr)
LCL.Age_Heading_Txt_Beg = CVTVAR(LCL.Age_Heading_1Beg_Usr);

// LCL.Age Heading Txt End = CVTVAR(LCL.Age Heading 1End Usr)
LCL.Age_Heading_Txt_End = CVTVAR(LCL.Age_Heading_1End_Usr);

// CUR.Age Heading 1 USR = CONCAT(LCL.Age Heading Txt Beg,LCL.Age Heading Txt Dash,CON.*ZERO)
CUR.Age_Heading_1_USR = LCL.Age_Heading_Txt_Beg + LCL.Age_Heading_Txt_Dash (0);

// CUR.Age Heading 1 USR = CONCAT(CUR.Age Heading 1 USR,LCL.Age Heading Txt End,CON.*ZERO)
CUR.Age_Heading_1_USR = CUR.Age_Heading_1_USR + LCL.Age_Heading_Txt_End (*ZERO);

// LCL.Age Heading Txt Beg = CVTVAR(LCL.Age Heading 2Beg Usr)
LCL.Age_Heading_Txt_Beg = CVTVAR(LCL.Age_Heading_2Beg_Usr);

// LCL.Age Heading Txt End = CVTVAR(LCL.Age Heading 2End Usr)
LCL.Age_Heading_Txt_End = CVTVAR(LCL.Age_Heading_2End_Usr);

// CUR.Age Heading 2 USR = CONCAT(LCL.Age Heading Txt Beg,LCL.Age Heading Txt Dash,CON.*ZERO)
CUR.Age_Heading_2_USR = LCL.Age_Heading_Txt_Beg + LCL.Age_Heading_Txt_Dash (0);

// CUR.Age Heading 2 USR = CONCAT(CUR.Age Heading 2 USR,LCL.Age Heading Txt End,CON.*ZERO)
CUR.Age_Heading_2_USR = CUR.Age_Heading_2_USR + LCL.Age_Heading_Txt_End (*ZERO);

// LCL.Age Heading Txt Beg = CVTVAR(LCL.Age Heading 3Beg Usr)
LCL.Age_Heading_Txt_Beg = CVTVAR(LCL.Age_Heading_3Beg_Usr);

// LCL.Age Heading Txt End = CVTVAR(LCL.Age Heading 3End Usr)
LCL.Age_Heading_Txt_End = CVTVAR(LCL.Age_Heading_3End_Usr);

// CUR.Age Heading 3 USR = CONCAT(LCL.Age Heading Txt Beg,LCL.Age Heading Txt Dash,CON.*ZERO)
CUR.Age_Heading_3_USR = LCL.Age_Heading_Txt_Beg + LCL.Age_Heading_Txt_Dash (0);

// CUR.Age Heading 3 USR = CONCAT(CUR.Age Heading 3 USR,LCL.Age Heading Txt End,CON.*ZERO)
CUR.Age_Heading_3_USR = CUR.Age_Heading_3_USR + LCL.Age_Heading_Txt_End (*ZERO);

// LCL.Age Heading Txt Beg = CVTVAR(LCL.Age Heading 4Beg Usr)
LCL.Age_Heading_Txt_Beg = CVTVAR(LCL.Age_Heading_4Beg_Usr);

// LCL.Age Heading Txt End = CVTVAR(LCL.Age Heading 4End Usr)
LCL.Age_Heading_Txt_End = CVTVAR(LCL.Age_Heading_4End_Usr);

// CUR.Age Heading 4 USR = CONCAT(LCL.Age Heading Txt Beg,LCL.Age Heading Txt Dash,CON.*ZERO)
CUR.Age_Heading_4_USR = LCL.Age_Heading_Txt_Beg + LCL.Age_Heading_Txt_Dash (0);

// CUR.Age Heading 4 USR = CONCAT(CUR.Age Heading 4 USR,LCL.Age Heading Txt End,CON.*ZERO)
CUR.Age_Heading_4_USR = CUR.Age_Heading_4_USR + LCL.Age_Heading_Txt_End (*ZERO);

// LCL.Age Heading Txt Beg = CVTVAR(LCL.Age Heading 5Beg Usr)
LCL.Age_Heading_Txt_Beg = CVTVAR(LCL.Age_Heading_5Beg_Usr);

// LCL.Age Heading Txt End = CVTVAR(LCL.Age Heading 5End Usr)
LCL.Age_Heading_Txt_End = CVTVAR(LCL.Age_Heading_5End_Usr);

// CUR.Age Heading 5 USR = CONCAT(LCL.Age Heading Txt Beg,LCL.Age Heading Txt Dash,CON.*ZERO)
CUR.Age_Heading_5_USR = LCL.Age_Heading_Txt_Beg + LCL.Age_Heading_Txt_Dash (0);

// CUR.Age Heading 5 USR = CONCAT(CUR.Age Heading 5 USR,LCL.Age Heading Txt End,CON.*ZERO)
CUR.Age_Heading_5_USR = CUR.Age_Heading_5_USR + LCL.Age_Heading_Txt_End (*ZERO);

// LCL.Age Heading Txt Beg = CVTVAR(LCL.Age Heading 6Beg Usr)
LCL.Age_Heading_Txt_Beg = CVTVAR(LCL.Age_Heading_6Beg_Usr);

// LCL.Age Heading Txt End = CVTVAR(LCL.Age Heading 6End Usr)
LCL.Age_Heading_Txt_End = CVTVAR(LCL.Age_Heading_6End_Usr);

// CUR.Age Heading 6 USR = CONCAT(LCL.Age Heading Txt Beg,LCL.Age Heading Txt Dash,CON.*ZERO)
CUR.Age_Heading_6_USR = LCL.Age_Heading_Txt_Beg + LCL.Age_Heading_Txt_Dash (0);

// CUR.Age Heading 6 USR = CONCAT(CUR.Age Heading 6 USR,LCL.Age Heading Txt End,CON.*ZERO)
CUR.Age_Heading_6_USR = CUR.Age_Heading_6_USR + LCL.Age_Heading_Txt_End (*ZERO);

// CUR.Age Heading 7 USR = CON. 181-210
CUR.Age_Heading_7_USR = '181-210';

// LCL.Age Heading Txt Beg = CVTVAR(LCL.Age Heading 7Beg Usr)
LCL.Age_Heading_Txt_Beg = CVTVAR(LCL.Age_Heading_7Beg_Usr);

// LCL.Age Heading Txt End = CVTVAR(LCL.Age Heading 7End Usr)
LCL.Age_Heading_Txt_End = CVTVAR(LCL.Age_Heading_7End_Usr);

// CUR.Age Heading 7 USR = CONCAT(LCL.Age Heading Txt Beg,LCL.Age Heading Txt Dash,CON.*ZERO)
CUR.Age_Heading_7_USR = LCL.Age_Heading_Txt_Beg + LCL.Age_Heading_Txt_Dash (0);

// CUR.Age Heading 7 USR = CONCAT(CUR.Age Heading 7 USR,LCL.Age Heading Txt End,CON.*ZERO)
CUR.Age_Heading_7_USR = CUR.Age_Heading_7_USR + LCL.Age_Heading_Txt_End (*ZERO);

// LCL.Age Heading Txt Beg = CVTVAR(LCL.Age Heading 8Beg Usr)
LCL.Age_Heading_Txt_Beg = CVTVAR(LCL.Age_Heading_8Beg_Usr);

// CUR.Age Heading 8 USR = CONCAT(LCL.Age Heading Txt Beg,LCL.Age Heading Txt Dash,CON.*ZERO)
CUR.Age_Heading_8_USR = LCL.Age_Heading_Txt_Beg + LCL.Age_Heading_Txt_Dash (0);

// CUR.Age Heading 8 USR = CONCAT(CUR.Age Heading 8 USR,CON.--->,CON.*ZERO)
CUR.Age_Heading_8_USR = CUR.Age_Heading_8_USR + '--->' (*ZERO);

ENDIF;

// Print Company Number - 3 header format
PRINT Company Number - 3 header format;

ENDIF;

// SUPPRESSED PRINT Item Code header format

//?USER: On print of detail format

EXECUTE FUNCTION(Rtv Lot Tracking Flag RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1506123;
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Lot_Tracking_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?WRK fields are used for PA Reports and Screens
EXECUTE FUNCTION(Rtv Age Quantities RPT RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1823498;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(LCL.Job_Date_Usr);
PARAMETER(PAR.USR_Day_1);
PARAMETER(PAR.USR_Day_2);
PARAMETER(PAR.USR_Day_3);
PARAMETER(PAR.USR_Day_4);
PARAMETER(PAR.USR_Day_5);
PARAMETER(PAR.USR_Day_6);
PARAMETER(PAR.USR_Day_7);
PARAMETER(PAR.USR_Day_8);
PARAMETER(PAR.Quantity_Age_Day_1_USR);
PARAMETER(PAR.Quantity_Age_Day_2_USR);
PARAMETER(PAR.Quantity_Age_Day_3_USR);
PARAMETER(PAR.Quantity_Age_Day_4_USR);
PARAMETER(PAR.Quantity_Age_Day_5_USR);
PARAMETER(PAR.Quantity_Age_Day_6_USR);
PARAMETER(PAR.Quantity_Age_Day_7_USR);
PARAMETER(PAR.Quantity_Age_Day_8_USR);
PARAMETER(PAR.Quantity_On_Hand_USR);
PARAMETER(LCL.PA_or_Aged_Inv_Usage_USR);
PARAMETER(PAR.Quantity_on_Hold_USR);
PARAMETER(PAR.Quantity_on_Hand_UOM1);
PARAMETER(PAR.Include_Todays_Trans);
PARAMETER(PAR.Lot_Tracking_Flag);
PARAMETER(WRK.Avail_Ship_Date_2_USR);
PARAMETER(WRK.Avail_Ship_Date_3_USR);
PARAMETER(WRK.Avail_Ship_Date_4_USR);
PARAMETER(WRK.Avail_Ship_Date_5_USR);
PARAMETER(WRK.Avail_Ship_Date_6_USR);
PARAMETER(WRK.Avail_Ship_Date_7_USR);
PARAMETER(WRK.Avail_Ship_Date_8_USR);
PARAMETER(WRK.Avail_Ship_Date_9_USR);
PARAMETER(WRK.Avail_Ship_Date_10_USR);
PARAMETER(WRK.Avail_Ship_Date_11_USR);
PARAMETER(WRK.Avail_Ship_Date_12_USR);
PARAMETER(WRK.Avail_Ship_Date_13_USR);
PARAMETER(WRK.Avail_Ship_Date_14_USR);
PARAMETER(WRK.Day_2_Inventory_USR);
PARAMETER(WRK.Day_3_Inventory_USR);
PARAMETER(WRK.Day_4_Inventory_USR);
PARAMETER(WRK.Day_5_Inventory_USR);
PARAMETER(WRK.Day_6_Inventory_USR);
PARAMETER(WRK.Day_7_Inventory_USR);
PARAMETER(WRK.Day_8_Inventory_USR);
PARAMETER(WRK.Day_9_Inventory_USR);
PARAMETER(WRK.Day_10_Inventory_USR);
PARAMETER(WRK.Day_11_Inventory_USR);
PARAMETER(WRK.Day_12_Inventory_USR);
PARAMETER(WRK.Day_13_Inventory_USR);
PARAMETER(WRK.Day_14_Inventory_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 EXECUTE FUNCTION(Rtv Chill Time        RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1304403;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Fresh_Chilling_Time);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?USER: Process Data record

 CASE;

 // IF PAR.Lot Tracking Flag is yes
 IF PAR.Lot_Tracking_Flag = 'Y';

 //?5/21/2007 SLM -- * Create a copy and made changes
 EXECUTE FUNCTION(Rtv Age Qtys - Lot RptRT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC1823647;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(PAR.USR_Day_1);
 PARAMETER(PAR.USR_Day_2);
 PARAMETER(PAR.USR_Day_3);
 PARAMETER(PAR.USR_Day_4);
 PARAMETER(PAR.USR_Day_5);
 PARAMETER(PAR.USR_Day_6);
 PARAMETER(PAR.USR_Day_7);
 PARAMETER(PAR.USR_Day_8);
 PARAMETER(PAR.Quantity_Age_Day_1_USR);
 PARAMETER(PAR.Quantity_Age_Day_2_USR);
 PARAMETER(PAR.Quantity_Age_Day_3_USR);
 PARAMETER(PAR.Quantity_Age_Day_4_USR);
 PARAMETER(PAR.Quantity_Age_Day_5_USR);
 PARAMETER(PAR.Quantity_Age_Day_6_USR);
 PARAMETER(PAR.Quantity_Age_Day_7_USR);
 PARAMETER(PAR.Quantity_Age_Day_8_USR);
 PARAMETER(PAR.Quantity_On_Hand_USR);
 PARAMETER(PAR.Quantity_on_Hold_USR);
 PARAMETER(PAR.Quantity_on_Hand_UOM1);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.ILL Status is Available
  IF DB1.ILL_Status = 'A';

  //?Put Qtys in correct bucket
  CASE;

  // IF DB1.ILL Avail Ship Date GT PAR.Job Date Usr
  IF DB1.ILL_Avail_Ship_Date > PAR.Job_Date_Usr;

  //?TPA 09/26/07 - Changed above line to GT since it is a bucket for
  //?               anything 'After' the job date.
  // PAR.Quantity on Hand - U/M1 = PAR.Quantity on Hand - U/M1 + DB1.ILL Item Qty On-
  PAR.Quantity_on_Hand_UOM1 = PAR.Quantity_on_Hand_UOM1 + DB1.ILL_Item_Qty_On_Hand;

  // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.ILL Item Qty On-Ha
  PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

  //?TPA 09/26/07 - Changed all bucket tests below to LE column bucket
  //?               and GT next column bucket.
  //?Put Qtys in correct bucket
  // IF DB1.ILL Avail Ship Date LE PAR.USR Day 1
  IF DB1.ILL_Avail_Ship_Date <= PAR.USR_Day_1;

  // AND DB1.ILL Avail Ship Date GT PAR.USR Day 2
  AND DB1.ILL_Avail_Ship_Date > PAR.USR_Day_2;

  // PAR.Quantity Age Day 1   USR = PAR.Quantity Age Day 1   USR + DB1.ILL Item Qty O
  PAR.Quantity_Age_Day_1_USR = PAR.Quantity_Age_Day_1_USR + DB1.ILL_Item_Qty_On_Hand;

  // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.ILL Item Qty On-Ha
  PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Put Qtys in correct bucket
  // IF DB1.ILL Avail Ship Date LE PAR.USR Day 2
  IF DB1.ILL_Avail_Ship_Date <= PAR.USR_Day_2;

  // AND DB1.ILL Avail Ship Date GT PAR.USR Day 3
  AND DB1.ILL_Avail_Ship_Date > PAR.USR_Day_3;

  // PAR.Quantity Age Day 2   USR = PAR.Quantity Age Day 2   USR + DB1.ILL Item Qty O
  PAR.Quantity_Age_Day_2_USR = PAR.Quantity_Age_Day_2_USR + DB1.ILL_Item_Qty_On_Hand;

  // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.ILL Item Qty On-Ha
  PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Put Qtys in correct bucket
  // IF DB1.ILL Avail Ship Date LE PAR.USR Day 3
  IF DB1.ILL_Avail_Ship_Date <= PAR.USR_Day_3;

  // AND DB1.ILL Avail Ship Date GT PAR.USR Day 4
  AND DB1.ILL_Avail_Ship_Date > PAR.USR_Day_4;

  // PAR.Quantity Age Day 3   USR = PAR.Quantity Age Day 3   USR + DB1.ILL Item Qty O
  PAR.Quantity_Age_Day_3_USR = PAR.Quantity_Age_Day_3_USR + DB1.ILL_Item_Qty_On_Hand;

  // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.ILL Item Qty On-Ha
  PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Put Qtys in correct bucket
  // IF DB1.ILL Avail Ship Date LE PAR.USR Day 4
  IF DB1.ILL_Avail_Ship_Date <= PAR.USR_Day_4;

  // AND DB1.ILL Avail Ship Date GT PAR.USR Day 5
  AND DB1.ILL_Avail_Ship_Date > PAR.USR_Day_5;

  // PAR.Quantity Age Day 4   USR = PAR.Quantity Age Day 4   USR + DB1.ILL Item Qty O
  PAR.Quantity_Age_Day_4_USR = PAR.Quantity_Age_Day_4_USR + DB1.ILL_Item_Qty_On_Hand;

  // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.ILL Item Qty On-Ha
  PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Put Qtys in correct bucket
  // IF DB1.ILL Avail Ship Date LE PAR.USR Day 5
  IF DB1.ILL_Avail_Ship_Date <= PAR.USR_Day_5;

  // AND DB1.ILL Avail Ship Date GT PAR.USR Day 6
  AND DB1.ILL_Avail_Ship_Date > PAR.USR_Day_6;

  // PAR.Quantity Age Day 5   USR = PAR.Quantity Age Day 5   USR + DB1.ILL Item Qty O
  PAR.Quantity_Age_Day_5_USR = PAR.Quantity_Age_Day_5_USR + DB1.ILL_Item_Qty_On_Hand;

  // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.ILL Item Qty On-Ha
  PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Put Qtys in correct bucket
  // IF DB1.ILL Avail Ship Date LE PAR.USR Day 6
  IF DB1.ILL_Avail_Ship_Date <= PAR.USR_Day_6;

  // AND DB1.ILL Avail Ship Date GT PAR.USR Day 7
  AND DB1.ILL_Avail_Ship_Date > PAR.USR_Day_7;

  // PAR.Quantity Age Day 6   USR = PAR.Quantity Age Day 6   USR + DB1.ILL Item Qty O
  PAR.Quantity_Age_Day_6_USR = PAR.Quantity_Age_Day_6_USR + DB1.ILL_Item_Qty_On_Hand;

  // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.ILL Item Qty On-Ha
  PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Put Qtys in correct bucket
  // IF DB1.ILL Avail Ship Date LE PAR.USR Day 7
  IF DB1.ILL_Avail_Ship_Date <= PAR.USR_Day_7;

  // AND DB1.ILL Avail Ship Date GT PAR.USR Day 8
  AND DB1.ILL_Avail_Ship_Date > PAR.USR_Day_8;

  // PAR.Quantity Age Day 7   USR = PAR.Quantity Age Day 7   USR + DB1.ILL Item Qty O
  PAR.Quantity_Age_Day_7_USR = PAR.Quantity_Age_Day_7_USR + DB1.ILL_Item_Qty_On_Hand;

  // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.ILL Item Qty On-Ha
  PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

  //?Put Qtys in correct bucket
  // IF DB1.ILL Avail Ship Date LE PAR.USR Day 8
  IF DB1.ILL_Avail_Ship_Date <= PAR.USR_Day_8;

  // PAR.Quantity Age Day 8   USR = PAR.Quantity Age Day 8   USR + DB1.ILL Item Qty O
  PAR.Quantity_Age_Day_8_USR = PAR.Quantity_Age_Day_8_USR + DB1.ILL_Item_Qty_On_Hand;

  // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.ILL Item Qty On-Ha
  PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Quantity on Hold     USR = PAR.Quantity on Hold     USR + DB1.ILL Item Qty O
  PAR.Quantity_on_Hold_USR = PAR.Quantity_on_Hold_USR + DB1.ILL_Item_Qty_On_Hand;

  ENDIF;

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?5/22 SLM - PURVA AND SUSAN RESTRUCTURE DUE TO
 //?           FACT THAT THIS WAS WORKING FOR 1 DAY ONLY
 //?           NOT A RANAGE OF DATES.
 //?Check record selection for include todays transactions
 CASE;

 // IF PAR.Include Todays Trans is no
 IF PAR.Include_Todays_Trans = 'N';

 // AND PAR.USR Day 1 EQ DB1.Production Date
 AND PAR.USR_Day_1 = DB1.Production_Date;

 // PAR.Record Selected       USR = CND.no
 PAR.Record_Selected_USR = 'N';

 //?Check record selection for include todays transactions
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Record Selected       USR = CND.yes
 PAR.Record_Selected_USR = 'Y';

 ENDIF;

 //?05/21/2007 change this from one day to range of dates
 //?If record selected is yes then process
 CASE;

 // IF PAR.Record Selected       USR is yes
 IF PAR.Record_Selected_USR = 'Y';

 //?Put Qtys in correct bucket
 CASE;

 // IF DB1.Label Date GT PAR.Job Date Usr
 IF DB1.Label_Date > PAR.Job_Date_Usr;

 //?TPA 09/26/07 - Changed above line to GT since it is a bucket for
 //?               anything 'After' the current date.
 // PAR.Quantity on Hand - U/M1 = PAR.Quantity on Hand - U/M1 + DB1.Quantity on Hand
 PAR.Quantity_on_Hand_UOM1 = PAR.Quantity_on_Hand_UOM1 + DB1.Quantity_on_Hand_UOM1;

 // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.Quantity on Hand -
 PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.Quantity_on_Hand_UOM1;

 //?TPA 09/26/07 - Changed all bucket tests below to LE column bucket
 //?               and GT next column bucket.
 //?Put Qtys in correct bucket
 // IF DB1.Label Date LE PAR.USR Day 1
 IF DB1.Label_Date <= PAR.USR_Day_1;

 // AND DB1.Label Date GT PAR.USR Day 2
 AND DB1.Label_Date > PAR.USR_Day_2;

 // PAR.Quantity Age Day 1   USR = PAR.Quantity Age Day 1   USR + DB1.Quantity on Ha
 PAR.Quantity_Age_Day_1_USR = PAR.Quantity_Age_Day_1_USR + DB1.Quantity_on_Hand_UOM1;

 // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.Quantity on Hand -
 PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.Quantity_on_Hand_UOM1;

 //?Put Qtys in correct bucket
 // IF DB1.Label Date LE PAR.USR Day 2
 IF DB1.Label_Date <= PAR.USR_Day_2;

 // AND DB1.Label Date GT PAR.USR Day 3
 AND DB1.Label_Date > PAR.USR_Day_3;

 // PAR.Quantity Age Day 2   USR = PAR.Quantity Age Day 2   USR + DB1.Quantity on Ha
 PAR.Quantity_Age_Day_2_USR = PAR.Quantity_Age_Day_2_USR + DB1.Quantity_on_Hand_UOM1;

 // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.Quantity on Hand -
 PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.Quantity_on_Hand_UOM1;

 //?Put Qtys in correct bucket
 // IF DB1.Label Date LE PAR.USR Day 3
 IF DB1.Label_Date <= PAR.USR_Day_3;

 // AND DB1.Label Date GT PAR.USR Day 4
 AND DB1.Label_Date > PAR.USR_Day_4;

 // PAR.Quantity Age Day 3   USR = PAR.Quantity Age Day 3   USR + DB1.Quantity on Ha
 PAR.Quantity_Age_Day_3_USR = PAR.Quantity_Age_Day_3_USR + DB1.Quantity_on_Hand_UOM1;

 // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.Quantity on Hand -
 PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.Quantity_on_Hand_UOM1;

 //?Put Qtys in correct bucket
 // IF DB1.Label Date LE PAR.USR Day 4
 IF DB1.Label_Date <= PAR.USR_Day_4;

 // AND DB1.Label Date GT PAR.USR Day 5
 AND DB1.Label_Date > PAR.USR_Day_5;

 // PAR.Quantity Age Day 4   USR = PAR.Quantity Age Day 4   USR + DB1.Quantity on Ha
 PAR.Quantity_Age_Day_4_USR = PAR.Quantity_Age_Day_4_USR + DB1.Quantity_on_Hand_UOM1;

 // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.Quantity on Hand -
 PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.Quantity_on_Hand_UOM1;

 //?Put Qtys in correct bucket
 // IF DB1.Label Date LE PAR.USR Day 5
 IF DB1.Label_Date <= PAR.USR_Day_5;

 // AND DB1.Label Date GT PAR.USR Day 6
 AND DB1.Label_Date > PAR.USR_Day_6;

 // PAR.Quantity Age Day 5   USR = PAR.Quantity Age Day 5   USR + DB1.Quantity on Ha
 PAR.Quantity_Age_Day_5_USR = PAR.Quantity_Age_Day_5_USR + DB1.Quantity_on_Hand_UOM1;

 // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.Quantity on Hand -
 PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.Quantity_on_Hand_UOM1;

 //?Put Qtys in correct bucket
 // IF DB1.Label Date LE PAR.USR Day 6
 IF DB1.Label_Date <= PAR.USR_Day_6;

 // AND DB1.Label Date GT PAR.USR Day 7
 AND DB1.Label_Date > PAR.USR_Day_7;

 // PAR.Quantity Age Day 6   USR = PAR.Quantity Age Day 6   USR + DB1.Quantity on Ha
 PAR.Quantity_Age_Day_6_USR = PAR.Quantity_Age_Day_6_USR + DB1.Quantity_on_Hand_UOM1;

 // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.Quantity on Hand -
 PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.Quantity_on_Hand_UOM1;

 //?Put Qtys in correct bucket
 // IF DB1.Label Date LE PAR.USR Day 7
 IF DB1.Label_Date <= PAR.USR_Day_7;

 // AND DB1.Label Date GT PAR.USR Day 8
 AND DB1.Label_Date > PAR.USR_Day_8;

 // PAR.Quantity Age Day 7   USR = PAR.Quantity Age Day 7   USR + DB1.Quantity on Ha
 PAR.Quantity_Age_Day_7_USR = PAR.Quantity_Age_Day_7_USR + DB1.Quantity_on_Hand_UOM1;

 // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.Quantity on Hand -
 PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.Quantity_on_Hand_UOM1;

 //?Put Qtys in correct bucket
 // IF DB1.Label Date LE PAR.USR Day 8
 IF DB1.Label_Date <= PAR.USR_Day_8;

 // PAR.Quantity Age Day 8   USR = PAR.Quantity Age Day 8   USR + DB1.Quantity on Ha
 PAR.Quantity_Age_Day_8_USR = PAR.Quantity_Age_Day_8_USR + DB1.Quantity_on_Hand_UOM1;

 // PAR.Quantity On Hand   USR = PAR.Quantity On Hand   USR + DB1.Quantity on Hand -
 PAR.Quantity_On_Hand_USR = PAR.Quantity_On_Hand_USR + DB1.Quantity_on_Hand_UOM1;

 ENDIF;

 ENDIF;

 ENDIF;

}


//?If total is negative, make zero
CASE;

// IF PAR.Quantity On Hand   USR is Less Than Zero
IF PAR.Quantity_On_Hand_USR < *ZERO;

// PAR.Quantity On Hand   USR = CON.*ZERO
PAR.Quantity_On_Hand_USR = *ZERO;

ENDIF;

//?If After present day is negative, make zero
CASE;

// IF PAR.Quantity on Hand - U/M1 is Less than zero
IF PAR.Quantity_on_Hand_UOM1 < *ZERO;

// PAR.Quantity on Hand - U/M1 = CON.*ZERO
PAR.Quantity_on_Hand_UOM1 = *ZERO;

ENDIF;

//?If day 1 is negative, make zero
CASE;

// IF PAR.Quantity Age Day 1   USR is LT Zero
IF PAR.Quantity_Age_Day_1_USR < *ZERO;

// PAR.Quantity Age Day 1   USR = CON.*ZERO
PAR.Quantity_Age_Day_1_USR = *ZERO;

ENDIF;

//?If day 2 is negative, make zero
CASE;

// IF PAR.Quantity Age Day 2   USR is LT Zero
IF PAR.Quantity_Age_Day_2_USR < *ZERO;

// PAR.Quantity Age Day 2   USR = CON.*ZERO
PAR.Quantity_Age_Day_2_USR = *ZERO;

ENDIF;

//?If day 3 is negative, make zero
CASE;

// IF PAR.Quantity Age Day 3   USR is LT Zero
IF PAR.Quantity_Age_Day_3_USR < *ZERO;

// PAR.Quantity Age Day 3   USR = CON.*ZERO
PAR.Quantity_Age_Day_3_USR = *ZERO;

ENDIF;

//?If day 4 is negative, make zero
CASE;

// IF PAR.Quantity Age Day 4   USR is LT Zero
IF PAR.Quantity_Age_Day_4_USR < *ZERO;

// PAR.Quantity Age Day 4   USR = CON.*ZERO
PAR.Quantity_Age_Day_4_USR = *ZERO;

ENDIF;

//?If day 5 is negative, make zero
CASE;

// IF PAR.Quantity Age Day 5   USR is LT Zero
IF PAR.Quantity_Age_Day_5_USR < *ZERO;

// PAR.Quantity Age Day 5   USR = CON.*ZERO
PAR.Quantity_Age_Day_5_USR = *ZERO;

ENDIF;

//?If day 6 is negative, make zero
CASE;

// IF PAR.Quantity Age Day 6   USR is LT Zero
IF PAR.Quantity_Age_Day_6_USR < *ZERO;

// PAR.Quantity Age Day 6   USR = CON.*ZERO
PAR.Quantity_Age_Day_6_USR = *ZERO;

ENDIF;

//?If day 7 is negative, make zero
CASE;

// IF PAR.Quantity Age Day 7   USR is LT Zero
IF PAR.Quantity_Age_Day_7_USR < *ZERO;

// PAR.Quantity Age Day 7   USR = CON.*ZERO
PAR.Quantity_Age_Day_7_USR = *ZERO;

ENDIF;

//?If day 8 is negative, make zero
CASE;

// IF PAR.Quantity Age Day 8   USR is LT Zero
IF PAR.Quantity_Age_Day_8_USR < *ZERO;

// PAR.Quantity Age Day 8   USR = CON.*ZERO
PAR.Quantity_Age_Day_8_USR = *ZERO;

ENDIF;

//?If on hold is negative, make zero
CASE;

// IF PAR.Quantity on Hold     USR is LT Zero
IF PAR.Quantity_on_Hold_USR < *ZERO;

// PAR.Quantity on Hold     USR = CON.*ZERO
PAR.Quantity_on_Hold_USR = *ZERO;

ENDIF;

// NXT.Quantity Total S = NXT.Quantity Total S + PAR.Quantity On Hand   USR
NXT.Quantity_Total_S = NXT.Quantity_Total_S + PAR.Quantity_On_Hand_USR;

// NXT.Quantity on Hand - U/M1 = NXT.Quantity on Hand - U/M1 + PAR.Quantity on Hand
NXT.Quantity_on_Hand_UOM1 = NXT.Quantity_on_Hand_UOM1 + PAR.Quantity_on_Hand_UOM1;

// NXT.Quantity Age Day 1   USR = NXT.Quantity Age Day 1   USR + PAR.Quantity Age D
NXT.Quantity_Age_Day_1_USR = NXT.Quantity_Age_Day_1_USR + PAR.Quantity_Age_Day_1_USR;

// NXT.Quantity Age Day 2   USR = NXT.Quantity Age Day 2   USR + PAR.Quantity Age D
NXT.Quantity_Age_Day_2_USR = NXT.Quantity_Age_Day_2_USR + PAR.Quantity_Age_Day_2_USR;

// NXT.Quantity Age Day 3   USR = NXT.Quantity Age Day 3   USR + PAR.Quantity Age D
NXT.Quantity_Age_Day_3_USR = NXT.Quantity_Age_Day_3_USR + PAR.Quantity_Age_Day_3_USR;

// NXT.Quantity Age Day 4   USR = NXT.Quantity Age Day 4   USR + PAR.Quantity Age D
NXT.Quantity_Age_Day_4_USR = NXT.Quantity_Age_Day_4_USR + PAR.Quantity_Age_Day_4_USR;

// NXT.Quantity Age Day 5   USR = NXT.Quantity Age Day 5   USR + PAR.Quantity Age D
NXT.Quantity_Age_Day_5_USR = NXT.Quantity_Age_Day_5_USR + PAR.Quantity_Age_Day_5_USR;

// NXT.Quantity Age Day 6   USR = NXT.Quantity Age Day 6   USR + PAR.Quantity Age D
NXT.Quantity_Age_Day_6_USR = NXT.Quantity_Age_Day_6_USR + PAR.Quantity_Age_Day_6_USR;

// NXT.Quantity Age Day 7   USR = NXT.Quantity Age Day 7   USR + PAR.Quantity Age D
NXT.Quantity_Age_Day_7_USR = NXT.Quantity_Age_Day_7_USR + PAR.Quantity_Age_Day_7_USR;

// NXT.Quantity Age Day 8   USR = NXT.Quantity Age Day 8   USR + PAR.Quantity Age D
NXT.Quantity_Age_Day_8_USR = NXT.Quantity_Age_Day_8_USR + PAR.Quantity_Age_Day_8_USR;

// NXT.Quantity on Hold 9.2  USR = NXT.Quantity on Hold 9.2  USR + PAR.Quantity on
NXT.Quantity_on_Hold_9_2_USR = NXT.Quantity_on_Hold_9_2_USR + PAR.Quantity_on_Hold_USR;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

//?USER: Print required level totals

CASE;

IF NEW Item_Code;
EXECUTE FUNCTION(Rtv Descriptions      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1140665;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Item_Description_18_USR);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(WRK.UOM_Primary);
PARAMETER(WRK.UOM_Second);
PARAMETER(WRK.UOM_Third);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.Prt Non-Zero Qty Only USR is yes
IF PAR.Prt_Non_Zero_Qty_Only_USR = 'Y';

// AND CUR.Quantity Total S is Less than or equal zero
AND CUR.Quantity_Total_S <= *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

// Print Item Code totals format
PRINT Item Code totals format;

// NXT.Quantity Total S = NXT.Quantity Total S + CUR.Quantity Total S
NXT.Quantity_Total_S = NXT.Quantity_Total_S + CUR.Quantity_Total_S;

// NXT.Quantity on Hand - U/M1 = NXT.Quantity on Hand - U/M1 + CUR.Quantity on Hand
NXT.Quantity_on_Hand_UOM1 = NXT.Quantity_on_Hand_UOM1 + CUR.Quantity_on_Hand_UOM1;

// NXT.Quantity Age Day 1   USR = NXT.Quantity Age Day 1   USR + CUR.Quantity Age D
NXT.Quantity_Age_Day_1_USR = NXT.Quantity_Age_Day_1_USR + CUR.Quantity_Age_Day_1_USR;

// NXT.Quantity Age Day 2   USR = NXT.Quantity Age Day 2   USR + CUR.Quantity Age D
NXT.Quantity_Age_Day_2_USR = NXT.Quantity_Age_Day_2_USR + CUR.Quantity_Age_Day_2_USR;

// NXT.Quantity Age Day 3   USR = NXT.Quantity Age Day 3   USR + CUR.Quantity Age D
NXT.Quantity_Age_Day_3_USR = NXT.Quantity_Age_Day_3_USR + CUR.Quantity_Age_Day_3_USR;

// NXT.Quantity Age Day 4   USR = NXT.Quantity Age Day 4   USR + CUR.Quantity Age D
NXT.Quantity_Age_Day_4_USR = NXT.Quantity_Age_Day_4_USR + CUR.Quantity_Age_Day_4_USR;

// NXT.Quantity Age Day 5   USR = NXT.Quantity Age Day 5   USR + CUR.Quantity Age D
NXT.Quantity_Age_Day_5_USR = NXT.Quantity_Age_Day_5_USR + CUR.Quantity_Age_Day_5_USR;

// NXT.Quantity Age Day 6   USR = NXT.Quantity Age Day 6   USR + CUR.Quantity Age D
NXT.Quantity_Age_Day_6_USR = NXT.Quantity_Age_Day_6_USR + CUR.Quantity_Age_Day_6_USR;

// NXT.Quantity Age Day 7   USR = NXT.Quantity Age Day 7   USR + CUR.Quantity Age D
NXT.Quantity_Age_Day_7_USR = NXT.Quantity_Age_Day_7_USR + CUR.Quantity_Age_Day_7_USR;

// NXT.Quantity Age Day 8   USR = NXT.Quantity Age Day 8   USR + CUR.Quantity Age D
NXT.Quantity_Age_Day_8_USR = NXT.Quantity_Age_Day_8_USR + CUR.Quantity_Age_Day_8_USR;

// NXT.Quantity on Hold 9.2  USR = NXT.Quantity on Hold 9.2  USR + CUR.Quantity on
NXT.Quantity_on_Hold_9_2_USR = NXT.Quantity_on_Hold_9_2_USR                                        +
+ CUR.Quantity_on_Hold_9_2_USR;

//?Add quantities into appropiate totals depending on U/M
CASE;

// IF WRK.U/M - Primary is Combos
IF WRK.UOM_Primary = 'CB';

// NXT.Combos Total Quantity = NXT.Combos Total Quantity + CUR.Quantity Total S
NXT.Combos_Total_Quantity = NXT.Combos_Total_Quantity + CUR.Quantity_Total_S;

// NXT.Combos After Date Qty = NXT.Combos After Date Qty + CUR.Quantity on Hand - U
NXT.Combos_After_Date_Qty = NXT.Combos_After_Date_Qty + CUR.Quantity_on_Hand_UOM1;

// NXT.Combos Day 1 Quantity = NXT.Combos Day 1 Quantity + CUR.Quantity Age Day 1
NXT.Combos_Day_1_Quantity = NXT.Combos_Day_1_Quantity + CUR.Quantity_Age_Day_1_USR;

// NXT.Combos Day 2 Quantity = NXT.Combos Day 2 Quantity + CUR.Quantity Age Day 2
NXT.Combos_Day_2_Quantity = NXT.Combos_Day_2_Quantity + CUR.Quantity_Age_Day_2_USR;

// NXT.Combos Day 3 Quantity = NXT.Combos Day 3 Quantity + CUR.Quantity Age Day 3
NXT.Combos_Day_3_Quantity = NXT.Combos_Day_3_Quantity + CUR.Quantity_Age_Day_3_USR;

// NXT.Combos Day 4 Quantity = NXT.Combos Day 4 Quantity + CUR.Quantity Age Day 4
NXT.Combos_Day_4_Quantity = NXT.Combos_Day_4_Quantity + CUR.Quantity_Age_Day_4_USR;

// NXT.Combos Day 5 Quantity = NXT.Combos Day 5 Quantity + CUR.Quantity Age Day 5
NXT.Combos_Day_5_Quantity = NXT.Combos_Day_5_Quantity + CUR.Quantity_Age_Day_5_USR;

// NXT.Combos Day 6 Quantity = NXT.Combos Day 6 Quantity + CUR.Quantity Age Day 6
NXT.Combos_Day_6_Quantity = NXT.Combos_Day_6_Quantity + CUR.Quantity_Age_Day_6_USR;

// NXT.Combos Day 7 Quantity = NXT.Combos Day 7 Quantity + CUR.Quantity Age Day 7
NXT.Combos_Day_7_Quantity = NXT.Combos_Day_7_Quantity + CUR.Quantity_Age_Day_7_USR;

// NXT.Combos Over Date Quantity = NXT.Combos Over Date Quantity + CUR.Quantity Age
NXT.Combos_Over_Date_Quantity = NXT.Combos_Over_Date_Quantity                                      +
+ CUR.Quantity_Age_Day_8_USR;

// NXT.Combos on Hold       USR = NXT.Combos on Hold       USR + CUR.Quantity on Ho
NXT.Combos_on_Hold_USR = NXT.Combos_on_Hold_USR + CUR.Quantity_on_Hold_9_2_USR;

//?Add quantities into appropiate totals depending on U/M
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF WRK.U/M - Primary is EQ Boxes
IF WRK.UOM_Primary = 'BX';

// NXT.Boxes Total Quantity = NXT.Boxes Total Quantity + CUR.Quantity Total S
NXT.Boxes_Total_Quantity = NXT.Boxes_Total_Quantity + CUR.Quantity_Total_S;

// NXT.Boxes After Date Quantity = NXT.Boxes After Date Quantity + CUR.Quantity on
NXT.Boxes_After_Date_Quantity = NXT.Boxes_After_Date_Quantity                                      +
+ CUR.Quantity_on_Hand_UOM1;

// NXT.Boxes Day 1 Quantity = NXT.Boxes Day 1 Quantity + CUR.Quantity Age Day 1   U
NXT.Boxes_Day_1_Quantity = NXT.Boxes_Day_1_Quantity + CUR.Quantity_Age_Day_1_USR;

// NXT.Boxes Day 2 Quantity = NXT.Boxes Day 2 Quantity + CUR.Quantity Age Day 2   U
NXT.Boxes_Day_2_Quantity = NXT.Boxes_Day_2_Quantity + CUR.Quantity_Age_Day_2_USR;

// NXT.Boxes Day 3 Quantity = NXT.Boxes Day 3 Quantity + CUR.Quantity Age Day 3   U
NXT.Boxes_Day_3_Quantity = NXT.Boxes_Day_3_Quantity + CUR.Quantity_Age_Day_3_USR;

// NXT.Boxes Day 4 Quantity = NXT.Boxes Day 4 Quantity + CUR.Quantity Age Day 4   U
NXT.Boxes_Day_4_Quantity = NXT.Boxes_Day_4_Quantity + CUR.Quantity_Age_Day_4_USR;

// NXT.Boxes Day 5 Quantity = NXT.Boxes Day 5 Quantity + CUR.Quantity Age Day 5   U
NXT.Boxes_Day_5_Quantity = NXT.Boxes_Day_5_Quantity + CUR.Quantity_Age_Day_5_USR;

// NXT.Boxes Day 6 Quantity = NXT.Boxes Day 6 Quantity + CUR.Quantity Age Day 6   U
NXT.Boxes_Day_6_Quantity = NXT.Boxes_Day_6_Quantity + CUR.Quantity_Age_Day_6_USR;

// NXT.Boxes Day 7 Quantity = NXT.Boxes Day 7 Quantity + CUR.Quantity Age Day 7   U
NXT.Boxes_Day_7_Quantity = NXT.Boxes_Day_7_Quantity + CUR.Quantity_Age_Day_7_USR;

// NXT.Boxes Over Date Quantity = NXT.Boxes Over Date Quantity + CUR.Quantity Age D
NXT.Boxes_Over_Date_Quantity = NXT.Boxes_Over_Date_Quantity + CUR.Quantity_Age_Day_8_USR;

// NXT.Boxes on Hold        USR = NXT.Boxes on Hold        USR + CUR.Quantity on Ho
NXT.Boxes_on_Hold_USR = NXT.Boxes_on_Hold_USR + CUR.Quantity_on_Hold_9_2_USR;

// IF *OTHERWISE
IF *OTHERWISE;

// NXT.Other Total Quantity = NXT.Other Total Quantity + CUR.Quantity Total S
NXT.Other_Total_Quantity = NXT.Other_Total_Quantity + CUR.Quantity_Total_S;

// NXT.Other After Date Quantity = NXT.Other After Date Quantity + CUR.Quantity on
NXT.Other_After_Date_Quantity = NXT.Other_After_Date_Quantity                                      +
+ CUR.Quantity_on_Hand_UOM1;

// NXT.Other Day 1 Quantity = NXT.Other Day 1 Quantity + CUR.Quantity Age Day 1   U
NXT.Other_Day_1_Quantity = NXT.Other_Day_1_Quantity + CUR.Quantity_Age_Day_1_USR;

// NXT.Other Day 2 Quantity = NXT.Other Day 2 Quantity + CUR.Quantity Age Day 2   U
NXT.Other_Day_2_Quantity = NXT.Other_Day_2_Quantity + CUR.Quantity_Age_Day_2_USR;

// NXT.Other Day 3 Quantity = NXT.Other Day 3 Quantity + CUR.Quantity Age Day 3   U
NXT.Other_Day_3_Quantity = NXT.Other_Day_3_Quantity + CUR.Quantity_Age_Day_3_USR;

// NXT.Other Day 4 Quantity = NXT.Other Day 4 Quantity + CUR.Quantity Age Day 4   U
NXT.Other_Day_4_Quantity = NXT.Other_Day_4_Quantity + CUR.Quantity_Age_Day_4_USR;

// NXT.Other Day 5 Quantity = NXT.Other Day 5 Quantity + CUR.Quantity Age Day 5   U
NXT.Other_Day_5_Quantity = NXT.Other_Day_5_Quantity + CUR.Quantity_Age_Day_5_USR;

// NXT.Other Day 6 Quantity = NXT.Other Day 6 Quantity + CUR.Quantity Age Day 6   U
NXT.Other_Day_6_Quantity = NXT.Other_Day_6_Quantity + CUR.Quantity_Age_Day_6_USR;

// NXT.Other Day 7 Quantity = NXT.Other Day 7 Quantity + CUR.Quantity Age Day 7   U
NXT.Other_Day_7_Quantity = NXT.Other_Day_7_Quantity + CUR.Quantity_Age_Day_7_USR;

// NXT.Other Over Date Quantity = NXT.Other Over Date Quantity + CUR.Quantity Age D
NXT.Other_Over_Date_Quantity = NXT.Other_Over_Date_Quantity + CUR.Quantity_Age_Day_8_USR;

// NXT.Other on Hold        USR = NXT.Other on Hold        USR + CUR.Quantity on Ho
NXT.Other_on_Hold_USR = NXT.Other_on_Hold_USR + CUR.Quantity_on_Hold_9_2_USR;

ENDIF;

ENDIF;

ENDIF;

CASE;

IF NEW Company_Number;
CASE;

// IF CUR.Combos Total Quantity is Equal to zero
IF CUR.Combos_Total_Quantity = *ZERO;

// WRK.Display Flag = CND.No
WRK.Display_Flag = 'N';

ENDIF;

CASE;

// IF CUR.Boxes Total Quantity is Equal to zero
IF CUR.Boxes_Total_Quantity = *ZERO;

// WRK.Flag 2 = CND.*NO
WRK.Flag_2 = *NO;

ENDIF;

CASE;

// IF CUR.Other Total Quantity is Equal to zero
IF CUR.Other_Total_Quantity = *ZERO;

// WRK.Flag 3 = CND.*NO
WRK.Flag_3 = *NO;

ENDIF;

// Print Company Number - 3 totals format
PRINT Company Number - 3 totals format;

// NXT.Quantity Total S = NXT.Quantity Total S + CUR.Quantity Total S
NXT.Quantity_Total_S = NXT.Quantity_Total_S + CUR.Quantity_Total_S;

// NXT.Quantity on Hand - U/M1 = NXT.Quantity on Hand - U/M1 + CUR.Quantity on Hand
NXT.Quantity_on_Hand_UOM1 = NXT.Quantity_on_Hand_UOM1 + CUR.Quantity_on_Hand_UOM1;

// NXT.Quantity Age Day 1   USR = NXT.Quantity Age Day 1   USR + CUR.Quantity Age D
NXT.Quantity_Age_Day_1_USR = NXT.Quantity_Age_Day_1_USR + CUR.Quantity_Age_Day_1_USR;

// NXT.Quantity Age Day 2   USR = NXT.Quantity Age Day 2   USR + CUR.Quantity Age D
NXT.Quantity_Age_Day_2_USR = NXT.Quantity_Age_Day_2_USR + CUR.Quantity_Age_Day_2_USR;

// NXT.Quantity Age Day 3   USR = NXT.Quantity Age Day 3   USR + CUR.Quantity Age D
NXT.Quantity_Age_Day_3_USR = NXT.Quantity_Age_Day_3_USR + CUR.Quantity_Age_Day_3_USR;

// NXT.Quantity Age Day 4   USR = NXT.Quantity Age Day 4   USR + CUR.Quantity Age D
NXT.Quantity_Age_Day_4_USR = NXT.Quantity_Age_Day_4_USR + CUR.Quantity_Age_Day_4_USR;

// NXT.Quantity Age Day 5   USR = NXT.Quantity Age Day 5   USR + CUR.Quantity Age D
NXT.Quantity_Age_Day_5_USR = NXT.Quantity_Age_Day_5_USR + CUR.Quantity_Age_Day_5_USR;

// NXT.Quantity Age Day 6   USR = NXT.Quantity Age Day 6   USR + CUR.Quantity Age D
NXT.Quantity_Age_Day_6_USR = NXT.Quantity_Age_Day_6_USR + CUR.Quantity_Age_Day_6_USR;

// NXT.Quantity Age Day 7   USR = NXT.Quantity Age Day 7   USR + CUR.Quantity Age D
NXT.Quantity_Age_Day_7_USR = NXT.Quantity_Age_Day_7_USR + CUR.Quantity_Age_Day_7_USR;

// NXT.Quantity Age Day 8   USR = NXT.Quantity Age Day 8   USR + CUR.Quantity Age D
NXT.Quantity_Age_Day_8_USR = NXT.Quantity_Age_Day_8_USR + CUR.Quantity_Age_Day_8_USR;

// NXT.Quantity on Hold 9.2  USR = NXT.Quantity on Hold 9.2  USR + CUR.Quantity on
NXT.Quantity_on_Hold_9_2_USR = NXT.Quantity_on_Hold_9_2_USR                                        +
+ CUR.Quantity_on_Hold_9_2_USR;

ENDIF;

