// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDXFPFR
// ?Date: 14.08.2025 Time: 12:04:44
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('O/M');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR number = PAR.USR From Date / CON.10000 *
WRK.USR_number = PAR.USR_From_Date / 10000;

//?Calc prior year for from date
CASE;

// IF WRK.USR number is Equal to zero
IF WRK.USR_number = *ZERO;

// WRK.USR From Date = PAR.USR From Date + CON.990000
WRK.USR_From_Date = PAR.USR_From_Date + 990000;

//?Calc prior year for from date
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR From Date = PAR.USR From Date - CON.10000
WRK.USR_From_Date = PAR.USR_From_Date - 10000;

ENDIF;

// WRK.USR To Date = PAR.USR To Date / CON.10000 *
WRK.USR_To_Date = PAR.USR_To_Date / 10000;

//?Calc prior year for to date
CASE;

// IF WRK.USR number is Equal to zero
IF WRK.USR_number = *ZERO;

// WRK.USR To Date = PAR.USR To Date + CON.990000
WRK.USR_To_Date = PAR.USR_To_Date + 990000;

//?Calc prior year for to date
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR To Date = PAR.USR To Date - CON.10000
WRK.USR_To_Date = PAR.USR_To_Date - 10000;

ENDIF;

// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

// WRK.USR Display 1 = CND.No
WRK.USR_Display_1 = 'N';

//?**
// WRK.Display Flag = CND.No
WRK.Display_Flag = 'N';

//?***** Change Log and Comments
//?** 1/03/06 LJB - Turn off flag so First Page headings print and
//?** Top of Page Headings do NOT print
//?**
//?** 01/18/2007 LJB L70117A
//?** 01/18/2007 LJB Fields are too small, totals are
//?** being truncated. Change to length of 11.0 for customer
//?** and company totals.
//?**
//?** 02/07/2007 LJB Printer overrides changed to 12 lines per inch
//?** to accommodate replacing the sbdprtovr with ovrprtf command.
//?DLY029 07/03/07 JRB Added Item Structure Type, Group & Class
//?*****
//?USER: Record selection processing

//?Validate limit by dollars
CASE;

// IF PAR.USR Production Day 1 is Entered
IF PAR.USR_Production_Day_1 > *ZERO;

// AND DB1.Billing Amount LE PAR.USR Production Day 1
AND DB1.Billing_Amount <= PAR.USR_Production_Day_1;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Validate limit by pounds
CASE;

// IF PAR.USR Min Weight is GT Zero
IF PAR.USR_Min_Weight > *ZERO;

// AND DB1.Weight Shipped Total LE PAR.USR Min Weight
AND DB1.Weight_Shipped_Total <= PAR.USR_Min_Weight;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process top of page

//?Description
CASE;

// IF PAR.USR Active Flag is Record Found
IF PAR.USR_Active_Flag = 'Y';

// TOP.USR Description = CON.By Customer Group
TOP_USR_Description = 'By Customer Group';

//?Description
// IF PAR.USR Input 1 is Yes
IF PAR.USR_Input_1 = 'Y';

// TOP.USR Description = CON.   By Pounds
TOP_USR_Description = 'By Pounds';

//?Description
// IF PAR.USR Input 2 is Yes
IF PAR.USR_Input_2 = 'Y';

// TOP.USR Description = CON.   By Dollars
TOP_USR_Description = 'By Dollars';

ENDIF;

//?USER: Process before print of first page format

//?** 12/02/2005
//?** Put Company Number on 1st page if it is passed in.
//?** Put Company Name if Co# is passed in, else, put *ALL
// 1PG.Company Number = PAR.Company Number
X1PG_Company_Number = PAR.Company_Number;

//?** If All Companies are included in report put *ALL in description
CASE;

// IF PAR.Company Number is Equal to zero
IF PAR.Company_Number = *ZERO;

// 1PG.Name = CON.*ALL
X1PG_Name = *ALL;

//?** If All Companies are included in report put *ALL in description
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(PAR.Company_Number);
PARAMETER(X1PG_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?USER: On print of first page format

// 1PG.Company Number = PAR.Company Number
X1PG_Company_Number = PAR.Company_Number;

// 1PG.USR From Date = PAR.USR From Date
X1PG_USR_From_Date = PAR.USR_From_Date;

// 1PG.From Date History = WRK.USR From Date
X1PG_From_Date_History = WRK.USR_From_Date;

// 1PG.USR To Date = PAR.USR To Date
X1PG_USR_To_Date = PAR.USR_To_Date;

// 1PG.USR To Date = PAR.USR To Date
X1PG_USR_To_Date = PAR.USR_To_Date;

// 1PG.To Date History = WRK.USR To Date
X1PG_To_Date_History = WRK.USR_To_Date;

// 1PG.USR Sales Realiz. Flag = PAR.USR Sales Realiz. Flag
X1PG_USR_Sales_Realiz_Flag = PAR.USR_Sales_Realiz_Flag;

// 1PG.USR Item Type Description = Condition name of 1PG.USR Sales Realiz. Flag
X1PG_USR_Item_Type_Description = RTVCND(X1PG_USR_Sales_Realiz_Flag);

// 1PG.USR Active Flag = PAR.USR Active Flag
X1PG_USR_Active_Flag = PAR.USR_Active_Flag;

// 1PG.USR Input 1 = PAR.USR Input 1
X1PG_USR_Input_1 = PAR.USR_Input_1;

// 1PG.USR Input 2 = PAR.USR Input 2
X1PG_USR_Input_2 = PAR.USR_Input_2;

// 1PG.USR Customer Type = PAR.USR Customer Type
X1PG_USR_Customer_Type = PAR.USR_Customer_Type;

// 1PG.USR Work Field 7A = Condition name of 1PG.USR Customer Type
X1PG_USR_Work_Field_7A = RTVCND(X1PG_USR_Customer_Type);

// 1PG.USR Production Day 1 = PAR.USR Production Day 1
X1PG_USR_Production_Day_1 = PAR.USR_Production_Day_1;

// 1PG.USR Min Weight = PAR.USR Min Weight
X1PG_USR_Min_Weight = PAR.USR_Min_Weight;

// 1PG.Item Structure Type Code = PAR.Item Structure Type Code
X1PG_Item_Structure_Type_Code = PAR.Item_Structure_Type_Code;

// 1PG.Item Structure Group Code = PAR.Item Structure Group Code
X1PG_Item_Structure_Group_Code = PAR.Item_Structure_Group_Code;

// 1PG.Item Structure Class Code = PAR.Item Structure Class Code
X1PG_Item_Structure_Class_Code = PAR.Item_Structure_Class_Code;

//?Item Structure Type Desc
CASE;

// IF PAR.Item Structure Type Code is Entered
IF PAR.Item_Structure_Type_Code <> *ZERO;

EXECUTE FUNCTION(RTV  Description       RT) TYPE(RTVOBJ) FILE(OME8REP)          AC1219219;
PARAMETER(X1PG_Item_Structure_Type_Code);
PARAMETER(X1PG_Item_Structure_Type_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


//?Item Structure Type Desc
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Item Structure Type Desc = CON.*ALL
X1PG_Item_Structure_Type_Desc = *ALL;

ENDIF;

//?Item Structure Group Desc
CASE;

// IF PAR.Item Structure Group Code is Entered
IF PAR.Item_Structure_Group_Code <> *ZERO;

EXECUTE FUNCTION(Rtv Group Desc) TYPE(RTVOBJ) FILE(OME9REP)                     AC1663396;
PARAMETER(X1PG_Item_Structure_Group_Code);
PARAMETER(X1PG_Item_Structure_Group_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Item Structure Group Desc
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Item Structure Group Desc = CON.*ALL
X1PG_Item_Structure_Group_Desc = *ALL;

ENDIF;

//?Item Structure Class Desc
CASE;

// IF PAR.Item Structure Class Code is Entered
IF PAR.Item_Structure_Class_Code <> *ZERO;

EXECUTE FUNCTION(Rtv Item Class Desc    RT) TYPE(RTVOBJ) FILE(OMFAREP)          AC1205440;
PARAMETER(X1PG_Item_Structure_Class_Code);
PARAMETER(X1PG_Item_Structure_Class_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Item Structure Class Desc
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Item Structure Class Desc = CON.*ALL
X1PG_Item_Structure_Class_Desc = *ALL;

ENDIF;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

// SUPPRESSED PRINT Accounting Company Number header format

CASE;

IF NEW Customer_Group_Code;
CASE;

// IF PAR.USR Active Flag is Record Found
IF PAR.USR_Active_Flag = 'Y';

EXECUTE FUNCTION(RTV Cust Group Descrp. RT) TYPE(RTVOBJ) FILE(PDJXREP)          AC1330037;
PARAMETER(CUR.Customer_Group_Code);
PARAMETER(CUR.Customer_Group_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

// Print Customer Group Code header format
PRINT Customer Group Code header format;

ENDIF;

CASE;

IF NEW Ranking_Sort_Field;
// SUPPRESSED PRINT Ranking Sort Field header format

ENDIF;

CASE;

IF NEW Ship_To_Customer;
// SUPPRESSED PRINT Ship To Customer header format

ENDIF;

//?USER: On print of detail format

//?** 1/03/06 LJB - Turn on flag so Top of Page headings print
// WRK.Display Flag = CND.Yes
WRK.Display_Flag = 'Y';

// WRK.USR Display 1 = CND.Yes
WRK.USR_Display_1 = 'Y';

// CUR.USR Sales Cur. Yr Period = DB1.Billing Amount / CON.1 *Rounded
CUR.USR_Sales_Cur_Yr_Period = DB1.Billing_Amount / 1 'H';

// CUR.USR Weight 9 = DB1.Weight Shipped Total / CON.1 *Rounded
CUR.USR_Weight_9 = DB1.Weight_Shipped_Total / 1 'H';

//?Get Prior Year amounts
CASE;

// IF PAR.USR Customer Type is Ship To
IF PAR.USR_Customer_Type = '3';

EXECUTE FUNCTION(RTV Pd&Dlr By ShipTo  RT) TYPE(RTVOBJ) FILE(OMHSTPP)           AC1784891;
PARAMETER(PAR.Company_Number);
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(WRK.USR_From_Date);
PARAMETER(WRK.USR_To_Date);
PARAMETER(CUR.USR_Weight_9_0);
PARAMETER(CUR.USR_Sales_Current_Yr_YTD);
PARAMETER(PAR.USR_Sales_Realiz_Flag);
{
 //?USER: Initialize routine

 // PAR.USR Weight Accumulated = CON.*ZERO
 PAR.USR_Weight_Accumulated = *ZERO;

 // PAR.USR Billing Dtl Net Dol 3 = CON.*ZERO
 PAR.USR_Billing_Dtl_Net_Dol_3 = *ZERO;

 //?***** Change Log and Comments
 DO;

 //?** 02/08/2007 LJB L70117a
 //?** Cancelled invalid date range test that checked for both the
 //?** from and to dates as greater than. Replaced with less than or
 //?** equal to for the to date test.
 ENDDO;

 //?USER: Process Data record

 //?062206 slm Changes due to RTV were being rst by Company
 //?           Now must check if all companies, or select a company
 EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(WRK.Billing_Activity_Type);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // WRK.Record Selected       USR = CND.blank
 WRK.Record_Selected_USR = *BLANK;

 CASE;

 // IF PAR.Company Number is not equal to zero
 IF PAR.Company_Number <> *ZERO;

 CASE;

 // IF PAR.Company Number EQ DB1.Company Number
 IF PAR.Company_Number = DB1.Company_Number;

 // WRK.Record Selected       USR = CND.yes
 WRK.Record_Selected_USR = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Record Selected       USR = CND.no
 WRK.Record_Selected_USR = 'N';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Record Selected       USR = CND.yes
 WRK.Record_Selected_USR = 'Y';

 ENDIF;

 //?** cancelled invalid date range test           LJB 02/08/2007
 //?Select on Date ranage
 CASE;

 // IF WRK.Record Selected       USR is yes
 IF WRK.Record_Selected_USR = 'Y';

 //?Edit for date range and continue if valid
 CASE;

 // IF DB1.Actual Shipped Date GE WRK.USR From Date
 IF DB1.Actual_Shipped_Date >= WRK.USR_From_Date;

 // AND DB1.Actual Shipped Date LE WRK.USR To Date
 AND DB1.Actual_Shipped_Date <= WRK.USR_To_Date;

 // WRK.FOB Gross Amount = DB1.FOB Gross Amount
 WRK.FOB_Gross_Amount = DB1.FOB_Gross_Amount;

 // WRK.Weight Billed = DB1.Weight Billed
 WRK.Weight_Billed = DB1.Weight_Billed;

 //?FOB amount and weight
 CASE;

 // IF WRK.Billing Activity Type is Invoice
 IF WRK.Billing_Activity_Type = '1';

 CASE;

 // IF DB1.Affect Sales Doll Status is no
 IF DB1.Affect_Sales_Doll_Status = 'N';

 // WRK.FOB Gross Amount = CON.*ZERO
 WRK.FOB_Gross_Amount = *ZERO;

 ENDIF;

 CASE;

 // IF DB1.Affect Sales Pnds Status is no
 IF DB1.Affect_Sales_Pnds_Status = 'N';

 // WRK.Weight Billed = CON.*ZERO
 WRK.Weight_Billed = *ZERO;

 ENDIF;

 //?FOB amount and weight
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Credit or Debit Memo
 CASE;

 // IF PAR.USR Sales Realiz. Flag is Process by Flags
 IF PAR.USR_Sales_Realiz_Flag = 'P';

 CASE;

 // IF DB1.Affect Sales Doll Status is no
 IF DB1.Affect_Sales_Doll_Status = 'N';

 // WRK.FOB Gross Amount = CON.*ZERO
 WRK.FOB_Gross_Amount = *ZERO;

 ENDIF;

 CASE;

 // IF DB1.Affect Sales Pnds Status is no
 IF DB1.Affect_Sales_Pnds_Status = 'N';

 // WRK.Weight Billed = CON.*ZERO
 WRK.Weight_Billed = *ZERO;

 ENDIF;

 //?Credit or Debit Memo
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.USR Sales Realiz. Flag is All
 IF PAR.USR_Sales_Realiz_Flag = 'A';

 CASE;

 // IF DB1.Affect Sales Doll Status is no
 IF DB1.Affect_Sales_Doll_Status = 'N';

 // AND DB1.Affect Sales Pnds Status is yes
 AND DB1.Affect_Sales_Pnds_Status = 'Y';

 // WRK.FOB Gross Amount = CON.*ZERO
 WRK.FOB_Gross_Amount = *ZERO;

 ENDIF;

 CASE;

 // IF DB1.Affect Sales Pnds Status is no
 IF DB1.Affect_Sales_Pnds_Status = 'N';

 // AND DB1.Affect Sales Doll Status is yes
 AND DB1.Affect_Sales_Doll_Status = 'Y';

 // WRK.Weight Billed = CON.*ZERO
 WRK.Weight_Billed = *ZERO;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.USR Sales Realiz. Flag is None
 IF PAR.USR_Sales_Realiz_Flag = 'N';

 // WRK.FOB Gross Amount = CON.*ZERO
 WRK.FOB_Gross_Amount = *ZERO;

 // WRK.Weight Billed = CON.*ZERO
 WRK.Weight_Billed = *ZERO;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?If credit memo weight is greater than zero, reverse the sign
 CASE;

 // IF WRK.Weight Billed is Greater than zero
 IF WRK.Weight_Billed > *ZERO;

 // AND WRK.Billing Activity Type is Credit Memo
 AND WRK.Billing_Activity_Type = '2';

 // WRK.Weight Billed = CON.*ZERO - WRK.Weight Billed
 WRK.Weight_Billed = *ZERO - WRK.Weight_Billed;

 ENDIF;

 // WRK.USR Percent Work, 7.4 = DB1.Absorbed Freight Rate / CON.100 *Rounded
 WRK.USR_Percent_Work_7_4 = DB1.Absorbed_Freight_Rate_CWT / 100 'H';

 // WRK.USR Freight Amount 1 = WRK.USR Percent Work, 7.4 * WRK.Weight Billed *Rounde
 WRK.USR_Freight_Amount_1 = WRK.USR_Percent_Work_7_4 * WRK.Weight_Billed 'H';

 // WRK.Billing Detail Net Dol. = WRK.FOB Gross Amount
 WRK.Billing_Detail_Net_Dol = WRK.FOB_Gross_Amount;

 // PAR.USR Billing Dtl Net Dol 3 = PAR.USR Billing Dtl Net Dol 3 + WRK.Billing Detail Net Dol.
 PAR.USR_Billing_Dtl_Net_Dol_3 = PAR.USR_Billing_Dtl_Net_Dol_3
 + WRK.Billing_Detail_Net_Dol;

 // PAR.USR Weight Accumulated = PAR.USR Weight Accumulated + WRK.Weight Billed
 PAR.USR_Weight_Accumulated = PAR.USR_Weight_Accumulated + WRK.Weight_Billed;

 ENDIF;

 ENDIF;

}


ENDIF;

CASE;

// IF PAR.USR Customer Type is A/R
IF PAR.USR_Customer_Type = '2';

EXECUTE FUNCTION(RTV Pd&Dlr By ArCust  RT) TYPE(RTVOBJ) FILE(OMHSTPP)           AC1784927;
PARAMETER(PAR.Company_Number);
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(WRK.USR_From_Date);
PARAMETER(WRK.USR_To_Date);
PARAMETER(CUR.USR_Weight_9_0);
PARAMETER(CUR.USR_Sales_Current_Yr_YTD);
PARAMETER(PAR.USR_Sales_Realiz_Flag);
{
 //?USER: Initialize routine

 // PAR.USR Weight Accumulated = CON.*ZERO
 PAR.USR_Weight_Accumulated = *ZERO;

 // PAR.USR Billing Dtl Net Dol 3 = CON.*ZERO
 PAR.USR_Billing_Dtl_Net_Dol_3 = *ZERO;

 // WRK.USR From Date = PAR.Actual Shipped Date
 WRK.USR_From_Date = PAR.Actual_Shipped_Date;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(WRK.Billing_Activity_Type);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // WRK.Record Selected       USR = CND.blank
 WRK.Record_Selected_USR = *BLANK;

 CASE;

 // IF PAR.Company Number is not equal to zero
 IF PAR.Company_Number <> *ZERO;

 CASE;

 // IF PAR.Company Number EQ DB1.Company Number
 IF PAR.Company_Number = DB1.Company_Number;

 // WRK.Record Selected       USR = CND.yes
 WRK.Record_Selected_USR = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Record Selected       USR = CND.no
 WRK.Record_Selected_USR = 'N';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Record Selected       USR = CND.yes
 WRK.Record_Selected_USR = 'Y';

 ENDIF;

 //?Select on Date ranage
 CASE;

 // IF WRK.Record Selected       USR is yes
 IF WRK.Record_Selected_USR = 'Y';

 //?Edit for date range and continue if valid
 CASE;

 // IF DB1.Actual Shipped Date GE WRK.USR From Date
 IF DB1.Actual_Shipped_Date >= WRK.USR_From_Date;

 // AND DB1.Actual Shipped Date LE PAR.USR To Date
 AND DB1.Actual_Shipped_Date <= PAR.USR_To_Date;

 // WRK.FOB Gross Amount = DB1.FOB Gross Amount
 WRK.FOB_Gross_Amount = DB1.FOB_Gross_Amount;

 // WRK.Weight Billed = DB1.Weight Billed
 WRK.Weight_Billed = DB1.Weight_Billed;

 //?FOB amount and weight
 CASE;

 // IF WRK.Billing Activity Type is Invoice
 IF WRK.Billing_Activity_Type = '1';

 CASE;

 // IF DB1.Affect Sales Doll Status is no
 IF DB1.Affect_Sales_Doll_Status = 'N';

 // WRK.FOB Gross Amount = CON.*ZERO
 WRK.FOB_Gross_Amount = *ZERO;

 ENDIF;

 CASE;

 // IF DB1.Affect Sales Pnds Status is no
 IF DB1.Affect_Sales_Pnds_Status = 'N';

 // WRK.Weight Billed = CON.*ZERO
 WRK.Weight_Billed = *ZERO;

 ENDIF;

 //?FOB amount and weight
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Credit or Debit Memo
 CASE;

 // IF PAR.USR Sales Realiz. Flag is Process by Flags
 IF PAR.USR_Sales_Realiz_Flag = 'P';

 CASE;

 // IF DB1.Affect Sales Doll Status is no
 IF DB1.Affect_Sales_Doll_Status = 'N';

 // WRK.FOB Gross Amount = CON.*ZERO
 WRK.FOB_Gross_Amount = *ZERO;

 ENDIF;

 CASE;

 // IF DB1.Affect Sales Pnds Status is no
 IF DB1.Affect_Sales_Pnds_Status = 'N';

 // WRK.Weight Billed = CON.*ZERO
 WRK.Weight_Billed = *ZERO;

 ENDIF;

 //?Credit or Debit Memo
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.USR Sales Realiz. Flag is All
 IF PAR.USR_Sales_Realiz_Flag = 'A';

 CASE;

 // IF DB1.Affect Sales Doll Status is no
 IF DB1.Affect_Sales_Doll_Status = 'N';

 // AND DB1.Affect Sales Pnds Status is yes
 AND DB1.Affect_Sales_Pnds_Status = 'Y';

 // WRK.FOB Gross Amount = CON.*ZERO
 WRK.FOB_Gross_Amount = *ZERO;

 ENDIF;

 CASE;

 // IF DB1.Affect Sales Pnds Status is no
 IF DB1.Affect_Sales_Pnds_Status = 'N';

 // AND DB1.Affect Sales Doll Status is yes
 AND DB1.Affect_Sales_Doll_Status = 'Y';

 // WRK.Weight Billed = CON.*ZERO
 WRK.Weight_Billed = *ZERO;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.USR Sales Realiz. Flag is None
 IF PAR.USR_Sales_Realiz_Flag = 'N';

 // WRK.FOB Gross Amount = CON.*ZERO
 WRK.FOB_Gross_Amount = *ZERO;

 // WRK.Weight Billed = CON.*ZERO
 WRK.Weight_Billed = *ZERO;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?If credit memo weight is greater than zero, reverse the sign
 CASE;

 // IF WRK.Weight Billed is Greater than zero
 IF WRK.Weight_Billed > *ZERO;

 // AND WRK.Billing Activity Type is Credit Memo
 AND WRK.Billing_Activity_Type = '2';

 // WRK.Weight Billed = CON.*ZERO - WRK.Weight Billed
 WRK.Weight_Billed = *ZERO - WRK.Weight_Billed;

 ENDIF;

 // WRK.USR Percent Work, 7.4 = DB1.Absorbed Freight Rate / CON.100 *Rounded
 WRK.USR_Percent_Work_7_4 = DB1.Absorbed_Freight_Rate_CWT / 100 'H';

 // WRK.USR Freight Amount 1 = WRK.USR Percent Work, 7.4 * WRK.Weight Billed *Rounde
 WRK.USR_Freight_Amount_1 = WRK.USR_Percent_Work_7_4 * WRK.Weight_Billed 'H';

 // WRK.Billing Detail Net Dol. = WRK.FOB Gross Amount
 WRK.Billing_Detail_Net_Dol = WRK.FOB_Gross_Amount;

 // PAR.USR Billing Dtl Net Dol 3 = PAR.USR Billing Dtl Net Dol 3 + WRK.Billing Deta
 PAR.USR_Billing_Dtl_Net_Dol_3 = PAR.USR_Billing_Dtl_Net_Dol_3
 + WRK.Billing_Detail_Net_Dol;

 // PAR.USR Weight Accumulated = PAR.USR Weight Accumulated + WRK.Weight Billed
 PAR.USR_Weight_Accumulated = PAR.USR_Weight_Accumulated + WRK.Weight_Billed;

 ENDIF;

 ENDIF;

}


ENDIF;

CASE;

// IF PAR.USR Customer Type is Parent
IF PAR.USR_Customer_Type = '1';

EXECUTE FUNCTION(RTV Pd&Dlr By Parent  RT) TYPE(RTVOBJ) FILE(OMHSTPP)           AC1406829;
PARAMETER(PAR.Company_Number);
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(WRK.USR_From_Date);
PARAMETER(WRK.USR_To_Date);
PARAMETER(CUR.USR_Weight_9_0);
PARAMETER(CUR.USR_Sales_Current_Yr_YTD);
PARAMETER(PAR.USR_Sales_Realiz_Flag);
{
 //?USER: Initialize routine

 // PAR.USR Weight Accumulated = CON.*ZERO
 PAR.USR_Weight_Accumulated = *ZERO;

 // PAR.USR Billing Dtl Net Dol 3 = CON.*ZERO
 PAR.USR_Billing_Dtl_Net_Dol_3 = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(WRK.Billing_Activity_Type);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?6/22/06 slm Add logic for Company of All, or selected Company
 // WRK.Record Selected       USR = CND.blank
 WRK.Record_Selected_USR = *BLANK;

 CASE;

 // IF PAR.Company Number is not equal to zero
 IF PAR.Company_Number <> *ZERO;

 CASE;

 // IF PAR.Company Number EQ DB1.Company Number
 IF PAR.Company_Number = DB1.Company_Number;

 // WRK.Record Selected       USR = CND.yes
 WRK.Record_Selected_USR = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Record Selected       USR = CND.no
 WRK.Record_Selected_USR = 'N';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Record Selected       USR = CND.yes
 WRK.Record_Selected_USR = 'Y';

 ENDIF;

 //?Select on Date ranage
 CASE;

 // IF WRK.Record Selected       USR is yes
 IF WRK.Record_Selected_USR = 'Y';

 //?Validate date and accumulate
 DO;

 //?Edit for date range
 CASE;

 // IF DB1.Actual Shipped Date GE WRK.USR From Date
 IF DB1.Actual_Shipped_Date >= WRK.USR_From_Date;

 // AND DB1.Actual Shipped Date LE WRK.USR To Date
 AND DB1.Actual_Shipped_Date <= WRK.USR_To_Date;

 //?Within  date ranages
 // WRK.FOB Gross Amount = DB1.FOB Gross Amount
 WRK.FOB_Gross_Amount = DB1.FOB_Gross_Amount;

 // WRK.Weight Billed = DB1.Weight Billed
 WRK.Weight_Billed = DB1.Weight_Billed;

 //?FOB amount and weight
 CASE;

 // IF WRK.Billing Activity Type is Invoice
 IF WRK.Billing_Activity_Type = '1';

 CASE;

 // IF DB1.Affect Sales Doll Status is no
 IF DB1.Affect_Sales_Doll_Status = 'N';

 // WRK.FOB Gross Amount = CON.*ZERO
 WRK.FOB_Gross_Amount = *ZERO;

 ENDIF;

 CASE;

 // IF DB1.Affect Sales Pnds Status is no
 IF DB1.Affect_Sales_Pnds_Status = 'N';

 // WRK.Weight Billed = CON.*ZERO
 WRK.Weight_Billed = *ZERO;

 ENDIF;

 //?FOB amount and weight
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Credit or Debit Memo
 CASE;

 // IF PAR.USR Sales Realiz. Flag is Process by Flags
 IF PAR.USR_Sales_Realiz_Flag = 'P';

 CASE;

 // IF DB1.Affect Sales Doll Status is no
 IF DB1.Affect_Sales_Doll_Status = 'N';

 // WRK.FOB Gross Amount = CON.*ZERO
 WRK.FOB_Gross_Amount = *ZERO;

 ENDIF;

 CASE;

 // IF DB1.Affect Sales Pnds Status is no
 IF DB1.Affect_Sales_Pnds_Status = 'N';

 // WRK.Weight Billed = CON.*ZERO
 WRK.Weight_Billed = *ZERO;

 ENDIF;

 //?Credit or Debit Memo
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.USR Sales Realiz. Flag is All
 IF PAR.USR_Sales_Realiz_Flag = 'A';

 CASE;

 // IF DB1.Affect Sales Doll Status is no
 IF DB1.Affect_Sales_Doll_Status = 'N';

 // AND DB1.Affect Sales Pnds Status is yes
 AND DB1.Affect_Sales_Pnds_Status = 'Y';

 // WRK.FOB Gross Amount = CON.*ZERO
 WRK.FOB_Gross_Amount = *ZERO;

 ENDIF;

 CASE;

 // IF DB1.Affect Sales Pnds Status is no
 IF DB1.Affect_Sales_Pnds_Status = 'N';

 // AND DB1.Affect Sales Doll Status is yes
 AND DB1.Affect_Sales_Doll_Status = 'Y';

 // WRK.Weight Billed = CON.*ZERO
 WRK.Weight_Billed = *ZERO;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.USR Sales Realiz. Flag is None
 IF PAR.USR_Sales_Realiz_Flag = 'N';

 // WRK.FOB Gross Amount = CON.*ZERO
 WRK.FOB_Gross_Amount = *ZERO;

 // WRK.Weight Billed = CON.*ZERO
 WRK.Weight_Billed = *ZERO;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?If credit memo weight is greater than zero, reverse the sign
 CASE;

 // IF WRK.Weight Billed is Greater than zero
 IF WRK.Weight_Billed > *ZERO;

 // AND WRK.Billing Activity Type is Credit Memo
 AND WRK.Billing_Activity_Type = '2';

 // WRK.Weight Billed = CON.*ZERO - WRK.Weight Billed
 WRK.Weight_Billed = *ZERO - WRK.Weight_Billed;

 ENDIF;

 // WRK.USR Percent Work, 7.4 = DB1.Absorbed Freight Rate / CON.100 *Rounded
 WRK.USR_Percent_Work_7_4 = DB1.Absorbed_Freight_Rate_CWT / 100 'H';

 // WRK.USR Freight Amount 1 = WRK.USR Percent Work, 7.4 * WRK.Weight Billed *Rounde
 WRK.USR_Freight_Amount_1 = WRK.USR_Percent_Work_7_4 * WRK.Weight_Billed 'H';

 // WRK.Billing Detail Net Dol. = WRK.FOB Gross Amount
 WRK.Billing_Detail_Net_Dol = WRK.FOB_Gross_Amount;

 // PAR.USR Billing Dtl Net Dol 3 = PAR.USR Billing Dtl Net Dol 3 + WRK.Billing Deta
 PAR.USR_Billing_Dtl_Net_Dol_3 = PAR.USR_Billing_Dtl_Net_Dol_3
 + WRK.Billing_Detail_Net_Dol;

 // PAR.USR Weight Accumulated = PAR.USR Weight Accumulated + WRK.Weight Billed
 PAR.USR_Weight_Accumulated = PAR.USR_Weight_Accumulated + WRK.Weight_Billed;

 //?Edit for date range
 // IF *OTHERWISE
 IF *OTHERWISE;

 ENDIF;

 ENDDO;

 ENDIF;

}


ENDIF;

//?Calc difference between prior year and current year
// CUR.USR Difference Amount = CUR.USR Sales Cur. Yr Period - CUR.USR Sales Current
CUR.USR_Difference_Amount = CUR.USR_Sales_Cur_Yr_Period - CUR.USR_Sales_Current_Yr_YTD;

// CUR.USR Difference Weight = CUR.USR Weight 9 - CUR.USR Weight, 9.0
CUR.USR_Difference_Weight = CUR.USR_Weight_9 - CUR.USR_Weight_9_0;

//?USER: Process after print of detail format

//?** 01/18/2007 LJB L70117A
//?** 01/18/2007 LJB Fields are too small, totals are being truncated
//?**------------------------------------------------------------------
//?** 01/18/2007 LJB Change total fields to length of 11.0
// NXT.CMS Filler 1 = NXT.CMS Filler 1 + CUR.USR Sales Cur. Yr Period
NXT.CMS_Filler_1 = NXT.CMS_Filler_1 + CUR.USR_Sales_Cur_Yr_Period;

// NXT.CMS Filler 3 = NXT.CMS Filler 3 + CUR.USR Sales Current Yr YTD
NXT.CMS_Filler_3 = NXT.CMS_Filler_3 + CUR.USR_Sales_Current_Yr_YTD;

// NXT.CMS Filler 2 = NXT.CMS Filler 2 + CUR.USR Difference Amount
NXT.CMS_Filler_2 = NXT.CMS_Filler_2 + CUR.USR_Difference_Amount;

// NXT.ERS Weight Ordered Total = NXT.ERS Weight Ordered Total + CUR.USR Weight 9
NXT.ERS_Weight_Ordered_Total = NXT.ERS_Weight_Ordered_Total + CUR.USR_Weight_9;

// NXT.Weight 11.0 USR = NXT.Weight 11.0 USR + CUR.USR Weight, 9.0
NXT.Weight_11_0_USR = NXT.Weight_11_0_USR + CUR.USR_Weight_9_0;

// NXT.YDLD Weight = NXT.YDLD Weight + CUR.USR Difference Weight
NXT.YDLD_Weight = NXT.YDLD_Weight + CUR.USR_Difference_Weight;

//?USER: Print required level totals

CASE;

IF NEW Ship_To_Customer;
EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(CUR.Ship_To_Customer);
PARAMETER(CUR.USR_Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF CUR.CMS Filler 1 is Zero
IF CUR.CMS_Filler_1 = *ZERO;

// AND CUR.CMS Filler 3 is Zero
AND CUR.CMS_Filler_3 = *ZERO;

// AND CUR.ERS Weight Ordered Total is Zeros
AND CUR.ERS_Weight_Ordered_Total = *ZERO;

// AND CUR.Weight 11.0 USR is Zeros
AND CUR.Weight_11_0_USR = *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

// Print Ship To Customer totals format
PRINT Ship To Customer totals format;

//?** 01/18/2007 LJB L70117A
//?** 01/18/2007 LJB Fields are too small, totals are being truncated
//?**--------------------------------------------------------------------
//?** 01/18/2007 LJB Change total fields to length of 11.0
// NXT.CMS Filler 1 = NXT.CMS Filler 1 + CUR.CMS Filler 1
NXT.CMS_Filler_1 = NXT.CMS_Filler_1 + CUR.CMS_Filler_1;

// NXT.CMS Filler 3 = NXT.CMS Filler 3 + CUR.CMS Filler 3
NXT.CMS_Filler_3 = NXT.CMS_Filler_3 + CUR.CMS_Filler_3;

// NXT.CMS Filler 2 = NXT.CMS Filler 2 + CUR.CMS Filler 2
NXT.CMS_Filler_2 = NXT.CMS_Filler_2 + CUR.CMS_Filler_2;

// NXT.ERS Weight Ordered Total = NXT.ERS Weight Ordered Total + CUR.ERS Weight Ordered Total
NXT.ERS_Weight_Ordered_Total = NXT.ERS_Weight_Ordered_Total                                        +
+ CUR.ERS_Weight_Ordered_Total;

// NXT.Weight 11.0 USR = NXT.Weight 11.0 USR + CUR.Weight 11.0 USR
NXT.Weight_11_0_USR = NXT.Weight_11_0_USR + CUR.Weight_11_0_USR;

// NXT.YDLD Weight = NXT.YDLD Weight + CUR.YDLD Weight
NXT.YDLD_Weight = NXT.YDLD_Weight + CUR.YDLD_Weight;

ENDIF;

CASE;

IF NEW Ranking_Sort_Field;
// SUPPRESSED PRINT Ranking Sort Field totals format

//?** 01/18/2007 LJB L70117A
//?** 01/18/2007 LJB Fields are too small, totals are being truncated
//?**--------------------------------------------------------------------
//?** 01/18/2007 LJB Change total fields to length of 11.0
// NXT.CMS Filler 1 = NXT.CMS Filler 1 + CUR.CMS Filler 1
NXT.CMS_Filler_1 = NXT.CMS_Filler_1 + CUR.CMS_Filler_1;

// NXT.CMS Filler 3 = NXT.CMS Filler 3 + CUR.CMS Filler 3
NXT.CMS_Filler_3 = NXT.CMS_Filler_3 + CUR.CMS_Filler_3;

// NXT.CMS Filler 2 = NXT.CMS Filler 2 + CUR.CMS Filler 2
NXT.CMS_Filler_2 = NXT.CMS_Filler_2 + CUR.CMS_Filler_2;

// NXT.ERS Weight Ordered Total = NXT.ERS Weight Ordered Total + CUR.ERS Weight Ordered Total
NXT.ERS_Weight_Ordered_Total = NXT.ERS_Weight_Ordered_Total                                        +
+ CUR.ERS_Weight_Ordered_Total;

// NXT.Weight 11.0 USR = NXT.Weight 11.0 USR + CUR.Weight 11.0 USR
NXT.Weight_11_0_USR = NXT.Weight_11_0_USR + CUR.Weight_11_0_USR;

// NXT.YDLD Weight = NXT.YDLD Weight + CUR.YDLD Weight
NXT.YDLD_Weight = NXT.YDLD_Weight + CUR.YDLD_Weight;

ENDIF;

CASE;

IF NEW Customer_Group_Code;
CASE;

// IF PAR.USR Active Flag is Record Found
IF PAR.USR_Active_Flag = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

// Print Customer Group Code totals format
PRINT Customer Group Code totals format;

//?** 01/18/2007 LJB L70117A
//?** 01/18/2007 LJB Fields are too small, totals are being truncated
//?**--------------------------------------------------------------------
//?** 01/18/2007 LJB Change total fields to length of 11.0
// NXT.CMS Filler 1 = NXT.CMS Filler 1 + CUR.CMS Filler 1
NXT.CMS_Filler_1 = NXT.CMS_Filler_1 + CUR.CMS_Filler_1;

// NXT.CMS Filler 3 = NXT.CMS Filler 3 + CUR.CMS Filler 3
NXT.CMS_Filler_3 = NXT.CMS_Filler_3 + CUR.CMS_Filler_3;

// NXT.CMS Filler 2 = NXT.CMS Filler 2 + CUR.CMS Filler 2
NXT.CMS_Filler_2 = NXT.CMS_Filler_2 + CUR.CMS_Filler_2;

// NXT.ERS Weight Ordered Total = NXT.ERS Weight Ordered Total + CUR.ERS Weight Ordered Total
NXT.ERS_Weight_Ordered_Total = NXT.ERS_Weight_Ordered_Total                                        +
+ CUR.ERS_Weight_Ordered_Total;

// NXT.Weight 11.0 USR = NXT.Weight 11.0 USR + CUR.Weight 11.0 USR
NXT.Weight_11_0_USR = NXT.Weight_11_0_USR + CUR.Weight_11_0_USR;

// NXT.YDLD Weight = NXT.YDLD Weight + CUR.YDLD Weight
NXT.YDLD_Weight = NXT.YDLD_Weight + CUR.YDLD_Weight;

ENDIF;

CASE;

IF NEW Company_Number;
// Print Accounting Company Number totals format
PRINT Accounting Company Number totals format;

ENDIF;

