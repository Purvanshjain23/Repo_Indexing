// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKQ6XFR
// ?Date: 14.08.2025 Time: 02:51:24
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modifications and Comments
DO;

//? 3/07/2019 JBB E14281 - Zero price on BOL
//?                        Recompile for modification made in RTVOBJ.
//?E12948 JJH 04/20/18 - Negative Net Pay from Freight Allocation
//?-  Recompiled so we can use STRISDB, no logic changes.
//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//?                      length from 5 to 7.
ENDDO;

//?Check if the buy order is allocated, if so are there any
//?tattoos that have been paid if so do not allow any spreading.
//?Read all the Tattoo's for this Buy order load
//?If the freight allocation apply flag is Y(es)
//?     Read all the Tattoo's for this Buy order load
//?     and spread the freight
//?else
//?then set the freight and flag to null factors
EXECUTE FUNCTION(Clc Freight Allctn    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1183436;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.BOL_Freight_UOM);
PARAMETER(PAR.BOL_Freight_Unit_Amt);
PARAMETER(PAR.BOL_Freight_Amt);
PARAMETER(PAR.BOL_Freight_Allocation);
PARAMETER(PAR.BOL_Head_Received);
PARAMETER(PAR.BOL_Live_Wgt_Received);
PARAMETER(PAR.BOL_Head_Received_Market);
PARAMETER(PAR.Freight_Allociation_Apply);
{
 //?USER: Initialize routine

 //?Modification history
 DO;

 //? 3/07/2019 JBB E14281 - Zero price on BOL
 //?                        Retrieve how the company allocates freight.
 //?                        A Company Value will contain either H for
 //?                        Head or else W for Weight.  This function
 //?                        will perform calculations based upon the
 //?                        value.
 ENDDO;

 //?Retrieve how the Freight is allocated.  Head or Weight.
 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER('HPEFACALC');
 PARAMETER(LCL.Allocate_by_Head_or_Wgt);

 // WRK.Freight Allow Was App Usr = CND.No
 WRK.Freight_Allow_Was_App_Usr = 'N';

 // WRK.Freight Amount Usr = PAR.BOL Freight Amt
 WRK.Freight_Amount_Usr = PAR.BOL_Freight_Amt;

 //?If flat calculate unit amount
 CASE;

 // IF PAR.BOL Freight UOM is Flat
 IF PAR.BOL_Freight_UOM = 'FL';

 //?Acclocate by either Weight or Head
 CASE;

 // IF LCL.Allocate by Head or Wgt is Weight
 IF LCL.Allocate_by_Head_or_Wgt = 'W';

 // LCL.Trans UOM USR = CND.Live Hundred Weight
 LCL.Trans_UOM_USR = 'LW';

 //?Calculate Trans Unit Amount using Weight
 CASE;

 // IF PAR.BOL Live Wgt Received is Greater then Zero
 IF PAR.BOL_Live_Wgt_Received > *ZERO;

 // Synon (17,5) work field =       * if flat cal unit amount
 PGM.*Synon_175_work_field = PAR.BOL_Freight_Amt / ( PAR.BOL_Live_Wgt_Received / 100 'H' )
 'H';

 //?Calculate Trans Unit Amount using Weight
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Synon (17,5) work field = CON.*ZERO
 PGM.*Synon_175_work_field = *ZERO;

 ENDIF;

 //?Acclocate by either Weight or Head
 // IF LCL.Allocate by Head or Wgt is Head
 IF LCL.Allocate_by_Head_or_Wgt = 'H';

 // LCL.Trans UOM USR = CND.Received Head
 LCL.Trans_UOM_USR = 'RH';

 //?Calculate Trans Unit Amount using Head
 CASE;

 // IF PAR.BOL Head Received Market is Greater then Zero
 IF PAR.BOL_Head_Received_Market > *ZERO;

 // PGM.*Synon (17,5) work field = PAR.BOL Freight Amt / PAR.BOL Head Received Market *
 PGM.*Synon_175_work_field = PAR.BOL_Freight_Amt / PAR.BOL_Head_Received_Market;

 //?Calculate Trans Unit Amount using Head
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Synon (17,5) work field = CON.*ZERO
 PGM.*Synon_175_work_field = *ZERO;

 ENDIF;

 //?Acclocate by either Weight or Head
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Synon (17,5) work field = CON.*ZERO
 PGM.*Synon_175_work_field = *ZERO;

 ENDIF;

 // WRK.Unit Amount Usr = PGM.*Synon (17,5) work field * CON.1 *Rounded
 WRK.Unit_Amount_Usr = PGM.*Synon_175_work_field * 1 'H';

 ENDIF;

 // WRK.Last Tattoo Nbr = CON.*ZERO
 WRK.Last_Tattoo_Nbr = *ZERO;

 // WRK.Kill Date Usr = CON.*ZERO
 WRK.Kill_Date_Usr = *ZERO;

 //?USER: Process Data record

 //?If unpaid/Market then spread freight
 CASE;

 // IF DB1.TH Payment Sts is Unpaid Producer
 IF DB1.TH_Payment_Sts = 'ML'/'SL'/'SC'/'IC'/'IL'/*BLANK;

 CASE;

 // IF DB1.TH Hog Class Type is Market
 IF DB1.TH_Hog_Class_Type = 'M';

 //?Only on Unpaid Market Hogs
 //?If Parm to Applow freight is yes then spread freight
 //?else set back to null values.
 //?Parm Freight Allow apply yes, or no
 CASE;

 // IF PAR.Freight Allociation Apply is Yes
 IF PAR.Freight_Allociation_Apply = 'Y';

 //?Calculate freight allocation
 CASE;

 // IF PAR.BOL Freight UOM is Flat
 IF PAR.BOL_Freight_UOM = 'FL';

 //?Using Unit Amount calculated and UOM of Live Wgt or Head Rcvd
 EXECUTE FUNCTION(Clc UOM Extension     IF) TYPE(EXCINTFUN)                      AB1143053;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.TH_Purchase_Date);
 PARAMETER(DB1.TH_Dead_On_Arrival);
 PARAMETER(DB1.TH_Head_Received);
 PARAMETER(DB1.TH_Yard_Deads);
 PARAMETER(DB1.TH_Held_Over);
 PARAMETER(DB1.TH_Head_Condemned);
 PARAMETER(DB1.TH_Head_Killed);
 PARAMETER(DB1.TH_Live_Wgt);
 PARAMETER(DB1.TH_Hot_Wgt);
 PARAMETER(DB1.TH_Avg_Live_Wgt);
 PARAMETER(DB1.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(DB1.TH_Payment_Gross);
 PARAMETER(DB1.TH_Shipped_Weight);
 PARAMETER(DB1.TH_Head_EUT_KOA);
 PARAMETER(LCL.Trans_UOM_USR);
 PARAMETER(WRK.Unit_Amount_Usr);
 PARAMETER(WRK.TH_Freight_Amount);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 {
  //?Execute internal function

  //?Extension
  CASE;

  // IF PAR.Trans UOM USR is Flat
  IF PAR.Trans_UOM_USR = 'FL';

  //?* * * * *   FLAT    * * * * *
  //?FLAT
  CASE;

  // IF PAR.Trans UOM USR is Flat
  IF PAR.Trans_UOM_USR = 'FL';

  // PAR.Trans Extended Amt Usr = PAR.Trans Unit Amt Usr * CON.1 *Rounded
  PAR.Trans_Extended_Amt_Usr = PAR.Trans_Unit_Amt_Usr * 1 'H';

  ENDIF;

  //?Extension
  // IF PAR.Trans UOM USR is Head UOM
  IF PAR.Trans_UOM_USR = 'DH'/'RH'/'YH'/'CH'/'KH'/'NH'/'DY'/'RX'/'HM'/'DE';

  //?* * * * *    HEAD   * * * * *
  //?HEAD
  CASE;

  // IF PAR.Trans UOM USR is Received Head
  IF PAR.Trans_UOM_USR = 'RH';

  // PAR.Trans Extended Amt Usr = PAR.TH Head Received * PAR.Trans Unit Amt Usr *Roun
  PAR.Trans_Extended_Amt_Usr = PAR.TH_Head_Received * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is Received Hd less Yard Dd
  IF PAR.Trans_UOM_USR = 'RX';

  // WRK.Net Head Usr = PAR.TH Head Received - PAR.TH Yard Deads
  WRK.Net_Head_Usr = PAR.TH_Head_Received - PAR.TH_Yard_Deads;

  // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
  PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is Killed Head
  IF PAR.Trans_UOM_USR = 'KH';

  // PAR.Trans Extended Amt Usr = PAR.TH Head Killed * PAR.Trans Unit Amt Usr *Rounde
  PAR.Trans_Extended_Amt_Usr = PAR.TH_Head_Killed * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is Condemned Head
  IF PAR.Trans_UOM_USR = 'CH';

  // PAR.Trans Extended Amt Usr = PAR.TH Head Condemned * PAR.Trans Unit Amt Usr *Rou
  PAR.Trans_Extended_Amt_Usr = PAR.TH_Head_Condemned * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is Yard Deads Head
  IF PAR.Trans_UOM_USR = 'YH';

  // PAR.Trans Extended Amt Usr = PAR.TH Yard Deads * PAR.Trans Unit Amt Usr *Rounded
  PAR.Trans_Extended_Amt_Usr = PAR.TH_Yard_Deads * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is DOA Head
  IF PAR.Trans_UOM_USR = 'DH';

  // PAR.Trans Extended Amt Usr = PAR.TH Dead On Arrival * PAR.Trans Unit Amt Usr *Ro
  PAR.Trans_Extended_Amt_Usr = PAR.TH_Dead_On_Arrival * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is Net Head
  IF PAR.Trans_UOM_USR = 'NH';

  // WRK.Net Head Usr = PAR.TH Head Received
  WRK.Net_Head_Usr = PAR.TH_Head_Received;

  // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Yard Deads
  WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Yard_Deads;

  // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Head Condemned
  WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Head_Condemned;

  // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
  PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is DOA Head + Yard Dead Head
  IF PAR.Trans_UOM_USR = 'DY';

  // WRK.Net Head Usr = PAR.TH Dead On Arrival + PAR.TH Yard Deads
  WRK.Net_Head_Usr = PAR.TH_Dead_On_Arrival + PAR.TH_Yard_Deads;

  // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
  PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is DOA HD + Yard Dead + EUT
  IF PAR.Trans_UOM_USR = 'DE';

  // WRK.Net Head Usr = PAR.TH Dead On Arrival + PAR.TH Yard Deads
  WRK.Net_Head_Usr = PAR.TH_Dead_On_Arrival + PAR.TH_Yard_Deads;

  // WRK.Net Head Usr = WRK.Net Head Usr + PAR.TH Head EUT/KOA
  WRK.Net_Head_Usr = WRK.Net_Head_Usr + PAR.TH_Head_EUT_KOA;

  // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
  PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is Received Head /100 Miles
  IF PAR.Trans_UOM_USR = 'HM';

  // PAR.Trans Extended Amt Usr =       *
  PAR.Trans_Extended_Amt_Usr = ( PAR.PSM_Miles_to_Company * PAR.TH_Head_Killed 'H' ) * (
  PAR.Trans_Unit_Amt_Usr / 100 'H' ) 'H';

  ENDIF;

  //?Extension
  // IF PAR.Trans UOM USR is Weight UOM
  IF PAR.Trans_UOM_USR = 'CW'/'LW'/'NL'/'SW'/'LX'/'SX';

  //?* * * * *    WEIGHT   * * * * *
  //?WEIGHT
  CASE;

  // IF PAR.Trans UOM USR is Live Hundred Weight
  IF PAR.Trans_UOM_USR = 'LW';

  // Live hundred wgt
  PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Live_Wgt / 100 'H' ) * PAR.Trans_Unit_Amt_Usr 'H';

  //?WEIGHT
  // IF PAR.Trans UOM USR is LW less Yard Dead Wgt
  IF PAR.Trans_UOM_USR = 'LX';

  //? Calc wgt of yard dead based on Th avg live wgt
  // WRK.Yard dead weight      USR = PAR.TH Avg Live Wgt * PAR.TH Yard Deads *
  WRK.Yard_dead_weight_USR = PAR.TH_Avg_Live_Wgt * PAR.TH_Yard_Deads;

  //?  Subtract Yard Dead wgt from Live Wgt
  // WRK.Live Weight           USR = PAR.TH Live Wgt - WRK.Yard dead weight      USR
  WRK.Live_Weight_USR = PAR.TH_Live_Wgt - WRK.Yard_dead_weight_USR;

  // Live hundred wgt less Yd
  PAR.Trans_Extended_Amt_Usr = ( WRK.Live_Weight_USR / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
  'H';

  //?WEIGHT
  // IF PAR.Trans UOM USR is Carcass Hundred Weight
  IF PAR.Trans_UOM_USR = 'CW';

  // Carcass Hundred Wgt
  PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Hot_Wgt / 100 'H' ) * PAR.Trans_Unit_Amt_Usr 'H';

  //?WEIGHT
  // IF PAR.Trans UOM USR is Net Live Weight
  IF PAR.Trans_UOM_USR = 'NL';

  // WRK.Net Head Usr = PAR.TH Head Received
  WRK.Net_Head_Usr = PAR.TH_Head_Received;

  // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Yard Deads
  WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Yard_Deads;

  // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Head Condemned
  WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Head_Condemned;

  //?* Insert avg live weight
  // WRK.Net Live Weight Usr = WRK.Net Head Usr * PAR.TH Avg Live Wgt *
  WRK.Net_Live_Weight_Usr = WRK.Net_Head_Usr * PAR.TH_Avg_Live_Wgt;

  // Net Live Weight
  PAR.Trans_Extended_Amt_Usr = ( WRK.Net_Live_Weight_Usr / 100 'H' )
  * PAR.Trans_Unit_Amt_Usr 'H';

  //?WEIGHT
  // IF PAR.Trans UOM USR is Shipped Weight - Doa's
  IF PAR.Trans_UOM_USR = 'SW';

  //?  Calc Avg shipped wgt, then calc wgt of DOA'S
  //?This rule was defined on 01/14/97
  //?The Calculations for Avg Shipped Weights are
  //?Head Received should be the live hogs that walk across the scale
  //?Doa's should be the hogs that died either after we collected
  //?      or before we weighed them
  //?Avg Shipped Weight : Shipped Weight /(Head Received + Doa's)
  // WRK.Hd Cnt Org Ship Usr = PAR.TH Head Received + PAR.TH Dead On Arrival
  WRK.Hd_Cnt_Org_Ship_Usr = PAR.TH_Head_Received + PAR.TH_Dead_On_Arrival;

  CASE;

  // IF WRK.Hd Cnt Org Ship Usr is *Zeros
  IF WRK.Hd_Cnt_Org_Ship_Usr = *ZERO;

  // WRK.Avg Weight USR = CON.*ZERO
  WRK.Avg_Weight_USR = *ZERO;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Avg Weight USR = PAR.TH Shipped Weight / WRK.Hd Cnt Org Ship Usr *
  WRK.Avg_Weight_USR = PAR.TH_Shipped_Weight / WRK.Hd_Cnt_Org_Ship_Usr;

  ENDIF;

  // WRK.Doa's Avg Weight Usr = WRK.Avg Weight USR * PAR.TH Dead On Arrival *
  WRK.Doa_s_Avg_Weight_Usr = WRK.Avg_Weight_USR * PAR.TH_Dead_On_Arrival;

  //?  Subtract doa's from Shipped Wgt
  // WRK.Ship Wgt Tot Usr = PAR.TH Shipped Weight - WRK.Doa's Avg Weight Usr
  WRK.Ship_Wgt_Tot_Usr = PAR.TH_Shipped_Weight - WRK.Doa_s_Avg_Weight_Usr;

  // Shipped Weight Total Ext
  PAR.Trans_Extended_Amt_Usr = ( WRK.Ship_Wgt_Tot_Usr / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
  'H';

  //?WEIGHT
  // IF PAR.Trans UOM USR is SW - Doa's WT - Yrd Dd WT
  IF PAR.Trans_UOM_USR = 'SX';

  //?  Calc Avg shipped wgt, then calc wgt of DOA'S and Yard Deads
  //?This rule was defined on 01/14/97
  //?The Calculations for Avg Shipped Weights are
  //?Head Received should be the live hogs that walk across the scale
  //?Doa's should be the hogs that died either after we collected
  //?      or before we weighed them
  //?Avg Shipped Weight : Shipped Weight /(Head Received + Doa's)
  // WRK.Hd Cnt Org Ship Usr = PAR.TH Head Received + PAR.TH Dead On Arrival
  WRK.Hd_Cnt_Org_Ship_Usr = PAR.TH_Head_Received + PAR.TH_Dead_On_Arrival;

  CASE;

  // IF WRK.Hd Cnt Org Ship Usr is *Zeros
  IF WRK.Hd_Cnt_Org_Ship_Usr = *ZERO;

  // WRK.Avg Weight USR = CON.*ZERO
  WRK.Avg_Weight_USR = *ZERO;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Avg Weight USR = PAR.TH Shipped Weight / WRK.Hd Cnt Org Ship Usr *
  WRK.Avg_Weight_USR = PAR.TH_Shipped_Weight / WRK.Hd_Cnt_Org_Ship_Usr;

  ENDIF;

  // WRK.Yard dead weight      USR = WRK.Avg Weight USR * PAR.TH Yard Deads *
  WRK.Yard_dead_weight_USR = WRK.Avg_Weight_USR * PAR.TH_Yard_Deads;

  // WRK.Doa's Avg Weight Usr = WRK.Avg Weight USR * PAR.TH Dead On Arrival *
  WRK.Doa_s_Avg_Weight_Usr = WRK.Avg_Weight_USR * PAR.TH_Dead_On_Arrival;

  //?  Subtract Doa's and Subtract Yard Dead wgt from Shipped Wgt
  // WRK.Ship Wgt Tot Usr = PAR.TH Shipped Weight - WRK.Doa's Avg Weight Usr
  WRK.Ship_Wgt_Tot_Usr = PAR.TH_Shipped_Weight - WRK.Doa_s_Avg_Weight_Usr;

  // WRK.Ship Wgt Tot Usr = WRK.Ship Wgt Tot Usr - WRK.Yard dead weight      USR
  WRK.Ship_Wgt_Tot_Usr = WRK.Ship_Wgt_Tot_Usr - WRK.Yard_dead_weight_USR;

  // Shipped wgt less Yd
  PAR.Trans_Extended_Amt_Usr = ( WRK.Ship_Wgt_Tot_Usr / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
  'H';

  ENDIF;

  //?Extension
  // IF PAR.Trans UOM USR is Value UOM
  IF PAR.Trans_UOM_USR = 'GV'/'BD';

  //?* * * * *    VALUE    * * * * *
  //?VALUE
  CASE;

  // IF PAR.Trans UOM USR is Gross Hundred Value
  IF PAR.Trans_UOM_USR = 'GV';

  // Gross Hundred Value
  PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Payment_Gross / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
  'H';

  //?VALUE
  // IF PAR.Trans UOM USR is Carcass Hundred Weight
  IF PAR.Trans_UOM_USR = 'CW';

  // Carcass Hundred Value
  PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Hot_Wgt / 100 'H' ) * PAR.Trans_Unit_Amt_Usr 'H';

  //?VALUE
  // IF PAR.Trans UOM USR is Base Market Dollars
  IF PAR.Trans_UOM_USR = 'BD';

  // Call program Clc Base Mkt Dollars  XF.
  CALL PROGRAM(Clc Base Mkt Dollars  XF) ('PKBSE01');
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.TH_Purchase_Date);
  PARAMETER(PAR.TH_Live_Wgt);
  PARAMETER(PAR.DED_D_A_Code);
  PARAMETER(WRK.Base_Mkt_Prc_Amt_Tot_USR);

  CASE;

  // IF WRK.Base Mkt Prc Amt Tot USR GE WRK.Zero USR
  IF WRK.Base_Mkt_Prc_Amt_Tot_USR >= WRK.Zero_USR;

  // Base Market Dollars
  PAR.Trans_Extended_Amt_Usr = ( WRK.Base_Mkt_Prc_Amt_Tot_USR / 100 'H' )
  * PAR.Trans_Unit_Amt_Usr 'H';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Trans Extended Amt Usr = CON.*ZERO
  PAR.Trans_Extended_Amt_Usr = *ZERO;

  ENDIF;

  ENDIF;

  //?Extension
  // IF PAR.Trans UOM USR is Percent UOM
  IF PAR.Trans_UOM_USR = *BLANK;

  //?* * * * *    PERCENT   * * * * *
  //?PERCENT
  CASE;

  // IF PAR.Trans UOM USR is Percent of Gross Value
  IF PAR.Trans_UOM_USR = *BLANK;

  // Percent of Gross Value
  PAR.Trans_Extended_Amt_Usr = ( PAR.Trans_Unit_Amt_Usr / 100 'H' ) * PAR.TH_Payment_Gross
  'H';

  ENDIF;

  ENDIF;

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Clc UOM Extension     IF) TYPE(EXCINTFUN)                      AB1143053;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.TH_Purchase_Date);
 PARAMETER(DB1.TH_Dead_On_Arrival);
 PARAMETER(DB1.TH_Head_Received);
 PARAMETER(DB1.TH_Yard_Deads);
 PARAMETER(DB1.TH_Held_Over);
 PARAMETER(DB1.TH_Head_Condemned);
 PARAMETER(DB1.TH_Head_Killed);
 PARAMETER(DB1.TH_Live_Wgt);
 PARAMETER(DB1.TH_Hot_Wgt);
 PARAMETER(DB1.TH_Avg_Live_Wgt);
 PARAMETER(DB1.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(DB1.TH_Payment_Gross);
 PARAMETER(DB1.TH_Shipped_Weight);
 PARAMETER(DB1.TH_Head_EUT_KOA);
 PARAMETER(PAR.BOL_Freight_UOM);
 PARAMETER(PAR.BOL_Freight_Unit_Amt);
 PARAMETER(WRK.TH_Freight_Amount);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 {
  //?Execute internal function

  //?Extension
  CASE;

  // IF PAR.Trans UOM USR is Flat
  IF PAR.Trans_UOM_USR = 'FL';

  //?* * * * *   FLAT    * * * * *
  //?FLAT
  CASE;

  // IF PAR.Trans UOM USR is Flat
  IF PAR.Trans_UOM_USR = 'FL';

  // PAR.Trans Extended Amt Usr = PAR.Trans Unit Amt Usr * CON.1 *Rounded
  PAR.Trans_Extended_Amt_Usr = PAR.Trans_Unit_Amt_Usr * 1 'H';

  ENDIF;

  //?Extension
  // IF PAR.Trans UOM USR is Head UOM
  IF PAR.Trans_UOM_USR = 'DH'/'RH'/'YH'/'CH'/'KH'/'NH'/'DY'/'RX'/'HM'/'DE';

  //?* * * * *    HEAD   * * * * *
  //?HEAD
  CASE;

  // IF PAR.Trans UOM USR is Received Head
  IF PAR.Trans_UOM_USR = 'RH';

  // PAR.Trans Extended Amt Usr = PAR.TH Head Received * PAR.Trans Unit Amt Usr *Roun
  PAR.Trans_Extended_Amt_Usr = PAR.TH_Head_Received * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is Received Hd less Yard Dd
  IF PAR.Trans_UOM_USR = 'RX';

  // WRK.Net Head Usr = PAR.TH Head Received - PAR.TH Yard Deads
  WRK.Net_Head_Usr = PAR.TH_Head_Received - PAR.TH_Yard_Deads;

  // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
  PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is Killed Head
  IF PAR.Trans_UOM_USR = 'KH';

  // PAR.Trans Extended Amt Usr = PAR.TH Head Killed * PAR.Trans Unit Amt Usr *Rounde
  PAR.Trans_Extended_Amt_Usr = PAR.TH_Head_Killed * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is Condemned Head
  IF PAR.Trans_UOM_USR = 'CH';

  // PAR.Trans Extended Amt Usr = PAR.TH Head Condemned * PAR.Trans Unit Amt Usr *Rou
  PAR.Trans_Extended_Amt_Usr = PAR.TH_Head_Condemned * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is Yard Deads Head
  IF PAR.Trans_UOM_USR = 'YH';

  // PAR.Trans Extended Amt Usr = PAR.TH Yard Deads * PAR.Trans Unit Amt Usr *Rounded
  PAR.Trans_Extended_Amt_Usr = PAR.TH_Yard_Deads * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is DOA Head
  IF PAR.Trans_UOM_USR = 'DH';

  // PAR.Trans Extended Amt Usr = PAR.TH Dead On Arrival * PAR.Trans Unit Amt Usr *Ro
  PAR.Trans_Extended_Amt_Usr = PAR.TH_Dead_On_Arrival * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is Net Head
  IF PAR.Trans_UOM_USR = 'NH';

  // WRK.Net Head Usr = PAR.TH Head Received
  WRK.Net_Head_Usr = PAR.TH_Head_Received;

  // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Yard Deads
  WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Yard_Deads;

  // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Head Condemned
  WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Head_Condemned;

  // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
  PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is DOA Head + Yard Dead Head
  IF PAR.Trans_UOM_USR = 'DY';

  // WRK.Net Head Usr = PAR.TH Dead On Arrival + PAR.TH Yard Deads
  WRK.Net_Head_Usr = PAR.TH_Dead_On_Arrival + PAR.TH_Yard_Deads;

  // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
  PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is DOA HD + Yard Dead + EUT
  IF PAR.Trans_UOM_USR = 'DE';

  // WRK.Net Head Usr = PAR.TH Dead On Arrival + PAR.TH Yard Deads
  WRK.Net_Head_Usr = PAR.TH_Dead_On_Arrival + PAR.TH_Yard_Deads;

  // WRK.Net Head Usr = WRK.Net Head Usr + PAR.TH Head EUT/KOA
  WRK.Net_Head_Usr = WRK.Net_Head_Usr + PAR.TH_Head_EUT_KOA;

  // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
  PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is Received Head /100 Miles
  IF PAR.Trans_UOM_USR = 'HM';

  // PAR.Trans Extended Amt Usr =       *
  PAR.Trans_Extended_Amt_Usr = ( PAR.PSM_Miles_to_Company * PAR.TH_Head_Killed 'H' ) * (
  PAR.Trans_Unit_Amt_Usr / 100 'H' ) 'H';

  ENDIF;

  //?Extension
  // IF PAR.Trans UOM USR is Weight UOM
  IF PAR.Trans_UOM_USR = 'CW'/'LW'/'NL'/'SW'/'LX'/'SX';

  //?* * * * *    WEIGHT   * * * * *
  //?WEIGHT
  CASE;

  // IF PAR.Trans UOM USR is Live Hundred Weight
  IF PAR.Trans_UOM_USR = 'LW';

  // Live hundred wgt
  PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Live_Wgt / 100 'H' ) * PAR.Trans_Unit_Amt_Usr 'H';

  //?WEIGHT
  // IF PAR.Trans UOM USR is LW less Yard Dead Wgt
  IF PAR.Trans_UOM_USR = 'LX';

  //? Calc wgt of yard dead based on Th avg live wgt
  // WRK.Yard dead weight      USR = PAR.TH Avg Live Wgt * PAR.TH Yard Deads *
  WRK.Yard_dead_weight_USR = PAR.TH_Avg_Live_Wgt * PAR.TH_Yard_Deads;

  //?  Subtract Yard Dead wgt from Live Wgt
  // WRK.Live Weight           USR = PAR.TH Live Wgt - WRK.Yard dead weight      USR
  WRK.Live_Weight_USR = PAR.TH_Live_Wgt - WRK.Yard_dead_weight_USR;

  // Live hundred wgt less Yd
  PAR.Trans_Extended_Amt_Usr = ( WRK.Live_Weight_USR / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
  'H';

  //?WEIGHT
  // IF PAR.Trans UOM USR is Carcass Hundred Weight
  IF PAR.Trans_UOM_USR = 'CW';

  // Carcass Hundred Wgt
  PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Hot_Wgt / 100 'H' ) * PAR.Trans_Unit_Amt_Usr 'H';

  //?WEIGHT
  // IF PAR.Trans UOM USR is Net Live Weight
  IF PAR.Trans_UOM_USR = 'NL';

  // WRK.Net Head Usr = PAR.TH Head Received
  WRK.Net_Head_Usr = PAR.TH_Head_Received;

  // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Yard Deads
  WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Yard_Deads;

  // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Head Condemned
  WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Head_Condemned;

  //?* Insert avg live weight
  // WRK.Net Live Weight Usr = WRK.Net Head Usr * PAR.TH Avg Live Wgt *
  WRK.Net_Live_Weight_Usr = WRK.Net_Head_Usr * PAR.TH_Avg_Live_Wgt;

  // Net Live Weight
  PAR.Trans_Extended_Amt_Usr = ( WRK.Net_Live_Weight_Usr / 100 'H' )
  * PAR.Trans_Unit_Amt_Usr 'H';

  //?WEIGHT
  // IF PAR.Trans UOM USR is Shipped Weight - Doa's
  IF PAR.Trans_UOM_USR = 'SW';

  //?  Calc Avg shipped wgt, then calc wgt of DOA'S
  //?This rule was defined on 01/14/97
  //?The Calculations for Avg Shipped Weights are
  //?Head Received should be the live hogs that walk across the scale
  //?Doa's should be the hogs that died either after we collected
  //?      or before we weighed them
  //?Avg Shipped Weight : Shipped Weight /(Head Received + Doa's)
  // WRK.Hd Cnt Org Ship Usr = PAR.TH Head Received + PAR.TH Dead On Arrival
  WRK.Hd_Cnt_Org_Ship_Usr = PAR.TH_Head_Received + PAR.TH_Dead_On_Arrival;

  CASE;

  // IF WRK.Hd Cnt Org Ship Usr is *Zeros
  IF WRK.Hd_Cnt_Org_Ship_Usr = *ZERO;

  // WRK.Avg Weight USR = CON.*ZERO
  WRK.Avg_Weight_USR = *ZERO;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Avg Weight USR = PAR.TH Shipped Weight / WRK.Hd Cnt Org Ship Usr *
  WRK.Avg_Weight_USR = PAR.TH_Shipped_Weight / WRK.Hd_Cnt_Org_Ship_Usr;

  ENDIF;

  // WRK.Doa's Avg Weight Usr = WRK.Avg Weight USR * PAR.TH Dead On Arrival *
  WRK.Doa_s_Avg_Weight_Usr = WRK.Avg_Weight_USR * PAR.TH_Dead_On_Arrival;

  //?  Subtract doa's from Shipped Wgt
  // WRK.Ship Wgt Tot Usr = PAR.TH Shipped Weight - WRK.Doa's Avg Weight Usr
  WRK.Ship_Wgt_Tot_Usr = PAR.TH_Shipped_Weight - WRK.Doa_s_Avg_Weight_Usr;

  // Shipped Weight Total Ext
  PAR.Trans_Extended_Amt_Usr = ( WRK.Ship_Wgt_Tot_Usr / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
  'H';

  //?WEIGHT
  // IF PAR.Trans UOM USR is SW - Doa's WT - Yrd Dd WT
  IF PAR.Trans_UOM_USR = 'SX';

  //?  Calc Avg shipped wgt, then calc wgt of DOA'S and Yard Deads
  //?This rule was defined on 01/14/97
  //?The Calculations for Avg Shipped Weights are
  //?Head Received should be the live hogs that walk across the scale
  //?Doa's should be the hogs that died either after we collected
  //?      or before we weighed them
  //?Avg Shipped Weight : Shipped Weight /(Head Received + Doa's)
  // WRK.Hd Cnt Org Ship Usr = PAR.TH Head Received + PAR.TH Dead On Arrival
  WRK.Hd_Cnt_Org_Ship_Usr = PAR.TH_Head_Received + PAR.TH_Dead_On_Arrival;

  CASE;

  // IF WRK.Hd Cnt Org Ship Usr is *Zeros
  IF WRK.Hd_Cnt_Org_Ship_Usr = *ZERO;

  // WRK.Avg Weight USR = CON.*ZERO
  WRK.Avg_Weight_USR = *ZERO;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Avg Weight USR = PAR.TH Shipped Weight / WRK.Hd Cnt Org Ship Usr *
  WRK.Avg_Weight_USR = PAR.TH_Shipped_Weight / WRK.Hd_Cnt_Org_Ship_Usr;

  ENDIF;

  // WRK.Yard dead weight      USR = WRK.Avg Weight USR * PAR.TH Yard Deads *
  WRK.Yard_dead_weight_USR = WRK.Avg_Weight_USR * PAR.TH_Yard_Deads;

  // WRK.Doa's Avg Weight Usr = WRK.Avg Weight USR * PAR.TH Dead On Arrival *
  WRK.Doa_s_Avg_Weight_Usr = WRK.Avg_Weight_USR * PAR.TH_Dead_On_Arrival;

  //?  Subtract Doa's and Subtract Yard Dead wgt from Shipped Wgt
  // WRK.Ship Wgt Tot Usr = PAR.TH Shipped Weight - WRK.Doa's Avg Weight Usr
  WRK.Ship_Wgt_Tot_Usr = PAR.TH_Shipped_Weight - WRK.Doa_s_Avg_Weight_Usr;

  // WRK.Ship Wgt Tot Usr = WRK.Ship Wgt Tot Usr - WRK.Yard dead weight      USR
  WRK.Ship_Wgt_Tot_Usr = WRK.Ship_Wgt_Tot_Usr - WRK.Yard_dead_weight_USR;

  // Shipped wgt less Yd
  PAR.Trans_Extended_Amt_Usr = ( WRK.Ship_Wgt_Tot_Usr / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
  'H';

  ENDIF;

  //?Extension
  // IF PAR.Trans UOM USR is Value UOM
  IF PAR.Trans_UOM_USR = 'GV'/'BD';

  //?* * * * *    VALUE    * * * * *
  //?VALUE
  CASE;

  // IF PAR.Trans UOM USR is Gross Hundred Value
  IF PAR.Trans_UOM_USR = 'GV';

  // Gross Hundred Value
  PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Payment_Gross / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
  'H';

  //?VALUE
  // IF PAR.Trans UOM USR is Carcass Hundred Weight
  IF PAR.Trans_UOM_USR = 'CW';

  // Carcass Hundred Value
  PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Hot_Wgt / 100 'H' ) * PAR.Trans_Unit_Amt_Usr 'H';

  //?VALUE
  // IF PAR.Trans UOM USR is Base Market Dollars
  IF PAR.Trans_UOM_USR = 'BD';

  // Call program Clc Base Mkt Dollars  XF.
  CALL PROGRAM(Clc Base Mkt Dollars  XF) ('PKBSE01');
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.TH_Purchase_Date);
  PARAMETER(PAR.TH_Live_Wgt);
  PARAMETER(PAR.DED_D_A_Code);
  PARAMETER(WRK.Base_Mkt_Prc_Amt_Tot_USR);

  CASE;

  // IF WRK.Base Mkt Prc Amt Tot USR GE WRK.Zero USR
  IF WRK.Base_Mkt_Prc_Amt_Tot_USR >= WRK.Zero_USR;

  // Base Market Dollars
  PAR.Trans_Extended_Amt_Usr = ( WRK.Base_Mkt_Prc_Amt_Tot_USR / 100 'H' )
  * PAR.Trans_Unit_Amt_Usr 'H';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Trans Extended Amt Usr = CON.*ZERO
  PAR.Trans_Extended_Amt_Usr = *ZERO;

  ENDIF;

  ENDIF;

  //?Extension
  // IF PAR.Trans UOM USR is Percent UOM
  IF PAR.Trans_UOM_USR = *BLANK;

  //?* * * * *    PERCENT   * * * * *
  //?PERCENT
  CASE;

  // IF PAR.Trans UOM USR is Percent of Gross Value
  IF PAR.Trans_UOM_USR = *BLANK;

  // Percent of Gross Value
  PAR.Trans_Extended_Amt_Usr = ( PAR.Trans_Unit_Amt_Usr / 100 'H' ) * PAR.TH_Payment_Gross
  'H';

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?Test for running out of money
 CASE;

 // IF WRK.Freight Amount Usr GT WRK.TH Freight Amount
 IF WRK.Freight_Amount_Usr > WRK.TH_Freight_Amount;

 //?Test for running out of money
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.TH Freight Amount = WRK.Freight Amount Usr
 WRK.TH_Freight_Amount = WRK.Freight_Amount_Usr;

 ENDIF;

 // WRK.TH Calc Net Sts = CND.Re-Calculate
 WRK.TH_Calc_Net_Sts = 'R';

 // WRK.Freight Allow Was App Usr = CND.Yes
 WRK.Freight_Allow_Was_App_Usr = 'Y';

 // WRK.Tattoo Number USR = DB1.TH Tattoo Number
 WRK.Tattoo_Number_USR = DB1.TH_Tattoo_Number;

 // WRK.Kill Date Usr = DB1.TH Tattoo Number
 WRK.Kill_Date_Usr = DB1.TH_Tattoo_Number;

 // WRK.Freight Amount Usr = WRK.Freight Amount Usr - WRK.TH Freight Amount
 WRK.Freight_Amount_Usr = WRK.Freight_Amount_Usr - WRK.TH_Freight_Amount;

 //?Parm Freight Allow apply yes, or no
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Calculate freight unapplied zero out
 // WRK.Freight Allow Was App Usr = CND.Yes
 WRK.Freight_Allow_Was_App_Usr = 'Y';

 // WRK.TH Freight Amount = CON.*ZERO
 WRK.TH_Freight_Amount = *ZERO;

 EXECUTE FUNCTION(Chg Freight Amount    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1146228;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.TH_Freight_Amount);
 PARAMETER(DB1.TH_Calc_Net_Sts);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

 //?Update tattoo with freight amount
 EXECUTE FUNCTION(Chg Freight Amount    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1146228;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.TH_Freight_Amount);
 PARAMETER(WRK.TH_Calc_Net_Sts);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 //?Save tattoo/kill date in case Freight is left over to be spread.
 // WRK.Last Tattoo Nbr = DB1.TH Tattoo Number
 WRK.Last_Tattoo_Nbr = DB1.TH_Tattoo_Number;

 // WRK.Kill Date Usr = DB1.TH Kill Date
 WRK.Kill_Date_Usr = DB1.TH_Kill_Date;

 ENDIF;

 ENDIF;

 //?USER: Exit processing

 //?If Freight was applied spread any left over to last mkt ttt
 CASE;

 // IF WRK.Freight Allow Was App Usr is Yes
 IF WRK.Freight_Allow_Was_App_Usr = 'Y';

 // WRK.Freight Allow Was App Usr = CND.No
 WRK.Freight_Allow_Was_App_Usr = 'N';

 // WRK.BOL Freight Allocation = CND.Freight is not Allocated
 WRK.BOL_Freight_Allocation = *BLANK;

 CASE;

 // IF PAR.Freight Allociation Apply is Yes
 IF PAR.Freight_Allociation_Apply = 'Y';

 //?Freight is allocated
 //?Test for money left over
 CASE;

 // IF WRK.Freight Amount Usr GT WRK.Zero USR
 IF WRK.Freight_Amount_Usr > WRK.Zero_USR;

 // WRK.TH Freight Amount = WRK.TH Freight Amount + WRK.Freight Amount Usr
 WRK.TH_Freight_Amount = WRK.TH_Freight_Amount + WRK.Freight_Amount_Usr;

 EXECUTE FUNCTION(Upd Lst Ttto Frt      RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1142887;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(WRK.Last_Tattoo_Nbr);
 PARAMETER(WRK.Kill_Date_Usr);
 PARAMETER(WRK.TH_Freight_Amount);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Lst Ttto Frt      CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1190746;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(PAR.TH_Freight_Amount);
 }

 //?Test for money left over
 // IF *OTHERWISE
 IF *OTHERWISE;

 ENDIF;

 //?Freight is allocated
 // WRK.BOL Freight Allocation = CND.Freight is Allocated
 WRK.BOL_Freight_Allocation = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Freight is not allocated
 // WRK.BOL Freight Allocation = CND.Freight is not Allocated
 WRK.BOL_Freight_Allocation = *BLANK;

 ENDIF;

 EXECUTE FUNCTION(Upd Bol Frt Alloc     IF) TYPE(EXCINTFUN)                      AB1183433;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(WRK.BOL_Freight_Allocation);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Chg Buy Order Frt/FL  CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1183434;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.BOL_Freight_Allocation);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 // WRK.Freight Allow Was App Usr = CND.No
 WRK.Freight_Allow_Was_App_Usr = 'N';

 ENDIF;

}


