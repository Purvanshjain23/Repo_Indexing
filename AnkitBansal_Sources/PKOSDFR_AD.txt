// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKOSDFR
// ?Date: 14.08.2025 Time: 02:51:15
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?H16853 ISE 01/23/21 - Increased the length from 5 to 7 and corrected the
//?                      alignment of Buy Order Number field.
ENDDO;

// WRK.Re-Cal Totals/Avg Usr = CND.No
WRK.Re_Cal_Totals_Avg_Usr = 'N';

// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


//?USER: Initialize subfile control

EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.Name_Producer_DRV);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
PARAMETER(CTL.Name_Producer_Loc_DRV);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF CTL.ET Error Sts is Balance
IF CTL.ET_Error_Sts = 'B';

// IF CTL.ET Error Sts is Error
IF CTL.ET_Error_Sts = 'E';

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Errs on EvTrn/Tatt RT) TYPE(RTVOBJ) FILE(PKBVCPP)          AB1182008;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER('E');
PARAMETER(WRK.Error_Type_Found);
{
 //?USER: Processing if Data record not found

 // PAR.Error Type Found = CND.No
 PAR.Error_Type_Found = 'N';

 //?USER: Process Data record

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 QUIT;

}


EXECUTE FUNCTION(Rtv Uploaded Head     RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1223572;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(CTL.Uploaded_Head_USR);
{
 //?USER: Initialize routine

 // PAR.Uploaded Head USR = CON.*ZERO
 PAR.Uploaded_Head_USR = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.ET Record Add/Del Sts is Uploaded Records
 IF DB1.ET_Record_Add_Del_Sts = *BLANK/'D';

 // PAR.Uploaded Head USR = PAR.Uploaded Head USR + CON.1
 PAR.Uploaded_Head_USR = PAR.Uploaded_Head_USR + 1;

 ENDIF;

}


CASE;

// IF CTL.Net Head Usr is GT Zero
IF CTL.Net_Head_Usr > *ZERO;

//?Compute: % Uploaded head
CASE;

// IF CTL.Uploaded Head USR is GT Zero
IF CTL.Uploaded_Head_USR > *ZERO;

// CTL.Percent Uploaded Hd   USR =       *
CTL.Percent_Uploaded_Hd_USR = ( CTL.Uploaded_Head_USR / CTL.Net_Head_Usr ) * 100;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Percent Uploaded Hd   USR = CON.*ZERO
CTL.Percent_Uploaded_Hd_USR = *ZERO;

ENDIF;

CASE;

// IF WRK.Error Type Found is Critical Error
IF WRK.Error_Type_Found = 'Y';

// CTL.ET Error Sts = CND.Error
CTL.ET_Error_Sts = 'E';

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.ET Error Sts = CND.Balance
CTL.ET_Error_Sts = 'B';

ENDIF;

ENDIF;

//?USER: Initialize subfile record from DBF record

// RCD.Error Type 1 Usr = CND.No
RCD.Error_Type_1_Usr = 'N';

// RCD.Error Type 2 Usr = CND.No
RCD.Error_Type_2_Usr = 'N';

// RCD.Error Type 3 Usr = CND.No
RCD.Error_Type_3_Usr = 'N';

// RCD.Error Type 4 Usr = CND.No
RCD.Error_Type_4_Usr = 'N';

// RCD.Error Type 5 Usr = CND.No
RCD.Error_Type_5_Usr = 'N';

// RCD.Error Type 6 Usr = CND.No
RCD.Error_Type_6_Usr = 'N';

// RCD.Error Type 7 Usr = CND.No
RCD.Error_Type_7_Usr = 'N';

EXECUTE FUNCTION(RTV Check for Error   RT) TYPE(RTVOBJ) FILE(PKB6CPP)           AB1111032;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.ET_Kill_Date);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.ET_Scale_Sequence_Number);
PARAMETER('E');
PARAMETER(RCD.Error_Type_1_Usr);
PARAMETER(RCD.Error_Type_2_Usr);
PARAMETER(RCD.Error_Type_3_Usr);
PARAMETER(RCD.Error_Type_4_Usr);
PARAMETER(RCD.Error_Type_5_Usr);
PARAMETER(WRK.Error_Type_Found);
PARAMETER(RCD.Error_Type_6_Usr);
PARAMETER(RCD.Error_Type_7_Usr);
{
 //?USER: Initialize routine

 // PAR.Error Type 1 Usr = CND.No
 PAR.Error_Type_1_Usr = 'N';

 // PAR.Error Type 2 Usr = CND.No
 PAR.Error_Type_2_Usr = 'N';

 // PAR.Error Type 3 Usr = CND.No
 PAR.Error_Type_3_Usr = 'N';

 // PAR.Error Type 4 Usr = CND.No
 PAR.Error_Type_4_Usr = 'N';

 // PAR.Error Type 5 Usr = CND.No
 PAR.Error_Type_5_Usr = 'N';

 // PAR.Error Type Found = CND.No
 PAR.Error_Type_Found = 'N';

 // PAR.Error Type 6 Usr = CND.No
 PAR.Error_Type_6_Usr = 'N';

 // PAR.Error Type 7 Usr = CND.No
 PAR.Error_Type_7_Usr = 'N';

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Eval Val Error    RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1111051;
 PARAMETER(DB1.KV_Error_Code);
 PARAMETER(WRK.EV_Description);
 PARAMETER(WRK.EV_Minimum);
 PARAMETER(WRK.EV_Maximum);
 PARAMETER(WRK.EV_Type);
 {
  //?USER: Processing if Data record not found

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.EV_Description = *BLANK;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.EV_Minimum = *ZERO;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.EV_Maximum = *ZERO;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.EV_Type = *BLANK;

  QUIT;

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?Check for Type of Error to Send back Flag
 CASE;

 // IF WRK.EV Type is Carcass Weights
 IF WRK.EV_Type = 'C';

 // PAR.Error Type 1 Usr = CND.Critical Error
 PAR.Error_Type_1_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 //?Check for Type of Error to Send back Flag
 // IF WRK.EV Type is % Rule for Head Killed
 IF WRK.EV_Type = 'P';

 // PAR.Error Type 5 Usr = CND.Critical Error
 PAR.Error_Type_5_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 //?Check for Type of Error to Send back Flag
 // IF WRK.EV Type is % Lean
 IF WRK.EV_Type = 'L';

 // PAR.Error Type 2 Usr = CND.Critical Error
 PAR.Error_Type_2_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 //?Check for Type of Error to Send back Flag
 // IF WRK.EV Type is Yield
 IF WRK.EV_Type = 'Y';

 // OR DB1.KV Error Code is Yield Parameter Error
 OR DB1.KV_Error_Code = 'YLD';

 // PAR.Error Type 3 Usr = CND.Critical Error
 PAR.Error_Type_3_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 //?Check for Type of Error to Send back Flag
 // IF WRK.EV Type is Missing Transaction
 IF WRK.EV_Type = 'B';

 // PAR.Error Type 4 Usr = CND.Critical Error
 PAR.Error_Type_4_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 //?Check for Type of Error to Send back Flag
 // IF WRK.EV Type is Backfat
 IF WRK.EV_Type = 'F';

 // PAR.Error Type 6 Usr = CND.Critical Error
 PAR.Error_Type_6_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 //?Check for Type of Error to Send back Flag
 // IF WRK.EV Type is Loin Eye
 IF WRK.EV_Type = 'E';

 // PAR.Error Type 7 Usr = CND.Critical Error
 PAR.Error_Type_7_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 ENDIF;

}


CASE;

// IF DB1.ET Record Created W/Avg is Created With Average Rtn
IF DB1.ET_Record_Created_W_Avg = 'C';

// RCD.Avg Was Used Usr = CON.Changed
RCD.Avg_Was_Used_Usr = 'Changed';

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Avg Was Used Usr = CON.*BLANK
RCD.Avg_Was_Used_Usr = *BLANK;

ENDIF;

//?CALC: Subfile control function fields

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// WRK.Requested by User to Bal = CND.No
WRK.Requested_by_User_to_Bal = 'N';

EXECUTE FUNCTION(Name Producer DRV) TYPE(DRVFLD)                                AB1110026;
PARAMETER(CTL.Name_Producer_DRV);
PARAMETER(CTL.PD_Producer_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.Name_Producer_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Name Producer Loc DRV) TYPE(DRVFLD)                            AB1110027;
PARAMETER(CTL.Name_Producer_Loc_DRV);
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PL_Location_Code);
 PARAMETER(PAR.Name_Producer_Loc_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Process subfile control (Pre-confirm)

CASE;

// IF CTL.*CMD key is CF13
IF CTL.*CMD_key = '13';

// Call program Edt Live Price        E1.
CALL PROGRAM(Edt Live Price        E1) ('PKGBE1R');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF CTL.*CMD key is CF14
IF CTL.*CMD_key = '14';

//?* Project hpe068
//?* Delete Errors and add at averages
// Call program Zzz EvTrn/Tatto/Errs  XF.
CALL PROGRAM(Zzz EvTrn/Tatto/Errs  XF) ('PKCSXFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);

//?Test for Zeros totals
CASE;

// IF CTL.TH Head Killed is *Zeros
IF CTL.TH_Head_Killed = *ZERO;

// Send error message - 'No Records for Averages'
ERROR(PRK0355);

QUIT;

ENDIF;

// WRK.Requested by User to Bal = CND.Yes
WRK.Requested_by_User_to_Bal = 'Y';

// Call program Bal Tattoo W/Kill Edt  XF.
CALL PROGRAM(Bal Tattoo W/Kill Edt  XF) ('PKLHXFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER('E');
PARAMETER(CTL.TH_Schedule_Kill_Shift);
PARAMETER(WRK.Requested_by_User_to_Bal);
PARAMETER(CTL.Oms_System_Value_Alpha);
PARAMETER(*BLANK);

// WRK.Requested by User to Bal = CND.No
WRK.Requested_by_User_to_Bal = 'N';

// WRK.Re-Cal Totals/Avg Usr = CND.No
WRK.Re_Cal_Totals_Avg_Usr = 'N';

EXECUTE FUNCTION(RTV Tattoo Record     RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1111223;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(CTL.TH_Purchase_Date);
PARAMETER(CTL.TH_Group_Reference);
PARAMETER(CTL.TH_Live_Purchase_UOM);
PARAMETER(CTL.TH_Live_Purchase_Price);
PARAMETER(CTL.TH_Resale_UOM);
PARAMETER(CTL.TH_Recalc_Live_Wgt_Yld);
PARAMETER(CTL.TH_Pricing_Date);
PARAMETER(CTL.TH_Resale_Spread_Sts);
PARAMETER(CTL.TH_Dead_On_Arrival);
PARAMETER(CTL.TH_Head_Received);
PARAMETER(CTL.TH_Yard_Deads);
PARAMETER(WRK.TH_Held_Over);
PARAMETER(CTL.TH_Head_Condemned);
PARAMETER(CTL.TH_Head_Killed);
PARAMETER(WRK.TH_Head_Adds);
PARAMETER(WRK.TH_Head_Accepted);
PARAMETER(CTL.TH_Live_Wgt);
PARAMETER(CTL.TH_Hot_Wgt);
PARAMETER(CTL.TH_Tot_Loin_Eye_Depth);
PARAMETER(CTL.TH_Tot_Backfat_Inches);
PARAMETER(CTL.TH_Tot_Light_Reflectance);
PARAMETER(CTL.TH_Avg_Live_Wgt);
PARAMETER(CTL.TH_Avg_Hot_Wgt);
PARAMETER(CTL.TH_Avg_Light_Reflectance);
PARAMETER(CTL.TH_Avg_Lean_Percent);
PARAMETER(CTL.TH_Avg_Loin_Eye_Depth);
PARAMETER(CTL.TH_Avg_Backfat);
PARAMETER(CTL.TH_Std_Yield_Percent);
PARAMETER(CTL.TH_Actual_Yield);
PARAMETER(CTL.TH_Yield_Difference);
PARAMETER(CTL.TH_Recalc_Live_Wgt);
PARAMETER(CTL.TH_CM_Base_Mkt_Price);
PARAMETER(CTL.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(CTL.TH_CM_Sort_Discount_Amt);
PARAMETER(CTL.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(CTL.TH_CM_Base_Carcass_Value);
PARAMETER(CTL.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(CTL.TH_CM_Carcass_Gross_Amt);
PARAMETER(CTL.TH_Deduction_Amt);
PARAMETER(WRK.TH_Total_Net_WO_Adds);
PARAMETER(WRK.TH_Carcass_Net_Amt);
PARAMETER(WRK.TH_Additions_Amt);
PARAMETER(WRK.TH_Accrual_Amount);
PARAMETER(WRK.TH_Fixed_Cost_Amount);
PARAMETER(CTL.TH_Payment_Sts);
PARAMETER(CTL.TH_Header_Error_Sts);
PARAMETER(CTL.TH_Detail_Error_Sts);
PARAMETER(CTL.TH_Kill_Balancing_Sts);
PARAMETER(CTL.TH_Bal_to_Kill_Gen);
PARAMETER(WRK.TH_Commission_A_P_Voucher);
PARAMETER(WRK.TH_Voucher_Payment_Date);
PARAMETER(WRK.TH_User_Error_Override);
PARAMETER(WRK.TH_Held_Over_Record);
PARAMETER(WRK.TH_Sex);
PARAMETER(WRK.TH_Held_Ovr_Completed_Dte);
PARAMETER(WRK.TH_Commission_Paid_Date);
PARAMETER(WRK.TH_Actual_Check_Date);
PARAMETER(WRK.TH_Shipped_Weight);
PARAMETER(WRK.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(WRK.TH_FFLI);
PARAMETER(WRK.TH_Kill_Product_Value);
PARAMETER(WRK.TH_Cut_Product_Value);
PARAMETER(WRK.TH_Render_Product_Value);
PARAMETER(WRK.TH_Shift_Held_Over_Head);
PARAMETER(CTL.DF_Defect_Code);
PARAMETER(CTL.THP_Process_Code);
PARAMETER(WRK.HB_Buyer_Code);
PARAMETER(CTL.GN_Genetic_Code);
PARAMETER(CTL.HC_Class_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF CTL.*CMD key is CF15
IF CTL.*CMD_key = '15';

// WRK.Requested by User to Bal = CND.No
WRK.Requested_by_User_to_Bal = 'N';

// Call program Bal Tattoo W/Kill Edt  XF.
CALL PROGRAM(Bal Tattoo W/Kill Edt  XF) ('PKLHXFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER('E');
PARAMETER(CTL.TH_Schedule_Kill_Shift);
PARAMETER(WRK.Requested_by_User_to_Bal);
PARAMETER(CTL.Oms_System_Value_Alpha);
PARAMETER(*BLANK);

// WRK.Requested by User to Bal = CND.No
WRK.Requested_by_User_to_Bal = 'N';

// WRK.Re-Cal Totals/Avg Usr = CND.No
WRK.Re_Cal_Totals_Avg_Usr = 'N';

EXECUTE FUNCTION(RTV Tattoo Record     RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1111223;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(CTL.TH_Purchase_Date);
PARAMETER(CTL.TH_Group_Reference);
PARAMETER(CTL.TH_Live_Purchase_UOM);
PARAMETER(CTL.TH_Live_Purchase_Price);
PARAMETER(CTL.TH_Resale_UOM);
PARAMETER(CTL.TH_Recalc_Live_Wgt_Yld);
PARAMETER(CTL.TH_Pricing_Date);
PARAMETER(CTL.TH_Resale_Spread_Sts);
PARAMETER(CTL.TH_Dead_On_Arrival);
PARAMETER(CTL.TH_Head_Received);
PARAMETER(CTL.TH_Yard_Deads);
PARAMETER(WRK.TH_Held_Over);
PARAMETER(CTL.TH_Head_Condemned);
PARAMETER(CTL.TH_Head_Killed);
PARAMETER(WRK.TH_Head_Adds);
PARAMETER(WRK.TH_Head_Accepted);
PARAMETER(CTL.TH_Live_Wgt);
PARAMETER(CTL.TH_Hot_Wgt);
PARAMETER(CTL.TH_Tot_Loin_Eye_Depth);
PARAMETER(CTL.TH_Tot_Backfat_Inches);
PARAMETER(CTL.TH_Tot_Light_Reflectance);
PARAMETER(CTL.TH_Avg_Live_Wgt);
PARAMETER(CTL.TH_Avg_Hot_Wgt);
PARAMETER(CTL.TH_Avg_Light_Reflectance);
PARAMETER(CTL.TH_Avg_Lean_Percent);
PARAMETER(CTL.TH_Avg_Loin_Eye_Depth);
PARAMETER(CTL.TH_Avg_Backfat);
PARAMETER(CTL.TH_Std_Yield_Percent);
PARAMETER(CTL.TH_Actual_Yield);
PARAMETER(CTL.TH_Yield_Difference);
PARAMETER(CTL.TH_Recalc_Live_Wgt);
PARAMETER(CTL.TH_CM_Base_Mkt_Price);
PARAMETER(CTL.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(CTL.TH_CM_Sort_Discount_Amt);
PARAMETER(CTL.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(CTL.TH_CM_Base_Carcass_Value);
PARAMETER(CTL.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(CTL.TH_CM_Carcass_Gross_Amt);
PARAMETER(CTL.TH_Deduction_Amt);
PARAMETER(WRK.TH_Total_Net_WO_Adds);
PARAMETER(WRK.TH_Carcass_Net_Amt);
PARAMETER(WRK.TH_Additions_Amt);
PARAMETER(WRK.TH_Accrual_Amount);
PARAMETER(WRK.TH_Fixed_Cost_Amount);
PARAMETER(CTL.TH_Payment_Sts);
PARAMETER(CTL.TH_Header_Error_Sts);
PARAMETER(CTL.TH_Detail_Error_Sts);
PARAMETER(CTL.TH_Kill_Balancing_Sts);
PARAMETER(CTL.TH_Bal_to_Kill_Gen);
PARAMETER(WRK.TH_Commission_A_P_Voucher);
PARAMETER(WRK.TH_Voucher_Payment_Date);
PARAMETER(WRK.TH_User_Error_Override);
PARAMETER(WRK.TH_Held_Over_Record);
PARAMETER(WRK.TH_Sex);
PARAMETER(WRK.TH_Held_Ovr_Completed_Dte);
PARAMETER(WRK.TH_Commission_Paid_Date);
PARAMETER(WRK.TH_Actual_Check_Date);
PARAMETER(WRK.TH_Shipped_Weight);
PARAMETER(WRK.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(WRK.TH_FFLI);
PARAMETER(WRK.TH_Kill_Product_Value);
PARAMETER(WRK.TH_Cut_Product_Value);
PARAMETER(WRK.TH_Render_Product_Value);
PARAMETER(WRK.TH_Shift_Held_Over_Head);
PARAMETER(CTL.DF_Defect_Code);
PARAMETER(CTL.THP_Process_Code);
PARAMETER(WRK.HB_Buyer_Code);
PARAMETER(CTL.GN_Genetic_Code);
PARAMETER(CTL.HC_Class_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?Check for subfsel only in certain conditions
CASE;

// IF RCD.ET Error Sts is Balance
IF RCD.ET_Error_Sts = 'B';

CASE;

// IF RCD.*SFLSEL is Edit
IF RCD.*SFLSEL = '2'/'2';

// Send error message - 'Record is in Balance, User is not allowed to change record'
ERROR(PRK0290);
MSGPARM(RCD.*SFLSEL);

QUIT;

ENDIF;

//?15=default average
CASE;

// IF RCD.*SFLSEL is *Option 15 (Resuable)
IF RCD.*SFLSEL = '15';

// Send error message - 'Record is in Balance, User is not allowed to change record'
ERROR(PRK0290);
MSGPARM(RCD.*SFLSEL);

QUIT;

ENDIF;

ENDIF;

CASE;

// IF RCD.*SFLSEL is Edit
IF RCD.*SFLSEL = '2'/'2';

// Call program Zzz Evaluation Record E1.
CALL PROGRAM(Zzz Evaluation Record E1) ('PKL1E1R');
PARAMETER(RCD.ET_Company_Number);
PARAMETER(RCD.ET_Kill_Date);
PARAMETER(RCD.ET_Scale_Sequence_Number);
PARAMETER(RCD.ET_Carcass_Number);
PARAMETER(RCD.ET_Carcass_Number_Insert);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(CTL.TH_Live_Wgt);
PARAMETER(CTL.TH_Hot_Wgt);
PARAMETER(CTL.TH_Tot_Loin_Eye_Depth);
PARAMETER(CTL.TH_Tot_Backfat_Inches);
PARAMETER(CTL.TH_Tot_Light_Reflectance);
PARAMETER(CTL.TH_Avg_Live_Wgt);
PARAMETER(CTL.TH_Avg_Hot_Wgt);
PARAMETER(CTL.TH_Avg_Light_Reflectance);
PARAMETER(CTL.TH_Avg_Lean_Percent);
PARAMETER(CTL.TH_Avg_Loin_Eye_Depth);
PARAMETER(CTL.TH_Avg_Backfat);
PARAMETER(CTL.TH_Std_Yield_Percent);
PARAMETER(CTL.TH_Actual_Yield);
PARAMETER(CTL.TH_Yield_Difference);
PARAMETER(CTL.TH_Recalc_Live_Wgt);
PARAMETER(CTL.TH_Schedule_Kill_Shift);

EXECUTE FUNCTION(RTV Tattoo Record     RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1111223;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(CTL.TH_Purchase_Date);
PARAMETER(CTL.TH_Group_Reference);
PARAMETER(CTL.TH_Live_Purchase_UOM);
PARAMETER(CTL.TH_Live_Purchase_Price);
PARAMETER(CTL.TH_Resale_UOM);
PARAMETER(CTL.TH_Recalc_Live_Wgt_Yld);
PARAMETER(CTL.TH_Pricing_Date);
PARAMETER(CTL.TH_Resale_Spread_Sts);
PARAMETER(CTL.TH_Dead_On_Arrival);
PARAMETER(CTL.TH_Head_Received);
PARAMETER(CTL.TH_Yard_Deads);
PARAMETER(WRK.TH_Held_Over);
PARAMETER(CTL.TH_Head_Condemned);
PARAMETER(CTL.TH_Head_Killed);
PARAMETER(WRK.TH_Head_Adds);
PARAMETER(WRK.TH_Head_Accepted);
PARAMETER(CTL.TH_Live_Wgt);
PARAMETER(CTL.TH_Hot_Wgt);
PARAMETER(CTL.TH_Tot_Loin_Eye_Depth);
PARAMETER(CTL.TH_Tot_Backfat_Inches);
PARAMETER(CTL.TH_Tot_Light_Reflectance);
PARAMETER(CTL.TH_Avg_Live_Wgt);
PARAMETER(CTL.TH_Avg_Hot_Wgt);
PARAMETER(CTL.TH_Avg_Light_Reflectance);
PARAMETER(CTL.TH_Avg_Lean_Percent);
PARAMETER(CTL.TH_Avg_Loin_Eye_Depth);
PARAMETER(CTL.TH_Avg_Backfat);
PARAMETER(CTL.TH_Std_Yield_Percent);
PARAMETER(CTL.TH_Actual_Yield);
PARAMETER(CTL.TH_Yield_Difference);
PARAMETER(CTL.TH_Recalc_Live_Wgt);
PARAMETER(CTL.TH_CM_Base_Mkt_Price);
PARAMETER(CTL.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(CTL.TH_CM_Sort_Discount_Amt);
PARAMETER(CTL.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(CTL.TH_CM_Base_Carcass_Value);
PARAMETER(CTL.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(CTL.TH_CM_Carcass_Gross_Amt);
PARAMETER(CTL.TH_Deduction_Amt);
PARAMETER(WRK.TH_Total_Net_WO_Adds);
PARAMETER(WRK.TH_Carcass_Net_Amt);
PARAMETER(WRK.TH_Additions_Amt);
PARAMETER(WRK.TH_Accrual_Amount);
PARAMETER(WRK.TH_Fixed_Cost_Amount);
PARAMETER(CTL.TH_Payment_Sts);
PARAMETER(CTL.TH_Header_Error_Sts);
PARAMETER(CTL.TH_Detail_Error_Sts);
PARAMETER(CTL.TH_Kill_Balancing_Sts);
PARAMETER(CTL.TH_Bal_to_Kill_Gen);
PARAMETER(WRK.TH_Commission_A_P_Voucher);
PARAMETER(WRK.TH_Voucher_Payment_Date);
PARAMETER(WRK.TH_User_Error_Override);
PARAMETER(WRK.TH_Held_Over_Record);
PARAMETER(WRK.TH_Sex);
PARAMETER(WRK.TH_Held_Ovr_Completed_Dte);
PARAMETER(WRK.TH_Commission_Paid_Date);
PARAMETER(WRK.TH_Actual_Check_Date);
PARAMETER(WRK.TH_Shipped_Weight);
PARAMETER(WRK.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(WRK.TH_FFLI);
PARAMETER(WRK.TH_Kill_Product_Value);
PARAMETER(WRK.TH_Cut_Product_Value);
PARAMETER(WRK.TH_Render_Product_Value);
PARAMETER(WRK.TH_Shift_Held_Over_Head);
PARAMETER(CTL.DF_Defect_Code);
PARAMETER(CTL.THP_Process_Code);
PARAMETER(WRK.HB_Buyer_Code);
PARAMETER(CTL.GN_Genetic_Code);
PARAMETER(CTL.HC_Class_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

// IF RCD.*SFLSEL is Display Error
IF RCD.*SFLSEL = '5'/'5';

// Call program Dsp Error             DF.
CALL PROGRAM(Dsp Error             DF) ('PKEUDFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.ET_Kill_Date);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.ET_Scale_Sequence_Number);
PARAMETER('E');

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF RCD.*SFLSEL is Flag Delete
IF RCD.*SFLSEL = '7'/'7';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

// IF RCD.*SFLSEL is UnFlag Flag Delete
IF RCD.*SFLSEL = '9'/'9';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

// IF RCD.*SFLSEL is Override Error
IF RCD.*SFLSEL = '10';

CASE;

// IF RCD.ET Error Sts is Error
IF RCD.ET_Error_Sts = 'E';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'No Error To Override, select another option'
ERROR(PRK0407);

QUIT;

ENDIF;

// IF RCD.*SFLSEL is Remove Override Error
IF RCD.*SFLSEL = '11';

CASE;

// IF RCD.ET User Error Override is Yes
IF RCD.ET_User_Error_Override = 'Y';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'No Override Exist'
ERROR(PRK0408);

QUIT;

ENDIF;

// IF RCD.*SFLSEL is *Option 15 (Resuable)
IF RCD.*SFLSEL = '15';

//?Default averages    PK0127
// Call program Zzz Default Averages  XF.
CALL PROGRAM(Zzz Default Averages  XF) ('PKSNXFR');
PARAMETER(RCD.ET_Company_Number);
PARAMETER(RCD.ET_Kill_Date);
PARAMETER(RCD.ET_Scale_Sequence_Number);
PARAMETER(RCD.ET_Carcass_Number);
PARAMETER(RCD.ET_Carcass_Number_Insert);
PARAMETER(RCD.ET_Tattoo_Number);
PARAMETER(RCD.ET_Lot);
PARAMETER(RCD.ET_Shift);
PARAMETER(RCD.ET_Hot_Wgt);
PARAMETER(RCD.ET_Backfat_Thickness_Inch);
PARAMETER(RCD.ET_Loin_Eye_Depth_Inches);
PARAMETER(RCD.ET_Lean_Percent_NPPC);
PARAMETER(RCD.ET_Backfat_Thickness_MM);
PARAMETER(RCD.ET_Loineye_Depth_MM);
PARAMETER(RCD.ET_Light_Reflectance_MM);
PARAMETER(RCD.ET_Lean_Percent_FOM);
PARAMETER(RCD.ET_Light_Reflectance);
PARAMETER(RCD.ET_Trim_Area);
PARAMETER(RCD.ET_Carcass_Sex);
PARAMETER(RCD.ET_Error_Sts);
PARAMETER(RCD.ET_Record_Add_Del_Sts);
PARAMETER(RCD.ET_Record_Created_W_Avg);
PARAMETER(RCD.ET_Record_Created_Status);
PARAMETER(RCD.ET_User_Error_Override);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
PARAMETER(RCD.RU_Date);
PARAMETER(RCD.RU_Time);
PARAMETER(CTL.TH_Live_Wgt);
PARAMETER(CTL.TH_Hot_Wgt);
PARAMETER(CTL.TH_Tot_Loin_Eye_Depth);
PARAMETER(CTL.TH_Tot_Backfat_Inches);
PARAMETER(CTL.TH_Tot_Light_Reflectance);
PARAMETER(CTL.TH_Avg_Live_Wgt);
PARAMETER(CTL.TH_Avg_Hot_Wgt);
PARAMETER(CTL.TH_Avg_Light_Reflectance);
PARAMETER(CTL.TH_Avg_Lean_Percent);
PARAMETER(CTL.TH_Avg_Loin_Eye_Depth);
PARAMETER(CTL.TH_Avg_Backfat);
PARAMETER(CTL.TH_Std_Yield_Percent);
PARAMETER(CTL.TH_Actual_Yield);
PARAMETER(CTL.TH_Yield_Difference);
PARAMETER(CTL.TH_Recalc_Live_Wgt);
PARAMETER(CTL.TH_Schedule_Kill_Shift);
PARAMETER(PAR.Oms_System_Value_Alpha);

EXECUTE FUNCTION(RTV Tattoo Record     RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1111223;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(CTL.TH_Purchase_Date);
PARAMETER(CTL.TH_Group_Reference);
PARAMETER(CTL.TH_Live_Purchase_UOM);
PARAMETER(CTL.TH_Live_Purchase_Price);
PARAMETER(CTL.TH_Resale_UOM);
PARAMETER(CTL.TH_Recalc_Live_Wgt_Yld);
PARAMETER(CTL.TH_Pricing_Date);
PARAMETER(CTL.TH_Resale_Spread_Sts);
PARAMETER(CTL.TH_Dead_On_Arrival);
PARAMETER(CTL.TH_Head_Received);
PARAMETER(CTL.TH_Yard_Deads);
PARAMETER(WRK.TH_Held_Over);
PARAMETER(CTL.TH_Head_Condemned);
PARAMETER(CTL.TH_Head_Killed);
PARAMETER(WRK.TH_Head_Adds);
PARAMETER(WRK.TH_Head_Accepted);
PARAMETER(CTL.TH_Live_Wgt);
PARAMETER(CTL.TH_Hot_Wgt);
PARAMETER(CTL.TH_Tot_Loin_Eye_Depth);
PARAMETER(CTL.TH_Tot_Backfat_Inches);
PARAMETER(CTL.TH_Tot_Light_Reflectance);
PARAMETER(CTL.TH_Avg_Live_Wgt);
PARAMETER(CTL.TH_Avg_Hot_Wgt);
PARAMETER(CTL.TH_Avg_Light_Reflectance);
PARAMETER(CTL.TH_Avg_Lean_Percent);
PARAMETER(CTL.TH_Avg_Loin_Eye_Depth);
PARAMETER(CTL.TH_Avg_Backfat);
PARAMETER(CTL.TH_Std_Yield_Percent);
PARAMETER(CTL.TH_Actual_Yield);
PARAMETER(CTL.TH_Yield_Difference);
PARAMETER(CTL.TH_Recalc_Live_Wgt);
PARAMETER(CTL.TH_CM_Base_Mkt_Price);
PARAMETER(CTL.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(CTL.TH_CM_Sort_Discount_Amt);
PARAMETER(CTL.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(CTL.TH_CM_Base_Carcass_Value);
PARAMETER(CTL.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(CTL.TH_CM_Carcass_Gross_Amt);
PARAMETER(CTL.TH_Deduction_Amt);
PARAMETER(WRK.TH_Total_Net_WO_Adds);
PARAMETER(WRK.TH_Carcass_Net_Amt);
PARAMETER(WRK.TH_Additions_Amt);
PARAMETER(WRK.TH_Accrual_Amount);
PARAMETER(WRK.TH_Fixed_Cost_Amount);
PARAMETER(CTL.TH_Payment_Sts);
PARAMETER(CTL.TH_Header_Error_Sts);
PARAMETER(CTL.TH_Detail_Error_Sts);
PARAMETER(CTL.TH_Kill_Balancing_Sts);
PARAMETER(CTL.TH_Bal_to_Kill_Gen);
PARAMETER(WRK.TH_Commission_A_P_Voucher);
PARAMETER(WRK.TH_Voucher_Payment_Date);
PARAMETER(WRK.TH_User_Error_Override);
PARAMETER(WRK.TH_Held_Over_Record);
PARAMETER(WRK.TH_Sex);
PARAMETER(WRK.TH_Held_Ovr_Completed_Dte);
PARAMETER(WRK.TH_Commission_Paid_Date);
PARAMETER(WRK.TH_Actual_Check_Date);
PARAMETER(WRK.TH_Shipped_Weight);
PARAMETER(WRK.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(WRK.TH_FFLI);
PARAMETER(WRK.TH_Kill_Product_Value);
PARAMETER(WRK.TH_Cut_Product_Value);
PARAMETER(WRK.TH_Render_Product_Value);
PARAMETER(WRK.TH_Shift_Held_Over_Head);
PARAMETER(CTL.DF_Defect_Code);
PARAMETER(CTL.THP_Process_Code);
PARAMETER(WRK.HB_Buyer_Code);
PARAMETER(CTL.GN_Genetic_Code);
PARAMETER(CTL.HC_Class_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?USER: Process subfile record (Post-confirm)

CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

// RCD.RS Record Status = CND.Flag for Purge
RCD.RS_Record_Status = 'D';

// WRK.Re-Cal Totals/Avg Usr = CND.Yes
WRK.Re_Cal_Totals_Avg_Usr = 'Y';

EXECUTE FUNCTION(Chg Evaluation Trans  CH) TYPE(CHGOBJ) FILE(PKBVCPP)           AB1127890;
PARAMETER(RCD.ET_Company_Number);
PARAMETER(RCD.ET_Kill_Date);
PARAMETER(RCD.ET_Scale_Sequence_Number);
PARAMETER(RCD.ET_Carcass_Number);
PARAMETER(RCD.ET_Carcass_Number_Insert);
PARAMETER(RCD.ET_Tattoo_Number);
PARAMETER(RCD.ET_Lot);
PARAMETER(RCD.ET_Shift);
PARAMETER(RCD.ET_Hot_Wgt);
PARAMETER(RCD.ET_Backfat_Thickness_Inch);
PARAMETER(RCD.ET_Loin_Eye_Depth_Inches);
PARAMETER(RCD.ET_Lean_Percent_NPPC);
PARAMETER(RCD.ET_Backfat_Thickness_MM);
PARAMETER(RCD.ET_Loineye_Depth_MM);
PARAMETER(RCD.ET_Light_Reflectance_MM);
PARAMETER(RCD.ET_Lean_Percent_FOM);
PARAMETER(RCD.ET_Light_Reflectance);
PARAMETER(RCD.ET_Trim_Area);
PARAMETER(RCD.ET_Carcass_Sex);
PARAMETER(RCD.ET_Error_Sts);
PARAMETER(RCD.ET_Record_Add_Del_Sts);
PARAMETER(RCD.ET_Record_Created_W_Avg);
PARAMETER(RCD.ET_Record_Created_Status);
PARAMETER(RCD.ET_User_Error_Override);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
PARAMETER(RCD.RU_Date);
PARAMETER(RCD.RU_Time);
PARAMETER(WRK.@Status_Yes_No);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

 //?Record is changed
 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.@Status_Yes_No = 'Y';

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF RCD.*SFLSEL is Flag Delete
IF RCD.*SFLSEL = '7'/'7';

// RCD.ET Record Add/Del Sts = CND.Delete
RCD.ET_Record_Add_Del_Sts = 'D';

// WRK.Re-Cal Totals/Avg Usr = CND.Yes
WRK.Re_Cal_Totals_Avg_Usr = 'Y';

EXECUTE FUNCTION(Chg Evaluation Trans  CH) TYPE(CHGOBJ) FILE(PKBVCPP)           AB1127890;
PARAMETER(RCD.ET_Company_Number);
PARAMETER(RCD.ET_Kill_Date);
PARAMETER(RCD.ET_Scale_Sequence_Number);
PARAMETER(RCD.ET_Carcass_Number);
PARAMETER(RCD.ET_Carcass_Number_Insert);
PARAMETER(RCD.ET_Tattoo_Number);
PARAMETER(RCD.ET_Lot);
PARAMETER(RCD.ET_Shift);
PARAMETER(RCD.ET_Hot_Wgt);
PARAMETER(RCD.ET_Backfat_Thickness_Inch);
PARAMETER(RCD.ET_Loin_Eye_Depth_Inches);
PARAMETER(RCD.ET_Lean_Percent_NPPC);
PARAMETER(RCD.ET_Backfat_Thickness_MM);
PARAMETER(RCD.ET_Loineye_Depth_MM);
PARAMETER(RCD.ET_Light_Reflectance_MM);
PARAMETER(RCD.ET_Lean_Percent_FOM);
PARAMETER(RCD.ET_Light_Reflectance);
PARAMETER(RCD.ET_Trim_Area);
PARAMETER(RCD.ET_Carcass_Sex);
PARAMETER(RCD.ET_Error_Sts);
PARAMETER(RCD.ET_Record_Add_Del_Sts);
PARAMETER(RCD.ET_Record_Created_W_Avg);
PARAMETER(RCD.ET_Record_Created_Status);
PARAMETER(RCD.ET_User_Error_Override);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
PARAMETER(RCD.RU_Date);
PARAMETER(RCD.RU_Time);
PARAMETER(WRK.@Status_Yes_No);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

 //?Record is changed
 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.@Status_Yes_No = 'Y';

}


EXECUTE FUNCTION(Dlt Tto Eval Rec Err  RT) TYPE(RTVOBJ) FILE(PKB6CPP)           AB1144453;
PARAMETER(RCD.ET_Company_Number);
PARAMETER(RCD.ET_Kill_Date);
PARAMETER(RCD.ET_Tattoo_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.ET_Scale_Sequence_Number);
PARAMETER('E');
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Delete Kill Validation) TYPE(DLTOBJ) FILE(PKB6CPP)             AB1104583;
 PARAMETER(DB1.KV_Company_Number);
 PARAMETER(DB1.KV_Kill_Date);
 PARAMETER(DB1.KV_TATTOO_NUMBER);
 PARAMETER(DB1.KV_Buy_Order_Number);
 PARAMETER(DB1.KV_Load_Number);
 PARAMETER(DB1.KV_Record_Number);
 PARAMETER(DB1.KV_Record_Type);
 PARAMETER(DB1.KV_Error_Code);
}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF RCD.*SFLSEL is UnFlag Flag Delete
IF RCD.*SFLSEL = '9'/'9';

// RCD.ET Record Add/Del Sts = CND.Blanks
RCD.ET_Record_Add_Del_Sts = *BLANK;

EXECUTE FUNCTION(Chg Evaluation Trans  CH) TYPE(CHGOBJ) FILE(PKBVCPP)           AB1127890;
PARAMETER(RCD.ET_Company_Number);
PARAMETER(RCD.ET_Kill_Date);
PARAMETER(RCD.ET_Scale_Sequence_Number);
PARAMETER(RCD.ET_Carcass_Number);
PARAMETER(RCD.ET_Carcass_Number_Insert);
PARAMETER(RCD.ET_Tattoo_Number);
PARAMETER(RCD.ET_Lot);
PARAMETER(RCD.ET_Shift);
PARAMETER(RCD.ET_Hot_Wgt);
PARAMETER(RCD.ET_Backfat_Thickness_Inch);
PARAMETER(RCD.ET_Loin_Eye_Depth_Inches);
PARAMETER(RCD.ET_Lean_Percent_NPPC);
PARAMETER(RCD.ET_Backfat_Thickness_MM);
PARAMETER(RCD.ET_Loineye_Depth_MM);
PARAMETER(RCD.ET_Light_Reflectance_MM);
PARAMETER(RCD.ET_Lean_Percent_FOM);
PARAMETER(RCD.ET_Light_Reflectance);
PARAMETER(RCD.ET_Trim_Area);
PARAMETER(RCD.ET_Carcass_Sex);
PARAMETER(RCD.ET_Error_Sts);
PARAMETER(RCD.ET_Record_Add_Del_Sts);
PARAMETER(RCD.ET_Record_Created_W_Avg);
PARAMETER(RCD.ET_Record_Created_Status);
PARAMETER(RCD.ET_User_Error_Override);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
PARAMETER(RCD.RU_Date);
PARAMETER(RCD.RU_Time);
PARAMETER(WRK.@Status_Yes_No);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

 //?Record is changed
 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.@Status_Yes_No = 'Y';

}


EXECUTE FUNCTION(Dlt Tto Eval Rec Err  RT) TYPE(RTVOBJ) FILE(PKB6CPP)           AB1144453;
PARAMETER(RCD.ET_Company_Number);
PARAMETER(RCD.ET_Kill_Date);
PARAMETER(RCD.ET_Tattoo_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.ET_Scale_Sequence_Number);
PARAMETER('E');
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Delete Kill Validation) TYPE(DLTOBJ) FILE(PKB6CPP)             AB1104583;
 PARAMETER(DB1.KV_Company_Number);
 PARAMETER(DB1.KV_Kill_Date);
 PARAMETER(DB1.KV_TATTOO_NUMBER);
 PARAMETER(DB1.KV_Buy_Order_Number);
 PARAMETER(DB1.KV_Load_Number);
 PARAMETER(DB1.KV_Record_Number);
 PARAMETER(DB1.KV_Record_Type);
 PARAMETER(DB1.KV_Error_Code);
}


// WRK.Re-Cal Totals/Avg Usr = CND.Yes
WRK.Re_Cal_Totals_Avg_Usr = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF RCD.*SFLSEL is Override Error
IF RCD.*SFLSEL = '10';

// RCD.ET User Error Override = CND.Yes
RCD.ET_User_Error_Override = 'Y';

EXECUTE FUNCTION(Chg Evaluation Trans  CH) TYPE(CHGOBJ) FILE(PKBVCPP)           AB1127890;
PARAMETER(RCD.ET_Company_Number);
PARAMETER(RCD.ET_Kill_Date);
PARAMETER(RCD.ET_Scale_Sequence_Number);
PARAMETER(RCD.ET_Carcass_Number);
PARAMETER(RCD.ET_Carcass_Number_Insert);
PARAMETER(RCD.ET_Tattoo_Number);
PARAMETER(RCD.ET_Lot);
PARAMETER(RCD.ET_Shift);
PARAMETER(RCD.ET_Hot_Wgt);
PARAMETER(RCD.ET_Backfat_Thickness_Inch);
PARAMETER(RCD.ET_Loin_Eye_Depth_Inches);
PARAMETER(RCD.ET_Lean_Percent_NPPC);
PARAMETER(RCD.ET_Backfat_Thickness_MM);
PARAMETER(RCD.ET_Loineye_Depth_MM);
PARAMETER(RCD.ET_Light_Reflectance_MM);
PARAMETER(RCD.ET_Lean_Percent_FOM);
PARAMETER(RCD.ET_Light_Reflectance);
PARAMETER(RCD.ET_Trim_Area);
PARAMETER(RCD.ET_Carcass_Sex);
PARAMETER(RCD.ET_Error_Sts);
PARAMETER(RCD.ET_Record_Add_Del_Sts);
PARAMETER(RCD.ET_Record_Created_W_Avg);
PARAMETER(RCD.ET_Record_Created_Status);
PARAMETER(RCD.ET_User_Error_Override);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
PARAMETER(RCD.RU_Date);
PARAMETER(RCD.RU_Time);
PARAMETER(WRK.@Status_Yes_No);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

 //?Record is changed
 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.@Status_Yes_No = 'Y';

}


EXECUTE FUNCTION(Dlt Tto Eval Rec Err  RT) TYPE(RTVOBJ) FILE(PKB6CPP)           AB1144453;
PARAMETER(RCD.ET_Company_Number);
PARAMETER(RCD.ET_Kill_Date);
PARAMETER(RCD.ET_Tattoo_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.ET_Scale_Sequence_Number);
PARAMETER('E');
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Delete Kill Validation) TYPE(DLTOBJ) FILE(PKB6CPP)             AB1104583;
 PARAMETER(DB1.KV_Company_Number);
 PARAMETER(DB1.KV_Kill_Date);
 PARAMETER(DB1.KV_TATTOO_NUMBER);
 PARAMETER(DB1.KV_Buy_Order_Number);
 PARAMETER(DB1.KV_Load_Number);
 PARAMETER(DB1.KV_Record_Number);
 PARAMETER(DB1.KV_Record_Type);
 PARAMETER(DB1.KV_Error_Code);
}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// WRK.Re-Cal Totals/Avg Usr = CND.Yes
WRK.Re_Cal_Totals_Avg_Usr = 'Y';

// IF RCD.*SFLSEL is Remove Override Error
IF RCD.*SFLSEL = '11';

// RCD.ET User Error Override = CND.No
RCD.ET_User_Error_Override = 'N';

EXECUTE FUNCTION(Chg Evaluation Trans  CH) TYPE(CHGOBJ) FILE(PKBVCPP)           AB1127890;
PARAMETER(RCD.ET_Company_Number);
PARAMETER(RCD.ET_Kill_Date);
PARAMETER(RCD.ET_Scale_Sequence_Number);
PARAMETER(RCD.ET_Carcass_Number);
PARAMETER(RCD.ET_Carcass_Number_Insert);
PARAMETER(RCD.ET_Tattoo_Number);
PARAMETER(RCD.ET_Lot);
PARAMETER(RCD.ET_Shift);
PARAMETER(RCD.ET_Hot_Wgt);
PARAMETER(RCD.ET_Backfat_Thickness_Inch);
PARAMETER(RCD.ET_Loin_Eye_Depth_Inches);
PARAMETER(RCD.ET_Lean_Percent_NPPC);
PARAMETER(RCD.ET_Backfat_Thickness_MM);
PARAMETER(RCD.ET_Loineye_Depth_MM);
PARAMETER(RCD.ET_Light_Reflectance_MM);
PARAMETER(RCD.ET_Lean_Percent_FOM);
PARAMETER(RCD.ET_Light_Reflectance);
PARAMETER(RCD.ET_Trim_Area);
PARAMETER(RCD.ET_Carcass_Sex);
PARAMETER(RCD.ET_Error_Sts);
PARAMETER(RCD.ET_Record_Add_Del_Sts);
PARAMETER(RCD.ET_Record_Created_W_Avg);
PARAMETER(RCD.ET_Record_Created_Status);
PARAMETER(RCD.ET_User_Error_Override);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
PARAMETER(RCD.RU_Date);
PARAMETER(RCD.RU_Time);
PARAMETER(WRK.@Status_Yes_No);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

 //?Record is changed
 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.@Status_Yes_No = 'Y';

}


EXECUTE FUNCTION(Dlt Tto Eval Rec Err  RT) TYPE(RTVOBJ) FILE(PKB6CPP)           AB1144453;
PARAMETER(RCD.ET_Company_Number);
PARAMETER(RCD.ET_Kill_Date);
PARAMETER(RCD.ET_Tattoo_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.ET_Scale_Sequence_Number);
PARAMETER('E');
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Delete Kill Validation) TYPE(DLTOBJ) FILE(PKB6CPP)             AB1104583;
 PARAMETER(DB1.KV_Company_Number);
 PARAMETER(DB1.KV_Kill_Date);
 PARAMETER(DB1.KV_TATTOO_NUMBER);
 PARAMETER(DB1.KV_Buy_Order_Number);
 PARAMETER(DB1.KV_Load_Number);
 PARAMETER(DB1.KV_Record_Number);
 PARAMETER(DB1.KV_Record_Type);
 PARAMETER(DB1.KV_Error_Code);
}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// WRK.Re-Cal Totals/Avg Usr = CND.Yes
WRK.Re_Cal_Totals_Avg_Usr = 'Y';

ENDIF;

//?USER: Final processing (Post-confirm)

CASE;

// IF WRK.Re-Cal Totals/Avg Usr is Yes
IF WRK.Re_Cal_Totals_Avg_Usr = 'Y';

// WRK.Requested by User to Bal = CND.No
WRK.Requested_by_User_to_Bal = 'N';

// Call program Bal Tattoo W/Kill Edt  XF.
CALL PROGRAM(Bal Tattoo W/Kill Edt  XF) ('PKLHXFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER('E');
PARAMETER(CTL.TH_Schedule_Kill_Shift);
PARAMETER(WRK.Requested_by_User_to_Bal);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(*BLANK);

// WRK.Requested by User to Bal = CND.No
WRK.Requested_by_User_to_Bal = 'N';

// WRK.Re-Cal Totals/Avg Usr = CND.No
WRK.Re_Cal_Totals_Avg_Usr = 'N';

EXECUTE FUNCTION(RTV Tattoo Record     RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1111223;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(CTL.TH_Purchase_Date);
PARAMETER(CTL.TH_Group_Reference);
PARAMETER(CTL.TH_Live_Purchase_UOM);
PARAMETER(CTL.TH_Live_Purchase_Price);
PARAMETER(CTL.TH_Resale_UOM);
PARAMETER(CTL.TH_Recalc_Live_Wgt_Yld);
PARAMETER(CTL.TH_Pricing_Date);
PARAMETER(CTL.TH_Resale_Spread_Sts);
PARAMETER(CTL.TH_Dead_On_Arrival);
PARAMETER(CTL.TH_Head_Received);
PARAMETER(CTL.TH_Yard_Deads);
PARAMETER(WRK.TH_Held_Over);
PARAMETER(CTL.TH_Head_Condemned);
PARAMETER(CTL.TH_Head_Killed);
PARAMETER(WRK.TH_Head_Adds);
PARAMETER(WRK.TH_Head_Accepted);
PARAMETER(CTL.TH_Live_Wgt);
PARAMETER(CTL.TH_Hot_Wgt);
PARAMETER(CTL.TH_Tot_Loin_Eye_Depth);
PARAMETER(CTL.TH_Tot_Backfat_Inches);
PARAMETER(CTL.TH_Tot_Light_Reflectance);
PARAMETER(CTL.TH_Avg_Live_Wgt);
PARAMETER(CTL.TH_Avg_Hot_Wgt);
PARAMETER(CTL.TH_Avg_Light_Reflectance);
PARAMETER(CTL.TH_Avg_Lean_Percent);
PARAMETER(CTL.TH_Avg_Loin_Eye_Depth);
PARAMETER(CTL.TH_Avg_Backfat);
PARAMETER(CTL.TH_Std_Yield_Percent);
PARAMETER(CTL.TH_Actual_Yield);
PARAMETER(CTL.TH_Yield_Difference);
PARAMETER(CTL.TH_Recalc_Live_Wgt);
PARAMETER(CTL.TH_CM_Base_Mkt_Price);
PARAMETER(CTL.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(CTL.TH_CM_Sort_Discount_Amt);
PARAMETER(CTL.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(CTL.TH_CM_Base_Carcass_Value);
PARAMETER(CTL.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(CTL.TH_CM_Carcass_Gross_Amt);
PARAMETER(CTL.TH_Deduction_Amt);
PARAMETER(WRK.TH_Total_Net_WO_Adds);
PARAMETER(WRK.TH_Carcass_Net_Amt);
PARAMETER(WRK.TH_Additions_Amt);
PARAMETER(WRK.TH_Accrual_Amount);
PARAMETER(WRK.TH_Fixed_Cost_Amount);
PARAMETER(CTL.TH_Payment_Sts);
PARAMETER(CTL.TH_Header_Error_Sts);
PARAMETER(CTL.TH_Detail_Error_Sts);
PARAMETER(CTL.TH_Kill_Balancing_Sts);
PARAMETER(CTL.TH_Bal_to_Kill_Gen);
PARAMETER(WRK.TH_Commission_A_P_Voucher);
PARAMETER(WRK.TH_Voucher_Payment_Date);
PARAMETER(WRK.TH_User_Error_Override);
PARAMETER(WRK.TH_Held_Over_Record);
PARAMETER(WRK.TH_Sex);
PARAMETER(WRK.TH_Held_Ovr_Completed_Dte);
PARAMETER(WRK.TH_Commission_Paid_Date);
PARAMETER(WRK.TH_Actual_Check_Date);
PARAMETER(WRK.TH_Shipped_Weight);
PARAMETER(WRK.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(WRK.TH_FFLI);
PARAMETER(WRK.TH_Kill_Product_Value);
PARAMETER(WRK.TH_Cut_Product_Value);
PARAMETER(WRK.TH_Render_Product_Value);
PARAMETER(WRK.TH_Shift_Held_Over_Head);
PARAMETER(CTL.DF_Defect_Code);
PARAMETER(CTL.THP_Process_Code);
PARAMETER(WRK.HB_Buyer_Code);
PARAMETER(CTL.GN_Genetic_Code);
PARAMETER(CTL.HC_Class_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF WRK.@Status (*YES/*NO ) is *Yes
IF WRK.@Status_YES_NO = *YES;

// WRK.Requested by User to Bal = CND.No
WRK.Requested_by_User_to_Bal = 'N';

// Call program Bal Tattoo W/Kill Edt  XF.
CALL PROGRAM(Bal Tattoo W/Kill Edt  XF) ('PKLHXFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER('E');
PARAMETER(CTL.TH_Schedule_Kill_Shift);
PARAMETER(WRK.Requested_by_User_to_Bal);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(*BLANK);

// WRK.@Status (*YES/*NO ) = CND.*No
WRK.@Status_YES_NO = *NO;

// WRK.Re-Cal Totals/Avg Usr = CND.No
WRK.Re_Cal_Totals_Avg_Usr = 'N';

EXECUTE FUNCTION(RTV Tattoo Record     RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1111223;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(CTL.TH_Purchase_Date);
PARAMETER(CTL.TH_Group_Reference);
PARAMETER(CTL.TH_Live_Purchase_UOM);
PARAMETER(CTL.TH_Live_Purchase_Price);
PARAMETER(CTL.TH_Resale_UOM);
PARAMETER(CTL.TH_Recalc_Live_Wgt_Yld);
PARAMETER(CTL.TH_Pricing_Date);
PARAMETER(CTL.TH_Resale_Spread_Sts);
PARAMETER(CTL.TH_Dead_On_Arrival);
PARAMETER(CTL.TH_Head_Received);
PARAMETER(CTL.TH_Yard_Deads);
PARAMETER(WRK.TH_Held_Over);
PARAMETER(CTL.TH_Head_Condemned);
PARAMETER(CTL.TH_Head_Killed);
PARAMETER(WRK.TH_Head_Adds);
PARAMETER(WRK.TH_Head_Accepted);
PARAMETER(CTL.TH_Live_Wgt);
PARAMETER(CTL.TH_Hot_Wgt);
PARAMETER(CTL.TH_Tot_Loin_Eye_Depth);
PARAMETER(CTL.TH_Tot_Backfat_Inches);
PARAMETER(CTL.TH_Tot_Light_Reflectance);
PARAMETER(CTL.TH_Avg_Live_Wgt);
PARAMETER(CTL.TH_Avg_Hot_Wgt);
PARAMETER(CTL.TH_Avg_Light_Reflectance);
PARAMETER(CTL.TH_Avg_Lean_Percent);
PARAMETER(CTL.TH_Avg_Loin_Eye_Depth);
PARAMETER(CTL.TH_Avg_Backfat);
PARAMETER(CTL.TH_Std_Yield_Percent);
PARAMETER(CTL.TH_Actual_Yield);
PARAMETER(CTL.TH_Yield_Difference);
PARAMETER(CTL.TH_Recalc_Live_Wgt);
PARAMETER(CTL.TH_CM_Base_Mkt_Price);
PARAMETER(CTL.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(CTL.TH_CM_Sort_Discount_Amt);
PARAMETER(CTL.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(CTL.TH_CM_Base_Carcass_Value);
PARAMETER(CTL.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(CTL.TH_CM_Carcass_Gross_Amt);
PARAMETER(CTL.TH_Deduction_Amt);
PARAMETER(WRK.TH_Total_Net_WO_Adds);
PARAMETER(WRK.TH_Carcass_Net_Amt);
PARAMETER(WRK.TH_Additions_Amt);
PARAMETER(WRK.TH_Accrual_Amount);
PARAMETER(WRK.TH_Fixed_Cost_Amount);
PARAMETER(CTL.TH_Payment_Sts);
PARAMETER(CTL.TH_Header_Error_Sts);
PARAMETER(CTL.TH_Detail_Error_Sts);
PARAMETER(CTL.TH_Kill_Balancing_Sts);
PARAMETER(CTL.TH_Bal_to_Kill_Gen);
PARAMETER(WRK.TH_Commission_A_P_Voucher);
PARAMETER(WRK.TH_Voucher_Payment_Date);
PARAMETER(WRK.TH_User_Error_Override);
PARAMETER(WRK.TH_Held_Over_Record);
PARAMETER(WRK.TH_Sex);
PARAMETER(WRK.TH_Held_Ovr_Completed_Dte);
PARAMETER(WRK.TH_Commission_Paid_Date);
PARAMETER(WRK.TH_Actual_Check_Date);
PARAMETER(WRK.TH_Shipped_Weight);
PARAMETER(WRK.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(WRK.TH_FFLI);
PARAMETER(WRK.TH_Kill_Product_Value);
PARAMETER(WRK.TH_Cut_Product_Value);
PARAMETER(WRK.TH_Render_Product_Value);
PARAMETER(WRK.TH_Shift_Held_Over_Head);
PARAMETER(CTL.DF_Defect_Code);
PARAMETER(CTL.THP_Process_Code);
PARAMETER(WRK.HB_Buyer_Code);
PARAMETER(CTL.GN_Genetic_Code);
PARAMETER(CTL.HC_Class_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?USER: Exit program processing

// WRK.Requested by User to Bal = CND.No
WRK.Requested_by_User_to_Bal = 'N';

// Call program Bal Tattoo W/Kill Edt  XF.
CALL PROGRAM(Bal Tattoo W/Kill Edt  XF) ('PKLHXFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER('E');
PARAMETER(CTL.TH_Schedule_Kill_Shift);
PARAMETER(WRK.Requested_by_User_to_Bal);
PARAMETER(CTL.Oms_System_Value_Alpha);
PARAMETER(*BLANK);

// WRK.Requested by User to Bal = CND.No
WRK.Requested_by_User_to_Bal = 'N';

// WRK.Re-Cal Totals/Avg Usr = CND.No
WRK.Re_Cal_Totals_Avg_Usr = 'N';

