      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      Triumph Foods
      * PROGRAM:     TF419
      * TITLE:       Margin: Work With Product Exceptions
      * PROGRAMMER:  LeAnne Ramsey
      * CREATED:     09/08/06
      *
      * FUNCTION: This is a Work With that displays the records in the Product Exception
      *           file.
      *
      *           Positioners:
      *               Week-ending date
      *
      *           Selectors:
      *               Product code
      *               Mix flag
      *               Volume flag
      *
      *  NOTE: When the user takes F7 to print a listing, the listing will use
      *        the positioner/selector values in the control record as the listing
      *        selections.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 04/16/07  LeAnne Ramsey
      *           We switched the following flag fields:
      *             1) Exclude from Mix Flag    is now Mix Flag
      *             2) Exclude from Volume Flag is now Volume Flag
      *           Before this change Y=Yes meant EXCLUDE the product from processing
      *           After this change  Y=Yes means INCLUDE the product in processing
      *
      * 07/01/08  LeAnne Ramsey
      *           Recompile only.
      *           Increased decimal positions for "pounds" and "amount" fields in
      *           Product Exception file.
      *
      * 08/13/08  LeAnne Ramsey
      *           Added "program" to the Control record and subfile so we could
      *           see/select exceptions by the Program that created them.
      *
      * 02/02/09  LeAnne Ramsey
      *           Added "program" as a selection on the report.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Ftfd419    cf   e             workstn sfile(tf419s1:hdrrn1)
     F                                     infds(iofeed)
      *
      *
     Ftfp099    if   e           k disk
      *   Function control
      *
      *
     Ftfl019a   if   e           k disk    infds(dbfeed)
      *   Product exceptions
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D create          c                   'CREATE'
     D revise          c                   'REVISE'
     D delete          c                   'DELETE'
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  Compile time array for SBMJOB used in QCMDEXC - F7-list
      *---------------------------------------------------------------
     D cmd             s              1    dim(80) ctdata perrcd(80)
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
     D maxrrn          s              4  0
     D reset           s              1    inz('N')
     D norecs          s              1    inz('N')
     D count           s              2  0
     D wkflow          s                   like(idflow)
     D rtncd           s              2    inz('00')
     D svrrn1          s                   like(hdrrn1)
      *
      *
      *
      * Workfields required for subfile paging--see initialization
      * subroutine.
      *
     D wkplin          s              2  0
     D wkrlin          s              2  0
      *
      *
      * Save fields for positioners and selectors
      *
     D svwedtmdy       s                   like(c1wedtmdy)
     D svprcd          s                   like(c1prcd)
     D svmixfl         s                   like(c1mixfl)
     D svvolfl         s                   like(c1volfl)
     D svpgm           s                   like(c1pgm)
      *
      *
      * Workfields for date manipulation
      *
     D wkisodate       s               D   datfmt(*iso)
     D wkwedt          s                   like(pewedt)
      *
      *
      * Parms
      *
     D xxpesn          s                   like(d1pesn)
     D xxprcd          s                   like(d1prcd)
     D xxprds          s             30
     D xxpefl          s                   like(d1mixfl)
     D xxpeds          s             10
      *
     D xxynfl          s                   like(c1sysfl)
      *
     D xxrtn           s              7
     D xxcgcd          s                   like(d1cgcd)
     D xxcgds          s             30
     D xxaist1         s              1
     D xxaist2         s              1
      *
     D xxtfcgcd        s                   like(c1tfcgcd)
     D xxtfcgds        s             15
      *
     D xxtfclcd        s                   like(c1tfclcd)
     D xxtfclds        s             30
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      * Standard subfile option conversion
      *---------------------------------------------------------------
     D                 ds                  inz
     D d1opt                          2
     D   wkopt1                       1    overlay(d1opt)
     D   wkopt2                       1    overlay(d1opt:2)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * Clear and fill the subfile
      *
     C                   exsr      $clr1
     C                   exsr      $frsh1
      *
      * Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * This subfile has Fold/Unfold capabilities.  The DDS uses the keywords
      * (SFLDROP, SFLFOLD) to determine whether the user is folded or unfolded
      * and to redisplay the screen in the same mode as when he last saw it.
      * Indicators 78 and 79 are assigned in the DDS to the keywords.
      *
     C                   setoff                                       7879
     C                   if        fold = '0'
     C                   seton                                        78
     C                   else
     C                   seton                                        79
     C                   endif
      *
      * Write screen 1 to crt
      *
     C                   write     tf419k1
     C                   write     tf419ec
     C                   exfmt     tf419c1
      *
      * Save the value of the lowest subfile rrn on the screen for
      * later repositioning of the subfile
      *
     C                   eval      wkflow = idflow
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
     C                   eval      routne = scrn1
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   movel     yes           reset
     C                   eval      routne = set1
      *
     C                   when      *in06 = *on                                  F6-create
     C                   exsr      $creat
     C                   z-add     wkflow        hdpag1
     C                   eval      routne = scrn1
      *
     C                   when      *in07 = *on                                  F7-listing
     C                   call      'TF4190'
     C                   parm                    c1wedtmdy
     C                   parm                    c1wedtmdy
     C                   parm                    c1prcd
     C                   parm                    c1mixfl
     C                   parm                    c1volfl
     C                   parm                    c1sysfl
     C                   parm                    c1cgcd
     C                   parm                    c1tfcgcd
     C                   parm                    c1tfclcd
     C                   parm                    c1pgm
     C                   parm      *blank        rtncd
      *
     C                   z-add     wkflow        hdpag1
     C                   eval      routne = scrn1
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                       API
     C                   z-add     wkflow        hdpag1
     C                   eval      routne = scrn1
      *
      * Reposition the subfile if the user has changed any of the positioners
      * or selectors in the control record.
      *
     C                   when      svwedtmdy <> c1wedtmdy or
     C                             svprcd    <> c1prcd or
     C                             svmixfl   <> c1mixfl or
     C                             svvolfl   <> c1volfl or
     C                             svpgm     <> c1pgm
     C                   exsr      $chksv
      *
     C                   when      *in25 = *on                                  F25-rollup
     C                   exsr      $load1
     C                   other
      *
      * User has pressed enter
      *
     C                   if        norecs = yes                                 If empty sfl
     C                   eval      routne = set1
     C                   else
     C                   eval      routne = edit1
     C                   endif                                                  If empty sfl
      *
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Save the control record positioners/selectors
      *----------------------------------------------------------------
      *
     C     $chksv        begsr
      *
     C                   movel     no            reset
     C                   eval      routne = set1
      *
     C                   z-add     c1wedtmdy     svwedtmdy
     C                   z-add     c1prcd        svprcd
     C                   move      c1mixfl       svmixfl
     C                   move      c1volfl       svvolfl
     C                   move      c1pgm         svpgm
      *
      * Flip date selector from mmddyy to ccyymmdd format
      *
     C     *mdy          test(d)                 c1wedtmdy              92
     C                   if        *in92 = *on                                  If bad date
     C                   z-add     0             wkwedt
     C                   else
     C     *mdy          move      c1wedtmdy     wkisodate
     C                   move      wkisodate     wkwedt
     C                   endif                                                  If bad date
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Edit input fields for screen 1
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * First, edit all the selections entered by the user in the
      * subfile option field to see that valid selections were input
      *
     C                   exsr      $edop1
      *
      * If there are no errors in the subfile option selectors entered
      * by the user, then execute the subroutine to reread and process
      * the records selected by the user.  After completing the
      * subroutine, set the routine to start over.
      *
     C                   if        error = 0                                    If no error
     C                   exsr      $proc1
      *
     C                   if        rtncd = '00'
     C                   eval      routne = set1
     C                   else
     C                   eval      hdpag1 = wkflow
     C                   eval      routne = scrn1
     C                   endif
      *
      * else there were errors in the subfile options entered,
      * so set to redisplay screen with errors to user
      *
     C                   else
     C                   eval      routne = scrn1
     C                   endif                                                  If no error
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Clear subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $clr1         begsr
      *
     C                   z-add     0             svrrn1
      *
     C                   clear                   tf419s1
     C                   seton                                        83        sflclr
     C                   write     tf419c1
     C                   setoff                                       818283
      *                                                    81=sfldsp
      *                                                    82=sflend
      *                                                    83=sflclr
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Refresh/fill the subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $frsh1        begsr
      *
      * Set position in file
      *
     C                   if        c1wedtmdy = 0
     C     *hival        setll     tfl019a
     C                   else
     C     wkwedt        setll     tfl019a
     C                   endif
      *
      * The field 'reset' is a flag field to indicate whether you are
      * attempting to reposition the user close to where he was in the
      * subfile.
      * The lowest subfile RRN on the screen from the DSPF feedbcdk
      * area (IDFLOW) was retrieved earlier and put in WKFLOW.
      * Add to WKFLOW the number of lines on your subfile page or the
      * number less 1 to determine a subfile RRN to reposition to.
      *
      *
     C                   if        reset = yes
     C                   eval      maxrrn = wkflow + wkrlin
     C                   else
      *
      * Don't try to reposition the user, just start the subfile over
      *
     C                   eval      maxrrn = wkplin
     C                   endif
      *
      * Load the subfile until you have the required number of records.
      * The number will depend on whether uou are repositioning the
      * subfile or not. Stop if you get to the end of the subfile.
      *
     C                   dou       svrrn1 >= maxrrn or *in82 = *on
     C                   exsr      $load1
     C                   enddo
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Load subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $load1        begsr
      *
     C                   z-add     svrrn1        hdrrn1
      *
      * Set the count of records on the subfile page to zero.
      *
     C                   eval      count = 0
      *
      * Fill the subfile until the end of the database file or
      * you have filled all the lines on the subfile page.
      *
     C                   setoff                                       82
     C                   dou       *in82 = *on or count >= wkplin               Do fill
     C                   read      tfl019a                                82
     C                   if        *in82 = *off                                 If read
      *
      * Only include records that match the user's selectors
      *
     C                   if        c1prcd <> 0 and                               If product
     C                             c1prcd <> peprcd
     C                   else
      *
     C                   if        c1mixfl <> *blank and                         If mix flag
     C                             c1mixfl <> pemixfl
     C                   else
      *
     C                   if        c1volfl <> *blank and                         If volume
     C                             c1volfl <> pevolfl
     C                   else
      *
     C                   if        c1sysfl <> *blank and                         If sys gen
     C                             c1sysfl <> pesysfl
     C                   else
      *
     C                   if        c1cgcd <> *blank and                          If meat cost
     C                             c1cgcd <> pecgcd
     C                   else
      *
     C                   if        c1tfcgcd <> *blank and                        If TF cls grp
     C                             c1tfcgcd <> petfcgcd
     C                   else
      *
     C                   if        c1tfclcd <> *blank and                        If TF classif
     C                             c1tfclcd <> petfclcd
     C                   else
      *
     C                   if        c1itycd <> *blank and                         If item type
     C                             c1itycd <> peitycd
     C                   else
      *
     C                   if        c1pesn <> 0 and                               If number
     C                             c1pesn <> pepesn
     C                   else
      *
     C                   if        c1pgm <> *blank and                           If program
     C                             c1pgm <> pepgm
     C                   else
      *
     C                   add       1             count
     C                   add       1             hdrrn1
     C                   move      *blank        d1opt
     C                   z-add     pewedt        hdwedt
     C                   z-add     pepesn        d1pesn
     C                   move      pepgm         d1pgm
     C                   z-add     peprcd        d1prcd
     C                   move      pesysfl       d1sysfl
     C                   move      pemixfl       d1mixfl
     C                   move      pevolfl       d1volfl
     C                   move      petfcgcd      d1tfcgcd
     C                   move      petfclcd      d1tfclcd
     C                   move      pecgcd        d1cgcd
      *
     C                   move      peexcom       d1excom
     C                   move      peitycd       d1itycd
     C                   z-add     peistycd      d1istycd
     C                   z-add     peisgrcd      d1isgrcd
     C                   z-add     peisclcd      d1isclcd
      *
      * Flip Week-ending Date to MMDDYY format
      *
     C     *iso          test(d)                 pewedt                 92
     C                   if        *in92 = *off                                 If OK date
     C                   move      pewedt        wkisodate
     C     *mdy          move      wkisodate     d1wedtmdy
     C                   else
     C                   z-add     0             d1wedtmdy
     C                   endif                                                  If OK date
      *
     C                   write     tf419s1
     C                   seton                                        81
      *
      * For positioning, place the subfile relative record number into
      * the sflrcdnbr field (hdpag1)
      *
     C                   z-add     hdrrn1        hdpag1
      *
     C                   endif                                                  If program
     C                   endif                                                  If number
     C                   endif                                                  If item type
     C                   endif                                                  If TF classif
     C                   endif                                                  If TF cls grp
     C                   endif                                                  If meat cost
     C                   endif                                                  If sys gen
     C                   endif                                                  If volume
     C                   endif                                                  If mix flag
     C                   endif                                                  If product
     C                   endif                                                  If read
     C                   enddo                                                  Do fill loop
      *
      * If no records were written to the subfile, then issue
      * the standard message 'No data to Display'.
      *
     C                   if        hdrrn1 = 0                                   If no recs
     C                   movel     yes           norecs
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09002'
     C                   endif
      *
     C                   else
     C                   movel     no            norecs
     C                   endif                                                  If no recs
      *
     C                   z-add     hdrrn1        svrrn1
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Call the maintenance program when the user takes F6
      *---------------------------------------------------------------
      *
     C     $creat        begsr
      *
     C                   call      'TF119'
     C                   parm      create        mode
     C                   parm      0             xxpesn
     C                   parm      0             xxprcd
     C                   parm      '00'          rtncd
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Read and edit changed subfile records for valid
      *          subfile options on screen 1
      *---------------------------------------------------------------
      *
     C     $edop1        begsr
      *
     C                   z-add     0             error
      *
      * Read all changed subfile records, editing for valid options
      *
     C                   setoff                                       80
     C                   dou       *in80 = *on                                  Do readc
     C                   readc     tf419s1                                80
     C                   if        *in80 = *off                                 If rec read
      *
      * Set off error indicator for subfile option field
      *
     C                   setoff                                       30
      *
      * Convert option user entered to standard format. For example,
      * a ' 1', '01', and '1 ' must be standardized to ' 1'.
      *
     C                   if        wkopt2 = *blank                              If 2 = blank
     C                   eval      wkopt2 = wkopt1
     C                   eval      wkopt1 = *blank
     C                   endif                                                  If 2 = blank
      *
     C                   if        wkopt1 = *zero                               If 1 is zero
     C                   eval      wkopt1 = *blank
     C                   endif                                                  If 1 is zero
      *
      * Test for valid subfile option entry on all changed records
      *
     C                   if        d1opt <> ' 2' and                            If bad opt
     C                             d1opt <> ' 4' and
     C                             d1opt <> ' 5' and
     C                             d1opt <> '  '
     C                   seton                                        3085
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09006'
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If bad opt
      *
      * Make additional checks when revising/deleting
      *
     C                   select
     C                   when      d1opt = ' 2' or d1opt = ' 4'
     C                   exsr      $opt
     C                   endsl
      *
      *
      * Rewrite the subfile record with the modified data tag on so it
      * will be reread and processed.
      *
     C                   if        error = 0 and d1opt = *blank
     C                   setoff                                       85
     C                   else
     C                   seton                                        85
     C                   endif
      *
     C                   update    tf419s1
     C                   setoff                                       8530
     C                   endif                                                  If rec read
     C                   enddo                                                  Do readc
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------------------------------
      * Edits for Revising/Deleting
      *---------------------------------------------------------------------------------------
      *
      * You cannot revise/delete a Product Exception record when:
      *  1) It is System-Generated
      *
      *  2) The week-ending date is prior to the Current End Date in the
      *     Function Control file for the "MARGIN" record.
      *
     C     $opt          begsr
      *
     C                   select
     C                   when      d1sysfl = yes
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08140'
     C                   exsr      $err1
     C                   endif
      *
     C                   other
     C     'MARGIN    '  chain     tfp099                             92
     C                   if        *in92 = *off and                             If closed week
     C                             hdwedt <> fncedt
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08084'
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If closed week
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Read subfile records and process user selections for screen 1
      *---------------------------------------------------------------
      *
     C     $proc1        begsr
      *
     C                   z-add     0             error
     C                   movel     '00'          rtncd
      *
      * Read all the changed subfile records processing the subfile
      * selection
     C                   setoff                                       80
     C                   dou       *in80 = *on                                  Do process
     C                   readc     tf419s1                                80
     C                   if        *in80 = *off                                 If rec read
      *
     C                   if        rtncd = '00'                                 If enter
      *
      * If user selected option 2=revise,
      * set the flag 'reset' to YES so that when you return to this
      * Work With you will reposition to the same place in the subfile
      *
      *
     C                   select
     C                   when      d1opt = ' 2'
     C                   movel     yes           reset
     C                   call      'TF119'
     C                   parm      revise        mode
     C                   parm      d1pesn        xxpesn
     C                   parm      d1prcd        xxprcd
     C                   parm                    rtncd
      *
      * If user selected Option 4=delete,
      * set the flag 'reset' to YES so that when you return to this
      * Work With you will reposition to the same place in the subfile
      *
     C                   when      d1opt = ' 4'
     C                   movel     yes           reset
     C                   call      'TF119'
     C                   parm      delete        mode
     C                   parm      d1pesn        xxpesn
     C                   parm      d1prcd        xxprcd
     C                   parm                    rtncd
      *
      * If user selected option 5=view,
      * set the flag 'reset' to YES so that when you return to this
      * Work With you will reposition to the same place in the subfile
      *
     C                   when      d1opt = ' 5'
     C                   movel     yes           reset
     C                   call      'TF719'
     C                   parm      d1pesn        xxpesn
     C                   parm      d1prcd        xxprcd
     C                   parm                    rtncd
     C                   endsl
      *
      * Upon returning from the called program,
      * clear the subfile option selected by the user and rewrite
      * the subfile record.
      *
     C                   move      *blank        d1opt
     C                   setoff                                       85
     C                   else
     C                   seton                                        85
     C                   endif                                                  If enter
      *
     C                   update    tf419s1
      *
     C                   endif                                                  If rec read
     C                   enddo                                                  Do process
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * F4 prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
     C                   select
      *
      * Product code
     C                   when      fld = 'C1PRCD'
     C                   seton                                        51
     C                   call      'TF504'
     C                   parm      0             xxprcd
     C                   parm      *blank        xxprds
     C                   if        xxprcd <> 0
     C                   z-add     xxprcd        c1prcd
     C                   endif
      *
      * Mix Flag
     C                   when      fld = 'C1MIXFL'
     C                   seton                                        52
     C                   call      'HP522'
     C                   parm      *blank        xxpefl
     C                   parm      *blank        xxpeds
     C                   if        xxpefl <> *blank
     C                   move      xxpefl        c1mixfl
     C                   endif
      *
      * Volume Flag
     C                   when      fld = 'C1VOLFL'
     C                   seton                                        53
     C                   call      'HP522'
     C                   parm      *blank        xxpefl
     C                   parm      *blank        xxpeds
     C                   if        xxpefl <> *blank
     C                   move      xxpefl        c1volfl
     C                   endif
      *
      * System Generated Flag
     C                   when      fld = 'C1SYSFL'
     C                   call      'HP522'
     C                   parm      *blank        xxynfl
     C                   seton                                        54
     C                   if        xxynfl <> *blank
     C                   movel     xxynfl        c1sysfl
     C                   endif
      *
      * Meat Cost Group
     C                   when      fld = 'C1CGCD'
     C                   call      'PMGFSRR'
     C                   parm      *blank        xxrtn
     C                   parm      *blank        xxcgcd
     C                   parm      *blank        xxcgds
     C                   parm      *blank        xxaist1
     C                   parm      *blank        xxaist2
     C                   seton                                        55
     C                   if        xxcgcd   <> *blank
     C                   move      xxcgcd        c1cgcd
     C                   endif
      * TF Class Group Code
      *
     C                   when      fld = 'C1TFCGCD'
     C                   call      'TF506'
     C                   parm      *blank        xxtfcgcd
     C                   parm      *blank        xxtfcgds
     C                   seton                                        56
     C                   if        xxtfcgcd <> *blank
     C                   move      xxtfcgcd      c1tfcgcd
     C                   endif
      *
      * TF Classification Code
      *
     C                   when      fld = 'C1TFCLCD'
     C                   call      'TF505'
     C                   parm      *blank        xxtfclcd
     C                   parm      *blank        xxtfclds
     C                   seton                                        57
     C                   if        xxtfclcd <> *blank
     C                   move      xxtfclcd      c1tfclcd
     C                   endif
      *
      *
     C                   other
      *
      * F4 not valid for this field...issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error                                        013
     C                   movel     'HS09011'     mgid(e)
     C                   endif
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Set the subfile to redisplay at the first page that has errors
      *---------------------------------------------------------------
      *
     C     $err1         begsr
      *
     C                   if        error = 1
     C                   eval      hdpag1 = hdrrn1
     C                   endif
      *
     C                   endsr
      *
      *---------------------------------------------------------------
      * Set on last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *   none
      *
      * Key lists
      *   none
      *
      *
      * To support F5-Refresh, logic requires the number of lines on
      * the subfile page and also the number of lines less 1.  By
      * setting these values up as constant work fields, the processing
      * logic can be standardized between programs.
      *
     C                   z-add     12            wkplin                         sflpag
     C     wkplin        sub       1             wkrlin                         sflpag - 1
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
