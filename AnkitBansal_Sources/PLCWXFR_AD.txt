// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLCWXFR
// ?Date: 14.08.2025 Time: 02:53:47
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?E2423 Mtech Live or Not Live *** Interfaces to HPS ***
//?H16853 ISE 11/02/2020 CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
//?Get the MTech Live Yes or No
DO;

//?Mtech Live Yes or no
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER('MTECHLIVE');
PARAMETER(WRK.System_Value_Alpha_USR);

// LCL.MTech Live Yes or No = WRK.System Value Alpha    USR
LCL.MTech_Live_Yes_or_No = WRK.System_Value_Alpha_USR;

ENDDO;

//?1.  Create new BOL, Change original BOL to Inactive
EXECUTE FUNCTION(Rtv/Crt New BOL txfr  RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1251438;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.Buy_Order_New_Usr);
PARAMETER(PAR.Buy_Order_Load_New_Usr);
PARAMETER(PAR.Kill_Date_Usr);
PARAMETER(PAR.Time_USR);
PARAMETER(PAR.Date_To_USR);
{
 //?USER: Process Data record

 // LCL.BOL Pln Delv Date = DB1.BOL Pln Delv Date
 LCL.BOL_Pln_Delv_Date = DB1.BOL_Pln_Delv_Date;

 // LCL.BOL Pln Delv Start Time = DB1.BOL Pln Delv Start Time
 LCL.BOL_Pln_Delv_Start_Time = DB1.BOL_Pln_Delv_Start_Time;

 // LCL.BOL Pln Delv End Time = DB1.BOL Pln Delv End Time
 LCL.BOL_Pln_Delv_End_Time = DB1.BOL_Pln_Delv_End_Time;

 CASE;

 // IF PAR.Date To   USR is Entered
 IF PAR.Date_To_USR <> *ZERO;

 // LCL.BOL Pln Delv Date = PAR.Date To   USR
 LCL.BOL_Pln_Delv_Date = PAR.Date_To_USR;

 ENDIF;

 CASE;

 // IF PAR.Time USR is Entered
 IF PAR.Time_USR <> *ZERO;

 // LCL.BOL Pln Delv Start Time = PAR.Time USR
 LCL.BOL_Pln_Delv_Start_Time = PAR.Time_USR;

 // LCL.BOL Pln Delv End Time = PAR.Time USR
 LCL.BOL_Pln_Delv_End_Time = PAR.Time_USR;

 ENDIF;

 CASE;

 // IF PAR.BOH Buy Order Number NE PAR.Buy Order New Usr
 IF PAR.BOH_Buy_Order_Number <> PAR.Buy_Order_New_Usr;

 EXECUTE FUNCTION(Crt Buy Order Detail  CR) TYPE(CRTOBJ) FILE(PKAXCPP)           AB1100530;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(PAR.Buy_Order_New_Usr);
 PARAMETER(PAR.Buy_Order_Load_New_Usr);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(LCL.BOL_Pln_Delv_Start_Time);
 PARAMETER(LCL.BOL_Pln_Delv_End_Time);
 PARAMETER(DB1.BOL_Pln_Head_Delv);
 PARAMETER(DB1.BOL_Shipped_Wgt);
 PARAMETER(LCL.BOL_Pln_Delv_Date);
 PARAMETER(DB1.BOL_Freight_UOM);
 PARAMETER(DB1.BOL_Freight_Unit_Amt);
 PARAMETER(DB1.BOL_Freight_Amt);
 PARAMETER(DB1.BOL_Freight_Allocation);
 PARAMETER(DB1.BOL_Head_Received);
 PARAMETER(DB1.BOL_Live_Wgt_Received);
 PARAMETER(DB1.BOL_Trucker_Payment_Sts);
 PARAMETER(DB1.BOL_Trucker_Check_Number);
 PARAMETER(DB1.BOL_Trucker_Check_Date);
 PARAMETER(DB1.BOL_AP_Voucher);
 PARAMETER(DB1.BOL_Trailer);
 PARAMETER(DB1.BOL_Freight_Exp_Paid_By);
 PARAMETER(DB1.BOL_Scheduled_Kill_Shift);
 PARAMETER(DB1.BOL_Truck_Scale_Weigh_Sts);
 PARAMETER(DB1.BOL_Shipped_Head);
 PARAMETER(DB1.Reported_to_USDA);
 PARAMETER(DB1.BOL_MPR_Prior_Day_Prch);
 PARAMETER(DB1.BOL_Violated_Auth_Tme_Sts);
 PARAMETER(DB1.BOL_Status_5);
 PARAMETER(DB1.BOL_Status_6);
 PARAMETER(DB1.BOL_Status_7);
 PARAMETER(DB1.BOL_HPS_Movement_Number);
 PARAMETER(DB1.BOL_Head_LFT);
 PARAMETER(DB1.BOL_Head_EUT_KOA);
 PARAMETER(DB1.BOL_Auth_Gate_Entry_Time);
 PARAMETER(DB1.BOL_Head_Received_Market);
 PARAMETER(DB1.BOL_Unused_Wgt_1);
 PARAMETER(DB1.BOL_Unused_Wgt_2);
 PARAMETER(DB1.BOL_Unused_Wgt_3);
 PARAMETER(DB1.BOL_Unused_Wgt_4);
 PARAMETER(DB1.BOL_Unused_Wgt_5);
 PARAMETER(DB1.BOL_Auth_Gate_Entry_Date);
 PARAMETER(DB1.BOL_Unused_Date_2);
 PARAMETER(DB1.BOL_Unused_Date_3);
 PARAMETER(DB1.BOL_Unused_Date_4);
 PARAMETER(DB1.BOL_Unused_Date_5);
 PARAMETER(DB1.TRK_Trucker_Code);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 EXECUTE FUNCTION(Chg Record status     CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1251439;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER('I');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Chg Buy Order Detail  CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1100531;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.BOL_Kill_Date);
 PARAMETER(LCL.BOL_Pln_Delv_Start_Time);
 PARAMETER(LCL.BOL_Pln_Delv_End_Time);
 PARAMETER(DB1.BOL_Pln_Head_Delv);
 PARAMETER(DB1.BOL_Shipped_Wgt);
 PARAMETER(LCL.BOL_Pln_Delv_Date);
 PARAMETER(DB1.BOL_Freight_UOM);
 PARAMETER(DB1.BOL_Freight_Unit_Amt);
 PARAMETER(DB1.BOL_Freight_Amt);
 PARAMETER(DB1.BOL_Freight_Allocation);
 PARAMETER(DB1.BOL_Head_Received);
 PARAMETER(DB1.BOL_Live_Wgt_Received);
 PARAMETER(DB1.BOL_Trucker_Payment_Sts);
 PARAMETER(DB1.BOL_Trucker_Check_Number);
 PARAMETER(DB1.BOL_Trucker_Check_Date);
 PARAMETER(DB1.BOL_AP_Voucher);
 PARAMETER(DB1.BOL_Trailer);
 PARAMETER(DB1.BOL_Freight_Exp_Paid_By);
 PARAMETER(DB1.BOL_Scheduled_Kill_Shift);
 PARAMETER(DB1.BOL_Truck_Scale_Weigh_Sts);
 PARAMETER(DB1.BOL_Violated_Auth_Tme_Sts);
 PARAMETER(DB1.TRK_Trucker_Code);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

}


//?2.  DSD,spl,Commnt -Clr old rcd, create with new bol,kill,delv date,time
EXECUTE FUNCTION(Rtv Crt DSD f/Txfr    RT) TYPE(RTVOBJ) FILE(PLAECPP)           AB1253919;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.Buy_Order_New_Usr);
PARAMETER(PAR.Buy_Order_Load_New_Usr);
PARAMETER(PAR.Kill_Date_Usr);
PARAMETER(PAR.Date_To_USR);
PARAMETER(PAR.Time_USR);
PARAMETER(PAR.New_Delivery_Time_Seq_USR);
{
 //?USER: Process Data record

 // LCL.DSD Scheduled Hour = PAR.Time USR / CON.100 *
 LCL.DSD_Scheduled_Hour = PAR.Time_USR / 100;

 //?10/15/03 Update field if xfr Pulled back or Moved forward
 CASE;

 // IF PAR.Kill Date Usr LT DB1.DSH Kill Date
 IF PAR.Kill_Date_Usr < DB1.DSH_Kill_Date;

 // LCL.DSD Transfer Sts = CND.Pulled Back
 LCL.DSD_Transfer_Sts = 'P';

 //?10/15/03 Update field if xfr Pulled back or Moved forward
 // IF PAR.Kill Date Usr GT DB1.DSH Kill Date
 IF PAR.Kill_Date_Usr > DB1.DSH_Kill_Date;

 // LCL.DSD Transfer Sts = CND.Moved Forward
 LCL.DSD_Transfer_Sts = 'M';

 ENDIF;

 EXECUTE FUNCTION(Crt Delv Sched Dtl    CR) TYPE(CRTOBJ) FILE(PLAECPP)           AB1244727;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(PAR.Date_To_USR);
 PARAMETER(PAR.Time_USR);
 PARAMETER(PAR.New_Delivery_Time_Seq_USR);
 PARAMETER(LCL.DSD_Scheduled_Hour);
 PARAMETER(DB1.DSD_Farm_Site_Code);
 PARAMETER(DB1.DSD_Building);
 PARAMETER(DB1.DSD_Room);
 PARAMETER(DB1.DSD_Sire_Line_Code);
 PARAMETER(DB1.DSD_Hog_Group_Code);
 PARAMETER(DB1.DSD_Unused_Head);
 PARAMETER(DB1.DSD_Scheduled_Delv_Head);
 PARAMETER(DB1.DSD_Scheduled_Kill_Head);
 PARAMETER(DB1.DSD_Transportation_Office);
 PARAMETER(DB1.DSD_Trucker_Code_HPS);
 PARAMETER(DB1.DSD_Driver);
 PARAMETER(DB1.DSD_Loading_Crew);
 PARAMETER(DB1.CHR_Code);
 PARAMETER(DB1.DSD_Load_Type);
 PARAMETER(DB1.DSD_Full_Split_Load);
 PARAMETER(DB1.DSD_Movement_Number);
 PARAMETER(DB1.DSD_Truck_ID);
 PARAMETER(DB1.DSD_Trailer_ID);
 PARAMETER(DB1.DSD_Movement_Printed);
 PARAMETER(DB1.DSD_Sched_Route_Start_Pnt);
 PARAMETER(DB1.DSD_Sched_Route_Start_Dte);
 PARAMETER(DB1.DSD_Sched_Route_Start_Tim);
 PARAMETER(DB1.DSD_Sch_Farm_Arrival_Date);
 PARAMETER(DB1.DSD_Sch_Farm_Arrival_Time);
 PARAMETER(DB1.DSD_Sch_Start_Load_Date);
 PARAMETER(DB1.DSD_Sch_Start_Load_Time);
 PARAMETER(DB1.DSD_Receiving_Shift);
 PARAMETER(DB1.DSD_Kill_Shift);
 PARAMETER(DB1.DSD_BOL_Kill_Shift);
 PARAMETER(DB1.DSD_HPS_Post_Status);
 PARAMETER(DB1.DSD_HPE_Post_Status);
 PARAMETER(DB1.DSD_Lock_Status);
 PARAMETER(DB1.DSD_Source_Type);
 PARAMETER(LCL.DSD_Transfer_Sts);
 PARAMETER(DB1.DSD_Unused_Date);
 PARAMETER(DB1.DSD_Unused_Time);
 PARAMETER(DB1.SR_Source_Code);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(PAR.Buy_Order_New_Usr);
 PARAMETER(PAR.Buy_Order_Load_New_Usr);
 PARAMETER(DB1.DSD_PRD_Srv_Batch_ID);
 PARAMETER(DB1.DSD_PRD_Srv_Sched_ID);
 PARAMETER(DB1.DSD_Ref_1);
 PARAMETER(DB1.DSD_Ref_2);
 PARAMETER(DB1.DSD_Ref_Status);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 CASE;

 // IF DB1.DSD Full/Split Load is Split
 IF DB1.DSD_Full_Split_Load = 'S';

 EXECUTE FUNCTION(Rtv Crt f/Txfr        RT) TYPE(RTVOBJ) FILE(PLAGCPP)           AB1253922;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.DSH_Kill_Date);
 PARAMETER(DB1.DSD_Delivery_Date);
 PARAMETER(DB1.DSD_Delivery_Time);
 PARAMETER(DB1.DSD_Delivery_Time_Seq);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(PAR.Date_To_USR);
 PARAMETER(PAR.Time_USR);
 PARAMETER(PAR.New_Delivery_Time_Seq_USR);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Del Delv Sched Split  DL) TYPE(DLTOBJ) FILE(PLAGCPP)           AB1244778;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.DSH_Kill_Date);
  PARAMETER(DB1.DSD_Delivery_Date);
  PARAMETER(DB1.DSD_Delivery_Time);
  PARAMETER(DB1.DSD_Delivery_Time_Seq);
  PARAMETER(DB1.DSS_Split_Sequence);
  EXECUTE FUNCTION(Crt Delv Sched Split  CR) TYPE(CRTOBJ) FILE(PLAGCPP)           AB1244776;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(PAR.Kill_Date_Usr);
  PARAMETER(PAR.Date_To_USR);
  PARAMETER(PAR.Time_USR);
  PARAMETER(PAR.New_Delivery_Time_Seq_USR);
  PARAMETER(DB1.DSS_Split_Sequence);
  PARAMETER(DB1.DSS_Building);
  PARAMETER(DB1.DSS_Room);
  PARAMETER(DB1.DSS_Sire_Line_Code);
  PARAMETER(DB1.DSS_Hog_Group_Code);
  PARAMETER(DB1.DSS_Scheduled_Head);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv Chg for Txfr      RT) TYPE(RTVOBJ) FILE(PLAKCPP)           AB1253983;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.DSH_Kill_Date);
 PARAMETER(DB1.DSD_Delivery_Date);
 PARAMETER(DB1.DSD_Delivery_Time);
 PARAMETER(DB1.DSD_Delivery_Time_Seq);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(PAR.Date_To_USR);
 PARAMETER(PAR.Time_USR);
 PARAMETER(PAR.New_Delivery_Time_Seq_USR);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Del Delivery Sched Cm DL) TYPE(DLTOBJ) FILE(PLAKCPP)           AB1244987;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.DSH_Kill_Date);
  PARAMETER(DB1.DSD_Delivery_Date);
  PARAMETER(DB1.DSD_Delivery_Time);
  PARAMETER(DB1.DSD_Delivery_Time_Seq);
  PARAMETER(DB1.DSC_Line_Number);
  EXECUTE FUNCTION(Crt Delivery Sched Cm CR) TYPE(CRTOBJ) FILE(PLAKCPP)           AB1244985;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(PAR.Kill_Date_Usr);
  PARAMETER(PAR.Date_To_USR);
  PARAMETER(PAR.Time_USR);
  PARAMETER(PAR.New_Delivery_Time_Seq_USR);
  PARAMETER(DB1.DSC_Line_Number);
  PARAMETER(DB1.DSC_Comment);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

 }

 EXECUTE FUNCTION(Chg Clear Slot EXT   CH) TYPE(CHGOBJ) FILE(PLAECPP)            AB1251029;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.DSH_Kill_Date);
 PARAMETER(DB1.DSD_Delivery_Date);
 PARAMETER(DB1.DSD_Delivery_Time);
 PARAMETER(DB1.DSD_Delivery_Time_Seq);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(DB1.DSD_Load_Type);
 PARAMETER('F');
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER('N');
 PARAMETER(WRK.Blank_Usr_1_fld_Usr);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('N');
 PARAMETER('N');
 PARAMETER('O');
 PARAMETER(WRK.Blank_Usr_2);
 PARAMETER(WRK.Blank_Usr_1_fld_Usr);
 PARAMETER(DB1.DSD_Unused_Date);
 PARAMETER(DB1.DSD_Unused_Time);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*blanks);
 PARAMETER(*blanks);
 PARAMETER(*BLANK);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 QUIT;

}


//?3.  DT,splt,Commnt -del old rcd, create with new bol,kill,delv date,time
EXECUTE FUNCTION(Rtv/Chg/Crt Txfr BOL  RT) TYPE(RTVOBJ) FILE(PLAFCPP)           AB1251440;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.Buy_Order_New_Usr);
PARAMETER(PAR.Buy_Order_Load_New_Usr);
PARAMETER(PAR.Kill_Date_Usr);
PARAMETER(PAR.New_Delivery_Time_Seq_USR);
PARAMETER(PAR.Date_To_USR);
PARAMETER(PAR.Time_USR);
{
 //?USER: Processing if Data record not found

 //?do nothing
 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 EXECUTE FUNCTION(Del Delivery Tracking DL) TYPE(DLTOBJ) FILE(PLAFCPP)           AB1244758;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.DSH_Kill_Date);
 PARAMETER(DB1.DT_Delivery_Date);
 PARAMETER(DB1.DT_Delivery_Time);
 PARAMETER(DB1.DT_Delivery_Time_Seq);
 // LCL.DT Scheduled Hour = PAR.Time USR / CON.100 *
 LCL.DT_Scheduled_Hour = PAR.Time_USR / 100;

 // LCL.DT Delivery Initiation = DB1.DT Delivery Initiation
 LCL.DT_Delivery_Initiation = DB1.DT_Delivery_Initiation;

 //?10/10/03
 CASE;

 // IF PAR.Kill Date Usr LT DB1.DSH Kill Date
 IF PAR.Kill_Date_Usr < DB1.DSH_Kill_Date;

 // LCL.DT Delivery Initiation = CND.Pulled Back
 LCL.DT_Delivery_Initiation = 'P';

 //?10/10/03
 // IF PAR.Kill Date Usr GT DB1.DSH Kill Date
 IF PAR.Kill_Date_Usr > DB1.DSH_Kill_Date;

 // LCL.DT Delivery Initiation = CND.Moved Forward
 LCL.DT_Delivery_Initiation = 'M';

 ENDIF;

 EXECUTE FUNCTION(Crt Delivery Tracking CR) TYPE(CRTOBJ) FILE(PLAFCPP)           AB1244756;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(PAR.Date_To_USR);
 PARAMETER(PAR.Time_USR);
 PARAMETER(PAR.New_Delivery_Time_Seq_USR);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(DB1.DT_Actual_Delivery_Hour);
 PARAMETER(LCL.DT_Scheduled_Hour);
 PARAMETER(LCL.DT_Delivery_Initiation);
 PARAMETER(DB1.DT_Farm_Site_Code);
 PARAMETER(DB1.DT_Building);
 PARAMETER(DB1.DT_Room);
 PARAMETER(DB1.DT_Sire_Line_Code);
 PARAMETER(DB1.DT_Hog_Group_Reference);
 PARAMETER(DB1.DT_Delivered_Head);
 PARAMETER(DB1.DT_Delivered_Weight_lbs);
 PARAMETER(DB1.DT_Trucker_Code_HPS);
 PARAMETER(DB1.DT_Driver);
 PARAMETER(DB1.DT_Loading_Crew);
 PARAMETER(DB1.CHR_Code);
 PARAMETER(DB1.DT_Load_Type);
 PARAMETER(DB1.DT_Full_Split_Load);
 PARAMETER(DB1.DT_Movement_Number);
 PARAMETER(DB1.DT_Truck_ID);
 PARAMETER(DB1.DT_Trailer_ID);
 PARAMETER(DB1.DT_Transportation_Office);
 PARAMETER(DB1.DT_Transprtn_Office_Date);
 PARAMETER(DB1.DT_Transprtn_Office_Time);
 PARAMETER(DB1.DT_Arrive@Frm_v_StartLd);
 PARAMETER(DB1.DT_On_Time_Farm_Arrvl_Sts);
 PARAMETER(DB1.DT_Route_Start_Pnt);
 PARAMETER(DB1.DT_Route_Start_Date);
 PARAMETER(DB1.DT_Route_Start_Time);
 PARAMETER(DB1.DT_Route_Start_Variance);
 PARAMETER(DB1.DT_Wait_@_Transp_Offc_Tm);
 PARAMETER(DB1.DT_Arrive_@_Farm_Date);
 PARAMETER(DB1.DT_Arrive_@_Farm_Time);
 PARAMETER(DB1.DT_Drive_Time_To_Farm);
 PARAMETER(DB1.DT_Start_Loading_Date);
 PARAMETER(DB1.DT_Start_Loading_Time);
 PARAMETER(DB1.DT_Start_Loading_Variance);
 PARAMETER(DB1.DT_Wait_@_Farm);
 PARAMETER(DB1.DT_Frm_End_Loading_Date);
 PARAMETER(DB1.DT_Frm_End_Loading_Time);
 PARAMETER(DB1.DT_Load_Time);
 PARAMETER(DB1.DT_Leave_Farm_Date);
 PARAMETER(DB1.DT_Leave_Farm_Time);
 PARAMETER(DB1.DT_Wait_Depart_Frm);
 PARAMETER(DB1.DT_Plt_TrkWsh_Arvl_Date);
 PARAMETER(DB1.DT_Plt_TrkWsh_Arvl_Time);
 PARAMETER(DB1.DT_Arrive_@_Plant_Date);
 PARAMETER(DB1.DT_Arrive_@_Plant_Time);
 PARAMETER(DB1.DT_Wait_@_TrkWsh);
 PARAMETER(DB1.DT_Drive_Time_To_Plant);
 PARAMETER(DB1.DT_Delv_Time_Variance);
 PARAMETER(DB1.DT_On_Time_Delivery);
 PARAMETER(DB1.Delivery_Reason_Code);
 PARAMETER(DB1.DT_TrkScl_Weigh_In_Date);
 PARAMETER(DB1.DT_TrkScl_Weigh_In_Time);
 PARAMETER(DB1.DT_Wait_@_TrkScl);
 PARAMETER(DB1.DT_To_Recv_Dock_Date);
 PARAMETER(DB1.DT_To_Recv_Dock_Time);
 PARAMETER(DB1.DT_Wait_Rcv_Dock);
 PARAMETER(DB1.DT_Start_Unloading_Date);
 PARAMETER(DB1.DT_Start_Unloading_Time);
 PARAMETER(DB1.DT_Wait_@_Rcv_Dock);
 PARAMETER(DB1.DT_End_Unload_Date);
 PARAMETER(DB1.DT_End_Unload_Time);
 PARAMETER(DB1.DT_Unload_Time);
 PARAMETER(DB1.DT_Unload_Variance_Time);
 PARAMETER(DB1.DT_TrkScl_Weigh_Out_Date);
 PARAMETER(DB1.DT_TrkScl_Weigh_Out_Time);
 PARAMETER(DB1.DT_Wait_Time_@_the_Plant);
 PARAMETER(DB1.DT_Formula_Wait_Tm_@_Plt);
 PARAMETER(DB1.DT_Source_Type);
 PARAMETER(DB1.DT_GATE_UPDATE_YES);
 PARAMETER(DB1.DT_Unused_Date);
 PARAMETER(DB1.DT_Unused_Time);
 PARAMETER(DB1.DT_Unused_Wait_Time);
 PARAMETER(DB1.DSD_Scheduled_Delv_Head);
 PARAMETER(DB1.DT_Head_Received);
 PARAMETER(DB1.DT_Weight_Received);
 PARAMETER(DB1.DT_Avg_Weight_Received);
 PARAMETER(DB1.DT_Head_DOA);
 PARAMETER(DB1.DT_Weight_DOA);
 PARAMETER(DB1.DT_Head_Yard_Dead);
 PARAMETER(DB1.DT_Weight_Yard_Dead);
 PARAMETER(DB1.DT_Head_Condemned);
 PARAMETER(DB1.DT_Weight_Condemned);
 PARAMETER(DB1.DT_Head_Held_Over);
 PARAMETER(DB1.DT_Weight_Held_Over);
 PARAMETER(DB1.DT_Head_Killed);
 PARAMETER(DB1.DT_Weight_Killed);
 PARAMETER(DB1.DT_Head_Market);
 PARAMETER(DB1.DT_Weight_Market);
 PARAMETER(DB1.DT_Avg_Weight_Market);
 PARAMETER(DB1.DT_Head_Resale);
 PARAMETER(DB1.DT_Weight_Resale);
 PARAMETER(DB1.DT_Avg_Weight_Resale);
 PARAMETER(DB1.DT_Head_Unused_1);
 PARAMETER(DB1.DT_Weight_Unused_1);
 PARAMETER(DB1.DT_Head_Unused_2);
 PARAMETER(DB1.DT_Weight_Unused_2);
 PARAMETER(DB1.DT_Error_Sts);
 PARAMETER(DB1.DT_Error_Reason);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.SR_Source_Code);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(PAR.Buy_Order_New_Usr);
 PARAMETER(PAR.Buy_Order_Load_New_Usr);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

  //?USER: Processing if Data record already exists

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Processing after Data update

  EXECUTE FUNCTION(Upd Farm, Movement    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1251472;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(PAR.DT_Movement_Number);
  PARAMETER(PAR.DT_Farm_Site_Code);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.TH HPS Farm Site NE PAR.TH HPS Farm Site
   IF DB1.TH_HPS_Farm_Site <> PAR.TH_HPS_Farm_Site;

   CASE;

   // IF DB1.TH Source Type is Internal
   IF DB1.TH_Source_Type = 'I';

   //?Due to test with e2423 SAW that we were change the
   //?movement and farm site and not the state code
   //?use this retrieve regardless of Not Live Or Live with MTech
   // Call program Rtv HPS Farm Inf-Mtech UP.
   CALL PROGRAM(Rtv HPS Farm Inf-Mtech UP) ('HP293');
   PARAMETER(PGM.*Return_code);
   PARAMETER(NLL.Farm_site_Name_f_HPS_USR);
   PARAMETER(PAR.TH_HPS_Farm_Site);
   PARAMETER(NLL.HPS_FS_Comp_Relation_USR);
   PARAMETER(WRK.State);
   PARAMETER(NLL.HPS_Farm_County);
   PARAMETER(NLL.HPS_Cell_Manager_Code_USR);
   PARAMETER(NLL.HPS_Cell_Manager_Nm_USR);
   PARAMETER(NLL.MTech_Farm_Site_Ref);
   PARAMETER(NLL.MTech_Cell_Manager_Ref);

   EXECUTE FUNCTION(Chg Farm, Movement    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1251473;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(PAR.TH_HPS_Movement_Ref_#);
   PARAMETER(WRK.State);
   PARAMETER(PAR.TH_HPS_Farm_Site);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Chg Farm, Movement    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1251473;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(PAR.TH_HPS_Movement_Ref_#);
   PARAMETER(DB1.TH_State);
   PARAMETER(PAR.TH_HPS_Farm_Site);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

   ENDIF;

   ENDIF;

  }

 }

 CASE;

 // IF DB1.DT Full/Split Load is Split
 IF DB1.DT_Full_Split_Load = 'S';

 EXECUTE FUNCTION(Rtv Chg for Txfr      RT) TYPE(RTVOBJ) FILE(PLAJCPP)           AB1253979;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.DSH_Kill_Date);
 PARAMETER(DB1.DT_Delivery_Date);
 PARAMETER(DB1.DT_Delivery_Time);
 PARAMETER(DB1.DT_Delivery_Time_Seq);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(PAR.Date_To_USR);
 PARAMETER(PAR.Time_USR);
 PARAMETER(PAR.New_Delivery_Time_Seq_USR);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Del Delv Trckng Split DO) TYPE(DLTOBJ) FILE(PLAJCPP)           AB1245172;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.DSH_Kill_Date);
  PARAMETER(DB1.DT_Delivery_Date);
  PARAMETER(DB1.DT_Delivery_Time);
  PARAMETER(DB1.DT_Delivery_Time_Seq);
  PARAMETER(DB1.DTS_Split_Sequence);
  EXECUTE FUNCTION(Crt Delv Trckng Split CR) TYPE(CRTOBJ) FILE(PLAJCPP)           AB1245170;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(PAR.Kill_Date_Usr);
  PARAMETER(PAR.Date_To_USR);
  PARAMETER(PAR.Time_USR);
  PARAMETER(PAR.DT_Delivery_Time_Seq);
  PARAMETER(DB1.DTS_Split_Sequence);
  PARAMETER(DB1.DTS_Building);
  PARAMETER(DB1.DTS_Room);
  PARAMETER(DB1.DTS_Sire_Line_Code);
  PARAMETER(DB1.DTS_Hog_Group_Code);
  PARAMETER(DB1.DTS_Delivered_Head);
  PARAMETER(DB1.DTS_Delivered_Weight);
  PARAMETER(DB1.DTS_Movement_Number);
  PARAMETER(DB1.DTS_UnUsed_Number_6_0);
  PARAMETER(DB1.DTS_Unused_Fld_1);
  PARAMETER(DB1.DTS_Unused_Fld_2);
  PARAMETER(DB1.DTS_Unused_Fld_3);
  PARAMETER(DB1.DTS_Unused_Status_1);
  PARAMETER(DB1.DTS_Unused_Status_2);
  PARAMETER(DB1.DTS_Unused_Status_3);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv Chg for Txfr      RT) TYPE(RTVOBJ) FILE(PLAHCPP)           AB1253982;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.DSH_Kill_Date);
 PARAMETER(DB1.DT_Delivery_Date);
 PARAMETER(DB1.DT_Delivery_Time);
 PARAMETER(DB1.DT_Delivery_Time_Seq);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(PAR.Date_To_USR);
 PARAMETER(PAR.Time_USR);
 PARAMETER(PAR.New_Delivery_Time_Seq_USR);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Del Delv Track Cmnt   DL) TYPE(DLTOBJ) FILE(PLAHCPP)           AB1244801;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.DSH_Kill_Date);
  PARAMETER(DB1.DT_Delivery_Date);
  PARAMETER(DB1.DT_Delivery_Time);
  PARAMETER(DB1.DT_Delivery_Time_Seq);
  PARAMETER(DB1.DTC_Line_Number);
  EXECUTE FUNCTION(Crt Delv Track Cmnt   CR) TYPE(CRTOBJ) FILE(PLAHCPP)           AB1244799;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(PAR.Kill_Date_Usr);
  PARAMETER(PAR.Date_To_USR);
  PARAMETER(PAR.Time_USR);
  PARAMETER(PAR.New_Delivery_Time_Seq_USR);
  PARAMETER(DB1.DTC_Line_Number);
  PARAMETER(DB1.DTC_Comment);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

 }

 QUIT;

}


//?4.  If txfr BOLW is Yes, do it.
//?Chg BOLW records
CASE;

// IF PAR.Status 1 is Yes
IF PAR.Status_1 = 'Y';

EXECUTE FUNCTION(Chg Buy Order Load    RT) TYPE(RTVOBJ) FILE(PKEJCPP)           AB1216877;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.Buy_Order_New_Usr);
PARAMETER(PAR.Buy_Order_Load_New_Usr);
{
 //?USER: Process Data record

 //?*---------------------------------------------------------------*
 //?* 09/26/00 PKD Added initialization of the Spread Status to Not
 //?*              Spread.
 EXECUTE FUNCTION(Chg Buy Order Load    CH) TYPE(CHGOBJ) FILE(PKEJCPP)           AB1216878;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.BOLW_Movement_Number);
 PARAMETER(DB1.BOLW_Weight_Type);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Buy_Order_Number_USR);
 PARAMETER(PAR.Buy_Order_Load_USR);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


//?*---------------------------------------------------------------*
//?* 09/26/00 PKD Added the following two updates for the
//?*              BOL Truck Scale Weigh Sts.
EXECUTE FUNCTION(Rtv/Upd BOL Sprd Sts  RT) TYPE(RTVOBJ) FILE(PKEJCPP)           AB1235232;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
{
 //?USER: Processing if Data record not found

 // PAR.BOL Truck Scale Weigh Sts = CND.None
 PAR.BOL_Truck_Scale_Weigh_Sts = *BLANK;

 //?USER: Process Data record

 CASE;

 // IF DB1.BOLW Weight Type is In(En)
 IF DB1.BOLW_Weight_Type = 'I';

 // PAR.BOL Truck Scale Weigh Sts = CND.In
 PAR.BOL_Truck_Scale_Weigh_Sts = 'I';

 // IF DB1.BOLW Weight Type is Out(Fuera)
 IF DB1.BOLW_Weight_Type = 'O';

 // PAR.BOL Truck Scale Weigh Sts = CND.Out
 PAR.BOL_Truck_Scale_Weigh_Sts = 'O';

 ENDIF;

 //?USER: Exit processing

 EXECUTE FUNCTION(Upd Trk Scl Weigh Sts RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1214077;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(PAR.BOL_Truck_Scale_Weigh_Sts);
 {
  //?USER: Process Data record

  CASE;

  // IF PAR.BOL Truck Scale Weigh Sts is Respread
  IF PAR.BOL_Truck_Scale_Weigh_Sts = 'R';

  // AND DB1.BOL Truck Scale Weigh Sts is Not Spread
  AND DB1.BOL_Truck_Scale_Weigh_Sts = 'I'/'N'/*BLANK/'O'/'R'/'A'/'C';

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Chg Trk Scl Weigh Sts CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1214078;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(PAR.BOL_Truck_Scale_Weigh_Sts);
  PARAMETER(DB1.BOL_Shipped_Head);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  ENDIF;

  CASE;

  // IF PAR.BOL Truck Scale Weigh Sts is Respread
  IF PAR.BOL_Truck_Scale_Weigh_Sts = 'R';

  EXECUTE FUNCTION(Upd Hdr/Bal Status    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1230832;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER('E');
  PARAMETER('E');
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.TH Hog Class Type is Not Resale
   IF DB1.TH_Hog_Class_Type = 'M'/'S';

   EXECUTE FUNCTION(Chg Hdr/Bal Status    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1230833;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(PAR.TH_Header_Error_Sts);
   PARAMETER(PAR.TH_Kill_Balancing_Sts);
   ENDIF;

  }

  ENDIF;

 }

}


//?slm 1/5/2012 found that the parms were not correct
//?the one prior was sending in the new buy order where the company
//?should have been placed
EXECUTE FUNCTION(Rtv/Upd BOL Sprd Sts  RT) TYPE(RTVOBJ) FILE(PKEJCPP)           AB1235232;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.Buy_Order_New_Usr);
PARAMETER(PAR.Buy_Order_Load_New_Usr);
{
 //?USER: Processing if Data record not found

 // PAR.BOL Truck Scale Weigh Sts = CND.None
 PAR.BOL_Truck_Scale_Weigh_Sts = *BLANK;

 //?USER: Process Data record

 CASE;

 // IF DB1.BOLW Weight Type is In(En)
 IF DB1.BOLW_Weight_Type = 'I';

 // PAR.BOL Truck Scale Weigh Sts = CND.In
 PAR.BOL_Truck_Scale_Weigh_Sts = 'I';

 // IF DB1.BOLW Weight Type is Out(Fuera)
 IF DB1.BOLW_Weight_Type = 'O';

 // PAR.BOL Truck Scale Weigh Sts = CND.Out
 PAR.BOL_Truck_Scale_Weigh_Sts = 'O';

 ENDIF;

 //?USER: Exit processing

 EXECUTE FUNCTION(Upd Trk Scl Weigh Sts RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1214077;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(PAR.BOL_Truck_Scale_Weigh_Sts);
 {
  //?USER: Process Data record

  CASE;

  // IF PAR.BOL Truck Scale Weigh Sts is Respread
  IF PAR.BOL_Truck_Scale_Weigh_Sts = 'R';

  // AND DB1.BOL Truck Scale Weigh Sts is Not Spread
  AND DB1.BOL_Truck_Scale_Weigh_Sts = 'I'/'N'/*BLANK/'O'/'R'/'A'/'C';

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Chg Trk Scl Weigh Sts CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1214078;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(PAR.BOL_Truck_Scale_Weigh_Sts);
  PARAMETER(DB1.BOL_Shipped_Head);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  ENDIF;

  CASE;

  // IF PAR.BOL Truck Scale Weigh Sts is Respread
  IF PAR.BOL_Truck_Scale_Weigh_Sts = 'R';

  EXECUTE FUNCTION(Upd Hdr/Bal Status    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1230832;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER('E');
  PARAMETER('E');
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.TH Hog Class Type is Not Resale
   IF DB1.TH_Hog_Class_Type = 'M'/'S';

   EXECUTE FUNCTION(Chg Hdr/Bal Status    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1230833;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(PAR.TH_Header_Error_Sts);
   PARAMETER(PAR.TH_Kill_Balancing_Sts);
   ENDIF;

  }

  ENDIF;

 }

}


ENDIF;

//?5.  If Kill Date changed, call HPS to chg the kill dt for the movment
CASE;

// IF LCL.MTech Live Yes or No is No MTech not Live
IF LCL.MTech_Live_Yes_or_No = 'N';

//?and SEABOA on the next check
//?Chg HPS Movement Kill Date
CASE;

// IF PAR.BOL Kill Date NE PAR.Kill Date Usr
IF PAR.BOL_Kill_Date <> PAR.Kill_Date_Usr;

// AND PAR.PD Producer Code is SEABOA
AND PAR.PD_Producer_Code = 'SEABOA';

CASE;

// IF PAR.BOL HPS Movement Number is Entered
IF PAR.BOL_HPS_Movement_Number <> *ZERO;

// Call program Z1d Kill Date f/Txfr  UP.
CALL PROGRAM(Z1d Kill Date f/Txfr  UP) ('HP280');
PARAMETER(PAR.Kill_Date_Usr);
PARAMETER(PAR.BOL_HPS_Movement_Number);

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER('PRKDTTFR');
PARAMETER(LCL.Office_Dist_List_USR);

// Retrieve message - '&4 Movement &1 transferred from &2 to &3'
WRK.Office_Dist_Message_USR = RTVMSG(PRK1090);
PARAMETER(PAR.BOL_HPS_Movement_Number);
PARAMETER(PAR.BOL_Kill_Date);
PARAMETER(PAR.Kill_Date_Usr);
PARAMETER(PAR.BOH_Company_Number);

// Call program Snd Pager Msg (MPLUS) UP.
CALL PROGRAM(Snd Pager Msg (MPLUS) UP) ('POMSUPC');
PARAMETER(LCL.Office_Dist_List_USR);
PARAMETER(WRK.Office_Dist_Message_USR);

ENDIF;

ENDIF;

//?external producers will not go thru this also not triumph foods
// IF *OTHERWISE
IF *OTHERWISE;

//?E2423 Mtech Live WILL not do anything
//?Changes to a Kill date is allowed when in HPE
//?KILL DATE in Mtech is schedule kill date
ENDIF;

//?6.  Transfer the tattoos to new BOL/Kill
CASE;

// IF PAR.BOL Kill Date NE PAR.Kill Date Usr
IF PAR.BOL_Kill_Date <> PAR.Kill_Date_Usr;

EXECUTE FUNCTION(Rtv Txfr from Delvry  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1252030;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.Buy_Order_New_Usr);
PARAMETER(PAR.Buy_Order_Load_New_Usr);
PARAMETER(PAR.Kill_Date_Usr);
{
 //?USER: Process Data record

 //?MODIFICATION HISTORY
 DO;

 //?10/24/2008 Set the Edit Tattoo Header parm to NO
 //?the  reprocess of the Edit Tattoo Header screen will only
 //?be performed from the transfer of a tattoo number
 //?9/25/2008 change  due to parms for site id or Subsidiary
 //?from this process the user will not be changing the producer
 //?code by moving this buy order to another buy order they
 //?are only changing the date.
 ENDDO;

 //?Initial Transfer fields that are used on a Prod/Tattoo Transfer
 DO;

 // LCL.Transfer Site Id Usr = CND.No
 LCL.Transfer_Site_Id_Usr = 'N';

 // LCL.Transfer Subsidiary Usr = CND.No
 LCL.Transfer_Subsidiary_Usr = 'N';

 // LCL.Transfer Subsidiary Usr = CND.No
 LCL.Transfer_Subsidiary_Usr = 'N';

 // LCL.Site Id New = CON.*BLANK
 LCL.Site_Id_New = *BLANK;

 // LCL.Prod Subsidiary New Usr = CON.*BLANK
 LCL.Prod_Subsidiary_New_Usr = *BLANK;

 // LCL.Th State code New = CON.*BLANK
 LCL.Th_State_code_New = *BLANK;

 // LCL.Process EditTattooHdr USR = CND.No
 LCL.Process_EditTattooHdr_USR = 'N';

 ENDDO;

 // Call program Exc TrnsfrTtt-AllFiles XF.
 CALL PROGRAM(Exc TrnsfrTtt-AllFiles XF) ('PKVFXFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER('N');
 PARAMETER(PAR.Buy_Order_New_Usr);
 PARAMETER(PAR.Buy_Order_Load_New_Usr);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER('N');
 PARAMETER(LCL.Site_Id_New);
 PARAMETER(LCL.Transfer_Site_Id_Usr);
 PARAMETER(LCL.Prod_Subsidiary_New_Usr);
 PARAMETER(LCL.Transfer_Subsidiary_Usr);
 PARAMETER(LCL.Th_State_code_New);
 PARAMETER(LCL.Transfer_State_User);
 PARAMETER(LCL.Process_EditTattooHdr_USR);

}


ENDIF;

