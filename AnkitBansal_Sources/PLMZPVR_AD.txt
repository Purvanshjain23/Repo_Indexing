// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLMZPVR
// ?Date: 14.08.2025 Time: 02:54:43
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(LCL.Oms_Warehouse_Code);
PARAMETER(WRK.Company_Number_USR);
PARAMETER('HPE');
PARAMETER(LCL.Oms_SalesPerson_Code);
PARAMETER(LCL.Oms_Allow_Multi_Company);
PARAMETER(LCL.Oms_Default_Printer);
PARAMETER(LCL.Oms_Name);
PARAMETER(LCL.Oms_System_Value_Alpha);
PARAMETER(LCL.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF LCL.Oms Access Denied (Y/N) is Yes
IF LCL.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

// LCL.PRT Night Queue Run Sts = CND.No
LCL.PRT_Night_Queue_Run_Sts = 'N';

//?CALC: Screen function fields

EXECUTE FUNCTION(Rtv CMP Info Record   RT) TYPE(RTVOBJ) FILE(PKARREP)           AB1263852;
PARAMETER(DTL.CMP_Program_Code);
PARAMETER(DTL.CMP_Description);
PARAMETER(DTL.CMP_Grading_Type);
PARAMETER(DTL.CMP_Sort_Basis);
PARAMETER(DTL.CMP_Sts);
PARAMETER(DTL.CMP_Carc_Wgt_Type);
PARAMETER(DTL.CMP_Std_Lean_Percent);
PARAMETER(DTL.CMP_Lean_Factor);
PARAMETER(DTL.CMP_Optimal_Row_Nbr_f_srt);
PARAMETER(DTL.CMP_Type);
PARAMETER(DTL.CMP_Market_Add_Deduct);
PARAMETER(DTL.CMP_of_Carcass_Cutout);
PARAMETER(DTL.CMP_Fixed_Cost_Per_Head);
PARAMETER(DTL.CMP_Grade_Type_Adj);
PARAMETER(DTL.CMP_CLC_Premium_First);
PARAMETER(DTL.RS_Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Grading Type Desc Usr = Condition name of DTL.CMP Grading Type
DTL.Grading_Type_Desc_Usr = RTVCND(DTL.CMP_Grading_Type);

// DTL.Sort Basis Desc Usr = Condition name of DTL.CMP Sort Basis
DTL.Sort_Basis_Desc_Usr = RTVCND(DTL.CMP_Sort_Basis);

// DTL.Carc Wgt Type Desc Usr = Condition name of DTL.CMP Carc Wgt Type
DTL.Carc_Wgt_Type_Desc_Usr = RTVCND(DTL.CMP_Carc_Wgt_Type);

// DTL.Sort Weight Desc Usr = Condition name of DTL.CMP Optimal Row Nbr f/srt
DTL.Sort_Weight_Desc_Usr = RTVCND(DTL.CMP_Optimal_Row_Nbr_f_srt);

// DTL.CMP Type Desc Usr = Condition name of DTL.CMP Type
DTL.CMP_Type_Desc_Usr = RTVCND(DTL.CMP_Type);

// DTL.Record Status Desc Usr = Condition name of DTL.RS Record Status
DTL.Record_Status_Desc_Usr = RTVCND(DTL.RS_Record_Status);

//?USER: User defined action

// WRK.Select to CMP Upload Usr = CND.Select to process
WRK.Select_to_CMP_Upload_Usr = 'Y';

//?Validation
DO;

//?Valid Grading types
CASE;

// IF DTL.CMP Grading Type is Lean Percent Upload
IF DTL.CMP_Grading_Type = 'P'/'D'/'L'/'M';

//?Valid Grading types
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'This Grade Type is invalid for TF Premium Upload'
ERROR(PRK1210);
MSGPARM(DTL.CMP_Grading_Type);

// WRK.Select to CMP Upload Usr = CND.Do not process
WRK.Select_to_CMP_Upload_Usr = 'N';

ENDIF;

//?Verify that Rows for the weight do exists NF is error
DO;

CASE;

// IF WRK.Select to CMP Upload Usr is Select to process
IF WRK.Select_to_CMP_Upload_Usr = 'Y';

//?at the present time input parm will not exceed 130
// WRK.Row Number Count Usr = CON.001
WRK.Row_Number_Count_Usr = 001;

// DOW WRK.Row Number Count Usr LE DTL.Weight Columns TF Upl
DOW WRK.Row_Number_Count_Usr <= DTL.Weight_Columns_TF_Upl;

// AND WRK.Row Number Count Usr is Less then 999
AND WRK.Row_Number_Count_Usr < 999;

EXECUTE FUNCTION(Vry Row for TF Upload RT) TYPE(RTVOBJ) FILE(PKBYREP)           AB1290913;
PARAMETER(DTL.CMP_Program_Code);
PARAMETER(WRK.Row_Number_Count_Usr);
{
 //?USER: Initialize routine

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// WRK.Row Number Count Usr = WRK.Row Number Count Usr + CON.001
WRK.Row_Number_Count_Usr = WRK.Row_Number_Count_Usr + 001;

// IF *OTHERWISE
IF *OTHERWISE;

//?Set to 999 to end repeat
// WRK.Row Number Count Usr = CON.999
WRK.Row_Number_Count_Usr = 999;

// Send error message - 'The Row number is not found for this CMP'
ERROR(PRK1211);

// WRK.Select to CMP Upload Usr = CND.Do not process
WRK.Select_to_CMP_Upload_Usr = 'N';

ENDIF;

ENDDO;

ENDIF;

ENDDO;

ENDDO;

CASE;

// IF WRK.Select to CMP Upload Usr is Select to process
IF WRK.Select_to_CMP_Upload_Usr = 'Y';

CASE;

// IF DTL.*CMD key is CF13
IF DTL.*CMD_key = '13';

// Call program Prt/Upd CrcsMrt Prem  PF.
CALL PROGRAM(Prt/Upd CrcsMrt Prem  PF) ('PLMXPFR');
PARAMETER(DTL.CMP_Program_Code);
PARAMETER(DTL.Weight_Columns_TF_Upl);
PARAMETER(DTL.Cmmp_Prem_Upl_Desc_Usr);

// Send completion message - 'CMP Premiums Uploaded'
MESSAGE(PRK1212 *COMPLETION);

RETURN;

ENDIF;

ENDIF;

