     h option(*SRCSTMT:*NODEBUGIO)
      ****************************************************************
      *
      * SYSTEM:      Triumph Foods
      * PROGRAM:     TF451
      * TITLE:       Specify Weekly Inventory Close
      * PROGRAMMER:  LeAnne Ramsey
      * CREATED:     03/28/07
      *
      *
      * FUNCTION: This function uses an edit record format to allow the user
      *           to submit the function.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 12/10/07  LeAnne Ramsey
      *           Recompile only.
      *           New field (Freezer Interest Rate %) added to Inventory Cost file.
      *
      * 08/15/08  LeAnne Ramsey
      *           Recompile only.
      *           Users are no longer doing Holding/Inflow calcs. So, we removed
      *           Holding Cost/Lb and Inflow Cost/Lb from the file.
      *
      * 11/20/08  LeAnne Ramsey
      *           As a prep for synchronizing the TFS and Meat Cost LDAs, we
      *           removed the unused LDA fields.
      *
      * 12/01/08  LeAnne Ramsey
      *           File TFP050 renamed from Cold Carcass Pounds to Kill/Cut Data.
      *           Fields were added to the file and the 2-letter prefix was changed
      *           from "CP" to "KC".
      *
      * 05/06/09  LeAnne Ramsey
      *           Changed the Print logic to match Meat Costing.
      *
      * 11/09/17  Danny Nguyen    - R12011-Kill Cut Data for STF
      *           File TFP050 was changed. Recompile only. No logic change.
      *
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Ftfd451    cf   e             workstn infds(iofeed)
      *
      *
     Ftfp001    if   e           k disk
      *    Preliminary/final
      *
      *
     Ftfp050    if   e           k disk
      *    Kill/cut data
      *
      *
     Ftfl053a   if   e           k disk
      *    Inventory cost
      *
      *
     Ftfp099    uf   e           k disk
      *    Function control
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  Compile time array for SBMJOB used in QCMDEXC
      *---------------------------------------------------------------
     D cmd             s              1    dim(80) ctdata perrcd(80)
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D maxmsg          s              2  0  inz(20)
      *
      *
      * Control fields
      *
     D svcedt          s                    like(fncedt)
      *
      *
      * Workfields for Date Manipulation
      *
     D wkisodate       s               d   datfmt(*iso)
     D wkwedt          s                    like(fncedt)
     D wkalphdt        s              8
      *
      *
      * Parm fields
      *
     D xxpfcd          s                    like(pfpfcd)
     D xxpfds          s                    like(pfpfds)
      *
      *
      *  Parms for use with QCMDEXC.  'LENGTH' is the length of the
      *  command that will be issued with QCMDEXC.  QCMDEXC requires
      *  the field containing length to be defined as 15 with 5 decimal
      *  positions.  The field 'CMDSBM' will hold the values of the
      *  submit job command when passed as a parm on the call to
      *  QCMDEXC.
      *
     D length          s             15  5 inz(80)
     D cmdsbm          s             80
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      *  Local data area
      *---------------------------------------------------------------
      *
     d lda            uds                  dtaara(*lda)
     D  ldpfcd                 1      1
     D  ldcyr                  2      5  0
     D  ldcwk                  6      7  0
      *
     D  ldcbdt                 8     15  0
      *
     D  ldcedt                29     36  0
     D  ldcemdy               44     49  0
      *
     D  ldoutq               401    410
     D  ldhold               411    414
     D  ldsave               415    418
     D  ldcopy               419    419  0
      *
      *-------------------------------------------------------------------------------
      * Definition for external data area 'DATFPOST-Last Inventory Values Post Week-
      * ending Date
      *-------------------------------------------------------------------------------
      *
     D lastwedt        s              8  0 dtaara(datfpost)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
     C
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the error
      * message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to CRT.
      *
     C                   write     tf451k1
     C                   write     tf451ec
     C                   exfmt     tf451r1
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
     C                   eval      routne = scrn1
      *
     C                   when      *in17 = *on                                  F17-print options
     C                   call      'RO890'
     C                   eval      routne = scrn1
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                       API
     C                   eval      routne = scrn1
     C                   other
      *
     C                   eval      routne = edit1
     C                   endsl
      *
      * Bring in the LDA to pick up any printer changes the user may
      * have made from called programs
      *
     C                   in        lda
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Edit screen 1 input fields
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * Validate the preliminary/final entry
      *
     C                   exsr      $pfcd
      *
      * Validate that the Weekly Inventory Close:
      *    1) has not already been submitted
      *    2) closed--(ie: the values on the screen are different than
      *                    the file values)
      *
      *
     C     'INVENTORY '  chain(n)  tfp099                             92
     C                   if        *in92 = *off                                 If hit
      *
     C                   if        fnsbfl <> *blank
     C                   add       1             error
     C                   movel     'HS08115'     mgid(e)
     C                   endif
      *
     C                   if        fncyr <> d1yr or
     C                             fncwk <> d1wk
     C                   add       1             error
     C                   movel     'HS08002'     mgid(e)
     C                   endif
     C                   endif                                                  If hit
      *
      *
      * A 'Final' Weekly Revenue Close must have already been completed for
      * this week.
      *
     C     'REVENUE   '  chain     tfp099                             92
     C                   if        *in92 = *on or                               If revenue
     C                             svcedt > fnledt
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08116'     mgid(e)
     C                   endif
     C                   endif                                                  If revenue
      *
      * The Inventory Values Post must have been completed for this week.
      * Bring in the data area that holds the "week-ending date" of the last
      * Inventory Values Post.
      *
     C                   in        lastwedt
     C                   if        svcedt > lastwedt and
     C                             error < maxmsg
     C                   add       1             error
     C                   movel     'HS08117'     mgid(e)
     C                   endif
      *
      * You must have weekly Cold Carcass records for the last 4 weeks.
      *
     C                   exsr      $carcass
      *
      * You must have an Inventory Cost record in effect for this date.
      *
     C                   exsr      $cost
      *
      * If there are no errors, execute the subroutine to submit.
      *
     C                   if        error = 0                                    If no error
     C                   if        *in44 = *off                                 If no F8
     C                   seton                                        44
     C                   else
     C                   if        *in08 = *on                                  If F8=submit
     C                   exsr      $proc1
     C                   endif                                                  If F8=submit
     C                   endif                                                  If no F8
     C                   else
     C                   setoff                                       44
     C                   endif                                                  If no error
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Preliminary/Final
      *---------------------------------------------------------------
      *
      * Validations:
      *  1) required
      *
     C     $pfcd         begsr
      *
     C                   move      *blank        d1pfds
      *
     C                   select
     C                   when      d1pfcd = *blank
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09001'     mgid(e)
     C                   endif
     C                   other
      *
     C     d1pfcd        chain     tfp001                             92
     C                   if        *in92 = *off                                 If ok
     C                   move      pfpfds        d1pfds
     C                   else
      *
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08000'     mgid(e)
     C                   endif
     C                   endif                                                  If OK
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Kill/cut records
      *----------------------------------------------------------------
      * The calculations in the Weekly Inventory Close need Cold Carcass
      * Pounds for the last 4 weeks--make sure the users have entered a
      * record for each of the last 4 weeks.
      *
     C     $carcass      begsr
      *
     C                   z-add     svcedt        wkwedt
      *
     C                   do        4
     C     wkwedt        chain     tfp050                             92        Do loop
     C                   if        *in92 = *on and                              If no rec
     C                             error < maxmsg
     C                   add       1             error
     C                   movel     'HS08118'     mgid(e)
     C                   clear                   mgw
     C                   movel     wkwedt        wkalphdt
     C                   movea     wkalphdt      mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif                                                  If no rec
      *
     C                   move      wkwedt        wkisodate
     C                   subdur    7:*days       wkisodate
     C                   move      wkisodate     wkwedt
     C                   enddo                                                  Do loop
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Inventory Cost record
      *----------------------------------------------------------------
      * You must have an Inventory Cost record in effect for this week.
      *
     C     $cost         begsr
      *
      * Retrieve 'first' Inventory Costs record
      *
     C     svcedt        setgt     tfl053a
     C                   readp     tfl053a                                92
     C                   if        *in92 = *on
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08125'     mgid(e)
     C                   endif
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * F4 prompt on screen 1
      *----------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      * Preliminary/Final flag
      *
     C                   select
     C                   when      fld = 'D1PFCD'
     C                   call      'TF500'
     C                   parm      *blank        xxpfcd
     C                   parm      *blank        xxpfds
     C                   seton                                        51
     C                   if        xxpfcd <> *blank
     C                   movel     xxpfcd        d1pfcd
     C                   movel     xxpfds        d1pfds
     C                   endif
     C                   other
      *
      * F4 not valid for this field, so issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09011'
     C                   endif
      *
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Process user's request
      *---------------------------------------------------------------
      *
      * This subroutine is only executed if the user submits.
      *
     C     $proc1        begsr
      *
      * Bring in the Function Control file that keeps multiple users (or one spacey user)
      * from making multiple submissions of this job. Update the record to indicate
      * that there has been submission.
      *
     C     'INVENTORY '  chain     tfp099                             92
     C                   if        *in92 = *off                                 If ok
     C                   move      yes           fnsbfl
     C                   move      d1pfcd        fnpfcd
      *
      * Set up the lda with the 'current' fields from the Control record.
      *
     C                   move      fnpfcd        ldpfcd
      *
     C                   z-add     fncyr         ldcyr
     C                   z-add     fncwk         ldcwk
      *
     C                   z-add     fncbdt        ldcbdt
      *
     C                   z-add     fncedt        ldcedt
     C                   z-add     fncemdy       ldcemdy
      *
     C                   out       lda
     C                   update    fnrec
     C                   endif                                                  If ok
      *
      * Move the 80-character compile time array 'CMD' to an
      * 80-character field for passing as a parm with QCMDEXC.
      *
     C                   movea     cmd           cmdsbm
     C                   call      'QCMDEXC'
     C                   parm                    cmdsbm
     C                   parm                    length
      *
      * Issue the standard request submission message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09003'
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * End job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *   none
      *
      * Key lists
      *   none
      *
      * Retrieve/initialize "printer" fields in the LDA
      *
     C                   call      'RO891CL'
     C                   in        lda
      *
      * Initialize LDA fields
     C                   z-add     0             ldcyr
     C                   z-add     0             ldcwk
     C                   z-add     0             ldcbdt
     C                   z-add     0             ldcedt
     C                   z-add     0             ldcemdy
     C                   out       lda
      *
      * Set up screen values using the Control Record.
      *
     C     'INVENTORY '  chain(n)  tfp099                             92
     C                   if        *in92 = *off                                 If ok
     C                   z-add     fncyr         d1yr
     C                   z-add     fncwk         d1wk
     C                   z-add     fncbmdy       d1wbmdy
     C                   z-add     fncemdy       d1wemdy
     C                   z-add     fncedt        svcedt
     C                   endif                                                  If ok
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
      *****************************************************************
      * COMPILE TIME ARRAY 'CMD' USED IN QCMDEXC
      *****************************************************************
** CMD table 'CMD' submits listing when F8 selected
SBMJOB CMD(CALL PGM(TF451CL)) JOB(WKINVCLS) JOBQ(*JOBD)
