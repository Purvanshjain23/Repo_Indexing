     h option(*SRCSTMT:*NODEBUGIO)

      * ENVIRONMENT: Pork Division
      * SYSTEM:      Resource Optimization
      * PROGRAM:     RO214-Calculate Meat Cost--Component Items
      * PROGRAMMER:  LeAnne Ramsey
      * CREATED:     12/19/06
      *
      * FUNCTION: Calculate Component Item Meat Cost.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 04/10/07  LeAnne Ramsey
      *           Switched from "sales" to "produced" values. But, we will continue
      *           to populate 3 "sales" fields: Sales Pounds, Net Product Revenue Amount and
      *           Net Product Revenue Price/Lb just to give us a leg up if the users want
      *           to switch back to "sales" values.
      *
      * 04/19/07  LeAnne Ramsey
      *           Added parms on the call to generic program RO800.
      *           Prior to this change, the Pounds and Amounts were "aggregate" values.
      *           For the new TF Fees & Payments Byproduct Mix requirements, the generic
      *           program now retrieves Seaboard, Triumph and Aggregate values.
      *
      * 07/10/07  Alice Brownfield
      *           Changed the calculation of the Credit Item Value for the PICNIC Primal
      *           exceptions to subtract Packaging.
      *
      * 10/04/07  LeAnne Ramsey
      *           Recompile only. New field 'Produced Start Weight' added to
      *           Credit Item Group Meat Cost file.
      *
      * 10/23/07  Alice Brownfield
      *           Changed the special calculations for 25300 and 26010 to calculate the
      *           base price for 25300 and update the Component Item Meat Cost file (ROP102)
      *           with the price instead of setting it up as an OVR in ROP012.
      *
      * 11/14/07  Alice Brownfield
      *           added another condition to check when looking for the BASE price of a
      *           component item ($cibspr).  If a component item is a BS item, we'll also
      *           check to see if it is a Credit Item.  If so, we'll get the base price from the
      *           Credit Item file (rop101).  This change is in $basepr.
      *
      * 11/28/07  Alice Brownfield
      *           Changes when we combined the Credit Item Meat Costs with the
      *           Byproduct MIX processing/files.
      *
      * 02/20/08  Alice Brownfield
      *           Changes to handle Base items that are Credit Items.
      *
      * 03/18/08  LeAnne Ramsey
      *           Recompile only. Synon file POAXCPP was recompiled.
      *
      * 06/06/08  LeAnne Ramsey
      *           New fields (Ingredient and Other Cost) added to multiple files.
      *
      * 11/20/08  LeAnne Ramsey
      *           As a prep for synchronizing the TFS and Meat Cost LDAs, we
      *           removed the unused LDA fields.
      *
      * 11/21/08  LeAnne Ramsey
      *           As part of synchronizing the LDAs between the TFS Margin Adjustment Close
      *           and the Meat Costing, we changed the LDA positions.
      *
      * 02/26/09  LeAnne Ramsey
      *           Removed special Picnic logic.
      *           Changed the PICNIC Base to include ALL costs in its calculation for
      *           the Base Price (same as HAM base).
      *
      * 04/02/09  LeAnne Ramsey
      *           Recompile only. Field 'Producing Company' added to Byproduct Detail.
      *
      * 02/17/10  LeAnne Ramsey
      *           Recompile only. Two new fields were added to the Resource Optimization Header:
      *                Cap&Blade Allocation % for Special Trim
      *                Cap&Blade Allocation % for Regular Trim
      *
      * 01/20/11  LeAnne Ramsey (E1292)
      *           Recompile only.
      *           When they installed th PA changes last summer, Damon G. had to start entering
      *           WPs as Consumed Items in the BOM. The up-front Meat Costing edits are
      *           kicking out the Items that consume WPs. So, Damon G. will now start
      *           entering in the BOM the true RM/Base Items that an Item consumes. He will set
      *           these up with a BOM Meat Cost Consumed% <> 0. (He will set the consumed WPs
      *           up with a BOM Meat Cost Consumed% of zero.)
      *
      *           As part of this change, BOM logical file PDIORELE was changed to select
      *           only those records where the BOM Meat Cost Consumed% is not zero. (Note:
      *           It already selects only Active/Consumed records. Only 3 programs use this
      *           LF: RO213, RO214, RO232.)
      *
      * 03/08/12  LeAnne Ramsey (E1984)
      *           Recompile only.
      *           Added 6 new Skirt Meat Allocation Flag fields to ROP100.
      *
      * 08/30/12  LeAnne Ramsey (E2243)
      *           Per Damon G. we must change the Base Price calc of the consumed component
      *           items for the NV Items that receive pounds/dollars from Skirt Meat Items!
      *           See $skirt, $notskirt. Also, I added files TFL019D and TFL019E for
      *           the Exception processing required.
      *           Note: I also had to do special Margin calcs for this one (see TF216).
      *
      ********************************************************************************************
      * FILE SPECIFICATIONS
      ********************************************************************************************
      *
     fombyrel1  if   e           k disk
      *   Item default
      *
      *
     fpdiorel3  if   e           k disk
      *  Item bill of material
      *  (LF selects Active/Consumed Items)
      *
      *
     fpdiorele  if   e           k disk    prefix(p2)
      *  Item bill of material
      *  (LF selects Active/Consumed Items where BOM Meat Cost Consumed% <> 0)
      *
      *
     fpdiorel4  if   e           k disk    prefix(p1)
      *  Item bill of material
      *  (LF selects Active/Produced Items)
      *
      *
     Fpoaxcpl1  if   e           k disk
      *  Item standard cost
      *
      *
     frop107    if   e           k disk
      *  BOM Yield Overrides
      *
      *
     frol012a   if   e           k disk
      *  Item control data
      *
      *
     frop100    if   e           k disk
      *  Resource optimization header
      *
      *
     frol101a   if   e           k disk
      *  ByProduct Values Summary
      *
      *
     frol122a   if   e           k disk
      *  ByProduct Detail
      *
      *
     frop102    o    e           k disk
      *  Component item meat cost
      *
      *
     frol102b   uf   e           k disk    rename(cmrec:cmrecb) prefix(p3)
      *  Component item meat cost
      *  (LF selects Item Type Code of BS)
      *
      *
     frol102c   if   e           k disk    rename(cmrec:cmrecc) prefix(p4)
      *  Component item meat cost
      *  (LF selects Item Type Code of BS and Prod Depart = CUT)
      *
      *
     frol102e   uf   e           k disk    rename(cmrec:cmrece) prefix(p5)
      *  Component item meat cost
      *
      *
     frol300a   if   e           k disk
      *  Workfile: Item processing sequence
      *
      *
     ftfl019d   if   e           k disk
      *  Product exceptions
      *
      *
     ftfl019e   if   e           k disk    rename(perec:perece) prefix(p6)
      *  Product exceptions
      *
      /eject
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Control/save fields
      *
     d procfl          s              1
     d srlnfl          s              1
      *
     d svsgcd          s                   like(gmsgcd)
     d svpco           s                   like(cmcipco)
     d svlco           s                   like(cmcilco)
     d svico           s                   like(cmciico)
     d svoco           s                   like(cmcioco)
     d svsypc          s                   like(cmsypc)
     d svcrvl          s                   like(cmcicrvl)
      *
     d svsritcd        s                   like(icsritcd)
     d svdobspr        s                   like(icdobspr)
     d svdfpr          s                   like(icdfpr)
     d svdocd          s                   like(icdocd)
     d svitbyvmst      s                   like(byvmst)
     d svcibyvmst      s                   like(byvmst)
      *
     D svistycd        s                   like(peistycd) inz(720)
     D svisgrcd        s                   like(peisgrcd) inz(712)
     D svisclcd        s                   like(peisclcd) inz(718)
      *
      *
      * Workfields
      *
     d wkitcd          s                   like(w1itcd)
     D wkcgcd          s                   like(cmcgcd)
     d wknpram         s             15  6
     d wknprpr         s                   like(cmnpram)
     d wksllb          s                   like(cmsllb)
      *
     d wkpgm232        s             10    inz('RO232     ')
     d wkpr            s                   like(cmpupr)
     d wkpco           s                   like(cmcipco)
     d wklco           s                   like(cmcilco)
     d wkexpulb        s                   like(pesexpulb)
     d wkexpuam        s                   like(pesexpuam)
     d wkam            s                   like(pesexpuam)
     d wknetam         s                   like(pesexpuam)
      *
     d wkpulb          s                   like(cmpulb)
     d wkpuam          s                   like(cmpuam)
     d wkpupr          s                   like(cmpupr)
      *
     d wkyldrt         s              9  6
     d wkcrvl          s                   like(cmcicrvl)
     d wkbomty         s                   like(cmbomty)
     d wkciitcd        s                   like(cmciitcd)
     d wksypc          s                   like(cmsypc)
     d wkpumppc        s                   like(cmpumppc)
      *
      *
      * Parms
      *
     D xxspuam         s             15  6
     D xxspulb         s             15  4
      *
     D xxtpuam         s             15  6
     D xxtpulb         s             15  4
      *
     D xxaslam         s             15  6
     D xxasllb         s             15  4
     D xxapuam         s             15  6
     D xxapulb         s             15  4
      *
     D xxwedt          s              8  0
     D xxitcd          s              7  0
     D xxfzfl          s              1
     d xxmurt          s              9  6
     d xxmupc          s              7  4
     D xxcredit        s              1    inz(no)
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Local data area
      *---------------------------------------------------------------
      *
     Dlda             uds                  dtaara(*lda)
      *
     D  ldwedt                29     36  0
     D  ldwesyn               37     43  0
      *
     D  ldfzfl                81     81
     D  ldcono                82     84  0
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * Mainline
      ****************************************************************
      *
      * Process all records in Workfile: Item Processing Sequence
      * The logical is keyed so that you will process the Base Items first
      * followed by the Exception Items and the Produced Items last.
      *
     C                   dou       *in90 = *on                                  Main do
     C                   read      rol300a                                90
     C                   if        *in90 = *off                                 If not EOF
      *
      * Determine if you should continue processing this item.
      * The Item has 1) produced values for the week or
      *              2) an Item Control record for the week
      *
     C                   exsr      $procfl
     C                   if        procfl = yes                                 If process
      *
      * Check if this Item involves "Sirloin". If so, save values for later
      * calcs.
     C                   exsr      $srln
      *
      * Perform Item logic:
      *   1) consumed
      *   2) produced
     C                   exsr      $consumed
     c                   exsr      $produced
      *
      * Conditional "FAT" logic
      *
     C                   if        w1seq = 'BS' and w1plcd = 'BILOIN'
     C                   exsr      $fat
     C                   endif
      *
     C                   endif                                                  If process
     C                   endif                                                  If not EOF
     C                   enddo                                                  Main do
      *
     C                   seton                                        lr
      /eject
      *---------------------------------------------------------------
      * Determine if you should process this Item
      *---------------------------------------------------------------
      *
     C     $procfl       begsr
      *
     C                   move      yes           procfl
      *
      * Call generic program to retrieve/accumulate Values for Item/Week.
      *
     C                   call      'RO800'
     C                   parm      xxcredit      xxcredit
     C                   parm      ldwedt        xxwedt
     C                   parm      w1itcd        xxitcd
     C                   parm      ldfzfl        xxfzfl
     C                   parm      0             xxmurt
     C                   parm      0             xxmupc
     C                   parm      0             xxspulb
     C                   parm      0             xxspuam
     C                   parm      0             xxtpulb
     C                   parm      0             xxtpuam
     C     wksllb        parm      0             xxasllb
     C     wknpram       parm      0             xxaslam
     C     wkpulb        parm      0             xxapulb
     C     wkpuam        parm      0             xxapuam
      *
      * Calculate Net Product Revenue Price per Pound for this Item
      *
     C                   if        wksllb <> 0
     C                   eval(h)   wknprpr = (wknpram / wksllb)
     C                   else
     C                   z-add     0             wknprpr
     C                   endif
      *
      * Calculate Produced Price per Pound for this Item
      *
     C                   if        wkpulb <> 0
     C                   eval(h)   wkpupr = (wkpuam / wkpulb)
     C                   else
     C                   z-add     0             wkpupr
     C                   endif
      *
      * Retrieve Item Control Data (override data) using a key of:
      *    1) Week-ending date
      *    2) Company
      *    3) Item code
     C                   move      *blank        svdocd
     C                   z-add     0             svsritcd
     C                   z-add     0             svdobspr
     C                   z-add     0             svdfpr
      *
     C     key07         chain     rol012a                            92
     C                   if        *in92 = *off                                 If hit
     C                   move      icdocd        svdocd
     C                   z-add     icsritcd      svsritcd
     C                   z-add     icdobspr      svdobspr
     C                   z-add     icdfpr        svdfpr
      *
     C                   if        wkpuam = 0 and
     C                             wkpulb = 0 and
     C                             icsritcd = 0 and
     C                             icdobspr = 0
     C                   move      no            procfl
     C                   endif
     C                   endif                                                  If hit
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------------------------------
      * Does this Item involve "Sirloin"
      *---------------------------------------------------------------------------------------
      *
      * Basically, you are trying to populate/save a field for later "Sirloin" processing that
      * holds either "BNIN" or "BNLS" as a Subgroup Code value.
      *
     C     $srln         begsr
      *
     C                   move      no            srlnfl
      *
      * Read records for this Company/Item from the Item Bill of Material--
      * (Produced Items only) using a key of:
      *    1) Company
      *    2) Item code
      * Process records where:
      *    1) Sales Yield is not zero
      * Until you get an appropriate Meat Cost Subgroup code
      *
     C                   move      *blank        svsgcd
     C     key01         setll     pdiorel4
      *
     C                   dou       *in91 = *on or svsgcd <> *blank              Do components
     C     key01         reade     pdiorel4                               91
     C                   if        *in91 = *off and                             If not EOF
     C                             p1iobopr <> 0
      *
      * Now, using the Component Item and a hardcoded Meat Cost Group
      * value of 'SRLN', see if you have Byproduct detail record which
      * gives you a "subgroup".
      *
     C                   move      'SRLN'        wkcgcd
     C     key08         chain     rol122a                            92
     C                   if        *in92 = *off                                 If hit
     C                   move      ydsgcd        svsgcd
     C                   move      yes           srlnfl
     C                   endif                                                  If hit
      *
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do components
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------------------------------
      * Consumed Item logic
      *---------------------------------------------------------------------------------------
      *
     C     $consumed     begsr
      *
      * Retrieve Cost and Sales Yield Percent one-time for the Item.
      *
     C                   exsr      $itcd
      *
      * Read all Active/Consumed Items in the BOM file for this:
      *   1) company
      *   2) item code
      * Write a Meat Cost Record for each record where the "meat cost
      * component allotment %" is not zero.
      *
     C     key01         setll     pdiorel3
      *
     C                   dou       *in91 = *on                                  Do consumed
     C     key01         reade     pdiorel3                               91
     C                   if        *in91 = *off and ioixqt <> 0                 If not EOF
      *
     C                   clear                   cmrec
      *
     C                   z-add     ldcono        cmcono
     C                   z-add     ldwedt        cmwedt
     C                   z-add     w1itcd        cmitcd
     C                   move      w1ittycd      cmittycd
     C                   move      w1pgcd        cmpgcd
     C                   move      w1pdcd        cmpdcd
     C                   move      w1plcd        cmplcd
      *
     C                   z-add     ioixqt        cmcspc
     C                   move      iov2st        cmbomty
     C                   z-add     ioc9nb        cmciitcd
      *
     C                   z-add     svsypc        cmsypc
      *
      * For this Component Item:
      *    1) retrieve basic item info
      *    2) calculate a Base Price
      *
     C                   exsr      $ciitcd
     C                   exsr      $cibspr
      *
      * Write Component Item Meat Cost record and then clear fields in the record
      * that are not constant.
      *
     C                   write     cmrec
      *
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do consumed
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------------------------------
      * Retrieve Item's Sales Yield and Packaging Cost  --  CONSUMED
      *---------------------------------------------------------------------------------------
      *
     C     $itcd         begsr
      *
      * Retrieve Item Default info and save the Credit Item Flag
      *
     C                   move      *blanks       svitbyvmst
     C     w1itcd        chain     ombyrel1                           92
     C                   if        *in92 = *off
     C                   eval      svitbyvmst = byvmst
     C                   endif
      *
      * Retrieve Item's Sales Yield from the Item Bill of Material--
      * (Produced Items only) using a key of:
      *   1) company
      *   2) item code
      *   3) item code
      *
     C     key05         chain     pdiorel4                           92
     C                   if        *in92 = *off
     C                   z-add     p1iobopr      svsypc
     C                   else
     C                   z-add     0             svsypc
     C                   endif
      *
      * Retrieve Item Packaging Cost from the Item Standard Cost file using:
      *  1) company
      *  2) item code
      *  3) synon week-ending date
      *
     C                   z-add     w1itcd        wkitcd
      *
     C     key10         chain     poaxcpl1                           92
     C                   if        *in92 = *off
     C                   eval(h)   svpco = (axedpr/100)
     C                   eval(h)   svlco = (axeepr/100)
     C                   eval(h)   svico = (axefpr/100)
     C                   eval(h)   svoco = (axegpr/100)
     C                   else
     C                   z-add     0             svpco
     C                   z-add     0             svlco
     C                   z-add     0             svico
     C                   z-add     0             svoco
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------------------------------
      * Retrieve Component Item Values (CONSUMED)
      *---------------------------------------------------------------------------------------
      *
     C     $ciitcd       begsr
      *
      * Retrieve Item Default info for this Component Item - save the Credit Item Flag
      *
     C                   move      *blanks       svcibyvmst
     C     ioc9nb        chain     ombyrel1                           92
     C                   if        *in92 = *off                                 If default hit
     C                   eval      cmciittycd = byn0cd
     C                   eval      svcibyvmst = byvmst
      *
      * If this Component Item is a Raw Material:
      *   Change Item's "Type" to 'BS'
      * else
      *   Do the Component/Component thing
      *
     C                   if        byn0cd = 'RM'                                If raw
     C                   eval      cmittycd = 'BS'
     c                   else
      * Key:
      * 1) company
      * 2) component item
      * (LF selects Active/Consumed Items where BOM Meat Cost Consumed% <> 0)
      *
     C     key03         chain     pdiorele                           92
     C                   if        *in92 = *off
     C     p2ioc9nb      chain     ombyrel1                           92
     C                   if        *in92 = *off and byn0cd = 'RM'
     C                   eval      cmciittycd = 'BS'
     C                   endif
     C                   endif
      *
     C                   endif                                                  If raw
     C                   endif                                                  If default hit
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------------------------------
      * Calculate Component Item Base Price    (CONSUMED)
      *---------------------------------------------------------------------------------------
      *
     C     $cibspr       begsr
      *
      * Item has an Override Base Price in the Item Control Data file
      *
     C                   select
     C                   when      w1itcd = cmitcd and
     C                             svdocd = 'OVR' and svdobspr <> 0
     C                   z-add     svdobspr      cmcibspr
      *
      * Item has a Source Item Code (ie: relational base-price).
      * Retrieve the "BS" record from the Component Item Meat Cost file using key:
      *   1) company
      *   2) week-ending date
      *   3) source item code  (for Item Code value)
      * Then: add Difference Amount from related item's base price
      *
     C                   when      svsritcd <> 0
     C     key06         chain     rol102b                            92
     C                   if        *in92 = *off
     C                   eval      cmcibspr = p3cmcibspr + svdfpr
     C                   endif
      *
      * Item is a Base Exception Item
      *
     C                   when      w1seq = 'EX'
     C                   exsr      $excpr
      *
      * Component Item is a Base Item
      *   (use Base Price from Base Item's Component Item Meat Cost record)
      *
     C                   when      cmciittycd = 'BS'
     C                   exsr      $basepr
      *
      * Produced Pounds are not zero
      *   (calculate Base Price from Produced Price/LB
      *
     C                   when      wkpulb <> 0
     C                   z-add     svpco         cmcipco
     C                   z-add     svlco         cmcilco
     C                   z-add     svico         cmciico
     C                   z-add     svoco         cmcioco
      *
      *           New logic added Sept 2012 for 'Split To' Items (Exceptions) from Skirt Meat.
      *           We need to determine if we had any NV Exception records for this Item that
      *           received lbs/$$ from any Skirt Meat Items (aka: via program RO232).
      *           Key fields: hardcoded value 'RO232'
      *                       WeekEnding date (LDWEDT)
      *                       Item code (W1ITCD)
      *
     c                   z-add     0             wkexpulb
     c                   z-add     0             wkexpuam
     C     key13         setll     tfl019d
     C                   dou       *in92 = *on                                  Do RO232 exceptions
     C     key13         reade     tfl019d                                92
     C                   if        *in92 = *off and petfcgcd = 'NV'
     C                   add       pesexpulb     wkexpulb
     C                   add       petexpulb     wkexpulb
     C                   add       pesexpuam     wkexpuam
     C                   add       petexpuam     wkexpuam
     C                   endif
     C                   enddo                                                  Do RO232 exceptions
      *
     C                   if        wkexpulb <> 0 or wkexpuam <> 0               If NV values
     C                   exsr      $skirt
     C                   else
     C                   exsr      $notskirt
     C                   endif                                                  If NV values
      *
      * Default Base Price is not zero
      *   (use Default Base Price from Item's Item Control record)
      *
     C                   when      svdobspr <> 0
     C                   z-add     svdobspr      cmcibspr
     c                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Calculate Base Price  (CONSUMED)
      *---------------------------------------------------------------
      *
     C     $basepr       begsr
      *
      * If this component item is NOT a Credit Item
      *
      * Read each Component Item Meat Cost record using a key of:
      * (NOTE: LF selects only "BS" records).
      *    1) company
      *    2) week-ending date
      *    3) component item (for Item Code value)
      *
     C                   if        svcibyvmst <> 'Y'                            If not Credit Item
     C     key02         setll     rol102b
      *
     C                   dou       *in93 = *on
     C     key02         reade     rol102b                                93
     C                   if        *in93 = *off
     C                   eval(h)   cmcibspr += p3cmcibspr * (p3cmcspc / 100)
     C                   endif
     C                   enddo
     C                   else
      *
      * When this component item IS a Credit Item
      *  get the base price from the Byproduct Detail record for the component item
      *    2) week-ending date
      *    3) component item (for Item Code value)
      *
     C     key11         chain     rol122a                            92
     C                   if        *in92 = *off
     C                   eval      cmcibspr = ydnpupr
     C                   endif
      *
     C                   endif                                                  If not Credit Item
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------------------------------
      * Calculate Base Price for a Consumed Item that had something to do with Skirt Meat
      *----------------------------------------------------------------------------------------
      *
     C     $skirt        begsr
      *
     C                   z-add     0             wknetam
      *
      *-------------------------------------------------------------------------------------
      * PRODUCED logic: Logic for the pounds of the Item produced (ie: from the ISC files)
      *-------------------------------------------------------------------------------------
      * First, subtract/back out the Exception Pounds/Dollars from the 'produced' workfields
      * for this Item (W1ITCD) and calc a 'produced per lb' value.
      *
     C                   z-add     0             wkpr
     C                   if        (wkpulb - wkexpulb) <> 0
     C                   eval(h)   wkpr = (wkpuam - wkexpuam) /
     C                                    (wkpulb - wkexpulb)
     C                   endif
      *
      * Calc the 'net dollars' as: produced lbs * net price (aka: produced - labor - packaging)
      * This is the Labor and Packaging for W1ITCD...the Item that received Skirt Meat stuff.
      * Accum the Net Dollars....we will be adding the Net Dollars from Exceptions to this.
      *
     C                   eval(h)   wkam = (wkpulb - wkexpulb) *
     C                                    (wkpr - svlco - svpco)
     C                   add       wkam          wknetam
      *
      *
      *-------------------------------------------------------------------------------------
      * EXCEPTION logic: Process each record in TFP019 for this Item (W1ITCD)
      *-------------------------------------------------------------------------------------
      *
      * Note: A single Item (W1ITCD) can get pounds/$$ from multiple Skirt Meat Items.
      *       So, we need a Do Loop here.
      *
      * Key fields: hardcoded value 'RO232'
      *             WeekEnding date (LDWEDT)
      *             Item code (W1ITCD)
      *
     C     key13         setll     tfl019d
     C                   dou       *in94 = *on                                  Do exceptions
     C     key13         reade     tfl019d                                94
     C                   if        *in94 = *off                                 If not EOF
      *
      * Calc a 'per lb' value for the exception record
      *
     C                   z-add     0             wkpr
     C                   if        (pesexpulb + petexpulb) <> 0
     C                   eval(h)   wkpr = (pesexpuam + petexpuam) /
     C                                    (pesexpulb + petexpulb)
     C                   endif
      *
      * For the next part, you will need the Labor and Packaging cost for the
      * Skirt Meat Item that the pounds came FROM. But, we don't have the
      * 'split from' Item in the Exception record we are processing. SO, using
      * the Exception Number and the hardcoded Item Structure of 720/712/718,
      * retrieve the 'From' Exception record to get the Item. Then, get that
      * Skirt Meat Item's Standard Packaging and Labor Costs.
      *
     C     key14         chain     tfl019e                            92
     C                   if        *in92 = *off                                 If From item
     C     key15         chain     poaxcpl1                           92
     C                   if        *in92 = *off                                 If hit
     C                   eval(h)   wkpco = (axedpr/100)
     C                   eval(h)   wklco = (axeepr/100)
      *
      * Calc the 'net dollars' as:
      *    exception lbs * net price (aka: produced - labor - packaging)
      * Add the Dollars to the Total Net Amount
      *
     C                   eval(h)   wkam = (pesexpulb + petexpulb) *
     C                                    (wkpr - wklco - wkpco)
     C                   add       wkam          wknetam
     C                   endif                                                  If hit
     C                   endif                                                  If From item
     C                   endif                                                  If not EOF
      *
     C                   enddo                                                  Do exceptions
      *
      *-------------------------------------------------------------------------------------
      * Logic to calc the Base Price for the Consumed Item
      *-------------------------------------------------------------------------------------
      *
     C                   if        wkpulb <> 0
     C                   eval      cmcibspr =  wknetam / wkpulb
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------------------------------
      * Calculate Base Price when it is does not have anything to do with Skirt Meat
      *----------------------------------------------------------------------------------------
      * This is the original code prior to the September 2012 change for Skirt Meat.
      * I just moved it into its own subroutine.
      *
     C     $notskirt     begsr
      *
      * Include all costs when 1) Ham Base or
      *                        2) Picnic Base
      *                        3) Item is a BS Credit Item
      * otherwise, only include Packaging
      *
     C                   if        (w1pgcd = 'HAM' and w1pdcd = 'CUT') or
     C                             (w1pgcd = 'PICNIC' and w1pdcd = 'CUT') or
     C                             (w1seq = 'BS' and svitbyvmst = 'Y')
     C                   eval      cmcibspr = (wkpupr - cmcipco - cmcilco -
     C                                       cmciico - cmcioco) * (cmsypc / 100)
     C                   else
     C                   eval      cmcibspr =  (wkpupr - cmcipco)
     C                                         * (cmsypc / 100)
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------------------------------
      * Calculate Base Price when the Item is considered an "EX"ception in the
      * Processing Sequence file         (CONSUMED)
      *----------------------------------------------------------------------------------------
      *
     C     $excpr        begsr
      *
      * Retrieve the Component Item Meat Cost record for the Component Item.
      * (NOTE: LF selects only "BS" records from the "CUT" Department).
      * Use a key of:
      *    1) company
      *    2) week-ending date
      *    3) component item   (for Component Item Code value)
      *
     C     key02         chain     rol102c                            92
     C                   if        *in92 = *off
     C                   z-add     p4cmcibspr    cmcibspr
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Produced Item logic --  Part 1
      *---------------------------------------------------------------
      *
      * Determine where to get the BOM data:
      *   1. from the RO BOM Yield Override file (ROP107)
      *   2. from the OMS BOM file (PDIOREL4)
      *
     C     $produced     begsr
      *
     C                   z-add     0             svcrvl
      *
      * If there are any BOM Yield Override records, for this:
      *   1) Company
      *   2) Week-ending date
      *   3) Item
      * Process the BOM Yield Override file.
      *
     C     key12         chain     rop107                             92
     C                   if        *in92 = *off                                 If hit
      *
     C     key12         setll     rop107
     C                   dou       *in91 = *on                                  Do override
     C     key12         reade     rop107                                 91
     C                   if        *in91 = *off                                 If not EOF
     C                   z-add     bociitcd      wkciitcd
     C                   z-add     bosypc        wksypc
     C                   z-add     *zeros        wkpumppc
     C                   move      'P'           wkbomty
     C                   exsr      $prod2
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do override
     C                   else
      *
      * No records existed in the BOM Yield Override file. So,
      * read all Active/Produced records in the Bill of Material file for this:
      *   1) company
      *   2) item code
      *
     C     key01         setll     pdiorel4
      *
     C                   dou       *in91 = *on                                  Do BOM loop
     C     key01         reade     pdiorel4                               91
     C                   if        *in91 = *off                                 If not EOF
     C                   z-add     p1ioc9nb      wkciitcd
     C                   z-add     p1iobopr      wksypc
     C                   z-add     p1iobmy2      wkpumppc
     C                   move      p1iov2st      wkbomty
     C                   exsr      $prod2
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do BOM loop
      *
     C                   endif                                                  If hit
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Produced Item logic  -- Part 2
      *---------------------------------------------------------------
      *
     C     $prod2        begsr
      *
     C                   clear                   cmrec
      *
     C                   z-add     ldcono        cmcono
     C                   z-add     ldwedt        cmwedt
     C                   z-add     w1itcd        cmitcd
     C                   move      w1ittycd      cmittycd
     C                   move      w1pgcd        cmpgcd
     C                   move      w1pdcd        cmpdcd
     C                   move      w1plcd        cmplcd
      *
     C                   z-add     wkciitcd      cmciitcd
     C                   z-add     wksypc        cmsypc
     C                   z-add     wkpumppc      cmpumppc
     C                   move      wkbomty       cmbomty
      *
      * If the Item and Component Item are the same, populate fields with
      * values accumulated in the sburoutine that determined whether to "process"
      * this "item".
     C                   if        cmitcd = cmciitcd
     C                   z-add     wksllb        cmsllb
     C                   z-add     wknpram       cmnpram
     C                   z-add     wknprpr       cmnprpr
      *
     C                   z-add     wkpulb        cmpulb
     C                   z-add     wkpuam        cmpuam
     C                   z-add     wkpupr        cmpupr
     C                   endif
      *
      * Retrieve Item Default info
      *
     C     cmciitcd      chain     ombyrel1                           92
     C                   if        *in92 = *off
     C                   eval      cmciittycd = byn0cd
     C                   endif
      *
      * Use the Byproduct Detail file for this component Item
      * to get the Meat Cost Group/Subgroup:
      *
     C     key11         chain     rol122a                            92
     C                   if        *in92 = *off
     C                   move      ydcgcd        cmcgcd
     C                   move      ydsgcd        cmsgcd
     c                   endif
      *
      * If Yield % is NOT 0 = Calculate Credit Value and Packaging Cost
      *
     C                   if        cmsypc <> 0
     C                   exsr      $cost
     C                   endif
      *
      * Write Component Item Meat Cost record.
      *
     C                   write     cmrec
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Retrieve/calc Value/Cost
      *---------------------------------------------------------------
      *
     C     $cost         begsr
      *
     C                   z-add     0             wkcrvl
      *
      * If you have a Byproduct Value Summary record for this:
      *      1) company
      *      2) week-ending date
      *      3) Meat Cost group code
      *      4) Meat Cost subgroup code
      *
     C     key04         chain     rol101a                            92
     C                   if        *in92 = *off                                 If hit
      *
      * Calculate a Yield Percent
      *
     C                   exsr      $ypc
      *
      * Calculate Credit Value:
      *   For the Picnic Meat Cost Groups (not BNIN)
      *       calc: (Produced Price - Packaging Cost) * Yield rate
      *       (Note: 02/26/09 Damon Ginther cannot remember why we are only
      *              using Packaging; but, he wants to keep this logic.)
      *   Otherwise:
      *       calc: Group Price * Yield rate
      *
     C                   if        w1pgcd = 'PICNIC' and w1itcd <> 25300 and
     C                             gmcgcd <> 'BNIN' and gmcgcd <> 'FAT'
     C                   eval(h)   wkcrvl = (gmpupr - gmpco) * wkyldrt
     C                   else
     C                   eval(h)   wkcrvl = gmnpupr * wkyldrt
     C                   endif
      *
      * When: 1) Meat Cost Group Code is 'SRLN'
      *       2) Sub-Group Code is 'BNLS'
      * Add the BI Credit Value to the calculated Credit Value
      *
     C                   if        cmcgcd = 'SRLN' and cmsgcd = 'BNLS'
     C                   eval      wkcrvl = wkcrvl + ohbicrvl
     C                   endif
      *
     C                   endif                                                  If hit
      *
      * When: 1) Item is a "BS" (base) sequence
      *       2) Production Line is BILOIN (31325 & 31525)
      *       3) Meat Cost Group Code is 'FAT'
      * Save the Credit Value
      *
     C                   if        w1seq = 'BS' and w1plcd = 'BILOIN' and
     c                             cmcgcd = 'FAT'
     C                   z-add     wkcrvl        svcrvl
     C                   endif
      *
      * Populate Component Item Credit Value
      *
     C                   z-add     wkcrvl        cmcicrvl
      *
     c                   endsr
      /eject
      *---------------------------------------------------------------
      * Calculate a Yield Percent
      *---------------------------------------------------------------
      *
     C     $ypc          begsr
      *
      * Basic calc for Sales Yield %
      *
     C                   eval(h)   wkyldrt =
     C                              (cmsypc / 100) *
     C                              (1 + (cmpumppc / 100))
      *
      * Component Item is a BONELESS Sirloin Credit:
      * When: 1) Meat Cost Group Code is 'SRLN'
      *       2) Sub-Group Code is 'BNLS'
      * Multiply Yield Rate times Sirloin Boneless Component Allotment Percent
      *       from the RO Header
      *
     C                   select
     C                   when      cmcgcd = 'SRLN' and cmsgcd = 'BNLS'
     C                   eval(h)   wkyldrt = wkyldrt * (ohblcapc / 100)
      *
      * Item yields a SRLN BNLS Credit AND the Meat Cost Group is T72A or BNIN
      * When: 1) Sub-Group Code is 'BNLS'
      *       2) Primal Group Code is 'LOINC'
      *       3) Meat Cost Group Code is 'T72A' or 'BNIN'
      * Subtract Sirloin Trim Allocation % (from the RO Header) from the
      *       Yield Rate
      *
     C                   when      svsgcd = 'BNLS' and cmpgcd = 'LOINC'
     C                               and (cmcgcd = 'T72A' or cmcgcd = 'BNIN')
     C                   eval(h)   wkyldrt = wkyldrt - (ohaltrpc / 100)
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Special FAT logic
      *---------------------------------------------------------------
      *
      * If the Item has:
      *    1) a Processing Sequence of BS=Base and
      *    2) a Production Line of BILOIN (items 31325 and 31525)
      * Then:
      *    1) retrieve the Item's "BS" record (consumed)
      *    2) put the saved FAT Credit into the Component Item Credit Value field
      *    3) add the saved FAT Credit to the Component Item Base Price
      *    4) update the record with the new base price
      *
      * Use a key of:
      *    1) Company
      *    2) Week-ending date
      *    3) Item code
      *
     C     $fat          begsr
      *
     C     key12         chain     rol102b                            92
     C                   if        *in92 = *off
     C                   z-add     svcrvl        p3cmcicrvl
     C                   add       svcrvl        p3cmcibspr
     c                   update    cmrecb
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    ldcono
     C                   kfld                    w1itcd
      *
     C     key02         klist
     C                   kfld                    ldcono
     C                   kfld                    ldwedt
     C                   kfld                    cmciitcd
      *
     C     key03         klist
     C                   kfld                    ldcono
     C                   kfld                    cmciitcd
      *
     C     key04         klist
     C                   kfld                    ldcono
     C                   kfld                    ldwedt
     C                   kfld                    cmcgcd
     C                   kfld                    cmsgcd
      *
     C     key05         klist
     C                   kfld                    ldcono
     C                   kfld                    w1itcd
     C                   kfld                    w1itcd
      *
     C     key06         klist
     C                   kfld                    ldcono
     C                   kfld                    ldwedt
     C                   kfld                    svsritcd
      *
     C     key07         klist
     C                   kfld                    ldwedt
     C                   kfld                    ldcono
     C                   kfld                    w1itcd
      *
     C     key08         klist
     C                   kfld                    ldwedt
     C                   kfld                    p1ioc9nb
     C                   kfld                    wkcgcd
      *
     C     key09         klist
     C                   kfld                    ldcono
     C                   kfld                    ldwedt
      *
     C     key10         klist
     C                   kfld                    ldcono
     C                   kfld                    wkitcd
     C                   kfld                    ldwesyn
      *
     C     key11         klist
     C                   kfld                    ldwedt
     C                   kfld                    cmciitcd
      *
     C     key12         klist
     C                   kfld                    ldcono
     C                   kfld                    ldwedt
     C                   kfld                    w1itcd
      *
     C     key13         klist
     C                   kfld                    wkpgm232
     C                   kfld                    ldwedt
     C                   kfld                    w1itcd
      *
     C     key14         klist
     C                   kfld                    pepesn
     C                   kfld                    svistycd
     C                   kfld                    svisgrcd
     C                   kfld                    svisclcd
      *
     C     key15         klist
     C                   kfld                    ldcono
     C                   kfld                    p6peprcd
     C                   kfld                    ldwesyn
      *
      * Retrieve the RO Header using a key of:
      *   1) Company
      *   2) Week-ending date
      *
     C     key09         chain     rop100                             92
      *
     C                   endsr
      *
