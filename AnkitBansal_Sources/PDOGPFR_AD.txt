// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDOGPFR
// ?Date: 14.08.2025 Time: 12:04:12
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?7/10/2008 BLG E00174 Reverse sign on qty if credit memo
EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

// TOP.Description = Condition name of PAR.USR Summary/Detail or Tot
TOP_Description = RTVCND(PAR.USR_Summary_Detail_or_Tot);

// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// WRK.USR Print Detail = CND.no
WRK.USR_Print_Detail = 'N';

//?USER: Record selection processing

EXECUTE FUNCTION(RTV Print Realization  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1387825;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Shipped_Item_Code);
PARAMETER(WRK.Default_Commod_Mark_basis);
PARAMETER(PAR.Print_on_Realization_Rpt);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Check Sales Flags
CASE;

// IF PAR.USR Active Flag is Record Found
IF PAR.USR_Active_Flag = 'Y';

// AND PAR.Print on Realization Rpt is No
AND PAR.Print_on_Realization_Rpt = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?Check Sales Flags
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
PARAMETER(DB1.Order_Type_Sales);
PARAMETER(PAR.Billing_Activity_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Test for select by USR Sales Realiz. Flag          E00471
CASE;

// IF PAR.USR Sales Realiz. Flag is None
IF PAR.USR_Sales_Realiz_Flag = 'N';

CASE;

// IF PAR.Billing Activity Type is Credit or Debit Memo
IF PAR.Billing_Activity_Type = '2'/'3';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?** Test for select by USR Sales Realiz. Flag          E00471
// IF PAR.USR Sales Realiz. Flag is CM/DM Only
IF PAR.USR_Sales_Realiz_Flag = 'O';

CASE;

// IF PAR.Billing Activity Type is Not Credit/Not Debit Memo
IF PAR.Billing_Activity_Type = '1'/'5'/'4';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?PK0246 - Whse Type Selector         2/22/02
CASE;

// IF PAR.Warehouse Type is Fresh or Frozen
IF PAR.Warehouse_Type = 'FR'/'FZ';

EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
PARAMETER(DB1.Warehouse_Code);
PARAMETER(LCL.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Warehouse Type NE PAR.Warehouse Type
IF LCL.Warehouse_Type <> PAR.Warehouse_Type;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Process top of page

MOVE *ALL (To: TOP From: PAR);

// TOP.Salesperson Code = PAR.Sales Route Code
TOP_Salesperson_Code = PAR.Sales_Route_Code;

CASE;

// IF PAR.Company Number is not equal to zero
IF PAR.Company_Number <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(TOP_Company_Number);
PARAMETER(WRK.USR_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// TOP.USR Company Name = WRK.USR Company Name
TOP_USR_Company_Name = WRK.USR_Company_Name;

// IF *OTHERWISE
IF *OTHERWISE;

// TOP.USR Company Name = CON.*ALL
TOP_USR_Company_Name = *ALL;

ENDIF;

// TOP.Condition Desc. 1  USR = Condition name of TOP.Export Sales
TOP_Condition_Desc_1_USR = RTVCND(TOP_Export_Sales);

// TOP.USR Description - 15 = Condition name of PAR.USR Sales Realiz. Flag
TOP_USR_Description_15 = RTVCND(PAR.USR_Sales_Realiz_Flag);

// TOP.USR Flag 1 = PAR.USR Active Flag
TOP_USR_Flag_1 = PAR.USR_Active_Flag;

//?Retrieve A/R customer name if entered
CASE;

// IF PAR.A/R Customer Number is not equal to zero
IF PAR.AR_Customer_Number <> *ZERO;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(TOP_AR_Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Retrieve A/R customer name if entered
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.A/R Customer Name = CON.*All
TOP_AR_Customer_Name = *All;

ENDIF;

//?Retrieve ship to customer name if entered
CASE;

// IF PAR.Ship To Customer is not equal to zero
IF PAR.Ship_To_Customer <> *ZERO;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(TOP_Ship_To_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Retrieve ship to customer name if entered
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Ship To Name = CON.*All
TOP_Ship_To_Name = *All;

ENDIF;

//?Retrieve Salesperson name if entered
CASE;

// IF PAR.Sales Route Code is entered
IF PAR.Sales_Route_Code <> *BLANK;

EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
PARAMETER(TOP_Salesperson_Code);
PARAMETER(TOP_Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Retrieve Salesperson name if entered
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Salesperson Name = CON.*All
TOP_Salesperson_Name = *All;

ENDIF;

//?Select report
CASE;

// IF PAR.USR Detail or Summary is Report Selection 1
IF PAR.USR_Detail_or_Summary = '1';

// TOP.Condition Desc. 2  USR = CON.Customer
TOP_Condition_Desc_2_USR = 'Customer';

//?Select report
// IF PAR.USR Detail or Summary is Report Selection 2
IF PAR.USR_Detail_or_Summary = '2';

// TOP.Condition Desc. 2  USR = CON.Salesperson
TOP_Condition_Desc_2_USR = 'Salesperson';

ENDIF;

//?Retrieve State Description
CASE;

// IF PAR.Ship To State Code is *Blanks
IF PAR.Ship_To_State_Code = *BLANK;

// TOP.State Description = CON.*ALL
TOP_State_Description = *ALL;

//?Retrieve State Description
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV State Description  RT) TYPE(RTVOBJ) FILE(CAACREP)          AC1227485;
PARAMETER(PAR.Ship_To_State_Code);
PARAMETER(TOP_State_Description);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Retrieve warehouse type if entered
CASE;

// IF PAR.Warehouse Type NE WRK.BLANK
IF PAR.Warehouse_Type <> WRK.BLANK;

// TOP.Condition Desc. 3  USR = Condition name of TOP.Warehouse Type
TOP_Condition_Desc_3_USR = RTVCND(TOP_Warehouse_Type);

//?Retrieve warehouse type if entered
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Condition Desc. 3  USR = CON.*All
TOP_Condition_Desc_3_USR = *All;

ENDIF;

//?Retrieve whse description if entered
CASE;

// IF PAR.Warehouse Code NE WRK.BLANK
IF PAR.Warehouse_Code <> WRK.BLANK;

EXECUTE FUNCTION(RTV Warehouse          RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1100960;
PARAMETER(TOP_Warehouse_Code);
PARAMETER(TOP_Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


//?Retrieve whse description if entered
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Warehouse Description = CON.*ALL
TOP_Warehouse_Description = *ALL;

ENDIF;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

CASE;

IF NEW Sales_Route_Code;
// CUR.TEXT 12A USR = CON.Salesperson:
CUR.TEXT_12A_USR = 'Salesperson:';

EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
PARAMETER(CUR.Sales_Route_Code);
PARAMETER(CUR.Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.USR Print Detail = CND.yes
WRK.USR_Print_Detail = 'Y';

// Print Sales Route Code header format
PRINT Sales Route Code header format;

ENDIF;

CASE;

IF NEW Shipped_Item_Code;
CASE;

// IF WRK.USR Print Detail is no
IF WRK.USR_Print_Detail = 'N';

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

// Print Shipped Item Code header format
PRINT Shipped Item Code header format;

ENDIF;

// SUPPRESSED PRINT Accounting Company Number header format

//?USER: On print of detail format

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
PARAMETER(DB1.Order_Type_Sales);
PARAMETER(PAR.Billing_Activity_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Item Info for Rpts RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1441538;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Shipped_Item_Code);
PARAMETER(WRK.Description_Line_One);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(PAR.UOM_Pricing);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.Commodity_Market_Code);
PARAMETER(WRK.Market_Overage);
PARAMETER(PAR.Standard_Overage_Underage);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(PAR.Item_Pricing_Operation);
PARAMETER(PAR.Item_Pricing_Constant);
PARAMETER(PAR.Print_on_Realization_Rpt);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?FOB amount and weight
CASE;

// IF PAR.Billing Activity Type is Invoice
IF PAR.Billing_Activity_Type = '1';

CASE;

// IF DB1.Affect Sales Doll Status is no
IF DB1.Affect_Sales_Doll_Status = 'N';

// CUR.FOB Gross Amount = CND.equal to zero
CUR.FOB_Gross_Amount = *ZERO;

// CUR.USR Billing Dtl Net Dol 2 = CON.*ZERO
CUR.USR_Billing_Dtl_Net_Dol_2 = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Billing Dtl Net Dol 2 = DB1.FOB Gross Amount
CUR.USR_Billing_Dtl_Net_Dol_2 = DB1.FOB_Gross_Amount;

ENDIF;

CASE;

// IF DB1.Affect Sales Pnds Status is no
IF DB1.Affect_Sales_Pnds_Status = 'N';

// CUR.USR Weight Accumulated = CON.*ZERO
CUR.USR_Weight_Accumulated = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Weight Accumulated = DB1.Weight Billed
CUR.USR_Weight_Accumulated = DB1.Weight_Billed;

ENDIF;

//?FOB amount and weight
// IF *OTHERWISE
IF *OTHERWISE;

//?** Add processing for CM/DM Only to Process by Flags  E00471
//?Credit or Debit Memo
CASE;

// IF PAR.USR Sales Realiz. Flag is Process by Flags
IF PAR.USR_Sales_Realiz_Flag = 'P';

// OR PAR.USR Sales Realiz. Flag is CM/DM Only
OR PAR.USR_Sales_Realiz_Flag = 'O';

CASE;

// IF DB1.Affect Sales Doll Status is no
IF DB1.Affect_Sales_Doll_Status = 'N';

// CUR.FOB Gross Amount = CND.equal to zero
CUR.FOB_Gross_Amount = *ZERO;

// CUR.USR Billing Dtl Net Dol 2 = CON.*ZERO
CUR.USR_Billing_Dtl_Net_Dol_2 = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Billing Dtl Net Dol 2 = DB1.FOB Gross Amount
CUR.USR_Billing_Dtl_Net_Dol_2 = DB1.FOB_Gross_Amount;

ENDIF;

CASE;

// IF DB1.Affect Sales Pnds Status is no
IF DB1.Affect_Sales_Pnds_Status = 'N';

// CUR.USR Weight Accumulated = CON.*ZERO
CUR.USR_Weight_Accumulated = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Weight Accumulated = DB1.Weight Billed
CUR.USR_Weight_Accumulated = DB1.Weight_Billed;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.USR Sales Realiz. Flag is All
IF PAR.USR_Sales_Realiz_Flag = 'A';

CASE;

// IF DB1.Affect Sales Doll Status is no
IF DB1.Affect_Sales_Doll_Status = 'N';

// AND DB1.Affect Sales Pnds Status is yes
AND DB1.Affect_Sales_Pnds_Status = 'Y';

// CUR.FOB Gross Amount = CND.equal to zero
CUR.FOB_Gross_Amount = *ZERO;

// CUR.USR Billing Dtl Net Dol 2 = CON.*ZERO
CUR.USR_Billing_Dtl_Net_Dol_2 = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Billing Dtl Net Dol 2 = DB1.FOB Gross Amount
CUR.USR_Billing_Dtl_Net_Dol_2 = DB1.FOB_Gross_Amount;

ENDIF;

CASE;

// IF DB1.Affect Sales Pnds Status is no
IF DB1.Affect_Sales_Pnds_Status = 'N';

// AND DB1.Affect Sales Doll Status is yes
AND DB1.Affect_Sales_Doll_Status = 'Y';

// CUR.USR Weight Accumulated = CON.*ZERO
CUR.USR_Weight_Accumulated = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Weight Accumulated = DB1.Weight Billed
CUR.USR_Weight_Accumulated = DB1.Weight_Billed;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?reverse sign if credit memo and positive
CASE;

// IF PAR.Billing Activity Type is Credit Memo
IF PAR.Billing_Activity_Type = '2';

// AND CUR.USR Weight Accumulated is Greater Than Zero
AND CUR.USR_Weight_Accumulated > *ZERO;

// CUR.USR Weight Accumulated = CON.*ZERO - CUR.USR Weight Accumulated
CUR.USR_Weight_Accumulated = *ZERO - CUR.USR_Weight_Accumulated;

ENDIF;

//?Market Code
CASE;

// IF PAR.Billing Activity Type is Invoice
IF PAR.Billing_Activity_Type = '1';

CASE;

// IF DB1.Affect Sales Doll Status is no
IF DB1.Affect_Sales_Doll_Status = 'N';

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

//?Compute market price
CASE;

// IF DB1.U/M - Base Price EQ PAR.U/M - Primary
IF DB1.U_M_Base_Price = PAR.UOM_Primary;

// OR DB1.U/M - Base Price EQ PAR.U/M - Second
OR DB1.U_M_Base_Price = PAR.UOM_Second;

// OR DB1.U/M - Base Price EQ PAR.U/M - Third
OR DB1.U_M_Base_Price = PAR.UOM_Third;

//?subtract 1 from actual shipped date for starting point
// WRK.Actual Shipped Date = DB1.Actual Shipped Date + CON.-1 *DAYS
WRK.Actual_Shipped_Date = DATEINCR(DB1.Actual_Shipped_Date '-1' 'DY' 1111111 'NONE' 'N'            +
1);

EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
PARAMETER(WRK.Commodity_Market_Code);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(WRK.Actual_Shipped_Date);
PARAMETER(WRK.Commodity_Market_Price);
PARAMETER(WRK.USR_Date_Priced);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Commodity Market Price = DB1.Commodity Market Price
 PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

 // PAR.USR Date Priced = DB1.Market Price Date
 PAR.USR_Date_Priced = DB1.Market_Price_Date;

 QUIT;

}


EXECUTE FUNCTION(CLC Convert Price      IF) TYPE(EXCINTFUN)                     AC1290254;
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(DB1.U_M_Base_Price);
PARAMETER(WRK.Price_based_on_U_M1_S);
PARAMETER(WRK.Price_based_on_U_M2_S);
PARAMETER(WRK.Price_based_on_U_M3_S);
PARAMETER(WRK.Commodity_Market_Price);
{
 //?Execute internal function

 //?Initialize parameter values
 // PAR.Price based on U/M1 S = CON.*ZERO
 PAR.Price_based_on_U_M1_S = *ZERO;

 // PAR.Price based on U/M2 S = CON.*ZERO
 PAR.Price_based_on_U_M2_S = *ZERO;

 // PAR.Price based on U/M3 S = CON.*ZERO
 PAR.Price_based_on_U_M3_S = *ZERO;

 //?Process based on Unit of Measure entered
 CASE;

 // IF PAR.U/M - Primary EQ PAR.U/M - Pricing
 IF PAR.UOM_Primary = PAR.UOM_Pricing;

 // PAR.Price based on U/M1 S = PAR.Unit Price
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price;

 //?Process second U/M if entered
 CASE;

 // IF PAR.U/M - Second is Entered
 IF PAR.UOM_Second <> *BLANK;

 //?Convert based on operation code
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M2 S = PAR.Unit Price / PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price / PAR.Conversion_Factor_1 'H';

 ENDIF;

 //?Convert based on operation code
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 // PAR.Price based on U/M2 S = PAR.Unit Price * PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price * PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 //?Process third U/M if entered
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M3 S = PAR.Price based on U/M2 S / PAR.Conversion Factor 2
 PAR.Price_based_on_U_M3_S = PAR.Price_based_on_U_M2_S / PAR.Conversion_Factor_2 'H';

 ENDIF;

 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.Price based on U/M3 S = PAR.Price based on U/M2 S * PAR.Conversion Factor 2
 PAR.Price_based_on_U_M3_S = PAR.Price_based_on_U_M2_S * PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Process based on Unit of Measure entered
 // IF PAR.U/M - Second EQ PAR.U/M - Pricing
 IF PAR.UOM_Second = PAR.UOM_Pricing;

 // PAR.Price based on U/M2 S = PAR.Unit Price
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 // PAR.Price based on U/M1 S = PAR.Unit Price * PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price * PAR.Conversion_Factor_1 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M1 S = PAR.Unit Price / PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price / PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 //?Process third U/M if entered
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M3 S = PAR.Unit Price / PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price / PAR.Conversion_Factor_2 'H';

 ENDIF;

 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.Price based on U/M3 S = PAR.Unit Price * PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price * PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Process based on Unit of Measure entered
 // IF PAR.U/M - Third EQ PAR.U/M - Pricing
 IF PAR.UOM_Third = PAR.UOM_Pricing;

 // PAR.Price based on U/M3 S = PAR.Unit Price
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 // PAR.Price based on U/M2 S = PAR.Unit Price * PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price * PAR.Conversion_Factor_2 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M2 S = PAR.Unit Price / PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price / PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 // PAR.Price based on U/M1 S = PAR.Price based on U/M2 S * PAR.Conversion Factor 1
 PAR.Price_based_on_U_M1_S = PAR.Price_based_on_U_M2_S * PAR.Conversion_Factor_1 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M1 S = PAR.Price based on U/M2 S / PAR.Conversion Factor 1
 PAR.Price_based_on_U_M1_S = PAR.Price_based_on_U_M2_S / PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Compute Market Price
CASE;

// IF PAR.Unit Weight EQ WRK.ZERO
IF PAR.Unit_Weight = WRK.ZERO;

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

//?Compute Market Price
// IF *OTHERWISE
IF *OTHERWISE;

// Synon (17,9) work field =       * Compute Market Prc/LB
PGM.*Synon_179_work_field = ( WRK.Price_based_on_U_M1_S / PAR.Unit_Weight 'H' )                    +
* CUR.USR_Weight_Accumulated 'H';

// CUR.USR Market Value Price = PGM.*Synon (17,9) work field
CUR.USR_Market_Value_Price = PGM.*Synon_179_work_field;

ENDIF;

//?Compute market price
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

ENDIF;

//?reverse sign if credit memo and positive
CASE;

// IF PAR.Billing Activity Type is Credit Memo
IF PAR.Billing_Activity_Type = '2';

// AND CUR.USR Market Value Price GT WRK.ZERO
AND CUR.USR_Market_Value_Price > WRK.ZERO;

// CUR.USR Market Value Price = CON.*ZERO - CUR.USR Market Value Price
CUR.USR_Market_Value_Price = *ZERO - CUR.USR_Market_Value_Price;

ENDIF;

ENDIF;

//?Market Code
// IF *OTHERWISE
IF *OTHERWISE;

//?Credit or Debit memo
CASE;

// IF PAR.USR Sales Realiz. Flag is Process by Flags
IF PAR.USR_Sales_Realiz_Flag = 'P';

CASE;

// IF DB1.Affect Sales Doll Status is no
IF DB1.Affect_Sales_Doll_Status = 'N';

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

//?Compute market price
CASE;

// IF DB1.U/M - Base Price EQ PAR.U/M - Primary
IF DB1.U_M_Base_Price = PAR.UOM_Primary;

// OR DB1.U/M - Base Price EQ PAR.U/M - Second
OR DB1.U_M_Base_Price = PAR.UOM_Second;

// OR DB1.U/M - Base Price EQ PAR.U/M - Third
OR DB1.U_M_Base_Price = PAR.UOM_Third;

//?subtract 1 from actual shipped date for starting point
// WRK.Actual Shipped Date = DB1.Actual Shipped Date + CON.-1 *DAYS
WRK.Actual_Shipped_Date = DATEINCR(DB1.Actual_Shipped_Date '-1' 'DY' 1111111 'NONE' 'N'            +
1);

EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
PARAMETER(WRK.Commodity_Market_Code);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(WRK.Actual_Shipped_Date);
PARAMETER(WRK.Commodity_Market_Price);
PARAMETER(WRK.USR_Date_Priced);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Commodity Market Price = DB1.Commodity Market Price
 PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

 // PAR.USR Date Priced = DB1.Market Price Date
 PAR.USR_Date_Priced = DB1.Market_Price_Date;

 QUIT;

}


EXECUTE FUNCTION(CLC Convert Price      IF) TYPE(EXCINTFUN)                     AC1290254;
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(DB1.U_M_Base_Price);
PARAMETER(WRK.Price_based_on_U_M1_S);
PARAMETER(WRK.Price_based_on_U_M2_S);
PARAMETER(WRK.Price_based_on_U_M3_S);
PARAMETER(WRK.Commodity_Market_Price);
{
 //?Execute internal function

 //?Initialize parameter values
 // PAR.Price based on U/M1 S = CON.*ZERO
 PAR.Price_based_on_U_M1_S = *ZERO;

 // PAR.Price based on U/M2 S = CON.*ZERO
 PAR.Price_based_on_U_M2_S = *ZERO;

 // PAR.Price based on U/M3 S = CON.*ZERO
 PAR.Price_based_on_U_M3_S = *ZERO;

 //?Process based on Unit of Measure entered
 CASE;

 // IF PAR.U/M - Primary EQ PAR.U/M - Pricing
 IF PAR.UOM_Primary = PAR.UOM_Pricing;

 // PAR.Price based on U/M1 S = PAR.Unit Price
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price;

 //?Process second U/M if entered
 CASE;

 // IF PAR.U/M - Second is Entered
 IF PAR.UOM_Second <> *BLANK;

 //?Convert based on operation code
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M2 S = PAR.Unit Price / PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price / PAR.Conversion_Factor_1 'H';

 ENDIF;

 //?Convert based on operation code
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 // PAR.Price based on U/M2 S = PAR.Unit Price * PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price * PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 //?Process third U/M if entered
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M3 S = PAR.Price based on U/M2 S / PAR.Conversion Factor 2
 PAR.Price_based_on_U_M3_S = PAR.Price_based_on_U_M2_S / PAR.Conversion_Factor_2 'H';

 ENDIF;

 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.Price based on U/M3 S = PAR.Price based on U/M2 S * PAR.Conversion Factor 2
 PAR.Price_based_on_U_M3_S = PAR.Price_based_on_U_M2_S * PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Process based on Unit of Measure entered
 // IF PAR.U/M - Second EQ PAR.U/M - Pricing
 IF PAR.UOM_Second = PAR.UOM_Pricing;

 // PAR.Price based on U/M2 S = PAR.Unit Price
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 // PAR.Price based on U/M1 S = PAR.Unit Price * PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price * PAR.Conversion_Factor_1 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M1 S = PAR.Unit Price / PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price / PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 //?Process third U/M if entered
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M3 S = PAR.Unit Price / PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price / PAR.Conversion_Factor_2 'H';

 ENDIF;

 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.Price based on U/M3 S = PAR.Unit Price * PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price * PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Process based on Unit of Measure entered
 // IF PAR.U/M - Third EQ PAR.U/M - Pricing
 IF PAR.UOM_Third = PAR.UOM_Pricing;

 // PAR.Price based on U/M3 S = PAR.Unit Price
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 // PAR.Price based on U/M2 S = PAR.Unit Price * PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price * PAR.Conversion_Factor_2 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M2 S = PAR.Unit Price / PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price / PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 // PAR.Price based on U/M1 S = PAR.Price based on U/M2 S * PAR.Conversion Factor 1
 PAR.Price_based_on_U_M1_S = PAR.Price_based_on_U_M2_S * PAR.Conversion_Factor_1 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M1 S = PAR.Price based on U/M2 S / PAR.Conversion Factor 1
 PAR.Price_based_on_U_M1_S = PAR.Price_based_on_U_M2_S / PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Compute Market Price
CASE;

// IF PAR.Unit Weight EQ WRK.ZERO
IF PAR.Unit_Weight = WRK.ZERO;

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

//?Compute Market Price
// IF *OTHERWISE
IF *OTHERWISE;

// Synon (17,9) work field =       * Compute Market Prc/LB
PGM.*Synon_179_work_field = ( WRK.Price_based_on_U_M1_S / PAR.Unit_Weight 'H' )                    +
* CUR.USR_Weight_Accumulated 'H';

// CUR.USR Market Value Price = PGM.*Synon (17,9) work field
CUR.USR_Market_Value_Price = PGM.*Synon_179_work_field;

ENDIF;

//?Compute market price
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

ENDIF;

//?reverse sign if credit memo and positive
CASE;

// IF PAR.Billing Activity Type is Credit Memo
IF PAR.Billing_Activity_Type = '2';

// AND CUR.USR Market Value Price GT WRK.ZERO
AND CUR.USR_Market_Value_Price > WRK.ZERO;

// CUR.USR Market Value Price = CON.*ZERO - CUR.USR Market Value Price
CUR.USR_Market_Value_Price = *ZERO - CUR.USR_Market_Value_Price;

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.USR Sales Realiz. Flag is All
IF PAR.USR_Sales_Realiz_Flag = 'A';

CASE;

// IF DB1.Affect Sales Doll Status is no
IF DB1.Affect_Sales_Doll_Status = 'N';

// AND DB1.Affect Sales Pnds Status is yes
AND DB1.Affect_Sales_Pnds_Status = 'Y';

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

//?Compute market price
CASE;

// IF DB1.U/M - Base Price EQ PAR.U/M - Primary
IF DB1.U_M_Base_Price = PAR.UOM_Primary;

// OR DB1.U/M - Base Price EQ PAR.U/M - Second
OR DB1.U_M_Base_Price = PAR.UOM_Second;

// OR DB1.U/M - Base Price EQ PAR.U/M - Third
OR DB1.U_M_Base_Price = PAR.UOM_Third;

//?subtract 1 from actual shipped date for starting point
// WRK.Actual Shipped Date = DB1.Actual Shipped Date + CON.-1 *DAYS
WRK.Actual_Shipped_Date = DATEINCR(DB1.Actual_Shipped_Date '-1' 'DY' 1111111 'NONE' 'N'            +
1);

EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
PARAMETER(WRK.Commodity_Market_Code);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(WRK.Actual_Shipped_Date);
PARAMETER(WRK.Commodity_Market_Price);
PARAMETER(WRK.USR_Date_Priced);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Commodity Market Price = DB1.Commodity Market Price
 PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

 // PAR.USR Date Priced = DB1.Market Price Date
 PAR.USR_Date_Priced = DB1.Market_Price_Date;

 QUIT;

}


EXECUTE FUNCTION(CLC Convert Price      IF) TYPE(EXCINTFUN)                     AC1290254;
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(DB1.U_M_Base_Price);
PARAMETER(WRK.Price_based_on_U_M1_S);
PARAMETER(WRK.Price_based_on_U_M2_S);
PARAMETER(WRK.Price_based_on_U_M3_S);
PARAMETER(WRK.Commodity_Market_Price);
{
 //?Execute internal function

 //?Initialize parameter values
 // PAR.Price based on U/M1 S = CON.*ZERO
 PAR.Price_based_on_U_M1_S = *ZERO;

 // PAR.Price based on U/M2 S = CON.*ZERO
 PAR.Price_based_on_U_M2_S = *ZERO;

 // PAR.Price based on U/M3 S = CON.*ZERO
 PAR.Price_based_on_U_M3_S = *ZERO;

 //?Process based on Unit of Measure entered
 CASE;

 // IF PAR.U/M - Primary EQ PAR.U/M - Pricing
 IF PAR.UOM_Primary = PAR.UOM_Pricing;

 // PAR.Price based on U/M1 S = PAR.Unit Price
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price;

 //?Process second U/M if entered
 CASE;

 // IF PAR.U/M - Second is Entered
 IF PAR.UOM_Second <> *BLANK;

 //?Convert based on operation code
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M2 S = PAR.Unit Price / PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price / PAR.Conversion_Factor_1 'H';

 ENDIF;

 //?Convert based on operation code
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 // PAR.Price based on U/M2 S = PAR.Unit Price * PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price * PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 //?Process third U/M if entered
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M3 S = PAR.Price based on U/M2 S / PAR.Conversion Factor 2
 PAR.Price_based_on_U_M3_S = PAR.Price_based_on_U_M2_S / PAR.Conversion_Factor_2 'H';

 ENDIF;

 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.Price based on U/M3 S = PAR.Price based on U/M2 S * PAR.Conversion Factor 2
 PAR.Price_based_on_U_M3_S = PAR.Price_based_on_U_M2_S * PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Process based on Unit of Measure entered
 // IF PAR.U/M - Second EQ PAR.U/M - Pricing
 IF PAR.UOM_Second = PAR.UOM_Pricing;

 // PAR.Price based on U/M2 S = PAR.Unit Price
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 // PAR.Price based on U/M1 S = PAR.Unit Price * PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price * PAR.Conversion_Factor_1 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M1 S = PAR.Unit Price / PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price / PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 //?Process third U/M if entered
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M3 S = PAR.Unit Price / PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price / PAR.Conversion_Factor_2 'H';

 ENDIF;

 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.Price based on U/M3 S = PAR.Unit Price * PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price * PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Process based on Unit of Measure entered
 // IF PAR.U/M - Third EQ PAR.U/M - Pricing
 IF PAR.UOM_Third = PAR.UOM_Pricing;

 // PAR.Price based on U/M3 S = PAR.Unit Price
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 // PAR.Price based on U/M2 S = PAR.Unit Price * PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price * PAR.Conversion_Factor_2 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M2 S = PAR.Unit Price / PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price / PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 // PAR.Price based on U/M1 S = PAR.Price based on U/M2 S * PAR.Conversion Factor 1
 PAR.Price_based_on_U_M1_S = PAR.Price_based_on_U_M2_S * PAR.Conversion_Factor_1 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M1 S = PAR.Price based on U/M2 S / PAR.Conversion Factor 1
 PAR.Price_based_on_U_M1_S = PAR.Price_based_on_U_M2_S / PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Compute Market Price
CASE;

// IF PAR.Unit Weight EQ WRK.ZERO
IF PAR.Unit_Weight = WRK.ZERO;

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

//?Compute Market Price
// IF *OTHERWISE
IF *OTHERWISE;

// Synon (17,9) work field =       * Compute Market Prc/LB
PGM.*Synon_179_work_field = ( WRK.Price_based_on_U_M1_S / PAR.Unit_Weight 'H' )                    +
* CUR.USR_Weight_Accumulated 'H';

// CUR.USR Market Value Price = PGM.*Synon (17,9) work field
CUR.USR_Market_Value_Price = PGM.*Synon_179_work_field;

ENDIF;

//?Compute market price
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Market Value Price = CON.*ZERO
CUR.USR_Market_Value_Price = *ZERO;

ENDIF;

//?reverse sign if credit memo and positive
CASE;

// IF PAR.Billing Activity Type is Credit Memo
IF PAR.Billing_Activity_Type = '2';

// AND CUR.USR Market Value Price GT WRK.ZERO
AND CUR.USR_Market_Value_Price > WRK.ZERO;

// CUR.USR Market Value Price = CON.*ZERO - CUR.USR Market Value Price
CUR.USR_Market_Value_Price = *ZERO - CUR.USR_Market_Value_Price;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

// PAR.U/M - Base Price = DB1.U/M - Base Price
PAR.U_M_Base_Price = DB1.U_M_Base_Price;

// CUR.Usr Freight Accum = DB1.Absorbed Freight Amount
CUR.Usr_Freight_Accum = DB1.Absorbed_Freight_Amount;

// CUR.USR Billing Dtl Net Dol 3 = DB1.Billing Detail Gross Dol.
CUR.USR_Billing_Dtl_Net_Dol_3 = DB1.Billing_Detail_Gross_Dol;

// CUR.USR Qty Billed = DB1.Quantity Billed
CUR.USR_Qty_Billed = DB1.Quantity_Billed;

//?reverse sign if credit memo and positive
CASE;

// IF PAR.Billing Activity Type is Credit Memo
IF PAR.Billing_Activity_Type = '2';

// AND CUR.USR Qty Billed is gt zero
AND CUR.USR_Qty_Billed > *ZERO;

// CUR.USR Qty Billed = CON.*ZERO - CUR.USR Qty Billed
CUR.USR_Qty_Billed = *ZERO - CUR.USR_Qty_Billed;

ENDIF;

// CUR.USR Percent Work, 7.2 = CON.*ZERO
CUR.USR_Percent_Work_7_2 = *ZERO;

// CUR.USR Amount Remaining = CON.*ZERO
CUR.USR_Amount_Remaining = *ZERO;

CASE;

// IF CUR.USR Weight Accumulated is Entered
IF CUR.USR_Weight_Accumulated <> *ZERO;

// WRK.USR Percent Work, 7.4 = CUR.FOB Gross Amount / CUR.USR Weight Accumulated *R
WRK.USR_Percent_Work_7_4 = CUR.FOB_Gross_Amount / CUR.USR_Weight_Accumulated 'H';

// CUR.USR Percent Work, 7.2 = WRK.USR Percent Work, 7.4 * CON.100 *Rounded
CUR.USR_Percent_Work_7_2 = WRK.USR_Percent_Work_7_4 * 100 'H';

ENDIF;

//?Compute Market Price (CWT)
CASE;

// IF CUR.USR Weight Accumulated NE WRK.ZERO
IF CUR.USR_Weight_Accumulated <> WRK.ZERO;

// Synon (17,9) work field =       * Compute Market Price CWT
PGM.*Synon_179_work_field = ( CUR.USR_Market_Value_Price / CUR.USR_Weight_Accumulated              +
'H' ) * 100 'H';

//?compute usr market value
CASE;

// IF CUR.USR Market Value Price LT WRK.ZERO
IF CUR.USR_Market_Value_Price < WRK.ZERO;

// AND CUR.USR Weight Accumulated LT WRK.ZERO
AND CUR.USR_Weight_Accumulated < WRK.ZERO;

// WRK.USR Market Value = PGM.*Synon (17,9) work field * CON.-1 *Rounded
WRK.USR_Market_Value = PGM.*Synon_179_work_field * -1 'H';

//?compute usr market value
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Market Value = PGM.*Synon (17,9) work field * CON.1 *Rounded
WRK.USR_Market_Value = PGM.*Synon_179_work_field * 1 'H';

ENDIF;

//?Compute Market Price (CWT)
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Market Value = CON.*ZERO
WRK.USR_Market_Value = *ZERO;

ENDIF;

//?Compute Standard Overage
CASE;

// IF WRK.ZERO is Zero
IF WRK.ZERO = *ZERO;

EXECUTE FUNCTION(CLC Convert Price      IF) TYPE(EXCINTFUN)                     AC1290254;
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(PAR.U_M_Base_Price);
PARAMETER(WRK.Price_based_on_U_M1_S);
PARAMETER(WRK.Price_based_on_U_M2_S);
PARAMETER(WRK.Price_based_on_U_M3_S);
PARAMETER(PAR.Standard_Overage_Underage);
{
 //?Execute internal function

 //?Initialize parameter values
 // PAR.Price based on U/M1 S = CON.*ZERO
 PAR.Price_based_on_U_M1_S = *ZERO;

 // PAR.Price based on U/M2 S = CON.*ZERO
 PAR.Price_based_on_U_M2_S = *ZERO;

 // PAR.Price based on U/M3 S = CON.*ZERO
 PAR.Price_based_on_U_M3_S = *ZERO;

 //?Process based on Unit of Measure entered
 CASE;

 // IF PAR.U/M - Primary EQ PAR.U/M - Pricing
 IF PAR.UOM_Primary = PAR.UOM_Pricing;

 // PAR.Price based on U/M1 S = PAR.Unit Price
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price;

 //?Process second U/M if entered
 CASE;

 // IF PAR.U/M - Second is Entered
 IF PAR.UOM_Second <> *BLANK;

 //?Convert based on operation code
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M2 S = PAR.Unit Price / PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price / PAR.Conversion_Factor_1 'H';

 ENDIF;

 //?Convert based on operation code
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 // PAR.Price based on U/M2 S = PAR.Unit Price * PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price * PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 //?Process third U/M if entered
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M3 S = PAR.Price based on U/M2 S / PAR.Conversion Factor 2
 PAR.Price_based_on_U_M3_S = PAR.Price_based_on_U_M2_S / PAR.Conversion_Factor_2 'H';

 ENDIF;

 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.Price based on U/M3 S = PAR.Price based on U/M2 S * PAR.Conversion Factor 2
 PAR.Price_based_on_U_M3_S = PAR.Price_based_on_U_M2_S * PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Process based on Unit of Measure entered
 // IF PAR.U/M - Second EQ PAR.U/M - Pricing
 IF PAR.UOM_Second = PAR.UOM_Pricing;

 // PAR.Price based on U/M2 S = PAR.Unit Price
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 // PAR.Price based on U/M1 S = PAR.Unit Price * PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price * PAR.Conversion_Factor_1 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M1 S = PAR.Unit Price / PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price / PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 //?Process third U/M if entered
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M3 S = PAR.Unit Price / PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price / PAR.Conversion_Factor_2 'H';

 ENDIF;

 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.Price based on U/M3 S = PAR.Unit Price * PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price * PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Process based on Unit of Measure entered
 // IF PAR.U/M - Third EQ PAR.U/M - Pricing
 IF PAR.UOM_Third = PAR.UOM_Pricing;

 // PAR.Price based on U/M3 S = PAR.Unit Price
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 // PAR.Price based on U/M2 S = PAR.Unit Price * PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price * PAR.Conversion_Factor_2 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M2 S = PAR.Unit Price / PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price / PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 // PAR.Price based on U/M1 S = PAR.Price based on U/M2 S * PAR.Conversion Factor 1
 PAR.Price_based_on_U_M1_S = PAR.Price_based_on_U_M2_S * PAR.Conversion_Factor_1 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M1 S = PAR.Price based on U/M2 S / PAR.Conversion Factor 1
 PAR.Price_based_on_U_M1_S = PAR.Price_based_on_U_M2_S / PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Compute Std Overage
CASE;

// IF PAR.Unit Weight EQ WRK.ZERO
IF PAR.Unit_Weight = WRK.ZERO;

// CUR.Standard Overage Amount = CON.*ZERO
CUR.Standard_Overage_Amount = *ZERO;

//?Compute Std Overage
// IF *OTHERWISE
IF *OTHERWISE;

// Synon (17,9) work field =       * Compute Standard Overage
PGM.*Synon_179_work_field = ( WRK.Price_based_on_U_M1_S / PAR.Unit_Weight 'H' ) * 100              +
'H';

// CUR.Standard Overage Amount = PGM.*Synon (17,9) work field
CUR.Standard_Overage_Amount = PGM.*Synon_179_work_field;

ENDIF;

ENDIF;

CASE;

// IF CUR.USR Weight Accumulated is Entered
IF CUR.USR_Weight_Accumulated <> *ZERO;

// CUR.USR Amount Remaining = CUR.Standard Overage Amount + WRK.USR Market Value
CUR.USR_Amount_Remaining = CUR.Standard_Overage_Amount + WRK.USR_Market_Value;

ENDIF;

// CUR.Variance amount 1     USR = CUR.USR Percent Work, 7.2 - CUR.USR Amount Remai
CUR.Variance_amount_1_USR = CUR.USR_Percent_Work_7_2 - CUR.USR_Amount_Remaining;

// CUR.USR Description - 15 = DB1.Ship To Name
CUR.USR_Description_15 = DB1.Ship_To_Name;

CASE;

// IF CUR.Ship To State Code is International Accounts
IF CUR.Ship_To_State_Code = '.';

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Export Country Code = CUR.Ship To State Code
CUR.Export_Country_Code = CUR.Ship_To_State_Code;

ENDIF;

CASE;

// IF PAR.USR Summary/Detail or Tot is Summary
IF PAR.USR_Summary_Detail_or_Tot = 'S';

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

// CUR.Usr Accruals Amount = DB1.Trade Fund Accrual Amount
CUR.Usr_Accruals_Amount = DB1.Ledgrd_Trd_Fund_Accrl_Amt;

// CUR.Revaluation Amount 1 USR = DB1.SBD Accrual Amount
CUR.Revaluation_Amount_1_USR = DB1.NonLedgrd_TrdFnd_Acrl_Amt;

//?Print shipped item total if more than 1 item/order detail
// WRK.Count USR = WRK.Count USR + CON.1
WRK.Count_USR = WRK.Count_USR + 1;

//?USER: Process after print of detail format

// NXT.USR Billing Dtl Net Dol 2 = NXT.USR Billing Dtl Net Dol 2 + CUR.USR Billing
NXT.USR_Billing_Dtl_Net_Dol_2 = NXT.USR_Billing_Dtl_Net_Dol_2                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_2;

// NXT.Usr Freight Accum = NXT.Usr Freight Accum + CUR.Usr Freight Accum
NXT.Usr_Freight_Accum = NXT.Usr_Freight_Accum + CUR.Usr_Freight_Accum;

// NXT.Usr Accruals Amount = NXT.Usr Accruals Amount + CUR.Usr Accruals Amount
NXT.Usr_Accruals_Amount = NXT.Usr_Accruals_Amount + CUR.Usr_Accruals_Amount;

// NXT.USR Billing Dtl Net Dol 3 = NXT.USR Billing Dtl Net Dol 3 + CUR.USR Billing
NXT.USR_Billing_Dtl_Net_Dol_3 = NXT.USR_Billing_Dtl_Net_Dol_3                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_3;

// NXT.USR Weight Accumulated = NXT.USR Weight Accumulated + CUR.USR Weight Accumul
NXT.USR_Weight_Accumulated = NXT.USR_Weight_Accumulated + CUR.USR_Weight_Accumulated;

// NXT.FOB Gross Amount      USR = NXT.FOB Gross Amount      USR + CUR.FOB Gross Am
NXT.FOB_Gross_Amount_USR = NXT.FOB_Gross_Amount_USR + CUR.FOB_Gross_Amount;

// NXT.USR Qty Billed = NXT.USR Qty Billed + CUR.USR Qty Billed
NXT.USR_Qty_Billed = NXT.USR_Qty_Billed + CUR.USR_Qty_Billed;

// NXT.USR Market Value Price = NXT.USR Market Value Price + CUR.USR Market Value P
NXT.USR_Market_Value_Price = NXT.USR_Market_Value_Price + CUR.USR_Market_Value_Price;

NXT.Accrual_Amount_SUM = SUM(CUR.Revaluation_Amount_1_USR);

NXT.Extended_amount_SUM = SUM(CUR.Commission_Amount);

// WRK.USR Print Detail = CND.no
WRK.USR_Print_Detail = 'N';

//?USER: Print required level totals

// SUPPRESSED PRINT Accounting Company Number totals format

CASE;

IF NEW Shipped_Item_Code;
EXECUTE FUNCTION(RTV Item Info for Rpts RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1441538;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Shipped_Item_Code);
PARAMETER(CUR.USR_Item_Description);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(PAR.UOM_Pricing);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.Default_Commod_Mark_basis);
PARAMETER(WRK.Market_Overage);
PARAMETER(PAR.Standard_Overage_Underage);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(PAR.Item_Pricing_Operation);
PARAMETER(PAR.Item_Pricing_Constant);
PARAMETER(PAR.Print_on_Realization_Rpt);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF CUR.USR Weight Accumulated is Entered
IF CUR.USR_Weight_Accumulated <> *ZERO;

// WRK.USR Percent Work, 7.4 = CUR.FOB Gross Amount      USR / CUR.USR Weight Accumulated *Rounded
WRK.USR_Percent_Work_7_4 = CUR.FOB_Gross_Amount_USR / CUR.USR_Weight_Accumulated 'H';

// CUR.USR Percent Work, 7.2 = WRK.USR Percent Work, 7.4 * CON.100 *Rounded
CUR.USR_Percent_Work_7_2 = WRK.USR_Percent_Work_7_4 * 100 'H';

ENDIF;

//?FOB Sales and Weight both negative
CASE;

// IF CUR.FOB Gross Amount      USR LT WRK.ZERO
IF CUR.FOB_Gross_Amount_USR < WRK.ZERO;

// AND CUR.USR Weight Accumulated LT WRK.ZERO
AND CUR.USR_Weight_Accumulated < WRK.ZERO;

// CUR.USR Percent Work, 7.2 = CUR.USR Percent Work, 7.2 * CON.-1 *Rounded
CUR.USR_Percent_Work_7_2 = CUR.USR_Percent_Work_7_2 * -1 'H';

ENDIF;

//?Compute Market Price (CWT)
CASE;

// IF CUR.USR Weight Accumulated NE WRK.ZERO
IF CUR.USR_Weight_Accumulated <> WRK.ZERO;

// Synon (17,9) work field =       * Compute Market Price CWT
PGM.*Synon_179_work_field = ( CUR.USR_Market_Value_Price / CUR.USR_Weight_Accumulated              +
'H' ) * 100 'H';

//?compute usr market value
CASE;

// IF CUR.USR Market Value Price LT WRK.ZERO
IF CUR.USR_Market_Value_Price < WRK.ZERO;

// AND CUR.USR Weight Accumulated LT WRK.ZERO
AND CUR.USR_Weight_Accumulated < WRK.ZERO;

// CUR.USR Market Value = PGM.*Synon (17,9) work field * CON.-1 *Rounded
CUR.USR_Market_Value = PGM.*Synon_179_work_field * -1 'H';

//?compute usr market value
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Market Value = PGM.*Synon (17,9) work field * CON.1 *Rounded
CUR.USR_Market_Value = PGM.*Synon_179_work_field * 1 'H';

ENDIF;

//?Compute Market Price (CWT)
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.USR Market Value = CON.*ZERO
CUR.USR_Market_Value = *ZERO;

ENDIF;

//?Compute Standard Overage
CASE;

// IF WRK.ZERO is Zero
IF WRK.ZERO = *ZERO;

EXECUTE FUNCTION(CLC Convert Price      IF) TYPE(EXCINTFUN)                     AC1290254;
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(PAR.U_M_Base_Price);
PARAMETER(WRK.Price_based_on_U_M1_S);
PARAMETER(WRK.Price_based_on_U_M2_S);
PARAMETER(WRK.Price_based_on_U_M3_S);
PARAMETER(PAR.Standard_Overage_Underage);
{
 //?Execute internal function

 //?Initialize parameter values
 // PAR.Price based on U/M1 S = CON.*ZERO
 PAR.Price_based_on_U_M1_S = *ZERO;

 // PAR.Price based on U/M2 S = CON.*ZERO
 PAR.Price_based_on_U_M2_S = *ZERO;

 // PAR.Price based on U/M3 S = CON.*ZERO
 PAR.Price_based_on_U_M3_S = *ZERO;

 //?Process based on Unit of Measure entered
 CASE;

 // IF PAR.U/M - Primary EQ PAR.U/M - Pricing
 IF PAR.UOM_Primary = PAR.UOM_Pricing;

 // PAR.Price based on U/M1 S = PAR.Unit Price
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price;

 //?Process second U/M if entered
 CASE;

 // IF PAR.U/M - Second is Entered
 IF PAR.UOM_Second <> *BLANK;

 //?Convert based on operation code
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M2 S = PAR.Unit Price / PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price / PAR.Conversion_Factor_1 'H';

 ENDIF;

 //?Convert based on operation code
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 // PAR.Price based on U/M2 S = PAR.Unit Price * PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price * PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 //?Process third U/M if entered
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M3 S = PAR.Price based on U/M2 S / PAR.Conversion Factor 2
 PAR.Price_based_on_U_M3_S = PAR.Price_based_on_U_M2_S / PAR.Conversion_Factor_2 'H';

 ENDIF;

 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.Price based on U/M3 S = PAR.Price based on U/M2 S * PAR.Conversion Factor 2
 PAR.Price_based_on_U_M3_S = PAR.Price_based_on_U_M2_S * PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Process based on Unit of Measure entered
 // IF PAR.U/M - Second EQ PAR.U/M - Pricing
 IF PAR.UOM_Second = PAR.UOM_Pricing;

 // PAR.Price based on U/M2 S = PAR.Unit Price
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 // PAR.Price based on U/M1 S = PAR.Unit Price * PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price * PAR.Conversion_Factor_1 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M1 S = PAR.Unit Price / PAR.Conversion Factor 1 *Rounded
 PAR.Price_based_on_U_M1_S = PAR.Unit_Price / PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 //?Process third U/M if entered
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M3 S = PAR.Unit Price / PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price / PAR.Conversion_Factor_2 'H';

 ENDIF;

 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.Price based on U/M3 S = PAR.Unit Price * PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price * PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Process based on Unit of Measure entered
 // IF PAR.U/M - Third EQ PAR.U/M - Pricing
 IF PAR.UOM_Third = PAR.UOM_Pricing;

 // PAR.Price based on U/M3 S = PAR.Unit Price
 PAR.Price_based_on_U_M3_S = PAR.Unit_Price;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 // PAR.Price based on U/M2 S = PAR.Unit Price * PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price * PAR.Conversion_Factor_2 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Price based on U/M2 S = PAR.Unit Price / PAR.Conversion Factor 2 *Rounded
 PAR.Price_based_on_U_M2_S = PAR.Unit_Price / PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 // PAR.Price based on U/M1 S = PAR.Price based on U/M2 S * PAR.Conversion Factor 1
 PAR.Price_based_on_U_M1_S = PAR.Price_based_on_U_M2_S * PAR.Conversion_Factor_1 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Price based on U/M1 S = PAR.Price based on U/M2 S / PAR.Conversion Factor 1
 PAR.Price_based_on_U_M1_S = PAR.Price_based_on_U_M2_S / PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Compute Std Overage
CASE;

// IF PAR.Unit Weight EQ WRK.ZERO
IF PAR.Unit_Weight = WRK.ZERO;

// CUR.Standard Overage Amount = CON.*ZERO
CUR.Standard_Overage_Amount = *ZERO;

//?Compute Std Overage
// IF *OTHERWISE
IF *OTHERWISE;

// Synon (17,9) work field =       * Compute Standard Overage
PGM.*Synon_179_work_field = ( WRK.Price_based_on_U_M1_S / PAR.Unit_Weight 'H' ) * 100              +
'H';

// CUR.Standard Overage Amount = PGM.*Synon (17,9) work field
CUR.Standard_Overage_Amount = PGM.*Synon_179_work_field;

ENDIF;

ENDIF;

//?Compute Mkt + Ovr / CWT
// CUR.USR Amount Remaining = CUR.USR Market Value + CUR.Standard Overage Amount
CUR.USR_Amount_Remaining = CUR.USR_Market_Value + CUR.Standard_Overage_Amount;

// CUR.Variance amount 1     USR = CUR.USR Percent Work, 7.2 - CUR.USR Amount Remai
CUR.Variance_amount_1_USR = CUR.USR_Percent_Work_7_2 - CUR.USR_Amount_Remaining;

//?Dont print Shipped Item Total if only 1 item/order detail printed.
CASE;

// IF WRK.Count USR is One
IF WRK.Count_USR = 1;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

//?Dont print Shipped Item Total if only 1 item/order detail printed.
// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

// WRK.USR Print Detail = CND.yes
WRK.USR_Print_Detail = 'Y';

// WRK.Count USR = CON.*ZERO
WRK.Count_USR = 0;

// Print Shipped Item Code totals format
PRINT Shipped Item Code totals format;

// NXT.USR Percent Work, 7.2 = NXT.USR Percent Work, 7.2 + CUR.USR Percent Work, 7.2
NXT.USR_Percent_Work_7_2 = NXT.USR_Percent_Work_7_2 + CUR.USR_Percent_Work_7_2;

// NXT.USR Billing Dtl Net Dol 2 = NXT.USR Billing Dtl Net Dol 2 + CUR.USR Billing Dtl Net Dol 2
NXT.USR_Billing_Dtl_Net_Dol_2 = NXT.USR_Billing_Dtl_Net_Dol_2                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_2;

// NXT.Usr Freight Accum = NXT.Usr Freight Accum + CUR.Usr Freight Accum
NXT.Usr_Freight_Accum = NXT.Usr_Freight_Accum + CUR.Usr_Freight_Accum;

// NXT.Usr Accruals Amount = NXT.Usr Accruals Amount + CUR.Usr Accruals Amount
NXT.Usr_Accruals_Amount = NXT.Usr_Accruals_Amount + CUR.Usr_Accruals_Amount;

// NXT.USR Billing Dtl Net Dol 3 = NXT.USR Billing Dtl Net Dol 3 + CUR.USR Billing Dtl Net Dol 3
NXT.USR_Billing_Dtl_Net_Dol_3 = NXT.USR_Billing_Dtl_Net_Dol_3                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_3;

// NXT.USR Weight Accumulated = NXT.USR Weight Accumulated + CUR.USR Weight Accumulated
NXT.USR_Weight_Accumulated = NXT.USR_Weight_Accumulated + CUR.USR_Weight_Accumulated;

// NXT.USR Qty Billed = NXT.USR Qty Billed + CUR.USR Qty Billed
NXT.USR_Qty_Billed = NXT.USR_Qty_Billed + CUR.USR_Qty_Billed;

NXT.Accrual_Amount_SUM = SUM(CUR.Accrual_Amount_SUM);

NXT.Extended_amount_SUM = SUM(CUR.Extended_amount_SUM);

ENDIF;

CASE;

IF NEW Sales_Route_Code;
// CUR.Text USR 12 = CON.Salesperson
CUR.Text_USR_12 = 'Salesperson';

EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
PARAMETER(CUR.Sales_Route_Code);
PARAMETER(CUR.Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Print Sales Route Code totals format
PRINT Sales Route Code totals format;

// NXT.USR Billing Dtl Net Dol 2 = NXT.USR Billing Dtl Net Dol 2 + CUR.USR Billing Dtl Net Dol 2
NXT.USR_Billing_Dtl_Net_Dol_2 = NXT.USR_Billing_Dtl_Net_Dol_2                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_2;

// NXT.Usr Freight Accum = NXT.Usr Freight Accum + CUR.Usr Freight Accum
NXT.Usr_Freight_Accum = NXT.Usr_Freight_Accum + CUR.Usr_Freight_Accum;

// NXT.Usr Accruals Amount = NXT.Usr Accruals Amount + CUR.Usr Accruals Amount
NXT.Usr_Accruals_Amount = NXT.Usr_Accruals_Amount + CUR.Usr_Accruals_Amount;

// NXT.USR Billing Dtl Net Dol 3 = NXT.USR Billing Dtl Net Dol 3 + CUR.USR Billing Dtl Net Dol 3
NXT.USR_Billing_Dtl_Net_Dol_3 = NXT.USR_Billing_Dtl_Net_Dol_3                                      +
+ CUR.USR_Billing_Dtl_Net_Dol_3;

// NXT.USR Weight Accumulated = NXT.USR Weight Accumulated + CUR.USR Weight Accumulated
NXT.USR_Weight_Accumulated = NXT.USR_Weight_Accumulated + CUR.USR_Weight_Accumulated;

// NXT.USR Qty Billed = NXT.USR Qty Billed + CUR.USR Qty Billed
NXT.USR_Qty_Billed = NXT.USR_Qty_Billed + CUR.USR_Qty_Billed;

NXT.Accrual_Amount_SUM = SUM(CUR.Accrual_Amount_SUM);

NXT.Extended_amount_SUM = SUM(CUR.Extended_amount_SUM);

ENDIF;

