// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PUTYE1R
// ?Date: 14.08.2025 Time: 03:51:22
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(NLL.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize detail screen (existing record)

//?Load ASN Status description
CASE;

// IF DTL.EDI ASN Status is Sent
IF DTL.EDI_ASN_Status = 'S';

// DTL.Condition Name USR = CON.Sent
DTL.Condition_Name_USR = 'Sent';

//?Load ASN Status description
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Condition Name USR = CON. Not sent
DTL.Condition_Name_USR = 'Not sent';

ENDIF;

//?Set display only flag
CASE;

// IF NOT DTL.EDI ASN Status is Sent
IF ! DTL.EDI_ASN_Status = 'S';

// LCL.Display Flag = CND.No
LCL.Display_Flag = 'N';

ENDIF;

//?Set Pallet Type Description.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Pallet Type 1.
CASE;

// IF NOT DB1.Pallet Type 1 is None
IF ! DB1.Pallet_Type_1 = *BLANK;

EXECUTE FUNCTION(Rtv Pallet Desc       RT) TYPE(RTVOBJ) FILE(PUB6CPP)           AC2203100;
PARAMETER(DB1.Pallet_Type_1);
PARAMETER(DTL.PM_Description_1);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Pallet Type 2.
CASE;

// IF NOT DB1.Pallet Type 2 is None
IF ! DB1.Pallet_Type_2 = *BLANK;

EXECUTE FUNCTION(Rtv Pallet Desc       RT) TYPE(RTVOBJ) FILE(PUB6CPP)           AC2203100;
PARAMETER(DB1.Pallet_Type_2);
PARAMETER(DTL.PM_Description_2);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Pallet Type 3.
CASE;

// IF NOT DB1.Pallet Type 3 is None
IF ! DB1.Pallet_Type_3 = *BLANK;

EXECUTE FUNCTION(Rtv Pallet Desc       RT) TYPE(RTVOBJ) FILE(PUB6CPP)           AC2203100;
PARAMETER(DB1.Pallet_Type_3);
PARAMETER(DTL.PM_Description_3);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Pallet Type 4.
CASE;

// IF NOT DB1.Pallet Type 4 is None
IF ! DB1.Pallet_Type_4 = *BLANK;

EXECUTE FUNCTION(Rtv Pallet Desc       RT) TYPE(RTVOBJ) FILE(PUB6CPP)           AC2203100;
PARAMETER(DB1.Pallet_Type_4);
PARAMETER(DTL.PM_Description_4);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

ENDIF;

//?USER: Validate detail screen fields

//?F4=Prompt
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

//?Prompting on a Pallet Type field
CASE;

// IF PGM.*Cursor field <IS> DTL.Pallet Type 1
IF PGM.*Cursor_field = DTL.Pallet_Type_1;

// Call program Sel Pallet Master     SR.
CALL PROGRAM(Sel Pallet Master     SR) ('PUTOSRR');
PARAMETER(DTL.Pallet_Type_1);
PARAMETER('N');

QUIT;

//?Prompting on a Pallet Type field
// IF PGM.*Cursor field <IS> DTL.Pallet Type 2
IF PGM.*Cursor_field = DTL.Pallet_Type_2;

// Call program Sel Pallet Master     SR.
CALL PROGRAM(Sel Pallet Master     SR) ('PUTOSRR');
PARAMETER(DTL.Pallet_Type_2);
PARAMETER('N');

QUIT;

//?Prompting on a Pallet Type field
// IF PGM.*Cursor field <IS> DTL.Pallet Type 3
IF PGM.*Cursor_field = DTL.Pallet_Type_3;

// Call program Sel Pallet Master     SR.
CALL PROGRAM(Sel Pallet Master     SR) ('PUTOSRR');
PARAMETER(DTL.Pallet_Type_3);
PARAMETER('N');

QUIT;

//?Prompting on a Pallet Type field
// IF PGM.*Cursor field <IS> DTL.Pallet Type 4
IF PGM.*Cursor_field = DTL.Pallet_Type_4;

// Call program Sel Pallet Master     SR.
CALL PROGRAM(Sel Pallet Master     SR) ('PUTOSRR');
PARAMETER(DTL.Pallet_Type_4);
PARAMETER('N');

QUIT;

ENDIF;

ENDIF;

//?Validate Pallet Type 1 if entered
CASE;

// IF NOT DTL.Pallet Type 1 is None
IF ! DTL.Pallet_Type_1 = *BLANK;

EXECUTE FUNCTION(Rtv Pallet Desc       RT) TYPE(RTVOBJ) FILE(PUB6CPP)           AC2203100;
PARAMETER(DTL.Pallet_Type_1);
PARAMETER(DTL.PM_Description_1);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Check Return Code.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Check Return Code.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Pallet Type not found.'
ERROR(USR5214);
MSGPARM(DTL.Pallet_Type_1);

ENDIF;

ENDIF;

//?Validate Pallet Type 2 if entered
CASE;

// IF NOT DTL.Pallet Type 2 is None
IF ! DTL.Pallet_Type_2 = *BLANK;

EXECUTE FUNCTION(Rtv Pallet Desc       RT) TYPE(RTVOBJ) FILE(PUB6CPP)           AC2203100;
PARAMETER(DTL.Pallet_Type_2);
PARAMETER(DTL.PM_Description_2);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Check Return Code.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Check Return Code.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Pallet Type not found.'
ERROR(USR5214);
MSGPARM(DTL.Pallet_Type_2);

ENDIF;

ENDIF;

//?Validate Pallet Type 3 if entered
CASE;

// IF NOT DTL.Pallet Type 3 is None
IF ! DTL.Pallet_Type_3 = *BLANK;

EXECUTE FUNCTION(Rtv Pallet Desc       RT) TYPE(RTVOBJ) FILE(PUB6CPP)           AC2203100;
PARAMETER(DTL.Pallet_Type_3);
PARAMETER(DTL.PM_Description_3);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Check Return Code.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Check Return Code.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Pallet Type not found.'
ERROR(USR5214);
MSGPARM(DTL.Pallet_Type_3);

ENDIF;

ENDIF;

//?Validate Pallet Type 4 if entered
CASE;

// IF NOT DTL.Pallet Type 4 is None
IF ! DTL.Pallet_Type_4 = *BLANK;

EXECUTE FUNCTION(Rtv Pallet Desc       RT) TYPE(RTVOBJ) FILE(PUB6CPP)           AC2203100;
PARAMETER(DTL.Pallet_Type_4);
PARAMETER(DTL.PM_Description_4);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Check Return Code.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Check Return Code.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Pallet Type not found.'
ERROR(USR5214);
MSGPARM(DTL.Pallet_Type_4);

ENDIF;

ENDIF;

//?Validate Quantity 1 if entered
CASE;

// IF DTL.Pallet Qty 1 is NE Zero
IF DTL.Pallet_Qty_1 <> *ZERO;

// AND DTL.Pallet Type 1 is None
AND DTL.Pallet_Type_1 = *BLANK;

// Send error message - 'Pallet Type required if Pallet Quantity is greater than zero.'
ERROR(USR5219);
MSGPARM(DTL.Pallet_Type_1);

ENDIF;

//?Validate Quantity 2 if entered
CASE;

// IF DTL.Pallet Qty 2 is NE Zero
IF DTL.Pallet_Qty_2 <> *ZERO;

// AND DTL.Pallet Type 2 is None
AND DTL.Pallet_Type_2 = *BLANK;

// Send error message - 'Pallet Type required if Pallet Quantity is greater than zero.'
ERROR(USR5219);
MSGPARM(DTL.Pallet_Type_2);

ENDIF;

//?Validate Quantity 3 if entered
CASE;

// IF DTL.Pallet Qty 3 is NE Zero
IF DTL.Pallet_Qty_3 <> *ZERO;

// AND DTL.Pallet Type 3 is None
AND DTL.Pallet_Type_3 = *BLANK;

// Send error message - 'Pallet Type required if Pallet Quantity is greater than zero.'
ERROR(USR5219);
MSGPARM(DTL.Pallet_Type_3);

ENDIF;

//?Validate Quantity 4 if entered
CASE;

// IF DTL.Pallet Qty 4 is NE Zero
IF DTL.Pallet_Qty_4 <> *ZERO;

// AND DTL.Pallet Type 4 is None
AND DTL.Pallet_Type_4 = *BLANK;

// Send error message - 'Pallet Type required if Pallet Quantity is greater than zero.'
ERROR(USR5219);
MSGPARM(DTL.Pallet_Type_4);

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(Chg OH Pallet Shipped CH) TYPE(CHGOBJ) FILE(PUB7CPP)           AC2197650;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Pallet_Type_1);
PARAMETER(DTL.Pallet_Qty_1);
PARAMETER(DTL.Pallet_Type_2);
PARAMETER(DTL.Pallet_Qty_2);
PARAMETER(DTL.Pallet_Type_3);
PARAMETER(DTL.Pallet_Qty_3);
PARAMETER(DTL.Pallet_Type_4);
PARAMETER(DTL.Pallet_Qty_4);
PARAMETER(DTL.EDI_ASN_Status);
PARAMETER(DTL.Unused_Flag_1);
PARAMETER(DTL.Unused_Flag_2);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

}


