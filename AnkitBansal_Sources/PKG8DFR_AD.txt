// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKG8DFR
// ?Date: 14.08.2025 Time: 02:49:32
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?H16853 ISE 11/09/2020 - Recompiled due to change in Buy Order Number
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.Pen_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

// PAR.PRT Night Queue Run Sts = CND.No
PAR.PRT_Night_Queue_Run_Sts = 'N';

//?USER: Initialize subfile control

CASE;

// IF WRK.First Time Flag Usr EQ WRK.Blank USR
IF WRK.First_Time_Flag_Usr = WRK.Blank_USR;

// CTL.Pen Company Number = WRK.Pen Company Number
CTL.Pen_Company_Number = WRK.Pen_Company_Number;

// WRK.Display Print Prompt  Usr = CND.Prompt is to be displayed
WRK.Display_Print_Prompt_Usr = 'Y';

// WRK.First Time Flag Usr = CND.Yes
WRK.First_Time_Flag_Usr = 'Y';

// CTL.RS Record Status = CND.Active
CTL.RS_Record_Status = 'A';

ENDIF;

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(CTL.Pen_Company_Number);
PARAMETER(CTL.Name_USR);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


//?USER: Initialize subfile record from DBF record

// Call program Rtv Stress Pens Only  XF.
CALL PROGRAM(Rtv Stress Pens Only  XF) ('PLPJXFR');
PARAMETER(DB1.Pen_Company_Number);
PARAMETER(DB1.Pen_Number);
PARAMETER(RCD.Stress_Market_Type);

CASE;

// IF CTL.Stress/Market Type is Stress
IF CTL.Stress_Market_Type = 'S';

CASE;

// IF LCL.Stress/Market Type EQ CTL.Stress/Market Type
IF LCL.Stress_Market_Type = CTL.Stress_Market_Type;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?F6=Create
CASE;

// IF CTL.*CMD key is *Create
IF CTL.*CMD_key = '06';

// CTL.Pen Number = WRK.Blank USR
CTL.Pen_Number = WRK.Blank_USR;

// Call program Edt Pen Details       E1.
CALL PROGRAM(Edt Pen Details       E1) ('PKG7E1R');
PARAMETER(CTL.Pen_Company_Number);
PARAMETER(CTL.Pen_Number);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(CTL.Name_USR);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

//?F21=Print List
CASE;

// IF CTL.*CMD key is Print List
IF CTL.*CMD_key = '21';

// Call program Pmt Print Options     XF.
CALL PROGRAM(Pmt Print Options     XF) ('PDG0PVR');
PARAMETER('Print Pen Detail List');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('P/S');

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Execute command - 'SBM Prt Pen Detail List'
EXECUTE COMMAND(PRK0337);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(CTL.RS_Record_Status);
PARAMETER(CTL.Pen_Sts);
PARAMETER(CTL.Pen_Type);
PARAMETER(CTL.Pen_Company_Number);
PARAMETER(CTL.Name_USR);
PARAMETER(PAR.Oms_System_Value_Alpha);

ENDIF;

// *MO.VE             1183529*Bu = ilt. in functions
WRK.Display_Print_Prompt_Usr = 'Y';

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Reload_subfile = 'Y';

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Defer_confirm = 'N';

ENDIF;

//?CALC: Subfile record function fields

EXECUTE FUNCTION(Rtv Genetic Record    RT) TYPE(RTVOBJ) FILE(PKAIREP)           AB1107738;
PARAMETER(RCD.GN_Genetic_Code);
PARAMETER(RCD.Pen_Description);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.GN_Description = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Process subfile record (Pre-confirm)

//?2=Revise
CASE;

// IF RCD.*SFLSEL is *Revise request
IF RCD.*SFLSEL = '2'/'2';

// Call program Edt Pen Details       E1.
CALL PROGRAM(Edt Pen Details       E1) ('PKG7E1R');
PARAMETER(RCD.Pen_Company_Number);
PARAMETER(RCD.Pen_Number);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(CTL.Name_USR);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Delete Request
CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

EXECUTE FUNCTION(Chk Pen in TD         RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1161578;
PARAMETER(RCD.Pen_Company_Number);
PARAMETER(RCD.Pen_Number);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = 999;

 // Send error message - 'Tattoo Detail is using the record. Delete is invalid.'
 ERROR(PRK0521);

 QUIT;

}


EXECUTE FUNCTION(Chk Hld Ovr Pen in TD RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1161579;
PARAMETER(RCD.Pen_Company_Number);
PARAMETER(RCD.Pen_Number);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = 999;

 // Send error message - 'Tattoo Detail is using the record. Delete is invalid.'
 ERROR(PRK0521);

 QUIT;

}


EXECUTE FUNCTION(Chk Pen in Ttt Scl TktRT) TYPE(RTVOBJ) FILE(PKB3CPP)           AB1161585;
PARAMETER(RCD.Pen_Company_Number);
PARAMETER(RCD.Pen_Number);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = 999;

 // Send error message - 'Tattoo Scale Ticket is using the record. Delete is invalid.'
 ERROR(PRK0522);

 QUIT;

}


EXECUTE FUNCTION(Chk Pen in Ttt Get Wt RT) TYPE(RTVOBJ) FILE(PKCNCPP)           AB1161589;
PARAMETER(RCD.Pen_Company_Number);
PARAMETER(RCD.Pen_Number);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = 999;

 // Send error message - 'Tattoo Get Weight is using the record. Delete is invalid.'
 ERROR(PRK0523);

 QUIT;

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

//?Print
CASE;

// IF RCD.*SFLSEL is *Print request
IF RCD.*SFLSEL = '6'/'6';

//?Print Options Prompt
CASE;

// IF WRK.Display Print Prompt  Usr is Prompt is to be displayed
IF WRK.Display_Print_Prompt_Usr = 'Y';

// Call program Pmt Print Options     XF.
CALL PROGRAM(Pmt Print Options     XF) ('PDG0PVR');
PARAMETER('Print Pen Detail');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('P/S');

// *MO.VE             1183529*Bu = ilt. in functions
WRK.Display_Print_Prompt_Usr = 'N';

ENDIF;

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Execute command - 'SBM Prt Pen Detail'
EXECUTE COMMAND(PRK0338);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(RCD.Pen_Company_Number);
PARAMETER(RCD.Pen_Number);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(CTL.Name_USR);

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?USER: Final processing (Pre-confirm)

// *MO.VE             1183529*Bu = ilt. in functions
WRK.Display_Print_Prompt_Usr = 'Y';

//?USER: Process subfile record (Post-confirm)

CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

EXECUTE FUNCTION(Dlt Pen               DO) TYPE(DLTOBJ) FILE(PKA3REP)           AB1102759;
PARAMETER(RCD.Pen_Company_Number);
PARAMETER(RCD.Pen_Number);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Dlt Pen Ext           DO) TYPE(DLTOBJ) FILE(PLBBREP)           AB1299109;
 PARAMETER(PAR.Pen_Company_Number);
 PARAMETER(PAR.Pen_Number);
}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

