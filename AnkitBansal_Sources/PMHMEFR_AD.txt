// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMHMEFR
// ?Date: 14.08.2025 Time: 03:43:08
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.Status - Y or N = CND.no
PAR.Status_Y_or_N = 'N';

//?USER: Initialize subfile header

EXECUTE FUNCTION(Accrual Description DRV) TYPE(DRVFLD)                          AC1706268;
PARAMETER(CTL.Accrual_Description_DRV);
PARAMETER(CTL.Accrual_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Accrual Descript   RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1285204;
 PARAMETER(PAR.Accrual_Code);
 PARAMETER(PAR.Accrual_Description_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Initialize subfile record (existing record)

EXECUTE FUNCTION(Rtv Type Description   RT) TYPE(RTVOBJ) FILE(OME8REP)          AC1229616;
PARAMETER(RCD.Item_Structure_Type_Code);
PARAMETER(RCD.Item_Structure_Type_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// RCD.Item Structure Class USR = DB1.Item Structure Class Code
RCD.Item_Structure_Class_USR = DB1.Item_Structure_Class_Code;

EXECUTE FUNCTION(Item Str Group Desc DRV) TYPE(DRVFLD)                          AC1705174;
PARAMETER(RCD.Item_Str_Group_Desc_DRV);
PARAMETER(RCD.Item_Structure_Group_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Group Desc) TYPE(RTVOBJ) FILE(OME9REP)                     AC1663396;
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Str_Group_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Item Str Class Desc DRV) TYPE(DRVFLD)                          AC1705173;
PARAMETER(RCD.Item_Str_Class_Desc_DRV);
PARAMETER(RCD.Item_Structure_Class_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Class Desc    RT) TYPE(RTVOBJ) FILE(OMFAREP)          AC1205440;
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Str_Class_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Initialize subfile record (new record)

// RCD.Record Status = CND.Active
RCD.Record_Status = 'A';

//?USER: Validate subfile record fields

//?F4
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> RCD.Item Structure Class USR
IF PGM.*Cursor_field = RCD.Item_Structure_Class_USR;

// Call program SEL Item Class Active  SR.
CALL PROGRAM(SEL Item Class Active  SR) ('PDELSRR');
PARAMETER(RCD.Item_Structure_Class_USR);

ENDIF;

ENDIF;

// RCD.Item Structure Class Code = RCD.Item Structure Class USR
RCD.Item_Structure_Class_Code = RCD.Item_Structure_Class_USR;

EXECUTE FUNCTION(Rtv Type Description   RT) TYPE(RTVOBJ) FILE(OME8REP)          AC1229616;
PARAMETER(RCD.Item_Structure_Type_Code);
PARAMETER(RCD.Item_Structure_Type_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Item Str Group Desc DRV) TYPE(DRVFLD)                          AC1705174;
PARAMETER(RCD.Item_Str_Group_Desc_DRV);
PARAMETER(RCD.Item_Structure_Group_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Group Desc) TYPE(RTVOBJ) FILE(OME9REP)                     AC1663396;
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Str_Group_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Item Str Class Desc DRV) TYPE(DRVFLD)                          AC1705173;
PARAMETER(RCD.Item_Str_Class_Desc_DRV);
PARAMETER(RCD.Item_Structure_Class_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Class Desc    RT) TYPE(RTVOBJ) FILE(OMFAREP)          AC1205440;
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Str_Class_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?See if at least 1 item exists with item str combo   7/31/07
EXECUTE FUNCTION(Val Item Str Combo    RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC1839017;
PARAMETER(RCD.Item_Structure_Type_Code);
PARAMETER(RCD.Item_Structure_Group_Code);
PARAMETER(RCD.Item_Structure_Class_Code);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF PAR.Item Structure Class Code is Equal Zero
 IF PAR.Item_Structure_Class_Code = *ZERO;

 // OR PAR.Item Structure Class Code EQ DB1.Item Structure Class Code
 OR PAR.Item_Structure_Class_Code = DB1.Item_Structure_Class_Code;

 CASE;

 // IF DB1.Record Status is Deleted & Inactive
 IF DB1.Record_Status = 'D'/'I';

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Val Item Exists f/Str RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1839030;
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Record_Found_USR);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Record Status is Active
  IF DB1.Record_Status = 'A';

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

  ENDIF;

 }

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Record Found USR is Record Found
 IF PAR.Record_Found_USR = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// Send error message - 'Item Structure does not have an active item.'
ERROR(USR3767);
MSGPARM(RCD.Item_Structure_Class_USR);
MSGPARM(RCD.Item_Structure_Group_Code);
MSGPARM(RCD.Item_Structure_Type_Code);

ENDIF;

//?VAL: Accrual Rate Type for Product Accrual
CASE;

// IF PAR.Accrual Type is Product Accrual
IF PAR.Accrual_Type = 'PC'/'PF'/'PD';

CASE;

// IF RCD.Accrual Rate Type is Valid Product Rate Type
IF RCD.Accrual_Rate_Type = 'W'/'Q';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Accrl Rate Type Invalid for Accrual Type.'
ERROR(USR3968);
MSGPARM(RCD.Accrual_Rate_Type);

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Accrual Cd Dt Str IF) TYPE(EXCINTFUN) FILE(PMA3REP)        AC1839059;
PARAMETER(RCD.Accrual_Code);
PARAMETER(RCD.Item_Structure_Type_Code);
PARAMETER(RCD.Item_Structure_Group_Code);
PARAMETER(RCD.Item_Structure_Class_Code);
PARAMETER(RCD.Accrual_Rate_Type);
PARAMETER(RCD.Accrual_Rate);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Create_Date);
PARAMETER(RCD.Create_Time);
PARAMETER(RCD.Create_User);
PARAMETER(RCD.Create_Program);
PARAMETER(RCD.Change_Date);
PARAMETER(RCD.Change_Time);
PARAMETER(RCD.Change_User);
PARAMETER(RCD.Change_Program);
PARAMETER(PAR.Status_Y_or_N);
{
 //?Execute internal function

 EXECUTE FUNCTION(Crt Accrual Cd Dt Str CR) TYPE(CRTOBJ) FILE(PMA3REP)           AC1825748;
 PARAMETER(PAR.Accrual_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Accrual_Rate_Type);
 PARAMETER(PAR.Accrual_Rate);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Create_Date);
 PARAMETER(PAR.Create_Time);
 PARAMETER(PAR.Create_User);
 PARAMETER(PAR.Create_Program);
 PARAMETER(PAR.Change_Date);
 PARAMETER(PAR.Change_Time);
 PARAMETER(PAR.Change_User);
 PARAMETER(PAR.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

 }

 // PAR.Status - Y or N = CND.yes
 PAR.Status_Y_or_N = 'Y';

}


//?USER: Delete DBF record

EXECUTE FUNCTION(Dlt Accrual Cd Dt Str IF) TYPE(EXCINTFUN) FILE(PMA3REP)        AC1839061;
PARAMETER(RCD.Accrual_Code);
PARAMETER(RCD.Item_Structure_Type_Code);
PARAMETER(RCD.Item_Structure_Group_Code);
PARAMETER(RCD.Item_Structure_Class_Code);
PARAMETER(PAR.Status_Y_or_N);
{
 //?Execute internal function

 EXECUTE FUNCTION(Dlt Accrual Cd Dt Str DO) TYPE(DLTOBJ) FILE(PMA3REP)           AC1825750;
 PARAMETER(PAR.Accrual_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Class_Code);
 // PAR.Status - Y or N = CND.yes
 PAR.Status_Y_or_N = 'Y';

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Accrual Cd Dt Str IF) TYPE(EXCINTFUN) FILE(PMA3REP)        AC1839060;
PARAMETER(RCD.Accrual_Code);
PARAMETER(RCD.Item_Structure_Type_Code);
PARAMETER(RCD.Item_Structure_Group_Code);
PARAMETER(RCD.Item_Structure_Class_Code);
PARAMETER(RCD.Accrual_Rate_Type);
PARAMETER(RCD.Accrual_Rate);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Create_Date);
PARAMETER(RCD.Create_Time);
PARAMETER(RCD.Create_User);
PARAMETER(RCD.Create_Program);
PARAMETER(RCD.Change_Date);
PARAMETER(RCD.Change_Time);
PARAMETER(RCD.Change_User);
PARAMETER(RCD.Change_Program);
PARAMETER(PAR.Status_Y_or_N);
{
 //?Execute internal function

 EXECUTE FUNCTION(Chg Accrual Cd Dt Str CH) TYPE(CHGOBJ) FILE(PMA3REP)           AC1825749;
 PARAMETER(PAR.Accrual_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Accrual_Rate_Type);
 PARAMETER(PAR.Accrual_Rate);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Create_Date);
 PARAMETER(PAR.Create_Time);
 PARAMETER(PAR.Create_User);
 PARAMETER(PAR.Create_Program);
 PARAMETER(PAR.Change_Date);
 PARAMETER(PAR.Change_Time);
 PARAMETER(PAR.Change_User);
 PARAMETER(PAR.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

 // PAR.Status - Y or N = CND.yes
 PAR.Status_Y_or_N = 'Y';

}


//?USER: Extra processing after DBF update

// Send information message - 'After confirm, press F3 to update customers.'
MESSAGE(USR3400 *INFO);

//?USER: Process command keys

//?Command Keys
CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

// Call program WW Item Default-Dsp   DF.
CALL PROGRAM(WW Item Default-Dsp   DF) ('PPJLDFR');

ENDIF;

//?USER: Exit program processing

//?Update Customers with this accrual code. (delete then create str
CASE;

// IF PAR.Status - Y or N is yes
IF PAR.Status_Y_or_N = 'Y';

// Send status message - 'Processing...'
MESSAGE(USR2303 *STATUS);

EXECUTE FUNCTION(Rtv & Crt Cust AccStr RT) TYPE(RTVOBJ) FILE(OMHOREP)           AC1839057;
PARAMETER(CTL.Accrual_Code);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV & Del Cust Accrls RT) TYPE(RTVOBJ) FILE(POC8REP)           AC1839058;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Accrual_Code);
 PARAMETER(DB1.CAH_Sequence_No);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Del Customer Accr Str DO) TYPE(DLTOBJ) FILE(POC8REP)           AC1676543;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(DB1.CAH_Sequence_No);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Class_Code);
 }

 EXECUTE FUNCTION(Rtv & Crt Cust AccStr RT) TYPE(RTVOBJ) FILE(PMA3REP)           AC1839047;
 PARAMETER(PAR.Accrual_Code);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.CAH_Sequence_No);
 PARAMETER(DB1.Period_Beginning_Date);
 PARAMETER(DB1.Period_Ending_Date);
 PARAMETER(DB1.Accrual_Rate_Type);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Crt Customer Accr Str CR) TYPE(CRTOBJ) FILE(POC8REP)           AC1676541;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(PAR.CAH_Sequence_No);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Accrual_Rate);
  PARAMETER(DB1.Accrual_Rate_Type);
  PARAMETER(LCL.CAS_Unused_Sts_1);
  PARAMETER(LCL.CAS_Unused_Sts_2);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.EDI_Status_1);
  PARAMETER(LCL.EDI_Status_2);
  PARAMETER(LCL.EDI_Status_3);
  PARAMETER('A');
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

}


ENDIF;

