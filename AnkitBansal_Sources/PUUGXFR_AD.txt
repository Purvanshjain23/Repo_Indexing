// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PUUGXFR
// ?Date: 14.08.2025 Time: 03:51:24
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Set Invoice Date = Current Date - 1 day
// LCL.Invoice Date = JOB.*Job date + CON.-1 *DAYS
LCL.Invoice_Date = DATEINCR(JOB.*Job_date '-1' 'DY' 1111111 'NONE' 'N' 1);

//?Read all Order Header TRG records positioning on Invoice Date
EXECUTE FUNCTION(Crt EDI ASN Nightly   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2200294;
PARAMETER(LCL.Invoice_Date);
{
 //?USER: Initialize routine

 //?Initialize Load ID to check for change in value
 // LCL.Load ID = CON.*ZERO
 LCL.Load_ID = *ZERO;

 //?USER: Process Data record

 //?Process record when Load ID changes
 CASE;

 // IF DB1.Load ID NE LCL.Load ID
 IF DB1.Load_ID <> LCL.Load_ID;

 //?Only process Regular orders
 CASE;

 // IF DB1.Order Type - Sales is Regular Order
 IF DB1.Order_Type_Sales = 'OR';

 //?Warehouse Must Be Live w/Carlisle and Whse is Internal.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV 1st Whse/Country   RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1426676;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(LCL.Ship_From_Warehouse);
 PARAMETER(NLL.Country_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 EXECUTE FUNCTION(Rtv Liv w/Carl,Locatn RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1790152;
 PARAMETER(LCL.Ship_From_Warehouse);
 PARAMETER(LCL.Warehouse_Location);
 PARAMETER(LCL.WHS_Live_with_Carlisle);
 PARAMETER(NLL.WHS_PFS_Interface);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Warehouse Location is Internal (Plant)
 IF LCL.Warehouse_Location = 'I';

 // AND LCL.WHS Live w/Carlisle is Yes
 AND LCL.WHS_Live_with_Carlisle = 'Y';

 EXECUTE FUNCTION(Rtv OH Rental Pallet  RT) TYPE(RTVOBJ) FILE(PUB7CPP)           AC2200300;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(NLL.Pallet_Type_1);
 PARAMETER(NLL.Pallet_Qty_1);
 PARAMETER(NLL.Pallet_Type_2);
 PARAMETER(NLL.Pallet_Qty_2);
 PARAMETER(NLL.Pallet_Type_3);
 PARAMETER(NLL.Pallet_Qty_3);
 PARAMETER(NLL.Pallet_Type_4);
 PARAMETER(NLL.Pallet_Qty_4);
 PARAMETER(LCL.EDI_ASN_Status);
 PARAMETER(LCL.Record_Status);
 PARAMETER(LCL.Rental_Pallet);
 PARAMETER(LCL.Rental_Pallet_Qty);
 {
  //?USER: Initialize routine

  //?This function retrieves the OH Pallet Table Shipped record for
  //?the Company and Order Number.  If any one of the four Pallet Types
  //?are for a rental pallet, then move that Pallet Type and Pallet Qty
  //?to the Rental Pallet and Rental Pallet Qty fields.
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  //?If Pallet Type 1 is entered, check if rental
  CASE;

  // IF NOT DB1.Pallet Type 1 is None
  IF ! DB1.Pallet_Type_1 = *BLANK;

  EXECUTE FUNCTION(Rtv Pallet Master     RT) TYPE(RTVOBJ) FILE(PUB6CPP)           AC2198688;
  PARAMETER(DB1.Pallet_Type_1);
  PARAMETER(NLL.PM_Description);
  PARAMETER(NLL.Misc_Tare_Weight);
  PARAMETER(LCL.Rental_Y_N);
  PARAMETER(NLL.Effective_Date);
  PARAMETER(NLL.Product_ID_GTIN);
  PARAMETER(NLL.Interchange_Code);
  PARAMETER(NLL.Class_Code);
  PARAMETER(NLL.EDI_Trading_Partner_No);
  PARAMETER(NLL.EDI_Whs_Duns_Number);
  PARAMETER(NLL.Contact_Name);
  PARAMETER(NLL.ASN_Ready_Y_N);
  PARAMETER(NLL.Status_1_Unused);
  PARAMETER(NLL.Status_2_Unused);
  PARAMETER(NLL.Text_75_Unused);
  PARAMETER(NLL.Record_Status);
  PARAMETER(NLL.Record_Found_USR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PAR.Record Found USR = CND.Record Not Found
   PAR.Record_Found_USR = 'N';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PAR.Record Found USR = CND.Record Found
   PAR.Record_Found_USR = 'Y';

  }

  //?If Pallet Type 1 is a rental, populate rental fields
  CASE;

  // IF LCL.Rental (Y/N) is Yes
  IF LCL.Rental_Y_N = 'Y';

  // PAR.Rental Pallet = DB1.Pallet Type 1
  PAR.Rental_Pallet = DB1.Pallet_Type_1;

  // PAR.Rental Pallet Qty = DB1.Pallet Qty 1
  PAR.Rental_Pallet_Qty = DB1.Pallet_Qty_1;

  QUIT;

  ENDIF;

  ENDIF;

  //?If Pallet Type 2 is entered, check if rental
  CASE;

  // IF NOT DB1.Pallet Type 2 is None
  IF ! DB1.Pallet_Type_2 = *BLANK;

  EXECUTE FUNCTION(Rtv Pallet Master     RT) TYPE(RTVOBJ) FILE(PUB6CPP)           AC2198688;
  PARAMETER(DB1.Pallet_Type_2);
  PARAMETER(NLL.PM_Description);
  PARAMETER(NLL.Misc_Tare_Weight);
  PARAMETER(LCL.Rental_Y_N);
  PARAMETER(NLL.Effective_Date);
  PARAMETER(NLL.Product_ID_GTIN);
  PARAMETER(NLL.Interchange_Code);
  PARAMETER(NLL.Class_Code);
  PARAMETER(NLL.EDI_Trading_Partner_No);
  PARAMETER(NLL.EDI_Whs_Duns_Number);
  PARAMETER(NLL.Contact_Name);
  PARAMETER(NLL.ASN_Ready_Y_N);
  PARAMETER(NLL.Status_1_Unused);
  PARAMETER(NLL.Status_2_Unused);
  PARAMETER(NLL.Text_75_Unused);
  PARAMETER(NLL.Record_Status);
  PARAMETER(NLL.Record_Found_USR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PAR.Record Found USR = CND.Record Not Found
   PAR.Record_Found_USR = 'N';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PAR.Record Found USR = CND.Record Found
   PAR.Record_Found_USR = 'Y';

  }

  //?If Pallet Type 1 is a rental, populate rental fields
  CASE;

  // IF LCL.Rental (Y/N) is Yes
  IF LCL.Rental_Y_N = 'Y';

  // PAR.Rental Pallet = DB1.Pallet Type 2
  PAR.Rental_Pallet = DB1.Pallet_Type_2;

  // PAR.Rental Pallet Qty = DB1.Pallet Qty 2
  PAR.Rental_Pallet_Qty = DB1.Pallet_Qty_2;

  QUIT;

  ENDIF;

  ENDIF;

  //?If Pallet Type 3 is entered, check if rental
  CASE;

  // IF NOT DB1.Pallet Type 3 is None
  IF ! DB1.Pallet_Type_3 = *BLANK;

  EXECUTE FUNCTION(Rtv Pallet Master     RT) TYPE(RTVOBJ) FILE(PUB6CPP)           AC2198688;
  PARAMETER(DB1.Pallet_Type_3);
  PARAMETER(NLL.PM_Description);
  PARAMETER(NLL.Misc_Tare_Weight);
  PARAMETER(LCL.Rental_Y_N);
  PARAMETER(NLL.Effective_Date);
  PARAMETER(NLL.Product_ID_GTIN);
  PARAMETER(NLL.Interchange_Code);
  PARAMETER(NLL.Class_Code);
  PARAMETER(NLL.EDI_Trading_Partner_No);
  PARAMETER(NLL.EDI_Whs_Duns_Number);
  PARAMETER(NLL.Contact_Name);
  PARAMETER(NLL.ASN_Ready_Y_N);
  PARAMETER(NLL.Status_1_Unused);
  PARAMETER(NLL.Status_2_Unused);
  PARAMETER(NLL.Text_75_Unused);
  PARAMETER(NLL.Record_Status);
  PARAMETER(NLL.Record_Found_USR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PAR.Record Found USR = CND.Record Not Found
   PAR.Record_Found_USR = 'N';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PAR.Record Found USR = CND.Record Found
   PAR.Record_Found_USR = 'Y';

  }

  //?If Pallet Type 3 is a rental, populate rental fields
  CASE;

  // IF LCL.Rental (Y/N) is Yes
  IF LCL.Rental_Y_N = 'Y';

  // PAR.Rental Pallet = DB1.Pallet Type 3
  PAR.Rental_Pallet = DB1.Pallet_Type_3;

  // PAR.Rental Pallet Qty = DB1.Pallet Qty 3
  PAR.Rental_Pallet_Qty = DB1.Pallet_Qty_3;

  QUIT;

  ENDIF;

  ENDIF;

  //?If Pallet Type 4 is entered, check if rental
  CASE;

  // IF NOT DB1.Pallet Type 4 is None
  IF ! DB1.Pallet_Type_4 = *BLANK;

  EXECUTE FUNCTION(Rtv Pallet Master     RT) TYPE(RTVOBJ) FILE(PUB6CPP)           AC2198688;
  PARAMETER(DB1.Pallet_Type_4);
  PARAMETER(NLL.PM_Description);
  PARAMETER(NLL.Misc_Tare_Weight);
  PARAMETER(LCL.Rental_Y_N);
  PARAMETER(NLL.Effective_Date);
  PARAMETER(NLL.Product_ID_GTIN);
  PARAMETER(NLL.Interchange_Code);
  PARAMETER(NLL.Class_Code);
  PARAMETER(NLL.EDI_Trading_Partner_No);
  PARAMETER(NLL.EDI_Whs_Duns_Number);
  PARAMETER(NLL.Contact_Name);
  PARAMETER(NLL.ASN_Ready_Y_N);
  PARAMETER(NLL.Status_1_Unused);
  PARAMETER(NLL.Status_2_Unused);
  PARAMETER(NLL.Text_75_Unused);
  PARAMETER(NLL.Record_Status);
  PARAMETER(NLL.Record_Found_USR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PAR.Record Found USR = CND.Record Not Found
   PAR.Record_Found_USR = 'N';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PAR.Record Found USR = CND.Record Found
   PAR.Record_Found_USR = 'Y';

  }

  //?If Pallet Type 4 is a rental, populate rental fields
  CASE;

  // IF LCL.Rental (Y/N) is Yes
  IF LCL.Rental_Y_N = 'Y';

  // PAR.Rental Pallet = DB1.Pallet Type 4
  PAR.Rental_Pallet = DB1.Pallet_Type_4;

  // PAR.Rental Pallet Qty = DB1.Pallet Qty 4
  PAR.Rental_Pallet_Qty = DB1.Pallet_Qty_4;

  QUIT;

  ENDIF;

  ENDIF;

 }

 //?If Rental Pallet found AND EDI ASN Sts <> Sent, then continue
 CASE;

 // IF NOT LCL.Rental Pallet is None
 IF ! LCL.Rental_Pallet = *BLANK;

 // AND NOT LCL.EDI ASN Status is Sent
 AND ! LCL.EDI_ASN_Status = 'S';

 //?Create ASN's for the current Load ID
 // Call program EXC EDI ASN by Load   XF.
 CALL PROGRAM(EXC EDI ASN by Load   XF) ('PUUFXFR');
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.Rental_Pallet);
 PARAMETER(LCL.Rental_Pallet_Qty);
 PARAMETER('N');
 PARAMETER('N');

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?USER: Exit processing

 // Execute function EXC *Pssr Error HandlerUS.
 EXECUTE FUNCTION(EXC *Pssr Error HandlerUS) TYPE(EXCUSRSRC) ('PVKXUFR');
 {
  *‚PROGRAM NAME. . . . . : THIS IS EXCUSRSRC-S031547-SR 3031547
  *‚PROGRAM DESCRIPTION . : SEND FAILURE EMAIL FOR JOB FAILURE.
  *‚DATE CREATED. . . . . : 06/16/2025
  *‚PROGRAMMER. . . . . . : JAGDISH MISTRY
  C           *PSSR     BEGSR
  *
  * CALL EMAIL PROGRAM HERE
  C                     MOVE *BLANKS   WKRTN   7
  C                     MOVEL'J'       WKQ8SC  1
  C                     MOVE 999       WKAIC3  30P
  C                     MOVE *ZEROS    WKC4NB  70P
  C                     MOVE *ZEROS    WKRMNB  70P
  C                     MOVE *BLANKS   WKYSU1250
  C                     MOVE *BLANKS   WKYTU1250
  C                     MOVE *BLANKS   WKQ9SC  1
  *
  C                     CALL 'PVKZXFR'
  C                     PARM           WKRTN
  C                     PARM           WKQ8SC
  C                     PARM           WKAIC3
  C                     PARM           WKC4NB
  C                     PARM           WKRMNB
  C                     PARM           WKYSU1
  C                     PARM           WKYTU1
  C                     PARM           WKQ9SC
  *
  C                     SETON                     LR
  C                     RETRN
  C                     ENDSR
 }

}


