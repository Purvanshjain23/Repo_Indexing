// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKIVXFR
// ?Date: 14.08.2025 Time: 02:51:51
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modifications and Comments
DO;

//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//?  length from 5 to 7.
ENDDO;

EXECUTE FUNCTION(HPE086 Live Scale Interf) TYPE(EXCINTFUN)                      AB1194880;
{
 //?Execute internal function

 //?03/31/97  SLM  LIVE SCALE INTERFACE Using the AS/400
 //?               replace all of the pc get weight routines
}


//?Get and Update the Weightment count
DO;

//?Get the Number Of Weightments
//?Upd the Number Of Weightments
// Call program Rtv Company Value Nbr XF.
CALL PROGRAM(Rtv Company Value Nbr XF) ('PDHGXFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER('HPEWGTCNT');
PARAMETER(WRK.System_Value_Numeric_USR);

// WRK.Weight Count Usr = WRK.System Value Numeric  USR + CON.1
WRK.Weight_Count_Usr = WRK.System_Value_Numeric_USR + 1;

// WRK.System Value Numeric  USR = WRK.Weight Count Usr
WRK.System_Value_Numeric_USR = WRK.Weight_Count_Usr;

// Call program RTV/Chg Co Val Num    XF.
CALL PROGRAM(RTV/Chg Co Val Num    XF) ('PDHFXFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER('HPEWGTCNT');
PARAMETER(WRK.System_Value_Numeric_USR);

ENDDO;

//?Get the Last Zero Time from the Company Value
DO;

//?Get the Last Zero Time
// Call program Rtv Company Value Nbr XF.
CALL PROGRAM(Rtv Company Value Nbr XF) ('PDHGXFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER('HPELSTZTM');
PARAMETER(WRK.System_Value_Numeric_USR);

// WRK.Last Zero Tme Cmp Vl Usr = WRK.System Value Numeric  USR
WRK.Last_Zero_Tme_Cmp_Vl_Usr = WRK.System_Value_Numeric_USR;

ENDDO;

//?Validation routine
DO;

// WRK.TSTM Message Seq = PAR.TSTM Message Seq
WRK.TSTM_Message_Seq = PAR.TSTM_Message_Seq;

// WRK.TSTM Message = CON.*BLANK
WRK.TSTM_Message = *BLANK;

// WRK.Validation Rule # Us = CND.Validation 1
WRK.Validation_Rule_#_Us = 00001;

// WRK.Validation Error # Usr = CND.No Error
WRK.Validation_Error_#_Usr = *ZERO;

// DOW WRK.Validation Rule # Us is Less then or = 6
DOW WRK.Validation_Rule_#_Us <= 00006;

//?Validation rules 1 - 6
CASE;

// IF WRK.Validation Rule # Us is Validation 1
IF WRK.Validation_Rule_#_Us = 00001;

//?          **** Validation Rules on # 1 **************
//?Validate to job date
CASE;

// IF PAR.TST Wgt Date EQ JOB.*Job date
IF PAR.TST_Wgt_Date = JOB.*Job_date;

// WRK.Validation Error # Usr = CND.No Error
WRK.Validation_Error_#_Usr = *ZERO;

//?Validate to job date
// IF *OTHERWISE
IF *OTHERWISE;

// Retrieve message - 'Live Scale date does not equal AS400 Date. AS400 Date = &1'
WRK.TSTM_Message = RTVMSG(PRK0710);
PARAMETER(JOB.*Job_date);

// WRK.Validation Error # Usr = CND.Validation 1
WRK.Validation_Error_#_Usr = 00001;

ENDIF;

//?Validation rules 1 - 6
// IF WRK.Validation Rule # Us is Validation 2
IF WRK.Validation_Rule_#_Us = 00002;

//?          **** Validation Rules on # 2 **************
// WRK.Time Diff Check usr = PAR.*Job time
WRK.Time_Diff_Check_usr = PAR.*Job_time;

//?calculate time difference
CASE;

// IF PAR.TST Wgt Time GE WRK.Time Diff Check usr
IF PAR.TST_Wgt_Time >= WRK.Time_Diff_Check_usr;

// WRK.Time Diff Usr = PAR.TST Wgt Time - WRK.Time Diff Check usr *HHMMSS
WRK.Time_Diff_Usr = TIMELAPSED(PAR.TST_Wgt_Time WRK.Time_Diff_Check_usr 'HS');

//?calculate time difference
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Time Diff Usr = WRK.Time Diff Check usr - PAR.TST Wgt Time *HHMMSS
WRK.Time_Diff_Usr = TIMELAPSED(WRK.Time_Diff_Check_usr PAR.TST_Wgt_Time 'HS');

ENDIF;

// WRK.TST Val Ms Tme Df  Val Us = PAR.TST Val Ms Tme Df  Val Us * CON.100 *
WRK.TST_Val_Ms_Tme_Df_Val_Us = PAR.TST_Val_Ms_Tme_Df_Val_Us * 100;

//?Validate the difference in time
CASE;

// IF WRK.Time Diff Usr GT WRK.TST Val Ms Tme Df  Val Us
IF WRK.Time_Diff_Usr > WRK.TST_Val_Ms_Tme_Df_Val_Us;

// WRK.TSPM Message = PAR.TST Val Ms Tme Df  Txt Us
WRK.TSPM_Message = PAR.TST_Val_Ms_Tme_Df_Txt_Us;

// Retrieve message - '&1 Jb Time=&2'
WRK.TSTM_Message = RTVMSG(PRK0721);
PARAMETER(WRK.TSPM_Message);
PARAMETER(PAR.*Job_time);

// WRK.Validation Error # Usr = CND.Validation 2
WRK.Validation_Error_#_Usr = 00002;

//?Validate the difference in time
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Validation Error # Usr = CND.No Error
WRK.Validation_Error_#_Usr = *ZERO;

ENDIF;

//?Validation rules 1 - 6
// IF WRK.Validation Rule # Us is Validation 3
IF WRK.Validation_Rule_#_Us = 00003;

// OR WRK.Validation Rule # Us is Validation 4
OR WRK.Validation_Rule_#_Us = 00004;

// WRK.Last Zero Time Lim Usr = WRK.Last Zero Tme Cmp Vl Usr + PAR.TST Val Ms LTme
WRK.Last_Zero_Time_Lim_Usr = TIMEINCR(WRK.Last_Zero_Tme_Cmp_Vl_Usr                                 +
PAR.TST_Val_Ms_LTme_Lm_Val_Us 'HS');

//?          **** Validation Rules on # 3  or Rule # 4 ******
CASE;

// IF PAR.TST Last Zero Time EQ WRK.Last Zero Tme Cmp Vl Usr
IF PAR.TST_Last_Zero_Time = WRK.Last_Zero_Tme_Cmp_Vl_Usr;

//?If equal validate for time limits or weightment limits
CASE;

// IF WRK.Validation Rule # Us is Validation 3
IF WRK.Validation_Rule_#_Us = 00003;

//?             **** Validation Rules on # 3 **************
//?calculate time difference for the limit check & validate
CASE;

// IF PAR.*Job time GE WRK.Last Zero Tme Cmp Vl Usr
IF PAR.*Job_time >= WRK.Last_Zero_Tme_Cmp_Vl_Usr;

//?Take last zero time and incm by limit
// WRK.Time Diff Usr = WRK.Last Zero Tme Cmp Vl Usr + PAR.TST Val Ms LTme Lm Val Us
WRK.Time_Diff_Usr = TIMEINCR(WRK.Last_Zero_Tme_Cmp_Vl_Usr PAR.TST_Val_Ms_LTme_Lm_Val_Us            +
'MN');

// WRK.TST Val Ms LTme Lm Val Us = PAR.TST Val Ms LTme Lm Val Us * CON.100 *
WRK.TST_Val_Ms_LTme_Lm_Val_Us = PAR.TST_Val_Ms_LTme_Lm_Val_Us * 100;

//?Job time is still greater then this is a error
CASE;

// IF PAR.*Job time GT WRK.Time Diff Usr
IF PAR.*Job_time > WRK.Time_Diff_Usr;

// Retrieve message - 'More than &1 minutes have passed since Last Zero Time=&2'
WRK.TSTM_Message = RTVMSG(PRK0713);
PARAMETER(PAR.TST_Val_Ms_LTme_Lm_Val_Us);
PARAMETER(WRK.Last_Zero_Tme_Cmp_Vl_Usr);

// WRK.Validation Error # Usr = CND.Validation 3
WRK.Validation_Error_#_Usr = 00003;

//?Job time is still greater then this is a error
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Validation Error # Usr = CND.No Error
WRK.Validation_Error_#_Usr = *ZERO;

ENDIF;

//?calculate time difference for the limit check & validate
// IF *OTHERWISE
IF *OTHERWISE;

//?job date is less incm job date by limit
// WRK.Time Diff Usr = PAR.*Job time + PAR.TST Val Ms LTme Lm Val Us *MINUTES
WRK.Time_Diff_Usr = TIMEINCR(PAR.*Job_time PAR.TST_Val_Ms_LTme_Lm_Val_Us 'MN');

// WRK.TST Val Ms LTme Lm Val Us = PAR.TST Val Ms LTme Lm Val Us * CON.100 *
WRK.TST_Val_Ms_LTme_Lm_Val_Us = PAR.TST_Val_Ms_LTme_Lm_Val_Us * 100;

//?Job time is still less then this is a error
CASE;

// IF PAR.*Job time LT WRK.Time Diff Usr
IF PAR.*Job_time < WRK.Time_Diff_Usr;

// Retrieve message - 'More than &1 minutes have passed since Last Zero Time=&2'
WRK.TSTM_Message = RTVMSG(PRK0713);
PARAMETER(PAR.TST_Val_Ms_LTme_Lm_Val_Us);
PARAMETER(WRK.Last_Zero_Tme_Cmp_Vl_Usr);

// WRK.Validation Error # Usr = CND.Validation 3
WRK.Validation_Error_#_Usr = 00003;

//?Job time is still less then this is a error
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Validation Error # Usr = CND.No Error
WRK.Validation_Error_#_Usr = *ZERO;

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?             **** Validation Rules on # 4 **************
//?Number of Weightments counted
CASE;

// IF WRK.Weight Count Usr GT PAR.TST Val Ms # Wt Lm Val Us
IF WRK.Weight_Count_Usr > PAR.TST_Val_Ms_#_Wt_Lm_Val_Us;

// WRK.TSTM Message = PAR.TST Val Ms # Wt Lm Txt Us
WRK.TSTM_Message = PAR.TST_Val_Ms_#_Wt_Lm_Txt_Us;

// WRK.Validation Error # Usr = CND.Validation 4
WRK.Validation_Error_#_Usr = 00004;

//?Number of Weightments counted
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Validation Error # Usr = CND.No Error
WRK.Validation_Error_#_Usr = *ZERO;

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?Update the Company Values for last zero time, and weightment counts
//?CHANGE LAST ZERO TIME = TO RECORD, and weight cnt = 1
// WRK.System Value Numeric  USR = PAR.TST Last Zero Time
WRK.System_Value_Numeric_USR = PAR.TST_Last_Zero_Time;

// Call program RTV/Chg Co Val Num    XF.
CALL PROGRAM(RTV/Chg Co Val Num    XF) ('PDHFXFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER('HPELSTZTM');
PARAMETER(WRK.System_Value_Numeric_USR);

// WRK.Weight Count Usr = CON.1
WRK.Weight_Count_Usr = 1;

// WRK.System Value Numeric  USR = WRK.Weight Count Usr
WRK.System_Value_Numeric_USR = WRK.Weight_Count_Usr;

// Call program RTV/Chg Co Val Num    XF.
CALL PROGRAM(RTV/Chg Co Val Num    XF) ('PDHFXFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER('HPEWGTCNT');
PARAMETER(WRK.System_Value_Numeric_USR);

ENDIF;

//?Validation rules 1 - 6
// IF WRK.Validation Rule # Us is Validation 5
IF WRK.Validation_Rule_#_Us = 00005;

//?**** Validation Rules on # 5 **************
//?Avg Live weight MIN
CASE;

// IF PAR.Avg Live Wgt Usr Rep LT PAR.TST VAl Ms ALW MiN Val Us
IF PAR.Avg_Live_Wgt_Usr_Rep < PAR.TST_VAl_Ms_ALW_MiN_Val_Us;

//?Message 6 Avg Live Weight should be above X.
// WRK.TSTM Message = PAR.TST Val Ms ALW Min Txt Us
WRK.TSTM_Message = PAR.TST_Val_Ms_ALW_Min_Txt_Us;

// WRK.Validation Error # Usr = CND.Validation 5
WRK.Validation_Error_#_Usr = 00005;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Validation Error # Usr = CND.No Error
WRK.Validation_Error_#_Usr = *ZERO;

ENDIF;

//?Validation rules 1 - 6
// IF WRK.Validation Rule # Us is Validation 6
IF WRK.Validation_Rule_#_Us = 00006;

//?**** Validation Rules on # 6 **************
//?Avg Live weight MAX
CASE;

// IF PAR.Avg Live Wgt Usr Rep GT PAR.TST VAl Ms ALW Max Val Us
IF PAR.Avg_Live_Wgt_Usr_Rep > PAR.TST_VAl_Ms_ALW_Max_Val_Us;

//?Message 6 Average Live Weight should be below x.
// WRK.TSTM Message = PAR.TST Val Ms ALW Max Txt Us
WRK.TSTM_Message = PAR.TST_Val_Ms_ALW_Max_Txt_Us;

// WRK.Validation Error # Usr = CND.Validation 6
WRK.Validation_Error_#_Usr = 00006;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Validation Error # Usr = CND.No Error
WRK.Validation_Error_#_Usr = *ZERO;

ENDIF;

ENDIF;

//?Error Routine
CASE;

// IF WRK.Validation Error # Usr is Error Ranage
IF WRK.Validation_Error_#_Usr >= 00001;
AND WRK.Validation_Error_#_Usr <= 00006;

// WRK.TSTM Message Seq = WRK.TSTM Message Seq + CON.1
WRK.TSTM_Message_Seq = WRK.TSTM_Message_Seq + 1;

EXECUTE FUNCTION(Crt Tattoo Scl Tck Msg CR) TYPE(CRTOBJ) FILE(PKDUCPP)          AB1194810;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TST_Sequence_Number);
PARAMETER(WRK.TSTM_Message_Seq);
PARAMETER(WRK.TSTM_Message);
PARAMETER(PAR.RS_User_Changed);
PARAMETER(PAR.RS_Date_Changed);
PARAMETER(PAR.RS_Time_Changed);
PARAMETER(PAR.RS_Record_Status);
PARAMETER(PAR.RS_Job);
PARAMETER(PAR.RS_Program);
PARAMETER(PAR.RS_User_Added);
PARAMETER(PAR.RS_Date_Added);
PARAMETER(PAR.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


// WRK.TSTM Message = CON.*BLANK
WRK.TSTM_Message = *BLANK;

// WRK.Validation Error # Usr = CND.No Error
WRK.Validation_Error_#_Usr = *ZERO;

ENDIF;

// WRK.Validation Rule # Us = WRK.Validation Rule # Us + CON.1
WRK.Validation_Rule_#_Us = WRK.Validation_Rule_#_Us + 1;

ENDDO;

// PAR.TSTM Message Seq = WRK.TSTM Message Seq
PAR.TSTM_Message_Seq = WRK.TSTM_Message_Seq;

ENDDO;

