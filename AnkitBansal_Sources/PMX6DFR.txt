// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMX6DFR
// ?Date: 14.08.2025 Time: 03:44:29
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?PIO 11/26/24 We are recompilng the program as index is used in SQL Query
EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(LCL.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);

// PGM.*Scan limit = CND.999999
PGM.*Scan_limit = 999999;

// PGM.*Subfile mode = CND.Folded
PGM.*Subfile_mode = 0;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// LCL.Display Prt Opt Pmt USR = CND.*YES
LCL.Display_Prt_Opt_Pmt_USR = *YES;

//?USER: Initialize subfile control

// CTL.A/R Customer Number = PAR.A/R Customer Number
CTL.AR_Customer_Number = PAR.AR_Customer_Number;

// CTL.Sales Route Code = PAR.Sales Route Code
CTL.Sales_Route_Code = PAR.Sales_Route_Code;

EXECUTE FUNCTION(Ship To Name          DRV) TYPE(DRVFLD)                        AC1573561;
PARAMETER(CTL.Ship_To_Name_DRV);
PARAMETER(CTL.AR_Customer_Number);

EXECUTE FUNCTION(Sales Route Desc      DRV) TYPE(DRVFLD)                        AC1575490;
PARAMETER(CTL.Sales_Route_Desc_DRV);
PARAMETER(CTL.Sales_Route_Code);

//?USER: Initialize subfile record from DBF record

EXECUTE FUNCTION(Rtv 1st 2 Lines of Nt RT) TYPE(RTVOBJ) FILE(PMEFCPP)           AC1899534;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER(RCD.ARHN_Note_Number);
PARAMETER(RCD.Note_Line_1);
PARAMETER(RCD.Note_Line_2);
PARAMETER(LCL.Status_Y_or_N);

//?Additional Notes
CASE;

// IF LCL.Status - Y or N is yes
IF LCL.Status_Y_or_N = 'Y';

// RCD.Text USR 4 = CON.+...
RCD.Text_USR_4 = '+...';

//?Additional Notes
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Text USR 4 = CON.*BLANK
RCD.Text_USR_4 = *BLANK;

ENDIF;

EXECUTE FUNCTION(Rtv/Val Profile       RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1900149;
PARAMETER(RCD.ARHN_Note_Created_By);
PARAMETER(NLL.User_Code_Model);
PARAMETER(RCD.Record_Found_USR);

//?USER: Process subfile control (Pre-confirm)

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?F6=Create
CASE;

// IF CTL.*CMD key is *Create
IF CTL.*CMD_key = '06';

EXECUTE FUNCTION(Rtv Next Sequence     RT) TYPE(RTVOBJ) FILE(PMEDCPP)           AC1898717;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Invoice_Number);
PARAMETER(CTL.Invoice_Suffix);
PARAMETER(LCL.ARHN_Note_Number);

// Call program Edt AR Note Hdr/Dtl   ET.
CALL PROGRAM(Edt AR Note Hdr/Dtl   ET) ('PMYCETR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Invoice_Number);
PARAMETER(CTL.Invoice_Suffix);
PARAMETER(LCL.ARHN_Note_Number);
PARAMETER(CTL.AR_Customer_Number);
PARAMETER(CTL.Sales_Route_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F23=Print Notes
CASE;

// IF CTL.*CMD key is CF23
IF CTL.*CMD_key = '23';

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Collection Notes');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('OMS');
PARAMETER(*MISSING);
PARAMETER(1);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
PGM.*Sbmjob_override_string = RTVMSG(USR2684);
PARAMETER('CLCTNNOTES');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(*JOBD_JOBD_JOBD);
PARAMETER(*JOBD);

// LCL.Copies NBR USR = CVTVAR(PAR.PRT Number of Copies)
LCL.Copies_NBR_USR = CVTVAR(PAR.PRT_Number_of_Copies);

// Call program Prt Collection Notes  CL.
SBMJOB;
CALL PROGRAM(Prt Collection Notes  CL) ('PMYFUPC');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Invoice_Number);
PARAMETER(CTL.Invoice_Suffix);
PARAMETER(CTL.ARHN_Note_Date);
PARAMETER(CTL.ARHN_Note_Time);
PARAMETER(CTL.ARHN_Note_Created_By);
PARAMETER(CTL.ARHN_Follow_Up_Date);
PARAMETER(CTL.ARHN_Follow_Up_Status);
PARAMETER(CTL.AR_Customer_Number);
PARAMETER(CTL.Sales_Route_Code);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(LCL.Copies_NBR_USR);
SBMJOBEND;

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?2=Edit
CASE;

// IF RCD.*SFLSEL is *Edit
IF RCD.*SFLSEL = '2'/'2';

CASE;

// IF RCD.ARHN Note Created By EQ JOB.*USER
IF RCD.ARHN_Note_Created_By = JOB.*USER;

// Call program Edt AR Note Hdr/Dtl   ET.
CALL PROGRAM(Edt AR Note Hdr/Dtl   ET) ('PMYCETR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER(RCD.ARHN_Note_Number);
PARAMETER(RCD.AR_Customer_Number);
PARAMETER(RCD.Sales_Route_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?4=Delete
CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

CASE;

// IF RCD.ARHN Note Created By EQ JOB.*USER
IF RCD.ARHN_Note_Created_By = JOB.*USER;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?6=Print Note
CASE;

// IF RCD.*SFLSEL is *Print
IF RCD.*SFLSEL = '6'/'6';

CASE;

// IF LCL.Display Prt Opt Pmt USR is *YES
IF LCL.Display_Prt_Opt_Pmt_USR = *YES;

// LCL.Display Prt Opt Pmt USR = CND.*NO
LCL.Display_Prt_Opt_Pmt_USR = *NO;

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Collection Notes');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('OMS');
PARAMETER(*MISSING);
PARAMETER(1);

ENDIF;

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
PGM.*Sbmjob_override_string = RTVMSG(USR2684);
PARAMETER('CLCTNNOTES');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(*JOBD_JOBD_JOBD);
PARAMETER(*JOBD);

// LCL.Copies NBR USR = CVTVAR(PAR.PRT Number of Copies)
LCL.Copies_NBR_USR = CVTVAR(PAR.PRT_Number_of_Copies);

// Call program Prt Collection Notes  CL.
SBMJOB;
CALL PROGRAM(Prt Collection Notes  CL) ('PMYFUPC');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER(RCD.ARHN_Note_Date);
PARAMETER(RCD.ARHN_Note_Time);
PARAMETER(RCD.ARHN_Note_Created_By);
PARAMETER(RCD.ARHN_Follow_Up_Date);
PARAMETER(RCD.ARHN_Follow_Up_Status);
PARAMETER(RCD.AR_Customer_Number);
PARAMETER(RCD.Sales_Route_Code);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(LCL.Copies_NBR_USR);
SBMJOBEND;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

ENDIF;

//?7=Complete
CASE;

// IF RCD.*SFLSEL is Option 7
IF RCD.*SFLSEL = '7'/'7';

CASE;

// IF RCD.ARHN Note Created By EQ JOB.*USER
IF RCD.ARHN_Note_Created_By = JOB.*USER;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?8=Display
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

// Call program Dsp Note Detail       DF.
CALL PROGRAM(Dsp Note Detail       DF) ('PMYBDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER(RCD.ARHN_Note_Number);
PARAMETER(RCD.ARHN_Note_Date);
PARAMETER(RCD.ARHN_Note_Time);
PARAMETER(RCD.ARHN_Note_Created_By);
PARAMETER(RCD.ARHN_Follow_Up_Date);
PARAMETER(RCD.ARHN_Follow_Up_Status);
PARAMETER(RCD.ARHN_Follow_Up_Cmplt_Date);
PARAMETER(RCD.ARHN_Follow_Up_Cmplt_Time);
PARAMETER(RCD.ARHN_Follow_Up_Cmplt_By);
PARAMETER(RCD.AR_Customer_Number);
PARAMETER(RCD.Sales_Route_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?9=Create Follow Up Note
CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

EXECUTE FUNCTION(Rtv Next Sequence     RT) TYPE(RTVOBJ) FILE(PMEDCPP)           AC1898717;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER(LCL.ARHN_Note_Number);

// Call program Edt AR Note Hdr/Dtl   ET.
CALL PROGRAM(Edt AR Note Hdr/Dtl   ET) ('PMYCETR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER(LCL.ARHN_Note_Number);
PARAMETER(RCD.AR_Customer_Number);
PARAMETER(RCD.Sales_Route_Code);

EXECUTE FUNCTION(Val Note Exists       RT) TYPE(RTVOBJ) FILE(PMEDCPP)           AC1900411;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER(LCL.ARHN_Note_Number);
PARAMETER(LCL.Record_Found_USR);

CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// PAR.ARHN Follow Up Status = CND.Completed
PAR.ARHN_Follow_Up_Status = 'C';

// PAR.ARHN Follow Up Cmplt Date = JOB.*Job date
PAR.ARHN_Follow_Up_Cmplt_Date = JOB.*Job_date;

// PAR.ARHN Follow Up Cmplt Time = JOB.*Job time
PAR.ARHN_Follow_Up_Cmplt_Time = JOB.*Job_time;

// PAR.ARHN Follow Up Cmplt By = JOB.*USER
PAR.ARHN_Follow_Up_Cmplt_By = JOB.*USER;

EXECUTE FUNCTION(Chg FollowUp Complete CH) TYPE(CHGOBJ) FILE(PMEDCPP)           AC1900412;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER(RCD.ARHN_Note_Number);
PARAMETER(PAR.ARHN_Follow_Up_Status);
PARAMETER(PAR.ARHN_Follow_Up_Cmplt_Date);
PARAMETER(PAR.ARHN_Follow_Up_Cmplt_Time);
PARAMETER(PAR.ARHN_Follow_Up_Cmplt_By);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Final processing (Pre-confirm)

// LCL.Display Prt Opt Pmt USR = CND.*YES
LCL.Display_Prt_Opt_Pmt_USR = *YES;

//?USER: Process subfile record (Post-confirm)

//?4=Delete
CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

EXECUTE FUNCTION(Del Note Hdr/Dtl      RT) TYPE(RTVOBJ) FILE(PMEDCPP)           AC1899720;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER(RCD.ARHN_Note_Number);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?7=Complete
CASE;

// IF RCD.*SFLSEL is Option 7
IF RCD.*SFLSEL = '7'/'7';

// LCL.ARHN Follow Up Status = CND.Completed
LCL.ARHN_Follow_Up_Status = 'C';

// LCL.ARHN Follow Up Cmplt Date = JOB.*Job date
LCL.ARHN_Follow_Up_Cmplt_Date = JOB.*Job_date;

// LCL.ARHN Follow Up Cmplt Time = JOB.*Job time
LCL.ARHN_Follow_Up_Cmplt_Time = JOB.*Job_time;

// LCL.ARHN Follow Up Cmplt By = JOB.*USER
LCL.ARHN_Follow_Up_Cmplt_By = JOB.*USER;

EXECUTE FUNCTION(Chg FollowUp Complete CH) TYPE(CHGOBJ) FILE(PMEDCPP)           AC1900412;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER(RCD.ARHN_Note_Number);
PARAMETER(LCL.ARHN_Follow_Up_Status);
PARAMETER(LCL.ARHN_Follow_Up_Cmplt_Date);
PARAMETER(LCL.ARHN_Follow_Up_Cmplt_Time);
PARAMETER(LCL.ARHN_Follow_Up_Cmplt_By);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

