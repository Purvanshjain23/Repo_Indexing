// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PWINPVR
// ?Date: 14.08.2025 Time: 02:56:35
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification history:
DO;

//? 4/17/2019 JBB E14820 - Add Site ID to Tattoo Difference report
//?                        Function modified to allow input to the
//?                        current Company Code being processed.
//? 2/19/2019 JBB E14234 - Repayment Enhancements Phase 2
//?                        Function created.  This screen displays the
//?                        current Payment Dates and Steps for all 4
//?                        companies.
ENDDO;

//?Determine Company to allow input on Repayment flag
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Allow Input-Guymon = CND.No
LCL.Allow_Input_Guymon = 'N';

// LCL.Allow Input-STF = CND.No
LCL.Allow_Input_STF = 'N';

// LCL.Allow Input-Triumph Foods = CND.No
LCL.Allow_Input_Triumph_Foods = 'N';

// LCL.Allow Input-TF2 = CND.No
LCL.Allow_Input_TF2 = 'N';

//?Allow Input for current Company
CASE;

// IF PAR.CC Company Number is SBD Farms of Guymon, Ok
IF PAR.CC_Company_Number = 360;

// LCL.Allow Input-Guymon = CND.Yes
LCL.Allow_Input_Guymon = 'Y';

//?Allow Input for current Company
// IF PAR.CC Company Number is Sioux City
IF PAR.CC_Company_Number = 440;

// LCL.Allow Input-STF = CND.Yes
LCL.Allow_Input_STF = 'Y';

//?Allow Input for current Company
// IF PAR.CC Company Number is Triumph Foods Market
IF PAR.CC_Company_Number = 960;

// LCL.Allow Input-Triumph Foods = CND.Yes
LCL.Allow_Input_Triumph_Foods = 'Y';

//?Allow Input for current Company
// IF PAR.CC Company Number is Triumph Foods-2
IF PAR.CC_Company_Number = 961;

// LCL.Allow Input-TF2 = CND.Yes
LCL.Allow_Input_TF2 = 'Y';

ENDIF;

ENDIF;

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(360);
PARAMETER('HPELIB');
PARAMETER(LCL.Library);

// Call program Rtv Curr Payment Date UP.
CALL PROGRAM(Rtv Curr Payment Date UP) ('PWIMUPC');
PARAMETER(360);
PARAMETER(LCL.Current_Payment_Date_GUY);
PARAMETER(LCL.Current_Payment_Step_GUY);
PARAMETER(LCL.Current_Repay_Status_GUY);
PARAMETER(LCL.Library);

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(440);
PARAMETER('HPELIB');
PARAMETER(LCL.Library);

// Call program Rtv Curr Payment Date UP.
CALL PROGRAM(Rtv Curr Payment Date UP) ('PWIMUPC');
PARAMETER(440);
PARAMETER(LCL.Current_Payment_Date_STF);
PARAMETER(LCL.Current_Payment_Step_STF);
PARAMETER(LCL.Current_Repay_Status_STF);
PARAMETER(LCL.Library);

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(960);
PARAMETER('HPELIB');
PARAMETER(LCL.Library);

// Call program Rtv Curr Payment Date UP.
CALL PROGRAM(Rtv Curr Payment Date UP) ('PWIMUPC');
PARAMETER(960);
PARAMETER(LCL.Current_Payment_Date_TF);
PARAMETER(LCL.Current_Payment_Step_TF);
PARAMETER(LCL.Current_Repay_Status_TF);
PARAMETER(LCL.Library);

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(961);
PARAMETER('HPELIB');
PARAMETER(LCL.Library);

// Call program Rtv Curr Payment Date UP.
CALL PROGRAM(Rtv Curr Payment Date UP) ('PWIMUPC');
PARAMETER(961);
PARAMETER(LCL.Current_Payment_Date_TF2);
PARAMETER(LCL.Current_Payment_Step_TF2);
PARAMETER(LCL.Current_Repay_Status_TF2);
PARAMETER(LCL.Library);

//?USER: Load screen

MOVE *ALL (To: DTL From: LCL);

//?USER: Validate relations

//?If any company's repayment sts flg changes, set Repay Sts flag
CASE;

// IF DTL.Current Repay Status-GUY EQ LCL.Current Repay Status-GUY
IF DTL.Current_Repay_Status_GUY = LCL.Current_Repay_Status_GUY;

// AND DTL.Current Repay Status-STF EQ LCL.Current Repay Status-STF
AND DTL.Current_Repay_Status_STF = LCL.Current_Repay_Status_STF;

// AND DTL.Current Repay Status-TF EQ LCL.Current Repay Status-TF
AND DTL.Current_Repay_Status_TF = LCL.Current_Repay_Status_TF;

// AND DTL.Current Repay Status-TF2 EQ LCL.Current Repay Status-TF2
AND DTL.Current_Repay_Status_TF2 = LCL.Current_Repay_Status_TF2;

RETURN;

ENDIF;

//?USER: User defined action

// LCL.PP Repayment Status = CND.Blank
LCL.PP_Repayment_Status = *BLANK;

//?If any company's repayment sts flg changes, set Repay Sts flag
CASE;

// IF DTL.Curr Pymt Date Repay-GUY NE LCL.Curr Pymt Date Repay-GUY
IF DTL.Current_Repay_Status_GUY <> LCL.Current_Repay_Status_GUY;

// LCL.PP Repayment Status = DTL.Current Repay Status-GUY
LCL.PP_Repayment_Status = DTL.Current_Repay_Status_GUY;

//?If any company's repayment sts flg changes, set Repay Sts flag
// IF DTL.Curr Pymt Date Repay-STF NE LCL.Curr Pymt Date Repay-STF
IF DTL.Current_Repay_Status_STF <> LCL.Current_Repay_Status_STF;

// LCL.PP Repayment Status = DTL.Current Repay Status-STF
LCL.PP_Repayment_Status = DTL.Current_Repay_Status_STF;

//?If any company's repayment sts flg changes, set Repay Sts flag
// IF DTL.Curr Pymt Date Repay-TF NE LCL.Curr Pymt Date Repay-TF
IF DTL.Current_Repay_Status_TF <> LCL.Current_Repay_Status_TF;

// LCL.PP Repayment Status = DTL.Current Repay Status-TF
LCL.PP_Repayment_Status = DTL.Current_Repay_Status_TF;

//?If any company's repayment sts flg changes, set Repay Sts flag
// IF DTL.Curr Pymt Date Repay-TF2 NE LCL.Curr Pymt Date Repay-TF2
IF DTL.Current_Repay_Status_TF2 <> LCL.Current_Repay_Status_TF2;

// LCL.PP Repayment Status = DTL.Current Repay Status-TF2
LCL.PP_Repayment_Status = DTL.Current_Repay_Status_TF2;

ENDIF;

//?If Repayment Status changed, update record
CASE;

// IF NOT LCL.PP Repayment Status is Blank
IF ! LCL.PP_Repayment_Status = *BLANK;

EXECUTE FUNCTION(Rtv Update Repay Sts  RT) TYPE(RTVOBJ) FILE(PKC4REP)           AB1350772;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(LCL.PP_Repayment_Status);
{
 //?USER: Process Data record

 //?If Repayment Status is blank, change it to No
 CASE;

 // IF PAR.PP Repayment Status is Blank
 IF PAR.PP_Repayment_Status = *BLANK;

 // PAR.PP Repayment Status = CND.No
 PAR.PP_Repayment_Status = 'N';

 ENDIF;

 EXECUTE FUNCTION(Chg Pymt Proc Parms   CH) TYPE(CHGOBJ) FILE(PKC4REP)           AB1327880;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.Pmt_Current_Payment_Date);
 PARAMETER(DB1.Pmt_Current_Payment_Step);
 PARAMETER(DB1.PP_Commission_Paym_Error);
 PARAMETER(DB1.PP_Payment_Error);
 PARAMETER(DB1.PP_Unused_Nbr_1);
 PARAMETER(PAR.PP_Repayment_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


ENDIF;

