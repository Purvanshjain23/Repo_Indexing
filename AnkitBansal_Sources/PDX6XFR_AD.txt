// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDX6XFR
// ?Date: 14.08.2025 Time: 03:36:30
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modifications and Comments
DO;

//?C14413 SLM Accumulate Weight from ClaimProduct to Order
//?     header memo weight - Order Weight Total
//?E3387 JJH 09/08/14 - Process Shipping Method
//? 1) Output Shipping Method from "RTV Claim Memo Info    RT"
//? 2) Update Shipping Method in 'CRT CB from Claim      RT' and
//?    "RT DB from Claim      RT".
//? 3) Update "CRT DB from Claim/Cust RT" to Update Shipping Method
//?    an A/R Claim Resale.
//?E4057 JJH 04/29/15 - Update OD Full Return to Plant in Order
//?  Detail from the AC Full Return to Plant in the A/R Claims.
//?  Note:  These fields are used to indicate if the whole order is
//?  returned to the plant, and this will be used in the UPD Auto
//?  Accrual routines regarding Flat Amount A/R Rate Type claims.
//?E4057 JJH 05/11/15 - Update OD Atch to Ord ActShpDte in Order
//?  Detail for the Credit Memo and Debit Memo.
ENDDO;

EXECUTE FUNCTION(CRT CB/DB from Claim   RT) TYPE(RTVOBJ) FILE(PDMKCPP)          AC1575035;
PARAMETER('A');
{
 //?USER: Process Data record

 //?Modifications and Comments
 DO;

 //?C14413 SLM 1/24/2019 Accumulate the Weight
 //?      From the Claim Product.
 //?E3387 JJH 09/08/14 - Process Shipping Method
 //? 1) Output Shipping Method from "RTV Claim Memo Info    RT"
 //? 2) Update Shipping Method in 'CRT CB from Claim      RT' and
 //?    "RT DB from Claim      RT".
 //? 3) Update "CRT DB from Claim/Cust RT" to Update Shipping Method
 //?    an A/R Claim Resale.
 //?E4057 JJH 04/29/15 - Update OD Full Return to Plant in Order
 //?  Detail from the AC Full Return to Plant in the A/R Claims.
 //?  Note:  These fields are used to indicate if the whole order is
 //?  returned to the plant, and this will be used in the UPD Auto
 //?  Accrual routines regarding Flat Amount A/R Rate Type claims.
 ENDDO;

 EXECUTE FUNCTION(RTV Claim Memo Info    RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1575037;
 PARAMETER(DB1.Claim_Company_Number);
 PARAMETER(DB1.Claim_Order_Number);
 PARAMETER(PAR.AR_Customer_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name);
 PARAMETER(PAR.Ship_To_Address_Line_1);
 PARAMETER(PAR.Ship_To_Address_Line_2);
 PARAMETER(PAR.Ship_To_Address_Line_3);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Ship_To_Zip_Postal_Code);
 PARAMETER(PAR.Bill_to_Customer);
 PARAMETER(PAR.Bill_to_Name);
 PARAMETER(PAR.Bill_to_Address_Line_1);
 PARAMETER(PAR.Bill_to_Address_Line_2);
 PARAMETER(PAR.Bill_to_Address_Line_3);
 PARAMETER(PAR.Bill_to_City);
 PARAMETER(PAR.Bill_to_State_Code);
 PARAMETER(PAR.Bill_to_Zip_Postal_Code);
 PARAMETER(PAR.Customer_Purchase_Order_#);
 PARAMETER(LCL.Shipping_Method);
 PARAMETER(PAR.Export_Status);
 PARAMETER(PAR.Manager_Level_Code);
 PARAMETER(PAR.VP_Level_Code);
 PARAMETER(PAR.Invoice_Number);
 PARAMETER(PAR.Broker_Order_Status);
 PARAMETER(PAR.HPB_Ship_to_Warehouse);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?1. Create Credit Memo(CB) from Claim Products.
 DO;

 //?E3387 JJH 09/08/14 - Update Shipping Method for Credit Memo
 //?E4057 JJH 04/29/15 - Populate OD Full Return to Plant
 //?E4057 JJH 04/29/15 - Populate OD Atch to Ord ActShpDte
 EXECUTE FUNCTION(CRT CB from Claim      RT) TYPE(RTVOBJ) FILE(PDMOCPP)          AC1575090;
 PARAMETER(DB1.Claim_Number);
 PARAMETER(PAR.AR_Customer_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name);
 PARAMETER(PAR.Ship_To_Address_Line_1);
 PARAMETER(PAR.Ship_To_Address_Line_2);
 PARAMETER(PAR.Ship_To_Address_Line_3);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Ship_To_Zip_Postal_Code);
 PARAMETER(PAR.Bill_to_Customer);
 PARAMETER(PAR.Bill_to_Name);
 PARAMETER(PAR.Bill_to_Address_Line_1);
 PARAMETER(PAR.Bill_to_Address_Line_2);
 PARAMETER(PAR.Bill_to_Address_Line_3);
 PARAMETER(PAR.Bill_to_City);
 PARAMETER(PAR.Bill_to_State_Code);
 PARAMETER(PAR.Bill_to_Zip_Postal_Code);
 PARAMETER(PAR.Customer_Purchase_Order_#);
 PARAMETER(PAR.Export_Status);
 PARAMETER(PAR.Manager_Level_Code);
 PARAMETER(PAR.VP_Level_Code);
 PARAMETER(PAR.Invoice_Number);
 PARAMETER(DB1.Salesperson_to_Rvw_Claim);
 PARAMETER(DB1.Claim_Order_Number);
 PARAMETER(PAR.Broker_Order_Status);
 PARAMETER(PAR.HPB_Ship_to_Warehouse);
 PARAMETER(LCL.Shipping_Method);
 PARAMETER(DB1.AC_Full_Return_to_Plant);
 {
  //?USER: Initialize routine

  //?Miscellaneous Fields.
  // PAR.BLANK = CON.*BLANK
  PAR.BLANK = *BLANK;

  //?Header Fields.
  // PAR.Header Created Flag USR = CND.No
  PAR.Header_Created_Flag_USR = 'N';

  // PAR.Order Value Total = CON.*ZERO
  PAR.Order_Value_Total = *ZERO;

  // PAR.Order Weight Total = CON.*ZERO
  PAR.Order_Weight_Total = *ZERO;

  //?Detail Fields.
  // PAR.Order Sequence Number = CON.*ZERO
  PAR.Order_Sequence_Number = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF DB1.Claim Item Amount is less than zero
  IF DB1.Claim_Item_Amount < *ZERO;

  //?Process CB.
  DO;

  CASE;

  // IF PAR.Header Created Flag USR is No
  IF PAR.Header_Created_Flag_USR = 'N';

  //?Create Memo Header Shell.
  DO;

  //?Get Next Order & Invoice Number.
  DO;

  EXECUTE FUNCTION(CHG Next Order/Invoice CH) TYPE(CHGOBJ) FILE(CAASREP)          AC1575045;
  PARAMETER(*ZERO);
  PARAMETER(PAR.Next_Order_Number);
  PARAMETER(PAR.Next_Invoice_Number);
  {
   //?USER: Processing before Data update

   //?*** Return Next Order & Invoice Number.
   // PAR.Next Order Number USR = DB1.Next Order Number
   PAR.Next_Order_Number_USR = DB1.Next_Order_Number;

   // PAR.Next Invoice Number USR = DB1.Next Invoice Number
   PAR.Next_Invoice_Number_USR = DB1.Next_Invoice_Number;

   //?*** Increment Order & Invoice Number by 1.
   // DB1.Next Order Number = DB1.Next Order Number + CON.1
   DB1.Next_Order_Number = DB1.Next_Order_Number + 1;

   // DB1.Next Invoice Number = DB1.Next Invoice Number + CON.1
   DB1.Next_Invoice_Number = DB1.Next_Invoice_Number + 1;

   //?*** Update Date & Time Stamp.
   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDDO;

  //?Determine Memo Tupe.
  DO;

  CASE;

  // IF DB1.Reason Code is Deviated Pricing Adj
  IF DB1.Reason_Code = 'DP';

  // OR DB1.Reason Code is Profit Sharing Adj
  OR DB1.Reason_Code = 'PS';

  //?New 10/7/04
  // PAR.Order Type - Sales = CND.Pricing Adjustment
  PAR.Order_Type_Sales = 'CP';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Order Type - Sales = CND.Credit Memo CB
  PAR.Order_Type_Sales = 'CB';

  ENDIF;

  ENDDO;

  //?Get Terms Code.
  DO;

  EXECUTE FUNCTION(RTV Cr/Dr Memo Dflts   RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1318069;
  PARAMETER(DB1.Claim_Company_Number);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Terms_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDDO;

  //?Format "Special Comment 1".
  DO;

  // PAR.Claim Number (Alpha) USR = CVTVAR(PAR.Claim Number)
  PAR.Claim_Number_Alpha_USR = CVTVAR(PAR.Claim_Number);

  // PAR.Special Comment 1 = CONCAT(CON.Claim #,PAR.Claim Number (Alpha) USR,CON.1)
  PAR.Special_Comment_1 = 'Claim #' + PAR.Claim_Number_Alpha_USR (1);

  ENDDO;

  //?E3387 JJH 09/08/14 - Update Shipping Method
  EXECUTE FUNCTION(CRT CB/DB from Claim   CR) TYPE(CRTOBJ) FILE(OPBFCPP)          AC1575047;
  PARAMETER(DB1.Claim_Company_Number);
  PARAMETER(PAR.Next_Order_Number);
  PARAMETER(PAR.Order_Type_Sales);
  PARAMETER(PAR.AR_Customer_Number);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Ship_To_Name);
  PARAMETER(PAR.Ship_To_Address_Line_1);
  PARAMETER(PAR.Ship_To_Address_Line_2);
  PARAMETER(PAR.Ship_To_Address_Line_3);
  PARAMETER(PAR.Ship_To_City);
  PARAMETER(PAR.Ship_To_State_Code);
  PARAMETER(PAR.Ship_To_Zip_Postal_Code);
  PARAMETER(PAR.Bill_to_Customer);
  PARAMETER(PAR.Bill_to_Name);
  PARAMETER(PAR.Bill_to_Address_Line_1);
  PARAMETER(PAR.Bill_to_Address_Line_2);
  PARAMETER(PAR.Bill_to_Address_Line_3);
  PARAMETER(PAR.Bill_to_City);
  PARAMETER(PAR.Bill_to_State_Code);
  PARAMETER(PAR.Bill_to_Zip_Postal_Code);
  PARAMETER(PAR.Customer_Purchase_Order_#);
  PARAMETER(JOB.*Job_date);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Terms_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER('N');
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(JOB.*USER);
  PARAMETER(JOB.*Job_date);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('N');
  PARAMETER('N');
  PARAMETER('N');
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER('A');
  PARAMETER('P');
  PARAMETER(PAR.Shipping_Method);
  PARAMETER(PAR.Export_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Invoice_Number);
  PARAMETER('N');
  PARAMETER('N');
  PARAMETER(*ZERO);
  PARAMETER(PAR.Special_Comment_1);
  PARAMETER(*BLANK);
  PARAMETER('Y');
  PARAMETER(PAR.Salesperson_to_Rvw_Claim);
  PARAMETER(PAR.Manager_Level_Code);
  PARAMETER(PAR.VP_Level_Code);
  PARAMETER(PAR.Claim_Order_Number);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Next_Invoice_Number);
  PARAMETER('CM');
  PARAMETER(*ZERO);
  PARAMETER('01');
  PARAMETER(PAR.BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(2);
  PARAMETER('F');
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(PAR.BLANK);
  PARAMETER(PAR.BLANK);
  PARAMETER(PAR.BLANK);
  PARAMETER(PAR.BLANK);
  PARAMETER(*BLANK);
  PARAMETER(PAR.BLANK);
  PARAMETER(PAR.BLANK);
  PARAMETER(*BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(PAR.Broker_Order_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(PAR.HPB_Ship_to_Warehouse);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(JOB.*Job_time);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Claim_Number);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Age Code = CND.Blank
   DB1.Age_Code = *BLANK;

   // Call program RTV System Date/Time   UP.
   CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
   PARAMETER(DB1.Date_of_Original_Entry);
   PARAMETER(DB1.Time_of_Original_Entry);

  }

  // PAR.Header Created Flag USR = CND.Yes
  PAR.Header_Created_Flag_USR = 'Y';

  ENDDO;

  ENDIF;

  //?Create Memo Detail.
  DO;

  //?-----------------
  //?slm 01/24/2019 SLM Accumulate the weight to the memo weight ..
  //?04/13/05 PKD OMS012 Changed to use the Claim Item Line Number
  //?                    instead of Order Sequence Number calculated
  //?04/15/05 SLM OMS012 Changed to use the Claim Item Line Number
  //?Create Order Sequence Number from DB1 Claim Item Line Number
  DO;

  // LCL.Order Sequence Number = DB1.Claim Item Line Number
  LCL.Order_Sequence_Number = DB1.Claim_Item_Line_Number;

  ENDDO;

  //?-----------------
  //?Get Company/Item Info/ PK0519 Price Code
  DO;

  //?Getting Orginal Order Info Prior to create of DB/CB
  EXECUTE FUNCTION(RTV Cr/Dr Memo Dflts   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1575082;
  PARAMETER(DB1.Claim_Company_Number);
  PARAMETER(DB1.Claim_Item_Code);
  PARAMETER(PAR.Order_Desc_Line_One);
  PARAMETER(PAR.Order_Desc_Line_Two);
  PARAMETER(PAR.U_M_Ordered);
  PARAMETER(PAR.Unit_Weight_Ordered_U_M);
  PARAMETER(PAR.Item_Level);
  PARAMETER(PAR.Production_Date_Control);
  PARAMETER(PAR.Catch_Weight_Status);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(LCL.Default_Warehouse);
  PARAMETER(LCL.Item_Target_Price);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?041505 SLM   - Add getting order from the file instead of Par
  //?               a/r claim product file is now has the order number
  EXECUTE FUNCTION(RTV Warehouse Code RT) TYPE(RTVOBJ) FILE(OPBGWKP)              AC1577257;
  PARAMETER(DB1.Claim_Company_Number);
  PARAMETER(DB1.Claim_Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Price_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?slm 11/28/2006 - Get the Accounting Company if blank from order detail
  //?WAREHOUSE CODE get from the Order Detail if not found
  CASE;

  // IF PAR.Warehouse Code is Warehouse Code Blank
  IF PAR.Warehouse_Code = *BLANK;

  EXECUTE FUNCTION(RTV OD Whs/ShpCo/AccCo RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1801010;
  PARAMETER(DB1.Claim_Company_Number);
  PARAMETER(DB1.Claim_Order_Number);
  PARAMETER(LCL.Warehouse_Code);
  PARAMETER(NLL.Shipping_Company);
  PARAMETER(NLL.Accounting_Company);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Detail Line Status is Not cancelled
   IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

   EXECUTE FUNCTION(RTV OD Whs/ShpCo/AccCo RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1801011;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.Shipping_Company);
   PARAMETER(PAR.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // PAR.Warehouse Code = DB1.Warehouse Code
   PAR.Warehouse_Code = DB1.Warehouse_Code;

   QUIT;

   ENDIF;

  }

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  ENDIF;

  CASE;

  // IF DB1.Affect Pricing is yes
  IF DB1.Affect_Pricing = 'Y';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Price Code = CON.*ZERO
  PAR.Price_Code = 0;

  ENDIF;

  ENDDO;

  //?11/03/2006 slm * out
  //?Determine Price Method.
  DO;

  CASE;

  // IF DB1.Claim Item Weight is Equal to zero
  IF DB1.Claim_Item_Weight = *ZERO;

  // OR DB1.Claim Item Unit Price is Equal zero
  OR DB1.Claim_Item_Unit_Price = *ZERO;

  // PAR.Price Method Code = CND.Extended
  PAR.Price_Method_Code = 'EXT';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Price Method Code = CND.Manual
  PAR.Price_Method_Code = 'MAN';

  ENDIF;

  ENDDO;

  //?Calculate the Absolute Value of select Claim fields.
  DO;

  //?ABS(Claim Item Quantity)
  CASE;

  // IF DB1.Claim Item Quantity is Less than zero
  IF DB1.Claim_Item_Quantity < *ZERO;

  // PAR.Claim Item Quantity = DB1.Claim Item Quantity * CON.-1 *
  PAR.Claim_Item_Quantity = DB1.Claim_Item_Quantity * -1;

  //?ABS(Claim Item Quantity)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Claim Item Quantity = DB1.Claim Item Quantity
  PAR.Claim_Item_Quantity = DB1.Claim_Item_Quantity;

  ENDIF;

  //?ABS(Claim Item Weight)
  CASE;

  // IF DB1.Claim Item Weight is Less than zero
  IF DB1.Claim_Item_Weight < *ZERO;

  // PAR.Claim Item Weight = DB1.Claim Item Weight * CON.-1 *
  PAR.Claim_Item_Weight = DB1.Claim_Item_Weight * -1;

  //?ABS(Claim Item Weight)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Claim Item Weight = DB1.Claim Item Weight
  PAR.Claim_Item_Weight = DB1.Claim_Item_Weight;

  ENDIF;

  //?ABS(Claim Item Unit Price)
  CASE;

  // IF DB1.Claim Item Unit Price is Less than zero
  IF DB1.Claim_Item_Unit_Price < *ZERO;

  // PAR.Claim Item Unit Price = DB1.Claim Item Unit Price * CON.-1 *
  PAR.Claim_Item_Unit_Price = DB1.Claim_Item_Unit_Price * -1;

  //?ABS(Claim Item Unit Price)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Claim Item Unit Price = DB1.Claim Item Unit Price
  PAR.Claim_Item_Unit_Price = DB1.Claim_Item_Unit_Price;

  ENDIF;

  //?ABS(Claim Item Amount)
  CASE;

  // IF DB1.Claim Item Amount is less than zero
  IF DB1.Claim_Item_Amount < *ZERO;

  // PAR.Claim Item Amount = DB1.Claim Item Amount * CON.-1 *
  PAR.Claim_Item_Amount = DB1.Claim_Item_Amount * -1;

  //?ABS(Claim Item Amount)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Claim Item Amount = DB1.Claim Item Amount
  PAR.Claim_Item_Amount = DB1.Claim_Item_Amount;

  ENDIF;

  ENDDO;

  //?Determine Credit Memo Amount Fields.
  DO;

  CASE;

  // IF PAR.Price Method Code is Manual
  IF PAR.Price_Method_Code = 'MAN';

  //?Price Method = MAN.
  DO;

  //?Quantity.
  DO;

  CASE;

  // IF PAR.Claim Item Quantity is Equal to zero
  IF PAR.Claim_Item_Quantity = *ZERO;

  // PAR.Quantity Ordered = CON.1
  PAR.Quantity_Ordered = 1;

  // PAR.Quantity Shipped Total = CON.1
  PAR.Quantity_Shipped_Total = 1;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Quantity Ordered = PAR.Claim Item Quantity
  PAR.Quantity_Ordered = PAR.Claim_Item_Quantity;

  // PAR.Quantity Shipped Total = PAR.Claim Item Quantity
  PAR.Quantity_Shipped_Total = PAR.Claim_Item_Quantity;

  ENDIF;

  ENDDO;

  //?Weight.
  DO;

  // PAR.Weight Ordered = PAR.Claim Item Weight
  PAR.Weight_Ordered = PAR.Claim_Item_Weight;

  // PAR.Weight Shipped Total = PAR.Claim Item Weight
  PAR.Weight_Shipped_Total = PAR.Claim_Item_Weight;

  ENDDO;

  //?Price.
  DO;

  // PAR.Price Overage Override = PAR.Claim Item Unit Price
  PAR.Price_Overage_Override = PAR.Claim_Item_Unit_Price;

  // PAR.Unit Price = PAR.Claim Item Unit Price
  PAR.Unit_Price = PAR.Claim_Item_Unit_Price;

  // PAR.Unit Price Ordered U/M = PAR.Claim Item Amount / PAR.Quantity Shipped Total
  PAR.Unit_Price_Ordered_U_M = PAR.Claim_Item_Amount / PAR.Quantity_Shipped_Total 'H';

  ENDDO;

  ENDDO;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Price Method = EXT.
  DO;

  //?Quantity.
  // PAR.Quantity Ordered = CON.*ZERO
  PAR.Quantity_Ordered = *ZERO;

  // PAR.Quantity Shipped Total = CON.*ZERO
  PAR.Quantity_Shipped_Total = *ZERO;

  //?Weight.
  // PAR.Weight Ordered = CON.*ZERO
  PAR.Weight_Ordered = *ZERO;

  // PAR.Weight Shipped Total = CON.*ZERO
  PAR.Weight_Shipped_Total = *ZERO;

  //?Price.
  // PAR.U/M - Base Price = CON.*BLANK
  PAR.U_M_Base_Price = *BLANK;

  // PAR.Price Overage Override = PAR.Claim Item Amount
  PAR.Price_Overage_Override = PAR.Claim_Item_Amount;

  // PAR.Unit Price = CON.*ZERO
  PAR.Unit_Price = *ZERO;

  // PAR.Unit Price Ordered U/M = CON.*ZERO
  PAR.Unit_Price_Ordered_U_M = *ZERO;

  ENDDO;

  ENDIF;

  ENDDO;

  //?-----------------
  //?04/13/05 PKD OMS012 Changed to use the Claim Item Line Number
  //?                    instead of Order Sequence Number calculated
  //?                    earlier.
  //?08/30/05 SLM TFS010 PASS the CLM TF Exempt to the Order Detail
  //?11/03/2006 slm affect flags from db1
  //?E4057 JJH 04/29/15 - Populate OD Full Return to Plant
  //?E4057 JJH 05/11/15 - Populate OD Atch to Ord ActShpDte
  EXECUTE FUNCTION(Rtv Actual Ship Date  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1444831;
  PARAMETER(DB1.Claim_Company_Number);
  PARAMETER(DB1.Claim_Order_Number);
  PARAMETER(NLL.Ship_To_Name);
  PARAMETER(NLL.Ship_To_City);
  PARAMETER(NLL.Ship_To_State_Code);
  PARAMETER(LCL.OD_Atch_to_Ord_ActShpDte);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(CRT CB/DB from Claim   CR) TYPE(CRTOBJ) FILE(OPBGWKP)          AC1575079;
  PARAMETER(DB1.Claim_Company_Number);
  PARAMETER(PAR.Next_Order_Number);
  PARAMETER(LCL.Order_Sequence_Number);
  PARAMETER(1);
  PARAMETER(DB1.Claim_Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER('E');
  PARAMETER(*ZERO);
  PARAMETER(PAR.Claim_Item_Amount);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Claim_Item_Amount);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Price_Method_Code);
  PARAMETER(PAR.Price_Overage_Override);
  PARAMETER(*ZERO);
  PARAMETER('P');
  PARAMETER(*ZERO);
  PARAMETER(DB1.UOM_Primary_Dft);
  PARAMETER(PAR.U_M_Ordered);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Order_Desc_Line_One);
  PARAMETER(PAR.Order_Desc_Line_Two);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Catch_Weight_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Production_Date_Control);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Quantity_Ordered);
  PARAMETER(PAR.Weight_Ordered);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Quantity_Shipped_Total);
  PARAMETER(PAR.Weight_Shipped_Total);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Unit_Price);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Unit_Price_Ordered_U_M);
  PARAMETER(PAR.Unit_Weight_Ordered_U_M);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.Affect_Inventory_Status);
  PARAMETER(DB1.Affect_Sales_Doll_Status);
  PARAMETER(DB1.Affect_Sales_Pnds_Status);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Level);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(JOB.*Job_date);
  PARAMETER(JOB.*USER);
  PARAMETER(*BLANK);
  PARAMETER('01');
  PARAMETER(DB1.Reason_Code);
  PARAMETER(PAR.Salesperson_to_Rvw_Claim);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(DB1.Affect_Trade_Fund);
  PARAMETER(DB1.Affect_Commission);
  PARAMETER(DB1.Affect_Pricing);
  PARAMETER(*BLANK);
  PARAMETER(DB1.Clm_Item_TF_Exempt_Code);
  PARAMETER(*BLANK);
  PARAMETER(WRK.Blank_for_3_USR);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Price_Code);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Item_Target_Price);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(PAR.OD_Clm_Full_Return_to_Plt);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.OD_Atch_to_Ord_ActShpDte);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Age Code = CND.Blank
   DB1.Age_Code = *BLANK;

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?04/13/05 PKD OMS012 Update Claim Memo Number in the A/R Claim
  //?                    Product with the Memo Number.
  // PAR.Claim Memo Number = PAR.Next Order Number
  PAR.Claim_Memo_Number = PAR.Next_Order_Number;

  EXECUTE FUNCTION(Chg A/R Claim MemoNumbCH) TYPE(CHGOBJ) FILE(PDMOCPP)           AC1733224;
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.Claim_Item_Line_Number);
  PARAMETER(PAR.Claim_Memo_Number);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

  //?-----------------
  //?Sum Order Amount & Weight for Header.
  DO;

  // PAR.Order Value Total = PAR.Order Value Total + PAR.Claim Item Amount
  PAR.Order_Value_Total = PAR.Order_Value_Total + PAR.Claim_Item_Amount;

  //?SLM - 01/24/2019
  //?SLM - Correction to accumulate the claim weight
  // PAR.Order Weight Total = PAR.Order Weight Total + PAR.Claim Item Weight
  PAR.Order_Weight_Total = PAR.Order_Weight_Total + PAR.Claim_Item_Weight;

  ENDDO;

  ENDDO;

  ENDDO;

  ENDIF;

  //?USER: Exit processing

  CASE;

  // IF PAR.Header Created Flag USR is Yes
  IF PAR.Header_Created_Flag_USR = 'Y';

  //?Update Order Total & Weight on Header file.
  DO;

  EXECUTE FUNCTION(CHG Order Value & Wght CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1575085;
  PARAMETER(DB1.Claim_Company_Number);
  PARAMETER(PAR.Next_Order_Number);
  PARAMETER(PAR.Order_Value_Total);
  PARAMETER(PAR.Order_Weight_Total);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // Call program TRG Order Hdr CHG Trig XT.
   CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Type_Sales);
   PARAMETER(DB1.AR_Customer_Number);
   PARAMETER(DB1.Ship_To_Customer);
   PARAMETER(DB1.Ship_To_Name);
   PARAMETER(DB1.Ship_To_Address_Line_1);
   PARAMETER(DB1.Ship_To_Address_Line_2);
   PARAMETER(DB1.Ship_To_Address_Line_3);
   PARAMETER(DB1.Ship_To_City);
   PARAMETER(DB1.Ship_To_State_Code);
   PARAMETER(DB1.Ship_To_Zip_Postal_Code);
   PARAMETER(DB1.Bill_to_Customer);
   PARAMETER(DB1.Bill_to_Name);
   PARAMETER(DB1.Bill_to_Address_Line_1);
   PARAMETER(DB1.Bill_to_Address_Line_2);
   PARAMETER(DB1.Bill_to_Address_Line_3);
   PARAMETER(DB1.Bill_to_City);
   PARAMETER(DB1.Bill_to_State_Code);
   PARAMETER(DB1.Bill_to_Zip_Postal_Code);
   PARAMETER(DB1.Customer_Purchase_Order_#);
   PARAMETER(DB1.Order_Date);
   PARAMETER(DB1.Requested_Ship_Date);
   PARAMETER(DB1.Actual_Shipped_Date);
   PARAMETER(DB1.Cancel_Date);
   PARAMETER(DB1.Terms_Code);
   PARAMETER(DB1.Special_Instructions);
   PARAMETER(DB1.Special_Instructions_2);
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Comment_Print_Acknowledge);
   PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
   PARAMETER(DB1.Comment_Print_Pick_Slip);
   PARAMETER(DB1.Comment_Print_Ship_Doc);
   PARAMETER(DB1.Reason_Code);
   PARAMETER(DB1.Order_in_Use);
   PARAMETER(DB1.Header_Status);
   PARAMETER(DB1.Header_Status_Last);
   PARAMETER(DB1.Order_Type_Print_Status);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.User_Original_Entry);
   PARAMETER(DB1.Date_of_Original_Entry);
   PARAMETER(DB1.Order_Value_Total);
   PARAMETER(DB1.Order_Weight_Total);
   PARAMETER(DB1.Credit_Hold);
   PARAMETER(DB1.Production_Hold);
   PARAMETER(DB1.New_Customer_Hold);
   PARAMETER(DB1.Requested_Delivery_Date);
   PARAMETER(DB1.Requested_Delivery_Time);
   PARAMETER(DB1.Accounts_Receiv_Ent_1);
   PARAMETER(DB1.Accounts_Receiv_Ent_2);
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
   PARAMETER(DB1.Rated_Freight);
   PARAMETER(DB1.LTL_Flag);
   PARAMETER(DB1.Price_Audit);
   PARAMETER(DB1.Price_Status);
   PARAMETER(DB1.Shipping_Method);
   PARAMETER(DB1.Export_Status);
   PARAMETER(DB1.Palletize);
   PARAMETER(DB1.Shrink_Wrap);
   PARAMETER(DB1.Slip_Sheet);
   PARAMETER(DB1.Age_Code);
   PARAMETER(DB1.Reefer_Temperature);
   PARAMETER(DB1.Load_Type);
   PARAMETER(DB1.Attach_to_Invoice_Number);
   PARAMETER(DB1.Load_Plan_Order);
   PARAMETER(DB1.Print_Pick_Slip);
   PARAMETER(DB1.Resell_Reference_Number);
   PARAMETER(DB1.Special_Comment_1);
   PARAMETER(DB1.Special_Comment_2);
   PARAMETER(DB1.Affect_Auto_Accruals);
   PARAMETER(DB1.Sales_Route_Code);
   PARAMETER(DB1.Manager_Level_Code);
   PARAMETER(DB1.VP_Level_Code);
   PARAMETER(DB1.Attach_to_Order_Number);
   PARAMETER(DB1.Reason_for_Price_Audit);
   PARAMETER(DB1.Invoice_Number);
   PARAMETER(DB1.Invoice_Suffix);
   PARAMETER(DB1.Invoice_Date);
   PARAMETER(DB1.Event_Code);
   PARAMETER(DB1.Trans_Contol_AS400_Plant);
   PARAMETER(DB1.Modified_Flag);
   PARAMETER(DB1.A_R_order_Value_Total);
   PARAMETER(DB1.Billing_Activity_Type);
   PARAMETER(DB1.Block_Order_Flag);
   PARAMETER(DB1.Order_Certification_Flag);
   PARAMETER(DB1.Invoice_Order_Value_Tot);
   PARAMETER(DB1.Process_Sts_for_3C);
   PARAMETER(DB1.Order_Conf_Fax_Sts);
   PARAMETER(DB1.Manifest_Fax_Sts);
   PARAMETER(DB1.Invoice_Fax_Sts);
   PARAMETER(DB1.Transfer_in_Storage_Ind);
   PARAMETER(DB1.Email_Cust_On_Order_Ship);
   PARAMETER(DB1.Order_Emailed);
   PARAMETER(DB1.Export_Docs_Go_w_Driver);
   PARAMETER(DB1.Shipping_Temp_Code_C_F);
   PARAMETER(DB1.Broker_Order_Status);
   PARAMETER(DB1.Air_Freight_Order);
   PARAMETER(DB1.Order_Requires_Review);
   PARAMETER(DB1.OH_Load_Plan_Ready);
   PARAMETER(DB1.Export_USDA_Approved);
   PARAMETER(DB1.HPB_Ship_to_Warehouse);
   PARAMETER(DB1.OH_TF_Exempt_Code);
   PARAMETER(DB1.OH_Appt_Confirmation_Dt);
   PARAMETER(DB1.JPN_Invoice_Issuance_Date);
   PARAMETER(DB1.Load_Actual_Shipped_Date);
   PARAMETER(DB1.Load_BOL_Complete_Date);
   PARAMETER(DB1.Load_Truck_Departure_Date);
   PARAMETER(DB1.Maximum_Gross_Weight);
   PARAMETER(DB1.Time_of_Original_Entry);
   PARAMETER(DB1.OH_Appt_Confirmation_Tm);
   PARAMETER(DB1.Load_BOL_Complete_Time);
   PARAMETER(DB1.Load_Truck_Departure_Time);
   PARAMETER(DB1.Act_Frt_Reference_Amount);
   PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
   PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
   PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
   PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
   PARAMETER(DB1.Claim_Number);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);

  }

  CASE;

  // IF DB1.Clm Item TF Exempt Code is Pre Commencement
  IF DB1.Clm_Item_TF_Exempt_Code = 'PC';

  // LCL.OH TF Exempt Code = DB1.Clm Item TF Exempt Code
  LCL.OH_TF_Exempt_Code = DB1.Clm_Item_TF_Exempt_Code;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.OH TF Exempt Code = CND.Blank
  LCL.OH_TF_Exempt_Code = *BLANK;

  // LCL.Error Flag            USR = CND.Blank
  LCL.Error_Flag_USR = *BLANK;

  // Call program Exc Calc Ord ExemptCd XF.
  CALL PROGRAM(Exc Calc Ord ExemptCd XF) ('PPSLXFR');
  PARAMETER(DB1.Claim_Company_Number);
  PARAMETER(PAR.Next_Order_Number);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(LCL.OH_TF_Exempt_Code);
  PARAMETER(LCL.Error_Flag_USR);
  PARAMETER('N');

  ENDIF;

  EXECUTE FUNCTION(Chg TF Exempt         CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1750711;
  PARAMETER(DB1.Claim_Company_Number);
  PARAMETER(PAR.Next_Order_Number);
  PARAMETER(LCL.OH_TF_Exempt_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDDO;

  ENDIF;

 }

 ENDDO;

 //?2. Create  Debit Memo(DB) from Claim Products.
 DO;

 EXECUTE FUNCTION(CRT DB from Claim      RT) TYPE(RTVOBJ) FILE(PDMOCPP)          AC1575040;
 PARAMETER(DB1.Claim_Number);
 PARAMETER(PAR.AR_Customer_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name);
 PARAMETER(PAR.Ship_To_Address_Line_1);
 PARAMETER(PAR.Ship_To_Address_Line_2);
 PARAMETER(PAR.Ship_To_Address_Line_3);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Ship_To_Zip_Postal_Code);
 PARAMETER(PAR.Bill_to_Customer);
 PARAMETER(PAR.Bill_to_Name);
 PARAMETER(PAR.Bill_to_Address_Line_1);
 PARAMETER(PAR.Bill_to_Address_Line_2);
 PARAMETER(PAR.Bill_to_Address_Line_3);
 PARAMETER(PAR.Bill_to_City);
 PARAMETER(PAR.Bill_to_State_Code);
 PARAMETER(PAR.Bill_to_Zip_Postal_Code);
 PARAMETER(PAR.Customer_Purchase_Order_#);
 PARAMETER(PAR.Export_Status);
 PARAMETER(PAR.Manager_Level_Code);
 PARAMETER(PAR.VP_Level_Code);
 PARAMETER(PAR.Invoice_Number);
 PARAMETER(DB1.Salesperson_to_Rvw_Claim);
 PARAMETER(DB1.Claim_Order_Number);
 PARAMETER(PAR.Broker_Order_Status);
 PARAMETER(PAR.HPB_Ship_to_Warehouse);
 PARAMETER(LCL.Shipping_Method);
 PARAMETER(DB1.AC_Full_Return_to_Plant);
 {
  //?USER: Initialize routine

  //?Miscellaneous Fields.
  // PAR.BLANK = CON.*BLANK
  PAR.BLANK = *BLANK;

  //?Header Fields.
  // PAR.Header Created Flag USR = CND.No
  PAR.Header_Created_Flag_USR = 'N';

  // PAR.Order Value Total = CON.*ZERO
  PAR.Order_Value_Total = *ZERO;

  // PAR.Order Weight Total = CON.*ZERO
  PAR.Order_Weight_Total = *ZERO;

  //?Detail Fields.
  // PAR.Order Sequence Number = CON.*ZERO
  PAR.Order_Sequence_Number = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF DB1.Claim Item Amount is greater than zero
  IF DB1.Claim_Item_Amount > *ZERO;

  //?Process DB.
  DO;

  CASE;

  // IF PAR.Header Created Flag USR is No
  IF PAR.Header_Created_Flag_USR = 'N';

  //?Create Memo Header Shell.
  DO;

  //?Get Next Order & Invoice Number.
  DO;

  EXECUTE FUNCTION(CHG Next Order/Invoice CH) TYPE(CHGOBJ) FILE(CAASREP)          AC1575045;
  PARAMETER(*ZERO);
  PARAMETER(PAR.Next_Order_Number);
  PARAMETER(PAR.Next_Invoice_Number);
  {
   //?USER: Processing before Data update

   //?*** Return Next Order & Invoice Number.
   // PAR.Next Order Number USR = DB1.Next Order Number
   PAR.Next_Order_Number_USR = DB1.Next_Order_Number;

   // PAR.Next Invoice Number USR = DB1.Next Invoice Number
   PAR.Next_Invoice_Number_USR = DB1.Next_Invoice_Number;

   //?*** Increment Order & Invoice Number by 1.
   // DB1.Next Order Number = DB1.Next Order Number + CON.1
   DB1.Next_Order_Number = DB1.Next_Order_Number + 1;

   // DB1.Next Invoice Number = DB1.Next Invoice Number + CON.1
   DB1.Next_Invoice_Number = DB1.Next_Invoice_Number + 1;

   //?*** Update Date & Time Stamp.
   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDDO;

  //?Determine Memo Tupe.
  DO;

  CASE;

  // IF DB1.Reason Code is Deviated Pricing Adj
  IF DB1.Reason_Code = 'DP';

  // OR DB1.Reason Code is Profit Sharing Adj
  OR DB1.Reason_Code = 'PS';

  //?New 10/7/04
  // PAR.Order Type - Sales = CND.Deviated Price Adj
  PAR.Order_Type_Sales = 'DP';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Order Type - Sales = CND.Debit Memo DB
  PAR.Order_Type_Sales = 'DB';

  ENDIF;

  ENDDO;

  //?Get Terms Code.
  DO;

  EXECUTE FUNCTION(RTV Cr/Dr Memo Dflts   RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1318069;
  PARAMETER(DB1.Claim_Company_Number);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Terms_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDDO;

  //?Format "Special Comment 1".
  DO;

  // PAR.Claim Number (Alpha) USR = CVTVAR(PAR.Claim Number)
  PAR.Claim_Number_Alpha_USR = CVTVAR(PAR.Claim_Number);

  // PAR.Special Comment 1 = CONCAT(CON.Claim #,PAR.Claim Number (Alpha) USR,CON.1)
  PAR.Special_Comment_1 = 'Claim #' + PAR.Claim_Number_Alpha_USR (1);

  ENDDO;

  EXECUTE FUNCTION(CRT CB/DB from Claim   CR) TYPE(CRTOBJ) FILE(OPBFCPP)          AC1575047;
  PARAMETER(DB1.Claim_Company_Number);
  PARAMETER(PAR.Next_Order_Number);
  PARAMETER(PAR.Order_Type_Sales);
  PARAMETER(PAR.AR_Customer_Number);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Ship_To_Name);
  PARAMETER(PAR.Ship_To_Address_Line_1);
  PARAMETER(PAR.Ship_To_Address_Line_2);
  PARAMETER(PAR.Ship_To_Address_Line_3);
  PARAMETER(PAR.Ship_To_City);
  PARAMETER(PAR.Ship_To_State_Code);
  PARAMETER(PAR.Ship_To_Zip_Postal_Code);
  PARAMETER(PAR.Bill_to_Customer);
  PARAMETER(PAR.Bill_to_Name);
  PARAMETER(PAR.Bill_to_Address_Line_1);
  PARAMETER(PAR.Bill_to_Address_Line_2);
  PARAMETER(PAR.Bill_to_Address_Line_3);
  PARAMETER(PAR.Bill_to_City);
  PARAMETER(PAR.Bill_to_State_Code);
  PARAMETER(PAR.Bill_to_Zip_Postal_Code);
  PARAMETER(PAR.Customer_Purchase_Order_#);
  PARAMETER(JOB.*Job_date);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Terms_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER('N');
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(JOB.*USER);
  PARAMETER(JOB.*Job_date);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('N');
  PARAMETER('N');
  PARAMETER('N');
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER('A');
  PARAMETER('P');
  PARAMETER(PAR.Shipping_Method);
  PARAMETER(PAR.Export_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Invoice_Number);
  PARAMETER('N');
  PARAMETER('N');
  PARAMETER(*ZERO);
  PARAMETER(PAR.Special_Comment_1);
  PARAMETER(*BLANK);
  PARAMETER('Y');
  PARAMETER(PAR.Salesperson_to_Rvw_Claim);
  PARAMETER(PAR.Manager_Level_Code);
  PARAMETER(PAR.VP_Level_Code);
  PARAMETER(PAR.Claim_Order_Number);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Next_Invoice_Number);
  PARAMETER('DM');
  PARAMETER(*ZERO);
  PARAMETER('01');
  PARAMETER(PAR.BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(3);
  PARAMETER('F');
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(PAR.BLANK);
  PARAMETER(PAR.BLANK);
  PARAMETER(PAR.BLANK);
  PARAMETER(PAR.BLANK);
  PARAMETER(*BLANK);
  PARAMETER(PAR.BLANK);
  PARAMETER(PAR.BLANK);
  PARAMETER(*BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(PAR.Broker_Order_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(PAR.HPB_Ship_to_Warehouse);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(JOB.*Job_time);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Claim_Number);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Age Code = CND.Blank
   DB1.Age_Code = *BLANK;

   // Call program RTV System Date/Time   UP.
   CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
   PARAMETER(DB1.Date_of_Original_Entry);
   PARAMETER(DB1.Time_of_Original_Entry);

  }

  // PAR.Header Created Flag USR = CND.Yes
  PAR.Header_Created_Flag_USR = 'Y';

  ENDDO;

  ENDIF;

  //?Create Memo Detail.
  DO;

  //?-----------------
  //?04/13/05 PKD OMS012 Changed to use the Claim Item Line Number
  //?                    instead of Order Sequence Number calculated
  //?04/15/05 SLM OMS012 Changed to use the Claim Item Line Number
  //?Create Order Sequence Number from DB1 Claim Item Line Number
  DO;

  // LCL.Order Sequence Number = DB1.Claim Item Line Number
  LCL.Order_Sequence_Number = DB1.Claim_Item_Line_Number;

  ENDDO;

  //?Get Company/Item Info./ PK0519 Price code
  DO;

  //?Getting Orginal Order Info Prior to create of DB/CB
  EXECUTE FUNCTION(RTV Cr/Dr Memo Dflts   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1575082;
  PARAMETER(DB1.Claim_Company_Number);
  PARAMETER(DB1.Claim_Item_Code);
  PARAMETER(PAR.Order_Desc_Line_One);
  PARAMETER(PAR.Order_Desc_Line_Two);
  PARAMETER(PAR.U_M_Ordered);
  PARAMETER(PAR.Unit_Weight_Ordered_U_M);
  PARAMETER(PAR.Item_Level);
  PARAMETER(PAR.Production_Date_Control);
  PARAMETER(PAR.Catch_Weight_Status);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(LCL.Default_Warehouse);
  PARAMETER(LCL.Item_Target_Price);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?041505 SLM   - Add getting order from the file instead of Par
  //?               a/r claim product file is now has the order number
  EXECUTE FUNCTION(RTV Warehouse Code RT) TYPE(RTVOBJ) FILE(OPBGWKP)              AC1577257;
  PARAMETER(DB1.Claim_Company_Number);
  PARAMETER(DB1.Claim_Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Price_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?slm 11/28/2006 - Get the Accounting Company if blank from order detail
  //?Purva - note check with purva....on the price from the ware house code
  //?also the claim order number on the claim product is what we want
  //?Purva - note check with purva....
  //?WAREHOUSE CODE get from the Order Detail if not found
  CASE;

  // IF PAR.Warehouse Code is Warehouse Code Blank
  IF PAR.Warehouse_Code = *BLANK;

  EXECUTE FUNCTION(RTV OD Whs/ShpCo/AccCo RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1801010;
  PARAMETER(DB1.Claim_Company_Number);
  PARAMETER(DB1.Claim_Order_Number);
  PARAMETER(LCL.Warehouse_Code);
  PARAMETER(NLL.Shipping_Company);
  PARAMETER(NLL.Accounting_Company);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Detail Line Status is Not cancelled
   IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

   EXECUTE FUNCTION(RTV OD Whs/ShpCo/AccCo RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1801011;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.Shipping_Company);
   PARAMETER(PAR.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // PAR.Warehouse Code = DB1.Warehouse Code
   PAR.Warehouse_Code = DB1.Warehouse_Code;

   QUIT;

   ENDIF;

  }

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  ENDIF;

  CASE;

  // IF DB1.Affect Pricing is yes
  IF DB1.Affect_Pricing = 'Y';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Price Code = CON.*ZERO
  PAR.Price_Code = *ZERO;

  ENDIF;

  ENDDO;

  //?11/02/06 SLM * out the Affect Flags
  //?Determine Price Method.
  DO;

  CASE;

  // IF DB1.Claim Item Weight is Equal to zero
  IF DB1.Claim_Item_Weight = *ZERO;

  // OR DB1.Claim Item Unit Price is Equal zero
  OR DB1.Claim_Item_Unit_Price = *ZERO;

  // PAR.Price Method Code = CND.Extended
  PAR.Price_Method_Code = 'EXT';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Price Method Code = CND.Manual
  PAR.Price_Method_Code = 'MAN';

  ENDIF;

  ENDDO;

  //?Calculate the Absolute Value of select Claim fields.
  DO;

  //?ABS(Claim Item Quantity)
  CASE;

  // IF DB1.Claim Item Quantity is Less than zero
  IF DB1.Claim_Item_Quantity < *ZERO;

  // PAR.Claim Item Quantity = DB1.Claim Item Quantity * CON.-1 *
  PAR.Claim_Item_Quantity = DB1.Claim_Item_Quantity * -1;

  //?ABS(Claim Item Quantity)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Claim Item Quantity = DB1.Claim Item Quantity
  PAR.Claim_Item_Quantity = DB1.Claim_Item_Quantity;

  ENDIF;

  //?ABS(Claim Item Weight)
  CASE;

  // IF DB1.Claim Item Weight is Less than zero
  IF DB1.Claim_Item_Weight < *ZERO;

  // PAR.Claim Item Weight = DB1.Claim Item Weight * CON.-1 *
  PAR.Claim_Item_Weight = DB1.Claim_Item_Weight * -1;

  //?ABS(Claim Item Weight)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Claim Item Weight = DB1.Claim Item Weight
  PAR.Claim_Item_Weight = DB1.Claim_Item_Weight;

  ENDIF;

  //?ABS(Claim Item Unit Price)
  CASE;

  // IF DB1.Claim Item Unit Price is Less than zero
  IF DB1.Claim_Item_Unit_Price < *ZERO;

  // PAR.Claim Item Unit Price = DB1.Claim Item Unit Price * CON.-1 *
  PAR.Claim_Item_Unit_Price = DB1.Claim_Item_Unit_Price * -1;

  //?ABS(Claim Item Unit Price)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Claim Item Unit Price = DB1.Claim Item Unit Price
  PAR.Claim_Item_Unit_Price = DB1.Claim_Item_Unit_Price;

  ENDIF;

  //?ABS(Claim Item Amount)
  CASE;

  // IF DB1.Claim Item Amount is less than zero
  IF DB1.Claim_Item_Amount < *ZERO;

  // PAR.Claim Item Amount = DB1.Claim Item Amount * CON.-1 *
  PAR.Claim_Item_Amount = DB1.Claim_Item_Amount * -1;

  //?ABS(Claim Item Amount)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Claim Item Amount = DB1.Claim Item Amount
  PAR.Claim_Item_Amount = DB1.Claim_Item_Amount;

  ENDIF;

  ENDDO;

  //?Determine Debit Memo Amount Fields.
  DO;

  CASE;

  // IF PAR.Price Method Code is Manual
  IF PAR.Price_Method_Code = 'MAN';

  //?Price Method = MAN.
  DO;

  //?Quantity.
  DO;

  CASE;

  // IF PAR.Claim Item Quantity is Equal to zero
  IF PAR.Claim_Item_Quantity = *ZERO;

  // PAR.Quantity Ordered = CON.1
  PAR.Quantity_Ordered = 1;

  // PAR.Quantity Shipped Total = CON.1
  PAR.Quantity_Shipped_Total = 1;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Quantity Ordered = PAR.Claim Item Quantity
  PAR.Quantity_Ordered = PAR.Claim_Item_Quantity;

  // PAR.Quantity Shipped Total = PAR.Claim Item Quantity
  PAR.Quantity_Shipped_Total = PAR.Claim_Item_Quantity;

  ENDIF;

  ENDDO;

  //?Weight.
  DO;

  // PAR.Weight Ordered = PAR.Claim Item Weight
  PAR.Weight_Ordered = PAR.Claim_Item_Weight;

  // PAR.Weight Shipped Total = PAR.Claim Item Weight
  PAR.Weight_Shipped_Total = PAR.Claim_Item_Weight;

  ENDDO;

  //?Price.
  DO;

  // PAR.Price Overage Override = PAR.Claim Item Unit Price
  PAR.Price_Overage_Override = PAR.Claim_Item_Unit_Price;

  // PAR.Unit Price = PAR.Claim Item Unit Price
  PAR.Unit_Price = PAR.Claim_Item_Unit_Price;

  // PAR.Unit Price Ordered U/M = PAR.Claim Item Amount / PAR.Quantity Shipped Total
  PAR.Unit_Price_Ordered_U_M = PAR.Claim_Item_Amount / PAR.Quantity_Shipped_Total 'H';

  ENDDO;

  ENDDO;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Price Method = EXT.
  DO;

  //?Quantity.
  // PAR.Quantity Ordered = CON.*ZERO
  PAR.Quantity_Ordered = *ZERO;

  // PAR.Quantity Shipped Total = CON.*ZERO
  PAR.Quantity_Shipped_Total = *ZERO;

  //?Weight.
  // PAR.Weight Ordered = CON.*ZERO
  PAR.Weight_Ordered = *ZERO;

  // PAR.Weight Shipped Total = CON.*ZERO
  PAR.Weight_Shipped_Total = *ZERO;

  //?Price.
  // PAR.U/M - Base Price = CON.*BLANK
  PAR.U_M_Base_Price = *BLANK;

  // PAR.Price Overage Override = PAR.Claim Item Amount
  PAR.Price_Overage_Override = PAR.Claim_Item_Amount;

  // PAR.Unit Price = CON.*ZERO
  PAR.Unit_Price = *ZERO;

  // PAR.Unit Price Ordered U/M = CON.*ZERO
  PAR.Unit_Price_Ordered_U_M = *ZERO;

  ENDDO;

  ENDIF;

  ENDDO;

  //?04/13/05 PKD OMS012 Changed to use the Claim Item Line Number
  //?                    instead of Order Sequence Number calculated
  //?                    earlier.
  //?08/30/05 SLM  TFS010 Pass the order detail from the claim order dtl
  //?              the TF exempt
  //?11/02/06 SLM  change the affect flags to be db1 and not par
  //?E4057 JJH 04/29/15 - Populate OD Full Return to Plant
  //?E4057 JJH 05/11/15 - Populate OD Atch to Ord ActShpDte
  EXECUTE FUNCTION(Rtv Actual Ship Date  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1444831;
  PARAMETER(DB1.Claim_Company_Number);
  PARAMETER(DB1.Claim_Order_Number);
  PARAMETER(NLL.Ship_To_Name);
  PARAMETER(NLL.Ship_To_City);
  PARAMETER(NLL.Ship_To_State_Code);
  PARAMETER(LCL.OD_Atch_to_Ord_ActShpDte);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(CRT CB/DB from Claim   CR) TYPE(CRTOBJ) FILE(OPBGWKP)          AC1575079;
  PARAMETER(DB1.Claim_Company_Number);
  PARAMETER(PAR.Next_Order_Number);
  PARAMETER(LCL.Order_Sequence_Number);
  PARAMETER(1);
  PARAMETER(DB1.Claim_Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER('E');
  PARAMETER(*ZERO);
  PARAMETER(PAR.Claim_Item_Amount);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Claim_Item_Amount);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Price_Method_Code);
  PARAMETER(PAR.Price_Overage_Override);
  PARAMETER(*ZERO);
  PARAMETER('P');
  PARAMETER(*ZERO);
  PARAMETER(DB1.UOM_Primary_Dft);
  PARAMETER(PAR.U_M_Ordered);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Order_Desc_Line_One);
  PARAMETER(PAR.Order_Desc_Line_Two);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Catch_Weight_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Production_Date_Control);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Quantity_Ordered);
  PARAMETER(PAR.Weight_Ordered);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Quantity_Shipped_Total);
  PARAMETER(PAR.Weight_Shipped_Total);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Unit_Price);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Unit_Price_Ordered_U_M);
  PARAMETER(PAR.Unit_Weight_Ordered_U_M);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.Affect_Inventory_Status);
  PARAMETER(DB1.Affect_Sales_Doll_Status);
  PARAMETER(DB1.Affect_Sales_Pnds_Status);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Level);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(JOB.*Job_date);
  PARAMETER(JOB.*USER);
  PARAMETER(*BLANK);
  PARAMETER('01');
  PARAMETER(DB1.Reason_Code);
  PARAMETER(PAR.Salesperson_to_Rvw_Claim);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(DB1.Affect_Trade_Fund);
  PARAMETER(DB1.Affect_Commission);
  PARAMETER(DB1.Affect_Pricing);
  PARAMETER(*BLANK);
  PARAMETER(DB1.Clm_Item_TF_Exempt_Code);
  PARAMETER(*BLANK);
  PARAMETER(WRK.Blank_for_3_USR);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Price_Code);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Item_Target_Price);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(PAR.OD_Clm_Full_Return_to_Plt);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.OD_Atch_to_Ord_ActShpDte);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Age Code = CND.Blank
   DB1.Age_Code = *BLANK;

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?04/13/05 PKD OMS012 Update Claim Memo Number in the A/R Claim
  //?                    Product with the Memo Number.
  // PAR.Claim Memo Number = PAR.Next Order Number
  PAR.Claim_Memo_Number = PAR.Next_Order_Number;

  EXECUTE FUNCTION(Chg A/R Claim MemoNumbCH) TYPE(CHGOBJ) FILE(PDMOCPP)           AC1733224;
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.Claim_Item_Line_Number);
  PARAMETER(PAR.Claim_Memo_Number);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

  //?Sum Order Amount & Weight for Header.
  DO;

  // PAR.Order Value Total = PAR.Order Value Total + PAR.Claim Item Amount
  PAR.Order_Value_Total = PAR.Order_Value_Total + PAR.Claim_Item_Amount;

  //?slm 01/24/2019   - Accumulate the weight
  // PAR.Order Weight Total = PAR.Order Weight Total + PAR.Claim Item Weight
  PAR.Order_Weight_Total = PAR.Order_Weight_Total + PAR.Claim_Item_Weight;

  ENDDO;

  ENDDO;

  ENDDO;

  ENDIF;

  //?USER: Exit processing

  CASE;

  // IF PAR.Header Created Flag USR is Yes
  IF PAR.Header_Created_Flag_USR = 'Y';

  //?Update Order Total & Weight on Header file.
  DO;

  EXECUTE FUNCTION(CHG Order Value & Wght CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1575085;
  PARAMETER(DB1.Claim_Company_Number);
  PARAMETER(PAR.Next_Order_Number);
  PARAMETER(PAR.Order_Value_Total);
  PARAMETER(PAR.Order_Weight_Total);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // Call program TRG Order Hdr CHG Trig XT.
   CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Type_Sales);
   PARAMETER(DB1.AR_Customer_Number);
   PARAMETER(DB1.Ship_To_Customer);
   PARAMETER(DB1.Ship_To_Name);
   PARAMETER(DB1.Ship_To_Address_Line_1);
   PARAMETER(DB1.Ship_To_Address_Line_2);
   PARAMETER(DB1.Ship_To_Address_Line_3);
   PARAMETER(DB1.Ship_To_City);
   PARAMETER(DB1.Ship_To_State_Code);
   PARAMETER(DB1.Ship_To_Zip_Postal_Code);
   PARAMETER(DB1.Bill_to_Customer);
   PARAMETER(DB1.Bill_to_Name);
   PARAMETER(DB1.Bill_to_Address_Line_1);
   PARAMETER(DB1.Bill_to_Address_Line_2);
   PARAMETER(DB1.Bill_to_Address_Line_3);
   PARAMETER(DB1.Bill_to_City);
   PARAMETER(DB1.Bill_to_State_Code);
   PARAMETER(DB1.Bill_to_Zip_Postal_Code);
   PARAMETER(DB1.Customer_Purchase_Order_#);
   PARAMETER(DB1.Order_Date);
   PARAMETER(DB1.Requested_Ship_Date);
   PARAMETER(DB1.Actual_Shipped_Date);
   PARAMETER(DB1.Cancel_Date);
   PARAMETER(DB1.Terms_Code);
   PARAMETER(DB1.Special_Instructions);
   PARAMETER(DB1.Special_Instructions_2);
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Comment_Print_Acknowledge);
   PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
   PARAMETER(DB1.Comment_Print_Pick_Slip);
   PARAMETER(DB1.Comment_Print_Ship_Doc);
   PARAMETER(DB1.Reason_Code);
   PARAMETER(DB1.Order_in_Use);
   PARAMETER(DB1.Header_Status);
   PARAMETER(DB1.Header_Status_Last);
   PARAMETER(DB1.Order_Type_Print_Status);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.User_Original_Entry);
   PARAMETER(DB1.Date_of_Original_Entry);
   PARAMETER(DB1.Order_Value_Total);
   PARAMETER(DB1.Order_Weight_Total);
   PARAMETER(DB1.Credit_Hold);
   PARAMETER(DB1.Production_Hold);
   PARAMETER(DB1.New_Customer_Hold);
   PARAMETER(DB1.Requested_Delivery_Date);
   PARAMETER(DB1.Requested_Delivery_Time);
   PARAMETER(DB1.Accounts_Receiv_Ent_1);
   PARAMETER(DB1.Accounts_Receiv_Ent_2);
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
   PARAMETER(DB1.Rated_Freight);
   PARAMETER(DB1.LTL_Flag);
   PARAMETER(DB1.Price_Audit);
   PARAMETER(DB1.Price_Status);
   PARAMETER(DB1.Shipping_Method);
   PARAMETER(DB1.Export_Status);
   PARAMETER(DB1.Palletize);
   PARAMETER(DB1.Shrink_Wrap);
   PARAMETER(DB1.Slip_Sheet);
   PARAMETER(DB1.Age_Code);
   PARAMETER(DB1.Reefer_Temperature);
   PARAMETER(DB1.Load_Type);
   PARAMETER(DB1.Attach_to_Invoice_Number);
   PARAMETER(DB1.Load_Plan_Order);
   PARAMETER(DB1.Print_Pick_Slip);
   PARAMETER(DB1.Resell_Reference_Number);
   PARAMETER(DB1.Special_Comment_1);
   PARAMETER(DB1.Special_Comment_2);
   PARAMETER(DB1.Affect_Auto_Accruals);
   PARAMETER(DB1.Sales_Route_Code);
   PARAMETER(DB1.Manager_Level_Code);
   PARAMETER(DB1.VP_Level_Code);
   PARAMETER(DB1.Attach_to_Order_Number);
   PARAMETER(DB1.Reason_for_Price_Audit);
   PARAMETER(DB1.Invoice_Number);
   PARAMETER(DB1.Invoice_Suffix);
   PARAMETER(DB1.Invoice_Date);
   PARAMETER(DB1.Event_Code);
   PARAMETER(DB1.Trans_Contol_AS400_Plant);
   PARAMETER(DB1.Modified_Flag);
   PARAMETER(DB1.A_R_order_Value_Total);
   PARAMETER(DB1.Billing_Activity_Type);
   PARAMETER(DB1.Block_Order_Flag);
   PARAMETER(DB1.Order_Certification_Flag);
   PARAMETER(DB1.Invoice_Order_Value_Tot);
   PARAMETER(DB1.Process_Sts_for_3C);
   PARAMETER(DB1.Order_Conf_Fax_Sts);
   PARAMETER(DB1.Manifest_Fax_Sts);
   PARAMETER(DB1.Invoice_Fax_Sts);
   PARAMETER(DB1.Transfer_in_Storage_Ind);
   PARAMETER(DB1.Email_Cust_On_Order_Ship);
   PARAMETER(DB1.Order_Emailed);
   PARAMETER(DB1.Export_Docs_Go_w_Driver);
   PARAMETER(DB1.Shipping_Temp_Code_C_F);
   PARAMETER(DB1.Broker_Order_Status);
   PARAMETER(DB1.Air_Freight_Order);
   PARAMETER(DB1.Order_Requires_Review);
   PARAMETER(DB1.OH_Load_Plan_Ready);
   PARAMETER(DB1.Export_USDA_Approved);
   PARAMETER(DB1.HPB_Ship_to_Warehouse);
   PARAMETER(DB1.OH_TF_Exempt_Code);
   PARAMETER(DB1.OH_Appt_Confirmation_Dt);
   PARAMETER(DB1.JPN_Invoice_Issuance_Date);
   PARAMETER(DB1.Load_Actual_Shipped_Date);
   PARAMETER(DB1.Load_BOL_Complete_Date);
   PARAMETER(DB1.Load_Truck_Departure_Date);
   PARAMETER(DB1.Maximum_Gross_Weight);
   PARAMETER(DB1.Time_of_Original_Entry);
   PARAMETER(DB1.OH_Appt_Confirmation_Tm);
   PARAMETER(DB1.Load_BOL_Complete_Time);
   PARAMETER(DB1.Load_Truck_Departure_Time);
   PARAMETER(DB1.Act_Frt_Reference_Amount);
   PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
   PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
   PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
   PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
   PARAMETER(DB1.Claim_Number);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);

  }

  CASE;

  // IF DB1.Clm Item TF Exempt Code is Pre Commencement
  IF DB1.Clm_Item_TF_Exempt_Code = 'PC';

  // LCL.OH TF Exempt Code = DB1.Clm Item TF Exempt Code
  LCL.OH_TF_Exempt_Code = DB1.Clm_Item_TF_Exempt_Code;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.OH TF Exempt Code = CND.Blank
  LCL.OH_TF_Exempt_Code = *BLANK;

  // LCL.Error Flag            USR = CND.Blank
  LCL.Error_Flag_USR = *BLANK;

  // Call program Exc Calc Ord ExemptCd XF.
  CALL PROGRAM(Exc Calc Ord ExemptCd XF) ('PPSLXFR');
  PARAMETER(DB1.Claim_Company_Number);
  PARAMETER(PAR.Next_Order_Number);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(LCL.OH_TF_Exempt_Code);
  PARAMETER(LCL.Error_Flag_USR);
  PARAMETER('N');

  ENDIF;

  EXECUTE FUNCTION(Chg TF Exempt         CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1750711;
  PARAMETER(DB1.Claim_Company_Number);
  PARAMETER(PAR.Next_Order_Number);
  PARAMETER(LCL.OH_TF_Exempt_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDDO;

  ENDIF;

 }

 ENDDO;

 //?3. Create  Debit Memo(DB) from Claim Resale Products.
 DO;

 //?E4057 JJH 04/29/15 - Populate OD Full Return to Plant
 EXECUTE FUNCTION(CRT DB from Claim/Cust RT) TYPE(RTVOBJ) FILE(PDMPCPP)          AC1587820;
 PARAMETER(DB1.Claim_Number);
 PARAMETER(PAR.Export_Status);
 PARAMETER(PAR.Manager_Level_Code);
 PARAMETER(PAR.VP_Level_Code);
 PARAMETER(PAR.Invoice_Number);
 PARAMETER(DB1.Salesperson_to_Rvw_Claim);
 PARAMETER(DB1.Claim_Order_Number);
 PARAMETER(PAR.Broker_Order_Status);
 PARAMETER(PAR.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.AC_Full_Return_to_Plant);
 {
  //?USER: Initialize routine

  //?Miscellaneous Fields.
  // PAR.BLANK = CON.*BLANK
  PAR.BLANK = *BLANK;

  // PAR.Save Resale ShipToCustUSR = CND.equal to zero
  PAR.Save_Resale_ShipToCustUSR = *ZERO;

  // PAR.save ResShiptoCustTF  Usr = WRK.BLANK
  PAR.save_ResShiptoCustTF_Usr = WRK.BLANK;

  //?Header Fields.
  // PAR.Header Created Flag USR = CND.No
  PAR.Header_Created_Flag_USR = 'N';

  // PAR.Order Value Total = CON.*ZERO
  PAR.Order_Value_Total = *ZERO;

  // PAR.Order Weight Total = CON.*ZERO
  PAR.Order_Weight_Total = *ZERO;

  //?Detail Fields.
  // PAR.Order Sequence Number = CON.*ZERO
  PAR.Order_Sequence_Number = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF PAR.Save Resale ShipToCustUSR NE DB1.Ship To Customer
  IF PAR.Save_Resale_ShipToCustUSR <> DB1.Ship_To_Customer;

  //?Resale Customer has changed.
  DO;

  CASE;

  // IF PAR.Header Created Flag USR is Yes
  IF PAR.Header_Created_Flag_USR = 'Y';

  //?Update Order Total & Weight on Header file.
  DO;

  EXECUTE FUNCTION(CHG Order Value & Wght CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1575085;
  PARAMETER(PAR.Resale_Company_Number);
  PARAMETER(PAR.Next_Order_Number);
  PARAMETER(PAR.Order_Value_Total);
  PARAMETER(PAR.Order_Weight_Total);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // Call program TRG Order Hdr CHG Trig XT.
   CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Type_Sales);
   PARAMETER(DB1.AR_Customer_Number);
   PARAMETER(DB1.Ship_To_Customer);
   PARAMETER(DB1.Ship_To_Name);
   PARAMETER(DB1.Ship_To_Address_Line_1);
   PARAMETER(DB1.Ship_To_Address_Line_2);
   PARAMETER(DB1.Ship_To_Address_Line_3);
   PARAMETER(DB1.Ship_To_City);
   PARAMETER(DB1.Ship_To_State_Code);
   PARAMETER(DB1.Ship_To_Zip_Postal_Code);
   PARAMETER(DB1.Bill_to_Customer);
   PARAMETER(DB1.Bill_to_Name);
   PARAMETER(DB1.Bill_to_Address_Line_1);
   PARAMETER(DB1.Bill_to_Address_Line_2);
   PARAMETER(DB1.Bill_to_Address_Line_3);
   PARAMETER(DB1.Bill_to_City);
   PARAMETER(DB1.Bill_to_State_Code);
   PARAMETER(DB1.Bill_to_Zip_Postal_Code);
   PARAMETER(DB1.Customer_Purchase_Order_#);
   PARAMETER(DB1.Order_Date);
   PARAMETER(DB1.Requested_Ship_Date);
   PARAMETER(DB1.Actual_Shipped_Date);
   PARAMETER(DB1.Cancel_Date);
   PARAMETER(DB1.Terms_Code);
   PARAMETER(DB1.Special_Instructions);
   PARAMETER(DB1.Special_Instructions_2);
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Comment_Print_Acknowledge);
   PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
   PARAMETER(DB1.Comment_Print_Pick_Slip);
   PARAMETER(DB1.Comment_Print_Ship_Doc);
   PARAMETER(DB1.Reason_Code);
   PARAMETER(DB1.Order_in_Use);
   PARAMETER(DB1.Header_Status);
   PARAMETER(DB1.Header_Status_Last);
   PARAMETER(DB1.Order_Type_Print_Status);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.User_Original_Entry);
   PARAMETER(DB1.Date_of_Original_Entry);
   PARAMETER(DB1.Order_Value_Total);
   PARAMETER(DB1.Order_Weight_Total);
   PARAMETER(DB1.Credit_Hold);
   PARAMETER(DB1.Production_Hold);
   PARAMETER(DB1.New_Customer_Hold);
   PARAMETER(DB1.Requested_Delivery_Date);
   PARAMETER(DB1.Requested_Delivery_Time);
   PARAMETER(DB1.Accounts_Receiv_Ent_1);
   PARAMETER(DB1.Accounts_Receiv_Ent_2);
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
   PARAMETER(DB1.Rated_Freight);
   PARAMETER(DB1.LTL_Flag);
   PARAMETER(DB1.Price_Audit);
   PARAMETER(DB1.Price_Status);
   PARAMETER(DB1.Shipping_Method);
   PARAMETER(DB1.Export_Status);
   PARAMETER(DB1.Palletize);
   PARAMETER(DB1.Shrink_Wrap);
   PARAMETER(DB1.Slip_Sheet);
   PARAMETER(DB1.Age_Code);
   PARAMETER(DB1.Reefer_Temperature);
   PARAMETER(DB1.Load_Type);
   PARAMETER(DB1.Attach_to_Invoice_Number);
   PARAMETER(DB1.Load_Plan_Order);
   PARAMETER(DB1.Print_Pick_Slip);
   PARAMETER(DB1.Resell_Reference_Number);
   PARAMETER(DB1.Special_Comment_1);
   PARAMETER(DB1.Special_Comment_2);
   PARAMETER(DB1.Affect_Auto_Accruals);
   PARAMETER(DB1.Sales_Route_Code);
   PARAMETER(DB1.Manager_Level_Code);
   PARAMETER(DB1.VP_Level_Code);
   PARAMETER(DB1.Attach_to_Order_Number);
   PARAMETER(DB1.Reason_for_Price_Audit);
   PARAMETER(DB1.Invoice_Number);
   PARAMETER(DB1.Invoice_Suffix);
   PARAMETER(DB1.Invoice_Date);
   PARAMETER(DB1.Event_Code);
   PARAMETER(DB1.Trans_Contol_AS400_Plant);
   PARAMETER(DB1.Modified_Flag);
   PARAMETER(DB1.A_R_order_Value_Total);
   PARAMETER(DB1.Billing_Activity_Type);
   PARAMETER(DB1.Block_Order_Flag);
   PARAMETER(DB1.Order_Certification_Flag);
   PARAMETER(DB1.Invoice_Order_Value_Tot);
   PARAMETER(DB1.Process_Sts_for_3C);
   PARAMETER(DB1.Order_Conf_Fax_Sts);
   PARAMETER(DB1.Manifest_Fax_Sts);
   PARAMETER(DB1.Invoice_Fax_Sts);
   PARAMETER(DB1.Transfer_in_Storage_Ind);
   PARAMETER(DB1.Email_Cust_On_Order_Ship);
   PARAMETER(DB1.Order_Emailed);
   PARAMETER(DB1.Export_Docs_Go_w_Driver);
   PARAMETER(DB1.Shipping_Temp_Code_C_F);
   PARAMETER(DB1.Broker_Order_Status);
   PARAMETER(DB1.Air_Freight_Order);
   PARAMETER(DB1.Order_Requires_Review);
   PARAMETER(DB1.OH_Load_Plan_Ready);
   PARAMETER(DB1.Export_USDA_Approved);
   PARAMETER(DB1.HPB_Ship_to_Warehouse);
   PARAMETER(DB1.OH_TF_Exempt_Code);
   PARAMETER(DB1.OH_Appt_Confirmation_Dt);
   PARAMETER(DB1.JPN_Invoice_Issuance_Date);
   PARAMETER(DB1.Load_Actual_Shipped_Date);
   PARAMETER(DB1.Load_BOL_Complete_Date);
   PARAMETER(DB1.Load_Truck_Departure_Date);
   PARAMETER(DB1.Maximum_Gross_Weight);
   PARAMETER(DB1.Time_of_Original_Entry);
   PARAMETER(DB1.OH_Appt_Confirmation_Tm);
   PARAMETER(DB1.Load_BOL_Complete_Time);
   PARAMETER(DB1.Load_Truck_Departure_Time);
   PARAMETER(DB1.Act_Frt_Reference_Amount);
   PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
   PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
   PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
   PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
   PARAMETER(DB1.Claim_Number);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);

  }

  CASE;

  // IF PAR.save ResShiptoCustTF  Usr is Pre Commencement
  IF PAR.save_ResShiptoCustTF_Usr = 'PC';

  // LCL.OH TF Exempt Code = PAR.save ResShiptoCustTF  Usr
  LCL.OH_TF_Exempt_Code = PAR.save_ResShiptoCustTF_Usr;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.OH TF Exempt Code = CND.Blank
  LCL.OH_TF_Exempt_Code = *BLANK;

  // LCL.Error Flag            USR = CND.Blank
  LCL.Error_Flag_USR = *BLANK;

  // Call program Exc Calc Ord ExemptCd XF.
  CALL PROGRAM(Exc Calc Ord ExemptCd XF) ('PPSLXFR');
  PARAMETER(PAR.Resale_Company_Number);
  PARAMETER(PAR.Next_Order_Number);
  PARAMETER(PAR.Save_Resale_ShipToCustUSR);
  PARAMETER(LCL.OH_TF_Exempt_Code);
  PARAMETER(LCL.Error_Flag_USR);
  PARAMETER('N');

  ENDIF;

  EXECUTE FUNCTION(Chg TF Exempt         CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1750711;
  PARAMETER(PAR.Resale_Company_Number);
  PARAMETER(PAR.Next_Order_Number);
  PARAMETER(LCL.OH_TF_Exempt_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDDO;

  ENDIF;

  //?Header Fields.
  // PAR.Header Created Flag USR = CND.No
  PAR.Header_Created_Flag_USR = 'N';

  // PAR.Order Value Total = CON.*ZERO
  PAR.Order_Value_Total = *ZERO;

  // PAR.Order Weight Total = CON.*ZERO
  PAR.Order_Weight_Total = *ZERO;

  //?Detail Fields.
  // PAR.Order Sequence Number = CON.*ZERO
  PAR.Order_Sequence_Number = *ZERO;

  ENDDO;

  // PAR.Save Resale ShipToCustUSR = DB1.Ship To Customer
  PAR.Save_Resale_ShipToCustUSR = DB1.Ship_To_Customer;

  // PAR.save ResShiptoCustTF  Usr = DB1.Clm Resale TF Exempt Code
  PAR.save_ResShiptoCustTF_Usr = DB1.Clm_Resale_TF_Exempt_Code;

  ENDIF;

  CASE;

  // IF DB1.Resale Item Amount is greater than zero
  IF DB1.Resale_Item_Amount > *ZERO;

  //?Process DB.
  DO;

  CASE;

  // IF PAR.Header Created Flag USR is No
  IF PAR.Header_Created_Flag_USR = 'N';

  //?Create Memo Header Shell.
  DO;

  //?Save Resale Company Number.
  DO;

  // PAR.Resale Company Number = DB1.Resale Company Number
  PAR.Resale_Company_Number = DB1.Resale_Company_Number;

  ENDDO;

  //?Get Next Order & Invoice Number.
  DO;

  EXECUTE FUNCTION(CHG Next Order/Invoice CH) TYPE(CHGOBJ) FILE(CAASREP)          AC1575045;
  PARAMETER(*ZERO);
  PARAMETER(PAR.Next_Order_Number);
  PARAMETER(PAR.Next_Invoice_Number);
  {
   //?USER: Processing before Data update

   //?*** Return Next Order & Invoice Number.
   // PAR.Next Order Number USR = DB1.Next Order Number
   PAR.Next_Order_Number_USR = DB1.Next_Order_Number;

   // PAR.Next Invoice Number USR = DB1.Next Invoice Number
   PAR.Next_Invoice_Number_USR = DB1.Next_Invoice_Number;

   //?*** Increment Order & Invoice Number by 1.
   // DB1.Next Order Number = DB1.Next Order Number + CON.1
   DB1.Next_Order_Number = DB1.Next_Order_Number + 1;

   // DB1.Next Invoice Number = DB1.Next Invoice Number + CON.1
   DB1.Next_Invoice_Number = DB1.Next_Invoice_Number + 1;

   //?*** Update Date & Time Stamp.
   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDDO;

  //?Determine Memo Tupe.
  DO;

  // PAR.Order Type - Sales = CND.Debit Memo DB
  PAR.Order_Type_Sales = 'DB';

  ENDDO;

  //?Get Resale Customer Information.
  DO;

  //?*** Ship To Customer Info ***
  EXECUTE FUNCTION(RTV Claim Memo Info    RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1575689;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(PAR.Ship_To_Name);
  PARAMETER(PAR.Ship_To_Address_Line_1);
  PARAMETER(PAR.Ship_To_Address_Line_2);
  PARAMETER(PAR.Ship_To_Address_Line_3);
  PARAMETER(PAR.Ship_To_City);
  PARAMETER(PAR.Ship_To_State_Code);
  PARAMETER(PAR.Ship_To_Zip_Postal_Code);
  PARAMETER(PAR.AR_Customer_Number);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?*** Bill To Customer Info ***
  // PAR.Bill to Customer = PAR.A/R Customer Number
  PAR.Bill_to_Customer = PAR.AR_Customer_Number;

  EXECUTE FUNCTION(RTV Claim Memo Info    RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1575689;
  PARAMETER(PAR.Bill_to_Customer);
  PARAMETER(PAR.Bill_to_Name);
  PARAMETER(PAR.Bill_to_Address_Line_1);
  PARAMETER(PAR.Bill_to_Address_Line_2);
  PARAMETER(PAR.Bill_to_Address_Line_3);
  PARAMETER(PAR.Bill_to_City);
  PARAMETER(PAR.Bill_to_State_Code);
  PARAMETER(PAR.Bill_to_Zip_Postal_Code);
  PARAMETER(NLL.AR_Customer_Number);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDDO;

  //?Get Terms Code.
  DO;

  EXECUTE FUNCTION(RTV Cr/Dr Memo Dflts   RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1318069;
  PARAMETER(DB1.Resale_Company_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(PAR.Terms_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDDO;

  //?Format "Special Comment 1".
  DO;

  // PAR.Claim Number (Alpha) USR = CVTVAR(PAR.Claim Number)
  PAR.Claim_Number_Alpha_USR = CVTVAR(PAR.Claim_Number);

  // PAR.Special Comment 1 = CONCAT(CON.Claim #,PAR.Claim Number (Alpha) USR,CON.1)
  PAR.Special_Comment_1 = 'Claim #' + PAR.Claim_Number_Alpha_USR (1);

  ENDDO;

  //?E3387 JJH 09/08/14 - Retrive Shipping Method from A/R Claim Resale
  EXECUTE FUNCTION(Rtv Shipping Method   RT) TYPE(RTVOBJ) FILE(PPA3CPP)           AC2098748;
  PARAMETER(PAR.Claim_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(LCL.ACR_Shipping_Method);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?E3387 JJH 09/08/14 - Update Shipping Method
  EXECUTE FUNCTION(CRT CB/DB from Claim   CR) TYPE(CRTOBJ) FILE(OPBFCPP)          AC1575047;
  PARAMETER(DB1.Resale_Company_Number);
  PARAMETER(PAR.Next_Order_Number);
  PARAMETER(PAR.Order_Type_Sales);
  PARAMETER(PAR.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(PAR.Ship_To_Name);
  PARAMETER(PAR.Ship_To_Address_Line_1);
  PARAMETER(PAR.Ship_To_Address_Line_2);
  PARAMETER(PAR.Ship_To_Address_Line_3);
  PARAMETER(PAR.Ship_To_City);
  PARAMETER(PAR.Ship_To_State_Code);
  PARAMETER(PAR.Ship_To_Zip_Postal_Code);
  PARAMETER(PAR.Bill_to_Customer);
  PARAMETER(PAR.Bill_to_Name);
  PARAMETER(PAR.Bill_to_Address_Line_1);
  PARAMETER(PAR.Bill_to_Address_Line_2);
  PARAMETER(PAR.Bill_to_Address_Line_3);
  PARAMETER(PAR.Bill_to_City);
  PARAMETER(PAR.Bill_to_State_Code);
  PARAMETER(PAR.Bill_to_Zip_Postal_Code);
  PARAMETER(DB1.Resale_Purchase_Order_Nbr);
  PARAMETER(JOB.*Job_date);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Terms_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER('N');
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(JOB.*USER);
  PARAMETER(JOB.*Job_date);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('N');
  PARAMETER('N');
  PARAMETER('N');
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER('A');
  PARAMETER('P');
  PARAMETER(LCL.ACR_Shipping_Method);
  PARAMETER(PAR.Export_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Invoice_Number);
  PARAMETER('N');
  PARAMETER('N');
  PARAMETER(*ZERO);
  PARAMETER(PAR.Special_Comment_1);
  PARAMETER(*BLANK);
  PARAMETER('Y');
  PARAMETER(PAR.Salesperson_to_Rvw_Claim);
  PARAMETER(PAR.Manager_Level_Code);
  PARAMETER(PAR.VP_Level_Code);
  PARAMETER(PAR.Claim_Order_Number);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Next_Invoice_Number);
  PARAMETER('DM');
  PARAMETER(*ZERO);
  PARAMETER('01');
  PARAMETER(PAR.BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(3);
  PARAMETER('F');
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(PAR.BLANK);
  PARAMETER(PAR.BLANK);
  PARAMETER(PAR.BLANK);
  PARAMETER(PAR.BLANK);
  PARAMETER(*BLANK);
  PARAMETER(PAR.BLANK);
  PARAMETER(PAR.BLANK);
  PARAMETER(*BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(PAR.Broker_Order_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(PAR.HPB_Ship_to_Warehouse);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(JOB.*Job_time);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Claim_Number);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Age Code = CND.Blank
   DB1.Age_Code = *BLANK;

   // Call program RTV System Date/Time   UP.
   CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
   PARAMETER(DB1.Date_of_Original_Entry);
   PARAMETER(DB1.Time_of_Original_Entry);

  }

  // PAR.Header Created Flag USR = CND.Yes
  PAR.Header_Created_Flag_USR = 'Y';

  ENDDO;

  ENDIF;

  //?Create Memo Detail.
  DO;

  //?-----------------
  //?04/13/05 PKD OMS012 Changed to use the Claim Item Line Number
  //?                    instead of Order Sequence Number calculated
  //?-----------------
  //?04/15/05 SLM OMS012 Changed to use the Resale Item Line Number
  //?Create Order Sequence Number from DB1 Resale Item Line Number
  DO;

  // LCL.Order Sequence Number = DB1.Resale Item Line Number
  LCL.Order_Sequence_Number = DB1.Resale_Item_Line_Number;

  ENDDO;

  //?Get Company/Item Info./ PK0519 Price code
  DO;

  EXECUTE FUNCTION(RTV Cr/Dr Memo Dflts   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1575082;
  PARAMETER(DB1.Resale_Company_Number);
  PARAMETER(DB1.Resale_Item_Code);
  PARAMETER(PAR.Order_Desc_Line_One);
  PARAMETER(PAR.Order_Desc_Line_Two);
  PARAMETER(PAR.U_M_Ordered);
  PARAMETER(PAR.Unit_Weight_Ordered_U_M);
  PARAMETER(PAR.Item_Level);
  PARAMETER(PAR.Production_Date_Control);
  PARAMETER(PAR.Catch_Weight_Status);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(LCL.Default_Warehouse);
  PARAMETER(LCL.Item_Target_Price);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV Warehouse Code RT) TYPE(RTVOBJ) FILE(OPBGWKP)              AC1577257;
  PARAMETER(DB1.Resale_Company_Number);
  PARAMETER(PAR.Claim_Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Price_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?slm 11/28/2006 - Get the Accounting Company if blank from order detail
  CASE;

  // IF PAR.Warehouse Code is Warehouse Code Blank
  IF PAR.Warehouse_Code = *BLANK;

  EXECUTE FUNCTION(RTV OD Whs/ShpCo/AccCo RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1801010;
  PARAMETER(DB1.Resale_Company_Number);
  PARAMETER(PAR.Claim_Order_Number);
  PARAMETER(LCL.Warehouse_Code);
  PARAMETER(NLL.Shipping_Company);
  PARAMETER(NLL.Accounting_Company);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Detail Line Status is Not cancelled
   IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

   EXECUTE FUNCTION(RTV OD Whs/ShpCo/AccCo RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1801011;
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(PAR.Shipping_Company);
   PARAMETER(PAR.Accounting_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // PAR.Warehouse Code = DB1.Warehouse Code
   PAR.Warehouse_Code = DB1.Warehouse_Code;

   QUIT;

   ENDIF;

  }

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  ENDIF;

  CASE;

  // IF DB1.Affect Pricing is yes
  IF DB1.Affect_Pricing = 'Y';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Price Code = CON.*ZERO
  PAR.Price_Code = *ZERO;

  ENDIF;

  ENDDO;

  //?11/02/06 SLM Remove the Affect flags from the order type
  //?Determine Price Method.
  DO;

  CASE;

  // IF DB1.Resale Item Weight is Equal to zero
  IF DB1.Resale_Item_Weight = *ZERO;

  // OR DB1.Resale Item Unit Price is Equal zero
  OR DB1.Resale_Item_Unit_Price = *ZERO;

  // PAR.Price Method Code = CND.Extended
  PAR.Price_Method_Code = 'EXT';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Price Method Code = CND.Manual
  PAR.Price_Method_Code = 'MAN';

  ENDIF;

  ENDDO;

  //?Calculate the Absolute Value of select Claim fields.
  DO;

  //?ABS(Resale Item Quantity)
  CASE;

  // IF DB1.Resale Item Quantity is Less than zero
  IF DB1.Resale_Item_Quantity < *ZERO;

  // PAR.Resale Item Quantity = DB1.Resale Item Quantity * CON.-1 *
  PAR.Resale_Item_Quantity = DB1.Resale_Item_Quantity * -1;

  //?ABS(Resale Item Quantity)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Resale Item Quantity = DB1.Resale Item Quantity
  PAR.Resale_Item_Quantity = DB1.Resale_Item_Quantity;

  ENDIF;

  //?ABS(Resale Item Weight)
  CASE;

  // IF DB1.Resale Item Weight is Less than zero
  IF DB1.Resale_Item_Weight < *ZERO;

  // PAR.Resale Item Weight = DB1.Resale Item Weight * CON.-1 *
  PAR.Resale_Item_Weight = DB1.Resale_Item_Weight * -1;

  //?ABS(Resale Item Weight)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Resale Item Weight = DB1.Resale Item Weight
  PAR.Resale_Item_Weight = DB1.Resale_Item_Weight;

  ENDIF;

  //?ABS(Resale Item Unit Price)
  CASE;

  // IF DB1.Resale Item Unit Price is Less than zero
  IF DB1.Resale_Item_Unit_Price < *ZERO;

  // PAR.Resale Item Unit Price = DB1.Resale Item Unit Price * CON.-1 *
  PAR.Resale_Item_Unit_Price = DB1.Resale_Item_Unit_Price * -1;

  //?ABS(Resale Item Unit Price)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Resale Item Unit Price = DB1.Resale Item Unit Price
  PAR.Resale_Item_Unit_Price = DB1.Resale_Item_Unit_Price;

  ENDIF;

  //?ABS(Resale Item Amount)
  CASE;

  // IF DB1.Resale Item Amount is less than zero
  IF DB1.Resale_Item_Amount < *ZERO;

  // PAR.Resale Item Amount = DB1.Resale Item Amount * CON.-1 *
  PAR.Resale_Item_Amount = DB1.Resale_Item_Amount * -1;

  //?ABS(Resale Item Amount)
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Resale Item Amount = DB1.Resale Item Amount
  PAR.Resale_Item_Amount = DB1.Resale_Item_Amount;

  ENDIF;

  ENDDO;

  //?Determine Debit Memo Amount Fields.
  DO;

  CASE;

  // IF PAR.Price Method Code is Manual
  IF PAR.Price_Method_Code = 'MAN';

  //?Price Method = MAN.
  DO;

  //?Quantity.
  DO;

  CASE;

  // IF PAR.Resale Item Quantity is Equal to zero
  IF PAR.Resale_Item_Quantity = *ZERO;

  // PAR.Quantity Ordered = CON.1
  PAR.Quantity_Ordered = 1;

  // PAR.Quantity Shipped Total = CON.1
  PAR.Quantity_Shipped_Total = 1;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Quantity Ordered = PAR.Resale Item Quantity
  PAR.Quantity_Ordered = PAR.Resale_Item_Quantity;

  // PAR.Quantity Shipped Total = PAR.Resale Item Quantity
  PAR.Quantity_Shipped_Total = PAR.Resale_Item_Quantity;

  ENDIF;

  ENDDO;

  //?Weight.
  DO;

  // PAR.Weight Ordered = PAR.Resale Item Weight
  PAR.Weight_Ordered = PAR.Resale_Item_Weight;

  // PAR.Weight Shipped Total = PAR.Resale Item Weight
  PAR.Weight_Shipped_Total = PAR.Resale_Item_Weight;

  ENDDO;

  //?Price.
  DO;

  // PAR.Price Overage Override = PAR.Resale Item Unit Price
  PAR.Price_Overage_Override = PAR.Resale_Item_Unit_Price;

  // PAR.Unit Price = PAR.Resale Item Unit Price
  PAR.Unit_Price = PAR.Resale_Item_Unit_Price;

  // PAR.Unit Price Ordered U/M = PAR.Resale Item Amount / PAR.Quantity Shipped Total *Rounded
  PAR.Unit_Price_Ordered_U_M = PAR.Resale_Item_Amount / PAR.Quantity_Shipped_Total 'H';

  ENDDO;

  ENDDO;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Price Method = EXT.
  DO;

  //?Quantity.
  // PAR.Quantity Ordered = CON.*ZERO
  PAR.Quantity_Ordered = *ZERO;

  // PAR.Quantity Shipped Total = CON.*ZERO
  PAR.Quantity_Shipped_Total = *ZERO;

  //?Weight.
  // PAR.Weight Ordered = CON.*ZERO
  PAR.Weight_Ordered = *ZERO;

  // PAR.Weight Shipped Total = CON.*ZERO
  PAR.Weight_Shipped_Total = *ZERO;

  //?Price.
  // PAR.Price Overage Override = PAR.Resale Item Amount
  PAR.Price_Overage_Override = PAR.Resale_Item_Amount;

  // PAR.Unit Price = CON.*ZERO
  PAR.Unit_Price = *ZERO;

  // PAR.Unit Price Ordered U/M = CON.*ZERO
  PAR.Unit_Price_Ordered_U_M = *ZERO;

  ENDDO;

  ENDIF;

  ENDDO;

  //?04/13/05 PKD OMS012 Changed to use the Claim Item Line Number
  //?                    instead of Order Sequence Number calculated
  //?                    earlier.
  //?08/31/05 slm tfs010  PASS the TF Exempt from the Claim to the Orddtl
  //?11/02/06 slm use the db1 affect flags
  //?E4057 JJH 04/29/15 - Populate OD Full Return to Plant
  EXECUTE FUNCTION(Rtv Claim Order Number) TYPE(RTVOBJ) FILE(PDMKCPP)             AC2105256;
  PARAMETER(DB1.Claim_Number);
  PARAMETER(PAR.Claim_Order_Number);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Actual Ship Date  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1444831;
  PARAMETER(PAR.Resale_Company_Number);
  PARAMETER(PAR.Claim_Order_Number);
  PARAMETER(NLL.Ship_To_Name);
  PARAMETER(NLL.Ship_To_City);
  PARAMETER(NLL.Ship_To_State_Code);
  PARAMETER(LCL.OD_Atch_to_Ord_ActShpDte);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(CRT CB/DB from Claim   CR) TYPE(CRTOBJ) FILE(OPBGWKP)          AC1575079;
  PARAMETER(DB1.Resale_Company_Number);
  PARAMETER(PAR.Next_Order_Number);
  PARAMETER(LCL.Order_Sequence_Number);
  PARAMETER(1);
  PARAMETER(DB1.Resale_Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER('E');
  PARAMETER(*ZERO);
  PARAMETER(PAR.Resale_Item_Amount);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Resale_Item_Amount);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Price_Method_Code);
  PARAMETER(PAR.Price_Overage_Override);
  PARAMETER(*ZERO);
  PARAMETER('P');
  PARAMETER(*ZERO);
  PARAMETER(DB1.UOM_Primary_Dft);
  PARAMETER(PAR.U_M_Ordered);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Order_Desc_Line_One);
  PARAMETER(PAR.Order_Desc_Line_Two);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Catch_Weight_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Production_Date_Control);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Quantity_Ordered);
  PARAMETER(PAR.Weight_Ordered);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Quantity_Shipped_Total);
  PARAMETER(PAR.Weight_Shipped_Total);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Unit_Price);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Unit_Price_Ordered_U_M);
  PARAMETER(PAR.Unit_Weight_Ordered_U_M);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.Affect_Inventory_Status);
  PARAMETER(DB1.Affect_Sales_Doll_Status);
  PARAMETER(DB1.Affect_Sales_Pnds_Status);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Level);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(JOB.*Job_date);
  PARAMETER(JOB.*USER);
  PARAMETER(*BLANK);
  PARAMETER('01');
  PARAMETER(DB1.Reason_Code);
  PARAMETER(PAR.Salesperson_to_Rvw_Claim);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(DB1.Affect_Trade_Fund);
  PARAMETER(DB1.Affect_Commission);
  PARAMETER(DB1.Affect_Pricing);
  PARAMETER(*BLANK);
  PARAMETER(DB1.Clm_Resale_TF_Exempt_Code);
  PARAMETER(*BLANK);
  PARAMETER(WRK.Blank_for_3_USR);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Price_Code);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Item_Target_Price);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(PAR.OD_Clm_Full_Return_to_Plt);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.OD_Atch_to_Ord_ActShpDte);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  {
   //?USER: Processing before Data update

   // DB1.Age Code = CND.Blank
   DB1.Age_Code = *BLANK;

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?04/13/05 PKD OMS012 Update Claim Memo Number in the A/R Claim
  //?                    Product with the Memo Number.
  // LCL.Resale Memo Number = PAR.Next Order Number
  LCL.Resale_Memo_Number = PAR.Next_Order_Number;

  EXECUTE FUNCTION(Chg Resale Memo NumberCH) TYPE(CHGOBJ) FILE(PPA3CPP)           AC1733445;
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(LCL.Resale_Memo_Number);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

  //?Sum Order Amount & Weight for Header.
  DO;

  // PAR.Order Value Total = PAR.Order Value Total + PAR.Resale Item Amount
  PAR.Order_Value_Total = PAR.Order_Value_Total + PAR.Resale_Item_Amount;

  // PAR.Order Weight Total = PAR.Order Weight Total + PAR.Weight Shipped Total
  PAR.Order_Weight_Total = PAR.Order_Weight_Total + PAR.Weight_Shipped_Total;

  ENDDO;

  ENDDO;

  ENDDO;

  ENDIF;

  //?USER: Exit processing

  CASE;

  // IF PAR.Header Created Flag USR is Yes
  IF PAR.Header_Created_Flag_USR = 'Y';

  //?Update Order Total & Weight on Header file.
  DO;

  EXECUTE FUNCTION(CHG Order Value & Wght CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1575085;
  PARAMETER(PAR.Resale_Company_Number);
  PARAMETER(PAR.Next_Order_Number);
  PARAMETER(PAR.Order_Value_Total);
  PARAMETER(PAR.Order_Weight_Total);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // Call program TRG Order Hdr CHG Trig XT.
   CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Type_Sales);
   PARAMETER(DB1.AR_Customer_Number);
   PARAMETER(DB1.Ship_To_Customer);
   PARAMETER(DB1.Ship_To_Name);
   PARAMETER(DB1.Ship_To_Address_Line_1);
   PARAMETER(DB1.Ship_To_Address_Line_2);
   PARAMETER(DB1.Ship_To_Address_Line_3);
   PARAMETER(DB1.Ship_To_City);
   PARAMETER(DB1.Ship_To_State_Code);
   PARAMETER(DB1.Ship_To_Zip_Postal_Code);
   PARAMETER(DB1.Bill_to_Customer);
   PARAMETER(DB1.Bill_to_Name);
   PARAMETER(DB1.Bill_to_Address_Line_1);
   PARAMETER(DB1.Bill_to_Address_Line_2);
   PARAMETER(DB1.Bill_to_Address_Line_3);
   PARAMETER(DB1.Bill_to_City);
   PARAMETER(DB1.Bill_to_State_Code);
   PARAMETER(DB1.Bill_to_Zip_Postal_Code);
   PARAMETER(DB1.Customer_Purchase_Order_#);
   PARAMETER(DB1.Order_Date);
   PARAMETER(DB1.Requested_Ship_Date);
   PARAMETER(DB1.Actual_Shipped_Date);
   PARAMETER(DB1.Cancel_Date);
   PARAMETER(DB1.Terms_Code);
   PARAMETER(DB1.Special_Instructions);
   PARAMETER(DB1.Special_Instructions_2);
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Comment_Print_Acknowledge);
   PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
   PARAMETER(DB1.Comment_Print_Pick_Slip);
   PARAMETER(DB1.Comment_Print_Ship_Doc);
   PARAMETER(DB1.Reason_Code);
   PARAMETER(DB1.Order_in_Use);
   PARAMETER(DB1.Header_Status);
   PARAMETER(DB1.Header_Status_Last);
   PARAMETER(DB1.Order_Type_Print_Status);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.User_Original_Entry);
   PARAMETER(DB1.Date_of_Original_Entry);
   PARAMETER(DB1.Order_Value_Total);
   PARAMETER(DB1.Order_Weight_Total);
   PARAMETER(DB1.Credit_Hold);
   PARAMETER(DB1.Production_Hold);
   PARAMETER(DB1.New_Customer_Hold);
   PARAMETER(DB1.Requested_Delivery_Date);
   PARAMETER(DB1.Requested_Delivery_Time);
   PARAMETER(DB1.Accounts_Receiv_Ent_1);
   PARAMETER(DB1.Accounts_Receiv_Ent_2);
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
   PARAMETER(DB1.Rated_Freight);
   PARAMETER(DB1.LTL_Flag);
   PARAMETER(DB1.Price_Audit);
   PARAMETER(DB1.Price_Status);
   PARAMETER(DB1.Shipping_Method);
   PARAMETER(DB1.Export_Status);
   PARAMETER(DB1.Palletize);
   PARAMETER(DB1.Shrink_Wrap);
   PARAMETER(DB1.Slip_Sheet);
   PARAMETER(DB1.Age_Code);
   PARAMETER(DB1.Reefer_Temperature);
   PARAMETER(DB1.Load_Type);
   PARAMETER(DB1.Attach_to_Invoice_Number);
   PARAMETER(DB1.Load_Plan_Order);
   PARAMETER(DB1.Print_Pick_Slip);
   PARAMETER(DB1.Resell_Reference_Number);
   PARAMETER(DB1.Special_Comment_1);
   PARAMETER(DB1.Special_Comment_2);
   PARAMETER(DB1.Affect_Auto_Accruals);
   PARAMETER(DB1.Sales_Route_Code);
   PARAMETER(DB1.Manager_Level_Code);
   PARAMETER(DB1.VP_Level_Code);
   PARAMETER(DB1.Attach_to_Order_Number);
   PARAMETER(DB1.Reason_for_Price_Audit);
   PARAMETER(DB1.Invoice_Number);
   PARAMETER(DB1.Invoice_Suffix);
   PARAMETER(DB1.Invoice_Date);
   PARAMETER(DB1.Event_Code);
   PARAMETER(DB1.Trans_Contol_AS400_Plant);
   PARAMETER(DB1.Modified_Flag);
   PARAMETER(DB1.A_R_order_Value_Total);
   PARAMETER(DB1.Billing_Activity_Type);
   PARAMETER(DB1.Block_Order_Flag);
   PARAMETER(DB1.Order_Certification_Flag);
   PARAMETER(DB1.Invoice_Order_Value_Tot);
   PARAMETER(DB1.Process_Sts_for_3C);
   PARAMETER(DB1.Order_Conf_Fax_Sts);
   PARAMETER(DB1.Manifest_Fax_Sts);
   PARAMETER(DB1.Invoice_Fax_Sts);
   PARAMETER(DB1.Transfer_in_Storage_Ind);
   PARAMETER(DB1.Email_Cust_On_Order_Ship);
   PARAMETER(DB1.Order_Emailed);
   PARAMETER(DB1.Export_Docs_Go_w_Driver);
   PARAMETER(DB1.Shipping_Temp_Code_C_F);
   PARAMETER(DB1.Broker_Order_Status);
   PARAMETER(DB1.Air_Freight_Order);
   PARAMETER(DB1.Order_Requires_Review);
   PARAMETER(DB1.OH_Load_Plan_Ready);
   PARAMETER(DB1.Export_USDA_Approved);
   PARAMETER(DB1.HPB_Ship_to_Warehouse);
   PARAMETER(DB1.OH_TF_Exempt_Code);
   PARAMETER(DB1.OH_Appt_Confirmation_Dt);
   PARAMETER(DB1.JPN_Invoice_Issuance_Date);
   PARAMETER(DB1.Load_Actual_Shipped_Date);
   PARAMETER(DB1.Load_BOL_Complete_Date);
   PARAMETER(DB1.Load_Truck_Departure_Date);
   PARAMETER(DB1.Maximum_Gross_Weight);
   PARAMETER(DB1.Time_of_Original_Entry);
   PARAMETER(DB1.OH_Appt_Confirmation_Tm);
   PARAMETER(DB1.Load_BOL_Complete_Time);
   PARAMETER(DB1.Load_Truck_Departure_Time);
   PARAMETER(DB1.Act_Frt_Reference_Amount);
   PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
   PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
   PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
   PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
   PARAMETER(DB1.Claim_Number);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);

  }

  CASE;

  // IF PAR.save ResShiptoCustTF  Usr is Pre Commencement
  IF PAR.save_ResShiptoCustTF_Usr = 'PC';

  // LCL.OH TF Exempt Code = PAR.save ResShiptoCustTF  Usr
  LCL.OH_TF_Exempt_Code = PAR.save_ResShiptoCustTF_Usr;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.OH TF Exempt Code = CND.Blank
  LCL.OH_TF_Exempt_Code = *BLANK;

  // LCL.Error Flag            USR = CND.Blank
  LCL.Error_Flag_USR = *BLANK;

  // Call program Exc Calc Ord ExemptCd XF.
  CALL PROGRAM(Exc Calc Ord ExemptCd XF) ('PPSLXFR');
  PARAMETER(PAR.Resale_Company_Number);
  PARAMETER(PAR.Next_Order_Number);
  PARAMETER(PAR.Save_Resale_ShipToCustUSR);
  PARAMETER(LCL.OH_TF_Exempt_Code);
  PARAMETER(LCL.Error_Flag_USR);
  PARAMETER('N');

  ENDIF;

  EXECUTE FUNCTION(Chg TF Exempt         CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1750711;
  PARAMETER(PAR.Resale_Company_Number);
  PARAMETER(PAR.Next_Order_Number);
  PARAMETER(LCL.OH_TF_Exempt_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDDO;

  ENDIF;

 }

 ENDDO;

 EXECUTE FUNCTION(CHG Status only        CH) TYPE(CHGOBJ) FILE(PDMKCPP)          AC1573743;
 PARAMETER(DB1.Claim_Number);
 PARAMETER('M');
 {
  //?USER: Processing after Data read

  CASE;

  // IF PAR.Claim Status is Completed
  IF PAR.Claim_Status = 'C';

  // AND PAR.Claim Status NE DB1.Claim Status
  AND PAR.Claim_Status <> DB1.Claim_Status;

  // DB1.Memo Post Date = JOB.*Job date
  DB1.Memo_Post_Date = JOB.*Job_date;

  // DB1.Memo Post Time = JOB.*Job time
  DB1.Memo_Post_Time = JOB.*Job_time;

  // IF PAR.Claim Status is Memo Processing
  IF PAR.Claim_Status = 'M';

  // AND PAR.Claim Status NE DB1.Claim Status
  AND PAR.Claim_Status <> DB1.Claim_Status;

  // DB1.Memo Created = CND.Yes
  DB1.Memo_Created = 'Y';

  // DB1.Memo Created Date = JOB.*Job date
  DB1.Memo_Created_Date = JOB.*Job_date;

  // DB1.Memo Created Time = JOB.*Job time
  DB1.Memo_Created_Time = JOB.*Job_time;

  // DB1.Memo Created User = JOB.*USER
  DB1.Memo_Created_User = JOB.*USER;

  ENDIF;

  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

}


