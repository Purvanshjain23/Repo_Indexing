// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNJZXFR
// ?Date: 14.08.2025 Time: 03:45:22
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(zDT ReValue Open Ord  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1943658;
PARAMETER(PAR.Scheduled_Ship_Date);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Header Status is Confirmed
 IF DB1.Header_Status = 'R';

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV AbsFrtRt/Type Cde  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1582615;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(LCL.Type_Code);
 PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Com Mkt Code       RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1487616;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(LCL.Commodity_Market_Code);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  QUIT;

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 EXECUTE FUNCTION(Edt ReValue Open Ord  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1943659;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(LCL.Type_Code);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(LCL.Commodity_Market_Code);
 PARAMETER(LCL.Post_Flag_USR);
 {
  //?USER: Initialize routine

  // PAR.Post Flag USR = CND.No
  PAR.Post_Flag_USR = 'N';

  //?USER: Process Data record

  CASE;

  // IF DB1.Unit Price - Credit is Equal zero
  IF DB1.Unit_Price_Credit = *ZERO;

  //?If manual pricing and not a transfer order, check price range
  CASE;

  // IF DB1.Price Method Code is Manual
  IF DB1.Price_Method_Code = 'MAN';

  // AND PAR.Order Type - Sales is Regular Order
  AND PAR.Order_Type_Sales = 'OR';

  // Call program Val Manual Price      XF.
  CALL PROGRAM(Val Manual Price      XF) ('POA5XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Description_Line_One);
  PARAMETER(LCL.Default_Commod_Mark_basis);
  PARAMETER(LCL.Market_Overage);
  PARAMETER(LCL.Standard_Overage_Underage);
  PARAMETER(LCL.Commodity_Price_Group);
  PARAMETER(LCL.Std_Weight_Head_Var_Ren);
  PARAMETER(LCL.Primal_Group_Code);

  CASE;

  // IF LCL.Primal Group Code is NE Samples or Cut Loss
  IF LCL.Primal_Group_Code <> 'UNID';

  // AND PAR.Type Code is Not Promotional/Samples
  AND PAR.Type_Code <> 'PS';

  EXECUTE FUNCTION(VAL Manual Price Range IF) TYPE(EXCINTFUN)                     AC1414607;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Commodity_Market_Code);
  PARAMETER(DB1.Price_Overage_Override);
  PARAMETER(LCL.Commodity_Price_Group);
  PARAMETER(LCL.Projected_Market_Price);
  PARAMETER(LCL.Default_Commod_Mark_basis);
  PARAMETER(LCL.Market_Overage);
  PARAMETER(WRK.Error_Status_3);
  PARAMETER(LCL.Minimum_Price_USR);
  PARAMETER(LCL.Maximum_Price_USR);
  PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
  {
   //?Execute internal function

   //?*---------------------------------------------------------------*
   //?Documentation:
   //?This internal function will determine if a manual price entered
   //?on an order detail line is within the Manual Pricing Acceptance
   //?Percentage from the Company Control file. If it does not fall
   //?within the percentage range then the market price will be used.
   //?If no market price is found then it is a manual price error
   //?*---------------------------------------------------------------*
   // PAR.Projected Market Price = CON.*ZERO
   PAR.Projected_Market_Price = *ZERO;

   // PAR.Minimum Price   USR = CON.*ZERO
   PAR.Minimum_Price_USR = *ZERO;

   // PAR.Maximum Price  USR = CON.*ZERO
   PAR.Maximum_Price_USR = *ZERO;

   // PAR.Error Status  3 = CND.Yes
   PAR.Error_Status_3 = 'Y';

   EXECUTE FUNCTION(RTV Manual Price Accpt RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1414604;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Manual_Price_Accept_Prcnt);
   PARAMETER(PAR.CoPk_FdSrv_ManPrc_Acpt_PT);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Food Service and Co-Pack Items
   CASE;

   // IF PAR.Default Commod Mark basis is Food Service
   IF PAR.Default_Commod_Mark_basis = 'FSV';

   // OR PAR.Default Commod Mark basis is Co-Pack
   OR PAR.Default_Commod_Mark_basis = 'CPK';

   // PAR.Manual Price Accept Prcnt = PAR.CoPk/FdSrv ManPrc Acpt%
   PAR.Manual_Price_Accept_Prcnt = PAR.CoPk_FdSrv_ManPrc_Acpt_PT;

   ENDIF;

   EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
   PARAMETER(PAR.Commodity_Market_Code);
   PARAMETER(PAR.Commodity_Price_Group);
   PARAMETER(9999999);
   PARAMETER(PAR.Projected_Market_Price);
   PARAMETER(WRK.USR_Date_Priced);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    // PAR.Commodity Market Price = DB1.Commodity Market Price
    PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

    // PAR.USR Date Priced = DB1.Market Price Date
    PAR.USR_Date_Priced = DB1.Market_Price_Date;

    QUIT;

   }

   // Projected Market Price
   PAR.Projected_Market_Price = ( PAR.Projected_Market_Price
   + PAR.Standard_Overage_Underage ) + ( PAR.Absorbed_Freight_Rate_CWT / 100 'H' );

   //?If a market price is found for co/cust market code default
   CASE;

   // IF PGM.*Return code is *Normal
   IF PGM.*Return_code = *BLANK;

   // Minimum price allowed
   PAR.Minimum_Price_USR = ( 1 - ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) )
   * PAR.Projected_Market_Price 'H';

   // Maximum price allowed
   PAR.Maximum_Price_USR = ( ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) + 1 )
   * PAR.Projected_Market_Price 'H';

   //?If the Price Override is within the range then error status is no
   CASE;

   // IF PAR.Price Overage Override GE PAR.Minimum Price   USR
   IF PAR.Price_Overage_Override >= PAR.Minimum_Price_USR;

   // AND PAR.Price Overage Override LE PAR.Maximum Price  USR
   AND PAR.Price_Overage_Override <= PAR.Maximum_Price_USR;

   // PAR.Error Status  3 = CND.No
   PAR.Error_Status_3 = 'N';

   ENDIF;

   //?If a market price is found for co/cust market code default
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?If no price for co/cust market code then use co/item market code
   EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
   PARAMETER(PAR.Default_Commod_Mark_basis);
   PARAMETER(PAR.Commodity_Price_Group);
   PARAMETER(9999999);
   PARAMETER(PAR.Projected_Market_Price);
   PARAMETER(WRK.USR_Date_Priced);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    // PAR.Commodity Market Price = DB1.Commodity Market Price
    PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

    // PAR.USR Date Priced = DB1.Market Price Date
    PAR.USR_Date_Priced = DB1.Market_Price_Date;

    QUIT;

   }

   CASE;

   // IF PGM.*Return code is *Normal
   IF PGM.*Return_code = *BLANK;

   // Minimum price allowed
   PAR.Minimum_Price_USR = ( PAR.Manual_Price_Accept_Prcnt / 100 'H' )
   * PAR.Projected_Market_Price 'H';

   // Maximum price allowed
   PAR.Maximum_Price_USR = ( ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) + 1 )
   * PAR.Projected_Market_Price 'H';

   //?If the Price Override is within the range then error status is no
   CASE;

   // IF PAR.Price Overage Override GE PAR.Minimum Price   USR
   IF PAR.Price_Overage_Override >= PAR.Minimum_Price_USR;

   // AND PAR.Price Overage Override LE PAR.Maximum Price  USR
   AND PAR.Price_Overage_Override <= PAR.Maximum_Price_USR;

   // PAR.Error Status  3 = CND.No
   PAR.Error_Status_3 = 'N';

   ENDIF;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Projected Market Price = CON.*ZERO
   PAR.Projected_Market_Price = *ZERO;

   ENDIF;

   ENDIF;

  }

  // LCL.Unit Price - Credit = LCL.Projected Market Price
  LCL.Unit_Price_Credit = LCL.Projected_Market_Price;

  ENDIF;

  ENDIF;

  CASE;

  // IF LCL.Unit Price - Credit is Not Zeros
  IF LCL.Unit_Price_Credit <> *ZERO;

  EXECUTE FUNCTION(Chg Unit Price-Credit CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1943663;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(LCL.Unit_Price_Credit);
  // PAR.Post Flag USR = CND.Yes
  PAR.Post_Flag_USR = 'Y';

  ENDIF;

  ENDIF;

  CASE;

  // IF DB1.OD Production Plan Sts is No
  IF DB1.OD_Production_Plan_Sts = 'N';

  EXECUTE FUNCTION(Dlt Ord Dtl Sched     RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1656356;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(DLT Ord Detail Sched   DL) TYPE(DLTOBJ) FILE(PDKNCPP)          AC1385631;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.OD_Production_Date);
  }

  CASE;

  // IF DB1.Quantity Scheduled NE DB1.Quantity Ordered
  IF DB1.Quantity_Scheduled <> DB1.Quantity_Ordered;

  // LCL.Quantity Scheduled = DB1.Quantity Ordered
  LCL.Quantity_Scheduled = DB1.Quantity_Ordered;

  // LCL.Weight Scheduled = DB1.Weight Ordered
  LCL.Weight_Scheduled = DB1.Weight_Ordered;

  EXECUTE FUNCTION(Chg Qty-Wgt Schd/Sts  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1562934;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Detail_Line_Status);
  PARAMETER(DB1.Detail_Line_Status_Last);
  PARAMETER(LCL.Quantity_Scheduled);
  PARAMETER(LCL.Weight_Scheduled);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Post Flag USR = CND.Yes
  PAR.Post_Flag_USR = 'Y';

  ENDIF;

  ENDIF;

 }

 CASE;

 // IF LCL.Post Flag USR is Yes
 IF LCL.Post_Flag_USR = 'Y';

 // Call program EDT Post Open Orders 2 XF.
 CALL PROGRAM(EDT Post Open Orders 2 XF) ('POI4XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(LCL.Order_Value_Total);
 PARAMETER(LCL.Order_Weight_Total);
 PARAMETER(LCL.Country_Code);
 PARAMETER(LCL.Warehouse_Code);

 ENDIF;

 ENDIF;

}


