// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POSRPFR
// ?Date: 14.08.2025 Time: 12:06:23
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?FP1271 01/25/08 RMC - chgd packaging qty from 5.0 to 7.3
//?E00112 03/10/08 RMC - read workfile built in poswupc/pmstxfr for
//?  FG trans total RR/AP/A
//?E00221 10/02/08 RMC - added company to key of packaging type file
//?E00458  07/29/09 RMC 1. Remove Std Waste column
//?  2. Std Usage includes Phantom box transactions I03 and I04
//?  3. Add Rework column to FG prtobj
EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('C/S');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

//?USER: Record selection processing

EXECUTE FUNCTION(Rtv Include Flag      RT) TYPE(RTVOBJ) FILE(POCBREP)           AC1656021;
PARAMETER(DB1.Pckg_Reporting_Group);
PARAMETER(LCL.Pckg_Include_on_Var_Rpt);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Pckg Include on Var Rpt is No
IF LCL.Pckg_Include_on_Var_Rpt = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF PAR.Pckg Type Class NE WRK.Blank for 4           USR
IF PAR.Pckg_Type_Class <> WRK.Blank_for_4_USR;

// AND DB1.Pckg Type Class NE PAR.Pckg Type Class
AND DB1.Pckg_Type_Class <> PAR.Pckg_Type_Class;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF PAR.Pckg Group Category NE WRK.Blank 6 USR
IF PAR.Pckg_Group_Category <> WRK.Blank_6_USR;

// AND DB1.Pckg Group Category NE PAR.Pckg Group Category
AND DB1.Pckg_Group_Category <> PAR.Pckg_Group_Category;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF PAR.Pckg Reporting Group NE WRK.Blank 6 USR
IF PAR.Pckg_Reporting_Group <> WRK.Blank_6_USR;

// AND DB1.Pckg Reporting Group NE PAR.Pckg Reporting Group
AND DB1.Pckg_Reporting_Group <> PAR.Pckg_Reporting_Group;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF PAR.Packaging Item Code NE WRK.BLANK
IF PAR.Packaging_Item_Code <> WRK.BLANK;

// AND DB1.Packaging Item Code NE PAR.Packaging Item Code
AND DB1.Packaging_Item_Code <> PAR.Packaging_Item_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: On print of first page format

MOVE *ALL (To: 1PG From: PAR);

// 1PG.Condition Desc. 1  USR = Condition name of 1PG.Report Type USR
X1PG_Condition_Desc_1_USR = RTVCND(X1PG_Report_Type_USR);

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(X1PG_Company_Name_DRV);
PARAMETER(X1PG_Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


CASE;

// IF PAR.Pckg Group Category NE WRK.Blank 6 USR
IF PAR.Pckg_Group_Category <> WRK.Blank_6_USR;

EXECUTE FUNCTION(Rtv Pckgng Grp Desc   RT) TYPE(RTVOBJ) FILE(POCCREP)           AC1652185;
PARAMETER(X1PG_Pckg_Group_Category);
PARAMETER(X1PG_Pckg_Group_Category_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Pckg Group Category Desc = CON.All
X1PG_Pckg_Group_Category_Desc = 'All';

ENDIF;

CASE;

// IF PAR.Pckg Reporting Group NE WRK.Blank 6 USR
IF PAR.Pckg_Reporting_Group <> WRK.Blank_6_USR;

EXECUTE FUNCTION(Rtv Pckng Reprtng Grp RT) TYPE(RTVOBJ) FILE(POCBREP)           AC1652186;
PARAMETER(X1PG_Pckg_Reporting_Group);
PARAMETER(X1PG_Pckg_Group_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Pckg Group Description = CON.All
X1PG_Pckg_Group_Description = 'All';

ENDIF;

CASE;

// IF PAR.Packaging Item Code NE WRK.Blank 6 USR
IF PAR.Packaging_Item_Code <> WRK.Blank_6_USR;

EXECUTE FUNCTION(RTV Packaging Item    RT) TYPE(RTVOBJ) FILE(POARREP)           AC1602514;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Packaging_Item_Code);
PARAMETER(X1PG_Pckg_Item_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Pckg Item Description = CON.All
X1PG_Pckg_Item_Description = 'All';

ENDIF;

CASE;

// IF PAR.Pckg Type Class NE WRK.Blank 6 USR
IF PAR.Pckg_Type_Class <> WRK.Blank_6_USR;

// 1PG.Condition Desc. 2  USR = Condition name of 1PG.Pckg Type Class
X1PG_Condition_Desc_2_USR = RTVCND(X1PG_Pckg_Type_Class);

// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Condition Desc. 2  USR = CON.All
X1PG_Condition_Desc_2_USR = 'All';

ENDIF;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
// Print Company Number header format
PRINT Company Number header format;

ENDIF;

CASE;

IF NEW Pckg_Group_Category;
EXECUTE FUNCTION(Rtv Pckgng Grp Desc   RT) TYPE(RTVOBJ) FILE(POCCREP)           AC1652185;
PARAMETER(CUR.Pckg_Group_Category);
PARAMETER(CUR.Pckg_Group_Category_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// Print Pckg Group Category header format
PRINT Pckg Group Category header format;

ENDIF;

CASE;

IF NEW Pckg_Reporting_Group;
EXECUTE FUNCTION(Rtv Pckng Reprtng Grp RT) TYPE(RTVOBJ) FILE(POCBREP)           AC1652186;
PARAMETER(CUR.Pckg_Reporting_Group);
PARAMETER(CUR.Pckg_Group_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// Print Pckg Reporting Group header format
PRINT Pckg Reporting Group header format;

ENDIF;

// SUPPRESSED PRINT Packaging Item Code header format

//?USER: On print of detail format

EXECUTE FUNCTION(Rtv Calc Std Usage    RT) TYPE(RTVOBJ) FILE(POAZCPP)           AC1656103;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Packaging_Item_Code);
PARAMETER(PAR.Date_From_USR);
PARAMETER(PAR.Date_To_USR);
PARAMETER(CUR.Standard_Usage_USR);
PARAMETER(LCL.Adjustment_Qty_7_0_USR);
PARAMETER(LCL.Rework_Usage_USR);
{
 //?USER: Initialize routine

 // PAR.Standard Usage        USR = CON.*ZERO
 PAR.Standard_Usage_USR = *ZERO;

 // PAR.Adjustment Qty 7.0    USR = CON.*ZERO
 PAR.Adjustment_Qty_7_0_USR = *ZERO;

 // PAR.Rework Usage          USR = CON.*ZERO
 PAR.Rework_Usage_USR = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Summ for Var Rpt  RT) TYPE(RTVOBJ) FILE(PMALCPP)           AC1871297;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.WF_Trans_Total_type_RR_qt);
 PARAMETER(LCL.WF_Trans_Total_type_A_qty);
 PARAMETER(LCL.WF_Trans_Total_type_AP_qt);
 PARAMETER(LCL.WF_ISC_Part_Rej_Curr_Qty);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.WF Trans Total type RR qt = PAR.WF Trans Total type RR qt + DB1.WF Trans Total type RR qt
  PAR.WF_Trans_Total_type_RR_qt = PAR.WF_Trans_Total_type_RR_qt
  + DB1.WF_Trans_Total_type_RR_qt;

  // PAR.WF Trans Total type AP qt = PAR.WF Trans Total type AP qt + DB1.WF Trans Total type AP qt
  PAR.WF_Trans_Total_type_AP_qt = PAR.WF_Trans_Total_type_AP_qt
  + DB1.WF_Trans_Total_type_AP_qt;

  // PAR.WF Trans Total type A qty = PAR.WF Trans Total type A qty + DB1.WF Trans Total type A qty
  PAR.WF_Trans_Total_type_A_qty = PAR.WF_Trans_Total_type_A_qty
  + DB1.WF_Trans_Total_type_A_qty;

  //?This is -RR = rework
  // PAR.WF ISC Part/Rej Curr Qty = PAR.WF ISC Part/Rej Curr Qty + DB1.WF ISC Part/Rej Curr Qty
  PAR.WF_ISC_Part_Rej_Curr_Qty = PAR.WF_ISC_Part_Rej_Curr_Qty
  + DB1.WF_ISC_Part_Rej_Curr_Qty;

 }

 // Compute: Std Usage,Accum
 PAR.Standard_Usage_USR = ( LCL.WF_Trans_Total_type_RR_qt * DB1.Packaging_Item_Quantity )
 + PAR.Standard_Usage_USR;

 // Compute: RwrkUsage,Accum
 PAR.Rework_Usage_USR = ( LCL.WF_ISC_Part_Rej_Curr_Qty * DB1.Packaging_Item_Quantity )
 + PAR.Rework_Usage_USR;

 // Compute: Adj Usage,Accum
 PAR.Adjustment_Qty_7_0_USR = ( ( LCL.WF_Trans_Total_type_A_qty
 + LCL.WF_Trans_Total_type_AP_qt ) * DB1.Packaging_Item_Quantity )                                 +
 + PAR.Adjustment_Qty_7_0_USR;

}


EXECUTE FUNCTION(Rtv Dly Usg per Item  RT) TYPE(RTVOBJ) FILE(POA0CPP)           AC1655805;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Packaging_Item_Code);
PARAMETER(PAR.Date_From_USR);
PARAMETER(CUR.Actual_Usage_USR);
PARAMETER(LCL.PDU_Ending_Inventory);
PARAMETER(PAR.Date_To_USR);
{
 //?USER: Initialize routine

 // PAR.PDU Quantity Used = CON.*ZERO
 PAR.PDU_Quantity_Used = *ZERO;

 // PAR.PDU Ending Inventory = CON.*ZERO
 PAR.PDU_Ending_Inventory = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.Production Date GT PAR.Date To               USR
 IF DB1.Production_Date > PAR.Date_To_USR;

 QUIT;

 ENDIF;

 // PAR.PDU Quantity Used = PAR.PDU Quantity Used + DB1.PDU Quantity Used
 PAR.PDU_Quantity_Used = PAR.PDU_Quantity_Used + DB1.PDU_Quantity_Used;

 CASE;

 // IF DB1.PDU Ending Inventory is Greater than Zero
 IF DB1.PDU_Ending_Inventory > *ZERO;

 // PAR.PDU Ending Inventory = DB1.PDU Ending Inventory
 PAR.PDU_Ending_Inventory = DB1.PDU_Ending_Inventory;

 ENDIF;

}


// CUR.Variance Usage        USR = CUR.Standard Usage        USR - CUR.Actual Usage          USR
CUR.Variance_Usage_USR = CUR.Standard_Usage_USR - CUR.Actual_Usage_USR;

EXECUTE FUNCTION(Rtv Waste Factor      RT) TYPE(RTVOBJ) FILE(POCAREP)           AC1655806;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Pckg_Item_Type);
PARAMETER(LCL.Pckg_Waste_Factor_PCT);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CUR.Standard Waste        USR = CUR.Standard Usage        USR * LCL.Pckg Waste Factor % *
CUR.Standard_Waste_USR = CUR.Standard_Usage_USR * LCL.Pckg_Waste_Factor_PCT;

CASE;

// IF CUR.Actual Usage          USR EQ WRK.ZERO
IF CUR.Actual_Usage_USR = WRK.ZERO;

// AND CUR.Standard Usage        USR EQ WRK.ZERO
AND CUR.Standard_Usage_USR = WRK.ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : Prt Variance Dtl      PO
CASE;

// IF PGM.*Print format is Do not print format
IF PGM.*Print_format = 'N';

QUIT;

ENDIF;

EXECUTE FUNCTION(Prt Variance Dtl      PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Packaging_Item_Code);
PARAMETER(PAR.Date_From_USR);
PARAMETER(PAR.Date_To_USR);
PARAMETER(WRK.Standard_Usage_2_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Process after print of detail format

NXT.Actual_Usage_SUM = SUM(CUR.Actual_Usage_USR);

NXT.Standard_Usage_SUM = SUM(CUR.Standard_Usage_USR);

NXT.Variance_Usage_SUM = SUM(CUR.Variance_Usage_USR);

NXT.Standard_Waste_SUM = SUM(CUR.Standard_Waste_USR);

// LCL.Standard Usage 3      USR = LCL.Standard Usage 3      USR + WRK.Standard Usage 2      USR
LCL.Standard_Usage_3_USR = LCL.Standard_Usage_3_USR + WRK.Standard_Usage_2_USR;

// WRK.Standard Usage 2      USR = CON.*ZERO
WRK.Standard_Usage_2_USR = *ZERO;

//?USER: Print required level totals

// SUPPRESSED PRINT Packaging Item Code totals format

CASE;

IF NEW Pckg_Reporting_Group;
// CUR.Standard Usage 3      USR = LCL.Standard Usage 3      USR
CUR.Standard_Usage_3_USR = LCL.Standard_Usage_3_USR;

// LCL.Standard Usage 3      USR = CON.*ZERO
LCL.Standard_Usage_3_USR = *ZERO;

// Print Pckg Reporting Group totals format
PRINT Pckg Reporting Group totals format;

NXT.Standard_Waste_SUM = SUM(CUR.Standard_Waste_SUM);

NXT.Variance_Usage_SUM = SUM(CUR.Variance_Usage_SUM);

NXT.Standard_Usage_SUM = SUM(CUR.Standard_Usage_SUM);

NXT.Actual_Usage_SUM = SUM(CUR.Actual_Usage_SUM);

NXT.Standard_Usage_2_SUM = SUM(CUR.Standard_Usage_3_USR);

ENDIF;

CASE;

IF NEW Pckg_Group_Category;
// Print Pckg Group Category totals format
PRINT Pckg Group Category totals format;

NXT.Standard_Usage_SUM = SUM(CUR.Standard_Usage_SUM);

NXT.Actual_Usage_SUM = SUM(CUR.Actual_Usage_SUM);

NXT.Variance_Usage_SUM = SUM(CUR.Variance_Usage_SUM);

NXT.Standard_Waste_SUM = SUM(CUR.Standard_Waste_SUM);

NXT.Standard_Usage_2_SUM = SUM(CUR.Standard_Usage_2_SUM);

ENDIF;

CASE;

IF NEW Company_Number;
// Print Company Number totals format
PRINT Company Number totals format;

ENDIF;

