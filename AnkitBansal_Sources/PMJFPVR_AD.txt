// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMJFPVR
// ?Date: 14.08.2025 Time: 03:43:17
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Load screen

// DTL.Accrual Code = CND.Not Entered
DTL.Accrual_Code = *BLANK;

EXECUTE FUNCTION(RTV Accrual Descript   RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1285204;
PARAMETER(DTL.Accrual_Code);
PARAMETER(DTL.Condition_Desc_2_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

// DTL.Detail/Summary Report Usr = CND.Detail
DTL.Detail_Summary_Report_Usr = 'D';

//?USER: Validate fields

CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

//?** F4 = Prompt on Accrual Code
CASE;

// IF PGM.*Cursor field <IS> DTL.Accrual Code
IF PGM.*Cursor_field = DTL.Accrual_Code;

//?(broker is req for types: BG,CM,RB,ST)
CASE;

// IF DTL.Accrual Type is Types requiring Broker
IF DTL.Accrual_Type = 'CM'/'CR'/'TX'/'BG'/'PR';

// Call program SEL Accrual Cde b/Typ SR.
CALL PROGRAM(SEL Accrual Cde b/Typ SR) ('PPBKSRR');
PARAMETER(DTL.Accrual_Code);
PARAMETER(DTL.Accrual_Type);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Accrual Type Req for Accrual Code Search.'
ERROR(USR3774);
MSGPARM(DTL.Accrual_Type);

ENDIF;

ENDIF;

//?** F4 = Prompt on Broker Code
CASE;

// IF PGM.*Cursor field <IS> DTL.Broker Code
IF PGM.*Cursor_field = DTL.Broker_Code;

// Call program Sel Broker            SL.
CALL PROGRAM(Sel Broker            SL) ('POY6SRR');
PARAMETER(DTL.Broker_Code);

//?** Retrieve description
CASE;

// IF DTL.Broker Code is Entered
IF DTL.Broker_Code <> *BLANK;

EXECUTE FUNCTION(Rtv Broker Name       RT) TYPE(RTVOBJ) FILE(POC5REP)           AC1676428;
PARAMETER(DTL.Broker_Code);
PARAMETER(DTL.Broker_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

ENDIF;

//?** F4 = Prompt on Salesperson Code
CASE;

// IF PGM.*Cursor field <IS> DTL.Salesperson Code
IF PGM.*Cursor_field = DTL.Salesperson_Code;

// Call program SEL Active Salesperson SR.
CALL PROGRAM(SEL Active Salesperson SR) ('CABYSRR');
PARAMETER(DTL.Salesperson_Code);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Validate broker
CASE;

// IF DTL.Broker Code is Entered
IF DTL.Broker_Code <> *BLANK;

EXECUTE FUNCTION(Rtv Broker Name       RT) TYPE(RTVOBJ) FILE(POC5REP)           AC1676428;
PARAMETER(DTL.Broker_Code);
PARAMETER(DTL.Broker_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.Broker Name is blanks
IF DTL.Broker_Name = *BLANK;

// Send error message - 'Broker News not found.'
ERROR(USR3288);
MSGPARM(DTL.Broker_Code);

ENDIF;

ENDIF;

//?Validate salesperson
CASE;

// IF DTL.Salesperson Code is entered
IF DTL.Salesperson_Code <> *BLANK;

EXECUTE FUNCTION(RTV Name, status       RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1260515;
PARAMETER(DTL.Salesperson_Code);
PARAMETER(DTL.Condition_Desc_3_USR);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.Condition Desc. 3  USR is not entered
IF DTL.Condition_Desc_3_USR = *BLANK;

// Send error message - 'Salesperson not found.'
ERROR(USR0039);
MSGPARM(DTL.Salesperson_Code);

ENDIF;

ENDIF;

//?Validate Accrual code
CASE;

// IF DTL.Accrual Code is Entered
IF DTL.Accrual_Code <> *BLANK;

EXECUTE FUNCTION(RTV Accrual Descript   RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1285204;
PARAMETER(DTL.Accrual_Code);
PARAMETER(DTL.Condition_Desc_2_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.Condition Desc. 2  USR is not entered
IF DTL.Condition_Desc_2_USR = *BLANK;

// Send error message - 'Accrual Program Code not found.'
ERROR(USR1514);
MSGPARM(DTL.Accrual_Code);

ENDIF;

ENDIF;

// DTL.Condition Desc. 4  USR = Condition name of DTL.Accrual Type
DTL.Condition_Desc_4_USR = RTVCND(DTL.Accrual_Type);

// DTL.Condition Desc. 10 USR = Condition name of DTL.Payee Type
DTL.Condition_Desc_10_USR = RTVCND(DTL.Payee_Type);

//?USER: Validate relations

//?** Broker Code is required if Email to Broker is Yes
CASE;

// IF DTL.USR Check Y/N Status is yes
IF DTL.USR_Check_Y_N_Status = 'Y';

CASE;

// IF DTL.Broker Code is Not entered
IF DTL.Broker_Code = *BLANK;

// Send error message - 'Broker Code is reqired if Email to Broker is Yes.'
ERROR(USR3748);
MSGPARM(DTL.Broker_Code);

ENDIF;

ENDIF;

//?USER: User defined action

//?Submit job for Print
// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Night Queue = CND.Not entered
PAR.PRT_Night_Queue = *BLANK;

// PAR.System Value Numeric = CON.1
PAR.System_Value_Numeric = 1;

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Broker Exhibits');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('OMS');
PARAMETER(*MISSING);
PARAMETER(1);

// Call program PRT Broker Exhibits    XF.
SBMJOB;
CALL PROGRAM(PRT Broker Exhibits    XF) ('PMJGXFR');
PARAMETER(DTL.Broker_Code);
PARAMETER(DTL.Payee_Type);
PARAMETER(DTL.Salesperson_Code);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Accrual_Code);
PARAMETER(DTL.Email_Address);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(DTL.Detail_Summary_Report_Usr);
PARAMETER(PAR.Status_Y_or_N);
SBMJOBOVR JOB(BROKREXHIB);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

//?** This is left in until testing is complete
// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

// DTL.Condition Desc. 10 USR = CON.*BLANK
DTL.Condition_Desc_10_USR = *BLANK;

// DTL.Condition Desc. 3  USR = CON.*BLANK
DTL.Condition_Desc_3_USR = *BLANK;

// DTL.Condition Desc. 4  USR = CON.*BLANK
DTL.Condition_Desc_4_USR = *BLANK;

// DTL.Broker Name = CON.*BLANK
DTL.Broker_Name = *BLANK;

//?USER: Exit program processing

CASE;

// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

PGM.*Return_code = 'Y2U9999';

RETURN;

ENDIF;

