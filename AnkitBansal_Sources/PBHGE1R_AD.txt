// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBHGE1R
// ?Date: 14.08.2025 Time: 03:47:58
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(Val Access CUA Window IF) TYPE(EXCINTFUN)                      AC1417789;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

}


// KEY.Company Number = PAR.Company Number
KEY.Company_Number = PAR.Company_Number;

// KEY.Order Number = PAR.Order Number
KEY.Order_Number = PAR.Order_Number;

//?USER: Initialize key screen

// KEY.Company Number = PAR.Company Number
KEY.Company_Number = PAR.Company_Number;

// KEY.Order Number = PAR.Order Number
KEY.Order_Number = PAR.Order_Number;

SET CURSOR;

//?USER: Initialize detail screen (existing record)

// LCL.Ship To Zip/Postal Code = DTL.Ship To Zip/Postal Code
LCL.Ship_To_Zip_Postal_Code = DTL.Ship_To_Zip_Postal_Code;

EXECUTE FUNCTION(RTV Country/Zip       RT) TYPE(RTVOBJ) FILE(CABBREP)           AC2059116;
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(DTL.Zip_Postal_Code);
PARAMETER(DTL.Country_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.Country Code is Blank
IF DTL.Country_Code = *BLANK;

// DTL.Country Code = CND.USA
DTL.Country_Code = 'USA';

ENDIF;

//?Upd NEW zip with cust's zip -- if its different
CASE;

// IF DTL.Country Code is Not Canada
IF DTL.Country_Code <> 'CAN';

// OR DTL.Country Code is Not Mexico
OR DTL.Country_Code <> 'MEX';

CASE;

// IF DTL.Zip/Postal Code NE LCL.Ship To Zip/Postal Code
IF DTL.Zip_Postal_Code <> LCL.Ship_To_Zip_Postal_Code;

// LCL.Text USR 5 = DTL.Zip/Postal Code
LCL.Text_USR_5 = DTL.Zip_Postal_Code;

// DTL.MPR Zip Code = CVTVAR(LCL.Text USR 5)
DTL.MPR_Zip_Code = CVTVAR(LCL.Text_USR_5);

ENDIF;

ENDIF;

//?USER: Validate detail screen fields

CASE;

// IF DTL.MPR Zip Code is eq 68108
IF DTL.MPR_Zip_Code = 68108;

// LCL.Ship To Zip/Postal Code = DTL.MPR Zip Code
LCL.Ship_To_Zip_Postal_Code = DTL.MPR_Zip_Code;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.MPR Zip Code = DTL.MPR Zip Code
LCL.MPR_Zip_Code = DTL.MPR_Zip_Code;

CASE;

// IF DTL.Country Code is Canada
IF DTL.Country_Code = 'CAN';

// LCL.MPR Zip Code = CND.Canada default
LCL.MPR_Zip_Code = 99999;

ENDIF;

CASE;

// IF LCL.MPR Zip Code is Entered
IF LCL.MPR_Zip_Code <> *ZERO;

EXECUTE FUNCTION(Rtv Rate per Zip      RT) TYPE(RTVOBJ) FILE(PBARCPP)           AC2056566;
PARAMETER(DTL.Country_Code);
PARAMETER(DTL.Ship_To_State_Code);
PARAMETER(LCL.MPR_Zip_Code);
PARAMETER(LCL.MPR_FOB_Rate_per_Mile);
PARAMETER(LCL.MPR_FOB_Miles_to_Omaha);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.MPR FOB Miles to Omaha is Entered
IF LCL.MPR_FOB_Miles_to_Omaha > 0;

// LCL.Ship To Zip/Postal Code = CON.*BLANK
LCL.Ship_To_Zip_Postal_Code = *BLANK;

// LCL.Ship To Zip/Postal Code = DTL.MPR Zip Code
LCL.Ship_To_Zip_Postal_Code = DTL.MPR_Zip_Code;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'State/Zip &1 &2 not found MPR Omaha Rate Table'
ERROR(USR4562);
MSGPARM(DTL.Ship_To_State_Code);
MSGPARM(DTL.MPR_Zip_Code);

ENDIF;

ENDIF;

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Zip code          CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC2058717;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(LCL.Ship_To_Zip_Postal_Code);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


