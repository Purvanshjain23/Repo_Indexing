// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBRIPVR
// ?Date: 14.08.2025 Time: 03:49:06
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?*** Setup Security & Company Title ***
// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// WRK.PRT Night Queue Run Sts = CND.no
WRK.PRT_Night_Queue_Run_Sts = 'N';

//?Modification history
DO;

//?***** Change Log
//?** 01/30/2006 LJB Project: CLAIMS
//?** Add prompt for Company Number, this will be optional. If no
//?** company is selected then all will be selected for the reports.
//?*****
//?** 02/23/2006 LJB
//?** If Report/Download field is hidden, default it to "R"
//?** This will happen when the @yes/no inpart parm = "N"
//?*****
//?** 03/09/09 slm E00336 Allow Report/Download/Email
//?** Input pamr will determine which is allowed or not allowed
//?** Changed from a Yes no to A = All, E= Email, *blanks = Report only
//?** Allow for email without place the download file on the servers
//?** the server for this processing TF can not use.
//?*****
ENDDO;

// LCL.Email Claim Usr = CND.blank
LCL.Email_Claim_Usr = *BLANK;

CASE;

// IF PAR.Allow Download Selection is Report/Download/Email
IF PAR.Allow_Download_Selection = 'A';

// LCL.Email Claim Usr = CND.yes
LCL.Email_Claim_Usr = 'Y';

// IF PAR.Allow Download Selection is Report/Email
IF PAR.Allow_Download_Selection = 'E';

// LCL.Email Claim Usr = CND.yes
LCL.Email_Claim_Usr = 'Y';

// IF PAR.Allow Download Selection is Report
IF PAR.Allow_Download_Selection = *BLANK;

// LCL.Email Claim Usr = CND.blank
LCL.Email_Claim_Usr = *BLANK;

ENDIF;

//?USER: Load screen

// LCL.Email Claim Usr = CND.blank
LCL.Email_Claim_Usr = *BLANK;

// DTL.Text USR 23 = CON.*BLANK
DTL.Text_USR_23 = *BLANK;

// DTL.Claim Item Company Number = PAR.Company Number
DTL.Claim_Item_Company_Number = PAR.Company_Number;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Claim_Item_Company_Number);
PARAMETER(DTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?*** Default to "Claims by Customer" Report. ***
// DTL.Report or File USR = CND.Report
DTL.Report_or_File_USR = 'R';

// DTL.Text USR 20 = Condition name of DTL.Report or File USR
DTL.Text_USR_20 = RTVCND(DTL.Report_or_File_USR);

// DTL.Claim Reports 2       USR = CND.Co/Cust/Reason/Order
DTL.Claim_Reports_2_USR = 1;

CASE;

// IF PAR.Allow Download Selection is Report/Download/Email
IF PAR.Allow_Download_Selection = 'A';

// DTL.Text USR 23 = CON.Report/Dwnld/Email
DTL.Text_USR_23 = 'Report/Dwnld/Email';

// IF PAR.Allow Download Selection is Report/Email
IF PAR.Allow_Download_Selection = 'E';

// DTL.Text USR 23 = CON.Report/Email
DTL.Text_USR_23 = 'Report/Email';

// IF PAR.Allow Download Selection is Report
IF PAR.Allow_Download_Selection = *BLANK;

// DTL.Text USR 23 = CON.Report
DTL.Text_USR_23 = 'Report';

ENDIF;

//?USER: Validate fields

// DTL.Text USR 20 = Condition name of DTL.Report or File USR
DTL.Text_USR_20 = RTVCND(DTL.Report_or_File_USR);

//?01/30/06 LJB Allow Company Number to be selected - optional
//?F4 Prompting for Company Number.
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Claim Item Company Number
AND PGM.*Cursor_field = DTL.Claim_Item_Company_Number;

// Call program SEL Company by Number  SR.
CALL PROGRAM(SEL Company by Number  SR) ('CAAJSRR');
PARAMETER(DTL.Claim_Item_Company_Number);

ENDIF;

//?051705 slm Add Memo Posting Dates per Alice
//?F4 Prompting for Item Code.
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Claim Item Code
AND PGM.*Cursor_field = DTL.Claim_Item_Code;

// Call program SEL Item for Claim     SR.
CALL PROGRAM(SEL Item for Claim     SR) ('PDOOSRR');
PARAMETER(DTL.Claim_Item_Company_Number);
PARAMETER(DTL.Claim_Item_Code);

ENDIF;

//?Validate Claim Numbers.
DO;

CASE;

// IF DTL.Claim Start Number is Zero
IF DTL.Claim_Start_Number = *ZERO;

CASE;

// IF DTL.Claim End Number is Not Zero
IF DTL.Claim_End_Number <> *ZERO;

// DTL.Claim Start Number = DTL.Claim End Number
DTL.Claim_Start_Number = DTL.Claim_End_Number;

ENDIF;

// IF DTL.Claim End Number is Zero
IF DTL.Claim_End_Number = *ZERO;

CASE;

// IF DTL.Claim Start Number is Not Zero
IF DTL.Claim_Start_Number <> *ZERO;

// DTL.Claim End Number = DTL.Claim Start Number
DTL.Claim_End_Number = DTL.Claim_Start_Number;

ENDIF;

ENDIF;

ENDDO;

//?Validate Entry Dates and posting dates.
DO;

CASE;

// IF DTL.Claim Start Entry Date is not entered
IF DTL.Claim_Start_Entry_Date = *ZERO;

CASE;

// IF DTL.Claim End Entry Date is Entered
IF DTL.Claim_End_Entry_Date <> *ZERO;

// DTL.Claim Start Entry Date = DTL.Claim End Entry Date
DTL.Claim_Start_Entry_Date = DTL.Claim_End_Entry_Date;

ENDIF;

// IF DTL.Claim End Entry Date is not entered
IF DTL.Claim_End_Entry_Date = *ZERO;

CASE;

// IF DTL.Claim Start Entry Date is Entered
IF DTL.Claim_Start_Entry_Date <> *ZERO;

// DTL.Claim End Entry Date = DTL.Claim Start Entry Date
DTL.Claim_End_Entry_Date = DTL.Claim_Start_Entry_Date;

ENDIF;

ENDIF;

CASE;

// IF DTL.Memo Posting Str Date Usr is Not Entered
IF DTL.Memo_Posting_Str_Date_Usr = *ZERO;

CASE;

// IF DTL.Memo Posting End Date Usr is Entered
IF DTL.Memo_Posting_End_Date_Usr <> *ZERO;

// DTL.Memo Posting Str Date Usr = DTL.Memo Posting End Date Usr
DTL.Memo_Posting_Str_Date_Usr = DTL.Memo_Posting_End_Date_Usr;

ENDIF;

// IF DTL.Memo Posting End Date Usr is Not Entered
IF DTL.Memo_Posting_End_Date_Usr = *ZERO;

CASE;

// IF DTL.Memo Posting Str Date Usr is Entered
IF DTL.Memo_Posting_Str_Date_Usr <> *ZERO;

// DTL.Memo Posting End Date Usr = DTL.Memo Posting Str Date Usr
DTL.Memo_Posting_End_Date_Usr = DTL.Memo_Posting_Str_Date_Usr;

ENDIF;

ENDIF;

ENDDO;

//?Validate Status for Open Download.
DO;

CASE;

// IF DTL.Report or File USR is Open Download
IF DTL.Report_or_File_USR = 'O';

// OR DTL.Report or File USR is Open Email
OR DTL.Report_or_File_USR = '2';

CASE;

// IF DTL.Claim Status is Blank
IF DTL.Claim_Status = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Claim Status = CND.Blank
DTL.Claim_Status = *BLANK;

ENDIF;

ENDIF;

ENDDO;

//?Validate selection for  report/download/email
DO;

CASE;

// IF PAR.Allow Download Selection is Report/Download/Email
IF PAR.Allow_Download_Selection = 'A';

//?All selections is allowed.
// IF PAR.Allow Download Selection is Report/Email
IF PAR.Allow_Download_Selection = 'E';

CASE;

// IF DTL.Report or File USR is Email Selection
IF DTL.Report_or_File_USR = '2'/'1';

// IF DTL.Report or File USR is Report
IF DTL.Report_or_File_USR = 'R';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Only the selection of Report or Email is allowed'
ERROR(USR4124);

ENDIF;

// IF PAR.Allow Download Selection is Report
IF PAR.Allow_Download_Selection = *BLANK;

//?Report or file is not available to the users
//?this field is not display to the user so no validation is
//?needed
ENDIF;

ENDDO;

//?Validate email
DO;

// LCL.Email Claim Usr = CND.blank
LCL.Email_Claim_Usr = *BLANK;

CASE;

// IF DTL.Report or File USR is Report
IF DTL.Report_or_File_USR = 'R';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Report or File USR is Open Email
IF DTL.Report_or_File_USR = '2';

// OR DTL.Report or File USR is Weekly Email
OR DTL.Report_or_File_USR = '1';

// LCL.Email Claim Usr = CND.yes
LCL.Email_Claim_Usr = 'Y';

CASE;

// IF DTL.Email Address is Entered
IF DTL.Email_Address <> *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send information message - 'Email Address is required to email a report.'
MESSAGE(USR4022 *INFO);
MSGPARM(DTL.Email_Address);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Email Address is Blank
IF DTL.Email_Address = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Email Address Not allowed'
ERROR(USR4127);

ENDIF;

ENDIF;

ENDIF;

ENDDO;

//?CALC: Screen function fields

// DTL.Text USR 20 = Condition name of DTL.Report or File USR
DTL.Text_USR_20 = RTVCND(DTL.Report_or_File_USR);

EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(OPCXREP)          AC1273797;
PARAMETER(DTL.Reason_Code);
PARAMETER(DTL.Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(DTL.Claim_Ship_to_Customer);
PARAMETER(DTL.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Load Status Description.
CASE;

// IF DTL.Claim Status is Blank
IF DTL.Claim_Status = *BLANK;

// DTL.Claim Status Desc     USR = CON.*BLANK
DTL.Claim_Status_Desc_USR = *BLANK;

//?Load Status Description.
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Claim Status Desc     USR = Condition name of DTL.Claim Status
DTL.Claim_Status_Desc_USR = RTVCND(DTL.Claim_Status);

ENDIF;

EXECUTE FUNCTION(RTV Salesperson        RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1369411;
PARAMETER(DTL.Salesperson_to_Rvw_Claim);
PARAMETER(DTL.Sales_Route_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Item desc/type     RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1128573;
PARAMETER(DTL.Claim_Item_Company_Number);
PARAMETER(DTL.Claim_Item_Code);
PARAMETER(DTL.Item_Description);
PARAMETER(WRK.Unused_Parm_Status_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


//?Load Report Description
DO;

CASE;

// IF DTL.Claim Reports 2       USR is Co/Cust/Reason/Order
IF DTL.Claim_Reports_2_USR = '1';

// DTL.Claim Reports 2 Desc  USR = CON.Claims by Customer
DTL.Claim_Reports_2_Desc_USR = 'Claims by Customer';

// IF DTL.Claim Reports 2       USR is Co/Amt/Cust/Reason/Order
IF DTL.Claim_Reports_2_USR = '2';

// DTL.Claim Reports 2 Desc  USR = CON.Claims by Claim Amount
DTL.Claim_Reports_2_Desc_USR = 'Claims by Claim Amount';

// IF DTL.Claim Reports 2       USR is Co/Reason/Claim
IF DTL.Claim_Reports_2_USR = '3';

// DTL.Claim Reports 2 Desc  USR = CON.Claims by Reason Code
DTL.Claim_Reports_2_Desc_USR = 'Claims by Reason Code';

ENDIF;

ENDDO;

//?Load Report/File Description.
DO;

// DTL.Text USR 20 = Condition name of DTL.Report or File USR
DTL.Text_USR_20 = RTVCND(DTL.Report_or_File_USR);

ENDDO;

//?USER: Validate relations

//?Starting Claim Number must be less than Ending Claim Number.
DO;

CASE;

// IF DTL.Claim Start Number GT DTL.Claim End Number
IF DTL.Claim_Start_Number > DTL.Claim_End_Number;

// Send error message - 'Starting Claim Number must be less than Ending Claim Number.'
ERROR(USR2774);
MSGPARM(DTL.Claim_Start_Number);
MSGPARM(DTL.Claim_End_Number);

ENDIF;

ENDDO;

//?Starting Claim Entry Date must be < Ending Claim Entry Date.
DO;

CASE;

// IF DTL.Claim Start Entry Date GT DTL.Claim End Entry Date
IF DTL.Claim_Start_Entry_Date > DTL.Claim_End_Entry_Date;

// Send error message - 'From date exceeds to date.  Please re-enter.'
ERROR(USR0319);
MSGPARM(DTL.Claim_Start_Entry_Date);

ENDIF;

ENDDO;

//?Starting Memo Post. Str Dte must be < Memo Post. End Date.
DO;

CASE;

// IF DTL.Memo Posting Str Date Usr GT DTL.Memo Posting End Date Usr
IF DTL.Memo_Posting_Str_Date_Usr > DTL.Memo_Posting_End_Date_Usr;

// Send error message - 'From date exceeds to date.  Please re-enter.'
ERROR(USR0319);
MSGPARM(DTL.Memo_Posting_Str_Date_Usr);

ENDIF;

ENDDO;

//?Validate Item Code.
DO;

CASE;

// IF DTL.Claim Item Code is Entered
IF DTL.Claim_Item_Code <> *ZERO;

EXECUTE FUNCTION(VAL Exist Company/Item RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1527869;
PARAMETER(DTL.Claim_Item_Company_Number);
PARAMETER(DTL.Claim_Item_Code);
{
 //?USER: Initialize routine

 //?Template version identifier - Edit to reflect current version.
 //?Template version identifier - Edit to reflect current version.
 EXECUTE FUNCTION(@Template Version) TYPE(EXCINTFUN)                             AC1523909;
 PARAMETER('1');
}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Item does not exist.'
ERROR(USR2800);
MSGPARM(DTL.Claim_Item_Code);

ENDIF;

ENDIF;

ENDDO;

//?USER: User defined action

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

CASE;

// IF DTL.Report or File USR is Download Report
IF DTL.Report_or_File_USR = 'O'/'W';

// DTL.Email Address = CON.*BLANK
DTL.Email_Address = *BLANK;

// IF DTL.Report or File USR is Report
IF DTL.Report_or_File_USR = 'R';

// DTL.Email Address = CON.*BLANK
DTL.Email_Address = *BLANK;

ENDIF;

CASE;

// IF DTL.Report or File USR is Report
IF DTL.Report_or_File_USR = 'R';

//?Report.
DO;

// Call program PMT Print Option  SHR  PV.
CALL PROGRAM(PMT Print Option  SHR  PV) ('PDG0PVR');
PARAMETER('Claims by Customer');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(WRK.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Submit the Report.
DO;

//?Dynamically override the SBMJOB command
//?with the job queue from the Print Options screen.
// PGM.*Sbmjob override string = CONCAT(CON.JOBQ(,PAR.PRT Night Queue,CND.*None)
PGM.*Sbmjob_override_string = 'JOBQ(' + PAR.PRT_Night_Queue (*ZERO);

// PGM.*Sbmjob override string = CONCAT(PGM.*Sbmjob override string,CON.),CND.*None
PGM.*Sbmjob_override_string = PGM.*Sbmjob_override_string + ')' (*ZERO);

//?Submit the Report.
// Call program PRT Claims by Customer XF.
SBMJOB;
CALL PROGRAM(PRT Claims by Customer XF) ('PDR8XFR');
PARAMETER(DTL.Claim_Item_Company_Number);
PARAMETER(DTL.Claim_Item_Code);
PARAMETER(DTL.Reason_Code);
PARAMETER(DTL.Claim_Department_Code);
PARAMETER(DTL.Salesperson_to_Rvw_Claim);
PARAMETER(DTL.Claim_Ship_to_Customer);
PARAMETER(DTL.Claim_Status);
PARAMETER(DTL.Claim_Start_Number);
PARAMETER(DTL.Claim_End_Number);
PARAMETER(DTL.Claim_Start_Entry_Date);
PARAMETER(DTL.Claim_End_Entry_Date);
PARAMETER(DTL.Claim_Reports_2_USR);
PARAMETER(DTL.Memo_Posting_Str_Date_Usr);
PARAMETER(DTL.Memo_Posting_End_Date_Usr);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
SBMJOBOVR JOB(CLAIMRPT);
SBMJOBEND;

//?Send submit message to user.
// Send information message - 'The report has been submitted.'
MESSAGE(USR2720 *INFO);

ENDDO;

ENDIF;

ENDDO;

// IF *OTHERWISE
IF *OTHERWISE;

//?Download or Email
DO;

CASE;

// IF DTL.Report or File USR is Weekly Download
IF DTL.Report_or_File_USR = 'W';

// OR DTL.Report or File USR is Weekly Email
OR DTL.Report_or_File_USR = '1';

//?Build Weekly Download or Email File
DO;

//?Submit the File Build.
// Call program BLD Weekly Claims Dwnl UP.
CALL PROGRAM(BLD Weekly Claims Dwnl UP) ('PMGCUPCLP');
PARAMETER(DTL.Claim_Item_Company_Number);
PARAMETER(DTL.Claim_Item_Code);
PARAMETER(DTL.Reason_Code);
PARAMETER(DTL.Salesperson_to_Rvw_Claim);
PARAMETER(DTL.Claim_Ship_to_Customer);
PARAMETER(DTL.Claim_Status);
PARAMETER(DTL.Claim_Start_Number);
PARAMETER(DTL.Claim_End_Number);
PARAMETER(DTL.Claim_Start_Entry_Date);
PARAMETER(DTL.Claim_End_Entry_Date);
PARAMETER(DTL.Memo_Posting_Str_Date_Usr);
PARAMETER(DTL.Memo_Posting_End_Date_Usr);
PARAMETER(DTL.Report_or_File_USR);
PARAMETER(DTL.Email_Address);

//?Send submit message to user.
// Send information message - 'The file build has been submitted.'
MESSAGE(USR2861 *INFO);

ENDDO;

// IF *OTHERWISE
IF *OTHERWISE;

//?Build Open Download or Email file
DO;

//?Submit the File Build.
// Call program BLD Open Claims Dwnld  UP.
SBMJOB;
CALL PROGRAM(BLD Open Claims Dwnld  UP) ('PMGEUPCLP');
PARAMETER(DTL.Claim_Item_Company_Number);
PARAMETER(DTL.Claim_Item_Code);
PARAMETER(DTL.Reason_Code);
PARAMETER(DTL.Salesperson_to_Rvw_Claim);
PARAMETER(DTL.Claim_Ship_to_Customer);
PARAMETER(DTL.Claim_Status);
PARAMETER(DTL.Claim_Start_Number);
PARAMETER(DTL.Claim_End_Number);
PARAMETER(DTL.Claim_Start_Entry_Date);
PARAMETER(DTL.Claim_End_Entry_Date);
PARAMETER(DTL.Memo_Posting_Str_Date_Usr);
PARAMETER(DTL.Memo_Posting_End_Date_Usr);
PARAMETER(DTL.Report_or_File_USR);
PARAMETER(DTL.Email_Address);
SBMJOBOVR JOB(CLAIMOPEN);
SBMJOBEND;

//?Send submit message to user.
// Send information message - 'The file build has been submitted.'
MESSAGE(USR2861 *INFO);

ENDDO;

ENDIF;

ENDDO;

ENDIF;

