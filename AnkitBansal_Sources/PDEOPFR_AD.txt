// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDEOPFR
// ?Date: 14.08.2025 Time: 12:03:45
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Change Log.
//?*****************************************************************
//?*** OMS305 - 12/17/97                                         ***
//?***          Added "Pounds" (Weight Billed) to the report.    ***
//?***          Also added a selection for Warehouse.            ***
//?***          Also added a new sort by state or country.       ***
//?***          Also added a new selection Export/Domestic.      ***
//?*****************************************************************
EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

//?Determine Warehouse Selection Criteria.
CASE;

// IF PAR.USR Warehouse Code is Warehouse Code Blank
IF PAR.USR_Warehouse_Code = *BLANK;

// AND PAR.USR CDE Parm 1 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_1 = *BLANK;

// AND PAR.USR CDE Parm 2 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_2 = *BLANK;

// AND PAR.USR CDE Parm 3 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_3 = *BLANK;

// AND PAR.USR CDE Parm 4 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_4 = *BLANK;

// AND PAR.USR CDE Parm 5 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_5 = *BLANK;

// AND PAR.USR CDE Parm 6 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_6 = *BLANK;

// AND PAR.USR CDE Parm 7 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_7 = *BLANK;

// AND PAR.USR CDE Parm 8 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_8 = *BLANK;

// AND PAR.USR CDE Parm 9 is Warehouse Code Blank
AND PAR.USR_CDE_Parm_9 = *BLANK;

// WRK.Select all Warehouses USR = CND.yes
WRK.Select_all_Warehouses_USR = 'Y';

//?Determine Warehouse Selection Criteria.
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Select all Warehouses USR = CND.no
WRK.Select_all_Warehouses_USR = 'N';

ENDIF;

//?USER: Record selection processing

//?*** Check Warehouse Selections ***
CASE;

// IF WRK.Select all Warehouses USR is no
IF WRK.Select_all_Warehouses_USR = 'N';

//?Check Warehouse Select/Omit
CASE;

// IF PAR.USR Warehouse Code EQ DB1.Warehouse Code
IF PAR.USR_Warehouse_Code = DB1.Warehouse_Code;

// OR PAR.USR CDE Parm 1 EQ DB1.Warehouse Code
OR PAR.USR_CDE_Parm_1 = DB1.Warehouse_Code;

// OR PAR.USR CDE Parm 2 EQ DB1.Warehouse Code
OR PAR.USR_CDE_Parm_2 = DB1.Warehouse_Code;

// OR PAR.USR CDE Parm 3 EQ DB1.Warehouse Code
OR PAR.USR_CDE_Parm_3 = DB1.Warehouse_Code;

// OR PAR.USR CDE Parm 4 EQ DB1.Warehouse Code
OR PAR.USR_CDE_Parm_4 = DB1.Warehouse_Code;

// OR PAR.USR CDE Parm 5 EQ DB1.Warehouse Code
OR PAR.USR_CDE_Parm_5 = DB1.Warehouse_Code;

// OR PAR.USR CDE Parm 6 EQ DB1.Warehouse Code
OR PAR.USR_CDE_Parm_6 = DB1.Warehouse_Code;

// OR PAR.USR CDE Parm 7 EQ DB1.Warehouse Code
OR PAR.USR_CDE_Parm_7 = DB1.Warehouse_Code;

// OR PAR.USR CDE Parm 8 EQ DB1.Warehouse Code
OR PAR.USR_CDE_Parm_8 = DB1.Warehouse_Code;

// OR PAR.USR CDE Parm 9 EQ DB1.Warehouse Code
OR PAR.USR_CDE_Parm_9 = DB1.Warehouse_Code;

//?Match (Skip Record if S/O Flag is Omit).
CASE;

// IF PAR.USR Select/Omit Flag is Omit
IF PAR.USR_Select_Omit_Flag = 'O';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?No Match (Skip Record if S/O Flag is Select).
CASE;

// IF PAR.USR Select/Omit Flag is Select
IF PAR.USR_Select_Omit_Flag = 'S';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?USER: Process top of page

//?Load TOP Selection Criteria.
MOVE *ALL (To: TOP From: PAR);

// TOP.Company Number = PAR.Company Number
TOP_Company_Number = PAR.Company_Number;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(TOP_Company_Number);
PARAMETER(TOP_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// TOP.USR From Date = PAR.USR From Date
TOP_USR_From_Date = PAR.USR_From_Date;

// TOP.USR To Date = PAR.USR To Date
TOP_USR_To_Date = PAR.USR_To_Date;

// TOP.Condition Desc. 1  USR = Condition name of TOP.Report Type USR
TOP_Condition_Desc_1_USR = RTVCND(TOP_Report_Type_USR);

//?Determine & Load Select/Omit Descriptor.
CASE;

// IF PAR.USR Select/Omit Flag is Select
IF PAR.USR_Select_Omit_Flag = 'S';

// TOP.USR Desc. 10 = CON.Select
TOP_USR_Desc_10 = 'Select';

//?Determine & Load Select/Omit Descriptor.
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.USR Desc. 10 = CON.Omit
TOP_USR_Desc_10 = 'Omit';

ENDIF;

//?Determine & Load Export/Domestic Descriptor.
CASE;

// IF PAR.Export Status is yes
IF PAR.Export_Status = 'Y';

// TOP.USR Description 20 = CON.Export Only
TOP_USR_Description_20 = 'Export Only';

//?Determine & Load Export/Domestic Descriptor.
// IF PAR.Export Status is no
IF PAR.Export_Status = 'N';

// TOP.USR Description 20 = CON.Domestic Only
TOP_USR_Description_20 = 'Domestic Only';

//?Determine & Load Export/Domestic Descriptor.
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.USR Description 20 = CON.Domestic & Export
TOP_USR_Description_20 = 'Domestic & Export';

ENDIF;

//?Determine & Load Warehouse Descriptor.
CASE;

// IF WRK.Select all Warehouses USR is yes
IF WRK.Select_all_Warehouses_USR = 'Y';

//?Load Defaults for All Warehouse Selections in 1PG.
// TOP.USR Warehouse Code = CON.ALL
TOP_USR_Warehouse_Code = 'ALL';

//?Determine & Load Warehouse Descriptor.
// IF *OTHERWISE
IF *OTHERWISE;

//?Load Warehouse Codes on 1PG Format.
// TOP.USR Warehouse Code = PAR.USR Warehouse Code
TOP_USR_Warehouse_Code = PAR.USR_Warehouse_Code;

// TOP.USR CDE Parm 1 = PAR.USR CDE Parm 1
TOP_USR_CDE_Parm_1 = PAR.USR_CDE_Parm_1;

// TOP.USR CDE Parm 2 = PAR.USR CDE Parm 2
TOP_USR_CDE_Parm_2 = PAR.USR_CDE_Parm_2;

// TOP.USR CDE Parm 3 = PAR.USR CDE Parm 3
TOP_USR_CDE_Parm_3 = PAR.USR_CDE_Parm_3;

// TOP.USR CDE Parm 4 = PAR.USR CDE Parm 4
TOP_USR_CDE_Parm_4 = PAR.USR_CDE_Parm_4;

// TOP.USR CDE Parm 5 = PAR.USR CDE Parm 5
TOP_USR_CDE_Parm_5 = PAR.USR_CDE_Parm_5;

// TOP.USR CDE Parm 6 = PAR.USR CDE Parm 6
TOP_USR_CDE_Parm_6 = PAR.USR_CDE_Parm_6;

// TOP.USR CDE Parm 7 = PAR.USR CDE Parm 7
TOP_USR_CDE_Parm_7 = PAR.USR_CDE_Parm_7;

// TOP.USR CDE Parm 8 = PAR.USR CDE Parm 8
TOP_USR_CDE_Parm_8 = PAR.USR_CDE_Parm_8;

// TOP.USR CDE Parm 9 = PAR.USR CDE Parm 9
TOP_USR_CDE_Parm_9 = PAR.USR_CDE_Parm_9;

ENDIF;

//?Determine & Load Item Structure Class Descriptor.
CASE;

// IF PAR.Item Structure Class Code is Entered
IF PAR.Item_Structure_Class_Code <> *ZERO;

EXECUTE FUNCTION(Rtv Item Class Desc    RT) TYPE(RTVOBJ) FILE(OMFAREP)          AC1205440;
PARAMETER(TOP_Item_Structure_Class_Code);
PARAMETER(TOP_Item_Structure_Class_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Determine & Load Item Structure Class Descriptor.
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Item Structure Class Desc = CON.*ALL
TOP_Item_Structure_Class_Desc = *ALL;

ENDIF;

//?Determine & Load State Descriptor.
CASE;

// IF PAR.State is *Not Blank
IF PAR.State <> *BLANK;

EXECUTE FUNCTION(RTV State Description  RT) TYPE(RTVOBJ) FILE(CAACREP)          AC1227485;
PARAMETER(TOP_State);
PARAMETER(TOP_State_Description);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Determine & Load State Descriptor.
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.State Description = CON.*ALL
TOP_State_Description = *ALL;

ENDIF;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

// SUPPRESSED PRINT Company Number header format

CASE;

IF NEW Export_Country_Code;
//?Setup Country Print Format
CASE;

// IF CUR.Export Country Code is Blank
IF CUR.Export_Country_Code = *BLANK;

// CUR.Export Country Code = CON.BLANK
CUR.Export_Country_Code = 'BLANK';

ENDIF;

CASE;

// IF PAR.Report seq-State/CntryUSR is By State
IF PAR.Report_seq_State_CntryUSR = '2';

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

// Print Export Country Code header format
PRINT Export Country Code header format;

ENDIF;

// SUPPRESSED PRINT Ship To State Code header format

//?USER: On print of detail format

//?7/09/02 Process cm/dm by flags
EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
PARAMETER(DB1.Order_Type_Sales);
PARAMETER(LCL.Billing_Activity_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Billing Activity Type is Not Invoice
IF LCL.Billing_Activity_Type = '2'/'3'/'4';

CASE;

// IF DB1.Affect Sales Pnds Status is no
IF DB1.Affect_Sales_Pnds_Status = 'N';

// AND DB1.Affect Sales Doll Status is yes
AND DB1.Affect_Sales_Doll_Status = 'Y';

// CUR.Weight Billed = CON.*ZERO
CUR.Weight_Billed = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Weight Billed = DB1.Weight Billed
CUR.Weight_Billed = DB1.Weight_Billed;

ENDIF;

ENDIF;

//?reverse sign if credit memo and positive
CASE;

// IF LCL.Billing Activity Type is Credit Memo
IF LCL.Billing_Activity_Type = '2';

// AND CUR.Weight Billed is Greater than zero
AND CUR.Weight_Billed > *ZERO;

// CUR.Weight Billed = CON.*ZERO - CUR.Weight Billed
CUR.Weight_Billed = *ZERO - CUR.Weight_Billed;

ENDIF;

//?USER: Process after print of detail format

NXT.Billing_Detail_Gr_$_SUM = SUM(CUR.Billing_Detail_Gross_Dol);

NXT.FOB_Gross_Amount_SUM = SUM(CUR.FOB_Gross_Amount);

NXT.Weight_Billed_Sum_13 = SUM(CUR.Weight_Billed);

//?USER: Print required level totals

CASE;

IF NEW Ship_To_State_Code;
// Print Ship To State Code totals format
PRINT Ship To State Code totals format;

//?Embedded PRTOBJ : PRT Shpd Items by Cls PO
CASE;

// IF PAR.Report Type USR is Summary
IF PAR.Report_Type_USR = 'S';

QUIT;

ENDIF;

EXECUTE FUNCTION(PRT Shpd Items by Cls PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Export_Country_Code);
PARAMETER(CUR.Ship_To_State_Code);
PARAMETER(PAR.USR_From_Date);
PARAMETER(PAR.USR_To_Date);
PARAMETER(PAR.Item_Structure_Class_Code);
PARAMETER(PAR.USR_Warehouse_Code);
PARAMETER(PAR.USR_CDE_Parm_1);
PARAMETER(PAR.USR_CDE_Parm_2);
PARAMETER(PAR.USR_CDE_Parm_3);
PARAMETER(PAR.USR_CDE_Parm_4);
PARAMETER(PAR.USR_CDE_Parm_5);
PARAMETER(PAR.USR_CDE_Parm_6);
PARAMETER(PAR.USR_CDE_Parm_7);
PARAMETER(PAR.USR_CDE_Parm_8);
PARAMETER(PAR.USR_CDE_Parm_9);
PARAMETER(PAR.USR_Select_Omit_Flag);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


NXT.Billing_Detail_Gr_$_SUM = SUM(CUR.Billing_Detail_Gr_$_SUM);

NXT.FOB_Gross_Amount_SUM = SUM(CUR.FOB_Gross_Amount_SUM);

NXT.Weight_Billed_Sum_13 = SUM(CUR.Weight_Billed_Sum_13);

ENDIF;

CASE;

IF NEW Export_Country_Code;
//?Setup Country Print Format
CASE;

// IF PAR.Report seq-State/CntryUSR is By State
IF PAR.Report_seq_State_CntryUSR = '2';

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

// Print Export Country Code totals format
PRINT Export Country Code totals format;

NXT.Billing_Detail_Gr_$_SUM = SUM(CUR.Billing_Detail_Gr_$_SUM);

NXT.FOB_Gross_Amount_SUM = SUM(CUR.FOB_Gross_Amount_SUM);

NXT.Weight_Billed_Sum_13 = SUM(CUR.Weight_Billed_Sum_13);

ENDIF;

CASE;

IF NEW Company_Number;
// SUPPRESSED PRINT Company Number totals format

NXT.FOB_Gross_Amount_SUM = SUM(CUR.FOB_Gross_Amount_SUM);

NXT.Billing_Detail_Gr_$_SUM = SUM(CUR.Billing_Detail_Gr_$_SUM);

NXT.Weight_Billed_Sum_13 = SUM(CUR.Weight_Billed_Sum_13);

ENDIF;

