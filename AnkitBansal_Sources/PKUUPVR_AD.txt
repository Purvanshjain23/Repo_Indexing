// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKUUPVR
// ?Date: 14.08.2025 Time: 02:51:19
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?E11784 JJH 10/02/17 - Hog Performance/Hog Population Reports
//?- Correct concatenation of the 6 3-character Source Codes.  Allow for
//?  2-character Source Codes like SO and TO.  Allow for Blank in 3rd
//?  position.
//?E10350 DN  07/17/17 - Hog Population Report Modifications
//?- Corrected parms list when calling PKUYUPR.
//?E10350 JJH 05/17/17 - Hog Population Report Modifications
//?- Remove SR Description
//?- Hide SR Source Code
//?- Add 6 Source Code fields named TH Source Code-1 USR thourgh
//?  TH Source Code-6 USR to replace SR Source Code
//?- F4 to call SELRCD PKSRDRR for TH Source Code-X USR
//?- Validate entered TH Source Code-X USR is a valid Source Code
//?  for the Company.
//?- Change Parameters to EXCMSG PRK0491
//?  - TH Source Code-X18 USR replaces TH Source Code
//?  - Oms Application Code replaces Oms System Value Alpha
//?H16853 ISE 11/09/2020 - Recompiled due to change in Buy Order Number
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

//?USER: Load screen

CASE;

// IF WRK.First Time Flag Usr EQ WRK.Blank USR
IF WRK.First_Time_Flag_Usr = WRK.Blank_USR;

// DTL.HRH Company Number = WRK.CC Company Number
DTL.HRH_Company_Number = WRK.CC_Company_Number;

// WRK.Display Print Prompt  Usr = CND.Prompt is to be displayed
WRK.Display_Print_Prompt_Usr = 'Y';

// WRK.First Time Flag Usr = CND.Yes
WRK.First_Time_Flag_Usr = 'Y';

// DTL.Type of Popltn Rpt    USR = CND.Head
DTL.Type_of_Popltn_Rpt_USR = 'H';

// DTL.Create Outfile USR = CND.No
DTL.Create_Outfile_USR = 'N';

ENDIF;

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(DTL.HRH_Company_Number);
PARAMETER(WRK.Oms_Name);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


// DTL.Oms Name = PAR.Oms Name
DTL.Oms_Name = PAR.Oms_Name;

//?USER: Validate fields

//?Select Farm Site
CASE;

// IF PGM.*Cursor field <IS> DTL.HRH Farm Site
IF PGM.*Cursor_field = DTL.HRH_Farm_Site;

// Call program Sel HPS Farm Site     UP.
CALL PROGRAM(Sel HPS Farm Site     UP) ('HP5003');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(DTL.HRH_Farm_Site);
PARAMETER(DTL.Farm_site_Name_f_HPS_USR);
PARAMETER(NLL.MTech_Farm_Site_Ref);

ENDIF;

//?Select Cutout Matrix or Farm Site or Producer Location
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

//?Select Cutout Matrix Code/Effective Date
CASE;

// IF PGM.*Cursor field <IS> DTL.Cutout Matrix Code USR
IF PGM.*Cursor_field = DTL.Cutout_Matrix_Code_USR;

// OR PGM.*Cursor field <IS> DTL.Effective Month/Day USR
OR PGM.*Cursor_field = DTL.Effective_Month_Day_USR;

// Call program Sel Cutout Matrix     SR.
CALL PROGRAM(Sel Cutout Matrix     SR) ('PDAZSRR');
PARAMETER(DTL.HRH_Company_Number);
PARAMETER(DTL.Cutout_Matrix_Code_USR);
PARAMETER(DTL.Effective_Month_Day_USR);
PARAMETER(DTL.Description_30_USR);

ENDIF;

//?Select Farm Site
CASE;

// IF PGM.*Cursor field <IS> DTL.HRH Farm Site
IF PGM.*Cursor_field = DTL.HRH_Farm_Site;

// Call program Sel HPS Farm Site     UP.
CALL PROGRAM(Sel HPS Farm Site     UP) ('HP5003');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(DTL.HRH_Farm_Site);
PARAMETER(DTL.Farm_site_Name_f_HPS_USR);
PARAMETER(NLL.MTech_Farm_Site_Ref);

ENDIF;

//?Select producer location
CASE;

// IF PGM.*Cursor field <IS> DTL.HRH Prdcr Location Code
IF PGM.*Cursor_field = DTL.HRH_Prdcr_Location_Code;

// Call program Sel Producer Loc      SR.
CALL PROGRAM(Sel Producer Loc      SR) ('PKKMSRR');
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.HRH_Prdcr_Location_Code);

ENDIF;

ENDIF;

//?E10350 JJH 05/17/17 - SELRCD for TH Source Code-X USR fields
//?F4 = Source Code-1 through Source Code-6
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.TH Source Code-1 USR
AND PGM.*Cursor_field = DTL.TH_Source_Code_1_USR;

// Call program Sel Source            SR.
CALL PROGRAM(Sel Source            SR) ('PKDRSRR');
PARAMETER(DTL.TH_Source_Code_1_USR);

//?F4 = Source Code-1 through Source Code-6
// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.TH Source Code-2 USR
AND PGM.*Cursor_field = DTL.TH_Source_Code_2_USR;

// Call program Sel Source            SR.
CALL PROGRAM(Sel Source            SR) ('PKDRSRR');
PARAMETER(DTL.TH_Source_Code_2_USR);

//?F4 = Source Code-1 through Source Code-6
// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.TH Source Code-3 USR
AND PGM.*Cursor_field = DTL.TH_Source_Code_3_USR;

// Call program Sel Source            SR.
CALL PROGRAM(Sel Source            SR) ('PKDRSRR');
PARAMETER(DTL.TH_Source_Code_3_USR);

//?F4 = Source Code-1 through Source Code-6
// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.TH Source Code-4 USR
AND PGM.*Cursor_field = DTL.TH_Source_Code_4_USR;

// Call program Sel Source            SR.
CALL PROGRAM(Sel Source            SR) ('PKDRSRR');
PARAMETER(DTL.TH_Source_Code_4_USR);

//?F4 = Source Code-1 through Source Code-6
// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.TH Source Code-5 USR
AND PGM.*Cursor_field = DTL.TH_Source_Code_5_USR;

// Call program Sel Source            SR.
CALL PROGRAM(Sel Source            SR) ('PKDRSRR');
PARAMETER(DTL.TH_Source_Code_5_USR);

//?F4 = Source Code-1 through Source Code-6
// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.TH Source Code-6 USR
AND PGM.*Cursor_field = DTL.TH_Source_Code_6_USR;

// Call program Sel Source            SR.
CALL PROGRAM(Sel Source            SR) ('PKDRSRR');
PARAMETER(DTL.TH_Source_Code_6_USR);

ENDIF;

//?Validate Cutout Matrix
CASE;

// IF DTL.Cutout Matrix Code USR EQ WRK.Blank USR
IF DTL.Cutout_Matrix_Code_USR = WRK.Blank_USR;

// OR DTL.Effective Month/Day USR EQ WRK.Zero USR
OR DTL.Effective_Month_Day_USR = WRK.Zero_USR;

// Send error message - 'Cutout Matrix and Effective Mo/Dar are required.'
ERROR(PRK0628);
MSGPARM(DTL.Cutout_Matrix_Code_USR);
MSGPARM(DTL.Effective_Month_Day_USR);

//?Validate Cutout Matrix
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Val Cutout Matrix     XF.
CALL PROGRAM(Val Cutout Matrix     XF) ('PDLGXFR');
PARAMETER(DTL.HRH_Company_Number);
PARAMETER(DTL.Cutout_Matrix_Code_USR);
PARAMETER(DTL.Effective_Month_Day_USR);
PARAMETER(DTL.Description_30_USR);
PARAMETER(WRK.Record_Found_USR);

CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// Send error message - 'Cutout Matrix is invalid.'
ERROR(PRK0627);
MSGPARM(DTL.Cutout_Matrix_Code_USR);

ENDIF;

ENDIF;

//?Validate Farm Site
CASE;

// IF DTL.HRH Farm Site NE WRK.Zero USR
IF DTL.HRH_Farm_Site <> WRK.Zero_USR;

// DTL.Farm site Name f/ HPS USR = WRK.Blank USR
DTL.Farm_site_Name_f_HPS_USR = WRK.Blank_USR;

//?Validate Farm Site as being valid and a GrowFinish production phase
// Call program Val HPS Farm Site     UP.
CALL PROGRAM(Val HPS Farm Site     UP) ('HP256');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(DTL.HRH_Farm_Site);
PARAMETER(*BLANK);
PARAMETER(DTL.Farm_site_Name_f_HPS_USR);
PARAMETER(NLL.MTech_Farm_Site_Ref);

CASE;

// IF DTL.Farm site Name f/ HPS USR EQ WRK.Blank USR
IF DTL.Farm_site_Name_f_HPS_USR = WRK.Blank_USR;

// Send error message - 'Farm Site &1 invalid.'
ERROR(PRK0688);
MSGPARM(DTL.HRH_Farm_Site);

ENDIF;

ENDIF;

//?CALC: Screen function fields

EXECUTE FUNCTION(Producer Name         DRV) TYPE(DRVFLD)                        AB1100361;
PARAMETER(DTL.Producer_Name_DRV);
PARAMETER(DTL.PD_Producer_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.Producer_Name_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// DTL.SR Type Desc = Condition name of DTL.HRH Source Type
DTL.SR_Type_Desc = RTVCND(DTL.HRH_Source_Type);

// DTL.Payment type Desc Usr 16 = Condition name of DTL.HRH Payment Type
DTL.Payment_type_Desc_Usr_16 = RTVCND(DTL.HRH_Payment_Type);

// DTL.@Description 16 Usr = Condition name of DTL.Report Type Usr
DTL.@Description_16_Usr = RTVCND(DTL.Report_Type_Usr);

// DTL.Type of Dist Desc Usr = Condition name of DTL.HRH Type Of Distribution
DTL.Type_of_Dist_Desc_Usr = RTVCND(DTL.HRH_Type_Of_Distribution);

// DTL.Type of Popltn Desc   USR = Condition name of DTL.Type of Popltn Rpt    USR
DTL.Type_of_Popltn_Desc_USR = RTVCND(DTL.Type_of_Popltn_Rpt_USR);

EXECUTE FUNCTION(Pdctn Loc Name DRV) TYPE(DRVFLD)                               AB1100402;
PARAMETER(DTL.Pdctn_Loc_Name_DRV);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.HRH_Prdcr_Location_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PL_Location_Code);
 PARAMETER(PAR.Pdctn_Loc_Name_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Validate relations

CASE;

// IF DTL.PD Producer Code NE WRK.Blank USR
IF DTL.PD_Producer_Code <> WRK.Blank_USR;

CASE;

// IF DTL.HRH Tattoo Number NE WRK.Zero USR
IF DTL.HRH_Tattoo_Number <> WRK.Zero_USR;

// Send error message - 'Either Producer or Tattoo for this report'
ERROR(PRK0490);
MSGPARM(DTL.HRH_Payment_Type);
MSGPARM(DTL.HRH_Tattoo_Number);

ENDIF;

CASE;

// IF DTL.HRH Prdcr Location Code is Blank
IF DTL.HRH_Prdcr_Location_Code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Pdctn Loc Name DRV is Not Blank
IF DTL.Pdctn_Loc_Name_DRV <> *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Producer Location not found.'
ERROR(PRK0015);

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.HRH Prdcr Location Code is Blank
IF DTL.HRH_Prdcr_Location_Code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Producer Location not found.'
ERROR(PRK0015);

ENDIF;

ENDIF;

//?tattoo selection from and to dates must be the same
CASE;

// IF DTL.Report Type Usr is Tattoo
IF DTL.Report_Type_Usr = 'T';

CASE;

// IF DTL.Create Outfile USR is No
IF DTL.Create_Outfile_USR = 'N';

CASE;

// IF DTL.HRH Tattoo Number NE WRK.Zero USR
IF DTL.HRH_Tattoo_Number <> WRK.Zero_USR;

CASE;

// IF DTL.HRH From Kill Date NE DTL.HRH To Kill Date
IF DTL.HRH_From_Kill_Date <> DTL.HRH_To_Kill_Date;

// Send error message - 'From & To Kill date must be the same when selecting Tattoo processing'
ERROR(PRK0498);
MSGPARM(DTL.HRH_To_Kill_Date);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.HRH From Kill Date NE DTL.HRH To Kill Date
IF DTL.HRH_From_Kill_Date <> DTL.HRH_To_Kill_Date;

// Send error message - 'From & To Kill date must be the same when selecting Tattoo processing'
ERROR(PRK0498);
MSGPARM(DTL.HRH_To_Kill_Date);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?If tattoo selected check for exists, if one tattoo
CASE;

// IF DTL.Report Type Usr is Tattoo
IF DTL.Report_Type_Usr = 'T';

CASE;

// IF DTL.HRH Tattoo Number NE WRK.Zero USR
IF DTL.HRH_Tattoo_Number <> WRK.Zero_USR;

EXECUTE FUNCTION(Val Crcss Dtl/Tatto  RT) TYPE(RTVOBJ) FILE(PKB1CPP)            AB1160924;
PARAMETER(DTL.HRH_Company_Number);
PARAMETER(DTL.HRH_From_Kill_Date);
PARAMETER(DTL.HRH_Tattoo_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'No Carcass Detail Record'
ERROR(PRK0514);
MSGPARM(DTL.HRH_From_Kill_Date);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Crcss Dtl/Kildte   RT) TYPE(RTVOBJ) FILE(PKB1CPP)          AB1160926;
PARAMETER(DTL.HRH_Company_Number);
PARAMETER(DTL.HRH_From_Kill_Date);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // *MO.VE             1183529*Bu = ilt. in functions
 PGM.*Return_code = *BLANK;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'No Carcass Detail Record'
ERROR(PRK0514);
MSGPARM(DTL.HRH_From_Kill_Date);

ENDIF;

ENDIF;

//?If tattoo selected check for exists, if one tattoo
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.HRH Tattoo Number NE WRK.Zero USR
IF DTL.HRH_Tattoo_Number <> WRK.Zero_USR;

EXECUTE FUNCTION(Val Crcss Dtl/Tatto  RT) TYPE(RTVOBJ) FILE(PKB1CPP)            AB1160924;
PARAMETER(DTL.HRH_Company_Number);
PARAMETER(DTL.HRH_From_Kill_Date);
PARAMETER(DTL.HRH_Tattoo_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'No Carcass Detail Record'
ERROR(PRK0514);
MSGPARM(DTL.HRH_From_Kill_Date);

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF DTL.HRH Kill Shift is *ALL values
IF DTL.HRH_Kill_Shift = '1'/'2'/'3'/*BLANK;

// DTL.Condition Name 1 USR = Condition name of DTL.HRH Kill Shift
DTL.Condition_Name_1_USR = RTVCND(DTL.HRH_Kill_Shift);

ENDIF;

CASE;

// IF DTL.Report Type Usr is Farm Site
IF DTL.Report_Type_Usr = 'F';

// DTL.PD Producer Code = CND.SEABOA
DTL.PD_Producer_Code = 'SEABOA';

ENDIF;

//?E10350 JJH 05/17/17 - Validate TH Source Code-X USR
//?Validate TH Source Code-1 USR is valid for Company
CASE;

// IF DTL.TH Source Code-1 USR is NE Blank
IF DTL.TH_Source_Code_1_USR <> *BLANK;

EXECUTE FUNCTION(Val Source-2          RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1334189;
PARAMETER(DTL.TH_Source_Code_1_USR);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'Source Code &1 is not valid for Company &2.'
ERROR(PRK1432);
MSGPARM(DTL.TH_Source_Code_1_USR);
MSGPARM(DTL.CC_Company_Number);

ENDIF;

ENDIF;

//?Validate TH Source Code-2 USR is valid for Company
CASE;

// IF DTL.TH Source Code-2 USR is NE Blank
IF DTL.TH_Source_Code_2_USR <> *BLANK;

EXECUTE FUNCTION(Val Source-2          RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1334189;
PARAMETER(DTL.TH_Source_Code_2_USR);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'Source Code &1 is not valid for Company &2.'
ERROR(PRK1432);
MSGPARM(DTL.TH_Source_Code_2_USR);
MSGPARM(DTL.CC_Company_Number);

ENDIF;

ENDIF;

//?Validate TH Source Code-3 USR is valid for Company
CASE;

// IF DTL.TH Source Code-3 USR is NE Blank
IF DTL.TH_Source_Code_3_USR <> *BLANK;

EXECUTE FUNCTION(Val Source-2          RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1334189;
PARAMETER(DTL.TH_Source_Code_3_USR);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'Source Code &1 is not valid for Company &2.'
ERROR(PRK1432);
MSGPARM(DTL.TH_Source_Code_3_USR);
MSGPARM(DTL.CC_Company_Number);

ENDIF;

ENDIF;

//?Validate TH Source Code-4 USR is valid for Company
CASE;

// IF DTL.TH Source Code-4 USR is NE Blank
IF DTL.TH_Source_Code_4_USR <> *BLANK;

EXECUTE FUNCTION(Val Source-2          RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1334189;
PARAMETER(DTL.TH_Source_Code_4_USR);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'Source Code &1 is not valid for Company &2.'
ERROR(PRK1432);
MSGPARM(DTL.TH_Source_Code_4_USR);
MSGPARM(DTL.CC_Company_Number);

ENDIF;

ENDIF;

//?Validate TH Source Code-5 USR is valid for Company
CASE;

// IF DTL.TH Source Code-5 USR is NE Blank
IF DTL.TH_Source_Code_5_USR <> *BLANK;

EXECUTE FUNCTION(Val Source-2          RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1334189;
PARAMETER(DTL.TH_Source_Code_5_USR);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'Source Code &1 is not valid for Company &2.'
ERROR(PRK1432);
MSGPARM(DTL.TH_Source_Code_5_USR);
MSGPARM(DTL.CC_Company_Number);

ENDIF;

ENDIF;

//?Validate TH Source Code-6 USR is valid for Company
CASE;

// IF DTL.TH Source Code-6 USR is NE Blank
IF DTL.TH_Source_Code_6_USR <> *BLANK;

EXECUTE FUNCTION(Val Source-2          RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1334189;
PARAMETER(DTL.TH_Source_Code_6_USR);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'Source Code &1 is not valid for Company &2.'
ERROR(PRK1432);
MSGPARM(DTL.TH_Source_Code_6_USR);
MSGPARM(DTL.CC_Company_Number);

ENDIF;

ENDIF;

//?E10350 JJH 05/17/17 - Validate TH Source Code-X USR not Duplicate
//?Verify TH Source Code-1 is not a duplicate.
CASE;

// IF DTL.TH Source Code-1 USR is NE Blank
IF DTL.TH_Source_Code_1_USR <> *BLANK;

CASE;

// IF DTL.TH Source Code-1 USR EQ DTL.TH Source Code-2 USR
IF DTL.TH_Source_Code_1_USR = DTL.TH_Source_Code_2_USR;

// OR DTL.TH Source Code-1 USR EQ DTL.TH Source Code-3 USR
OR DTL.TH_Source_Code_1_USR = DTL.TH_Source_Code_3_USR;

// OR DTL.TH Source Code-1 USR EQ DTL.TH Source Code-4 USR
OR DTL.TH_Source_Code_1_USR = DTL.TH_Source_Code_4_USR;

// OR DTL.TH Source Code-1 USR EQ DTL.TH Source Code-5 USR
OR DTL.TH_Source_Code_1_USR = DTL.TH_Source_Code_5_USR;

// OR DTL.TH Source Code-1 USR EQ DTL.TH Source Code-6 USR
OR DTL.TH_Source_Code_1_USR = DTL.TH_Source_Code_6_USR;

// Send error message - 'Source Code &1 can only be selected 1 time.'
ERROR(PRK1433);
MSGPARM(DTL.TH_Source_Code_1_USR);

ENDIF;

ENDIF;

//?Verify TH Source Code-2 is not a duplicate.
CASE;

// IF DTL.TH Source Code-2 USR is NE Blank
IF DTL.TH_Source_Code_2_USR <> *BLANK;

CASE;

// IF DTL.TH Source Code-2 USR EQ DTL.TH Source Code-1 USR
IF DTL.TH_Source_Code_2_USR = DTL.TH_Source_Code_1_USR;

// OR DTL.TH Source Code-2 USR EQ DTL.TH Source Code-3 USR
OR DTL.TH_Source_Code_2_USR = DTL.TH_Source_Code_3_USR;

// OR DTL.TH Source Code-2 USR EQ DTL.TH Source Code-4 USR
OR DTL.TH_Source_Code_2_USR = DTL.TH_Source_Code_4_USR;

// OR DTL.TH Source Code-2 USR EQ DTL.TH Source Code-5 USR
OR DTL.TH_Source_Code_2_USR = DTL.TH_Source_Code_5_USR;

// OR DTL.TH Source Code-2 USR EQ DTL.TH Source Code-6 USR
OR DTL.TH_Source_Code_2_USR = DTL.TH_Source_Code_6_USR;

// Send error message - 'Source Code &1 can only be selected 1 time.'
ERROR(PRK1433);
MSGPARM(DTL.TH_Source_Code_2_USR);

ENDIF;

ENDIF;

//?Verify TH Source Code-3 is not a duplicate.
CASE;

// IF DTL.TH Source Code-3 USR is NE Blank
IF DTL.TH_Source_Code_3_USR <> *BLANK;

CASE;

// IF DTL.TH Source Code-3 USR EQ DTL.TH Source Code-1 USR
IF DTL.TH_Source_Code_3_USR = DTL.TH_Source_Code_1_USR;

// OR DTL.TH Source Code-3 USR EQ DTL.TH Source Code-2 USR
OR DTL.TH_Source_Code_3_USR = DTL.TH_Source_Code_2_USR;

// OR DTL.TH Source Code-3 USR EQ DTL.TH Source Code-4 USR
OR DTL.TH_Source_Code_3_USR = DTL.TH_Source_Code_4_USR;

// OR DTL.TH Source Code-3 USR EQ DTL.TH Source Code-5 USR
OR DTL.TH_Source_Code_3_USR = DTL.TH_Source_Code_5_USR;

// OR DTL.TH Source Code-3 USR EQ DTL.TH Source Code-6 USR
OR DTL.TH_Source_Code_3_USR = DTL.TH_Source_Code_6_USR;

// Send error message - 'Source Code &1 can only be selected 1 time.'
ERROR(PRK1433);
MSGPARM(DTL.TH_Source_Code_3_USR);

ENDIF;

ENDIF;

//?Verify TH Source Code-4 is not a duplicate.
CASE;

// IF DTL.TH Source Code-4 USR is NE Blank
IF DTL.TH_Source_Code_4_USR <> *BLANK;

CASE;

// IF DTL.TH Source Code-4 USR EQ DTL.TH Source Code-1 USR
IF DTL.TH_Source_Code_4_USR = DTL.TH_Source_Code_1_USR;

// OR DTL.TH Source Code-4 USR EQ DTL.TH Source Code-2 USR
OR DTL.TH_Source_Code_4_USR = DTL.TH_Source_Code_2_USR;

// OR DTL.TH Source Code-4 USR EQ DTL.TH Source Code-3 USR
OR DTL.TH_Source_Code_4_USR = DTL.TH_Source_Code_3_USR;

// OR DTL.TH Source Code-4 USR EQ DTL.TH Source Code-5 USR
OR DTL.TH_Source_Code_4_USR = DTL.TH_Source_Code_5_USR;

// OR DTL.TH Source Code-4 USR EQ DTL.TH Source Code-6 USR
OR DTL.TH_Source_Code_4_USR = DTL.TH_Source_Code_6_USR;

// Send error message - 'Source Code &1 can only be selected 1 time.'
ERROR(PRK1433);
MSGPARM(DTL.TH_Source_Code_4_USR);

ENDIF;

ENDIF;

//?Verify TH Source Code-5 is not a duplicate.
CASE;

// IF DTL.TH Source Code-5 USR is NE Blank
IF DTL.TH_Source_Code_5_USR <> *BLANK;

CASE;

// IF DTL.TH Source Code-5 USR EQ DTL.TH Source Code-1 USR
IF DTL.TH_Source_Code_5_USR = DTL.TH_Source_Code_1_USR;

// OR DTL.TH Source Code-5 USR EQ DTL.TH Source Code-2 USR
OR DTL.TH_Source_Code_5_USR = DTL.TH_Source_Code_2_USR;

// OR DTL.TH Source Code-5 USR EQ DTL.TH Source Code-3 USR
OR DTL.TH_Source_Code_5_USR = DTL.TH_Source_Code_3_USR;

// OR DTL.TH Source Code-5 USR EQ DTL.TH Source Code-4 USR
OR DTL.TH_Source_Code_5_USR = DTL.TH_Source_Code_4_USR;

// OR DTL.TH Source Code-5 USR EQ DTL.TH Source Code-6 USR
OR DTL.TH_Source_Code_5_USR = DTL.TH_Source_Code_6_USR;

// Send error message - 'Source Code &1 can only be selected 1 time.'
ERROR(PRK1433);
MSGPARM(DTL.TH_Source_Code_5_USR);

ENDIF;

ENDIF;

//?Verify TH Source Code-6 is not a duplicate.
CASE;

// IF DTL.TH Source Code-6 USR is NE Blank
IF DTL.TH_Source_Code_6_USR <> *BLANK;

CASE;

// IF DTL.TH Source Code-6 USR EQ DTL.TH Source Code-1 USR
IF DTL.TH_Source_Code_6_USR = DTL.TH_Source_Code_1_USR;

// OR DTL.TH Source Code-6 USR EQ DTL.TH Source Code-2 USR
OR DTL.TH_Source_Code_6_USR = DTL.TH_Source_Code_2_USR;

// OR DTL.TH Source Code-6 USR EQ DTL.TH Source Code-3 USR
OR DTL.TH_Source_Code_6_USR = DTL.TH_Source_Code_3_USR;

// OR DTL.TH Source Code-6 USR EQ DTL.TH Source Code-4 USR
OR DTL.TH_Source_Code_6_USR = DTL.TH_Source_Code_4_USR;

// OR DTL.TH Source Code-6 USR EQ DTL.TH Source Code-5 USR
OR DTL.TH_Source_Code_6_USR = DTL.TH_Source_Code_5_USR;

// Send error message - 'Source Code &1 can only be selected 1 time.'
ERROR(PRK1433);
MSGPARM(DTL.TH_Source_Code_6_USR);

ENDIF;

ENDIF;

//?E11784 JJH 05/16/17 - Validate TH Source Code-X USR not Duplicate
// LCL.TH Source Code-X18-6 USR = CONCAT(DTL.TH Source Code-1 USR,DTL.TH Source Code-2 USR,CND.*All)
LCL.TH_Source_Code_X18_6_USR = DTL.TH_Source_Code_1_USR + DTL.TH_Source_Code_2_USR (*ALL);

// LCL.TH Source Code-X18-9 usr = CONCAT(LCL.TH Source Code-X18-6 USR,DTL.TH Source Code-3 USR,CND.*
LCL.TH_Source_Code_X18_9_usr = LCL.TH_Source_Code_X18_6_USR + DTL.TH_Source_Code_3_USR (*ALL);

// LCL.TH Source Code-X18-12 usr = CONCAT(LCL.TH Source Code-X18-9 usr,DTL.TH Source Code-4 USR,CND.
LCL.TH_Source_Code_X18_12_usr = LCL.TH_Source_Code_X18_9_usr + DTL.TH_Source_Code_4_USR (*ALL);

// LCL.TH Source Code-X18-15 usr = CONCAT(LCL.TH Source Code-X18-12 usr,DTL.TH Source Code-5 USR,CND
LCL.TH_Source_Code_X18_15_usr = LCL.TH_Source_Code_X18_12_usr + DTL.TH_Source_Code_5_USR (*ALL);

// LCL.TH Source Code-X18 USR = CONCAT(LCL.TH Source Code-X18-15 usr,DTL.TH Source Code-6 USR,CND.*A
LCL.TH_Source_Code_X18_USR = LCL.TH_Source_Code_X18_15_usr + DTL.TH_Source_Code_6_USR (*ALL);

//?USER: User defined action

//?Create outfile
CASE;

// IF DTL.Report Type Usr is Not by Tattoo
IF DTL.Report_Type_Usr = 'B'/'P'/'S'/'A'/'C'/'F'/'H'/'L'/'K';

// DTL.Create Outfile USR = CND.No
DTL.Create_Outfile_USR = 'N';

ENDIF;

CASE;

// IF DTL.Report Type Usr is Farm Site
IF DTL.Report_Type_Usr = 'F';

// DTL.PD Producer Code = CND.SEABOA
DTL.PD_Producer_Code = 'SEABOA';

ENDIF;

// Call program Pmt Print Options Size XF.
CALL PROGRAM(Pmt Print Options Size XF) ('PDV8PVR');
PARAMETER('Hog Population Report');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER('N');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('P/S');
PARAMETER(2);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

CASE;

// IF DTL.Create Outfile USR is Yes
IF DTL.Create_Outfile_USR = 'Y';

// LCL.HRH From Kill Date = DTL.HRH From Kill Date
LCL.HRH_From_Kill_Date = DTL.HRH_From_Kill_Date;

// DOW LCL.HRH From Kill Date LE DTL.HRH To Kill Date
DOW LCL.HRH_From_Kill_Date <= DTL.HRH_To_Kill_Date;

// WRK.Date Alpha USR = CVTVAR(LCL.HRH From Kill Date)
WRK.Date_Alpha_USR = CVTVAR(LCL.HRH_From_Kill_Date);

// WRK.Date Alpha Usr 2 = CVTVAR(LCL.HRH From Kill Date)
WRK.Date_Alpha_Usr_2 = CVTVAR(LCL.HRH_From_Kill_Date);

// WRK.Tattoo Nbr Alpha Usr = CVTVAR(DTL.HRH Tattoo Number)
WRK.Tattoo_Nbr_Alpha_Usr = CVTVAR(DTL.HRH_Tattoo_Number);

// WRK.Farm Site Alpha       USR = CVTVAR(DTL.HRH Farm Site)
WRK.Farm_Site_Alpha_USR = CVTVAR(DTL.HRH_Farm_Site);

//?E10350 JJH 05/17/17 - Change Parameters to EXCMSG PRK0491
//? - TH Source Code-X18 USR replaces TH Source Code
//? - Oms Application Code replaces Oms System Value Alpha
//?E10350 DN  07/17/17 - Corrected parms list when calling PKUYUPR
//?  and replace EXCMSG with a SBMJOB of the PKUYUPR directly.
//?Format Data.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Company Number Alpha Usr = DTL.HRH Company Number
LCL.Company_Number_Alpha_Usr = DTL.HRH_Company_Number;

// LCL.Number 4.0 (S) USR = DTL.Effective Month/Day USR
LCL.Number_4_0_S_USR = DTL.Effective_Month_Day_USR;

// LCL.Effective Mo/Day alpha = CVTVAR(LCL.Number 4.0 (S) USR)
LCL.Effective_Mo_Day_alpha = CVTVAR(LCL.Number_4_0_S_USR);

// LCL.PRT Copies Alpha = PAR.PRT Copies
LCL.PRT_Copies_Alpha = PAR.PRT_Copies;

ENDIF;

//?Submit Prt Hog Pop Rpt.
CASE;

// IF PAR.PRT Night Queue is *JOBD
IF PAR.PRT_Night_Queue = *JOBD;

// Call program Clp Prt Hog Pop Rpt   UP.
CALL PROGRAM(Clp Prt Hog Pop Rpt   UP) ('PKUYUPR');
PARAMETER(DTL.Report_Type_Usr);
PARAMETER(DTL.HRH_Type_Of_Distribution);
PARAMETER(DTL.HRH_Source_Type);
PARAMETER(DTL.HRH_Payment_Type);
PARAMETER(LCL.TH_Source_Code_X18_USR);
PARAMETER(LCL.Company_Number_Alpha_Usr);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.HRH_Prdcr_Location_Code);
PARAMETER(WRK.Tattoo_Nbr_Alpha_Usr);
PARAMETER(WRK.Date_Alpha_USR);
PARAMETER(WRK.Date_Alpha_Usr_2);
PARAMETER(WRK.Farm_Site_Alpha_USR);
PARAMETER(DTL.HRH_Kill_Shift);
PARAMETER(DTL.Create_Outfile_USR);
PARAMETER(DTL.Type_of_Popltn_Rpt_USR);
PARAMETER('HPE');
PARAMETER(DTL.Cutout_Matrix_Code_USR);
PARAMETER(LCL.Effective_Mo_Day_alpha);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(LCL.PRT_Copies_Alpha);

//?Submit Prt Hog Pop Rpt.
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Clp Prt Hog Pop Rpt   UP.
CALL PROGRAM(Clp Prt Hog Pop Rpt   UP) ('PKUYUPR');
PARAMETER(DTL.Report_Type_Usr);
PARAMETER(DTL.HRH_Type_Of_Distribution);
PARAMETER(DTL.HRH_Source_Type);
PARAMETER(DTL.HRH_Payment_Type);
PARAMETER(LCL.TH_Source_Code_X18_USR);
PARAMETER(LCL.Company_Number_Alpha_Usr);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.HRH_Prdcr_Location_Code);
PARAMETER(WRK.Tattoo_Nbr_Alpha_Usr);
PARAMETER(WRK.Date_Alpha_USR);
PARAMETER(WRK.Date_Alpha_Usr_2);
PARAMETER(WRK.Farm_Site_Alpha_USR);
PARAMETER(DTL.HRH_Kill_Shift);
PARAMETER(DTL.Create_Outfile_USR);
PARAMETER(DTL.Type_of_Popltn_Rpt_USR);
PARAMETER('HPE');
PARAMETER(DTL.Cutout_Matrix_Code_USR);
PARAMETER(LCL.Effective_Mo_Day_alpha);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(LCL.PRT_Copies_Alpha);

ENDIF;

// LCL.HRH From Kill Date = LCL.HRH From Kill Date + CON.1 *DAYS
LCL.HRH_From_Kill_Date = DATEINCR(LCL.HRH_From_Kill_Date 1 'DY' 1111111 'NONE' 'N' 1);

ENDDO;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Report Type Usr is Company/Kill Date
IF DTL.Report_Type_Usr = 'K';

// LCL.HRH From Kill Date = DTL.HRH From Kill Date
LCL.HRH_From_Kill_Date = DTL.HRH_From_Kill_Date;

// DOW LCL.HRH From Kill Date LE DTL.HRH To Kill Date
DOW LCL.HRH_From_Kill_Date <= DTL.HRH_To_Kill_Date;

// WRK.Date Alpha USR = CVTVAR(LCL.HRH From Kill Date)
WRK.Date_Alpha_USR = CVTVAR(LCL.HRH_From_Kill_Date);

// WRK.Date Alpha Usr 2 = CVTVAR(LCL.HRH From Kill Date)
WRK.Date_Alpha_Usr_2 = CVTVAR(LCL.HRH_From_Kill_Date);

// WRK.Tattoo Nbr Alpha Usr = CVTVAR(DTL.HRH Tattoo Number)
WRK.Tattoo_Nbr_Alpha_Usr = CVTVAR(DTL.HRH_Tattoo_Number);

// WRK.Farm Site Alpha       USR = CVTVAR(DTL.HRH Farm Site)
WRK.Farm_Site_Alpha_USR = CVTVAR(DTL.HRH_Farm_Site);

// LCL.Report Type Usr = CND.Company
LCL.Report_Type_Usr = 'C';

//?testing change back to run
//?E10350 JJH 05/17/17 - Change Parameters to EXCMSG PRK0491
//? - TH Source Code-X18 USR replaces TH Source Code
//? - Oms Application Code replaces Oms System Value Alpha
//?E10350 DN  07/17/17 - Corrected parms list when calling PKUYUPR.
//?Format Data.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Company Number Alpha Usr = DTL.HRH Company Number
LCL.Company_Number_Alpha_Usr = DTL.HRH_Company_Number;

// LCL.Number 4.0 (S) USR = DTL.Effective Month/Day USR
LCL.Number_4_0_S_USR = DTL.Effective_Month_Day_USR;

// LCL.Effective Mo/Day alpha = CVTVAR(LCL.Number 4.0 (S) USR)
LCL.Effective_Mo_Day_alpha = CVTVAR(LCL.Number_4_0_S_USR);

// LCL.PRT Copies Alpha = PAR.PRT Copies
LCL.PRT_Copies_Alpha = PAR.PRT_Copies;

ENDIF;

//?Submit Prt Hog Pop Rpt.
CASE;

// IF PAR.PRT Night Queue is *JOBD
IF PAR.PRT_Night_Queue = *JOBD;

// Call program Clp Prt Hog Pop Rpt   UP.
CALL PROGRAM(Clp Prt Hog Pop Rpt   UP) ('PKUYUPR');
PARAMETER(DTL.Report_Type_Usr);
PARAMETER(DTL.HRH_Type_Of_Distribution);
PARAMETER(DTL.HRH_Source_Type);
PARAMETER(DTL.HRH_Payment_Type);
PARAMETER(LCL.TH_Source_Code_X18_USR);
PARAMETER(LCL.Company_Number_Alpha_Usr);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.HRH_Prdcr_Location_Code);
PARAMETER(WRK.Tattoo_Nbr_Alpha_Usr);
PARAMETER(WRK.Date_Alpha_USR);
PARAMETER(WRK.Date_Alpha_Usr_2);
PARAMETER(WRK.Farm_Site_Alpha_USR);
PARAMETER(DTL.HRH_Kill_Shift);
PARAMETER(DTL.Create_Outfile_USR);
PARAMETER(DTL.Type_of_Popltn_Rpt_USR);
PARAMETER('HPE');
PARAMETER(DTL.Cutout_Matrix_Code_USR);
PARAMETER(LCL.Effective_Mo_Day_alpha);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(LCL.PRT_Copies_Alpha);

//?Submit Prt Hog Pop Rpt.
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Clp Prt Hog Pop Rpt   UP.
CALL PROGRAM(Clp Prt Hog Pop Rpt   UP) ('PKUYUPR');
PARAMETER(DTL.Report_Type_Usr);
PARAMETER(DTL.HRH_Type_Of_Distribution);
PARAMETER(DTL.HRH_Source_Type);
PARAMETER(DTL.HRH_Payment_Type);
PARAMETER(LCL.TH_Source_Code_X18_USR);
PARAMETER(LCL.Company_Number_Alpha_Usr);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.HRH_Prdcr_Location_Code);
PARAMETER(WRK.Tattoo_Nbr_Alpha_Usr);
PARAMETER(WRK.Date_Alpha_USR);
PARAMETER(WRK.Date_Alpha_Usr_2);
PARAMETER(WRK.Farm_Site_Alpha_USR);
PARAMETER(DTL.HRH_Kill_Shift);
PARAMETER(DTL.Create_Outfile_USR);
PARAMETER(DTL.Type_of_Popltn_Rpt_USR);
PARAMETER('HPE');
PARAMETER(DTL.Cutout_Matrix_Code_USR);
PARAMETER(LCL.Effective_Mo_Day_alpha);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(LCL.PRT_Copies_Alpha);

ENDIF;

// LCL.HRH From Kill Date = LCL.HRH From Kill Date + CON.1 *DAYS
LCL.HRH_From_Kill_Date = DATEINCR(LCL.HRH_From_Kill_Date 1 'DY' 1111111 'NONE' 'N' 1);

ENDDO;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Date Alpha USR = CVTVAR(DTL.HRH From Kill Date)
WRK.Date_Alpha_USR = CVTVAR(DTL.HRH_From_Kill_Date);

// WRK.Date Alpha Usr 2 = CVTVAR(DTL.HRH To Kill Date)
WRK.Date_Alpha_Usr_2 = CVTVAR(DTL.HRH_To_Kill_Date);

// WRK.Tattoo Nbr Alpha Usr = CVTVAR(DTL.HRH Tattoo Number)
WRK.Tattoo_Nbr_Alpha_Usr = CVTVAR(DTL.HRH_Tattoo_Number);

// WRK.Farm Site Alpha       USR = CVTVAR(DTL.HRH Farm Site)
WRK.Farm_Site_Alpha_USR = CVTVAR(DTL.HRH_Farm_Site);

//?E10350 JJH 05/17/17 - Change Parameters to EXCMSG PRK0491
//? - TH Source Code-X18 USR replaces TH Source Code
//? - Oms Application Code replaces Oms System Value Alpha
//?E10350 DN  07/17/17 - Corrected parms list when calling PKUYUPR.
//?Format Data.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Company Number Alpha Usr = DTL.HRH Company Number
LCL.Company_Number_Alpha_Usr = DTL.HRH_Company_Number;

// LCL.Number 4.0 (S) USR = DTL.Effective Month/Day USR
LCL.Number_4_0_S_USR = DTL.Effective_Month_Day_USR;

// LCL.Effective Mo/Day alpha = CVTVAR(LCL.Number 4.0 (S) USR)
LCL.Effective_Mo_Day_alpha = CVTVAR(LCL.Number_4_0_S_USR);

// LCL.PRT Copies Alpha = PAR.PRT Copies
LCL.PRT_Copies_Alpha = PAR.PRT_Copies;

ENDIF;

//?Submit Prt Hog Pop Rpt.
CASE;

// IF PAR.PRT Night Queue is *JOBD
IF PAR.PRT_Night_Queue = *JOBD;

// Call program Clp Prt Hog Pop Rpt   UP.
SBMJOB;
CALL PROGRAM(Clp Prt Hog Pop Rpt   UP) ('PKUYUPR');
PARAMETER(DTL.Report_Type_Usr);
PARAMETER(DTL.HRH_Type_Of_Distribution);
PARAMETER(DTL.HRH_Source_Type);
PARAMETER(DTL.HRH_Payment_Type);
PARAMETER(LCL.TH_Source_Code_X18_USR);
PARAMETER(LCL.Company_Number_Alpha_Usr);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.HRH_Prdcr_Location_Code);
PARAMETER(WRK.Tattoo_Nbr_Alpha_Usr);
PARAMETER(WRK.Date_Alpha_USR);
PARAMETER(WRK.Date_Alpha_Usr_2);
PARAMETER(WRK.Farm_Site_Alpha_USR);
PARAMETER(DTL.HRH_Kill_Shift);
PARAMETER(DTL.Create_Outfile_USR);
PARAMETER(DTL.Type_of_Popltn_Rpt_USR);
PARAMETER('HPE');
PARAMETER(DTL.Cutout_Matrix_Code_USR);
PARAMETER(LCL.Effective_Mo_Day_alpha);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(LCL.PRT_Copies_Alpha);
SBMJOBOVR JOB(HPEHOGPOP);
SBMJOBOVR LOG(4;
SBMJOBOVR 00;
SBMJOBOVR *SECLVL);
SBMJOBEND;

//?Submit Prt Hog Pop Rpt.
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Clp Prt Hog Pop Rpt   UP.
SBMJOB;
CALL PROGRAM(Clp Prt Hog Pop Rpt   UP) ('PKUYUPR');
PARAMETER(DTL.Report_Type_Usr);
PARAMETER(DTL.HRH_Type_Of_Distribution);
PARAMETER(DTL.HRH_Source_Type);
PARAMETER(DTL.HRH_Payment_Type);
PARAMETER(LCL.TH_Source_Code_X18_USR);
PARAMETER(LCL.Company_Number_Alpha_Usr);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.HRH_Prdcr_Location_Code);
PARAMETER(WRK.Tattoo_Nbr_Alpha_Usr);
PARAMETER(WRK.Date_Alpha_USR);
PARAMETER(WRK.Date_Alpha_Usr_2);
PARAMETER(WRK.Farm_Site_Alpha_USR);
PARAMETER(DTL.HRH_Kill_Shift);
PARAMETER(DTL.Create_Outfile_USR);
PARAMETER(DTL.Type_of_Popltn_Rpt_USR);
PARAMETER('HPE');
PARAMETER(DTL.Cutout_Matrix_Code_USR);
PARAMETER(LCL.Effective_Mo_Day_alpha);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(LCL.PRT_Copies_Alpha);
SBMJOBOVR JOB(HPEHOGPOP);
SBMJOBOVR JOBQ(GUYNIGHTQ);
SBMJOBOVR LOG(4;
SBMJOBOVR 00;
SBMJOBOVR *SECLVL);
SBMJOBEND;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

