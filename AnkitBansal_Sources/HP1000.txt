      *
      * SYSTEM:      Hog Production
      * PROGRAM:     HP1000
      * TITLE:       Revise BGF Weekly Production
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     05/30/00
      *
      * FUNCTION: This is an edit record function that revises the BGF Weekly Production
      *           data for a farm/date.  The function required 2 screens to contain all of
      *           the data entry fields. Therefore, the standard subroutines have been altered
      *           slightly to accommodate navigation.
      *
      *           The field 'mode' contains the value passed into
      *           this program from the calling program.  The field
      *           'd1mode' is the screen field that displays the
      *           value of 'mode'.  Mode will be CREATE, REVISE or
      *           DELETE.           Once in the program, mode and
      *           d1mode will never change.  However, the action
      *           being performed can change depending on the function
      *           keys the user takes.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 06/02/00  LeAnne Fedor
      *           Until we can get the OMS calendar file updated with
      *           BGF stuff, 1) take out edit that weekending date must
      *           be Friday, 2) make calendar year/week input capable.
      *
      * 06/13/00  LeAnne Fedor
      *           Add back the edit on week-ending date....except it must
      *           be a Saturday now.
      *
      * 08/30/00  LeAnne Fedor
      *           Replace the subroutine that calculates PIC date with a call
      *           to a new generic program that calculates PIC date.
      *
      * 09/14/00  LeAnne Fedor
      *           Added new 'beginning piglet inventory' field. Changed existing
      *           'piglet inventory' to be 'ending piglet inventory'.
      *           Also, the fields in HSP093 were renamed...appropriate changes
      *           were added in this program.
      *
      * 10/11/00  LeAnne Fedor
      *           When REVISING, we now call a generic program to retrieve
      *           conception and farrowing data and calculate rates for the initial
      *           display of the screen.
      *
      * 10/18/00  LeAnne Fedor
      *           Field names changed for 'conception' and 'farrowing' fields.
      *
      * 10/31/00  LeAnne Fedor
      *           Added additonal edits on 'farrowing' year and 'preg checked
      *           positive' year.
      *
      * 12/11/00  LeAnne Fedor
      *           Added new entry field (de-pop flag) to screen 1.
      *
      * 01/23/01  LeAnne Fedor
      *           The OMS Calendar file now contains the HPS Pic date,
      *           HPS calendar year and HPS calendar week. These fields
      *           will now be retrieved from the OMS calendar file.
      *
      * 02/08/01  LeAnne Fedor
      *           Swapped 'preg checked positive' and 'group farrow' fields
      *           on screen one.
      *
      * 02/22/01  LeAnne Fedor
      *           The users want us to now calculate preg checked positive and
      *           farrowed years/weeks. So, these 4 fields are now output only.
      *
      * 06/05/01  LeAnne Fedor
      *           Recompile only. New field 'multisite' added to Farm Site file.
      *
      * 09/04/01  LeAnne Fedor
      *           Recompile only. New 'square feet' fields added to Farm Site file.
      *
      * 10/01/01  LeAnne Fedor
      *           Fixed bug on assignment of accounting year/period/week when in
      *           create mode.
      *
      * 10/10/01  LeAnne Fedor
      *           Changed text on 2 fields: lwnsv and opsohd
      *
      * 12/19/01  LeAnne Fedor
      *           Rewrote. We broke 'weekly' production out into 2 functions: daily and
      *           weekly. And, we added more fields to the Weekly Production file.
      *
      * 02/23/02  LeAnne Fedor
      *           Removed 'weekly water meter reading'.
      *
      * 02/19/02  LeAnne Fedor
      *           Recompile only. 'Weeking ending pounds of supplement used' changed to
      *           7,0 from 9,2.
      *
      * 09/19/02  LeAnne Fedor
      *           Added 'average lactation pounds'.
      *           Added 'ending piglet inventory'.
      *           Made on-screen 'breed back percent' a 1-decimal field (we kept the database
      *           field with 2 decimals).
      *
      * 11/17/02  LeAnne Fedor
      *           Replaced 'de-pop flag' with 'population code.'
      *
      * 10/22/03  LeAnne Fedor
      *           Added a new field: Total P2 Litters Farrowed
      *
      * 06/28/04  LeAnne Fedor
      *           Added 1 new field: Number of Gilts Bred with Passed Dates
      *           Removed 10 fields: number of good piglets farrowed
      *                              number of dome heads
      *                              number of splays
      *                              number of weak and lethargic
      *                              number of scours
      *                              number of good piglets weaning next
      *                              number of lame
      *                              number of under 7 pounds
      *                              number of rough hair coat
      *                              number of swollen joints
      *
      * 02/03/05  LeAnne Fedor
      *           Recompile only. New field "Transferred In Open Gilts" added
      *           to BGF Daily and Weekly Production files.
      *
      * 02/07/05  LeAnne Fedor
      *           Remove field "Average Lactation Pounds" from file/screen/logic.
      *
      * 08/23/05  LeAnne Fedor
      *           Recompile only. New field "Man Hours" added to BGF Daily and Weekly
      *           Production files.
      *
      * 03/23/06  LeAnne Fedor
      *           Changed Farrowing "days to subtract" from 119 days to 114 days.
      *
      * 03/27/06  LeAnne Fedor
      *           Changed Farrowing "days to subtract" back to 119 days.
      *
      * 06/15/06  LeAnne Ramsey
      *           Added a new field "Avg Gilt Weight @ 28 Weeks".
      *
      * 10/15/13  LeAnne Ramsey (E2831)
      *           Recompile only. Added field 'MTech Reference'.
      /eject
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhpd1000   cf   e             workstn
     F                                     infds(iofeed)
      *
      *
     Fhsp009    if   e           k disk
      *    Business office
      *
      *
     Fhsp018    if   e           k disk
      *    Farm site
      *
      *
     Fhsl082b   if   e           k disk
      *    BGF daily production
      *
      *
     Fhsp092    uf a e           k disk
     F                                     infds(dbfeed)
      *    BGF weekly production
      *
      *
     Fhsl092a   if   e           k disk    rename(bprec:bpreca) prefix(p1)
      *    BGF weekly production
      *
      *
     Fhsl092b   if   e           k disk    rename(bprec:bprecb) prefix(p2)
      *    BGF weekly production
      *
      *
     Fhsp093    uf a e           k disk
      *    BGF farrowing and pregnancy check events
      *
      *
     Fhsp104    if   e           k disk
      *    Population code
      *
      /eject
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D create          c                   'CREATE'
     D revise          c                   'REVISE'
     D delete          c                   'DELETE'
     D view            c                   'VIEW  '
     D select          c                   'SELECT'
     D yes             c                   'Y'
     D no              c                   'N'
     D set             c                   'SET   '
     D scrn1           c                   'SCRN1 '
     D scrn2           c                   'SCRN2 '
     D exit            c                   'EXIT  '
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D rtncd           s              2
     D action          s                   like(mode)
     D maxmsg          s              2  0  inz(20)
     D notflg          s              1    inz('N')
      *
      *
      * Work fields
      *
     D wkfld15         s             15  0
     D wkfld155        s             15  5
      *
      *
      * Control/flag fields
      *
     D countdays       s              1  0
     D scrn1error      s              1
     D scrn2error      s              1
      *
      *
      * Work fields for date manipulation
      *
     D wkisodate       s               D   datfmt(*iso)
     D wkccyymmdd      s              8  0
     D wkwedt          s              8  0
     D wkcrupdt        s              8  0
     D wkyymmdd        s              6  0
     D wkacyr          s                   like(bpacyr)
     D wkacpe          s                   like(bpacpe)
     D wkacwk          s                   like(bpacwk)
     D wkwk            s                   like(bpcdwk)
     D wkyr            s                   like(bpcdyr)
      *
      *
      * Parm fields
      *
     D xxcocd          s              3  0
     D xxreturn        s              7a
     D xxalphfscd      s              5a
     D xxfsbo          s                   like(bpfsbo)
     D xxfscd          s                   like(bpfscd)
     D xxfsnm          s                   like(fsfsnm)
     D xxpocd          s                   like(popocd)
     D xxpods          s                   like(popods)
      *
     D xxjulian        s              5  0
     D xxcyymmdd       s              7  0
     D xxmmddyy        s              6  0
      *
     D xxhpscdyr       s                   like(bpcdyr)
     D xxhpscdwk       s                   like(bpcdwk)
     D xxhpspicdt      s                   like(bppicdt)
      *
     D xxcdyr          s                   like(bpcdyr)
     D xxcdwk          s                   like(bpcdwk)
     D xxday           s              1a
      *
     D xxacyr          s                   like(bpacyr)
     D xxacpe          s                   like(bpacpe)
     D xxacwk          s                   like(bpacwk)
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /eject
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set           $set
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     scrn2         $scrn2
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /eject
      *----------------------------------------------------------------
      * Set environment for all three screens
      *----------------------------------------------------------------
      *
     C     $set          begsr
      *
      * If the user is in CREATE mode, clear the fields on both screens
      *
     C                   select                                                 Main select
     C                   when      mode = create
     C                   exsr      $clear1
     C                   exsr      $clear2
      *
      *
      * If incoming mode is REVISE or DELETE, then retrieve the database
      * record using the parms passed in.  Do not lock the record.
      * Typically, in DELETE mode these retrieved values will not be
      * displayed. However, if there is an error on the delete action
      * the panel will be displayed.
      *
     C                   when      mode = revise or mode = delete
     C     key01         chain(n)  hsp092                             92
     C                   if        *in92 = *on                                  If not found
     C                   move      yes           notflg
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09008'     mgid(e)
     C                   endif
     C                   else
      *
      * Set up fields for both screens
      *
     C                   exsr      $set1
     C                   exsr      $set2
     C                   endif                                                  If not found
     C                   endsl                                                  Main select
      *
      * If the user is deleting, go on to the update routine and don't
      * display the screen. Otherwise, display screen 1.
      *
     C                   if        error = 0 and action = delete
     C                   exsr      $update
     C                   else
     C                   eval      routne = scrn1
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Clear the fields on screen 1
      *---------------------------------------------------------------
      *
     C     $clear1       begsr
      *
      * Default 'fully populated' for 'population code'.
      *
     C                   move      'F'           d1pocd
      *
      * Clear other fields.
     C                   move      *blank        d1pods
     C                   z-add     0             d1fscd
     C                   move      *blank        d1fsnm
     C                   z-add     0             d1bredpr
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Set up fields for screen 1
      *---------------------------------------------------------------
      *
     C     $set1         begsr
      *
     C                   z-add     bppicdt       d1picdt
     C                   move      bppocd        d1pocd
      *
     C                   z-add     bpbredpr      d1bredpr
      *
      *
      * Retrieve farm site name
      *
     C     d1fscd        chain     hsp018                             92
     C                   if        *in92 = *off
     C                   eval      d1fsnm = fsfsnm
     C                   else
     C                   eval      d1fsnm = 'UNKNOWN'
     C                   endif
      *
      *
      * Retrieve Population Code description
      *
     C     d1pocd        chain     hsp104                             92
     C                   if        *in92 = *off
     C                   eval      d1pods = popods
     C                   else
     C                   eval      d1pods = 'UNKNOWN'
     C                   endif
      *
      *
      * Make screen 1 calculations
      *
     C                   exsr      $calc1
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Perform operator I/O for screen 1
      *---------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Set the indicators to control screen fields
      *
     C                   exsr      $ind
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to CRT
      *
     C                   write     hp1000k1
     C                   write     hp1000ec
     C                   exfmt     hp1000r1
      *
      * Clear all messages
      *
     C                   exsr      $clmsg
      *
      *
      * Reset action to be equal to the incoming mode.  This is required
      * in case the user took F11-Delete and got an error on the
      * deletion and now needs to be able to change the record and take
      * an action other than delete
      *
     C                   eval      action = mode
      *
      * Process user's entry and set routine
      *
     C                   select                                                 Select response
     C                   when      *in03 = *on                                  F3-exit
     C                   move      *blank        rtncd
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4=prompt
     C                   exsr      $f4s1
      *
     C                   when      notflg = yes                                 Record gone
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09008'     mgid(e)
     C                   endif
     C                   movel     scrn1         routne
     C                   other
      *
      * User has pressed ENTER on screen 1
      *
     C                   exsr      $edit1
      *
     C                   select
     C                   when      error = 0
     C                   eval      routne = scrn2
     C                   other
     C                   eval      routne = scrn1
     C                   endsl
      *
     C                   endsl                                                  Select response
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Edit screen 1
      *---------------------------------------------------------------
      *
     C     $edit1        begsr
      *
     C                   move      no            scrn1error
      *
      * When creating, validate:
      *   1) week-ending date
      *   2) farm site
      *   3) that 7 daily production records exist for this farm/week
      *
     C                   select
     C                   when      mode = create
     C                   exsr      $wedt
     C                   exsr      $fscd
     C                   exsr      $daily
      *
      * When revising:
      *   1) sum up the 'number of gilts' from the daily file
      *
     C                   when      mode = revise
     C                   exsr      $daily
     C                   endsl
      *
      * Population code
     C                   exsr      $pocd
      *
      * Percent Breed Back
      *
     C                   if        d1bredpr < 0
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   endif
     C                   endif
      *
      *
      *
      * Calculate output only fields for screen 1
      * At the present time, we do not need to make any calculations for screen 1.
      * But, I left the code in since the users change their minds a lot.
      *
     C                   exsr      $calc1
      *
     C                   if        error > 0
     C                   move      yes           scrn1error
     C                   endif
      *
     C                   endsr
      /eject
      *--------------------------------------------------------------------
      * Validate Population Code
      *---------------------------------------------------------------------
      *
      * Validations:
      *  1) required
      *  2) must be valid in the master file
      *
     C     $pocd         begsr
      *
     C                   move      *blank        d1pods
      *
     C                   select
     C                   when      d1pocd  = *blank
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09001'     mgid(e)
     C                   endif
     C                   other
      *
     C     d1pocd        chain     hsp104                             92
     C                   if        *in92 = *off
     C                   movel(p)  popods        d1pods
     C                   else
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00190'     mgid(e)
     C                   clear                   mgw
     C                   movea     d1pocd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif
      *
     C                   endsl
      *
     C                   endsr
      /eject
      *--------------------------------------------------------------------
      * Calculate values for the output fields on screen one
      *---------------------------------------------------------------------
      *
     C     $calc1        begsr
      *
      * At the present time, we do not need to make any calculations for screen 1.
      * But, I left the subroutine here in case we add some later.
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Edit week-ending date (in create mode only)
      *---------------------------------------------------------------
      *
     C     $wedt         begsr
      *
     C                   z-add     0             d1picdt
     C                   z-add     0             d1cdyr
     C                   z-add     0             d1cdwk
      *
     C                   select
     C                   when      d1wemdy = 0
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 d1wemdy                92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Flip the date from MMDDYY to CCYYMMDD.
      *
     C     *mdy          move      d1wemdy       wkisodate
     C                   move      wkisodate     wkccyymmdd
     C                   z-add     wkccyymmdd    wkwedt
      *
     C                   endif                                                  If bad date
     C                   endsl
      *
      * If date is valid, retrieve the following info from the OMS
      * Calendar file and verify that the date is a Saturday.
      *   1) accounting year
      *   2) accounting period
      *   3) accounting week
      *   4) HPS calendar year
      *   5) HPS calendar week
      *   6) HPS PIC date
      *
      * You will call a SYNON program for this retrieval using as
      * input parms 1) company number and 2) date in the SYNON format of
      * CYYMMDD.
      *
     C                   exsr      $synon
      *
      * Check the returned SYNON values.
      *
     C                   select
     C                   when      xxreturn <> *blank
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09138'
     C                   clear                   mgw
     C                   movea     bococd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
      *
      * Must be Saturday.
     C                   when      xxday <> '7'
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09030'
     C                   endif
      *
     C                   other
     C                   z-add     xxhpscdyr     d1cdyr
     C                   z-add     xxhpscdwk     d1cdwk
     C                   z-add     xxhpspicdt    d1picdt
     C                   z-add     xxacyr        wkacyr
     C                   z-add     xxacpe        wkacpe
     C                   z-add     xxacwk        wkacwk
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Edit farm site (in create mode only)
      *---------------------------------------------------------------
      *
     C     $fscd         begsr
      *
     C                   move      *blank        d1fsnm
      *
     C                   select
     C                   when      d1fscd = 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09001'     mgid(e)
     C                   endif
     C                   other
      *
     C     d1fscd        chain     hsp018                             92
     C                   if        *in92 = *on                                  If bad farm
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00131'     mgid(e)
     C                   clear                   mgw
     C                   move      d1fscd        xxalphfscd
     C                   movea     xxalphfscd    mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   else
      *
     C                   move(p)   fsfsnm        d1fsnm
      *
      * Must be in the business office that the user entered on
      * on the Work With.
      *
     C                   if        fsfsbo <> xxfsbo                             If mismatch
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00158'     mgid(e)
     C                   clear                   mgw
     C                   move      d1fscd        xxalphfscd
     C                   movea     xxalphfscd    mgw(1)
     C                   movea     fsfsbo        mgw(6)
     C                   movea     xxfsbo        mgw(11)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If mismatch
      *
      * Must be a BGF farm
      *
     C                   if        fsppcd <> 'BGF'                              If not BGF
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09137'     mgid(e)
     C                   endif
     C                   endif                                                  If not BGF
     C                   endif                                                  If bad farm
     C                   endsl
      *
      * If both farm site and week-ending date are valid, check that no
      * weekly production record already exists for this date.
      *
     C                   if        *in31 = *off and *in32 = *off                If both ok
     C     key04         chain     hsl092b                            92
     C                   if        *in92 = *off                                 If already exists
     C                   seton                                        3132
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09136'
     C                   endif
     C                   endif                                                  If already exists
     C                   endif                                                  If both ok
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * When Creating, check 'daily' production records
      *---------------------------------------------------------------
      *
     C     $daily        begsr
      *
      * If you are in this subroutine in CREATE mode, you are:
      *    checking that you have 7 daily production records for this farm week
      *
      * If you are in this subroutine in REVISE mode, you are:
      *    summing the Number of Gilts from all 7 daily records (you will use
      *    this summed value for edits on 'number of gilts bread with passed dates')
      *
     C                   if        *in31 = *off and *in32 = *off                If both ok
     C                   z-add     0             countdays
      *
     C     key04         setll     hsl082b
      *
     C                   dou       *in91 = *on                                  Do daily
     C     key04         reade     hsl082b                                91
     C                   if        *in91 = *off                                 If not EOF
     C                   add       1             countdays
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do daily
      *
      * If CREATE mode
     C                   if        mode = create and countdays <> 7
     C                   seton                                        3132
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS01161'
     C                   endif
     C                   endif
      *
     C                   endif                                                  If both ok
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      *  Use SYNON program to validate date
      *---------------------------------------------------------------
      *
     C     $synon        begsr
      *
      * Get the date into the SYNON format.
      *
     C                   z-add     wkccyymmdd    wkyymmdd
     C                   if        wkccyymmdd >= 20000000
     C     wkyymmdd      add       1000000       xxcyymmdd
     C                   else
     C                   z-add     wkyymmdd      xxcyymmdd
     C                   endif
      *
      *
     C                   call      'POF3XFR'
     C                   parm      *blank        xxreturn
     C                   parm                    xxcocd
     C                   parm                    xxcyymmdd
     C                   parm      0             xxjulian
     C                   parm      0             xxacyr
     C                   parm      0             xxacpe
     C                   parm      0             xxacwk
     C                   parm      *blank        xxday
     C                   parm      0             xxcdwk
     C                   parm      0             xxhpspicdt
     C                   parm      0             xxhpscdyr
     C                   parm      0             xxhpscdwk
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Clear the fields on screen 2
      *---------------------------------------------------------------
      *
     C     $clear2       begsr
      *
     C                   z-add     0             d2prhd
     C                   z-add     0             d2glprhd
     C                   z-add     0             d2crpr
      *
     C                   z-add     0             d2glfahd
     C                   z-add     0             d2fahd
     C                   z-add     0             d2frpr
      *
     C                   z-add     0             d2enplhd
     C                   z-add     0             d2glsohd
     C                   z-add     0             d2bohd
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Set up fields for screen 2
      *---------------------------------------------------------------
      *
     C     $set2         begsr
      *
      * Call generic program to retrieve pregnancy and farrowing data and calc
      * conception rate and farrowing rate.
      *
     C                   call      'HPCONFAR'
     C                   parm                    d1fscd
     C                   parm                    d1cdyr
     C                   parm                    d1cdwk
     C                   parm      0             d2pryr
     C                   parm      0             d2prwk
     C                   parm      0             d2glprhd
     C                   parm      0             d2prhd
     C                   parm      0             d2crpr
     C                   parm      0             d2fayr
     C                   parm      0             d2fawk
     C                   parm      0             d2glfahd
     C                   parm      0             d2fahd
     C                   parm      0             d2frpr
      *
     C                   z-add     bpenplhd      d2enplhd
     C                   z-add     bpglsohd      d2glsohd
     C                   z-add     bpbohd        d2bohd
      *
      * Calculate values for the output only fields on screen two
      *
     C                   exsr      $calc2
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Calculate values for the output fields on screen two
      *---------------------------------------------------------------
      *
     C     $calc2        begsr
      *
      * Calculate conception rate percent after retrieving the 'services' values for
      * the specified year/week. (Place key values in generic workfields
      * so that a common key list can be used.)
      *
     C                   z-add     d2pryr        wkyr
     C                   z-add     d2prwk        wkwk
      *
     C                   z-add     0             d2crpr
     C     key03         chain     hsl092a                            92
     C                   if        *in92 = *off                                 If hit
     C                   eval      wkfld15 =
     C                             (p1bpwnsv + p1bplwnsv + p1bprtsv + p1bpglsv)
     C                   if        wkfld15 <> 0
     C     d2prhd        div       wkfld15       wkfld155
     C     wkfld155      mult(h)   100           d2crpr
     C                   endif
     C                   endif                                                  If hit
      *
      *
      * Calculate farrowing rate after retrieving the 'services' values for
      * the specified year/week. (Place key values in generic workfields
      * so that a common key list can be used.)
      *
     C                   z-add     d2fayr        wkyr
     C                   z-add     d2fawk        wkwk
      *
     C                   z-add     0             d2frpr
     C     key03         chain     hsl092a                            92
     C                   if        *in92 = *off                                 If found
     C                   eval      wkfld15 =
     C                             p1bpwnsv + p1bplwnsv + p1bprtsv + p1bpglsv
     C                   if        wkfld15 <> 0
     C     d2fahd        div       wkfld15       wkfld155
     C     wkfld155      mult(h)   100           d2frpr
     C                   endif
     C                   endif                                                  If found
      *
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Subroutine to perform operator I/O for screen 2
      *---------------------------------------------------------------
      *
     C     $scrn2        begsr
      *
      * Set the indicators to control screen fields
      *
     C                   exsr      $ind
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 2 to CRT
      *
     C                   write     hp1000k2
     C                   write     hp1000ec
     C                   exfmt     hp1000r2
      *
      * Clear all messages
      *
     C                   exsr      $clmsg
      *
      *
      * Reset action to be equal to the incoming mode.  This is required
      * in case the user took F11-Delete and got an error on the
      * deletion and now needs to be able to change the record and take
      * an action other than delete
      *
     C                   eval      action = mode
      *
      * Process user's entry and set routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   move      *blank        rtncd
     C                   eval      routne = exit
      *
     C                   when      *in12 = *on                                  F12-previous
     C                   eval      routne = scrn1
      *
     C                   when      *in11 = *on                                  F11-delete
     C                   movel     delete        action
     C                   exsr      $update
      *
     C                   when      *in09 = *on                                  F9=accept
     C                   exsr      $edit1
     C                   exsr      $edit2
      *
     C                   select
     C                   when      scrn1error = yes
     C                   eval      routne = scrn1
      *
     C                   when      scrn2error = yes
     C                   eval      routne = scrn2
      *
     C                   when      error = 0
     C                   exsr      $update
     C                   endsl
     C                   other
      *
      * User has pressed ENTER on screen 2
      *
     C                   exsr      $edit2
     C                   eval      routne = scrn2
      *
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Edit screen 2 fields
      *----------------------------------------------------------------
      *
     C     $edit2        begsr
      *
     C                   move      no            scrn2error
      *
      *
      * Pregnancy Checked Positive
      *
     C                   exsr      $pregnancy
      *
      * Farrowing info
      *
     C                   exsr      $farrow
      *
      * Ending Piglet Inventory
      *
     C                   if        d2enplhd < 0
     C                   seton                                        42
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   endif
     C                   endif
      *
      *
      * Gilt and sow inventory
      *
     C                   if        d2glsohd < 0
     C                   seton                                        37
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   endif
     C                   endif
      *
      * Boar inventory
     C                   if        d2bohd < 0
     C                   seton                                        40
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   endif
     C                   endif
      *
      *
      * Calculate output only fields for screen 2
      *
     C                   exsr      $calc2
      *
     C                   if        error > 0
     C                   move      yes           scrn2error
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      *  Validate pregnancy head (calculate year/week)
      *---------------------------------------------------------------
      *
     C     $pregnancy    begsr
      *
      * Validate gilt head
      *
     C                   select
     C                   when      d2glprhd < 0
     C                   seton                                        39
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   endif
      *
     C                   when      d2glprhd > d2prhd
     C                   seton                                        39
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS01108'     mgid(e)
     C                   endif
     C                   endsl
      *
      * Validate conception head
      *
     C                   if        d2prhd < 0
     C                   seton                                        38
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   endif
     C                   endif
      *
      *
      * The year/week will be 5 weeks (35 days) prior to this calendar year/week.
      * Calculate the week-ending date of 5 weeks ago.
      *
     C     *mdy          test(d)                 d1wemdy                92
     C                   if        *in92 = *off                                 If valid date
     C     *mdy          move      d1wemdy       wkisodate
     C     wkisodate     subdur    35:*days      wkisodate
     C                   move      wkisodate     wkccyymmdd
      *
      * Call the SYNON program to retrieve the year/week associated with
      * this date.
     C                   exsr      $synon
      *
      * Move the returned SYNON year/week to screen.
      *
     C                   if        xxreturn = *blank
     C                   z-add     xxhpscdyr     d2pryr
     C                   z-add     xxhpscdwk     d2prwk
     C                   endif
      *
     C                   endif                                                  If valid date
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate farrowing head (calculate/retrieve year/week)
      *---------------------------------------------------------------
      *
     C     $farrow       begsr
      *
      * Validate gilt head farrowed
      *
     C                   select
     C                   when      d2glfahd < 0
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   endif
      *
     C                   when      d2glfahd > d2fahd
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS01108'     mgid(e)
     C                   endif
     C                   endsl
      *
      * Validate head farrowed
      *
     C                   if        d2fahd < 0
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   endif
     C                   endif
      *
      *
      * The year/week will be 119 days prior to this calendar year/week.
      * Calculate the week-ending date of 119 days ago.
      *
     C     *mdy          test(d)                 d1wemdy                92
     C                   if        *in92 = *off                                 If valid date
     C     *mdy          move      d1wemdy       wkisodate
     C     wkisodate     subdur    119:*days     wkisodate
     C                   move      wkisodate     wkccyymmdd
      *
      * Call the SYNON program to retrieve the year/week associated with
      * this date.
     C                   exsr      $synon
      *
      * Move the returned SYNON year/week to screen.
      *
     C                   if        xxreturn = *blank
     C                   z-add     xxhpscdyr     d2fayr
     C                   z-add     xxhpscdwk     d2fawk
     C                   endif
      *
     C                   endif                                                  If valid date
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Reset indicators for all screens
      *----------------------------------------------------------------
      *
     C     $ind          begsr
      *
      * The record has been deleted out from under the user.
      *
     C                   if        notflg = yes
     C                   seton                                        90
     C                   endif
      *
      *  Set up for mode
      *
     C                   select
     C                   when      d1mode = create
     C                   seton                                        61
      *
     C                   when      d1mode = revise
     C                   seton                                        60
      *
     C                   when      d1mode = delete
     C                   seton                                        62
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Update record
      *---------------------------------------------------------------
      *
     C     $update       begsr
      *
      * Perform deletion integrity checks here...if there are any.
      *
      *
      * If the user is revising or deleting, determine that the record
      * he is accessing still exists prior to attempting the update/delete.
      * Lock the record.
      *
     C                   if        error = 0 and                                If rev/delete
     C                             (action = revise or action = delete)
     C     key01         chain     hsp092                             62
     C                   move      yes           notflg
     C                   if        *in62 = *on and error < maxmsg               If not found
     C                   add       1             error
     C                   movel     'HS09008'     mgid(e)
     C                   endif                                                  If not found
     C                   endif                                                  If rev/delete
      *
      *
      * If there are no errors, delete/revise/create
      *
     C                   if        error = 0                                    If no error
      *
      * Always delete the 'previous event' records.
      *
     C                   exsr      $dlt093
      *
      * Delete
     C                   if        action = delete                              If delete
     C                   delete    bprec
     C                   else
      *
      * Move DSPF fields to database file fields
      *
      *  Screen 1 fields
      *
     C                   if        mode = create
     C                   movel     xxfsbo        bpfsbo
     C                   z-add     d1fscd        bpfscd
     C                   z-add     d1cdyr        bpcdyr
     C                   z-add     d1cdwk        bpcdwk
     C                   z-add     d1picdt       bppicdt
     C                   z-add     wkwedt        bpwedt
     C                   z-add     wkacyr        bpacyr
     C                   z-add     wkacpe        bpacpe
     C                   z-add     wkacwk        bpacwk
     C                   z-add     wkcrupdt      bpcrdt
     C                   z-add     0             bpupdt
     C                   else
     C                   z-add     wkcrupdt      bpupdt
     C                   endif
      *
     C                   movel     d1pocd        bppocd
     C                   z-add     d1bredpr      bpbredpr
      *
      *  Screen 2 fields
      *
     C                   z-add     d2enplhd      bpenplhd
     C                   z-add     d2glsohd      bpglsohd
     C                   z-add     d2bohd        bpbohd
      *
     C                   select
     C                   when      action = create
     C                   move      sdusr         bpcrusr
     C                   write     bprec
     C                   exsr      $crt093
     C                   other
     C                   move      sdusr         bpupusr
     C                   update    bprec
     C                   exsr      $crt093
     C                   endsl
      *
      * Call program to 'roll-up' daily records and update 'weekly' record.
      *
     C                   if        mode = create or mode = revise
     C                   call      'HP8002'
     C                   parm                    bpfscd
     C                   parm                    bpwedt
     C                   endif
      *
     C                   endif                                                  If delete
     C                   endif                                                  If no error
      *
      *  If there are any errors or the user is in CREATE mode, redisplay
      *  the screens. Otherwise, automatically exit.
      *
     C                   select
     C                   when      error > 0
     C                   eval      routne = scrn1
      *
     C                   when      mode = revise or mode = delete
     C                   eval      routne = exit
      *
     C                   when      mode = create
     C                   add       1             error
     C                   movel     'HS09040'     mgid(e)
     C                   eval      routne = set
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Delete any/all records for this farm/week from the
      *           Farrowing and Pregnancy Check Events file
      *---------------------------------------------------------------
      *
     C     $dlt093       begsr
      *
     C     key05         setll     hsp093
      *
     C                   dou       *in91 = *on                                  Do detail
     C     key05         reade     hsp093                                 91
     C                   if        *in91 = *off                                 If not EOF
     C                   delete    berec
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do detail
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Create any/all records for this farm/week for the
      * Farrowing and Pregnancy Check Events file
      *---------------------------------------------------------------
      *
     C     $crt093       begsr
      *
     C                   z-add     d1fscd        befscd
     C                   z-add     d1cdyr        beevyr
     C                   z-add     d1cdwk        beevwk
      *
      * If you have 'pregnancy' data
      *
     C                   if        d2pryr <> 0
     C                   move      'P'           beevfl
     C                   z-add     d2pryr        besvyr
     C                   z-add     d2prwk        besvwk
     C                   z-add     d2prhd        beevhd
     C                   z-add     d2glprhd      beglevhd
     C                   write     berec
     C                   endif
      *
      * If you have 'farrowing' data
      *
     C                   if        d2fayr <> 0
     C                   move      'F'           beevfl
     C                   z-add     d2fayr        besvyr
     C                   z-add     d2fawk        besvwk
     C                   z-add     d2glfahd      beglevhd
     C                   z-add     d2fahd        beevhd
     C                   write     berec
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redispaly the screen to the user.
      *
     C                   if        *in43 = *on
     C                   movel     set           routne
     C                   endif
      *
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * F4 prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      * Farm site (only in create mode)
      *
     C                   select
      *
     C                   when      fld = 'D1FSCD' and *in61 = *on
     C                   call      'HP5010'
     C                   parm                    xxfsbo
     C                   parm      0             xxfscd
     C                   parm      *blank        xxfsnm
     C                   seton                                        51
     C                   if        xxfscd <> 0
     C                   z-add     xxfscd        d1fscd
     C                   movel     xxfsnm        d1fsnm
     C                   endif
      *
      * Population code (not in delete mode)
      *
     C                   when      fld = 'D1POCD' and *in62 = *off
     C                   call      'HP5023'
     C                   parm                    xxpocd
     C                   parm                    xxpods
     C                   seton                                        53
     C                   if        xxpocd <> *blank
     C                   movel     xxpocd        d1pocd
     C                   movel     xxpods        d1pods
     C                   endif
     C                   other
      *
      * F4 not valid for this field...issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error                                        013
     C                   movel     'HS09011'     mgid(e)
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command key record will be set on. So, redispaly the screen to the user.
      *
     C                   if        *in43 = *on
     C                   movel     set           routne
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Set on last record indicator and end job
      *----------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
     C     d1mode        parm                    mode
     C                   parm                    xxfsbo
     C     d1fscd        parm                    xxfscd
     C     d1cdyr        parm                    xxcdyr
     C     d1cdwk        parm                    xxcdwk
     C     d1wemdy       parm                    xxmmddyy
     C                   parm                    rtncd
      *
      * Note: Mode is the incoming mode from the Work With.  The user can come in in
      *       revise mode and take F11=delete. This will change the processing to the
      *       'delete' action.
      *
     C                   movel     mode          action
      *
      * Key lists
      *
      *
     C     key01         klist
     C                   kfld                    xxfsbo
     C                   kfld                    d1cdyr
     C                   kfld                    d1cdwk
     C                   kfld                    d1fscd
      *
     C     key03         klist
     C                   kfld                    d1fscd
     C                   kfld                    wkyr
     C                   kfld                    wkwk
      *
      *
     C     key04         klist
     C                   kfld                    d1fscd
     C                   kfld                    wkwedt
      *
      *
     C     key05         klist
     C                   kfld                    d1fscd
     C                   kfld                    d1cdyr
     C                   kfld                    d1cdwk
      *
      *
      * For the retrieval of date information from the OMS Calendar file,
      * you will need the 'company' associated with the incoming business office.
      * And, you must move it to a numeric field.
      *
     C     xxfsbo        chain     hsp009                             92
     C                   if        *in92 = *off                                 If found
     C                   movel     bococd        xxcocd
     C                   endif                                                  If found
      *
      * Save date for record stamp
      *
     C     *mdy          move      udate         wkisodate
     C                   move      wkisodate     wkcrupdt
      *
      *  If Revising, flip the week-ending date into CCYYMMDD format for
      *  later retrieval of Daily Production Records.
      *
     C                   if        mode = revise
     C     *mdy          move      d1wemdy       wkisodate
     C                   move      wkisodate     wkccyymmdd
     C                   z-add     wkccyymmdd    wkwedt
     C                   endif
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /eject
