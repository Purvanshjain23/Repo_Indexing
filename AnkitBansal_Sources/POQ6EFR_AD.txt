// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POQ6EFR
// ?Date: 14.08.2025 Time: 03:38:43
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('P/S');
PARAMETER(LCL.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize subfile header

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(CTL.Company_Name_DRV);
PARAMETER(CTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Cutout Matrix Desc DRV) TYPE(DRVFLD)                           AC1650753;
PARAMETER(CTL.Cutout_Matrix_Desc_DRV);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Cutout_Matrix_Code);
PARAMETER(CTL.Effective_Month_Day);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Cutout Matrix Desc RT) TYPE(RTVOBJ) FILE(PDI0REP)          AC1256965;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Cutout_Matrix_Code);
 PARAMETER(PAR.Effective_Month_Day);
 PARAMETER(PAR.Cutout_Matrix_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


CASE;

// IF PAR.Cutout Matrix Type is Formula (Lean %)
IF PAR.Cutout_Matrix_Type = 'F';

// OR PAR.Cutout Matrix Type is Blend (Lean %)
OR PAR.Cutout_Matrix_Type = 'B';

// CTL.Text USR 8 = CON.Lean %
CTL.Text_USR_8 = 'Lean %';

// CTL.USR 15 Text           USR = CON.Lean Percent**2
CTL.USR_15_Text_USR = 'Lean Percent**2';

// IF PAR.Cutout Matrix Type is Formula (Backfat)
IF PAR.Cutout_Matrix_Type = 'A';

// OR PAR.Cutout Matrix Type is Blend (Backfat)
OR PAR.Cutout_Matrix_Type = 'C';

// CTL.Text USR 8 = CON.Back Fat
CTL.Text_USR_8 = 'Back Fat';

// CTL.USR 15 Text           USR = CON.Back Fat**2
CTL.USR_15_Text_USR = 'Back Fat**2';

ENDIF;

//?USER: Initialize subfile record (existing record)

CASE;

// IF CTL.Yield Type is *ALL values
IF CTL.Yield_Type = 'F'/'S'/'P'/'T';

CASE;

// IF RCD.Yield Type NE CTL.Yield Type
IF RCD.Yield_Type <> CTL.Yield_Type;

// PGM.*Reload subfile = CND.*NO
PGM.*Reload_subfile = 'N';

ENDIF;

ENDIF;

//?CALC: Subfile control function fields

CASE;

// IF PAR.Cutout Matrix Type is Blend (Lean %)
IF PAR.Cutout_Matrix_Type = 'B';

// OR PAR.Cutout Matrix Type is Blend (Backfat)
OR PAR.Cutout_Matrix_Type = 'C';

// RCD.Primal Yield = CON.*ZERO
RCD.Primal_Yield = *ZERO;

// RCD.Primal Intercept = CON.*ZERO
RCD.Primal_Intercept = *ZERO;

// RCD.Primal C1 HCWT = CON.*ZERO
RCD.Primal_C1_HCWT = *ZERO;

// RCD.Primal C2 Ln% or BkFt = CON.*ZERO
RCD.Primal_C2_Ln_Pct_or_BkFt = *ZERO;

// RCD.Primal C3 HCWT Sq = CON.*ZERO
RCD.Primal_C3_HCWT_Seq = *ZERO;

// RCD.Primal C4 Ln% or Bkft Sq = CON.*ZERO
RCD.Primal_C4_Ln_Pct_or_Bkft = *ZERO;

ENDIF;

//?USER: Validate subfile record fields

CASE;

// IF PAR.Cutout Matrix Type is Formula (Lean %)
IF PAR.Cutout_Matrix_Type = 'F';

// OR PAR.Cutout Matrix Type is Formula (Backfat)
OR PAR.Cutout_Matrix_Type = 'A';

CASE;

// IF RCD.Item Code is Entered
IF RCD.Item_Code <> *ZERO;

EXECUTE FUNCTION(Rtv Item Defaults      RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1371761;
PARAMETER(RCD.Item_Code);
PARAMETER(WRK.Description_Line_One);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(WRK.UOM_Primary_Dft);
PARAMETER(WRK.Conversion_Factor_1);
PARAMETER(WRK.Operation_Factor_1);
PARAMETER(WRK.UOM_Second_Dft);
PARAMETER(WRK.Conversion_Factor_2);
PARAMETER(WRK.Operation_Factor_2);
PARAMETER(WRK.UOM_Third_Dft);
PARAMETER(WRK.UOM_Pricing_Dft);
PARAMETER(WRK.Unit_Weight);
PARAMETER(WRK.Catch_Weight_Status);
PARAMETER(WRK.Item_Structure_Class_Code);
PARAMETER(WRK.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(LCL.Item_Type_Code);
PARAMETER(WRK.Package_Type_Code);
PARAMETER(WRK.Base_Conv_Loss_Item);
PARAMETER(WRK.Variety_Rendered_Cut);
PARAMETER(WRK.Frozen_Make_to_Order_Sts);
PARAMETER(WRK.Credit_Item_Status);
PARAMETER(WRK.Seconds_Item);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Item Type Code is Not Raw Material
IF LCL.Item_Type_Code <> 'RM';

// Send error message - 'Item is not a Raw Material.'
ERROR(USR3159);
MSGPARM(RCD.Item_Code);

ENDIF;

ENDIF;

ENDIF;

//?Yield Type = Standard
CASE;

// IF RCD.Yield Type is Standard
IF RCD.Yield_Type = 'S';

//?VAL:  Primal Yield
CASE;

// IF RCD.Primal Yield is LE Zero
IF RCD.Primal_Yield <= *ZERO;

// Send error message - 'Primal Yield Required.'
ERROR(USR3158);
MSGPARM(RCD.Primal_Yield);

ENDIF;

//?VAL:  Item Code
CASE;

// IF RCD.Item Code is Not Entered
IF RCD.Item_Code = *ZERO;

// Send error message - 'Item is required'
ERROR(USR2716);
MSGPARM(RCD.Item_Code);

//?VAL:  Item Code
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Item Defaults      RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1371761;
PARAMETER(RCD.Item_Code);
PARAMETER(WRK.Description_Line_One);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(WRK.UOM_Primary_Dft);
PARAMETER(WRK.Conversion_Factor_1);
PARAMETER(WRK.Operation_Factor_1);
PARAMETER(WRK.UOM_Second_Dft);
PARAMETER(WRK.Conversion_Factor_2);
PARAMETER(WRK.Operation_Factor_2);
PARAMETER(WRK.UOM_Third_Dft);
PARAMETER(WRK.UOM_Pricing_Dft);
PARAMETER(WRK.Unit_Weight);
PARAMETER(WRK.Catch_Weight_Status);
PARAMETER(WRK.Item_Structure_Class_Code);
PARAMETER(WRK.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(LCL.Item_Type_Code);
PARAMETER(WRK.Package_Type_Code);
PARAMETER(WRK.Base_Conv_Loss_Item);
PARAMETER(WRK.Variety_Rendered_Cut);
PARAMETER(WRK.Frozen_Make_to_Order_Sts);
PARAMETER(WRK.Credit_Item_Status);
PARAMETER(WRK.Seconds_Item);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Item Type Code is Not Raw Material
IF LCL.Item_Type_Code <> 'RM';

// Send error message - 'Item is not a Raw Material.'
ERROR(USR3159);
MSGPARM(RCD.Item_Code);

ENDIF;

ENDIF;

ENDIF;

//?2=Edit RM Item
CASE;

// IF RCD.*SFLSEL is *Edit
IF RCD.*SFLSEL = '2'/'2';

// Call program Edt RM Items          EF.
CALL PROGRAM(Edt RM Items          EF) ('POREEFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Primal_Group_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Cutout Yield      CR) TYPE(CRTOBJ) FILE(POB7REP)           AC1650683;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Cutout_Matrix_Code);
PARAMETER(RCD.Effective_Month_Day);
PARAMETER(RCD.Primal_Group_Code);
PARAMETER(RCD.Calculation_Sequence);
PARAMETER(RCD.Yield_Type);
PARAMETER(RCD.Primal_Yield);
PARAMETER(RCD.Primal_Intercept);
PARAMETER(RCD.Primal_C1_HCWT);
PARAMETER(RCD.Primal_C3_HCWT_Seq);
PARAMETER(RCD.Primal_C2_Ln_Pct_or_BkFt);
PARAMETER(RCD.Primal_C4_Ln_Pct_or_Bkft);
PARAMETER(RCD.Pieces_Per_Head);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Job_Time);
PARAMETER(RCD.User_Id);
PARAMETER(RCD.Job_Name);
PARAMETER(RCD.Job_Date);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Delete DBF record

EXECUTE FUNCTION(Del Cutout Yield      DL) TYPE(DLTOBJ) FILE(POB7REP)           AC1650685;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Cutout_Matrix_Code);
PARAMETER(RCD.Effective_Month_Day);
PARAMETER(RCD.Primal_Group_Code);

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Cutout Yield      CH) TYPE(CHGOBJ) FILE(POB7REP)           AC1650684;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Cutout_Matrix_Code);
PARAMETER(RCD.Effective_Month_Day);
PARAMETER(RCD.Primal_Group_Code);
PARAMETER(RCD.Calculation_Sequence);
PARAMETER(RCD.Yield_Type);
PARAMETER(RCD.Primal_Yield);
PARAMETER(RCD.Primal_Intercept);
PARAMETER(RCD.Primal_C1_HCWT);
PARAMETER(RCD.Primal_C3_HCWT_Seq);
PARAMETER(RCD.Primal_C2_Ln_Pct_or_BkFt);
PARAMETER(RCD.Primal_C4_Ln_Pct_or_Bkft);
PARAMETER(RCD.Pieces_Per_Head);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Job_Time);
PARAMETER(RCD.User_Id);
PARAMETER(RCD.Job_Name);
PARAMETER(RCD.Job_Date);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Extra processing after DBF update

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

