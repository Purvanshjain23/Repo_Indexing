// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDH2DFR
// ?Date: 14.08.2025 Time: 03:34:44
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('I/C');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// PGM.*Scan limit = CON.999999
PGM.*Scan_limit = 999999;

//?USER: Initialize subfile control

EXECUTE FUNCTION(RTV Desc/Type/LotTrk  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1471511;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Warehouse_Description);
PARAMETER(LCL.Lot_Tracking_Flag);
PARAMETER(LCL.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// CTL.Toggle USR = CND.On
CTL.Toggle_USR = 'ON';

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

ENDIF;

// Call program Rtv Loc/Fzn/Avl Qt/Wt XF.
CALL PROGRAM(Rtv Loc/Fzn/Avl Qt/Wt XF) ('PDSRXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Lot_Number);
PARAMETER(CTL.Location_Code);
PARAMETER(CTL.Location_Level);
PARAMETER(CTL.Quantity_Loc_On_Hand_USR);
PARAMETER(CTL.Quantity_Loc_Trans_USR);
PARAMETER(CTL.Quantity_Loc_Alloc_USR);
PARAMETER(CTL.Quantity_Loc_Avail_USR);
PARAMETER(WRK.Quantity_Loc_Hold_USR);
PARAMETER(WRK.Weight_Open_7_0_USR);
PARAMETER(WRK.Unit_Weight);
PARAMETER(CTL.Item_age_days_usr);
PARAMETER(CTL.ILL_Avail_Ship_Date);
PARAMETER(CTL.ILL_Status);
PARAMETER(CTL.Inv_Hold_Reason_Code);

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Item Desc DRV) TYPE(DRVFLD)                                    AC1505592;
PARAMETER(CTL.Item_Desc_DRV);
PARAMETER(CTL.Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Desc_DRV);
 PARAMETER(WRK.Description_Line_Two);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Initialize subfile record from DBF record

EXECUTE FUNCTION(Rtv Allocated Qty     RT) TYPE(RTVOBJ) FILE(PDL8CPP)           AC1514260;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Lot_Number);
PARAMETER(RCD.Location_Code);
PARAMETER(RCD.Location_Level);
PARAMETER(RCD.OIA_Alloc_Shipped_Qty);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.OIA Alloc/Shipped Qty = PAR.OIA Alloc/Shipped Qty + DB1.OIA Alloc/Shipped Qt
 PAR.OIA_Alloc_Shipped_Qty = PAR.OIA_Alloc_Shipped_Qty + DB1.OIA_Alloc_Shipped_Qty;

}


EXECUTE FUNCTION(Val Comment Exist     RT) TYPE(RTVOBJ) FILE(PDL6CPP)           AC1514751;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Lot_Number);
PARAMETER(RCD.Comment_Sts_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Comment Sts USR = CND.Does Not Exist
 PAR.Comment_Sts_USR = 'D';

 //?USER: Process Data record

 // PAR.Comment Sts USR = CND.Exists
 PAR.Comment_Sts_USR = 'E';

 QUIT;

}


//?Frozen Quantity
CASE;

// IF RCD.ILL Avail Ship Date LE JOB.*Job date
IF RCD.ILL_Avail_Ship_Date <= JOB.*Job_date;

// AND DB1.ILL Status is Available
AND DB1.ILL_Status = 'A';

// RCD.Number 5,0            USR = RCD.ILL Item Qty On-Hand
RCD.Number_50_USR = RCD.ILL_Item_Qty_On_Hand;

//?Frozen Quantity
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Number 5,0            USR = CON.*ZERO
RCD.Number_50_USR = *ZERO;

ENDIF;

//?On-Hand & Alloc & Avail = 0, do not display record
CASE;

// IF RCD.ILL Item Qty On-Hand is EQ Zero
IF RCD.ILL_Item_Qty_On_Hand = *ZERO;

// AND RCD.OIA Alloc/Shipped Qty is EQ Zero
AND RCD.OIA_Alloc_Shipped_Qty = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

EXECUTE FUNCTION(Clc Age Days          IF) TYPE(EXCINTFUN)                      AC1883655;
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Item_age_days_usr);
{
 //?Execute internal function

 // PAR.Item Age Days Selected = JOB.*Job date - PAR.Production Date *DAYS
 PAR.Item_Age_Days_Selected = DURATION(JOB.*Job_date PAR.Production_Date 'DY' 1111111
 'NONE' 'N' 1);

}


//?SEL: Age days
CASE;

// IF CTL.Item age days usr is Entered
IF CTL.Item_age_days_usr <> *ZERO;

CASE;

// IF RCD.Item age days usr LE CTL.Item age days usr
IF RCD.Item_age_days_usr <= CTL.Item_age_days_usr;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL: Production Date
CASE;

// IF CTL.Production Date is entered
IF CTL.Production_Date <> *ZERO;

CASE;

// IF RCD.Production Date NE CTL.Production Date
IF RCD.Production_Date <> CTL.Production_Date;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?CALC: Subfile control function fields

EXECUTE FUNCTION(Item Desc DRV) TYPE(DRVFLD)                                    AC1505592;
PARAMETER(CTL.Item_Desc_DRV);
PARAMETER(CTL.Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Desc_DRV);
 PARAMETER(WRK.Description_Line_Two);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Process subfile control (Pre-confirm)

//?SEL: Item Hold Reason
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Inv Hold Reason Code
IF PGM.*Cursor_field = CTL.Inv_Hold_Reason_Code;

// Call program Sel Item Hold Reason  SL.
CALL PROGRAM(Sel Item Hold Reason  SL) ('PDHWSRR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Inv_Hold_Reason_Code);

ENDIF;

ENDIF;

CASE;

// IF LCL.Item age days usr NE CTL.Item age days usr
IF LCL.Item_age_days_usr <> CTL.Item_age_days_usr;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F05=Refresh
CASE;

// IF CTL.*CMD key is CF05
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Display Orders
CASE;

// IF CTL.*CMD key is CF11
IF CTL.*CMD_key = '11';

// Call program Dsp Lot/Loc Orders    DF.
CALL PROGRAM(Dsp Lot/Loc Orders    DF) ('PDIEDFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);

ENDIF;

//?F21=Print Freezer Inventory
CASE;

// IF CTL.*CMD key is *Print List
IF CTL.*CMD_key = '21';

// WRK.Item Code Txt = CVTVAR(CTL.Item Code)
WRK.Item_Code_Txt = CVTVAR(CTL.Item_Code);

// Call program Prt Lot/Loc Avail Inv  PV.
CALL PROGRAM(Prt Lot/Loc Avail Inv  PV) ('PDPVPVR');
PARAMETER('P');
PARAMETER(WRK.Item_Code_Txt);
PARAMETER(CTL.Warehouse_Code);

ENDIF;

//?F15=Display Item Whse Inq Dtl
CASE;

// IF CTL.*CMD key is CF15
IF CTL.*CMD_key = '15';

CASE;

// IF PAR.*Initial call is *NO
IF PAR.*Initial_call = 'N';

RETURN;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.*Initial call = CND.*NO
PAR.*Initial_call = 'N';

EXECUTE FUNCTION(Rtv Base Values PA    RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1416510;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(LCL.Description_Line_One);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(LCL.UOM_Primary);
PARAMETER(LCL.Conversion_Factor_1);
PARAMETER(LCL.Operation_Factor_1);
PARAMETER(LCL.UOM_Second);
PARAMETER(LCL.Conversion_Factor_2);
PARAMETER(LCL.Operation_Factor_2);
PARAMETER(LCL.UOM_Third);
PARAMETER(LCL.UOM_Pricing);
PARAMETER(LCL.Unit_Weight);
PARAMETER(LCL.Production_Date_Control);
PARAMETER(LCL.Catch_Weight_Status);
PARAMETER(LCL.Fresh_Chilling_Time);
PARAMETER(WRK.Base_Conv_Loss_Item);
PARAMETER(WRK.Piece_Count_Item);
PARAMETER(WRK.Pieces_Per_Bag);
PARAMETER(WRK.Bags_Per_Unit);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Dsp Item/Whse Inqy Dtl DF.
CALL PROGRAM(Dsp Item/Whse Inqy Dtl DF) ('ICQ9DFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(LCL.Description_Line_One);
PARAMETER(LCL.UOM_Primary);
PARAMETER(LCL.Conversion_Factor_1);
PARAMETER(LCL.Operation_Factor_1);
PARAMETER(LCL.UOM_Second);
PARAMETER(LCL.Conversion_Factor_2);
PARAMETER(LCL.Operation_Factor_2);
PARAMETER(LCL.UOM_Third);
PARAMETER(LCL.Unit_Weight);
PARAMETER(LCL.Production_Date_Control);
PARAMETER(LCL.Catch_Weight_Status);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.Warehouse_Description);
PARAMETER(CTL.Name);
PARAMETER(PAR.*Initial_call);

// PAR.*Initial call = CND.*YES
PAR.*Initial_call = 'Y';

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?Display Orders
CASE;

// IF RCD.*SFLSEL is Option 5
IF RCD.*SFLSEL = '5'/'5';

// Call program Dsp Lot/Loc Orders    DF.
CALL PROGRAM(Dsp Lot/Loc Orders    DF) ('PDIEDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Lot_Number);
PARAMETER(RCD.Location_Code);
PARAMETER(RCD.Location_Level);

ENDIF;

//?Display Comments
CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

// Call program Dsp Item Lot/Loc Comm DF.
CALL PROGRAM(Dsp Item Lot/Loc Comm DF) ('PDLJDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(RCD.Lot_Number);

ENDIF;

//?USER: Process command keys

CASE;

// IF CTL.*CMD key is CF14
IF CTL.*CMD_key = '14';

CASE;

// IF PAR.*Initial call is *NO
IF PAR.*Initial_call = 'N';

RETURN;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.*Initial call = CND.*NO
PAR.*Initial_call = 'N';

// Call program Zzz Item Orders       DF.
CALL PROGRAM(Zzz Item Orders       DF) ('PDO7DFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(JOB.*Job_date);
PARAMETER(CTL.Name);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.*Initial_call);
PARAMETER(LCL.Warehouse_Type);

// PAR.*Initial call = CND.*YES
PAR.*Initial_call = 'Y';

ENDIF;

ENDIF;

