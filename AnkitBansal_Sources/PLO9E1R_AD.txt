// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLO9E1R
// ?Date: 14.08.2025 Time: 02:54:59
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?E12101 JJH 11/20/17 - Recompile after adding Shawn Smith and
//?  remmoving Joe Hegeman from the Receiving Group TF list for
//?  field *USER.
//?E6784 JBB 07/28/16 - Recompile after adding Joe Hegeman to
//? the Receiving Group TF list for field *USER.
//?E3625 JJH 12/04/14 - Recompile because PrklISTesting List for
//? field *USER to add users Julius High (ISJHIGH) and Collin Lynch
//? ISCLYNC.
//?H16853 ISE 11/02/2020 CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
//?103777 E.L.10/25/22 - REPLACE Hard Coded Authority Change
//?                      By calling PDGXXFR (Parm HPETHO)
//?                      Also check IT users (ISBGUTI)
ENDDO;

// WRK.BOH Company Number = PAR.EA Company Number
WRK.BOH_Company_Number = PAR.EA_Company_Number;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.BOH_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

//?3/27/2014 slm remove held over test,
//?currently tf makes changes but we do not allow them to do so on a
//?held over, this is a is task for a programmer
//?currently will be changing this area to see if this work ok with a program
//?and then we can turn this over to tf.
//?this process is only performed currently by Brad K, or Jerry L.
//?Guymon does not perform this
//?USER: Validate detail screen fields

// LCL.User Status = CND.No
LCL.User_Status = 'N';

// Call program Rtv User Code Model   XF.
CALL PROGRAM(Rtv User Code Model   XF) ('POYBXFR');
PARAMETER(JOB.*USER);
PARAMETER(LCL.User_Code_Model_USR);

//?If ISBGUTI = OK
CASE;

// IF LCL.User Code Model USR is IS
IF LCL.User_Code_Model_USR = 'ISBGUTI';

// LCL.User Status = CND.Yes
LCL.User_Status = 'Y';

//?If ISBGUTI = OK
// IF *OTHERWISE
IF *OTHERWISE;

//?Check for 'HPE TFR Held Over Auth'
DO;

// Call program Val Application/User  XF.
CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPETHO');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);

CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.User Status = CND.Yes
LCL.User_Status = 'Y';

ENDIF;

ENDDO;

ENDIF;

//?See if the current tattoo number have any held overs
CASE;

// IF LCL.User Status is Yes
IF LCL.User_Status = 'Y';

//?3/27/2014 slm remove held over test,
//?going to start out with is doing this
//?if all goes well then turn this over to Triumph Foods.
//?4/14/2014 slm ALLOW TF to use this function only for Brad or Jerry
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Tattoo&Held Info  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1300620;
PARAMETER(DTL.EA_Company_Number);
PARAMETER(DTL.EA_Kill_Date);
PARAMETER(DTL.EA_Tattoo_Number);
PARAMETER(LCL.BOH_Buy_Order_Number);
PARAMETER(LCL.BOL_Load_Number);
PARAMETER(LCL.Record_Found_USR);
PARAMETER(LCL.Held_Over_Records_Y_N);
{
 //?USER: Initialize routine

 // PAR.Held Over Records Y/N = CND.Blank
 PAR.Held_Over_Records_Y_N = *BLANK;

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 CASE;

 // IF DB1.TH Held Over is greater than 0
 IF DB1.TH_Held_Over > *ZERO;

 // OR DB1.TH Held Over Record is Yes
 OR DB1.TH_Held_Over_Record = 'Y';

 // OR DB1.TH Held/Ovr Completed Dte is Greater than 0
 OR DB1.TH_Held_Ovr_Completed_Dte > *ZERO;

 // PAR.Held Over Records Y/N = CND.Yes
 PAR.Held_Over_Records_Y_N = 'Y';

 ENDIF;

 QUIT;

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Held Over Records Y/N is Yes
IF LCL.Held_Over_Records_Y_N = 'Y';

// Send error message - 'Held Overs on Tattoo, please contact the Seaboard I.S. for this correction'
ERROR(PRK1242);

ENDIF;

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Remove Hot Scal   IF) TYPE(EXCINTFUN) FILE(PKCPCPP)        AB1298774;
PARAMETER(DTL.EA_Company_Number);
PARAMETER(DTL.EA_Kill_Date);
PARAMETER(DTL.EA_Scale_Sequence_Number);
{
 //?Execute internal function

 //?Rtv the record and create a copy of the data with company 999
 EXECUTE FUNCTION(Rtv Rcd and Crt Co 999RT) TYPE(RTVOBJ) FILE(PKCPCPP)           AB1298825;
 PARAMETER(PAR.EA_Company_Number);
 PARAMETER(PAR.EA_Kill_Date);
 PARAMETER(PAR.EA_Scale_Sequence_Number);
 {
  //?USER: Process Data record

  // WRK.Company Number Alpha Usr = CVTVAR(DB1.EA Company Number)
  WRK.Company_Number_Alpha_Usr = CVTVAR(DB1.EA_Company_Number);

  // WRK.Tattoo Nbr Alpha Usr = CVTVAR(DB1.EA Tattoo Number)
  WRK.Tattoo_Nbr_Alpha_Usr = CVTVAR(DB1.EA_Tattoo_Number);

  // WRK.Previous Tattoo Nbr = DB1.EA Tattoo Number
  WRK.Previous_Tattoo_Nbr = DB1.EA_Tattoo_Number;

  // WRK.EA Company Number = CON.999
  WRK.EA_Company_Number = 999;

  EXECUTE FUNCTION(Crt Eval Trans UPL    CR) TYPE(CRTOBJ) FILE(PKCPCPP)           AB1135111;
  PARAMETER(WRK.EA_Company_Number);
  PARAMETER(DB1.EA_Kill_Date);
  PARAMETER(DB1.EA_Scale_Sequence_Number);
  PARAMETER(DB1.EA_Tattoo_Number);
  PARAMETER(DB1.EA_Lot);
  PARAMETER(DB1.EA_Shift);
  PARAMETER(DB1.EA_Hot_Weight);
  PARAMETER(DB1.EA_Backfat_Thickness_Inch);
  PARAMETER(DB1.EA_Loin_Eye_Depth_Inches);
  PARAMETER(DB1.EA_Light_Reflectance);
  PARAMETER(DB1.EA_Trim_Area);
  PARAMETER(DB1.EA_Carcass_Sex);
  PARAMETER(DB1.EA_Record_Created_Status);
  PARAMETER(DB1.EA_Record_Processed);
  PARAMETER(DB1.EA_Backfat_MM);
  PARAMETER(DB1.EA_LoinEye_MM);
  PARAMETER(DB1.EA_Light_Refl_MM);
  PARAMETER(DB1.EA_Trolley_Id);
  PARAMETER(DB1.EA_Broken_Back_Sts);
  PARAMETER(DB1.EA_Unused_Sts_1);
  PARAMETER(DB1.EA_Unused_Sts_2);
  PARAMETER(DB1.EA_Unused_Sts_3);
  PARAMETER(DB1.EA_Unused_Sts_4);
  PARAMETER(DB1.EA_Unused_Sts_5);
  PARAMETER(DB1.EA_Unused_Sts_6);
  PARAMETER(DB1.EA_Unused_Sts_7);
  PARAMETER(DB1.EA_Unused_Sts_8);
  PARAMETER(DB1.RU_Date);
  PARAMETER(DB1.RU_Time);
  EXECUTE FUNCTION(Dlt Eval Trans UPL    DL) TYPE(DLTOBJ) FILE(PKCPCPP)           AB1135113;
  PARAMETER(PAR.EA_Company_Number);
  PARAMETER(PAR.EA_Kill_Date);
  PARAMETER(PAR.EA_Scale_Sequence_Number);
  //?Build message for comment line
  // WRK.EV Comment Line = CON.999
  WRK.EV_Comment_Line = 999;

  EXECUTE FUNCTION(Rtv Next Seq Number   RT) TYPE(RTVOBJ) FILE(PLBAREP)           AB1298843;
  PARAMETER(WRK.EA_Company_Number);
  PARAMETER(PAR.EA_Kill_Date);
  PARAMETER(PAR.EA_Scale_Sequence_Number);
  PARAMETER(WRK.EV_Comment_Line);
  {
   //?USER: Processing if Data record not found

   // PAR.EV Comment Line = PAR.EV Comment Line + CON.1
   PAR.EV_Comment_Line = PAR.EV_Comment_Line + 1;

   CASE;

   // IF PAR.EV Comment Line is comments exist
   IF PAR.EV_Comment_Line > 1;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.EV Comment Line = PAR.EV Comment Line + CON.1
   PAR.EV_Comment_Line = PAR.EV_Comment_Line + 1;

   ENDIF;

   //?USER: Process Data record

   // PAR.EV Comment Line = DB1.EV Comment Line + CON.1
   PAR.EV_Comment_Line = DB1.EV_Comment_Line + 1;

   QUIT;

  }

  // WRK.EV Comment = CONCAT(CON.Co=,WRK.Company Number Alpha Usr,CON.1)
  WRK.EV_Comment = 'Co=' + WRK.Company_Number_Alpha_Usr (1);

  // WRK.EV Comment = CONCAT(WRK.EV Comment,CON.Tattoo=,CON.1)
  WRK.EV_Comment = WRK.EV_Comment + 'Tattoo=' (1);

  // WRK.EV Comment = CONCAT(WRK.EV Comment,WRK.Tattoo Nbr Alpha Usr,CON.1)
  WRK.EV_Comment = WRK.EV_Comment + WRK.Tattoo_Nbr_Alpha_Usr (1);

  // WRK.EV Comment = CONCAT(WRK.EV Comment,CON.Rmv Frm Process,CON.1)
  WRK.EV_Comment = WRK.EV_Comment + 'Rmv Frm Process' (1);

  EXECUTE FUNCTION(Crt Eval Trans Upl Comm) TYPE(CRTOBJ) FILE(PLBAREP)            AB1298826;
  PARAMETER(WRK.EA_Company_Number);
  PARAMETER(PAR.EA_Kill_Date);
  PARAMETER(PAR.EA_Scale_Sequence_Number);
  PARAMETER(WRK.EV_Comment_Line);
  PARAMETER(WRK.EV_Comment);
  PARAMETER('D');
  PARAMETER('RB');
  PARAMETER(PAR.EA_Company_Number);
  PARAMETER(PAR.EA_Kill_Date);
  PARAMETER(WRK.Previous_Tattoo_Nbr);
  PARAMETER(WRK.EA_Company_Number);
  PARAMETER(PAR.EA_Kill_Date);
  PARAMETER(WRK.Previous_Tattoo_Nbr);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp-Sys Dt  IF) TYPE(EXCINTFUN)                      AB1237005;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // Call program Rtv System Date & Tim UP.
    CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
    PARAMETER(PAR.RS_Date_Added);
    PARAMETER(PAR.RS_Time_Added);

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  QUIT;

 }

 //?SUSAN  WILL BE BACK TO HERE
 //?Restart tattoo number for prior data and new data
 //?Remove all of the Eval Trans for this Tattoo Number and this
 //?kill date
 //?Change all of the Eval Trans Upl for this Tattoo number
 //?by moving the value of "N" into the Process flags for this
 //?tattoo number and kill date
}


