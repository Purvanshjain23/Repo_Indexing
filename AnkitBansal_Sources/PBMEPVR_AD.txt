// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBMEPVR
// ?Date: 14.08.2025 Time: 03:48:33
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(LCL.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

//?USER: Load screen

CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// WRK.Date Out = JOB.*Job date + CON.-7 *DAYS
WRK.Date_Out = DATEINCR(JOB.*Job_date '-7' 'DY' 1111111 'NONE' 'N' 1);

//?** Default from and thru dates to Sunday thru Saturday of last week
CASE;

// IF DTL.From Date             USR is Not Entered
IF DTL.From_Date_USR = *ZERO;

EXECUTE FUNCTION(Rtv Prior Sunday      RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1410775;
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.Date_Out);
PARAMETER(DTL.From_Date_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Date Sun USR = DB1.Post to G/L Date
 PAR.Date_Sun_USR = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(RTV Next Saturday      RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1674395;
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.Date_Out);
PARAMETER(DTL.Thru_Date_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Day of Week is Saturday
 IF DB1.Day_of_Week = '7';

 // PAR.Scheduled Ship Date = DB1.Post to G/L Date
 PAR.Scheduled_Ship_Date = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

}


ENDIF;

//?** Default company number if it is zeros
CASE;

// IF DTL.USR Company Number is Equal to zero
IF DTL.USR_Company_Number = *ZERO;

// DTL.USR Company Number = PAR.Company Number
DTL.USR_Company_Number = PAR.Company_Number;

ENDIF;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDIF;

// PAR.Company Number = DTL.USR Company Number
PAR.Company_Number = DTL.USR_Company_Number;

//?USER: Validate fields

//?F4=Prompt, F3=Exit
CASE;

// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

// PAR.Return Code Usr = CND.Submit Cancelled
PAR.Return_Code_Usr = 'USR3649';

//?F4=Prompt, F3=Exit
// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.USR Company Number
IF PGM.*Cursor_field = DTL.USR_Company_Number;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(DTL.USR_Company_Number);

// IF PGM.*Cursor field <IS> DTL.USR Carrier Code
IF PGM.*Cursor_field = DTL.USR_Carrier_Code;

// Call program SEL Active Carrier     SR.
CALL PROGRAM(SEL Active Carrier     SR) ('OMY6SRR');
PARAMETER(DTL.USR_Carrier_Code);

ENDIF;

ENDIF;

//?* Date range must be valid
CASE;

// IF DTL.From Date             USR GT DTL.Thru Date             USR
IF DTL.From_Date_USR > DTL.Thru_Date_USR;

// Send error message - '&1 entered must be equal to or greater than &2.'
ERROR(USR2018);
MSGPARM(DTL.Thru_Date_USR);
MSGPARM(DTL.From_Date_USR);

ENDIF;

//?* Validate company number
CASE;

// IF DTL.USR Company Number is greater than zero
IF DTL.USR_Company_Number > *ZERO;

EXECUTE FUNCTION(Val Company Number    RT) TYPE(RTVOBJ) FILE(CAABREP)           AC1343408;
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'Company not found.'
ERROR(USR2831);
MSGPARM(DTL.USR_Company_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Company Number = DTL.USR Company Number
PAR.Company_Number = DTL.USR_Company_Number;

ENDIF;

ENDIF;

//?USER: User defined action

//?* If Co# is zeros, default to Guymon for fuel surcharge
CASE;

// IF DTL.USR Company Number is greater than zero
IF DTL.USR_Company_Number > *ZERO;

// LCL.Company Number = DTL.USR Company Number
LCL.Company_Number = DTL.USR_Company_Number;

//?* If Co# is zeros, default to Guymon for fuel surcharge
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Company Number = CND.Guymon
LCL.Company_Number = 360;

ENDIF;

//?* Set Salesman Code = Carrier to pass to SQL
CASE;

// IF DTL.USR Carrier Code is entered
IF DTL.USR_Carrier_Code <> *BLANK;

// PAR.Salesperson Code = DTL.USR Carrier Code
PAR.Salesperson_Code = DTL.USR_Carrier_Code;

//?* Set Salesman Code = Carrier to pass to SQL
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Salesperson Code = CND.not entered
PAR.Salesperson_Code = *BLANK;

ENDIF;

//?* Set report type based on fields entered on the screen
CASE;

// IF DTL.USR Company Number is greater than zero
IF DTL.USR_Company_Number > *ZERO;

// AND DTL.USR Carrier Code is entered
AND DTL.USR_Carrier_Code <> *BLANK;

// LCL.Report Type USR = CND.Select 1
LCL.Report_Type_USR = 1;

//?* Set report type based on fields entered on the screen
// IF DTL.USR Company Number is Equal to zero
IF DTL.USR_Company_Number = *ZERO;

// AND DTL.USR Carrier Code is not entered
AND DTL.USR_Carrier_Code = *BLANK;

// LCL.Report Type USR = CND.Select 2
LCL.Report_Type_USR = 2;

//?* Set report type based on fields entered on the screen
// IF DTL.USR Company Number is Equal to zero
IF DTL.USR_Company_Number = *ZERO;

// AND DTL.USR Carrier Code is entered
AND DTL.USR_Carrier_Code <> *BLANK;

// LCL.Report Type USR = CND.Select 3
LCL.Report_Type_USR = 3;

//?* Set report type based on fields entered on the screen
// IF DTL.USR Company Number is greater than zero
IF DTL.USR_Company_Number > *ZERO;

// AND DTL.USR Carrier Code is not entered
AND DTL.USR_Carrier_Code = *BLANK;

// LCL.Report Type USR = CND.Select 4
LCL.Report_Type_USR = 4;

ENDIF;

// Call program RTV Prior Sunday      XF.
CALL PROGRAM(RTV Prior Sunday      XF) ('PBMCXFR');
PARAMETER(LCL.Company_Number);
PARAMETER(DTL.Thru_Date_USR);
PARAMETER(LCL.Date_Sun_USR);

//?* Retrieve fuel surcharge for regular loads
//?* Put FCR Rate Amount into Order Number 1  PASS  USR
EXECUTE FUNCTION(Rtv Fuel SurChrg Rate IF) TYPE(EXCINTFUN)                      AC1627433;
PARAMETER('FUEL');
PARAMETER(LCL.FCR_Rate_Amount);
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Date_Sun_USR);
PARAMETER('R');
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Prior Sunday      RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1410775;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.FCR_Week_Begin_Date);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Day of Week is Sunday
  IF DB1.Day_of_Week = '1';

  // PAR.Date Sun USR = DB1.Post to G/L Date
  PAR.Date_Sun_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

 }

 EXECUTE FUNCTION(Rtv Frt Charge Rate   RT) TYPE(RTVOBJ) FILE(POBBCPP)           AC1627437;
 PARAMETER(PAR.FC_Code);
 PARAMETER(PAR.FCR_Week_Begin_Date);
 PARAMETER(PAR.FCR_Rate_Amount);
 PARAMETER(PAR.Load_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.FCR Rate Amount = DB1.FCR Rate Amount
  PAR.FCR_Rate_Amount = DB1.FCR_Rate_Amount;

  CASE;

  // IF PAR.Load Type is Bulk
  IF PAR.Load_Type = 'B';

  // PAR.FCR Rate Amount = DB1.FCR Rate Amount 2
  PAR.FCR_Rate_Amount = DB1.FCR_Rate_Amount_2;

  ENDIF;

 }

}


//?* Retrieve fuel surcharge for bulk loads
//?* Put FCR Rate Amount 2 into Order Number 2  PASS  USR
EXECUTE FUNCTION(Rtv Fuel SurChrg Rate IF) TYPE(EXCINTFUN)                      AC1627433;
PARAMETER('FUEL');
PARAMETER(LCL.FCR_Rate_Amount_2);
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Date_Sun_USR);
PARAMETER('B');
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Prior Sunday      RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1410775;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.FCR_Week_Begin_Date);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Day of Week is Sunday
  IF DB1.Day_of_Week = '1';

  // PAR.Date Sun USR = DB1.Post to G/L Date
  PAR.Date_Sun_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

 }

 EXECUTE FUNCTION(Rtv Frt Charge Rate   RT) TYPE(RTVOBJ) FILE(POBBCPP)           AC1627437;
 PARAMETER(PAR.FC_Code);
 PARAMETER(PAR.FCR_Week_Begin_Date);
 PARAMETER(PAR.FCR_Rate_Amount);
 PARAMETER(PAR.Load_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.FCR Rate Amount = DB1.FCR Rate Amount
  PAR.FCR_Rate_Amount = DB1.FCR_Rate_Amount;

  CASE;

  // IF PAR.Load Type is Bulk
  IF PAR.Load_Type = 'B';

  // PAR.FCR Rate Amount = DB1.FCR Rate Amount 2
  PAR.FCR_Rate_Amount = DB1.FCR_Rate_Amount_2;

  ENDIF;

 }

}


// PAR.Company Number Pass   USR = DTL.USR Company Number
PAR.Company_Number_Pass_USR = DTL.USR_Company_Number;

// PAR.From Date Pass        USR = DTL.From Date             USR
PAR.From_Date_Pass_USR = DTL.From_Date_USR;

// PAR.Thru Date Pass        USR = DTL.Thru Date             USR
PAR.Thru_Date_Pass_USR = DTL.Thru_Date_USR;

// Call program SBM Exp Fuel/Verify DwnCL.
CALL PROGRAM(SBM Exp Fuel/Verify DwnCL) ('PNXNUPC');
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.From_Date_Pass_USR);
PARAMETER(PAR.Thru_Date_Pass_USR);
PARAMETER(LCL.FCR_Rate_Amount);
PARAMETER(LCL.FCR_Rate_Amount_2);
PARAMETER(PAR.Salesperson_Code);
PARAMETER(LCL.Report_Type_USR);
PARAMETER(DTL.Email_Address);

// Send information message - 'The report has been submitted.'
MESSAGE(USR2720 *INFO);

// PAR.Return Code Usr = CND.Record Found
PAR.Return_Code_Usr = 'RCDFND';

//?USER: Exit program processing

CASE;

// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

// PAR.Return Code Usr = CND.Submit Cancelled
PAR.Return_Code_Usr = 'USR3649';

ENDIF;

