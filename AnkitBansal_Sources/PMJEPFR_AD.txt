// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMJEPFR
// ?Date: 14.08.2025 Time: 12:05:37
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('A/R');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

// WRK.USR Overflow = CND.No
WRK.USR_Overflow = 'N';

//?T8763 01/25/17 DN - Get M3 GL Invoice Post Live Flag.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(PAR.Company_Number);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(NLL.Allow_Multi_Company);
PARAMETER(NLL.Default_Printer);
PARAMETER(NLL.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?RMC change to use M3LIVE instead of M3GLMSC  2.11.22  SDN440
EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(PAR.Company_Number);
PARAMETER('M3LIVE');
PARAMETER(LCL.M3_GL_Invoice_PostLiveUSR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?USER: Record selection processing

//?** Select Broker Code if entered
CASE;

// IF PAR.Broker Code NE DB1.Broker Code
IF PAR.Broker_Code <> DB1.Broker_Code;

// AND PAR.Broker Code is Entered
AND PAR.Broker_Code <> *BLANK;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?** Select Broker Type if entered
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?** Select Broker Type if entered
CASE;

// IF PAR.Payee Type NE DB1.Payee Type
IF PAR.Payee_Type <> DB1.Payee_Type;

// AND PAR.Payee Type is *ALL values
AND PAR.Payee_Type = 'BG'/'BR';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** Select Salesperson Code if entered
CASE;

// IF PAR.Salesperson Code is entered
IF PAR.Salesperson_Code <> *BLANK;

// AND PAR.Salesperson Code NE DB1.Salesperson Code
AND PAR.Salesperson_Code <> DB1.Salesperson_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?** Select Accrual code if entered
CASE;

// IF PAR.Accrual Code is Entered
IF PAR.Accrual_Code <> *BLANK;

//?Does Broker have an accrual with this code?
EXECUTE FUNCTION(Val Accrual for brokr RT) TYPE(RTVOBJ) FILE(OMHOREP)           AC1840057;
PARAMETER(PAR.Accrual_Code);
PARAMETER(WRK.Record_Found_USR);
PARAMETER(DB1.Broker_Code);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Broker Code EQ PAR.Broker Code
 IF DB1.Broker_Code = PAR.Broker_Code;

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF WRK.Record Found USR is Record Found
IF WRK.Record_Found_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?** Select Record Status if entered
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?** Select Record Status if entered
CASE;

// IF PAR.Record Status NE DB1.Record Status
IF PAR.Record_Status <> DB1.Record_Status;

// AND PAR.Record Status is Valid Entries
AND PAR.Record_Status = 'A'/'D'/'I';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: On print of first page format

// 1PG.Payee Type = PAR.Payee Type
X1PG_Payee_Type = PAR.Payee_Type;

// 1PG.Accrual Code = PAR.Accrual Code
X1PG_Accrual_Code = PAR.Accrual_Code;

// 1PG.Record Status = PAR.Record Status
X1PG_Record_Status = PAR.Record_Status;

// 1PG.Broker Code = PAR.Broker Code
X1PG_Broker_Code = PAR.Broker_Code;

// 1PG.Salesperson Code = PAR.Salesperson Code
X1PG_Salesperson_Code = PAR.Salesperson_Code;

// 1PG.Detail/Summary Report Usr = PAR.Detail/Summary Report Usr
X1PG_Detail_Summary_Report_Usr = PAR.Detail_Summary_Report_Usr;

// 1PG.Condition Desc. 6  USR = Condition name of 1PG.Detail/Summary Report Usr
X1PG_Condition_Desc_6_USR = RTVCND(X1PG_Detail_Summary_Report_Usr);

//?** Print Broker Code and name on the 1st page
CASE;

// IF 1PG.Broker Code is Entered
IF X1PG_Broker_Code <> *BLANK;

EXECUTE FUNCTION(Broker Name DRV) TYPE(DRVFLD)                                  AC1675815;
PARAMETER(X1PG_Broker_Name_DRV);
PARAMETER(X1PG_Broker_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Broker Info       RT) TYPE(RTVOBJ) FILE(POC5REP)           AC1675816;
 PARAMETER(*MISSING);
 PARAMETER(PAR.Broker_Name_DRV);
 PARAMETER(NLL.Broker_Address_Line_1);
 PARAMETER(NLL.Broker_Address_Line_2);
 PARAMETER(NLL.Broker_City);
 PARAMETER(NLL.Broker_State);
 PARAMETER(NLL.Broker_Zip);
 PARAMETER(NLL.Broker_Office_Manager);
 PARAMETER(NLL.Broker_Telephone_Number);
 PARAMETER(NLL.Broker_Fax_Number);
 PARAMETER(NLL.Broker_Email_Address);
 PARAMETER(NLL.Broker_G_L_Vendor_Number);
 PARAMETER(NLL.Salesperson_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?** Print Broker Code and name on the 1st page
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Broker Name DRV = CON.All
X1PG_Broker_Name_DRV = 'All';

ENDIF;

//?** Print record status or *All
CASE;

// IF 1PG.Record Status is Valid Entries
IF X1PG_Record_Status = 'A'/'D'/'I';

// 1PG.Description = Condition name of 1PG.Record Status
X1PG_Description = RTVCND(X1PG_Record_Status);

//?** Print record status or *All
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Description = CON.All
X1PG_Description = 'All';

ENDIF;

//?** Print Payee Type or *All
CASE;

// IF 1PG.Payee Type is *ALL values
IF X1PG_Payee_Type = 'BG'/'BR';

// 1PG.Condition Desc. 1  USR = Condition name of 1PG.Payee Type
X1PG_Condition_Desc_1_USR = RTVCND(X1PG_Payee_Type);

//?** Print Payee Type or *All
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Condition Desc. 1  USR = CON.All
X1PG_Condition_Desc_1_USR = 'All';

ENDIF;

//?salesperson name or all
CASE;

// IF 1PG.Salesperson Code is entered
IF X1PG_Salesperson_Code <> *BLANK;

EXECUTE FUNCTION(Salesperson Name DRV) TYPE(DRVFLD)                             AC1828552;
PARAMETER(X1PG_Salesperson_Name_DRV);
PARAMETER(X1PG_Salesperson_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Salesperson NmeOnlyRT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1739999;
 PARAMETER(PAR.Salesperson_Code);
 PARAMETER(PAR.Salesperson_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?salesperson name or all
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Salesperson Name DRV = CON.All
X1PG_Salesperson_Name_DRV = 'All';

ENDIF;

//?Accrual Desc
CASE;

// IF 1PG.Accrual Code is Entered
IF X1PG_Accrual_Code <> *BLANK;

EXECUTE FUNCTION(Accrual Description DRV) TYPE(DRVFLD)                          AC1706268;
PARAMETER(X1PG_Accrual_Description_DRV);
PARAMETER(X1PG_Accrual_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Accrual Descript   RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1285204;
 PARAMETER(PAR.Accrual_Code);
 PARAMETER(PAR.Accrual_Description_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?Accrual Desc
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Accrual Description DRV = CON.All
X1PG_Accrual_Description_DRV = 'All';

ENDIF;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: On print of detail format

// CUR.Condition Desc. 1  USR = Condition name of CUR.Payee Type
CUR.Condition_Desc_1_USR = RTVCND(CUR.Payee_Type);

EXECUTE FUNCTION(Salesperson Name DRV) TYPE(DRVFLD)                             AC1828552;
PARAMETER(CUR.Salesperson_Name_DRV);
PARAMETER(CUR.Salesperson_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Salesperson NmeOnlyRT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1739999;
 PARAMETER(PAR.Salesperson_Code);
 PARAMETER(PAR.Salesperson_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?T8763 01/25/17 DN - Populate M3 or G/L Vendor #.
CASE;

// IF LCL.M3 GL Invoice PostLiveUSR is yes
IF LCL.M3_GL_Invoice_PostLiveUSR = 'Y';

// CUR.Text 10 Heading 1 USR = CON. M3 Vendor
CUR.Text_10_Heading_1_USR = 'M3 Vendor';

// LCL.Text 10A USR = CUR.Broker M3 Supplier
LCL.Text_10A_USR = CUR.Broker_M3_Supplier;

// CUR.M3 or G/L Vendor # USR = CVTVAR(LCL.Text 10A USR)
CUR.M3_or_G_L_Vendor_#_USR = CVTVAR(LCL.Text_10A_USR);

//?T8763 01/25/17 DN - Populate M3 or G/L Vendor #.
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Text 10 Heading 1 USR = CON.G/L Vendor
CUR.Text_10_Heading_1_USR = 'G/L Vendor';

// CUR.M3 or G/L Vendor # USR = CUR.Broker G/L Vendor Number
CUR.M3_or_G_L_Vendor_#_USR = CUR.Broker_G_L_Vendor_Number;

ENDIF;

//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : Prt Broker Custs      POx
EXECUTE FUNCTION(Prt Broker Custs      PO) TYPE(PRTOBJ);
PARAMETER(CUR.Broker_Code);
PARAMETER(CUR.Broker_Name);
PARAMETER(PAR.Accrual_Code);
PARAMETER(PAR.Detail_Summary_Report_Usr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Embedded PRTOBJ : PRT ACDtl-BrkrExhbts   PO
EXECUTE FUNCTION(PRT ACDtl-BrkrExhbts   PO) TYPE(PRTOBJ);
PARAMETER('I');
PARAMETER(*BLANK);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Embedded PRTOBJ : PRT ACD Str-BrkrExhbts PO
EXECUTE FUNCTION(PRT ACD Str-BrkrExhbts PO) TYPE(PRTOBJ);
PARAMETER(*BLANK);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Process after print of detail format

EXECUTE FUNCTION(DLT Acr Stand Schd ExcpDL) TYPE(DLTOBJ) ARRAY(ARY_Acrl_Stand_ScAC1833535;

